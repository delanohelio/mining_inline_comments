{"pr_number": 2490, "pr_title": "Some improvements for the FrontEndScanner", "pr_createdAt": "2020-07-08T01:26:09Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2490", "timeline": [{"oid": "2e004e219ec2a72a9fa047e498b86069fcb00ce1", "url": "https://github.com/zaproxy/zap-extensions/commit/2e004e219ec2a72a9fa047e498b86069fcb00ce1", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-08T01:27:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDQ3Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451244477", "bodyText": "Should a head be injected before the body start tag if one doesn't exist or would that break other things?", "author": "kingthorin", "createdAt": "2020-07-08T02:21:27Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.awt.EventQueue;\n+import java.awt.event.ItemEvent;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.swing.ImageIcon;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/**\n+ * The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on.\n+ */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private Logger LOGGER;\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options, Logger logger) {\n+        this.api = api;\n+        this.options = options;\n+        this.LOGGER = logger;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (head != null && msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    StringBuilder injectedContentBuilder =\n+                            new StringBuilder(200)\n+                                    .append(\"<script src='\")\n+                                    .append(frontEndApiUrl)\n+                                    .append(\"?action=getFile\")\n+                                    .append(\"&filename=front-end-scanner.js\")\n+                                    .append(\"&historyReferenceId=\")\n+                                    .append(historyReferenceId)\n+                                    .append(\"'></script>\");\n+\n+                    String injectedContent = injectedContentBuilder.toString();\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = head.getChildElements().get(0).getBegin();\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+                } else {\n+                    LOGGER.debug(\"<head></head> is missing in the response\");", "originalCommit": "cd4c2e3273125e17e69971c17ba490cac16a8198", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NjA1NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451256054", "bodyText": "I don't think it would... I will give it a try.\nAs this code was already written (most of the content from FrontEndScannerProxyListener has been copy-pasted from ExtensionFrontEndScanner), and no issues were mentioning that, I did not touch it.\nBut more generally, it could be taking these two cases into consideration:\n\nno <head> present;\nempty <head>.", "author": "Pamplemousse", "createdAt": "2020-07-08T03:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "af1f825ad9ea8111b82e85bd59b0cc466d3941a6", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex c4929c133..777bdbba8 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -19,17 +19,7 @@\n  */\n package org.zaproxy.zap.extension.frontendscanner;\n \n-import java.awt.EventQueue;\n-import java.awt.event.ItemEvent;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.NoSuchFileException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import javax.swing.ImageIcon;\n import net.htmlparser.jericho.Element;\n import net.htmlparser.jericho.OutputDocument;\n import net.htmlparser.jericho.Source;\n"}}, {"oid": "af1f825ad9ea8111b82e85bd59b0cc466d3941a6", "url": "https://github.com/zaproxy/zap-extensions/commit/af1f825ad9ea8111b82e85bd59b0cc466d3941a6", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-08T02:57:31Z", "type": "forcePushed"}, {"oid": "dee521cb49f6184dbc55162c2bc19154dcefd720", "url": "https://github.com/zaproxy/zap-extensions/commit/dee521cb49f6184dbc55162c2bc19154dcefd720", "message": "frontendscanner: Deal with absent and empty `<head>`", "committedDate": "2020-07-08T03:37:04Z", "type": "forcePushed"}, {"oid": "069561123783819c651e075b87f6a2f7d084b778", "url": "https://github.com/zaproxy/zap-extensions/commit/069561123783819c651e075b87f6a2f7d084b778", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-08T14:16:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MjQ1Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451642456", "bodyText": "It seems a little strange to pass the LOGGER. Is there any reason the listener shouldn't have it's own LOGGER constant?", "author": "kingthorin", "createdAt": "2020-07-08T15:41:52Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/ExtensionFrontEndScanner.java", "diffHunk": "@@ -105,6 +99,8 @@ public void init() {\n         this.api = new FrontEndScannerAPI(this);\n         this.api.addApiOptions(options);\n \n+        this.proxyListener = new FrontEndScannerProxyListener(api, options, LOGGER);", "originalCommit": "069561123783819c651e075b87f6a2f7d084b778", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2OTk3NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451669974", "bodyText": "I wasn't too sure what the output would look like, and I felt using the extension LOGGER would stay consistent with how it currently works.\nI don't really have an opinion about it; Can definitely be changed if it's a smell.\nShould the FrontEndScannerProxyListener have its own LOGGER then?", "author": "Pamplemousse", "createdAt": "2020-07-08T16:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MjQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NDI4NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451684285", "bodyText": "Yes, otherwise the log statements are misleading (logged with one class name while they are in another).", "author": "thc202", "createdAt": "2020-07-08T16:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MjQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/ExtensionFrontEndScanner.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/ExtensionFrontEndScanner.java\nindex 0da7cecc9..304d3ee03 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/ExtensionFrontEndScanner.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/ExtensionFrontEndScanner.java\n\n@@ -99,7 +99,7 @@ public class ExtensionFrontEndScanner extends ExtensionAdaptor {\n         this.api = new FrontEndScannerAPI(this);\n         this.api.addApiOptions(options);\n \n-        this.proxyListener = new FrontEndScannerProxyListener(api, options, LOGGER);\n+        this.proxyListener = new FrontEndScannerProxyListener(api, options);\n \n         this.extensionScript =\n                 Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MzczOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451643738", "bodyText": "Aren't these only needed in the Extension?", "author": "kingthorin", "createdAt": "2020-07-08T15:43:51Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private Logger LOGGER;\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(\n+            FrontEndScannerAPI api, FrontEndScannerOptions options, Logger logger) {\n+        this.api = api;\n+        this.options = options;", "originalCommit": "069561123783819c651e075b87f6a2f7d084b778", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY3MjU5OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451672598", "bodyText": "Actually, no: The onHttpResponseReceive has a check using it.\nOn that note, I\u00a0think I remember seeing a this.isEnabled() (in the ExtensionFrontEndScanner), but it's returned value was not always the same that the options.isEnabled().\nWhat's the difference?", "author": "Pamplemousse", "createdAt": "2020-07-08T16:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MzczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NDU0OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451684548", "bodyText": "An extension can be enabled/disabled by the user, which is different than that option.", "author": "thc202", "createdAt": "2020-07-08T16:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MzczOA=="}], "type": "inlineReview", "revised_code": {"commit": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex d5ad3065e..f7e004ab8 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -31,7 +31,7 @@ import org.zaproxy.zap.extension.api.API;\n \n /** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n public class FrontEndScannerProxyListener implements ProxyListener {\n-    private Logger LOGGER;\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n     private FrontEndScannerAPI api;\n     private FrontEndScannerOptions options;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDk1MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451644950", "bodyText": "Should this bail if there is no host header (or HTTP 1.0/ HTTP 0.9)?", "author": "kingthorin", "createdAt": "2020-07-08T15:45:38Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private Logger LOGGER;\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(\n+            FrontEndScannerAPI api, FrontEndScannerOptions options, Logger logger) {\n+        this.api = api;\n+        this.options = options;\n+        this.LOGGER = logger;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");", "originalCommit": "069561123783819c651e075b87f6a2f7d084b778", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY3NTI5Mw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451675293", "bodyText": "Dunno.\nThis code is refactored (copied) from the ExtensionFrontEndScanner, and I did not mean to solve / improve anything else than the issues I was focusing on.", "author": "Pamplemousse", "createdAt": "2020-07-08T16:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NDY1OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451684659", "bodyText": "It would be better with getHostName() though.", "author": "thc202", "createdAt": "2020-07-08T16:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzI4NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451833284", "bodyText": "It does not work (out-of-the-box):\nI tried replacing String host = msg.getRequestHeader().getHeader(\"host\"); with String host = msg.getRequestHeader().getHostName(); , but most tests failed in consequence.\nWhen trying to investigate, it seemed that getHostName() was somewhat failing and shortcutting the rest of the onHttpReceiveMethod (raising an issue).\nSadly, I don't have time right now to dwelve more into that... Unless you have hints about this behavior, I will continue looking into that tomorrow.", "author": "Pamplemousse", "createdAt": "2020-07-08T21:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTcxNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451835717", "bodyText": "Pretty sure that because your messages don\u2019t have an actual request object.", "author": "kingthorin", "createdAt": "2020-07-08T21:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNjEyNQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451836125", "bodyText": "I\u2019ll check it out this evening and let you know.", "author": "kingthorin", "createdAt": "2020-07-08T21:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3OTc1NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451879755", "bodyText": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex f7e004a..1b08838 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n@@ -61,7 +61,7 @@\n                 Element head = heads.isEmpty() ? null : heads.get(0);\n \n                 if (msg.getHistoryRef() != null) {\n-                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String host = msg.getRequestHeader().getHostName();\n                     String frontEndApiUrl =\n                             API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n \ndiff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex ceac451..6c5bb42 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n@@ -24,11 +24,14 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpResponseHeader;\n import org.zaproxy.zap.testutils.TestUtils;\n@@ -36,12 +39,12 @@\n /** Unit test for {@link FrontEndScannerProxyListener}. */\n public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n \n+    private static final String HOSTNAME = \"example.com\";\n     FrontEndScannerProxyListener frontEndScannerProxyListener;\n     HttpMessage msg;\n-    String hostname = \"example.com\";\n \n     @BeforeEach\n-    public void setUp() {\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n         Logger rootLogger = Logger.getRootLogger();\n         rootLogger.setLevel(Level.OFF);\n \n@@ -54,8 +57,8 @@\n \n         frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options);\n \n-        msg = new HttpMessage();\n-        msg.getRequestHeader().setHeader(\"Host\", hostname);\n+        msg = new HttpMessage(new URI(\"https\",HOSTNAME,\"/\",\"\"));\n+        msg.getRequestHeader().setHeader(\"Host\", HOSTNAME); // Could be removed\n         msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n         msg.setHistoryRef(ref);\n     }\n@@ -72,7 +75,7 @@\n         // Then\n         String expectedHtmlFormat =\n                 \"<head><script src='https:\\\\/\\\\/\"\n-                        + hostname\n+                        + HOSTNAME\n                         + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body>\";\n         String result = msg.getResponseBody().toString();\n \n@@ -91,7 +94,7 @@\n         // Then\n         String expectedHtmlFormat =\n                 \"<head><meta><script src='https:\\\\/\\\\/\"\n-                        + hostname\n+                        + HOSTNAME\n                         + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body>\";\n         String result = msg.getResponseBody().toString();\n \n@@ -148,7 +151,7 @@\n         // Then\n         String expectedHtmlFormat =\n                 \"<head><script src='https:\\\\/\\\\/\"\n-                        + hostname\n+                        + HOSTNAME\n                         + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body>\";\n         String result = msg.getResponseBody().toString();\nNote for that patch the UnitTest was moved with \"extension\" in the package designation singular (not plural).", "author": "kingthorin", "createdAt": "2020-07-08T23:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex d5ad3065e..f7e004ab8 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -31,7 +31,7 @@ import org.zaproxy.zap.extension.api.API;\n \n /** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n public class FrontEndScannerProxyListener implements ProxyListener {\n-    private Logger LOGGER;\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n     private FrontEndScannerAPI api;\n     private FrontEndScannerOptions options;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTM2MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451651361", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n          \n          \n            \n            /** Unit test for {@link FrontEndScannerProxyListener}. */", "author": "kingthorin", "createdAt": "2020-07-08T15:54:50Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */", "originalCommit": "069561123783819c651e075b87f6a2f7d084b778", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nsimilarity index 77%\nrename from addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java\nrename to addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex 1b0f91c1f..ceac45137 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -33,14 +33,18 @@ import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpResponseHeader;\n import org.zaproxy.zap.testutils.TestUtils;\n \n-/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n-public class FrontEndScannerProxyListenerTest extends TestUtils {\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n \n     FrontEndScannerProxyListener frontEndScannerProxyListener;\n     HttpMessage msg;\n+    String hostname = \"example.com\";\n \n     @BeforeEach\n     public void setUp() {\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);\n+\n         FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n         FrontEndScannerOptions options = mock(FrontEndScannerOptions.class);\n         when(options.isEnabled()).thenReturn(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTUxNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451651517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class FrontEndScannerProxyListenerTest extends TestUtils {\n          \n          \n            \n            public class FrontEndScannerProxyListenerUnitTest extends TestUtils {", "author": "kingthorin", "createdAt": "2020-07-08T15:55:05Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerTest extends TestUtils {", "originalCommit": "069561123783819c651e075b87f6a2f7d084b778", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nsimilarity index 77%\nrename from addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java\nrename to addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex 1b0f91c1f..ceac45137 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -33,14 +33,18 @@ import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpResponseHeader;\n import org.zaproxy.zap.testutils.TestUtils;\n \n-/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n-public class FrontEndScannerProxyListenerTest extends TestUtils {\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n \n     FrontEndScannerProxyListener frontEndScannerProxyListener;\n     HttpMessage msg;\n+    String hostname = \"example.com\";\n \n     @BeforeEach\n     public void setUp() {\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);\n+\n         FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n         FrontEndScannerOptions options = mock(FrontEndScannerOptions.class);\n         when(options.isEnabled()).thenReturn(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1NzU2Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451657566", "bodyText": "These are null host because there's no request object?", "author": "kingthorin", "createdAt": "2020-07-08T16:04:12Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerTest extends TestUtils {\n+\n+    FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n+        FrontEndScannerOptions options = mock(FrontEndScannerOptions.class);\n+        when(options.isEnabled()).thenReturn(true);\n+\n+        HistoryReference ref = mock(HistoryReference.class);\n+        when(ref.getHistoryId()).thenReturn(42);\n+\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);\n+\n+        frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options, rootLogger);\n+\n+        msg = new HttpMessage();\n+        msg.setHistoryRef(ref);\n+    }\n+\n+    @Test\n+    public void testInjectTheFrontEndTrackerBeforeOtherScriptsInHeadTag() {\n+        // Given\n+        String htmlBody = \"<head><script></script></head><body></body>\";\n+        msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<head><script src='https:\\\\/\\\\/null\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body>\";", "originalCommit": "069561123783819c651e075b87f6a2f7d084b778", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyOTkyNA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451829924", "bodyText": "It's null because the host header was not set. I updated the setUp so it's more explicit.", "author": "Pamplemousse", "createdAt": "2020-07-08T21:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1NzU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nsimilarity index 77%\nrename from addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java\nrename to addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex 1b0f91c1f..ceac45137 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -33,14 +33,18 @@ import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpResponseHeader;\n import org.zaproxy.zap.testutils.TestUtils;\n \n-/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n-public class FrontEndScannerProxyListenerTest extends TestUtils {\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n \n     FrontEndScannerProxyListener frontEndScannerProxyListener;\n     HttpMessage msg;\n+    String hostname = \"example.com\";\n \n     @BeforeEach\n     public void setUp() {\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);\n+\n         FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n         FrontEndScannerOptions options = mock(FrontEndScannerOptions.class);\n         when(options.isEnabled()).thenReturn(true);\n"}}, {"oid": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "url": "https://github.com/zaproxy/zap-extensions/commit/9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-08T21:18:28Z", "type": "forcePushed"}, {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "url": "https://github.com/zaproxy/zap-extensions/commit/2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-09T03:23:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjU1Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453766556", "bodyText": "final", "author": "thc202", "createdAt": "2020-07-13T16:14:20Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNTA0OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453835048", "bodyText": "Should it be final in ExtensionFrontEndScanner.java too?\nWhat about api here?\nAnd what about api, and proxyListener in ExtensionFrontEndScanner.java?", "author": "Pamplemousse", "createdAt": "2020-07-13T18:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0NDUzNg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453844536", "bodyText": "The comment is for both lines.\nIn the extension they can't be as they are not being initialised in the constructor.", "author": "thc202", "createdAt": "2020-07-13T18:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex f7e004ab8..332d4c5a0 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -33,8 +33,8 @@ import org.zaproxy.zap.extension.api.API;\n public class FrontEndScannerProxyListener implements ProxyListener {\n     private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n-    private FrontEndScannerAPI api;\n-    private FrontEndScannerOptions options;\n+    private final FrontEndScannerAPI api;\n+    private final FrontEndScannerOptions options;\n \n     private static final String[] CSP_HEADERS = {\n         \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjU5Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453766597", "bodyText": "static", "author": "thc202", "createdAt": "2020-07-13T16:14:24Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex f7e004ab8..332d4c5a0 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -33,8 +33,8 @@ import org.zaproxy.zap.extension.api.API;\n public class FrontEndScannerProxyListener implements ProxyListener {\n     private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n-    private FrontEndScannerAPI api;\n-    private FrontEndScannerOptions options;\n+    private final FrontEndScannerAPI api;\n+    private final FrontEndScannerOptions options;\n \n     private static final String[] CSP_HEADERS = {\n         \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjYzMA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453766630", "bodyText": "numberOfChildren", "author": "thc202", "createdAt": "2020-07-13T16:14:27Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {\n+        // The payload needs to be inserted in front of as many elements as possible;\n+        // But still after the `<meta>` tag (if there is any).\n+        if (head == null) {\n+            return 0;\n+        }\n+\n+        List<Element> headChildren = head.getChildElements();\n+        int numberOfChilden = headChildren.size();", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex f7e004ab8..332d4c5a0 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -33,8 +33,8 @@ import org.zaproxy.zap.extension.api.API;\n public class FrontEndScannerProxyListener implements ProxyListener {\n     private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n-    private FrontEndScannerAPI api;\n-    private FrontEndScannerOptions options;\n+    private final FrontEndScannerAPI api;\n+    private final FrontEndScannerOptions options;\n \n     private static final String[] CSP_HEADERS = {\n         \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2Njk4Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453766987", "bodyText": "head.getStartTag().getEnd()?\nCould you add a test with <head> not at the start? e.g.:\n<!doctype html>\n<html lang=\"en\">\n\n<head>", "author": "thc202", "createdAt": "2020-07-13T16:15:02Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {\n+        // The payload needs to be inserted in front of as many elements as possible;\n+        // But still after the `<meta>` tag (if there is any).\n+        if (head == null) {\n+            return 0;\n+        }\n+\n+        List<Element> headChildren = head.getChildElements();\n+        int numberOfChilden = headChildren.size();\n+\n+        if (numberOfChilden == 0) {\n+            return \"<head>\".length();", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex f7e004ab8..332d4c5a0 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -33,8 +33,8 @@ import org.zaproxy.zap.extension.api.API;\n public class FrontEndScannerProxyListener implements ProxyListener {\n     private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n-    private FrontEndScannerAPI api;\n-    private FrontEndScannerOptions options;\n+    private final FrontEndScannerAPI api;\n+    private final FrontEndScannerOptions options;\n \n     private static final String[] CSP_HEADERS = {\n         \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NzA1MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453767051", "bodyText": "static", "author": "thc202", "createdAt": "2020-07-13T16:15:07Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {\n+        // The payload needs to be inserted in front of as many elements as possible;\n+        // But still after the `<meta>` tag (if there is any).\n+        if (head == null) {\n+            return 0;\n+        }\n+\n+        List<Element> headChildren = head.getChildElements();\n+        int numberOfChilden = headChildren.size();\n+\n+        if (numberOfChilden == 0) {\n+            return \"<head>\".length();\n+        }\n+\n+        List<Element> metaElements = head.getAllElements(\"meta\");\n+        int numberOfMetaTags = metaElements.size();\n+\n+        if (numberOfMetaTags == 0) {\n+            return head.getChildElements().get(0).getBegin();\n+        } else {\n+            return metaElements.get(numberOfMetaTags - 1).getEnd();\n+        }\n+    }\n+\n+    private String getInjectedContent(String frontEndApiUrl, Element head, int historyReferenceId) {", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex f7e004ab8..332d4c5a0 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -33,8 +33,8 @@ import org.zaproxy.zap.extension.api.API;\n public class FrontEndScannerProxyListener implements ProxyListener {\n     private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n-    private FrontEndScannerAPI api;\n-    private FrontEndScannerOptions options;\n+    private final FrontEndScannerAPI api;\n+    private final FrontEndScannerOptions options;\n \n     private static final String[] CSP_HEADERS = {\n         \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NzI3MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453767270", "bodyText": "It would be more clear with a parameterized test, all headers would be tested regardless of one failing and the one failing would be more obvious.\nCould you move to before (or after) the tests that are checking the injections?", "author": "thc202", "createdAt": "2020-07-13T16:15:28Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);\n+\n+        FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n+        FrontEndScannerOptions options = mock(FrontEndScannerOptions.class);\n+        when(options.isEnabled()).thenReturn(true);\n+\n+        HistoryReference ref = mock(HistoryReference.class);\n+        when(ref.getHistoryId()).thenReturn(42);\n+\n+        frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options);\n+\n+        msg = new HttpMessage(new URI(\"https\", HOSTNAME, \"/\", \"\"));\n+        msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n+        msg.setHistoryRef(ref);\n+    }\n+\n+    @Test\n+    public void testInjectTheFrontEndTrackerBeforeOtherScriptsInHeadTag() {\n+        // Given\n+        String htmlBody = \"<head><script></script></head><body></body>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterMetaTagInHeadTag() {\n+        // Given\n+        String htmlBody = \"<head><meta></head><body></body>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<head><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testRemovesCSPFromHttpResponsesIfInjecting() {", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex d2ead7645..3d3b1f771 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -19,17 +19,20 @@\n  */\n package org.zaproxy.zap.extension.frontendscanner;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n \n import org.apache.commons.httpclient.URI;\n import org.apache.commons.httpclient.URIException;\n-import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n import org.parosproxy.paros.model.HistoryReference;\n import org.parosproxy.paros.network.HttpMalformedHeaderException;\n import org.parosproxy.paros.network.HttpMessage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2ODczOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453768738", "bodyText": "Could you add a test with several meta tags?", "author": "thc202", "createdAt": "2020-07-13T16:17:46Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {\n+        // The payload needs to be inserted in front of as many elements as possible;\n+        // But still after the `<meta>` tag (if there is any).\n+        if (head == null) {\n+            return 0;\n+        }\n+\n+        List<Element> headChildren = head.getChildElements();\n+        int numberOfChilden = headChildren.size();\n+\n+        if (numberOfChilden == 0) {\n+            return \"<head>\".length();\n+        }\n+\n+        List<Element> metaElements = head.getAllElements(\"meta\");\n+        int numberOfMetaTags = metaElements.size();\n+\n+        if (numberOfMetaTags == 0) {\n+            return head.getChildElements().get(0).getBegin();\n+        } else {\n+            return metaElements.get(numberOfMetaTags - 1).getEnd();", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex f7e004ab8..332d4c5a0 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -33,8 +33,8 @@ import org.zaproxy.zap.extension.api.API;\n public class FrontEndScannerProxyListener implements ProxyListener {\n     private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n-    private FrontEndScannerAPI api;\n-    private FrontEndScannerOptions options;\n+    private final FrontEndScannerAPI api;\n+    private final FrontEndScannerOptions options;\n \n     private static final String[] CSP_HEADERS = {\n         \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2OTg2Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453769867", "bodyText": "Could you add tests for when not enabled? (One for the CSP headers that should not be removed and another that the content remains the same.)", "author": "thc202", "createdAt": "2020-07-13T16:19:36Z", "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\nindex f7e004ab8..332d4c5a0 100644\n--- a/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n+++ b/addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java\n\n@@ -33,8 +33,8 @@ import org.zaproxy.zap.extension.api.API;\n public class FrontEndScannerProxyListener implements ProxyListener {\n     private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n \n-    private FrontEndScannerAPI api;\n-    private FrontEndScannerOptions options;\n+    private final FrontEndScannerAPI api;\n+    private final FrontEndScannerOptions options;\n \n     private static final String[] CSP_HEADERS = {\n         \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MDA1Mw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453770053", "bodyText": "private", "author": "thc202", "createdAt": "2020-07-13T16:19:52Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    HttpMessage msg;", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex d2ead7645..3d3b1f771 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -19,17 +19,20 @@\n  */\n package org.zaproxy.zap.extension.frontendscanner;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n \n import org.apache.commons.httpclient.URI;\n import org.apache.commons.httpclient.URIException;\n-import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n import org.parosproxy.paros.model.HistoryReference;\n import org.parosproxy.paros.network.HttpMalformedHeaderException;\n import org.parosproxy.paros.network.HttpMessage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MDQ0Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453770446", "bodyText": "Would be better to not turn off, this affects all tests.", "author": "thc202", "createdAt": "2020-07-13T16:20:30Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);", "originalCommit": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex d2ead7645..3d3b1f771 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -19,17 +19,20 @@\n  */\n package org.zaproxy.zap.extension.frontendscanner;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n \n import org.apache.commons.httpclient.URI;\n import org.apache.commons.httpclient.URIException;\n-import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n import org.parosproxy.paros.model.HistoryReference;\n import org.parosproxy.paros.network.HttpMalformedHeaderException;\n import org.parosproxy.paros.network.HttpMessage;\n"}}, {"oid": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "url": "https://github.com/zaproxy/zap-extensions/commit/a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "message": "frontendscanner: Test when disabled in `options`\n\n  * ensure html is not modified\n  * ensure CSP headers are untouched\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-19T17:58:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1OTM4Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r457259382", "bodyText": "Could be removed, no longer used.", "author": "thc202", "createdAt": "2020-07-20T10:26:51Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    private FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    private FrontEndScannerOptions options;\n+    private HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();", "originalCommit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b70a8045952e13999ba644d08d984897894d4c8b", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex 3d3b1f771..ef4cf78fb 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -19,20 +19,14 @@\n  */\n package org.zaproxy.zap.extension.frontendscanner;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n-import static org.mockito.Mockito.withSettings;\n \n import org.apache.commons.httpclient.URI;\n import org.apache.commons.httpclient.URIException;\n-import org.apache.log4j.Logger;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n import org.parosproxy.paros.model.HistoryReference;\n import org.parosproxy.paros.network.HttpMalformedHeaderException;\n import org.parosproxy.paros.network.HttpMessage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1OTQyMQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r457259421", "bodyText": "Was the closing head at the end on purpose?", "author": "thc202", "createdAt": "2020-07-20T10:26:55Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    private FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    private FrontEndScannerOptions options;\n+    private HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();\n+\n+        FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n+        options = mock(FrontEndScannerOptions.class);\n+\n+        HistoryReference ref = mock(HistoryReference.class, withSettings().lenient());\n+        when(ref.getHistoryId()).thenReturn(42);\n+\n+        frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options);\n+\n+        msg = new HttpMessage(new URI(\"https\", HOSTNAME, \"/\", \"\"));\n+        msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n+        msg.setHistoryRef(ref);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"})\n+    public void testRemovesCSPFromHttpResponsesIfInjecting(String header) {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><script></script></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        msg.getResponseHeader().setHeader(header, \"value\");\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String result = msg.getResponseHeader().getHeader(header);\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void testInjectTheFrontEndTrackerBeforeOtherScriptsInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><script></script></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterMetaTagInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><head><meta></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterAllMetaTagsInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><meta><meta></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><meta><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectionShouldBeSuccessfulWithoutHead() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><body></body></head>\";", "originalCommit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b70a8045952e13999ba644d08d984897894d4c8b", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex 3d3b1f771..ef4cf78fb 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -19,20 +19,14 @@\n  */\n package org.zaproxy.zap.extension.frontendscanner;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n-import static org.mockito.Mockito.withSettings;\n \n import org.apache.commons.httpclient.URI;\n import org.apache.commons.httpclient.URIException;\n-import org.apache.log4j.Logger;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n import org.parosproxy.paros.model.HistoryReference;\n import org.parosproxy.paros.network.HttpMalformedHeaderException;\n import org.parosproxy.paros.network.HttpMessage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2OTg2Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r457269867", "bodyText": "This one is now somewhat redundant with the other tests, now that all are using the head not at the start. Would be great to restore one of the previous tests that had just head to keep covering that part.", "author": "thc202", "createdAt": "2020-07-20T10:43:22Z", "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    private FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    private FrontEndScannerOptions options;\n+    private HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();\n+\n+        FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n+        options = mock(FrontEndScannerOptions.class);\n+\n+        HistoryReference ref = mock(HistoryReference.class, withSettings().lenient());\n+        when(ref.getHistoryId()).thenReturn(42);\n+\n+        frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options);\n+\n+        msg = new HttpMessage(new URI(\"https\", HOSTNAME, \"/\", \"\"));\n+        msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n+        msg.setHistoryRef(ref);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"})\n+    public void testRemovesCSPFromHttpResponsesIfInjecting(String header) {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><script></script></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        msg.getResponseHeader().setHeader(header, \"value\");\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String result = msg.getResponseHeader().getHeader(header);\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void testInjectTheFrontEndTrackerBeforeOtherScriptsInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><script></script></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterMetaTagInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><head><meta></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterAllMetaTagsInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><meta><meta></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><meta><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectionShouldBeSuccessfulWithoutHead() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><body></body></head>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></head>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectionShouldBeSuccessfulWithEmptyHead() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><head></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectionShouldBeSuccessfulWithHeadNotAtTheStartOfHtml() {", "originalCommit": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b70a8045952e13999ba644d08d984897894d4c8b", "chunk": "diff --git a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\nindex 3d3b1f771..ef4cf78fb 100644\n--- a/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n+++ b/addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java\n\n@@ -19,20 +19,14 @@\n  */\n package org.zaproxy.zap.extension.frontendscanner;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n-import static org.mockito.Mockito.withSettings;\n \n import org.apache.commons.httpclient.URI;\n import org.apache.commons.httpclient.URIException;\n-import org.apache.log4j.Logger;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n import org.parosproxy.paros.model.HistoryReference;\n import org.parosproxy.paros.network.HttpMalformedHeaderException;\n import org.parosproxy.paros.network.HttpMessage;\n"}}, {"oid": "b70a8045952e13999ba644d08d984897894d4c8b", "url": "https://github.com/zaproxy/zap-extensions/commit/b70a8045952e13999ba644d08d984897894d4c8b", "message": "frontendscanner: Add some unit tests\n\nTo validate the behavior of `onHttpResponseReceive`.\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-20T15:13:08Z", "type": "commit"}, {"oid": "7db17b46e64ae91d097654cf06870ed40e652688", "url": "https://github.com/zaproxy/zap-extensions/commit/7db17b46e64ae91d097654cf06870ed40e652688", "message": "frontendscanner: Insert payload after `<meta>`\n\nCloses zaproxy/zaproxy#4897 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-20T15:13:09Z", "type": "commit"}, {"oid": "57ad809936d967254189466144eea8de6971503d", "url": "https://github.com/zaproxy/zap-extensions/commit/57ad809936d967254189466144eea8de6971503d", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-20T15:13:09Z", "type": "commit"}, {"oid": "fcfc73f5e316f57dc9f6bf500eeaec86ec1a8785", "url": "https://github.com/zaproxy/zap-extensions/commit/fcfc73f5e316f57dc9f6bf500eeaec86ec1a8785", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-20T15:23:36Z", "type": "commit"}, {"oid": "fa5f755ba553e4b9f7cf90e0957ffde7980eca96", "url": "https://github.com/zaproxy/zap-extensions/commit/fa5f755ba553e4b9f7cf90e0957ffde7980eca96", "message": "frontendscanner: Test when disabled in `options`\n\n  * ensure html is not modified\n  * ensure CSP headers are untouched\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-20T15:24:15Z", "type": "commit"}, {"oid": "fa5f755ba553e4b9f7cf90e0957ffde7980eca96", "url": "https://github.com/zaproxy/zap-extensions/commit/fa5f755ba553e4b9f7cf90e0957ffde7980eca96", "message": "frontendscanner: Test when disabled in `options`\n\n  * ensure html is not modified\n  * ensure CSP headers are untouched\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>", "committedDate": "2020-07-20T15:24:15Z", "type": "forcePushed"}]}