{"pr_number": 2547, "pr_title": "Alpha Scan Rule: Cross-Origin Resource Policy Header", "pr_createdAt": "2020-09-19T12:36:58Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2547", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQyOTk1Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r491429957", "bodyText": "Rename the single to corpsHeader so that there's no confusion with CORS?", "author": "kingthorin", "createdAt": "2020-09-19T13:11:03Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Cross-Origin-Resource-Policy Scan Rule\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ */\n+public class CorpScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.corp.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+    public static final String CROSS_ORIGIN_RESOURCE_POLICY_HEADER = \"Cross-Origin-Resource-Policy\";\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        List<String> corpHeaders =\n+                msg.getResponseHeader()\n+                        .getHeaderValues(CorpScanRule.CROSS_ORIGIN_RESOURCE_POLICY_HEADER);\n+        if (corpHeaders.isEmpty()) {\n+            raiseAlert(msg, \"\");\n+        }\n+        for (String corsHeader : corpHeaders) {", "originalCommit": "a87d510b190d35ea12c80109be8013d682340242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8732b7859909067ceee77b750809ac55a7c7b0dd", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\nindex 279a170f0..cd9134d44 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\n\n@@ -49,11 +49,11 @@ public class CorpScanRule extends PluginPassiveScanner {\n         if (corpHeaders.isEmpty()) {\n             raiseAlert(msg, \"\");\n         }\n-        for (String corsHeader : corpHeaders) {\n-            if (\"same-site\".equalsIgnoreCase(corsHeader)\n-                    || !(\"same-origin\".equalsIgnoreCase(corsHeader)\n-                            || \"cross-origin\".equalsIgnoreCase(corsHeader))) {\n-                raiseAlert(msg, corsHeader);\n+        for (String corpHeader : corpHeaders) {\n+            if (\"same-site\".equalsIgnoreCase(corpHeader)\n+                    || !(\"same-origin\".equalsIgnoreCase(corpHeader)\n+                            || \"cross-origin\".equalsIgnoreCase(corpHeader))) {\n+                raiseAlert(msg, corpHeader);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQzMzQ0NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r491433445", "bodyText": "wasc?", "author": "kingthorin", "createdAt": "2020-09-19T13:20:36Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Cross-Origin-Resource-Policy Scan Rule\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ */\n+public class CorpScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.corp.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+    public static final String CROSS_ORIGIN_RESOURCE_POLICY_HEADER = \"Cross-Origin-Resource-Policy\";\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        List<String> corpHeaders =\n+                msg.getResponseHeader()\n+                        .getHeaderValues(CorpScanRule.CROSS_ORIGIN_RESOURCE_POLICY_HEADER);\n+        if (corpHeaders.isEmpty()) {\n+            raiseAlert(msg, \"\");\n+        }\n+        for (String corsHeader : corpHeaders) {\n+            if (\"same-site\".equalsIgnoreCase(corsHeader)\n+                    || !(\"same-origin\".equalsIgnoreCase(corsHeader)\n+                            || \"cross-origin\".equalsIgnoreCase(corsHeader))) {\n+                raiseAlert(msg, corsHeader);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void setParent(PassiveScanThread parent) {\n+        // Nothing to do.\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return getString(\"name\");\n+    }\n+\n+    @Override\n+    public int getPluginId() {\n+        return PLUGIN_ID;\n+    }\n+\n+    private String getString(String param) {\n+        return Constant.messages.getString(MESSAGE_PREFIX + param);\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, String evidence) {\n+        newAlert()\n+                .setRisk(Alert.RISK_LOW)\n+                .setConfidence(Alert.CONFIDENCE_MEDIUM)\n+                .setParam(CROSS_ORIGIN_RESOURCE_POLICY_HEADER)\n+                .setDescription(getString(\"desc\"))\n+                .setSolution(getString(\"soln\"))\n+                .setReference(getString(\"refs\"))\n+                .setEvidence(evidence)\n+                .setCweId(16) // CWE-16: Configuration", "originalCommit": "a87d510b190d35ea12c80109be8013d682340242", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ2MTc3Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r491461772", "bodyText": "Maybe 14: Server Misconfiguration?", "author": "cotonne", "createdAt": "2020-09-19T14:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQzMzQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8732b7859909067ceee77b750809ac55a7c7b0dd", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\nindex 279a170f0..cd9134d44 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\n\n@@ -49,11 +49,11 @@ public class CorpScanRule extends PluginPassiveScanner {\n         if (corpHeaders.isEmpty()) {\n             raiseAlert(msg, \"\");\n         }\n-        for (String corsHeader : corpHeaders) {\n-            if (\"same-site\".equalsIgnoreCase(corsHeader)\n-                    || !(\"same-origin\".equalsIgnoreCase(corsHeader)\n-                            || \"cross-origin\".equalsIgnoreCase(corsHeader))) {\n-                raiseAlert(msg, corsHeader);\n+        for (String corpHeader : corpHeaders) {\n+            if (\"same-site\".equalsIgnoreCase(corpHeader)\n+                    || !(\"same-origin\".equalsIgnoreCase(corpHeader)\n+                            || \"cross-origin\".equalsIgnoreCase(corpHeader))) {\n+                raiseAlert(msg, corpHeader);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQzMzU4Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r491433582", "bodyText": "Could you add example alerts functionality similar to: #2532 ?", "author": "kingthorin", "createdAt": "2020-09-19T13:20:55Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Cross-Origin-Resource-Policy Scan Rule\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ */\n+public class CorpScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.corp.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+    public static final String CROSS_ORIGIN_RESOURCE_POLICY_HEADER = \"Cross-Origin-Resource-Policy\";\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        List<String> corpHeaders =\n+                msg.getResponseHeader()\n+                        .getHeaderValues(CorpScanRule.CROSS_ORIGIN_RESOURCE_POLICY_HEADER);\n+        if (corpHeaders.isEmpty()) {\n+            raiseAlert(msg, \"\");\n+        }\n+        for (String corsHeader : corpHeaders) {\n+            if (\"same-site\".equalsIgnoreCase(corsHeader)\n+                    || !(\"same-origin\".equalsIgnoreCase(corsHeader)\n+                            || \"cross-origin\".equalsIgnoreCase(corsHeader))) {\n+                raiseAlert(msg, corsHeader);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void setParent(PassiveScanThread parent) {\n+        // Nothing to do.\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return getString(\"name\");\n+    }\n+\n+    @Override\n+    public int getPluginId() {\n+        return PLUGIN_ID;\n+    }\n+\n+    private String getString(String param) {\n+        return Constant.messages.getString(MESSAGE_PREFIX + param);\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, String evidence) {", "originalCommit": "a87d510b190d35ea12c80109be8013d682340242", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ2MjI2Mw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r491462263", "bodyText": "Hum... I can find only 4 occurences of getExampleAlerts.\nAll of them are indicated as unused.\nWhat is it for?", "author": "cotonne", "createdAt": "2020-09-19T14:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQzMzU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3NjA1Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r491476056", "bodyText": "It's just being ramped up. It's a documentation effort:\nzaproxy/zaproxy-website#166", "author": "kingthorin", "createdAt": "2020-09-19T17:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQzMzU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3NjA2OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r491476069", "bodyText": "That's to allow to generate website pages (https://www.zaproxy.org/docs/alerts/) in a standard way.\nEdit: missed above comment...", "author": "thc202", "createdAt": "2020-09-19T17:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQzMzU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8732b7859909067ceee77b750809ac55a7c7b0dd", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\nindex 279a170f0..cd9134d44 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/CorpScanRule.java\n\n@@ -49,11 +49,11 @@ public class CorpScanRule extends PluginPassiveScanner {\n         if (corpHeaders.isEmpty()) {\n             raiseAlert(msg, \"\");\n         }\n-        for (String corsHeader : corpHeaders) {\n-            if (\"same-site\".equalsIgnoreCase(corsHeader)\n-                    || !(\"same-origin\".equalsIgnoreCase(corsHeader)\n-                            || \"cross-origin\".equalsIgnoreCase(corsHeader))) {\n-                raiseAlert(msg, corsHeader);\n+        for (String corpHeader : corpHeaders) {\n+            if (\"same-site\".equalsIgnoreCase(corpHeader)\n+                    || !(\"same-origin\".equalsIgnoreCase(corpHeader)\n+                            || \"cross-origin\".equalsIgnoreCase(corpHeader))) {\n+                raiseAlert(msg, corpHeader);\n             }\n         }\n     }\n"}}, {"oid": "c8b50e6b5c1189814846c05e80ebe70214542f40", "url": "https://github.com/zaproxy/zap-extensions/commit/c8b50e6b5c1189814846c05e80ebe70214542f40", "message": "Alpha Scan Rule: Cross-Origin Resource Policy Header\n\n - Help enforce CORP header. Should be same-origin or cross-origin\n - Raise an alert when CORP header is missing, invalid\n   or set to same-site\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-09-19T14:34:10Z", "type": "commit"}, {"oid": "c8b50e6b5c1189814846c05e80ebe70214542f40", "url": "https://github.com/zaproxy/zap-extensions/commit/c8b50e6b5c1189814846c05e80ebe70214542f40", "message": "Alpha Scan Rule: Cross-Origin Resource Policy Header\n\n - Help enforce CORP header. Should be same-origin or cross-origin\n - Raise an alert when CORP header is missing, invalid\n   or set to same-site\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-09-19T14:34:10Z", "type": "forcePushed"}, {"oid": "8732b7859909067ceee77b750809ac55a7c7b0dd", "url": "https://github.com/zaproxy/zap-extensions/commit/8732b7859909067ceee77b750809ac55a7c7b0dd", "message": "Remarks from PR\n\n - Add \"Added\" to changelog\n - Fix typos\n - Capitalize title\n - Alert has WASC 14\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-09-19T14:54:08Z", "type": "commit"}, {"oid": "29b76c7e8f10c8d564a947cbb72f82b42b8138f3", "url": "https://github.com/zaproxy/zap-extensions/commit/29b76c7e8f10c8d564a947cbb72f82b42b8138f3", "message": "Remarks from PR\n\n - Doc: typo and acronym\n - Add function getExampleAlerts\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-09-20T09:02:43Z", "type": "commit"}, {"oid": "1b5319ebe97f7851af934fdfb22f41100d3294a2", "url": "https://github.com/zaproxy/zap-extensions/commit/1b5319ebe97f7851af934fdfb22f41100d3294a2", "message": "Remarks from PR\n\n - CORP is only checked for successful requests\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-09-20T12:17:14Z", "type": "commit"}, {"oid": "d647467363f05823b9a8166250f683523b05faed", "url": "https://github.com/zaproxy/zap-extensions/commit/d647467363f05823b9a8166250f683523b05faed", "message": "Alpha Scan Rule: Cross-Origin Embedder Policy Header\n\n - Raise an alert when the header Cross-Origin-Embedder-Policy is missing or not equal to \"require-corp\"\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-09-27T09:47:33Z", "type": "commit"}, {"oid": "50ef0373a872a636dde093ebe56d51d8ca3ab7ed", "url": "https://github.com/zaproxy/zap-extensions/commit/50ef0373a872a636dde093ebe56d51d8ca3ab7ed", "message": "Alpha Scan Rule: Cross-Origin Opener Policy Header\n\n - Raise an alert when Cross-Origin-Opener-Policy header is missing\n - Documentation\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-09-27T13:37:10Z", "type": "commit"}, {"oid": "ffb4c96cd2bf0a4d9ff79d1106a7cb75776a022d", "url": "https://github.com/zaproxy/zap-extensions/commit/ffb4c96cd2bf0a4d9ff79d1106a7cb75776a022d", "message": "Alpha Scan Rule: Support for Reporting API\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-10-04T12:33:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTQ2NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r499715464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return SITE_ISOLATION_MESSAGE_PREFIX + \"name\";\n          \n          \n            \n                    return Constant.messages.getString(SITE_ISOLATION_MESSAGE_PREFIX + \"name\");\n          \n      \n    \n    \n  \n\nTo address the build (test) failure.", "author": "kingthorin", "createdAt": "2020-10-05T16:13:31Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are been <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-think</a>\n+ * to keep sensitive data outside of the address space of untrusted code.\n+ *\n+ * <p>To achieve this, three headers have been added:\n+ *\n+ * <ul>\n+ *   <li>Cross-Origin-Resource-Policy:\n+ *   <li>Cross-Origin-Embedder-Policy: only allow resources that have enabled CORP ou CORS\n+ *   <li>Cross-Origin-Opener-Policy: allow sites to control browsing context group\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\">COEP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">COOP\n+ *     on MDN</a>\n+ * @see <a href=\"https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header\">COOP Specs</a>\n+ * @see <a href=\"https://html.spec.whatwg.org/multipage/origin.html#coep\">COEP Specs</a>\n+ */\n+public class SiteIsolationScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String SITE_ISOLATION_MESSAGE_PREFIX = \"pscanalpha.site-isolation.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+\n+    private final SiteIsolationHeaderScanner[] scanners =\n+            new SiteIsolationHeaderScanner[] {\n+                new CorpHeaderScanner(this::newAlert),\n+                new CoepHeaderScanner(this::newAlert),\n+                new CoopHeaderScanner(this::newAlert)\n+            };\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+\n+        // Specs don't state that errors pages should be excluded\n+        // However, successful responses are associated to a resource\n+        // that should be protected.\n+        // Only consider HTTP Status code 2XX to avoid a False Positive\n+        if (!HttpStatusCode.isSuccess(msg.getResponseHeader().getStatusCode())) {\n+            return;\n+        }\n+\n+        Stream.of(scanners).forEach(s -> s.check(msg.getResponseHeader()));\n+    }\n+\n+    @Override\n+    public void setParent(PassiveScanThread parent) {\n+        // Nothing to do.\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return SITE_ISOLATION_MESSAGE_PREFIX + \"name\";", "originalCommit": "ffb4c96cd2bf0a4d9ff79d1106a7cb75776a022d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex 9a293b300..ac10cad94 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -33,9 +33,9 @@ import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n \n /**\n- * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in\n- * the same address space. Browser architectures are been <a href=\n- * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-think</a>\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n  * to keep sensitive data outside of the address space of untrusted code.\n  *\n  * <p>To achieve this, three headers have been added:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNjIyNg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r499716226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in\n          \n          \n            \n             * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in", "author": "kingthorin", "createdAt": "2020-10-05T16:14:41Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in", "originalCommit": "ffb4c96cd2bf0a4d9ff79d1106a7cb75776a022d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex 9a293b300..ac10cad94 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -33,9 +33,9 @@ import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n \n /**\n- * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in\n- * the same address space. Browser architectures are been <a href=\n- * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-think</a>\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n  * to keep sensitive data outside of the address space of untrusted code.\n  *\n  * <p>To achieve this, three headers have been added:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNjYyOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r499716629", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * the same address space. Browser architectures are been <a href=\n          \n          \n            \n             * the same address space. Browser architectures are being<a href=", "author": "kingthorin", "createdAt": "2020-10-05T16:15:15Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are been <a href=", "originalCommit": "ffb4c96cd2bf0a4d9ff79d1106a7cb75776a022d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex 9a293b300..ac10cad94 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -33,9 +33,9 @@ import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n \n /**\n- * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in\n- * the same address space. Browser architectures are been <a href=\n- * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-think</a>\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n  * to keep sensitive data outside of the address space of untrusted code.\n  *\n  * <p>To achieve this, three headers have been added:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNjc3OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r499716779", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-think</a>\n          \n          \n            \n             * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>", "author": "kingthorin", "createdAt": "2020-10-05T16:15:29Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are been <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-think</a>", "originalCommit": "ffb4c96cd2bf0a4d9ff79d1106a7cb75776a022d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex 9a293b300..ac10cad94 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -33,9 +33,9 @@ import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n \n /**\n- * Spectre vulnerability has shown that Javascript code can be used to read any part of memory in\n- * the same address space. Browser architectures are been <a href=\n- * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-think</a>\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n  * to keep sensitive data outside of the address space of untrusted code.\n  *\n  * <p>To achieve this, three headers have been added:\n"}}, {"oid": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "url": "https://github.com/zaproxy/zap-extensions/commit/9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "message": "Alpha Scan Rule: Remarks from PR\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-10-06T05:40:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MDY3Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r503180676", "bodyText": "This should be a List (can use Arrays.asList(...)).", "author": "thc202", "createdAt": "2020-10-12T09:57:33Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n+ * to keep sensitive data outside of the address space of untrusted code.\n+ *\n+ * <p>To achieve this, three headers have been added:\n+ *\n+ * <ul>\n+ *   <li>Cross-Origin-Resource-Policy:\n+ *   <li>Cross-Origin-Embedder-Policy: only allow resources that have enabled CORP ou CORS\n+ *   <li>Cross-Origin-Opener-Policy: allow sites to control browsing context group\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\">COEP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">COOP\n+ *     on MDN</a>\n+ * @see <a href=\"https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header\">COOP Specs</a>\n+ * @see <a href=\"https://html.spec.whatwg.org/multipage/origin.html#coep\">COEP Specs</a>\n+ */\n+public class SiteIsolationScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String SITE_ISOLATION_MESSAGE_PREFIX = \"pscanalpha.site-isolation.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+\n+    private final SiteIsolationHeaderScanner[] scanners =", "originalCommit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2f64ccc5103867039b8c381ee1e53606d013a22", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex ac10cad94..28a43361d 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -19,6 +19,9 @@\n  */\n package org.zaproxy.zap.extension.pscanrulesAlpha;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MDc1OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r503180759", "bodyText": "Worth normalising the accessibility, this is public, some methods are protected others package.", "author": "thc202", "createdAt": "2020-10-12T09:57:41Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n+ * to keep sensitive data outside of the address space of untrusted code.\n+ *\n+ * <p>To achieve this, three headers have been added:\n+ *\n+ * <ul>\n+ *   <li>Cross-Origin-Resource-Policy:\n+ *   <li>Cross-Origin-Embedder-Policy: only allow resources that have enabled CORP ou CORS\n+ *   <li>Cross-Origin-Opener-Policy: allow sites to control browsing context group\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\">COEP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">COOP\n+ *     on MDN</a>\n+ * @see <a href=\"https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header\">COOP Specs</a>\n+ * @see <a href=\"https://html.spec.whatwg.org/multipage/origin.html#coep\">COEP Specs</a>\n+ */\n+public class SiteIsolationScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String SITE_ISOLATION_MESSAGE_PREFIX = \"pscanalpha.site-isolation.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+\n+    private final SiteIsolationHeaderScanner[] scanners =\n+            new SiteIsolationHeaderScanner[] {\n+                new CorpHeaderScanner(this::newAlert),\n+                new CoepHeaderScanner(this::newAlert),\n+                new CoopHeaderScanner(this::newAlert)\n+            };\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+\n+        // Specs don't state that errors pages should be excluded\n+        // However, successful responses are associated to a resource\n+        // that should be protected.\n+        // Only consider HTTP Status code 2XX to avoid a False Positive\n+        if (!HttpStatusCode.isSuccess(msg.getResponseHeader().getStatusCode())) {\n+            return;\n+        }\n+\n+        Stream.of(scanners).forEach(s -> s.check(msg.getResponseHeader()));\n+    }\n+\n+    @Override\n+    public void setParent(PassiveScanThread parent) {\n+        // Nothing to do.\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return Constant.messages.getString(SITE_ISOLATION_MESSAGE_PREFIX + \"name\");\n+    }\n+\n+    @Override\n+    public int getPluginId() {\n+        return PLUGIN_ID;\n+    }\n+\n+    public List<Alert> getExampleAlerts() {\n+        return Stream.of(scanners).map(s -> s.alert(\"\").build()).collect(Collectors.toList());\n+    }\n+\n+    abstract static class SiteIsolationHeaderScanner {\n+        private final Supplier<AlertBuilder> newAlert;\n+\n+        public SiteIsolationHeaderScanner(Supplier<AlertBuilder> newAlert) {", "originalCommit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2f64ccc5103867039b8c381ee1e53606d013a22", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex ac10cad94..28a43361d 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -19,6 +19,9 @@\n  */\n package org.zaproxy.zap.extension.pscanrulesAlpha;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MDc5NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r503180794", "bodyText": "Prefer getHeader(HttpHeader.CONTENT_TYPE) (or getHeaderValues), which does not require to traverse all headers again.", "author": "thc202", "createdAt": "2020-10-12T09:57:45Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n+ * to keep sensitive data outside of the address space of untrusted code.\n+ *\n+ * <p>To achieve this, three headers have been added:\n+ *\n+ * <ul>\n+ *   <li>Cross-Origin-Resource-Policy:\n+ *   <li>Cross-Origin-Embedder-Policy: only allow resources that have enabled CORP ou CORS\n+ *   <li>Cross-Origin-Opener-Policy: allow sites to control browsing context group\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\">COEP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">COOP\n+ *     on MDN</a>\n+ * @see <a href=\"https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header\">COOP Specs</a>\n+ * @see <a href=\"https://html.spec.whatwg.org/multipage/origin.html#coep\">COEP Specs</a>\n+ */\n+public class SiteIsolationScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String SITE_ISOLATION_MESSAGE_PREFIX = \"pscanalpha.site-isolation.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+\n+    private final SiteIsolationHeaderScanner[] scanners =\n+            new SiteIsolationHeaderScanner[] {\n+                new CorpHeaderScanner(this::newAlert),\n+                new CoepHeaderScanner(this::newAlert),\n+                new CoopHeaderScanner(this::newAlert)\n+            };\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+\n+        // Specs don't state that errors pages should be excluded\n+        // However, successful responses are associated to a resource\n+        // that should be protected.\n+        // Only consider HTTP Status code 2XX to avoid a False Positive\n+        if (!HttpStatusCode.isSuccess(msg.getResponseHeader().getStatusCode())) {\n+            return;\n+        }\n+\n+        Stream.of(scanners).forEach(s -> s.check(msg.getResponseHeader()));\n+    }\n+\n+    @Override\n+    public void setParent(PassiveScanThread parent) {\n+        // Nothing to do.\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return Constant.messages.getString(SITE_ISOLATION_MESSAGE_PREFIX + \"name\");\n+    }\n+\n+    @Override\n+    public int getPluginId() {\n+        return PLUGIN_ID;\n+    }\n+\n+    public List<Alert> getExampleAlerts() {\n+        return Stream.of(scanners).map(s -> s.alert(\"\").build()).collect(Collectors.toList());\n+    }\n+\n+    abstract static class SiteIsolationHeaderScanner {\n+        private final Supplier<AlertBuilder> newAlert;\n+\n+        public SiteIsolationHeaderScanner(Supplier<AlertBuilder> newAlert) {\n+            this.newAlert = newAlert;\n+        }\n+\n+        protected abstract String getHeader();\n+\n+        protected abstract String getString(String param);\n+\n+        abstract void check(HttpResponseHeader responseHeader);\n+\n+        protected boolean isDocument(HttpResponseHeader responseHeader) {\n+            return responseHeader.getHeaders().stream()", "originalCommit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2f64ccc5103867039b8c381ee1e53606d013a22", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex ac10cad94..28a43361d 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -19,6 +19,9 @@\n  */\n package org.zaproxy.zap.extension.pscanrulesAlpha;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MDg3NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r503180874", "bodyText": "Better if it returns, it's clearer that there's nothing else to do after.", "author": "thc202", "createdAt": "2020-10-12T09:57:55Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n+ * to keep sensitive data outside of the address space of untrusted code.\n+ *\n+ * <p>To achieve this, three headers have been added:\n+ *\n+ * <ul>\n+ *   <li>Cross-Origin-Resource-Policy:\n+ *   <li>Cross-Origin-Embedder-Policy: only allow resources that have enabled CORP ou CORS\n+ *   <li>Cross-Origin-Opener-Policy: allow sites to control browsing context group\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\">COEP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">COOP\n+ *     on MDN</a>\n+ * @see <a href=\"https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header\">COOP Specs</a>\n+ * @see <a href=\"https://html.spec.whatwg.org/multipage/origin.html#coep\">COEP Specs</a>\n+ */\n+public class SiteIsolationScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String SITE_ISOLATION_MESSAGE_PREFIX = \"pscanalpha.site-isolation.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+\n+    private final SiteIsolationHeaderScanner[] scanners =\n+            new SiteIsolationHeaderScanner[] {\n+                new CorpHeaderScanner(this::newAlert),\n+                new CoepHeaderScanner(this::newAlert),\n+                new CoopHeaderScanner(this::newAlert)\n+            };\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+\n+        // Specs don't state that errors pages should be excluded\n+        // However, successful responses are associated to a resource\n+        // that should be protected.\n+        // Only consider HTTP Status code 2XX to avoid a False Positive\n+        if (!HttpStatusCode.isSuccess(msg.getResponseHeader().getStatusCode())) {\n+            return;\n+        }\n+\n+        Stream.of(scanners).forEach(s -> s.check(msg.getResponseHeader()));\n+    }\n+\n+    @Override\n+    public void setParent(PassiveScanThread parent) {\n+        // Nothing to do.\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return Constant.messages.getString(SITE_ISOLATION_MESSAGE_PREFIX + \"name\");\n+    }\n+\n+    @Override\n+    public int getPluginId() {\n+        return PLUGIN_ID;\n+    }\n+\n+    public List<Alert> getExampleAlerts() {\n+        return Stream.of(scanners).map(s -> s.alert(\"\").build()).collect(Collectors.toList());\n+    }\n+\n+    abstract static class SiteIsolationHeaderScanner {\n+        private final Supplier<AlertBuilder> newAlert;\n+\n+        public SiteIsolationHeaderScanner(Supplier<AlertBuilder> newAlert) {\n+            this.newAlert = newAlert;\n+        }\n+\n+        protected abstract String getHeader();\n+\n+        protected abstract String getString(String param);\n+\n+        abstract void check(HttpResponseHeader responseHeader);\n+\n+        protected boolean isDocument(HttpResponseHeader responseHeader) {\n+            return responseHeader.getHeaders().stream()\n+                    .filter(header -> \"Content-Type\".equalsIgnoreCase(header.getName()))\n+                    .anyMatch(\n+                            header ->\n+                                    header.getValue().startsWith(\"text/html\")\n+                                            || header.getValue().startsWith(\"application/xml\"));\n+        }\n+\n+        protected AlertBuilder alert(String evidence) {\n+            return newAlert.get()\n+                    .setRisk(Alert.RISK_LOW)\n+                    .setConfidence(Alert.CONFIDENCE_MEDIUM)\n+                    .setParam(getHeader())\n+                    .setDescription(getString(\"desc\"))\n+                    .setSolution(getString(\"soln\"))\n+                    .setReference(getString(\"refs\"))\n+                    .setCweId(16) // CWE-16: Configuration\n+                    .setWascId(14) // WASC-14: Server Misconfiguration\n+                    .setEvidence(evidence);\n+        }\n+\n+        protected Stream<String> filterReportHeader(String coopHeader) {\n+            return Stream.of(coopHeader.split(\";\"))\n+                    .map(String::trim)\n+                    .filter(header -> !header.startsWith(\"report-to\"));\n+        }\n+    }\n+\n+    static class CorpHeaderScanner extends SiteIsolationHeaderScanner {\n+        public static final String HEADER = \"Cross-Origin-Resource-Policy\";\n+        private static final String CORP_MESSAGE_PREFIX = SITE_ISOLATION_MESSAGE_PREFIX + \"corp.\";\n+        public static final String CORS_PREFIX = \"Access-Control-Allow-\";\n+\n+        public CorpHeaderScanner(Supplier<AlertBuilder> newAlert) {\n+            super(newAlert);\n+        }\n+\n+        @Override\n+        void check(HttpResponseHeader responseHeader) {\n+            boolean hasCorsHeader =\n+                    responseHeader.getHeaders().stream()\n+                            .anyMatch(header -> header.getName().startsWith(CORS_PREFIX));\n+            if (hasCorsHeader) {\n+                return;\n+            }\n+\n+            List<String> corpHeaders = responseHeader.getHeaderValues(HEADER);\n+            if (corpHeaders.isEmpty()) {\n+                alert(\"\").raise();", "originalCommit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2f64ccc5103867039b8c381ee1e53606d013a22", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex ac10cad94..28a43361d 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -19,6 +19,9 @@\n  */\n package org.zaproxy.zap.extension.pscanrulesAlpha;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTY1Mw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r503181653", "bodyText": "Add description (or remove the colon)?", "author": "thc202", "createdAt": "2020-10-12T09:59:10Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n+ * to keep sensitive data outside of the address space of untrusted code.\n+ *\n+ * <p>To achieve this, three headers have been added:\n+ *\n+ * <ul>\n+ *   <li>Cross-Origin-Resource-Policy:", "originalCommit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2f64ccc5103867039b8c381ee1e53606d013a22", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex ac10cad94..28a43361d 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -19,6 +19,9 @@\n  */\n package org.zaproxy.zap.extension.pscanrulesAlpha;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NTI0MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r503185241", "bodyText": "Worth testing without the Content-Type header too.", "author": "thc202", "createdAt": "2020-10-12T10:05:08Z", "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRuleTest.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.network.HttpMessage;\n+\n+class SiteIsolationScanRuleTest extends PassiveScannerTest<SiteIsolationScanRule> {\n+    @Test\n+    public void shouldNotRaiseAlertGivenSiteIsIsolated() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: same-origin\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldRaiseCorpAlertGivenResponseDoesntSendCorpHeader() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(\n+                alertsRaised.get(0).getParam(),\n+                equalTo(SiteIsolationScanRule.CorpHeaderScanner.HEADER));\n+        assertThat(alertsRaised.get(0).getEvidence(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void shouldRaiseCorpAlertGivenCorpHeaderIsSetForSameSite() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: same-site\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(\n+                alertsRaised.get(0).getParam(),\n+                equalTo(SiteIsolationScanRule.CorpHeaderScanner.HEADER));\n+        assertThat(alertsRaised.get(0).getEvidence(), equalTo(\"same-site\"));\n+    }\n+\n+    @Test\n+    public void shouldRaiseCorpAlertGivenCorpHeaderContentIsUnexpected() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: unexpected\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(\n+                alertsRaised.get(0).getParam(),\n+                equalTo(SiteIsolationScanRule.CorpHeaderScanner.HEADER));\n+        assertThat(alertsRaised.get(0).getEvidence(), equalTo(\"unexpected\"));\n+    }\n+\n+    @Test\n+    public void shouldRaiseCorpAlertCaseInsensitive() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: same-SITE\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(\n+                alertsRaised.get(0).getParam(),\n+                equalTo(SiteIsolationScanRule.CorpHeaderScanner.HEADER));\n+        assertThat(alertsRaised.get(0).getEvidence(), equalTo(\"same-SITE\"));\n+    }\n+\n+    @Test\n+    public void shouldNotRaiseCorpAlertGivenCorpHeaderIsSetForCrossOrigin() throws Exception {\n+        // We consider that resource has been explicitly set to be shared.\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: cross-origin\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldRaiseCorpAlertOnlyForSuccessfulQueries() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\"HTTP/1.1 500 Internal Server Error\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldRaiseCorpAlertGivenCorsHeaderIsSet() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Access-Control-Allow-Origin: *\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertGivenCoepHeaderIsMissing() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Content-Type: application/xml\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: same-origin\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(\n+                alertsRaised.get(0).getParam(),\n+                equalTo(SiteIsolationScanRule.CoepHeaderScanner.HEADER));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertGivenCoepHeaderIsNotEqualsToRequireCorp() throws Exception {\n+        // Ref: https://html.spec.whatwg.org/multipage/origin.html#the-headers\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Content-Type: text/html; charset=iso-8859-1\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: same-origin\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: unsafe-none\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(\n+                alertsRaised.get(0).getParam(),\n+                equalTo(SiteIsolationScanRule.CoepHeaderScanner.HEADER));\n+        assertThat(alertsRaised.get(0).getEvidence(), equalTo(\"unsafe-none\"));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertGivenCoopHeaderIsMissing() throws Exception {\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Content-Type: text/html;charset=utf-8\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: same-origin\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(\n+                alertsRaised.get(0).getParam(),\n+                equalTo(SiteIsolationScanRule.CoopHeaderScanner.HEADER));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertGivenCoopHeaderIsNotSameOrigin() throws Exception {\n+        // Ref: https://html.spec.whatwg.org/multipage/origin.html#cross-origin-opener-policies\n+        // Given\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET / HTTP/1.1\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Content-Type: text/html\\r\\n\"\n+                        + \"Cross-Origin-Resource-Policy: same-origin\\r\\n\"\n+                        + \"Cross-Origin-Embedder-Policy: require-corp\\r\\n\"\n+                        + \"Cross-Origin-Opener-Policy: same-origin-allow-popups\\r\\n\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(\n+                alertsRaised.get(0).getParam(),\n+                equalTo(SiteIsolationScanRule.CoopHeaderScanner.HEADER));\n+        assertThat(alertsRaised.get(0).getEvidence(), equalTo(\"same-origin-allow-popups\"));\n+    }\n+\n+    @Test\n+    public void shouldNotRaiseCoepOrCoopAlertGivenResourceIsNotAnHtmlOrXmlDocument()", "originalCommit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2f64ccc5103867039b8c381ee1e53606d013a22", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRuleTest.java b/addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRuleTest.java\nindex 7e2c69175..91d707181 100644\n--- a/addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRuleTest.java\n+++ b/addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRuleTest.java\n\n@@ -166,7 +166,7 @@ class SiteIsolationScanRuleTest extends PassiveScannerTest<SiteIsolationScanRule\n     }\n \n     @Test\n-    public void shouldRaiseCorpAlertGivenCorsHeaderIsSet() throws Exception {\n+    public void shouldNotRaiseCorpAlertGivenCorsHeaderIsSet() throws Exception {\n         // Given\n         HttpMessage msg = new HttpMessage();\n         msg.setRequestHeader(\"GET / HTTP/1.1\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NTA3NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r503195075", "bodyText": "@Override", "author": "thc202", "createdAt": "2020-10-12T10:22:46Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import net.htmlparser.jericho.Source;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.parosproxy.paros.network.HttpStatusCode;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/**\n+ * Spectre vulnerability has shown that JavaScript code can be used to read any part of memory in\n+ * the same address space. Browser architectures are being <a href=\n+ * \"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">re-thought</a>\n+ * to keep sensitive data outside of the address space of untrusted code.\n+ *\n+ * <p>To achieve this, three headers have been added:\n+ *\n+ * <ul>\n+ *   <li>Cross-Origin-Resource-Policy:\n+ *   <li>Cross-Origin-Embedder-Policy: only allow resources that have enabled CORP ou CORS\n+ *   <li>Cross-Origin-Opener-Policy: allow sites to control browsing context group\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)\">CORP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\">COEP\n+ *     on MDN</a>\n+ * @see <a\n+ *     href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">COOP\n+ *     on MDN</a>\n+ * @see <a href=\"https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header\">COOP Specs</a>\n+ * @see <a href=\"https://html.spec.whatwg.org/multipage/origin.html#coep\">COEP Specs</a>\n+ */\n+public class SiteIsolationScanRule extends PluginPassiveScanner {\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String SITE_ISOLATION_MESSAGE_PREFIX = \"pscanalpha.site-isolation.\";\n+\n+    private static final int PLUGIN_ID = 90004;\n+\n+    private final SiteIsolationHeaderScanner[] scanners =\n+            new SiteIsolationHeaderScanner[] {\n+                new CorpHeaderScanner(this::newAlert),\n+                new CoepHeaderScanner(this::newAlert),\n+                new CoopHeaderScanner(this::newAlert)\n+            };\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+\n+        // Specs don't state that errors pages should be excluded\n+        // However, successful responses are associated to a resource\n+        // that should be protected.\n+        // Only consider HTTP Status code 2XX to avoid a False Positive\n+        if (!HttpStatusCode.isSuccess(msg.getResponseHeader().getStatusCode())) {\n+            return;\n+        }\n+\n+        Stream.of(scanners).forEach(s -> s.check(msg.getResponseHeader()));\n+    }\n+\n+    @Override\n+    public void setParent(PassiveScanThread parent) {\n+        // Nothing to do.\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return Constant.messages.getString(SITE_ISOLATION_MESSAGE_PREFIX + \"name\");\n+    }\n+\n+    @Override\n+    public int getPluginId() {\n+        return PLUGIN_ID;\n+    }\n+\n+    public List<Alert> getExampleAlerts() {\n+        return Stream.of(scanners).map(s -> s.alert(\"\").build()).collect(Collectors.toList());\n+    }\n+\n+    abstract static class SiteIsolationHeaderScanner {\n+        private final Supplier<AlertBuilder> newAlert;\n+\n+        public SiteIsolationHeaderScanner(Supplier<AlertBuilder> newAlert) {\n+            this.newAlert = newAlert;\n+        }\n+\n+        protected abstract String getHeader();\n+\n+        protected abstract String getString(String param);\n+\n+        abstract void check(HttpResponseHeader responseHeader);\n+\n+        protected boolean isDocument(HttpResponseHeader responseHeader) {\n+            return responseHeader.getHeaders().stream()\n+                    .filter(header -> \"Content-Type\".equalsIgnoreCase(header.getName()))\n+                    .anyMatch(\n+                            header ->\n+                                    header.getValue().startsWith(\"text/html\")\n+                                            || header.getValue().startsWith(\"application/xml\"));\n+        }\n+\n+        protected AlertBuilder alert(String evidence) {\n+            return newAlert.get()\n+                    .setRisk(Alert.RISK_LOW)\n+                    .setConfidence(Alert.CONFIDENCE_MEDIUM)\n+                    .setParam(getHeader())\n+                    .setDescription(getString(\"desc\"))\n+                    .setSolution(getString(\"soln\"))\n+                    .setReference(getString(\"refs\"))\n+                    .setCweId(16) // CWE-16: Configuration\n+                    .setWascId(14) // WASC-14: Server Misconfiguration\n+                    .setEvidence(evidence);\n+        }\n+\n+        protected Stream<String> filterReportHeader(String coopHeader) {\n+            return Stream.of(coopHeader.split(\";\"))\n+                    .map(String::trim)\n+                    .filter(header -> !header.startsWith(\"report-to\"));\n+        }\n+    }\n+\n+    static class CorpHeaderScanner extends SiteIsolationHeaderScanner {\n+        public static final String HEADER = \"Cross-Origin-Resource-Policy\";\n+        private static final String CORP_MESSAGE_PREFIX = SITE_ISOLATION_MESSAGE_PREFIX + \"corp.\";\n+        public static final String CORS_PREFIX = \"Access-Control-Allow-\";\n+\n+        public CorpHeaderScanner(Supplier<AlertBuilder> newAlert) {\n+            super(newAlert);\n+        }\n+\n+        @Override\n+        void check(HttpResponseHeader responseHeader) {\n+            boolean hasCorsHeader =\n+                    responseHeader.getHeaders().stream()\n+                            .anyMatch(header -> header.getName().startsWith(CORS_PREFIX));\n+            if (hasCorsHeader) {\n+                return;\n+            }\n+\n+            List<String> corpHeaders = responseHeader.getHeaderValues(HEADER);\n+            if (corpHeaders.isEmpty()) {\n+                alert(\"\").raise();\n+            }\n+            for (String corpHeader : corpHeaders) {\n+                filterReportHeader(corpHeader)\n+                        .filter(\n+                                header ->\n+                                        \"same-site\".equalsIgnoreCase(header)\n+                                                || !(\"same-origin\".equalsIgnoreCase(header)\n+                                                        || \"cross-origin\".equalsIgnoreCase(header)))\n+                        .forEach(header -> alert(header).raise());\n+            }\n+        }\n+\n+        @Override\n+        protected String getString(String param) {\n+            return Constant.messages.getString(CORP_MESSAGE_PREFIX + param);\n+        }\n+\n+        @Override\n+        protected String getHeader() {\n+            return HEADER;\n+        }\n+    }\n+\n+    static class CoepHeaderScanner extends SiteIsolationHeaderScanner {\n+        public static final String HEADER = \"Cross-Origin-Embedder-Policy\";\n+        private static final String COEP_MESSAGE_PREFIX = SITE_ISOLATION_MESSAGE_PREFIX + \"coep.\";\n+\n+        public CoepHeaderScanner(Supplier<AlertBuilder> newAlert) {\n+            super(newAlert);\n+        }\n+\n+        public void check(HttpResponseHeader responseHeader) {", "originalCommit": "9f5f0b6ef6c0639996d5e2996c76263628dda2c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2f64ccc5103867039b8c381ee1e53606d013a22", "chunk": "diff --git a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\nindex ac10cad94..28a43361d 100644\n--- a/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n+++ b/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SiteIsolationScanRule.java\n\n@@ -19,6 +19,9 @@\n  */\n package org.zaproxy.zap.extension.pscanrulesAlpha;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"oid": "c2f64ccc5103867039b8c381ee1e53606d013a22", "url": "https://github.com/zaproxy/zap-extensions/commit/c2f64ccc5103867039b8c381ee1e53606d013a22", "message": "Alpha Scan Rule: Remarks from PR\n\n - Change type: SiteISolationScannner[] => List< >\n - Adapt visibility\n - getHeaderValues\n - Return AlertBuilder instead of raising alert directly\n - Fix invalid link in doc\n - Add description for CORP in Javadoc\n - Add test case: No error should be raise if no content-type is present\n - Add @Override\n\nSigned-off-by: Cotonne <cotonne@users.noreply.github.com>", "committedDate": "2020-10-13T05:44:59Z", "type": "commit"}]}