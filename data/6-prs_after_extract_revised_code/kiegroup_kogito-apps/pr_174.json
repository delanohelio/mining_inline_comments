{"pr_number": 174, "pr_title": "KOGITO-1378 Periodic job already running is not canceled", "pr_createdAt": "2020-04-13T19:21:03Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/174", "timeline": [{"oid": "7a30fbc0838f6384b251c617472bb1fe189c1aec", "url": "https://github.com/kiegroup/kogito-apps/commit/7a30fbc0838f6384b251c617472bb1fe189c1aec", "message": "KOGITO-1378 Periodic job already running is not canceled", "committedDate": "2020-04-13T19:17:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NjkyNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/174#discussion_r408746926", "bodyText": "Value of this captor is never retrieved.", "author": "MarianMacik", "createdAt": "2020-04-15T10:40:25Z", "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobSchedulerTest.java", "diffHunk": "@@ -165,6 +165,11 @@ private void testExistingJob(boolean expired, JobStatus jobStatus) {\n         verify(tested(), expired ? never() : times(1)).doSchedule(delayCaptor.capture(), eq(job));\n         verify(jobRepository, expired ? never() : times(1)).save(scheduleCaptor.capture());\n \n+        //assert always a scheduled job is canceled (periodic or not)\n+        Optional.ofNullable(jobStatus)\n+                .filter(SCHEDULED::equals)\n+                .ifPresent(s -> verify(tested()).cancel(scheduleCaptorFuture.capture()));", "originalCommit": "7a30fbc0838f6384b251c617472bb1fe189c1aec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNTgwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/174#discussion_r408935801", "bodyText": "added the missing assertions.", "author": "tiagodolphine", "createdAt": "2020-04-15T15:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NjkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "96ed05878bb2088d93845cbbd424c53dabd3d2bc", "chunk": "diff --git a/jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobSchedulerTest.java b/jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobSchedulerTest.java\nindex 65438241..9cae240e 100644\n--- a/jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobSchedulerTest.java\n+++ b/jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobSchedulerTest.java\n\n@@ -168,7 +170,16 @@ public abstract class BaseTimerJobSchedulerTest {\n         //assert always a scheduled job is canceled (periodic or not)\n         Optional.ofNullable(jobStatus)\n                 .filter(SCHEDULED::equals)\n-                .ifPresent(s -> verify(tested()).cancel(scheduleCaptorFuture.capture()));\n+                .ifPresent(s -> {\n+                    verify(tested()).cancel(scheduleCaptorFuture.capture());\n+                    try {\n+                        ScheduledJob value = scheduleCaptorFuture.getValue().toCompletableFuture().get(1, TimeUnit.MILLISECONDS);\n+                        assertThat(value.getId()).isEqualTo(scheduledJob.getId());\n+                        assertThat(value.getStatus()).isEqualTo(CANCELED);\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                });\n \n         if (!expired) {\n             ScheduledJob returnedScheduledJob = scheduleCaptor.getValue();\n"}}, {"oid": "9a23589d1a3a940f8e9a8b566865fd4396faf699", "url": "https://github.com/kiegroup/kogito-apps/commit/9a23589d1a3a940f8e9a8b566865fd4396faf699", "message": "Iserting integration test to cancel a periodic running job", "committedDate": "2020-04-15T14:53:17Z", "type": "commit"}, {"oid": "96ed05878bb2088d93845cbbd424c53dabd3d2bc", "url": "https://github.com/kiegroup/kogito-apps/commit/96ed05878bb2088d93845cbbd424c53dabd3d2bc", "message": "Inserting missing assertions on BaseTimerJobSchedulerTest", "committedDate": "2020-04-15T15:28:33Z", "type": "commit"}, {"oid": "0e11bdcc768acd1a62044486a5039533cc77a7a0", "url": "https://github.com/kiegroup/kogito-apps/commit/0e11bdcc768acd1a62044486a5039533cc77a7a0", "message": "Adding tests to JobResourceTest.java to test cancel running non-periodic jobs", "committedDate": "2020-04-16T14:28:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0ODQxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/174#discussion_r410048412", "bodyText": "This test seems to be same as getAfterCreate(), it just contains additional assertions, can they be merged together?", "author": "sutaakar", "createdAt": "2020-04-17T07:43:10Z", "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/resource/JobResourceTest.java", "diffHunk": "@@ -100,25 +107,115 @@ void getAfterCreate() throws Exception {\n         final String id = \"3\";\n         final Job job = getJob(id);\n         create(jobToJson(job));\n-        final ScheduledJob scheduledJob = given()\n+        assertGetScheduledJob(id);\n+    }\n+\n+    @Test\n+    void executeTest() throws Exception {", "originalCommit": "0e11bdcc768acd1a62044486a5039533cc77a7a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}