{"pr_number": 562, "pr_title": "PLANNER-2210: Data Index queries API", "pr_createdAt": "2020-12-03T17:03:53Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/562", "timeline": [{"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "url": "https://github.com/kiegroup/kogito-apps/commit/79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "message": "PLANNER-2210: Data Index queries API", "committedDate": "2020-12-03T19:23:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MjUyNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538242525", "bodyText": "(applies to the entire Argument hierarchy): is there a reason why we use a programmatic serialization to JSON instead of a declarative one (via annotations)?", "author": "rsynek", "createdAt": "2020-12-08T10:58:39Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/index/service/client/graphql/ArgumentContainer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.index.service.client.graphql;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import static org.kie.kogito.taskassigning.index.service.client.graphql.util.JsonUtils.OBJECT_MAPPER;\n+\n+public abstract class ArgumentContainer implements Argument {\n+\n+    public static class ArgumentEntry {\n+\n+        private String name;\n+        private Argument value;\n+\n+        public ArgumentEntry(String name, Argument value) {\n+            this.name = name;\n+            this.value = value;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public Argument getValue() {\n+            return value;\n+        }\n+    }\n+\n+    protected List<ArgumentEntry> arguments = new ArrayList<>();\n+\n+    public void add(String name, Argument argument) {\n+        arguments.add(new ArgumentEntry(name, argument));\n+    }\n+\n+    public List<ArgumentEntry> getArguments() {\n+        return arguments;\n+    }\n+\n+    public boolean isEmpty() {\n+        return arguments == null || arguments.isEmpty();\n+    }\n+\n+    @Override\n+    public JsonNode asJson() {", "originalCommit": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxOTM5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r539419390", "bodyText": "yes, the graphql queries are mostly managed a as json definition, and this queries are built dynamically. The argument container e.g. permits arguments of different nature, and everything is finally built up since the arguments are transformable to json nodes.", "author": "wmedvede", "createdAt": "2020-12-09T15:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MjUyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI3OTY0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538279647", "bodyText": "Let's not print stacktraces to output; they will just bloat the console log. If there is a problem in test setup, we should fail fast with an exception and not wait for tests that rely on certain preconditions to fail.", "author": "rsynek", "createdAt": "2020-12-08T11:51:41Z", "path": "task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/WireMockGraphQLResource.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.index.service.client.graphql;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.configureFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static javax.ws.rs.core.HttpHeaders.CONTENT_TYPE;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.kie.kogito.taskassigning.index.service.client.graphql.util.JsonUtils.OBJECT_MAPPER;\n+\n+public class WireMockGraphQLResource implements QuarkusTestResourceLifecycleManager {\n+\n+    public static final String GRAPHQL_SERVICE_URL = \"graphql.service.url\";\n+\n+    public static final String USER_TASKS_QUERY_MOCK = \"{\\\"query\\\": \\\"USER_TASKS_QUERY_MOCK\\\"}\";\n+\n+    public static final UserTaskInstanceMock[] USER_TASKS_QUERY_MOCK_RESULT = new UserTaskInstanceMock[]{\n+            new UserTaskInstanceMock(\"1\", \"task1\", \"2020-12-01T07:54:56.883Z\", new String[]{\"Group1\"}, \"{\\\"inputVariable1\\\":\\\"value1\\\"}\"),\n+            new UserTaskInstanceMock(\"2\", \"task2\", \"2020-12-02T07:54:56.883Z\", new String[]{\"Group2\"}, \"{\\\"inputVariable2\\\":\\\"value2\\\"}\"),\n+            new UserTaskInstanceMock(\"3\", \"task3\", \"2020-12-03T07:54:56.883Z\", new String[]{\"Group3\"}, \"{\\\"inputVariable3\\\":\\\"value3\\\"}\")};\n+\n+    public static final String USER_TASKS_QUERY_FAILURE_MOCK = \"{\\\"query\\\": \\\"USER_TASKS_QUERY_FAILURE_MOCK\\\"}\";\n+\n+    public static final QueryError[] USER_TASKS_QUERY_FAILURE_MOCK_RESULT = new QueryError[]{\n+            new QueryError(\"Error1\"),\n+            new QueryError(\"Error2\")};\n+\n+    private WireMockServer wireMockServer;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        wireMockServer = new WireMockServer(options().dynamicPort());\n+        wireMockServer.start();\n+        configureFor(wireMockServer.port());\n+\n+        try {\n+            stubFor(post(urlEqualTo(\"/graphql/\"))\n+                            .withRequestBody(equalToJson(USER_TASKS_QUERY_MOCK))\n+                            .willReturn(aResponse()\n+                                                .withHeader(CONTENT_TYPE, APPLICATION_JSON)\n+                                                .withBody(buildUserTaskResult(USER_TASKS_QUERY_MOCK_RESULT))\n+\n+                            )\n+            );\n+\n+            stubFor(post(urlEqualTo(\"/graphql/\"))\n+                            .withRequestBody(equalToJson(USER_TASKS_QUERY_FAILURE_MOCK))\n+                            .willReturn(aResponse()\n+                                                .withHeader(CONTENT_TYPE, APPLICATION_JSON)\n+                                                .withBody(buildFailureResult(USER_TASKS_QUERY_FAILURE_MOCK_RESULT))\n+\n+                            )\n+            );\n+        } catch (JsonProcessingException e) {\n+            //Ignore this error, the tests will fail anyway\n+            e.printStackTrace();", "originalCommit": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "991a042377cb1e58603c3b54246a879549a10a6a", "chunk": "diff --git a/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/WireMockGraphQLResource.java b/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/WireMockGraphQLResource.java\nindex 47985ed0b..5f20d2cd6 100644\n--- a/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/WireMockGraphQLResource.java\n+++ b/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/WireMockGraphQLResource.java\n\n@@ -79,10 +79,11 @@ public class WireMockGraphQLResource implements QuarkusTestResourceLifecycleMana\n                             )\n             );\n         } catch (JsonProcessingException e) {\n-            //Ignore this error, the tests will fail anyway\n-            e.printStackTrace();\n+            //by construction this exception will never be produced, since the json generation is produced\n+            //by this test. In the rare case that it could still be produced only way to fail fast a quarkus test\n+            //resource is by throwing a RuntimeException.\n+            throw new RuntimeException(e);\n         }\n-\n         return Collections.singletonMap(GRAPHQL_SERVICE_URL, wireMockServer.baseUrl());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNTM0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538305340", "bodyText": "Maybe do the new URL(serviceUrl()); here do deal with already sanitized input later?\nSee https://github.com/kiegroup/kogito-apps/pull/562/files#diff-b360b2e8ac16f3751a4d940473e56ed427025347cc34972205c9710946de65bbR51.", "author": "rsynek", "createdAt": "2020-12-08T12:21:21Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/config/ServiceClientConfig.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.config;\n+\n+public abstract class ServiceClientConfig {\n+\n+    private String serviceUrl;\n+\n+    private long connectTimeoutMillis;\n+\n+    private long readTimeoutMillis;\n+\n+    protected ServiceClientConfig() {\n+    }\n+\n+    protected ServiceClientConfig(String serviceUrl, long connectTimeoutMillis, long readTimeoutMillis) {\n+        this.serviceUrl = serviceUrl;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+        this.readTimeoutMillis = readTimeoutMillis;\n+    }\n+\n+    public String getServiceUrl() {\n+        return serviceUrl;\n+    }\n+\n+    public long getConnectTimeoutMillis() {\n+        return connectTimeoutMillis;\n+    }\n+\n+    public long getReadTimeoutMillis() {\n+        return readTimeoutMillis;\n+    }\n+\n+    public abstract static class Builder<S extends ServiceClientConfig, T extends Builder> {\n+\n+        protected String serviceUrl;\n+        protected long connectTimeoutMillis;\n+        protected long readTimeoutMillis;\n+\n+        protected Builder() {\n+        }\n+\n+        public abstract S build();\n+\n+        public Builder<S, T> serviceUrl(String serviceUrl) {\n+            this.serviceUrl = serviceUrl;", "originalCommit": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "991a042377cb1e58603c3b54246a879549a10a6a", "chunk": "diff --git a/task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/config/ServiceClientConfig.java b/task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/config/ServiceClientConfig.java\nindex aa71ea9b3..31d38a214 100644\n--- a/task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/config/ServiceClientConfig.java\n+++ b/task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/config/ServiceClientConfig.java\n\n@@ -16,9 +16,12 @@\n \n package org.kie.kogito.taskassigning.config;\n \n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n public abstract class ServiceClientConfig {\n \n-    private String serviceUrl;\n+    private URL serviceUrl;\n \n     private long connectTimeoutMillis;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxMzc1OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538313759", "bodyText": "Is there a plan for such an implementation? Truly, it would be much better to rely on such a full-fledged implementation than doing it ourselves just for the Task Assigning.", "author": "rsynek", "createdAt": "2020-12-08T12:31:56Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/index/service/client/graphql/impl/mp/graphql/GraphQLServiceClientMP.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.index.service.client.graphql.impl.mp.graphql;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.kie.kogito.taskassigning.index.service.client.graphql.GraphQLServiceClient;\n+import org.kie.kogito.taskassigning.index.service.client.graphql.GraphQLServiceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.kogito.taskassigning.index.service.client.graphql.util.JsonUtils.OBJECT_MAPPER;\n+\n+/**\n+ * Basic GraphQLServiceClient implementation for avoiding introducing third party libraries. This implementation\n+ * might be changed in favor of the data-index-client Quarkus implementation to be provided by Kogito.", "originalCommit": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxMzU1NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r539413554", "bodyText": "There are voices that such thing will exist at some point, but nobody knows when. So, to summarize, when such implementation exists (if exists) my code is prepared to integrate it. Until it not exists, I'll go with this implementation.", "author": "wmedvede", "createdAt": "2020-12-09T15:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxMzc1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4NDM0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538484347", "bodyText": "The fact that the second parameter (provided by the method source) is not used feels strange. It happens because the method source is used by another test method, defined in the parent class.", "author": "rsynek", "createdAt": "2020-12-08T15:15:15Z", "path": "task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/string/AbstractStringArgumentTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.index.service.client.graphql.string;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.kie.kogito.taskassigning.index.service.client.graphql.AbstractArgumentTest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+abstract class AbstractStringArgumentTest<V, T extends StringArgument<V>> extends AbstractArgumentTest<V, T> {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createTestValues\")\n+    void getValue(V value, String expectedJson) {", "originalCommit": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "991a042377cb1e58603c3b54246a879549a10a6a", "chunk": "diff --git a/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/string/AbstractStringArgumentTest.java b/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/string/AbstractStringArgumentTest.java\nindex 844464045..cc94820eb 100644\n--- a/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/string/AbstractStringArgumentTest.java\n+++ b/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/string/AbstractStringArgumentTest.java\n\n@@ -27,9 +27,9 @@ abstract class AbstractStringArgumentTest<V, T extends StringArgument<V>> extend\n \n     @ParameterizedTest\n     @MethodSource(\"createTestValues\")\n-    void getValue(V value, String expectedJson) {\n-        T argument = createArgument(value);\n-        assertThat(argument.getValue()).isEqualTo(value);\n+    void getValue(TestArgument<V> testArgument) {\n+        T argument = createArgument(testArgument.getValue());\n+        assertThat(argument.getValue()).isEqualTo(testArgument.getValue());\n     }\n \n     @Test\n"}}, {"oid": "991a042377cb1e58603c3b54246a879549a10a6a", "url": "https://github.com/kiegroup/kogito-apps/commit/991a042377cb1e58603c3b54246a879549a10a6a", "message": "PLANNER-2210: Data Index queries API", "committedDate": "2020-12-10T10:18:05Z", "type": "commit"}, {"oid": "991a042377cb1e58603c3b54246a879549a10a6a", "url": "https://github.com/kiegroup/kogito-apps/commit/991a042377cb1e58603c3b54246a879549a10a6a", "message": "PLANNER-2210: Data Index queries API", "committedDate": "2020-12-10T10:18:05Z", "type": "forcePushed"}]}