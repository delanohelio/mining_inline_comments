{"pr_number": 570, "pr_title": "PLANNER-2247: Task events consumption / data index subscriptions", "pr_createdAt": "2020-12-15T15:29:11Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/570", "timeline": [{"oid": "e42eb2bacde8df5dea1bbcb78f5124d9ee994982", "url": "https://github.com/kiegroup/kogito-apps/commit/e42eb2bacde8df5dea1bbcb78f5124d9ee994982", "message": "PLANNER-2247: Task events consumption / data index subscriptions", "committedDate": "2020-12-15T17:55:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxOTAyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r544919027", "bodyText": "While I favor using a separate classes for each purpose, maybe the duplication SonarCloud complains about could be reduced by introducing an abstract parent class?", "author": "rsynek", "createdAt": "2020-12-17T08:59:59Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/messaging/UserTaskEvent.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.messaging;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@RegisterForReflection\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class UserTaskEvent {", "originalCommit": "e42eb2bacde8df5dea1bbcb78f5124d9ee994982", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAyNTMyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r545025329", "bodyText": "For this use case, I don't like to be forced to add an abstract class when I believe this classes has a different nature. But also, note that this two classes involves JSON deserialization from json strings that doesn't have exactly the same json field names. Since the UserTaskEvent is used for getting information in json format comming from the events, and the UserTaskInstance is used for getting information comming in the format returned by the data index.\nWhile very similar, those two formats are not exactly the same.\ne.g.\nthe event carries a json field:\n@JsonProperty(\"taskDescription\")\nprivate String description;\n\nwhile the data index query returns similar information but in a json field \"description\"\n//no spetial configuration is required here\nprivate String description;\nWell, to finish a too long explanation. I don't like to have to change my natural way to see it, just because sonar complained about this use case.", "author": "wmedvede", "createdAt": "2020-12-17T11:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxOTAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3MDA1Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r545270056", "bodyText": "Sounds fair.", "author": "rsynek", "createdAt": "2020-12-17T17:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxOTAyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyNTkzMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r544925930", "bodyText": "Nitpicking: in the optaplanner repository, we usually use 10 seconds for test timeouts. Even if the test runs on desperately slow machine, there is enough buffer for it to pass. It's just a timeout, so it will take the 10 seconds only if there is an issue and then we know it's worth investigating.", "author": "rsynek", "createdAt": "2020-12-17T09:10:32Z", "path": "task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/messaging/ReactiveMessagingEventConsumerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.messaging;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+class ReactiveMessagingEventConsumerTest {\n+\n+    @Test\n+    @Timeout(2)", "originalCommit": "e42eb2bacde8df5dea1bbcb78f5124d9ee994982", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7db278a3c7630bbf5304bd32ab110fb91049c64", "chunk": "diff --git a/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/messaging/ReactiveMessagingEventConsumerTest.java b/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/messaging/ReactiveMessagingEventConsumerTest.java\nindex 3963b535..eddad6eb 100644\n--- a/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/messaging/ReactiveMessagingEventConsumerTest.java\n+++ b/task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/messaging/ReactiveMessagingEventConsumerTest.java\n\n@@ -28,7 +28,7 @@ import static org.mockito.Mockito.verify;\n class ReactiveMessagingEventConsumerTest {\n \n     @Test\n-    @Timeout(2)\n+    @Timeout(10)\n     void onUserTaskEvent() throws Exception {\n         ReactiveMessagingEventConsumer consumer = spy(new ReactiveMessagingEventConsumer());\n         UserTaskEvent event = new UserTaskEvent();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyOTA0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r544929040", "bodyText": "The RegisterForReflection annotation is there because of the (de)serialization  to/from JSON?", "author": "rsynek", "createdAt": "2020-12-17T09:15:18Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/messaging/UserTaskEventMessage.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.messaging;\n+\n+import java.net.URI;\n+import java.time.ZonedDateTime;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@RegisterForReflection", "originalCommit": "e42eb2bacde8df5dea1bbcb78f5124d9ee994982", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwNDAzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r545004038", "bodyText": "This annotation is for making this class properly managed for the native image generation.", "author": "wmedvede", "createdAt": "2020-12-17T11:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyOTA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1Nzk5OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r545257999", "bodyText": "Yep, I was more interested in what is the reason for reflection there - and I guess it's the JSON serialization itself (through e.g. the jackson library).", "author": "rsynek", "createdAt": "2020-12-17T17:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyOTA0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNjM3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r544936376", "bodyText": "I think this test case can be simplified a bit, depending on what you want to check:\nA) to check only the deserialization, prepare the expected object and use assertIsEqualToComparingFieldByFieldRecursively to make sure it's equal to the object deserialized from JSON\nB) in case you want to check also serialization, you can deserialize and again serialize the JSON and compare it as a String with the original JSON String. This way you check also formatting (not sure how much relevant it is in this case).", "author": "rsynek", "createdAt": "2020-12-17T09:26:16Z", "path": "task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/messaging/UserTaskEventDeserializerTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.messaging;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.kie.kogito.taskassigning.TestUtil.parseZonedDateTime;\n+\n+class UserTaskEventDeserializerTest {", "originalCommit": "e42eb2bacde8df5dea1bbcb78f5124d9ee994982", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyODI4NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r545128284", "bodyText": "I've been looking at the signature of the suggested alternative A) method, see below, but honestly I don't like it and don't see it as a huge simplification. The package \"internal\" see org.assertj.core.internal.Objects dosen't look inspiring to use too. O the other hand this format is never used in all kogito-runtimes, kogito-apps or even OptaPlanner.\nI think current test is ok, what we are testing is a Deserializer, so it's intended to basically take a json  and return a pojo, and this is exactly what the test does.\nI'll will go with this format.\nvoid assertIsEqualToComparingFieldByFieldRecursively(AssertionInfo info,\nObject actual,\nObject other,\nMap<String,Comparator<?>> comparatorByPropertyOrField,\nTypeComparators comparatorByType)", "author": "wmedvede", "createdAt": "2020-12-17T14:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNjM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NTU0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r545265541", "bodyText": "Sorry for a wrong link; it is the implementation hidden by the fluent API, where a similar method is available too: https://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractObjectAssert.html#isEqualToComparingFieldByField-java.lang.Object-", "author": "rsynek", "createdAt": "2020-12-17T17:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNjM3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNzQzNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r544937434", "bodyText": "What is the role of the endpoint in the event?", "author": "rsynek", "createdAt": "2020-12-17T09:27:42Z", "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/messaging/UserTaskEventDeserializer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.messaging;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.time.temporal.ChronoUnit;\n+\n+import com.google.common.net.UrlEscapers;\n+import org.apache.kafka.common.errors.SerializationException;\n+import org.apache.kafka.common.serialization.Deserializer;\n+\n+import static java.lang.String.format;\n+import static org.kie.kogito.taskassigning.util.JsonUtils.OBJECT_MAPPER;\n+\n+public class UserTaskEventDeserializer implements Deserializer<UserTaskEvent> {\n+\n+    @Override\n+    public UserTaskEvent deserialize(String topic, byte[] data) {\n+        try {\n+            if (data == null) {\n+                return null;\n+            }\n+            UserTaskEventMessage message = OBJECT_MAPPER.readValue(data, UserTaskEventMessage.class);\n+            UserTaskEvent event = message.getData();\n+            event.setEventTime(message.getTime());\n+            event.setLastUpdate(message.getTime().truncatedTo(ChronoUnit.MILLIS));\n+            event.setEndpoint(buildEndpoint(message.getSource(), event.getProcessInstanceId(), event.getName(), event.getId()));", "originalCommit": "e42eb2bacde8df5dea1bbcb78f5124d9ee994982", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAxNzMzNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/570#discussion_r545017334", "bodyText": "I you remember, in my Kogito tour presentation, I've showed how the events carries the url at where the process service live.  So by using this url, we can know how to invoke the referred process, etc.", "author": "wmedvede", "createdAt": "2020-12-17T11:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNzQzNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e7db278a3c7630bbf5304bd32ab110fb91049c64", "url": "https://github.com/kiegroup/kogito-apps/commit/e7db278a3c7630bbf5304bd32ab110fb91049c64", "message": "PLANNER-2247: Task events consumption / data index subscriptions", "committedDate": "2020-12-17T14:28:23Z", "type": "commit"}, {"oid": "e7db278a3c7630bbf5304bd32ab110fb91049c64", "url": "https://github.com/kiegroup/kogito-apps/commit/e7db278a3c7630bbf5304bd32ab110fb91049c64", "message": "PLANNER-2247: Task events consumption / data index subscriptions", "committedDate": "2020-12-17T14:28:23Z", "type": "forcePushed"}]}