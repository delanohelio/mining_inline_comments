{"pr_number": 339, "pr_title": "KOGITO-2848 - trusty and explainability messaging ", "pr_createdAt": "2020-07-23T12:04:57Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/339", "timeline": [{"oid": "4a7e11bec5d5b094caefbe0c6bb0e075da4cdaab", "url": "https://github.com/kiegroup/kogito-apps/commit/4a7e11bec5d5b094caefbe0c6bb0e075da4cdaab", "message": "add scaffolding", "committedDate": "2020-07-23T12:03:21Z", "type": "commit"}, {"oid": "de9c1d2f9812c03d776495c774ddd42bfde32b80", "url": "https://github.com/kiegroup/kogito-apps/commit/de9c1d2f9812c03d776495c774ddd42bfde32b80", "message": "test full iteration of messages", "committedDate": "2020-07-23T14:10:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3NDczMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r460774730", "bodyText": "What about a from factory method on ExplainabilityRequest that accepts the whole ExplainabilityRequestDto so that it will be easier to evolve in the future?", "author": "danielezonca", "createdAt": "2020-07-27T09:48:53Z", "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging.incoming;\n+\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n+\n+public class ExplainabilityRequestConverter {\n+    public static ExplainabilityRequest toRequest(ExplainabilityRequestDto explainabilityRequestDto){\n+        return new ExplainabilityRequest(explainabilityRequestDto.executionId);", "originalCommit": "de9c1d2f9812c03d776495c774ddd42bfde32b80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MDYyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r461590629", "bodyText": "Yep, absolutely", "author": "r00ta", "createdAt": "2020-07-28T13:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3NDczMA=="}], "type": "inlineReview", "revised_code": {"commit": "d3010d9aab0519dbba716602ba36963225408990", "chunk": "diff --git a/explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConverter.java b/explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConverter.java\ndeleted file mode 100644\nindex f4ed6194..00000000\n--- a/explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConverter.java\n+++ /dev/null\n\n@@ -1,26 +0,0 @@\n-/*\n- *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *        http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.kie.kogito.explainability.messaging.incoming;\n-\n-import org.kie.kogito.explainability.models.ExplainabilityRequest;\n-import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n-\n-public class ExplainabilityRequestConverter {\n-    public static ExplainabilityRequest toRequest(ExplainabilityRequestDto explainabilityRequestDto){\n-        return new ExplainabilityRequest(explainabilityRequestDto.executionId);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODQwMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r460808403", "bodyText": "Can you please apply these changes?\n\nrefactor this class to have both incoming and outgoing events\nadd a callback parameter to processExplainability method\ncreate a -kafka module with reactive messaging part and another -rest module with the same processExplainability method exposed as REST", "author": "danielezonca", "createdAt": "2020-07-27T10:54:17Z", "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConsumer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging.incoming;\n+\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.trusty.api.CloudEventUtils;\n+import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityRequestConsumer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityRequestConsumer.class);\n+\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+\n+    private final IExplanationService service;\n+\n+    @Inject\n+    public ExplainabilityRequestConsumer(IExplanationService service) {\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"trusty-explainability-request\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<ExplainabilityRequestDto>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload, CLOUD_EVENT_TYPE));\n+        } catch (IllegalStateException e) {\n+            LOGGER.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<ExplainabilityRequestDto> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<ExplainabilityRequestDto> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOGGER.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return;\n+        }\n+\n+        LOGGER.info(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        ExplainabilityRequestDto explainabilityResult = optData.get();\n+\n+        service.processExplainability(ExplainabilityRequestConverter.toRequest(explainabilityResult));", "originalCommit": "de9c1d2f9812c03d776495c774ddd42bfde32b80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNzI4Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463507287", "bodyText": "Hi @danielezonca, I'm done but I did not use a callback. Let me know what do you think", "author": "r00ta", "createdAt": "2020-07-31T09:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "d3010d9aab0519dbba716602ba36963225408990", "chunk": "diff --git a/explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConsumer.java b/explainability-service/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\nsimilarity index 50%\nrename from explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConsumer.java\nrename to explainability-service/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\nindex 2d55a5fe..f3b51071 100644\n--- a/explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConsumer.java\n+++ b/explainability-service/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\n\n@@ -14,10 +14,13 @@\n  *  limitations under the License.\n  */\n \n-package org.kie.kogito.explainability.messaging.incoming;\n+package org.kie.kogito.explainability.messaging;\n \n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n import java.util.Optional;\n-import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionStage;\n \n import javax.enterprise.context.ApplicationScoped;\n"}}, {"oid": "344f442c9f1f7a10a009640545fff6eeed94b808", "url": "https://github.com/kiegroup/kogito-apps/commit/344f442c9f1f7a10a009640545fff6eeed94b808", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration", "committedDate": "2020-07-28T15:05:44Z", "type": "commit"}, {"oid": "d3010d9aab0519dbba716602ba36963225408990", "url": "https://github.com/kiegroup/kogito-apps/commit/d3010d9aab0519dbba716602ba36963225408990", "message": "use reactive", "committedDate": "2020-07-29T17:22:43Z", "type": "commit"}, {"oid": "f6d6905c8a8913de4585b13397b5c978dae20111", "url": "https://github.com/kiegroup/kogito-apps/commit/f6d6905c8a8913de4585b13397b5c978dae20111", "message": "rebase", "committedDate": "2020-07-29T19:14:42Z", "type": "commit"}, {"oid": "1ca60c49b75b6c45c1f22d5b56b5ad7091c2bb9f", "url": "https://github.com/kiegroup/kogito-apps/commit/1ca60c49b75b6c45c1f22d5b56b5ad7091c2bb9f", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration", "committedDate": "2020-07-31T08:01:58Z", "type": "commit"}, {"oid": "71942efc3431a6fdc74ecb39c5250d39973015f2", "url": "https://github.com/kiegroup/kogito-apps/commit/71942efc3431a6fdc74ecb39c5250d39973015f2", "message": "rebase and create explainability-api module", "committedDate": "2020-07-31T08:39:22Z", "type": "commit"}, {"oid": "7d2b1490565699a639b3bc23719068b733d715f2", "url": "https://github.com/kiegroup/kogito-apps/commit/7d2b1490565699a639b3bc23719068b733d715f2", "message": "use vertx executor", "committedDate": "2020-07-31T08:47:22Z", "type": "commit"}, {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353", "url": "https://github.com/kiegroup/kogito-apps/commit/a04a2cf9a3563de52431eb9545cc10e6c0a5a353", "message": "refactoring modules with messaging and rest", "committedDate": "2020-07-31T09:25:59Z", "type": "commit"}, {"oid": "9c60a2829816ef5e742fd7e683d227bf885bf4e8", "url": "https://github.com/kiegroup/kogito-apps/commit/9c60a2829816ef5e742fd7e683d227bf885bf4e8", "message": "fix", "committedDate": "2020-07-31T11:50:47Z", "type": "commit"}, {"oid": "d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6", "url": "https://github.com/kiegroup/kogito-apps/commit/d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6", "message": "fixes", "committedDate": "2020-07-31T11:52:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTM3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463541371", "bodyText": "I don't like mixed injection: can you please inject only fields or make all the injection done at constructor level?", "author": "danielezonca", "createdAt": "2020-07-31T10:48:21Z", "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+    private final IExplanationService service;\n+\n+    @Inject\n+    ManagedExecutor executor;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService service) {\n+        this.service = service;", "originalCommit": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c60a2829816ef5e742fd7e683d227bf885bf4e8", "chunk": "diff --git a/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java b/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\nindex c68bd463..530aafbf 100644\n--- a/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\n+++ b/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\n\n@@ -64,7 +64,6 @@ public class ExplainabilityMessagingHandler {\n \n     // Incoming\n     @Incoming(\"trusty-explainability-request\")\n-    @Blocking\n     public CompletionStage<Void> handleMessage(Message<String> message) {\n         Optional<CloudEventImpl<ExplainabilityRequestDto>> cloudEventOpt = decodeCloudEvent(message.getPayload());\n         if (!cloudEventOpt.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTkyOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463541928", "bodyText": "Is there any reason why here is CompletableStage while all the other methods are using CompletableFuture?", "author": "danielezonca", "createdAt": "2020-07-31T10:49:45Z", "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+    private final IExplanationService service;\n+\n+    @Inject\n+    ManagedExecutor executor;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService service) {\n+        this.service = service;\n+    }\n+\n+    // Incoming\n+    @Incoming(\"trusty-explainability-request\")\n+    @Blocking\n+    public CompletionStage<Void> handleMessage(Message<String> message) {", "originalCommit": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyOTIxMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r464929213", "bodyText": "The smallrye Message message.ack() returns a CompletionStage, actually it makes sense that we also return CompletionStage in the library and in the other methods. I've changed it accordingly", "author": "r00ta", "createdAt": "2020-08-04T09:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "9c60a2829816ef5e742fd7e683d227bf885bf4e8", "chunk": "diff --git a/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java b/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\nindex c68bd463..530aafbf 100644\n--- a/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\n+++ b/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\n\n@@ -64,7 +64,6 @@ public class ExplainabilityMessagingHandler {\n \n     // Incoming\n     @Incoming(\"trusty-explainability-request\")\n-    @Blocking\n     public CompletionStage<Void> handleMessage(Message<String> message) {\n         Optional<CloudEventImpl<ExplainabilityRequestDto>> cloudEventOpt = decodeCloudEvent(message.getPayload());\n         if (!cloudEventOpt.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mzg4Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463543886", "bodyText": "What about add an application property to disable explanation? (And then update also related rest endpoints)", "author": "danielezonca", "createdAt": "2020-07-31T10:54:33Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -76,4 +83,15 @@ public void storeDecision(String executionId, Decision decision) {\n     public void updateDecision(String executionId, Decision decision) {\n         storageService.getDecisionsStorage().put(executionId, decision);\n     }\n+\n+    @Override\n+    public void processDecision(String executionId, Decision decision) {\n+        storeDecision(executionId, decision);\n+        explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(UUID.randomUUID().toString()));", "originalCommit": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4OTUyNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463589526", "bodyText": "makes sense", "author": "r00ta", "createdAt": "2020-07-31T12:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mzg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwNTEwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463705107", "bodyText": "Please make it disable by default", "author": "danielezonca", "createdAt": "2020-07-31T16:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mzg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "793e70aa94a700a2a04cbf2ec72ac56d98d1d500", "chunk": "diff --git a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java\nindex b6bd2225..4d1c43be 100644\n--- a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java\n+++ b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java\n\n@@ -87,11 +90,14 @@ public class TrustyService implements ITrustyService {\n     @Override\n     public void processDecision(String executionId, Decision decision) {\n         storeDecision(executionId, decision);\n-        explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(UUID.randomUUID().toString()));\n+        // TODO: Create a proper ExplainabilityRequestDto when all the properties will be defined and available. https://issues.redhat.com/browse/KOGITO-2944\n+        if (isExplainabilityEnabled) {\n+            explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(executionId));\n+        }\n     }\n \n     @Override\n     public void storeExplainability(String executionId, ExplainabilityResult result) {\n-        // TODO: Store it\n+        // TODO: Store it https://issues.redhat.com/browse/KOGITO-2945\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NTQ0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463585441", "bodyText": "Remember to remove it before merging :)", "author": "danielezonca", "createdAt": "2020-07-31T12:38:08Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/Test.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.trusty.service.messaging.outgoing.ExplainabilityRequestProducer;\n+\n+@Path(\"/test\")\n+public class Test {", "originalCommit": "d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "793e70aa94a700a2a04cbf2ec72ac56d98d1d500", "chunk": "diff --git a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/Test.java b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/Test.java\ndeleted file mode 100644\nindex 451d65b4..00000000\n--- a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/Test.java\n+++ /dev/null\n\n@@ -1,27 +0,0 @@\n-package org.kie.kogito.trusty.service.api;\n-\n-import java.util.UUID;\n-\n-import javax.inject.Inject;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-\n-import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n-import org.kie.kogito.trusty.service.messaging.outgoing.ExplainabilityRequestProducer;\n-\n-@Path(\"/test\")\n-public class Test {\n-\n-    @Inject\n-    ExplainabilityRequestProducer explainabilityRequestProducer;\n-\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public Response test() {\n-        explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(UUID.randomUUID().toString()));\n-        return Response.ok().build();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4Njc1Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463586752", "bodyText": "Unused import?", "author": "danielezonca", "createdAt": "2020-07-31T12:41:02Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java", "diffHunk": "@@ -25,6 +25,7 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import io.cloudevents.v1.AttributesImpl;\n import io.cloudevents.v1.CloudEventImpl;\n+import io.smallrye.reactive.messaging.annotations.Blocking;", "originalCommit": "d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "793e70aa94a700a2a04cbf2ec72ac56d98d1d500", "chunk": "diff --git a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java\nindex d38d0d6e..bbc8b296 100644\n--- a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java\n+++ b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java\n\n@@ -25,7 +25,6 @@ import javax.inject.Inject;\n import com.fasterxml.jackson.core.type.TypeReference;\n import io.cloudevents.v1.AttributesImpl;\n import io.cloudevents.v1.CloudEventImpl;\n-import io.smallrye.reactive.messaging.annotations.Blocking;\n import org.eclipse.microprofile.reactive.messaging.Incoming;\n import org.eclipse.microprofile.reactive.messaging.Message;\n import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n"}}, {"oid": "c5e7fd12fb322f201581738dd6ae68198b8a860c", "url": "https://github.com/kiegroup/kogito-apps/commit/c5e7fd12fb322f201581738dd6ae68198b8a860c", "message": "add rest tests and trusty expl result IT", "committedDate": "2020-07-31T13:58:16Z", "type": "commit"}, {"oid": "90327ef726b5687e449ab016a1b9769cb489179b", "url": "https://github.com/kiegroup/kogito-apps/commit/90327ef726b5687e449ab016a1b9769cb489179b", "message": "add licence headers", "committedDate": "2020-07-31T13:59:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczNzUzMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463737531", "bodyText": "Please rename :)", "author": "danielezonca", "createdAt": "2020-07-31T17:28:03Z", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.rest;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import io.smallrye.mutiny.Uni;\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+\n+@Path(\"/v1\")\n+public class ExplainabilityApiV1 {\n+\n+    @Inject\n+    IExplanationService explanationService;\n+\n+    @POST\n+    @Path(\"/explain\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Retrieve the explainability for a given decision.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = ExplainabilityRequestDto.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Retrieve the explainability for a given decision.\", description = \"Retrieve the explainability for a given decision.\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Uni<Response> test(ExplainabilityRequestDto request) {", "originalCommit": "90327ef726b5687e449ab016a1b9769cb489179b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e19328817b2f908958eb0b5eb468fb354fe8a37", "chunk": "diff --git a/explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java b/explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java\nindex 81e82fe0..c2f991c8 100644\n--- a/explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java\n+++ b/explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java\n\n@@ -16,7 +16,7 @@\n \n package org.kie.kogito.explainability.rest;\n \n-import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n \n import javax.inject.Inject;\n import javax.ws.rs.Consumes;\n"}}, {"oid": "62917daca1394e47e11538dd55b40e56f5fe447d", "url": "https://github.com/kiegroup/kogito-apps/commit/62917daca1394e47e11538dd55b40e56f5fe447d", "message": "refactoring kafka test resources", "committedDate": "2020-08-03T16:28:13Z", "type": "commit"}, {"oid": "5919643839108638dc689f088f8ab3a3e83d9d9e", "url": "https://github.com/kiegroup/kogito-apps/commit/5919643839108638dc689f088f8ab3a3e83d9d9e", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration", "committedDate": "2020-08-03T16:31:50Z", "type": "commit"}, {"oid": "3c09806878ba17df63ee4a237fefe35e0e67db71", "url": "https://github.com/kiegroup/kogito-apps/commit/3c09806878ba17df63ee4a237fefe35e0e67db71", "message": "integration test for explainability messaging, refactoring, add todos", "committedDate": "2020-08-04T09:18:32Z", "type": "commit"}, {"oid": "793e70aa94a700a2a04cbf2ec72ac56d98d1d500", "url": "https://github.com/kiegroup/kogito-apps/commit/793e70aa94a700a2a04cbf2ec72ac56d98d1d500", "message": "make explainability request configurable, fix comments", "committedDate": "2020-08-04T09:39:47Z", "type": "commit"}, {"oid": "6e19328817b2f908958eb0b5eb468fb354fe8a37", "url": "https://github.com/kiegroup/kogito-apps/commit/6e19328817b2f908958eb0b5eb468fb354fe8a37", "message": "rename method endpoint", "committedDate": "2020-08-04T09:41:53Z", "type": "commit"}, {"oid": "462187f390c812cff901945028b763ae15922d6d", "url": "https://github.com/kiegroup/kogito-apps/commit/462187f390c812cff901945028b763ae15922d6d", "message": "fix typo in pom", "committedDate": "2020-08-04T09:42:38Z", "type": "commit"}, {"oid": "e5e8cc05573917c8f59000f30ca0a7753dcabb18", "url": "https://github.com/kiegroup/kogito-apps/commit/e5e8cc05573917c8f59000f30ca0a7753dcabb18", "message": "add licence headers", "committedDate": "2020-08-04T10:44:39Z", "type": "commit"}, {"oid": "25eb04e96b87e67b31562373d672e3957a5fd2a6", "url": "https://github.com/kiegroup/kogito-apps/commit/25eb04e96b87e67b31562373d672e3957a5fd2a6", "message": "remove quarkus port", "committedDate": "2020-08-04T10:57:26Z", "type": "commit"}, {"oid": "91a18b99a7e538cb9562001a9f16ec64fc6630c8", "url": "https://github.com/kiegroup/kogito-apps/commit/91a18b99a7e538cb9562001a9f16ec64fc6630c8", "message": "fix kafka topic name", "committedDate": "2020-08-04T14:35:00Z", "type": "commit"}, {"oid": "bbc530efb757ee192dd03ab637cb7c114f3b848b", "url": "https://github.com/kiegroup/kogito-apps/commit/bbc530efb757ee192dd03ab637cb7c114f3b848b", "message": "rebase", "committedDate": "2020-08-04T15:29:13Z", "type": "commit"}, {"oid": "e0454fd0a43d1ac060f7036588b8633c1e6a6e73", "url": "https://github.com/kiegroup/kogito-apps/commit/e0454fd0a43d1ac060f7036588b8633c1e6a6e73", "message": "fix code smells", "committedDate": "2020-08-04T15:51:05Z", "type": "commit"}, {"oid": "014bcd2d2a0bf8600e77ccb3a0246e017e0e6ff9", "url": "https://github.com/kiegroup/kogito-apps/commit/014bcd2d2a0bf8600e77ccb3a0246e017e0e6ff9", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration", "committedDate": "2020-08-05T08:44:47Z", "type": "commit"}, {"oid": "0abefeaa97d223dcce673226b78b56e519c73278", "url": "https://github.com/kiegroup/kogito-apps/commit/0abefeaa97d223dcce673226b78b56e519c73278", "message": "refactoring kafka messaging tests", "committedDate": "2020-08-05T11:10:40Z", "type": "commit"}, {"oid": "1656a93778cc94f6b5d736298fb705134b5d4826", "url": "https://github.com/kiegroup/kogito-apps/commit/1656a93778cc94f6b5d736298fb705134b5d4826", "message": "add licence header", "committedDate": "2020-08-05T11:11:08Z", "type": "commit"}, {"oid": "717385c6692527e5d4c7e93eb13d42267a0cf5a4", "url": "https://github.com/kiegroup/kogito-apps/commit/717385c6692527e5d4c7e93eb13d42267a0cf5a4", "message": "fix nullpointer when hasSucceeded is null", "committedDate": "2020-08-05T13:14:14Z", "type": "commit"}, {"oid": "acf5a028dff49a8aa20dd468221006c66048379f", "url": "https://github.com/kiegroup/kogito-apps/commit/acf5a028dff49a8aa20dd468221006c66048379f", "message": "improve explainability messaging test", "committedDate": "2020-08-05T13:36:00Z", "type": "commit"}, {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4", "url": "https://github.com/kiegroup/kogito-apps/commit/a826a77218f82446468dcdb5f9acd0299c24d9a4", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration", "committedDate": "2020-08-05T20:29:41Z", "type": "commit"}, {"oid": "a4ee882b4121b24ce556d0bc6c0fb2027b6c2fe2", "url": "https://github.com/kiegroup/kogito-apps/commit/a4ee882b4121b24ce556d0bc6c0fb2027b6c2fe2", "message": "remove unused imports", "committedDate": "2020-08-06T09:46:35Z", "type": "commit"}, {"oid": "9069affc8d38658043940dce77bd5899aff9a6ee", "url": "https://github.com/kiegroup/kogito-apps/commit/9069affc8d38658043940dce77bd5899aff9a6ee", "message": "improve test coverage", "committedDate": "2020-08-06T11:07:17Z", "type": "commit"}, {"oid": "55336e1800a8e95f2a2ecc54f92add642d6f63d6", "url": "https://github.com/kiegroup/kogito-apps/commit/55336e1800a8e95f2a2ecc54f92add642d6f63d6", "message": "remove unused imports", "committedDate": "2020-08-06T11:08:16Z", "type": "commit"}, {"oid": "33fdf47cde45de92d141d5771651eded5b291e03", "url": "https://github.com/kiegroup/kogito-apps/commit/33fdf47cde45de92d141d5771651eded5b291e03", "message": "add spaces", "committedDate": "2020-08-06T12:53:32Z", "type": "commit"}, {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b", "url": "https://github.com/kiegroup/kogito-apps/commit/99a20a8ac2a739d7eeac52d6de373890c6bc038b", "message": "align injection of beans", "committedDate": "2020-08-06T13:23:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMzkzMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466433930", "bodyText": "?", "author": "evacchi", "createdAt": "2020-08-06T14:00:12Z", "path": "explainability/explainability-api/src/main/java/org/kie/kogito/explainability/api/ExplainabilityResultDto.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.api;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ExplainabilityResultDto {\n+    @JsonProperty(\"executionId\")\n+    private String executionId;\n+\n+    // TODO: add properties", "originalCommit": "99a20a8ac2a739d7eeac52d6de373890c6bc038b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MzQ2OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466453469", "bodyText": "Hi @evacchi We still miss some information to complete this dto (kiegroup/kogito-runtimes#651). This PR adds the infrastructure, the content and the final integration with the data types are supposed to be done in another pull request as soon as we have all the information available", "author": "r00ta", "createdAt": "2020-08-06T14:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMzkzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0MzE0OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466443148", "bodyText": "Can you please use \"{}\" instead of \"%s\"?", "author": "jiripetrlik", "createdAt": "2020-08-06T14:13:30Z", "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+\n+    private Executor executor;\n+\n+    private IExplanationService explanationService;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService explanationService, ManagedExecutor executor) {\n+        this.explanationService = explanationService;\n+        this.executor = executor;\n+    }\n+\n+    public ExplainabilityMessagingHandler(IExplanationService explanationService, Executor executor) {\n+        this.explanationService = explanationService;\n+        this.executor = executor;\n+    }\n+\n+    // Incoming\n+    @Incoming(\"trusty-explainability-request\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        try {\n+            Optional<CloudEventImpl<ExplainabilityRequestDto>> cloudEventOpt = decodeCloudEvent(message.getPayload());\n+            if (!cloudEventOpt.isPresent()) {\n+                return message.ack();\n+            }\n+\n+            CloudEventImpl<ExplainabilityRequestDto> cloudEvent = cloudEventOpt.get();\n+            return CompletableFuture\n+                    .supplyAsync(() -> handleCloudEvent(cloudEvent), executor)\n+                    .thenAccept(x -> message.ack());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Something unexpected happened during the processing of an Event. The event is discarded.\", e);\n+        }\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<ExplainabilityRequestDto>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload, CLOUD_EVENT_TYPE));\n+        } catch (IllegalStateException e) {\n+            LOGGER.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private CompletionStage<Void> handleCloudEvent(CloudEventImpl<ExplainabilityRequestDto> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<ExplainabilityRequestDto> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOGGER.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return CompletableFuture.completedFuture(null);\n+        }\n+\n+        LOGGER.info(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        ExplainabilityRequestDto explainabilityResult = optData.get();\n+\n+        return explanationService\n+                .explainAsync(ExplainabilityRequest.from(explainabilityResult))\n+                .thenAcceptAsync(this::sendEvent, executor);\n+    }\n+\n+    // Outgoing\n+    public CompletionStage<Void> sendEvent(ExplainabilityResultDto result) {\n+        LOGGER.info(String.format(\"Explainability service emits explainability for execution with ID %s\", result.getExecutionId()));", "originalCommit": "99a20a8ac2a739d7eeac52d6de373890c6bc038b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "103633bc047144ee97f025d2236b30016e1c7008", "chunk": "diff --git a/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java b/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\nindex 0c89d4f2..f3c1f392 100644\n--- a/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\n+++ b/explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java\n\n@@ -116,7 +116,7 @@ public class ExplainabilityMessagingHandler {\n \n     // Outgoing\n     public CompletionStage<Void> sendEvent(ExplainabilityResultDto result) {\n-        LOGGER.info(String.format(\"Explainability service emits explainability for execution with ID %s\", result.getExecutionId()));\n+        LOGGER.info(\"Explainability service emits explainability for execution with ID {}\", result.getExecutionId());\n         String payload = CloudEventUtils.encode(\n                 CloudEventUtils.build(result.getExecutionId(),\n                                       URI_PRODUCER,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Mzk0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466443945", "bodyText": "Please remove commented code or add some explanation why is useful.", "author": "jiripetrlik", "createdAt": "2020-08-06T14:14:43Z", "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ExplanationService.java", "diffHunk": "@@ -16,6 +16,29 @@\n \n package org.kie.kogito.explainability;\n \n-public class ExplanationService {\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+\n+@ApplicationScoped\n+public class ExplanationService implements IExplanationService {\n+\n+    // private static final LimeExplainer LIME_EXPLAINER = new LimeExplainer(0, 0, 0);", "originalCommit": "99a20a8ac2a739d7eeac52d6de373890c6bc038b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "103633bc047144ee97f025d2236b30016e1c7008", "chunk": "diff --git a/explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ExplanationService.java b/explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ExplanationService.java\nindex 238da641..643bb020 100644\n--- a/explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ExplanationService.java\n+++ b/explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ExplanationService.java\n\n@@ -29,16 +29,12 @@ import org.kie.kogito.explainability.models.ExplainabilityRequest;\n @ApplicationScoped\n public class ExplanationService implements IExplanationService {\n \n-    // private static final LimeExplainer LIME_EXPLAINER = new LimeExplainer(0, 0, 0);\n-\n     @Inject\n     ManagedExecutor executor;\n \n     @Override\n     public CompletionStage<ExplainabilityResultDto> explainAsync(ExplainabilityRequest request) {\n         // TODO: get explainability from expl library https://issues.redhat.com/browse/KOGITO-2920\n-        // LIME_EXPLAINER.explain(prediction, modelProvider);\n-\n         return CompletableFuture.supplyAsync(() -> new ExplainabilityResultDto(request.getExecutionId()), executor);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDg3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466444878", "bodyText": "Use \"{}\" instead of \"%s\".", "author": "jiripetrlik", "createdAt": "2020-08-06T14:16:07Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/outgoing/ExplainabilityRequestProducer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging.outgoing;\n+\n+import java.net.URI;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityRequestProducer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityRequestProducer.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"trustyService/ExplainabilityRequestProducer\");\n+\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+\n+    public void sendEvent(ExplainabilityRequestDto request) {\n+        LOGGER.info(String.format(\"Sending explainability request with id %s\", request.getExecutionId()));", "originalCommit": "99a20a8ac2a739d7eeac52d6de373890c6bc038b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "103633bc047144ee97f025d2236b30016e1c7008", "chunk": "diff --git a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/outgoing/ExplainabilityRequestProducer.java b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/outgoing/ExplainabilityRequestProducer.java\nindex 5bb69b2f..18bbfe4b 100644\n--- a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/outgoing/ExplainabilityRequestProducer.java\n+++ b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/outgoing/ExplainabilityRequestProducer.java\n\n@@ -39,7 +39,7 @@ public class ExplainabilityRequestProducer {\n     private final PublishSubject<String> eventSubject = PublishSubject.create();\n \n     public void sendEvent(ExplainabilityRequestDto request) {\n-        LOGGER.info(String.format(\"Sending explainability request with id %s\", request.getExecutionId()));\n+        LOGGER.info(\"Sending explainability request with id %s\", request.getExecutionId());\n         String payload = CloudEventUtils.encode(\n                 CloudEventUtils.build(request.getExecutionId(),\n                                       URI_PRODUCER,\n"}}, {"oid": "103633bc047144ee97f025d2236b30016e1c7008", "url": "https://github.com/kiegroup/kogito-apps/commit/103633bc047144ee97f025d2236b30016e1c7008", "message": "fix string format, remove comments", "committedDate": "2020-08-06T14:23:57Z", "type": "commit"}, {"oid": "e332ecfc2f7791662b75181325596445ee154c32", "url": "https://github.com/kiegroup/kogito-apps/commit/e332ecfc2f7791662b75181325596445ee154c32", "message": "use Impl convention", "committedDate": "2020-08-06T14:32:28Z", "type": "commit"}, {"oid": "835df02043638629a693b399ee85bdf19526330c", "url": "https://github.com/kiegroup/kogito-apps/commit/835df02043638629a693b399ee85bdf19526330c", "message": "Remove I* for interfaces", "committedDate": "2020-08-06T14:33:08Z", "type": "commit"}, {"oid": "5863d775b48816b7dd985efc0da6b638e3f2513a", "url": "https://github.com/kiegroup/kogito-apps/commit/5863d775b48816b7dd985efc0da6b638e3f2513a", "message": "use default convention about naming interfaces", "committedDate": "2020-08-06T14:37:30Z", "type": "commit"}, {"oid": "0474557a72d881557213904d995e7d1a297ce89a", "url": "https://github.com/kiegroup/kogito-apps/commit/0474557a72d881557213904d995e7d1a297ce89a", "message": "fix typo", "committedDate": "2020-08-06T15:02:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDM5Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466504392", "bodyText": "Missing @Override", "author": "manstis", "createdAt": "2020-08-06T15:39:43Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyServiceImpl.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.QueryFilterFactory;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelIdCreator;\n+import org.kie.kogito.trusty.service.messaging.outgoing.ExplainabilityRequestProducer;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.kie.kogito.trusty.storage.api.model.ExplainabilityResult;\n+\n+@ApplicationScoped\n+public class TrustyServiceImpl implements TrustyService {\n+\n+    @ConfigProperty(name = \"trusty.explainability.enabled\")\n+    Boolean isExplainabilityEnabled;\n+\n+    @Inject\n+    ExplainabilityRequestProducer explainabilityRequestProducer;\n+\n+    @Inject\n+    TrustyStorageService storageService;\n+\n+    TrustyServiceImpl() {\n+        // dummy constructor needed\n+    }\n+\n+    public TrustyServiceImpl(TrustyStorageService storageService) {\n+        this.storageService = storageService;\n+    }\n+\n+    @Override\n+    public List<Execution> getExecutionHeaders(OffsetDateTime from, OffsetDateTime to, int limit, int offset, String prefix) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        List<AttributeFilter<?>> filters = new ArrayList<>();\n+        filters.add(QueryFilterFactory.like(Execution.EXECUTION_ID_FIELD, prefix + \"*\"));\n+        filters.add(QueryFilterFactory.greaterThanEqual(Execution.EXECUTION_TIMESTAMP_FIELD, from.toInstant().toEpochMilli()));\n+        filters.add(QueryFilterFactory.lessThanEqual(Execution.EXECUTION_TIMESTAMP_FIELD, to.toInstant().toEpochMilli()));\n+        return new ArrayList<>(storage.query().limit(limit).offset(offset).filter(filters).execute());\n+    }\n+\n+    @Override\n+    public Decision getDecisionById(String executionId) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (!storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s does not exist in the storage.\", executionId));\n+        }\n+        return storage.get(executionId);\n+    }\n+\n+    @Override\n+    public void storeDecision(String executionId, Decision decision) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s is already present in the storage.\", executionId));\n+        }\n+        storage.put(executionId, decision);\n+    }\n+\n+    @Override\n+    public void updateDecision(String executionId, Decision decision) {\n+        storageService.getDecisionsStorage().put(executionId, decision);\n+    }\n+\n+    @Override\n+    public void processDecision(String executionId, Decision decision) {\n+        storeDecision(executionId, decision);\n+        // TODO: Create a proper ExplainabilityRequestDto when all the properties will be defined and available. https://issues.redhat.com/browse/KOGITO-2944\n+        if (Boolean.TRUE.equals(isExplainabilityEnabled)) {\n+            explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(executionId));\n+        }\n+    }\n+\n+    @Override\n+    public void storeExplainability(String executionId, ExplainabilityResult result) {\n+        // TODO: Store it https://issues.redhat.com/browse/KOGITO-2945\n+    }\n+\n+    public void storeModel(String groupId, String artifactId, String version, String name, String namespace, String definition) {", "originalCommit": "0474557a72d881557213904d995e7d1a297ce89a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b6ed3484d83d65717b90acaed856760cf505542", "chunk": "diff --git a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyServiceImpl.java b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyServiceImpl.java\nindex 40d5fbea..99238c0d 100644\n--- a/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyServiceImpl.java\n+++ b/trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyServiceImpl.java\n\n@@ -102,6 +102,7 @@ public class TrustyServiceImpl implements TrustyService {\n         // TODO: Store it https://issues.redhat.com/browse/KOGITO-2945\n     }\n \n+    @Override\n     public void storeModel(String groupId, String artifactId, String version, String name, String namespace, String definition) {\n         final String identifier = ModelIdCreator.makeIdentifier(groupId, artifactId, version, name, namespace);\n         final Storage<String, String> storage = storageService.getModelStorage();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjM4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506382", "bodyText": "I suspect a class has moved w/o updating the test package too?\nIMO it's nice to keep classes and test classes in the same package where appropriate (as, I believe, is this case).", "author": "manstis", "createdAt": "2020-08-06T15:42:32Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConsumerTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelEventConsumer;", "originalCommit": "0474557a72d881557213904d995e7d1a297ce89a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b6ed3484d83d65717b90acaed856760cf505542", "chunk": "diff --git a/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConsumerTest.java b/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConsumerTest.java\nsimilarity index 96%\nrename from trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConsumerTest.java\nrename to trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConsumerTest.java\nindex 6347a41e..f44feadc 100644\n--- a/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConsumerTest.java\n+++ b/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConsumerTest.java\n\n@@ -14,14 +14,13 @@\n  *  limitations under the License.\n  */\n \n-package org.kie.kogito.trusty.service.messaging;\n+package org.kie.kogito.trusty.service.messaging.incoming;\n \n import org.eclipse.microprofile.reactive.messaging.Message;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.trusty.service.TrustyService;\n-import org.kie.kogito.trusty.service.messaging.incoming.ModelEventConsumer;\n import org.kie.kogito.trusty.storage.api.model.Decision;\n \n import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CORRECT_CLOUDEVENT_ID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjQ0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506446", "bodyText": "As above.", "author": "manstis", "createdAt": "2020-08-06T15:42:40Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConverterTest.java", "diffHunk": "@@ -17,6 +17,7 @@\n package org.kie.kogito.trusty.service.messaging;\n \n import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelEventConverter;", "originalCommit": "0474557a72d881557213904d995e7d1a297ce89a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b6ed3484d83d65717b90acaed856760cf505542", "chunk": "diff --git a/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConverterTest.java b/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConverterTest.java\nsimilarity index 88%\nrename from trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConverterTest.java\nrename to trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConverterTest.java\nindex 725e55fe..d0157175 100644\n--- a/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConverterTest.java\n+++ b/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConverterTest.java\n\n@@ -14,10 +14,9 @@\n  *  limitations under the License.\n  */\n \n-package org.kie.kogito.trusty.service.messaging;\n+package org.kie.kogito.trusty.service.messaging.incoming;\n \n import org.junit.jupiter.api.Test;\n-import org.kie.kogito.trusty.service.messaging.incoming.ModelEventConverter;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectModelEvent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjUzOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506538", "bodyText": "As above.", "author": "manstis", "createdAt": "2020-08-06T15:42:48Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelIdCreatorTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelIdCreator;", "originalCommit": "0474557a72d881557213904d995e7d1a297ce89a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b6ed3484d83d65717b90acaed856760cf505542", "chunk": "diff --git a/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelIdCreatorTest.java b/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelIdCreatorTest.java\nsimilarity index 95%\nrename from trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelIdCreatorTest.java\nrename to trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelIdCreatorTest.java\nindex c667d560..57d02a00 100644\n--- a/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelIdCreatorTest.java\n+++ b/trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/incoming/ModelIdCreatorTest.java\n\n@@ -14,14 +14,13 @@\n  *  limitations under the License.\n  */\n \n-package org.kie.kogito.trusty.service.messaging;\n+package org.kie.kogito.trusty.service.messaging.incoming;\n \n import java.util.stream.Stream;\n \n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n-import org.kie.kogito.trusty.service.messaging.incoming.ModelIdCreator;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n"}}, {"oid": "4b6ed3484d83d65717b90acaed856760cf505542", "url": "https://github.com/kiegroup/kogito-apps/commit/4b6ed3484d83d65717b90acaed856760cf505542", "message": "restore tsx resources, move messaging test to module", "committedDate": "2020-08-06T16:21:52Z", "type": "commit"}, {"oid": "e64ea3b7eb0e70c83045c6677eb927f42e2efbf1", "url": "https://github.com/kiegroup/kogito-apps/commit/e64ea3b7eb0e70c83045c6677eb927f42e2efbf1", "message": "revert tsx files", "committedDate": "2020-08-06T16:29:41Z", "type": "commit"}, {"oid": "581cf6adb55027e8a80d22e00dadf3a8e5031f2f", "url": "https://github.com/kiegroup/kogito-apps/commit/581cf6adb55027e8a80d22e00dadf3a8e5031f2f", "message": "revert changes", "committedDate": "2020-08-06T16:37:40Z", "type": "commit"}, {"oid": "5b75c170d1012c2477b88d0254127628f6d4fe34", "url": "https://github.com/kiegroup/kogito-apps/commit/5b75c170d1012c2477b88d0254127628f6d4fe34", "message": "revert tsx", "committedDate": "2020-08-06T16:40:04Z", "type": "commit"}]}