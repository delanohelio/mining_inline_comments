{"pr_number": 467, "pr_title": "FAI-243 - improved type dependent perturbations", "pr_createdAt": "2020-09-24T13:44:35Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/467", "timeline": [{"oid": "d92b4c1a3c04299b1dce4b47375dba113930c40a", "url": "https://github.com/kiegroup/kogito-apps/commit/d92b4c1a3c04299b1dce4b47375dba113930c40a", "message": "FAI-243 - improved type dependent perturbations", "committedDate": "2020-09-24T13:41:43Z", "type": "commit"}, {"oid": "b1d1bd66b1e1e1b370c9188a947859d861f76507", "url": "https://github.com/kiegroup/kogito-apps/commit/b1d1bd66b1e1e1b370c9188a947859d861f76507", "message": "FAI-243 - dropped unused imports", "committedDate": "2020-09-24T14:46:00Z", "type": "commit"}, {"oid": "ec816a9cbe4347da51dacc844b16ecb0bd443afd", "url": "https://github.com/kiegroup/kogito-apps/commit/ec816a9cbe4347da51dacc844b16ecb0bd443afd", "message": "FAI-243 - more tests", "committedDate": "2020-09-25T13:13:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4Mjg2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/467#discussion_r495882867", "bodyText": "Can you please explain when this else should happen? It seems to me just a way to ignore the actual value and replace it with a empty one", "author": "danielezonca", "createdAt": "2020-09-28T11:55:36Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -86,8 +88,21 @@\n \n         @Override\n         public Value<?> perturb(Value<?> value, PerturbationContext perturbationContext) {\n-            ByteBuffer byteBuffer = ByteBuffer.allocate(0);\n-            return new Value<>(byteBuffer);\n+            if (value.getUnderlyingObject() instanceof ByteBuffer) {\n+                ByteBuffer currentBuffer = (ByteBuffer) value.getUnderlyingObject();\n+                byte[] copy = new byte[currentBuffer.array().length];\n+                int maxPerturbationSize = Math.min(copy.length, Math.max((int) (copy.length * 0.5), perturbationContext.getNoOfPerturbations()));\n+                System.arraycopy(currentBuffer.array(), 0, copy, 0, currentBuffer.array().length);\n+                int[] indexes = perturbationContext.getRandom().ints(0, copy.length)\n+                        .limit(maxPerturbationSize).toArray();\n+                for (int i = 0; i < indexes.length; i++) {\n+                    copy[i] = 0;\n+                }\n+                return new Value<>(ByteBuffer.wrap(copy));\n+            } else {\n+                ByteBuffer byteBuffer = ByteBuffer.allocate(0);", "originalCommit": "ec816a9cbe4347da51dacc844b16ecb0bd443afd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3MTA4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/467#discussion_r497471089", "bodyText": "this is handling the \"unexpected\" case of the underlying object not being a ByteBuffer.", "author": "tteofili", "createdAt": "2020-09-30T12:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4Mjg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9f5cce205afd2e04e48d705e0c2f863cb6d12440", "chunk": "diff --git a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\nindex da27d80c6..56227b5d9 100644\n--- a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\n+++ b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\n\n@@ -95,8 +96,8 @@ public enum Type {\n                 System.arraycopy(currentBuffer.array(), 0, copy, 0, currentBuffer.array().length);\n                 int[] indexes = perturbationContext.getRandom().ints(0, copy.length)\n                         .limit(maxPerturbationSize).toArray();\n-                for (int i = 0; i < indexes.length; i++) {\n-                    copy[i] = 0;\n+                for (int index : indexes) {\n+                    copy[index] = 0;\n                 }\n                 return new Value<>(ByteBuffer.wrap(copy));\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MjAxMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/467#discussion_r496652010", "bodyText": "Are you sure about this code? I think you should iterate over indexes with a for each instead of the current code.\nIn other words: let assume that copy contains 5 elements and maxPerturbationSize is 2, then indexes could be [2, 4] but the for loop will set to 0 the first and the second entries.\nAm I wrong?", "author": "danielezonca", "createdAt": "2020-09-29T11:46:58Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -86,8 +88,21 @@\n \n         @Override\n         public Value<?> perturb(Value<?> value, PerturbationContext perturbationContext) {\n-            ByteBuffer byteBuffer = ByteBuffer.allocate(0);\n-            return new Value<>(byteBuffer);\n+            if (value.getUnderlyingObject() instanceof ByteBuffer) {\n+                ByteBuffer currentBuffer = (ByteBuffer) value.getUnderlyingObject();\n+                byte[] copy = new byte[currentBuffer.array().length];\n+                int maxPerturbationSize = Math.min(copy.length, Math.max((int) (copy.length * 0.5), perturbationContext.getNoOfPerturbations()));\n+                System.arraycopy(currentBuffer.array(), 0, copy, 0, currentBuffer.array().length);\n+                int[] indexes = perturbationContext.getRandom().ints(0, copy.length)\n+                        .limit(maxPerturbationSize).toArray();\n+                for (int i = 0; i < indexes.length; i++) {\n+                    copy[i] = 0;\n+                }", "originalCommit": "ec816a9cbe4347da51dacc844b16ecb0bd443afd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3Mjg5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/467#discussion_r497472893", "bodyText": "yes, of course that should iterate over the indexes, thanks for spotting it.", "author": "tteofili", "createdAt": "2020-09-30T12:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "9f5cce205afd2e04e48d705e0c2f863cb6d12440", "chunk": "diff --git a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\nindex da27d80c6..56227b5d9 100644\n--- a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\n+++ b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\n\n@@ -95,8 +96,8 @@ public enum Type {\n                 System.arraycopy(currentBuffer.array(), 0, copy, 0, currentBuffer.array().length);\n                 int[] indexes = perturbationContext.getRandom().ints(0, copy.length)\n                         .limit(maxPerturbationSize).toArray();\n-                for (int i = 0; i < indexes.length; i++) {\n-                    copy[i] = 0;\n+                for (int index : indexes) {\n+                    copy[index] = 0;\n                 }\n                 return new Value<>(ByteBuffer.wrap(copy));\n             } else {\n"}}, {"oid": "9f5cce205afd2e04e48d705e0c2f863cb6d12440", "url": "https://github.com/kiegroup/kogito-apps/commit/9f5cce205afd2e04e48d705e0c2f863cb6d12440", "message": "FAI-243 - better type test coverage, fixed bug in Type#encode", "committedDate": "2020-10-01T07:40:32Z", "type": "commit"}, {"oid": "4c75f682ce6fdfbad6f8140f3bf9e8986410ea1f", "url": "https://github.com/kiegroup/kogito-apps/commit/4c75f682ce6fdfbad6f8140f3bf9e8986410ea1f", "message": "Merge branch 'master' of github.com:kiegroup/kogito-apps into FAI-243", "committedDate": "2020-10-01T07:40:42Z", "type": "commit"}, {"oid": "4e8a8f6d98d81e8fc84b0f77e3a38911071bc3f8", "url": "https://github.com/kiegroup/kogito-apps/commit/4e8a8f6d98d81e8fc84b0f77e3a38911071bc3f8", "message": "FAI-243 - provided Type dependent random value generation", "committedDate": "2020-10-05T10:21:34Z", "type": "commit"}, {"oid": "d2db6174130a1bfa565ce0171b060d5ecce88f34", "url": "https://github.com/kiegroup/kogito-apps/commit/d2db6174130a1bfa565ce0171b060d5ecce88f34", "message": "FAI-243 - added typed random value generation test", "committedDate": "2020-10-05T10:38:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODk3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/467#discussion_r499508974", "bodyText": "What about use PerturbationContext instead of Random? In this way we can better decouple and be more \"futureproof\": for example we will probably add data distribution (or sort of) in the future to PerturbationContext so that the generation will be guided.", "author": "danielezonca", "createdAt": "2020-10-05T10:50:05Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -416,4 +556,16 @@ public String toString() {\n      * @return a list of vectors\n      */\n     public abstract List<double[]> encode(Value<?> target, Value<?>... values);\n+\n+    /**\n+     * Generate a random {@code Value} (depending on the underlying {@code Type}).\n+     *\n+     * @param random random instance\n+     * @return a random Value\n+     */\n+    public abstract Value<?> randomValue(Random random);", "originalCommit": "d2db6174130a1bfa565ce0171b060d5ecce88f34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyNTc2OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/467#discussion_r499525768", "bodyText": "sounds good, thx", "author": "tteofili", "createdAt": "2020-10-05T11:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "0b687bba0bdbf8a678f5f2bcd4f4d4ddbaf36730", "chunk": "diff --git a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\nindex 0fb99f3bf..e760a3ca4 100644\n--- a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\n+++ b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java\n\n@@ -560,10 +560,10 @@ public enum Type {\n     /**\n      * Generate a random {@code Value} (depending on the underlying {@code Type}).\n      *\n-     * @param random random instance\n+     * @param perturbationContext context object used to randomize values\n      * @return a random Value\n      */\n-    public abstract Value<?> randomValue(Random random);\n+    public abstract Value<?> randomValue(PerturbationContext perturbationContext);\n \n     private static String randomString(Random random) {\n         return Long.toHexString(Double.doubleToLongBits(random.nextDouble()));\n"}}, {"oid": "0b687bba0bdbf8a678f5f2bcd4f4d4ddbaf36730", "url": "https://github.com/kiegroup/kogito-apps/commit/0b687bba0bdbf8a678f5f2bcd4f4d4ddbaf36730", "message": "FAI-243 - use PC instead of Random in Type#randomValue", "committedDate": "2020-10-05T11:30:38Z", "type": "commit"}]}