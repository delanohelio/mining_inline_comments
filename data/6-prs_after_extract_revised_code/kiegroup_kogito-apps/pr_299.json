{"pr_number": 299, "pr_title": "KOGITO-2422 - Add support for Milestones in Data Index", "pr_createdAt": "2020-06-29T11:45:24Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/299", "timeline": [{"oid": "1d328ee4c391b7da93575a6086bf2c159928ea48", "url": "https://github.com/kiegroup/kogito-apps/commit/1d328ee4c391b7da93575a6086bf2c159928ea48", "message": "KOGITO-2422 - Add support for Milestones in Data Index", "committedDate": "2020-06-29T12:54:07Z", "type": "forcePushed"}, {"oid": "65b2229b1e814d899887f63dfdbff4f96fb28b26", "url": "https://github.com/kiegroup/kogito-apps/commit/65b2229b1e814d899887f63dfdbff4f96fb28b26", "message": "KOGITO-2422 - Add support for Milestones in Data Index", "committedDate": "2020-06-29T12:57:00Z", "type": "forcePushed"}, {"oid": "4f0a447cd724d56216a3f13008fd3e7b5eaf7863", "url": "https://github.com/kiegroup/kogito-apps/commit/4f0a447cd724d56216a3f13008fd3e7b5eaf7863", "message": "KOGITO-2422 - Add support for Milestones in Data Index", "committedDate": "2020-06-29T12:58:43Z", "type": "forcePushed"}, {"oid": "3e5d441998d7d77c6ce4da30c90797f38fae05a7", "url": "https://github.com/kiegroup/kogito-apps/commit/3e5d441998d7d77c6ce4da30c90797f38fae05a7", "message": "KOGITO-2422 - Add support for Milestones in Data Index", "committedDate": "2020-06-29T16:06:00Z", "type": "forcePushed"}, {"oid": "a88a21a45092ceff9bcfd482c2b69c51573842ca", "url": "https://github.com/kiegroup/kogito-apps/commit/a88a21a45092ceff9bcfd482c2b69c51573842ca", "message": "KOGITO-2422 - Add support for Milestones in Data Index", "committedDate": "2020-06-30T04:41:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2Mjg2MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/299#discussion_r448362860", "bodyText": "can we make it fluent?", "author": "ruromero", "createdAt": "2020-07-01T13:28:20Z", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Milestone.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.model;\n+\n+public class Milestone {\n+\n+    private String id;\n+    private String name;\n+    private String status;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {", "originalCommit": "a88a21a45092ceff9bcfd482c2b69c51573842ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42501105b6a80fb527d1f3bf691e263f117f48ca", "chunk": "diff --git a/data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Milestone.java b/data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Milestone.java\nindex 565906b8..bb9c5119 100644\n--- a/data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Milestone.java\n+++ b/data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Milestone.java\n\n@@ -73,4 +73,36 @@ public class Milestone {\n                 \", status='\" + status + '\\'' +\n                 '}';\n     }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+        private Milestone milestone;\n+\n+        private Builder() {\n+            milestone = new Milestone();\n+        }\n+\n+        public Builder id(String id) {\n+            milestone.setId(id);\n+            return this;\n+        }\n+\n+        public Builder name(String name) {\n+            milestone.setName(name);\n+            return this;\n+        }\n+\n+        public Builder status(String status) {\n+            milestone.setStatus(status);\n+            return this;\n+        }\n+\n+        public Milestone build() {\n+            return milestone;\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3NDkxOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/299#discussion_r448374919", "bodyText": "Please use constants, will allow a better maintenance.", "author": "ruromero", "createdAt": "2020-07-01T13:47:00Z", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/MilestoneMarshallerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import java.io.IOException;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.model.Milestone;\n+import org.mockito.InOrder;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class MilestoneMarshallerTest {\n+\n+    @Test\n+    public void testReadFrom() throws IOException {\n+        MessageMarshaller.ProtoStreamReader reader = mock(MessageMarshaller.ProtoStreamReader.class);\n+        when(reader.readString(\"id\")).thenReturn(\"id\");\n+        when(reader.readString(\"name\")).thenReturn(\"name\");\n+        when(reader.readString(\"status\")).thenReturn(\"status\");\n+\n+        Milestone milestone = new MilestoneMarshaller(null).readFrom(reader);\n+\n+        assertThat(milestone)\n+                .isNotNull()\n+                .hasFieldOrPropertyWithValue(\"id\", \"id\")\n+                .hasFieldOrPropertyWithValue(\"name\", \"name\")\n+                .hasFieldOrPropertyWithValue(\"status\", \"status\");\n+\n+        InOrder inOrder = inOrder(reader);\n+        inOrder.verify(reader).readString(\"id\");\n+        inOrder.verify(reader).readString(\"name\");\n+        inOrder.verify(reader).readString(\"status\");\n+    }\n+\n+    @Test\n+    public void testWriteTo() throws IOException {\n+        Milestone milestone = new Milestone();\n+        milestone.setId(\"id\");\n+        milestone.setName(\"name\");\n+        milestone.setStatus(\"status\");\n+\n+        MessageMarshaller.ProtoStreamWriter writer = mock(MessageMarshaller.ProtoStreamWriter.class);\n+\n+        new MilestoneMarshaller(null).writeTo(writer, milestone);\n+\n+        InOrder inOrder = inOrder(writer);\n+        inOrder.verify(writer).writeString(\"id\", \"id\");\n+        inOrder.verify(writer).writeString(\"name\", \"name\");\n+        inOrder.verify(writer).writeString(\"status\", \"status\");", "originalCommit": "a88a21a45092ceff9bcfd482c2b69c51573842ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42501105b6a80fb527d1f3bf691e263f117f48ca", "chunk": "diff --git a/data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/MilestoneMarshallerTest.java b/data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/MilestoneMarshallerTest.java\nindex c9151540..0e5f8ac0 100644\n--- a/data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/MilestoneMarshallerTest.java\n+++ b/data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/MilestoneMarshallerTest.java\n\n@@ -17,59 +17,66 @@\n package org.kie.kogito.index.infinispan.protostream;\n \n import java.io.IOException;\n+import java.util.UUID;\n \n import org.infinispan.protostream.MessageMarshaller;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.index.model.Milestone;\n+import org.kie.kogito.index.model.MilestoneStatus;\n import org.mockito.InOrder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.kogito.index.infinispan.protostream.MilestoneMarshaller.ID;\n+import static org.kie.kogito.index.infinispan.protostream.MilestoneMarshaller.NAME;\n+import static org.kie.kogito.index.infinispan.protostream.MilestoneMarshaller.STATUS;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class MilestoneMarshallerTest {\n+class MilestoneMarshallerTest {\n+\n+    String id = UUID.randomUUID().toString();\n+    String name = \"SimpleMilestone\";\n+    String status = MilestoneStatus.AVAILABLE.name();\n \n     @Test\n-    public void testReadFrom() throws IOException {\n+    void testReadFrom() throws IOException {\n         MessageMarshaller.ProtoStreamReader reader = mock(MessageMarshaller.ProtoStreamReader.class);\n-        when(reader.readString(\"id\")).thenReturn(\"id\");\n-        when(reader.readString(\"name\")).thenReturn(\"name\");\n-        when(reader.readString(\"status\")).thenReturn(\"status\");\n+\n+        when(reader.readString(ID)).thenReturn(id);\n+        when(reader.readString(NAME)).thenReturn(name);\n+        when(reader.readString(STATUS)).thenReturn(status);\n \n         Milestone milestone = new MilestoneMarshaller(null).readFrom(reader);\n \n         assertThat(milestone)\n                 .isNotNull()\n-                .hasFieldOrPropertyWithValue(\"id\", \"id\")\n-                .hasFieldOrPropertyWithValue(\"name\", \"name\")\n-                .hasFieldOrPropertyWithValue(\"status\", \"status\");\n+                .hasFieldOrPropertyWithValue(ID, id)\n+                .hasFieldOrPropertyWithValue(NAME, name)\n+                .hasFieldOrPropertyWithValue(STATUS, status);\n \n         InOrder inOrder = inOrder(reader);\n-        inOrder.verify(reader).readString(\"id\");\n-        inOrder.verify(reader).readString(\"name\");\n-        inOrder.verify(reader).readString(\"status\");\n+        inOrder.verify(reader).readString(ID);\n+        inOrder.verify(reader).readString(NAME);\n+        inOrder.verify(reader).readString(STATUS);\n     }\n \n     @Test\n-    public void testWriteTo() throws IOException {\n-        Milestone milestone = new Milestone();\n-        milestone.setId(\"id\");\n-        milestone.setName(\"name\");\n-        milestone.setStatus(\"status\");\n+    void testWriteTo() throws IOException {\n+        Milestone milestone = Milestone.builder().id(id).name(name).status(status).build();\n \n         MessageMarshaller.ProtoStreamWriter writer = mock(MessageMarshaller.ProtoStreamWriter.class);\n \n         new MilestoneMarshaller(null).writeTo(writer, milestone);\n \n         InOrder inOrder = inOrder(writer);\n-        inOrder.verify(writer).writeString(\"id\", \"id\");\n-        inOrder.verify(writer).writeString(\"name\", \"name\");\n-        inOrder.verify(writer).writeString(\"status\", \"status\");\n+        inOrder.verify(writer).writeString(ID, id);\n+        inOrder.verify(writer).writeString(NAME, name);\n+        inOrder.verify(writer).writeString(STATUS, status);\n     }\n \n     @Test\n-    public void testMarshaller() {\n+    void testMarshaller() {\n         MilestoneMarshaller marshaller = new MilestoneMarshaller(null);\n         assertThat(marshaller.getJavaClass()).isEqualTo(Milestone.class);\n         assertThat(marshaller.getTypeName()).isEqualTo(Milestone.class.getName());\n"}}, {"oid": "42501105b6a80fb527d1f3bf691e263f117f48ca", "url": "https://github.com/kiegroup/kogito-apps/commit/42501105b6a80fb527d1f3bf691e263f117f48ca", "message": "KOGITO-2422 - Add support for Milestones in Data Index", "committedDate": "2020-07-01T14:29:50Z", "type": "commit"}, {"oid": "42501105b6a80fb527d1f3bf691e263f117f48ca", "url": "https://github.com/kiegroup/kogito-apps/commit/42501105b6a80fb527d1f3bf691e263f117f48ca", "message": "KOGITO-2422 - Add support for Milestones in Data Index", "committedDate": "2020-07-01T14:29:50Z", "type": "forcePushed"}]}