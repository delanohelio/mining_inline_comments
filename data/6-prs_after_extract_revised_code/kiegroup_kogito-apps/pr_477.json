{"pr_number": 477, "pr_title": "KOGITO-3557 - Enable keycloak on trusty-ui", "pr_createdAt": "2020-10-06T14:38:32Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/477", "timeline": [{"oid": "370b6edf8bd940d55f49ecb45c7423d7c8c068be", "url": "https://github.com/kiegroup/kogito-apps/commit/370b6edf8bd940d55f49ecb45c7423d7c8c068be", "message": "enable keycloak on trusty-ui", "committedDate": "2020-10-06T14:37:28Z", "type": "commit"}, {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078", "url": "https://github.com/kiegroup/kogito-apps/commit/a9e68cae29eb4e41da31dbdc4c0b60d4625f0078", "message": "add log plugin", "committedDate": "2020-10-06T14:39:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzUxNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500807514", "bodyText": "In the rest of the tests, we use the @QuarkusTestResource annotation like this:\n@QuarkusTestResource(KeycloakQuarkusTestResource.class)\nAs far I could see, the main difference between @testprofile and @QuarkusTestResource is that @testprofile is isolated to the running test suite where @QuarkusTestResource is per package (having this annotation affects all the tests). For me, I would prefer to having it per test suite using @testprofile, but there are two problems:\n\nIt does not allow having multiple test profiles (to specify what resources the test needs individually). Therefore, to use it, we would need to create a profile class in every single test (or module)\nThis annotation is not supported by native tests\n\nDid you use this annotation for some other reason? I would prefer all the tests use the same things to have expected behaviour. What do you think about this?", "author": "Sgitario", "createdAt": "2020-10-07T07:51:31Z", "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)", "originalCommit": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1Njk4Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500856987", "bodyText": "Hi @Sgitario , I used TestProfile because of this issue quarkusio/quarkus#9854 .\nBasically when using @QuarkusTestResource, it's used for all Quarkus tests that don't specify a @TestProfile -> since we have another QuarkusTest, the keycloak container is started but it fails because it is not configured.", "author": "r00ta", "createdAt": "2020-10-07T09:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1ODgzMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500858830", "bodyText": "This bit is resolved if we use the annotation this way:\n@QuarkusTestResource(KeycloakQuarkusTestResource.Conditional.class)\n\nThis way the test resource will only be executed if there are some properties enabled. See more here: https://github.com/kiegroup/kogito-runtimes/tree/master/kogito-test-utils", "author": "Sgitario", "createdAt": "2020-10-07T09:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1OTg5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r508459894", "bodyText": "Hi @Sgitario , thank you very much for the tip! I've updated the tests, could you please double check if everything looks good to you?", "author": "r00ta", "createdAt": "2020-10-20T12:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "d1910afc58f47df7b879157d9bcbd9ef8f4f0088", "chunk": "diff --git a/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java b/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\nindex 9f4662fb..f823872c 100644\n--- a/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\n+++ b/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\n\n@@ -51,17 +51,6 @@ class KeycloakTrustyUIServiceIT {\n     }\n \n     public static class ITKeycloakProfile implements QuarkusTestProfile {\n-\n-        @Override\n-        public Map<String, String> getConfigOverrides() {\n-            return Collections.emptyMap();\n-        }\n-\n-        @Override\n-        public Set<Class<?>> getEnabledAlternatives() {\n-            return Collections.emptySet();\n-        }\n-\n         @Override\n         public List<TestResourceEntry> testResources() {\n             return Collections\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzY4Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500807687", "bodyText": "We don't need to implement this method.", "author": "Sgitario", "createdAt": "2020-10-07T07:51:46Z", "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)\n+class KeycloakTrustyUIServiceIT {\n+\n+    private static final String VALID_USER = \"jdoe\";\n+    private static final String TRUSTY_UI_ENDPOINT = \"/\";\n+\n+    @ConfigProperty(name = KeycloakQuarkusTestResource.KOGITO_KEYCLOAK_PROPERTY)\n+    String keycloakURL;\n+\n+    @Test\n+    void shouldReturnUnauthorized() {\n+        given().get(TRUSTY_UI_ENDPOINT)\n+                .then().statusCode(HttpStatus.SC_UNAUTHORIZED);\n+    }\n+\n+    @Test\n+    void shouldReturnOkWhenValidUser() {\n+        given().auth().oauth2(getAccessToken(VALID_USER)).get(TRUSTY_UI_ENDPOINT)\n+                .then().statusCode(HttpStatus.SC_OK);\n+    }\n+\n+    private String getAccessToken(String userName) {\n+        return given().param(\"grant_type\", \"password\")\n+                .param(\"username\", userName)\n+                .param(\"password\", userName)\n+                .param(\"client_id\", KogitoKeycloakContainer.CLIENT_ID)\n+                .param(\"client_secret\", KogitoKeycloakContainer.CLIENT_SECRET)\n+                .when()\n+                .post(keycloakURL + \"/protocol/openid-connect/token\")\n+                .as(AccessTokenResponse.class).getToken();\n+    }\n+\n+    public static class ITKeycloakProfile implements QuarkusTestProfile {\n+\n+        @Override\n+        public Map<String, String> getConfigOverrides() {", "originalCommit": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1910afc58f47df7b879157d9bcbd9ef8f4f0088", "chunk": "diff --git a/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java b/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\nindex 9f4662fb..f823872c 100644\n--- a/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\n+++ b/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\n\n@@ -51,17 +51,6 @@ class KeycloakTrustyUIServiceIT {\n     }\n \n     public static class ITKeycloakProfile implements QuarkusTestProfile {\n-\n-        @Override\n-        public Map<String, String> getConfigOverrides() {\n-            return Collections.emptyMap();\n-        }\n-\n-        @Override\n-        public Set<Class<?>> getEnabledAlternatives() {\n-            return Collections.emptySet();\n-        }\n-\n         @Override\n         public List<TestResourceEntry> testResources() {\n             return Collections\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzcyNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500807725", "bodyText": "We don't need to implement this method.", "author": "Sgitario", "createdAt": "2020-10-07T07:51:49Z", "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)\n+class KeycloakTrustyUIServiceIT {\n+\n+    private static final String VALID_USER = \"jdoe\";\n+    private static final String TRUSTY_UI_ENDPOINT = \"/\";\n+\n+    @ConfigProperty(name = KeycloakQuarkusTestResource.KOGITO_KEYCLOAK_PROPERTY)\n+    String keycloakURL;\n+\n+    @Test\n+    void shouldReturnUnauthorized() {\n+        given().get(TRUSTY_UI_ENDPOINT)\n+                .then().statusCode(HttpStatus.SC_UNAUTHORIZED);\n+    }\n+\n+    @Test\n+    void shouldReturnOkWhenValidUser() {\n+        given().auth().oauth2(getAccessToken(VALID_USER)).get(TRUSTY_UI_ENDPOINT)\n+                .then().statusCode(HttpStatus.SC_OK);\n+    }\n+\n+    private String getAccessToken(String userName) {\n+        return given().param(\"grant_type\", \"password\")\n+                .param(\"username\", userName)\n+                .param(\"password\", userName)\n+                .param(\"client_id\", KogitoKeycloakContainer.CLIENT_ID)\n+                .param(\"client_secret\", KogitoKeycloakContainer.CLIENT_SECRET)\n+                .when()\n+                .post(keycloakURL + \"/protocol/openid-connect/token\")\n+                .as(AccessTokenResponse.class).getToken();\n+    }\n+\n+    public static class ITKeycloakProfile implements QuarkusTestProfile {\n+\n+        @Override\n+        public Map<String, String> getConfigOverrides() {\n+            return Collections.emptyMap();\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getEnabledAlternatives() {", "originalCommit": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1910afc58f47df7b879157d9bcbd9ef8f4f0088", "chunk": "diff --git a/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java b/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\nindex 9f4662fb..f823872c 100644\n--- a/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\n+++ b/trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java\n\n@@ -51,17 +51,6 @@ class KeycloakTrustyUIServiceIT {\n     }\n \n     public static class ITKeycloakProfile implements QuarkusTestProfile {\n-\n-        @Override\n-        public Map<String, String> getConfigOverrides() {\n-            return Collections.emptyMap();\n-        }\n-\n-        @Override\n-        public Set<Class<?>> getEnabledAlternatives() {\n-            return Collections.emptySet();\n-        }\n-\n         @Override\n         public List<TestResourceEntry> testResources() {\n             return Collections\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNjcyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500816727", "bodyText": "The native profile is failing. If I run this:\nmvn clean install -Pnative\n\nIt fails because the uberJar is not true. I need to add this plugin in the native maven profile:\n<plugin>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-maven-plugin</artifactId>\n  <configuration>\n    <uberJar>true</uberJar>\n  </configuration>\n  <executions>\n    <execution>\n      <goals>\n        <goal>native-image</goal>\n      </goals>\n      <configuration>\n        <additionalBuildArgs>--allow-incomplete-classpath</additionalBuildArgs>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\nAnd also remove the \"quarkus.package.type\":\n<properties>\n   <quarkus.package.type>native</quarkus.package.type>\n</properties>", "author": "Sgitario", "createdAt": "2020-10-07T08:06:46Z", "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest\n-public class StaticContentTestIT extends StaticContentTest {\n+public class NativeStaticContentTestIT extends StaticContentTest {", "originalCommit": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzY2NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500817664", "bodyText": "The native maven profile is not running this test. For enabling it, I followed the same conventions as in Kogito Examples and then the test failed:\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running org.kie.kogito.NativeStaticContentTestIT\nExecuting [/home/jcarvaja/sources/kogito/kogito-apps/trusty-ui/target/trusty-ui-1.0.0-SNAPSHOT-runner, -Dquarkus.http.port=8080, -Dquarkus.http.ssl-port=8444, -Dtest.url=http://localhost:8080, -Dquarkus.log.file.path=target/target/quarkus.log]\n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n2020-10-07 10:47:27,852 ERROR [io.qua.application] (main) Failed to start application (with profile prod): io.vertx.core.file.FileSystemException: java.nio.file.NoSuchFileException: META-INF/resources/index.html\n\tat io.vertx.core.file.impl.FileSystemImpl$16.perform(FileSystemImpl.java:865)\n\nAlso, the Keycloak resource is not starting because of native test is not compatible with @testprofile (see here). Therefore, we would need to annotate this class using:\n@QuarkusTestResource(KeycloakQuarkusTestResource.class)", "author": "Sgitario", "createdAt": "2020-10-07T08:08:18Z", "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest", "originalCommit": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1ODM0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500858345", "bodyText": "Same as above, if we use QuarkusTestResource we have to choose betwen testing keycloak and the other Quarkus Tests", "author": "r00ta", "createdAt": "2020-10-07T09:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzY2NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d1910afc58f47df7b879157d9bcbd9ef8f4f0088", "url": "https://github.com/kiegroup/kogito-apps/commit/d1910afc58f47df7b879157d9bcbd9ef8f4f0088", "message": "fix comments", "committedDate": "2020-10-07T09:29:57Z", "type": "commit"}, {"oid": "227a369e7b6ddf8713b0d647a62aaf3c9eb5f303", "url": "https://github.com/kiegroup/kogito-apps/commit/227a369e7b6ddf8713b0d647a62aaf3c9eb5f303", "message": "use QuarkusTestResource", "committedDate": "2020-10-08T06:32:55Z", "type": "commit"}, {"oid": "edb1486e73639b7e3071275a91b8f9b96640aa4e", "url": "https://github.com/kiegroup/kogito-apps/commit/edb1486e73639b7e3071275a91b8f9b96640aa4e", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-3557-keycloak-trusty-ui", "committedDate": "2020-10-20T11:46:26Z", "type": "commit"}, {"oid": "0ff0bc5e70b01c113ae4bdc8ce72dda7d9d8ca3a", "url": "https://github.com/kiegroup/kogito-apps/commit/0ff0bc5e70b01c113ae4bdc8ce72dda7d9d8ca3a", "message": "fix IT", "committedDate": "2020-10-20T12:30:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0MzQ2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r509243467", "bodyText": "This test is still not being executed when using the native maven profile.", "author": "Sgitario", "createdAt": "2020-10-21T12:40:42Z", "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest\n-public class StaticContentTestIT extends StaticContentTest {\n+public class NativeStaticContentTestIT extends StaticContentTest {", "originalCommit": "0ff0bc5e70b01c113ae4bdc8ce72dda7d9d8ca3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MDQxMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r512590411", "bodyText": "Hi @Sgitario , sorry for the late reply. I think the native tests are failing also on master for the management console and the trusty-ui projects, I'm wondering if we can tackle the fix in another pull request. wdyt? With the current pom the  NativeStaticContentTestIT is excluded, otherwise it would fail", "author": "r00ta", "createdAt": "2020-10-27T10:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0MzQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxNDQwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r512614401", "bodyText": "Fine with me.", "author": "Sgitario", "createdAt": "2020-10-27T11:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0MzQ2Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0da030a66dc9ae8e77b44b716b6d3f6125696b82", "url": "https://github.com/kiegroup/kogito-apps/commit/0da030a66dc9ae8e77b44b716b6d3f6125696b82", "message": "update trusty-ui readme with keycloack instructions", "committedDate": "2020-11-10T13:50:29Z", "type": "commit"}, {"oid": "8507be1cf29709620757a0d162526a18cff31c3f", "url": "https://github.com/kiegroup/kogito-apps/commit/8507be1cf29709620757a0d162526a18cff31c3f", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-3557-keycloak-trusty-ui", "committedDate": "2020-11-10T14:46:56Z", "type": "commit"}]}