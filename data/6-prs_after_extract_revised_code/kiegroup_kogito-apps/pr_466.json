{"pr_number": 466, "pr_title": "KOGITO-3119 - Job Service - Infinispan 11 upgrade", "pr_createdAt": "2020-09-22T16:52:15Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/466", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExOTA1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493119050", "bodyText": "perhaps j.status in ( value1, value2 ) ?", "author": "cristianonicolai", "createdAt": "2020-09-23T01:17:12Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanJobRepository.java", "diffHunk": "@@ -89,36 +107,37 @@ public InfinispanJobRepository(Vertx vertx,\n \n     @Override\n     public PublisherBuilder<JobDetails> findAll() {\n-        return ReactiveStreams\n-                .fromIterable(queryFactory.from(JobDetails.class)\n-                                      .<JobDetails>build()\n-                                      .list());\n+        Query<JobDetails> query = queryFactory.<JobDetails>create(\"from job.service.JobDetails\");\n+        return ReactiveStreams.fromIterable(query.execute().list());\n     }\n \n     @Override\n     public PublisherBuilder<JobDetails> findByStatus(JobStatus... status) {\n-        return ReactiveStreams.fromIterable(queryFactory.from(JobDetails.class)\n-                                                    .having(\"status\")\n-                                                    .in(Arrays.stream(status)\n-                                                                .map(JobStatus::name)\n-                                                                .collect(Collectors.toList()))\n-                                                    .<JobDetails>build()\n-                                                    .list());\n+        Query<JobDetails> query = queryFactory.create(\"from job.service.JobDetails j \" +\n+                                                              \"where \" +\n+                                                              \"and j.status:(\" + createStatusQuery(status) + \")\");\n+        return ReactiveStreams.fromIterable(query.execute().list());\n     }\n \n+    @Override\n     public PublisherBuilder<JobDetails> findByStatusBetweenDatesOrderByPriority(ZonedDateTime from, ZonedDateTime to,\n                                                                                 JobStatus... status) {\n-        return ReactiveStreams.fromIterable(queryFactory.from(JobDetails.class)\n-                                                    .having(\"status\")\n-                                                    .in(Arrays.stream(status)\n-                                                                .map(JobStatus::name)\n-                                                                .collect(Collectors.toList()))\n-                                                    .and()\n-                                                    .having(\"trigger.nextFireTime\")\n-                                                    .between(DateUtil.zonedDateTimeToInstant(from),\n-                                                             DateUtil.zonedDateTimeToInstant(to))\n-                                                    .orderBy(\"priority\", SortOrder.DESC)\n-                                                    .<JobDetails>build()\n-                                                    .list());\n+        Query<JobDetails> query = queryFactory.create(\"from job.service.JobDetails j \" +\n+                                                              \"where \" +\n+                                                              \"j.trigger.nextFireTime > :from \" +\n+                                                              \"and j.trigger.nextFireTime < :to \" +\n+                                                              \"and j.status:(\" +  createStatusQuery(status) + \") \" +", "originalCommit": "9923e9b49777505b71841569424c3e8046633823", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MDYzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493490639", "bodyText": "I think so, I'll add  IN and test, I just used the :  because it was on the some example on the doc, but they should be the same operation.", "author": "tiagodolphine", "createdAt": "2020-09-23T11:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExOTA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwNzMwMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493507302", "bodyText": "well, I tried to change and use IN instead of : but I got an error on the query...", "author": "tiagodolphine", "createdAt": "2020-09-23T12:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExOTA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NzQ1MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493977451", "bodyText": "hm, I think  : uses index, that's why you also needed the analyze part. But in should work, I'm using that in data index, whats the error?", "author": "cristianonicolai", "createdAt": "2020-09-24T00:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExOTA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIzMzYzNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r494233636", "bodyText": "it was working with IN with the query dsl, but when I changed the query to ickle, it didn't work... so basically I changed the operator : anyway, I think we will not be able to merge this PR because it is not compatible with ispn10, so or we find a way to make it work with both or we need to wait for data-index, wdyt?", "author": "tiagodolphine", "createdAt": "2020-09-24T11:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExOTA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "a4ffbdf92cb3e79e26bfa1fbd625311530d38680", "chunk": "diff --git a/jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanJobRepository.java b/jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanJobRepository.java\nindex e933ed68..2c9a782f 100644\n--- a/jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanJobRepository.java\n+++ b/jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanJobRepository.java\n\n@@ -126,7 +113,7 @@ public class InfinispanJobRepository extends BaseReactiveJobRepository implement\n                                                               \"where \" +\n                                                               \"j.trigger.nextFireTime > :from \" +\n                                                               \"and j.trigger.nextFireTime < :to \" +\n-                                                              \"and j.status:(\" +  createStatusQuery(status) + \") \" +\n+                                                              \"and j.status :(\" + createStatusQuery(status) + \") \" +\n                                                               \"order by j.priority desc\"\n         );\n         query.setParameter(\"to\", to.toInstant().toEpochMilli());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEyMjM1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493122353", "bodyText": "@tiagodolphine would be important to try to have a consistent behaviour here compared to other services, see https://github.com/kiegroup/kogito-apps/blob/master/persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/cache/InfinispanCacheManager.java#L79.\nPoint is that the user should be able to define a template. That template allows users to take over the configuration on Infinispan side to match their need. Then if thats not provided, the default cache configuration would be in place as you specified here.", "author": "cristianonicolai", "createdAt": "2020-09-23T01:24:35Z", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanConfiguration.java", "diffHunk": "@@ -50,9 +65,37 @@ private Caches() {\n     @Readiness\n     public HealthCheck infinispanHealthCheck(@ConfigProperty(name = PERSISTENCE_CONFIG_KEY) Optional<String> persistence,\n                                              Instance<RemoteCacheManager> cacheManagerInstance) {\n-        return persistence\n-                .filter(\"infinispan\"::equals)\n+        return isEnabled(persistence)\n                 .<HealthCheck>map(p -> new InfinispanHealthCheck(cacheManagerInstance))\n                 .orElse(() -> HealthCheckResponse.up(\"In Memory Persistence\"));\n     }\n+\n+    private Optional<String> isEnabled(Optional<String> persistence) {\n+        return persistence\n+                .filter(\"infinispan\"::equals);\n+    }\n+\n+    void initializeCaches(@Observes @Priority(Interceptor.Priority.PLATFORM_BEFORE) StartupEvent startupEvent,\n+                          @ConfigProperty(name = PERSISTENCE_CONFIG_KEY) Optional<String> persistence,\n+                          RemoteCacheManager remoteCacheManager,\n+                          Event<InfinispanInitialized> initializedEvent) {\n+        isEnabled(persistence)\n+                .map(c -> remoteCacheManager.administration().getOrCreateCache(JOB_DETAILS, getCacheTemplate()))", "originalCommit": "9923e9b49777505b71841569424c3e8046633823", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMDU3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493500578", "bodyText": "My approach it quite different, on the InfinispanConfiguration I\u00b4m running all the requirement to initialize infinispan, like creating the cache and healthcheck, ... but we can migrate maybe to use the same approach of persistence-commons with the InfinispanCacheManager, IMO we could to it on a new JIRA, just for this. The other thing is, I created the template approach in this PR because I need to add more configs to work on ispn11, so the user may use a different template if he changes the .xml template, before it was not even using any template, it was using the default one.", "author": "tiagodolphine", "createdAt": "2020-09-23T11:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEyMjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3Njk2NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493976964", "bodyText": "We can take advantage of the template system inheritance, see https://infinispan.org/docs/11.0.x/titles/configuring/configuring.html#templates-configuring. That way you only specify the indexing class that is needed but gives room for the user to customize the base template. But that's fine if you want to create a JIRA for reviewing that alone.", "author": "cristianonicolai", "createdAt": "2020-09-24T00:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEyMjM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a4ffbdf92cb3e79e26bfa1fbd625311530d38680", "chunk": "diff --git a/jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanConfiguration.java b/jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanConfiguration.java\nindex a3a53995..3cd7afb9 100644\n--- a/jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanConfiguration.java\n+++ b/jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanConfiguration.java\n\n@@ -77,10 +77,10 @@ public class InfinispanConfiguration {\n \n     void initializeCaches(@Observes @Priority(Interceptor.Priority.PLATFORM_BEFORE) StartupEvent startupEvent,\n                           @ConfigProperty(name = PERSISTENCE_CONFIG_KEY) Optional<String> persistence,\n-                          RemoteCacheManager remoteCacheManager,\n+                          Instance<RemoteCacheManager> remoteCacheManager,\n                           Event<InfinispanInitialized> initializedEvent) {\n         isEnabled(persistence)\n-                .map(c -> remoteCacheManager.administration().getOrCreateCache(JOB_DETAILS, getCacheTemplate()))\n+                .map(c -> remoteCacheManager.get().administration().getOrCreateCache(JOB_DETAILS, getCacheTemplate()))\n                 .ifPresent(c -> {\n                     initializedEvent.fire(new InfinispanInitialized());\n                     initialized.set(Boolean.TRUE);\n"}}, {"oid": "550a7bc6e863c62b968736e8b98d615b423436f4", "url": "https://github.com/kiegroup/kogito-apps/commit/550a7bc6e863c62b968736e8b98d615b423436f4", "message": "KOGITO-3119 - Job Service - Infinispan 11 upgrade", "committedDate": "2020-09-23T21:01:32Z", "type": "commit"}, {"oid": "a4ffbdf92cb3e79e26bfa1fbd625311530d38680", "url": "https://github.com/kiegroup/kogito-apps/commit/a4ffbdf92cb3e79e26bfa1fbd625311530d38680", "message": "Fix broken tests because ispn client was being initialized even with the in-memory persistence enabled", "committedDate": "2020-09-23T21:01:32Z", "type": "commit"}, {"oid": "183897a9039c409a32384041adbfc4844e90a614", "url": "https://github.com/kiegroup/kogito-apps/commit/183897a9039c409a32384041adbfc4844e90a614", "message": "add InfinispanConfigurationTest", "committedDate": "2020-09-23T21:01:33Z", "type": "commit"}, {"oid": "b49f2aaf88d2355ff7813f2b4fad472d48acf8f2", "url": "https://github.com/kiegroup/kogito-apps/commit/b49f2aaf88d2355ff7813f2b4fad472d48acf8f2", "message": "Fix query and template to work with ispn10 an ispn11, using IN operation instead of ':'", "committedDate": "2020-09-24T17:28:13Z", "type": "commit"}, {"oid": "b49f2aaf88d2355ff7813f2b4fad472d48acf8f2", "url": "https://github.com/kiegroup/kogito-apps/commit/b49f2aaf88d2355ff7813f2b4fad472d48acf8f2", "message": "Fix query and template to work with ispn10 an ispn11, using IN operation instead of ':'", "committedDate": "2020-09-24T17:28:13Z", "type": "forcePushed"}, {"oid": "b86a9900a492bc47d14824f7385b5743ea9c9a85", "url": "https://github.com/kiegroup/kogito-apps/commit/b86a9900a492bc47d14824f7385b5743ea9c9a85", "message": "using IN operator on job by status query", "committedDate": "2020-09-24T17:38:13Z", "type": "commit"}, {"oid": "d71907111fc5b18f7c75f1b484dd2a6f9ea8252e", "url": "https://github.com/kiegroup/kogito-apps/commit/d71907111fc5b18f7c75f1b484dd2a6f9ea8252e", "message": "Removing analyze annotation from protobuf file", "committedDate": "2020-09-24T17:46:21Z", "type": "commit"}, {"oid": "629984a71f56083287ba9e5af0fdaccffb15e73c", "url": "https://github.com/kiegroup/kogito-apps/commit/629984a71f56083287ba9e5af0fdaccffb15e73c", "message": "changing infinispan xsd to 11 on docker-compose", "committedDate": "2020-09-25T14:09:24Z", "type": "commit"}]}