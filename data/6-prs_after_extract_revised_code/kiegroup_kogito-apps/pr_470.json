{"pr_number": 470, "pr_title": "FAI-234 - Better handling of vector types", "pr_createdAt": "2020-10-02T15:21:56Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/470", "timeline": [{"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7", "url": "https://github.com/kiegroup/kogito-apps/commit/814cd1252ccce00b148853de3a5c29a580bc93f7", "message": "FAI-234 - minor improvements to vector type handling", "committedDate": "2020-10-02T15:20:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODM1NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500928355", "bodyText": "When is it possible to obtain a vector as ByteBuffer?", "author": "danielezonca", "createdAt": "2020-10-07T11:11:30Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -73,23 +79,42 @@ public String toString() {\n             doubles = (double[]) underlyingObject;\n         } else {\n             if (underlyingObject instanceof String) {\n-                String[] tokens = ((String) underlyingObject).split(\",?\\\\s+\");\n-                int noOfWords = tokens.length;\n-                doubles = new double[noOfWords];\n-                // parse string encoded vector\n-                if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                    for (int i = 0; i < tokens.length; i++) {\n-                        doubles[i] = Double.parseDouble(tokens[i]);\n-                    }\n-                } else { // or make a vector of 1s\n-                    Arrays.fill(doubles, 1);\n-                }\n+                String string = (String) this.underlyingObject;\n+                doubles = parseVectorString(string);\n+            } else if (underlyingObject instanceof ByteBuffer) {\n+                ByteBuffer byteBuffer = (ByteBuffer) underlyingObject;\n+                String string = StandardCharsets.UTF_8.decode(byteBuffer).toString();\n+                doubles = parseVectorString(string);", "originalCommit": "814cd1252ccce00b148853de3a5c29a580bc93f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk3ODg0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500978840", "bodyText": "as a result of persisting vector based models (e.g. GloVe) as binaries. In this scenario each value should correspond to the bytes associated to one row.", "author": "tteofili", "createdAt": "2020-10-07T12:40:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c20bf915e051f02da1dc7939bb96524e8d378d2", "chunk": "diff --git a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java\nindex bf3135c2..e7e544d4 100644\n--- a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java\n+++ b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java\n\n@@ -96,25 +99,22 @@ public class Value<S> {\n \n     private double[] parseVectorString(String string) {\n         double[] doubles;\n+        ObjectMapper objectMapper = new ObjectMapper();\n         try {\n-            String[] tokens = string\n-                    .replaceFirst(\"\\\\[\", \"\")\n-                    .replaceFirst(\"]\", \"\")\n-                    .replaceFirst(\"\\\\{\", \"\")\n-                    .replaceFirst(\"}\", \"\")\n-                    .split(\",?\\\\s+\");\n-            int noOfWords = tokens.length;\n-            doubles = new double[noOfWords];\n-            // parse string encoded vector\n-            if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                for (int i = 0; i < tokens.length; i++) {\n-                    doubles[i] = Double.parseDouble(tokens[i]);\n-                }\n-            } else { // or make a vector of 1s\n-                Arrays.fill(doubles, 1);\n-            }\n+            JsonParser parser = objectMapper.createParser(string);\n+            // parse a double[] as a string\n+            Double[] ar = objectMapper.readValue(parser, Double[].class);\n+            doubles = Arrays.stream(ar).mapToDouble(Double::doubleValue).toArray();\n         } catch (Exception e) {\n-            doubles = new double[0];\n+            try {\n+                // parse a string of whitespace separated doubles\n+                JsonParser parser = objectMapper.createParser(string);\n+                MappingIterator<Double> iterator = objectMapper.readValues(parser, Double.class);\n+                doubles = iterator.readAll().stream().mapToDouble(Double::doubleValue).toArray();\n+            } catch (Exception e2) {\n+                // it was not possible to parse the string as a vector\n+                doubles = new double[0];\n+            }\n         }\n         return doubles;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODg0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500928845", "bodyText": "Where this format is defined? Is this intended to be a json array?", "author": "danielezonca", "createdAt": "2020-10-07T11:12:23Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -73,23 +79,42 @@ public String toString() {\n             doubles = (double[]) underlyingObject;\n         } else {\n             if (underlyingObject instanceof String) {\n-                String[] tokens = ((String) underlyingObject).split(\",?\\\\s+\");\n-                int noOfWords = tokens.length;\n-                doubles = new double[noOfWords];\n-                // parse string encoded vector\n-                if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                    for (int i = 0; i < tokens.length; i++) {\n-                        doubles[i] = Double.parseDouble(tokens[i]);\n-                    }\n-                } else { // or make a vector of 1s\n-                    Arrays.fill(doubles, 1);\n-                }\n+                String string = (String) this.underlyingObject;\n+                doubles = parseVectorString(string);\n+            } else if (underlyingObject instanceof ByteBuffer) {\n+                ByteBuffer byteBuffer = (ByteBuffer) underlyingObject;\n+                String string = StandardCharsets.UTF_8.decode(byteBuffer).toString();\n+                doubles = parseVectorString(string);\n             } else {\n                 double v = asNumber();\n                 doubles = new double[1];\n                 doubles[0] = v;\n             }\n-            // FAI-234 : handle parsing of different underlyingObject types as vectors (e.g. ByteBuffer, etc.)\n+        }\n+        return doubles;\n+    }\n+\n+    private double[] parseVectorString(String string) {\n+        double[] doubles;\n+        try {\n+            String[] tokens = string\n+                    .replaceFirst(\"\\\\[\", \"\")\n+                    .replaceFirst(\"]\", \"\")\n+                    .replaceFirst(\"\\\\{\", \"\")\n+                    .replaceFirst(\"}\", \"\")\n+                    .split(\",?\\\\s+\");", "originalCommit": "814cd1252ccce00b148853de3a5c29a580bc93f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk3NzQ2NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500977464", "bodyText": "since many vector based models are formatted as a CSV file, this should be a line of comma separated values.", "author": "tteofili", "createdAt": "2020-10-07T12:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c20bf915e051f02da1dc7939bb96524e8d378d2", "chunk": "diff --git a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java\nindex bf3135c2..e7e544d4 100644\n--- a/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java\n+++ b/explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java\n\n@@ -96,25 +99,22 @@ public class Value<S> {\n \n     private double[] parseVectorString(String string) {\n         double[] doubles;\n+        ObjectMapper objectMapper = new ObjectMapper();\n         try {\n-            String[] tokens = string\n-                    .replaceFirst(\"\\\\[\", \"\")\n-                    .replaceFirst(\"]\", \"\")\n-                    .replaceFirst(\"\\\\{\", \"\")\n-                    .replaceFirst(\"}\", \"\")\n-                    .split(\",?\\\\s+\");\n-            int noOfWords = tokens.length;\n-            doubles = new double[noOfWords];\n-            // parse string encoded vector\n-            if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                for (int i = 0; i < tokens.length; i++) {\n-                    doubles[i] = Double.parseDouble(tokens[i]);\n-                }\n-            } else { // or make a vector of 1s\n-                Arrays.fill(doubles, 1);\n-            }\n+            JsonParser parser = objectMapper.createParser(string);\n+            // parse a double[] as a string\n+            Double[] ar = objectMapper.readValue(parser, Double[].class);\n+            doubles = Arrays.stream(ar).mapToDouble(Double::doubleValue).toArray();\n         } catch (Exception e) {\n-            doubles = new double[0];\n+            try {\n+                // parse a string of whitespace separated doubles\n+                JsonParser parser = objectMapper.createParser(string);\n+                MappingIterator<Double> iterator = objectMapper.readValues(parser, Double.class);\n+                doubles = iterator.readAll().stream().mapToDouble(Double::doubleValue).toArray();\n+            } catch (Exception e2) {\n+                // it was not possible to parse the string as a vector\n+                doubles = new double[0];\n+            }\n         }\n         return doubles;\n     }\n"}}, {"oid": "3c20bf915e051f02da1dc7939bb96524e8d378d2", "url": "https://github.com/kiegroup/kogito-apps/commit/3c20bf915e051f02da1dc7939bb96524e8d378d2", "message": "FAI-234 - using objectmapper to read strings", "committedDate": "2020-10-19T11:22:51Z", "type": "commit"}, {"oid": "4edf05418127fc84a74446642c65886fe2a34632", "url": "https://github.com/kiegroup/kogito-apps/commit/4edf05418127fc84a74446642c65886fe2a34632", "message": "FAI-234 - avoid quarkus-jackson dep", "committedDate": "2020-10-19T11:47:01Z", "type": "commit"}]}