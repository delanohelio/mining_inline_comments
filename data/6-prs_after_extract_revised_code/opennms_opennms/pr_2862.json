{"pr_number": 2862, "pr_title": "NMS-10720: Make Events immutable (avoid CMEs and non-deterministic be\u2026", "pr_createdAt": "2020-01-07T22:34:55Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2862", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI4MzUxNA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364283514", "bodyText": "One thing I don't like about this is that it causes the interface to have an explicit dependency on one of the implementations. This would make it difficult if we decided to split these up into separate modules as this module would always have to depend on the implementation.\nWe could consider if this is worth changing, if it is I don't think there is a convenient solution that avoids changing a bunch of code. One solution would be to remove the copy method from the interface, then add a factory method to the existing mutable bean that takes an interface type and produces a bean copy of that object. That way the decision of typing the mutable object is pushed down to the client, they would explicitly decide they want to get a copy using the JAXB object via its new factory method.\nThis would apply to all the new interfaces with toMutableCopy() methods.\nI didn't really think of this possibility when we were originally discussing how to produce these copies.", "author": "mattixtech", "createdAt": "2020-01-08T15:17:40Z", "path": "features/events/api/src/main/java/org/opennms/netmgt/xml/event/IAlarmData.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.xml.event;\n+\n+import java.util.List;\n+\n+/**\n+ * A definition corresponding to POJO '{@link AlarmData}'.\n+ */\n+public interface IAlarmData {\n+    Integer getAlarmType();\n+    Boolean getAutoClean();\n+    String getClearKey();\n+    String getReductionKey();\n+    String getX733AlarmType();\n+    Integer getX733ProbableCause();\n+    Boolean isAutoClean();\n+    List<IUpdateField> getUpdateFieldList();\n+    Boolean hasUpdateFields();\n+    IManagedObject getManagedObject();\n+    AlarmData toMutableCopy();", "originalCommit": "c4d66dcc61b6107356f1a920b48843f54f6169ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0Nzc3Mw==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364447773", "bodyText": "Mapping from mutable to immutable types is now handled in utility class 'Mapper'.\nThe mapping from immutable to mutable in the 'Mapper' utility class as well... but I'll move these factory methods to the beans themselves (as per your comment).\nThe listeners shouldn't need to have knowledge of the 'Mapper'.\nI'll update the PR momentarily...", "author": "bouff", "createdAt": "2020-01-08T21:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI4MzUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "ece44a7c3b21cc73b787463f0e8f311bd970a17d", "chunk": "diff --git a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/IAlarmData.java b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/IAlarmData.java\nsimilarity index 92%\nrename from features/events/api/src/main/java/org/opennms/netmgt/xml/event/IAlarmData.java\nrename to features/events/api/src/main/java/org/opennms/netmgt/events/api/model/IAlarmData.java\nindex 624427b8fe6..6393c98ae58 100644\n--- a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/IAlarmData.java\n+++ b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/IAlarmData.java\n\n@@ -26,12 +26,12 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.xml.event;\n+package org.opennms.netmgt.events.api.model;\n \n import java.util.List;\n \n /**\n- * A definition corresponding to POJO '{@link AlarmData}'.\n+ * A definition corresponding to POJO '{@link org.opennms.netmgt.xml.event.AlarmData}'.\n  */\n public interface IAlarmData {\n     Integer getAlarmType();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI4NTUxOA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364285518", "bodyText": "Just wondering, is there any use in explicitly declaring the throws clause for a runtime exception? I see that the original bean did so, but does it actually provide any value?", "author": "mattixtech", "createdAt": "2020-01-08T15:21:31Z", "path": "features/events/api/src/main/java/org/opennms/netmgt/xml/event/IEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.xml.event;\n+\n+import java.net.InetAddress;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+/**\n+ * A definition corresponding to POJO '{@link Event}'.\n+ */\n+public interface IEvent {\n+    IAlarmData getAlarmData();\n+    IAutoAcknowledge getAutoacknowledge();\n+    IAutoAction getAutoaction(final int index) throws IndexOutOfBoundsException;", "originalCommit": "c4d66dcc61b6107356f1a920b48843f54f6169ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0MjY2MA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364442660", "bodyText": "Correct, it doesn't provide any value.  It's now been removed.", "author": "bouff", "createdAt": "2020-01-08T21:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI4NTUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "ece44a7c3b21cc73b787463f0e8f311bd970a17d", "chunk": "diff --git a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/IEvent.java b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/IEvent.java\nsimilarity index 84%\nrename from features/events/api/src/main/java/org/opennms/netmgt/xml/event/IEvent.java\nrename to features/events/api/src/main/java/org/opennms/netmgt/events/api/model/IEvent.java\nindex 7e2c02c8f6d..8c794f2e4ac 100644\n--- a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/IEvent.java\n+++ b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/IEvent.java\n\n@@ -25,7 +25,8 @@\n  *     http://www.opennms.org/\n  *     http://www.opennms.com/\n  *******************************************************************************/\n-package org.opennms.netmgt.xml.event;\n+\n+package org.opennms.netmgt.events.api.model;\n \n import java.net.InetAddress;\n import java.util.Date;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI4ODk5Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364288997", "bodyText": "Looking at this, I think there is value in updating the original bean implementations to implement the new interface. That way these fromMutable() methods can be replaced with usage of newBuilderFrom().build().\nThis applies to all the new immutables.", "author": "mattixtech", "createdAt": "2020-01-08T15:27:26Z", "path": "features/events/api/src/main/java/org/opennms/netmgt/xml/event/ImmutableAlarmData.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.xml.event;\n+\n+import org.opennms.core.utils.ImmutableCollections;\n+import org.opennms.core.utils.MutableCollections;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An immutable implementation of '{@link IAlarmData}'.\n+ */\n+public final class ImmutableAlarmData implements IAlarmData {\n+    private final String reductionKey;\n+    private final Integer alarmType;\n+    private final String clearKey;\n+    private final Boolean autoClean;\n+    private final String x733AlarmType;\n+    private final Integer x733ProbableCause;\n+    private final List<IUpdateField> updateFieldList;\n+    private final IManagedObject managedObject;\n+\n+    private ImmutableAlarmData(Builder builder) {\n+        reductionKey = builder.reductionKey;\n+        alarmType = builder.alarmType;\n+        clearKey = builder.clearKey;\n+        autoClean = builder.autoClean;\n+        x733AlarmType = builder.x733AlarmType;\n+        x733ProbableCause = builder.x733ProbableCause;\n+        updateFieldList = ImmutableCollections.with(ImmutableUpdateField::immutableCopyFrom)\n+                .newList(builder.updateFieldList);\n+        managedObject = ImmutableManagedObject.immutableCopy(builder.managedObject);\n+    }\n+\n+    public static Builder newBuilder() {\n+        return new Builder();\n+    }\n+\n+    public static Builder newBuilderFrom(IAlarmData alarmData) {\n+        return new Builder(alarmData);\n+    }\n+\n+    public static IAlarmData immutableCopy(IAlarmData alarmData) {\n+        if (alarmData == null || alarmData instanceof ImmutableAlarmData) {\n+            return alarmData;\n+        }\n+        return newBuilderFrom(alarmData).build();\n+    }\n+\n+    public static IAlarmData fromMutable(AlarmData alarmData) {", "originalCommit": "c4d66dcc61b6107356f1a920b48843f54f6169ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMwMzU4OA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364303588", "bodyText": "Also this removes the dependency of the jaxb type from the immutable types in case we want to separate them.", "author": "mattixtech", "createdAt": "2020-01-08T15:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI4ODk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NTMyMw==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364445323", "bodyText": "Gave this a try - but unfortunately didn't work out.  Will go with your earlier suggestion.", "author": "bouff", "createdAt": "2020-01-08T21:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI4ODk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ece44a7c3b21cc73b787463f0e8f311bd970a17d", "chunk": "diff --git a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/ImmutableAlarmData.java b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableAlarmData.java\nsimilarity index 82%\nrename from features/events/api/src/main/java/org/opennms/netmgt/xml/event/ImmutableAlarmData.java\nrename to features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableAlarmData.java\nindex 7a4a39c80a3..66540c676d3 100644\n--- a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/ImmutableAlarmData.java\n+++ b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableAlarmData.java\n\n@@ -26,10 +26,11 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.xml.event;\n+package org.opennms.netmgt.events.api.model;\n \n import org.opennms.core.utils.ImmutableCollections;\n import org.opennms.core.utils.MutableCollections;\n+import org.opennms.netmgt.xml.event.AlarmData;\n \n import java.util.List;\n import java.util.Objects;\n"}}, {"oid": "ece44a7c3b21cc73b787463f0e8f311bd970a17d", "url": "https://github.com/OpenNMS/opennms/commit/ece44a7c3b21cc73b787463f0e8f311bd970a17d", "message": "NMS-10720: Make Events immutable (avoid CMEs and non-deterministic behavior) [Part 1]", "committedDate": "2020-01-08T20:50:07Z", "type": "forcePushed"}, {"oid": "04a9456627f07ebf38f122e0c101696485c4afac", "url": "https://github.com/OpenNMS/opennms/commit/04a9456627f07ebf38f122e0c101696485c4afac", "message": "NMS-10720: Make Events immutable (avoid CMEs and non-deterministic behavior) [Part 1]", "committedDate": "2020-01-08T21:31:09Z", "type": "commit"}, {"oid": "04a9456627f07ebf38f122e0c101696485c4afac", "url": "https://github.com/OpenNMS/opennms/commit/04a9456627f07ebf38f122e0c101696485c4afac", "message": "NMS-10720: Make Events immutable (avoid CMEs and non-deterministic behavior) [Part 1]", "committedDate": "2020-01-08T21:31:09Z", "type": "forcePushed"}, {"oid": "f64716b5a186127578cbaf325a15a0a6dfaf4c5a", "url": "https://github.com/OpenNMS/opennms/commit/f64716b5a186127578cbaf325a15a0a6dfaf4c5a", "message": "NMS-10720: Make Events immutable (avoid CMEs and non-deterministic behavior) [Part 1]\n\n-Some small fixes:\n  -Missed null check in Correlation\n  -Missed equals/hashCode/toString in ImmutableCorrelation\n  -Don't assume that certain fields won't be 'null' in equals()", "committedDate": "2020-01-08T23:01:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MDY2NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364780665", "bodyText": "The immutables should no longer need to import the JAXB objects.\nDouble check the other immutables as well.", "author": "mattixtech", "createdAt": "2020-01-09T14:52:12Z", "path": "features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableAlarmData.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.events.api.model;\n+\n+import org.opennms.core.utils.ImmutableCollections;\n+import org.opennms.core.utils.MutableCollections;\n+import org.opennms.netmgt.xml.event.AlarmData;", "originalCommit": "f64716b5a186127578cbaf325a15a0a6dfaf4c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwODI2OQ==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364808269", "bodyText": "Done.", "author": "bouff", "createdAt": "2020-01-09T15:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MDY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc3765b3f6151ca519b3633545b8a5ddc8e8a94b", "chunk": "diff --git a/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableAlarmData.java b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableAlarmData.java\nindex 2358fa8dcab..20f6ee2d87e 100644\n--- a/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableAlarmData.java\n+++ b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableAlarmData.java\n\n@@ -30,11 +30,9 @@ package org.opennms.netmgt.events.api.model;\n \n import org.opennms.core.utils.ImmutableCollections;\n import org.opennms.core.utils.MutableCollections;\n-import org.opennms.netmgt.xml.event.AlarmData;\n \n import java.util.List;\n import java.util.Objects;\n-import java.util.stream.Collectors;\n \n /**\n  * An immutable implementation of '{@link IAlarmData}'.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MjQzOQ==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364782439", "bodyText": "It's only from mutable to immutable, not the other way around.", "author": "mattixtech", "createdAt": "2020-01-09T14:55:15Z", "path": "features/events/api/src/main/java/org/opennms/netmgt/events/api/model/Mapper.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.events.api.model;\n+\n+import org.opennms.core.utils.ImmutableCollections;\n+import org.opennms.netmgt.xml.event.*;\n+\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A mapper to/from mutable and immutable types for Event (and related objects).", "originalCommit": "f64716b5a186127578cbaf325a15a0a6dfaf4c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwODI5OA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364808298", "bodyText": "Ooops, forgot to update this.  Thanks!", "author": "bouff", "createdAt": "2020-01-09T15:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MjQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc3765b3f6151ca519b3633545b8a5ddc8e8a94b", "chunk": "diff --git a/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/Mapper.java b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableMapper.java\nsimilarity index 87%\nrename from features/events/api/src/main/java/org/opennms/netmgt/events/api/model/Mapper.java\nrename to features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableMapper.java\nindex a0a5ff4977d..f5e91bdbfc3 100644\n--- a/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/Mapper.java\n+++ b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableMapper.java\n\n@@ -34,9 +34,9 @@ import org.opennms.netmgt.xml.event.*;\n import java.util.stream.Collectors;\n \n /**\n- * A mapper to/from mutable and immutable types for Event (and related objects).\n+ * A mapper from mutable to immutable types for Event (and related objects).\n  */\n-public class Mapper {\n+public class ImmutableMapper {\n \n     public static ImmutableAlarmData fromMutableAlarmData(AlarmData alarmData) {\n         if (alarmData == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MzA4NA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364783084", "bodyText": "Lets rename this to ImmutableMapper", "author": "mattixtech", "createdAt": "2020-01-09T14:56:17Z", "path": "features/events/api/src/main/java/org/opennms/netmgt/events/api/model/Mapper.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.events.api.model;\n+\n+import org.opennms.core.utils.ImmutableCollections;\n+import org.opennms.netmgt.xml.event.*;\n+\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A mapper to/from mutable and immutable types for Event (and related objects).\n+ */\n+public class Mapper {", "originalCommit": "f64716b5a186127578cbaf325a15a0a6dfaf4c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwOTkwNA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364809904", "bodyText": "Done", "author": "bouff", "createdAt": "2020-01-09T15:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MzA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "fc3765b3f6151ca519b3633545b8a5ddc8e8a94b", "chunk": "diff --git a/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/Mapper.java b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableMapper.java\nsimilarity index 87%\nrename from features/events/api/src/main/java/org/opennms/netmgt/events/api/model/Mapper.java\nrename to features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableMapper.java\nindex a0a5ff4977d..f5e91bdbfc3 100644\n--- a/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/Mapper.java\n+++ b/features/events/api/src/main/java/org/opennms/netmgt/events/api/model/ImmutableMapper.java\n\n@@ -34,9 +34,9 @@ import org.opennms.netmgt.xml.event.*;\n import java.util.stream.Collectors;\n \n /**\n- * A mapper to/from mutable and immutable types for Event (and related objects).\n+ * A mapper from mutable to immutable types for Event (and related objects).\n  */\n-public class Mapper {\n+public class ImmutableMapper {\n \n     public static ImmutableAlarmData fromMutableAlarmData(AlarmData alarmData) {\n         if (alarmData == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4NTMwOA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364785308", "bodyText": "Minor nitpick. The null check here isn't necessary since the copyFrom() methods already handle the null case.\nCan update this in the other usages as well.", "author": "mattixtech", "createdAt": "2020-01-09T15:00:03Z", "path": "features/events/api/src/main/java/org/opennms/netmgt/xml/event/AlarmData.java", "diffHunk": "@@ -116,6 +119,24 @@ public AlarmData() {\n         super();\n     }\n \n+    public static AlarmData copyFrom(IAlarmData source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        AlarmData alarmData = new AlarmData();\n+        alarmData.setReductionKey(source.getReductionKey());\n+        alarmData.setAlarmType(source.getAlarmType());\n+        alarmData.setClearKey(source.getClearKey());\n+        alarmData.setAutoClean(source.getAutoClean());\n+        alarmData.setX733AlarmType(source.getX733AlarmType());\n+        alarmData.setX733ProbableCause(source.getX733ProbableCause());\n+        alarmData.getUpdateFieldList().addAll(\n+                source.getUpdateFieldList().stream().map(UpdateField::copyFrom).collect(Collectors.toList()));\n+        alarmData.setManagedObject(\n+                source.getManagedObject() == null ? null : ManagedObject.copyFrom(source.getManagedObject()));", "originalCommit": "f64716b5a186127578cbaf325a15a0a6dfaf4c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxNDk3OA==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364814978", "bodyText": "Done, removed the unnecessary null checks.", "author": "bouff", "createdAt": "2020-01-09T15:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4NTMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "fc3765b3f6151ca519b3633545b8a5ddc8e8a94b", "chunk": "diff --git a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/AlarmData.java b/features/events/api/src/main/java/org/opennms/netmgt/xml/event/AlarmData.java\nindex 740f1e565a9..15913b3fc4d 100644\n--- a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/AlarmData.java\n+++ b/features/events/api/src/main/java/org/opennms/netmgt/xml/event/AlarmData.java\n\n@@ -133,8 +133,7 @@ public class AlarmData implements Serializable {\n         alarmData.setX733ProbableCause(source.getX733ProbableCause());\n         alarmData.getUpdateFieldList().addAll(\n                 source.getUpdateFieldList().stream().map(UpdateField::copyFrom).collect(Collectors.toList()));\n-        alarmData.setManagedObject(\n-                source.getManagedObject() == null ? null : ManagedObject.copyFrom(source.getManagedObject()));\n+        alarmData.setManagedObject(ManagedObject.copyFrom(source.getManagedObject()));\n         return alarmData;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4Njg2OQ==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364786869", "bodyText": "We don't need to use copyListFromNullable() here since we already have a new list in this object.\nThat method is meant to be used for fields that aren't already initialized so it creates a new list.\nDouble check if this is being done in the other JAXB objects.", "author": "mattixtech", "createdAt": "2020-01-09T15:02:51Z", "path": "features/events/api/src/main/java/org/opennms/netmgt/xml/event/Correlation.java", "diffHunk": "@@ -108,6 +111,20 @@ public Correlation() {\n         this._cueiList = new java.util.ArrayList<>();\n     }\n \n+    public static Correlation copyFrom(ICorrelation source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        Correlation correlation = new Correlation();\n+        correlation.setState(source.getState());\n+        correlation.setPath(source.getPath());\n+        correlation.getCueiCollection().addAll(MutableCollections.copyListFromNullable(source.getCueiCollection()));", "originalCommit": "f64716b5a186127578cbaf325a15a0a6dfaf4c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxOTI2OQ==", "url": "https://github.com/OpenNMS/opennms/pull/2862#discussion_r364819269", "bodyText": "Good catch, done.", "author": "bouff", "createdAt": "2020-01-09T15:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4Njg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc3765b3f6151ca519b3633545b8a5ddc8e8a94b", "chunk": "diff --git a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/Correlation.java b/features/events/api/src/main/java/org/opennms/netmgt/xml/event/Correlation.java\nindex b94942697cf..46e14e5caf6 100644\n--- a/features/events/api/src/main/java/org/opennms/netmgt/xml/event/Correlation.java\n+++ b/features/events/api/src/main/java/org/opennms/netmgt/xml/event/Correlation.java\n\n@@ -119,7 +118,7 @@ public class Correlation implements Serializable {\n         Correlation correlation = new Correlation();\n         correlation.setState(source.getState());\n         correlation.setPath(source.getPath());\n-        correlation.getCueiCollection().addAll(MutableCollections.copyListFromNullable(source.getCueiCollection()));\n+        correlation.getCueiCollection().addAll(source.getCueiCollection());\n         correlation.setCmin(source.getCmin());\n         correlation.setCmax(source.getCmax());\n         correlation.setCtime(source.getCtime());\n"}}, {"oid": "fc3765b3f6151ca519b3633545b8a5ddc8e8a94b", "url": "https://github.com/OpenNMS/opennms/commit/fc3765b3f6151ca519b3633545b8a5ddc8e8a94b", "message": "NMS-10720: Make Events immutable (avoid CMEs and non-deterministic behavior) [Part 1]\n\n-Implement review feedback.", "committedDate": "2020-01-09T16:37:48Z", "type": "commit"}]}