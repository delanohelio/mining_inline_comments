{"pr_number": 3002, "pr_title": "CLOUD-68: Avoid storing passwords in clear text on disk (minion)", "pr_createdAt": "2020-05-08T23:39:24Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/3002", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NDg1Mg==", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426654852", "bodyText": "Can we configure this in the same place as the host and port rather than using an env. variable?", "author": "j-white", "createdAt": "2020-05-18T14:10:39Z", "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.features.minion.dominion.grpc;\n+\n+import java.util.Objects;\n+\n+import org.opennms.distributed.core.api.MinionIdentity;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+\n+public class DominionGrpcFactoryImpl implements DominionGrpcFactory {\n+\n+    private final ManagedChannel channel;\n+    private final String clientId;\n+    private final String clientSecret;\n+\n+    public DominionGrpcFactoryImpl(String host, String port, MinionIdentity minionIdentity) {\n+        this(host, port, Objects.requireNonNull(minionIdentity).getId(),\n+                System.getenv(\"DOMINION_GRPC_CLIENT_SECRET\"));", "originalCommit": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMzg5NQ==", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r428223895", "bodyText": "Yep, good point.", "author": "mattixtech", "createdAt": "2020-05-20T18:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NDg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "chunk": "diff --git a/features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java b/features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java\nindex 5b223cb2567..4c05654df9b 100644\n--- a/features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java\n+++ b/features/minion/dominion/grpc-client/src/main/java/org/opennms/features/minion/dominion/grpc/DominionGrpcFactoryImpl.java\n\n@@ -41,9 +41,8 @@ public class DominionGrpcFactoryImpl implements DominionGrpcFactory {\n     private final String clientId;\n     private final String clientSecret;\n \n-    public DominionGrpcFactoryImpl(String host, String port, MinionIdentity minionIdentity) {\n-        this(host, port, Objects.requireNonNull(minionIdentity).getId(),\n-                System.getenv(\"DOMINION_GRPC_CLIENT_SECRET\"));\n+    public DominionGrpcFactoryImpl(String host, String port, String clientSecret, MinionIdentity minionIdentity) {\n+        this(host, port, Objects.requireNonNull(minionIdentity).getId(), clientSecret);\n     }\n \n     public DominionGrpcFactoryImpl(String host, String port, String clientId, String clientSecret) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NTg4MA==", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426655880", "bodyText": "Let's include the .proto in the source tree for reference.", "author": "j-white", "createdAt": "2020-05-18T14:12:01Z", "path": "features/minion/dominion/grpc-client/src/main/java/org/opennms/dominion/local/rpc/grpc/DominionGrpc.java", "diffHunk": "@@ -0,0 +1,5741 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+// Generated by the protocol buffer compiler.  DO NOT EDIT!\n+// source: dominion.proto", "originalCommit": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODI4Ng==", "url": "https://github.com/OpenNMS/opennms/pull/3002#discussion_r426658286", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(scv.getAliases().containsAll(aliases));\n          \n          \n            \n                    assertThat(scv.getAliases(), contains(aliases));", "author": "j-white", "createdAt": "2020-05-18T14:15:17Z", "path": "features/scv/dominion-grpc-impl/src/test/java/org/opennms/dominion/features/scv/grpc/DominionSecureCredentialsVaultIT.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.dominion.features.scv.grpc;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.opennms.dominion.local.rpc.grpc.DominionGrpc;\n+import org.opennms.dominion.local.rpc.grpc.SecureCredentialsVaultGrpc;\n+import org.opennms.features.minion.dominion.grpc.DominionGrpcFactory;\n+import org.opennms.features.minion.dominion.grpc.DominionGrpcFactoryImpl;\n+import org.opennms.features.scv.api.Credentials;\n+import org.opennms.features.scv.api.SecureCredentialsVault;\n+import org.opennms.features.scv.dominion.grpc.DominionSecureCredentialsVault;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+\n+public class DominionSecureCredentialsVaultIT {\n+\n+    private static final String HOST = \"localhost\";\n+    private static final String CLIENT_ID = \"client.id\";\n+    private static final String CLIENT_SECRET = \"client.secret\";\n+    private static final String SUPPORTED_ALIAS = \"supported.alias\";\n+    private static final List<String> aliases = Collections.singletonList(SUPPORTED_ALIAS);\n+\n+    private static final String USERNAME = \"user\";\n+    private static final String PASSWORD = \"password\";\n+\n+    private ManagedChannel channel;\n+    private SecureCredentialsVault scv;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        int freePort;\n+\n+        try (ServerSocket socket = new ServerSocket(0)) {\n+            socket.setReuseAddress(true);\n+            freePort = socket.getLocalPort();\n+        }\n+\n+        channel = ManagedChannelBuilder.forAddress(HOST, freePort)\n+                .usePlaintext()\n+                .build();\n+        Server server = ServerBuilder.forPort(freePort).addService(new MockDominionServer()).build();\n+        server.start();\n+        CompletableFuture.runAsync(() -> {\n+            try {\n+                server.awaitTermination();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException();\n+            }\n+        });\n+\n+\n+        DominionGrpcFactory factory = new DominionGrpcFactoryImpl(HOST, Integer.toString(freePort), CLIENT_ID,\n+                CLIENT_SECRET);\n+        scv = new DominionSecureCredentialsVault(factory.scvClient());\n+    }\n+\n+    @After\n+    public void stop() {\n+        channel.shutdownNow();\n+    }\n+\n+    @Test\n+    public void canGetAliases() {\n+        assertTrue(scv.getAliases().containsAll(aliases));", "originalCommit": "f39a378b4bafcb50ea0b490ffddb43849a4fd6c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "chunk": "diff --git a/features/scv/dominion-grpc-impl/src/test/java/org/opennms/dominion/features/scv/grpc/DominionSecureCredentialsVaultIT.java b/features/scv/dominion-grpc-impl/src/test/java/org/opennms/dominion/features/scv/grpc/DominionSecureCredentialsVaultIT.java\nindex dc496b8c519..87e18ab620b 100644\n--- a/features/scv/dominion-grpc-impl/src/test/java/org/opennms/dominion/features/scv/grpc/DominionSecureCredentialsVaultIT.java\n+++ b/features/scv/dominion-grpc-impl/src/test/java/org/opennms/dominion/features/scv/grpc/DominionSecureCredentialsVaultIT.java\n\n@@ -30,6 +30,7 @@ package org.opennms.dominion.features.scv.grpc;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n import static org.junit.Assert.assertTrue;\n \n import java.io.IOException;\n"}}, {"oid": "cdbcbbbac2da64b163524d90dca5f2a38ae7995c", "url": "https://github.com/OpenNMS/opennms/commit/cdbcbbbac2da64b163524d90dca5f2a38ae7995c", "message": "CLOUD-68: Avoid storing passwords in clear text on disk", "committedDate": "2020-05-20T20:42:33Z", "type": "commit"}, {"oid": "5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "url": "https://github.com/OpenNMS/opennms/commit/5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "message": "Review feedback pt 1", "committedDate": "2020-05-20T20:42:34Z", "type": "commit"}, {"oid": "5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "url": "https://github.com/OpenNMS/opennms/commit/5cd24c1ecc57fac27cf6b8b3a4094b663f3e5d9d", "message": "Review feedback pt 1", "committedDate": "2020-05-20T20:42:34Z", "type": "forcePushed"}, {"oid": "70ec3acdd4bf5487556d7aee17fade4548e42950", "url": "https://github.com/OpenNMS/opennms/commit/70ec3acdd4bf5487556d7aee17fade4548e42950", "message": "- Remove minion-identity bundle and instead split out the rest client as a separate bundle\n- Share the controller config with th rest client\n\ngrpc scv impl depends on core-impl\nrest client depends on grpc scv impl and on core-impl\n\nThese have to be separate to avoid circular deps", "committedDate": "2020-05-22T16:40:37Z", "type": "commit"}]}