{"pr_number": 3119, "pr_title": "NMS-12859: Remove LocationSpecificStatus", "pr_createdAt": "2020-08-20T13:32:04Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/3119", "timeline": [{"oid": "903a1b5e6a03ed9163aba7bf8f11d22ece128f61", "url": "https://github.com/OpenNMS/opennms/commit/903a1b5e6a03ed9163aba7bf8f11d22ece128f61", "message": "NMS-12859: Removed OnmsLocationSpecificStatus and all related classes", "committedDate": "2020-08-20T13:38:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAzNzg5MA==", "url": "https://github.com/OpenNMS/opennms/pull/3119#discussion_r474037890", "bodyText": "remove commented code?", "author": "patrick-schweizer", "createdAt": "2020-08-20T14:44:04Z", "path": "features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java", "diffHunk": "@@ -513,7 +497,7 @@ public void reloadDaemonConfig(final IEvent e) {\n         DaemonTools.handleReloadEvent(e, RemotePollerd.NAME, (event) -> handleConfigurationChanged());\n     }\n \n-    @EventHandler(uei = EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI)\n+    //@EventHandler(uei = EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI)", "originalCommit": "903a1b5e6a03ed9163aba7bf8f11d22ece128f61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQzMTAwMA==", "url": "https://github.com/OpenNMS/opennms/pull/3119#discussion_r474431000", "bodyText": "done", "author": "christianpape", "createdAt": "2020-08-21T06:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAzNzg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "f4bfdf78c985cfa8857f51ef4f574de5d141e4fc", "chunk": "diff --git a/features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java b/features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java\nindex cb5857eaee2..bdf13123eda 100644\n--- a/features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java\n+++ b/features/remotepollerng/daemon/src/main/java/org/opennms/netmgt/remotepollerng/RemotePollerd.java\n\n@@ -492,27 +424,81 @@ public class RemotePollerd implements SpringServiceDaemon {\n     public void afterPropertiesSet() throws Exception {\n     }\n \n-    @EventHandler(uei = EventConstants.RELOAD_DAEMON_CONFIG_UEI)\n-    public void reloadDaemonConfig(final IEvent e) {\n-        DaemonTools.handleReloadEvent(e, RemotePollerd.NAME, (event) -> handleConfigurationChanged());\n+    public ServiceTracker<?> getServiceTracker() {\n+        return this.serviceTracker;\n     }\n \n-    //@EventHandler(uei = EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI)\n-    public void reloadDaemonConfigForLocation(final IEvent e) {\n-        final IParm parm = e.getParm(EventConstants.PARM_LOCATION);\n-        if (parm != null ) {\n-            final IValue value = parm.getValue();\n-            if (value != null) {\n-                handleConfigurationChangedForLocation(value.getContent());\n-            }\n+    private static class QueryManager implements ServiceTracker.QueryManager {\n+        private final MonitoredServiceDao monitoredServiceDao;\n+\n+        private QueryManager(final MonitoredServiceDao monitoredServiceDao) {\n+            this.monitoredServiceDao = Objects.requireNonNull(monitoredServiceDao);\n+        }\n+\n+        @Override\n+        public List<ServiceTracker.Service> findServices() {\n+            return this.monitoredServiceDao.findAllServices().stream()\n+                                           .map(QueryManager::asService)\n+                                           .collect(Collectors.toList());\n+        }\n+\n+        @Override\n+        public List<ServiceTracker.Service> findServicesByNode(final ServiceTracker.Node node) {\n+            return this.monitoredServiceDao.findByNode(node.nodeId).stream()\n+                                           .map(QueryManager::asService)\n+                                           .collect(Collectors.toList());\n+        }\n+\n+        private static ServiceTracker.Service asService(final OnmsMonitoredService service) {\n+            return new ServiceTracker.Service(service.getNodeId(),\n+                                              service.getIpAddress(),\n+                                              service.getServiceName());\n+        }\n+    }\n+\n+    @EventHandler(ueis = { EventConstants.APPLICATION_CREATED_EVENT_UEI,\n+                           EventConstants.APPLICATION_CHANGED_EVENT_UEI,\n+                           EventConstants.APPLICATION_DELETED_EVENT_UEI })\n+    public void applicationEventHandler(final IEvent event) {\n+        final int applicationId = EventUtils.getIntParm(event, EventConstants.PARM_APPLICATION_ID, -1);\n+        if (applicationId == -1) {\n+            LOG.error(\"application ID missing in event: {}\", event);\n+            return;\n         }\n+\n+        this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsApplication application = this.applicationDao.get(applicationId);\n+            if (application != null) {\n+                for (final OnmsMonitoredService service : application.getMonitoredServices()) {\n+                    this.serviceTracker.rescheduleService(new ServiceTracker.Service(service.getNodeId(), service.getIpAddress(), service.getServiceName()));\n+                }\n+            }\n+\n+            // Reschedule everything in case it was removed from application\n+            this.serviceTracker.rescheduleAllServices();\n+\n+            return null;\n+        });\n+    }\n+\n+    @EventHandler(uei = EventConstants.RELOAD_DAEMON_CONFIG_UEI)\n+    public void reloadConfigHandler(final IEvent event) {\n+        DaemonTools.handleReloadEvent(event, RemotePollerd.NAME, (ev) ->  {\n+            try {\n+                this.pollerConfig.update();\n+            } catch (final IOException e) {\n+                LOG.error(\"Failed to load poller configuration\", e);\n+            }\n+\n+            this.serviceTracker.rescheduleAllServices();\n+        });\n     }\n \n     @EventHandler(uei = EventConstants.REMOTE_NODE_LOST_SERVICE_UEI)\n     public void handleRemoteNodeLostService(final IEvent e) {\n         if (e.hasNodeid() && e.getInterfaceAddress() != null && e.getService() != null && e.getParm(\"perspective\") != null) {\n             final OnmsEvent onmsEvent = eventDao.get(e.getDbid());\n-            final OnmsMonitoredService service = monSvcDao.get(onmsEvent.getNodeId(), onmsEvent.getIpAddr(), onmsEvent.getServiceType().getId());\n+            final OnmsMonitoredService service = this.monitoredServiceDao.get(onmsEvent.getNodeId(), onmsEvent.getIpAddr(), onmsEvent.getServiceType().getId());\n             final OnmsMonitoringLocation perspective = monitoringLocationDao.get(e.getParm(\"perspective\").getValue().getContent());\n             final OnmsOutage onmsOutage = new OnmsOutage(onmsEvent.getEventCreateTime(), onmsEvent, service);\n             onmsOutage.setPerspective(perspective);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA0MzI1NQ==", "url": "https://github.com/OpenNMS/opennms/pull/3119#discussion_r474043255", "bodyText": "Not sure if the method name makes it clear that we are talking about perspective!=NULL ?", "author": "patrick-schweizer", "createdAt": "2020-08-20T14:51:20Z", "path": "opennms-dao-mock/src/main/java/org/opennms/netmgt/dao/mock/MockOutageDao.java", "diffHunk": "@@ -110,4 +111,9 @@ public int countOutagesByNode() {\n     public List<HeatMapElement> getHeatMapItemsForEntity(String entityNameColumn, String entityIdColumn, String restrictionColumn, String restrictionValue, String... groupByColumns) {\n         throw new UnsupportedOperationException(\"Not yet implemented!\");\n     }\n+\n+    @Override\n+    public Collection<OnmsOutage> getStatusChangesForApplicationIdBetween(Date startDate, Date endDate, Integer applicationId) {", "originalCommit": "903a1b5e6a03ed9163aba7bf8f11d22ece128f61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyODE5NA==", "url": "https://github.com/OpenNMS/opennms/pull/3119#discussion_r474428194", "bodyText": "Hmmm... I hope it's clear since the term Application is part of the method-name.", "author": "christianpape", "createdAt": "2020-08-21T06:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA0MzI1NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5f75a36b81af845ed4d87084fc6027c92b75fc6c", "url": "https://github.com/OpenNMS/opennms/commit/5f75a36b81af845ed4d87084fc6027c92b75fc6c", "message": "NMS-12859: Fixed some applicationContext-files", "committedDate": "2020-08-20T17:52:02Z", "type": "forcePushed"}, {"oid": "f4bfdf78c985cfa8857f51ef4f574de5d141e4fc", "url": "https://github.com/OpenNMS/opennms/commit/f4bfdf78c985cfa8857f51ef4f574de5d141e4fc", "message": "NMS-12859: Fixed ReST service", "committedDate": "2020-08-21T07:43:32Z", "type": "commit"}, {"oid": "3e2693d8cf00326e15ea55befd49346779f7134e", "url": "https://github.com/OpenNMS/opennms/commit/3e2693d8cf00326e15ea55befd49346779f7134e", "message": "NMS-12859: Removed OnmsLocationSpecificStatus and all related classes", "committedDate": "2020-08-21T08:54:08Z", "type": "commit"}, {"oid": "3e2693d8cf00326e15ea55befd49346779f7134e", "url": "https://github.com/OpenNMS/opennms/commit/3e2693d8cf00326e15ea55befd49346779f7134e", "message": "NMS-12859: Removed OnmsLocationSpecificStatus and all related classes", "committedDate": "2020-08-21T08:54:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU4MDI4Ng==", "url": "https://github.com/OpenNMS/opennms/pull/3119#discussion_r474580286", "bodyText": "An explicit test for this method would be nice?", "author": "fooker", "createdAt": "2020-08-21T09:34:57Z", "path": "opennms-dao/src/main/java/org/opennms/netmgt/dao/hibernate/OutageDaoHibernate.java", "diffHunk": "@@ -276,4 +276,13 @@ public List transformList(List collection) {\n             }\n         });\n     }\n+\n+    @Override\n+    public Collection<OnmsOutage> getStatusChangesForApplicationIdBetween(final Date startDate, final Date endDate, final Integer applicationId) {", "originalCommit": "3e2693d8cf00326e15ea55befd49346779f7134e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "802a194008f98236c850a0e351388ab88b0b232e", "url": "https://github.com/OpenNMS/opennms/commit/802a194008f98236c850a0e351388ab88b0b232e", "message": "NMS-12859: Review changes", "committedDate": "2020-08-21T13:25:03Z", "type": "commit"}]}