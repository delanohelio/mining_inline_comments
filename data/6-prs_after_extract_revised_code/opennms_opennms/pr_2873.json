{"pr_number": 2873, "pr_title": "NMS-12453: Allow exposing status information (New Graph API)", "pr_createdAt": "2020-01-20T14:57:16Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2873", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMDU2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2873#discussion_r369230562", "bodyText": "\ud83d\udc4d", "author": "j-white", "createdAt": "2020-01-21T20:38:19Z", "path": "smoke-test/src/test/java/org/opennms/smoketest/graph/GraphRestServiceIT.java", "diffHunk": "@@ -361,6 +378,136 @@ public void verifyNodeEnrichment() throws InterruptedException {\n                 .content(\"vertices[2].nodeInfo.categories\", Matchers.hasItems(\"Test\", \"Node\"));\n     }\n \n+    @Test\n+    public void verifyStatusExposureBsm() {\n+        try {\n+            karafShell.runCommand(\"opennms-bsm:generate-hierarchies 5 2\");\n+\n+            // Fetch data\n+            final JSONObject query = new JSONObject().put(\"semanticZoomLevel\", 1);\n+            given().log().ifValidationFails()\n+                    .body(query.toString())\n+                    .contentType(ContentType.JSON)\n+                    .post(\"{container_id}/{namespace}\", \"bsm\", \"bsm\")\n+                    .then()\n+                    .log().ifValidationFails()\n+                    .statusCode(200)\n+                    .contentType(ContentType.JSON)\n+                    .content(\"vertices\", Matchers.hasSize(1))\n+                    .content(\"vertices[0].status\", Matchers.is(\"Normal\"));\n+        } finally {\n+            karafShell.runCommand(\"opennms-bsm:delete-generated-hierarchies\");\n+        }\n+    }\n+\n+    @Test\n+    public void verifyStatusEnrichmentApplication() {", "originalCommit": "d6a365fe0ee13e108fe97af8bbe59f0f673ea8ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48efb7ef7f6d44c08cee082d2a5cdff5f1cbea61", "chunk": "diff --git a/smoke-test/src/test/java/org/opennms/smoketest/graph/GraphRestServiceIT.java b/smoke-test/src/test/java/org/opennms/smoketest/graph/GraphRestServiceIT.java\nindex 8ff53333cb4..07af742b174 100644\n--- a/smoke-test/src/test/java/org/opennms/smoketest/graph/GraphRestServiceIT.java\n+++ b/smoke-test/src/test/java/org/opennms/smoketest/graph/GraphRestServiceIT.java\n\n@@ -378,136 +361,6 @@ public class GraphRestServiceIT extends OpenNMSSeleniumIT {\n                 .content(\"vertices[2].nodeInfo.categories\", Matchers.hasItems(\"Test\", \"Node\"));\n     }\n \n-    @Test\n-    public void verifyStatusExposureBsm() {\n-        try {\n-            karafShell.runCommand(\"opennms-bsm:generate-hierarchies 5 2\");\n-\n-            // Fetch data\n-            final JSONObject query = new JSONObject().put(\"semanticZoomLevel\", 1);\n-            given().log().ifValidationFails()\n-                    .body(query.toString())\n-                    .contentType(ContentType.JSON)\n-                    .post(\"{container_id}/{namespace}\", \"bsm\", \"bsm\")\n-                    .then()\n-                    .log().ifValidationFails()\n-                    .statusCode(200)\n-                    .contentType(ContentType.JSON)\n-                    .content(\"vertices\", Matchers.hasSize(1))\n-                    .content(\"vertices[0].status\", Matchers.is(\"Normal\"));\n-        } finally {\n-            karafShell.runCommand(\"opennms-bsm:delete-generated-hierarchies\");\n-        }\n-    }\n-\n-    @Test\n-    public void verifyStatusEnrichmentApplication() {\n-        final HibernateDaoFactory daoFactory = stack.postgres().getDaoFactory();\n-        final ApplicationDaoHibernate applicationDao = daoFactory.getDao(ApplicationDaoHibernate.class);\n-        final MonitoredServiceDao monitoredServiceDao = daoFactory.getDao(MonitoredServiceDaoHibernate.class);\n-        final PlatformTransactionManager transactionManager = new HibernateTransactionManager(applicationDao.getSessionFactory());\n-        final TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);\n-\n-        // Clean up\n-        applicationDao.findAll().forEach(applicationDao::delete);\n-\n-        // Set up test data\n-        createRequisition();\n-        final OnmsApplication tmpApplication = transactionTemplate.execute(transactionStatus -> {\n-            final OnmsApplication theApplication = new OnmsApplication();\n-            theApplication.setName(\"OpenNMS Application\");\n-            monitoredServiceDao.findAllServices().stream()\n-                    .filter(ms -> ms.getIpAddress().toString().contains(\"127.0.0.1\"))\n-                    .forEach(service -> service.addApplication(theApplication));\n-            applicationDao.save(theApplication);\n-            return theApplication;\n-        });\n-\n-        // Force fully initialized to prevent LazyLoad-Exceptions\n-        final OnmsApplication application = transactionTemplate.execute(status -> {\n-            final OnmsApplication initializedApplication = applicationDao.get(tmpApplication.getId());\n-            initializedApplication.getMonitoredServices().stream().forEach(OnmsMonitoredService::getNodeId);\n-            return initializedApplication;\n-        });\n-\n-        // Force application provider to reload (otherwise we have to wait until cache is invalidated)\n-        karafShell.runCommand(\"opennms-graph:force-reload --container application\");\n-\n-        // Fetch data nothing down\n-        final JSONObject query = new JSONObject()\n-                .put(\"semanticZoomLevel\", 1)\n-                .put(\"verticesInFocus\", Lists.newArrayList(String.format(\"Application:%s\", application.getId())));\n-        given().log().ifValidationFails()\n-                .body(query.toString())\n-                .contentType(ContentType.JSON)\n-                .post(\"{container_id}/{namespace}\", \"application\", \"application\")\n-                .then()\n-                .log().ifValidationFails()\n-                .statusCode(200)\n-                .contentType(ContentType.JSON)\n-                .content(\"vertices\", Matchers.hasSize(3))\n-                .content(\"vertices[0].status.severity\", Matchers.is(\"Normal\"))\n-                .content(\"vertices[1].status.severity\", Matchers.is(\"Normal\"))\n-                .content(\"vertices[2].status.severity\", Matchers.is(\"Normal\"))\n-                .content(\"vertices[0].status.count\", Matchers.is(0))\n-                .content(\"vertices[1].status.count\", Matchers.is(0))\n-                .content(\"vertices[2].status.count\", Matchers.is(0));\n-\n-        // Prepare simulated outages\n-        final List<OnmsMonitoredService> services = Lists.newArrayList(application.getMonitoredServices());\n-        final int nodeId1 = services.get(0).getNodeId();\n-        final int nodeId2 = services.get(1).getNodeId();\n-        final Event nodeLostServiceEvent = new EventBuilder(EventConstants.NODE_LOST_SERVICE_EVENT_UEI, getClass().getSimpleName())\n-                .setNodeid(nodeId1)\n-                .setInterface(InetAddressUtils.getInetAddress(\"127.0.0.1\"))\n-                .setService(\"ICMP\")\n-                .getEvent();\n-        final Event nodeDownEvent = new EventBuilder(EventConstants.NODE_DOWN_EVENT_UEI, getClass().getSimpleName())\n-                .setNodeid(nodeId2)\n-                .getEvent();\n-\n-        // Take service down, reload graph and verify\n-        restClient.sendEvent(nodeLostServiceEvent);\n-        karafShell.runCommand(\"opennms-graph:force-reload --container application\");\n-        given().log().ifValidationFails()\n-                .body(query.toString())\n-                .contentType(ContentType.JSON)\n-                .post(\"{container_id}/{namespace}\", \"application\", \"application\")\n-                .then()\n-                .log().ifValidationFails()\n-                .statusCode(200)\n-                .contentType(ContentType.JSON)\n-                .content(\"vertices\", Matchers.hasSize(3))\n-                .content(\"vertices[0].status.severity\", Matchers.is(\"Minor\"))\n-                .content(\"vertices[1].status.severity\", Matchers.is(\"Minor\"))\n-                .content(\"vertices[2].status.severity\", Matchers.is(\"Normal\"))\n-                .content(\"vertices[0].status.count\", Matchers.is(1))\n-                .content(\"vertices[1].status.count\", Matchers.is(1))\n-                .content(\"vertices[2].status.count\", Matchers.is(0));\n-\n-        // Take node down, reload graph and verify\n-        restClient.sendEvent(nodeDownEvent);\n-        karafShell.runCommand(\"opennms-graph:force-reload --container application\");\n-        given().log().ifValidationFails()\n-                .body(query.toString())\n-                .contentType(ContentType.JSON)\n-                .post(\"{container_id}/{namespace}\", \"application\", \"application\")\n-                .then()\n-                .log().ifValidationFails()\n-                .statusCode(200)\n-                .contentType(ContentType.JSON)\n-                .content(\"vertices\", Matchers.hasSize(3))\n-                .content(\"vertices[0].status.severity\", Matchers.is(\"Major\"))\n-                .content(\"vertices[1].status.severity\", Matchers.is(\"Minor\"))\n-                .content(\"vertices[2].status.severity\", Matchers.is(\"Major\"))\n-                .content(\"vertices[0].status.count\", Matchers.is(1))\n-                .content(\"vertices[1].status.count\", Matchers.is(1))\n-                .content(\"vertices[2].status.count\", Matchers.is(1));\n-\n-        // Finally clean up\n-        applicationDao.delete(application);\n-    }\n-\n     @Test\n     // Here we test, that the name of the file and the container id may be different\n     public void verifyContainerId() {\n"}}, {"oid": "48efb7ef7f6d44c08cee082d2a5cdff5f1cbea61", "url": "https://github.com/OpenNMS/opennms/commit/48efb7ef7f6d44c08cee082d2a5cdff5f1cbea61", "message": "NMS-12453: Expose application status via Graph Service API", "committedDate": "2020-01-31T08:42:08Z", "type": "commit"}, {"oid": "daf48e694c9d1f24535863ff98677156dfa57fdc", "url": "https://github.com/OpenNMS/opennms/commit/daf48e694c9d1f24535863ff98677156dfa57fdc", "message": "NMS-12453: Fix application status calculation", "committedDate": "2020-01-31T08:42:08Z", "type": "commit"}, {"oid": "9295cf1f36e582692bf42506d731b49a6fc2bb78", "url": "https://github.com/OpenNMS/opennms/commit/9295cf1f36e582692bf42506d731b49a6fc2bb78", "message": "NMS-12453: Expose bsm status and allow to manually invalidate graph cache via karaf shell", "committedDate": "2020-01-31T08:42:08Z", "type": "commit"}, {"oid": "14b421b89b910dfca700889cedd96ce8a9639476", "url": "https://github.com/OpenNMS/opennms/commit/14b421b89b910dfca700889cedd96ce8a9639476", "message": "NMS-12453: Add some basic documentation", "committedDate": "2020-01-31T08:42:08Z", "type": "commit"}, {"oid": "d1aebdf9f26699e97906d40f13ac14bec35fff4f", "url": "https://github.com/OpenNMS/opennms/commit/d1aebdf9f26699e97906d40f13ac14bec35fff4f", "message": "NMS-12453: Fix count being null", "committedDate": "2020-01-31T08:42:08Z", "type": "commit"}, {"oid": "e3f84d56161566f3ebc382c2625bc15e09f7aaca", "url": "https://github.com/OpenNMS/opennms/commit/e3f84d56161566f3ebc382c2625bc15e09f7aaca", "message": "NMS-12453: Add test", "committedDate": "2020-01-31T08:42:08Z", "type": "commit"}, {"oid": "3be1b633c0d1bf2af2218756c2480d5e9aeef0ff", "url": "https://github.com/OpenNMS/opennms/commit/3be1b633c0d1bf2af2218756c2480d5e9aeef0ff", "message": "NMS-12453: Verify appilcation status enrichment", "committedDate": "2020-01-31T08:42:08Z", "type": "commit"}, {"oid": "3be1b633c0d1bf2af2218756c2480d5e9aeef0ff", "url": "https://github.com/OpenNMS/opennms/commit/3be1b633c0d1bf2af2218756c2480d5e9aeef0ff", "message": "NMS-12453: Verify appilcation status enrichment", "committedDate": "2020-01-31T08:42:08Z", "type": "forcePushed"}]}