{"pr_number": 2994, "pr_title": "NMS-12695: graphite telemetry adapter", "pr_createdAt": "2020-05-04T13:57:44Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2994", "timeline": [{"oid": "7ee0e0a0edc22756bb802c5c49bd945221da7628", "url": "https://github.com/OpenNMS/opennms/commit/7ee0e0a0edc22756bb802c5c49bd945221da7628", "message": "NMS-12695: working graphite telemetry adapter", "committedDate": "2020-05-04T13:55:35Z", "type": "commit"}, {"oid": "ae5e6913cfabc8b4114e6961e4883af36ca0cfed", "url": "https://github.com/OpenNMS/opennms/commit/ae5e6913cfabc8b4114e6961e4883af36ca0cfed", "message": "NMS-12695: graphite documentation", "committedDate": "2020-05-04T13:55:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1OTY3Ng==", "url": "https://github.com/OpenNMS/opennms/pull/2994#discussion_r419459676", "bodyText": "Would be good to catch exceptions from Long.valueOf as well.", "author": "j-white", "createdAt": "2020-05-04T14:02:27Z", "path": "features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.graphite.adapter;\n+\n+import java.net.InetAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import javax.script.ScriptException;\n+\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.api.CollectionAgent;\n+import org.opennms.netmgt.collection.api.CollectionAgentFactory;\n+import org.opennms.netmgt.collection.api.CollectionSet;\n+import org.opennms.netmgt.dao.api.InterfaceToNodeCache;\n+import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLog;\n+import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n+import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n+import org.opennms.netmgt.telemetry.protocols.collection.AbstractScriptedCollectionAdapter;\n+import org.opennms.netmgt.telemetry.protocols.collection.CollectionSetWithAgent;\n+import org.opennms.netmgt.telemetry.protocols.collection.ScriptedCollectionSetBuilder;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+public class GraphiteAdapter extends AbstractScriptedCollectionAdapter {\n+    private CollectionAgentFactory collectionAgentFactory;\n+    private InterfaceToNodeCache interfaceToNodeCache;\n+\n+    public GraphiteAdapter(final AdapterDefinition adapterConfig, final MetricRegistry metricRegistry) {\n+        super(adapterConfig, metricRegistry);\n+    }\n+\n+    @Override\n+    public Stream<CollectionSetWithAgent> handleCollectionMessage(final TelemetryMessageLogEntry message, final TelemetryMessageLog messageLog) {\n+        final String messageText = new String(message.getByteArray());\n+        LOG.trace(\"plaintext message: {}\", messageText);\n+        final String[] lines = messageText.split(\"\\n\");\n+\n+        CollectionAgent agent = null;\n+        try {\n+            final InetAddress inetAddress = InetAddressUtils.addr(messageLog.getSourceAddress());\n+            final Optional<Integer> nodeId = interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), inetAddress);\n+            if (nodeId.isPresent()) {\n+                // NOTE: This will throw a IllegalArgumentException if the nodeId/inetAddress pair does not exist in the database\n+                agent = collectionAgentFactory.createCollectionAgent(Integer.toString(nodeId.get()), inetAddress);\n+            }\n+        } catch (final RuntimeException e) {\n+            LOG.warn(\"Unable to determine source address from message log.\", e);\n+            return Stream.empty();\n+        }\n+\n+        if (agent == null) {\n+            LOG.warn(\"Unable to determine collection agent from location={} and address={}\", messageLog.getLocation(), messageLog.getSourceAddress());\n+            return Stream.empty();\n+        }\n+\n+        final ScriptedCollectionSetBuilder builder = getCollectionBuilder();\n+        if (builder == null) {\n+            LOG.error(\"Error compiling script '{}'. See logs for details.\", this.getScript());\n+            return Stream.empty();\n+        }\n+\n+        final List<CollectionSetWithAgent> collectionSets = new ArrayList<>();\n+\n+        for (final String line : lines) {\n+            final String[] entry = line.split(\" \", 3);\n+            if (entry.length != 3) {\n+                LOG.warn(\"Unparseable graphite plaintext message: {}\", line);\n+            } else {\n+                final GraphiteMetric metric = new GraphiteMetric(entry[0], entry[1], Long.valueOf(entry[2], 10));", "originalCommit": "ae5e6913cfabc8b4114e6961e4883af36ca0cfed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08406c2624816ec1bc7344e418a49e9f915119b6", "chunk": "diff --git a/features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java b/features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java\nindex 5ecfacead72..f5014524880 100644\n--- a/features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java\n+++ b/features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java\n\n@@ -30,6 +30,7 @@ package org.opennms.netmgt.telemetry.protocols.graphite.adapter;\n \n import java.net.InetAddress;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Stream;\n"}}, {"oid": "08406c2624816ec1bc7344e418a49e9f915119b6", "url": "https://github.com/OpenNMS/opennms/commit/08406c2624816ec1bc7344e418a49e9f915119b6", "message": "NMS-12695: updates based on feedback", "committedDate": "2020-05-04T15:44:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0MTc0OA==", "url": "https://github.com/OpenNMS/opennms/pull/2994#discussion_r419541748", "bodyText": "The NumberFormatException  still won't get caught here right?", "author": "j-white", "createdAt": "2020-05-04T15:55:47Z", "path": "features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java", "diffHunk": "@@ -95,12 +96,12 @@ public GraphiteAdapter(final AdapterDefinition adapterConfig, final MetricRegist\n             if (entry.length != 3) {\n                 LOG.warn(\"Unparseable graphite plaintext message: {}\", line);\n             } else {\n-                final GraphiteMetric metric = new GraphiteMetric(entry[0], entry[1], Long.valueOf(entry[2], 10));\n                 try {\n+                    final GraphiteMetric metric = new GraphiteMetric(entry[0], entry[1], Long.valueOf(entry[2], 10));", "originalCommit": "08406c2624816ec1bc7344e418a49e9f915119b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxOTM3NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2994#discussion_r419619375", "bodyText": "d'oh, you're right", "author": "RangerRick", "createdAt": "2020-05-04T17:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0MTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "efb29a1b4436482826147cee20664dfcafd70c8c", "chunk": "diff --git a/features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java b/features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java\nindex f5014524880..2a2269cdd5c 100644\n--- a/features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java\n+++ b/features/telemetry/protocols/graphite/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/graphite/adapter/GraphiteAdapter.java\n\n@@ -100,7 +100,7 @@ public class GraphiteAdapter extends AbstractScriptedCollectionAdapter {\n                     final GraphiteMetric metric = new GraphiteMetric(entry[0], entry[1], Long.valueOf(entry[2], 10));\n                     final CollectionSet collectionSet = builder.build(agent, metric, metric.getTimestamp());\n                     collectionSets.add(new CollectionSetWithAgent(agent, collectionSet));\n-                } catch (final ScriptException e) {\n+                } catch (final NumberFormatException | ScriptException e) {\n                     LOG.warn(\"Dropping metric, unable to create collection set: {}\", Arrays.asList(entry), e);\n                 }\n             }\n"}}, {"oid": "efb29a1b4436482826147cee20664dfcafd70c8c", "url": "https://github.com/OpenNMS/opennms/commit/efb29a1b4436482826147cee20664dfcafd70c8c", "message": "NMS-12695: actually catch the NumberFormatException :D", "committedDate": "2020-05-04T17:56:20Z", "type": "commit"}]}