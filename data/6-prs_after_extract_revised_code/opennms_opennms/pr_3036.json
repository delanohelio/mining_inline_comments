{"pr_number": 3036, "pr_title": "NMS-12731: ResourceDao performance enhancements for the Time Series Storage API - Part 2", "pr_createdAt": "2020-06-12T20:46:29Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/3036", "timeline": [{"oid": "9cfac0714c398c7492763cca2ce3ce8aaa9d404f", "url": "https://github.com/OpenNMS/opennms/commit/9cfac0714c398c7492763cca2ce3ce8aaa9d404f", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer: move LateAggregationParams to its own class, move all Newts classes to the aggregation package (which is the only onw that should depend on Newts)", "committedDate": "2020-06-14T17:07:16Z", "type": "forcePushed"}, {"oid": "a1f277fea01e6587b3ab2a4a62a0baada6575452", "url": "https://github.com/OpenNMS/opennms/commit/a1f277fea01e6587b3ab2a4a62a0baada6575452", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer: move LateAggregationParams to its own class, move all Newts classes to the aggregation package (which is the only onw that should depend on Newts)", "committedDate": "2020-06-17T19:19:29Z", "type": "forcePushed"}, {"oid": "d9898d8d5fe02117d98c5098905d08a7e2f602ad", "url": "https://github.com/OpenNMS/opennms/commit/d9898d8d5fe02117d98c5098905d08a7e2f602ad", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer: move LateAggregationParams to its own class, move all Newts classes to the aggregation package (which is the only onw that should depend on Newts)", "committedDate": "2020-06-20T22:20:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNzExNg==", "url": "https://github.com/OpenNMS/opennms/pull/3036#discussion_r448417116", "bodyText": "Returning a Callable here seems quite strange. Why not just pass a lambda in the submit function above?", "author": "fooker", "createdAt": "2020-07-01T14:48:33Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/TimeseriesFetchStrategy.java", "diffHunk": "@@ -167,108 +246,15 @@ public FetchResults fetch(long start, long end, long step, int maxrows, Long int\n                 throw Throwables.propagate(e);\n             }\n         }\n-\n-        // Now group the sources by Newts Resource ID, which differs from the OpenNMS Resource ID.\n-        Map<String, List<Source>> sourcesByNewtsResourceId = Maps.newHashMap();\n-        for (Entry<OnmsResource, List<Source>> entry : sourcesByResource.entrySet()) {\n-            final OnmsResource resource = entry.getKey();\n-            for (Source source : entry.getValue()) {\n-                // Gather the values from strings.properties\n-                Utils.convertStringAttributesToConstants(source.getLabel(), resource.getStringPropertyAttributes(), constants);\n-\n-                resources.add(getResourceInfo(resource, source));\n-\n-                // Grab the attribute that matches the source\n-                RrdGraphAttribute rrdGraphAttribute = resource.getRrdGraphAttributes().get(source.getAttribute());\n-\n-                if (rrdGraphAttribute == null && !Strings.isNullOrEmpty(source.getFallbackAttribute())) {\n-                    LOG.error(\"No attribute with name '{}', using fallback-attribute with name '{}'\", source.getAttribute(), source.getFallbackAttribute());\n-                    source.setAttribute(source.getFallbackAttribute());\n-                    source.setFallbackAttribute(null);\n-                    rrdGraphAttribute = resource.getRrdGraphAttributes().get(source.getAttribute());\n-                }\n-\n-                if (rrdGraphAttribute == null) {\n-                    if (relaxed) continue;\n-                    LOG.error(\"No attribute with name: {}\", source.getAttribute());\n-                    return null;\n-                }\n-\n-                // The Newts Resource ID is stored in the rrdFile attribute\n-                String newtsResourceId = rrdGraphAttribute.getRrdRelativePath();\n-                // Remove the file separator prefix, added by the RrdGraphAttribute class\n-                if (newtsResourceId.startsWith(File.separator)) {\n-                    newtsResourceId = newtsResourceId.substring(File.separator.length(), newtsResourceId.length());\n-                }\n-\n-                List<Source> listOfSources = sourcesByNewtsResourceId.get(newtsResourceId);\n-                // Create the list if it doesn't exist\n-                if (listOfSources == null) {\n-                    listOfSources = Lists.newLinkedList();\n-                    sourcesByNewtsResourceId.put(newtsResourceId, listOfSources);\n-                }\n-                listOfSources.add(source);\n-            }\n-        }\n-\n-        // The Newts API only allows us to perform a query using a single (Newts) Resource ID,\n-        // so we perform multiple queries in parallel, and aggregate the results.\n-        Map<String, Future<Collection<Row<Measurement>>>> measurementsByNewtsResourceId = Maps.newHashMapWithExpectedSize(sourcesByNewtsResourceId.size());\n-        for (Entry<String, List<Source>> entry : sourcesByNewtsResourceId.entrySet()) {\n-            measurementsByNewtsResourceId.put(entry.getKey(), threadPool.submit(\n-                    getMeasurementsForResourceCallable(entry.getKey(), entry.getValue(), startTs, endTs, lag)));\n-        }\n-\n-        long[] timestamps = null;\n-        Map<String, double[]> columns = Maps.newHashMap();\n-\n-        for (Entry<String, Future<Collection<Row<Measurement>>>> entry : measurementsByNewtsResourceId.entrySet()) {\n-            Collection<Row<Measurement>> rows;\n-            try {\n-                rows = entry.getValue().get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw Throwables.propagate(e);\n-            }\n-\n-            final int N = rows.size();\n-\n-            if (timestamps == null) {\n-                timestamps = new long[N];\n-                int k = 0;\n-                for (final Row<Measurement> row : rows) {\n-                    timestamps[k] = row.getTimestamp().asMillis();\n-                    k++;\n-                }\n-            }\n-\n-            int k = 0;\n-            for (Row<Measurement> row : rows) {\n-                for (Measurement measurement : row.getElements()) {\n-                    double[] column = columns.get(measurement.getName());\n-                    if (column == null) {\n-                        column = new double[N];\n-                        columns.put(measurement.getName(), column);\n-                    }\n-                    column[k] = measurement.getValue();\n-                }\n-                k += 1;\n-            }\n-        }\n-\n-        FetchResults fetchResults = new FetchResults(timestamps, columns, lag.getStep(), constants, new QueryMetadata(resources));\n-        if (relaxed) {\n-            Utils.fillMissingValues(fetchResults, sources);\n-        }\n-        LOG.trace(\"Fetch results: {}\", fetchResults);\n-        return fetchResults;\n+        return sourcesByResource;\n     }\n \n-    private Callable<Collection<Row<Measurement>>> getMeasurementsForResourceCallable(final String resourceId, final List<Source> listOfSources, final Optional<Timestamp> start, final Optional<Timestamp> end, final LateAggregationParams lag) {\n-        return new Callable<Collection<Row<Measurement>>>() {\n+    private Callable<Map<Source, List<Sample>>> getMeasurementsForResourceCallable(final String resourceId, final List<Source> listOfSources, final Instant start, final Instant end, final LateAggregationParams lag) {", "originalCommit": "d9898d8d5fe02117d98c5098905d08a7e2f602ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1NTUxOQ==", "url": "https://github.com/OpenNMS/opennms/pull/3036#discussion_r449155519", "bodyText": "\ud83d\udc4d fixed", "author": "patrick-schweizer", "createdAt": "2020-07-02T17:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNzExNg=="}], "type": "inlineReview", "revised_code": {"commit": "91e58beea3ae1769dad96405f6e02e1d5a7702d3", "chunk": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/TimeseriesFetchStrategy.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/TimeseriesFetchStrategy.java\nindex d7e71c8f52e..e41f7a35b96 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/TimeseriesFetchStrategy.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/TimeseriesFetchStrategy.java\n\n@@ -218,43 +272,12 @@ public class TimeseriesFetchStrategy implements MeasurementFetchStrategy {\n         }\n     }\n \n-    private Map<OnmsResource, List<Source>> loadOnmsResources(final List<Source> sources, boolean relaxed) {\n-\n-        // Group the sources by resource id to avoid calling the ResourceDao\n-        // multiple times for the same resource\n-        Map<ResourceId, List<Source>> sourcesByResourceId = sources.stream()\n-                .collect(Collectors.groupingBy((source) -> ResourceId.fromString(source.getResourceId())));\n-\n-        // Lookup the OnmsResources in parallel\n-        Map<ResourceId, Future<OnmsResource>> resourceFuturesById = Maps.newHashMapWithExpectedSize(sourcesByResourceId.size());\n-        for (ResourceId resourceId : sourcesByResourceId.keySet()) {\n-            resourceFuturesById.put(resourceId, threadPool.submit(getResourceByIdCallable(resourceId)));\n-        }\n-\n-        // Gather the results, fail if any of the resources were not found\n-        Map<OnmsResource, List<Source>> sourcesByResource = Maps.newHashMapWithExpectedSize(sourcesByResourceId.size());\n-        for (Entry<ResourceId, Future<OnmsResource>> entry : resourceFuturesById.entrySet()) {\n-            try {\n-                OnmsResource resource = entry.getValue().get();\n-                if (resource == null) {\n-                    if (relaxed) continue;\n-                    LOG.error(\"No resource with id: {}\", entry.getKey());\n-                    return null;\n-                }\n-                sourcesByResource.put(resource, sourcesByResourceId.get(entry.getKey()));\n-            } catch (ExecutionException | InterruptedException e) {\n-                throw Throwables.propagate(e);\n-            }\n-        }\n-        return sourcesByResource;\n-    }\n-\n-    private Callable<Map<Source, List<Sample>>> getMeasurementsForResourceCallable(final String resourceId, final List<Source> listOfSources, final Instant start, final Instant end, final LateAggregationParams lag) {\n-        return new Callable<Map<Source, List<Sample>>>() {\n+    private Callable<Collection<Row<Measurement>>> getMeasurementsForResourceCallable(final String resourceId, final List<Source> listOfSources, final Optional<Timestamp> start, final Optional<Timestamp> end, final LateAggregationParams lag) {\n+        return new Callable<Collection<Row<Measurement>>>() {\n             @Override\n-            public Map<Source, List<Sample>> call() throws Exception {\n+            public Collection<Row<Measurement>> call() throws Exception {\n \n-                Map<Source, List<Sample>> allSamples = new HashMap<>(listOfSources.size());\n+                List<List<Sample>> allSamples = new ArrayList<>();\n \n                 // get results for all sources\n                 for (Source source : listOfSources) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MDU4MA==", "url": "https://github.com/OpenNMS/opennms/pull/3036#discussion_r448850580", "bodyText": "This metric may be not detailed enough. I see two problems here:\n\nThis measures to calls to the implementation which we maybe want to inspect separately.\nWe also measure the time needed to build the list of samples to insert/index.", "author": "fooker", "createdAt": "2020-07-02T08:52:42Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersistOperationBuilder.java", "diffHunk": "@@ -122,8 +122,10 @@ public void setAttributeMetadata(String metricIdentifier, String name) {\n \n     @Override\n     public void commit() {\n-        writer.insert(getSamplesToInsert());\n-        writer.index(getSamplesToIndex());\n+        try(final Timer.Context context = commitTimer.time()) {\n+            writer.insert(getSamplesToInsert());\n+            writer.index(getSamplesToIndex());\n+        }", "originalCommit": "d9898d8d5fe02117d98c5098905d08a7e2f602ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2MzU5Nw==", "url": "https://github.com/OpenNMS/opennms/pull/3036#discussion_r449163597", "bodyText": "This measures to calls to the implementation which we maybe want to inspect separately.\n\nTrue, we measure the overall time to collect the samples. You think we should turn that into 2 separate timers?\n\nWe also measure the time needed to build the list of samples to insert/index.\n\nThe actual insert happens in a different thread (managed by the ringbuffer).\nWe measure the insert times separately:\nmetadata.write.db\nsamples.write.ts", "author": "patrick-schweizer", "createdAt": "2020-07-02T17:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MDU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5NzA0OQ==", "url": "https://github.com/OpenNMS/opennms/pull/3036#discussion_r449197049", "bodyText": "Ok, if this is the collect part only, a single metric is fine", "author": "fooker", "createdAt": "2020-07-02T18:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MDU4MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "91e58beea3ae1769dad96405f6e02e1d5a7702d3", "url": "https://github.com/OpenNMS/opennms/commit/91e58beea3ae1769dad96405f6e02e1d5a7702d3", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer: NMS-12747 Add JMX Meters to measure and export performance", "committedDate": "2020-07-02T20:06:22Z", "type": "commit"}, {"oid": "98551b997c730c72235d83e8c4f50f35108d8586", "url": "https://github.com/OpenNMS/opennms/commit/98551b997c730c72235d83e8c4f50f35108d8586", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer:     NMS-12749: Remove conversation to Newts objects in read operation", "committedDate": "2020-07-02T20:06:22Z", "type": "commit"}, {"oid": "112f351ba178e5880c72943df36aefbe52ca6da4", "url": "https://github.com/OpenNMS/opennms/commit/112f351ba178e5880c72943df36aefbe52ca6da4", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer:         NMS-12748 Remove unnecessary writes to meta_data table", "committedDate": "2020-07-02T20:06:22Z", "type": "commit"}, {"oid": "0416cab4470f1a495d68ee851ca589bf0692f835", "url": "https://github.com/OpenNMS/opennms/commit/0416cab4470f1a495d68ee851ca589bf0692f835", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer:         clean up code", "committedDate": "2020-07-02T20:06:23Z", "type": "commit"}, {"oid": "4eb4489fb378d9d9c076c4916989d6f751bed0b8", "url": "https://github.com/OpenNMS/opennms/commit/4eb4489fb378d9d9c076c4916989d6f751bed0b8", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer: remove dependency (and transformations) to Newts", "committedDate": "2020-07-02T20:06:23Z", "type": "commit"}, {"oid": "98a1fcc6668f651b0429f5ae36f55b92078122f9", "url": "https://github.com/OpenNMS/opennms/commit/98a1fcc6668f651b0429f5ae36f55b92078122f9", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer: move LateAggregationParams to its own class, move all Newts classes to the aggregation package (which is the only onw that should depend on Newts)", "committedDate": "2020-07-02T20:06:23Z", "type": "commit"}, {"oid": "bf9447d0a12aeb92849d818b4341e929653ef7e9", "url": "https://github.com/OpenNMS/opennms/commit/bf9447d0a12aeb92849d818b4341e929653ef7e9", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer: address PR comments", "committedDate": "2020-07-02T20:06:23Z", "type": "commit"}, {"oid": "bf9447d0a12aeb92849d818b4341e929653ef7e9", "url": "https://github.com/OpenNMS/opennms/commit/bf9447d0a12aeb92849d818b4341e929653ef7e9", "message": "NMS-12731 Optimize Performance of Timeseries Integration Layer: address PR comments", "committedDate": "2020-07-02T20:06:23Z", "type": "forcePushed"}, {"oid": "1f49d0e59a2bb9f1270fb2149dda6ad050c0752d", "url": "https://github.com/OpenNMS/opennms/commit/1f49d0e59a2bb9f1270fb2149dda6ad050c0752d", "message": "NMS-12731: ResourceDao performance enhancements for the Time Series Storage API", "committedDate": "2020-07-06T17:13:00Z", "type": "commit"}]}