{"pr_number": 2971, "pr_title": "NMS-12374: Add tracing for provisiond", "pr_createdAt": "2020-04-10T20:48:18Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2971", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjI0NA==", "url": "https://github.com/OpenNMS/opennms/pull/2971#discussion_r406986244", "bodyText": "Seems odd to mix calls to getTracer() and direct access to m_tracer in this same method.", "author": "j-white", "createdAt": "2020-04-10T23:49:36Z", "path": "opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/DefaultProvisionService.java", "diffHunk": "@@ -1453,4 +1470,22 @@ public void setServiceTypeDao(final ServiceTypeDao dao) {\n     public void setEventForwarder(final EventForwarder eventForwarder) {\n         m_eventForwarder = eventForwarder;\n     }\n+\n+    public Span buildAndStartSpan(String name, SpanContext spanContext) {\n+        if(getTracer() == null) {", "originalCommit": "7b127f138f880829864c1e7aa5dcb4bd5a697d00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0198fbbb37f7b70d07158f0b02d2f43f8bd79d3", "chunk": "diff --git a/opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/DefaultProvisionService.java b/opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/DefaultProvisionService.java\nindex 8973bde298c..b0c09a96ec7 100644\n--- a/opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/DefaultProvisionService.java\n+++ b/opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/DefaultProvisionService.java\n\n@@ -1472,13 +1467,13 @@ public class DefaultProvisionService implements ProvisionService, InitializingBe\n     }\n \n     public Span buildAndStartSpan(String name, SpanContext spanContext) {\n-        if(getTracer() == null) {\n+        if(m_tracer == null) {\n             m_tracer = GlobalTracer.get();\n         }\n         if (spanContext == null) {\n-            return getTracer().buildSpan(\"Provisiond-\" + name).start();\n+            return m_tracer.buildSpan(\"Provisiond-\" + name).start();\n         } else {\n-            return getTracer().buildSpan(\"Provisiond-\" + name).asChildOf(spanContext).start();\n+            return m_tracer.buildSpan(\"Provisiond-\" + name).asChildOf(spanContext).start();\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjcxMw==", "url": "https://github.com/OpenNMS/opennms/pull/2971#discussion_r406986713", "bodyText": "this.m_", "author": "j-white", "createdAt": "2020-04-10T23:52:26Z", "path": "opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/Provisioner.java", "diffHunk": "@@ -214,6 +222,10 @@ public void setMonitoringSystemDao(MonitoringSystemDao monitoringSystemDao) {\n         this.monitoringSystemDao = monitoringSystemDao;\n     }\n \n+    public void setTracerRegistry(TracerRegistry tracerRegistry) {\n+        this.m_tracerRegistry = tracerRegistry;", "originalCommit": "7b127f138f880829864c1e7aa5dcb4bd5a697d00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0198fbbb37f7b70d07158f0b02d2f43f8bd79d3", "chunk": "diff --git a/opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/Provisioner.java b/opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/Provisioner.java\nindex 83d9963ec2b..4baa0e7fb7d 100644\n--- a/opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/Provisioner.java\n+++ b/opennms-provision/opennms-provisiond/src/main/java/org/opennms/netmgt/provision/service/Provisioner.java\n\n@@ -223,7 +223,7 @@ public class Provisioner implements SpringServiceDaemon {\n     }\n \n     public void setTracerRegistry(TracerRegistry tracerRegistry) {\n-        this.m_tracerRegistry = tracerRegistry;\n+        m_tracerRegistry = tracerRegistry;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4Njc5NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2971#discussion_r406986795", "bodyText": "Unnecessary change.", "author": "j-white", "createdAt": "2020-04-10T23:52:50Z", "path": "opennms-provision/opennms-provisiond/src/test/java/org/opennms/netmgt/provision/service/InvalidRequisitionDataIT.java", "diffHunk": "@@ -143,7 +143,7 @@ public void testImportInvalidAsset() throws Exception {\n         // Change it to \"pollerCategory\" (capital 'C') and the test passes...\n         m_provisioner.doImport(invalidAssetFieldResource.getURL().toString(), Boolean.TRUE.toString());\n         waitForEverything();\n-        m_eventManager.getEventAnticipator().verifyAnticipated();\n+            m_eventManager.getEventAnticipator().verifyAnticipated();", "originalCommit": "7b127f138f880829864c1e7aa5dcb4bd5a697d00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0198fbbb37f7b70d07158f0b02d2f43f8bd79d3", "chunk": "diff --git a/opennms-provision/opennms-provisiond/src/test/java/org/opennms/netmgt/provision/service/InvalidRequisitionDataIT.java b/opennms-provision/opennms-provisiond/src/test/java/org/opennms/netmgt/provision/service/InvalidRequisitionDataIT.java\nindex 4da59059522..1f5ff070bb4 100644\n--- a/opennms-provision/opennms-provisiond/src/test/java/org/opennms/netmgt/provision/service/InvalidRequisitionDataIT.java\n+++ b/opennms-provision/opennms-provisiond/src/test/java/org/opennms/netmgt/provision/service/InvalidRequisitionDataIT.java\n\n@@ -143,7 +144,7 @@ public class InvalidRequisitionDataIT extends ProvisioningITCase implements Init\n         // Change it to \"pollerCategory\" (capital 'C') and the test passes...\n         m_provisioner.doImport(invalidAssetFieldResource.getURL().toString(), Boolean.TRUE.toString());\n         waitForEverything();\n-            m_eventManager.getEventAnticipator().verifyAnticipated();\n+        m_eventManager.getEventAnticipator().verifyAnticipated();\n \n         // should still import the node, just skip the asset field\n         assertEquals(1, m_nodeDao.countAll());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NzAzNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2971#discussion_r406987035", "bodyText": "I'm guessing this is related to NMS-12503? :)", "author": "j-white", "createdAt": "2020-04-10T23:53:55Z", "path": "opennms-provision/opennms-provisiond/src/test/java/org/opennms/netmgt/provision/service/ProvisionerIT.java", "diffHunk": "@@ -1300,6 +1301,15 @@ public void testProvisionServiceGetScheduleForNodesUponDelete() throws Exception\n \n         assertEquals(9, schedulesForNode.size());\n         assertEquals(9, m_provisioner.getScheduleLength());\n+\n+        // Check that re-scheduling won't trigger duplicate scheduling for a given node.", "originalCommit": "7b127f138f880829864c1e7aa5dcb4bd5a697d00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5NjU5Mw==", "url": "https://github.com/OpenNMS/opennms/pull/2971#discussion_r408396593", "bodyText": "yeah, similar issue but https://issues.opennms.org/browse/NMS-12504", "author": "cgorantla", "createdAt": "2020-04-14T19:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NzAzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzODg5Ng==", "url": "https://github.com/OpenNMS/opennms/pull/2971#discussion_r409638896", "bodyText": "We'll need to re-think this for Minion.", "author": "j-white", "createdAt": "2020-04-16T15:16:15Z", "path": "opennms-provision/opennms-detectorclient-rpc/src/main/java/org/opennms/netmgt/provision/detector/client/rpc/DetectorClientRpcModule.java", "diffHunk": "@@ -86,6 +86,7 @@ public DetectorClientRpcModule() {\n                 @Override\n                 public DetectorResponseDTO get() {\n                     try {\n+                        detectRequest.preDetect();", "originalCommit": "4327b53744e5aec104dbb639abf5558e7b79c9e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "653d5d2545dd41ea7e3c9c77d2772b0c80f4b89c", "chunk": "diff --git a/opennms-provision/opennms-detectorclient-rpc/src/main/java/org/opennms/netmgt/provision/detector/client/rpc/DetectorClientRpcModule.java b/opennms-provision/opennms-detectorclient-rpc/src/main/java/org/opennms/netmgt/provision/detector/client/rpc/DetectorClientRpcModule.java\nindex 89ca48d1872..0b84fe0718b 100644\n--- a/opennms-provision/opennms-detectorclient-rpc/src/main/java/org/opennms/netmgt/provision/detector/client/rpc/DetectorClientRpcModule.java\n+++ b/opennms-provision/opennms-detectorclient-rpc/src/main/java/org/opennms/netmgt/provision/detector/client/rpc/DetectorClientRpcModule.java\n\n@@ -86,7 +86,6 @@ public class DetectorClientRpcModule extends AbstractXmlRpcModule<DetectorReques\n                 @Override\n                 public DetectorResponseDTO get() {\n                     try {\n-                        detectRequest.preDetect();\n                         return new DetectorResponseDTO(syncDetector.detect(detectRequest));\n                     } catch (Throwable t) {\n                         return new DetectorResponseDTO(t);\n"}}, {"oid": "653d5d2545dd41ea7e3c9c77d2772b0c80f4b89c", "url": "https://github.com/OpenNMS/opennms/commit/653d5d2545dd41ea7e3c9c77d2772b0c80f4b89c", "message": "NMS-12374: Add tracing for provisiond", "committedDate": "2020-04-23T17:22:55Z", "type": "commit"}, {"oid": "e0198fbbb37f7b70d07158f0b02d2f43f8bd79d3", "url": "https://github.com/OpenNMS/opennms/commit/e0198fbbb37f7b70d07158f0b02d2f43f8bd79d3", "message": "NMS-12374: Add preDetect to trace start of detect\n\nAdd span for InterfaceScan", "committedDate": "2020-04-23T17:23:14Z", "type": "commit"}, {"oid": "2161ddeaefa0c74932bb06743d0200c08955ed8b", "url": "https://github.com/OpenNMS/opennms/commit/2161ddeaefa0c74932bb06743d0200c08955ed8b", "message": "NMS-12374: Extend tracing from the Provisiond module to RPC client.", "committedDate": "2020-04-23T17:23:43Z", "type": "commit"}, {"oid": "84d29ec3c876c57a4af68f1be4f3c3d189b598f3", "url": "https://github.com/OpenNMS/opennms/commit/84d29ec3c876c57a4af68f1be4f3c3d189b598f3", "message": "NMS-12374: Use callback for detecting start of span for default location\n\nActual detection depends on thread availability from rescan thread pool.\nTo exactly know when detection is happening, send callback just before\ndetect from DetectorClientRpcModule. Callback will start span.", "committedDate": "2020-04-23T17:23:58Z", "type": "commit"}, {"oid": "84d29ec3c876c57a4af68f1be4f3c3d189b598f3", "url": "https://github.com/OpenNMS/opennms/commit/84d29ec3c876c57a4af68f1be4f3c3d189b598f3", "message": "NMS-12374: Use callback for detecting start of span for default location\n\nActual detection depends on thread availability from rescan thread pool.\nTo exactly know when detection is happening, send callback just before\ndetect from DetectorClientRpcModule. Callback will start span.", "committedDate": "2020-04-23T17:23:58Z", "type": "forcePushed"}]}