{"pr_number": 3054, "pr_title": "NMS-12753: Add encryption option for snmp config", "pr_createdAt": "2020-07-01T13:52:09Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/3054", "timeline": [{"oid": "90adcf67a25001cd9686e7874bf54cce3d6df1de", "url": "https://github.com/OpenNMS/opennms/commit/90adcf67a25001cd9686e7874bf54cce3d6df1de", "message": "NMS-12753: Move interface to config api", "committedDate": "2020-07-01T16:08:22Z", "type": "forcePushed"}, {"oid": "7ff92fce2873164894249617e36766944597733a", "url": "https://github.com/OpenNMS/opennms/commit/7ff92fce2873164894249617e36766944597733a", "message": "NMS-12753: Add encryption for snmp\n\nNMS-12753: Add IT\n\nNMS-12753: Move interface to config api\n\nNMS-12753: Add encrypted flag to denote encryption", "committedDate": "2020-07-06T16:24:52Z", "type": "forcePushed"}, {"oid": "c09ac43c587a9d675ff80110f2c66681329ee57e", "url": "https://github.com/OpenNMS/opennms/commit/c09ac43c587a9d675ff80110f2c66681329ee57e", "message": "NMS-12753: Add encryption for snmp\n\nNMS-12753: Add IT\n\nNMS-12753: Move interface to config api\n\nNMS-12753: Add encrypted flag to denote encryption", "committedDate": "2020-07-06T16:32:01Z", "type": "commit"}, {"oid": "c09ac43c587a9d675ff80110f2c66681329ee57e", "url": "https://github.com/OpenNMS/opennms/commit/c09ac43c587a9d675ff80110f2c66681329ee57e", "message": "NMS-12753: Add encryption for snmp\n\nNMS-12753: Add IT\n\nNMS-12753: Move interface to config api\n\nNMS-12753: Add encrypted flag to denote encryption", "committedDate": "2020-07-06T16:32:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1MTM5Nw==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r450351397", "bodyText": "Does this do anything?  Seems like a no-op.", "author": "RangerRick", "createdAt": "2020-07-06T16:46:38Z", "path": "core/snmp/profile-mapper/src/test/java/org/opennms/core/snmp/profile/mapper/SnmpProfileMapperIT.java", "diffHunk": "@@ -121,6 +121,7 @@ public void testSnmpProfileMapperWithCustomOID() {\n         int timeout = 6000;\n         long ttl = 7000;\n         URL url = getClass().getResource(\"/snmp-config2.xml\");\n+        url.getPath().toString();", "originalCommit": "c09ac43c587a9d675ff80110f2c66681329ee57e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88abdaf332b93d657b9ec2f869b21ee652aea7e6", "chunk": "diff --git a/core/snmp/profile-mapper/src/test/java/org/opennms/core/snmp/profile/mapper/SnmpProfileMapperIT.java b/core/snmp/profile-mapper/src/test/java/org/opennms/core/snmp/profile/mapper/SnmpProfileMapperIT.java\nindex 5cb8577c62b..79d05d7b9ea 100644\n--- a/core/snmp/profile-mapper/src/test/java/org/opennms/core/snmp/profile/mapper/SnmpProfileMapperIT.java\n+++ b/core/snmp/profile-mapper/src/test/java/org/opennms/core/snmp/profile/mapper/SnmpProfileMapperIT.java\n\n@@ -121,7 +121,6 @@ public class SnmpProfileMapperIT {\n         int timeout = 6000;\n         long ttl = 7000;\n         URL url = getClass().getResource(\"/snmp-config2.xml\");\n-        url.getPath().toString();\n         try (InputStream configStream = url.openStream()) {\n             setUpProfileMapper(configStream, url);\n             CompletableFuture<Optional<SnmpAgentConfig>> future = profileMapper.getAgentConfigFromProfiles(InetAddress.getByName(\"192.0.1.206\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1MjMyMg==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r450352322", "bodyText": "If m_encrypted is included in the hashcode above, shouldn't it be part of the equals() too?", "author": "RangerRick", "createdAt": "2020-07-06T16:48:14Z", "path": "opennms-config-jaxb/src/main/java/org/opennms/netmgt/config/snmp/Configuration.java", "diffHunk": "@@ -942,6 +957,13 @@ public boolean equals(final Object obj) {\n         } else if (!m_writeCommunity.equals(other.m_writeCommunity)) {\n             return false;\n         }\n+        if (m_ttl == null) {\n+            if (other.m_ttl != null) {\n+                return false;\n+            }\n+        } else if (!m_ttl.equals(other.m_ttl)) {\n+            return false;\n+        }", "originalCommit": "c09ac43c587a9d675ff80110f2c66681329ee57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1MDkwNg==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r451050906", "bodyText": "yeah, it doesn't need to be part of hascode as well. Don't need this for comparison", "author": "cgorantla", "createdAt": "2020-07-07T18:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1MjMyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1MjgzNQ==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r450352835", "bodyText": "</p> ?  ;)", "author": "RangerRick", "createdAt": "2020-07-06T16:49:00Z", "path": "opennms-config/src/main/java/org/opennms/netmgt/config/SnmpPeerFactory.java", "diffHunk": "@@ -426,7 +443,7 @@ public SnmpConfig getSnmpConfig() {\n      * with many other attributes.  Uses new classes the wrap JAXB-generated code to\n      * help with merging, comparing, and optimizing definitions.  Thanks for your\n      * initial work on this Gerald.\n-     *\n+     * <p>\n      * Puts a specific IP address with associated read-community string into\n      * the currently loaded snmp-config.xml.", "originalCommit": "c09ac43c587a9d675ff80110f2c66681329ee57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1MTA4MA==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r451051080", "bodyText": "IntelliJ auto-generated one, removed", "author": "cgorantla", "createdAt": "2020-07-07T18:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1MjgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "88abdaf332b93d657b9ec2f869b21ee652aea7e6", "chunk": "diff --git a/opennms-config/src/main/java/org/opennms/netmgt/config/SnmpPeerFactory.java b/opennms-config/src/main/java/org/opennms/netmgt/config/SnmpPeerFactory.java\nindex d2840b5f417..7493b4f8896 100644\n--- a/opennms-config/src/main/java/org/opennms/netmgt/config/SnmpPeerFactory.java\n+++ b/opennms-config/src/main/java/org/opennms/netmgt/config/SnmpPeerFactory.java\n\n@@ -443,7 +443,6 @@ public class SnmpPeerFactory implements SnmpAgentConfigFactory {\n      * with many other attributes.  Uses new classes the wrap JAXB-generated code to\n      * help with merging, comparing, and optimizing definitions.  Thanks for your\n      * initial work on this Gerald.\n-     * <p>\n      * Puts a specific IP address with associated read-community string into\n      * the currently loaded snmp-config.xml.\n      *\n"}}, {"oid": "88abdaf332b93d657b9ec2f869b21ee652aea7e6", "url": "https://github.com/OpenNMS/opennms/commit/88abdaf332b93d657b9ec2f869b21ee652aea7e6", "message": "NMS-12753: Update docs, fix tests, handle review comments", "committedDate": "2020-07-07T19:23:26Z", "type": "forcePushed"}, {"oid": "60e77cdeb3c17ac02ab600e8c01712bc6a1dbf4e", "url": "https://github.com/OpenNMS/opennms/commit/60e77cdeb3c17ac02ab600e8c01712bc6a1dbf4e", "message": "NMS-12753: Handle review comments\n\nUpdate docs/tests", "committedDate": "2020-07-08T12:11:12Z", "type": "commit"}, {"oid": "60e77cdeb3c17ac02ab600e8c01712bc6a1dbf4e", "url": "https://github.com/OpenNMS/opennms/commit/60e77cdeb3c17ac02ab600e8c01712bc6a1dbf4e", "message": "NMS-12753: Handle review comments\n\nUpdate docs/tests", "committedDate": "2020-07-08T12:11:12Z", "type": "forcePushed"}, {"oid": "67e7d012c771a366102c5dfe573326996ea0efeb", "url": "https://github.com/OpenNMS/opennms/commit/67e7d012c771a366102c5dfe573326996ea0efeb", "message": "NMS-12753: Update crypto policy on java for CircleCI", "committedDate": "2020-07-08T18:31:50Z", "type": "commit"}, {"oid": "67e7d012c771a366102c5dfe573326996ea0efeb", "url": "https://github.com/OpenNMS/opennms/commit/67e7d012c771a366102c5dfe573326996ea0efeb", "message": "NMS-12753: Update crypto policy on java for CircleCI", "committedDate": "2020-07-08T18:31:50Z", "type": "forcePushed"}, {"oid": "451f4dd361d0b90312fa20cb49f6d277b9d242dc", "url": "https://github.com/OpenNMS/opennms/commit/451f4dd361d0b90312fa20cb49f6d277b9d242dc", "message": "use OpenJDK instead", "committedDate": "2020-07-08T19:00:38Z", "type": "commit"}, {"oid": "fa9f027a5c58972a76d2d116c3eef6260c6858ce", "url": "https://github.com/OpenNMS/opennms/commit/fa9f027a5c58972a76d2d116c3eef6260c6858ce", "message": "NMS-12753: Remove encrypt-util from opennms-config\n\nIt's already available through spring application context", "committedDate": "2020-07-09T13:10:37Z", "type": "commit"}, {"oid": "95c9be595537b23a36a7a90d2d8100972ee82316", "url": "https://github.com/OpenNMS/opennms/commit/95c9be595537b23a36a7a90d2d8100972ee82316", "message": "NMS-12753: Remove persisting of key in DB, move to SCV", "committedDate": "2020-07-13T20:28:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1NTc1OA==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r456555758", "bodyText": "Would help to explain the use of the alias and key attribute here.", "author": "j-white", "createdAt": "2020-07-17T16:45:17Z", "path": "core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.core.config.api;\n+\n+public interface TextEncryptor {\n+\n+    String encrypt(String alias, String key, String text);", "originalCommit": "95c9be595537b23a36a7a90d2d8100972ee82316", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56e704cdfddfe17c711476aa30a75bdb1630cdf9", "chunk": "diff --git a/core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java b/core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java\nindex 0f71eda11c5..21537385f96 100644\n--- a/core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java\n+++ b/core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java\n\n@@ -28,10 +28,21 @@\n \n package org.opennms.core.config.api;\n \n+/**\n+ * For a given context/alias, encrypt/decrypt text with specified encryptionKey.\n+ * encryptionKey will be digested to generate a password. This password is used to encrypt/decrypt text.\n+ * (encryptionKey,password) is stored in SCV as Credentials with the specified alias.\n+ */\n public interface TextEncryptor {\n \n-    String encrypt(String alias, String key, String text);\n+    /**\n+     * Encrypt text with encryptionKey\n+     */\n+    String encrypt(String alias, String encryptionKey, String text);\n \n-    String decrypt(String alias, String key, String encrypted);\n+    /**\n+     * Decrypt encrypted with encryptionKey.\n+     */\n+    String decrypt(String alias, String encryptionKey, String encrypted);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1NjQ4OA==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r456556488", "bodyText": "I'd opt to re-throw here instead. If someone is calling encrypt I wouldn't expect it to silently fail and return a un-encrypted payload back.", "author": "j-white", "createdAt": "2020-07-17T16:46:47Z", "path": "core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.core.text.encryptor;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.jasypt.util.password.StrongPasswordEncryptor;\n+import org.jasypt.util.text.AES256TextEncryptor;\n+import org.opennms.core.config.api.TextEncryptor;\n+import org.opennms.features.scv.api.Credentials;\n+import org.opennms.features.scv.api.SecureCredentialsVault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+\n+\n+public class TextEncryptorImpl implements TextEncryptor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TextEncryptorImpl.class);\n+    private final SecureCredentialsVault secureCredentialsVault;\n+    private Map<String, Credentials> passwordsByAlias = new ConcurrentHashMap<>();\n+\n+    public TextEncryptorImpl(SecureCredentialsVault secureCredentialsVault) {\n+        this.secureCredentialsVault = secureCredentialsVault;\n+    }\n+\n+    @Override\n+    public String encrypt(String alias, String key, String text) {\n+        try {\n+            final AES256TextEncryptor textEncryptor = new AES256TextEncryptor();\n+            String password = getPasswordFromCredentials(alias, key);\n+            if (!Strings.isNullOrEmpty(password)) {\n+                textEncryptor.setPassword(password);\n+                return textEncryptor.encrypt(text);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Exception while encrypting {} with key {}\", text, key, e);", "originalCommit": "95c9be595537b23a36a7a90d2d8100972ee82316", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56e704cdfddfe17c711476aa30a75bdb1630cdf9", "chunk": "diff --git a/core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java b/core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java\nindex d09ae9348b5..45b9e344579 100644\n--- a/core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java\n+++ b/core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java\n\n@@ -39,8 +39,6 @@ import org.opennms.features.scv.api.SecureCredentialsVault;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Strings;\n-\n \n public class TextEncryptorImpl implements TextEncryptor {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1NjkxMw==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r456556913", "bodyText": "Similarly here.", "author": "j-white", "createdAt": "2020-07-17T16:47:36Z", "path": "core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.core.text.encryptor;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.jasypt.util.password.StrongPasswordEncryptor;\n+import org.jasypt.util.text.AES256TextEncryptor;\n+import org.opennms.core.config.api.TextEncryptor;\n+import org.opennms.features.scv.api.Credentials;\n+import org.opennms.features.scv.api.SecureCredentialsVault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+\n+\n+public class TextEncryptorImpl implements TextEncryptor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TextEncryptorImpl.class);\n+    private final SecureCredentialsVault secureCredentialsVault;\n+    private Map<String, Credentials> passwordsByAlias = new ConcurrentHashMap<>();\n+\n+    public TextEncryptorImpl(SecureCredentialsVault secureCredentialsVault) {\n+        this.secureCredentialsVault = secureCredentialsVault;\n+    }\n+\n+    @Override\n+    public String encrypt(String alias, String key, String text) {\n+        try {\n+            final AES256TextEncryptor textEncryptor = new AES256TextEncryptor();\n+            String password = getPasswordFromCredentials(alias, key);\n+            if (!Strings.isNullOrEmpty(password)) {\n+                textEncryptor.setPassword(password);\n+                return textEncryptor.encrypt(text);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Exception while encrypting {} with key {}\", text, key, e);\n+        }\n+        return text;\n+\n+    }\n+\n+    @Override\n+    public String decrypt(String alias, String key, String encrypted) {\n+        final AES256TextEncryptor textEncryptor = new AES256TextEncryptor();\n+        try {\n+            String password = getPasswordFromCredentials(alias, key);\n+            if (!Strings.isNullOrEmpty(password)) {\n+                textEncryptor.setPassword(password);\n+                return textEncryptor.decrypt(encrypted);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Exception while decrypting {} with key {}\", encrypted, key, e);", "originalCommit": "95c9be595537b23a36a7a90d2d8100972ee82316", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56e704cdfddfe17c711476aa30a75bdb1630cdf9", "chunk": "diff --git a/core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java b/core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java\nindex d09ae9348b5..45b9e344579 100644\n--- a/core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java\n+++ b/core/encrypt-util/src/main/java/org/opennms/core/text/encryptor/TextEncryptorImpl.java\n\n@@ -39,8 +39,6 @@ import org.opennms.features.scv.api.SecureCredentialsVault;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Strings;\n-\n \n public class TextEncryptorImpl implements TextEncryptor {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1Nzg5NA==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r456557894", "bodyText": "What's the purpose of this override? This logic should probably be in the application context instead.", "author": "j-white", "createdAt": "2020-07-17T16:49:35Z", "path": "features/scv/jceks-impl/src/main/java/org/opennms/features/scv/jceks/JCEKSSecureCredentialsVault.java", "diffHunk": "@@ -86,11 +87,15 @@ public JCEKSSecureCredentialsVault(String keystoreFile, String password, byte[]\n     }\n \n     public JCEKSSecureCredentialsVault(String keystoreFile, String password, byte[] salt, int iterationCount, int keyLength) {\n-        m_password = Objects.requireNonNull(password).toCharArray();\n         m_salt = Objects.requireNonNull(salt);\n         m_iterationCount = iterationCount;\n         m_keyLength = keyLength;\n         m_keystoreFile = new File(keystoreFile);\n+        String keyFromProperties = System.getProperty(SCV_KEY_PROPERTY);", "originalCommit": "95c9be595537b23a36a7a90d2d8100972ee82316", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56e704cdfddfe17c711476aa30a75bdb1630cdf9", "chunk": "diff --git a/features/scv/jceks-impl/src/main/java/org/opennms/features/scv/jceks/JCEKSSecureCredentialsVault.java b/features/scv/jceks-impl/src/main/java/org/opennms/features/scv/jceks/JCEKSSecureCredentialsVault.java\nindex 0f841069410..4ef2fff7a9d 100644\n--- a/features/scv/jceks-impl/src/main/java/org/opennms/features/scv/jceks/JCEKSSecureCredentialsVault.java\n+++ b/features/scv/jceks-impl/src/main/java/org/opennms/features/scv/jceks/JCEKSSecureCredentialsVault.java\n\n@@ -87,15 +87,11 @@ public class JCEKSSecureCredentialsVault implements SecureCredentialsVault {\n     }\n \n     public JCEKSSecureCredentialsVault(String keystoreFile, String password, byte[] salt, int iterationCount, int keyLength) {\n+        m_password = Objects.requireNonNull(password).toCharArray();\n         m_salt = Objects.requireNonNull(salt);\n         m_iterationCount = iterationCount;\n         m_keyLength = keyLength;\n         m_keystoreFile = new File(keystoreFile);\n-        String keyFromProperties = System.getProperty(SCV_KEY_PROPERTY);\n-        if (keyFromProperties != null) {\n-            password = keyFromProperties;\n-        }\n-        m_password = password.toCharArray();\n         try {\n             m_keystore = KeyStore.getInstance(\"JCEKS\");\n             if (!m_keystoreFile.isFile()) {\n"}}, {"oid": "56e704cdfddfe17c711476aa30a75bdb1630cdf9", "url": "https://github.com/OpenNMS/opennms/commit/56e704cdfddfe17c711476aa30a75bdb1630cdf9", "message": "NMS-12753: Handle review comments", "committedDate": "2020-07-17T22:07:25Z", "type": "commit"}, {"oid": "8531172fb01152bb4614b497b59625cc903ccef3", "url": "https://github.com/OpenNMS/opennms/commit/8531172fb01152bb4614b497b59625cc903ccef3", "message": "NMS-12753: Disable compAttribList check as it seems different across JDKs", "committedDate": "2020-07-20T01:28:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NDk2OA==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r459694968", "bodyText": "Nit: We can skip the catch statement all together - the method already  throws IOException and the test will fail if thrown.", "author": "j-white", "createdAt": "2020-07-23T20:00:54Z", "path": "opennms-config/src/test/java/org/opennms/netmgt/config/SnmpEncryptionIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.config;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.opennms.netmgt.config.SnmpPeerFactory.ENCRYPTION_ENABLED;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.Arrays;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.opennms.core.config.api.TextEncryptor;\n+import org.opennms.core.text.encryptor.TextEncryptorImpl;\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.core.xml.JaxbUtils;\n+import org.opennms.features.scv.api.SecureCredentialsVault;\n+import org.opennms.features.scv.jceks.JCEKSSecureCredentialsVault;\n+import org.opennms.netmgt.config.snmp.Definition;\n+import org.opennms.netmgt.config.snmp.SnmpConfig;\n+import org.opennms.netmgt.snmp.SnmpAgentConfig;\n+import org.springframework.core.io.InputStreamResource;\n+\n+public class SnmpEncryptionIT {\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    static {\n+        System.setProperty(ENCRYPTION_ENABLED, \"true\");\n+    }\n+\n+    private SnmpPeerFactory snmpPeerFactory;\n+\n+    @Test\n+    public void testEncryption() throws IOException {\n+        URL url = getClass().getResource(\"/snmp-config.xml\");\n+        try (InputStream configStream = url.openStream()) {\n+            snmpPeerFactory = new SnmpPeerFactory(new InputStreamResource(configStream));\n+            snmpPeerFactory.setEncryptionKey(\"OpenNMS-SNMP-Encryption-Key\");\n+            SnmpPeerFactory.setFile(new File(url.getFile()));\n+            // Check if encryption is enabled\n+            assertTrue(snmpPeerFactory.getEncryptionEnabled());\n+            File keystoreFile = new File(tempFolder.getRoot(), \"scv.jce\");\n+            SecureCredentialsVault scv = new JCEKSSecureCredentialsVault(keystoreFile.getAbsolutePath(), \"notRealPassword\");\n+            TextEncryptor textEncryptor = new TextEncryptorImpl(scv);\n+            snmpPeerFactory.setTextEncryptor(textEncryptor);\n+            // Check that it is loaded from test resource.\n+            assertEquals(snmpPeerFactory.getSnmpConfig().getReadCommunity(), \"minion\");\n+            assertTrue(snmpPeerFactory.getSnmpConfig().getDefinitions().isEmpty());\n+            Definition definition = new Definition();\n+            definition.setSpecifics(Arrays.asList(\"127.0.0.1\"));\n+            definition.setReadCommunity(\"Sentinel\");\n+            definition.setWriteCommunity(\"Alec\");\n+            definition.setAuthPassphrase(\"OpenNMS\");\n+            definition.setPrivacyPassphrase(\"Minion\");\n+            snmpPeerFactory.saveDefinition(definition);\n+            snmpPeerFactory.saveCurrent();\n+            String configAsString = snmpPeerFactory.getSnmpConfigAsString();\n+            SnmpConfig config = JaxbUtils.unmarshal(SnmpConfig.class, configAsString);\n+            // Verify that marshalled strings are different from actual\n+            assertEquals(config.getDefinitions().size(), 1);\n+            config.getDefinitions().forEach(def -> {\n+                assertNotEquals(def.getAuthPassphrase(), \"OpenNMS\");\n+                assertNotEquals(def.getReadCommunity(), \"Sentinel\");\n+                assertNotEquals(def.getWriteCommunity(), \"Alec\");\n+            });\n+            // Getting config should always resolve to actual strings.\n+            config = snmpPeerFactory.getSnmpConfig();\n+            config.getDefinitions().forEach(def -> {\n+                assertEquals(\"OpenNMS\", def.getAuthPassphrase());\n+                assertEquals(\"Sentinel\", def.getReadCommunity());\n+                assertEquals(\"Alec\", def.getWriteCommunity());\n+            });\n+            SnmpAgentConfig agentConfig = snmpPeerFactory.getAgentConfig(InetAddressUtils.getInetAddress(\"127.0.0.1\"));\n+            assertEquals(\"OpenNMS\", agentConfig.getAuthPassPhrase());\n+            assertEquals(\"Minion\", agentConfig.getPrivPassPhrase());\n+\n+            // Test saving from SnmpEventInfo.\n+            SnmpEventInfo info = new SnmpEventInfo();\n+            info.setVersion(\"v1\");\n+            info.setReadCommunityString(\"snmp1\");\n+            info.setWriteCommunityString(\"snmp2\");\n+            info.setFirstIPAddress(\"127.0.0.2\");\n+            info.setLastIPAddress(\"127.0.0.9\");\n+            snmpPeerFactory.define(info);\n+            snmpPeerFactory.saveCurrent();\n+            agentConfig = snmpPeerFactory.getAgentConfig(InetAddressUtils.getInetAddress(\"127.0.0.5\"));\n+            assertEquals(\"snmp1\", agentConfig.getReadCommunity());\n+            assertEquals(\"snmp2\", agentConfig.getWriteCommunity());\n+        } catch (IOException e) {\n+            fail(e.getMessage());", "originalCommit": "8531172fb01152bb4614b497b59625cc903ccef3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49c32636b4bea0c6c0c96312cc223a5031c5e83c", "chunk": "diff --git a/opennms-config/src/test/java/org/opennms/netmgt/config/SnmpEncryptionIT.java b/opennms-config/src/test/java/org/opennms/netmgt/config/SnmpEncryptionIT.java\nindex d9ad7cace60..a84048efb96 100644\n--- a/opennms-config/src/test/java/org/opennms/netmgt/config/SnmpEncryptionIT.java\n+++ b/opennms-config/src/test/java/org/opennms/netmgt/config/SnmpEncryptionIT.java\n\n@@ -31,7 +31,6 @@ package org.opennms.netmgt.config;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n import static org.opennms.netmgt.config.SnmpPeerFactory.ENCRYPTION_ENABLED;\n \n import java.io.File;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIwNjk1NQ==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r460206955", "bodyText": "No Spring context is used here.", "author": "j-white", "createdAt": "2020-07-24T18:01:14Z", "path": "core/encrypt-util/src/test/java/org/opennms/core/text/encryptor/TextEncryptorTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.core.text.encryptor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.File;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.opennms.core.config.api.TextEncryptor;\n+import org.opennms.features.scv.api.Credentials;\n+import org.opennms.features.scv.api.SecureCredentialsVault;\n+import org.opennms.features.scv.jceks.JCEKSSecureCredentialsVault;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+\n+public class TextEncryptorTest {\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @Autowired", "originalCommit": "8531172fb01152bb4614b497b59625cc903ccef3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49c32636b4bea0c6c0c96312cc223a5031c5e83c", "chunk": "diff --git a/core/encrypt-util/src/test/java/org/opennms/core/text/encryptor/TextEncryptorTest.java b/core/encrypt-util/src/test/java/org/opennms/core/text/encryptor/TextEncryptorTest.java\nindex 8b58195d02c..721b3bcd348 100644\n--- a/core/encrypt-util/src/test/java/org/opennms/core/text/encryptor/TextEncryptorTest.java\n+++ b/core/encrypt-util/src/test/java/org/opennms/core/text/encryptor/TextEncryptorTest.java\n\n@@ -41,7 +41,6 @@ import org.opennms.core.config.api.TextEncryptor;\n import org.opennms.features.scv.api.Credentials;\n import org.opennms.features.scv.api.SecureCredentialsVault;\n import org.opennms.features.scv.jceks.JCEKSSecureCredentialsVault;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n \n public class TextEncryptorTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMDEzMw==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r460210133", "bodyText": "I find the use of the encryptionKey here a little confusing.\nWe hash the key with some salt using StrongPasswordEncryptor to generate a unique password - this password is stored in SCV and we subsequently use that to encrypt/decrypt the payload.\nIf we call decrypt after encrypt with a given key, the key is ignored (since the actual password is retrieved from SCV).\nIf we call encrypt with a different key, but the same alias, then original key is still used.\nGiven this, it seems like the key can be dropped completed and we can just generate a random password for a given alias and store/retrieve this in SCV.", "author": "j-white", "createdAt": "2020-07-24T18:07:58Z", "path": "core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.core.config.api;\n+\n+/**\n+ * For a given context/alias, encrypt/decrypt text with specified encryptionKey.", "originalCommit": "8531172fb01152bb4614b497b59625cc903ccef3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzNTEzNA==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r460235134", "bodyText": "Yeah, initially I was saving the key,value in Credentials attributes. Since that's moved to Credentials and there is no user input for the key guess that can be dropped.", "author": "cgorantla", "createdAt": "2020-07-24T19:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMDEzMw=="}], "type": "inlineReview", "revised_code": {"commit": "49c32636b4bea0c6c0c96312cc223a5031c5e83c", "chunk": "diff --git a/core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java b/core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java\nindex 21537385f96..66e084f8c5c 100644\n--- a/core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java\n+++ b/core/api/src/main/java/org/opennms/core/config/api/TextEncryptor.java\n\n@@ -29,20 +29,19 @@\n package org.opennms.core.config.api;\n \n /**\n- * For a given context/alias, encrypt/decrypt text with specified encryptionKey.\n- * encryptionKey will be digested to generate a password. This password is used to encrypt/decrypt text.\n- * (encryptionKey,password) is stored in SCV as Credentials with the specified alias.\n+ * For a given context, encrypt/decrypt text.\n+ * (alias,password) is stored in SCV as Credentials with the specified alias.\n  */\n public interface TextEncryptor {\n \n     /**\n-     * Encrypt text with encryptionKey\n+     * Encrypt text for the given context\n      */\n-    String encrypt(String alias, String encryptionKey, String text);\n+    String encrypt(String alias, String text);\n \n     /**\n-     * Decrypt encrypted with encryptionKey.\n+     * Decrypt encrypted for the given context\n      */\n-    String decrypt(String alias, String encryptionKey, String encrypted);\n+    String decrypt(String alias, String encrypted);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyMTEwMQ==", "url": "https://github.com/OpenNMS/opennms/pull/3054#discussion_r460221101", "bodyText": "this.m_", "author": "j-white", "createdAt": "2020-07-24T18:31:07Z", "path": "opennms-config-jaxb/src/main/java/org/opennms/netmgt/config/snmp/Configuration.java", "diffHunk": "@@ -763,6 +767,15 @@ public void setTTL(Long ttl) {\n         m_ttl = ttl;\n     }\n \n+\n+    public Boolean getEncrypted() {\n+        return m_encrypted != null ? m_encrypted : false;\n+    }\n+\n+    public void setEncrypted(Boolean encrypted) {\n+        this.m_encrypted = encrypted;", "originalCommit": "8531172fb01152bb4614b497b59625cc903ccef3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49c32636b4bea0c6c0c96312cc223a5031c5e83c", "chunk": "diff --git a/opennms-config-jaxb/src/main/java/org/opennms/netmgt/config/snmp/Configuration.java b/opennms-config-jaxb/src/main/java/org/opennms/netmgt/config/snmp/Configuration.java\nindex f1d8f6659c4..79723edabf9 100644\n--- a/opennms-config-jaxb/src/main/java/org/opennms/netmgt/config/snmp/Configuration.java\n+++ b/opennms-config-jaxb/src/main/java/org/opennms/netmgt/config/snmp/Configuration.java\n\n@@ -773,7 +773,7 @@ public class Configuration implements Serializable {\n     }\n \n     public void setEncrypted(Boolean encrypted) {\n-        this.m_encrypted = encrypted;\n+        m_encrypted = encrypted;\n     }\n \n     @Override\n"}}, {"oid": "49c32636b4bea0c6c0c96312cc223a5031c5e83c", "url": "https://github.com/OpenNMS/opennms/commit/49c32636b4bea0c6c0c96312cc223a5031c5e83c", "message": "NMS-12753: Handle review comments", "committedDate": "2020-08-04T13:43:56Z", "type": "commit"}, {"oid": "7e363e24c764457b2a8732c7ad2902b9e3bcbc20", "url": "https://github.com/OpenNMS/opennms/commit/7e363e24c764457b2a8732c7ad2902b9e3bcbc20", "message": "NMS-12753: Address doc review comments [ci skip]", "committedDate": "2020-08-04T18:46:53Z", "type": "commit"}]}