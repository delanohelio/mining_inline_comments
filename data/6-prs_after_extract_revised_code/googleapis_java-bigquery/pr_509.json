{"pr_number": 509, "pr_title": "feat: sql fast path impl", "pr_createdAt": "2020-07-04T00:42:25Z", "pr_url": "https://github.com/googleapis/java-bigquery/pull/509", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzIzMg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793232", "bodyText": "Add a test with max results set to small value to force getqueryresults for the subsequent pages.", "author": "epavan123", "createdAt": "2020-07-04T18:04:09Z", "path": "google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java", "diffHunk": "@@ -1380,6 +1380,35 @@ public void testQuery() throws InterruptedException {\n     assertNotNull(statistics.getQueryPlan());\n   }\n \n+  @Test\n+  public void testFastQuery() throws InterruptedException {", "originalCommit": "4804d50c9914f7519166b37892064d7abc95a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMzkxNA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r450303914", "bodyText": "maxResults is not in QueryJobConfiguration -- please see detailed comment in my doc.", "author": "stephaniewang526", "createdAt": "2020-07-06T15:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "e73936b95fbbe42a85b65caee7de3f64ea0fcf08", "chunk": "diff --git a/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java b/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java\nindex 1e3424b..921b74b 100644\n--- a/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java\n+++ b/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java\n\n@@ -1409,6 +1422,44 @@ public class ITBigQueryTest {\n     assertEquals(2, rowCount);\n   }\n \n+  @Test\n+  public void testFastQueryMultiPages() throws InterruptedException {\n+    String query =\n+        \"SELECT date, state_name, confirmed_cases FROM `bigquery-public-data.covid19_nyt.us_counties`\";\n+    QueryJobConfiguration config =\n+        QueryJobConfiguration.newBuilder(query).setDefaultDataset(DatasetId.of(DATASET)).build();\n+    TableResult result = bigquery.query(config);\n+    assertNotNull(result.getNextPage());\n+    assertNotNull(result.getNextPageToken());\n+    assertTrue(result.hasNextPage());\n+  }\n+\n+  @Test\n+  public void testFastDMLQuery() throws InterruptedException {\n+    String tableName = TABLE_ID_FASTQUERY.getTable();\n+    String dmlQuery =\n+        String.format(\"UPDATE %s.%s SET StringField = 'hello' WHERE TRUE\", DATASET, tableName);\n+    QueryJobConfiguration config =\n+        QueryJobConfiguration.newBuilder(dmlQuery).setDefaultDataset(DatasetId.of(DATASET)).build();\n+    TableResult result = bigquery.query(config);\n+    assertEquals(TABLE_SCHEMA, result.getSchema());\n+    assertEquals(2, result.getTotalRows());\n+  }\n+\n+  @Test\n+  public void testFastDDLQuery() throws InterruptedException {\n+    String tableName = \"test_table_fast_query_ddl\";\n+    String ddlQuery =\n+        String.format(\"CREATE OR REPLACE TABLE  %s.%s ( StringField STRING )\", DATASET, tableName);\n+    QueryJobConfiguration config =\n+        QueryJobConfiguration.newBuilder(ddlQuery).setDefaultDataset(DatasetId.of(DATASET)).build();\n+    TableResult result = bigquery.query(config);\n+    assertEquals(\n+        Schema.of(Field.newBuilder(\"StringField\", StandardSQLTypeName.STRING).build()),\n+        result.getSchema());\n+    assertEquals(0, result.getTotalRows());\n+  }\n+\n   @Test\n   public void testScriptStatistics() throws InterruptedException {\n     String script =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzQwOA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793408", "bodyText": "There is another optimization possible here. To only fetch the remaining results and not the whole thing from the beginning. Doing this in a separate change after this one is submitted is fine.", "author": "epavan123", "createdAt": "2020-07-04T18:06:42Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    try {\n+      com.google.api.services.bigquery.model.QueryResponse queryResponse =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+\n+      // Return result if there is only 1 page, otherwise use jobId returned from backend to return\n+      // full results\n+      if (queryResponse.getPageToken() == null) {\n+        return new TableResult(\n+            Schema.fromPb(queryResponse.getSchema()),\n+            queryResponse.getTotalRows().longValue(),\n+            new PageImpl<>(\n+                new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+                null,\n+                transformTableData(queryResponse.getRows())));\n+      } else {\n+        String jobId = queryResponse.getJobReference().getJobId();\n+        Job job = getJob(JobId.of(jobId));\n+        job.waitFor();\n+        return job.getQueryResults();", "originalCommit": "4804d50c9914f7519166b37892064d7abc95a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODczMg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928732", "bodyText": "Okay -- I will make optimization in the next PR.", "author": "stephaniewang526", "createdAt": "2020-07-05T23:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4MTY2NQ==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r474881665", "bodyText": "Done in 7c2ae39", "author": "stephaniewang526", "createdAt": "2020-08-21T19:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "e73936b95fbbe42a85b65caee7de3f64ea0fcf08", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex f37b724..84d46c8 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1187,8 +1187,9 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n   private TableResult fastQuery(\n       final String projectId, final QueryRequest content, JobOption... options)\n       throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n     try {\n-      com.google.api.services.bigquery.model.QueryResponse queryResponse =\n+      results =\n           runWithRetries(\n               new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n                 @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzU0Mw==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793543", "bodyText": "Nit: Can be written without the branches...\nreturn ... && ... && ... :", "author": "epavan123", "createdAt": "2020-07-04T18:08:52Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null", "originalCommit": "4804d50c9914f7519166b37892064d7abc95a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMDgwNw==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r450300807", "bodyText": "done", "author": "stephaniewang526", "createdAt": "2020-07-06T15:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\nindex 3611b91..d781c78 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n\n@@ -30,7 +30,7 @@ final class QueryRequestInfo {\n   }\n \n   boolean isFastQuerySupported() {\n-    if (config.getClustering() == null\n+    return config.getClustering() == null\n         && config.getCreateDisposition() == null\n         && config.getDestinationEncryptionConfiguration() == null\n         && config.getDestinationTable() == null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzcwMg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793702", "bodyText": "If you have a test project, I can enable this on it for you to test. Submitting the change in this form has a bit of issue.\nPlease see my comment above about adding a flag", "author": "epavan123", "createdAt": "2020-07-04T18:10:34Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());", "originalCommit": "4804d50c9914f7519166b37892064d7abc95a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODQxNA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928414", "bodyText": "please enable testing on projectID grass-clump-479", "author": "stephaniewang526", "createdAt": "2020-07-05T23:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\nindex 3611b91..d781c78 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n\n@@ -30,7 +30,7 @@ final class QueryRequestInfo {\n   }\n \n   boolean isFastQuerySupported() {\n-    if (config.getClustering() == null\n+    return config.getClustering() == null\n         && config.getCreateDisposition() == null\n         && config.getDestinationEncryptionConfiguration() == null\n         && config.getDestinationTable() == null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5Mzc5MQ==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793791", "bodyText": "Is it possible to add a command line flag that guards this code. Leave it disabled until the backend request_id flag is rolled out. I will roll it out next week, but if we have a flag you don't have to be blocked on that rollout. It can be disabled at first and then enabled with a simple change later.", "author": "epavan123", "createdAt": "2020-07-04T18:11:54Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {", "originalCommit": "4804d50c9914f7519166b37892064d7abc95a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5ODg1NQ==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r450298855", "bodyText": "I am unaware of a way to do this -- it might make more sense for us to roll out client library changes after backend changes are made.", "author": "stephaniewang526", "createdAt": "2020-07-06T15:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5Mzc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e73936b95fbbe42a85b65caee7de3f64ea0fcf08", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex f37b724..84d46c8 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1187,8 +1187,9 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n   private TableResult fastQuery(\n       final String projectId, final QueryRequest content, JobOption... options)\n       throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n     try {\n-      com.google.api.services.bigquery.model.QueryResponse queryResponse =\n+      results =\n           runWithRetries(\n               new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n                 @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDA1NQ==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794055", "bodyText": "There are connection parameters. Are those not available inside config yet?", "author": "epavan123", "createdAt": "2020-07-04T18:15:36Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());\n+    JobConfiguration jobConfiguration = config.toPb();\n+    JobConfigurationQuery configurationQuery = jobConfiguration.getQuery();\n+    if (configurationQuery.getQueryParameters() != null) {\n+      query.setQueryParameters(configurationQuery.getQueryParameters());\n+    }\n+    if (config.getJobTimeoutMs() != null) {\n+      query.setTimeoutMs(config.getJobTimeoutMs());\n+    }\n+    if (config.useLegacySql() != null) {\n+      query.setUseLegacySql(config.useLegacySql());\n+    }\n+    if (config.useQueryCache() != null) {\n+      query.setUseQueryCache(config.useQueryCache());\n+    }\n+    return query;\n+  }", "originalCommit": "4804d50c9914f7519166b37892064d7abc95a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODYwNg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928606", "bodyText": "It is here  in the first statement https://github.com/googleapis/java-bigquery/pull/509/files#diff-aa6846149b0117069c7bd29c09fb535cR54", "author": "stephaniewang526", "createdAt": "2020-07-05T23:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\nindex 3611b91..d781c78 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n\n@@ -30,7 +30,7 @@ final class QueryRequestInfo {\n   }\n \n   boolean isFastQuerySupported() {\n-    if (config.getClustering() == null\n+    return config.getClustering() == null\n         && config.getCreateDisposition() == null\n         && config.getDestinationEncryptionConfiguration() == null\n         && config.getDestinationTable() == null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDEwOQ==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794109", "bodyText": "How about script options? Are they not available in config yet?", "author": "epavan123", "createdAt": "2020-07-04T18:16:11Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null", "originalCommit": "4804d50c9914f7519166b37892064d7abc95a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODI3OA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928278", "bodyText": "we need to add support for scriptOptions in QueryJobConfiguration", "author": "stephaniewang526", "createdAt": "2020-07-05T23:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3NjA0OA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r459576048", "bodyText": "raised internal issue - b/161984328", "author": "stephaniewang526", "createdAt": "2020-07-23T16:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\nindex 3611b91..d781c78 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n\n@@ -30,7 +30,7 @@ final class QueryRequestInfo {\n   }\n \n   boolean isFastQuerySupported() {\n-    if (config.getClustering() == null\n+    return config.getClustering() == null\n         && config.getCreateDisposition() == null\n         && config.getDestinationEncryptionConfiguration() == null\n         && config.getDestinationTable() == null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDMxOA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794318", "bodyText": "The job timeout in job configuration and timeout on query serve different purposes. jobs.query doesn't have support for the former (and the backend doesn't honor it either). There is a change in progress to support it.", "author": "epavan123", "createdAt": "2020-07-04T18:19:23Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());\n+    JobConfiguration jobConfiguration = config.toPb();\n+    JobConfigurationQuery configurationQuery = jobConfiguration.getQuery();\n+    if (configurationQuery.getQueryParameters() != null) {\n+      query.setQueryParameters(configurationQuery.getQueryParameters());\n+    }\n+    if (config.getJobTimeoutMs() != null) {\n+      query.setTimeoutMs(config.getJobTimeoutMs());", "originalCommit": "4804d50c9914f7519166b37892064d7abc95a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODQ2OQ==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928469", "bodyText": "OK - this will be removed.", "author": "stephaniewang526", "createdAt": "2020-07-05T23:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\nindex 3611b91..d781c78 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java\n\n@@ -30,7 +30,7 @@ final class QueryRequestInfo {\n   }\n \n   boolean isFastQuerySupported() {\n-    if (config.getClustering() == null\n+    return config.getClustering() == null\n         && config.getCreateDisposition() == null\n         && config.getDestinationEncryptionConfiguration() == null\n         && config.getDestinationTable() == null\n"}}, {"oid": "f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "url": "https://github.com/googleapis/java-bigquery/commit/f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "message": "feat: sql fast path impl\n\nadd QueryJobConfig to QueryRequest logic\n\nhigh level mode\n\nreset private methods\n\nrefactor: modified code\n\nupdate logic\nadd test\n\nrefactor: update code and test case\n\nadd integration tests\n\ncode format\n\nadd clir ignore and remove pom file\n\nfeat: add more assert\n\nnit update", "committedDate": "2020-07-09T15:46:30Z", "type": "commit"}, {"oid": "e73936b95fbbe42a85b65caee7de3f64ea0fcf08", "url": "https://github.com/googleapis/java-bigquery/commit/e73936b95fbbe42a85b65caee7de3f64ea0fcf08", "message": "add logic for DML and DDL queries\nenable requestId\nadd integration tests for fast path multipages query, DML, and DDL queries\n\nfix requestId logic\n\nupdate QueryRequestInfo and add mock test\n\nadd mock test cases for SQL, DML, and DDL\nclean up code\n\nfix IT", "committedDate": "2020-07-09T15:46:55Z", "type": "forcePushed"}, {"oid": "d8ab960cb196313c86d065883fed7f430a904755", "url": "https://github.com/googleapis/java-bigquery/commit/d8ab960cb196313c86d065883fed7f430a904755", "message": "add logic for DML and DDL queries\nenable requestId\nadd integration tests for fast path multipages query, DML, and DDL queries\n\nfix requestId logic\n\nupdate QueryRequestInfo and add mock test\n\nadd mock test cases for SQL, DML, and DDL\nclean up code\n\nfix IT\n\nadd schema test", "committedDate": "2020-07-09T15:54:47Z", "type": "commit"}, {"oid": "d8ab960cb196313c86d065883fed7f430a904755", "url": "https://github.com/googleapis/java-bigquery/commit/d8ab960cb196313c86d065883fed7f430a904755", "message": "add logic for DML and DDL queries\nenable requestId\nadd integration tests for fast path multipages query, DML, and DDL queries\n\nfix requestId logic\n\nupdate QueryRequestInfo and add mock test\n\nadd mock test cases for SQL, DML, and DDL\nclean up code\n\nfix IT\n\nadd schema test", "committedDate": "2020-07-09T15:54:47Z", "type": "forcePushed"}, {"oid": "67e30a9b333d685115f45913d97896bd09a38ed4", "url": "https://github.com/googleapis/java-bigquery/commit/67e30a9b333d685115f45913d97896bd09a38ed4", "message": "update ITs to check table content correctness, update fastquery logic\n\nnit", "committedDate": "2020-07-10T23:09:57Z", "type": "forcePushed"}, {"oid": "780b836bc132ae62ed7dc30a18b940790c74e778", "url": "https://github.com/googleapis/java-bigquery/commit/780b836bc132ae62ed7dc30a18b940790c74e778", "message": "update ITs to check table content correctness, update fastquery logic\n\nnit\n\nnit", "committedDate": "2020-07-10T23:11:22Z", "type": "commit"}, {"oid": "780b836bc132ae62ed7dc30a18b940790c74e778", "url": "https://github.com/googleapis/java-bigquery/commit/780b836bc132ae62ed7dc30a18b940790c74e778", "message": "update ITs to check table content correctness, update fastquery logic\n\nnit\n\nnit", "committedDate": "2020-07-10T23:11:22Z", "type": "forcePushed"}, {"oid": "71264377da994adc15ee3c15b03a8cf974885b28", "url": "https://github.com/googleapis/java-bigquery/commit/71264377da994adc15ee3c15b03a8cf974885b28", "message": "add test for bogus query", "committedDate": "2020-07-13T15:01:40Z", "type": "commit"}, {"oid": "08d6c7e7b440c550b480992a50aa5114aaa20564", "url": "https://github.com/googleapis/java-bigquery/commit/08d6c7e7b440c550b480992a50aa5114aaa20564", "message": "add check for idempotent requestId", "committedDate": "2020-07-13T16:40:01Z", "type": "commit"}, {"oid": "31a55ce92f84aeb8575a2fc65879ef512959c758", "url": "https://github.com/googleapis/java-bigquery/commit/31a55ce92f84aeb8575a2fc65879ef512959c758", "message": "update QueryRequestInfo and error handling logic", "committedDate": "2020-07-15T21:58:48Z", "type": "commit"}, {"oid": "bcecbb0e552de85c89b1c9cb88ff8d1c9d3c9175", "url": "https://github.com/googleapis/java-bigquery/commit/bcecbb0e552de85c89b1c9cb88ff8d1c9d3c9175", "message": "add mock test for query JobException", "committedDate": "2020-07-16T02:13:50Z", "type": "commit"}, {"oid": "81937fc1046593bff47f37b2c09e92825ef2f0d4", "url": "https://github.com/googleapis/java-bigquery/commit/81937fc1046593bff47f37b2c09e92825ef2f0d4", "message": "update mock test", "committedDate": "2020-07-16T17:03:50Z", "type": "commit"}, {"oid": "b62b56900435528a5fd415aec09d09e74e062752", "url": "https://github.com/googleapis/java-bigquery/commit/b62b56900435528a5fd415aec09d09e74e062752", "message": "fix unit tests, nit update", "committedDate": "2020-07-16T17:23:10Z", "type": "commit"}, {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed", "url": "https://github.com/googleapis/java-bigquery/commit/722510196f945c1acb2ca36377caa9f181dc36ed", "message": "update exception handling from JobException to BigQueryException", "committedDate": "2020-07-17T16:44:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTcyNA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r461045724", "bodyText": "Having both these fields seem undesirable. Is it possible to only have errors? null or empty list can mean no errors.", "author": "epavan123", "createdAt": "2020-07-27T17:17:53Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java", "diffHunk": "@@ -40,6 +41,7 @@\n   private static final long serialVersionUID = -5006625989225438209L;\n \n   private final BigQueryError error;", "originalCommit": "722510196f945c1acb2ca36377caa9f181dc36ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1Mjc3MA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467152770", "bodyText": "done -- removed error but I'm keeping the public method getError()", "author": "stephaniewang526", "createdAt": "2020-08-07T16:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java\nindex 413e35e..4f93c42 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java\n\n@@ -40,7 +41,6 @@ public final class BigQueryException extends BaseHttpServiceException {\n           new Error(500, null), new Error(502, null), new Error(503, null), new Error(504, null));\n   private static final long serialVersionUID = -5006625989225438209L;\n \n-  private final BigQueryError error;\n   private final List<BigQueryError> errors;\n \n   public BigQueryException(int code, String message) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjExMw==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r461046113", "bodyText": "Why this change? The old slow implementation can still return this it looks like.", "author": "epavan123", "createdAt": "2020-07-27T17:18:34Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {", "originalCommit": "722510196f945c1acb2ca36377caa9f181dc36ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNDY5Ng==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467134696", "bodyText": "done", "author": "stephaniewang526", "createdAt": "2020-08-07T16:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjExMw=="}], "type": "inlineReview", "revised_code": {"commit": "79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex feec2a1..4694115 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1173,7 +1173,7 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException {\n+      throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n \n     // If all parameters passed in configuration are supported by the query() method on the backend,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDAyMg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466550022", "bodyText": "What is this string helper used for ? Is this available to the user? If so, this trivial change could be breaking.", "author": "epavan123", "createdAt": "2020-08-06T16:52:51Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryJobConfiguration.java", "diffHunk": "@@ -851,7 +851,7 @@ ToStringHelper toStringHelper() {\n         .add(\"flattenResults\", flattenResults)\n         .add(\"priority\", priority)\n         .add(\"tableDefinitions\", tableDefinitions)\n-        .add(\"userQueryCache\", useQueryCache)", "originalCommit": "722510196f945c1acb2ca36377caa9f181dc36ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNTU1Mw==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467135553", "bodyText": "This was a typo before - I corrected it and it will not break anything.", "author": "stephaniewang526", "createdAt": "2020-08-07T16:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDAyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MTE2Ng==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466551166", "bodyText": "consider calling it queryRpc or something like that instead of fastQuery, (since this supports slow queries as well).", "author": "epavan123", "createdAt": "2020-08-06T16:54:46Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java", "diffHunk": "@@ -587,6 +589,15 @@ public GetQueryResultsResponse getQueryResults(\n     }\n   }\n \n+  @Override\n+  public QueryResponse fastQuery(String projectId, QueryRequest content) {", "originalCommit": "722510196f945c1acb2ca36377caa9f181dc36ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNjY3Mg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467136672", "bodyText": "done", "author": "stephaniewang526", "createdAt": "2020-08-07T16:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MTE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java\nindex ba591b4..ffc6753 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java\n\n@@ -590,7 +590,7 @@ public class HttpBigQueryRpc implements BigQueryRpc {\n   }\n \n   @Override\n-  public QueryResponse fastQuery(String projectId, QueryRequest content) {\n+  public QueryResponse queryRpc(String projectId, QueryRequest content) {\n     try {\n       return bigquery.jobs().query(projectId, content).execute();\n     } catch (IOException ex) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NjYwOA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466556608", "bodyText": "Flip the if condition to move this branch up and since you have a return in this branch you can remove the nesting.\nif (...) {\nline 1243 - line 1247;\nreturn result;\n}\nline 1213 - line 1235", "author": "epavan123", "createdAt": "2020-08-06T17:04:23Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // If fast query completed and has only one page in results\n+    if (results.getJobComplete() && results.getPageToken() == null) {\n+      // If there are errors, BigQueryException is thrown\n+      ImmutableList.Builder<BigQueryError> errors = ImmutableList.builder();\n+      if (results.getErrors() != null) {\n+        List<BigQueryError> bigQueryErrors =\n+            Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+        // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+        // with the case where there there is a HTTP error\n+        throw new BigQueryException(bigQueryErrors);\n+      }\n+\n+      // If there is no error, we construct TableResult\n+      TableSchema schemaPb = results.getSchema();\n+\n+      Long numRows;\n+      if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+        numRows = 0L;\n+      } else if (results.getNumDmlAffectedRows() != null) {\n+        numRows = results.getNumDmlAffectedRows();\n+      } else {\n+        numRows = results.getTotalRows().longValue();\n+      }\n+\n+      return new TableResult(\n+          schemaPb == null ? null : Schema.fromPb(schemaPb),\n+          numRows,\n+          new PageImpl<>(\n+              new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+              null,\n+              transformTableData(results.getRows())));\n+    } else {", "originalCommit": "722510196f945c1acb2ca36377caa9f181dc36ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0MjU2NA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467142564", "bodyText": "flipped but not sure about eliminating nesting.", "author": "stephaniewang526", "createdAt": "2020-08-07T16:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NjYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex feec2a1..4694115 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1173,7 +1173,7 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException {\n+      throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n \n     // If all parameters passed in configuration are supported by the query() method on the backend,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1ODI1OQ==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466558259", "bodyText": "The original query implementation does not have a waitFor().. Not sure I see a reason for having it here..", "author": "epavan123", "createdAt": "2020-08-06T17:07:22Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // If fast query completed and has only one page in results\n+    if (results.getJobComplete() && results.getPageToken() == null) {\n+      // If there are errors, BigQueryException is thrown\n+      ImmutableList.Builder<BigQueryError> errors = ImmutableList.builder();\n+      if (results.getErrors() != null) {\n+        List<BigQueryError> bigQueryErrors =\n+            Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+        // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+        // with the case where there there is a HTTP error\n+        throw new BigQueryException(bigQueryErrors);\n+      }\n+\n+      // If there is no error, we construct TableResult\n+      TableSchema schemaPb = results.getSchema();\n+\n+      Long numRows;\n+      if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+        numRows = 0L;\n+      } else if (results.getNumDmlAffectedRows() != null) {\n+        numRows = results.getNumDmlAffectedRows();\n+      } else {\n+        numRows = results.getTotalRows().longValue();\n+      }\n+\n+      return new TableResult(\n+          schemaPb == null ? null : Schema.fromPb(schemaPb),\n+          numRows,\n+          new PageImpl<>(\n+              new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+              null,\n+              transformTableData(results.getRows())));\n+    } else {\n+      // Use jobId returned from backend to return full TableResult", "originalCommit": "722510196f945c1acb2ca36377caa9f181dc36ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzOTY1MA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467139650", "bodyText": "done", "author": "stephaniewang526", "createdAt": "2020-08-07T16:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1ODI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex feec2a1..4694115 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1173,7 +1173,7 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException {\n+      throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n \n     // If all parameters passed in configuration are supported by the query() method on the backend,\n"}}, {"oid": "79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "url": "https://github.com/googleapis/java-bigquery/commit/79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "message": "update based on comments", "committedDate": "2020-08-07T16:46:53Z", "type": "commit"}, {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211", "url": "https://github.com/googleapis/java-bigquery/commit/0fcb5b6728df4ac96e0cdda6be4f41e569863211", "message": "nit", "committedDate": "2020-08-07T17:16:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTU3NQ==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467195575", "bodyText": "Consider changing this to queryRpc as well..", "author": "epavan123", "createdAt": "2020-08-07T18:12:51Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1172,78 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);", "originalCommit": "0fcb5b6728df4ac96e0cdda6be4f41e569863211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNDA1Mg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467234052", "bodyText": "done", "author": "stephaniewang526", "createdAt": "2020-08-07T19:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2495fbbee0ebd382ba9c0016b5b4c44fb58a8268", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex f15183a6..910c116a 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1179,13 +1179,13 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n     if (requestInfo.isFastQuerySupported()) {\n       String projectId = getOptions().getProjectId();\n       QueryRequest content = requestInfo.toPb();\n-      return fastQuery(projectId, content, options);\n+      return queryRpc(projectId, content, options);\n     }\n     // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n-  private TableResult fastQuery(\n+  private TableResult queryRpc(\n       final String projectId, final QueryRequest content, JobOption... options)\n       throws InterruptedException {\n     com.google.api.services.bigquery.model.QueryResponse results;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NjE4NA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467196184", "bodyText": "you don't need the else here since the last statement in the if branch is a \"return result;\"\nYou can thus eliminate that code nesting and make the fast path", "author": "epavan123", "createdAt": "2020-08-07T18:14:07Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1172,78 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // classic path\n+    if (!results.getJobComplete() || results.getPageToken() != null) {\n+      // Use jobId returned from backend to return full TableResult\n+      String jobId = results.getJobReference().getJobId();\n+      Job job = getJob(JobId.of(jobId));\n+      TableResult result = job.getQueryResults();\n+      return result;\n+    } else { // fast path", "originalCommit": "0fcb5b6728df4ac96e0cdda6be4f41e569863211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNTY4Nw==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467235687", "bodyText": "done", "author": "stephaniewang526", "createdAt": "2020-08-07T19:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NjE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "2495fbbee0ebd382ba9c0016b5b4c44fb58a8268", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex f15183a6..910c116a 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1179,13 +1179,13 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n     if (requestInfo.isFastQuerySupported()) {\n       String projectId = getOptions().getProjectId();\n       QueryRequest content = requestInfo.toPb();\n-      return fastQuery(projectId, content, options);\n+      return queryRpc(projectId, content, options);\n     }\n     // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n-  private TableResult fastQuery(\n+  private TableResult queryRpc(\n       final String projectId, final QueryRequest content, JobOption... options)\n       throws InterruptedException {\n     com.google.api.services.bigquery.model.QueryResponse results;\n"}}, {"oid": "2495fbbee0ebd382ba9c0016b5b4c44fb58a8268", "url": "https://github.com/googleapis/java-bigquery/commit/2495fbbee0ebd382ba9c0016b5b4c44fb58a8268", "message": "update based on comments", "committedDate": "2020-08-07T19:43:01Z", "type": "commit"}, {"oid": "7c2ae39296ea027dc0d7c253bdf8118088b3d5a0", "url": "https://github.com/googleapis/java-bigquery/commit/7c2ae39296ea027dc0d7c253bdf8118088b3d5a0", "message": "add maxResult support\noptimization changes", "committedDate": "2020-08-21T19:13:54Z", "type": "commit"}, {"oid": "293f3e628e60bfc520e9265f494b6e7d58411e7f", "url": "https://github.com/googleapis/java-bigquery/commit/293f3e628e60bfc520e9265f494b6e7d58411e7f", "message": "Merge branch 'master' into sql-client\n\n# Conflicts:\n#\tgoogle-cloud-bigquery/clirr-ignored-differences.xml\n#\tgoogle-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/BigQueryRpc.java\n#\tgoogle-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java", "committedDate": "2020-08-27T19:32:49Z", "type": "commit"}, {"oid": "187c86efb7383e05978b0c5cf8c28bb851baa519", "url": "https://github.com/googleapis/java-bigquery/commit/187c86efb7383e05978b0c5cf8c28bb851baa519", "message": "Merge remote-tracking branch 'upstream/master' into sql-client", "committedDate": "2020-09-03T11:59:03Z", "type": "commit"}, {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c", "url": "https://github.com/googleapis/java-bigquery/commit/2862ad8b5f690606009b364f67f6c1ced4b2e70c", "message": "update code", "committedDate": "2020-09-03T12:09:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNjczMg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483126732", "bodyText": "Is results.getRows()\nThere is special casing in the getQueryResults path here:\n\n  \n    \n      java-bigquery/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/Job.java\n    \n    \n         Line 304\n      in\n      b3f59b1\n    \n    \n    \n    \n\n        \n          \n           // If there are no rows in the result, this may have been a DDL query. \n        \n    \n  \n\n\nLooking at the change, it looks like it should work. Is there a test? I know I might have mentioned about DDL test before. Just double checking.", "author": "epavan123", "createdAt": "2020-09-03T17:00:55Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1184,9 +1225,81 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return queryRpc(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult queryRpc(\n+      final String projectId, final QueryRequest content, JobOption... options) {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    if (results.getErrors() != null) {\n+      List<BigQueryError> bigQueryErrors =\n+          Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+      // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+      // with the case where there there is a HTTP error\n+      throw new BigQueryException(bigQueryErrors);\n+    }\n+\n+    Schema schema = results.getSchema() == null ? null : Schema.fromPb(results.getSchema());\n+    Long numRows;\n+    if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+      numRows = 0L;\n+    } else if (results.getNumDmlAffectedRows() != null) {\n+      numRows = results.getNumDmlAffectedRows();\n+    } else {\n+      numRows = results.getTotalRows().longValue();\n+    }\n+\n+    if (results.getPageToken() != null) {\n+      JobId jobId = JobId.fromPb(results.getJobReference());\n+      boolean jobStatus = results.getJobComplete();\n+      String cursor = results.getPageToken();\n+      return new TableResult(\n+          schema,\n+          numRows,\n+          new PageImpl<>(\n+              // fetch next pages of results\n+              new QueryPageFetcher(\n+                  jobId, jobStatus, schema, getOptions(), cursor, optionMap(options)),\n+              cursor,\n+              // cache first page of result\n+              transformTableData(results.getRows(), schema)));\n+    }", "originalCommit": "2862ad8b5f690606009b364f67f6c1ced4b2e70c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzMzU0Mg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483133542", "bodyText": "Yes we are handling DDL differently here as well: https://github.com/googleapis/java-bigquery/pull/509/files#diff-71270aede5da05bfa317bb9a38f082e0R1270\nConfirming DDL tests were added before: integration test, retry mock test", "author": "stephaniewang526", "createdAt": "2020-09-03T17:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNjczMg=="}], "type": "inlineReview", "revised_code": {"commit": "d8f1229dda0aa4369f31946d2b9b38f45d82724e", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex 261a11bd..d279414f 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1284,20 +1274,19 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n           numRows,\n           new PageImpl<>(\n               // fetch next pages of results\n-              new QueryPageFetcher(\n-                  jobId, jobStatus, schema, getOptions(), cursor, optionMap(options)),\n+              new QueryPageFetcher(jobId, jobStatus, getOptions(), cursor, optionMap(options)),\n               cursor,\n               // cache first page of result\n-              transformTableData(results.getRows(), schema)));\n+              transformTableData(results.getRows())));\n     }\n     // only 1 page of result\n     return new TableResult(\n         schema,\n         numRows,\n         new PageImpl<>(\n-            new TableDataPageFetcher(null, schema, getOptions(), null, optionMap(options)),\n+            new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n             null,\n-            transformTableData(results.getRows(), schema)));\n+            transformTableData(results.getRows())));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0MjU4NA==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483142584", "bodyText": "Please make sure all of these branches have code coverage.", "author": "epavan123", "createdAt": "2020-09-03T17:29:20Z", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1184,9 +1225,81 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return queryRpc(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult queryRpc(\n+      final String projectId, final QueryRequest content, JobOption... options) {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    if (results.getErrors() != null) {\n+      List<BigQueryError> bigQueryErrors =\n+          Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+      // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+      // with the case where there there is a HTTP error\n+      throw new BigQueryException(bigQueryErrors);\n+    }\n+\n+    Schema schema = results.getSchema() == null ? null : Schema.fromPb(results.getSchema());\n+    Long numRows;\n+    if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {", "originalCommit": "2862ad8b5f690606009b364f67f6c1ced4b2e70c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDUyNg==", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483214526", "bodyText": "okay", "author": "stephaniewang526", "createdAt": "2020-09-03T19:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0MjU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d8f1229dda0aa4369f31946d2b9b38f45d82724e", "chunk": "diff --git a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\nindex 261a11bd..d279414f 100644\n--- a/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n+++ b/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java\n\n@@ -1284,20 +1274,19 @@ final class BigQueryImpl extends BaseService<BigQueryOptions> implements BigQuer\n           numRows,\n           new PageImpl<>(\n               // fetch next pages of results\n-              new QueryPageFetcher(\n-                  jobId, jobStatus, schema, getOptions(), cursor, optionMap(options)),\n+              new QueryPageFetcher(jobId, jobStatus, getOptions(), cursor, optionMap(options)),\n               cursor,\n               // cache first page of result\n-              transformTableData(results.getRows(), schema)));\n+              transformTableData(results.getRows())));\n     }\n     // only 1 page of result\n     return new TableResult(\n         schema,\n         numRows,\n         new PageImpl<>(\n-            new TableDataPageFetcher(null, schema, getOptions(), null, optionMap(options)),\n+            new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n             null,\n-            transformTableData(results.getRows(), schema)));\n+            transformTableData(results.getRows())));\n   }\n \n   @Override\n"}}, {"oid": "d8f1229dda0aa4369f31946d2b9b38f45d82724e", "url": "https://github.com/googleapis/java-bigquery/commit/d8f1229dda0aa4369f31946d2b9b38f45d82724e", "message": "add test coverage\n\nto address:\ngoogle-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java#L69-L71\nAdded lines #L69 - L71 were not covered by tests", "committedDate": "2020-09-03T19:43:41Z", "type": "commit"}, {"oid": "f7d73c4fa67f20caf7b992508a7e0f4209a76ae1", "url": "https://github.com/googleapis/java-bigquery/commit/f7d73c4fa67f20caf7b992508a7e0f4209a76ae1", "message": "Merge remote-tracking branch 'origin/sql-client' into sql-client", "committedDate": "2020-09-03T19:43:52Z", "type": "commit"}, {"oid": "fd9dcaebc52a405646b2db36f3db2915a94936a5", "url": "https://github.com/googleapis/java-bigquery/commit/fd9dcaebc52a405646b2db36f3db2915a94936a5", "message": "lint fix", "committedDate": "2020-09-03T20:00:26Z", "type": "commit"}, {"oid": "0cdf672244f4246d33d90831b328f888fdd7c951", "url": "https://github.com/googleapis/java-bigquery/commit/0cdf672244f4246d33d90831b328f888fdd7c951", "message": "feat: add more code cov", "committedDate": "2020-09-11T11:01:10Z", "type": "commit"}, {"oid": "27d1a635bed35b81e0cddeeb0dd06c7e3993dfdb", "url": "https://github.com/googleapis/java-bigquery/commit/27d1a635bed35b81e0cddeeb0dd06c7e3993dfdb", "message": "set method back", "committedDate": "2020-09-11T15:05:15Z", "type": "commit"}, {"oid": "23c90081593eaa4af913804f190acf626fbdf974", "url": "https://github.com/googleapis/java-bigquery/commit/23c90081593eaa4af913804f190acf626fbdf974", "message": "Merge branch 'master' into sql-client", "committedDate": "2020-09-11T15:09:53Z", "type": "commit"}, {"oid": "48397ad8b79993a499dbd472a8a80834b862c997", "url": "https://github.com/googleapis/java-bigquery/commit/48397ad8b79993a499dbd472a8a80834b862c997", "message": "feat: code cove", "committedDate": "2020-09-15T13:24:54Z", "type": "commit"}, {"oid": "e161cf91c22567fc28b35be30d1c8acea1ebd7b3", "url": "https://github.com/googleapis/java-bigquery/commit/e161cf91c22567fc28b35be30d1c8acea1ebd7b3", "message": "add codecov", "committedDate": "2020-09-16T16:29:57Z", "type": "commit"}]}