{"pr_number": 97, "pr_title": "feat: sample - run a legacy SQL query", "pr_createdAt": "2020-01-10T16:28:43Z", "pr_url": "https://github.com/googleapis/java-bigquery/pull/97", "timeline": [{"oid": "937be0292dda17531d789c1cce796edd0ccf7abd", "url": "https://github.com/googleapis/java-bigquery/commit/937be0292dda17531d789c1cce796edd0ccf7abd", "message": "feat: sample - run a legacy SQL query", "committedDate": "2020-01-10T16:28:08Z", "type": "commit"}, {"oid": "ccb573e67609630fc4baeb86a728844d6df39ba3", "url": "https://github.com/googleapis/java-bigquery/commit/ccb573e67609630fc4baeb86a728844d6df39ba3", "message": "nit: update", "committedDate": "2020-01-10T16:51:02Z", "type": "commit"}, {"oid": "969c0c5c7b7a6de06e585b8b8c6f69075840e0cb", "url": "https://github.com/googleapis/java-bigquery/commit/969c0c5c7b7a6de06e585b8b8c6f69075840e0cb", "message": "nit: update", "committedDate": "2020-01-10T16:58:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNzE2Mg==", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r365427162", "bodyText": "I think since RunLegacyQuery doesn't have any arguments, you can just leave this out.", "author": "kurtisvg", "createdAt": "2020-01-10T20:57:13Z", "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runRunLegacyQuery() {", "originalCommit": "969c0c5c7b7a6de06e585b8b8c6f69075840e0cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a69709fd05bdad6b3791b683223d0f75ce05ff25", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java b/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\nindex de6e97f..1a793ac 100644\n--- a/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\n+++ b/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\n\n@@ -21,13 +21,10 @@ import com.google.cloud.bigquery.BigQuery;\n import com.google.cloud.bigquery.BigQueryException;\n import com.google.cloud.bigquery.BigQueryOptions;\n import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n \n public class RunLegacyQuery {\n \n-  public static void runRunLegacyQuery() {\n-    runLegacyQuery();\n-  }\n-\n   public static void runLegacyQuery() {\n     try {\n       // Initialize client that will be used to send requests. This client only needs to be created\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNzQ0OQ==", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r365427449", "bodyText": "Is this actually running the query? Or is it just configuring it? Shouldn't you need to do something to send it?\nHow do you process data received from the query?", "author": "kurtisvg", "createdAt": "2020-01-10T20:58:08Z", "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runRunLegacyQuery() {\n+    runLegacyQuery();\n+  }\n+\n+  public static void runLegacyQuery() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      String query =\n+          \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n+\n+      QueryJobConfiguration queryConfig =\n+          // To use legacy SQL syntax, set useLegacySql to true.\n+          QueryJobConfiguration.newBuilder(query).setUseLegacySql(true).build();", "originalCommit": "969c0c5c7b7a6de06e585b8b8c6f69075840e0cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a69709fd05bdad6b3791b683223d0f75ce05ff25", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java b/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\nindex de6e97f..1a793ac 100644\n--- a/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\n+++ b/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\n\n@@ -21,13 +21,10 @@ import com.google.cloud.bigquery.BigQuery;\n import com.google.cloud.bigquery.BigQueryException;\n import com.google.cloud.bigquery.BigQueryOptions;\n import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n \n public class RunLegacyQuery {\n \n-  public static void runRunLegacyQuery() {\n-    runLegacyQuery();\n-  }\n-\n   public static void runLegacyQuery() {\n     try {\n       // Initialize client that will be used to send requests. This client only needs to be created\n"}}, {"oid": "a69709fd05bdad6b3791b683223d0f75ce05ff25", "url": "https://github.com/googleapis/java-bigquery/commit/a69709fd05bdad6b3791b683223d0f75ce05ff25", "message": "update base on comments", "committedDate": "2020-01-13T21:01:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0ODAwMg==", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r366148002", "bodyText": "nit: I would probably put this comment above the query =  line, since that's the point at which you want to use legacy SQL syntax", "author": "kurtisvg", "createdAt": "2020-01-14T04:29:11Z", "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runLegacyQuery() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      String query =\n+          \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n+\n+      QueryJobConfiguration queryConfig =\n+          // To use legacy SQL syntax, set useLegacySql to true.", "originalCommit": "a69709fd05bdad6b3791b683223d0f75ce05ff25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebd1b07b2d8527017f66f5082ec7d732f1b1932d", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java b/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\nindex 1a793ac..7477722 100644\n--- a/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\n+++ b/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\n\n@@ -31,20 +31,17 @@ public class RunLegacyQuery {\n       // once, and can be reused for multiple requests.\n       BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n \n+      // To use legacy SQL syntax, set useLegacySql to true.\n       String query =\n           \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n-\n       QueryJobConfiguration queryConfig =\n-          // To use legacy SQL syntax, set useLegacySql to true.\n           QueryJobConfiguration.newBuilder(query).setUseLegacySql(true).build();\n \n       // Execute the query.\n       TableResult result = bigquery.query(queryConfig);\n \n       // Print the results.\n-      result\n-          .iterateAll()\n-          .forEach(row -> row.forEach(val -> System.out.println(val.getStringValue())));\n+      result.iterateAll().forEach(rows -> rows.forEach(row -> System.out.println(row.getValue())));\n \n       System.out.println(\"Legacy query ran successfully\");\n     } catch (BigQueryException | InterruptedException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0OTM5NA==", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r366149394", "bodyText": "Better, but this will just print out a bunch of random values on separate lines. Can we preserve the rows together?\nSystem.out.println(\"Results\")\nfor (FieldValueList row : result.iterateAll()) {\n  row.forEach(val -> System.print(val.getStringValue() + \" \")\n  System.out.println();\n}", "author": "kurtisvg", "createdAt": "2020-01-14T04:36:48Z", "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runLegacyQuery() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      String query =\n+          \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n+\n+      QueryJobConfiguration queryConfig =\n+          // To use legacy SQL syntax, set useLegacySql to true.\n+          QueryJobConfiguration.newBuilder(query).setUseLegacySql(true).build();\n+\n+      // Execute the query.\n+      TableResult result = bigquery.query(queryConfig);\n+\n+      // Print the results.\n+      result\n+          .iterateAll()\n+          .forEach(row -> row.forEach(val -> System.out.println(val.getStringValue())));", "originalCommit": "a69709fd05bdad6b3791b683223d0f75ce05ff25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNzYzNA==", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r366427634", "bodyText": "The naming was confusing - I will change that.\nThis now prints out each corpus name and looks like this:\nsonnets\nvarious\n1kinghenryvi\nTo preserve the rows, the printout would look like this:\nFieldValue{attribute=PRIMITIVE, value=sonnets}\nFieldValue{attribute=PRIMITIVE, value=various}\nFieldValue{attribute=PRIMITIVE, value=1kinghenryvi}\nI think it's better if I just print out the value.", "author": "stephaniewang526", "createdAt": "2020-01-14T16:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0OTM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ebd1b07b2d8527017f66f5082ec7d732f1b1932d", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java b/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\nindex 1a793ac..7477722 100644\n--- a/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\n+++ b/samples/src/main/java/com/example/bigquery/RunLegacyQuery.java\n\n@@ -31,20 +31,17 @@ public class RunLegacyQuery {\n       // once, and can be reused for multiple requests.\n       BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n \n+      // To use legacy SQL syntax, set useLegacySql to true.\n       String query =\n           \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n-\n       QueryJobConfiguration queryConfig =\n-          // To use legacy SQL syntax, set useLegacySql to true.\n           QueryJobConfiguration.newBuilder(query).setUseLegacySql(true).build();\n \n       // Execute the query.\n       TableResult result = bigquery.query(queryConfig);\n \n       // Print the results.\n-      result\n-          .iterateAll()\n-          .forEach(row -> row.forEach(val -> System.out.println(val.getStringValue())));\n+      result.iterateAll().forEach(rows -> rows.forEach(row -> System.out.println(row.getValue())));\n \n       System.out.println(\"Legacy query ran successfully\");\n     } catch (BigQueryException | InterruptedException e) {\n"}}, {"oid": "ebd1b07b2d8527017f66f5082ec7d732f1b1932d", "url": "https://github.com/googleapis/java-bigquery/commit/ebd1b07b2d8527017f66f5082ec7d732f1b1932d", "message": "update base on comments", "committedDate": "2020-01-14T16:08:32Z", "type": "commit"}]}