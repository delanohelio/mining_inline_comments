{"pr_number": 209, "pr_title": "samples: add new sample bigquery_load_from_file", "pr_createdAt": "2020-03-04T00:13:27Z", "pr_url": "https://github.com/googleapis/java-bigquery/pull/209", "timeline": [{"oid": "cf96df1a157703e0ec48ef5112c18e4b49b7d15f", "url": "https://github.com/googleapis/java-bigquery/commit/cf96df1a157703e0ec48ef5112c18e4b49b7d15f", "message": "samples: add new sample bigquery_load_from_file", "committedDate": "2020-03-04T00:12:28Z", "type": "commit"}, {"oid": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1", "url": "https://github.com/googleapis/java-bigquery/commit/a996d4b3610fdc708e5ea5c8125107e8cd1132e1", "message": "updates", "committedDate": "2020-03-04T00:15:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5OTMwNA==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r387399304", "bodyText": "You can try-with multiple resources:\ntry (TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n         OutputStream stream = Channels.newOutputStream(writer)) {\n     Files.copy(csvPath, stream);\n}\nAlternatively, you could nest try-with-resource statements as well.", "author": "kurtisvg", "createdAt": "2020-03-04T01:24:44Z", "path": "samples/src/main/java/com/example/bigquery/LoadLocalFile.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_load_from_file]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobStatistics.LoadStatistics;\n+import com.google.cloud.bigquery.TableDataWriteChannel;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.WriteChannelConfiguration;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class LoadLocalFile {\n+\n+  public static void runLoadLocalFile() {\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    Path csvPath = FileSystems.getDefault().getPath(\".\", \"my-data.csv\");\n+    loadLocalFile(datasetName, tableName, csvPath);\n+  }\n+\n+  public static void loadLocalFile(String datasetName, String tableName, Path csvPath) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      WriteChannelConfiguration writeChannelConfiguration =\n+          WriteChannelConfiguration.newBuilder(tableId)\n+              .setFormatOptions(FormatOptions.csv())\n+              .build();\n+\n+      // The location must be specified; other fields can be auto-detected.\n+      JobId jobId = JobId.newBuilder().setLocation(\"us\").build();\n+\n+      TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n+\n+      // Imports a local file into a table.\n+      try (OutputStream stream = Channels.newOutputStream(writer)) {\n+        Files.copy(csvPath, stream);\n+      } finally {\n+        writer.close();", "originalCommit": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MjQxNQ==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r388592415", "bodyText": "okay - will use try with multiple resources", "author": "stephaniewang526", "createdAt": "2020-03-05T22:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5OTMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "4705f4bf46466a412931edec27d313e62311b2c4", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/LoadLocalFile.java b/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\nindex 488592b..5223be7 100644\n--- a/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\n+++ b/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\n\n@@ -58,16 +58,14 @@ public class LoadLocalFile {\n       // The location must be specified; other fields can be auto-detected.\n       JobId jobId = JobId.newBuilder().setLocation(\"us\").build();\n \n-      TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n-\n       // Imports a local file into a table.\n-      try (OutputStream stream = Channels.newOutputStream(writer)) {\n+      try (TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n+          OutputStream stream = Channels.newOutputStream(writer);\n+      ) {\n         Files.copy(csvPath, stream);\n-      } finally {\n-        writer.close();\n       }\n \n-      Job job = writer.getJob();\n+      Job job = bigquery.getJob(jobId);\n       Job completedJob = job.waitFor();\n       if (completedJob == null) {\n         System.out.println(\"Job not executed since it no longer exists.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMDExMg==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r387400112", "bodyText": "IOExceptions and InterruptedException should probably bubble up", "author": "kurtisvg", "createdAt": "2020-03-04T01:27:41Z", "path": "samples/src/main/java/com/example/bigquery/LoadLocalFile.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_load_from_file]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobStatistics.LoadStatistics;\n+import com.google.cloud.bigquery.TableDataWriteChannel;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.WriteChannelConfiguration;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class LoadLocalFile {\n+\n+  public static void runLoadLocalFile() {\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    Path csvPath = FileSystems.getDefault().getPath(\".\", \"my-data.csv\");\n+    loadLocalFile(datasetName, tableName, csvPath);\n+  }\n+\n+  public static void loadLocalFile(String datasetName, String tableName, Path csvPath) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      WriteChannelConfiguration writeChannelConfiguration =\n+          WriteChannelConfiguration.newBuilder(tableId)\n+              .setFormatOptions(FormatOptions.csv())\n+              .build();\n+\n+      // The location must be specified; other fields can be auto-detected.\n+      JobId jobId = JobId.newBuilder().setLocation(\"us\").build();\n+\n+      TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n+\n+      // Imports a local file into a table.\n+      try (OutputStream stream = Channels.newOutputStream(writer)) {\n+        Files.copy(csvPath, stream);\n+      } finally {\n+        writer.close();\n+      }\n+\n+      Job job = writer.getJob();\n+      Job completedJob = job.waitFor();\n+      if (completedJob == null) {\n+        System.out.println(\"Job not executed since it no longer exists.\");\n+        return;\n+      } else if (completedJob.getStatus().getError() != null) {\n+        System.out.println(\n+            \"BigQuery was unable to load local file to the table due to an error: \\n\"\n+                + job.getStatus().getError());\n+        return;\n+      }\n+\n+      // Get output status\n+      LoadStatistics stats = job.getStatistics();\n+      System.out.printf(\"Successfully loaded %d rows. \\n\", stats.getOutputRows());\n+    } catch (BigQueryException | IOException | InterruptedException e) {", "originalCommit": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzUxMQ==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r388593511", "bodyText": "okay will do", "author": "stephaniewang526", "createdAt": "2020-03-05T22:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMDExMg=="}], "type": "inlineReview", "revised_code": {"commit": "4705f4bf46466a412931edec27d313e62311b2c4", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/LoadLocalFile.java b/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\nindex 488592b..5223be7 100644\n--- a/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\n+++ b/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\n\n@@ -58,16 +58,14 @@ public class LoadLocalFile {\n       // The location must be specified; other fields can be auto-detected.\n       JobId jobId = JobId.newBuilder().setLocation(\"us\").build();\n \n-      TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n-\n       // Imports a local file into a table.\n-      try (OutputStream stream = Channels.newOutputStream(writer)) {\n+      try (TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n+          OutputStream stream = Channels.newOutputStream(writer);\n+      ) {\n         Files.copy(csvPath, stream);\n-      } finally {\n-        writer.close();\n       }\n \n-      Job job = writer.getJob();\n+      Job job = bigquery.getJob(jobId);\n       Job completedJob = job.waitFor();\n       if (completedJob == null) {\n         System.out.println(\"Job not executed since it no longer exists.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODE0Mg==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r387838142", "bodyText": "This looks like a typo", "author": "kurtisvg", "createdAt": "2020-03-04T18:01:53Z", "path": "samples/src/test/java/com/example/bigquery/LoadPartitionedTableIT.java", "diffHunk": "@@ -59,7 +60,9 @@ public void tearDown() {\n   public void loadPartitionedTable() throws Exception {\n     String sourceUri = \"gs://cloud-samples-data/bigquery/us-states/us-states-by-date-no-header.csv\";\n \n-    String tableName = \"LOAD_PARTITIONED_TABLE_TEST\";\n+    String tableName =\n+        \"LOAD_PARTITIONED_TABLE_TEST_\" + UUID.randomUUID().toString().replace('-', '_');\n+    ;", "originalCommit": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MjgzNQ==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r388592835", "bodyText": "this is in a different test actually -- I just wanted to update the table name have a random string part.", "author": "stephaniewang526", "createdAt": "2020-03-05T22:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NTc3Nw==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r388595777", "bodyText": "I think the semicolon on L65 is still extra (and looks like it was added in this PR).", "author": "kurtisvg", "createdAt": "2020-03-05T22:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMDI4Mg==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r388600282", "bodyText": "you're right! thanks!", "author": "stephaniewang526", "createdAt": "2020-03-05T22:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c0fe504a811337c0ef42c4c4287ad1923c66c2e0", "chunk": "diff --git a/samples/src/test/java/com/example/bigquery/LoadPartitionedTableIT.java b/samples/src/test/java/com/example/bigquery/LoadPartitionedTableIT.java\nindex 22a06ba..7f97d07 100644\n--- a/samples/src/test/java/com/example/bigquery/LoadPartitionedTableIT.java\n+++ b/samples/src/test/java/com/example/bigquery/LoadPartitionedTableIT.java\n\n@@ -62,7 +62,6 @@ public class LoadPartitionedTableIT {\n \n     String tableName =\n         \"LOAD_PARTITIONED_TABLE_TEST_\" + UUID.randomUUID().toString().replace('-', '_');\n-    ;\n \n     LoadPartitionedTable.loadPartitionedTable(BIGQUERY_DATASET_NAME, tableName, sourceUri);\n \n"}}, {"oid": "4705f4bf46466a412931edec27d313e62311b2c4", "url": "https://github.com/googleapis/java-bigquery/commit/4705f4bf46466a412931edec27d313e62311b2c4", "message": "update to try w multiple resources", "committedDate": "2020-03-05T21:40:20Z", "type": "commit"}, {"oid": "d9538681eefb07615a159e3f223020083d62770b", "url": "https://github.com/googleapis/java-bigquery/commit/d9538681eefb07615a159e3f223020083d62770b", "message": "update to try w multiple resources\nmove unhelpful exceptions to method signature", "committedDate": "2020-03-05T22:04:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NTI2MA==", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r388595260", "bodyText": "nit: Add a comment\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Job job = bigquery.getJob(jobId);\n          \n          \n            \n                  // Get the Job created by the TableDataWriteChannel and wait for it to complete.\n          \n          \n            \n                  Job job = bigquery.getJob(jobId);", "author": "kurtisvg", "createdAt": "2020-03-05T22:06:44Z", "path": "samples/src/main/java/com/example/bigquery/LoadLocalFile.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_load_from_file]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobStatistics.LoadStatistics;\n+import com.google.cloud.bigquery.TableDataWriteChannel;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.WriteChannelConfiguration;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.UUID;\n+\n+public class LoadLocalFile {\n+\n+  public static void runLoadLocalFile() throws IOException, InterruptedException {\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    Path csvPath = FileSystems.getDefault().getPath(\".\", \"my-data.csv\");\n+    loadLocalFile(datasetName, tableName, csvPath);\n+  }\n+\n+  public static void loadLocalFile(String datasetName, String tableName, Path csvPath)\n+      throws IOException, InterruptedException {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      WriteChannelConfiguration writeChannelConfiguration =\n+          WriteChannelConfiguration.newBuilder(tableId)\n+              .setFormatOptions(FormatOptions.csv())\n+              .build();\n+\n+      // The location and JobName must be specified; other fields can be auto-detected.\n+      String jobName = \"jobId_\" + UUID.randomUUID().toString();\n+      JobId jobId = JobId.newBuilder().setLocation(\"us\").setJob(jobName).build();\n+\n+      // Imports a local file into a table.\n+      try (TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n+          OutputStream stream = Channels.newOutputStream(writer)) {\n+        Files.copy(csvPath, stream);\n+      }\n+\n+      Job job = bigquery.getJob(jobId);", "originalCommit": "d9538681eefb07615a159e3f223020083d62770b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17bf937dd54896c994aee6028c02ba4bc5f96258", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/LoadLocalFile.java b/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\nindex 290eec9..e6e2e39 100644\n--- a/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\n+++ b/samples/src/main/java/com/example/bigquery/LoadLocalFile.java\n\n@@ -67,6 +67,7 @@ public class LoadLocalFile {\n         Files.copy(csvPath, stream);\n       }\n \n+      // Get the Job created by the TableDataWriteChannel and wait for it to complete.\n       Job job = bigquery.getJob(jobId);\n       Job completedJob = job.waitFor();\n       if (completedJob == null) {\n"}}, {"oid": "17bf937dd54896c994aee6028c02ba4bc5f96258", "url": "https://github.com/googleapis/java-bigquery/commit/17bf937dd54896c994aee6028c02ba4bc5f96258", "message": "add comment\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>", "committedDate": "2020-03-05T22:19:05Z", "type": "commit"}, {"oid": "c0fe504a811337c0ef42c4c4287ad1923c66c2e0", "url": "https://github.com/googleapis/java-bigquery/commit/c0fe504a811337c0ef42c4c4287ad1923c66c2e0", "message": "nit - remove extra semicolon", "committedDate": "2020-03-05T22:20:22Z", "type": "commit"}]}