{"pr_number": 85, "pr_title": "feat: new sample - Tables: Add empty column", "pr_createdAt": "2020-01-07T22:58:48Z", "pr_url": "https://github.com/googleapis/java-bigquery/pull/85", "timeline": [{"oid": "227710b97f24c550fe25398749f7a7cfcf2b8bef", "url": "https://github.com/googleapis/java-bigquery/commit/227710b97f24c550fe25398749f7a7cfcf2b8bef", "message": "feat: new sample - Tables: Add empty column", "committedDate": "2020-01-07T22:56:49Z", "type": "commit"}, {"oid": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1", "url": "https://github.com/googleapis/java-bigquery/commit/7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1", "message": "format code", "committedDate": "2020-01-07T22:57:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNzIyOA==", "url": "https://github.com/googleapis/java-bigquery/pull/85#discussion_r364017228", "bodyText": "nit: Consider splitting this into two actions to make more clear to users what's happening:\n// Update the table definition to include the new schema \nupdatedTable = table.toBuilder().setDefinition(StandardTableDefinition.of(newSchema)).build();\n// Push updates to the BigQuery service\nupdatedTable.update();", "author": "kurtisvg", "createdAt": "2020-01-08T00:33:05Z", "path": "samples/src/main/java/com/example/bigquery/AddEmptyColumn.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_add_empty_column]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.StandardTableDefinition;\n+import com.google.cloud.bigquery.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class AddEmptyColumn {\n+\n+  public static void runAddEmptyColumn() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableId = \"MY_TABLE_NAME\";\n+    addEmptyColumn(datasetName, tableId);\n+  }\n+\n+  public static void addEmptyColumn(String datasetName, String tableId) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      Table table = bigquery.getTable(datasetName, tableId);\n+      Schema schema = table.getDefinition().getSchema();\n+      FieldList fields = schema.getFields();\n+\n+      // Create the new field/column\n+      String randomColumnName = \"new_\" + UUID.randomUUID().toString().replace('-', '_');\n+      Field newField = Field.of(randomColumnName, LegacySQLTypeName.STRING);\n+\n+      // Create a new schema adding the current fields, plus the new one\n+      List<Field> fieldList = new ArrayList<Field>();\n+      for (Field f : fields) {\n+        fieldList.add(f);\n+      }\n+      fieldList.add(newField);\n+      Schema newSchema = Schema.of(fieldList);\n+\n+      // Update the table with the new schema\n+      table.toBuilder().setDefinition(StandardTableDefinition.of(newSchema)).build().update();", "originalCommit": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a166fe56bb6b74d094bc997e0da3a4d28a0f1b6", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java b/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\nindex 5c1b3df..24c3fa1 100644\n--- a/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\n+++ b/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\n\n@@ -28,7 +28,6 @@ import com.google.cloud.bigquery.StandardTableDefinition;\n import com.google.cloud.bigquery.Table;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.UUID;\n \n public class AddEmptyColumn {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNzgzMQ==", "url": "https://github.com/googleapis/java-bigquery/pull/85#discussion_r364017831", "bodyText": "nit: Consider using forEach:\nList<Field> fieldList = new ArrayList<Field>()\nfields.forEach(fieldList::add)", "author": "kurtisvg", "createdAt": "2020-01-08T00:35:43Z", "path": "samples/src/main/java/com/example/bigquery/AddEmptyColumn.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_add_empty_column]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.StandardTableDefinition;\n+import com.google.cloud.bigquery.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class AddEmptyColumn {\n+\n+  public static void runAddEmptyColumn() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableId = \"MY_TABLE_NAME\";\n+    addEmptyColumn(datasetName, tableId);\n+  }\n+\n+  public static void addEmptyColumn(String datasetName, String tableId) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      Table table = bigquery.getTable(datasetName, tableId);\n+      Schema schema = table.getDefinition().getSchema();\n+      FieldList fields = schema.getFields();\n+\n+      // Create the new field/column\n+      String randomColumnName = \"new_\" + UUID.randomUUID().toString().replace('-', '_');\n+      Field newField = Field.of(randomColumnName, LegacySQLTypeName.STRING);\n+\n+      // Create a new schema adding the current fields, plus the new one\n+      List<Field> fieldList = new ArrayList<Field>();\n+      for (Field f : fields) {", "originalCommit": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNzc0Ng==", "url": "https://github.com/googleapis/java-bigquery/pull/85#discussion_r364317746", "bodyText": "You're right! A great place to use lambda exp!", "author": "stephaniewang526", "createdAt": "2020-01-08T16:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNzgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a166fe56bb6b74d094bc997e0da3a4d28a0f1b6", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java b/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\nindex 5c1b3df..24c3fa1 100644\n--- a/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\n+++ b/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\n\n@@ -28,7 +28,6 @@ import com.google.cloud.bigquery.StandardTableDefinition;\n import com.google.cloud.bigquery.Table;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.UUID;\n \n public class AddEmptyColumn {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxODI4NA==", "url": "https://github.com/googleapis/java-bigquery/pull/85#discussion_r364018284", "bodyText": "Do we expect users to want to generate a column name with a UUID? Perhaps this would be better as a provided argument, and we can uses a UUID from the tests side instead.", "author": "kurtisvg", "createdAt": "2020-01-08T00:37:37Z", "path": "samples/src/main/java/com/example/bigquery/AddEmptyColumn.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_add_empty_column]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.StandardTableDefinition;\n+import com.google.cloud.bigquery.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class AddEmptyColumn {\n+\n+  public static void runAddEmptyColumn() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableId = \"MY_TABLE_NAME\";\n+    addEmptyColumn(datasetName, tableId);\n+  }\n+\n+  public static void addEmptyColumn(String datasetName, String tableId) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      Table table = bigquery.getTable(datasetName, tableId);\n+      Schema schema = table.getDefinition().getSchema();\n+      FieldList fields = schema.getFields();\n+\n+      // Create the new field/column\n+      String randomColumnName = \"new_\" + UUID.randomUUID().toString().replace('-', '_');", "originalCommit": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a166fe56bb6b74d094bc997e0da3a4d28a0f1b6", "chunk": "diff --git a/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java b/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\nindex 5c1b3df..24c3fa1 100644\n--- a/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\n+++ b/samples/src/main/java/com/example/bigquery/AddEmptyColumn.java\n\n@@ -28,7 +28,6 @@ import com.google.cloud.bigquery.StandardTableDefinition;\n import com.google.cloud.bigquery.Table;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.UUID;\n \n public class AddEmptyColumn {\n \n"}}, {"oid": "6a166fe56bb6b74d094bc997e0da3a4d28a0f1b6", "url": "https://github.com/googleapis/java-bigquery/commit/6a166fe56bb6b74d094bc997e0da3a4d28a0f1b6", "message": "update base on comments", "committedDate": "2020-01-08T15:58:21Z", "type": "commit"}, {"oid": "1a05cc9deb2a7487ab2b9857c95f095143039ca7", "url": "https://github.com/googleapis/java-bigquery/commit/1a05cc9deb2a7487ab2b9857c95f095143039ca7", "message": "update base on comments", "committedDate": "2020-01-08T16:20:30Z", "type": "commit"}]}