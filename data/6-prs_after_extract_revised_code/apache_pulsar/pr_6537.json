{"pr_number": 6537, "pr_title": "[Issue 5903] Support `compact` all partitions of a partitioned topic", "pr_createdAt": "2020-03-14T03:56:16Z", "pr_url": "https://github.com/apache/pulsar/pull/6537", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MDQzOQ==", "url": "https://github.com/apache/pulsar/pull/6537#discussion_r392640439", "bodyText": "@murong00 thanks for the contribute, Would you please help add a test that really called into and execute the compact?  Seems this is only the top level method call, and not called into the methods, and some of the code in PersistentTopicsBase.java seems not covered.\nIf there is no ut framework for this, we could add a integration test for it.", "author": "jiazhai", "createdAt": "2020-03-15T04:30:02Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java", "diffHunk": "@@ -439,4 +439,33 @@ public void testRevokePartitionedTopic() {\n             Assert.assertEquals(partitionPermissions.get(role), null);\n         }\n     }\n+\n+    @Test\n+    public void testTriggerCompactionTopic() {\n+        final String partitionTopicName = \"test-part\";\n+        final String nonPartitionTopicName = \"test-non-part\";\n+\n+        // trigger compaction on non-existing topic\n+        AsyncResponse response = mock(AsyncResponse.class);\n+        persistentTopics.compact(response, testTenant, testNamespace, \"non-existing-topic\", true);\n+        ArgumentCaptor<RestException> errCaptor = ArgumentCaptor.forClass(RestException.class);\n+        verify(response, timeout(5000).times(1)).resume(errCaptor.capture());\n+        Assert.assertEquals(errCaptor.getValue().getResponse().getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n+\n+        // create non partitioned topic and compaction on it\n+        response = mock(AsyncResponse.class);\n+        persistentTopics.createNonPartitionedTopic(testTenant, testNamespace, nonPartitionTopicName, true);\n+        persistentTopics.compact(response, testTenant, testNamespace, nonPartitionTopicName, true);\n+        ArgumentCaptor<Response> responseCaptor = ArgumentCaptor.forClass(Response.class);\n+        verify(response, timeout(5000).times(1)).resume(responseCaptor.capture());\n+        Assert.assertEquals(responseCaptor.getValue().getStatus(), Response.Status.NO_CONTENT.getStatusCode());\n+\n+        // create partitioned topic and compaction on it", "originalCommit": "a9d685d451231a66abbac68245c3745708998a77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMDE1NQ==", "url": "https://github.com/apache/pulsar/pull/6537#discussion_r393420155", "bodyText": "Added a unit test to cover the compact logic and just keep this top level method call test.", "author": "murong00", "createdAt": "2020-03-17T03:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MDQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "654f69d3702fb00a88ffb0ec1245b3a58efdd76e", "chunk": "diff --git a/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java b/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java\nindex c5f3f1361eb..2d2d0cfa2b0 100644\n--- a/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java\n+++ b/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java\n\n@@ -468,4 +471,34 @@ public class PersistentTopicsTest extends MockedPulsarServiceBaseTest {\n         verify(response, timeout(5000).times(1)).resume(responseCaptor.capture());\n         Assert.assertEquals(responseCaptor.getValue().getStatus(), Response.Status.NO_CONTENT.getStatusCode());\n     }\n+\n+    @Test()\n+    public void testGetLastMessageId() throws Exception {\n+        TenantInfo tenantInfo = new TenantInfo(Sets.newHashSet(\"role1\", \"role2\"), Sets.newHashSet(\"test\"));\n+        admin.tenants().createTenant(\"prop-xyz\", tenantInfo);\n+        admin.namespaces().createNamespace(\"prop-xyz/ns1\", Sets.newHashSet(\"test\"));\n+        final String topicName = \"persistent://prop-xyz/ns1/testGetLastMessageId\";\n+\n+        admin.topics().createNonPartitionedTopic(topicName);\n+        Producer<byte[]> batchProducer = pulsarClient.newProducer().topic(topicName)\n+                .enableBatching(true)\n+                .batchingMaxMessages(100)\n+                .batchingMaxPublishDelay(2, TimeUnit.SECONDS)\n+                .create();\n+        admin.topics().createSubscription(topicName, \"test\", MessageId.earliest);\n+        CompletableFuture<MessageId> completableFuture = new CompletableFuture<>();\n+        for (int i = 0; i < 10; i++) {\n+            completableFuture = batchProducer.sendAsync(\"test\".getBytes());\n+        }\n+        completableFuture.get();\n+        Assert.assertEquals(((BatchMessageIdImpl) admin.topics().getLastMessageId(topicName)).getBatchIndex(), 9);\n+\n+        Producer<byte[]> producer = pulsarClient.newProducer().topic(topicName)\n+                .enableBatching(false)\n+                .create();\n+        producer.send(\"test\".getBytes());\n+\n+        Assert.assertTrue(admin.topics().getLastMessageId(topicName) instanceof MessageIdImpl);\n+\n+    }\n }\n"}}, {"oid": "654f69d3702fb00a88ffb0ec1245b3a58efdd76e", "url": "https://github.com/apache/pulsar/commit/654f69d3702fb00a88ffb0ec1245b3a58efdd76e", "message": "Resolve conflict.", "committedDate": "2020-03-18T10:54:03Z", "type": "commit"}, {"oid": "2b96a0268951929fa425cab002d23038525c4217", "url": "https://github.com/apache/pulsar/commit/2b96a0268951929fa425cab002d23038525c4217", "message": "Add a unit test to cover the compact logic.", "committedDate": "2020-03-18T10:56:23Z", "type": "commit"}, {"oid": "2b96a0268951929fa425cab002d23038525c4217", "url": "https://github.com/apache/pulsar/commit/2b96a0268951929fa425cab002d23038525c4217", "message": "Add a unit test to cover the compact logic.", "committedDate": "2020-03-18T10:56:23Z", "type": "forcePushed"}]}