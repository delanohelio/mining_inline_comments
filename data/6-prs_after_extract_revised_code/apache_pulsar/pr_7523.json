{"pr_number": 7523, "pr_title": "[Issue 5720][authz] - add topics authz granularity", "pr_createdAt": "2020-07-13T13:56:22Z", "pr_url": "https://github.com/apache/pulsar/pull/7523", "timeline": [{"oid": "9c4d9090b0fb1218f82b70386a3d383462561c7b", "url": "https://github.com/apache/pulsar/commit/9c4d9090b0fb1218f82b70386a3d383462561c7b", "message": "topics authz granularity", "committedDate": "2020-07-15T14:13:50Z", "type": "forcePushed"}, {"oid": "b1c7751c656abb15caff450204ded508d3c4d4a8", "url": "https://github.com/apache/pulsar/commit/b1c7751c656abb15caff450204ded508d3c4d4a8", "message": "topics authz granularity", "committedDate": "2020-07-15T14:53:50Z", "type": "forcePushed"}, {"oid": "ed4a34f246b00df43774d2fedc89aa35140cf362", "url": "https://github.com/apache/pulsar/commit/ed4a34f246b00df43774d2fedc89aa35140cf362", "message": "topics authz granularity", "committedDate": "2020-07-15T15:22:20Z", "type": "forcePushed"}, {"oid": "477865ecf9590320b0b23c34ed302525db96d5cb", "url": "https://github.com/apache/pulsar/commit/477865ecf9590320b0b23c34ed302525db96d5cb", "message": "add full topicoperations management and clean skip_message to skip", "committedDate": "2020-08-12T13:47:47Z", "type": "forcePushed"}, {"oid": "e619c2e5fd9e1973f69805ed115ee20d4b4b212f", "url": "https://github.com/apache/pulsar/commit/e619c2e5fd9e1973f69805ed115ee20d4b4b212f", "message": "bump", "committedDate": "2020-08-12T14:18:35Z", "type": "forcePushed"}, {"oid": "e321f31d0b9e806dcc074a48275b5aea58e89aab", "url": "https://github.com/apache/pulsar/commit/e321f31d0b9e806dcc074a48275b5aea58e89aab", "message": "check is super user", "committedDate": "2020-08-12T18:08:12Z", "type": "forcePushed"}, {"oid": "7c54688434fba2339c23af52b03204b33d69e4ef", "url": "https://github.com/apache/pulsar/commit/7c54688434fba2339c23af52b03204b33d69e4ef", "message": "match recent updates", "committedDate": "2020-08-13T00:34:51Z", "type": "forcePushed"}, {"oid": "44d334eb0c0d818a1cfb1da8def5a01c11f10a35", "url": "https://github.com/apache/pulsar/commit/44d334eb0c0d818a1cfb1da8def5a01c11f10a35", "message": "format doc", "committedDate": "2020-08-13T14:12:48Z", "type": "forcePushed"}, {"oid": "b3597bb14ff8753eaac1f85e07f891abd3befbdc", "url": "https://github.com/apache/pulsar/commit/b3597bb14ff8753eaac1f85e07f891abd3befbdc", "message": "format doc", "committedDate": "2020-08-13T14:13:26Z", "type": "forcePushed"}, {"oid": "0472a1ce24d1c113f83aaeb2d94318003aca5e0b", "url": "https://github.com/apache/pulsar/commit/0472a1ce24d1c113f83aaeb2d94318003aca5e0b", "message": "format doc", "committedDate": "2020-08-13T23:38:22Z", "type": "forcePushed"}, {"oid": "089b5299b3fad03ed562cbf1e27e489235746cc5", "url": "https://github.com/apache/pulsar/commit/089b5299b3fad03ed562cbf1e27e489235746cc5", "message": "format doc", "committedDate": "2020-08-13T23:44:41Z", "type": "forcePushed"}, {"oid": "359a44a264b059133ebec1032ba6f585a633cc77", "url": "https://github.com/apache/pulsar/commit/359a44a264b059133ebec1032ba6f585a633cc77", "message": "format doc", "committedDate": "2020-08-14T00:03:14Z", "type": "forcePushed"}, {"oid": "f39303fe260bf8458188706fc109aa8e6c150a81", "url": "https://github.com/apache/pulsar/commit/f39303fe260bf8458188706fc109aa8e6c150a81", "message": "typo", "committedDate": "2020-08-25T04:44:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY2NTM2MQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r479665361", "bodyText": "Probably should return Status.UNAUTHORIZED rather than Status.FORBIDDEN to avoid confusion?", "author": "frankjkelly", "createdAt": "2020-08-29T16:21:53Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java", "diffHunk": "@@ -846,4 +847,36 @@ public void validateNamespacePolicyOperation(NamespaceName namespaceName,\n             }\n         }\n     }\n+\n+    public void validateTopicPolicyOperation(TopicName topicName, PolicyName policy, PolicyOperation operation) {\n+        if (pulsar().getConfiguration().isAuthenticationEnabled() && pulsar().getBrokerService().isAuthorizationEnabled()) {\n+            if (!isClientAuthenticated(clientAppId())) {\n+                throw new RestException(Status.FORBIDDEN, \"Need to authenticate to perform the request\");", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMDY3Nw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483520677", "bodyText": "Probably but the rest of this stuff content is using forbidden today.", "author": "KannarFr", "createdAt": "2020-09-04T10:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY2NTM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bd64f388b9fbe64b7947280dddfaac31b7ccb88", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java\nindex 5778a7a1fbd..af3b4ef3b7f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java\n\n@@ -842,30 +865,38 @@ public abstract class PulsarWebResource {\n                         originalPrincipal(), clientAppId(), clientAuthData());\n \n             if (!isAuthorized) {\n-                throw new RestException(Status.FORBIDDEN, String.format(\"Unauthorized to validateNamespacePolicyOperation for\" +\n-                        \" operation [%s] on namespace [%s] on policy [%s]\", operation.toString(), namespaceName, policy.toString()));\n+                throw new RestException(Status.FORBIDDEN,\n+                        String.format(\"Unauthorized to validateNamespacePolicyOperation for\"\n+                                        + \" operation [%s] on namespace [%s] on policy [%s]\",\n+                                operation.toString(), namespaceName, policy.toString()));\n             }\n         }\n     }\n \n     public void validateTopicPolicyOperation(TopicName topicName, PolicyName policy, PolicyOperation operation) {\n-        if (pulsar().getConfiguration().isAuthenticationEnabled() && pulsar().getBrokerService().isAuthorizationEnabled()) {\n+        if (pulsar().getConfiguration().isAuthenticationEnabled()\n+                && pulsar().getBrokerService().isAuthorizationEnabled()) {\n             if (!isClientAuthenticated(clientAppId())) {\n                 throw new RestException(Status.FORBIDDEN, \"Need to authenticate to perform the request\");\n             }\n \n             Boolean isAuthorized = pulsar().getBrokerService().getAuthorizationService()\n-                    .allowTopicPolicyOperation(topicName, policy, operation, originalPrincipal(), clientAppId(), clientAuthData());\n+                    .allowTopicPolicyOperation(topicName, policy, operation, originalPrincipal(), clientAppId(),\n+                            clientAuthData());\n \n             if (!isAuthorized) {\n-                throw new RestException(Status.FORBIDDEN, String.format(\"Unauthorized to validateTopicPolicyOperation for\" +\n-                        \" operation [%s] on topic [%s] on policy [%s]\", operation.toString(), topicName, policy.toString()));\n+                throw new RestException(Status.FORBIDDEN,\n+                        String.format(\"Unauthorized to validateTopicPolicyOperation for\"\n+                                        + \" operation [%s] on topic [%s] on policy [%s]\", operation.toString(),\n+                                topicName,\n+                                policy.toString()));\n             }\n         }\n     }\n \n     public void validateTopicOperation(TopicName topicName, TopicOperation operation) {\n-        if (pulsar().getConfiguration().isAuthenticationEnabled() && pulsar().getBrokerService().isAuthorizationEnabled()) {\n+        if (pulsar().getConfiguration().isAuthenticationEnabled()\n+            && pulsar().getBrokerService().isAuthorizationEnabled()) {\n             if (!isClientAuthenticated(clientAppId())) {\n                 throw new RestException(Status.UNAUTHORIZED, \"Need to authenticate to perform the request\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY2NTM3Mw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r479665373", "bodyText": "Same as above?", "author": "frankjkelly", "createdAt": "2020-08-29T16:22:04Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java", "diffHunk": "@@ -846,4 +847,36 @@ public void validateNamespacePolicyOperation(NamespaceName namespaceName,\n             }\n         }\n     }\n+\n+    public void validateTopicPolicyOperation(TopicName topicName, PolicyName policy, PolicyOperation operation) {\n+        if (pulsar().getConfiguration().isAuthenticationEnabled() && pulsar().getBrokerService().isAuthorizationEnabled()) {\n+            if (!isClientAuthenticated(clientAppId())) {\n+                throw new RestException(Status.FORBIDDEN, \"Need to authenticate to perform the request\");\n+            }\n+\n+            Boolean isAuthorized = pulsar().getBrokerService().getAuthorizationService()\n+                    .allowTopicPolicyOperation(topicName, policy, operation, originalPrincipal(), clientAppId(), clientAuthData());\n+\n+            if (!isAuthorized) {\n+                throw new RestException(Status.FORBIDDEN, String.format(\"Unauthorized to validateTopicPolicyOperation for\" +\n+                        \" operation [%s] on topic [%s] on policy [%s]\", operation.toString(), topicName, policy.toString()));\n+            }\n+        }\n+    }\n+\n+    public void validateTopicOperation(TopicName topicName, TopicOperation operation) {\n+        if (pulsar().getConfiguration().isAuthenticationEnabled() && pulsar().getBrokerService().isAuthorizationEnabled()) {\n+            if (!isClientAuthenticated(clientAppId())) {\n+                throw new RestException(Status.UNAUTHORIZED, \"Need to authenticate to perform the request\");", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMDcyNw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483520727", "bodyText": "Same as above.", "author": "KannarFr", "createdAt": "2020-09-04T10:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY2NTM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9bd64f388b9fbe64b7947280dddfaac31b7ccb88", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java\nindex 5778a7a1fbd..af3b4ef3b7f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/web/PulsarWebResource.java\n\n@@ -842,30 +865,38 @@ public abstract class PulsarWebResource {\n                         originalPrincipal(), clientAppId(), clientAuthData());\n \n             if (!isAuthorized) {\n-                throw new RestException(Status.FORBIDDEN, String.format(\"Unauthorized to validateNamespacePolicyOperation for\" +\n-                        \" operation [%s] on namespace [%s] on policy [%s]\", operation.toString(), namespaceName, policy.toString()));\n+                throw new RestException(Status.FORBIDDEN,\n+                        String.format(\"Unauthorized to validateNamespacePolicyOperation for\"\n+                                        + \" operation [%s] on namespace [%s] on policy [%s]\",\n+                                operation.toString(), namespaceName, policy.toString()));\n             }\n         }\n     }\n \n     public void validateTopicPolicyOperation(TopicName topicName, PolicyName policy, PolicyOperation operation) {\n-        if (pulsar().getConfiguration().isAuthenticationEnabled() && pulsar().getBrokerService().isAuthorizationEnabled()) {\n+        if (pulsar().getConfiguration().isAuthenticationEnabled()\n+                && pulsar().getBrokerService().isAuthorizationEnabled()) {\n             if (!isClientAuthenticated(clientAppId())) {\n                 throw new RestException(Status.FORBIDDEN, \"Need to authenticate to perform the request\");\n             }\n \n             Boolean isAuthorized = pulsar().getBrokerService().getAuthorizationService()\n-                    .allowTopicPolicyOperation(topicName, policy, operation, originalPrincipal(), clientAppId(), clientAuthData());\n+                    .allowTopicPolicyOperation(topicName, policy, operation, originalPrincipal(), clientAppId(),\n+                            clientAuthData());\n \n             if (!isAuthorized) {\n-                throw new RestException(Status.FORBIDDEN, String.format(\"Unauthorized to validateTopicPolicyOperation for\" +\n-                        \" operation [%s] on topic [%s] on policy [%s]\", operation.toString(), topicName, policy.toString()));\n+                throw new RestException(Status.FORBIDDEN,\n+                        String.format(\"Unauthorized to validateTopicPolicyOperation for\"\n+                                        + \" operation [%s] on topic [%s] on policy [%s]\", operation.toString(),\n+                                topicName,\n+                                policy.toString()));\n             }\n         }\n     }\n \n     public void validateTopicOperation(TopicName topicName, TopicOperation operation) {\n-        if (pulsar().getConfiguration().isAuthenticationEnabled() && pulsar().getBrokerService().isAuthorizationEnabled()) {\n+        if (pulsar().getConfiguration().isAuthenticationEnabled()\n+            && pulsar().getBrokerService().isAuthorizationEnabled()) {\n             if (!isClientAuthenticated(clientAppId())) {\n                 throw new RestException(Status.UNAUTHORIZED, \"Need to authenticate to perform the request\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzA4MQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377081", "bodyText": "Can you make the default implementation to use the existing method? If people wrote its own plugin, it will fail all the topic policy operations when it upgrades to a newer version of Pulsar.", "author": "sijie", "createdAt": "2020-09-04T04:20:46Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationProvider.java", "diffHunk": "@@ -489,4 +490,36 @@ default Boolean allowTopicOperation(TopicName topicName,\n             throw new RestException(e.getCause());\n         }\n     }\n+\n+    /**\n+     * Check if a given <tt>role</tt> is allowed to execute a given topic <tt>operation</tt> on topic's <tt>policy</tt>.\n+     *\n+     * @param topic topic name\n+     * @param role role name\n+     * @param operation topic operation\n+     * @param authData authenticated data\n+     * @return CompletableFuture<Boolean>\n+     */\n+    default CompletableFuture<Boolean> allowTopicPolicyOperationAsync(TopicName topic,\n+                                                                      String role,\n+                                                                      PolicyName policy,\n+                                                                      PolicyOperation operation,\n+                                                                      AuthenticationDataSource authData) {\n+        return FutureUtil.failedFuture(", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxODUzNw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483518537", "bodyText": "So call return isTenantAdmin(topic.getTenant(), role, tenantInfo , authData);, correct? How to get tenantInfo from here?", "author": "KannarFr", "createdAt": "2020-09-04T10:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEyMjgxNw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r484122817", "bodyText": "@sijie", "author": "KannarFr", "createdAt": "2020-09-06T22:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1NzQ0Mg==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r556757442", "bodyText": "@zymap is working on some authorization changes. @zymap Can you take a look at this pull request?", "author": "sijie", "createdAt": "2021-01-13T18:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI5NDY5OA==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r559294698", "bodyText": "Overall looks good. This PR looks like only add the validation for the topic level authorization.", "author": "zymap", "createdAt": "2021-01-18T03:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY1NzQzNg==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r568657436", "bodyText": "It does.", "author": "KannarFr", "createdAt": "2021-02-02T14:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "db618d6c09817af5c3ea43361eafe8bce02a8375", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationProvider.java\nindex fc680e7e6eb..f8e73c39a8f 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationProvider.java\n\n@@ -506,7 +509,8 @@ public interface AuthorizationProvider extends Closeable {\n                                                                       PolicyOperation operation,\n                                                                       AuthenticationDataSource authData) {\n         return FutureUtil.failedFuture(\n-                new IllegalStateException(\"TopicPolicyOperation is not supported by the Authorization provider you are using.\"));\n+                new IllegalStateException(\"TopicPolicyOperation [\" + policy.name() + \"/\" + operation.name() + \"] \"\n+                        + \"is not supported by the Authorization provider you are using.\"));\n     }\n \n     default Boolean allowTopicPolicyOperation(TopicName topicName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzMwMQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377301", "bodyText": "Can you avoid formatting the file with other changes?", "author": "sijie", "createdAt": "2020-09-04T04:21:46Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationService.java", "diffHunk": "@@ -364,13 +353,11 @@ private boolean isProxyRole(String role) {\n      * Grant authorization-action permission on a tenant to the given client\n      *\n      * @param tenantName tenant name\n-     * @param operation tenant operation\n-     * @param role role name\n-     * @param authData\n-     *            additional authdata in json for targeted authorization provider\n+     * @param operation  tenant operation", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationService.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationService.java\nindex 436b21b81ad..a9f99000d4c 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationService.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationService.java\n\n@@ -353,11 +365,13 @@ public class AuthorizationService {\n      * Grant authorization-action permission on a tenant to the given client\n      *\n      * @param tenantName tenant name\n-     * @param operation  tenant operation\n-     * @param role       role name\n-     * @param authData   additional authdata in json for targeted authorization provider\n+     * @param operation tenant operation\n+     * @param role role name\n+     * @param authData\n+     *            additional authdata in json for targeted authorization provider\n      * @return IllegalArgumentException when tenant not found\n-     * @throws IllegalStateException when failed to grant permission\n+     * @throws IllegalStateException\n+     *             when failed to grant permission\n      */\n     public CompletableFuture<Boolean> allowTenantOperationAsync(String tenantName,\n                                                                 TenantOperation operation,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzU2MQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377561", "bodyText": "expire messages is a consume operation, correct?", "author": "sijie", "createdAt": "2020-09-04T04:22:58Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -564,6 +564,36 @@ private void validatePoliciesReadOnlyAccess() {\n                 break;\n             case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n+            case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex dbdfe043ed1..a73563eaf84 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -566,13 +566,13 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n                 break;\n             case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n-            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n             case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n-            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzY1OA==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377658", "bodyText": "compact should be an admin operation, correct?", "author": "sijie", "createdAt": "2020-09-04T04:23:25Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -564,6 +564,36 @@ private void validatePoliciesReadOnlyAccess() {\n                 break;\n             case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n+            case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex dbdfe043ed1..a73563eaf84 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -566,13 +566,13 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n                 break;\n             case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n-            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n             case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n-            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzY4NQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377685", "bodyText": "admin?", "author": "sijie", "createdAt": "2020-09-04T04:23:33Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -564,6 +564,36 @@ private void validatePoliciesReadOnlyAccess() {\n                 break;\n             case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n+            case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex dbdfe043ed1..a73563eaf84 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -566,13 +566,13 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n                 break;\n             case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n-            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n             case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n-            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3Nzg4NQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377885", "bodyText": "consume?", "author": "sijie", "createdAt": "2020-09-04T04:24:34Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -564,6 +564,36 @@ private void validatePoliciesReadOnlyAccess() {\n                 break;\n             case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n+            case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex dbdfe043ed1..a73563eaf84 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -566,13 +566,13 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n                 break;\n             case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n-            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n             case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n-            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzkxNA==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377914", "bodyText": "admin?", "author": "sijie", "createdAt": "2020-09-04T04:24:42Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -564,6 +564,36 @@ private void validatePoliciesReadOnlyAccess() {\n                 break;\n             case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n+            case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case TERMINATE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case UNLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex dbdfe043ed1..a73563eaf84 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -566,13 +566,13 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n                 break;\n             case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n-            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n             case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n-            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3Nzk0NQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377945", "bodyText": "admin?", "author": "sijie", "createdAt": "2020-09-04T04:24:48Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -564,6 +564,36 @@ private void validatePoliciesReadOnlyAccess() {\n                 break;\n             case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n+            case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case TERMINATE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case UNLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case ADD_BUNDLE_RANGE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex dbdfe043ed1..a73563eaf84 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -566,13 +566,13 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n                 break;\n             case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n-            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n             case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n-            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3Nzk5Ng==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483377996", "bodyText": "admin?", "author": "sijie", "createdAt": "2020-09-04T04:24:55Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -564,6 +564,36 @@ private void validatePoliciesReadOnlyAccess() {\n                 break;\n             case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n+            case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case TERMINATE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case UNLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case ADD_BUNDLE_RANGE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case GET_BUNDLE_RANGE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex dbdfe043ed1..a73563eaf84 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -566,13 +566,13 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n                 break;\n             case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n-            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n             case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n-            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3ODA3Mw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r483378073", "bodyText": "admin?", "author": "sijie", "createdAt": "2020-09-04T04:25:09Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -564,6 +564,36 @@ private void validatePoliciesReadOnlyAccess() {\n                 break;\n             case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n+            case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n+                break;\n+            case TERMINATE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case UNLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case ADD_BUNDLE_RANGE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case GET_BUNDLE_RANGE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case DELETE_BUNDLE_RANGE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);", "originalCommit": "f39303fe260bf8458188706fc109aa8e6c150a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a79fb3d2f6bbf47237c7689604779f33646527", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex dbdfe043ed1..a73563eaf84 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -566,13 +566,13 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n                 break;\n             case COMPACT: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n-            case EXPIRE_MESSAGES: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case OFFLOAD: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n             case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n-            case RESET_CURSOR: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+            case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData);\n                 break;\n             case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                 break;\n"}}, {"oid": "f7a79fb3d2f6bbf47237c7689604779f33646527", "url": "https://github.com/apache/pulsar/commit/f7a79fb3d2f6bbf47237c7689604779f33646527", "message": "fix rights checks", "committedDate": "2020-09-04T10:03:17Z", "type": "forcePushed"}, {"oid": "0f0ec4076a6c501bf2fb0ec54404b4131fb61c19", "url": "https://github.com/apache/pulsar/commit/0f0ec4076a6c501bf2fb0ec54404b4131fb61c19", "message": "validate ownership", "committedDate": "2020-09-11T13:18:51Z", "type": "forcePushed"}, {"oid": "aa43845b8fb8f1454ab2f5fcae0cebac5893ad0c", "url": "https://github.com/apache/pulsar/commit/aa43845b8fb8f1454ab2f5fcae0cebac5893ad0c", "message": "validate ownership", "committedDate": "2020-09-14T14:12:20Z", "type": "forcePushed"}, {"oid": "5ff9d179264ebd1d1d32daa642b77caf3dbf7942", "url": "https://github.com/apache/pulsar/commit/5ff9d179264ebd1d1d32daa642b77caf3dbf7942", "message": "add granularity to non persistenttopics", "committedDate": "2020-10-26T11:14:29Z", "type": "forcePushed"}, {"oid": "6cc8f6db7bdf95e273262000e79947319213b44f", "url": "https://github.com/apache/pulsar/commit/6cc8f6db7bdf95e273262000e79947319213b44f", "message": "add granularity to non persistenttopics", "committedDate": "2020-10-26T11:34:57Z", "type": "forcePushed"}, {"oid": "9bd64f388b9fbe64b7947280dddfaac31b7ccb88", "url": "https://github.com/apache/pulsar/commit/9bd64f388b9fbe64b7947280dddfaac31b7ccb88", "message": "use isAdmin for related actions", "committedDate": "2020-12-10T16:13:46Z", "type": "forcePushed"}, {"oid": "84d131fca996e179ad69a590f89530c31daf0f33", "url": "https://github.com/apache/pulsar/commit/84d131fca996e179ad69a590f89530c31daf0f33", "message": "use isAdmin for related actions", "committedDate": "2021-01-13T16:37:30Z", "type": "forcePushed"}, {"oid": "d17dab993bdd8100982a84679934e28d4ce04dc2", "url": "https://github.com/apache/pulsar/commit/d17dab993bdd8100982a84679934e28d4ce04dc2", "message": "fix", "committedDate": "2021-01-13T22:44:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI5NDYzMQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r559294631", "bodyText": "Can we merge some operations like this? For example:\ncase CONSUME:\ncase EXPIRE_MESAGES:\n...\ncase SKIP:\n    isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n    break;", "author": "zymap", "createdAt": "2021-01-18T03:10:10Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -557,28 +557,65 @@ private void validatePoliciesReadOnlyAccess() {\n                                                                AuthenticationDataSource authData) {\n         CompletableFuture<Boolean> isAuthorizedFuture;\n \n-        switch (operation) {\n-            case LOOKUP: isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n-                break;\n-            case PRODUCE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n-                break;\n-            case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n-                break;\n-            default: isAuthorizedFuture = FutureUtil.failedFuture(\n-                    new IllegalStateException(\"TopicOperation is not supported.\"));\n-        }\n+        try {\n+            TenantInfo tenantInfo = configCache.propertiesCache().get(path(POLICIES, topicName.getTenant())).get();\n+\n+            switch (operation) {", "originalCommit": "d17dab993bdd8100982a84679934e28d4ce04dc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ea53cdbf45d77f9c6ba4ef6d68a578b4c157943", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex 587c662414c..98c0b6cf019 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -561,41 +575,27 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n             TenantInfo tenantInfo = configCache.propertiesCache().get(path(POLICIES, topicName.getTenant())).get();\n \n             switch (operation) {\n-                case LOOKUP: isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n-                    break;\n-                case PRODUCE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n-                    break;\n-                case CONSUME: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n-                    break;\n-                case COMPACT: isAuthorizedFuture = isTenantAdmin(topicName.getTenant(), role, tenantInfo, authData);\n-                    break;\n-                case EXPIRE_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n-                    break;\n-                case OFFLOAD: isAuthorizedFuture = isTenantAdmin(topicName.getTenant(), role, tenantInfo, authData);\n-                    break;\n-                case PEEK_MESSAGES: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n-                    break;\n-                case RESET_CURSOR: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n-                    break;\n-                case SKIP: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n-                    break;\n-                case TERMINATE: isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n-                    break;\n-                case UNLOAD: isAuthorizedFuture = isTenantAdmin(topicName.getTenant(), role, tenantInfo, authData);\n-                    break;\n-                case ADD_BUNDLE_RANGE: isAuthorizedFuture = isTenantAdmin(topicName.getTenant(), role, tenantInfo, authData);\n-                    break;\n-                case GET_BUNDLE_RANGE: isAuthorizedFuture = isTenantAdmin(topicName.getTenant(), role, tenantInfo, authData);\n-                    break;\n-                case DELETE_BUNDLE_RANGE: isAuthorizedFuture = isTenantAdmin(topicName.getTenant(), role, tenantInfo, authData);\n-                    break;\n-                case SUBSCRIBE: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n-                    break;\n+                case LOOKUP:\n+                case GET_STATS:\n                 case GET_SUBSCRIPTIONS: isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n                     break;\n+                case PRODUCE:\n+                case TERMINATE:  isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                    break;\n+                case CONSUME:\n+                case EXPIRE_MESSAGES:\n+                case PEEK_MESSAGES:\n+                case RESET_CURSOR:\n+                case SKIP:\n+                case SUBSCRIBE:\n                 case UNSUBSCRIBE: isAuthorizedFuture = canConsumeAsync(topicName, role, authData, authData.getSubscription());\n                     break;\n-                case GET_STATS: isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n+                case COMPACT:\n+                case OFFLOAD:\n+                case UNLOAD:\n+                case ADD_BUNDLE_RANGE:\n+                case GET_BUNDLE_RANGE:\n+                case DELETE_BUNDLE_RANGE: isAuthorizedFuture = isTenantAdmin(topicName.getTenant(), role, tenantInfo, authData);\n                     break;\n                 default: isAuthorizedFuture = FutureUtil.failedFuture(\n                         new IllegalStateException(\"TopicOperation is not supported.\"));\n"}}, {"oid": "fcfee520416b0b726774ca2fbc70ee25187265e5", "url": "https://github.com/apache/pulsar/commit/fcfee520416b0b726774ca2fbc70ee25187265e5", "message": "fix", "committedDate": "2021-02-02T14:38:12Z", "type": "forcePushed"}, {"oid": "6ea53cdbf45d77f9c6ba4ef6d68a578b4c157943", "url": "https://github.com/apache/pulsar/commit/6ea53cdbf45d77f9c6ba4ef6d68a578b4c157943", "message": "merge rights check switch", "committedDate": "2021-02-09T13:31:47Z", "type": "forcePushed"}, {"oid": "c30c4374dc858a15d6ce3ebe7877e913c949204d", "url": "https://github.com/apache/pulsar/commit/c30c4374dc858a15d6ce3ebe7877e913c949204d", "message": "fixes", "committedDate": "2021-02-09T23:59:29Z", "type": "forcePushed"}, {"oid": "db618d6c09817af5c3ea43361eafe8bce02a8375", "url": "https://github.com/apache/pulsar/commit/db618d6c09817af5c3ea43361eafe8bce02a8375", "message": "simplify code", "committedDate": "2021-02-10T02:33:47Z", "type": "forcePushed"}, {"oid": "be6848c541e80854ea77b49714259e998d991328", "url": "https://github.com/apache/pulsar/commit/be6848c541e80854ea77b49714259e998d991328", "message": "ensure operations", "committedDate": "2021-02-10T12:28:28Z", "type": "forcePushed"}, {"oid": "73ce0365c6258ff6754140299e36a168d4f13581", "url": "https://github.com/apache/pulsar/commit/73ce0365c6258ff6754140299e36a168d4f13581", "message": "fix", "committedDate": "2021-02-23T12:48:49Z", "type": "forcePushed"}, {"oid": "cace4c1b8066ec3aa29dd4a55b271e009379f97c", "url": "https://github.com/apache/pulsar/commit/cace4c1b8066ec3aa29dd4a55b271e009379f97c", "message": "fix rebase", "committedDate": "2021-03-03T16:47:16Z", "type": "forcePushed"}, {"oid": "538ce78b25aeb97ebca547a5680c006dbf898f9e", "url": "https://github.com/apache/pulsar/commit/538ce78b25aeb97ebca547a5680c006dbf898f9e", "message": "fix rebase", "committedDate": "2021-03-09T09:57:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTY5NjIyNg==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r591696226", "bodyText": "for LOOKUP, the original behavior is checking canLookupAsync. Why do we need to check validateTenantAdminAccess?", "author": "sijie", "createdAt": "2021-03-10T16:54:13Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -545,29 +546,88 @@ private void validatePoliciesReadOnlyAccess() {\n         CompletableFuture<Boolean> isAuthorizedFuture;\n \n         switch (operation) {\n-            case LOOKUP: isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n+            case LOOKUP:\n+            case GET_STATS:\n+            case GET_SUBSCRIPTIONS:\n+                isAuthorizedFuture = canLookupAsync(topicName, role, authData)\n+                        .thenCombine(validateTenantAdminAccess(topicName.getTenant(), role, authData),", "originalCommit": "538ce78b25aeb97ebca547a5680c006dbf898f9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82078d931b1a5063ccb9813278da2d5307da815c", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex f89d79f7fa9..853030e8ff2 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -547,6 +547,8 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n \n         switch (operation) {\n             case LOOKUP:\n+                isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n+                break;\n             case GET_STATS:\n             case GET_SUBSCRIPTIONS:\n                 isAuthorizedFuture = canLookupAsync(topicName, role, authData)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTY5Njc0OA==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r591696748", "bodyText": "why do we need to check canProduceAsync for TERMINATE?", "author": "sijie", "createdAt": "2021-03-10T16:54:52Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -545,29 +546,88 @@ private void validatePoliciesReadOnlyAccess() {\n         CompletableFuture<Boolean> isAuthorizedFuture;\n \n         switch (operation) {\n-            case LOOKUP: isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n+            case LOOKUP:\n+            case GET_STATS:\n+            case GET_SUBSCRIPTIONS:\n+                isAuthorizedFuture = canLookupAsync(topicName, role, authData)\n+                        .thenCombine(validateTenantAdminAccess(topicName.getTenant(), role, authData),\n+                            (isTenantAdmin, isAuthorized) -> {\n+                                if (log.isDebugEnabled()) {\n+                                    log.debug(\"Verify if role {} is allowed to {} to topic {}:\"\n+                                                    + \" isSuperUser={}, isTenantAdmin={}\",\n+                                            role, operation, topicName, isTenantAdmin, isAuthorized);\n+                                }\n+                                return isTenantAdmin || isAuthorized;\n+                            });\n+                break;\n+            case PRODUCE:\n+                isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n+                break;\n+            case TERMINATE:\n+                isAuthorizedFuture = canProduceAsync(topicName, role, authData)", "originalCommit": "538ce78b25aeb97ebca547a5680c006dbf898f9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82078d931b1a5063ccb9813278da2d5307da815c", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex f89d79f7fa9..853030e8ff2 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -547,6 +547,8 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n \n         switch (operation) {\n             case LOOKUP:\n+                isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n+                break;\n             case GET_STATS:\n             case GET_SUBSCRIPTIONS:\n                 isAuthorizedFuture = canLookupAsync(topicName, role, authData)\n"}}, {"oid": "82078d931b1a5063ccb9813278da2d5307da815c", "url": "https://github.com/apache/pulsar/commit/82078d931b1a5063ccb9813278da2d5307da815c", "message": "lookup check", "committedDate": "2021-03-11T11:58:28Z", "type": "forcePushed"}, {"oid": "6324f10f4535c3e52b8d9392576f3a853f0301ad", "url": "https://github.com/apache/pulsar/commit/6324f10f4535c3e52b8d9392576f3a853f0301ad", "message": "fix test: as anonymousUser is tenantadmin, and cluster anonymousRole is anonymousUser this test must pass", "committedDate": "2021-03-12T00:02:26Z", "type": "forcePushed"}, {"oid": "011a6858cfe41000c467835d59e2ea7dca396ee5", "url": "https://github.com/apache/pulsar/commit/011a6858cfe41000c467835d59e2ea7dca396ee5", "message": "fix test: as anonymousUser is tenantadmin, and cluster anonymousRole is anonymousUser this test must pass", "committedDate": "2021-03-12T00:52:45Z", "type": "forcePushed"}, {"oid": "92685b7cb34b0a453a79743e7f84031ad0ef8a93", "url": "https://github.com/apache/pulsar/commit/92685b7cb34b0a453a79743e7f84031ad0ef8a93", "message": "fix test: as anonymousUser is tenantadmin, and cluster anonymousRole is anonymousUser this test must pass", "committedDate": "2021-03-12T00:56:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTA2NTcwNw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r595065707", "bodyText": "@sijie can you confirm that this change is correct regarding the test anonymousUser has all rights to the topics so this new consumer should pass. Correct?", "author": "KannarFr", "createdAt": "2021-03-16T11:04:02Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/AuthenticatedProducerConsumerTest.java", "diffHunk": "@@ -245,15 +245,8 @@ public void testAnonymousSyncProducerAndConsumer(int batchMessageDelayMs) throws\n         replacePulsarClient(PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl())\n                 .operationTimeout(1, TimeUnit.SECONDS));\n \n-        // unauthorized topic test\n-        Exception pulsarClientException = null;\n-        try {\n-            pulsarClient.newConsumer().topic(\"persistent://my-property/my-ns/other-topic\")\n-                    .subscriptionName(\"my-subscriber-name\").subscribe();\n-        } catch (Exception e) {\n-            pulsarClientException = e;\n-        }\n-        Assert.assertTrue(pulsarClientException instanceof PulsarClientException);\n+        pulsarClient.newConsumer().topic(\"persistent://my-property/my-ns/other-topic\")\n+                .subscriptionName(\"my-subscriber-name\").subscribe();\n ", "originalCommit": "fc93828fe04fdfed0beb9494766c0cd3cf0a1fa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "058ed63a0a27dd88f3987e55c131fe66a8bcdf0f", "url": "https://github.com/apache/pulsar/commit/058ed63a0a27dd88f3987e55c131fe66a8bcdf0f", "message": "fix test: add missing validateTopicOwnership", "committedDate": "2021-03-18T12:37:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY1ODY2NA==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r606658664", "bodyText": "I checked the get subscriptions API, originally, it uses validationReadOperationOnTopic which requires a tenant admin permission or a consume permission. After this change, it will also request produce permission.", "author": "zymap", "createdAt": "2021-04-03T12:23:30Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java", "diffHunk": "@@ -542,30 +543,56 @@ private void validatePoliciesReadOnlyAccess() {\n                                                                String role,\n                                                                TopicOperation operation,\n                                                                AuthenticationDataSource authData) {\n+        log.debug(\"Check allowTopicOperationAsync [\" + operation.name() + \"] on [\" + topicName.toString() + \"].\");\n+\n         CompletableFuture<Boolean> isAuthorizedFuture;\n \n         switch (operation) {\n-            case LOOKUP: isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n+            case LOOKUP:\n+            case GET_STATS:\n+            case GET_SUBSCRIPTIONS:", "originalCommit": "058ed63a0a27dd88f3987e55c131fe66a8bcdf0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzcxNTA5MQ==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r607715091", "bodyText": "Fixed.", "author": "KannarFr", "createdAt": "2021-04-06T10:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY1ODY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzc5NDE1Mw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r607794153", "bodyText": "@zymap", "author": "KannarFr", "createdAt": "2021-04-06T12:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY1ODY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "727b7a9fb38f87bce72e658a012dee8516787279", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\nindex d05f0762ab3..697dd226a1f 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/PulsarAuthorizationProvider.java\n\n@@ -550,12 +550,12 @@ public class PulsarAuthorizationProvider implements AuthorizationProvider {\n         switch (operation) {\n             case LOOKUP:\n             case GET_STATS:\n-            case GET_SUBSCRIPTIONS:\n                 isAuthorizedFuture = canLookupAsync(topicName, role, authData);\n                 break;\n             case PRODUCE:\n                 isAuthorizedFuture = canProduceAsync(topicName, role, authData);\n                 break;\n+            case GET_SUBSCRIPTIONS:\n             case CONSUME:\n             case SUBSCRIBE:\n             case UNSUBSCRIBE:\n"}}, {"oid": "727b7a9fb38f87bce72e658a012dee8516787279", "url": "https://github.com/apache/pulsar/commit/727b7a9fb38f87bce72e658a012dee8516787279", "message": "get_subscriptions must check consumption rights", "committedDate": "2021-04-20T21:39:41Z", "type": "forcePushed"}, {"oid": "4dd06537b20363305785a75437bc68b2fa3a01d8", "url": "https://github.com/apache/pulsar/commit/4dd06537b20363305785a75437bc68b2fa3a01d8", "message": "topics authz granularity", "committedDate": "2021-04-20T21:42:27Z", "type": "forcePushed"}, {"oid": "a395c702116a2d21883fafc7559904f6ac451beb", "url": "https://github.com/apache/pulsar/commit/a395c702116a2d21883fafc7559904f6ac451beb", "message": "support Prefix", "committedDate": "2021-04-21T11:26:08Z", "type": "forcePushed"}, {"oid": "3546f720ae9a35fc058fc08fca35c5f9bbff48fb", "url": "https://github.com/apache/pulsar/commit/3546f720ae9a35fc058fc08fca35c5f9bbff48fb", "message": "support Prefix", "committedDate": "2021-04-23T10:30:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc2OTIzNA==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r627769234", "bodyText": "Do we need to log here? The exception would be expected if the client is not authorized and since it's already bubbled up, we would end up logging that twice.", "author": "merlimat", "createdAt": "2021-05-06T21:15:02Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/TopicLookupBase.java", "diffHunk": "@@ -126,14 +128,17 @@ protected void internalLookupTopicAsync(TopicName topicName, boolean authoritati\n \n     private void validateAdminAndClientPermission(TopicName topic) throws RestException, Exception {\n         try {\n-            validateAdminAccessForTenant(topic.getTenant());\n+            validateTopicOperation(topic, TopicOperation.LOOKUP);\n         } catch (Exception e) {\n-            checkConnect(topic);\n+            // unknown error marked as internal server error\n+            log.warn(\"Unexpected error while authorizing TopicOperation.LOOKUP. topic={}, role={}. Error: {}\",", "originalCommit": "bf33f043989bdd2c8946cd38e2e9d35b95c35289", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc3NzgyMw==", "url": "https://github.com/apache/pulsar/pull/7523#discussion_r627777823", "bodyText": "Dropped in 596d85f.\nPR rebased due to a recent conflict.", "author": "KannarFr", "createdAt": "2021-05-06T21:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc2OTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "596d85f418efe40b50114da3d4a6d126cb796882", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/TopicLookupBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/TopicLookupBase.java\nindex 5f2bbc9873c..44d0ff2ec88 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/TopicLookupBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/TopicLookupBase.java\n\n@@ -131,8 +135,6 @@ public class TopicLookupBase extends PulsarWebResource {\n             validateTopicOperation(topic, TopicOperation.LOOKUP);\n         } catch (Exception e) {\n             // unknown error marked as internal server error\n-            log.warn(\"Unexpected error while authorizing TopicOperation.LOOKUP. topic={}, role={}. Error: {}\",\n-                    topic, clientAppId(), e.getMessage(), e);\n             throw new RestException(e);\n         }\n     }\n"}}, {"oid": "9a5399f4cd08b3a1838a7bb0f8933a18338e39da", "url": "https://github.com/apache/pulsar/commit/9a5399f4cd08b3a1838a7bb0f8933a18338e39da", "message": "topics authz granularity", "committedDate": "2021-05-06T21:26:35Z", "type": "commit"}, {"oid": "2f19530a7aca1db6c06ea37bbe9af5a615f4fe7b", "url": "https://github.com/apache/pulsar/commit/2f19530a7aca1db6c06ea37bbe9af5a615f4fe7b", "message": "support Prefix", "committedDate": "2021-05-06T21:26:36Z", "type": "commit"}, {"oid": "72d095f7a225896e9c62aa3c88be220645dd122b", "url": "https://github.com/apache/pulsar/commit/72d095f7a225896e9c62aa3c88be220645dd122b", "message": "fix test", "committedDate": "2021-05-06T21:26:36Z", "type": "commit"}, {"oid": "596d85f418efe40b50114da3d4a6d126cb796882", "url": "https://github.com/apache/pulsar/commit/596d85f418efe40b50114da3d4a6d126cb796882", "message": "drop log", "committedDate": "2021-05-06T21:29:00Z", "type": "commit"}, {"oid": "596d85f418efe40b50114da3d4a6d126cb796882", "url": "https://github.com/apache/pulsar/commit/596d85f418efe40b50114da3d4a6d126cb796882", "message": "drop log", "committedDate": "2021-05-06T21:29:00Z", "type": "forcePushed"}, {"oid": "596d85f418efe40b50114da3d4a6d126cb796882", "url": "https://github.com/apache/pulsar/commit/596d85f418efe40b50114da3d4a6d126cb796882", "message": "drop log", "committedDate": "2021-05-06T21:29:00Z", "type": "forcePushed"}]}