{"pr_number": 8098, "pr_title": "Add ability to specify EnvironmentBasedSecretsProvider in LocalRunner", "pr_createdAt": "2020-09-22T04:07:44Z", "pr_url": "https://github.com/apache/pulsar/pull/8098", "timeline": [{"oid": "e49261c6e42419dc2f96cddbb7f901ac34cf3e5e", "url": "https://github.com/apache/pulsar/commit/e49261c6e42419dc2f96cddbb7f901ac34cf3e5e", "message": "Add ability to specify EnvironmentBasedSecretsProvider in LocalRunner", "committedDate": "2020-09-22T04:06:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MDUyOA==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492890528", "bodyText": "I think there is already too arguments for the CLI.  Lets try to create something more generic.  Instead of creating an argument for a specific provider, can we create an argument to allow users to specify the secret provider type?  In the future, if we add more providers, I don't want to keep add one-of arguments.  For example, can we create a enum?\nEnum SecretsProviderType {\nENV,\nDEFAULT,\n...\n}\nbased on the enum determine", "author": "jerrypeng", "createdAt": "2020-09-22T16:54:36Z", "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java", "diffHunk": "@@ -627,6 +627,8 @@ protected void validateFunctionConfigs(FunctionConfig functionConfig) {\n         protected Integer instanceIdOffset = 0;\n         @Parameter(names = \"--runtime\", description = \"either THREAD or PROCESS. Only applies for Java functions\")\n         protected String runtime;\n+        @Parameter(names = \"--environment-based-secrets-provider\", description = \"Should we use environment based secret provider\")", "originalCommit": "e49261c6e42419dc2f96cddbb7f901ac34cf3e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NTU4Mg==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492895582", "bodyText": "Actually we should just let the user to specify class of the secrets configurator to use.  That is simplest and generic.\n--secrets-provider-configurator-classname", "author": "jerrypeng", "createdAt": "2020-09-22T17:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTAxMw==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493205013", "bodyText": "Changed", "author": "srkukarni", "createdAt": "2020-09-23T05:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MDUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "ba7a381ee15bbff4b2210de5fc28f372b068e411", "chunk": "diff --git a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java\nindex eb875a3bf0e..4792a6f50dc 100644\n--- a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java\n+++ b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java\n\n@@ -627,8 +627,10 @@ public class CmdFunctions extends CmdBase {\n         protected Integer instanceIdOffset = 0;\n         @Parameter(names = \"--runtime\", description = \"either THREAD or PROCESS. Only applies for Java functions\")\n         protected String runtime;\n-        @Parameter(names = \"--environment-based-secrets-provider\", description = \"Should we use environment based secret provider\")\n-        protected boolean environmentBasedSecretsProvider;\n+        @Parameter(names = \"--secrets-provider-classname\", description = \"Whats the classname for secrets provider\")\n+        protected String secretsProviderClassName;\n+        @Parameter(names = \"--secrets-provider-config\", description = \"Config that needs to be passed to secrets provider\")\n+        protected String secretsProviderConfig;\n \n         private void mergeArgs() {\n             if (!StringUtils.isBlank(DEPRECATED_stateStorageServiceUrl)) stateStorageServiceUrl = DEPRECATED_stateStorageServiceUrl;\n"}}, {"oid": "ba7a381ee15bbff4b2210de5fc28f372b068e411", "url": "https://github.com/apache/pulsar/commit/ba7a381ee15bbff4b2210de5fc28f372b068e411", "message": "Addressed feedback", "committedDate": "2020-09-22T17:43:00Z", "type": "commit"}, {"oid": "2fcfdde0e25121f28e71f9ae76b60a23a4b8ef63", "url": "https://github.com/apache/pulsar/commit/2fcfdde0e25121f28e71f9ae76b60a23a4b8ef63", "message": "Took out wildcard", "committedDate": "2020-09-22T17:45:32Z", "type": "commit"}, {"oid": "41434775b3ca4fae735f5f037585c95279729ed9", "url": "https://github.com/apache/pulsar/commit/41434775b3ca4fae735f5f037585c95279729ed9", "message": "Fix build", "committedDate": "2020-09-22T17:46:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyODQyNQ==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492928425", "bodyText": "Just create an instance using the class name. Use method:\nhttps://github.com/apache/pulsar/blob/master/pulsar-common/src/main/java/org/apache/pulsar/common/util/Reflections.java#L64", "author": "jerrypeng", "createdAt": "2020-09-22T17:56:56Z", "path": "pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java", "diffHunk": "@@ -418,11 +428,24 @@ private void startThreadedMode(org.apache.pulsar.functions.proto.Function.Functi\n                                            int parallelism, int instanceIdOffset, String serviceUrl,\n                                            String stateStorageServiceUrl, AuthenticationConfig authConfig,\n                                            String userCodeFile) throws Exception {\n+        SecretsProvider secretsProvider;\n+        if (secretsProviderClassName != null) {\n+            if (secretsProviderClassName.equals(ClearTextSecretsProvider.class.getName())) {", "originalCommit": "41434775b3ca4fae735f5f037585c95279729ed9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTA0NQ==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493205045", "bodyText": "Done", "author": "srkukarni", "createdAt": "2020-09-23T05:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyODQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2f1717dac772bf198b7d8b691e95a24e770292f7", "chunk": "diff --git a/pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java b/pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java\nindex c3850417331..e00affcc7a4 100644\n--- a/pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java\n+++ b/pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java\n\n@@ -430,13 +431,12 @@ public class LocalRunner {\n                                            String userCodeFile) throws Exception {\n         SecretsProvider secretsProvider;\n         if (secretsProviderClassName != null) {\n-            if (secretsProviderClassName.equals(ClearTextSecretsProvider.class.getName())) {\n-                secretsProvider = new ClearTextSecretsProvider();\n-            } else if (secretsProviderClassName.equals(EnvironmentBasedSecretsProvider.class.getName())) {\n-                secretsProvider = new EnvironmentBasedSecretsProvider();\n-            } else {\n-                throw new RuntimeException(\"Unsupported secrets provider for localrun \" + secretsProviderClassName);\n+            secretsProvider = (SecretsProvider) Reflections.createInstance(secretsProviderClassName, ClassLoader.getSystemClassLoader());\n+            Map<String, String> config = null;\n+            if (secretsProviderConfig != null) {\n+                config = (Map<String, String>)new Gson().fromJson(secretsProviderConfig, Map.class);\n             }\n+            secretsProvider.init(config);\n         } else {\n             secretsProvider = new ClearTextSecretsProvider();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTEwMQ==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492929101", "bodyText": "These comments don't make sense for this class", "author": "jerrypeng", "createdAt": "2020-09-22T17:58:03Z", "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.secretsprovider.EnvironmentBasedSecretsProvider;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This file defines the SecretsProviderConfigurator that will be used by default for running in Kubernetes.", "originalCommit": "41434775b3ca4fae735f5f037585c95279729ed9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTA4OQ==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493205089", "bodyText": "Reworded", "author": "srkukarni", "createdAt": "2020-09-23T05:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2f1717dac772bf198b7d8b691e95a24e770292f7", "chunk": "diff --git a/pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java b/pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java\nindex be2e495c230..9eb389f394f 100644\n--- a/pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java\n+++ b/pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java\n\n@@ -21,17 +21,13 @@ package org.apache.pulsar.functions.secretsproviderconfigurator;\n import com.google.gson.reflect.TypeToken;\n import io.kubernetes.client.openapi.models.V1PodSpec;\n import org.apache.pulsar.functions.proto.Function;\n-import org.apache.pulsar.functions.secretsprovider.EnvironmentBasedSecretsProvider;\n \n import java.lang.reflect.Type;\n import java.util.Map;\n \n /**\n- * This file defines the SecretsProviderConfigurator that will be used by default for running in Kubernetes.\n- * As such this implementation is strictly when workers are configured to use kubernetes runtime.\n- * We use kubernetes in built secrets and bind them as environment variables within the function container\n- * to ensure that the secrets are available to the function at runtime. Then we plug in the\n- * EnvironmentBasedSecretsConfig as the secrets provider who knows how to read these environment variables.\n+ * This is a very simple secrets provider which wires in a given secrets provider classname/config\n+ * to the function instances/containers. This does not do any special kubernetes specific wiring.\n  */\n public class NameAndConfigBasedSecretsProviderConfigurator implements SecretsProviderConfigurator {\n     private String className;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzNzgxMg==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492937812", "bodyText": "There is not really point to have this class. Just refactor ProcessRuntime to take in a SecretsProvider like ThreadRuntime", "author": "jerrypeng", "createdAt": "2020-09-22T18:12:48Z", "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.secretsprovider.EnvironmentBasedSecretsProvider;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This file defines the SecretsProviderConfigurator that will be used by default for running in Kubernetes.\n+ * As such this implementation is strictly when workers are configured to use kubernetes runtime.\n+ * We use kubernetes in built secrets and bind them as environment variables within the function container\n+ * to ensure that the secrets are available to the function at runtime. Then we plug in the\n+ * EnvironmentBasedSecretsConfig as the secrets provider who knows how to read these environment variables.\n+ */\n+public class NameAndConfigBasedSecretsProviderConfigurator implements SecretsProviderConfigurator {", "originalCommit": "41434775b3ca4fae735f5f037585c95279729ed9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTE1MA==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493205150", "bodyText": "Not really in the scope of the pr", "author": "srkukarni", "createdAt": "2020-09-23T05:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzNzgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "2f1717dac772bf198b7d8b691e95a24e770292f7", "chunk": "diff --git a/pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java b/pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java\nindex be2e495c230..9eb389f394f 100644\n--- a/pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java\n+++ b/pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java\n\n@@ -21,17 +21,13 @@ package org.apache.pulsar.functions.secretsproviderconfigurator;\n import com.google.gson.reflect.TypeToken;\n import io.kubernetes.client.openapi.models.V1PodSpec;\n import org.apache.pulsar.functions.proto.Function;\n-import org.apache.pulsar.functions.secretsprovider.EnvironmentBasedSecretsProvider;\n \n import java.lang.reflect.Type;\n import java.util.Map;\n \n /**\n- * This file defines the SecretsProviderConfigurator that will be used by default for running in Kubernetes.\n- * As such this implementation is strictly when workers are configured to use kubernetes runtime.\n- * We use kubernetes in built secrets and bind them as environment variables within the function container\n- * to ensure that the secrets are available to the function at runtime. Then we plug in the\n- * EnvironmentBasedSecretsConfig as the secrets provider who knows how to read these environment variables.\n+ * This is a very simple secrets provider which wires in a given secrets provider classname/config\n+ * to the function instances/containers. This does not do any special kubernetes specific wiring.\n  */\n public class NameAndConfigBasedSecretsProviderConfigurator implements SecretsProviderConfigurator {\n     private String className;\n"}}, {"oid": "2f1717dac772bf198b7d8b691e95a24e770292f7", "url": "https://github.com/apache/pulsar/commit/2f1717dac772bf198b7d8b691e95a24e770292f7", "message": "Address feedback", "committedDate": "2020-09-23T05:25:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwOTUxNQ==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493209515", "bodyText": "nit not sure why we mention kubernetes here in the comment.  SecretsProviderConfigurator are not kubernetes specific", "author": "jerrypeng", "createdAt": "2020-09-23T05:40:02Z", "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This is a very simple secrets provider which wires in a given secrets provider classname/config\n+ * to the function instances/containers. This does not do any special kubernetes specific wiring.", "originalCommit": "2f1717dac772bf198b7d8b691e95a24e770292f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwOTU4MA==", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493209580", "bodyText": "nit remove this comment", "author": "jerrypeng", "createdAt": "2020-09-23T05:40:14Z", "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This is a very simple secrets provider which wires in a given secrets provider classname/config\n+ * to the function instances/containers. This does not do any special kubernetes specific wiring.\n+ */\n+public class NameAndConfigBasedSecretsProviderConfigurator implements SecretsProviderConfigurator {\n+    private String className;\n+    private Map<String, String> config;\n+    public NameAndConfigBasedSecretsProviderConfigurator(String className, Map<String, String> config) {\n+        this.className = className;\n+        this.config = config;\n+    }\n+    @Override\n+    public String getSecretsProviderClassName(Function.FunctionDetails functionDetails) {\n+        return className;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSecretsProviderConfig(Function.FunctionDetails functionDetails) {\n+        return config;\n+    }\n+\n+    // Kubernetes secrets can be exposed as volume mounts or as environment variables in the pods. We are currently using the", "originalCommit": "2f1717dac772bf198b7d8b691e95a24e770292f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}