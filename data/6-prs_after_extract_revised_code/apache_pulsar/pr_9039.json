{"pr_number": 9039, "pr_title": "[Feature] Introduce continuous offset for pulsar", "pr_createdAt": "2020-12-23T07:59:21Z", "pr_url": "https://github.com/apache/pulsar/pull/9039", "timeline": [{"oid": "1918e00eabf6daa6a8a48a651465b868ea91b331", "url": "https://github.com/apache/pulsar/commit/1918e00eabf6daa6a8a48a651465b868ea91b331", "message": "add offset for broker entry metadata", "committedDate": "2020-12-21T09:27:27Z", "type": "commit"}, {"oid": "74a9a083cf4bc59fcd4ab498f9e2b395c50bffdb", "url": "https://github.com/apache/pulsar/commit/74a9a083cf4bc59fcd4ab498f9e2b395c50bffdb", "message": "add managedledger interceptor", "committedDate": "2020-12-22T02:50:54Z", "type": "commit"}, {"oid": "c38bba15f646654783fd7a27c8bf0ec498cb2384", "url": "https://github.com/apache/pulsar/commit/c38bba15f646654783fd7a27c8bf0ec498cb2384", "message": "initialize intercptor for ML", "committedDate": "2020-12-22T03:09:01Z", "type": "commit"}, {"oid": "483cee9faa435addb5c127b2996f73bb4e4e58da", "url": "https://github.com/apache/pulsar/commit/483cee9faa435addb5c127b2996f73bb4e4e58da", "message": "interceptor entry before add to bookie to generator offset", "committedDate": "2020-12-22T03:37:00Z", "type": "commit"}, {"oid": "01da511fbfefecf2411d9038ae98e3dab4b6e569", "url": "https://github.com/apache/pulsar/commit/01da511fbfefecf2411d9038ae98e3dab4b6e569", "message": "add asyncFindPosition method for ManagedLedger", "committedDate": "2020-12-22T08:50:02Z", "type": "commit"}, {"oid": "4d1dfb397de9e156dec579d4aba8ad57b3bfa86f", "url": "https://github.com/apache/pulsar/commit/4d1dfb397de9e156dec579d4aba8ad57b3bfa86f", "message": "support append offset in  managedInterceptor", "committedDate": "2020-12-22T11:15:01Z", "type": "commit"}, {"oid": "d8cbd22610081e0683896641c6627971589c4907", "url": "https://github.com/apache/pulsar/commit/d8cbd22610081e0683896641c6627971589c4907", "message": "interceptor pending write request", "committedDate": "2020-12-22T11:29:15Z", "type": "commit"}, {"oid": "5137d6f42409a7943d8986ee0fb3c817a6ae8f01", "url": "https://github.com/apache/pulsar/commit/5137d6f42409a7943d8986ee0fb3c817a6ae8f01", "message": "add offet to ManagedLedgerInfo", "committedDate": "2020-12-22T11:36:19Z", "type": "commit"}, {"oid": "4205436ad809dcee2e19539744e2019f63ef43b1", "url": "https://github.com/apache/pulsar/commit/4205436ad809dcee2e19539744e2019f63ef43b1", "message": "add test for offset", "committedDate": "2020-12-22T11:59:12Z", "type": "commit"}, {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "url": "https://github.com/apache/pulsar/commit/a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "message": "add test for ManagedLedgerInterceptor", "committedDate": "2020-12-22T13:06:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0MzU5Mw==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548143593", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n          \n          \n            \n                CompletableFuture<Position> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "author": "sijie", "createdAt": "2020-12-23T19:00:07Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -520,4 +587,14 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Upd\n      * Roll current ledger if it is full\n      */\n     void rollCurrentLedgerIfFull();\n+\n+    /**\n+     * Find position by sequenceId.\n+     * */\n+    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "originalCommit": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjMyMA==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372320", "bodyText": "fixed", "author": "aloyszhang", "createdAt": "2020-12-24T04:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0MzU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\nindex 0c1a71c2f4e..6274f977051 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\n\n@@ -591,7 +588,7 @@ public interface ManagedLedger {\n     /**\n      * Find position by sequenceId.\n      * */\n-    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n+    CompletableFuture<Position> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n \n     /**\n      * Get the ManagedLedgerInterceptor for ManagedLedger.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NDA0Mg==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548144042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n          \n          \n            \n                CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n          \n      \n    \n    \n  \n\nCan we use the java.util.Predicate?", "author": "sijie", "createdAt": "2020-12-23T19:00:42Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -520,4 +587,14 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Upd\n      * Roll current ledger if it is full\n      */\n     void rollCurrentLedgerIfFull();\n+\n+    /**\n+     * Find position by sequenceId.\n+     * */\n+    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "originalCommit": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNzUwNw==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548337507", "bodyText": "condition of OpFindNewest is  com.google.common.base.Predicate type, so the parameter type here should also be com.google.common.base.Predicate", "author": "aloyszhang", "createdAt": "2020-12-24T01:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NDA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMjEzNA==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548422134", "bodyText": "I'd recommend using java.util.Predicate in the interface. You can just write a wrapper to convert a java.util.Predicate to a guava Predicate.", "author": "sijie", "createdAt": "2020-12-24T07:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NDA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\nindex 0c1a71c2f4e..6274f977051 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\n\n@@ -591,7 +588,7 @@ public interface ManagedLedger {\n     /**\n      * Find position by sequenceId.\n      * */\n-    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n+    CompletableFuture<Position> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n \n     /**\n      * Get the ManagedLedgerInterceptor for ManagedLedger.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMTA3Nw==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548211077", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return addEntry(data, batchSize,0, data.length);\n          \n          \n            \n                    return addEntry(data, batchSize, 0, data.length);", "author": "sijie", "createdAt": "2020-12-23T20:30:25Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -550,6 +566,11 @@ public Position addEntry(byte[] data) throws InterruptedException, ManagedLedger\n         return addEntry(data, 0, data.length);\n     }\n \n+    @Override\n+    public Position addEntry(byte[] data, int batchSize) throws InterruptedException, ManagedLedgerException {\n+        return addEntry(data, batchSize,0, data.length);", "originalCommit": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjQ1Mg==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372452", "bodyText": "fixed", "author": "aloyszhang", "createdAt": "2020-12-24T04:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMTA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\nindex 9d7e4144a15..562a3318f90 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n\n@@ -567,8 +567,8 @@ public class ManagedLedgerImpl implements ManagedLedger, CreateCallback {\n     }\n \n     @Override\n-    public Position addEntry(byte[] data, int batchSize) throws InterruptedException, ManagedLedgerException {\n-        return addEntry(data, batchSize,0, data.length);\n+    public Position addEntry(byte[] data, int numberOfMessages) throws InterruptedException, ManagedLedgerException {\n+        return addEntry(data, numberOfMessages, 0, data.length);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMjU4OQ==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548212589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"[{}] Failed to interceptor entry before add to bookie.\", name, e);\n          \n          \n            \n                        log.error(\"[{}] Failed to intercept adding an entry to bookie.\", name, e);", "author": "sijie", "createdAt": "2020-12-23T20:32:29Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -672,8 +747,27 @@ private synchronized void internalAsyncAddEntry(OpAddEntry addOperation) {\n                 addOperation.setCloseWhenDone(true);\n                 STATE_UPDATER.set(this, State.ClosingLedger);\n             }\n+            // interceptor entry before add to bookie\n+            if (beforeAddEntry(addOperation)) {\n+                addOperation.initiate();\n+            }\n+        }\n+    }\n \n-            addOperation.initiate();\n+    private boolean beforeAddEntry(OpAddEntry addOperation) {\n+        // if no interceptor, just return true to make sure addOperation will be initiate()\n+        if (managedLedgerInterceptor == null) {\n+            return true;\n+        }\n+        try {\n+            managedLedgerInterceptor.beforeAddEntry(addOperation, addOperation.getBatchSize());\n+            return true;\n+        } catch (Exception e) {\n+            addOperation.failed(\n+                    new ManagedLedgerInterceptException(\"Interceptor managed ledger before add to bookie failed.\"));\n+            ReferenceCountUtil.release(addOperation.data);\n+            log.error(\"[{}] Failed to interceptor entry before add to bookie.\", name, e);", "originalCommit": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjQ4Nw==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372487", "bodyText": "fixed", "author": "aloyszhang", "createdAt": "2020-12-24T04:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMjU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\nindex 9d7e4144a15..562a3318f90 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n\n@@ -760,13 +760,13 @@ public class ManagedLedgerImpl implements ManagedLedger, CreateCallback {\n             return true;\n         }\n         try {\n-            managedLedgerInterceptor.beforeAddEntry(addOperation, addOperation.getBatchSize());\n+            managedLedgerInterceptor.beforeAddEntry(addOperation, addOperation.getNumberOfMessages());\n             return true;\n         } catch (Exception e) {\n             addOperation.failed(\n                     new ManagedLedgerInterceptException(\"Interceptor managed ledger before add to bookie failed.\"));\n             ReferenceCountUtil.release(addOperation.data);\n-            log.error(\"[{}] Failed to interceptor entry before add to bookie.\", name, e);\n+            log.error(\"[{}] Failed to intercept adding an entry to bookie.\", name, e);\n             return false;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDI0NQ==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548214245", "bodyText": "Can you add the interface annotations to the new interface? See https://github.com/apache/pulsar/wiki/PIP-72%3A-Introduce-Pulsar-Interface-Taxonomy%3A-Audience-and-Stability-Classification", "author": "sijie", "createdAt": "2020-12-23T20:34:37Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.interceptor;\n+\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interceptor for ManagedLedger.\n+ * */\n+public interface ManagedLedgerInterceptor {", "originalCommit": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjQ5OA==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372498", "bodyText": "fixed", "author": "aloyszhang", "createdAt": "2020-12-24T04:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDI0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java\nindex 69706a07a1b..f5d9f12d872 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java\n\n@@ -19,6 +19,8 @@\n package org.apache.bookkeeper.mledger.interceptor;\n \n import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.common.annotation.InterfaceAudience;\n+import org.apache.bookkeeper.common.annotation.InterfaceStability;\n import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n \n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDQxMQ==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548214411", "bodyText": "Can you add javadoc to the methods?", "author": "sijie", "createdAt": "2020-12-23T20:34:49Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.interceptor;\n+\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interceptor for ManagedLedger.\n+ * */\n+public interface ManagedLedgerInterceptor {\n+    OpAddEntry beforeAddEntry(OpAddEntry op, int batchSize);", "originalCommit": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjUzMw==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372533", "bodyText": "fixed", "author": "aloyszhang", "createdAt": "2020-12-24T04:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java\nindex 69706a07a1b..f5d9f12d872 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java\n\n@@ -19,6 +19,8 @@\n package org.apache.bookkeeper.mledger.interceptor;\n \n import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.common.annotation.InterfaceAudience;\n+import org.apache.bookkeeper.common.annotation.InterfaceStability;\n import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n \n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNjU1Mg==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548216552", "bodyText": "kafka offset is not a very good term to be used for describing the index of a message within a log stream. Instead, I would suggest calling it index or logIndex similar to the term used in the Raft algorithm (https://cs.stackexchange.com/questions/97542/raft-algorithm-whats-the-meaning-of-concept-index).", "author": "sijie", "createdAt": "2020-12-23T20:37:28Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/intercept/ManagedLedgerInterceptorImpl.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.intercept;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.api.LedgerEntries;\n+import org.apache.bookkeeper.client.api.LedgerEntry;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+import org.apache.bookkeeper.mledger.interceptor.ManagedLedgerInterceptor;\n+import org.apache.pulsar.common.api.proto.PulsarApi;\n+import org.apache.pulsar.common.intercept.AppendOffsetMetadataInterceptor;\n+import org.apache.pulsar.common.intercept.BrokerEntryMetadataInterceptor;\n+import org.apache.pulsar.common.protocol.Commands;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ManagedLedgerInterceptorImpl implements ManagedLedgerInterceptor {\n+    private static final Logger log = LoggerFactory.getLogger(ManagedLedgerInterceptorImpl.class);\n+    private static final String OFFSET = \"offset\";", "originalCommit": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjU2OQ==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372569", "bodyText": "modify offset to index", "author": "aloyszhang", "createdAt": "2020-12-24T04:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNjU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/intercept/ManagedLedgerInterceptorImpl.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/intercept/ManagedLedgerInterceptorImpl.java\nindex 4b90ce31083..0e59d2f3fd7 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/intercept/ManagedLedgerInterceptorImpl.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/intercept/ManagedLedgerInterceptorImpl.java\n\n@@ -26,7 +26,7 @@ import org.apache.bookkeeper.client.api.LedgerEntry;\n import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n import org.apache.bookkeeper.mledger.interceptor.ManagedLedgerInterceptor;\n import org.apache.pulsar.common.api.proto.PulsarApi;\n-import org.apache.pulsar.common.intercept.AppendOffsetMetadataInterceptor;\n+import org.apache.pulsar.common.intercept.AppendIndexMetadataInterceptor;\n import org.apache.pulsar.common.intercept.BrokerEntryMetadataInterceptor;\n import org.apache.pulsar.common.protocol.Commands;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIyMjQ5OQ==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548222499", "bodyText": "How is the batchSize passed to asyncAddEntry? I failed to see how did you do that in this pull request.\nAt the same time, I think batchSize is not a good term. If I understand this correctly, it should be numberOfMessages, correct?", "author": "sijie", "createdAt": "2020-12-23T20:45:22Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "diffHunk": "@@ -357,10 +357,7 @@ public void publishMessage(ByteBuf headersAndPayload, PublishContext publishCont\n                 messageDeduplication.isDuplicate(publishContext, headersAndPayload);\n         switch (status) {\n             case NotDup:\n-                // intercept headersAndPayload and add entry metadata\n-                if (appendBrokerEntryMetadata(headersAndPayload, publishContext)) {\n-                    ledger.asyncAddEntry(headersAndPayload, this, publishContext);\n-                }\n+                ledger.asyncAddEntry(headersAndPayload, this, publishContext);", "originalCommit": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjU5OA==", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372598", "bodyText": "fixed", "author": "aloyszhang", "createdAt": "2020-12-24T04:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIyMjQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java\nindex 3dd2d64e458..d086cd880d7 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java\n\n@@ -357,7 +357,8 @@ public class PersistentTopic extends AbstractTopic\n                 messageDeduplication.isDuplicate(publishContext, headersAndPayload);\n         switch (status) {\n             case NotDup:\n-                ledger.asyncAddEntry(headersAndPayload, this, publishContext);\n+                ledger.asyncAddEntry(headersAndPayload,\n+                        (int) publishContext.getNumberOfMessages(), this, publishContext);\n                 break;\n             case Dup:\n                 // Immediately acknowledge duplicated message\n"}}, {"oid": "3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "url": "https://github.com/apache/pulsar/commit/3b98e9f5cacd873802ac1df30e0ae2398fd0e8ee", "message": "apply comment", "committedDate": "2020-12-24T02:09:47Z", "type": "commit"}, {"oid": "d4fd5c813bb0b621c70f0877ac6dcf932335ffdd", "url": "https://github.com/apache/pulsar/commit/d4fd5c813bb0b621c70f0877ac6dcf932335ffdd", "message": "fix send error", "committedDate": "2020-12-24T03:20:38Z", "type": "commit"}]}