{"pr_number": 6478, "pr_title": "Fix create partitioned topic with a substring of an existing topic name.", "pr_createdAt": "2020-03-05T04:01:44Z", "pr_url": "https://github.com/apache/pulsar/pull/6478", "timeline": [{"oid": "830ac9b94bcef2a5e341ec2af2d89f2fcea1fc6f", "url": "https://github.com/apache/pulsar/commit/830ac9b94bcef2a5e341ec2af2d89f2fcea1fc6f", "message": "Fix create partitioned topic with a substring of an existing topic name.", "committedDate": "2020-03-05T03:55:56Z", "type": "commit"}, {"oid": "d49e6800e09bbb7ed7414350ade86d4ba50619e3", "url": "https://github.com/apache/pulsar/commit/d49e6800e09bbb7ed7414350ade86d4ba50619e3", "message": "Fix tests", "committedDate": "2020-03-05T11:04:48Z", "type": "commit"}, {"oid": "2495e5cea3721feb9358c8e2ccb32fda51d0dea2", "url": "https://github.com/apache/pulsar/commit/2495e5cea3721feb9358c8e2ccb32fda51d0dea2", "message": "handling resume async response exceptionally", "committedDate": "2020-03-05T15:02:25Z", "type": "commit"}, {"oid": "12825ba9f93e53b15e690d6e4790e6f2f9638cda", "url": "https://github.com/apache/pulsar/commit/12825ba9f93e53b15e690d6e4790e6f2f9638cda", "message": "Add more logs", "committedDate": "2020-03-05T15:07:23Z", "type": "commit"}, {"oid": "99f5486f2577571ec6ae1ba281c6b52553e737c1", "url": "https://github.com/apache/pulsar/commit/99f5486f2577571ec6ae1ba281c6b52553e737c1", "message": "Fix log", "committedDate": "2020-03-05T15:15:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NTAyNg==", "url": "https://github.com/apache/pulsar/pull/6478#discussion_r388655026", "bodyText": "@codelipenghui why it is globalZk() here?", "author": "sijie", "createdAt": "2020-03-06T00:58:28Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java", "diffHunk": "@@ -707,4 +709,93 @@ protected boolean isNamespaceReplicated(NamespaceName namespaceName) {\n         partitionedTopics.sort(null);\n         return partitionedTopics;\n     }\n+\n+    protected void internalCreatePartitionedTopic(AsyncResponse asyncResponse, int numPartitions) {\n+        try {\n+            validateAdminAccessForTenant(topicName.getTenant());\n+        } catch (Exception e) {\n+            log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, e);\n+            resumeAsyncResponseExceptionally(asyncResponse, e);\n+            return;\n+        }\n+        if (numPartitions <= 0) {\n+            asyncResponse.resume(new RestException(Status.NOT_ACCEPTABLE, \"Number of partitions should be more than 0\"));\n+            return;\n+        }\n+        checkTopicExistsAsync(topicName).thenAccept(exists -> {\n+            if (exists) {\n+                log.warn(\"[{}] Failed to create already existing topic {}\", clientAppId(), topicName);\n+                asyncResponse.resume(new RestException(Status.CONFLICT, \"This topic already exists\"));\n+            } else {\n+                try {\n+                    String path = ZkAdminPaths.partitionedTopicPath(topicName);\n+                    byte[] data = jsonMapper().writeValueAsBytes(new PartitionedTopicMetadata(numPartitions));\n+                    zkCreateOptimisticAsync(globalZk(), path, data, (rc, s, o, s1) -> {", "originalCommit": "99f5486f2577571ec6ae1ba281c6b52553e737c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY3MzI2Mw==", "url": "https://github.com/apache/pulsar/pull/6478#discussion_r388673263", "bodyText": "The partitioned topic metadata is stored in the global zookeeper.", "author": "codelipenghui", "createdAt": "2020-03-06T01:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NTAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "dd0077c44bdb5544e33e1b2dbddb525290dfcf8a", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\nindex 6d120ded3c6..32421d9c5ed 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\n\n@@ -732,18 +740,22 @@ public abstract class AdminResource extends PulsarWebResource {\n                     byte[] data = jsonMapper().writeValueAsBytes(new PartitionedTopicMetadata(numPartitions));\n                     zkCreateOptimisticAsync(globalZk(), path, data, (rc, s, o, s1) -> {\n                         if (KeeperException.Code.OK.intValue() == rc) {\n-                            if (topicName.isPersistent()) {\n-                                tryCreatePartitionsAsync(numPartitions);\n-                            }\n-                            globalZk().sync(path, (rc2, s2, ctx) -> {\n-                                if (KeeperException.Code.OK.intValue() == rc2) {\n-                                    log.info(\"[{}] Successfully created partitioned topic {}\", clientAppId(), topicName);\n-                                    asyncResponse.resume(Response.noContent().build());\n-                                } else {\n-                                    log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, KeeperException.create(KeeperException.Code.get(rc2)));\n-                                    asyncResponse.resume(new RestException(KeeperException.create(KeeperException.Code.get(rc2))));\n-                                }\n-                            }, null);\n+                            tryCreatePartitionsAsync(numPartitions).thenAccept(v -> {\n+                                globalZk().sync(path, (rc2, s2, ctx) -> {\n+                                    if (KeeperException.Code.OK.intValue() == rc2) {\n+                                        log.info(\"[{}] Successfully created partitioned topic {}\", clientAppId(), topicName);\n+                                        asyncResponse.resume(Response.noContent().build());\n+                                    } else {\n+                                        log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, KeeperException.create(KeeperException.Code.get(rc2)));\n+                                        asyncResponse.resume(new RestException(KeeperException.create(KeeperException.Code.get(rc2))));\n+                                    }\n+                                }, null);\n+                            }).exceptionally(e -> {\n+                                log.error(\"[{}] Failed to create partitions for topic {}\", clientAppId(), topicName);\n+                                // The partitioned topic is created but there are some partitions create failed\n+                                asyncResponse.resume(new RestException(e));\n+                                return null;\n+                            });\n                         } else if (KeeperException.Code.NODEEXISTS.intValue() == rc) {\n                             log.warn(\"[{}] Failed to create already existing partitioned topic {}\", clientAppId(), topicName);\n                             asyncResponse.resume(new RestException(Status.CONFLICT, \"Partitioned topic already exists\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NTE2NA==", "url": "https://github.com/apache/pulsar/pull/6478#discussion_r388655164", "bodyText": "same comment as above", "author": "sijie", "createdAt": "2020-03-06T00:58:40Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java", "diffHunk": "@@ -707,4 +709,93 @@ protected boolean isNamespaceReplicated(NamespaceName namespaceName) {\n         partitionedTopics.sort(null);\n         return partitionedTopics;\n     }\n+\n+    protected void internalCreatePartitionedTopic(AsyncResponse asyncResponse, int numPartitions) {\n+        try {\n+            validateAdminAccessForTenant(topicName.getTenant());\n+        } catch (Exception e) {\n+            log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, e);\n+            resumeAsyncResponseExceptionally(asyncResponse, e);\n+            return;\n+        }\n+        if (numPartitions <= 0) {\n+            asyncResponse.resume(new RestException(Status.NOT_ACCEPTABLE, \"Number of partitions should be more than 0\"));\n+            return;\n+        }\n+        checkTopicExistsAsync(topicName).thenAccept(exists -> {\n+            if (exists) {\n+                log.warn(\"[{}] Failed to create already existing topic {}\", clientAppId(), topicName);\n+                asyncResponse.resume(new RestException(Status.CONFLICT, \"This topic already exists\"));\n+            } else {\n+                try {\n+                    String path = ZkAdminPaths.partitionedTopicPath(topicName);\n+                    byte[] data = jsonMapper().writeValueAsBytes(new PartitionedTopicMetadata(numPartitions));\n+                    zkCreateOptimisticAsync(globalZk(), path, data, (rc, s, o, s1) -> {\n+                        if (KeeperException.Code.OK.intValue() == rc) {\n+                            if (topicName.isPersistent()) {\n+                                tryCreatePartitionsAsync(numPartitions);\n+                            }\n+                            globalZk().sync(path, (rc2, s2, ctx) -> {", "originalCommit": "99f5486f2577571ec6ae1ba281c6b52553e737c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd0077c44bdb5544e33e1b2dbddb525290dfcf8a", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\nindex 6d120ded3c6..32421d9c5ed 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\n\n@@ -732,18 +740,22 @@ public abstract class AdminResource extends PulsarWebResource {\n                     byte[] data = jsonMapper().writeValueAsBytes(new PartitionedTopicMetadata(numPartitions));\n                     zkCreateOptimisticAsync(globalZk(), path, data, (rc, s, o, s1) -> {\n                         if (KeeperException.Code.OK.intValue() == rc) {\n-                            if (topicName.isPersistent()) {\n-                                tryCreatePartitionsAsync(numPartitions);\n-                            }\n-                            globalZk().sync(path, (rc2, s2, ctx) -> {\n-                                if (KeeperException.Code.OK.intValue() == rc2) {\n-                                    log.info(\"[{}] Successfully created partitioned topic {}\", clientAppId(), topicName);\n-                                    asyncResponse.resume(Response.noContent().build());\n-                                } else {\n-                                    log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, KeeperException.create(KeeperException.Code.get(rc2)));\n-                                    asyncResponse.resume(new RestException(KeeperException.create(KeeperException.Code.get(rc2))));\n-                                }\n-                            }, null);\n+                            tryCreatePartitionsAsync(numPartitions).thenAccept(v -> {\n+                                globalZk().sync(path, (rc2, s2, ctx) -> {\n+                                    if (KeeperException.Code.OK.intValue() == rc2) {\n+                                        log.info(\"[{}] Successfully created partitioned topic {}\", clientAppId(), topicName);\n+                                        asyncResponse.resume(Response.noContent().build());\n+                                    } else {\n+                                        log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, KeeperException.create(KeeperException.Code.get(rc2)));\n+                                        asyncResponse.resume(new RestException(KeeperException.create(KeeperException.Code.get(rc2))));\n+                                    }\n+                                }, null);\n+                            }).exceptionally(e -> {\n+                                log.error(\"[{}] Failed to create partitions for topic {}\", clientAppId(), topicName);\n+                                // The partitioned topic is created but there are some partitions create failed\n+                                asyncResponse.resume(new RestException(e));\n+                                return null;\n+                            });\n                         } else if (KeeperException.Code.NODEEXISTS.intValue() == rc) {\n                             log.warn(\"[{}] Failed to create already existing partitioned topic {}\", clientAppId(), topicName);\n                             asyncResponse.resume(new RestException(Status.CONFLICT, \"Partitioned topic already exists\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NTkxNA==", "url": "https://github.com/apache/pulsar/pull/6478#discussion_r388655914", "bodyText": "This should happen in the callback of tryCreatePartitionAsync.", "author": "sijie", "createdAt": "2020-03-06T00:59:46Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java", "diffHunk": "@@ -707,4 +709,93 @@ protected boolean isNamespaceReplicated(NamespaceName namespaceName) {\n         partitionedTopics.sort(null);\n         return partitionedTopics;\n     }\n+\n+    protected void internalCreatePartitionedTopic(AsyncResponse asyncResponse, int numPartitions) {\n+        try {\n+            validateAdminAccessForTenant(topicName.getTenant());\n+        } catch (Exception e) {\n+            log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, e);\n+            resumeAsyncResponseExceptionally(asyncResponse, e);\n+            return;\n+        }\n+        if (numPartitions <= 0) {\n+            asyncResponse.resume(new RestException(Status.NOT_ACCEPTABLE, \"Number of partitions should be more than 0\"));\n+            return;\n+        }\n+        checkTopicExistsAsync(topicName).thenAccept(exists -> {\n+            if (exists) {\n+                log.warn(\"[{}] Failed to create already existing topic {}\", clientAppId(), topicName);\n+                asyncResponse.resume(new RestException(Status.CONFLICT, \"This topic already exists\"));\n+            } else {\n+                try {\n+                    String path = ZkAdminPaths.partitionedTopicPath(topicName);\n+                    byte[] data = jsonMapper().writeValueAsBytes(new PartitionedTopicMetadata(numPartitions));\n+                    zkCreateOptimisticAsync(globalZk(), path, data, (rc, s, o, s1) -> {\n+                        if (KeeperException.Code.OK.intValue() == rc) {\n+                            if (topicName.isPersistent()) {\n+                                tryCreatePartitionsAsync(numPartitions);\n+                            }\n+                            globalZk().sync(path, (rc2, s2, ctx) -> {", "originalCommit": "99f5486f2577571ec6ae1ba281c6b52553e737c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd0077c44bdb5544e33e1b2dbddb525290dfcf8a", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\nindex 6d120ded3c6..32421d9c5ed 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java\n\n@@ -732,18 +740,22 @@ public abstract class AdminResource extends PulsarWebResource {\n                     byte[] data = jsonMapper().writeValueAsBytes(new PartitionedTopicMetadata(numPartitions));\n                     zkCreateOptimisticAsync(globalZk(), path, data, (rc, s, o, s1) -> {\n                         if (KeeperException.Code.OK.intValue() == rc) {\n-                            if (topicName.isPersistent()) {\n-                                tryCreatePartitionsAsync(numPartitions);\n-                            }\n-                            globalZk().sync(path, (rc2, s2, ctx) -> {\n-                                if (KeeperException.Code.OK.intValue() == rc2) {\n-                                    log.info(\"[{}] Successfully created partitioned topic {}\", clientAppId(), topicName);\n-                                    asyncResponse.resume(Response.noContent().build());\n-                                } else {\n-                                    log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, KeeperException.create(KeeperException.Code.get(rc2)));\n-                                    asyncResponse.resume(new RestException(KeeperException.create(KeeperException.Code.get(rc2))));\n-                                }\n-                            }, null);\n+                            tryCreatePartitionsAsync(numPartitions).thenAccept(v -> {\n+                                globalZk().sync(path, (rc2, s2, ctx) -> {\n+                                    if (KeeperException.Code.OK.intValue() == rc2) {\n+                                        log.info(\"[{}] Successfully created partitioned topic {}\", clientAppId(), topicName);\n+                                        asyncResponse.resume(Response.noContent().build());\n+                                    } else {\n+                                        log.error(\"[{}] Failed to create partitioned topic {}\", clientAppId(), topicName, KeeperException.create(KeeperException.Code.get(rc2)));\n+                                        asyncResponse.resume(new RestException(KeeperException.create(KeeperException.Code.get(rc2))));\n+                                    }\n+                                }, null);\n+                            }).exceptionally(e -> {\n+                                log.error(\"[{}] Failed to create partitions for topic {}\", clientAppId(), topicName);\n+                                // The partitioned topic is created but there are some partitions create failed\n+                                asyncResponse.resume(new RestException(e));\n+                                return null;\n+                            });\n                         } else if (KeeperException.Code.NODEEXISTS.intValue() == rc) {\n                             log.warn(\"[{}] Failed to create already existing partitioned topic {}\", clientAppId(), topicName);\n                             asyncResponse.resume(new RestException(Status.CONFLICT, \"Partitioned topic already exists\"));\n"}}, {"oid": "dd0077c44bdb5544e33e1b2dbddb525290dfcf8a", "url": "https://github.com/apache/pulsar/commit/dd0077c44bdb5544e33e1b2dbddb525290dfcf8a", "message": "Fix comments", "committedDate": "2020-03-06T02:39:27Z", "type": "commit"}, {"oid": "a3f4470502ade725a03526662062147c0cd3a7d8", "url": "https://github.com/apache/pulsar/commit/a3f4470502ade725a03526662062147c0cd3a7d8", "message": "sync global zk first", "committedDate": "2020-03-06T02:43:44Z", "type": "commit"}]}