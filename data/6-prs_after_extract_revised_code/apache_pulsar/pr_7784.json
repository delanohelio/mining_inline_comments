{"pr_number": 7784, "pr_title": "support topic level delayed delivery policy", "pr_createdAt": "2020-08-08T18:30:44Z", "pr_url": "https://github.com/apache/pulsar/pull/7784", "timeline": [{"oid": "6bb1426197a81dd441bb8f3562f72d287e73a2ef", "url": "https://github.com/apache/pulsar/commit/6bb1426197a81dd441bb8f3562f72d287e73a2ef", "message": "support topic level delayed delivery policy", "committedDate": "2020-08-08T18:14:19Z", "type": "commit"}, {"oid": "85a3b0999891ac4e2242a612f4619458ce18978d", "url": "https://github.com/apache/pulsar/commit/85a3b0999891ac4e2242a612f4619458ce18978d", "message": "add unit test", "committedDate": "2020-08-09T05:16:55Z", "type": "forcePushed"}, {"oid": "eecb3cf4c642d42b648a70547ab121d6bd6e3cc0", "url": "https://github.com/apache/pulsar/commit/eecb3cf4c642d42b648a70547ab121d6bd6e3cc0", "message": "add unit test", "committedDate": "2020-08-09T06:09:12Z", "type": "forcePushed"}, {"oid": "cfa290a2c84e88ff727fa0a9e8aa4d370c1de29d", "url": "https://github.com/apache/pulsar/commit/cfa290a2c84e88ff727fa0a9e8aa4d370c1de29d", "message": "add unit test", "committedDate": "2020-08-09T08:07:12Z", "type": "forcePushed"}, {"oid": "e9142f3ab45af83012ab0305278b38ee1c439200", "url": "https://github.com/apache/pulsar/commit/e9142f3ab45af83012ab0305278b38ee1c439200", "message": "add unit test", "committedDate": "2020-08-09T08:58:39Z", "type": "forcePushed"}, {"oid": "eb81c59d559ca6ae24709f64504d54945af2425e", "url": "https://github.com/apache/pulsar/commit/eb81c59d559ca6ae24709f64504d54945af2425e", "message": "add unit test", "committedDate": "2020-08-09T10:40:14Z", "type": "forcePushed"}, {"oid": "88094bfb8efcf7c251743c9f8ac8e6194ade0d7c", "url": "https://github.com/apache/pulsar/commit/88094bfb8efcf7c251743c9f8ac8e6194ade0d7c", "message": "add unit test", "committedDate": "2020-08-09T11:32:01Z", "type": "commit"}, {"oid": "88094bfb8efcf7c251743c9f8ac8e6194ade0d7c", "url": "https://github.com/apache/pulsar/commit/88094bfb8efcf7c251743c9f8ac8e6194ade0d7c", "message": "add unit test", "committedDate": "2020-08-09T11:32:01Z", "type": "forcePushed"}, {"oid": "81681271318c3e67a76ef5502bd20b64e0b57c65", "url": "https://github.com/apache/pulsar/commit/81681271318c3e67a76ef5502bd20b64e0b57c65", "message": "add common method", "committedDate": "2020-08-09T16:01:35Z", "type": "forcePushed"}, {"oid": "6b3e96321390666b574bad6b371fd8b3ab349e65", "url": "https://github.com/apache/pulsar/commit/6b3e96321390666b574bad6b371fd8b3ab349e65", "message": "add common method", "committedDate": "2020-08-09T16:53:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MDM2NA==", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467850364", "bodyText": "Please complete the asyncResponse with exception", "author": "codelipenghui", "createdAt": "2020-08-10T11:49:11Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -577,6 +580,56 @@ protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected TopicPolicies internalGetTopicPolicies(String properties) {\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        Map result = new HashMap();\n+        try {\n+            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n+            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            propertyList.forEach(property -> {\n+                if (policiesMap.get(property) != null) {\n+                    result.put(property, policiesMap.get(property));\n+                }\n+            });\n+            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);\n+        } catch (JsonProcessingException e) {\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policy properties\");\n+        } catch (IOException e) {\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"serialize the result failed\");\n+        }\n+    }\n+\n+    protected void internalSetTopicPolicies(AsyncResponse asyncResponse, Map<String, String> policies) {\n+        TopicPolicies topicPolicies = null;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.error(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+        }\n+        if (topicPolicies == null) {\n+            topicPolicies = new TopicPolicies();\n+        }\n+        try {\n+            Map oldPolicies = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            oldPolicies.putAll(policies);\n+            topicPolicies = jsonMapper().readValue(jsonMapper().writeValueAsString(oldPolicies), TopicPolicies.class);\n+        } catch (JsonProcessingException e) {\n+            log.error(\"incorrect policies map\", e);\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policies map\");", "originalCommit": "6b3e96321390666b574bad6b371fd8b3ab349e65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63f58e8da475e0519687998c75fd77d14c645330", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\nindex 72a518e8df1..903d60b2b61 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n\n@@ -580,26 +578,7 @@ public class PersistentTopicsBase extends AdminResource {\n         });\n     }\n \n-    protected TopicPolicies internalGetTopicPolicies(String properties) {\n-        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n-        Map result = new HashMap();\n-        try {\n-            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n-            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n-            propertyList.forEach(property -> {\n-                if (policiesMap.get(property) != null) {\n-                    result.put(property, policiesMap.get(property));\n-                }\n-            });\n-            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);\n-        } catch (JsonProcessingException e) {\n-            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policy properties\");\n-        } catch (IOException e) {\n-            throw new RestException(Status.NOT_ACCEPTABLE, \"serialize the result failed\");\n-        }\n-    }\n-\n-    protected void internalSetTopicPolicies(AsyncResponse asyncResponse, Map<String, String> policies) {\n+    protected void internalSetDelayedDeliveryPolicies(AsyncResponse asyncResponse, DelayedDeliveryPolicies deliveryPolicies) {\n         TopicPolicies topicPolicies = null;\n         try {\n             topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MjEzMw==", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467852133", "bodyText": "It's better to keep consistent with the delayed delivery setting of the namespace.\n    @GET\n    @Path(\"/{tenant}/{namespace}/delayedDelivery\")\n    @ApiOperation(value = \"Get delayed delivery messages config on a namespace.\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\"),\n            @ApiResponse(code = 409, message = \"Concurrent modification\"), })\n    public DelayedDeliveryPolicies getDelayedDeliveryPolicies(@PathParam(\"tenant\") String tenant,\n                                         @PathParam(\"namespace\") String namespace) {\n        validateNamespaceName(tenant, namespace);\n        return internalGetDelayedDelivery();\n    }\n\n    @POST\n    @Path(\"/{tenant}/{namespace}/delayedDelivery\")\n    @ApiOperation(value = \"Set delayed delivery messages config on a namespace.\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\"), })\n    public void setDelayedDeliveryPolicies(@PathParam(\"tenant\") String tenant,\n            @PathParam(\"namespace\") String namespace,\n            @ApiParam(value = \"Delayed delivery policies for the specified namespace\") DelayedDeliveryPolicies deliveryPolicies) {\n        validateNamespaceName(tenant, namespace);\n        internalSetDelayedDelivery(deliveryPolicies);\n    }\n\nAnd we should also add deleteDelayedDeliveryPolicies method for clearing the topic level delayed delivery policy.", "author": "codelipenghui", "createdAt": "2020-08-10T11:53:21Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -246,6 +246,41 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/{policyProperties}/getTopicPolicies\")\n+    @ApiOperation(value = \"Get delayed delivery messages config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public TopicPolicies getTopicPolicies(", "originalCommit": "6b3e96321390666b574bad6b371fd8b3ab349e65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63f58e8da475e0519687998c75fd77d14c645330", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\nindex fb8079f7f4f..4fdf66901de 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\n\n@@ -247,30 +249,33 @@ public class PersistentTopics extends PersistentTopicsBase {\n     }\n \n     @GET\n-    @Path(\"/{tenant}/{namespace}/{topic}/{policyProperties}/getTopicPolicies\")\n+    @Path(\"/{tenant}/{namespace}/{topic}/delayedDelivery\")\n     @ApiOperation(value = \"Get delayed delivery messages config on a topic.\")\n     @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n             @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n             @ApiResponse(code = 500, message = \"Internal server error\"),})\n-    public TopicPolicies getTopicPolicies(\n-            @PathParam(\"tenant\") String tenant,\n-            @PathParam(\"namespace\") String namespace,\n-            @PathParam(\"topic\") @Encoded String encodedTopic,\n-            @PathParam(\"policyProperties\") String properties) {\n+    public DelayedDeliveryPolicies getDelayedDeliveryPolicies(@PathParam(\"tenant\") String tenant,\n+                                                              @PathParam(\"namespace\") String namespace,\n+                                                              @PathParam(\"topic\") @Encoded String encodedTopic) {\n         validateTopicName(tenant, namespace, encodedTopic);\n-        return internalGetTopicPolicies(properties);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isDelayedDeliveryEnabledSet() && topicPolicies.isDelayedDeliveryTickTimeMillisSet()) {\n+            return new DelayedDeliveryPolicies(topicPolicies.getDelayedDeliveryTickTimeMillis()\n+                    , topicPolicies.getDelayedDeliveryEnabled());\n+        }\n+        return new DelayedDeliveryPolicies(config().getDelayedDeliveryTickTimeMillis(), config().isDelayedDeliveryEnabled());\n     }\n \n     @POST\n-    @Path(\"/{tenant}/{namespace}/{topic}/topicPolicies\")\n-    @ApiOperation(value = \"Set policies on a topic.\")\n+    @Path(\"/{tenant}/{namespace}/{topic}/delayedDelivery\")\n+    @ApiOperation(value = \"Set delayed delivery messages config on a topic.\")\n     @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n             @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n-    public void setTopicPolicies(@Suspended final AsyncResponse asyncResponse,\n-             @PathParam(\"tenant\") String tenant,\n-             @PathParam(\"namespace\") String namespace,\n-             @PathParam(\"topic\") @Encoded String encodedTopic,\n-             @ApiParam(value = \"Policies for the specified topic (JSON String as TopicPolicies)\") Map policies) {\n+    public void setDelayedDeliveryPolicies(@Suspended final AsyncResponse asyncResponse,\n+                                           @PathParam(\"tenant\") String tenant,\n+                                           @PathParam(\"namespace\") String namespace,\n+                                           @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                           @ApiParam(value = \"Delayed delivery policies for the specified topic\") DelayedDeliveryPolicies deliveryPolicies) {\n         validateTopicName(tenant, namespace, encodedTopic);\n         validateAdminAccessForTenant(tenant);\n         validatePoliciesReadOnlyAccess();\n"}}, {"oid": "88094bfb8efcf7c251743c9f8ac8e6194ade0d7c", "url": "https://github.com/apache/pulsar/commit/88094bfb8efcf7c251743c9f8ac8e6194ade0d7c", "message": "add unit test", "committedDate": "2020-08-09T11:32:01Z", "type": "forcePushed"}, {"oid": "63f58e8da475e0519687998c75fd77d14c645330", "url": "https://github.com/apache/pulsar/commit/63f58e8da475e0519687998c75fd77d14c645330", "message": "merge master", "committedDate": "2020-08-10T12:21:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1OTQ4MQ==", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467859481", "bodyText": "Please add the generic declaration of Map.\nex Map<String,Object>", "author": "jianyun8023", "createdAt": "2020-08-10T12:09:18Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -577,6 +580,56 @@ protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected TopicPolicies internalGetTopicPolicies(String properties) {\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        Map result = new HashMap();\n+        try {\n+            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n+            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            propertyList.forEach(property -> {\n+                if (policiesMap.get(property) != null) {\n+                    result.put(property, policiesMap.get(property));\n+                }\n+            });\n+            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);", "originalCommit": "6b3e96321390666b574bad6b371fd8b3ab349e65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63f58e8da475e0519687998c75fd77d14c645330", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\nindex 72a518e8df1..903d60b2b61 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n\n@@ -580,26 +578,7 @@ public class PersistentTopicsBase extends AdminResource {\n         });\n     }\n \n-    protected TopicPolicies internalGetTopicPolicies(String properties) {\n-        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n-        Map result = new HashMap();\n-        try {\n-            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n-            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n-            propertyList.forEach(property -> {\n-                if (policiesMap.get(property) != null) {\n-                    result.put(property, policiesMap.get(property));\n-                }\n-            });\n-            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);\n-        } catch (JsonProcessingException e) {\n-            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policy properties\");\n-        } catch (IOException e) {\n-            throw new RestException(Status.NOT_ACCEPTABLE, \"serialize the result failed\");\n-        }\n-    }\n-\n-    protected void internalSetTopicPolicies(AsyncResponse asyncResponse, Map<String, String> policies) {\n+    protected void internalSetDelayedDeliveryPolicies(AsyncResponse asyncResponse, DelayedDeliveryPolicies deliveryPolicies) {\n         TopicPolicies topicPolicies = null;\n         try {\n             topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2MDE0OA==", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467860148", "bodyText": "Please add the generic declaration of Map.", "author": "jianyun8023", "createdAt": "2020-08-10T12:10:42Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -577,6 +580,56 @@ protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected TopicPolicies internalGetTopicPolicies(String properties) {\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        Map result = new HashMap();\n+        try {\n+            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n+            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            propertyList.forEach(property -> {\n+                if (policiesMap.get(property) != null) {\n+                    result.put(property, policiesMap.get(property));\n+                }\n+            });\n+            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);\n+        } catch (JsonProcessingException e) {\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policy properties\");\n+        } catch (IOException e) {\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"serialize the result failed\");\n+        }\n+    }\n+\n+    protected void internalSetTopicPolicies(AsyncResponse asyncResponse, Map<String, String> policies) {\n+        TopicPolicies topicPolicies = null;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.error(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+        }\n+        if (topicPolicies == null) {\n+            topicPolicies = new TopicPolicies();\n+        }\n+        try {\n+            Map oldPolicies = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            oldPolicies.putAll(policies);\n+            topicPolicies = jsonMapper().readValue(jsonMapper().writeValueAsString(oldPolicies), TopicPolicies.class);", "originalCommit": "6b3e96321390666b574bad6b371fd8b3ab349e65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63f58e8da475e0519687998c75fd77d14c645330", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\nindex 72a518e8df1..903d60b2b61 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n\n@@ -580,26 +578,7 @@ public class PersistentTopicsBase extends AdminResource {\n         });\n     }\n \n-    protected TopicPolicies internalGetTopicPolicies(String properties) {\n-        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n-        Map result = new HashMap();\n-        try {\n-            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n-            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n-            propertyList.forEach(property -> {\n-                if (policiesMap.get(property) != null) {\n-                    result.put(property, policiesMap.get(property));\n-                }\n-            });\n-            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);\n-        } catch (JsonProcessingException e) {\n-            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policy properties\");\n-        } catch (IOException e) {\n-            throw new RestException(Status.NOT_ACCEPTABLE, \"serialize the result failed\");\n-        }\n-    }\n-\n-    protected void internalSetTopicPolicies(AsyncResponse asyncResponse, Map<String, String> policies) {\n+    protected void internalSetDelayedDeliveryPolicies(AsyncResponse asyncResponse, DelayedDeliveryPolicies deliveryPolicies) {\n         TopicPolicies topicPolicies = null;\n         try {\n             topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3NjIzMg==", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467876232", "bodyText": "When DelayedDeliveryPolicies is not set, the admin module should not return to the default value.", "author": "jianyun8023", "createdAt": "2020-08-10T12:43:00Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -246,6 +248,59 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/delayedDelivery\")\n+    @ApiOperation(value = \"Get delayed delivery messages config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public DelayedDeliveryPolicies getDelayedDeliveryPolicies(@PathParam(\"tenant\") String tenant,\n+                                                              @PathParam(\"namespace\") String namespace,\n+                                                              @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isDelayedDeliveryEnabledSet() && topicPolicies.isDelayedDeliveryTickTimeMillisSet()) {\n+            return new DelayedDeliveryPolicies(topicPolicies.getDelayedDeliveryTickTimeMillis()\n+                    , topicPolicies.getDelayedDeliveryEnabled());\n+        }\n+        return new DelayedDeliveryPolicies(config().getDelayedDeliveryTickTimeMillis(), config().isDelayedDeliveryEnabled());\n+    }", "originalCommit": "63f58e8da475e0519687998c75fd77d14c645330", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1d4d51561fe7157a11f019b136d2b963bba9c99", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\nindex 4fdf66901de..a8f20174fbf 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\n\n@@ -263,7 +263,7 @@ public class PersistentTopics extends PersistentTopicsBase {\n             return new DelayedDeliveryPolicies(topicPolicies.getDelayedDeliveryTickTimeMillis()\n                     , topicPolicies.getDelayedDeliveryEnabled());\n         }\n-        return new DelayedDeliveryPolicies(config().getDelayedDeliveryTickTimeMillis(), config().isDelayedDeliveryEnabled());\n+        return null;\n     }\n \n     @POST\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3ODQzMg==", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467878432", "bodyText": "return", "author": "jianyun8023", "createdAt": "2020-08-10T12:47:12Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -577,6 +578,30 @@ protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected void internalSetDelayedDeliveryPolicies(AsyncResponse asyncResponse, DelayedDeliveryPolicies deliveryPolicies) {\n+        TopicPolicies topicPolicies = null;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.error(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+        }", "originalCommit": "63f58e8da475e0519687998c75fd77d14c645330", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1d4d51561fe7157a11f019b136d2b963bba9c99", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\nindex 903d60b2b61..accce4e35ee 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n\n@@ -585,6 +585,7 @@ public class PersistentTopicsBase extends AdminResource {\n         } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n             log.error(\"Topic {} policies cache have not init.\", topicName);\n             asyncResponse.resume(new RestException(e));\n+            return;\n         }\n         if (topicPolicies == null) {\n             topicPolicies = new TopicPolicies();\n"}}, {"oid": "e1d4d51561fe7157a11f019b136d2b963bba9c99", "url": "https://github.com/apache/pulsar/commit/e1d4d51561fe7157a11f019b136d2b963bba9c99", "message": "fix as required", "committedDate": "2020-08-10T13:25:48Z", "type": "commit"}, {"oid": "5881f29cb20e974f5de1ff39cb0d9a5778779d35", "url": "https://github.com/apache/pulsar/commit/5881f29cb20e974f5de1ff39cb0d9a5778779d35", "message": "fix unit test", "committedDate": "2020-08-11T10:12:23Z", "type": "commit"}, {"oid": "38561c40c4ba47f04b81f0fbf11d56f9070f7915", "url": "https://github.com/apache/pulsar/commit/38561c40c4ba47f04b81f0fbf11d56f9070f7915", "message": "merge master", "committedDate": "2020-08-11T10:15:29Z", "type": "commit"}, {"oid": "68e4da180dcd1e70b56c215e42a5c1959179ac4a", "url": "https://github.com/apache/pulsar/commit/68e4da180dcd1e70b56c215e42a5c1959179ac4a", "message": "Try to find out why it succeeds locally but fails in the CI environment", "committedDate": "2020-08-11T13:35:13Z", "type": "forcePushed"}, {"oid": "862c1a0de85d1f277865f4d6413b8b82acc0170c", "url": "https://github.com/apache/pulsar/commit/862c1a0de85d1f277865f4d6413b8b82acc0170c", "message": "Try to find out why it succeeds locally but fails in the CI environment", "committedDate": "2020-08-11T13:52:33Z", "type": "forcePushed"}, {"oid": "bc90893e58a7ebcc59c6bb45760e22df60c341de", "url": "https://github.com/apache/pulsar/commit/bc90893e58a7ebcc59c6bb45760e22df60c341de", "message": "fix unit test", "committedDate": "2020-08-11T14:16:30Z", "type": "commit"}, {"oid": "bc90893e58a7ebcc59c6bb45760e22df60c341de", "url": "https://github.com/apache/pulsar/commit/bc90893e58a7ebcc59c6bb45760e22df60c341de", "message": "fix unit test", "committedDate": "2020-08-11T14:16:30Z", "type": "forcePushed"}, {"oid": "67992310065639898a21c0528d03896cd06eb63a", "url": "https://github.com/apache/pulsar/commit/67992310065639898a21c0528d03896cd06eb63a", "message": "fix unit test", "committedDate": "2020-08-11T15:20:57Z", "type": "commit"}, {"oid": "67992310065639898a21c0528d03896cd06eb63a", "url": "https://github.com/apache/pulsar/commit/67992310065639898a21c0528d03896cd06eb63a", "message": "fix unit test", "committedDate": "2020-08-11T15:20:57Z", "type": "forcePushed"}]}