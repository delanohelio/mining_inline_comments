{"pr_number": 7357, "pr_title": "Fix bug related to managedLedger properties", "pr_createdAt": "2020-06-25T07:50:17Z", "pr_url": "https://github.com/apache/pulsar/pull/7357", "timeline": [{"oid": "fd8f3bea92f1dbcfb1e9ac299b1b631df1272608", "url": "https://github.com/apache/pulsar/commit/fd8f3bea92f1dbcfb1e9ac299b1b631df1272608", "message": "Remove re-read from zk, and use the same mutex when update metadata.", "committedDate": "2020-06-25T07:47:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MDEyOQ==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r445590129", "bodyText": "Using isOverwrite feels a bit weird compared to similar properties APIs.\nWhat about having:\n\nsetProperty()\nsetProperties() (with isOverwrite==false behavior)\ndeleteProperty()", "author": "merlimat", "createdAt": "2020-06-25T14:13:30Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -453,19 +453,23 @@\n     /**\n      * Update managed-ledger's properties.\n      *\n-     * @param properties key-values of properties\n+     * @param properties  key-values of properties\n+     * @param isOverwrite set true to overwrite original value of managed-ledger's properties; set false to append the\n+     *                    properties to managed-ledger's properties.\n      */\n-    void setProperties(Map<String, String> properties) throws InterruptedException;\n+    void setProperties(Map<String, String> properties, boolean isOverwrite) throws InterruptedException;", "originalCommit": "fd8f3bea92f1dbcfb1e9ac299b1b631df1272608", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNTc1NQ==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r445615755", "bodyText": "OK. Thanks for the suggestion, I will add these APIs.", "author": "zhanghaou", "createdAt": "2020-06-25T14:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MDEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b6320e85f1ee94d0ad797b6d74029a9785f68eac", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\nindex 06b0bd389c4..aef6c9a06cb 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\n\n@@ -450,27 +450,40 @@ public interface ManagedLedger {\n      */\n     Map<String, String> getProperties();\n \n+    /**\n+     * Add key-value to propertiesMap.\n+     *\n+     * @param key\n+     * @param value\n+     * @throws InterruptedException\n+     */\n+    void setProperty(String key, String value) throws InterruptedException;\n+\n+    /**\n+     * Delete the property by key.\n+     *\n+     * @param key\n+     * @throws InterruptedException\n+     */\n+    void deleteProperty(String key) throws InterruptedException;\n+\n     /**\n      * Update managed-ledger's properties.\n      *\n-     * @param properties  key-values of properties\n-     * @param isOverwrite set true to overwrite original value of managed-ledger's properties; set false to append the\n-     *                    properties to managed-ledger's properties.\n+     * @param properties key-values of properties\n      */\n-    void setProperties(Map<String, String> properties, boolean isOverwrite) throws InterruptedException;\n+    void setProperties(Map<String, String> properties) throws InterruptedException;\n \n     /**\n      * Async update managed-ledger's properties.\n      *\n-     * @param properties  key-values of properties.\n-     * @param isOverwrite set true to overwrite original value of managed-ledger's properties; set false to append the\n-     *                    properties to managed-ledger's properties.\n-     * @param callback    a callback which will be supplied with the newest properties in managedLedger.\n-     * @param ctx         a context object which will be passed to the callback on completion.\n+     * @param properties key-values of properties.\n+     * @param callback   a callback which will be supplied with the newest properties in managedLedger.\n+     * @param ctx        a context object which will be passed to the callback on completion.\n      */\n-    void asyncSetProperties(Map<String, String> properties, boolean isOverwrite,\n-        final AsyncCallbacks.SetPropertiesCallback callback, Object ctx);\n-  \n+    void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.SetPropertiesCallback callback,\n+        Object ctx);\n+\n     /**\n      * Trim consumed ledgers in background\n      * @param promise\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzA0OQ==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r445593049", "bodyText": "Please also try to add entries in the ledger, to verify that we're not fenced off from the metadata updates.\nChange the settings to force multiple rollovers, eg:\nManagedLedger ledger = factory.open(\"my_test_ledger\",\n     new ManagedLedgerConfig().setMaxEntriesPerLedger(1));", "author": "merlimat", "createdAt": "2020-06-25T14:17:20Z", "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1174,43 +1174,49 @@ public void testSetProperties() throws Exception {\n         properties.put(\"key1\", \"value1\");\n         properties.put(\"key2\", \"value2\");\n         properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n+        ledger.setProperties(properties, true);\n         assertEquals(ledger.getProperties(), properties);\n \n         Map<String, String> newProperties = new HashMap<>();\n         newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n-        ledger.setProperties(newProperties);\n+        ledger.setProperties(newProperties, true);\n+        assertEquals(ledger.getProperties(), newProperties);\n+\n+        ledger.setProperties(properties, false);\n+        newProperties.putAll(properties);", "originalCommit": "fd8f3bea92f1dbcfb1e9ac299b1b631df1272608", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNTg1Ng==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r445615856", "bodyText": "OK.", "author": "zhanghaou", "createdAt": "2020-06-25T14:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b6320e85f1ee94d0ad797b6d74029a9785f68eac", "chunk": "diff --git a/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java b/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\nindex 8112700e94f..c5fe5ad2a7b 100644\n--- a/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\n+++ b/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\n\n@@ -1168,32 +1168,45 @@ public class ManagedLedgerTest extends MockedBookKeeperTestCase {\n     }\n \n     @Test\n-    public void testSetProperties() throws Exception {\n+    public void testProperties() throws Exception {\n         ManagedLedger ledger = factory.open(\"my_test_ledger\");\n         Map<String, String> properties = new HashMap<>();\n         properties.put(\"key1\", \"value1\");\n         properties.put(\"key2\", \"value2\");\n         properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties, true);\n+        ledger.setProperties(properties);\n+        assertEquals(ledger.getProperties(), properties);\n+\n+        properties.put(\"key4\", \"value4\");\n+        ledger.setProperty(\"key4\", \"value4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n+        ledger.deleteProperty(\"key4\");\n+        properties.remove(\"key4\");\n         assertEquals(ledger.getProperties(), properties);\n \n         Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n-        ledger.setProperties(newProperties, true);\n-        assertEquals(ledger.getProperties(), newProperties);\n-\n-        ledger.setProperties(properties, false);\n-        newProperties.putAll(properties);\n+        ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n     @Test\n     public void testConcurrentAsyncSetProperties() throws Exception {\n         final CountDownLatch latch = new CountDownLatch(1000);\n-        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n         Executor executor = Executors.newCachedThreadPool();\n+        executor.execute(()->{\n+            try {\n+                for (int i = 0; i < 100; i++) {\n+                    ledger.addEntry(\"data\".getBytes(Encoding));\n+                    Thread.sleep(300);\n+                }\n+            } catch (Exception e) {\n+                fail(e.getMessage());\n+            }\n+        });\n         for (int i = 0; i < 1000; i++) {\n             final int finalI = i;\n             executor.execute(() -> {\n"}}, {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac", "url": "https://github.com/apache/pulsar/commit/b6320e85f1ee94d0ad797b6d74029a9785f68eac", "message": "Add setProperty(), deleteProperty() API and test ledger changed when add metadata.", "committedDate": "2020-06-26T02:06:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDUzNA==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446240534", "bodyText": "We also need the asyncSetProperty() and asyncDeleteProperty() versions.\nThe throws, should also include ManagedLedgedException", "author": "merlimat", "createdAt": "2020-06-26T15:05:16Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -450,6 +450,23 @@\n      */\n     Map<String, String> getProperties();\n \n+    /**\n+     * Add key-value to propertiesMap.\n+     *\n+     * @param key\n+     * @param value\n+     * @throws InterruptedException\n+     */\n+    void setProperty(String key, String value) throws InterruptedException;", "originalCommit": "b6320e85f1ee94d0ad797b6d74029a9785f68eac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MDkyOA==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446480928", "bodyText": "Done.", "author": "zhanghaou", "createdAt": "2020-06-27T03:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "63ca55ae06ef7f6e059631925c68af7e406ab6f6", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\nindex aef6c9a06cb..a8a45097eab 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java\n\n@@ -453,26 +453,49 @@ public interface ManagedLedger {\n     /**\n      * Add key-value to propertiesMap.\n      *\n-     * @param key\n-     * @param value\n+     * @param key key of property to add\n+     * @param value value of property to add\n      * @throws InterruptedException\n+     * @throws ManagedLedgerException\n      */\n-    void setProperty(String key, String value) throws InterruptedException;\n+    void setProperty(String key, String value) throws InterruptedException, ManagedLedgerException;\n+\n+    /**\n+     * Async add key-value to propertiesMap.\n+     *\n+     * @param key      key of property to add\n+     * @param value    value of property to add\n+     * @param callback a callback which will be supplied with the newest properties in managedLedger.\n+     * @param ctx      a context object which will be passed to the callback on completion.\n+     **/\n+    void asyncSetProperty(String key, String value, final AsyncCallbacks.UpdatePropertiesCallback callback, Object ctx);\n \n     /**\n      * Delete the property by key.\n      *\n-     * @param key\n+     * @param key key of property to delete\n      * @throws InterruptedException\n+     * @throws ManagedLedgerException\n      */\n-    void deleteProperty(String key) throws InterruptedException;\n+    void deleteProperty(String key) throws InterruptedException, ManagedLedgerException;\n+\n+    /**\n+     * Async delete the property by key.\n+     *\n+     * @param key      key of property to delete\n+     * @param callback a callback which will be supplied with the newest properties in managedLedger.\n+     * @param ctx      a context object which will be passed to the callback on completion.\n+     */\n+    void asyncDeleteProperty(String key, final AsyncCallbacks.UpdatePropertiesCallback callback, Object ctx);\n \n     /**\n      * Update managed-ledger's properties.\n      *\n      * @param properties key-values of properties\n+     * @throws InterruptedException\n+     * @throws ManagedLedgerException\n      */\n-    void setProperties(Map<String, String> properties) throws InterruptedException;\n+    void setProperties(Map<String, String> properties) throws InterruptedException, ManagedLedgerException;\n \n     /**\n      * Async update managed-ledger's properties.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjIxNw==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446246217", "bodyText": "How is this reporting a failure in the operation?", "author": "merlimat", "createdAt": "2020-06-26T15:15:10Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3270,10 +3274,32 @@ public long getOffloadedSize() {\n         return propertiesMap;\n     }\n \n+    @Override\n+    public void setProperty(String key, String value) throws InterruptedException {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        updateProperties(map, false, false, null);\n+    }\n+\n+    @Override\n+    public void deleteProperty(String key) throws InterruptedException {\n+        updateProperties(null, false, true, key);\n+    }\n+\n     @Override\n     public void setProperties(Map<String, String> properties) throws InterruptedException {\n+        updateProperties(properties, true, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperties(Map<String, String> properties, final SetPropertiesCallback callback, Object ctx) {\n+        asyncUpdateProperties(properties, true, false, null, callback, ctx);\n+    }\n+\n+    private void updateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,", "originalCommit": "b6320e85f1ee94d0ad797b6d74029a9785f68eac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MTAyNw==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446481027", "bodyText": "Done.", "author": "zhanghaou", "createdAt": "2020-06-27T04:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "63ca55ae06ef7f6e059631925c68af7e406ab6f6", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\nindex bbb4ef553bf..599c1a55c59 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n\n@@ -3275,58 +3275,73 @@ public class ManagedLedgerImpl implements ManagedLedger, CreateCallback {\n     }\n \n     @Override\n-    public void setProperty(String key, String value) throws InterruptedException {\n+    public void setProperty(String key, String value) throws InterruptedException, ManagedLedgerException {\n         Map<String, String> map = new HashMap<>();\n         map.put(key, value);\n-        updateProperties(map, false, false, null);\n+        updateProperties(map, false, null);\n     }\n \n     @Override\n-    public void deleteProperty(String key) throws InterruptedException {\n-        updateProperties(null, false, true, key);\n+    public void asyncSetProperty(String key, String value, final UpdatePropertiesCallback callback, Object ctx) {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        asyncUpdateProperties(map, false, null, callback, ctx);\n+    }\n+\n+    @Override\n+    public void deleteProperty(String key) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(null, true, key);\n     }\n \n     @Override\n-    public void setProperties(Map<String, String> properties) throws InterruptedException {\n-        updateProperties(properties, true, false, null);\n+    public void asyncDeleteProperty(String key, final UpdatePropertiesCallback callback, Object ctx) {\n+        asyncUpdateProperties(null, true, key, callback, ctx);\n     }\n \n     @Override\n-    public void asyncSetProperties(Map<String, String> properties, final SetPropertiesCallback callback, Object ctx) {\n-        asyncUpdateProperties(properties, true, false, null, callback, ctx);\n+    public void setProperties(Map<String, String> properties) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(properties, false, null);\n     }\n \n-    private void updateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,\n-        String deleteKey) throws InterruptedException {\n+    @Override\n+    public void asyncSetProperties(Map<String, String> properties, final UpdatePropertiesCallback callback,\n+        Object ctx) {\n+        asyncUpdateProperties(properties, false, null, callback, ctx);\n+    }\n+\n+    private void updateProperties(Map<String, String> properties, boolean isDelete,\n+        String deleteKey) throws InterruptedException, ManagedLedgerException {\n         final CountDownLatch latch = new CountDownLatch(1);\n-        this.asyncUpdateProperties(properties, isOverwrite, isDelete, deleteKey, new SetPropertiesCallback() {\n+        AtomicBoolean isSucceed = new AtomicBoolean(false);\n+        this.asyncUpdateProperties(properties, isDelete, deleteKey, new UpdatePropertiesCallback() {\n             @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                isSucceed.set(true);\n                 latch.countDown();\n             }\n \n             @Override\n-            public void setPropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n                 log.error(\"[{}] Update manageLedger's info failed:{}\", name, exception.getMessage());\n                 latch.countDown();\n             }\n         }, null);\n \n-        latch.await();\n+        if (!latch.await(AsyncOperationTimeoutSeconds, TimeUnit.SECONDS) || !isSucceed.get()) {\n+            throw new ManagedLedgerException(\"Update properties failed\");\n+        }\n     }\n \n-    private void asyncUpdateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,\n-        String deleteKey, final SetPropertiesCallback callback, Object ctx) {\n+    private void asyncUpdateProperties(Map<String, String> properties, boolean isDelete,\n+        String deleteKey, final UpdatePropertiesCallback callback, Object ctx) {\n         if (!metadataMutex.tryLock()) {\n             // Defer update for later\n-            scheduledExecutor.schedule(() -> asyncUpdateProperties(properties, isOverwrite, isDelete, deleteKey,\n+            scheduledExecutor.schedule(() -> asyncUpdateProperties(properties, isDelete, deleteKey,\n                 callback, ctx), 100, TimeUnit.MILLISECONDS);\n             return;\n         }\n         if (isDelete) {\n             propertiesMap.remove(deleteKey);\n-        } else if (isOverwrite) {\n-            propertiesMap = properties;\n         } else {\n             propertiesMap.putAll(properties);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Nzc3NA==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446247774", "bodyText": "I still think the setProperties() should not blindly overwrite the current map, rather just overwrite the individual keys. It's just a convenience to have 1 metadata op to set multiple keys.\nOtherwise it would be a replaceProperties(), but I don't see how would that be more useful than a setProperties().", "author": "merlimat", "createdAt": "2020-06-26T15:17:51Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3289,39 +3315,34 @@ public void setPropertiesFailed(ManagedLedgerException exception, Object ctx) {\n         latch.await();\n     }\n \n-    @Override\n-    public void asyncSetProperties(Map<String, String> properties, final SetPropertiesCallback callback, Object ctx) {\n-        store.getManagedLedgerInfo(name, false, new MetaStoreCallback<ManagedLedgerInfo>() {\n+    private void asyncUpdateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,\n+        String deleteKey, final SetPropertiesCallback callback, Object ctx) {\n+        if (!metadataMutex.tryLock()) {\n+            // Defer update for later\n+            scheduledExecutor.schedule(() -> asyncUpdateProperties(properties, isOverwrite, isDelete, deleteKey,\n+                callback, ctx), 100, TimeUnit.MILLISECONDS);\n+            return;\n+        }\n+        if (isDelete) {\n+            propertiesMap.remove(deleteKey);\n+        } else if (isOverwrite) {", "originalCommit": "b6320e85f1ee94d0ad797b6d74029a9785f68eac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MTAwNw==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446481007", "bodyText": "Done.", "author": "zhanghaou", "createdAt": "2020-06-27T04:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Nzc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "63ca55ae06ef7f6e059631925c68af7e406ab6f6", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\nindex bbb4ef553bf..599c1a55c59 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n\n@@ -3275,58 +3275,73 @@ public class ManagedLedgerImpl implements ManagedLedger, CreateCallback {\n     }\n \n     @Override\n-    public void setProperty(String key, String value) throws InterruptedException {\n+    public void setProperty(String key, String value) throws InterruptedException, ManagedLedgerException {\n         Map<String, String> map = new HashMap<>();\n         map.put(key, value);\n-        updateProperties(map, false, false, null);\n+        updateProperties(map, false, null);\n     }\n \n     @Override\n-    public void deleteProperty(String key) throws InterruptedException {\n-        updateProperties(null, false, true, key);\n+    public void asyncSetProperty(String key, String value, final UpdatePropertiesCallback callback, Object ctx) {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        asyncUpdateProperties(map, false, null, callback, ctx);\n+    }\n+\n+    @Override\n+    public void deleteProperty(String key) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(null, true, key);\n     }\n \n     @Override\n-    public void setProperties(Map<String, String> properties) throws InterruptedException {\n-        updateProperties(properties, true, false, null);\n+    public void asyncDeleteProperty(String key, final UpdatePropertiesCallback callback, Object ctx) {\n+        asyncUpdateProperties(null, true, key, callback, ctx);\n     }\n \n     @Override\n-    public void asyncSetProperties(Map<String, String> properties, final SetPropertiesCallback callback, Object ctx) {\n-        asyncUpdateProperties(properties, true, false, null, callback, ctx);\n+    public void setProperties(Map<String, String> properties) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(properties, false, null);\n     }\n \n-    private void updateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,\n-        String deleteKey) throws InterruptedException {\n+    @Override\n+    public void asyncSetProperties(Map<String, String> properties, final UpdatePropertiesCallback callback,\n+        Object ctx) {\n+        asyncUpdateProperties(properties, false, null, callback, ctx);\n+    }\n+\n+    private void updateProperties(Map<String, String> properties, boolean isDelete,\n+        String deleteKey) throws InterruptedException, ManagedLedgerException {\n         final CountDownLatch latch = new CountDownLatch(1);\n-        this.asyncUpdateProperties(properties, isOverwrite, isDelete, deleteKey, new SetPropertiesCallback() {\n+        AtomicBoolean isSucceed = new AtomicBoolean(false);\n+        this.asyncUpdateProperties(properties, isDelete, deleteKey, new UpdatePropertiesCallback() {\n             @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                isSucceed.set(true);\n                 latch.countDown();\n             }\n \n             @Override\n-            public void setPropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n                 log.error(\"[{}] Update manageLedger's info failed:{}\", name, exception.getMessage());\n                 latch.countDown();\n             }\n         }, null);\n \n-        latch.await();\n+        if (!latch.await(AsyncOperationTimeoutSeconds, TimeUnit.SECONDS) || !isSucceed.get()) {\n+            throw new ManagedLedgerException(\"Update properties failed\");\n+        }\n     }\n \n-    private void asyncUpdateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,\n-        String deleteKey, final SetPropertiesCallback callback, Object ctx) {\n+    private void asyncUpdateProperties(Map<String, String> properties, boolean isDelete,\n+        String deleteKey, final UpdatePropertiesCallback callback, Object ctx) {\n         if (!metadataMutex.tryLock()) {\n             // Defer update for later\n-            scheduledExecutor.schedule(() -> asyncUpdateProperties(properties, isOverwrite, isDelete, deleteKey,\n+            scheduledExecutor.schedule(() -> asyncUpdateProperties(properties, isDelete, deleteKey,\n                 callback, ctx), 100, TimeUnit.MILLISECONDS);\n             return;\n         }\n         if (isDelete) {\n             propertiesMap.remove(deleteKey);\n-        } else if (isOverwrite) {\n-            propertiesMap = properties;\n         } else {\n             propertiesMap.putAll(properties);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Nzk2OQ==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446247969", "bodyText": "shutdown executor at the end", "author": "merlimat", "createdAt": "2020-06-26T15:18:13Z", "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1177,40 +1177,59 @@ public void testSetProperties() throws Exception {\n         ledger.setProperties(properties);\n         assertEquals(ledger.getProperties(), properties);\n \n+        properties.put(\"key4\", \"value4\");\n+        ledger.setProperty(\"key4\", \"value4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n+        ledger.deleteProperty(\"key4\");\n+        properties.remove(\"key4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n         Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n         ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n     @Test\n-    public void testAsyncSetProperties() throws Exception {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n-        Map<String, String> properties = new HashMap<>();\n-        properties.put(\"key1\", \"value1\");\n-        properties.put(\"key2\", \"value2\");\n-        properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n-        Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n-        newProperties.put(\"key5\", \"value5\");\n-        newProperties.put(\"key6\", \"value6\");\n-        ledger.asyncSetProperties(newProperties, new AsyncCallbacks.SetPropertiesCallback() {\n-            @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n-                latch.countDown();\n+    public void testConcurrentAsyncSetProperties() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(1000);\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n+        Executor executor = Executors.newCachedThreadPool();", "originalCommit": "b6320e85f1ee94d0ad797b6d74029a9785f68eac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MDk3NA==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446480974", "bodyText": "Done.", "author": "zhanghaou", "createdAt": "2020-06-27T04:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Nzk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "63ca55ae06ef7f6e059631925c68af7e406ab6f6", "chunk": "diff --git a/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java b/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\nindex c5fe5ad2a7b..307f240dd4a 100644\n--- a/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\n+++ b/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\n\n@@ -1187,26 +1186,64 @@ public class ManagedLedgerTest extends MockedBookKeeperTestCase {\n \n         Map<String, String> newProperties = new HashMap<>();\n         newProperties.put(\"key5\", \"value5\");\n-        newProperties.put(\"key6\", \"value6\");\n+        newProperties.put(\"key1\", \"value6\");\n+        newProperties.putAll(properties);\n         ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n+    @Test\n+    public void testAsyncUpdateProperties() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(3);\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n+        Map<String, String> prop = new HashMap<>();\n+        prop.put(\"key1\", \"value1\");\n+        prop.put(\"key2\", \"value2\");\n+        prop.put(\"key3\", \"value3\");\n+        ledger.asyncSetProperties(prop, new AsyncCallbacks.UpdatePropertiesCallback() {\n+            @Override\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                assertEquals(prop, properties);\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            }\n+        }, null);\n+        Map<String, String> property = new HashMap<>();\n+        property.put(\"key4\", \"value4\");\n+        ledger.asyncSetProperty(\"key4\", \"value4\", new AsyncCallbacks.UpdatePropertiesCallback() {\n+            @Override\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                assertEquals(\"value4\", property.get(\"key4\"));\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            }\n+        }, null);\n+        prop.remove(\"key1\");\n+        ledger.asyncDeleteProperty(\"key1\", new AsyncCallbacks.UpdatePropertiesCallback() {\n+            @Override\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                assertNull(properties.get(\"key1\"));\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            }\n+        }, null);\n+        assertTrue(latch.await(60, TimeUnit.SECONDS));\n+    }\n+\n     @Test\n     public void testConcurrentAsyncSetProperties() throws Exception {\n         final CountDownLatch latch = new CountDownLatch(1000);\n         ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n-        Executor executor = Executors.newCachedThreadPool();\n-        executor.execute(()->{\n-            try {\n-                for (int i = 0; i < 100; i++) {\n-                    ledger.addEntry(\"data\".getBytes(Encoding));\n-                    Thread.sleep(300);\n-                }\n-            } catch (Exception e) {\n-                fail(e.getMessage());\n-            }\n-        });\n+        ExecutorService executor = Executors.newCachedThreadPool();\n         for (int i = 0; i < 1000; i++) {\n             final int finalI = i;\n             executor.execute(() -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0ODk5Mw==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446248993", "bodyText": "Since this is not in the main thread, it will not fail the test itself.\nWe don't need to do it from different threads. It would be enough to do something like:\nledger.addEntry(e1);\nledger.setProperty(\"x\", \"xx\");\nledger.addEntry(e2);\n// ...", "author": "merlimat", "createdAt": "2020-06-26T15:20:10Z", "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1177,40 +1177,59 @@ public void testSetProperties() throws Exception {\n         ledger.setProperties(properties);\n         assertEquals(ledger.getProperties(), properties);\n \n+        properties.put(\"key4\", \"value4\");\n+        ledger.setProperty(\"key4\", \"value4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n+        ledger.deleteProperty(\"key4\");\n+        properties.remove(\"key4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n         Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n         ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n     @Test\n-    public void testAsyncSetProperties() throws Exception {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n-        Map<String, String> properties = new HashMap<>();\n-        properties.put(\"key1\", \"value1\");\n-        properties.put(\"key2\", \"value2\");\n-        properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n-        Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n-        newProperties.put(\"key5\", \"value5\");\n-        newProperties.put(\"key6\", \"value6\");\n-        ledger.asyncSetProperties(newProperties, new AsyncCallbacks.SetPropertiesCallback() {\n-            @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n-                latch.countDown();\n+    public void testConcurrentAsyncSetProperties() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(1000);\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n+        Executor executor = Executors.newCachedThreadPool();\n+        executor.execute(()->{\n+            try {\n+                for (int i = 0; i < 100; i++) {\n+                    ledger.addEntry(\"data\".getBytes(Encoding));\n+                    Thread.sleep(300);\n+                }\n+            } catch (Exception e) {\n+                fail(e.getMessage());", "originalCommit": "b6320e85f1ee94d0ad797b6d74029a9785f68eac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MDk1OQ==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446480959", "bodyText": "Done.", "author": "zhanghaou", "createdAt": "2020-06-27T04:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0ODk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "63ca55ae06ef7f6e059631925c68af7e406ab6f6", "chunk": "diff --git a/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java b/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\nindex c5fe5ad2a7b..307f240dd4a 100644\n--- a/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\n+++ b/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java\n\n@@ -1187,26 +1186,64 @@ public class ManagedLedgerTest extends MockedBookKeeperTestCase {\n \n         Map<String, String> newProperties = new HashMap<>();\n         newProperties.put(\"key5\", \"value5\");\n-        newProperties.put(\"key6\", \"value6\");\n+        newProperties.put(\"key1\", \"value6\");\n+        newProperties.putAll(properties);\n         ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n+    @Test\n+    public void testAsyncUpdateProperties() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(3);\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n+        Map<String, String> prop = new HashMap<>();\n+        prop.put(\"key1\", \"value1\");\n+        prop.put(\"key2\", \"value2\");\n+        prop.put(\"key3\", \"value3\");\n+        ledger.asyncSetProperties(prop, new AsyncCallbacks.UpdatePropertiesCallback() {\n+            @Override\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                assertEquals(prop, properties);\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            }\n+        }, null);\n+        Map<String, String> property = new HashMap<>();\n+        property.put(\"key4\", \"value4\");\n+        ledger.asyncSetProperty(\"key4\", \"value4\", new AsyncCallbacks.UpdatePropertiesCallback() {\n+            @Override\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                assertEquals(\"value4\", property.get(\"key4\"));\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            }\n+        }, null);\n+        prop.remove(\"key1\");\n+        ledger.asyncDeleteProperty(\"key1\", new AsyncCallbacks.UpdatePropertiesCallback() {\n+            @Override\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                assertNull(properties.get(\"key1\"));\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            }\n+        }, null);\n+        assertTrue(latch.await(60, TimeUnit.SECONDS));\n+    }\n+\n     @Test\n     public void testConcurrentAsyncSetProperties() throws Exception {\n         final CountDownLatch latch = new CountDownLatch(1000);\n         ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n-        Executor executor = Executors.newCachedThreadPool();\n-        executor.execute(()->{\n-            try {\n-                for (int i = 0; i < 100; i++) {\n-                    ledger.addEntry(\"data\".getBytes(Encoding));\n-                    Thread.sleep(300);\n-                }\n-            } catch (Exception e) {\n-                fail(e.getMessage());\n-            }\n-        });\n+        ExecutorService executor = Executors.newCachedThreadPool();\n         for (int i = 0; i < 1000; i++) {\n             final int finalI = i;\n             executor.execute(() -> {\n"}}, {"oid": "63ca55ae06ef7f6e059631925c68af7e406ab6f6", "url": "https://github.com/apache/pulsar/commit/63ca55ae06ef7f6e059631925c68af7e406ab6f6", "message": "Add AsyncSetProperty(), asyncDeleteProperty() API and add related unit tests.", "committedDate": "2020-06-27T03:58:24Z", "type": "commit"}, {"oid": "7997e77ed8970c14cf12bb4b3afcf15050270999", "url": "https://github.com/apache/pulsar/commit/7997e77ed8970c14cf12bb4b3afcf15050270999", "message": "Fix unit test.", "committedDate": "2020-06-27T05:10:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0ODkxMw==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446548913", "bodyText": "We should use the exception returned int the updatePropertiesFailed() and propagate that back to the user. Take a look at https://github.com/apache/pulsar/blob/master/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java#L1096", "author": "merlimat", "createdAt": "2020-06-27T17:39:30Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3271,57 +3275,89 @@ public long getOffloadedSize() {\n     }\n \n     @Override\n-    public void setProperties(Map<String, String> properties) throws InterruptedException {\n+    public void setProperty(String key, String value) throws InterruptedException, ManagedLedgerException {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        updateProperties(map, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperty(String key, String value, final UpdatePropertiesCallback callback, Object ctx) {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        asyncUpdateProperties(map, false, null, callback, ctx);\n+    }\n+\n+    @Override\n+    public void deleteProperty(String key) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(null, true, key);\n+    }\n+\n+    @Override\n+    public void asyncDeleteProperty(String key, final UpdatePropertiesCallback callback, Object ctx) {\n+        asyncUpdateProperties(null, true, key, callback, ctx);\n+    }\n+\n+    @Override\n+    public void setProperties(Map<String, String> properties) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(properties, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperties(Map<String, String> properties, final UpdatePropertiesCallback callback,\n+        Object ctx) {\n+        asyncUpdateProperties(properties, false, null, callback, ctx);\n+    }\n+\n+    private void updateProperties(Map<String, String> properties, boolean isDelete,\n+        String deleteKey) throws InterruptedException, ManagedLedgerException {\n         final CountDownLatch latch = new CountDownLatch(1);\n-        this.asyncSetProperties(properties, new SetPropertiesCallback() {\n+        AtomicBoolean isSucceed = new AtomicBoolean(false);\n+        this.asyncUpdateProperties(properties, isDelete, deleteKey, new UpdatePropertiesCallback() {\n             @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                isSucceed.set(true);\n                 latch.countDown();\n             }\n \n             @Override\n-            public void setPropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n                 log.error(\"[{}] Update manageLedger's info failed:{}\", name, exception.getMessage());\n                 latch.countDown();\n             }\n         }, null);\n \n-        latch.await();\n+        if (!latch.await(AsyncOperationTimeoutSeconds, TimeUnit.SECONDS) || !isSucceed.get()) {\n+            throw new ManagedLedgerException(\"Update properties failed\");", "originalCommit": "7997e77ed8970c14cf12bb4b3afcf15050270999", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDY3NQ==", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446590675", "bodyText": "Done. Thanks for your guidance :)", "author": "zhanghaou", "createdAt": "2020-06-28T02:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0ODkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d6308aece24e968d6568138180a223e26f60492c", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\nindex 599c1a55c59..f45b341d61d 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java\n\n@@ -3312,23 +3308,30 @@ public class ManagedLedgerImpl implements ManagedLedger, CreateCallback {\n     private void updateProperties(Map<String, String> properties, boolean isDelete,\n         String deleteKey) throws InterruptedException, ManagedLedgerException {\n         final CountDownLatch latch = new CountDownLatch(1);\n-        AtomicBoolean isSucceed = new AtomicBoolean(false);\n+        class Result {\n+            ManagedLedgerException exception = null;\n+        }\n+        final Result result = new Result();\n         this.asyncUpdateProperties(properties, isDelete, deleteKey, new UpdatePropertiesCallback() {\n             @Override\n             public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n-                isSucceed.set(true);\n                 latch.countDown();\n             }\n \n             @Override\n             public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n-                log.error(\"[{}] Update manageLedger's info failed:{}\", name, exception.getMessage());\n+                result.exception = exception;\n                 latch.countDown();\n             }\n         }, null);\n \n-        if (!latch.await(AsyncOperationTimeoutSeconds, TimeUnit.SECONDS) || !isSucceed.get()) {\n-            throw new ManagedLedgerException(\"Update properties failed\");\n+        if (!latch.await(AsyncOperationTimeoutSeconds, TimeUnit.SECONDS)) {\n+            throw new ManagedLedgerException(\"Timeout during update managedLedger's properties\");\n+        }\n+\n+        if (result.exception != null) {\n+            log.error(\"[{}] Update managedLedger's properties failed\", name, result.exception);\n+            throw result.exception;\n         }\n     }\n \n"}}, {"oid": "d6308aece24e968d6568138180a223e26f60492c", "url": "https://github.com/apache/pulsar/commit/d6308aece24e968d6568138180a223e26f60492c", "message": "Fix exception propagation.", "committedDate": "2020-06-28T02:15:41Z", "type": "commit"}, {"oid": "809a9a3c1499816936ac65009e8ce26ee0756cb3", "url": "https://github.com/apache/pulsar/commit/809a9a3c1499816936ac65009e8ce26ee0756cb3", "message": "Merge pull request #3 from apache/master\n\nmerge", "committedDate": "2020-06-28T12:26:22Z", "type": "commit"}]}