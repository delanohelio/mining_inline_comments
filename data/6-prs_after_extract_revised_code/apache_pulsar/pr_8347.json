{"pr_number": 8347, "pr_title": "[Transaction] TransactionBuffer Refactor", "pr_createdAt": "2020-10-22T17:33:00Z", "pr_url": "https://github.com/apache/pulsar/pull/8347", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3ODE5Nw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511478197", "bodyText": "It's some of the old codes are not useful, we can delete them directly. we don't want to tell users there some deprecated components in the first transaction release.\nPlease check all.", "author": "codelipenghui", "createdAt": "2020-10-24T14:57:34Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/PersistentTransactionBufferProvider.java", "diffHunk": "@@ -34,6 +34,7 @@\n /**\n  * Persistent transaction buffer provider.\n  */\n+@Deprecated", "originalCommit": "a68f0a994c774ac823be5163098f970f68981d53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5MjI0Mw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511692243", "bodyText": "Ok", "author": "gaoran10", "createdAt": "2020-10-26T02:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3ODE5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/PersistentTransactionBufferProvider.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/PersistentTransactionBufferProvider.java\nindex 6b4732ecbef..ebf3d7bbbb9 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/PersistentTransactionBufferProvider.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/PersistentTransactionBufferProvider.java\n\n@@ -34,7 +34,6 @@ import java.util.concurrent.CompletableFuture;\n /**\n  * Persistent transaction buffer provider.\n  */\n-@Deprecated\n @Slf4j\n public class PersistentTransactionBufferProvider implements TransactionBufferProvider {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNjI4Mw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511806283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PersistentTopic topic;\n          \n          \n            \n                private final PersistentTopic topic;", "author": "codelipenghui", "createdAt": "2020-10-26T09:03:17Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\nindex 46585189056..d1a38ab266f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n\n@@ -1,27 +1,6 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n package org.apache.pulsar.broker.transaction.buffer.impl;\n \n import io.netty.buffer.ByteBuf;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.bookkeeper.mledger.Position;\n import org.apache.bookkeeper.mledger.impl.PositionImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzExMg==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511807112", "bodyText": "Shall we need this method?", "author": "codelipenghui", "createdAt": "2020-10-26T09:04:46Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\nindex 46585189056..d1a38ab266f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n\n@@ -1,27 +1,6 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n package org.apache.pulsar.broker.transaction.buffer.impl;\n \n import io.netty.buffer.ByteBuf;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.bookkeeper.mledger.Position;\n import org.apache.bookkeeper.mledger.impl.PositionImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzU4MA==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511807580", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);\n          \n          \n            \n                            log.error(\"Failed to append buffer to txn {}\", txnId, e);", "author": "codelipenghui", "createdAt": "2020-10-26T09:05:39Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Position> appendBufferToTxn(TxnID txnId, long sequenceId, ByteBuf buffer) {\n+        CompletableFuture<Position> completableFuture = new CompletableFuture<>();\n+        topic.publishMessage(buffer, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\nindex 46585189056..d1a38ab266f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n\n@@ -1,27 +1,6 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n package org.apache.pulsar.broker.transaction.buffer.impl;\n \n import io.netty.buffer.ByteBuf;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.bookkeeper.mledger.Position;\n import org.apache.bookkeeper.mledger.impl.PositionImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwODgzNw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511808837", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<PulsarMarkers.MessageIdData> messageIdDataList = new ArrayList<>();\n          \n          \n            \n                    List<PulsarMarkers.MessageIdData> messageIdDataList = new ArrayList<>(sendMessageIdList.size());", "author": "codelipenghui", "createdAt": "2020-10-26T09:07:45Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Position> appendBufferToTxn(TxnID txnId, long sequenceId, ByteBuf buffer) {\n+        CompletableFuture<Position> completableFuture = new CompletableFuture<>();\n+        topic.publishMessage(buffer, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(PositionImpl.get(ledgerId, entryId));\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionBufferReader> openTransactionBufferReader(TxnID txnID, long startSequenceId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> commitTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} commit on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf commitMarker = Markers.newTxnCommitMarker(-1L, txnID.getMostSigBits(),\n+                txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(commitMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to commit for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> abortTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} abort on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf abortMarker = Markers.newTxnAbortMarker(\n+                -1L, txnID.getMostSigBits(), txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(abortMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to abort for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;\n+    }\n+\n+    private List<PulsarMarkers.MessageIdData> getMessageIdDataList(List<MessageIdData> sendMessageIdList) {\n+        List<PulsarMarkers.MessageIdData> messageIdDataList = new ArrayList<>();", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\nindex 46585189056..d1a38ab266f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n\n@@ -1,27 +1,6 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n package org.apache.pulsar.broker.transaction.buffer.impl;\n \n import io.netty.buffer.ByteBuf;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.bookkeeper.mledger.Position;\n import org.apache.bookkeeper.mledger.impl.PositionImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMDQwMA==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511810400", "bodyText": "Recycle the MessageIdData list before return?", "author": "codelipenghui", "createdAt": "2020-10-26T09:10:21Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Position> appendBufferToTxn(TxnID txnId, long sequenceId, ByteBuf buffer) {\n+        CompletableFuture<Position> completableFuture = new CompletableFuture<>();\n+        topic.publishMessage(buffer, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(PositionImpl.get(ledgerId, entryId));\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionBufferReader> openTransactionBufferReader(TxnID txnID, long startSequenceId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> commitTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} commit on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf commitMarker = Markers.newTxnCommitMarker(-1L, txnID.getMostSigBits(),\n+                txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(commitMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to commit for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> abortTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} abort on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf abortMarker = Markers.newTxnAbortMarker(\n+                -1L, txnID.getMostSigBits(), txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(abortMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to abort for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;\n+    }\n+\n+    private List<PulsarMarkers.MessageIdData> getMessageIdDataList(List<MessageIdData> sendMessageIdList) {\n+        List<PulsarMarkers.MessageIdData> messageIdDataList = new ArrayList<>();\n+        for (MessageIdData msgIdData : sendMessageIdList) {\n+            messageIdDataList.add(\n+                    PulsarMarkers.MessageIdData.newBuilder()\n+                            .setLedgerId(msgIdData.getLedgerId())\n+                            .setEntryId(msgIdData.getEntryId()).build());\n+        }\n+        return messageIdDataList;", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\nindex 46585189056..d1a38ab266f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n\n@@ -1,27 +1,6 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n package org.apache.pulsar.broker.transaction.buffer.impl;\n \n import io.netty.buffer.ByteBuf;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.bookkeeper.mledger.Position;\n import org.apache.bookkeeper.mledger.impl.PositionImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMDkwOQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511810909", "bodyText": "I'm not sure where the MessageId list that getMessageIdDataList(sendMessageIdList) getted will be recycle.", "author": "codelipenghui", "createdAt": "2020-10-26T09:11:12Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Position> appendBufferToTxn(TxnID txnId, long sequenceId, ByteBuf buffer) {\n+        CompletableFuture<Position> completableFuture = new CompletableFuture<>();\n+        topic.publishMessage(buffer, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(PositionImpl.get(ledgerId, entryId));\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionBufferReader> openTransactionBufferReader(TxnID txnID, long startSequenceId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> commitTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} commit on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf commitMarker = Markers.newTxnCommitMarker(-1L, txnID.getMostSigBits(),\n+                txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(commitMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to commit for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4NjM3MQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511886371", "bodyText": "I'll recycle them after new the transaction marker. In the method newTxnMarker of  the class org.apache.pulsar.common.protocol.Markers.", "author": "gaoran10", "createdAt": "2020-10-26T11:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMDkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\nindex 46585189056..d1a38ab266f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java\n\n@@ -1,27 +1,6 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n package org.apache.pulsar.broker.transaction.buffer.impl;\n \n import io.netty.buffer.ByteBuf;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.bookkeeper.mledger.Position;\n import org.apache.bookkeeper.mledger.impl.PositionImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMjMzNw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511812337", "bodyText": "throw Not support exception?", "author": "codelipenghui", "createdAt": "2020-10-26T09:13:40Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBufferProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import org.apache.pulsar.broker.service.Topic;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferProvider;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A provider that provides topic implementations of {@link TransactionBuffer}.\n+ */\n+public class TopicTransactionBufferProvider implements TransactionBufferProvider {\n+    @Override\n+    public CompletableFuture<TransactionBuffer> newTransactionBuffer() {\n+        return CompletableFuture.completedFuture(null);", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg5MDYzMg==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511890632", "bodyText": "Ok, that's better.", "author": "gaoran10", "createdAt": "2020-10-26T11:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMjMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "da9b53bf63e5bdf944f74d0223bc005913cedebb", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBufferProvider.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBufferProvider.java\nindex d119a5ebefa..4d589d5283f 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBufferProvider.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBufferProvider.java\n\n@@ -29,9 +29,13 @@ import java.util.concurrent.CompletableFuture;\n  * A provider that provides topic implementations of {@link TransactionBuffer}.\n  */\n public class TopicTransactionBufferProvider implements TransactionBufferProvider {\n+\n     @Override\n     public CompletableFuture<TransactionBuffer> newTransactionBuffer() {\n-        return CompletableFuture.completedFuture(null);\n+        CompletableFuture<TransactionBuffer> completableFuture = new CompletableFuture<>();\n+        completableFuture.completeExceptionally(new Exception(\"Unsupported operation new transaction buffer \"\n+                + \"with no arguments for TopicTransactionBufferProvider.\"));\n+        return completableFuture;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMzIwMw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511813203", "bodyText": "Why we should delete these lines?", "author": "codelipenghui", "createdAt": "2020-10-26T09:15:03Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBufferReader.java", "diffHunk": "@@ -66,15 +66,15 @@ public InMemTransactionBufferReader(TxnID txnId, Iterator<Entry<Long, ByteBuf>>\n         int i = 0;\n         while (i < numEntries && entries.hasNext()) {\n             Entry<Long, ByteBuf> entry = entries.next();\n-            TransactionEntry txnEntry = new TransactionEntryImpl(\n-                txnId,\n-                entry.getKey(),\n-                EntryImpl.create(-1L, -1L, entry.getValue()),\n-                committedAtLedgerId,\n-                committedAtEntryId,\n-                -1\n-            );\n-            txnEntries.add(txnEntry);\n+//            TransactionEntry txnEntry = new TransactionEntryImpl(\n+//                txnId,\n+//                entry.getKey(),\n+//                EntryImpl.create(-1L, -1L, entry.getValue()),\n+//                committedAtLedgerId,\n+//                committedAtEntryId,\n+//                -1\n+//            );\n+//            txnEntries.add(txnEntry);", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkwNDI4Nw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511904287", "bodyText": "The class TransactionEntryImpl was removed. The InMemTransactionBufferReader is unnecessary.", "author": "gaoran10", "createdAt": "2020-10-26T11:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMzIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBufferReader.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBufferReader.java\nindex c7f8f20d7a4..c4cbb839e4e 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBufferReader.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBufferReader.java\n\n@@ -66,15 +66,15 @@ public class InMemTransactionBufferReader implements TransactionBufferReader {\n         int i = 0;\n         while (i < numEntries && entries.hasNext()) {\n             Entry<Long, ByteBuf> entry = entries.next();\n-//            TransactionEntry txnEntry = new TransactionEntryImpl(\n-//                txnId,\n-//                entry.getKey(),\n-//                EntryImpl.create(-1L, -1L, entry.getValue()),\n-//                committedAtLedgerId,\n-//                committedAtEntryId,\n-//                -1\n-//            );\n-//            txnEntries.add(txnEntry);\n+            TransactionEntry txnEntry = new TransactionEntryImpl(\n+                txnId,\n+                entry.getKey(),\n+                EntryImpl.create(-1L, -1L, entry.getValue()),\n+                committedAtLedgerId,\n+                committedAtEntryId,\n+                -1\n+            );\n+            txnEntries.add(txnEntry);\n             ++i;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNDc3MQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511814771", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private CompletableFuture<Void> endToTB(TxnID txnID, int txnAction, List<PulsarApi.MessageIdData> messageIdDataList) {\n          \n          \n            \n                private CompletableFuture<Void> endTxnInTransactionBuffer(TxnID txnID, int txnAction, List<PulsarApi.MessageIdData> messageIdDataList) {", "author": "codelipenghui", "createdAt": "2020-10-26T09:17:40Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java", "diffHunk": "@@ -206,7 +210,7 @@ public void removeTransactionMetadataStore(TransactionCoordinatorID tcId) {\n         return completableFuture;\n     }\n \n-    private CompletableFuture<Void> endToTB(TxnID txnID, int txnAction) {\n+    private CompletableFuture<Void> endToTB(TxnID txnID, int txnAction, List<PulsarApi.MessageIdData> messageIdDataList) {", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da9b53bf63e5bdf944f74d0223bc005913cedebb", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java\nindex 5838cbdc684..da2ca444d8c 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java\n\n@@ -210,7 +210,8 @@ public class TransactionMetadataStoreService {\n         return completableFuture;\n     }\n \n-    private CompletableFuture<Void> endToTB(TxnID txnID, int txnAction, List<PulsarApi.MessageIdData> messageIdDataList) {\n+    private CompletableFuture<Void> endTxnInTransactionBuffer(TxnID txnID, int txnAction,\n+                                                              List<PulsarApi.MessageIdData> messageIdDataList) {\n         CompletableFuture<Void> resultFuture = new CompletableFuture<>();\n         List<CompletableFuture<TxnID>> completableFutureList = new ArrayList<>();\n         this.getTxnMeta(txnID).whenComplete((txnMeta, throwable) -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNjE4Ng==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511816186", "bodyText": "Please recycle the Pulsar command after If confirmed no longer use. Please check all.", "author": "codelipenghui", "createdAt": "2020-10-26T09:20:01Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java", "diffHunk": "@@ -229,12 +233,24 @@ public void removeTransactionMetadataStore(TransactionCoordinatorID tcId) {\n                 completableFutureList.add(actionFuture);\n             });\n \n+            List<MessageId> messageIdList = new ArrayList<>();\n+            for (PulsarApi.MessageIdData messageIdData : messageIdDataList) {\n+                messageIdList.add(new MessageIdImpl(\n+                        messageIdData.getLedgerId(), messageIdData.getEntryId(), messageIdData.getPartition()));\n+            }\n+", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkwNTE2Mw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511905163", "bodyText": "Ok", "author": "gaoran10", "createdAt": "2020-10-26T11:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNjE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java\nindex 5838cbdc684..990f27472cf 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java\n\n@@ -242,15 +241,9 @@ public class TransactionMetadataStoreService {\n             txnMeta.producedPartitions().forEach(partition -> {\n                 CompletableFuture<TxnID> actionFuture = new CompletableFuture<>();\n                 if (PulsarApi.TxnAction.COMMIT_VALUE == txnAction) {\n-                    actionFuture = tbClient.commitTxnOnTopic(partition, txnID.getMostSigBits(), txnID.getLeastSigBits(),\n-                            messageIdList.stream().filter(\n-                                    msg -> ((MessageIdImpl) msg).getPartitionIndex() ==\n-                                            TopicName.get(partition).getPartitionIndex()).collect(Collectors.toList()));\n+                    actionFuture = tbClient.commitTxnOnTopic(partition, txnID.getMostSigBits(), txnID.getLeastSigBits(), messageIdList);\n                 } else if (PulsarApi.TxnAction.ABORT_VALUE == txnAction) {\n-                    actionFuture = tbClient.abortTxnOnTopic(partition, txnID.getMostSigBits(), txnID.getLeastSigBits(),\n-                            messageIdList.stream().filter(\n-                                    msg -> ((MessageIdImpl) msg).getPartitionIndex() ==\n-                                            TopicName.get(partition).getPartitionIndex()).collect(Collectors.toList()));\n+                    actionFuture = tbClient.abortTxnOnTopic(partition, txnID.getMostSigBits(), txnID.getLeastSigBits(), messageIdList);\n                 } else {\n                     actionFuture.completeExceptionally(new Throwable(\"Unsupported txnAction \" + txnAction));\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMzQ3Mw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511823473", "bodyText": "The commitMarkerBuilder always not null.", "author": "codelipenghui", "createdAt": "2020-10-26T09:31:28Z", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java", "diffHunk": "@@ -309,24 +306,24 @@ private static ByteBuf newTxnMarker(MarkerType markerType, long sequenceId, long\n         MessageMetadata msgMetadata = msgMetadataBuilder.build();\n \n         ByteBuf payload;\n-        if (messageIdData.isPresent()) {\n-            PulsarMarkers.TxnCommitMarker commitMarker = PulsarMarkers.TxnCommitMarker.newBuilder()\n-                                                                                      .setMessageId(messageIdData.get())\n-                                                                                      .build();\n-            int size = commitMarker.getSerializedSize();\n-            payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n-            ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n-            commitMarker.writeTo(outStream);\n-        } else {\n-            payload = PooledByteBufAllocator.DEFAULT.buffer();\n-        }\n+        PulsarMarkers.TxnCommitMarker.Builder commitMarkerBuilder = PulsarMarkers.TxnCommitMarker.newBuilder();\n+\n+        messageIdDataList.ifPresent(commitMarkerBuilder::addAllMessageId);\n+        PulsarMarkers.TxnCommitMarker commitMarker = commitMarkerBuilder.build();\n+        int size = commitMarker.getSerializedSize();\n+        payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n+        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n+        commitMarker.writeTo(outStream);\n \n         try {\n             return Commands.serializeMetadataAndPayload(ChecksumType.Crc32c, msgMetadata, payload);\n         } finally {\n             payload.release();\n             msgMetadata.recycle();\n             msgMetadataBuilder.recycle();\n+            if (commitMarkerBuilder != null) {", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMDU3OQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511910579", "bodyText": "I'll fix this.", "author": "gaoran10", "createdAt": "2020-10-26T12:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMzQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java b/pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java\nindex 76345602e1b..0281c1420b8 100644\n--- a/pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java\n+++ b/pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java\n\n@@ -308,7 +314,8 @@ public class Markers {\n         ByteBuf payload;\n         PulsarMarkers.TxnCommitMarker.Builder commitMarkerBuilder = PulsarMarkers.TxnCommitMarker.newBuilder();\n \n-        messageIdDataList.ifPresent(commitMarkerBuilder::addAllMessageId);\n+        messageIdData.ifPresent(commitMarkerBuilder::setMessageId);\n+        messageIdDataList.ifPresent(commitMarkerBuilder::addAllMessageIdList);\n         PulsarMarkers.TxnCommitMarker commitMarker = commitMarkerBuilder.build();\n         int size = commitMarker.getSerializedSize();\n         payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMzc4NQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511823785", "bodyText": "The commitMarker also should be recycled.", "author": "codelipenghui", "createdAt": "2020-10-26T09:31:56Z", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java", "diffHunk": "@@ -309,24 +306,24 @@ private static ByteBuf newTxnMarker(MarkerType markerType, long sequenceId, long\n         MessageMetadata msgMetadata = msgMetadataBuilder.build();\n \n         ByteBuf payload;\n-        if (messageIdData.isPresent()) {\n-            PulsarMarkers.TxnCommitMarker commitMarker = PulsarMarkers.TxnCommitMarker.newBuilder()\n-                                                                                      .setMessageId(messageIdData.get())\n-                                                                                      .build();\n-            int size = commitMarker.getSerializedSize();\n-            payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n-            ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n-            commitMarker.writeTo(outStream);\n-        } else {\n-            payload = PooledByteBufAllocator.DEFAULT.buffer();\n-        }\n+        PulsarMarkers.TxnCommitMarker.Builder commitMarkerBuilder = PulsarMarkers.TxnCommitMarker.newBuilder();\n+\n+        messageIdDataList.ifPresent(commitMarkerBuilder::addAllMessageId);\n+        PulsarMarkers.TxnCommitMarker commitMarker = commitMarkerBuilder.build();", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMDUxNw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511910517", "bodyText": "Ok", "author": "gaoran10", "createdAt": "2020-10-26T12:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMzc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java b/pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java\nindex 76345602e1b..0281c1420b8 100644\n--- a/pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java\n+++ b/pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java\n\n@@ -308,7 +314,8 @@ public class Markers {\n         ByteBuf payload;\n         PulsarMarkers.TxnCommitMarker.Builder commitMarkerBuilder = PulsarMarkers.TxnCommitMarker.newBuilder();\n \n-        messageIdDataList.ifPresent(commitMarkerBuilder::addAllMessageId);\n+        messageIdData.ifPresent(commitMarkerBuilder::setMessageId);\n+        messageIdDataList.ifPresent(commitMarkerBuilder::addAllMessageIdList);\n         PulsarMarkers.TxnCommitMarker commitMarker = commitMarkerBuilder.build();\n         int size = commitMarker.getSerializedSize();\n         payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNDc4Ng==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511824786", "bodyText": "Should be recycled after no longer use", "author": "codelipenghui", "createdAt": "2020-10-26T09:33:33Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/TransactionMetaStoreHandler.java", "diffHunk": "@@ -236,7 +238,16 @@ public void handleAddSubscriptionToTxnResponse(PulsarApi.CommandAddSubscriptionT\n             return callback;\n         }\n         long requestId = client.newRequestId();\n-        ByteBuf cmd = Commands.newEndTxn(requestId, txnID.getLeastSigBits(), txnID.getMostSigBits(), PulsarApi.TxnAction.COMMIT);\n+        List<PulsarApi.MessageIdData> messageIdDataList = new ArrayList<>();", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMDczMg==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511910732", "bodyText": "Ok", "author": "gaoran10", "createdAt": "2020-10-26T12:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNDc4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNDg4OQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511824889", "bodyText": "Should be recycled after no longer use", "author": "codelipenghui", "createdAt": "2020-10-26T09:33:42Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/TransactionMetaStoreHandler.java", "diffHunk": "@@ -255,7 +266,17 @@ public void handleAddSubscriptionToTxnResponse(PulsarApi.CommandAddSubscriptionT\n             return callback;\n         }\n         long requestId = client.newRequestId();\n-        ByteBuf cmd = Commands.newEndTxn(requestId, txnID.getLeastSigBits(), txnID.getMostSigBits(), PulsarApi.TxnAction.ABORT);\n+\n+        List<PulsarApi.MessageIdData> messageIdDataList = new ArrayList<>();", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMjMzNQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511912335", "bodyText": "Ok", "author": "gaoran10", "createdAt": "2020-10-26T12:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNDg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/TransactionMetaStoreHandler.java b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/TransactionMetaStoreHandler.java\nindex 646a73a9cad..b0b9dffce78 100644\n--- a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/TransactionMetaStoreHandler.java\n+++ b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/TransactionMetaStoreHandler.java\n\n@@ -266,17 +266,7 @@ public class TransactionMetaStoreHandler extends HandlerState implements Connect\n             return callback;\n         }\n         long requestId = client.newRequestId();\n-\n-        List<PulsarApi.MessageIdData> messageIdDataList = new ArrayList<>();\n-        for (MessageId messageId : sendMessageIdList) {\n-            messageIdDataList.add(PulsarApi.MessageIdData.newBuilder()\n-                    .setLedgerId(((MessageIdImpl) messageId).getLedgerId())\n-                    .setEntryId(((MessageIdImpl) messageId).getEntryId())\n-                    .setPartition(((MessageIdImpl) messageId).getPartitionIndex())\n-                    .build());\n-        }\n-        ByteBuf cmd = Commands.newEndTxn(requestId, txnID.getLeastSigBits(), txnID.getMostSigBits(),\n-                PulsarApi.TxnAction.ABORT, messageIdDataList);\n+        ByteBuf cmd = Commands.newEndTxn(requestId, txnID.getLeastSigBits(), txnID.getMostSigBits(), PulsarApi.TxnAction.ABORT, null);\n         OpForVoidCallBack op = OpForVoidCallBack.create(cmd, callback);\n         pendingRequests.put(requestId, op);\n         timeoutQueue.add(new RequestTime(System.currentTimeMillis(), requestId));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNTg2NQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511825865", "bodyText": "Should be recycled after no longer use", "author": "codelipenghui", "createdAt": "2020-10-26T09:35:14Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferHandlerImpl.java", "diffHunk": "@@ -71,13 +75,21 @@ public TransactionBufferHandlerImpl(ConnectionPool connectionPool, NamespaceServ\n     }\n \n     @Override\n-    public CompletableFuture<TxnID> endTxnOnTopic(String topic, long txnIdMostBits, long txnIdLeastBits, PulsarApi.TxnAction action) {\n+    public CompletableFuture<TxnID> endTxnOnTopic(String topic, long txnIdMostBits, long txnIdLeastBits, PulsarApi.TxnAction action, List<MessageId> messageIdList) {\n         CompletableFuture<TxnID> cb = new CompletableFuture<>();\n         if (!canSendRequest(cb)) {\n             return cb;\n         }\n         long requestId = requestIdGenerator.getAndIncrement();\n-        ByteBuf cmd = Commands.newEndTxnOnPartition(requestId, txnIdLeastBits, txnIdMostBits, topic, action);\n+        List<PulsarApi.MessageIdData> messageIdDataList = new ArrayList<>();", "originalCommit": "483638a0ef45e17483d29e53726a2a15ed4e5760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMjY0OA==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511912648", "bodyText": "Ok", "author": "gaoran10", "createdAt": "2020-10-26T12:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNTg2NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "url": "https://github.com/apache/pulsar/commit/54578e4c803696ca117b6950ea7cf2dc35066b1b", "message": "1. produce transaction message refactor.\n2. transaction commit refactor.", "committedDate": "2020-10-28T17:30:43Z", "type": "commit"}, {"oid": "14400cbbd8297d103f568a111a06ea0226609733", "url": "https://github.com/apache/pulsar/commit/14400cbbd8297d103f568a111a06ea0226609733", "message": "add transaction message reader", "committedDate": "2020-10-28T17:30:43Z", "type": "commit"}, {"oid": "f93730c5f7218a05b463dab50a49c8971c112506", "url": "https://github.com/apache/pulsar/commit/f93730c5f7218a05b463dab50a49c8971c112506", "message": "1. topic transaction buffer abort operation.\n2. add new test for topic transaction buffer.", "committedDate": "2020-10-28T17:30:43Z", "type": "commit"}, {"oid": "afedd9431244d4178476b583113ccd245ddd64e1", "url": "https://github.com/apache/pulsar/commit/afedd9431244d4178476b583113ccd245ddd64e1", "message": "add tests for produce transaction messages and end transaction.", "committedDate": "2020-10-28T17:30:43Z", "type": "commit"}, {"oid": "f7a68ee4665b15099a301d2c21099d3bc7423035", "url": "https://github.com/apache/pulsar/commit/f7a68ee4665b15099a301d2c21099d3bc7423035", "message": "fix", "committedDate": "2020-10-28T17:32:38Z", "type": "commit"}, {"oid": "f31a9bbcf4f24609bb42aa171b1325a99489c888", "url": "https://github.com/apache/pulsar/commit/f31a9bbcf4f24609bb42aa171b1325a99489c888", "message": "code clean", "committedDate": "2020-10-28T17:32:39Z", "type": "commit"}, {"oid": "edb1162e469fe19fb5491ca221b2a7b4f2eda40c", "url": "https://github.com/apache/pulsar/commit/edb1162e469fe19fb5491ca221b2a7b4f2eda40c", "message": "fix", "committedDate": "2020-10-28T17:32:39Z", "type": "commit"}, {"oid": "fbb4e90e43b6b5703d758b5744086e56840bee23", "url": "https://github.com/apache/pulsar/commit/fbb4e90e43b6b5703d758b5744086e56840bee23", "message": "fix", "committedDate": "2020-10-28T17:32:39Z", "type": "commit"}, {"oid": "da9b53bf63e5bdf944f74d0223bc005913cedebb", "url": "https://github.com/apache/pulsar/commit/da9b53bf63e5bdf944f74d0223bc005913cedebb", "message": "change protocol field name, messageIdData recycle.", "committedDate": "2020-10-28T17:32:39Z", "type": "commit"}, {"oid": "37e56ec79acb2f4fcdb8f58a0bc750200beddab4", "url": "https://github.com/apache/pulsar/commit/37e56ec79acb2f4fcdb8f58a0bc750200beddab4", "message": "transaction messages read refactor", "committedDate": "2020-10-28T17:32:39Z", "type": "commit"}, {"oid": "37e56ec79acb2f4fcdb8f58a0bc750200beddab4", "url": "https://github.com/apache/pulsar/commit/37e56ec79acb2f4fcdb8f58a0bc750200beddab4", "message": "transaction messages read refactor", "committedDate": "2020-10-28T17:32:39Z", "type": "forcePushed"}, {"oid": "3f60bf981dc9d09390d798b91bad79f25d4d2423", "url": "https://github.com/apache/pulsar/commit/3f60bf981dc9d09390d798b91bad79f25d4d2423", "message": "transaction abort marker clean", "committedDate": "2020-10-28T17:42:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MzY0Mg==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r512653642", "bodyText": "Looks not related to this PR.", "author": "codelipenghui", "createdAt": "2020-10-27T12:32:48Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageDeduplication.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import org.apache.bookkeeper.mledger.ManagedLedger;\n+import org.apache.pulsar.broker.PulsarService;\n+\n+public class TransactionMessageDeduplication extends MessageDeduplication {", "originalCommit": "667a25d0aa482dcb038e87482ff9ffa70313ea33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NzA4OA==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513977088", "bodyText": "I'll remove this class.", "author": "gaoran10", "createdAt": "2020-10-29T05:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MzY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageDeduplication.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageDeduplication.java\nindex ba9169028c7..f238a038523 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageDeduplication.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageDeduplication.java\n\n@@ -1,21 +1,3 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n package org.apache.pulsar.broker.service.persistent;\n \n import org.apache.bookkeeper.mledger.ManagedLedger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDk4Mg==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513854982", "bodyText": "Only instantiate when the transaction is enabled.", "author": "codelipenghui", "createdAt": "2020-10-29T01:19:52Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java", "diffHunk": "@@ -73,9 +77,11 @@\n     private final ServiceConfiguration serviceConfig;\n     private volatile ScheduledFuture<?> readOnActiveConsumerTask = null;\n \n+    LongPairSet messagesToRedeliver = new ConcurrentSortedLongPairSet(128, 2);", "originalCommit": "3f60bf981dc9d09390d798b91bad79f25d4d2423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4NzAxOQ==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r514287019", "bodyText": "I'll fix this.", "author": "gaoran10", "createdAt": "2020-10-29T14:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a9abf625a13f44214f7cccd3c06b629b4f6592a9", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java\nindex 9a1e8037d6f..0313ab78f85 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java\n\n@@ -81,8 +81,6 @@ public final class PersistentDispatcherSingleActiveConsumer extends AbstractDisp\n     private final RedeliveryTracker redeliveryTracker;\n     private volatile boolean havePendingReplayRead = false;\n \n-    private TransactionMessageReader transactionMessageReader;\n-\n     public PersistentDispatcherSingleActiveConsumer(ManagedCursor cursor, SubType subscriptionType, int partitionIndex,\n             PersistentTopic topic, Subscription subscription) {\n         super(subscriptionType, partitionIndex, topic.getName(), subscription);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NzgyMA==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513857820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                default void addMessageToRedelivery(long ledgerId, long entryId) {\n          \n          \n            \n                default void addMessageToReplay(long ledgerId, long entryId) {", "author": "codelipenghui", "createdAt": "2020-10-29T01:25:16Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Dispatcher.java", "diffHunk": "@@ -115,4 +115,9 @@ default void cursorIsReset() {\n     default void acknowledgementWasProcessed() {\n         // No-op\n     }\n+\n+    default void addMessageToRedelivery(long ledgerId, long entryId) {", "originalCommit": "3f60bf981dc9d09390d798b91bad79f25d4d2423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1ODUyMA==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513858520", "bodyText": "I think use replay is more reasonable here.  The redeliver looks like the consumer receiver the messages.", "author": "codelipenghui", "createdAt": "2020-10-29T01:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NzgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4NjkyNw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r514286927", "bodyText": "ok", "author": "gaoran10", "createdAt": "2020-10-29T14:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NzgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "a9abf625a13f44214f7cccd3c06b629b4f6592a9", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Dispatcher.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Dispatcher.java\nindex ab760de3c9f..20186c73aa0 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Dispatcher.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Dispatcher.java\n\n@@ -116,8 +116,4 @@ public interface Dispatcher {\n         // No-op\n     }\n \n-    default void addMessageToRedelivery(long ledgerId, long entryId) {\n-        // No-op\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2MjAyNA==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513862024", "bodyText": "It's better to print the topic name ,subscription name in the log. You can refer to other log patterns in the PersistentDispatcherSingleActiveConsumer.java", "author": "codelipenghui", "createdAt": "2020-10-29T01:31:45Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java", "diffHunk": "@@ -447,8 +460,21 @@ protected void readMoreEntries(Consumer consumer) {\n             }\n             havePendingRead = true;\n \n-            if (transactionReader.havePendingTxnToRead()) {\n-                transactionReader.read(messagesToRead, consumer, this);\n+            if (havePendingReplayRead) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"have pending replay read\");", "originalCommit": "3f60bf981dc9d09390d798b91bad79f25d4d2423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3ODU5Mw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513978593", "bodyText": "Ok", "author": "gaoran10", "createdAt": "2020-10-29T05:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2MjAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "a9abf625a13f44214f7cccd3c06b629b4f6592a9", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java\nindex 9a1e8037d6f..0313ab78f85 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java\n\n@@ -462,7 +460,7 @@ public final class PersistentDispatcherSingleActiveConsumer extends AbstractDisp\n \n             if (havePendingReplayRead) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"have pending replay read\");\n+                    log.debug(\"[{}] Skipping replay while awaiting previous replay read to complete\", name);\n                 }\n                 return;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MTI5Nw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513871297", "bodyText": "We already have messageToRedeliver in the Dispatcher, why need to add a pendingReadPosition?", "author": "codelipenghui", "createdAt": "2020-10-29T01:52:16Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageReader.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.Dispatcher;\n+import org.apache.pulsar.broker.service.Subscription;\n+import org.apache.pulsar.common.api.proto.PulsarApi;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Commands;\n+import org.apache.pulsar.common.protocol.Markers;\n+import org.apache.pulsar.common.util.collections.ConcurrentLongPairSet;\n+\n+/**\n+ * Transaction message reader.\n+ */\n+@Slf4j\n+public class TransactionMessageReader {\n+\n+    private final Subscription subscription;\n+    private final Dispatcher dispatcher;\n+    private final Executor executor;\n+\n+    private final ConcurrentLongPairSet pendingReadPosition;", "originalCommit": "3f60bf981dc9d09390d798b91bad79f25d4d2423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4Njc0MA==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r514286740", "bodyText": "I'll remove the class TransactionMessageReader.", "author": "gaoran10", "createdAt": "2020-10-29T14:08:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MTI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a9abf625a13f44214f7cccd3c06b629b4f6592a9", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageReader.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageReader.java\ndeleted file mode 100644\nindex bd1c26cc18a..00000000000\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageReader.java\n+++ /dev/null\n\n@@ -1,110 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar.broker.service.persistent;\n-\n-import io.netty.buffer.ByteBuf;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.concurrent.Executor;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.bookkeeper.mledger.Entry;\n-import org.apache.bookkeeper.mledger.Position;\n-import org.apache.bookkeeper.mledger.impl.PositionImpl;\n-import org.apache.pulsar.broker.service.Dispatcher;\n-import org.apache.pulsar.broker.service.Subscription;\n-import org.apache.pulsar.common.api.proto.PulsarApi;\n-import org.apache.pulsar.common.api.proto.PulsarMarkers;\n-import org.apache.pulsar.common.protocol.Commands;\n-import org.apache.pulsar.common.protocol.Markers;\n-import org.apache.pulsar.common.util.collections.ConcurrentLongPairSet;\n-\n-/**\n- * Transaction message reader.\n- */\n-@Slf4j\n-public class TransactionMessageReader {\n-\n-    private final Subscription subscription;\n-    private final Dispatcher dispatcher;\n-    private final Executor executor;\n-\n-    private final ConcurrentLongPairSet pendingReadPosition;\n-    private final ArrayList<Entry> abortMarkerList;\n-\n-    public TransactionMessageReader(Subscription subscription,\n-                                    Dispatcher dispatcher, Executor executor) {\n-        this.subscription = subscription;\n-        this.dispatcher = dispatcher;\n-        this.executor = executor;\n-        this.pendingReadPosition = new ConcurrentLongPairSet(256, 1);\n-        this.abortMarkerList = new ArrayList<>();\n-    }\n-\n-    public boolean shouldSendToConsumer(PulsarApi.MessageMetadata msgMetadata, Entry entry,\n-                                            List<Entry> entries, int entryIndex) {\n-        if (pendingReadPosition.remove(entries.get(entryIndex).getLedgerId(), entries.get(entryIndex).getEntryId())) {\n-            return true;\n-        }\n-        if (Markers.isTxnCommitMarker(msgMetadata)) {\n-            getTransactionPositionList(entry);\n-        } else if (Markers.isTxnAbortMarker(msgMetadata)) {\n-            abortMarkerList.add(entry);\n-            handleAbort();\n-        }\n-        entries.set(entryIndex, null);\n-        return false;\n-    }\n-\n-    private void getTransactionPositionList(Entry entry) {\n-        try {\n-            ByteBuf byteBuf = entry.getDataBuffer();\n-            Commands.skipMessageMetadata(byteBuf);\n-            PulsarMarkers.TxnCommitMarker commitMarker = Markers.parseCommitMarker(byteBuf);\n-            for (PulsarMarkers.MessageIdData messageIdData : commitMarker.getMessageIdList()) {\n-                pendingReadPosition.add(messageIdData.getLedgerId(), messageIdData.getEntryId());\n-                dispatcher.addMessageToRedelivery(messageIdData.getLedgerId(), messageIdData.getEntryId());\n-            }\n-        } catch (IOException e) {\n-            log.error(\"Failed to get transaction message id list.\", e);\n-        }\n-    }\n-\n-    private void handleAbort() {\n-        executor.execute(() -> {\n-            List<Position> positionList = new ArrayList<>();\n-            for (Entry abortEntry : abortMarkerList) {\n-                ByteBuf byteBuf = abortEntry.getDataBuffer();\n-                Commands.parseMessageMetadata(byteBuf);\n-                PulsarMarkers.TxnCommitMarker abortMarker = null;\n-                try {\n-                    abortMarker = Markers.parseCommitMarker(byteBuf);\n-                    for (PulsarMarkers.MessageIdData messageIdData : abortMarker.getMessageIdList()) {\n-                        positionList.add(PositionImpl.get(messageIdData.getLedgerId(), messageIdData.getEntryId()));\n-                    }\n-                } catch (IOException e) {\n-                    log.error(\"Failed to parse abort marker.\", e);\n-                }\n-            }\n-            subscription.acknowledgeMessage(positionList, PulsarApi.CommandAck.AckType.Individual, Collections.emptyMap());\n-        });\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3Mzk2Mw==", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513873963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean afterTxnCommitMarker = false;\n          \n          \n            \n                    boolean isAfterTxnCommitMarker = false;", "author": "codelipenghui", "createdAt": "2020-10-29T01:58:10Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractBaseDispatcher.java", "diffHunk": "@@ -70,11 +69,13 @@ protected AbstractBaseDispatcher(Subscription subscription) {\n      */\n     public void filterEntriesForConsumer(List<Entry> entries, EntryBatchSizes batchSizes,\n                                          SendMessageInfo sendMessageInfo, EntryBatchIndexesAcks indexesAcks,\n-                                         ManagedCursor cursor, TransactionReader transactionReader) {\n+                                         ManagedCursor cursor, TransactionMessageReader transactionMessageReader) {\n         int totalMessages = 0;\n         long totalBytes = 0;\n         int totalChunkedMessages = 0;\n \n+        boolean afterTxnCommitMarker = false;", "originalCommit": "3f60bf981dc9d09390d798b91bad79f25d4d2423", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9abf625a13f44214f7cccd3c06b629b4f6592a9", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractBaseDispatcher.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractBaseDispatcher.java\nindex 4f15d6f6a20..513d6b72e0a 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractBaseDispatcher.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractBaseDispatcher.java\n\n@@ -69,12 +73,12 @@ public abstract class AbstractBaseDispatcher implements Dispatcher {\n      */\n     public void filterEntriesForConsumer(List<Entry> entries, EntryBatchSizes batchSizes,\n                                          SendMessageInfo sendMessageInfo, EntryBatchIndexesAcks indexesAcks,\n-                                         ManagedCursor cursor, TransactionMessageReader transactionMessageReader) {\n+                                         ManagedCursor cursor, boolean isReplayRead) {\n         int totalMessages = 0;\n         long totalBytes = 0;\n         int totalChunkedMessages = 0;\n \n-        boolean afterTxnCommitMarker = false;\n+        boolean isAfterTxnCommitMarker = false;\n \n         for (int i = 0, entriesSize = entries.size(); i < entriesSize; i++) {\n             Entry entry = entries.get(i);\n"}}, {"oid": "a9abf625a13f44214f7cccd3c06b629b4f6592a9", "url": "https://github.com/apache/pulsar/commit/a9abf625a13f44214f7cccd3c06b629b4f6592a9", "message": "fix", "committedDate": "2020-10-29T05:16:32Z", "type": "commit"}, {"oid": "3a9e1e555dcb8e83330ee3ef087fa405236c9f32", "url": "https://github.com/apache/pulsar/commit/3a9e1e555dcb8e83330ee3ef087fa405236c9f32", "message": "fix test", "committedDate": "2020-10-29T10:13:35Z", "type": "commit"}, {"oid": "c3d6e2ac3bb61e6a74d92d81ebf5fafa660e97ab", "url": "https://github.com/apache/pulsar/commit/c3d6e2ac3bb61e6a74d92d81ebf5fafa660e97ab", "message": "fix test", "committedDate": "2020-10-29T14:06:38Z", "type": "commit"}]}