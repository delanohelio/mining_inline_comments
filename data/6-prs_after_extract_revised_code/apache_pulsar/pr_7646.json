{"pr_number": 7646, "pr_title": "[Issue 2689] Support set backlog quota on topic level.", "pr_createdAt": "2020-07-23T13:58:08Z", "pr_url": "https://github.com/apache/pulsar/pull/7646", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzIzNw==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459477237", "bodyText": "asyncResponse.resume(new RestException(Status.PRECONDITION_FAILED,\n\"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\"))", "author": "codelipenghui", "createdAt": "2020-07-23T14:08:09Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");", "originalCommit": "3417f7a477ce03d934b32af0bd148f8d4ef01a11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxOTI4NA==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459519284", "bodyText": "I have modified", "author": "jianyun8023", "createdAt": "2020-07-23T15:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "2ecb9c2e94251faa63165fd855c2578ea5cbfb0c", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\nindex f05e7563b63..cdbca4542af 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n\n@@ -2004,94 +2000,6 @@ public class PersistentTopicsBase extends AdminResource {\n         return offlineTopicStats;\n     }\n \n-    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n-        validateAdminAccessForTenant(namespaceName.getTenant());\n-        validatePoliciesReadOnlyAccess();\n-        if (topicName.isGlobal()) {\n-            validateGlobalNamespaceOwnership(namespaceName);\n-        }\n-        if (backlogQuotaType == null) {\n-            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n-        }\n-        checkTopicLevelPolicyEnable();\n-        TopicPolicies topicPolicies;\n-        try {\n-            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n-        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n-            log.warn(\"Topic {} policies cache have not init.\", topicName);\n-            asyncResponse.resume(new RestException(e));\n-            return;\n-        }\n-        if (topicPolicies == null){\n-            topicPolicies = new TopicPolicies();\n-        }\n-\n-        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n-        if(!checkQuotas(backlogQuota,retentionPolicies)){\n-            log.warn(\n-                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n-                    clientAppId(), topicName);\n-            throw new RestException(Status.PRECONDITION_FAILED,\n-                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n-        }\n-\n-        if(backlogQuota!=null){\n-            topicPolicies.getBackLogQuotaMap().put(backlogQuotaType.name(), backlogQuota);\n-        }else {\n-            topicPolicies.getBackLogQuotaMap().remove(backlogQuotaType.name());\n-        }\n-        Map<String, BacklogQuota> backLogQuotaMap = topicPolicies.getBackLogQuotaMap();\n-        pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies)\n-                .whenComplete((r, ex) -> {\n-                    if (ex != null) {\n-                        log.error(\"Failed updated backlog quota map\",ex);\n-                        asyncResponse.resume(new RestException(ex));\n-                    } else {\n-                        try {\n-                            log.info(\"[{}] Successfully updated backlog quota map: namespace={}, topic={}, map={}\",\n-                                    clientAppId(),\n-                                    namespaceName,\n-                                    topicName.getLocalName(),\n-                                    jsonMapper().writeValueAsString(backLogQuotaMap));\n-                        } catch (JsonProcessingException ignore) { }\n-                        asyncResponse.resume(Response.noContent().build());\n-                    }\n-                });\n-    }\n-\n-    private RetentionPolicies getRetentionPolicies(TopicName topicName, TopicPolicies topicPolicies) {\n-        RetentionPolicies retentionPolicies = topicPolicies.getRetentionPolicies();\n-        if (retentionPolicies == null){\n-            try {\n-                retentionPolicies = getNamespacePoliciesAsync(topicName.getNamespaceObject())\n-                        .thenApply(policies -> policies.retention_policies)\n-                        .get(1L, TimeUnit.SECONDS);\n-            } catch (Exception e) {\n-               throw new RestException(e);\n-            }\n-        }\n-        return retentionPolicies;\n-    }\n-\n-    protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n-            BacklogQuota.BacklogQuotaType backlogQuotaType) {\n-        internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n-    }\n-\n-    private boolean checkQuotas(BacklogQuota quota, RetentionPolicies retention) {\n-        if (retention==null||retention.getRetentionSizeInMB() == 0 ||\n-                retention.getRetentionSizeInMB() == -1) {\n-            return true;\n-        }\n-        if (quota == null) {\n-            quota = pulsar().getBrokerService().getBacklogQuotaManager().getDefaultQuota();\n-        }\n-        if (quota.getLimit() >= ( retention.getRetentionSizeInMB() * 1024 * 1024)) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n     protected MessageId internalTerminate(boolean authoritative) {\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzgyMw==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459477823", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(backlogQuota!=null){\n          \n          \n            \n                    if(backlogQuota != null){\n          \n      \n    \n    \n  \n\nPlease check all.", "author": "codelipenghui", "createdAt": "2020-07-23T14:08:52Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n+        }\n+\n+        if(backlogQuota!=null){", "originalCommit": "3417f7a477ce03d934b32af0bd148f8d4ef01a11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxOTM3Mg==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459519372", "bodyText": "I have modified", "author": "jianyun8023", "createdAt": "2020-07-23T15:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "2ecb9c2e94251faa63165fd855c2578ea5cbfb0c", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\nindex f05e7563b63..cdbca4542af 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n\n@@ -2004,94 +2000,6 @@ public class PersistentTopicsBase extends AdminResource {\n         return offlineTopicStats;\n     }\n \n-    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n-        validateAdminAccessForTenant(namespaceName.getTenant());\n-        validatePoliciesReadOnlyAccess();\n-        if (topicName.isGlobal()) {\n-            validateGlobalNamespaceOwnership(namespaceName);\n-        }\n-        if (backlogQuotaType == null) {\n-            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n-        }\n-        checkTopicLevelPolicyEnable();\n-        TopicPolicies topicPolicies;\n-        try {\n-            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n-        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n-            log.warn(\"Topic {} policies cache have not init.\", topicName);\n-            asyncResponse.resume(new RestException(e));\n-            return;\n-        }\n-        if (topicPolicies == null){\n-            topicPolicies = new TopicPolicies();\n-        }\n-\n-        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n-        if(!checkQuotas(backlogQuota,retentionPolicies)){\n-            log.warn(\n-                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n-                    clientAppId(), topicName);\n-            throw new RestException(Status.PRECONDITION_FAILED,\n-                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n-        }\n-\n-        if(backlogQuota!=null){\n-            topicPolicies.getBackLogQuotaMap().put(backlogQuotaType.name(), backlogQuota);\n-        }else {\n-            topicPolicies.getBackLogQuotaMap().remove(backlogQuotaType.name());\n-        }\n-        Map<String, BacklogQuota> backLogQuotaMap = topicPolicies.getBackLogQuotaMap();\n-        pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies)\n-                .whenComplete((r, ex) -> {\n-                    if (ex != null) {\n-                        log.error(\"Failed updated backlog quota map\",ex);\n-                        asyncResponse.resume(new RestException(ex));\n-                    } else {\n-                        try {\n-                            log.info(\"[{}] Successfully updated backlog quota map: namespace={}, topic={}, map={}\",\n-                                    clientAppId(),\n-                                    namespaceName,\n-                                    topicName.getLocalName(),\n-                                    jsonMapper().writeValueAsString(backLogQuotaMap));\n-                        } catch (JsonProcessingException ignore) { }\n-                        asyncResponse.resume(Response.noContent().build());\n-                    }\n-                });\n-    }\n-\n-    private RetentionPolicies getRetentionPolicies(TopicName topicName, TopicPolicies topicPolicies) {\n-        RetentionPolicies retentionPolicies = topicPolicies.getRetentionPolicies();\n-        if (retentionPolicies == null){\n-            try {\n-                retentionPolicies = getNamespacePoliciesAsync(topicName.getNamespaceObject())\n-                        .thenApply(policies -> policies.retention_policies)\n-                        .get(1L, TimeUnit.SECONDS);\n-            } catch (Exception e) {\n-               throw new RestException(e);\n-            }\n-        }\n-        return retentionPolicies;\n-    }\n-\n-    protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n-            BacklogQuota.BacklogQuotaType backlogQuotaType) {\n-        internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n-    }\n-\n-    private boolean checkQuotas(BacklogQuota quota, RetentionPolicies retention) {\n-        if (retention==null||retention.getRetentionSizeInMB() == 0 ||\n-                retention.getRetentionSizeInMB() == -1) {\n-            return true;\n-        }\n-        if (quota == null) {\n-            quota = pulsar().getBrokerService().getBacklogQuotaManager().getDefaultQuota();\n-        }\n-        if (quota.getLimit() >= ( retention.getRetentionSizeInMB() * 1024 * 1024)) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n     protected MessageId internalTerminate(boolean authoritative) {\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MTg2NA==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459481864", "bodyText": "Should keep consistent with checkQuotas in the NamespacesBase, And you can move this method to AdminResource so that you can use it both in the NamespacesBase and PersistentTopicsBase", "author": "codelipenghui", "createdAt": "2020-07-23T14:14:32Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n+        }\n+\n+        if(backlogQuota!=null){\n+            topicPolicies.getBackLogQuotaMap().put(backlogQuotaType.name(), backlogQuota);\n+        }else {\n+            topicPolicies.getBackLogQuotaMap().remove(backlogQuotaType.name());\n+        }\n+        Map<String, BacklogQuota> backLogQuotaMap = topicPolicies.getBackLogQuotaMap();\n+        pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies)\n+                .whenComplete((r, ex) -> {\n+                    if (ex != null) {\n+                        log.error(\"Failed updated backlog quota map\",ex);\n+                        asyncResponse.resume(new RestException(ex));\n+                    } else {\n+                        try {\n+                            log.info(\"[{}] Successfully updated backlog quota map: namespace={}, topic={}, map={}\",\n+                                    clientAppId(),\n+                                    namespaceName,\n+                                    topicName.getLocalName(),\n+                                    jsonMapper().writeValueAsString(backLogQuotaMap));\n+                        } catch (JsonProcessingException ignore) { }\n+                        asyncResponse.resume(Response.noContent().build());\n+                    }\n+                });\n+    }\n+\n+    private RetentionPolicies getRetentionPolicies(TopicName topicName, TopicPolicies topicPolicies) {\n+        RetentionPolicies retentionPolicies = topicPolicies.getRetentionPolicies();\n+        if (retentionPolicies == null){\n+            try {\n+                retentionPolicies = getNamespacePoliciesAsync(topicName.getNamespaceObject())\n+                        .thenApply(policies -> policies.retention_policies)\n+                        .get(1L, TimeUnit.SECONDS);\n+            } catch (Exception e) {\n+               throw new RestException(e);\n+            }\n+        }\n+        return retentionPolicies;\n+    }\n+\n+    protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n+            BacklogQuota.BacklogQuotaType backlogQuotaType) {\n+        internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n+    }\n+\n+    private boolean checkQuotas(BacklogQuota quota, RetentionPolicies retention) {\n+        if (retention==null||retention.getRetentionSizeInMB() == 0 ||\n+                retention.getRetentionSizeInMB() == -1) {\n+            return true;\n+        }\n+        if (quota == null) {\n+            quota = pulsar().getBrokerService().getBacklogQuotaManager().getDefaultQuota();\n+        }\n+        if (quota.getLimit() >= ( retention.getRetentionSizeInMB() * 1024 * 1024)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+", "originalCommit": "3417f7a477ce03d934b32af0bd148f8d4ef01a11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTk0MA==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459879940", "bodyText": "Ok, I extracted it.", "author": "jianyun8023", "createdAt": "2020-07-24T06:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MTg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "2ecb9c2e94251faa63165fd855c2578ea5cbfb0c", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\nindex f05e7563b63..cdbca4542af 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java\n\n@@ -2004,94 +2000,6 @@ public class PersistentTopicsBase extends AdminResource {\n         return offlineTopicStats;\n     }\n \n-    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n-        validateAdminAccessForTenant(namespaceName.getTenant());\n-        validatePoliciesReadOnlyAccess();\n-        if (topicName.isGlobal()) {\n-            validateGlobalNamespaceOwnership(namespaceName);\n-        }\n-        if (backlogQuotaType == null) {\n-            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n-        }\n-        checkTopicLevelPolicyEnable();\n-        TopicPolicies topicPolicies;\n-        try {\n-            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n-        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n-            log.warn(\"Topic {} policies cache have not init.\", topicName);\n-            asyncResponse.resume(new RestException(e));\n-            return;\n-        }\n-        if (topicPolicies == null){\n-            topicPolicies = new TopicPolicies();\n-        }\n-\n-        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n-        if(!checkQuotas(backlogQuota,retentionPolicies)){\n-            log.warn(\n-                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n-                    clientAppId(), topicName);\n-            throw new RestException(Status.PRECONDITION_FAILED,\n-                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n-        }\n-\n-        if(backlogQuota!=null){\n-            topicPolicies.getBackLogQuotaMap().put(backlogQuotaType.name(), backlogQuota);\n-        }else {\n-            topicPolicies.getBackLogQuotaMap().remove(backlogQuotaType.name());\n-        }\n-        Map<String, BacklogQuota> backLogQuotaMap = topicPolicies.getBackLogQuotaMap();\n-        pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies)\n-                .whenComplete((r, ex) -> {\n-                    if (ex != null) {\n-                        log.error(\"Failed updated backlog quota map\",ex);\n-                        asyncResponse.resume(new RestException(ex));\n-                    } else {\n-                        try {\n-                            log.info(\"[{}] Successfully updated backlog quota map: namespace={}, topic={}, map={}\",\n-                                    clientAppId(),\n-                                    namespaceName,\n-                                    topicName.getLocalName(),\n-                                    jsonMapper().writeValueAsString(backLogQuotaMap));\n-                        } catch (JsonProcessingException ignore) { }\n-                        asyncResponse.resume(Response.noContent().build());\n-                    }\n-                });\n-    }\n-\n-    private RetentionPolicies getRetentionPolicies(TopicName topicName, TopicPolicies topicPolicies) {\n-        RetentionPolicies retentionPolicies = topicPolicies.getRetentionPolicies();\n-        if (retentionPolicies == null){\n-            try {\n-                retentionPolicies = getNamespacePoliciesAsync(topicName.getNamespaceObject())\n-                        .thenApply(policies -> policies.retention_policies)\n-                        .get(1L, TimeUnit.SECONDS);\n-            } catch (Exception e) {\n-               throw new RestException(e);\n-            }\n-        }\n-        return retentionPolicies;\n-    }\n-\n-    protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n-            BacklogQuota.BacklogQuotaType backlogQuotaType) {\n-        internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n-    }\n-\n-    private boolean checkQuotas(BacklogQuota quota, RetentionPolicies retention) {\n-        if (retention==null||retention.getRetentionSizeInMB() == 0 ||\n-                retention.getRetentionSizeInMB() == -1) {\n-            return true;\n-        }\n-        if (quota == null) {\n-            quota = pulsar().getBrokerService().getBacklogQuotaManager().getDefaultQuota();\n-        }\n-        if (quota.getLimit() >= ( retention.getRetentionSizeInMB() * 1024 * 1024)) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n     protected MessageId internalTerminate(boolean authoritative) {\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjM4OQ==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459482389", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")\n          \n          \n            \n                @Path(\"/{tenant}/{namespace}/{topic}/backlogQuota\")", "author": "codelipenghui", "createdAt": "2020-07-23T14:15:12Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -977,6 +980,50 @@ public PersistentOfflineTopicStats getBacklog(\n         return internalGetBacklog(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")", "originalCommit": "3417f7a477ce03d934b32af0bd148f8d4ef01a11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5ODA2OA==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459498068", "bodyText": "I think it is best to keep consistent with the namespace.", "author": "jianyun8023", "createdAt": "2020-07-23T14:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5OTkzNw==", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459499937", "bodyText": "Ok, make sense.", "author": "codelipenghui", "createdAt": "2020-07-23T14:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ecb9c2e94251faa63165fd855c2578ea5cbfb0c", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\nindex d605fd52ac2..fbfea196624 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java\n\n@@ -980,50 +977,6 @@ public class PersistentTopics extends PersistentTopicsBase {\n         return internalGetBacklog(authoritative);\n     }\n \n-    @GET\n-    @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")\n-    @ApiOperation(value = \"Get backlog quota map on a topic.\")\n-    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n-            @ApiResponse(code = 404, message = \"Topic policy does not exist\"),\n-            @ApiResponse(code = 405, message = \"Topic level policy is disabled, to enable the topic level policy and retry\")})\n-    public Map<String, BacklogQuota> getBacklogQuotaMap(@PathParam(\"tenant\") String tenant,\n-            @PathParam(\"namespace\") String namespace,\n-            @PathParam(\"topic\") @Encoded String encodedTopic) {\n-        validateTopicName(tenant, namespace, encodedTopic);\n-        return getTopicPolicies(topicName)\n-                .map(TopicPolicies::getBackLogQuotaMap)\n-                .orElse(Maps.newHashMap());\n-    }\n-\n-    @POST\n-    @Path(\"/{tenant}/{namespace}/{topic}/backlogQuota\")\n-    @ApiOperation(value = \" Set a backlog quota for a topic.\")\n-    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n-            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n-            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n-            @ApiResponse(code = 405, message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n-            @ApiResponse(code = 412, message = \"Specified backlog quota exceeds retention quota. Increase retention quota and retry request\") })\n-    public void setBacklogQuota(@Suspended final AsyncResponse asyncResponse, @PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n-            @PathParam(\"topic\") @Encoded String encodedTopic,\n-            @QueryParam(\"backlogQuotaType\") BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n-        validateTopicName(tenant, namespace, encodedTopic);\n-        internalSetBacklogQuota(asyncResponse, backlogQuotaType, backlogQuota);\n-    }\n-\n-    @DELETE\n-    @Path(\"/{tenant}/{namespace}/{topic}/backlogQuota\")\n-    @ApiOperation(value = \"Remove a backlog quota policy from a topic.\")\n-    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n-            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n-            @ApiResponse(code = 405, message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n-            @ApiResponse(code = 409, message = \"Concurrent modification\") })\n-    public void removeBacklogQuota(@Suspended final AsyncResponse asyncResponse, @PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n-            @PathParam(\"topic\") @Encoded String encodedTopic,\n-            @QueryParam(\"backlogQuotaType\") BacklogQuota.BacklogQuotaType backlogQuotaType) {\n-        validateTopicName(tenant, namespace, encodedTopic);\n-        internalRemoveBacklogQuota(asyncResponse, backlogQuotaType);\n-    }\n-\n     @POST\n     @Path(\"/{tenant}/{namespace}/{topic}/terminate\")\n     @ApiOperation(value = \"Terminate a topic. A topic that is terminated will not accept any more \"\n"}}, {"oid": "2ecb9c2e94251faa63165fd855c2578ea5cbfb0c", "url": "https://github.com/apache/pulsar/commit/2ecb9c2e94251faa63165fd855c2578ea5cbfb0c", "message": "adding policy of backlog quota on topic level", "committedDate": "2020-07-28T01:37:20Z", "type": "commit"}, {"oid": "6286822508bc31f57e26aa5e53f6205fa7cbdb27", "url": "https://github.com/apache/pulsar/commit/6286822508bc31f57e26aa5e53f6205fa7cbdb27", "message": "Add management functions to topic backquote", "committedDate": "2020-07-28T01:37:20Z", "type": "commit"}, {"oid": "afddf87c3bff31f019ba6fa50c35e1e1536ee766", "url": "https://github.com/apache/pulsar/commit/afddf87c3bff31f019ba6fa50c35e1e1536ee766", "message": "fix TopicBacklogQuotaTest header", "committedDate": "2020-07-28T01:37:20Z", "type": "commit"}, {"oid": "3ccc2151a311a3eafcbfa64b98ac6e5c879a6a68", "url": "https://github.com/apache/pulsar/commit/3ccc2151a311a3eafcbfa64b98ac6e5c879a6a68", "message": "fix code style", "committedDate": "2020-07-28T01:37:20Z", "type": "commit"}, {"oid": "d3855de1a74cf8856c214d46cf27d053eb4b5a7c", "url": "https://github.com/apache/pulsar/commit/d3855de1a74cf8856c214d46cf27d053eb4b5a7c", "message": "Change the return value of `getBacklogQuotaMap` to make it consistent with the namespace", "committedDate": "2020-07-28T01:37:20Z", "type": "commit"}, {"oid": "cf248c14c4d8fedcb98bb9380d6d332449e5cafc", "url": "https://github.com/apache/pulsar/commit/cf248c14c4d8fedcb98bb9380d6d332449e5cafc", "message": "add waiting interval for test", "committedDate": "2020-07-28T01:37:20Z", "type": "commit"}, {"oid": "3dc2dab80811451de6efa3464c0de3206228885e", "url": "https://github.com/apache/pulsar/commit/3dc2dab80811451de6efa3464c0de3206228885e", "message": "extract checkQuota to AdminResource", "committedDate": "2020-07-28T01:37:20Z", "type": "commit"}, {"oid": "3dc2dab80811451de6efa3464c0de3206228885e", "url": "https://github.com/apache/pulsar/commit/3dc2dab80811451de6efa3464c0de3206228885e", "message": "extract checkQuota to AdminResource", "committedDate": "2020-07-28T01:37:20Z", "type": "forcePushed"}, {"oid": "6bd3df4dc83181a7673a095bb83ac32feedf2354", "url": "https://github.com/apache/pulsar/commit/6bd3df4dc83181a7673a095bb83ac32feedf2354", "message": "add waiting interval for test", "committedDate": "2020-07-30T09:02:45Z", "type": "commit"}, {"oid": "8d68ad87004bae8781e97748f2d9648a0ffe3e60", "url": "https://github.com/apache/pulsar/commit/8d68ad87004bae8781e97748f2d9648a0ffe3e60", "message": "Split test cases `TopicBacklogQuotaTest`", "committedDate": "2020-07-31T03:16:24Z", "type": "commit"}]}