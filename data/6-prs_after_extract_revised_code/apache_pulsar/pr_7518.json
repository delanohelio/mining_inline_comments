{"pr_number": 7518, "pr_title": "Support partitioned topics in the Reader", "pr_createdAt": "2020-07-12T13:16:27Z", "pr_url": "https://github.com/apache/pulsar/pull/7518", "timeline": [{"oid": "54a11f600a20a7aa8426655fae3aadfb2239f565", "url": "https://github.com/apache/pulsar/commit/54a11f600a20a7aa8426655fae3aadfb2239f565", "message": "support multiTopicsReader", "committedDate": "2020-06-30T15:09:54Z", "type": "commit"}, {"oid": "ac6cb83d533de513a1b42d4a1635b59fe41d1baf", "url": "https://github.com/apache/pulsar/commit/ac6cb83d533de513a1b42d4a1635b59fe41d1baf", "message": "Merge branch 'master' into reader", "committedDate": "2020-07-06T03:19:59Z", "type": "commit"}, {"oid": "b97c9d43f84e0a9c86d78c563919610214d6d659", "url": "https://github.com/apache/pulsar/commit/b97c9d43f84e0a9c86d78c563919610214d6d659", "message": "support seek by message id", "committedDate": "2020-07-12T12:55:07Z", "type": "commit"}, {"oid": "1a9f4f6ceebf1d8b4659d272253651cc1629cfec", "url": "https://github.com/apache/pulsar/commit/1a9f4f6ceebf1d8b4659d272253651cc1629cfec", "message": "fix unit test", "committedDate": "2020-07-12T15:48:32Z", "type": "commit"}, {"oid": "75efab9e63655750ab6a48e1e2c125f0d31977b1", "url": "https://github.com/apache/pulsar/commit/75efab9e63655750ab6a48e1e2c125f0d31977b1", "message": "Merge branch 'master' into reader", "committedDate": "2020-09-21T08:06:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NTkzNw==", "url": "https://github.com/apache/pulsar/pull/7518#discussion_r491855937", "bodyText": "Why need a set for storing ignored consumers here? I noticed if a consumer is added to this set, the message will be acked and users will miss messages of this consumer. Is it an expected behavior?", "author": "codelipenghui", "createdAt": "2020-09-21T08:03:32Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -81,6 +83,9 @@\n     // shared incoming queue was full\n     private final ConcurrentLinkedQueue<ConsumerImpl<T>> pausedConsumers;\n \n+    //When consumerImpl is added to the set, its messages will be ignored\n+    private final ConcurrentOpenHashSet<ConsumerImpl<T>> ignoredConsumers;", "originalCommit": "1a9f4f6ceebf1d8b4659d272253651cc1629cfec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcb719894f2369b5a3a723a8de5b23cdaeee03d9", "chunk": "diff --git a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\nindex 2756c21ecb8..4c9a78fce64 100644\n--- a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\n+++ b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\n\n@@ -83,9 +84,6 @@ public class MultiTopicsConsumerImpl<T> extends ConsumerBase<T> {\n     // shared incoming queue was full\n     private final ConcurrentLinkedQueue<ConsumerImpl<T>> pausedConsumers;\n \n-    //When consumerImpl is added to the set, its messages will be ignored\n-    private final ConcurrentOpenHashSet<ConsumerImpl<T>> ignoredConsumers;\n-\n     // Threshold for the shared queue. When the size of the shared queue goes below the threshold, we are going to\n     // resume receiving from the paused consumer partitions\n     private final int sharedQueueResumeThreshold;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MTA1MA==", "url": "https://github.com/apache/pulsar/pull/7518#discussion_r491861050", "bodyText": "If the internal topics of the multiple topics consumer  with the same partition index but different topic name, it will introduce some problems here?", "author": "codelipenghui", "createdAt": "2020-09-21T08:13:37Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -681,12 +713,45 @@ public void seek(long timestamp) throws PulsarClientException {\n         try {\n             seekAsync(timestamp).get();\n         } catch (Exception e) {\n+            throw PulsarClientException.unwrap(e);\n         }\n     }\n \n     @Override\n     public CompletableFuture<Void> seekAsync(MessageId messageId) {\n-        return FutureUtil.failedFuture(new PulsarClientException(\"Seek operation not supported on topics consumer\"));\n+        CompletableFuture<Void> resultFuture = new CompletableFuture<>();\n+        MessageIdImpl targetMessageId = MessageIdImpl.convertToMessageIdImpl(messageId);\n+        if (targetMessageId == null || isIllegalMultiTopicsMessageId(messageId)) {\n+            resultFuture.completeExceptionally(\n+                    new PulsarClientException(\"Illegal messageId, messageId can only be earliest\u3001latest or determine partition\"));\n+            return resultFuture;\n+        }\n+\n+        List<CompletableFuture<Void>> futures = new ArrayList<>(consumers.size());\n+        consumers.values().forEach(consumerImpl -> {\n+            if (MessageId.latest.equals(messageId) || MessageId.earliest.equals(messageId)\n+                    || consumerImpl.getPartitionIndex() == targetMessageId.getPartitionIndex()) {", "originalCommit": "75efab9e63655750ab6a48e1e2c125f0d31977b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcb719894f2369b5a3a723a8de5b23cdaeee03d9", "chunk": "diff --git a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\nindex 116124e494b..4c9a78fce64 100644\n--- a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\n+++ b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\n\n@@ -723,21 +714,11 @@ public class MultiTopicsConsumerImpl<T> extends ConsumerBase<T> {\n         MessageIdImpl targetMessageId = MessageIdImpl.convertToMessageIdImpl(messageId);\n         if (targetMessageId == null || isIllegalMultiTopicsMessageId(messageId)) {\n             resultFuture.completeExceptionally(\n-                    new PulsarClientException(\"Illegal messageId, messageId can only be earliest\u3001latest or determine partition\"));\n+                    new PulsarClientException(\"Illegal messageId, messageId can only be earliest/latest\"));\n             return resultFuture;\n         }\n-\n         List<CompletableFuture<Void>> futures = new ArrayList<>(consumers.size());\n-        consumers.values().forEach(consumerImpl -> {\n-            if (MessageId.latest.equals(messageId) || MessageId.earliest.equals(messageId)\n-                    || consumerImpl.getPartitionIndex() == targetMessageId.getPartitionIndex()) {\n-                removeIgnoreConsumer(consumerImpl);\n-                futures.add(consumerImpl.seekAsync(targetMessageId));\n-            } else {\n-                addIgnoreConsumer(consumerImpl);\n-                futures.add(consumerImpl.seekAsync(MessageId.latest));\n-            }\n-        });\n+        consumers.values().forEach(consumerImpl -> futures.add(consumerImpl.seekAsync(targetMessageId)));\n \n         unAckedMessageTracker.clear();\n         incomingMessages.clear();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MjE0Ng==", "url": "https://github.com/apache/pulsar/pull/7518#discussion_r491862146", "bodyText": "I think here also assume that all topics of the multiple topics consumer are under a partitioned topic?", "author": "codelipenghui", "createdAt": "2020-09-21T08:15:29Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -1272,4 +1389,35 @@ public Timeout getPartitionsAutoUpdateTimeout() {\n     }\n \n     private static final Logger log = LoggerFactory.getLogger(MultiTopicsConsumerImpl.class);\n+\n+    public boolean addIgnoreConsumer(ConsumerImpl<T> consumer) {\n+        return ignoredConsumers.add(consumer);\n+    }\n+\n+    public boolean removeIgnoreConsumer(ConsumerImpl<T> consumer) {\n+        return ignoredConsumers.remove(consumer);\n+    }\n+\n+    public static boolean isIllegalMultiTopicsMessageId(MessageId messageId) {\n+        //only support earliest/latest and messageId contains certain partition info\n+        if (MessageId.earliest.equals(messageId) || MessageId.latest.equals(messageId)) {\n+            return false;\n+        }\n+        MessageIdImpl messageIdImpl = MessageIdImpl.convertToMessageIdImpl(messageId);\n+        if (messageIdImpl != null && messageIdImpl.getPartitionIndex() >= 0 && messageIdImpl.getLedgerId() >= 0\n+                && messageIdImpl.getEntryId() >= 0) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public void tryAcknowledgeMessage(Message<T> msg) {\n+        if (msg != null) {\n+            BatchMessageIdImpl batchMessageId = new BatchMessageIdImpl(MessageIdImpl.convertToMessageIdImpl(msg.getMessageId()));\n+            //Non-batching messages ack every time, batchMessage only need to ack the last one to avoid multi recycle\n+            if (batchMessageId.getBatchIndex() < 0 || batchMessageId.getBatchSize() - 1 == batchMessageId.getBatchIndex()) {\n+                acknowledgeCumulativeAsync(msg);", "originalCommit": "75efab9e63655750ab6a48e1e2c125f0d31977b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcb719894f2369b5a3a723a8de5b23cdaeee03d9", "chunk": "diff --git a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\nindex 116124e494b..4c9a78fce64 100644\n--- a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\n+++ b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java\n\n@@ -1390,34 +1347,14 @@ public class MultiTopicsConsumerImpl<T> extends ConsumerBase<T> {\n \n     private static final Logger log = LoggerFactory.getLogger(MultiTopicsConsumerImpl.class);\n \n-    public boolean addIgnoreConsumer(ConsumerImpl<T> consumer) {\n-        return ignoredConsumers.add(consumer);\n-    }\n-\n-    public boolean removeIgnoreConsumer(ConsumerImpl<T> consumer) {\n-        return ignoredConsumers.remove(consumer);\n-    }\n-\n     public static boolean isIllegalMultiTopicsMessageId(MessageId messageId) {\n-        //only support earliest/latest and messageId contains certain partition info\n-        if (MessageId.earliest.equals(messageId) || MessageId.latest.equals(messageId)) {\n-            return false;\n-        }\n-        MessageIdImpl messageIdImpl = MessageIdImpl.convertToMessageIdImpl(messageId);\n-        if (messageIdImpl != null && messageIdImpl.getPartitionIndex() >= 0 && messageIdImpl.getLedgerId() >= 0\n-                && messageIdImpl.getEntryId() >= 0) {\n-            return false;\n-        }\n-        return true;\n+        //only support earliest/latest\n+        return !MessageId.earliest.equals(messageId) && !MessageId.latest.equals(messageId);\n     }\n \n     public void tryAcknowledgeMessage(Message<T> msg) {\n         if (msg != null) {\n-            BatchMessageIdImpl batchMessageId = new BatchMessageIdImpl(MessageIdImpl.convertToMessageIdImpl(msg.getMessageId()));\n-            //Non-batching messages ack every time, batchMessage only need to ack the last one to avoid multi recycle\n-            if (batchMessageId.getBatchIndex() < 0 || batchMessageId.getBatchSize() - 1 == batchMessageId.getBatchIndex()) {\n-                acknowledgeCumulativeAsync(msg);\n-            }\n+            acknowledgeCumulativeAsync(msg);\n         }\n     }\n }\n"}}, {"oid": "47f9caaabe35269ddebd1f7d99d43214b64fdb64", "url": "https://github.com/apache/pulsar/commit/47f9caaabe35269ddebd1f7d99d43214b64fdb64", "message": "merge master", "committedDate": "2020-09-25T07:01:13Z", "type": "commit"}, {"oid": "dcb719894f2369b5a3a723a8de5b23cdaeee03d9", "url": "https://github.com/apache/pulsar/commit/dcb719894f2369b5a3a723a8de5b23cdaeee03d9", "message": "remove the ability to seek msgId", "committedDate": "2020-09-25T07:03:58Z", "type": "commit"}, {"oid": "6e96809130d27ac0e021a351327d95f59fb3f8a1", "url": "https://github.com/apache/pulsar/commit/6e96809130d27ac0e021a351327d95f59fb3f8a1", "message": "change name", "committedDate": "2020-09-25T07:21:48Z", "type": "commit"}, {"oid": "03667931486ef6118ab4514f984f1b1346e6273b", "url": "https://github.com/apache/pulsar/commit/03667931486ef6118ab4514f984f1b1346e6273b", "message": "Merge branch 'master' into reader", "committedDate": "2020-09-27T14:31:39Z", "type": "commit"}, {"oid": "1fb345b710b486487e636cbbdfbf863fb4223213", "url": "https://github.com/apache/pulsar/commit/1fb345b710b486487e636cbbdfbf863fb4223213", "message": "merge master", "committedDate": "2020-11-13T09:59:59Z", "type": "commit"}]}