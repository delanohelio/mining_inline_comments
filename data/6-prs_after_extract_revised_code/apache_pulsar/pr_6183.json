{"pr_number": 6183, "pr_title": "Namespace level offloader", "pr_createdAt": "2020-01-31T21:05:38Z", "pr_url": "https://github.com/apache/pulsar/pull/6183", "timeline": [{"oid": "a95fddb02af816c2df9aad85bf281328c34d6021", "url": "https://github.com/apache/pulsar/commit/a95fddb02af816c2df9aad85bf281328c34d6021", "message": "add namespace offload policies", "committedDate": "2020-01-31T20:12:28Z", "type": "commit"}, {"oid": "72a76cbee1d0a8a87f46da1857ff61aaf4132e16", "url": "https://github.com/apache/pulsar/commit/72a76cbee1d0a8a87f46da1857ff61aaf4132e16", "message": "fix", "committedDate": "2020-01-31T20:24:29Z", "type": "commit"}, {"oid": "e5caac00317de3e111aeaeda01abdc43da38f917", "url": "https://github.com/apache/pulsar/commit/e5caac00317de3e111aeaeda01abdc43da38f917", "message": "add namespace offload policies", "committedDate": "2020-01-31T20:37:07Z", "type": "commit"}, {"oid": "f23cd7918191e5bbe8660584e76ac09b92dea2dc", "url": "https://github.com/apache/pulsar/commit/f23cd7918191e5bbe8660584e76ac09b92dea2dc", "message": "fix", "committedDate": "2020-01-31T20:37:07Z", "type": "commit"}, {"oid": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "url": "https://github.com/apache/pulsar/commit/02215a91d0c36dc0a83cfb2d596d1a17fa674839", "message": "Merge remote-tracking branch 'origin/namespace-level-offloader' into namespace-level-offloader\n\n# Conflicts:\n#\tpulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\n#\tpulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java", "committedDate": "2020-01-31T20:42:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MDEyMQ==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373750121", "bodyText": "Add license header here.", "author": "codelipenghui", "createdAt": "2020-02-01T02:04:54Z", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/OffloadPolicies.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.apache.pulsar.common.policies.data;", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Nzc4Ng==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373757786", "bodyText": "ok, i'll fix it.", "author": "gaoran10", "createdAt": "2020-02-01T04:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MDEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/OffloadPolicies.java b/pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/OffloadPolicies.java\nindex 563d357996d..b8ff00c3c33 100644\n--- a/pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/OffloadPolicies.java\n+++ b/pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/OffloadPolicies.java\n\n@@ -1,63 +1,127 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.apache.pulsar.common.policies.data;\n \n-import com.google.common.base.MoreObjects;\n+import static org.apache.pulsar.common.util.FieldParser.value;\n \n+import com.google.common.base.MoreObjects;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n import java.util.Objects;\n+import java.util.Properties;\n+import lombok.Data;\n \n /**\n  * Definition of the offload policies.\n  */\n+@Data\n public class OffloadPolicies {\n \n-    public final static int MAX_BLOCK_SIZE_IN_BYTES = 64 * 1024 * 1024;   // 64MB\n-    public final static int READ_BUFFER_SIZE_IN_BYTES = 1024 * 1024;      // 1MB\n-\n-    private String region;\n-    private String bucket;\n-    private String endpoint;\n-    private int maxBlockSizeInBytes;\n-    private int readBufferSizeInBytes;\n-\n-    public OffloadPolicies() {\n-\n-    }\n-\n-    public OffloadPolicies(String region, String bucket, String endpoint) {\n-        this(region, bucket, endpoint, MAX_BLOCK_SIZE_IN_BYTES, READ_BUFFER_SIZE_IN_BYTES);\n-    }\n-\n-    public OffloadPolicies(String region, String bucket, String endpoint,\n-                           int maxBlockSizeInBytes, int readBufferSizeInBytes) {\n-        this.region = region;\n-        this.bucket = bucket;\n-        this.endpoint = endpoint;\n-        this.maxBlockSizeInBytes = maxBlockSizeInBytes;\n-        this.readBufferSizeInBytes = readBufferSizeInBytes;\n-    }\n-\n-    public String getRegion() {\n-        return region;\n-    }\n-\n-    public String getBucket() {\n-        return bucket;\n-    }\n-\n-    public String getEndpoint() {\n-        return endpoint;\n-    }\n-\n-    public int getMaxBlockSizeInBytes() {\n-        return maxBlockSizeInBytes;\n+    public final static int DEFAULT_MAX_BLOCK_SIZE_IN_BYTES = 64 * 1024 * 1024;   // 64MB\n+    public final static int DEFAULT_READ_BUFFER_SIZE_IN_BYTES = 1024 * 1024;      // 1MB\n+    public final static int DEFAULT_OFFLOAD_MAX_THREADS = 2;\n+    public final static String[] DRIVER_NAMES = {\"S3\", \"aws-s3\", \"google-cloud-storage\", \"filesystem\"};\n+    public final static String DEFAULT_OFFLOADER_DIRECTORY = \"./offloaders\";\n+\n+    // common config\n+    private String offloadersDirectory = DEFAULT_OFFLOADER_DIRECTORY;\n+    private String managedLedgerOffloadDriver = null;\n+    private int managedLedgerOffloadMaxThreads = DEFAULT_OFFLOAD_MAX_THREADS;\n+\n+    // s3 config, set by service configuration or cli\n+    private String s3ManagedLedgerOffloadRegion = null;\n+    private String s3ManagedLedgerOffloadBucket = null;\n+    private String s3ManagedLedgerOffloadServiceEndpoint = null;\n+    private int s3ManagedLedgerOffloadMaxBlockSizeInBytes = DEFAULT_MAX_BLOCK_SIZE_IN_BYTES;\n+    private int s3ManagedLedgerOffloadReadBufferSizeInBytes = DEFAULT_READ_BUFFER_SIZE_IN_BYTES;\n+    // s3 config, set by service configuration\n+    private String s3ManagedLedgerOffloadRole = null;\n+    private String s3ManagedLedgerOffloadRoleSessionName = \"pulsar-s3-offload\";\n+\n+    // gcs config, set by service configuration or cli\n+    private String gcsManagedLedgerOffloadRegion = null;\n+    private String gcsManagedLedgerOffloadBucket = null;\n+    private int gcsManagedLedgerOffloadMaxBlockSizeInBytes = DEFAULT_MAX_BLOCK_SIZE_IN_BYTES;\n+    private int gcsManagedLedgerOffloadReadBufferSizeInBytes = DEFAULT_READ_BUFFER_SIZE_IN_BYTES;\n+    // gcs config, set by service configuration\n+    private String gcsManagedLedgerOffloadServiceAccountKeyFile = null;\n+\n+    // file system config, set by service configuration\n+    private String fileSystemProfilePath = null;\n+    private String fileSystemURI = null;\n+\n+    public static OffloadPolicies create(String driver, String region, String bucket, String endpoint,\n+                                         int maxBlockSizeInBytes, int readBufferSizeInBytes) {\n+        OffloadPolicies offloadPolicies = new OffloadPolicies();\n+        offloadPolicies.setManagedLedgerOffloadDriver(driver);\n+        if (driver.equalsIgnoreCase(DRIVER_NAMES[0]) || driver.equalsIgnoreCase(DRIVER_NAMES[1])) {\n+            offloadPolicies.setS3ManagedLedgerOffloadRegion(region);\n+            offloadPolicies.setS3ManagedLedgerOffloadBucket(bucket);\n+            offloadPolicies.setS3ManagedLedgerOffloadServiceEndpoint(endpoint);\n+            offloadPolicies.setS3ManagedLedgerOffloadMaxBlockSizeInBytes(maxBlockSizeInBytes);\n+            offloadPolicies.setS3ManagedLedgerOffloadReadBufferSizeInBytes(readBufferSizeInBytes);\n+        } else if (driver.equalsIgnoreCase(DRIVER_NAMES[2])) {\n+            offloadPolicies.setGcsManagedLedgerOffloadRegion(region);\n+            offloadPolicies.setGcsManagedLedgerOffloadBucket(bucket);\n+            offloadPolicies.setGcsManagedLedgerOffloadMaxBlockSizeInBytes(maxBlockSizeInBytes);\n+            offloadPolicies.setGcsManagedLedgerOffloadReadBufferSizeInBytes(readBufferSizeInBytes);\n+        }\n+        return offloadPolicies;\n     }\n \n-    public int getReadBufferSizeInBytes() {\n-        return readBufferSizeInBytes;\n+    public static OffloadPolicies create(Properties properties) {\n+        OffloadPolicies data = new OffloadPolicies();\n+        Field[] fields = OffloadPolicies.class.getDeclaredFields();\n+        Arrays.stream(fields).forEach(f -> {\n+            if (properties.containsKey(f.getName())) {\n+                try {\n+                    f.setAccessible(true);\n+                    f.set(data, value((String) properties.get(f.getName()), f));\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(\n+                            String.format(\"failed to initialize %s field while setting value %s\",\n+                            f.getName(), properties.get(f.getName())), e);\n+                }\n+            }\n+        });\n+        return data;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(region, bucket, endpoint, maxBlockSizeInBytes, readBufferSizeInBytes);\n+        return Objects.hash(\n+                managedLedgerOffloadDriver,\n+                managedLedgerOffloadMaxThreads,\n+                s3ManagedLedgerOffloadRegion,\n+                s3ManagedLedgerOffloadBucket,\n+                s3ManagedLedgerOffloadServiceEndpoint,\n+                s3ManagedLedgerOffloadMaxBlockSizeInBytes,\n+                s3ManagedLedgerOffloadReadBufferSizeInBytes,\n+                s3ManagedLedgerOffloadRole,\n+                s3ManagedLedgerOffloadRoleSessionName,\n+                gcsManagedLedgerOffloadRegion,\n+                gcsManagedLedgerOffloadBucket,\n+                gcsManagedLedgerOffloadMaxBlockSizeInBytes,\n+                gcsManagedLedgerOffloadReadBufferSizeInBytes,\n+                gcsManagedLedgerOffloadServiceAccountKeyFile,\n+                fileSystemProfilePath,\n+                fileSystemURI);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTI4Nw==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373751287", "bodyText": "Broker already have namespace policies caches, don't need to get it by admin client.", "author": "codelipenghui", "createdAt": "2020-02-01T02:22:21Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java", "diffHunk": "@@ -764,11 +768,31 @@ public ManagedLedgerClientFactory getManagedLedgerClientFactory() {\n         return managedLedgerClientFactory;\n     }\n \n-    public LedgerOffloader getManagedLedgerOffloader() {\n-        return offloader;\n+    public LedgerOffloader getManagedLedgerOffloaderByPolicies(OffloadPolicies offloadPolicies) {\n+        if (offloadPolicies == null) {\n+            return getDefaultOffloader();\n+        }\n+        return ledgerOffloaderMap.computeIfAbsent(offloadPolicies, op -> {\n+            try {\n+                return createManagedLedgerOffloader(getConfiguration(), offloadPolicies);\n+            } catch (PulsarServerException e) {\n+                LOG.error(\"create ledgerOffloader failed for {}\", offloadPolicies.toString(), e);\n+                return new NullLedgerOffloader();\n+            }\n+        });\n+    }\n+\n+    public LedgerOffloader getManagedLedgerOffloader(NamespaceName namespaceName) {\n+        try {\n+            OffloadPolicies offloadPolicies = getAdminClient().namespaces().getOffload(namespaceName.toString());", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzgxNA==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373757814", "bodyText": "ok, i'll fix it.", "author": "gaoran10", "createdAt": "2020-02-01T04:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\nindex 52a120f0601..fe848b5e8b4 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\n\n@@ -768,54 +768,59 @@ public class PulsarService implements AutoCloseable {\n         return managedLedgerClientFactory;\n     }\n \n-    public LedgerOffloader getManagedLedgerOffloaderByPolicies(OffloadPolicies offloadPolicies) {\n+    /**\n+     * First, get <code>LedgerOffloader</code> from local map cache, create new <code>LedgerOffloader</code> if not in cache or\n+     * the <code>OffloadPolicies</code> changed, return the <code>LedgerOffloader</code> directly if exist in cache\n+     * and the <code>OffloadPolicies</code> not changed.\n+     *\n+     * @param namespaceName NamespaceName\n+     * @param offloadPolicies the OffloadPolicies\n+     * @return LedgerOffloader\n+     */\n+    public LedgerOffloader getManagedLedgerOffloader(NamespaceName namespaceName, OffloadPolicies offloadPolicies) {\n         if (offloadPolicies == null) {\n             return getDefaultOffloader();\n         }\n-        return ledgerOffloaderMap.computeIfAbsent(offloadPolicies, op -> {\n+        return ledgerOffloaderMap.compute(namespaceName, (ns, offloader) -> {\n             try {\n-                return createManagedLedgerOffloader(getConfiguration(), offloadPolicies);\n+                if (offloader != null && Objects.equals(offloader.getOffloadPolicies(), offloadPolicies)) {\n+                    return offloader;\n+                } else {\n+                    if (offloader != null) {\n+                        offloader.close();\n+                    }\n+                    return createManagedLedgerOffloader(offloadPolicies);\n+                }\n             } catch (PulsarServerException e) {\n-                LOG.error(\"create ledgerOffloader failed for {}\", offloadPolicies.toString(), e);\n+                LOG.error(\"create ledgerOffloader failed for namespace {}\", namespaceName.toString(), e);\n                 return new NullLedgerOffloader();\n             }\n         });\n     }\n \n-    public LedgerOffloader getManagedLedgerOffloader(NamespaceName namespaceName) {\n-        try {\n-            OffloadPolicies offloadPolicies = getAdminClient().namespaces().getOffload(namespaceName.toString());\n-            return getManagedLedgerOffloaderByPolicies(offloadPolicies);\n-        } catch (Exception e) {\n-            LOG.error(\"Failed to get ledgerOffloader for namespaceName {}\", namespaceName, e);\n-            return new NullLedgerOffloader();\n-        }\n-    }\n-\n-    public synchronized LedgerOffloader createManagedLedgerOffloader(ServiceConfiguration conf, OffloadPolicies offloadPolicies)\n+    public synchronized LedgerOffloader createManagedLedgerOffloader(OffloadPolicies offloadPolicies)\n             throws PulsarServerException {\n         try {\n-            if (StringUtils.isNotBlank(conf.getManagedLedgerOffloadDriver())) {\n-                checkNotNull(conf.getOffloadersDirectory(),\n+            if (StringUtils.isNotBlank(offloadPolicies.getManagedLedgerOffloadDriver())) {\n+                checkNotNull(offloadPolicies.getOffloadersDirectory(),\n                     \"Offloader driver is configured to be '%s' but no offloaders directory is configured.\",\n-                    conf.getManagedLedgerOffloadDriver());\n-                this.offloaderManager = OffloaderUtils.searchForOffloaders(conf.getOffloadersDirectory());\n+                        offloadPolicies.getManagedLedgerOffloadDriver());\n+                this.offloaderManager = OffloaderUtils.searchForOffloaders(offloadPolicies.getOffloadersDirectory());\n                 LedgerOffloaderFactory offloaderFactory = this.offloaderManager.getOffloaderFactory(\n-                    conf.getManagedLedgerOffloadDriver());\n+                        offloadPolicies.getManagedLedgerOffloadDriver());\n                 try {\n                     return offloaderFactory.create(\n-                        conf.getProperties(),\n+                        offloadPolicies,\n                         ImmutableMap.of(\n                             LedgerOffloader.METADATA_SOFTWARE_VERSION_KEY.toLowerCase(), PulsarVersion.getVersion(),\n                             LedgerOffloader.METADATA_SOFTWARE_GITSHA_KEY.toLowerCase(), PulsarVersion.getGitSha()\n                         ),\n-                        getOffloaderScheduler(conf),\n-                        offloadPolicies);\n+                        getOffloaderScheduler(offloadPolicies));\n                 } catch (IOException ioe) {\n                     throw new PulsarServerException(ioe.getMessage(), ioe.getCause());\n                 }\n             } else {\n-                LOG.warn(\"No ledger offloader configured, using NULL instance\");\n+                LOG.info(\"No ledger offloader configured, using NULL instance\");\n                 return NullLedgerOffloader.INSTANCE;\n             }\n         } catch (Throwable t) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTQyMA==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373751420", "bodyText": "Since the OffloadPolicies added, i think we can change this method to createManagedLedgerOffloader(OffloadPolicies offloadPolicies). For default offloader, just convert serverConfiguration to the OffloadPolicies.", "author": "codelipenghui", "createdAt": "2020-02-01T02:24:59Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java", "diffHunk": "@@ -764,11 +768,31 @@ public ManagedLedgerClientFactory getManagedLedgerClientFactory() {\n         return managedLedgerClientFactory;\n     }\n \n-    public LedgerOffloader getManagedLedgerOffloader() {\n-        return offloader;\n+    public LedgerOffloader getManagedLedgerOffloaderByPolicies(OffloadPolicies offloadPolicies) {\n+        if (offloadPolicies == null) {\n+            return getDefaultOffloader();\n+        }\n+        return ledgerOffloaderMap.computeIfAbsent(offloadPolicies, op -> {\n+            try {\n+                return createManagedLedgerOffloader(getConfiguration(), offloadPolicies);\n+            } catch (PulsarServerException e) {\n+                LOG.error(\"create ledgerOffloader failed for {}\", offloadPolicies.toString(), e);\n+                return new NullLedgerOffloader();\n+            }\n+        });\n+    }\n+\n+    public LedgerOffloader getManagedLedgerOffloader(NamespaceName namespaceName) {\n+        try {\n+            OffloadPolicies offloadPolicies = getAdminClient().namespaces().getOffload(namespaceName.toString());\n+            return getManagedLedgerOffloaderByPolicies(offloadPolicies);\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to get ledgerOffloader for namespaceName {}\", namespaceName, e);\n+            return new NullLedgerOffloader();\n+        }\n     }\n \n-    public synchronized LedgerOffloader createManagedLedgerOffloader(ServiceConfiguration conf)\n+    public synchronized LedgerOffloader createManagedLedgerOffloader(ServiceConfiguration conf, OffloadPolicies offloadPolicies)", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTY5Ng==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373751696", "bodyText": "And current method checks the conf.getManagedLedgerOffloadDriver() is not blank, users may disable the default offloader but enable it at namespace level.", "author": "codelipenghui", "createdAt": "2020-02-01T02:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MDk3NA==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373770974", "bodyText": "good idea!", "author": "gaoran10", "createdAt": "2020-02-01T09:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\nindex 52a120f0601..fe848b5e8b4 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\n\n@@ -768,54 +768,59 @@ public class PulsarService implements AutoCloseable {\n         return managedLedgerClientFactory;\n     }\n \n-    public LedgerOffloader getManagedLedgerOffloaderByPolicies(OffloadPolicies offloadPolicies) {\n+    /**\n+     * First, get <code>LedgerOffloader</code> from local map cache, create new <code>LedgerOffloader</code> if not in cache or\n+     * the <code>OffloadPolicies</code> changed, return the <code>LedgerOffloader</code> directly if exist in cache\n+     * and the <code>OffloadPolicies</code> not changed.\n+     *\n+     * @param namespaceName NamespaceName\n+     * @param offloadPolicies the OffloadPolicies\n+     * @return LedgerOffloader\n+     */\n+    public LedgerOffloader getManagedLedgerOffloader(NamespaceName namespaceName, OffloadPolicies offloadPolicies) {\n         if (offloadPolicies == null) {\n             return getDefaultOffloader();\n         }\n-        return ledgerOffloaderMap.computeIfAbsent(offloadPolicies, op -> {\n+        return ledgerOffloaderMap.compute(namespaceName, (ns, offloader) -> {\n             try {\n-                return createManagedLedgerOffloader(getConfiguration(), offloadPolicies);\n+                if (offloader != null && Objects.equals(offloader.getOffloadPolicies(), offloadPolicies)) {\n+                    return offloader;\n+                } else {\n+                    if (offloader != null) {\n+                        offloader.close();\n+                    }\n+                    return createManagedLedgerOffloader(offloadPolicies);\n+                }\n             } catch (PulsarServerException e) {\n-                LOG.error(\"create ledgerOffloader failed for {}\", offloadPolicies.toString(), e);\n+                LOG.error(\"create ledgerOffloader failed for namespace {}\", namespaceName.toString(), e);\n                 return new NullLedgerOffloader();\n             }\n         });\n     }\n \n-    public LedgerOffloader getManagedLedgerOffloader(NamespaceName namespaceName) {\n-        try {\n-            OffloadPolicies offloadPolicies = getAdminClient().namespaces().getOffload(namespaceName.toString());\n-            return getManagedLedgerOffloaderByPolicies(offloadPolicies);\n-        } catch (Exception e) {\n-            LOG.error(\"Failed to get ledgerOffloader for namespaceName {}\", namespaceName, e);\n-            return new NullLedgerOffloader();\n-        }\n-    }\n-\n-    public synchronized LedgerOffloader createManagedLedgerOffloader(ServiceConfiguration conf, OffloadPolicies offloadPolicies)\n+    public synchronized LedgerOffloader createManagedLedgerOffloader(OffloadPolicies offloadPolicies)\n             throws PulsarServerException {\n         try {\n-            if (StringUtils.isNotBlank(conf.getManagedLedgerOffloadDriver())) {\n-                checkNotNull(conf.getOffloadersDirectory(),\n+            if (StringUtils.isNotBlank(offloadPolicies.getManagedLedgerOffloadDriver())) {\n+                checkNotNull(offloadPolicies.getOffloadersDirectory(),\n                     \"Offloader driver is configured to be '%s' but no offloaders directory is configured.\",\n-                    conf.getManagedLedgerOffloadDriver());\n-                this.offloaderManager = OffloaderUtils.searchForOffloaders(conf.getOffloadersDirectory());\n+                        offloadPolicies.getManagedLedgerOffloadDriver());\n+                this.offloaderManager = OffloaderUtils.searchForOffloaders(offloadPolicies.getOffloadersDirectory());\n                 LedgerOffloaderFactory offloaderFactory = this.offloaderManager.getOffloaderFactory(\n-                    conf.getManagedLedgerOffloadDriver());\n+                        offloadPolicies.getManagedLedgerOffloadDriver());\n                 try {\n                     return offloaderFactory.create(\n-                        conf.getProperties(),\n+                        offloadPolicies,\n                         ImmutableMap.of(\n                             LedgerOffloader.METADATA_SOFTWARE_VERSION_KEY.toLowerCase(), PulsarVersion.getVersion(),\n                             LedgerOffloader.METADATA_SOFTWARE_GITSHA_KEY.toLowerCase(), PulsarVersion.getGitSha()\n                         ),\n-                        getOffloaderScheduler(conf),\n-                        offloadPolicies);\n+                        getOffloaderScheduler(offloadPolicies));\n                 } catch (IOException ioe) {\n                     throw new PulsarServerException(ioe.getMessage(), ioe.getCause());\n                 }\n             } else {\n-                LOG.warn(\"No ledger offloader configured, using NULL instance\");\n+                LOG.info(\"No ledger offloader configured, using NULL instance\");\n                 return NullLedgerOffloader.INSTANCE;\n             }\n         } catch (Throwable t) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTU2MQ==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373751561", "bodyText": "Keep log level to info, we don't need to warn users when they have not enable the offloader.", "author": "codelipenghui", "createdAt": "2020-02-01T02:27:46Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java", "diffHunk": "@@ -785,12 +809,13 @@ public synchronized LedgerOffloader createManagedLedgerOffloader(ServiceConfigur\n                             LedgerOffloader.METADATA_SOFTWARE_VERSION_KEY.toLowerCase(), PulsarVersion.getVersion(),\n                             LedgerOffloader.METADATA_SOFTWARE_GITSHA_KEY.toLowerCase(), PulsarVersion.getGitSha()\n                         ),\n-                        getOffloaderScheduler(conf));\n+                        getOffloaderScheduler(conf),\n+                        offloadPolicies);\n                 } catch (IOException ioe) {\n                     throw new PulsarServerException(ioe.getMessage(), ioe.getCause());\n                 }\n             } else {\n-                LOG.info(\"No ledger offloader configured, using NULL instance\");\n+                LOG.warn(\"No ledger offloader configured, using NULL instance\");", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\nindex 52a120f0601..fe848b5e8b4 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\n\n@@ -768,54 +768,59 @@ public class PulsarService implements AutoCloseable {\n         return managedLedgerClientFactory;\n     }\n \n-    public LedgerOffloader getManagedLedgerOffloaderByPolicies(OffloadPolicies offloadPolicies) {\n+    /**\n+     * First, get <code>LedgerOffloader</code> from local map cache, create new <code>LedgerOffloader</code> if not in cache or\n+     * the <code>OffloadPolicies</code> changed, return the <code>LedgerOffloader</code> directly if exist in cache\n+     * and the <code>OffloadPolicies</code> not changed.\n+     *\n+     * @param namespaceName NamespaceName\n+     * @param offloadPolicies the OffloadPolicies\n+     * @return LedgerOffloader\n+     */\n+    public LedgerOffloader getManagedLedgerOffloader(NamespaceName namespaceName, OffloadPolicies offloadPolicies) {\n         if (offloadPolicies == null) {\n             return getDefaultOffloader();\n         }\n-        return ledgerOffloaderMap.computeIfAbsent(offloadPolicies, op -> {\n+        return ledgerOffloaderMap.compute(namespaceName, (ns, offloader) -> {\n             try {\n-                return createManagedLedgerOffloader(getConfiguration(), offloadPolicies);\n+                if (offloader != null && Objects.equals(offloader.getOffloadPolicies(), offloadPolicies)) {\n+                    return offloader;\n+                } else {\n+                    if (offloader != null) {\n+                        offloader.close();\n+                    }\n+                    return createManagedLedgerOffloader(offloadPolicies);\n+                }\n             } catch (PulsarServerException e) {\n-                LOG.error(\"create ledgerOffloader failed for {}\", offloadPolicies.toString(), e);\n+                LOG.error(\"create ledgerOffloader failed for namespace {}\", namespaceName.toString(), e);\n                 return new NullLedgerOffloader();\n             }\n         });\n     }\n \n-    public LedgerOffloader getManagedLedgerOffloader(NamespaceName namespaceName) {\n-        try {\n-            OffloadPolicies offloadPolicies = getAdminClient().namespaces().getOffload(namespaceName.toString());\n-            return getManagedLedgerOffloaderByPolicies(offloadPolicies);\n-        } catch (Exception e) {\n-            LOG.error(\"Failed to get ledgerOffloader for namespaceName {}\", namespaceName, e);\n-            return new NullLedgerOffloader();\n-        }\n-    }\n-\n-    public synchronized LedgerOffloader createManagedLedgerOffloader(ServiceConfiguration conf, OffloadPolicies offloadPolicies)\n+    public synchronized LedgerOffloader createManagedLedgerOffloader(OffloadPolicies offloadPolicies)\n             throws PulsarServerException {\n         try {\n-            if (StringUtils.isNotBlank(conf.getManagedLedgerOffloadDriver())) {\n-                checkNotNull(conf.getOffloadersDirectory(),\n+            if (StringUtils.isNotBlank(offloadPolicies.getManagedLedgerOffloadDriver())) {\n+                checkNotNull(offloadPolicies.getOffloadersDirectory(),\n                     \"Offloader driver is configured to be '%s' but no offloaders directory is configured.\",\n-                    conf.getManagedLedgerOffloadDriver());\n-                this.offloaderManager = OffloaderUtils.searchForOffloaders(conf.getOffloadersDirectory());\n+                        offloadPolicies.getManagedLedgerOffloadDriver());\n+                this.offloaderManager = OffloaderUtils.searchForOffloaders(offloadPolicies.getOffloadersDirectory());\n                 LedgerOffloaderFactory offloaderFactory = this.offloaderManager.getOffloaderFactory(\n-                    conf.getManagedLedgerOffloadDriver());\n+                        offloadPolicies.getManagedLedgerOffloadDriver());\n                 try {\n                     return offloaderFactory.create(\n-                        conf.getProperties(),\n+                        offloadPolicies,\n                         ImmutableMap.of(\n                             LedgerOffloader.METADATA_SOFTWARE_VERSION_KEY.toLowerCase(), PulsarVersion.getVersion(),\n                             LedgerOffloader.METADATA_SOFTWARE_GITSHA_KEY.toLowerCase(), PulsarVersion.getGitSha()\n                         ),\n-                        getOffloaderScheduler(conf),\n-                        offloadPolicies);\n+                        getOffloaderScheduler(offloadPolicies));\n                 } catch (IOException ioe) {\n                     throw new PulsarServerException(ioe.getMessage(), ioe.getCause());\n                 }\n             } else {\n-                LOG.warn(\"No ledger offloader configured, using NULL instance\");\n+                LOG.info(\"No ledger offloader configured, using NULL instance\");\n                 return NullLedgerOffloader.INSTANCE;\n             }\n         } catch (Throwable t) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTk2Ng==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373751966", "bodyText": "Looks duplicated", "author": "codelipenghui", "createdAt": "2020-02-01T02:35:11Z", "path": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java", "diffHunk": "@@ -34,6 +34,8 @@\n import org.apache.pulsar.common.policies.data.BundlesData;\n import org.apache.pulsar.common.policies.data.DispatchRate;\n import org.apache.pulsar.common.policies.data.DelayedDeliveryPolicies;\n+import org.apache.pulsar.common.policies.data.OffloadPolicies;\n+import org.apache.pulsar.common.policies.data.OffloadPolicies;", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\nindex bb862eb15fd..b64f624b377 100644\n--- a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\n+++ b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\n\n@@ -35,7 +35,6 @@ import org.apache.pulsar.common.policies.data.BundlesData;\n import org.apache.pulsar.common.policies.data.DispatchRate;\n import org.apache.pulsar.common.policies.data.DelayedDeliveryPolicies;\n import org.apache.pulsar.common.policies.data.OffloadPolicies;\n-import org.apache.pulsar.common.policies.data.OffloadPolicies;\n import org.apache.pulsar.common.policies.data.PersistencePolicies;\n import org.apache.pulsar.common.policies.data.Policies;\n import org.apache.pulsar.common.policies.data.PublishRate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MTk3OQ==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373751979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set the offload configuration for all the topics on a namespace.\n          \n          \n            \n                 * Set the offload configuration for all the topics in a namespace.", "author": "codelipenghui", "createdAt": "2020-02-01T02:35:31Z", "path": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java", "diffHunk": "@@ -1654,4 +1656,74 @@ boolean getIsAllowAutoUpdateSchema(String namespace)\n      */\n     void setIsAllowAutoUpdateSchema(String namespace, boolean isAllowAutoUpdateSchema)\n             throws PulsarAdminException;\n+\n+    /**\n+     * Set the offload configuration for all the topics on a namespace.", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\nindex bb862eb15fd..b64f624b377 100644\n--- a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\n+++ b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\n\n@@ -1658,9 +1657,9 @@ public interface Namespaces {\n             throws PulsarAdminException;\n \n     /**\n-     * Set the offload configuration for all the topics on a namespace.\n+     * Set the offload configuration for all the topics in a namespace.\n      * <p/>\n-     * Set the offload configuration on a namespace. This operation requires Pulsar super-user access.\n+     * Set the offload configuration in a namespace. This operation requires Pulsar super-user access.\n      * <p/>\n      * Request parameter example:\n      * <p/>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MjAxNA==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373752014", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set the offload configuration on a namespace. This operation requires Pulsar super-user access.\n          \n          \n            \n                 * Set the offload configuration in a namespace. This operation requires Pulsar super-user access.", "author": "codelipenghui", "createdAt": "2020-02-01T02:36:03Z", "path": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java", "diffHunk": "@@ -1654,4 +1656,74 @@ boolean getIsAllowAutoUpdateSchema(String namespace)\n      */\n     void setIsAllowAutoUpdateSchema(String namespace, boolean isAllowAutoUpdateSchema)\n             throws PulsarAdminException;\n+\n+    /**\n+     * Set the offload configuration for all the topics on a namespace.\n+     * <p/>\n+     * Set the offload configuration on a namespace. This operation requires Pulsar super-user access.", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\nindex bb862eb15fd..b64f624b377 100644\n--- a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\n+++ b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java\n\n@@ -1658,9 +1657,9 @@ public interface Namespaces {\n             throws PulsarAdminException;\n \n     /**\n-     * Set the offload configuration for all the topics on a namespace.\n+     * Set the offload configuration for all the topics in a namespace.\n      * <p/>\n-     * Set the offload configuration on a namespace. This operation requires Pulsar super-user access.\n+     * Set the offload configuration in a namespace. This operation requires Pulsar super-user access.\n      * <p/>\n      * Request parameter example:\n      * <p/>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MjA5Mg==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373752092", "bodyText": "Looks duplicated", "author": "codelipenghui", "createdAt": "2020-02-01T02:37:19Z", "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java", "diffHunk": "@@ -41,6 +43,8 @@\n import org.apache.pulsar.common.policies.data.BundlesData;\n import org.apache.pulsar.common.policies.data.DispatchRate;\n import org.apache.pulsar.common.policies.data.DelayedDeliveryPolicies;\n+import org.apache.pulsar.common.policies.data.OffloadPolicies;\n+import org.apache.pulsar.common.policies.data.OffloadPolicies;", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java\nindex 4ac4703537f..c2450677319 100644\n--- a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java\n+++ b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java\n\n@@ -44,7 +44,6 @@ import org.apache.pulsar.common.policies.data.BundlesData;\n import org.apache.pulsar.common.policies.data.DispatchRate;\n import org.apache.pulsar.common.policies.data.DelayedDeliveryPolicies;\n import org.apache.pulsar.common.policies.data.OffloadPolicies;\n-import org.apache.pulsar.common.policies.data.OffloadPolicies;\n import org.apache.pulsar.common.policies.data.PersistencePolicies;\n import org.apache.pulsar.common.policies.data.Policies;\n import org.apache.pulsar.common.policies.data.PublishRate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MjkwOA==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373752908", "bodyText": "I think not correct here, is the MAX_* is limit the max available value? or a default value. From the logic, it is a default value.\nIf used for default value, it's better named DEFAULT_BLOCK_SIZE_IN_BYTES and DEFAULT_READ_BUFFER_SIZE_IN_BYTES.\nAnd we'd better throw exceptions when the blockSize and readBufferSize user specify is a non-negative value or 0. because offloader can't uses 0 value or a  negative value. If users don't want modify this value, empty maxBlockSizeStr and readBufferSizeStr is fine.", "author": "codelipenghui", "createdAt": "2020-02-01T02:53:00Z", "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java", "diffHunk": "@@ -1287,6 +1291,106 @@ void run() throws PulsarAdminException {\n         }\n     }\n \n+    @Parameters(commandDescription = \"Set the offload policies for a namespace\")\n+    private class SetOffload extends CliCommand {\n+        @Parameter(description = \"tenant/namespace\", required = true)\n+        private java.util.List<String> params;\n+\n+        @Parameter(\n+                names = {\"--region\", \"-r\"},\n+                description = \"The long term storage region, \" +\n+                        \"default is s3ManagedLedgerOffloadRegion or gcsManagedLedgerOffloadRegion in broker.conf\",\n+                required = false)\n+        private String region;\n+\n+        @Parameter(\n+                names = {\"--bucket\", \"-b\"},\n+                description = \"Bucket to place offloaded ledger into\",\n+                required = true)\n+        private String bucket;\n+\n+        @Parameter(\n+                names = {\"--endpoint\", \"-e\"},\n+                description = \"Alternative endpoint to connect to, \" +\n+                        \"s3 default is s3ManagedLedgerOffloadServiceEndpoint in broker.conf\",\n+                required = false)\n+        private String endpoint;\n+\n+        @Parameter(\n+                names = {\"--maxBlockSize\", \"-mbs\"},\n+                description = \"Max block size (eg: 32M, 64M), default is 64MB\",\n+                required = false)\n+        private String maxBlockSizeStr;\n+\n+        @Parameter(\n+                names = {\"--readBufferSize\", \"-rbs\"},\n+                description = \"Read buffer size (eg: 1M, 5M), default is 1MB\",\n+                required = false)\n+        private String readBufferSizeStr;\n+\n+        private final String[] DRIVER_NAMES = {\"S3\", \"aws-s3\", \"google-cloud-storage\"};\n+\n+        public boolean isS3Driver(String driver) {\n+            if (StringUtils.isEmpty(driver)) {\n+                return false;\n+            }\n+            return driver.equalsIgnoreCase(DRIVER_NAMES[0]) || driver.equalsIgnoreCase(DRIVER_NAMES[1]);\n+        }\n+\n+        @Override\n+        void run() throws PulsarAdminException {\n+            String namespace = validateNamespace(params);\n+\n+            String offloadDriver = admin.brokers().getRuntimeConfigurations().get(\"managedLedgerOffloadDriver\");\n+            if (isS3Driver(offloadDriver) && Strings.isNullOrEmpty(region) && Strings.isNullOrEmpty(endpoint)) {\n+                throw new ParameterException(\n+                        \"Either s3ManagedLedgerOffloadRegion or s3ManagedLedgerOffloadServiceEndpoint must be set\"\n+                                + \" if s3 offload enabled\");\n+            }\n+\n+            long maxBlockSize = 0;\n+            if (StringUtils.isNotEmpty(maxBlockSizeStr)) {\n+                maxBlockSize = validateSizeString(maxBlockSizeStr);\n+            }\n+            long readBufferSize = 0;\n+            if (StringUtils.isNotEmpty(readBufferSizeStr)) {\n+                readBufferSize = validateSizeString(readBufferSizeStr);\n+            }\n+\n+            final int maxBlockSizeInBytes;\n+            if (maxBlockSize > 0 && maxBlockSize <= Integer.MAX_VALUE) {\n+                maxBlockSizeInBytes = new Long(maxBlockSize).intValue();\n+            } else {\n+                maxBlockSizeInBytes = OffloadPolicies.MAX_BLOCK_SIZE_IN_BYTES;\n+            }\n+\n+            final int readBufferSizeInBytes;\n+            if (readBufferSize > 0 && readBufferSize <= Integer.MAX_VALUE) {\n+                readBufferSizeInBytes = new Long(readBufferSize).intValue();\n+            } else {\n+                readBufferSizeInBytes = OffloadPolicies.READ_BUFFER_SIZE_IN_BYTES;\n+            }", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java\nindex 4ac4703537f..c2450677319 100644\n--- a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java\n+++ b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java\n\n@@ -1296,6 +1295,13 @@ public class CmdNamespaces extends CmdBase {\n         @Parameter(description = \"tenant/namespace\", required = true)\n         private java.util.List<String> params;\n \n+        @Parameter(\n+                names = {\"--driver\", \"-d\"},\n+                description = \"Driver to use to offload old data to long term storage, \" +\n+                        \"(Possible values: S3, aws-s3, google-cloud-storage)\",\n+                required = true)\n+        private String driver;\n+\n         @Parameter(\n                 names = {\"--region\", \"-r\"},\n                 description = \"The long term storage region, \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MzEzNQ==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373753135", "bodyText": "Same as PulsarService, use initManagedLedgerOffloader(OffloadPolicies offloadPolicies). For default offloader, just convert serverConfiguration to the OffloadPolicies.", "author": "codelipenghui", "createdAt": "2020-02-01T02:57:16Z", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarConnectorCache.java", "diffHunk": "@@ -123,7 +132,7 @@ private synchronized OrderedScheduler getOffloaderScheduler(PulsarConnectorConfi\n         return this.offloaderScheduler;\n     }\n \n-    private LedgerOffloader initManagedLedgerOffloader(PulsarConnectorConfig conf) {\n+    private LedgerOffloader initManagedLedgerOffloader(PulsarConnectorConfig conf, OffloadPolicies offloadPolicies) {", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarConnectorCache.java b/pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarConnectorCache.java\nindex 7bf4d3b4e6e..a29aabd1558 100644\n--- a/pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarConnectorCache.java\n+++ b/pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarConnectorCache.java\n\n@@ -110,54 +117,55 @@ public class PulsarConnectorCache {\n         return new ManagedLedgerFactoryImpl(bkClientConfiguration, managedLedgerFactoryConfig);\n     }\n \n-    public ManagedLedgerConfig getManagedLedgerConfig(PulsarConnectorConfig pulsarConnectorConfig,\n-                                                      OffloadPolicies offloadPolicies) {\n+    public ManagedLedgerConfig getManagedLedgerConfig(NamespaceName namespaceName, OffloadPolicies offloadPolicies) {\n         ManagedLedgerConfig managedLedgerConfig = new ManagedLedgerConfig();\n         if (offloadPolicies == null) {\n             managedLedgerConfig.setLedgerOffloader(this.defaultOffloader);\n         } else {\n-            LedgerOffloader ledgerOffloader = offloaderMap.computeIfAbsent(offloadPolicies,\n-                    op -> initManagedLedgerOffloader(pulsarConnectorConfig, offloadPolicies));\n+            LedgerOffloader ledgerOffloader = offloaderMap.compute(namespaceName,\n+                    (ns, offloader) -> {\n+                        if (offloader != null && Objects.equals(offloader.getOffloadPolicies(), offloadPolicies)) {\n+                            return offloader;\n+                        } else {\n+                            if (offloader != null) {\n+                                offloader.close();\n+                            }\n+                            return initManagedLedgerOffloader(offloadPolicies);\n+                        }\n+                    });\n             managedLedgerConfig.setLedgerOffloader(ledgerOffloader);\n         }\n         return managedLedgerConfig;\n     }\n \n-    private synchronized OrderedScheduler getOffloaderScheduler(PulsarConnectorConfig pulsarConnectorConfig) {\n+    private synchronized OrderedScheduler getOffloaderScheduler(OffloadPolicies offloadPolicies) {\n         if (this.offloaderScheduler == null) {\n             this.offloaderScheduler = OrderedScheduler.newSchedulerBuilder()\n-                    .numThreads(pulsarConnectorConfig.getManagedLedgerOffloadMaxThreads())\n+                    .numThreads(offloadPolicies.getManagedLedgerOffloadMaxThreads())\n                     .name(\"pulsar-offloader\").build();\n         }\n         return this.offloaderScheduler;\n     }\n \n-    private LedgerOffloader initManagedLedgerOffloader(PulsarConnectorConfig conf, OffloadPolicies offloadPolicies) {\n+    private LedgerOffloader initManagedLedgerOffloader(OffloadPolicies offloadPolicies) {\n \n         try {\n-            if (StringUtils.isNotBlank(conf.getManagedLedgerOffloadDriver())) {\n-                checkNotNull(conf.getOffloadersDirectory(),\n+            if (StringUtils.isNotBlank(offloadPolicies.getManagedLedgerOffloadDriver())) {\n+                checkNotNull(offloadPolicies.getOffloadersDirectory(),\n                         \"Offloader driver is configured to be '%s' but no offloaders directory is configured.\",\n-                        conf.getManagedLedgerOffloadDriver());\n-                this.offloaderManager = OffloaderUtils.searchForOffloaders(conf.getOffloadersDirectory());\n+                        offloadPolicies.getManagedLedgerOffloadDriver());\n+                this.offloaderManager = OffloaderUtils.searchForOffloaders(offloadPolicies.getOffloadersDirectory());\n                 LedgerOffloaderFactory offloaderFactory = this.offloaderManager.getOffloaderFactory(\n-                        conf.getManagedLedgerOffloadDriver());\n-\n-                Map<String, String> offloaderProperties = conf.getOffloaderProperties();\n-                offloaderProperties.put(OFFLOADERS_DIRECTOR, conf.getOffloadersDirectory());\n-                offloaderProperties.put(MANAGED_LEDGER_OFFLOAD_DRIVER, conf.getManagedLedgerOffloadDriver());\n-                offloaderProperties\n-                    .put(MANAGED_LEDGER_OFFLOAD_MAX_THREADS, String.valueOf(conf.getManagedLedgerOffloadMaxThreads()));\n+                        offloadPolicies.getManagedLedgerOffloadDriver());\n \n                 try {\n                     return offloaderFactory.create(\n-                        PulsarConnectorUtils.getProperties(offloaderProperties),\n+                        offloadPolicies,\n                         ImmutableMap.of(\n                             LedgerOffloader.METADATA_SOFTWARE_VERSION_KEY.toLowerCase(), PulsarVersion.getVersion(),\n                             LedgerOffloader.METADATA_SOFTWARE_GITSHA_KEY.toLowerCase(), PulsarVersion.getGitSha()\n                         ),\n-                        getOffloaderScheduler(conf),\n-                        offloadPolicies);\n+                        getOffloaderScheduler(offloadPolicies));\n                 } catch (IOException ioe) {\n                     log.error(\"Failed to create offloader: \", ioe);\n                     throw new RuntimeException(ioe.getMessage(), ioe.getCause());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1MzcwMw==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r373753703", "bodyText": "I'm a little worried about uses OffloadPolicies as a key, because is users frequently modified the policy, there will be some invalid Offloader objects here.", "author": "codelipenghui", "createdAt": "2020-02-01T03:09:06Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java", "diffHunk": "@@ -162,7 +165,8 @@\n     private ScheduledExecutorService compactorExecutor;\n     private OrderedScheduler offloaderScheduler;\n     private Offloaders offloaderManager = new Offloaders();\n-    private LedgerOffloader offloader;\n+    private LedgerOffloader defaultOffloader;\n+    private Map<OffloadPolicies, LedgerOffloader> ledgerOffloaderMap = new ConcurrentHashMap<>();", "originalCommit": "02215a91d0c36dc0a83cfb2d596d1a17fa674839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\nindex 52a120f0601..fe848b5e8b4 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/PulsarService.java\n\n@@ -166,7 +165,7 @@ public class PulsarService implements AutoCloseable {\n     private OrderedScheduler offloaderScheduler;\n     private Offloaders offloaderManager = new Offloaders();\n     private LedgerOffloader defaultOffloader;\n-    private Map<OffloadPolicies, LedgerOffloader> ledgerOffloaderMap = new ConcurrentHashMap<>();\n+    private Map<NamespaceName, LedgerOffloader> ledgerOffloaderMap = new ConcurrentHashMap<>();\n     private ScheduledFuture<?> loadReportTask = null;\n     private ScheduledFuture<?> loadSheddingTask = null;\n     private ScheduledFuture<?> loadResourceQuotaTask = null;\n"}}, {"oid": "b43a5f3c47466e8d06c7b431acc661d455377bf8", "url": "https://github.com/apache/pulsar/commit/b43a5f3c47466e8d06c7b431acc661d455377bf8", "message": "1. Change the LedgerOffloader cache in PulsarService.java;\n2. Add methods for interface LedgerOffloader, add the getOffloadPolicies method, add close method;\n2. Unified the offload policies configuration type, use the OffloadPolicies instead of TieredStorageConfigurationData and FileSystemConfigurationData.", "committedDate": "2020-02-05T06:05:45Z", "type": "commit"}, {"oid": "9874009aab24e4d0a5c8dd6bf16cfc82d44f8600", "url": "https://github.com/apache/pulsar/commit/9874009aab24e4d0a5c8dd6bf16cfc82d44f8600", "message": "add licensed header for CredentialsUtil", "committedDate": "2020-02-05T13:23:46Z", "type": "commit"}, {"oid": "a898f240997d4e2746a2f9d8dbc468149502b3f3", "url": "https://github.com/apache/pulsar/commit/a898f240997d4e2746a2f9d8dbc468149502b3f3", "message": "1. modify the `set-offload` to `set-offload-policies`;\n2. modify the `get-offload` to `get-offload-policies`;\n3. add the OffloadPolicies validate in NamespacesBase.", "committedDate": "2020-02-05T14:29:45Z", "type": "commit"}, {"oid": "0a4d81ee6c58551ee6029f9381931eac5fa8646e", "url": "https://github.com/apache/pulsar/commit/0a4d81ee6c58551ee6029f9381931eac5fa8646e", "message": "checkstyle fix", "committedDate": "2020-02-06T03:48:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjcwNw==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r376162707", "bodyText": "nit: ideally we should try to implement this in an asynchronous way.", "author": "sijie", "createdAt": "2020-02-07T00:49:01Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java", "diffHunk": "@@ -2188,5 +2189,66 @@ protected void internalSetIsAllowAutoUpdateSchema(boolean isAllowAutoUpdateSchem\n         }\n     }\n \n+    protected void internalSetOffloadPolicies(OffloadPolicies offloadPolicies) {", "originalCommit": "0a4d81ee6c58551ee6029f9381931eac5fa8646e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0NjcwNQ==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r376346705", "bodyText": "ok, I'll fix it.", "author": "gaoran10", "createdAt": "2020-02-07T11:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "4300e2242d5ab5260e402c01e2847cd117afeec7", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java\nindex 80025746f8a..437260322c6 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java\n\n@@ -2189,7 +2189,7 @@ public abstract class NamespacesBase extends AdminResource {\n         }\n     }\n \n-    protected void internalSetOffloadPolicies(OffloadPolicies offloadPolicies) {\n+    protected void internalSetOffloadPolicies(AsyncResponse asyncResponse, OffloadPolicies offloadPolicies) {\n         validateAdminAccessForTenant(namespaceName.getTenant());\n         validatePoliciesReadOnlyAccess();\n         validateOffloadPolicies(offloadPolicies);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzM2Nw==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r376163367", "bodyText": "412 is thrown for the following conditions:\n\ndriver is not supported.\nbucket is not valid.\noffload policies is empty.", "author": "sijie", "createdAt": "2020-02-07T00:51:32Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java", "diffHunk": "@@ -1076,5 +1077,31 @@ public void setSchemaValidtionEnforced(@PathParam(\"tenant\") String tenant,\n         internalSetSchemaValidationEnforced(schemaValidationEnforced);\n     }\n \n+    @POST\n+    @Path(\"/{tenant}/{namespace}/offloadPolicies\")\n+    @ApiOperation(value = \" Set offload configuration on a namespace.\")\n+    @ApiResponses(value = {\n+            @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Namespace does not exist\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 412, message = \"Bucket must be specified\") })", "originalCommit": "0a4d81ee6c58551ee6029f9381931eac5fa8646e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0NzIxNA==", "url": "https://github.com/apache/pulsar/pull/6183#discussion_r376347214", "bodyText": "I was so careless", "author": "gaoran10", "createdAt": "2020-02-07T11:36:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4300e2242d5ab5260e402c01e2847cd117afeec7", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java\nindex c0da9a889fe..9b313b3e4e6 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/Namespaces.java\n\n@@ -1084,11 +1084,17 @@ public class Namespaces extends NamespacesBase {\n             @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n             @ApiResponse(code = 404, message = \"Namespace does not exist\"),\n             @ApiResponse(code = 409, message = \"Concurrent modification\"),\n-            @ApiResponse(code = 412, message = \"Bucket must be specified\") })\n+            @ApiResponse(code = 412, message = \"OffloadPolicies is empty or driver is not supported or bucket is not valid\") })\n     public void setOffloadPolicies(@PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n-                           OffloadPolicies offload) {\n-        validateNamespaceName(tenant, namespace);\n-        internalSetOffloadPolicies(offload);\n+                           OffloadPolicies offload, @Suspended final AsyncResponse asyncResponse) {\n+        try {\n+            validateNamespaceName(tenant, namespace);\n+            internalSetOffloadPolicies(asyncResponse, offload);\n+        } catch (WebApplicationException wae) {\n+            asyncResponse.resume(wae);\n+        } catch (Exception e) {\n+            asyncResponse.resume(new RestException(e));\n+        }\n     }\n \n     @GET\n"}}, {"oid": "b45afe9a2e13540c7db621a331ba0e7b1b20e9fd", "url": "https://github.com/apache/pulsar/commit/b45afe9a2e13540c7db621a331ba0e7b1b20e9fd", "message": "Merge remote-tracking branch 'apache/master' into namespace-level-offloader", "committedDate": "2020-02-07T00:55:41Z", "type": "commit"}, {"oid": "4300e2242d5ab5260e402c01e2847cd117afeec7", "url": "https://github.com/apache/pulsar/commit/4300e2242d5ab5260e402c01e2847cd117afeec7", "message": "1. modify internalSetOffloadPolicies method to asynchronous;\n2. modify setOffloadPolicies api error message.", "committedDate": "2020-02-08T14:59:09Z", "type": "commit"}, {"oid": "1b4e55dfbd500dfb1651e30151c13ce98366e5ff", "url": "https://github.com/apache/pulsar/commit/1b4e55dfbd500dfb1651e30151c13ce98366e5ff", "message": "Merge branch 'namespace-level-offloader' of https://github.com/gaoran10/pulsar into namespace-level-offloader", "committedDate": "2020-02-08T14:59:47Z", "type": "commit"}, {"oid": "9fc437eec73d73d79cc531b511bf7c12c8f04827", "url": "https://github.com/apache/pulsar/commit/9fc437eec73d73d79cc531b511bf7c12c8f04827", "message": "exception process fix", "committedDate": "2020-02-09T04:04:32Z", "type": "commit"}, {"oid": "998fcb530cc129c3aa6accd2793cde79618c170c", "url": "https://github.com/apache/pulsar/commit/998fcb530cc129c3aa6accd2793cde79618c170c", "message": "fix unit test", "committedDate": "2020-02-10T09:52:17Z", "type": "commit"}]}