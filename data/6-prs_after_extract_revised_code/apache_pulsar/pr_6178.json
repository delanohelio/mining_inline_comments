{"pr_number": 6178, "pr_title": "Introduce maxMessagePublishBufferSizeInMB configuration to avoid broker OOM", "pr_createdAt": "2020-01-31T17:01:06Z", "pr_url": "https://github.com/apache/pulsar/pull/6178", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1MzgzNQ==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r373653835", "bodyText": "This would become a contention point across all the threads in the broker", "author": "merlimat", "createdAt": "2020-01-31T19:44:41Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -2009,4 +2025,49 @@ public ConfigField(Field field) {\n             return Optional.empty();\n         }\n     }\n+\n+    private void enableTopicsAutoRead() {\n+        topics.values().forEach(future -> {\n+            if (future.isDone() && !future.isCompletedExceptionally()) {\n+                try {\n+                    future.get().ifPresent(Topic::enableProducerRead);\n+                } catch (InterruptedException | ExecutionException e) {\n+                   // no-op\n+                }\n+            }\n+        });\n+    }\n+\n+    @VisibleForTesting\n+    boolean increasePublishBufferSizeAndCheckStopRead(int msgSize) {\n+        if (maxMessagePublishBufferSize < 0) {\n+            return false;\n+        }\n+        if (currentMessagePublishBufferSize.addAndGet(msgSize) >= maxMessagePublishBufferSize &&", "originalCommit": "7ce1f44ccfdca31ef473aaac5a09484d2caeeeac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxNTExMw==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r373815113", "bodyText": "@merlimat Yes, this does increase competition, how about move currentMessagePublishBufferSize to ServerCnx and periodically sync them to totalMessagePublishBufferSize in BrokerService by a single thread?\nOf course this will cause delays, but it will reduce competition.", "author": "codelipenghui", "createdAt": "2020-02-02T02:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1MzgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f92ed4e4f072319e185365c285522c1b5debe0a9", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\nindex ed5b5305d17..b78b7ae101e 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n\n@@ -2026,48 +2040,35 @@ public class BrokerService implements Closeable, ZooKeeperCacheListener<Policies\n         }\n     }\n \n-    private void enableTopicsAutoRead() {\n-        topics.values().forEach(future -> {\n-            if (future.isDone() && !future.isCompletedExceptionally()) {\n-                try {\n-                    future.get().ifPresent(Topic::enableProducerRead);\n-                } catch (InterruptedException | ExecutionException e) {\n-                   // no-op\n-                }\n-            }\n-        });\n-    }\n-\n-    @VisibleForTesting\n-    boolean increasePublishBufferSizeAndCheckStopRead(int msgSize) {\n-        if (maxMessagePublishBufferSize < 0) {\n-            return false;\n-        }\n-        if (currentMessagePublishBufferSize.addAndGet(msgSize) >= maxMessagePublishBufferSize &&\n-            !isMessagePublishBufferThreshold) {\n+    private void checkMessagePublishBuffer() {\n+        currentMessagePublishBufferSize = 0;\n+        foreachProducer(producer -> currentMessagePublishBufferSize += producer.getCnx().getMessagePublishBufferSize());\n+        if (currentMessagePublishBufferSize >= maxMessagePublishBufferSize\n+            && !isMessagePublishBufferThreshold) {\n             isMessagePublishBufferThreshold = true;\n             messagePublishBufferThrottleTimes++;\n         }\n-        return isMessagePublishBufferThreshold;\n-    }\n-\n-    @VisibleForTesting\n-    boolean decreasePublishBufferSizeAndCheckResumeRead(int msgSize) {\n-        if (maxMessagePublishBufferSize < 0) {\n-            return false;\n-        }\n-        if (currentMessagePublishBufferSize.addAndGet(-msgSize) < resumeProducerReadMessagePublishBufferSize &&\n-            isMessagePublishBufferThreshold) {\n+        if (currentMessagePublishBufferSize < resumeProducerReadMessagePublishBufferSize\n+            && isMessagePublishBufferThreshold) {\n             isMessagePublishBufferThreshold = false;\n             messagePublishBufferResumeTimes++;\n-            enableTopicsAutoRead();\n-            return true;\n+            forEachTopic(topic -> ((AbstractTopic) topic).enableProducerReadForPublishBufferLimiting());\n         }\n-        return false;\n+    }\n+\n+    private void foreachProducer(Consumer<Producer> consumer) {\n+        topics.forEach((n, t) -> {\n+            Optional<Topic> topic = extractTopic(t);\n+            topic.ifPresent(value -> value.getProducers().values().forEach(consumer));\n+        });\n+    }\n+\n+    public boolean isMessagePublishBufferThreshold() {\n+        return isMessagePublishBufferThreshold;\n     }\n \n     @VisibleForTesting\n-    AtomicLong getCurrentMessagePublishBufferSize() {\n+    long getCurrentMessagePublishBufferSize() {\n         return currentMessagePublishBufferSize;\n     }\n }\n"}}, {"oid": "f92ed4e4f072319e185365c285522c1b5debe0a9", "url": "https://github.com/apache/pulsar/commit/f92ed4e4f072319e185365c285522c1b5debe0a9", "message": "Apply comments", "committedDate": "2020-02-11T15:34:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NzczMQ==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379167731", "bodyText": "The default value should be a value that makes the broker behave as close to the behavior without this code change. I understand we want to enable the rate-limiting feature. So we should try to make the default value as 60% and 70% of max direct memory? Otherwise, people might experience unexpected performance issues when they upgrade a broker from an old version to a newer version.", "author": "sijie", "createdAt": "2020-02-13T23:01:58Z", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -603,6 +603,23 @@\n             doc = \"Max number of snapshot to be cached per subscription.\")\n     private int replicatedSubscriptionsSnapshotMaxCachedPerSubscription = 10;\n \n+    @FieldContext(\n+        category = CATEGORY_SERVER,\n+        doc = \"Max memory size for broker handling messages sending from producers.\\n\\n\"\n+            + \" If the processing message size exceed this value, broker will stop read data\"\n+            + \" from the connection. The processing messages means messages are sends to broker\"\n+            + \" but broker have not send response to client, usually waiting to write to bookies.\\n\\n\"\n+            + \" It's shared across all the topics running in the same broker.\\n\\n\"\n+            + \" Use -1 to disable the memory limitation. Default is 1/5 of direct memory.\\n\\n\")\n+    private int maxMessagePublishBufferSizeInMB = Math.max(64,", "originalCommit": "b4be922c38e62054ae0c4270bdc09df1df579d3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwMjk1NA==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379402954", "bodyText": "Maybe we'd better keep the default value to -1.", "author": "codelipenghui", "createdAt": "2020-02-14T12:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NzczMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3MTcwNA==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379871704", "bodyText": "Changed the default buffer size to half of the direct memory.", "author": "codelipenghui", "createdAt": "2020-02-16T03:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NzczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "68d15b5822e16d245ed8ffff7b5197795157d570", "chunk": "diff --git a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java\nindex 8ad39637074..49fd2287e6b 100644\n--- a/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java\n+++ b/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java\n\n@@ -614,12 +615,6 @@ public class ServiceConfiguration implements PulsarConfiguration {\n     private int maxMessagePublishBufferSizeInMB = Math.max(64,\n         (int) (PlatformDependent.maxDirectMemory() / 5 / (1024 * 1024)));\n \n-    @FieldContext(\n-        category = CATEGORY_SERVER,\n-        doc = \"Interval between checks to see if message publish buffer size is exceed the max message publish buffer size\"\n-    )\n-    private int messagePublishBufferCheckIntervalInMills = 100;\n-\n     /**** --- Messaging Protocols --- ****/\n \n     @FieldContext(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2ODM1Ng==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379168356", "bodyText": "We should create this executor only when the feature is enabled.\nAlso I see we are creating more and more schedulers. Can we consider reusing some of the executors?", "author": "sijie", "createdAt": "2020-02-13T23:03:59Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -257,6 +268,8 @@ public BrokerService(PulsarService pulsar) throws Exception {\n                 .newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-msg-expiry-monitor\"));\n         this.compactionMonitor =\n             Executors.newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-compaction-monitor\"));\n+        this.messagePublishBufferMonitor =", "originalCommit": "b4be922c38e62054ae0c4270bdc09df1df579d3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwMzM3NQ==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379403375", "bodyText": "Hmm, I think we need a different thread name. It's better for jstack analysis.", "author": "codelipenghui", "createdAt": "2020-02-14T12:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2ODM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "68d15b5822e16d245ed8ffff7b5197795157d570", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\nindex 7f1cac65e49..d2a13e3c957 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n\n@@ -268,8 +273,6 @@ public class BrokerService implements Closeable, ZooKeeperCacheListener<Policies\n                 .newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-msg-expiry-monitor\"));\n         this.compactionMonitor =\n             Executors.newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-compaction-monitor\"));\n-        this.messagePublishBufferMonitor =\n-            Executors.newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-publish-buffer-monitor\"));\n \n         this.backlogQuotaManager = new BacklogQuotaManager(pulsar);\n         this.backlogQuotaChecker = Executors\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2OTI4Mg==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379169282", "bodyText": "It seems to me that this variable doesn't have to be a class variable of BrokerService. It can just be a local variable, right?", "author": "sijie", "createdAt": "2020-02-13T23:06:53Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -2011,4 +2033,34 @@ public ConfigField(Field field) {\n             return Optional.empty();\n         }\n     }\n+\n+    private void checkMessagePublishBuffer() {\n+        currentMessagePublishBufferSize = 0;", "originalCommit": "b4be922c38e62054ae0c4270bdc09df1df579d3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwMzY4Mg==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379403682", "bodyText": "Yes, it is.", "author": "codelipenghui", "createdAt": "2020-02-14T12:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2OTI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "68d15b5822e16d245ed8ffff7b5197795157d570", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\nindex 7f1cac65e49..d2a13e3c957 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n\n@@ -2034,33 +2028,48 @@ public class BrokerService implements Closeable, ZooKeeperCacheListener<Policies\n         }\n     }\n \n-    private void checkMessagePublishBuffer() {\n-        currentMessagePublishBufferSize = 0;\n-        foreachProducer(producer -> currentMessagePublishBufferSize += producer.getCnx().getMessagePublishBufferSize());\n-        if (currentMessagePublishBufferSize >= maxMessagePublishBufferSize\n-            && !isMessagePublishBufferThreshold) {\n-            isMessagePublishBufferThreshold = true;\n-        }\n-        if (currentMessagePublishBufferSize < resumeProducerReadMessagePublishBufferSize\n-            && isMessagePublishBufferThreshold) {\n-            isMessagePublishBufferThreshold = false;\n-            forEachTopic(topic -> ((AbstractTopic) topic).enableProducerReadForPublishBufferLimiting());\n-        }\n-    }\n-\n-    private void foreachProducer(Consumer<Producer> consumer) {\n-        topics.forEach((n, t) -> {\n-            Optional<Topic> topic = extractTopic(t);\n-            topic.ifPresent(value -> value.getProducers().values().forEach(consumer));\n+    private void enableTopicsAutoRead() {\n+        topics.values().forEach(future -> {\n+            if (future.isDone() && !future.isCompletedExceptionally()) {\n+                try {\n+                    future.get().ifPresent(Topic::enableProducerRead);\n+                } catch (InterruptedException | ExecutionException e) {\n+                   // no-op\n+                }\n+            }\n         });\n     }\n \n-    public boolean isMessagePublishBufferThreshold() {\n+    @VisibleForTesting\n+    boolean increasePublishBufferSizeAndCheckStopRead(int msgSize) {\n+        if (maxMessagePublishBufferSize < 0) {\n+            return false;\n+        }\n+        if (currentMessagePublishBufferSize.addAndGet(msgSize) >= maxMessagePublishBufferSize &&\n+            !isMessagePublishBufferThreshold) {\n+            isMessagePublishBufferThreshold = true;\n+            messagePublishBufferThrottleTimes++;\n+        }\n         return isMessagePublishBufferThreshold;\n     }\n \n     @VisibleForTesting\n-    long getCurrentMessagePublishBufferSize() {\n+    boolean decreasePublishBufferSizeAndCheckResumeRead(int msgSize) {\n+        if (maxMessagePublishBufferSize < 0) {\n+            return false;\n+        }\n+        if (currentMessagePublishBufferSize.addAndGet(-msgSize) < resumeProducerReadMessagePublishBufferSize &&\n+            isMessagePublishBufferThreshold) {\n+            isMessagePublishBufferThreshold = false;\n+            messagePublishBufferResumeTimes++;\n+            enableTopicsAutoRead();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @VisibleForTesting\n+    AtomicLong getCurrentMessagePublishBufferSize() {\n         return currentMessagePublishBufferSize;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MDAwNg==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379170006", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private volatile boolean isMessagePublishBufferThreshold;\n          \n          \n            \n                private volatile boolean reachMessagePublishBufferThreshold;", "author": "sijie", "createdAt": "2020-02-13T23:09:07Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -216,8 +218,17 @@\n     private Channel listenChannel;\n     private Channel listenChannelTls;\n \n+    private final long maxMessagePublishBufferSize;\n+    private final long resumeProducerReadMessagePublishBufferSize;\n+    private volatile long currentMessagePublishBufferSize;\n+    private volatile boolean isMessagePublishBufferThreshold;", "originalCommit": "b4be922c38e62054ae0c4270bdc09df1df579d3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68d15b5822e16d245ed8ffff7b5197795157d570", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\nindex 7f1cac65e49..d2a13e3c957 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n\n@@ -220,15 +221,19 @@ public class BrokerService implements Closeable, ZooKeeperCacheListener<Policies\n \n     private final long maxMessagePublishBufferSize;\n     private final long resumeProducerReadMessagePublishBufferSize;\n-    private volatile long currentMessagePublishBufferSize;\n+    private final AtomicLong currentMessagePublishBufferSize;\n     private volatile boolean isMessagePublishBufferThreshold;\n+    @VisibleForTesting\n+    int messagePublishBufferThrottleTimes;\n+    @VisibleForTesting\n+    int messagePublishBufferResumeTimes;\n \n     public BrokerService(PulsarService pulsar) throws Exception {\n         this.pulsar = pulsar;\n         this.maxMessagePublishBufferSize = pulsar.getConfiguration().getMaxMessagePublishBufferSizeInMB() > 0 ?\n             pulsar.getConfiguration().getMaxMessagePublishBufferSizeInMB() * 1024 * 1024 : -1;\n         this.resumeProducerReadMessagePublishBufferSize = this.maxMessagePublishBufferSize / 2;\n-        this.currentMessagePublishBufferSize = 0;\n+        this.currentMessagePublishBufferSize = new AtomicLong(0);\n         this.managedLedgerFactory = pulsar.getManagedLedgerFactory();\n         this.topics = new ConcurrentOpenHashMap<>();\n         this.replicationClients = new ConcurrentOpenHashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MDE0MA==", "url": "https://github.com/apache/pulsar/pull/6178#discussion_r379170140", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private volatile long currentMessagePublishBufferSize;\n          \n          \n            \n                private volatile long currentMessagePublishBufferBytes;\n          \n      \n    \n    \n  \n\nI prefer using bytes rather than size to make the unit more explicit.", "author": "sijie", "createdAt": "2020-02-13T23:09:33Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -216,8 +218,17 @@\n     private Channel listenChannel;\n     private Channel listenChannelTls;\n \n+    private final long maxMessagePublishBufferSize;\n+    private final long resumeProducerReadMessagePublishBufferSize;\n+    private volatile long currentMessagePublishBufferSize;", "originalCommit": "b4be922c38e62054ae0c4270bdc09df1df579d3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68d15b5822e16d245ed8ffff7b5197795157d570", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\nindex 7f1cac65e49..d2a13e3c957 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n\n@@ -220,15 +221,19 @@ public class BrokerService implements Closeable, ZooKeeperCacheListener<Policies\n \n     private final long maxMessagePublishBufferSize;\n     private final long resumeProducerReadMessagePublishBufferSize;\n-    private volatile long currentMessagePublishBufferSize;\n+    private final AtomicLong currentMessagePublishBufferSize;\n     private volatile boolean isMessagePublishBufferThreshold;\n+    @VisibleForTesting\n+    int messagePublishBufferThrottleTimes;\n+    @VisibleForTesting\n+    int messagePublishBufferResumeTimes;\n \n     public BrokerService(PulsarService pulsar) throws Exception {\n         this.pulsar = pulsar;\n         this.maxMessagePublishBufferSize = pulsar.getConfiguration().getMaxMessagePublishBufferSizeInMB() > 0 ?\n             pulsar.getConfiguration().getMaxMessagePublishBufferSizeInMB() * 1024 * 1024 : -1;\n         this.resumeProducerReadMessagePublishBufferSize = this.maxMessagePublishBufferSize / 2;\n-        this.currentMessagePublishBufferSize = 0;\n+        this.currentMessagePublishBufferSize = new AtomicLong(0);\n         this.managedLedgerFactory = pulsar.getManagedLedgerFactory();\n         this.topics = new ConcurrentOpenHashMap<>();\n         this.replicationClients = new ConcurrentOpenHashMap<>();\n"}}, {"oid": "68d15b5822e16d245ed8ffff7b5197795157d570", "url": "https://github.com/apache/pulsar/commit/68d15b5822e16d245ed8ffff7b5197795157d570", "message": "Add maxMessagePublishBufferSizeInMB configuration to avoid broker OOM", "committedDate": "2020-02-16T02:34:32Z", "type": "commit"}, {"oid": "c3bbbb02cf5704c82041c2d8398506dff1d5c9ca", "url": "https://github.com/apache/pulsar/commit/c3bbbb02cf5704c82041c2d8398506dff1d5c9ca", "message": "Apply comments", "committedDate": "2020-02-16T02:34:33Z", "type": "commit"}, {"oid": "7bbc7a283a68f8e88d9ccfb273c1e87a18a21da9", "url": "https://github.com/apache/pulsar/commit/7bbc7a283a68f8e88d9ccfb273c1e87a18a21da9", "message": "Clean code", "committedDate": "2020-02-16T02:34:33Z", "type": "commit"}, {"oid": "917f29b45d5392d71270ab290266df232201c09b", "url": "https://github.com/apache/pulsar/commit/917f29b45d5392d71270ab290266df232201c09b", "message": "Fix unit test", "committedDate": "2020-02-16T02:34:33Z", "type": "commit"}, {"oid": "917f29b45d5392d71270ab290266df232201c09b", "url": "https://github.com/apache/pulsar/commit/917f29b45d5392d71270ab290266df232201c09b", "message": "Fix unit test", "committedDate": "2020-02-16T02:34:33Z", "type": "forcePushed"}, {"oid": "47923d17fecde87a9017924828577be66c1e6b43", "url": "https://github.com/apache/pulsar/commit/47923d17fecde87a9017924828577be66c1e6b43", "message": "Apply comments", "committedDate": "2020-02-16T02:57:07Z", "type": "commit"}, {"oid": "f752a6ce54cbd58dfc4cb873ccca3a6fdcdc7890", "url": "https://github.com/apache/pulsar/commit/f752a6ce54cbd58dfc4cb873ccca3a6fdcdc7890", "message": "Fix unit tests.", "committedDate": "2020-02-16T13:48:27Z", "type": "commit"}]}