{"pr_number": 6126, "pr_title": "support for termination of partitioned topic", "pr_createdAt": "2020-01-22T19:36:09Z", "pr_url": "https://github.com/apache/pulsar/pull/6126", "timeline": [{"oid": "e9cf05b958efb6fe0ad56bc6e958f8e6e1e97c30", "url": "https://github.com/apache/pulsar/commit/e9cf05b958efb6fe0ad56bc6e958f8e6e1e97c30", "message": "support for termination of partitioned topic", "committedDate": "2020-01-22T19:25:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxODM5MQ==", "url": "https://github.com/apache/pulsar/pull/6126#discussion_r369918391", "bodyText": "Seems most of the test content is duplicate with above testGetSubscriptions(),  Could we refine this test case to focus on topic Terminate?", "author": "jiazhai", "createdAt": "2020-01-23T03:33:19Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java", "diffHunk": "@@ -200,6 +203,76 @@ public void testGetSubscriptions() {\n         Assert.assertEquals(responseCaptor.getValue().getStatus(), Response.Status.NO_CONTENT.getStatusCode());\n     }\n \n+    @Test\n+    public void testTerminatePartitionedTopic() {\n+        String testLocalTopicName = \"topic-not-found\";", "originalCommit": "e9cf05b958efb6fe0ad56bc6e958f8e6e1e97c30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7946ea8526cdda885a620ff72554e213c07703f", "chunk": "diff --git a/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java b/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java\nindex 6b19e7a0b46..165b08ab511 100644\n--- a/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java\n+++ b/pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java\n\n@@ -207,66 +207,17 @@ public class PersistentTopicsTest extends MockedPulsarServiceBaseTest {\n     public void testTerminatePartitionedTopic() {\n         String testLocalTopicName = \"topic-not-found\";\n \n-        // 1) Confirm that the topic does not exist\n-        AsyncResponse response = mock(AsyncResponse.class);\n-        persistentTopics.getSubscriptions(response, testTenant, testNamespace, testLocalTopicName, true);\n-        ArgumentCaptor<RestException> errorCaptor = ArgumentCaptor.forClass(RestException.class);\n-        verify(response, timeout(5000).times(1)).resume(errorCaptor.capture());\n-        Assert.assertEquals(errorCaptor.getValue().getResponse().getStatus(),\n-                Response.Status.NOT_FOUND.getStatusCode());\n-        Assert.assertEquals(errorCaptor.getValue().getMessage(), \"Topic not found\");\n-\n-        // 2) Confirm that the partitioned topic does not exist\n-        response = mock(AsyncResponse.class);\n-        persistentTopics.getSubscriptions(response, testTenant, testNamespace, testLocalTopicName + \"-partition-0\",\n-                true);\n-        errorCaptor = ArgumentCaptor.forClass(RestException.class);\n-        verify(response, timeout(5000).times(1)).resume(errorCaptor.capture());\n-        Assert.assertEquals(errorCaptor.getValue().getResponse().getStatus(),\n-                Response.Status.NOT_FOUND.getStatusCode());\n-        Assert.assertEquals(errorCaptor.getValue().getMessage(),\n-                \"Partitioned Topic not found: persistent://my-tenant/my-namespace/topic-not-found-partition-0 has zero partitions\");\n-\n         // 3) Create the partitioned topic\n         persistentTopics.createPartitionedTopic(testTenant, testNamespace, testLocalTopicName, 1);\n \n-        // 4) Confirm that the topic partitions has not been created yet\n-        response = mock(AsyncResponse.class);\n-        persistentTopics.getSubscriptions(response, testTenant, testNamespace, testLocalTopicName + \"-partition-0\",\n-                true);\n-        errorCaptor = ArgumentCaptor.forClass(RestException.class);\n-        verify(response, timeout(5000).times(1)).resume(errorCaptor.capture());\n-        Assert.assertEquals(errorCaptor.getValue().getResponse().getStatus(),\n-                Response.Status.NOT_FOUND.getStatusCode());\n-        Assert.assertEquals(errorCaptor.getValue().getMessage(), \"Topic partitions were not yet created\");\n-\n         // 5) Create a subscription\n-        response = mock(AsyncResponse.class);\n+        AsyncResponse response  = mock(AsyncResponse.class);\n         persistentTopics.createSubscription(response, testTenant, testNamespace, testLocalTopicName, \"test\", true,\n                 (MessageIdImpl) MessageId.earliest, false);\n         ArgumentCaptor<Response> responseCaptor = ArgumentCaptor.forClass(Response.class);\n         verify(response, timeout(5000).times(1)).resume(responseCaptor.capture());\n         Assert.assertEquals(responseCaptor.getValue().getStatus(), Response.Status.NO_CONTENT.getStatusCode());\n \n-        // 6) Confirm that the subscription exists\n-        response = mock(AsyncResponse.class);\n-        persistentTopics.getSubscriptions(response, testTenant, testNamespace, testLocalTopicName + \"-partition-0\",\n-                true);\n-        verify(response, timeout(5000).times(1)).resume(Lists.newArrayList(\"test\"));\n-\n-        // 7) Delete the subscription\n-        response = mock(AsyncResponse.class);\n-        persistentTopics.deleteSubscription(response, testTenant, testNamespace, testLocalTopicName, \"test\", true);\n-        responseCaptor = ArgumentCaptor.forClass(Response.class);\n-        verify(response, timeout(5000).times(1)).resume(responseCaptor.capture());\n-        Assert.assertEquals(responseCaptor.getValue().getStatus(), Response.Status.NO_CONTENT.getStatusCode());\n-\n-        // 8) Confirm that the subscription does not exist\n-        response = mock(AsyncResponse.class);\n-        persistentTopics.getSubscriptions(response, testTenant, testNamespace, testLocalTopicName + \"-partition-0\",\n-                true);\n-        verify(response, timeout(5000).times(1)).resume(Lists.newArrayList());\n-\n         // 9) terminate partitioned topic\n         response = mock(AsyncResponse.class);\n         persistentTopics.terminatePartitionedTopic(response, testTenant, testNamespace, testLocalTopicName, true);\n"}}, {"oid": "f7946ea8526cdda885a620ff72554e213c07703f", "url": "https://github.com/apache/pulsar/commit/f7946ea8526cdda885a620ff72554e213c07703f", "message": "test case simplified", "committedDate": "2020-01-23T15:18:03Z", "type": "commit"}, {"oid": "2420232744530ea87a72fe9e1e4cd22a47c75257", "url": "https://github.com/apache/pulsar/commit/2420232744530ea87a72fe9e1e4cd22a47c75257", "message": "Merge remote-tracking branch 'apache/master' into terminate-partitioned-topic", "committedDate": "2020-06-02T01:07:04Z", "type": "commit"}, {"oid": "45d5a4b959b97856ee86b20d88f3dbc285d0fe47", "url": "https://github.com/apache/pulsar/commit/45d5a4b959b97856ee86b20d88f3dbc285d0fe47", "message": "Merge remote-tracking branch 'apache/master' into terminate-partitioned-topic", "committedDate": "2020-06-02T04:14:39Z", "type": "commit"}, {"oid": "72e70a177e9cf599e2b082b08d06b181acdd597d", "url": "https://github.com/apache/pulsar/commit/72e70a177e9cf599e2b082b08d06b181acdd597d", "message": "Fix tests", "committedDate": "2020-06-02T07:50:00Z", "type": "commit"}, {"oid": "adb4b4467fd140e0af0bc02b290674a8e276d33e", "url": "https://github.com/apache/pulsar/commit/adb4b4467fd140e0af0bc02b290674a8e276d33e", "message": "Merge remote-tracking branch 'apache/master' into terminate-partitioned-topic", "committedDate": "2020-06-03T11:37:01Z", "type": "commit"}]}