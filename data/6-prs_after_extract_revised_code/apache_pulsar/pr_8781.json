{"pr_number": 8781, "pr_title": "[issue 8337][Worker] Move initialize dlog namespace metadata to bin/pulsar", "pr_createdAt": "2020-12-02T09:01:20Z", "pr_url": "https://github.com/apache/pulsar/pull/8781", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwNTI4MA==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r534005280", "bodyText": "Don't remove the code immediately. Please add a flag in Function worker config to control whether do we need to initialize dlog namespace or not. By default, we can make it true (to initialize dlog namespace) for backward compatibility consideration and allow people to turn it off.", "author": "sijie", "createdAt": "2020-12-02T09:11:42Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java", "diffHunk": "@@ -150,15 +150,8 @@ private static URI initialize(WorkerConfig workerConfig)\n             admin.close();\n         }\n \n-        // initialize the dlog namespace\n-        // TODO: move this as part of pulsar cluster initialization later\n-        try {\n-            return WorkerUtils.initializeDlogNamespace(internalConf);\n-        } catch (IOException ioe) {\n-            log.error(\"Failed to initialize dlog namespace with zookeeper {} at metadata service uri {} for storing function packages\",\n-                internalConf.getZookeeperServers(), internalConf.getBookkeeperMetadataServiceUri(), ioe);\n-            throw ioe;\n-        }\n+        // get the dlog namespace\n+        return WorkerUtils.getDlogNamespaceURI(internalConf.getZookeeperServers());", "originalCommit": "6423e6ab350d2fb7fb2098a043b5542b3adb2909", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1Mjg2Mg==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r534052862", "bodyText": "I update my code, and I'm not sure if I'm doing the right thing, please let me know if have any problems.", "author": "nodece", "createdAt": "2020-12-02T10:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwNTI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "2b1a216304f2c56e401ac6ceb7b1ae75745ce9f8", "chunk": "diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\nindex eb63b2c7974..30adf37e08a 100644\n--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\n+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\n\n@@ -150,8 +155,14 @@ public class Worker {\n             admin.close();\n         }\n \n-        // get the dlog namespace\n-        return WorkerUtils.getDlogNamespaceURI(internalConf.getZookeeperServers());\n+        // initialize the dlog namespace\n+        try {\n+            return isInitialDlogMetadataByPulsarTool ? WorkerUtils.getDlogNamespaceURI(internalConf.getZookeeperServers()): WorkerUtils.initializeDlogNamespace(internalConf);\n+        } catch (IOException ioe) {\n+            log.error(\"Failed to initialize dlog namespace with zookeeper {} at metadata service uri {} for storing function packages\",\n+                internalConf.getZookeeperServers(), internalConf.getBookkeeperMetadataServiceUri(), ioe);\n+            throw ioe;\n+        }\n     }\n \n     private AuthorizationService getAuthorizationService() throws PulsarServerException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwNjI1OQ==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r534006259", "bodyText": "Also initialize the dlog namespace as part of initialize-cluster-metadata command.", "author": "sijie", "createdAt": "2020-12-02T09:13:13Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/PulsarInitialDlogNamespaceMetadataSetup.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import org.apache.pulsar.common.conf.InternalConfigurationData;\n+import org.apache.pulsar.functions.worker.WorkerUtils;\n+\n+public class PulsarInitialDlogNamespaceMetadataSetup {\n+    private static class Arguments {\n+        @Parameter(names = {\"-cs\",\n+                \"--configuration-store\"}, description = \"Configuration Store connection string\", required = true)\n+        private String configurationStore;\n+\n+        @Parameter(names = {\"--bookkeeper-metadata-service-uri\"}, description = \"Metadata service uri of BookKeeper\", required = true)\n+        private String bkMetadataServiceUri;\n+\n+        @Parameter(names = {\"-h\", \"--help\"}, description = \"Show this help message\")\n+        private boolean help = false;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        PulsarInitialDlogNamespaceMetadataSetup.Arguments arguments = new PulsarInitialDlogNamespaceMetadataSetup.Arguments();\n+        JCommander jcommander = new JCommander();\n+        try {\n+            jcommander.addObject(arguments);\n+            jcommander.parse(args);\n+            if (arguments.help) {\n+                jcommander.usage();\n+                return;\n+            }\n+        } catch (Exception e) {\n+            jcommander.usage();\n+            throw e;\n+        }\n+\n+        if (arguments.configurationStore == null) {\n+            System.err.println(\"Configuration store address argument is required (--configuration-store)\");\n+            jcommander.usage();\n+            System.exit(1);\n+        }\n+        if (arguments.bkMetadataServiceUri == null) {\n+            System.err.println(\"Metadata service uri of BookKeeper argument is required (--bookkeeper-metadata-service-uri)\");\n+            jcommander.usage();\n+            System.exit(1);\n+        }\n+\n+        InternalConfigurationData internalConf = new InternalConfigurationData(arguments.configurationStore, arguments.configurationStore, null, arguments.bkMetadataServiceUri, null);\n+        WorkerUtils.initializeDlogNamespace(internalConf);", "originalCommit": "6423e6ab350d2fb7fb2098a043b5542b3adb2909", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b1a216304f2c56e401ac6ceb7b1ae75745ce9f8", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/PulsarInitialDlogNamespaceMetadataSetup.java b/pulsar-broker/src/main/java/org/apache/pulsar/PulsarInitialDlogNamespaceMetadataSetup.java\ndeleted file mode 100644\nindex 4ebcbba3850..00000000000\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/PulsarInitialDlogNamespaceMetadataSetup.java\n+++ /dev/null\n\n@@ -1,69 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar;\n-\n-import com.beust.jcommander.JCommander;\n-import com.beust.jcommander.Parameter;\n-import org.apache.pulsar.common.conf.InternalConfigurationData;\n-import org.apache.pulsar.functions.worker.WorkerUtils;\n-\n-public class PulsarInitialDlogNamespaceMetadataSetup {\n-    private static class Arguments {\n-        @Parameter(names = {\"-cs\",\n-                \"--configuration-store\"}, description = \"Configuration Store connection string\", required = true)\n-        private String configurationStore;\n-\n-        @Parameter(names = {\"--bookkeeper-metadata-service-uri\"}, description = \"Metadata service uri of BookKeeper\", required = true)\n-        private String bkMetadataServiceUri;\n-\n-        @Parameter(names = {\"-h\", \"--help\"}, description = \"Show this help message\")\n-        private boolean help = false;\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        PulsarInitialDlogNamespaceMetadataSetup.Arguments arguments = new PulsarInitialDlogNamespaceMetadataSetup.Arguments();\n-        JCommander jcommander = new JCommander();\n-        try {\n-            jcommander.addObject(arguments);\n-            jcommander.parse(args);\n-            if (arguments.help) {\n-                jcommander.usage();\n-                return;\n-            }\n-        } catch (Exception e) {\n-            jcommander.usage();\n-            throw e;\n-        }\n-\n-        if (arguments.configurationStore == null) {\n-            System.err.println(\"Configuration store address argument is required (--configuration-store)\");\n-            jcommander.usage();\n-            System.exit(1);\n-        }\n-        if (arguments.bkMetadataServiceUri == null) {\n-            System.err.println(\"Metadata service uri of BookKeeper argument is required (--bookkeeper-metadata-service-uri)\");\n-            jcommander.usage();\n-            System.exit(1);\n-        }\n-\n-        InternalConfigurationData internalConf = new InternalConfigurationData(arguments.configurationStore, arguments.configurationStore, null, arguments.bkMetadataServiceUri, null);\n-        WorkerUtils.initializeDlogNamespace(internalConf);\n-        System.out.println(\"Initial Dlog namespace metadata setup success\");\n-    }\n-}\n"}}, {"oid": "2b1a216304f2c56e401ac6ceb7b1ae75745ce9f8", "url": "https://github.com/apache/pulsar/commit/2b1a216304f2c56e401ac6ceb7b1ae75745ce9f8", "message": "Move initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2020-12-02T10:10:58Z", "type": "forcePushed"}, {"oid": "7f4c19aa35c4a6132d6121285b89bf0ce67c768b", "url": "https://github.com/apache/pulsar/commit/7f4c19aa35c4a6132d6121285b89bf0ce67c768b", "message": "Move initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2020-12-03T06:26:50Z", "type": "forcePushed"}, {"oid": "7fd6d367587b9cee67b5e04f2f3c5b3a6fdfad56", "url": "https://github.com/apache/pulsar/commit/7fd6d367587b9cee67b5e04f2f3c5b3a6fdfad56", "message": "Move initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2020-12-03T09:14:56Z", "type": "forcePushed"}, {"oid": "a88e7c603eb2da0359fea634615c31c85b4e0ae8", "url": "https://github.com/apache/pulsar/commit/a88e7c603eb2da0359fea634615c31c85b4e0ae8", "message": "Move initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2020-12-03T09:17:52Z", "type": "forcePushed"}, {"oid": "dcc634cd52071f64279a0b5ab775ba7e354a0b0b", "url": "https://github.com/apache/pulsar/commit/dcc634cd52071f64279a0b5ab775ba7e354a0b0b", "message": "Move initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2020-12-03T14:25:19Z", "type": "forcePushed"}, {"oid": "4f5d8d5ce69a2b8f0efa2f4a72a39d5ca3cbc62a", "url": "https://github.com/apache/pulsar/commit/4f5d8d5ce69a2b8f0efa2f4a72a39d5ca3cbc62a", "message": "Move initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2020-12-07T07:07:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMjgwOQ==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r539032809", "bodyText": "How is this flag set?", "author": "sijie", "createdAt": "2020-12-09T06:02:13Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java", "diffHunk": "@@ -59,6 +59,7 @@\n     private GlobalZooKeeperCache globalZkCache;\n     private ConfigurationCacheService configurationCacheService;\n     private final ErrorNotifier errorNotifier;\n+    private static boolean isInitialDlogMetadataByPulsarTool = false;", "originalCommit": "4f5d8d5ce69a2b8f0efa2f4a72a39d5ca3cbc62a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1Mjk4Mg==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r540152982", "bodyText": "@sijie Do you mean add a flag to config file?", "author": "nodece", "createdAt": "2020-12-10T13:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMjgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwODMxMw==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r540408313", "bodyText": "I mean how this flag is used. I don't see which method set the flag.", "author": "sijie", "createdAt": "2020-12-10T18:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMjgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzNjY5NA==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r540636694", "bodyText": "https://github.com/apache/pulsar/pull/8781/files/4f5d8d5ce69a2b8f0efa2f4a72a39d5ca3cbc62a#diff-6ea96d1db19eb1c438ee988cc295057393319e0c0714771538e4ae9c7391cb86R87", "author": "nodece", "createdAt": "2020-12-11T02:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMjgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "20bb187d7f8f6d340873e4fbc5995b7f42cf224b", "chunk": "diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\nindex 80fc3e5359e..b3ca4dbb136 100644\n--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\n+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\n\n@@ -59,22 +51,20 @@ public class Worker {\n     private GlobalZooKeeperCache globalZkCache;\n     private ConfigurationCacheService configurationCacheService;\n     private final ErrorNotifier errorNotifier;\n-    private static boolean isInitialDlogMetadataByPulsarTool = false;\n \n     public Worker(WorkerConfig workerConfig) {\n         this.workerConfig = workerConfig;\n-        this.workerService = new WorkerService(workerConfig, true);\n+        this.workerService = WorkerServiceLoader.load(workerConfig);\n         this.errorNotifier = ErrorNotifier.getDefaultImpl();\n     }\n \n     protected void start() throws Exception {\n-        URI dlogUri = initialize(workerConfig);\n-\n-        workerService.start(dlogUri, getAuthenticationService(), getAuthorizationService(), errorNotifier);\n-        server = new WorkerServer(workerService);\n+        workerService.initAsStandalone(workerConfig);\n+        workerService.start(getAuthenticationService(), getAuthorizationService(), errorNotifier);\n+        server = new WorkerServer(workerService, getAuthenticationService());\n         server.start();\n         log.info(\"/** Started worker server on port={} **/\", this.workerConfig.getWorkerPort());\n-\n+        \n         try {\n             errorNotifier.waitForError();\n         } catch (Throwable th) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMjg4Ng==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r539032886", "bodyText": "How is this method used?", "author": "sijie", "createdAt": "2020-12-09T06:02:25Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java", "diffHunk": "@@ -82,7 +83,11 @@ protected void start() throws Exception {\n         }\n     }\n \n-    private static URI initialize(WorkerConfig workerConfig)\n+    public static void setEnableInitialDlogMetadataByPulsarTool(boolean enable) {", "originalCommit": "4f5d8d5ce69a2b8f0efa2f4a72a39d5ca3cbc62a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzNzAzNA==", "url": "https://github.com/apache/pulsar/pull/8781#discussion_r540637034", "bodyText": "User can call Worker. setEnableInitialDlogMetadataByPulsarTool(true) or Worker.setEnableInitialDlogMetadataByPulsarTool(false).", "author": "nodece", "createdAt": "2020-12-11T02:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMjg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "20bb187d7f8f6d340873e4fbc5995b7f42cf224b", "chunk": "diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\nindex 80fc3e5359e..b3ca4dbb136 100644\n--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\n+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java\n\n@@ -83,91 +73,7 @@ public class Worker {\n         }\n     }\n \n-    public static void setEnableInitialDlogMetadataByPulsarTool(boolean enable) {\n-        isInitialDlogMetadataByPulsarTool = enable;\n-    }\n \n-    private URI initialize(WorkerConfig workerConfig)\n-            throws InterruptedException, PulsarAdminException, IOException {\n-        // initializing pulsar functions namespace\n-        PulsarAdmin admin = WorkerUtils.getPulsarAdminClient(workerConfig.getPulsarWebServiceUrl(),\n-                workerConfig.getBrokerClientAuthenticationPlugin(), workerConfig.getBrokerClientAuthenticationParameters(),\n-                workerConfig.getTlsTrustCertsFilePath(), workerConfig.isTlsAllowInsecureConnection(),\n-                workerConfig.isTlsEnableHostnameVerification());\n-        InternalConfigurationData internalConf;\n-        // make sure pulsar broker is up\n-        log.info(\"Checking if pulsar service at {} is up...\", workerConfig.getPulsarWebServiceUrl());\n-        int maxRetries = workerConfig.getInitialBrokerReconnectMaxRetries();\n-        int retries = 0;\n-        while (true) {\n-            try {\n-                admin.clusters().getClusters();\n-                break;\n-            } catch (PulsarAdminException e) {\n-                log.warn(\"Failed to retrieve clusters from pulsar service\", e);\n-                log.warn(\"Retry to connect to Pulsar service at {}\", workerConfig.getPulsarWebServiceUrl());\n-                if (retries >= maxRetries) {\n-                    log.error(\"Failed to connect to Pulsar service at {} after {} attempts\",\n-                            workerConfig.getPulsarFunctionsNamespace(), maxRetries);\n-                    throw e;\n-                }\n-                retries ++;\n-                Thread.sleep(1000);\n-            }\n-        }\n-\n-        // getting namespace policy\n-        log.info(\"Initializing Pulsar Functions namespace...\");\n-        try {\n-            try {\n-                admin.namespaces().getPolicies(workerConfig.getPulsarFunctionsNamespace());\n-            } catch (PulsarAdminException e) {\n-                if (e.getStatusCode() == Response.Status.NOT_FOUND.getStatusCode()) {\n-                    // if not found than create\n-                    try {\n-                        Policies policies = new Policies();\n-                        policies.retention_policies = new RetentionPolicies(-1, -1);\n-                        policies.replication_clusters = new HashSet<>();\n-                        policies.replication_clusters.add(workerConfig.getPulsarFunctionsCluster());\n-                        admin.namespaces().createNamespace(workerConfig.getPulsarFunctionsNamespace(),\n-                                policies);\n-                    } catch (PulsarAdminException e1) {\n-                        // prevent race condition with other workers starting up\n-                        if (e1.getStatusCode() != Response.Status.CONFLICT.getStatusCode()) {\n-                            log.error(\"Failed to create namespace {} for pulsar functions\", workerConfig\n-                                    .getPulsarFunctionsNamespace(), e1);\n-                            throw e1;\n-                        }\n-                    }\n-                } else {\n-                    log.error(\"Failed to get retention policy for pulsar function namespace {}\",\n-                            workerConfig.getPulsarFunctionsNamespace(), e);\n-                    throw e;\n-                }\n-            }\n-            try {\n-                internalConf = admin.brokers().getInternalConfigurationData();\n-            } catch (PulsarAdminException e) {\n-                log.error(\"Failed to retrieve broker internal configuration\", e);\n-                throw e;\n-            }\n-        } finally {\n-            admin.close();\n-        }\n-\n-        // initialize the dlog namespace\n-        try {\n-            if (isInitialDlogMetadataByPulsarTool) {\n-                return WorkerUtils.getDlogNamespaceURI(internalConf.getZookeeperServers());\n-            }else{\n-                return WorkerUtils.initializeDlogNamespace(internalConf);\n-            }\n-        } catch (IOException ioe) {\n-            log.error(\"Failed to initialize dlog namespace with zookeeper {} at metadata service uri {} for storing function packages\",\n-                internalConf.getZookeeperServers(), internalConf.getBookkeeperMetadataServiceUri(), ioe);\n-            throw ioe;\n-        }\n-    }\n \n     private AuthorizationService getAuthorizationService() throws PulsarServerException {\n \n"}}, {"oid": "20bb187d7f8f6d340873e4fbc5995b7f42cf224b", "url": "https://github.com/apache/pulsar/commit/20bb187d7f8f6d340873e4fbc5995b7f42cf224b", "message": "Add initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2021-01-04T08:14:37Z", "type": "forcePushed"}, {"oid": "c341217ab312c5fc199d2a604ccf1e377656c92b", "url": "https://github.com/apache/pulsar/commit/c341217ab312c5fc199d2a604ccf1e377656c92b", "message": "Add initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2021-01-05T10:16:10Z", "type": "commit"}, {"oid": "c341217ab312c5fc199d2a604ccf1e377656c92b", "url": "https://github.com/apache/pulsar/commit/c341217ab312c5fc199d2a604ccf1e377656c92b", "message": "Add initialize dlog namespace metadata to bin/pulsar\n\nSigned-off-by: Zixuan Liu <nodeces@gmail.com>", "committedDate": "2021-01-05T10:16:10Z", "type": "forcePushed"}, {"oid": "544f61e75d23fe9be9144fe94de6cbd196968e1a", "url": "https://github.com/apache/pulsar/commit/544f61e75d23fe9be9144fe94de6cbd196968e1a", "message": "Merge remote-tracking branch 'apache/master' into move_init_dlog_namespace", "committedDate": "2021-01-07T18:08:46Z", "type": "commit"}]}