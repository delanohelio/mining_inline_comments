{"pr_number": 7406, "pr_title": "Improved in max-pending-bytes mechanism for broker", "pr_createdAt": "2020-07-01T07:01:59Z", "pr_url": "https://github.com/apache/pulsar/pull/7406", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NTY0Mw==", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r448195643", "bodyText": "What's the advantage of this over \"new HashSet<>()\"?", "author": "ivankelly", "createdAt": "2020-07-01T08:16:56Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -167,10 +171,26 @@\n     private volatile boolean autoReadDisabledRateLimiting = false;\n     private FeatureFlags features;\n     // Flag to manage throttling-publish-buffer by atomically enable/disable read-channel.\n-    private volatile boolean autoReadDisabledPublishBufferLimiting = false;\n-    private static final AtomicLongFieldUpdater<ServerCnx> MSG_PUBLISH_BUFFER_SIZE_UPDATER =\n-            AtomicLongFieldUpdater.newUpdater(ServerCnx.class, \"messagePublishBufferSize\");\n-    private volatile long messagePublishBufferSize = 0;\n+    private boolean autoReadDisabledPublishBufferLimiting = false;\n+\n+    private final long maxPendingBytesPerThread;\n+    private final long resumeThresholdPendingBytesPerThread;\n+\n+    // Number of bytes pending to be published from a single specific IO thread.\n+    private static final FastThreadLocal<MutableLong> pendingBytesPerThread = new FastThreadLocal<MutableLong>() {\n+        @Override\n+        protected MutableLong initialValue() throws Exception {\n+            return new MutableLong();\n+        }\n+    };\n+\n+    // A set of connections tied to the current thread\n+    private static final FastThreadLocal<Set<ServerCnx>> cnxsPerThread = new FastThreadLocal<Set<ServerCnx>>() {\n+        @Override\n+        protected Set<ServerCnx> initialValue() throws Exception {\n+            return Collections.newSetFromMap(new IdentityHashMap<>());", "originalCommit": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzMjg0OA==", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r448332848", "bodyText": "Since ServerCnx doesn't have a hashCode() method I thought to be on the safe side to just make sure to use ==  operator instead of hashing. Honestly, I'm not 100% sure that would make difference in practice.", "author": "merlimat", "createdAt": "2020-07-01T12:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NTY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "77acc92df631378849ca7d5b8aace67adb476035", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\nindex d23ab902fcc..a8edd3df153 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\n\n@@ -166,13 +182,19 @@ public class ServerCnx extends PulsarHandler {\n     private boolean preciseDispatcherFlowControl;\n \n     private boolean preciseTopicPublishRateLimitingEnable;\n+    private boolean encryptionRequireOnProducer;\n \n     // Flag to manage throttling-rate by atomically enable/disable read-channel.\n     private volatile boolean autoReadDisabledRateLimiting = false;\n     private FeatureFlags features;\n+\n+    private PulsarCommandSender commandSender;\n+\n+    private static final KeySharedMeta emptyKeySharedMeta = new KeySharedMeta()\n+            .setKeySharedMode(KeySharedMode.AUTO_SPLIT);\n+\n     // Flag to manage throttling-publish-buffer by atomically enable/disable read-channel.\n     private boolean autoReadDisabledPublishBufferLimiting = false;\n-\n     private final long maxPendingBytesPerThread;\n     private final long resumeThresholdPendingBytesPerThread;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMDI5Mw==", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r448220293", "bodyText": "Is this exported via prometheus? It would be better to have separate event counters for pause and resume so that if pausing happens between prometheus pulls we can see it.", "author": "ivankelly", "createdAt": "2020-07-01T08:58:41Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -2307,4 +2253,16 @@ private boolean isSystemTopic(String topic) {\n     public void setInterceptor(BrokerInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n+\n+    public void pausedConnections(int numberOfConnections) {\n+        pausedConnections.addAndGet(numberOfConnections);", "originalCommit": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzMzcyMQ==", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r448333721", "bodyText": "Good point. I just exposed it here to for validation in the tests, though it makes sense to expose the 2 counters.", "author": "merlimat", "createdAt": "2020-07-01T12:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMDI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "77acc92df631378849ca7d5b8aace67adb476035", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\nindex ff98df0af98..7673789f1bc 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n\n@@ -2250,10 +2568,86 @@ public class BrokerService implements Closeable, ZooKeeperCacheListener<Policies\n         return SystemTopicClient.isSystemTopic(TopicName.get(topic));\n     }\n \n+    /**\n+     * Get {@link TopicPolicies} for this topic.\n+     * @param topicName\n+     * @return TopicPolicies is exist else return null.\n+     */\n+    public TopicPolicies getTopicPolicies(TopicName topicName) {\n+        TopicName cloneTopicName = topicName;\n+        if (topicName.isPartitioned()) {\n+            cloneTopicName = TopicName.get(topicName.getPartitionedTopicName());\n+        }\n+        try {\n+            checkTopicLevelPolicyEnable();\n+            return pulsar.getTopicPoliciesService().getTopicPolicies(cloneTopicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.debug(\"Topic {} policies have not been initialized yet.\", topicName.getPartitionedTopicName());\n+            return null;\n+        } catch (RestException | NullPointerException e) {\n+            log.debug(\"Topic level policies are not enabled. \"\n+                    + \"Please refer to systemTopicEnabled and topicLevelPoliciesEnabled on broker.conf\");\n+            return null;\n+        }\n+    }\n+\n+    private void checkTopicLevelPolicyEnable() {\n+        if (!pulsar().getConfig().isTopicLevelPoliciesEnabled()) {\n+            throw new RestException(Response.Status.METHOD_NOT_ALLOWED,\n+                    \"Topic level policies is disabled, to enable the topic level policy and retry.\");\n+        }\n+    }\n+\n+\n+    private <T> boolean checkMaxTopicsPerNamespace(TopicName topicName, int numPartitions,\n+                                            CompletableFuture<T> topicFuture) {\n+        Integer maxTopicsPerNamespace;\n+        try {\n+            maxTopicsPerNamespace = pulsar.getConfigurationCache().policiesCache()\n+                    .get(AdminResource.path(POLICIES, topicName.getNamespace()))\n+                    .map(p -> p.max_topics_per_namespace)\n+                    .orElse(null);\n+\n+            if (maxTopicsPerNamespace == null) {\n+                maxTopicsPerNamespace = pulsar.getConfig().getMaxTopicsPerNamespace();\n+            }\n+\n+            if (maxTopicsPerNamespace > 0) {\n+                String partitionedTopicPath = PulsarWebResource.joinPath(MANAGED_LEDGER_PATH_ZNODE,\n+                        topicName.getNamespace(), topicName.getDomain().value());\n+                List<String> topics = pulsar().getLocalZkCache().getZooKeeper()\n+                        .getChildren(partitionedTopicPath, false);\n+                if (topics.size() + numPartitions > maxTopicsPerNamespace) {\n+                    log.error(\"Failed to create persistent topic {}, \"\n+                            + \"exceed maximum number of topics in namespace\", topicName);\n+                    topicFuture.completeExceptionally(new RestException(Response.Status.PRECONDITION_FAILED,\n+                            \"Exceed maximum number of topics in namespace.\"));\n+                    return false;\n+                }\n+            }\n+        } catch (KeeperException.NoNodeException e) {\n+            // NoNode means there are no partitioned topics in this domain for this namespace\n+        } catch (Exception e) {\n+            log.error(\"Failed to create partitioned topic {}\", topicName, e);\n+                topicFuture.completeExceptionally(new RestException(e));\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n     public void setInterceptor(BrokerInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    public Set<BrokerEntryMetadataInterceptor> getBrokerEntryMetadataInterceptors() {\n+        return brokerEntryMetadataInterceptors;\n+    }\n+\n+    public boolean isBrokerEntryMetadataEnabled() {\n+        return !brokerEntryMetadataInterceptors.isEmpty();\n+    }\n+\n     public void pausedConnections(int numberOfConnections) {\n         pausedConnections.addAndGet(numberOfConnections);\n     }\n"}}, {"oid": "77acc92df631378849ca7d5b8aace67adb476035", "url": "https://github.com/apache/pulsar/commit/77acc92df631378849ca7d5b8aace67adb476035", "message": "Improved in max-pending-bytes mechanism for broker", "committedDate": "2021-04-30T22:03:51Z", "type": "commit"}, {"oid": "77acc92df631378849ca7d5b8aace67adb476035", "url": "https://github.com/apache/pulsar/commit/77acc92df631378849ca7d5b8aace67adb476035", "message": "Improved in max-pending-bytes mechanism for broker", "committedDate": "2021-04-30T22:03:51Z", "type": "forcePushed"}, {"oid": "fb620e2f45d4b16c32dc998a26e529f007ac0911", "url": "https://github.com/apache/pulsar/commit/fb620e2f45d4b16c32dc998a26e529f007ac0911", "message": "Fixed imports", "committedDate": "2021-04-30T22:36:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ0ODE5Mw==", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r624448193", "bodyText": "The reading frequency here should be very low, only used in unit tests or metrics, why not use longAdder", "author": "315157973", "createdAt": "2021-05-01T08:17:51Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -269,18 +267,13 @@\n     private Channel listenChannelTls;\n \n     private boolean preciseTopicPublishRateLimitingEnable;\n-    private final long maxMessagePublishBufferBytes;\n-    private final long resumeProducerReadMessagePublishBufferBytes;\n-    private volatile boolean reachMessagePublishBufferThreshold;\n+    private final AtomicInteger pausedConnections = new AtomicInteger();", "originalCommit": "fb620e2f45d4b16c32dc998a26e529f007ac0911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDU3NTkwMg==", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r624575902", "bodyText": "Good point, changed that.", "author": "merlimat", "createdAt": "2021-05-01T22:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ0ODE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "97dba5a60efadc8fdbdc0be3cfa971f23ab833af", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\nindex 30b3e81eafc..1b855f803a7 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java\n\n@@ -267,7 +266,7 @@ public class BrokerService implements Closeable, ZooKeeperCacheListener<Policies\n     private Channel listenChannelTls;\n \n     private boolean preciseTopicPublishRateLimitingEnable;\n-    private final AtomicInteger pausedConnections = new AtomicInteger();\n+    private final LongAdder pausedConnections = new LongAdder();\n     private BrokerInterceptor interceptor;\n \n     private Set<BrokerEntryMetadataInterceptor> brokerEntryMetadataInterceptors;\n"}}, {"oid": "97dba5a60efadc8fdbdc0be3cfa971f23ab833af", "url": "https://github.com/apache/pulsar/commit/97dba5a60efadc8fdbdc0be3cfa971f23ab833af", "message": "Switched to LongAdder", "committedDate": "2021-05-01T22:37:25Z", "type": "commit"}]}