{"pr_number": 7401, "pr_title": "Fix producer stuck issue due to NPE thrown when creating a new ledger", "pr_createdAt": "2020-06-30T16:50:57Z", "pr_url": "https://github.com/apache/pulsar/pull/7401", "timeline": [{"oid": "b2980689b22f7d4ec9a9c790dc8655d16db6a64b", "url": "https://github.com/apache/pulsar/commit/b2980689b22f7d4ec9a9c790dc8655d16db6a64b", "message": "Catch NPE and detect state doesn't move", "committedDate": "2020-06-30T16:38:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNjI5MQ==", "url": "https://github.com/apache/pulsar/pull/7401#discussion_r447836291", "bodyText": "Try-catch here is good in any case, though we should also ensure that BK client is handling DNS errors by triggering the callback instead of exception.", "author": "merlimat", "createdAt": "2020-06-30T16:55:04Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3170,15 +3174,28 @@ protected void asyncCreateLedger(BookKeeper bookKeeper, ManagedLedgerConfig conf\n         Map<String, byte[]> finalMetadata = new HashMap<>();\n         finalMetadata.putAll(ledgerMetadata);\n         finalMetadata.putAll(metadata);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"creating ledger, metadata: \"+finalMetadata);\n-        }\n-        bookKeeper.asyncCreateLedger(config.getEnsembleSize(), config.getWriteQuorumSize(), config.getAckQuorumSize(),\n+        log.info(\"[{}] Creating ledger, metadata: {} - metadata ops timeout : {} seconds\",\n+            name, finalMetadata, config.getMetadataOperationsTimeoutSeconds());\n+        try {\n+            bookKeeper.asyncCreateLedger(config.getEnsembleSize(), config.getWriteQuorumSize(), config.getAckQuorumSize(),\n                 digestType, config.getPassword(), cb, ledgerCreated, finalMetadata);\n+        } catch (Throwable cause) {", "originalCommit": "b2980689b22f7d4ec9a9c790dc8655d16db6a64b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MDAzNQ==", "url": "https://github.com/apache/pulsar/pull/7401#discussion_r447840035", "bodyText": "The fix was already made in the bookkeeper client. We don't release the bookkeeper client yet.", "author": "sijie", "createdAt": "2020-06-30T17:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNjI5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNjg0MQ==", "url": "https://github.com/apache/pulsar/pull/7401#discussion_r447836841", "bodyText": "Is this change intentional?\nShouldn't the callback only be triggered if (!ledgerCreated.get()) ?", "author": "merlimat", "createdAt": "2020-06-30T16:55:48Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3170,15 +3174,28 @@ protected void asyncCreateLedger(BookKeeper bookKeeper, ManagedLedgerConfig conf\n         Map<String, byte[]> finalMetadata = new HashMap<>();\n         finalMetadata.putAll(ledgerMetadata);\n         finalMetadata.putAll(metadata);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"creating ledger, metadata: \"+finalMetadata);\n-        }\n-        bookKeeper.asyncCreateLedger(config.getEnsembleSize(), config.getWriteQuorumSize(), config.getAckQuorumSize(),\n+        log.info(\"[{}] Creating ledger, metadata: {} - metadata ops timeout : {} seconds\",\n+            name, finalMetadata, config.getMetadataOperationsTimeoutSeconds());\n+        try {\n+            bookKeeper.asyncCreateLedger(config.getEnsembleSize(), config.getWriteQuorumSize(), config.getAckQuorumSize(),\n                 digestType, config.getPassword(), cb, ledgerCreated, finalMetadata);\n+        } catch (Throwable cause) {\n+            log.error(\"[{}] Encountered unexpected error when creating ledger\",\n+                name, cause);\n+            cb.createComplete(Code.UnexpectedConditionException, null, ledgerCreated);\n+            return;\n+        }\n         scheduledExecutor.schedule(() -> {\n             if (!ledgerCreated.get()) {\n-                cb.createComplete(BKException.Code.TimeoutException, null, ledgerCreated);\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"[{}] Timeout creating ledger\", name);\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"[{}] Ledger already created when timeout task is triggered\", name);\n+                }\n             }\n+            cb.createComplete(BKException.Code.TimeoutException, null, ledgerCreated);", "originalCommit": "b2980689b22f7d4ec9a9c790dc8655d16db6a64b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzOTg2MQ==", "url": "https://github.com/apache/pulsar/pull/7401#discussion_r447839861", "bodyText": "It is intentional - when the timeout task is triggered, always execute the callback. It is totally fine because we already have the logic to ensure the callback is triggered only once.\nThis change ensures all the logic is executed in a central place instead of spreading across multiple places and can potentially make code maintenance much harder.", "author": "sijie", "createdAt": "2020-06-30T17:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNjg0MQ=="}], "type": "inlineReview", "revised_code": null}]}