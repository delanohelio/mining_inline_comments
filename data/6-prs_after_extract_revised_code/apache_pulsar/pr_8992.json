{"pr_number": 8992, "pr_title": "PIP-68: WaitForExclusive producer access mode", "pr_createdAt": "2020-12-17T18:26:02Z", "pr_url": "https://github.com/apache/pulsar/pull/8992", "timeline": [{"oid": "b23e12278d436406e93cfc59c215b53b63586769", "url": "https://github.com/apache/pulsar/commit/b23e12278d436406e93cfc59c215b53b63586769", "message": "PIP-68: WaitForExclusive producer access mode", "committedDate": "2020-12-17T18:22:06Z", "type": "commit"}, {"oid": "b5259839ff07e053b41dcc190f25af645d8c7ac0", "url": "https://github.com/apache/pulsar/commit/b5259839ff07e053b41dcc190f25af645d8c7ac0", "message": "Fixed checkstyle issues", "committedDate": "2020-12-17T18:50:43Z", "type": "commit"}, {"oid": "a57c2534c105e8b750cc7fc2602f00647c26ad40", "url": "https://github.com/apache/pulsar/commit/a57c2534c105e8b750cc7fc2602f00647c26ad40", "message": "Fixed log level to info", "committedDate": "2020-12-18T19:15:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MDY2OA==", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546070668", "bodyText": "Typo  qeuue", "author": "eolivelli", "createdAt": "2020-12-18T20:18:13Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1192,6 +1193,17 @@ protected void handleProducer(final CommandProducer cmdProducer) {\n                                     }\n                                     return null;\n                                 });\n+\n+                                producerQueuedFuture.thenRun(() -> {\n+                                    // If the producer is queued waiting, we will get an immediate notification\n+                                    // that we need to pass to client\n+                                    if (isActive()) {\n+                                        log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);", "originalCommit": "a57c2534c105e8b750cc7fc2602f00647c26ad40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3Mzk3MQ==", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546073971", "bodyText": "Fixed", "author": "merlimat", "createdAt": "2020-12-18T20:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MDY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "dd614a912d055085e011cd83c9f7769b3d3a54ad", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\nindex 1f2cf18ad98..9b692443baf 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\n\n@@ -1198,7 +1198,7 @@ public class ServerCnx extends PulsarHandler implements TransportCnx {\n                                     // If the producer is queued waiting, we will get an immediate notification\n                                     // that we need to pass to client\n                                     if (isActive()) {\n-                                        log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);\n+                                        log.info(\"[{}] Producer is waiting in queue: {}\", remoteAddress, producer);\n                                         commandSender.sendProducerSuccessResponse(requestId, producerName,\n                                                 producer.getLastSequenceId(), producer.getSchemaVersion(),\n                                                 Optional.empty(), false/* producer is not ready now */);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MTk5Ng==", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546071996", "bodyText": "What happens if the PulsarClient gets closed or there is a network error?\nAre we guaranteed to fail and do not wait forever?", "author": "eolivelli", "createdAt": "2020-12-18T20:21:27Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java", "diffHunk": "@@ -468,6 +469,19 @@ protected void handleProducerSuccess(CommandProducerSuccess success) {\n                     success.getRequestId(), success.getProducerName());\n         }\n         long requestId = success.getRequestId();\n+        if (!success.getProducerReady()) {\n+            // We got a success operation but the producer is not ready. This means that the producer has been queued up\n+            // in broker. We need to leave the future pending until we get the final confirmation. We just mark that\n+            // we have received a response, in order to avoid the timeout.\n+            TimedCompletableFuture<?> requestFuture = (TimedCompletableFuture<?>) pendingRequests.get(requestId);\n+            if (requestFuture != null) {\n+                log.info(\"{} Producer {} has been queued up at broker. request: {}\", ctx.channel(),\n+                        success.getProducerName(), requestId);\n+                requestFuture.markAsResponded();", "originalCommit": "a57c2534c105e8b750cc7fc2602f00647c26ad40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MzMzNQ==", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546073335", "bodyText": "Yes, the marking of the future is only for timeout within a single connection. When a connection fails, everything that was in that connections is marked as failed and will trigger a retry.", "author": "merlimat", "createdAt": "2020-12-18T20:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjc2OQ==", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546212769", "bodyText": "Good", "author": "eolivelli", "createdAt": "2020-12-19T08:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MTk5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3Mzc4NA==", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546073784", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);\n          \n          \n            \n                                                    log.info(\"[{}] Producer is waiting in queue: {}\", remoteAddress, producer);", "author": "merlimat", "createdAt": "2020-12-18T20:25:23Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1192,6 +1193,17 @@ protected void handleProducer(final CommandProducer cmdProducer) {\n                                     }\n                                     return null;\n                                 });\n+\n+                                producerQueuedFuture.thenRun(() -> {\n+                                    // If the producer is queued waiting, we will get an immediate notification\n+                                    // that we need to pass to client\n+                                    if (isActive()) {\n+                                        log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);", "originalCommit": "a57c2534c105e8b750cc7fc2602f00647c26ad40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd614a912d055085e011cd83c9f7769b3d3a54ad", "chunk": "diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\nindex 1f2cf18ad98..9b692443baf 100644\n--- a/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\n+++ b/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java\n\n@@ -1198,7 +1198,7 @@ public class ServerCnx extends PulsarHandler implements TransportCnx {\n                                     // If the producer is queued waiting, we will get an immediate notification\n                                     // that we need to pass to client\n                                     if (isActive()) {\n-                                        log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);\n+                                        log.info(\"[{}] Producer is waiting in queue: {}\", remoteAddress, producer);\n                                         commandSender.sendProducerSuccessResponse(requestId, producerName,\n                                                 producer.getLastSequenceId(), producer.getSchemaVersion(),\n                                                 Optional.empty(), false/* producer is not ready now */);\n"}}, {"oid": "dd614a912d055085e011cd83c9f7769b3d3a54ad", "url": "https://github.com/apache/pulsar/commit/dd614a912d055085e011cd83c9f7769b3d3a54ad", "message": "Update pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "committedDate": "2020-12-18T20:25:31Z", "type": "commit"}, {"id": "PRRC_kwDOA7PXtM4qP4e9", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r708806589", "bodyText": "Hi @merlimat @sijie , this place makes me a little puzzled and I would like to ask why we need to change readlock to writelock?", "author": "wuzhanpeng", "createdAt": "2021-09-15T03:21:31Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -337,14 +342,15 @@ public String getReplicatorPrefix() {\n     }\n \n     @Override\n-    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer,\n+            CompletableFuture<Void> producerQueuedFuture) {\n         checkArgument(producer.getTopic() == this);\n \n         CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n \n-        incrementTopicEpochIfNeeded(producer)\n-                .thenAccept(epoch -> {\n-                    lock.readLock().lock();", "originalCommit": "dd614a912d055085e011cd83c9f7769b3d3a54ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}