{"pr_number": 8541, "pr_title": "[Transaction] Fix the Github CI Test", "pr_createdAt": "2020-11-12T07:46:46Z", "pr_url": "https://github.com/apache/pulsar/pull/8541", "timeline": [{"oid": "493fba9f21ee96aff85238f2eb4fe3cb55968eb4", "url": "https://github.com/apache/pulsar/commit/493fba9f21ee96aff85238f2eb4fe3cb55968eb4", "message": "Fix the Github CI Test", "committedDate": "2020-11-12T07:40:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxMzk1Nw==", "url": "https://github.com/apache/pulsar/pull/8541#discussion_r521913957", "bodyText": "this is not usually a good fix,\nyou should wait until a given condition is met, other wise the test will be only \"less flaky\"", "author": "eolivelli", "createdAt": "2020-11-12T08:19:04Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java", "diffHunk": "@@ -365,7 +365,7 @@ public void txnMessageAckTest() throws Exception {\n \n         message = consumer.receive(2, TimeUnit.SECONDS);\n         Assert.assertNull(message);\n-\n+        Thread.sleep(500);", "originalCommit": "493fba9f21ee96aff85238f2eb4fe3cb55968eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2MTg5OQ==", "url": "https://github.com/apache/pulsar/pull/8541#discussion_r522261899", "bodyText": "you are right and i find this problem, add the modify the test to fix this problem", "author": "congbobo184", "createdAt": "2020-11-12T16:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxMzk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "64f331baa73f23934245d4da75aff7284fea8576", "chunk": "diff --git a/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java b/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java\nindex 917e8cc9fdc..18386d2bd62 100644\n--- a/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java\n+++ b/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java\n\n@@ -371,6 +379,103 @@ public class TransactionEndToEndTest extends TransactionTestBase {\n         log.info(\"receive transaction messages count: {}\", receiveCnt);\n     }\n \n+    @Test\n+    public void txnAckTestBatchAndCumulativeSub() throws Exception {\n+        txnCumulativeAckTest(true, 200, SubscriptionType.Failover);\n+    }\n+\n+    @Test\n+    public void txnAckTestNoBatchAndCumulativeSub() throws Exception {\n+        txnCumulativeAckTest(false, 1, SubscriptionType.Failover);\n+    }\n+\n+    public void txnCumulativeAckTest(boolean batchEnable, int maxBatchSize, SubscriptionType subscriptionType)\n+            throws Exception {\n+        String normalTopic = NAMESPACE1 + \"/normal-topic\";\n+\n+        @Cleanup\n+        ConsumerImpl<byte[]> consumer = (ConsumerImpl<byte[]>) pulsarClient.newConsumer()\n+                .topic(normalTopic)\n+                .subscriptionName(\"test\")\n+                .enableBatchIndexAcknowledgment(true)\n+                .subscriptionType(subscriptionType)\n+                .ackTimeout(1, TimeUnit.MINUTES)\n+                .subscribe();\n+\n+        @Cleanup\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(normalTopic)\n+                .enableBatching(batchEnable)\n+                .batchingMaxMessages(maxBatchSize)\n+                .batchingMaxPublishDelay(1, TimeUnit.SECONDS)\n+                .create();\n+\n+        for (int retryCnt = 0; retryCnt < 2; retryCnt++) {\n+            Transaction abortTxn = getTxn();\n+            int messageCnt = 1000;\n+            // produce normal messages\n+            for (int i = 0; i < messageCnt; i++){\n+                producer.newMessage().value(\"hello\".getBytes()).sendAsync();\n+            }\n+            Message<byte[]> message = null;\n+            Thread.sleep(1000L);\n+            for (int i = 0; i < messageCnt; i++) {\n+                message = consumer.receive(1, TimeUnit.SECONDS);\n+                Assert.assertNotNull(message);\n+                if (i % 3 == 0) {\n+                    consumer.acknowledgeCumulativeAsync(message.getMessageId(), abortTxn).get();\n+                }\n+                log.info(\"receive msgId abort: {}, retryCount : {}, count : {}\", message.getMessageId(), retryCnt, i);\n+            }\n+            try {\n+                consumer.acknowledgeCumulativeAsync(message.getMessageId(), abortTxn).get();\n+                fail(\"not ack conflict \");\n+            } catch (Exception e) {\n+                Assert.assertTrue(e.getCause() instanceof PulsarClientException.TransactionConflictException);\n+            }\n+\n+            try {\n+                consumer.acknowledgeCumulativeAsync(DefaultImplementation\n+                        .newMessageId(((MessageIdImpl) message.getMessageId()).getLedgerId(),\n+                                ((MessageIdImpl) message.getMessageId()).getEntryId() - 1, -1),\n+                        abortTxn).get();\n+                fail(\"not ack conflict \");\n+            } catch (Exception e) {\n+                Assert.assertTrue(e.getCause() instanceof PulsarClientException.TransactionConflictException);\n+            }\n+\n+            // the messages are pending ack state and can't be received\n+            message = consumer.receive(2, TimeUnit.SECONDS);\n+            Assert.assertNull(message);\n+\n+            abortTxn.abort().get();\n+            Transaction commitTxn = getTxn();\n+            for (int i = 0; i < messageCnt; i++) {\n+                message = consumer.receive(1, TimeUnit.SECONDS);\n+                Assert.assertNotNull(message);\n+                if (i % 3 == 0) {\n+                    consumer.acknowledgeCumulativeAsync(message.getMessageId(), commitTxn).get();\n+                }\n+                log.info(\"receive msgId abort: {}, retryCount : {}, count : {}\", message.getMessageId(), retryCnt, i);\n+            }\n+\n+            commitTxn.commit().get();\n+            try {\n+                commitTxn.commit().get();\n+                fail(\"recommit one transaction should be failed.\");\n+            } catch (Exception reCommitError) {\n+                // recommit one transaction should be failed\n+                log.info(\"expected exception for recommit one transaction.\");\n+                Assert.assertNotNull(reCommitError);\n+                Assert.assertTrue(reCommitError.getCause() instanceof\n+                        TransactionCoordinatorClientException.InvalidTxnStatusException);\n+            }\n+\n+            message = consumer.receive(1, TimeUnit.SECONDS);\n+            Assert.assertNull(message);\n+        }\n+    }\n+\n     private Transaction getTxn() throws Exception {\n         return ((PulsarClientImpl) pulsarClient)\n                 .newTransaction()\n"}}, {"oid": "64f331baa73f23934245d4da75aff7284fea8576", "url": "https://github.com/apache/pulsar/commit/64f331baa73f23934245d4da75aff7284fea8576", "message": "Merge remote-tracking branch 'apache/master' into congbobo184_transaction_txnmessageacktest_modify", "committedDate": "2020-11-12T09:24:00Z", "type": "commit"}, {"oid": "06a60cb3e9e7f2156b22bbe289210f8fa0efd63d", "url": "https://github.com/apache/pulsar/commit/06a60cb3e9e7f2156b22bbe289210f8fa0efd63d", "message": "Fix the test and add the optional when commit marker don't delete", "committedDate": "2020-11-12T16:54:41Z", "type": "commit"}, {"oid": "341391d8663d69b483753507b472297616aa812b", "url": "https://github.com/apache/pulsar/commit/341391d8663d69b483753507b472297616aa812b", "message": "Merge remote-tracking branch 'apache/master' into congbobo184_transaction_txnmessageacktest_modify\n\n# Conflicts:\n#\tpulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java", "committedDate": "2020-11-13T03:13:18Z", "type": "commit"}, {"oid": "404ee53bedd23f3f58a5ac32302bd330390b20c6", "url": "https://github.com/apache/pulsar/commit/404ee53bedd23f3f58a5ac32302bd330390b20c6", "message": "Merge remote-tracking branch 'apache/master' into congbobo184_transaction_txnmessageacktest_modify\n\n# Conflicts:\n#\tpulsar-broker/src/test/java/org/apache/pulsar/client/impl/TransactionEndToEndTest.java", "committedDate": "2020-11-16T02:50:25Z", "type": "commit"}]}