{"pr_number": 6862, "pr_title": "fix consumer stuck when batchReceivePolicy maxNumMessages > maxReceiverQueueSize", "pr_createdAt": "2020-05-02T15:34:23Z", "pr_url": "https://github.com/apache/pulsar/pull/6862", "timeline": [{"oid": "bb43fc6f3300e7844b900954bfcee52a0b1523ab", "url": "https://github.com/apache/pulsar/commit/bb43fc6f3300e7844b900954bfcee52a0b1523ab", "message": "fix consumer stuck when batchReceivePolicy maxNumMessages > maxReceiverQueueSize", "committedDate": "2020-05-02T15:23:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3NA==", "url": "https://github.com/apache/pulsar/pull/6862#discussion_r419065174", "bodyText": "We also need to add a check for DEFAULT_POLICY since users may specify the queue size that lower that maxNumMessages of the DEFAULT_POLICY.", "author": "codelipenghui", "createdAt": "2020-05-03T07:59:32Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java", "diffHunk": "@@ -95,7 +95,16 @@ protected ConsumerBase(PulsarClientImpl client, String topic, ConsumerConfigurat\n         this.schema = schema;\n         this.interceptors = interceptors;\n         if (conf.getBatchReceivePolicy() != null) {\n-            this.batchReceivePolicy = conf.getBatchReceivePolicy();\n+            if (conf.getBatchReceivePolicy().getMaxNumMessages() > this.maxReceiverQueueSize) {\n+                BatchReceivePolicy batchReceivePolicy = conf.getBatchReceivePolicy();\n+                this.batchReceivePolicy = BatchReceivePolicy.builder()\n+                        .maxNumMessages(this.maxReceiverQueueSize)\n+                        .maxNumBytes(batchReceivePolicy.getMaxNumBytes())\n+                        .timeout((int)batchReceivePolicy.getTimeoutMs()/1000, TimeUnit.SECONDS)\n+                        .build();\n+            } else {\n+                this.batchReceivePolicy = conf.getBatchReceivePolicy();\n+            }\n         } else {\n             this.batchReceivePolicy = BatchReceivePolicy.DEFAULT_POLICY;", "originalCommit": "bb43fc6f3300e7844b900954bfcee52a0b1523ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwMjkxNw==", "url": "https://github.com/apache/pulsar/pull/6862#discussion_r419102917", "bodyText": "The above solution is correct but users can get confused seeing their batchRecieve policy configuration has changed\nWhy not changing the function hasEnoughMessagesForBatchReceive to return true when\nincomingMessages.size() >= maxReceiverQueueSize ?\nprotected boolean hasEnoughMessagesForBatchReceive() {\nif (batchReceivePolicy.getMaxNumMessages() <= 0 && batchReceivePolicy.getMaxNumBytes() <= 0) {\nreturn false;\n}\nreturn (batchReceivePolicy.getMaxNumMessages() > 0 && incomingMessages.size() >= batchReceivePolicy.getMaxNumMessages())\n|| (batchReceivePolicy.getMaxNumBytes() > 0 && INCOMING_MESSAGES_SIZE_UPDATER.get(this) >= batchReceivePolicy.getMaxNumBytes()) || (incomingMessages.size() >= maxReceiverQueueSize);\n}\nWhat do you think ?", "author": "avimas", "createdAt": "2020-05-03T13:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwNDQ3OA==", "url": "https://github.com/apache/pulsar/pull/6862#discussion_r419104478", "bodyText": "This will cause batch message return to the user earlier right? This will introduce another problem, users will get the batch message before reaching maxNumMessage. It's better to tell users the receiver queue size needs to greater than the maxNumMessage of the batch receive policy.", "author": "codelipenghui", "createdAt": "2020-05-03T13:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwNTEyNA==", "url": "https://github.com/apache/pulsar/pull/6862#discussion_r419105124", "bodyText": "I completely agree that throwing an exception is a better choice", "author": "avimas", "createdAt": "2020-05-03T13:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f9a220c033d1d9d839ff68347a2bee5497027697", "chunk": "diff --git a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java\nindex dd61f1eee18..b489081b3cf 100644\n--- a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java\n+++ b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java\n\n@@ -95,19 +97,33 @@ public abstract class ConsumerBase<T> extends HandlerState implements Consumer<T\n         this.schema = schema;\n         this.interceptors = interceptors;\n         if (conf.getBatchReceivePolicy() != null) {\n-            if (conf.getBatchReceivePolicy().getMaxNumMessages() > this.maxReceiverQueueSize) {\n-                BatchReceivePolicy batchReceivePolicy = conf.getBatchReceivePolicy();\n+            BatchReceivePolicy userBatchReceivePolicy = conf.getBatchReceivePolicy();\n+            if (userBatchReceivePolicy.getMaxNumMessages() > this.maxReceiverQueueSize) {\n                 this.batchReceivePolicy = BatchReceivePolicy.builder()\n                         .maxNumMessages(this.maxReceiverQueueSize)\n-                        .maxNumBytes(batchReceivePolicy.getMaxNumBytes())\n-                        .timeout((int)batchReceivePolicy.getTimeoutMs()/1000, TimeUnit.SECONDS)\n+                        .maxNumBytes(userBatchReceivePolicy.getMaxNumBytes())\n+                        .timeout((int) userBatchReceivePolicy.getTimeoutMs(), TimeUnit.MILLISECONDS)\n                         .build();\n+                log.warn(\"BatchReceivePolicy maxNumMessages: {} is greater than maxReceiverQueueSize: {}, \" +\n+                        \"reset to maxReceiverQueueSize. batchReceivePolicy: {}\",\n+                        userBatchReceivePolicy.getMaxNumMessages(), this.maxReceiverQueueSize,\n+                        this.batchReceivePolicy.toString());\n+            } else if (userBatchReceivePolicy.getMaxNumMessages() <= 0 && userBatchReceivePolicy.getMaxNumBytes() <= 0) {\n+                this.batchReceivePolicy = BatchReceivePolicy.builder()\n+                        .maxNumMessages(BatchReceivePolicy.DEFAULT_POLICY.getMaxNumMessages())\n+                        .maxNumBytes(BatchReceivePolicy.DEFAULT_POLICY.getMaxNumBytes())\n+                        .timeout((int) userBatchReceivePolicy.getTimeoutMs(), TimeUnit.MILLISECONDS)\n+                        .build();\n+                log.warn(\"BatchReceivePolicy maxNumMessages: {} or maxNumBytes: {} is less than 0. \" +\n+                        \"Reset to DEFAULT_POLICY. batchReceivePolicy: {}\", userBatchReceivePolicy.getMaxNumMessages(),\n+                        userBatchReceivePolicy.getMaxNumBytes(), this.batchReceivePolicy.toString());\n             } else {\n                 this.batchReceivePolicy = conf.getBatchReceivePolicy();\n             }\n         } else {\n             this.batchReceivePolicy = BatchReceivePolicy.DEFAULT_POLICY;\n         }\n+\n         if (batchReceivePolicy.getTimeoutMs() > 0) {\n             batchReceiveTimeout = client.timer().newTimeout(this::pendingBatchReceiveTask, batchReceivePolicy.getTimeoutMs(), TimeUnit.MILLISECONDS);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0NjQ2MQ==", "url": "https://github.com/apache/pulsar/pull/6862#discussion_r419146461", "bodyText": "can we also add unit tests with the desired behaviour ?", "author": "psilos", "createdAt": "2020-05-03T19:13:38Z", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java", "diffHunk": "@@ -95,7 +95,16 @@ protected ConsumerBase(PulsarClientImpl client, String topic, ConsumerConfigurat\n         this.schema = schema;\n         this.interceptors = interceptors;\n         if (conf.getBatchReceivePolicy() != null) {\n-            this.batchReceivePolicy = conf.getBatchReceivePolicy();\n+            if (conf.getBatchReceivePolicy().getMaxNumMessages() > this.maxReceiverQueueSize) {", "originalCommit": "bb43fc6f3300e7844b900954bfcee52a0b1523ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0NDg2OQ==", "url": "https://github.com/apache/pulsar/pull/6862#discussion_r421544869", "bodyText": "Thanks for your feedback, I have add the unit tests for all kinds of exception case, please take a look.", "author": "hangc0276", "createdAt": "2020-05-07T14:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0NjQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f9a220c033d1d9d839ff68347a2bee5497027697", "chunk": "diff --git a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java\nindex dd61f1eee18..b489081b3cf 100644\n--- a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java\n+++ b/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java\n\n@@ -95,19 +97,33 @@ public abstract class ConsumerBase<T> extends HandlerState implements Consumer<T\n         this.schema = schema;\n         this.interceptors = interceptors;\n         if (conf.getBatchReceivePolicy() != null) {\n-            if (conf.getBatchReceivePolicy().getMaxNumMessages() > this.maxReceiverQueueSize) {\n-                BatchReceivePolicy batchReceivePolicy = conf.getBatchReceivePolicy();\n+            BatchReceivePolicy userBatchReceivePolicy = conf.getBatchReceivePolicy();\n+            if (userBatchReceivePolicy.getMaxNumMessages() > this.maxReceiverQueueSize) {\n                 this.batchReceivePolicy = BatchReceivePolicy.builder()\n                         .maxNumMessages(this.maxReceiverQueueSize)\n-                        .maxNumBytes(batchReceivePolicy.getMaxNumBytes())\n-                        .timeout((int)batchReceivePolicy.getTimeoutMs()/1000, TimeUnit.SECONDS)\n+                        .maxNumBytes(userBatchReceivePolicy.getMaxNumBytes())\n+                        .timeout((int) userBatchReceivePolicy.getTimeoutMs(), TimeUnit.MILLISECONDS)\n                         .build();\n+                log.warn(\"BatchReceivePolicy maxNumMessages: {} is greater than maxReceiverQueueSize: {}, \" +\n+                        \"reset to maxReceiverQueueSize. batchReceivePolicy: {}\",\n+                        userBatchReceivePolicy.getMaxNumMessages(), this.maxReceiverQueueSize,\n+                        this.batchReceivePolicy.toString());\n+            } else if (userBatchReceivePolicy.getMaxNumMessages() <= 0 && userBatchReceivePolicy.getMaxNumBytes() <= 0) {\n+                this.batchReceivePolicy = BatchReceivePolicy.builder()\n+                        .maxNumMessages(BatchReceivePolicy.DEFAULT_POLICY.getMaxNumMessages())\n+                        .maxNumBytes(BatchReceivePolicy.DEFAULT_POLICY.getMaxNumBytes())\n+                        .timeout((int) userBatchReceivePolicy.getTimeoutMs(), TimeUnit.MILLISECONDS)\n+                        .build();\n+                log.warn(\"BatchReceivePolicy maxNumMessages: {} or maxNumBytes: {} is less than 0. \" +\n+                        \"Reset to DEFAULT_POLICY. batchReceivePolicy: {}\", userBatchReceivePolicy.getMaxNumMessages(),\n+                        userBatchReceivePolicy.getMaxNumBytes(), this.batchReceivePolicy.toString());\n             } else {\n                 this.batchReceivePolicy = conf.getBatchReceivePolicy();\n             }\n         } else {\n             this.batchReceivePolicy = BatchReceivePolicy.DEFAULT_POLICY;\n         }\n+\n         if (batchReceivePolicy.getTimeoutMs() > 0) {\n             batchReceiveTimeout = client.timer().newTimeout(this::pendingBatchReceiveTask, batchReceivePolicy.getTimeoutMs(), TimeUnit.MILLISECONDS);\n         }\n"}}, {"oid": "f9a220c033d1d9d839ff68347a2bee5497027697", "url": "https://github.com/apache/pulsar/commit/f9a220c033d1d9d839ff68347a2bee5497027697", "message": "throw log warn and add test case", "committedDate": "2020-05-07T14:20:24Z", "type": "commit"}]}