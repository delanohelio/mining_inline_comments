{"pr_number": 7403, "pr_title": "Avoid NPEs at ledger creation when DNS failures happen", "pr_createdAt": "2020-06-30T18:22:46Z", "pr_url": "https://github.com/apache/pulsar/pull/7403", "timeline": [{"oid": "a612eba06eca398e4bf499e15e41dd1b90a6bc04", "url": "https://github.com/apache/pulsar/commit/a612eba06eca398e4bf499e15e41dd1b90a6bc04", "message": "Avoid NPEs at ledger creation when DNS failures happen", "committedDate": "2020-06-30T18:20:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDI3Mg==", "url": "https://github.com/apache/pulsar/pull/7403#discussion_r447994272", "bodyText": "actually I don't think we need this change here. The exception is already handled in ledger.asyncCreateLedger", "author": "sijie", "createdAt": "2020-06-30T21:38:15Z", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java", "diffHunk": "@@ -2283,73 +2283,78 @@ void internalFlushPendingMarkDeletes() {\n \n     void createNewMetadataLedger(final VoidCallback callback) {\n         ledger.mbean.startCursorLedgerCreateOp();\n-        ledger.asyncCreateLedger(bookkeeper, config, digestType, (rc, lh, ctx) -> {\n \n-            if (ledger.checkAndCompleteLedgerOpTask(rc, lh, ctx)) {\n-                return;\n-            }\n+        try {\n+            ledger.asyncCreateLedger(bookkeeper, config, digestType, (rc, lh, ctx) -> {\n \n-            ledger.getExecutor().execute(safeRun(() -> {\n-                ledger.mbean.endCursorLedgerCreateOp();\n-                if (rc != BKException.Code.OK) {\n-                    log.warn(\"[{}] Error creating ledger for cursor {}: {}\", ledger.getName(), name,\n-                            BKException.getMessage(rc));\n-                    callback.operationFailed(new ManagedLedgerException(BKException.getMessage(rc)));\n+                if (ledger.checkAndCompleteLedgerOpTask(rc, lh, ctx)) {\n                     return;\n                 }\n \n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"[{}] Created ledger {} for cursor {}\", ledger.getName(), lh.getId(), name);\n-                }\n-                // Created the ledger, now write the last position\n-                // content\n-                MarkDeleteEntry mdEntry = lastMarkDeleteEntry;\n-                persistPositionToLedger(lh, mdEntry, new VoidCallback() {\n-                    @Override\n-                    public void operationComplete() {\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(\"[{}] Persisted position {} for cursor {}\", ledger.getName(),\n-                                    mdEntry.newPosition, name);\n-                        }\n-                        switchToNewLedger(lh, new VoidCallback() {\n-                            @Override\n-                            public void operationComplete() {\n-                                callback.operationComplete();\n-                            }\n-\n-                            @Override\n-                            public void operationFailed(ManagedLedgerException exception) {\n-                                // it means it failed to switch the newly created ledger so, it should be\n-                                // deleted to prevent leak\n-                                bookkeeper.asyncDeleteLedger(lh.getId(), (int rc, Object ctx) -> {\n-                                    if (rc != BKException.Code.OK) {\n-                                        log.warn(\"[{}] Failed to delete orphan ledger {}\", ledger.getName(),\n-                                                lh.getId());\n-                                    }\n-                                }, null);\n-                                callback.operationFailed(exception);\n-                            }\n-                        });\n+                ledger.getExecutor().execute(safeRun(() -> {\n+                    ledger.mbean.endCursorLedgerCreateOp();\n+                    if (rc != BKException.Code.OK) {\n+                        log.warn(\"[{}] Error creating ledger for cursor {}: {}\", ledger.getName(), name,\n+                                BKException.getMessage(rc));\n+                        callback.operationFailed(new ManagedLedgerException(BKException.getMessage(rc)));\n+                        return;\n                     }\n \n-                    @Override\n-                    public void operationFailed(ManagedLedgerException exception) {\n-                        log.warn(\"[{}] Failed to persist position {} for cursor {}\", ledger.getName(),\n-                                mdEntry.newPosition, name);\n-\n-                        ledger.mbean.startCursorLedgerDeleteOp();\n-                        bookkeeper.asyncDeleteLedger(lh.getId(), new DeleteCallback() {\n-                            @Override\n-                            public void deleteComplete(int rc, Object ctx) {\n-                                ledger.mbean.endCursorLedgerDeleteOp();\n-                            }\n-                        }, null);\n-                        callback.operationFailed(exception);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"[{}] Created ledger {} for cursor {}\", ledger.getName(), lh.getId(), name);\n                     }\n-                });\n-            }));\n-        }, LedgerMetadataUtils.buildAdditionalMetadataForCursor(name));\n+                    // Created the ledger, now write the last position\n+                    // content\n+                    MarkDeleteEntry mdEntry = lastMarkDeleteEntry;\n+                    persistPositionToLedger(lh, mdEntry, new VoidCallback() {\n+                        @Override\n+                        public void operationComplete() {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"[{}] Persisted position {} for cursor {}\", ledger.getName(),\n+                                        mdEntry.newPosition, name);\n+                            }\n+                            switchToNewLedger(lh, new VoidCallback() {\n+                                @Override\n+                                public void operationComplete() {\n+                                    callback.operationComplete();\n+                                }\n+\n+                                @Override\n+                                public void operationFailed(ManagedLedgerException exception) {\n+                                    // it means it failed to switch the newly created ledger so, it should be\n+                                    // deleted to prevent leak\n+                                    bookkeeper.asyncDeleteLedger(lh.getId(), (int rc, Object ctx) -> {\n+                                        if (rc != BKException.Code.OK) {\n+                                            log.warn(\"[{}] Failed to delete orphan ledger {}\", ledger.getName(),\n+                                                    lh.getId());\n+                                        }\n+                                    }, null);\n+                                    callback.operationFailed(exception);\n+                                }\n+                            });\n+                        }\n+\n+                        @Override\n+                        public void operationFailed(ManagedLedgerException exception) {\n+                            log.warn(\"[{}] Failed to persist position {} for cursor {}\", ledger.getName(),\n+                                    mdEntry.newPosition, name);\n \n+                            ledger.mbean.startCursorLedgerDeleteOp();\n+                            bookkeeper.asyncDeleteLedger(lh.getId(), new DeleteCallback() {\n+                                @Override\n+                                public void deleteComplete(int rc, Object ctx) {\n+                                    ledger.mbean.endCursorLedgerDeleteOp();\n+                                }\n+                            }, null);\n+                            callback.operationFailed(exception);\n+                        }\n+                    });\n+                }));\n+            }, LedgerMetadataUtils.buildAdditionalMetadataForCursor(name));\n+        } catch (Throwable t) {\n+            log.error(\"[{}] Encountered unexpected error when creating cursor ledger\", name, t);\n+            callback.operationFailed(new ManagedLedgerException(t));", "originalCommit": "a612eba06eca398e4bf499e15e41dd1b90a6bc04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwNTU3MA==", "url": "https://github.com/apache/pulsar/pull/7403#discussion_r448005570", "bodyText": "Correct. let me pull that back", "author": "merlimat", "createdAt": "2020-06-30T22:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7354877df506631ec63e9a8c05eb05ad2a5abd12", "chunk": "diff --git a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java\nindex ab815d4658c..3e0d5839b1a 100644\n--- a/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java\n+++ b/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java\n\n@@ -2284,77 +2284,72 @@ public class ManagedCursorImpl implements ManagedCursor {\n     void createNewMetadataLedger(final VoidCallback callback) {\n         ledger.mbean.startCursorLedgerCreateOp();\n \n-        try {\n-            ledger.asyncCreateLedger(bookkeeper, config, digestType, (rc, lh, ctx) -> {\n+        ledger.asyncCreateLedger(bookkeeper, config, digestType, (rc, lh, ctx) -> {\n \n-                if (ledger.checkAndCompleteLedgerOpTask(rc, lh, ctx)) {\n+            if (ledger.checkAndCompleteLedgerOpTask(rc, lh, ctx)) {\n+                return;\n+            }\n+\n+            ledger.getExecutor().execute(safeRun(() -> {\n+                ledger.mbean.endCursorLedgerCreateOp();\n+                if (rc != BKException.Code.OK) {\n+                    log.warn(\"[{}] Error creating ledger for cursor {}: {}\", ledger.getName(), name,\n+                            BKException.getMessage(rc));\n+                    callback.operationFailed(new ManagedLedgerException(BKException.getMessage(rc)));\n                     return;\n                 }\n \n-                ledger.getExecutor().execute(safeRun(() -> {\n-                    ledger.mbean.endCursorLedgerCreateOp();\n-                    if (rc != BKException.Code.OK) {\n-                        log.warn(\"[{}] Error creating ledger for cursor {}: {}\", ledger.getName(), name,\n-                                BKException.getMessage(rc));\n-                        callback.operationFailed(new ManagedLedgerException(BKException.getMessage(rc)));\n-                        return;\n-                    }\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"[{}] Created ledger {} for cursor {}\", ledger.getName(), lh.getId(), name);\n-                    }\n-                    // Created the ledger, now write the last position\n-                    // content\n-                    MarkDeleteEntry mdEntry = lastMarkDeleteEntry;\n-                    persistPositionToLedger(lh, mdEntry, new VoidCallback() {\n-                        @Override\n-                        public void operationComplete() {\n-                            if (log.isDebugEnabled()) {\n-                                log.debug(\"[{}] Persisted position {} for cursor {}\", ledger.getName(),\n-                                        mdEntry.newPosition, name);\n-                            }\n-                            switchToNewLedger(lh, new VoidCallback() {\n-                                @Override\n-                                public void operationComplete() {\n-                                    callback.operationComplete();\n-                                }\n-\n-                                @Override\n-                                public void operationFailed(ManagedLedgerException exception) {\n-                                    // it means it failed to switch the newly created ledger so, it should be\n-                                    // deleted to prevent leak\n-                                    bookkeeper.asyncDeleteLedger(lh.getId(), (int rc, Object ctx) -> {\n-                                        if (rc != BKException.Code.OK) {\n-                                            log.warn(\"[{}] Failed to delete orphan ledger {}\", ledger.getName(),\n-                                                    lh.getId());\n-                                        }\n-                                    }, null);\n-                                    callback.operationFailed(exception);\n-                                }\n-                            });\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"[{}] Created ledger {} for cursor {}\", ledger.getName(), lh.getId(), name);\n+                }\n+                // Created the ledger, now write the last position\n+                // content\n+                MarkDeleteEntry mdEntry = lastMarkDeleteEntry;\n+                persistPositionToLedger(lh, mdEntry, new VoidCallback() {\n+                    @Override\n+                    public void operationComplete() {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] Persisted position {} for cursor {}\", ledger.getName(),\n+                                    mdEntry.newPosition, name);\n                         }\n+                        switchToNewLedger(lh, new VoidCallback() {\n+                            @Override\n+                            public void operationComplete() {\n+                                callback.operationComplete();\n+                            }\n \n-                        @Override\n-                        public void operationFailed(ManagedLedgerException exception) {\n-                            log.warn(\"[{}] Failed to persist position {} for cursor {}\", ledger.getName(),\n-                                    mdEntry.newPosition, name);\n+                            @Override\n+                            public void operationFailed(ManagedLedgerException exception) {\n+                                // it means it failed to switch the newly created ledger so, it should be\n+                                // deleted to prevent leak\n+                                bookkeeper.asyncDeleteLedger(lh.getId(), (int rc, Object ctx) -> {\n+                                    if (rc != BKException.Code.OK) {\n+                                        log.warn(\"[{}] Failed to delete orphan ledger {}\", ledger.getName(),\n+                                                lh.getId());\n+                                    }\n+                                }, null);\n+                                callback.operationFailed(exception);\n+                            }\n+                        });\n+                    }\n \n-                            ledger.mbean.startCursorLedgerDeleteOp();\n-                            bookkeeper.asyncDeleteLedger(lh.getId(), new DeleteCallback() {\n-                                @Override\n-                                public void deleteComplete(int rc, Object ctx) {\n-                                    ledger.mbean.endCursorLedgerDeleteOp();\n-                                }\n-                            }, null);\n-                            callback.operationFailed(exception);\n-                        }\n-                    });\n-                }));\n-            }, LedgerMetadataUtils.buildAdditionalMetadataForCursor(name));\n-        } catch (Throwable t) {\n-            log.error(\"[{}] Encountered unexpected error when creating cursor ledger\", name, t);\n-            callback.operationFailed(new ManagedLedgerException(t));\n-        }\n+                    @Override\n+                    public void operationFailed(ManagedLedgerException exception) {\n+                        log.warn(\"[{}] Failed to persist position {} for cursor {}\", ledger.getName(),\n+                                mdEntry.newPosition, name);\n+\n+                        ledger.mbean.startCursorLedgerDeleteOp();\n+                        bookkeeper.asyncDeleteLedger(lh.getId(), new DeleteCallback() {\n+                            @Override\n+                            public void deleteComplete(int rc, Object ctx) {\n+                                ledger.mbean.endCursorLedgerDeleteOp();\n+                            }\n+                        }, null);\n+                        callback.operationFailed(exception);\n+                    }\n+                });\n+            }));\n+        }, LedgerMetadataUtils.buildAdditionalMetadataForCursor(name));\n     }\n \n     private List<LongProperty> buildPropertiesMap(Map<String, Long> properties) {\n"}}, {"oid": "7354877df506631ec63e9a8c05eb05ad2a5abd12", "url": "https://github.com/apache/pulsar/commit/7354877df506631ec63e9a8c05eb05ad2a5abd12", "message": "Removed unnecessary try/catch", "committedDate": "2020-06-30T22:31:24Z", "type": "commit"}]}