{"pr_number": 2420, "pr_title": "[Runtime] add `ApolloClient.autoPersistedOperationsInterceptorFactory`", "pr_createdAt": "2020-07-03T15:03:54Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2420", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMzk5NA==", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r449713994", "bodyText": "So it seems like this choose to preserve the old behavior of not allowing persisted mutations if you don't use a custom interceptor? Fine with me since we plan to use  a custom one :) but is there plan to follow-up to investigate enabling this for everyone?", "author": "BenSchwab", "createdAt": "2020-07-03T22:31:58Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java", "diffHunk": "@@ -383,14 +386,24 @@ private ApolloInterceptorChain prepareInterceptorChain(Operation operation) {\n     List<ApolloInterceptor> interceptors = new ArrayList<>();\n \n     for (ApolloInterceptorFactory factory : applicationInterceptorFactories) {\n-      interceptors.add(factory.newInterceptor());\n+      ApolloInterceptor interceptor = factory.newInterceptor(logger, operation);\n+      if (interceptor != null) {\n+        interceptors.add(interceptor);\n+      }\n     }\n     interceptors.addAll(applicationInterceptors);\n \n     interceptors.add(responseFetcher.provideInterceptor(logger));\n     interceptors.add(new ApolloCacheInterceptor(apolloStore, responseFieldMapper, dispatcher, logger));\n-    if (operation instanceof Query && enableAutoPersistedQueries) {\n-      interceptors.add(new ApolloAutoPersistedQueryInterceptor(logger, useHttpGetMethodForPersistedQueries));\n+    if (autoPersistedOperationsInterceptorFactory != null) {\n+      ApolloInterceptor interceptor = autoPersistedOperationsInterceptorFactory.newInterceptor(logger, operation);\n+      if (interceptor != null) {\n+        interceptors.add(interceptor);\n+      }\n+    } else {\n+      if (operation instanceof Query && enableAutoPersistedQueries) {", "originalCommit": "e63ede45e32419310f183d12654488f7d66ba0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTEyMA==", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r450099120", "bodyText": "The plan would be to encourage using the custom interceptor approach for more advanced use cases. Maybe even deprecate enableAutoPersistedQueries and useHttpGetMethodForPersistedQueries. There's a lot of boilerplate involved right now in passing these variables over from the ApolloClientBuilder to ApolloClient to RealApolloCall (and even QueryRefetcher) and I didn't really fell like adding a new enableAutoPersistedMutations boolean. It feels like most of this state can be local to the interceptor. Also, ApolloAutoPersistedOperationInterceptor is public so that users won't have to reimplement a full interceptor but can do something like:\nbuilder.setAutoPersistedOperationsInterceptorFactory(ApolloAutoPersistedOperationInterceptor.Factory())", "author": "martinbonnin", "createdAt": "2020-07-06T09:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMzk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "5c0e77bc5d5cd6acbc4a328db60396410c5cfc55", "chunk": "diff --git a/apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java b/apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java\nindex b455d38e3..b574c1b29 100644\n--- a/apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java\n+++ b/apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java\n\n@@ -386,24 +385,20 @@ public final class RealApolloCall<T> implements ApolloQueryCall<T>, ApolloMutati\n     List<ApolloInterceptor> interceptors = new ArrayList<>();\n \n     for (ApolloInterceptorFactory factory : applicationInterceptorFactories) {\n-      ApolloInterceptor interceptor = factory.newInterceptor(logger, operation);\n-      if (interceptor != null) {\n-        interceptors.add(interceptor);\n-      }\n+      interceptors.add(factory.newInterceptor());\n     }\n     interceptors.addAll(applicationInterceptors);\n \n     interceptors.add(responseFetcher.provideInterceptor(logger));\n-    interceptors.add(new ApolloCacheInterceptor(apolloStore, responseFieldMapper, dispatcher, logger));\n-    if (autoPersistedOperationsInterceptorFactory != null) {\n-      ApolloInterceptor interceptor = autoPersistedOperationsInterceptorFactory.newInterceptor(logger, operation);\n-      if (interceptor != null) {\n-        interceptors.add(interceptor);\n-      }\n-    } else {\n-      if (operation instanceof Query && enableAutoPersistedQueries) {\n-        interceptors.add(new ApolloAutoPersistedOperationInterceptor(logger, useHttpGetMethodForPersistedQueries));\n-      }\n+    interceptors.add(new ApolloCacheInterceptor(\n+        apolloStore,\n+        responseFieldMapper,\n+        dispatcher,\n+        logger,\n+        writeToNormalizedCacheAsynchronously)\n+    );\n+    if (operation instanceof Query && enableAutoPersistedQueries) {\n+      interceptors.add(new ApolloAutoPersistedQueryInterceptor(logger, useHttpGetMethodForPersistedQueries));\n     }\n     interceptors.add(new ApolloParseInterceptor(httpCache, apolloStore.networkResponseNormalizer(), responseFieldMapper,\n         scalarTypeAdapters, logger));\n"}}, {"oid": "bc2f5baece929161812652e336ca021f4eeb297a", "url": "https://github.com/apollographql/apollo-android/commit/bc2f5baece929161812652e336ca021f4eeb297a", "message": "unbreak tests", "committedDate": "2020-07-06T11:44:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA==", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r450207950", "bodyText": "should we make it configurable to enable / disable autopersistence for queries / mutations?", "author": "sav007", "createdAt": "2020-07-06T13:08:28Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java", "diffHunk": "@@ -108,4 +112,21 @@ boolean isPersistedQueryNotSupported(List<Error> errors) {\n     }\n     return false;\n   }\n+\n+  public static class Factory implements ApolloInterceptorFactory {\n+\n+    final boolean useHttpGet;", "originalCommit": "bc2f5baece929161812652e336ca021f4eeb297a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxNzc2Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r450217767", "bodyText": "It's relatively easy to do so by implementing a custom ApolloInterceptorFactory:\nclass OnlyPersistQueriesInterceptor: ApolloInterceptorFactory {\n    override fun newInterceptor(logger: Logger, operation: Operation<?, ?, ?>) = if (operation is Query) {\n         ApolloAutoPersistedOperationInterceptor(logger, false);\n    } else {\n       null\n    }\n}\nBut it might be easier to add more params to the Factory. Something like this:\nFactory(boolean useHttpGetForQueries, boolean persistQueries, boolean persistMutations)\n?\nThe useHttpGetForQueries feels a bit asymmetrical though. Maybe it is the one that should be left out instead?", "author": "martinbonnin", "createdAt": "2020-07-06T13:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NTU2NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r451095565", "bodyText": "I was thinking of Factory(boolean useHttpGetForQueries, boolean persistQueries, boolean persistMutations), so to keep everything in one place.", "author": "sav007", "createdAt": "2020-07-07T19:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxNzE5OA==", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r451517198", "bodyText": "Done. Let me know what you think.", "author": "martinbonnin", "createdAt": "2020-07-08T12:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "ad9eaa16bdcdbbb176dbd80a8418a6fcd05b03ed", "chunk": "diff --git a/apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java b/apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java\nindex b5f2ee5e8..594a64f54 100644\n--- a/apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java\n+++ b/apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java\n\n@@ -116,16 +118,26 @@ public class ApolloAutoPersistedOperationInterceptor implements ApolloIntercepto\n   public static class Factory implements ApolloInterceptorFactory {\n \n     final boolean useHttpGet;\n+    final boolean persistQueries;\n+    final boolean persistMutations;\n \n-    public Factory(boolean useHttpGet) {\n+    public Factory(boolean useHttpGet, boolean persistQueries, boolean persistMutations) {\n       this.useHttpGet = useHttpGet;\n+      this.persistQueries = persistQueries;\n+      this.persistMutations = persistMutations;\n     }\n \n     public Factory() {\n-      this(false);\n+      this(false, true, true);\n     }\n \n     @Nullable @Override public ApolloInterceptor newInterceptor(@NotNull ApolloLogger logger, @NotNull Operation<?, ?, ?> operation) {\n+      if (operation instanceof Query && !persistQueries) {\n+        return null;\n+      }\n+      if (operation instanceof Mutation && !persistMutations) {\n+        return null;\n+      }\n       return new ApolloAutoPersistedOperationInterceptor(logger, useHttpGet);\n     }\n   }\n"}}, {"oid": "ad9eaa16bdcdbbb176dbd80a8418a6fcd05b03ed", "url": "https://github.com/apollographql/apollo-android/commit/ad9eaa16bdcdbbb176dbd80a8418a6fcd05b03ed", "message": "update API", "committedDate": "2020-07-08T13:49:54Z", "type": "forcePushed"}, {"oid": "5c0e77bc5d5cd6acbc4a328db60396410c5cfc55", "url": "https://github.com/apollographql/apollo-android/commit/5c0e77bc5d5cd6acbc4a328db60396410c5cfc55", "message": "also add the `composeRequestBody` overload for persisted queries on\nmutations/subscriptions", "committedDate": "2020-07-09T14:50:24Z", "type": "commit"}, {"oid": "f8c8bf00c2390d40a4baa996cce7eaa2f6965dc7", "url": "https://github.com/apollographql/apollo-android/commit/f8c8bf00c2390d40a4baa996cce7eaa2f6965dc7", "message": "update test fixtures", "committedDate": "2020-07-09T14:50:24Z", "type": "commit"}, {"oid": "10c2298c2bdebb8e04957df8902e5e400feca0be", "url": "https://github.com/apollographql/apollo-android/commit/10c2298c2bdebb8e04957df8902e5e400feca0be", "message": "Pass a logger and operation to `newInterceptor`", "committedDate": "2020-07-09T14:50:24Z", "type": "commit"}, {"oid": "1e7269393a3719a96a8719138170ac3b023bfcbe", "url": "https://github.com/apollographql/apollo-android/commit/1e7269393a3719a96a8719138170ac3b023bfcbe", "message": "make ApolloAutoPersistedQueryInterceptor public", "committedDate": "2020-07-09T14:50:25Z", "type": "commit"}, {"oid": "e8db65b77440758a2dc908e2288eb430eef8240c", "url": "https://github.com/apollographql/apollo-android/commit/e8db65b77440758a2dc908e2288eb430eef8240c", "message": "add apolloClient.autoPersistedOperationsInterceptorFactory", "committedDate": "2020-07-09T14:51:59Z", "type": "commit"}, {"oid": "ac32a8257a91053cf2a9fb1a964511494b5caf6b", "url": "https://github.com/apollographql/apollo-android/commit/ac32a8257a91053cf2a9fb1a964511494b5caf6b", "message": "minor tweaks", "committedDate": "2020-07-09T14:52:01Z", "type": "commit"}, {"oid": "f02033d70dc253d3e0946e0c9e6c1c70298367be", "url": "https://github.com/apollographql/apollo-android/commit/f02033d70dc253d3e0946e0c9e6c1c70298367be", "message": "unbreak tests", "committedDate": "2020-07-09T14:52:01Z", "type": "commit"}, {"oid": "735e30a635a7c786c91f47ddb6d3e7ca69fdc708", "url": "https://github.com/apollographql/apollo-android/commit/735e30a635a7c786c91f47ddb6d3e7ca69fdc708", "message": "add persistQueries and persistMutations parameters", "committedDate": "2020-07-09T14:52:01Z", "type": "commit"}, {"oid": "10167fa716147e228252d7eb93afd2348b2fa020", "url": "https://github.com/apollographql/apollo-android/commit/10167fa716147e228252d7eb93afd2348b2fa020", "message": "do not run in parallel for now. It might take a bit more time but it'll\nmake errors more readble in CI", "committedDate": "2020-07-09T14:52:01Z", "type": "commit"}, {"oid": "d66d64731ca824cdae556ea4a28431735e1194a1", "url": "https://github.com/apollographql/apollo-android/commit/d66d64731ca824cdae556ea4a28431735e1194a1", "message": "update API", "committedDate": "2020-07-09T14:52:02Z", "type": "commit"}, {"oid": "d66d64731ca824cdae556ea4a28431735e1194a1", "url": "https://github.com/apollographql/apollo-android/commit/d66d64731ca824cdae556ea4a28431735e1194a1", "message": "update API", "committedDate": "2020-07-09T14:52:02Z", "type": "forcePushed"}]}