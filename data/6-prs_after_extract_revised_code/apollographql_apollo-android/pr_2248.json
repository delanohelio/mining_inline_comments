{"pr_number": 2248, "pr_title": "Introduce GraphQL execution context", "pr_createdAt": "2020-05-06T05:45:29Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2248", "timeline": [{"oid": "3fc890a12d1d9fda666c311548f194babc272022", "url": "https://github.com/apollographql/apollo-android/commit/3fc890a12d1d9fda666c311548f194babc272022", "message": "Introduce GraphQL execution context\n\nProvide type safe container to customize and extend `Response` with additional context, such as providing access to raw OkHttp response.\n\nCloses https://github.com/apollographql/apollo-android/issues/2205", "committedDate": "2020-05-06T06:04:04Z", "type": "forcePushed"}, {"oid": "cc731a24caa3e6a7ee7c6359ee25a5fef1fd4c73", "url": "https://github.com/apollographql/apollo-android/commit/cc731a24caa3e6a7ee7c6359ee25a5fef1fd4c73", "message": "Introduce GraphQL execution context\n\nProvide type safe container to customize and extend `Response` with additional context, such as providing access to raw OkHttp response.\n\nCloses https://github.com/apollographql/apollo-android/issues/2205", "committedDate": "2020-05-06T06:07:30Z", "type": "commit"}, {"oid": "cc731a24caa3e6a7ee7c6359ee25a5fef1fd4c73", "url": "https://github.com/apollographql/apollo-android/commit/cc731a24caa3e6a7ee7c6359ee25a5fef1fd4c73", "message": "Introduce GraphQL execution context\n\nProvide type safe container to customize and extend `Response` with additional context, such as providing access to raw OkHttp response.\n\nCloses https://github.com/apollographql/apollo-android/issues/2205", "committedDate": "2020-05-06T06:07:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwMjU2Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2248#discussion_r420902566", "bodyText": "Might be worth making this OkHttpExecutionContext to make it clearer it's tied to the specific okhttp implementation", "author": "designatednerd", "createdAt": "2020-05-06T15:54:48Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/http/HttpExecutionContext.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.apollographql.apollo.http;\n+\n+import com.apollographql.apollo.api.ExecutionContext;\n+import com.apollographql.apollo.api.internal.Utils;\n+import okhttp3.Response;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Http GraphQL execution context, provides access to the raw {@link okhttp3.Response} response.\n+ */\n+public class HttpExecutionContext implements ExecutionContext.Element {", "originalCommit": "cc731a24caa3e6a7ee7c6359ee25a5fef1fd4c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8443a97790916dcbcf1d6784e2e9f000c05f57e2", "chunk": "diff --git a/apollo-runtime/src/main/java/com/apollographql/apollo/http/HttpExecutionContext.java b/apollo-runtime/src/main/java/com/apollographql/apollo/http/HttpExecutionContext.java\ndeleted file mode 100644\nindex 898f01dc2..000000000\n--- a/apollo-runtime/src/main/java/com/apollographql/apollo/http/HttpExecutionContext.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package com.apollographql.apollo.http;\n-\n-import com.apollographql.apollo.api.ExecutionContext;\n-import com.apollographql.apollo.api.internal.Utils;\n-import okhttp3.Response;\n-import org.jetbrains.annotations.NotNull;\n-\n-/**\n- * Http GraphQL execution context, provides access to the raw {@link okhttp3.Response} response.\n- */\n-public class HttpExecutionContext implements ExecutionContext.Element {\n-\n-  public static final ExecutionContext.Key<HttpExecutionContext> KEY = new ExecutionContext.Key<HttpExecutionContext>() {\n-  };\n-\n-  /**\n-   * Raw OkHttp response.\n-   */\n-  public final Response response;\n-\n-  public HttpExecutionContext(@NotNull Response response) {\n-    this.response = Utils.checkNotNull(response, \"response == null\");\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwMzQ4OA==", "url": "https://github.com/apollographql/apollo-android/pull/2248#discussion_r420903488", "bodyText": "Same thought of marking this as tied to okhttp", "author": "designatednerd", "createdAt": "2020-05-06T15:55:59Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/util/HttpResponseUtils.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.apollographql.apollo.internal.util;\n+\n+import okhttp3.Response;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+public final class HttpResponseUtils {", "originalCommit": "cc731a24caa3e6a7ee7c6359ee25a5fef1fd4c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8443a97790916dcbcf1d6784e2e9f000c05f57e2", "chunk": "diff --git a/apollo-runtime/src/main/java/com/apollographql/apollo/internal/util/HttpResponseUtils.java b/apollo-runtime/src/main/java/com/apollographql/apollo/http/OkHttpExecutionContext.java\nsimilarity index 50%\nrename from apollo-runtime/src/main/java/com/apollographql/apollo/internal/util/HttpResponseUtils.java\nrename to apollo-runtime/src/main/java/com/apollographql/apollo/http/OkHttpExecutionContext.java\nindex 768063b78..09b26e336 100644\n--- a/apollo-runtime/src/main/java/com/apollographql/apollo/internal/util/HttpResponseUtils.java\n+++ b/apollo-runtime/src/main/java/com/apollographql/apollo/http/OkHttpExecutionContext.java\n\n@@ -1,14 +1,30 @@\n-package com.apollographql.apollo.internal.util;\n+package com.apollographql.apollo.http;\n \n+import com.apollographql.apollo.api.ExecutionContext;\n import okhttp3.Response;\n import org.jetbrains.annotations.NotNull;\n \n import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n \n-public final class HttpResponseUtils {\n+/**\n+ * Http GraphQL execution context, provides access to the raw {@link okhttp3.Response} response.\n+ */\n+public class OkHttpExecutionContext implements ExecutionContext.Element {\n \n-  public static @NotNull Response strip(@NotNull Response response) {\n+  public static final ExecutionContext.Key<OkHttpExecutionContext> KEY = new ExecutionContext.Key<OkHttpExecutionContext>() {\n+  };\n+\n+  /**\n+   * Raw OkHttp response.\n+   */\n+  public final Response response;\n+\n+  public OkHttpExecutionContext(@NotNull Response response) {\n     checkNotNull(response, \"response == null\");\n+    this.response = strip(response);\n+  }\n+\n+  private static @NotNull Response strip(@NotNull Response response) {\n     final Response.Builder builder = response.newBuilder();\n \n     if (response.body() != null) {\n"}}, {"oid": "8443a97790916dcbcf1d6784e2e9f000c05f57e2", "url": "https://github.com/apollographql/apollo-android/commit/8443a97790916dcbcf1d6784e2e9f000c05f57e2", "message": "Feedback", "committedDate": "2020-05-06T22:03:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjUyMA==", "url": "https://github.com/apollographql/apollo-android/pull/2248#discussion_r421166520", "bodyText": "What types of objects do we plan to put in the context?\nCoroutinesContext has Dispatcher, Job, Name, maybe more\nExecutionContext will have OkHttpExecutionContext and what else ? Do we plan to put dispatchers/executors down there too ?", "author": "martinbonnin", "createdAt": "2020-05-07T00:20:42Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/interceptor/ApolloParseInterceptor.java", "diffHunk": "@@ -81,12 +82,15 @@ public void interceptAsync(@NotNull final InterceptorRequest request, @NotNull A\n     String cacheKey = httpResponse.request().header(HttpCache.CACHE_KEY_HEADER);\n     if (httpResponse.isSuccessful()) {\n       try {\n-        OperationResponseParser parser = new OperationResponseParser(operation, responseFieldMapper, scalarTypeAdapters,\n-            normalizer);\n-        Response parsedResponse = parser.parse(httpResponse.body().source())\n+        final OperationResponseParser parser = new OperationResponseParser(operation, responseFieldMapper, scalarTypeAdapters, normalizer);\n+        final OkHttpExecutionContext httpExecutionContext = new OkHttpExecutionContext(httpResponse);\n+        Response parsedResponse = parser.parse(httpResponse.body().source());\n+        parsedResponse = parsedResponse\n             .toBuilder()\n             .fromCache(httpResponse.cacheResponse() != null)\n+            .executionContext(parsedResponse.getExecutionContext().set(OkHttpExecutionContext.KEY, httpExecutionContext))", "originalCommit": "8443a97790916dcbcf1d6784e2e9f000c05f57e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4NTYxOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2248#discussion_r421185619", "bodyText": "For now we put just http context, but in future for new runtime we are going to put cache policy, cache headers, cache normalization records etc. Also any implementation of future request executor (now it's called Apollo interceptor) can put whatever it wants.", "author": "sav007", "createdAt": "2020-05-07T01:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjUyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDI0Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2248#discussion_r421830242", "bodyText": "Just a small thing. Since all modules has Kotlin dependency transitively, it is also added to runtime module. So it is ok to write this now with Kotlin.", "author": "tasomaniac", "createdAt": "2020-05-07T22:26:42Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/http/OkHttpExecutionContext.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.apollographql.apollo.http;\n+\n+import com.apollographql.apollo.api.ExecutionContext;\n+import okhttp3.Response;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+/**\n+ * Http GraphQL execution context, provides access to the raw {@link okhttp3.Response} response.\n+ */\n+public class OkHttpExecutionContext implements ExecutionContext.Element {", "originalCommit": "8443a97790916dcbcf1d6784e2e9f000c05f57e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "625c05c8720cc7d6fc35eb4e1c84773c1b776660", "chunk": "diff --git a/apollo-runtime/src/main/java/com/apollographql/apollo/http/OkHttpExecutionContext.java b/apollo-runtime/src/main/java/com/apollographql/apollo/http/OkHttpExecutionContext.java\nindex 09b26e336..517957f7d 100644\n--- a/apollo-runtime/src/main/java/com/apollographql/apollo/http/OkHttpExecutionContext.java\n+++ b/apollo-runtime/src/main/java/com/apollographql/apollo/http/OkHttpExecutionContext.java\n\n@@ -1,5 +1,6 @@\n package com.apollographql.apollo.http;\n \n+import com.apollographql.apollo.api.ApolloExperimental;\n import com.apollographql.apollo.api.ExecutionContext;\n import okhttp3.Response;\n import org.jetbrains.annotations.NotNull;\n"}}, {"oid": "625c05c8720cc7d6fc35eb4e1c84773c1b776660", "url": "https://github.com/apollographql/apollo-android/commit/625c05c8720cc7d6fc35eb4e1c84773c1b776660", "message": "Feedback", "committedDate": "2020-05-08T00:43:13Z", "type": "commit"}]}