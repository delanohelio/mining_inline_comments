{"pr_number": 2125, "pr_title": "Fix issue with fragment field type conditions", "pr_createdAt": "2020-03-31T03:33:41Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2125", "timeline": [{"oid": "e961df5d842d9eec0a787a0ad41b1f0dd1c92372", "url": "https://github.com/apollographql/apollo-android/commit/e961df5d842d9eec0a787a0ad41b1f0dd1c92372", "message": "Fix issue with fragment field type conditions\n\nWhen fragment defined on the same type as parent field, don't generate fragment field type conditions otherwise it breaks parsing response for any new type.\n\nCloses https://github.com/apollographql/apollo-android/issues/2097", "committedDate": "2020-03-31T03:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2Mzg5Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2125#discussion_r400663897", "bodyText": "It would be good to hold off for the depreciation changes in bug fixes. They are because of Kotlin changes and will make it harder to cherry pick into 1.4.x branch.", "author": "tasomaniac", "createdAt": "2020-03-31T06:08:14Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseReader.java", "diffHunk": "@@ -199,7 +199,7 @@ public RealResponseReader(Operation.Variables operationVariables, R recordSet,\n       resolveDelegate.didResolveNull();\n       result = null;\n     } else {\n-      CustomTypeAdapter<T> typeAdapter = scalarTypeAdapters.adapterFor(field.scalarType());\n+      CustomTypeAdapter<T> typeAdapter = scalarTypeAdapters.adapterFor(field.getScalarType());", "originalCommit": "e961df5d842d9eec0a787a0ad41b1f0dd1c92372", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "562cef18b29164df031859222f9e3f5751eed0cc", "chunk": "diff --git a/apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseReader.java b/apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseReader.java\nindex 8a52a4227..56b766217 100644\n--- a/apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseReader.java\n+++ b/apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseReader.java\n\n@@ -199,7 +199,7 @@ public final class RealResponseReader<R> implements ResponseReader {\n       resolveDelegate.didResolveNull();\n       result = null;\n     } else {\n-      CustomTypeAdapter<T> typeAdapter = scalarTypeAdapters.adapterFor(field.getScalarType());\n+      CustomTypeAdapter<T> typeAdapter = scalarTypeAdapters.adapterFor(field.scalarType());\n       result = typeAdapter.decode(CustomTypeValue.fromRawValue(value));\n       checkValue(field, result);\n       resolveDelegate.didResolveScalar(value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2NDI1OA==", "url": "https://github.com/apollographql/apollo-android/pull/2125#discussion_r400664258", "bodyText": "Just double checking. Is this intentional? I don't really understand what's going on here and Im curious how this works.", "author": "tasomaniac", "createdAt": "2020-03-31T06:09:11Z", "path": "apollo-compiler/src/test/graphql/com/example/simple_fragment/TestQuery.java", "diffHunk": "@@ -360,9 +360,7 @@ public int hashCode() {\n \n       public static final class Mapper implements ResponseFieldMapper<Fragments> {\n         static final ResponseField[] $responseFields = {\n-          ResponseField.forFragment(\"__typename\", \"__typename\", Arrays.<ResponseField.Condition>asList(\n-            ResponseField.Condition.typeCondition(new String[] {\"Human\", \"Droid\"})", "originalCommit": "e961df5d842d9eec0a787a0ad41b1f0dd1c92372", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NDcyMA==", "url": "https://github.com/apollographql/apollo-android/pull/2125#discussion_r401344720", "bodyText": "Sure, I will try to explain.\nLet's imagine that we have this query:\nquery TestQuery {\n  hero { # hero here has type Character\n    ...HeroDetails\n  }  \n}\nfragment HeroDetails on Character {\n   name\n   ...\n}\n\nHere, hero field has interface type Character with Human, Droid implementation in schema v1.\nNow if fragment HeroDetails is defined on interface type Character (not on concrete type) we were generating meta field like:\nResponseField.forFragment(\"__typename\", \"__typename\", Arrays.<ResponseField.Condition>asList(ResponseField.Condition.typeCondition(new String[] {\"Human\", \"Droid\"})\n\nwith Human and Droid type conditions, means that in order to read fragment from the response it MUST be on of these types.\nNow the issue that with a new version of schema that introduces new implementation of interface type Character let's say Mandalorian we are going to fail to read fragment (even when it's defined on base interface type Character) because we locked ourselves and expect only Human or Droid types.\nThis PR fixes this issue by generating this meta field instead:\nResponseField.forFragment(\"__typename\", \"__typename\", Collections.<ResponseField.Condition>emptyList())\n\nbasically we remove type conditions if fragment defined on interface or union type.", "author": "sav007", "createdAt": "2020-04-01T04:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2NDI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTgyMw==", "url": "https://github.com/apollographql/apollo-android/pull/2125#discussion_r402789823", "bodyText": "Thanks \ud83d\udc4d", "author": "tasomaniac", "createdAt": "2020-04-03T07:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2NDI1OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "562cef18b29164df031859222f9e3f5751eed0cc", "url": "https://github.com/apollographql/apollo-android/commit/562cef18b29164df031859222f9e3f5751eed0cc", "message": "Feedback", "committedDate": "2020-04-03T03:38:35Z", "type": "commit"}, {"oid": "562cef18b29164df031859222f9e3f5751eed0cc", "url": "https://github.com/apollographql/apollo-android/commit/562cef18b29164df031859222f9e3f5751eed0cc", "message": "Feedback", "committedDate": "2020-04-03T03:38:35Z", "type": "forcePushed"}]}