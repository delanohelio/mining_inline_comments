{"pr_number": 2220, "pr_title": "Added Rune of Unemployment", "pr_createdAt": "2020-08-12T01:02:17Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2220", "timeline": [{"oid": "b27059240b6305e89bb058fdce15b62ba4d08019", "url": "https://github.com/Slimefun/Slimefun4/commit/b27059240b6305e89bb058fdce15b62ba4d08019", "message": "Added Rune of Unemployment\n\nApproved Suggestion: #284 - Vitamin_CE#9804", "committedDate": "2020-08-12T00:58:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NzIxNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469157217", "bodyText": "Your Nether Goo should probably also be added to this research", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:19:16Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java", "diffHunk": "@@ -271,6 +271,7 @@ public static void setupResearches() {\n         register(\"lead_clothing\", 260, \"Lead Clothing\", 14, SlimefunItems.REINFORCED_CLOTH);\n         register(\"tape_measure\", 261, \"Tape Measure\", 7, SlimefunItems.TAPE_MEASURE);\n         register(\"iron_golem_assembler\", 262, \"Automated Iron Golems\", 30, SlimefunItems.IRON_GOLEM_ASSEMBLER);\n+        register(\"unemployment_rune\", 263, \"Reset Villager Trades\", 29, SlimefunItems.UNEMPLOYMENT_RUNE);", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwOTA3NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469509074", "bodyText": "done", "author": "dniym", "createdAt": "2020-08-12T20:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NzIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java\nindex 3f469df9d..f9ce22267 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java\n\n@@ -272,6 +272,8 @@ public final class ResearchSetup {\n         register(\"tape_measure\", 261, \"Tape Measure\", 7, SlimefunItems.TAPE_MEASURE);\n         register(\"iron_golem_assembler\", 262, \"Automated Iron Golems\", 30, SlimefunItems.IRON_GOLEM_ASSEMBLER);\n         register(\"unemployment_rune\", 263, \"Reset Villager Trades\", 29, SlimefunItems.UNEMPLOYMENT_RUNE);\n+        register(\"organic_nether_goo\", 264, \"Organic Nether Goo\", 14,SlimefunItems.ORGANIC_NETHER_GOO);\n+                \n     }\n \n     private static void register(String key, int id, String name, int defaultCost, ItemStack... items) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NzU1Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469157552", "bodyText": "Don't define the texture here, add them to the HeadTexture enum instead.", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:19:53Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -388,6 +390,10 @@ public static void setup(SlimefunPlugin plugin) {\n \t\tnew ItemStack[] {null, null, null, null, new CustomItem(SlimefunUtils.getCustomHead(\"89091d79ea0f59ef7ef94d7bba6e5f17f2f7d4572c44f90f76c4819a714\"), \"&aIron Golem\"), null, null, null, null})\n \t\t.register(plugin);\n \n+\t\tnew OrganicNetherGoo(categories.resources, SlimefunItems.ORGANIC_NETHER_GOO, RecipeType.BARTER_DROP,\n+\t\tnew ItemStack[] {null, null, null, null, new CustomItem(SlimefunUtils.getCustomHead(\"2882af1294a74023e6919a31d1a027310f2e142afb4667d230d155e7f21dbb41\"), \"&aPiglins\"), null, null, null, null})", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java\nindex 691c6baf6..ef5ce8ab8 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java\n\n@@ -391,7 +392,7 @@ public final class SlimefunItemSetup {\n \t\t.register(plugin);\n \n \t\tnew OrganicNetherGoo(categories.resources, SlimefunItems.ORGANIC_NETHER_GOO, RecipeType.BARTER_DROP,\n-\t\tnew ItemStack[] {null, null, null, null, new CustomItem(SlimefunUtils.getCustomHead(\"2882af1294a74023e6919a31d1a027310f2e142afb4667d230d155e7f21dbb41\"), \"&aPiglins\"), null, null, null, null})\n+\t\tnew ItemStack[] {null, null, null, null, new CustomItem(HeadTexture.PIGLIN_HEAD.getAsItemStack(), \"&aPiglins\"), null, null, null, null})\n                 .register(plugin);\n \t\t\n \t\tnew UnplaceableBlock(categories.technicalComponents, SlimefunItems.ADVANCED_CIRCUIT_BOARD, RecipeType.ENHANCED_CRAFTING_TABLE,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NzkzOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469157938", "bodyText": "This recipe has a rather weird and asymmetric shape", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:20:34Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -2466,7 +2472,11 @@ public int getTier() {\n \t\tnew EnchantmentRune(categories.magicalResources, SlimefunItems.ENCHANTMENT_RUNE, RecipeType.ANCIENT_ALTAR,\n \t\tnew ItemStack[] {SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_GLASS, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_GLASS, SlimefunItems.LIGHTNING_RUNE, SlimefunItems.MAGICAL_GLASS, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_GLASS, SlimefunItems.MAGIC_LUMP_3})\n \t\t.register(plugin);\n-\n+\t\t\n+\t\tnew RuneOfUnemployment(categories.magicalResources, SlimefunItems.UNEMPLOYMENT_RUNE, RecipeType.ANCIENT_ALTAR,\n+\t\tnew ItemStack[] {SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_BOOK_COVER, SlimefunItems.ENDER_LUMP_3, SlimefunItems.ORGANIC_NETHER_GOO, SlimefunItems.MAGIC_LUMP_2, new ItemStack(Material.CRYING_OBSIDIAN), SlimefunItems.MAGICAL_GLASS, SlimefunItems.ORGANIC_NETHER_GOO, SlimefunItems.FLASK_OF_KNOWLEDGE})", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwOTIyNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469509225", "bodyText": "modified a bit to be more symmetric", "author": "dniym", "createdAt": "2020-08-12T20:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1NzkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java\nindex 691c6baf6..ef5ce8ab8 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java\n\n@@ -2474,7 +2475,7 @@ public final class SlimefunItemSetup {\n \t\t.register(plugin);\n \t\t\n \t\tnew RuneOfUnemployment(categories.magicalResources, SlimefunItems.UNEMPLOYMENT_RUNE, RecipeType.ANCIENT_ALTAR,\n-\t\tnew ItemStack[] {SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_BOOK_COVER, SlimefunItems.ENDER_LUMP_3, SlimefunItems.ORGANIC_NETHER_GOO, SlimefunItems.MAGIC_LUMP_2, new ItemStack(Material.CRYING_OBSIDIAN), SlimefunItems.MAGICAL_GLASS, SlimefunItems.ORGANIC_NETHER_GOO, SlimefunItems.FLASK_OF_KNOWLEDGE})\n+\t\tnew ItemStack[] {SlimefunItems.MAGIC_LUMP_3, SlimefunItems.FLASK_OF_KNOWLEDGE, SlimefunItems.ENDER_LUMP_3, SlimefunItems.ORGANIC_NETHER_GOO, new ItemStack(Material.CRYING_OBSIDIAN), SlimefunItems.ORGANIC_NETHER_GOO, SlimefunItems.MAGICAL_GLASS, SlimefunItems.FLASK_OF_KNOWLEDGE, SlimefunItems.MAGICAL_GLASS })\n \t\t.register(plugin);\n \t\t\n \t\tnew InfernalBonemeal(categories.magicalGadgets, SlimefunItems.INFERNAL_BONEMEAL, RecipeType.ANCIENT_ALTAR,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1ODE5NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469158194", "bodyText": "Both return statements have completely different indentation.", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:21:03Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.resources;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class OrganicNetherGoo extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable, PiglinBarterDrop {\n+\n+        private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n+    \n+        public OrganicNetherGoo(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+            super(category, item, recipeType, recipe);\n+            \n+            addItemSetting(chance);\n+        }\n+        \n+        @Override\n+        public ItemUseHandler getItemHandler() {\n+                return PlayerRightClickEvent::cancel;\n+        }\n+\n+        @Override\n+        public int getBarteringLootChance() {\n+            return chance.getValue();", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\nindex ced1b0259..0ddb8e2f8 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n\n@@ -1,35 +1,36 @@\n package io.github.thebusybiscuit.slimefun4.implementation.resources;\n import org.bukkit.inventory.ItemStack;\n \n-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;\n import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n-import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;\n import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n-public class OrganicNetherGoo extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable, PiglinBarterDrop {\n-\n-        private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n-    \n-        public OrganicNetherGoo(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n-            super(category, item, recipeType, recipe);\n-            \n-            addItemSetting(chance);\n-        }\n-        \n-        @Override\n-        public ItemUseHandler getItemHandler() {\n-                return PlayerRightClickEvent::cancel;\n-        }\n-\n-        @Override\n-        public int getBarteringLootChance() {\n-            return chance.getValue();\n-        }\n-        \n+/**\n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. \n+ *\n+ * @author dNiym\n+ *\n+ * @see PiglinBarterDrop\n+ *\n+ */\n+\n+public class OrganicNetherGoo extends SlimefunItem implements PiglinBarterDrop {\n+\n+    private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n+\n+    public OrganicNetherGoo(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        addItemSetting(chance);\n+    }\n+\n+    @Override\n+    public int getBarteringLootChance() {\n+        return chance.getValue();\n+    }\n+\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1ODI3Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469158272", "bodyText": "Missing documentation", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:21:11Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.resources;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class OrganicNetherGoo extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable, PiglinBarterDrop {", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwOTU4OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469509589", "bodyText": "just turned this into a slimefun item, no need for an item use handler now right?  Unless it needs to be blocked in crafting recipes? (is that even a thing) ?", "author": "dniym", "createdAt": "2020-08-12T20:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1ODI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\nindex ced1b0259..0ddb8e2f8 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n\n@@ -1,35 +1,36 @@\n package io.github.thebusybiscuit.slimefun4.implementation.resources;\n import org.bukkit.inventory.ItemStack;\n \n-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;\n import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n-import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;\n import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n-public class OrganicNetherGoo extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable, PiglinBarterDrop {\n-\n-        private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n-    \n-        public OrganicNetherGoo(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n-            super(category, item, recipeType, recipe);\n-            \n-            addItemSetting(chance);\n-        }\n-        \n-        @Override\n-        public ItemUseHandler getItemHandler() {\n-                return PlayerRightClickEvent::cancel;\n-        }\n-\n-        @Override\n-        public int getBarteringLootChance() {\n-            return chance.getValue();\n-        }\n-        \n+/**\n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. \n+ *\n+ * @author dNiym\n+ *\n+ * @see PiglinBarterDrop\n+ *\n+ */\n+\n+public class OrganicNetherGoo extends SlimefunItem implements PiglinBarterDrop {\n+\n+    private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n+\n+    public OrganicNetherGoo(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        addItemSetting(chance);\n+    }\n+\n+    @Override\n+    public int getBarteringLootChance() {\n+        return chance.getValue();\n+    }\n+\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1ODU0Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469158542", "bodyText": "Why is this even marked as NotPlaceable here? Brown dye cannot be placed anyway.", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:21:45Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.resources;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class OrganicNetherGoo extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable, PiglinBarterDrop {", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\nindex ced1b0259..0ddb8e2f8 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n\n@@ -1,35 +1,36 @@\n package io.github.thebusybiscuit.slimefun4.implementation.resources;\n import org.bukkit.inventory.ItemStack;\n \n-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;\n import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n-import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;\n import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n-public class OrganicNetherGoo extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable, PiglinBarterDrop {\n-\n-        private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n-    \n-        public OrganicNetherGoo(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n-            super(category, item, recipeType, recipe);\n-            \n-            addItemSetting(chance);\n-        }\n-        \n-        @Override\n-        public ItemUseHandler getItemHandler() {\n-                return PlayerRightClickEvent::cancel;\n-        }\n-\n-        @Override\n-        public int getBarteringLootChance() {\n-            return chance.getValue();\n-        }\n-        \n+/**\n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. \n+ *\n+ * @author dNiym\n+ *\n+ * @see PiglinBarterDrop\n+ *\n+ */\n+\n+public class OrganicNetherGoo extends SlimefunItem implements PiglinBarterDrop {\n+\n+    private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n+\n+    public OrganicNetherGoo(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        addItemSetting(chance);\n+    }\n+\n+    @Override\n+    public int getBarteringLootChance() {\n+        return chance.getValue();\n+    }\n+\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1OTIwOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469159209", "bodyText": "Why not do (entity instance of Villager) instead of this weird double-check.\nShould Mojang decide to add more types of Merchants, it would break too. So a Villager instanceof check is most appropriate here.\nEspecially if you are casting this to Villager anyway, since that would otherwise result in unexpected class casting exceptions.", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:23:14Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+ \n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (!(entity instanceof WanderingTrader) && entity instanceof Merchant) {", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4NzUxMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469187510", "bodyText": "Hmmm I was pretty sure I did this for a reason since the merchant/villager api is so flaky.  Maybe it was that I checked to merchant because a regular villager will pass the villager instanceof check but not have any trades or a job.    A merchant object however will have a job but wandering traders can\u2019t change profession because they\u2019re not villagers.  Anyways I suppose I could just check to make sure they have a job before resetting.     I\u2019ll do some testing to make sure it won\u2019t cause issues!", "author": "dniym", "createdAt": "2020-08-12T11:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1OTIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxMDgzNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469510836", "bodyText": "upon further testing it appears to be fine with wandering traders.", "author": "dniym", "createdAt": "2020-08-12T20:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1OTIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex f30f0d527..b7691ad25 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -33,47 +33,29 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n     public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n         super(category, item, recipeType, recipe);\n     }\n- \n+\n     @Override\n     public EntityInteractHandler getItemHandler() {\n         return (p, entity, item, offhand) -> {\n-            if (!(entity instanceof WanderingTrader) && entity instanceof Merchant) {\n-\n+            if (entity instanceof Villager) {\n+                \n                 if (p.getGameMode() != GameMode.CREATIVE) {\n                     ItemUtils.consumeItem(item, false);\n                 }\n                 \n-                \n                 Villager v = (Villager) entity;\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n-                Location l = v.getLocation().clone();\n+                \n                 Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n-                boolean flip = false;\n                 double o1 = 0;\n                 double o2 = offset / 2;\n                 double o3 = 0;\n-                \n-                for(int i = 0; i < 10; i++) {\n-                    flip = !flip;\n-                    if(flip) {\n-                        o1 = offset;\n-                        o3 = offset * -1;\n-                    } else {\n-                        o1 = offset * -1;\n-                        o3 = offset;\n-                    }\n-                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, l, 3, o1, o2, o3,0.0d);\n-                if(i == 1 || i ==5)\n-                    v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, l, 3, 0.04d, 1d, 0.04d);    \n-                \n+\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, o1, o2, o3,0.0d);\n+                v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n+\n             }\n-        }\n         };\n     }\n-\n-\n-\n- \n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1OTczOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469159739", "bodyText": "You can also just specify a count when spawning particles, I see no reason for this loop here.\nAlso the formatting is completely off.", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:24:18Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+ \n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (!(entity instanceof WanderingTrader) && entity instanceof Merchant) {\n+\n+                if (p.getGameMode() != GameMode.CREATIVE) {\n+                    ItemUtils.consumeItem(item, false);\n+                }\n+                \n+                \n+                Villager v = (Villager) entity;\n+                v.setVillagerExperience(0);\n+                v.setProfession(Profession.NONE);\n+                Location l = v.getLocation().clone();\n+                Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                boolean flip = false;\n+                double o1 = 0;\n+                double o2 = offset / 2;\n+                double o3 = 0;\n+                \n+                for(int i = 0; i < 10; i++) {\n+                    flip = !flip;\n+                    if(flip) {\n+                        o1 = offset;\n+                        o3 = offset * -1;\n+                    } else {\n+                        o1 = offset * -1;\n+                        o3 = offset;\n+                    }\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, l, 3, o1, o2, o3,0.0d);\n+                if(i == 1 || i ==5)\n+                    v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, l, 3, 0.04d, 1d, 0.04d);    \n+                \n+            }", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex f30f0d527..b7691ad25 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -33,47 +33,29 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n     public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n         super(category, item, recipeType, recipe);\n     }\n- \n+\n     @Override\n     public EntityInteractHandler getItemHandler() {\n         return (p, entity, item, offhand) -> {\n-            if (!(entity instanceof WanderingTrader) && entity instanceof Merchant) {\n-\n+            if (entity instanceof Villager) {\n+                \n                 if (p.getGameMode() != GameMode.CREATIVE) {\n                     ItemUtils.consumeItem(item, false);\n                 }\n                 \n-                \n                 Villager v = (Villager) entity;\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n-                Location l = v.getLocation().clone();\n+                \n                 Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n-                boolean flip = false;\n                 double o1 = 0;\n                 double o2 = offset / 2;\n                 double o3 = 0;\n-                \n-                for(int i = 0; i < 10; i++) {\n-                    flip = !flip;\n-                    if(flip) {\n-                        o1 = offset;\n-                        o3 = offset * -1;\n-                    } else {\n-                        o1 = offset * -1;\n-                        o3 = offset;\n-                    }\n-                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, l, 3, o1, o2, o3,0.0d);\n-                if(i == 1 || i ==5)\n-                    v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, l, 3, 0.04d, 1d, 0.04d);    \n-                \n+\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, o1, o2, o3,0.0d);\n+                v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n+\n             }\n-        }\n         };\n     }\n-\n-\n-\n- \n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1OTk0Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469159942", "bodyText": "Two brackets with the same level of indentation :NotLikeThis:\nThis is how you make code confusing.", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:24:45Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+ \n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (!(entity instanceof WanderingTrader) && entity instanceof Merchant) {\n+\n+                if (p.getGameMode() != GameMode.CREATIVE) {\n+                    ItemUtils.consumeItem(item, false);\n+                }\n+                \n+                \n+                Villager v = (Villager) entity;\n+                v.setVillagerExperience(0);\n+                v.setProfession(Profession.NONE);\n+                Location l = v.getLocation().clone();\n+                Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                boolean flip = false;\n+                double o1 = 0;\n+                double o2 = offset / 2;\n+                double o3 = 0;\n+                \n+                for(int i = 0; i < 10; i++) {\n+                    flip = !flip;\n+                    if(flip) {\n+                        o1 = offset;\n+                        o3 = offset * -1;\n+                    } else {\n+                        o1 = offset * -1;\n+                        o3 = offset;\n+                    }\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, l, 3, o1, o2, o3,0.0d);\n+                if(i == 1 || i ==5)\n+                    v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, l, 3, 0.04d, 1d, 0.04d);    \n+                \n+            }\n+        }\n+        };", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex f30f0d527..b7691ad25 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -33,47 +33,29 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n     public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n         super(category, item, recipeType, recipe);\n     }\n- \n+\n     @Override\n     public EntityInteractHandler getItemHandler() {\n         return (p, entity, item, offhand) -> {\n-            if (!(entity instanceof WanderingTrader) && entity instanceof Merchant) {\n-\n+            if (entity instanceof Villager) {\n+                \n                 if (p.getGameMode() != GameMode.CREATIVE) {\n                     ItemUtils.consumeItem(item, false);\n                 }\n                 \n-                \n                 Villager v = (Villager) entity;\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n-                Location l = v.getLocation().clone();\n+                \n                 Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n-                boolean flip = false;\n                 double o1 = 0;\n                 double o2 = offset / 2;\n                 double o3 = 0;\n-                \n-                for(int i = 0; i < 10; i++) {\n-                    flip = !flip;\n-                    if(flip) {\n-                        o1 = offset;\n-                        o3 = offset * -1;\n-                    } else {\n-                        o1 = offset * -1;\n-                        o3 = offset;\n-                    }\n-                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, l, 3, o1, o2, o3,0.0d);\n-                if(i == 1 || i ==5)\n-                    v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, l, 3, 0.04d, 1d, 0.04d);    \n-                \n+\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, o1, o2, o3,0.0d);\n+                v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n+\n             }\n-        }\n         };\n     }\n-\n-\n-\n- \n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MDA2MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469160061", "bodyText": "Why have all these empty lines here...?", "author": "TheBusyBiscuit", "createdAt": "2020-08-12T10:24:57Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+ \n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (!(entity instanceof WanderingTrader) && entity instanceof Merchant) {\n+\n+                if (p.getGameMode() != GameMode.CREATIVE) {\n+                    ItemUtils.consumeItem(item, false);\n+                }\n+                \n+                \n+                Villager v = (Villager) entity;\n+                v.setVillagerExperience(0);\n+                v.setProfession(Profession.NONE);\n+                Location l = v.getLocation().clone();\n+                Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                boolean flip = false;\n+                double o1 = 0;\n+                double o2 = offset / 2;\n+                double o3 = 0;\n+                \n+                for(int i = 0; i < 10; i++) {\n+                    flip = !flip;\n+                    if(flip) {\n+                        o1 = offset;\n+                        o3 = offset * -1;\n+                    } else {\n+                        o1 = offset * -1;\n+                        o3 = offset;\n+                    }\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, l, 3, o1, o2, o3,0.0d);\n+                if(i == 1 || i ==5)\n+                    v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, l, 3, 0.04d, 1d, 0.04d);    \n+                \n+            }\n+        }\n+        };\n+    }\n+\n+\n+\n+ \n+", "originalCommit": "b27059240b6305e89bb058fdce15b62ba4d08019", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex f30f0d527..b7691ad25 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -33,47 +33,29 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n     public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n         super(category, item, recipeType, recipe);\n     }\n- \n+\n     @Override\n     public EntityInteractHandler getItemHandler() {\n         return (p, entity, item, offhand) -> {\n-            if (!(entity instanceof WanderingTrader) && entity instanceof Merchant) {\n-\n+            if (entity instanceof Villager) {\n+                \n                 if (p.getGameMode() != GameMode.CREATIVE) {\n                     ItemUtils.consumeItem(item, false);\n                 }\n                 \n-                \n                 Villager v = (Villager) entity;\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n-                Location l = v.getLocation().clone();\n+                \n                 Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n-                boolean flip = false;\n                 double o1 = 0;\n                 double o2 = offset / 2;\n                 double o3 = 0;\n-                \n-                for(int i = 0; i < 10; i++) {\n-                    flip = !flip;\n-                    if(flip) {\n-                        o1 = offset;\n-                        o3 = offset * -1;\n-                    } else {\n-                        o1 = offset * -1;\n-                        o3 = offset;\n-                    }\n-                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, l, 3, o1, o2, o3,0.0d);\n-                if(i == 1 || i ==5)\n-                    v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, l, 3, 0.04d, 1d, 0.04d);    \n-                \n+\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, o1, o2, o3,0.0d);\n+                v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n+\n             }\n-        }\n         };\n     }\n-\n-\n-\n- \n-\n }\n"}}, {"oid": "a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "url": "https://github.com/Slimefun/Slimefun4/commit/a1be08034b5f014a6d7fa7ca249cf2c02d83a9db", "message": "made requested changes", "committedDate": "2020-08-12T20:04:35Z", "type": "commit"}, {"oid": "a33cfdb12df9e1e37140c80aab659db4ffbfdfb9", "url": "https://github.com/Slimefun/Slimefun4/commit/a33cfdb12df9e1e37140c80aab659db4ffbfdfb9", "message": "added a check for jobless villagers", "committedDate": "2020-08-12T20:08:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMTgyMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469801823", "bodyText": "This empty line can be removed.", "author": "TheBusyBiscuit", "createdAt": "2020-08-13T08:56:45Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.resources;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. \n+ *\n+ * @author dNiym\n+ *\n+ * @see PiglinBarterDrop\n+ *\n+ */\n+", "originalCommit": "a33cfdb12df9e1e37140c80aab659db4ffbfdfb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644878c534df66b83109d3fdbca408bca2ab92ba", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\nindex 0ddb8e2f8..1f5bccd98 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n\n@@ -9,14 +9,14 @@ import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n /**\n- * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. \n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}, its \n+ * only current uses is the recipe for crafting the {@link RuneOfUnemployment}. \n  *\n  * @author dNiym\n  *\n  * @see PiglinBarterDrop\n  *\n  */\n-\n public class OrganicNetherGoo extends SlimefunItem implements PiglinBarterDrop {\n \n     private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMjE2Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469802163", "bodyText": "Should probably also add a \"validateInput\" method to make sure it's between 1-99.", "author": "TheBusyBiscuit", "createdAt": "2020-08-13T08:57:18Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.resources;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. \n+ *\n+ * @author dNiym\n+ *\n+ * @see PiglinBarterDrop\n+ *\n+ */\n+\n+public class OrganicNetherGoo extends SlimefunItem implements PiglinBarterDrop {\n+\n+    private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);", "originalCommit": "a33cfdb12df9e1e37140c80aab659db4ffbfdfb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MDY5NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469880695", "bodyText": "There is a line that checks this in the piglin listener.. do you think it should be done on a per item basis? Or on maybe the barter drop interface instead?\nhttps://github.com/TheBusyBiscuit/Slimefun4/pull/2220/files/b27059240b6305e89bb058fdce15b62ba4d08019#diff-030aa5ca3b19598a3acad3d2ccc70609", "author": "dniym", "createdAt": "2020-08-13T11:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMjE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTM3Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r470049377", "bodyText": "know that it is checked there.\nBut you should validate inputs like that on the ItemSetting level too, so that server owners will be notified that their settings are misconfigured.\nIn general, illegal values should be checked on all levels of implementation.", "author": "TheBusyBiscuit", "createdAt": "2020-08-13T15:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMjE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "644878c534df66b83109d3fdbca408bca2ab92ba", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\nindex 0ddb8e2f8..1f5bccd98 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n\n@@ -9,14 +9,14 @@ import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n /**\n- * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. \n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}, its \n+ * only current uses is the recipe for crafting the {@link RuneOfUnemployment}. \n  *\n  * @author dNiym\n  *\n  * @see PiglinBarterDrop\n  *\n  */\n-\n public class OrganicNetherGoo extends SlimefunItem implements PiglinBarterDrop {\n \n     private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMjQ3Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469802477", "bodyText": "I don't really see why we would need a new research for this.", "author": "TheBusyBiscuit", "createdAt": "2020-08-13T08:57:49Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java", "diffHunk": "@@ -271,6 +271,9 @@ public static void setupResearches() {\n         register(\"lead_clothing\", 260, \"Lead Clothing\", 14, SlimefunItems.REINFORCED_CLOTH);\n         register(\"tape_measure\", 261, \"Tape Measure\", 7, SlimefunItems.TAPE_MEASURE);\n         register(\"iron_golem_assembler\", 262, \"Automated Iron Golems\", 30, SlimefunItems.IRON_GOLEM_ASSEMBLER);\n+        register(\"unemployment_rune\", 263, \"Reset Villager Trades\", 29, SlimefunItems.UNEMPLOYMENT_RUNE);\n+        register(\"organic_nether_goo\", 264, \"Organic Nether Goo\", 14,SlimefunItems.ORGANIC_NETHER_GOO);", "originalCommit": "a33cfdb12df9e1e37140c80aab659db4ffbfdfb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3OTE5MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469879191", "bodyText": "Didn\u2019t you suggest that I should add the research on the last set of changes?\n\u201c dniym  Hide conversation\n@TheBusyBiscuit\nTheBusyBiscuit yesterday  Owner\nYour Nether Goo should probably also be added to this research\u201d", "author": "dniym", "createdAt": "2020-08-13T11:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMjQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MDM3MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469880370", "bodyText": "As I said...\nYour Nether Goo should probably also be added to this research.\nThis research, not a new one.", "author": "TheBusyBiscuit", "createdAt": "2020-08-13T11:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMjQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNTExNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r470225117", "bodyText": "got it", "author": "dniym", "createdAt": "2020-08-13T20:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMjQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "644878c534df66b83109d3fdbca408bca2ab92ba", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java\nindex f9ce22267..9fcdb18f9 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java\n\n@@ -271,8 +271,7 @@ public final class ResearchSetup {\n         register(\"lead_clothing\", 260, \"Lead Clothing\", 14, SlimefunItems.REINFORCED_CLOTH);\n         register(\"tape_measure\", 261, \"Tape Measure\", 7, SlimefunItems.TAPE_MEASURE);\n         register(\"iron_golem_assembler\", 262, \"Automated Iron Golems\", 30, SlimefunItems.IRON_GOLEM_ASSEMBLER);\n-        register(\"unemployment_rune\", 263, \"Reset Villager Trades\", 29, SlimefunItems.UNEMPLOYMENT_RUNE);\n-        register(\"organic_nether_goo\", 264, \"Organic Nether Goo\", 14,SlimefunItems.ORGANIC_NETHER_GOO);\n+        register(\"unemployment_rune\", 263, \"Reset Villager Trades\", 29, SlimefunItems.UNEMPLOYMENT_RUNE, SlimefunItems.ORGANIC_NETHER_GOO);\n                 \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMjc1Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469802756", "bodyText": "Please add an empty line after this", "author": "TheBusyBiscuit", "createdAt": "2020-08-13T08:58:19Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/HeadTexture.java", "diffHunk": "@@ -96,8 +96,8 @@\n     NETHER_STAR_REACTOR(\"a11ed1d1b25b624665ecdddc3d3a5dff0b9f35e3de77a12f516e60fe8501cc8d\"),\n     UNKNOWN(\"46ba63344f49dd1c4f5488e926bf3d9e2b29916a6c50d610bb40a5273dc8c82\"),\n     MISSING_TEXTURE(\"e9eb9da26cf2d3341397a7f4913ba3d37d1ad10eae30ab25fa39ceb84bc\"),\n-    MINECRAFT_CHUNK(\"8449b9318e33158e64a46ab0de121c3d40000e3332c1574932b3c849d8fa0dc2\");\n-\n+    MINECRAFT_CHUNK(\"8449b9318e33158e64a46ab0de121c3d40000e3332c1574932b3c849d8fa0dc2\"),\n+    PIGLIN_HEAD(\"2882af1294a74023e6919a31d1a027310f2e142afb4667d230d155e7f21dbb41\");", "originalCommit": "a33cfdb12df9e1e37140c80aab659db4ffbfdfb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644878c534df66b83109d3fdbca408bca2ab92ba", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/HeadTexture.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/HeadTexture.java\nindex b09abea58..4c7fc9b66 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/HeadTexture.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/HeadTexture.java\n\n@@ -98,6 +98,7 @@ public enum HeadTexture {\n     MISSING_TEXTURE(\"e9eb9da26cf2d3341397a7f4913ba3d37d1ad10eae30ab25fa39ceb84bc\"),\n     MINECRAFT_CHUNK(\"8449b9318e33158e64a46ab0de121c3d40000e3332c1574932b3c849d8fa0dc2\"),\n     PIGLIN_HEAD(\"2882af1294a74023e6919a31d1a027310f2e142afb4667d230d155e7f21dbb41\");\n+    \n     private final String texture;\n \n     HeadTexture(String texture) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzI0MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469803240", "bodyText": "This description does no cover anything about what this class (Organic Goo) is.\nIt is too generic.", "author": "TheBusyBiscuit", "createdAt": "2020-08-13T08:59:12Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.resources;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. ", "originalCommit": "a33cfdb12df9e1e37140c80aab659db4ffbfdfb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644878c534df66b83109d3fdbca408bca2ab92ba", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\nindex 0ddb8e2f8..1f5bccd98 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/resources/OrganicNetherGoo.java\n\n@@ -9,14 +9,14 @@ import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n /**\n- * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}. \n+ * This {@link SlimefunItem} can only be obtained via bartering with a {@link Piglin}, its \n+ * only current uses is the recipe for crafting the {@link RuneOfUnemployment}. \n  *\n  * @author dNiym\n  *\n  * @see PiglinBarterDrop\n  *\n  */\n-\n public class OrganicNetherGoo extends SlimefunItem implements PiglinBarterDrop {\n \n     private final ItemSetting<Integer> chance = new ItemSetting<>(\"barter-chance\", 3);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzcyOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r469803729", "bodyText": "No need to define o1 and o3 here if they are both 0...\nJust use 0.", "author": "TheBusyBiscuit", "createdAt": "2020-08-13T08:59:59Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (entity instanceof Villager) {\n+                Villager v = (Villager) entity;\n+                \n+                if(v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT)\n+                    return;\n+                \n+                if (p.getGameMode() != GameMode.CREATIVE) {\n+                    ItemUtils.consumeItem(item, false);\n+                }\n+                \n+                v.setVillagerExperience(0);\n+                v.setProfession(Profession.NONE);\n+                \n+                Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                double o1 = 0;\n+                double o2 = offset / 2;\n+                double o3 = 0;", "originalCommit": "a33cfdb12df9e1e37140c80aab659db4ffbfdfb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNTI3MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r470225270", "bodyText": "fixed", "author": "dniym", "createdAt": "2020-08-13T20:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "644878c534df66b83109d3fdbca408bca2ab92ba", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex b8718649c..661278fec 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -43,19 +43,17 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                 if(v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT)\n                     return;\n                 \n-                if (p.getGameMode() != GameMode.CREATIVE) {\n+                if (p.getGameMode() != GameMode.CREATIVE) \n                     ItemUtils.consumeItem(item, false);\n-                }\n                 \n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n                 \n                 Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n-                double o1 = 0;\n+                \n                 double o2 = offset / 2;\n-                double o3 = 0;\n-\n-                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, o1, o2, o3,0.0d);\n+                \n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, o2, 0,0.0d);\n                 v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n \n             }\n"}}, {"oid": "644878c534df66b83109d3fdbca408bca2ab92ba", "url": "https://github.com/Slimefun/Slimefun4/commit/644878c534df66b83109d3fdbca408bca2ab92ba", "message": "Made Requested Changes", "committedDate": "2020-08-13T20:21:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0NTgyOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471045829", "bodyText": "Use the primitive type double here instead of the nullable boxed version.", "author": "TheBusyBiscuit", "createdAt": "2020-08-15T23:59:09Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (entity instanceof Villager) {\n+                Villager v = (Villager) entity;\n+                \n+                if(v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT)\n+                    return;\n+                \n+                if (p.getGameMode() != GameMode.CREATIVE) \n+                    ItemUtils.consumeItem(item, false);\n+                \n+                v.setVillagerExperience(0);\n+                v.setProfession(Profession.NONE);\n+                \n+                Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);", "originalCommit": "644878c534df66b83109d3fdbca408bca2ab92ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b22bdb55ffad999d71c3c60e9cea8a5ea1042a78", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex 661278fec..774463f33 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -49,11 +49,9 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n                 \n-                Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n                 \n-                double o2 = offset / 2;\n-                \n-                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, o2, 0,0.0d);\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, offset / 2, 0,0.0d);\n                 v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n \n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0NTg2Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471045862", "bodyText": "Also I am seeing not really much of a need for this seperate variable, you can also just make offset be divided by 2 already.", "author": "TheBusyBiscuit", "createdAt": "2020-08-15T23:59:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (entity instanceof Villager) {\n+                Villager v = (Villager) entity;\n+                \n+                if(v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT)\n+                    return;\n+                \n+                if (p.getGameMode() != GameMode.CREATIVE) \n+                    ItemUtils.consumeItem(item, false);\n+                \n+                v.setVillagerExperience(0);\n+                v.setProfession(Profession.NONE);\n+                \n+                Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                \n+                double o2 = offset / 2;", "originalCommit": "644878c534df66b83109d3fdbca408bca2ab92ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b22bdb55ffad999d71c3c60e9cea8a5ea1042a78", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex 661278fec..774463f33 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -49,11 +49,9 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n                 \n-                Double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n                 \n-                double o2 = offset / 2;\n-                \n-                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, o2, 0,0.0d);\n+                v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, offset / 2, 0,0.0d);\n                 v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n \n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA0NTkwMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471045902", "bodyText": "I think the lore should probably be split into two lines, it's kinda long.", "author": "TheBusyBiscuit", "createdAt": "2020-08-16T00:00:11Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -632,6 +633,7 @@ private SlimefunItems() {}\n     public static final SlimefunItemStack LIGHTNING_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_LIGHTNING\", new ColoredFireworkStar(Color.fromRGB(255, 255, 95), \"&7Ancient Rune &8&l[&e&lLightning&8&l]\"));\n     public static final SlimefunItemStack SOULBOUND_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_SOULBOUND\", new ColoredFireworkStar(Color.fromRGB(47, 0, 117), \"&7Ancient Rune &8&l[&5&lSoulbound&8&l]\", \"&eDrop this rune onto a dropped item to\", \"&5bind &ethat item to your soul.\", \" \", \"&eIt is advised that you only use this rune\", \"&eon &6important &eitems.\", \" \", \"&eItems bound to your soul won't drop on death.\"));\n     public static final SlimefunItemStack ENCHANTMENT_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_ENCHANTMENT\", new ColoredFireworkStar(Color.fromRGB(255, 217, 25), \"&7Ancient Rune &8&l[&6&lEnchantment&8&l]\", \"&eDrop this rune onto a dropped item to\", \"&6enchant &ethat item with a random enchantment.\"));\n+    public static final SlimefunItemStack UNEMPLOYMENT_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_UNEMPLOYMENT\", new ColoredFireworkStar(Color.fromRGB(25, 27, 5), \"&7Ancient Rune &8&l[&4&lUnemployment&8&l]\", \"&eRight click an employed villager to clear their current job and trades.\"));", "originalCommit": "644878c534df66b83109d3fdbca408bca2ab92ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b22bdb55ffad999d71c3c60e9cea8a5ea1042a78", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\nindex c14f9fead..3e04d8757 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\n\n@@ -633,7 +633,7 @@ public final class SlimefunItems {\n     public static final SlimefunItemStack LIGHTNING_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_LIGHTNING\", new ColoredFireworkStar(Color.fromRGB(255, 255, 95), \"&7Ancient Rune &8&l[&e&lLightning&8&l]\"));\n     public static final SlimefunItemStack SOULBOUND_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_SOULBOUND\", new ColoredFireworkStar(Color.fromRGB(47, 0, 117), \"&7Ancient Rune &8&l[&5&lSoulbound&8&l]\", \"&eDrop this rune onto a dropped item to\", \"&5bind &ethat item to your soul.\", \" \", \"&eIt is advised that you only use this rune\", \"&eon &6important &eitems.\", \" \", \"&eItems bound to your soul won't drop on death.\"));\n     public static final SlimefunItemStack ENCHANTMENT_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_ENCHANTMENT\", new ColoredFireworkStar(Color.fromRGB(255, 217, 25), \"&7Ancient Rune &8&l[&6&lEnchantment&8&l]\", \"&eDrop this rune onto a dropped item to\", \"&6enchant &ethat item with a random enchantment.\"));\n-    public static final SlimefunItemStack UNEMPLOYMENT_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_UNEMPLOYMENT\", new ColoredFireworkStar(Color.fromRGB(25, 27, 5), \"&7Ancient Rune &8&l[&4&lUnemployment&8&l]\", \"&eRight click an employed villager to clear their current job and trades.\"));\n+    public static final SlimefunItemStack UNEMPLOYMENT_RUNE = new SlimefunItemStack(\"ANCIENT_RUNE_UNEMPLOYMENT\", new ColoredFireworkStar(Color.fromRGB(25, 27, 5), \"&7Ancient Rune &8&l[&4&lUnemployment&8&l]\", \"&eRight click an employed villager to clear\", \"&etheir current job and trades.\"));\n \n     /* Electricity */\n     public static final SlimefunItemStack SOLAR_GENERATOR = new SlimefunItemStack(\"SOLAR_GENERATOR\", Material.DAYLIGHT_DETECTOR, \"&bSolar Generator\", \"\", LoreBuilder.machine(MachineTier.BASIC, MachineType.GENERATOR), LoreBuilder.powerBuffer(0), LoreBuilder.powerPerSecond(4));\n"}}, {"oid": "b22bdb55ffad999d71c3c60e9cea8a5ea1042a78", "url": "https://github.com/Slimefun/Slimefun4/commit/b22bdb55ffad999d71c3c60e9cea8a5ea1042a78", "message": "Made requested changes", "committedDate": "2020-08-16T17:33:36Z", "type": "commit"}, {"oid": "45b63a149b7062d0c2aa08cce722edafd9b97516", "url": "https://github.com/Slimefun/Slimefun4/commit/45b63a149b7062d0c2aa08cce722edafd9b97516", "message": "Update HeadTexture.java\n\nResolved Merge Conflict 1", "committedDate": "2020-08-16T17:45:18Z", "type": "commit"}, {"oid": "42e4b1620d5c1612d7ab37b1983ec5d4cfb1cd9a", "url": "https://github.com/Slimefun/Slimefun4/commit/42e4b1620d5c1612d7ab37b1983ec5d4cfb1cd9a", "message": "Update SlimefunItemSetup.java\n\nFixed merge conflict 2", "committedDate": "2020-08-16T17:52:09Z", "type": "commit"}, {"oid": "c98fe74ea9fb49a1edb6cea3d11ff07e3ff2fa3c", "url": "https://github.com/Slimefun/Slimefun4/commit/c98fe74ea9fb49a1edb6cea3d11ff07e3ff2fa3c", "message": "Merge branch 'master' into NitwitRune", "committedDate": "2020-08-16T22:25:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNTI3Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471315273", "bodyText": "this can just be nextDouble(0.5)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n          \n          \n            \n                            double offset = ThreadLocalRandom.current().nextDouble(0.5);", "author": "WalshyDev", "createdAt": "2020-08-17T08:15:31Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (entity instanceof Villager) {\n+                Villager v = (Villager) entity;\n+                \n+                if(v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT)\n+                    return;\n+                \n+                if (p.getGameMode() != GameMode.CREATIVE) \n+                    ItemUtils.consumeItem(item, false);\n+                \n+                v.setVillagerExperience(0);\n+                v.setProfession(Profession.NONE);\n+                \n+                double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);", "originalCommit": "c98fe74ea9fb49a1edb6cea3d11ff07e3ff2fa3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f6f039ec07590ea36b669e11d871c67608b504", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex 774463f33..28f4ba933 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -49,7 +49,7 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n                 \n-                double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                double offset = ThreadLocalRandom.current().nextDouble(0.5);\n                 \n                 v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, offset / 2, 0,0.0d);\n                 v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNTgyNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471315824", "bodyText": "Add braces around the body, one line with braces is consistent with rest of code\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (p.getGameMode() != GameMode.CREATIVE) \n          \n          \n            \n                                ItemUtils.consumeItem(item, false);\n          \n          \n            \n                            \n          \n          \n            \n                            if (p.getGameMode() != GameMode.CREATIVE) {\n          \n          \n            \n                                ItemUtils.consumeItem(item, false);\n          \n          \n            \n                            }", "author": "WalshyDev", "createdAt": "2020-08-17T08:16:28Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (entity instanceof Villager) {\n+                Villager v = (Villager) entity;\n+                \n+                if(v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT)\n+                    return;\n+                \n+                if (p.getGameMode() != GameMode.CREATIVE) \n+                    ItemUtils.consumeItem(item, false);\n+                ", "originalCommit": "c98fe74ea9fb49a1edb6cea3d11ff07e3ff2fa3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f6f039ec07590ea36b669e11d871c67608b504", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex 774463f33..28f4ba933 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -49,7 +49,7 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n                 \n-                double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                double offset = ThreadLocalRandom.current().nextDouble(0.5);\n                 \n                 v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, offset / 2, 0,0.0d);\n                 v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNjAyNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471316025", "bodyText": "Inconsistent formatting, space after if and braces for the body\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT)\n          \n          \n            \n                                return;\n          \n          \n            \n                            \n          \n          \n            \n                            if (v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }", "author": "WalshyDev", "createdAt": "2020-08-17T08:16:49Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (entity instanceof Villager) {\n+                Villager v = (Villager) entity;\n+                \n+                if(v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT)\n+                    return;\n+                ", "originalCommit": "c98fe74ea9fb49a1edb6cea3d11ff07e3ff2fa3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f6f039ec07590ea36b669e11d871c67608b504", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex 774463f33..28f4ba933 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -49,7 +49,7 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n                 \n-                double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                double offset = ThreadLocalRandom.current().nextDouble(0.5);\n                 \n                 v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, offset / 2, 0,0.0d);\n                 v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNjUxMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471336511", "bodyText": "Invalid parameters here. Should use something like this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (p, entity, item, offhand) -> {\n          \n          \n            \n                        if (entity instanceof Villager) {\n          \n          \n            \n                            Villager v = (Villager) entity;\n          \n          \n            \n                    return (e, item, offhand) -> {\n          \n          \n            \n                        if (e.getRightClicked() instanceof Villager) {\n          \n          \n            \n                            Villager v = (Villager) e.getRightClicked();", "author": "poma123", "createdAt": "2020-08-17T08:54:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (p, entity, item, offhand) -> {\n+            if (entity instanceof Villager) {\n+                Villager v = (Villager) entity;", "originalCommit": "c98fe74ea9fb49a1edb6cea3d11ff07e3ff2fa3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f6f039ec07590ea36b669e11d871c67608b504", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex 774463f33..28f4ba933 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -49,7 +49,7 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                 v.setVillagerExperience(0);\n                 v.setProfession(Profession.NONE);\n                 \n-                double offset = ThreadLocalRandom.current().nextDouble(0, 0.5);\n+                double offset = ThreadLocalRandom.current().nextDouble(0.5);\n                 \n                 v.getWorld().spawnParticle(Particle.CRIMSON_SPORE, v.getLocation(), 10, 0, offset / 2, 0,0.0d);\n                 v.getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, v.getLocation(), 5, 0.04d, 1d, 0.04d);    \n"}}, {"oid": "33f6f039ec07590ea36b669e11d871c67608b504", "url": "https://github.com/Slimefun/Slimefun4/commit/33f6f039ec07590ea36b669e11d871c67608b504", "message": "Added Walshys suggested change\n\nCo-authored-by: Daniel Walsh <walshydev@gmail.com>", "committedDate": "2020-08-17T11:29:44Z", "type": "commit"}, {"oid": "07c62d59328db17d737886db2f68ee56c1c91d0a", "url": "https://github.com/Slimefun/Slimefun4/commit/07c62d59328db17d737886db2f68ee56c1c91d0a", "message": "Added Walshys suggested change\n\nCo-authored-by: Daniel Walsh <walshydev@gmail.com>", "committedDate": "2020-08-17T11:29:54Z", "type": "commit"}, {"oid": "0f73b62658ffaba00e77529db5720f788dabee38", "url": "https://github.com/Slimefun/Slimefun4/commit/0f73b62658ffaba00e77529db5720f788dabee38", "message": "Added Walshys suggested change\n\nCo-authored-by: Daniel Walsh <walshydev@gmail.com>", "committedDate": "2020-08-17T11:30:03Z", "type": "commit"}, {"oid": "a10813036bd57b2da1a3c8e8ce8b14c359558fa9", "url": "https://github.com/Slimefun/Slimefun4/commit/a10813036bd57b2da1a3c8e8ce8b14c359558fa9", "message": "Added poma's suggested change\n\nCo-authored-by: poma123 <25465545+poma123@users.noreply.github.com>", "committedDate": "2020-08-17T11:30:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNzA5NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471417095", "bodyText": "Why would you reference \"ItemHandler\" here?", "author": "TheBusyBiscuit", "createdAt": "2020-08-17T11:31:52Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler", "originalCommit": "a10813036bd57b2da1a3c8e8ce8b14c359558fa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgxOTkxMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471819911", "bodyText": "I am not entirely sure, I based this off of the RandomMobDrop item that I had already done and it did use the ItemHandler, probably leftover from the NotPlacable reference.   Would a @see EntityInteractHandler be more appropriate?", "author": "dniym", "createdAt": "2020-08-17T23:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNzA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyMDIxMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471820212", "bodyText": "er or maybe I did it because of the -> getItemHandler() call", "author": "dniym", "createdAt": "2020-08-17T23:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNzA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTQwOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r472039408", "bodyText": "EntityInteractHandler would probably be more appropriate.\nNot sure if we really need any see tag here though in the first place.", "author": "TheBusyBiscuit", "createdAt": "2020-08-18T09:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNzA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMDk5MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r472430990", "bodyText": "done", "author": "dniym", "createdAt": "2020-08-18T19:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNzA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb47574fe8f910c72987c58479978ff9a9e36fa4", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex 8d5bec5fe..1622099da 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -44,7 +44,7 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                     return;\n                 }\n \n-                if (p.getGameMode() != GameMode.CREATIVE) {\n+                if (e.getPlayer().getGameMode() != GameMode.CREATIVE) {\n                     ItemUtils.consumeItem(item, false);\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNDU0Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2220#discussion_r471514542", "bodyText": "Also\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (p.getGameMode() != GameMode.CREATIVE) {\n          \n          \n            \n                            if (e.getPlayer().getGameMode() != GameMode.CREATIVE) {", "author": "poma123", "createdAt": "2020-08-17T14:24:05Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.entity.Villager;\n+import org.bukkit.entity.Villager.Profession;\n+import org.bukkit.entity.WanderingTrader;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.Merchant;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to reset a {@link Villager} profession. \n+ * Useful to reset a villager who does not have desirable trades.\n+ *\n+ * @author dNiym\n+ *\n+ * @see ItemHandler\n+ *\n+ */\n+public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler> {\n+\n+    public RuneOfUnemployment(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    public EntityInteractHandler getItemHandler() {\n+        return (e, item, offhand) -> {\n+            if (e.getRightClicked() instanceof Villager) {\n+                Villager v = (Villager) e.getRightClicked();\n+                \n+                if (v.getProfession() == Profession.NONE || v.getProfession() == Profession.NITWIT) {\n+                    return;\n+                }\n+\n+                if (p.getGameMode() != GameMode.CREATIVE) {", "originalCommit": "a10813036bd57b2da1a3c8e8ce8b14c359558fa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb47574fe8f910c72987c58479978ff9a9e36fa4", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\nindex 8d5bec5fe..1622099da 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/RuneOfUnemployment.java\n\n@@ -44,7 +44,7 @@ public class RuneOfUnemployment extends SimpleSlimefunItem<EntityInteractHandler\n                     return;\n                 }\n \n-                if (p.getGameMode() != GameMode.CREATIVE) {\n+                if (e.getPlayer().getGameMode() != GameMode.CREATIVE) {\n                     ItemUtils.consumeItem(item, false);\n                 }\n \n"}}, {"oid": "fb47574fe8f910c72987c58479978ff9a9e36fa4", "url": "https://github.com/Slimefun/Slimefun4/commit/fb47574fe8f910c72987c58479978ff9a9e36fa4", "message": "Added poma's requested change\n\nCo-authored-by: poma123 <25465545+poma123@users.noreply.github.com>", "committedDate": "2020-08-17T14:27:26Z", "type": "commit"}, {"oid": "e13e7e1400a8ef75b096b2fefd048feb0572e1f6", "url": "https://github.com/Slimefun/Slimefun4/commit/e13e7e1400a8ef75b096b2fefd048feb0572e1f6", "message": "Update RuneOfUnemployment.java\n\nmade requested changes", "committedDate": "2020-08-18T19:30:12Z", "type": "commit"}]}