{"pr_number": 2487, "pr_title": "Furnace based machines could no longer be used as vanilla furnace with the hoppers.", "pr_createdAt": "2020-10-19T15:36:05Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2487", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MjgzNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r507852836", "bodyText": "never ever static import", "author": "J3fftw1", "createdAt": "2020-10-19T15:38:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java", "diffHunk": "@@ -13,6 +13,7 @@\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.*;", "originalCommit": "bfed1f938606608f9580ca90346172197cb680ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDg0NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r508360845", "bodyText": "From now NEVER! :D", "author": "CURVX", "createdAt": "2020-10-20T09:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MjgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NTkxNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r508375915", "bodyText": ":PanLove:", "author": "J3fftw1", "createdAt": "2020-10-20T10:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MjgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c4f248ae55720623c632f7463a29846bd9d1f33b", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java\nindex d58412b59..984628c1e 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java\n\n@@ -13,7 +13,6 @@ import java.util.stream.Collectors;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.*;\n import org.apache.commons.lang.Validate;\n import org.bukkit.Bukkit;\n import org.bukkit.Server;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2MTAwOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r507861008", "bodyText": "not sure if this adds all furnace type machines but for slimefun it self you forgot Electric furnace and Electric Smeltery\nit would be nice if this blocks it for all Furnace type machines even for addons.", "author": "J3fftw1", "createdAt": "2020-10-19T15:47:38Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ItemMoveListener.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.util.logging.Level;\n+\n+public class ItemMoveListener implements Listener {\n+\n+    public ItemMoveListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onItemMove(InventoryMoveItemEvent e) {\n+        Location loc = e.getDestination().getLocation();\n+        if (loc != null && BlockStorage.hasBlockInfo(loc)) {\n+            if (BlockStorage.check(loc, SlimefunItems.ELECTRIC_ORE_GRINDER.getItemId())) {", "originalCommit": "bfed1f938606608f9580ca90346172197cb680ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MzkyNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r508363927", "bodyText": "Yes, I will be adding the rest and excluding the Enchanced Furnaces. I don't know how to though without making it messy. Will look through the codebase to get an idea.", "author": "CURVX", "createdAt": "2020-10-20T09:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2MTAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "c4f248ae55720623c632f7463a29846bd9d1f33b", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ItemMoveListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/FurnaceListener.java\nsimilarity index 51%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ItemMoveListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/FurnaceListener.java\nindex 7db26fb78..93bfabe22 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ItemMoveListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/FurnaceListener.java\n\n@@ -1,31 +1,38 @@\n-package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n \n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.BlockStorage;\n import org.bukkit.Bukkit;\n import org.bukkit.Location;\n+import org.bukkit.block.Furnace;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+import org.bukkit.inventory.InventoryView;\n \n import javax.annotation.Nonnull;\n \n import java.util.logging.Level;\n \n-public class ItemMoveListener implements Listener {\n+public class FurnaceListener implements SlimefunCraftingListener {\n \n-    public ItemMoveListener(@Nonnull SlimefunPlugin plugin) {\n+    public FurnaceListener(@Nonnull SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n     }\n \n     @EventHandler\n-    public void onItemMove(InventoryMoveItemEvent e) {\n+    public void onFurnace(InventoryMoveItemEvent e) {\n         Location loc = e.getDestination().getLocation();\n         if (loc != null && BlockStorage.hasBlockInfo(loc)) {\n-            if (BlockStorage.check(loc, SlimefunItems.ELECTRIC_ORE_GRINDER.getItemId())) {\n-                Bukkit.getLogger().log(Level.INFO, \"Cancelling Event!\");\n-                e.setCancelled(true);\n+            Furnace furnace = (Furnace) e.getDestination().getHolder();\n+            if (furnace.getCustomName() != null) {\n+                if (furnace.getCustomName().contains(\"Electric\")) {\n+                    Bukkit.getLogger().log(Level.INFO, \"Contains Electric!\");\n+                    e.setCancelled(true);\n+                }\n             }\n         }\n     }\n"}}, {"oid": "c4f248ae55720623c632f7463a29846bd9d1f33b", "url": "https://github.com/Slimefun/Slimefun4/commit/c4f248ae55720623c632f7463a29846bd9d1f33b", "message": "FurnaceListener", "committedDate": "2020-10-25T06:10:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5MDg0OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r512690849", "bodyText": "Yes thjs would work but wouldn't it be really tedious to keep adding machines to this that are also furnaces i think the best way to do this is to check if its a furnace and it has an id then cancel the event", "author": "J3fftw1", "createdAt": "2020-10-27T13:28:57Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/FurnaceListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+public class FurnaceListener implements SlimefunCraftingListener {\n+\n+    public FurnaceListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onFurnace(InventoryMoveItemEvent e) {\n+        Location loc = e.getDestination().getLocation();\n+        if (loc != null && BlockStorage.hasBlockInfo(loc) && e.getSource().getType() == InventoryType.HOPPER) {\n+            boolean isElectricOreGrinder = BlockStorage.check(loc, SlimefunItems.ELECTRIC_ORE_GRINDER.getItemId()) || BlockStorage.check(loc, SlimefunItems.ELECTRIC_ORE_GRINDER_2.getItemId());", "originalCommit": "7c6f159f3e89df8dd035d213751e6273822cb657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4MTM5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r512781396", "bodyText": "Now that you pointed it out, yes this would be tedious to manage. The way you suggested, won't this affect enhanced, reinforced and carbonado furnaces? Also, won't this cause issue for other furnace based addon machines which wants to retain this \"cooking/smelting\" functionality?", "author": "CURVX", "createdAt": "2020-10-27T15:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5MDg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4MzU2OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r512783569", "bodyText": "Then maybe some sort of implementation if you want it toggled on or off\nThen people can decide thereself?\nJust throwing in ideas", "author": "J3fftw1", "createdAt": "2020-10-27T15:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5MDg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NDU4MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r514054581", "bodyText": "How about an abstract class SlimefunContainer extending AContainer and then extending the SlimefunContainer in all those furnace based machines which extends AContainer and the listener cancels the InventoryMoveItemEvent from hopper if the destination block is an instance of SlimefunContainer?\nTL;DR: Like Fluffy did in commit NCBPFluffyBear/FluffyMachines@52b6fec", "author": "CURVX", "createdAt": "2020-10-29T07:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5MDg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MTM3NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r522861375", "bodyText": "That could work aswell", "author": "J3fftw1", "createdAt": "2020-11-13T10:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5MDg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd461a6f88af840768886173e86346a73b4ba781", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/FurnaceListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/FurnaceListener.java\ndeleted file mode 100644\nindex 951fca014..000000000\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/FurnaceListener.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n-\n-import javax.annotation.Nonnull;\n-\n-import org.bukkit.Location;\n-import org.bukkit.event.EventHandler;\n-import org.bukkit.event.inventory.InventoryMoveItemEvent;\n-import org.bukkit.event.inventory.InventoryType;\n-\n-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n-import me.mrCookieSlime.Slimefun.api.BlockStorage;\n-\n-public class FurnaceListener implements SlimefunCraftingListener {\n-\n-    public FurnaceListener(@Nonnull SlimefunPlugin plugin) {\n-        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n-    }\n-\n-    @EventHandler\n-    public void onFurnace(InventoryMoveItemEvent e) {\n-        Location loc = e.getDestination().getLocation();\n-        if (loc != null && BlockStorage.hasBlockInfo(loc) && e.getSource().getType() == InventoryType.HOPPER) {\n-            boolean isElectricOreGrinder = BlockStorage.check(loc, SlimefunItems.ELECTRIC_ORE_GRINDER.getItemId()) || BlockStorage.check(loc, SlimefunItems.ELECTRIC_ORE_GRINDER_2.getItemId());\n-            boolean isElectricFurnace =  BlockStorage.check(loc, SlimefunItems.ELECTRIC_FURNACE.getItemId()) || BlockStorage.check(loc, SlimefunItems.ELECTRIC_FURNACE_2.getItemId()) || BlockStorage.check(loc, SlimefunItems.ELECTRIC_FURNACE_3.getItemId());\n-            boolean isElectricSmeltery = BlockStorage.check(loc, SlimefunItems.ELECTRIC_SMELTERY.getItemId()) || BlockStorage.check(loc, SlimefunItems.ELECTRIC_SMELTERY_2.getItemId());\n-            boolean isElectricIngotPulverlizer = BlockStorage.check(loc, SlimefunItems.ELECTRIC_INGOT_PULVERIZER.getItemId());\n-\n-            if (isElectricOreGrinder || isElectricFurnace || isElectricSmeltery || isElectricIngotPulverlizer) {\n-                e.setCancelled(true);\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"oid": "bd461a6f88af840768886173e86346a73b4ba781", "url": "https://github.com/Slimefun/Slimefun4/commit/bd461a6f88af840768886173e86346a73b4ba781", "message": "Merge pull request #5 from Slimefun/master\n\n[CI skip] Update fork", "committedDate": "2020-11-12T12:40:00Z", "type": "commit"}, {"oid": "527dfb2b796504b770413ff07f6fbff7107feacd", "url": "https://github.com/Slimefun/Slimefun4/commit/527dfb2b796504b770413ff07f6fbff7107feacd", "message": "Been a while", "committedDate": "2020-11-12T16:50:36Z", "type": "commit"}, {"oid": "527dfb2b796504b770413ff07f6fbff7107feacd", "url": "https://github.com/Slimefun/Slimefun4/commit/527dfb2b796504b770413ff07f6fbff7107feacd", "message": "Been a while", "committedDate": "2020-11-12T16:50:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzMjA5Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r528032092", "bodyText": "Remove this empty line.", "author": "TheBusyBiscuit", "createdAt": "2020-11-21T00:03:22Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.VanillaContainer;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to a\n+ * {@link VanillaContainer} using a hopper.\n+ *\n+ */\n+", "originalCommit": "527dfb2b796504b770413ff07f6fbff7107feacd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f385cdc8d7c7202dbd9aa0fa2b8d3aa26695083", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\nindex fd12aa234..5d62a2131 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n\n@@ -2,6 +2,7 @@ package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n \n import javax.annotation.Nonnull;\n \n+import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n import org.bukkit.Location;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzMjExOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r528032118", "bodyText": "Missing @author tag.", "author": "TheBusyBiscuit", "createdAt": "2020-11-21T00:03:31Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.VanillaContainer;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to a\n+ * {@link VanillaContainer} using a hopper.\n+ *", "originalCommit": "527dfb2b796504b770413ff07f6fbff7107feacd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f385cdc8d7c7202dbd9aa0fa2b8d3aa26695083", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\nindex fd12aa234..5d62a2131 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n\n@@ -2,6 +2,7 @@ package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n \n import javax.annotation.Nonnull;\n \n+import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n import org.bukkit.Location;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzMjQ4Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r528032486", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (e.getSource().getType() == InventoryType.HOPPER && loc != null && BlockStorage.hasBlockInfo(loc)) {\n          \n          \n            \n                        if (BlockStorage.check(loc.getBlock()) instanceof VanillaContainer) {\n          \n          \n            \n                    if (e.getSource().getType() == InventoryType.HOPPER && loc != null && BlockStorage.hasBlockInfo(loc)) {\n          \n          \n            \n                        if (BlockStorage.check(loc.getBlock()) instanceof VanillaContainer) {\n          \n      \n    \n    \n  \n\nNo need to nest this here, connect the two with &&.\nAlso, it would be redundant to do hasBlockInfo and check().\nThe check value on its own will work already since it would be null otherwise.", "author": "TheBusyBiscuit", "createdAt": "2020-11-21T00:04:48Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.VanillaContainer;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to a\n+ * {@link VanillaContainer} using a hopper.\n+ *\n+ */\n+\n+public class HopperListener implements SlimefunCraftingListener {\n+\n+    public HopperListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void fromHopper(InventoryMoveItemEvent e) {\n+        Location loc = e.getDestination().getLocation();\n+        if (e.getSource().getType() == InventoryType.HOPPER && loc != null && BlockStorage.hasBlockInfo(loc)) {\n+            if (BlockStorage.check(loc.getBlock()) instanceof VanillaContainer) {", "originalCommit": "527dfb2b796504b770413ff07f6fbff7107feacd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f385cdc8d7c7202dbd9aa0fa2b8d3aa26695083", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\nindex fd12aa234..5d62a2131 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n\n@@ -2,6 +2,7 @@ package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n \n import javax.annotation.Nonnull;\n \n+import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n import org.bukkit.Location;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzMjU4Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r528032587", "bodyText": "Please follow the method naming convention, onHopperInsert for example.", "author": "TheBusyBiscuit", "createdAt": "2020-11-21T00:05:13Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.VanillaContainer;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to a\n+ * {@link VanillaContainer} using a hopper.\n+ *\n+ */\n+\n+public class HopperListener implements SlimefunCraftingListener {\n+\n+    public HopperListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void fromHopper(InventoryMoveItemEvent e) {", "originalCommit": "527dfb2b796504b770413ff07f6fbff7107feacd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f385cdc8d7c7202dbd9aa0fa2b8d3aa26695083", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\nindex fd12aa234..5d62a2131 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n\n@@ -2,6 +2,7 @@ package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n \n import javax.annotation.Nonnull;\n \n+import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n import org.bukkit.Location;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzMjY1OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r528032658", "bodyText": "Do not use this package.", "author": "TheBusyBiscuit", "createdAt": "2020-11-21T00:05:26Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/abstractItems/VanillaContainer.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems;", "originalCommit": "527dfb2b796504b770413ff07f6fbff7107feacd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f385cdc8d7c7202dbd9aa0fa2b8d3aa26695083", "chunk": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/abstractItems/VanillaContainer.java b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/abstractItems/VanillaContainer.java\ndeleted file mode 100644\nindex aef1de788..000000000\n--- a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/abstractItems/VanillaContainer.java\n+++ /dev/null\n\n@@ -1,17 +0,0 @@\n-package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems;\n-\n-import javax.annotation.ParametersAreNonnullByDefault;\n-\n-import org.bukkit.inventory.ItemStack;\n-\n-import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n-import me.mrCookieSlime.Slimefun.Objects.Category;\n-import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n-\n-public abstract class VanillaContainer extends AContainer {\n-\n-    @ParametersAreNonnullByDefault\n-    public VanillaContainer(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n-        super(category, item, recipeType, recipe);\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzMjc2OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r528032768", "bodyText": "Missing javadocs, also not the best name. The name could imply different stuff and it's even worse without the docs.", "author": "TheBusyBiscuit", "createdAt": "2020-11-21T00:05:57Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/abstractItems/VanillaContainer.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems;\n+\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+import org.bukkit.inventory.ItemStack;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public abstract class VanillaContainer extends AContainer {", "originalCommit": "527dfb2b796504b770413ff07f6fbff7107feacd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f385cdc8d7c7202dbd9aa0fa2b8d3aa26695083", "chunk": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/abstractItems/VanillaContainer.java b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/abstractItems/VanillaContainer.java\ndeleted file mode 100644\nindex aef1de788..000000000\n--- a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/abstractItems/VanillaContainer.java\n+++ /dev/null\n\n@@ -1,17 +0,0 @@\n-package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems;\n-\n-import javax.annotation.ParametersAreNonnullByDefault;\n-\n-import org.bukkit.inventory.ItemStack;\n-\n-import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n-import me.mrCookieSlime.Slimefun.Objects.Category;\n-import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n-\n-public abstract class VanillaContainer extends AContainer {\n-\n-    @ParametersAreNonnullByDefault\n-    public VanillaContainer(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n-        super(category, item, recipeType, recipe);\n-    }\n-}\n\\ No newline at end of file\n"}}, {"oid": "7f385cdc8d7c7202dbd9aa0fa2b8d3aa26695083", "url": "https://github.com/Slimefun/Slimefun4/commit/7f385cdc8d7c7202dbd9aa0fa2b8d3aa26695083", "message": "Formatting changes", "committedDate": "2020-11-21T16:47:55Z", "type": "commit"}, {"oid": "5e0e9d54901ffe3f25a87f343fea201b5ac583cb", "url": "https://github.com/Slimefun/Slimefun4/commit/5e0e9d54901ffe3f25a87f343fea201b5ac583cb", "message": "Merge branch 'master' into fix/sf-machine-hopper", "committedDate": "2020-11-21T16:51:34Z", "type": "commit"}, {"oid": "ef09b03af4a0da9a7336870a90c9b8fcd9464c4f", "url": "https://github.com/Slimefun/Slimefun4/commit/ef09b03af4a0da9a7336870a90c9b8fcd9464c4f", "message": "Blank line", "committedDate": "2020-11-21T17:21:14Z", "type": "commit"}, {"oid": "0c1485aa7c48f1f94973c898f9116df6bd0539d9", "url": "https://github.com/Slimefun/Slimefun4/commit/0c1485aa7c48f1f94973c898f9116df6bd0539d9", "message": "Merge branch 'master' into fix/sf-machine-hopper", "committedDate": "2020-12-09T17:42:42Z", "type": "commit"}, {"oid": "ac09d96b409d32aaab40351f7256601c6f5fcca7", "url": "https://github.com/Slimefun/Slimefun4/commit/ac09d96b409d32aaab40351f7256601c6f5fcca7", "message": "Merge branch 'master' into fix/sf-machine-hopper", "committedDate": "2020-12-22T21:02:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNjkwNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r552906904", "bodyText": "Why does this implement the SlimefunCraftingListener...?\nIt doesn't have anything to do with crafting...?", "author": "TheBusyBiscuit", "createdAt": "2021-01-06T19:03:50Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+\n+import javax.annotation.Nonnull;\n+\n+import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to a\n+ * {@link AbstractVanillaBlockInventory} using a hopper.\n+ *\n+ * @author CURVX\n+ *\n+ */\n+public class HopperListener implements SlimefunCraftingListener {", "originalCommit": "ac09d96b409d32aaab40351f7256601c6f5fcca7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3b7a22ee93730348d2b485f13a0c658543d8afb", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nsimilarity index 71%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nindex e43c56c7a..b205c52fa 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\n\n@@ -1,25 +1,26 @@\n-package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n \n import javax.annotation.Nonnull;\n \n-import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;\n import org.bukkit.Location;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n import org.bukkit.event.inventory.InventoryMoveItemEvent;\n import org.bukkit.event.inventory.InventoryType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n \n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.api.BlockStorage;\n \n /**\n  * This {@link Listener} prevents item from being transferred to a\n- * {@link AbstractVanillaBlockInventory} using a hopper.\n+ * {@link AContainer} using a hopper.\n  *\n  * @author CURVX\n  *\n  */\n-public class HopperListener implements SlimefunCraftingListener {\n+public class HopperListener implements Listener {\n \n     public HopperListener(@Nonnull SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNjk1NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r552906955", "bodyText": "indentation", "author": "TheBusyBiscuit", "createdAt": "2021-01-06T19:03:56Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+\n+import javax.annotation.Nonnull;\n+\n+import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to a\n+ * {@link AbstractVanillaBlockInventory} using a hopper.\n+ *\n+ * @author CURVX\n+ *\n+ */\n+public class HopperListener implements SlimefunCraftingListener {\n+\n+    public HopperListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onHopperInsert(InventoryMoveItemEvent e) {\n+        Location loc = e.getDestination().getLocation();\n+        if (e.getSource().getType() == InventoryType.HOPPER && loc != null && BlockStorage.check(loc.getBlock()) instanceof AbstractVanillaBlockInventory) {\n+                e.setCancelled(true);", "originalCommit": "ac09d96b409d32aaab40351f7256601c6f5fcca7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3b7a22ee93730348d2b485f13a0c658543d8afb", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nsimilarity index 71%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nindex e43c56c7a..b205c52fa 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\n\n@@ -1,25 +1,26 @@\n-package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n \n import javax.annotation.Nonnull;\n \n-import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;\n import org.bukkit.Location;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n import org.bukkit.event.inventory.InventoryMoveItemEvent;\n import org.bukkit.event.inventory.InventoryType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n \n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.api.BlockStorage;\n \n /**\n  * This {@link Listener} prevents item from being transferred to a\n- * {@link AbstractVanillaBlockInventory} using a hopper.\n+ * {@link AContainer} using a hopper.\n  *\n  * @author CURVX\n  *\n  */\n-public class HopperListener implements SlimefunCraftingListener {\n+public class HopperListener implements Listener {\n \n     public HopperListener(@Nonnull SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNzAzNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r552907035", "bodyText": "Why the crafting package?", "author": "TheBusyBiscuit", "createdAt": "2021-01-06T19:04:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;", "originalCommit": "ac09d96b409d32aaab40351f7256601c6f5fcca7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3b7a22ee93730348d2b485f13a0c658543d8afb", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nsimilarity index 71%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nindex e43c56c7a..b205c52fa 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\n\n@@ -1,25 +1,26 @@\n-package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n \n import javax.annotation.Nonnull;\n \n-import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;\n import org.bukkit.Location;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n import org.bukkit.event.inventory.InventoryMoveItemEvent;\n import org.bukkit.event.inventory.InventoryType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n \n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.api.BlockStorage;\n \n /**\n  * This {@link Listener} prevents item from being transferred to a\n- * {@link AbstractVanillaBlockInventory} using a hopper.\n+ * {@link AContainer} using a hopper.\n  *\n  * @author CURVX\n  *\n  */\n-public class HopperListener implements SlimefunCraftingListener {\n+public class HopperListener implements Listener {\n \n     public HopperListener(@Nonnull SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNzY2OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r552907668", "bodyText": "There is no reason for this to be an actual class, this could be handled via an interface. Then again, why do we need to differentiate here anyway? We could use any AContainer for this, couldn't we?", "author": "TheBusyBiscuit", "createdAt": "2021-01-06T19:05:21Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/inventory/AbstractVanillaBlockInventory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.api.inventory;\n+\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.AutoBrewer;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.AutoDrier;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricFurnace;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricIngotPulverizer;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricOreGrinder;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricSmeltery;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link AbstractVanillaBlockInventory} is an\n+ * implementation of {@link AContainer} for machines that use\n+ * a vanilla block inventory holder.\n+ *\n+ * @author CURVX\n+ *\n+ * @see AutoBrewer\n+ * @see AutoDrier\n+ * @see ElectricFurnace\n+ * @see ElectricIngotPulverizer\n+ * @see ElectricOreGrinder\n+ * @see ElectricSmeltery\n+ *\n+ */\n+public abstract class AbstractVanillaBlockInventory extends AContainer {\n+\n+    @ParametersAreNonnullByDefault\n+    public AbstractVanillaBlockInventory(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+}", "originalCommit": "ac09d96b409d32aaab40351f7256601c6f5fcca7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3b7a22ee93730348d2b485f13a0c658543d8afb", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/api/inventory/AbstractVanillaBlockInventory.java b/src/main/java/io/github/thebusybiscuit/slimefun4/api/inventory/AbstractVanillaBlockInventory.java\ndeleted file mode 100644\nindex c4d3002f3..000000000\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/api/inventory/AbstractVanillaBlockInventory.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-package io.github.thebusybiscuit.slimefun4.api.inventory;\n-\n-import javax.annotation.ParametersAreNonnullByDefault;\n-\n-import org.bukkit.inventory.ItemStack;\n-\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.AutoBrewer;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.AutoDrier;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricFurnace;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricIngotPulverizer;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricOreGrinder;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricSmeltery;\n-import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n-import me.mrCookieSlime.Slimefun.Objects.Category;\n-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n-import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n-\n-/**\n- * The {@link AbstractVanillaBlockInventory} is an\n- * implementation of {@link AContainer} for machines that use\n- * a vanilla block inventory holder.\n- *\n- * @author CURVX\n- *\n- * @see AutoBrewer\n- * @see AutoDrier\n- * @see ElectricFurnace\n- * @see ElectricIngotPulverizer\n- * @see ElectricOreGrinder\n- * @see ElectricSmeltery\n- *\n- */\n-public abstract class AbstractVanillaBlockInventory extends AContainer {\n-\n-    @ParametersAreNonnullByDefault\n-    public AbstractVanillaBlockInventory(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n-        super(category, item, recipeType, recipe);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwODAzOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r552908039", "bodyText": "What about the other direction? Pulling from such an inventory", "author": "TheBusyBiscuit", "createdAt": "2021-01-06T19:06:09Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+\n+import javax.annotation.Nonnull;\n+\n+import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to a\n+ * {@link AbstractVanillaBlockInventory} using a hopper.\n+ *\n+ * @author CURVX\n+ *\n+ */\n+public class HopperListener implements SlimefunCraftingListener {\n+\n+    public HopperListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onHopperInsert(InventoryMoveItemEvent e) {\n+        Location loc = e.getDestination().getLocation();\n+        if (e.getSource().getType() == InventoryType.HOPPER && loc != null && BlockStorage.check(loc.getBlock()) instanceof AbstractVanillaBlockInventory) {\n+                e.setCancelled(true);\n+        }", "originalCommit": "ac09d96b409d32aaab40351f7256601c6f5fcca7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk2ODM1NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r555968355", "bodyText": "Sorry, I didn't get what you meant here.", "author": "CURVX", "createdAt": "2021-01-12T17:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwODAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3b7a22ee93730348d2b485f13a0c658543d8afb", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nsimilarity index 71%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nindex e43c56c7a..b205c52fa 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/crafting/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\n\n@@ -1,25 +1,26 @@\n-package io.github.thebusybiscuit.slimefun4.implementation.listeners.crafting;\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n \n import javax.annotation.Nonnull;\n \n-import io.github.thebusybiscuit.slimefun4.api.inventory.AbstractVanillaBlockInventory;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;\n import org.bukkit.Location;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n import org.bukkit.event.inventory.InventoryMoveItemEvent;\n import org.bukkit.event.inventory.InventoryType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n \n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.api.BlockStorage;\n \n /**\n  * This {@link Listener} prevents item from being transferred to a\n- * {@link AbstractVanillaBlockInventory} using a hopper.\n+ * {@link AContainer} using a hopper.\n  *\n  * @author CURVX\n  *\n  */\n-public class HopperListener implements SlimefunCraftingListener {\n+public class HopperListener implements Listener {\n \n     public HopperListener(@Nonnull SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n"}}, {"oid": "105a57fb37d1ddb50c465d602c99ad657713e998", "url": "https://github.com/Slimefun/Slimefun4/commit/105a57fb37d1ddb50c465d602c99ad657713e998", "message": "Merge pull request #6 from Slimefun/master\n\n[CI skip] Update fork", "committedDate": "2021-01-12T16:07:20Z", "type": "commit"}, {"oid": "b3b7a22ee93730348d2b485f13a0c658543d8afb", "url": "https://github.com/Slimefun/Slimefun4/commit/b3b7a22ee93730348d2b485f13a0c658543d8afb", "message": "Changes req. by TTB", "committedDate": "2021-01-12T16:12:53Z", "type": "commit"}, {"oid": "19e2f37ac6cc49e2ab53908572954ce729a7d9b9", "url": "https://github.com/Slimefun/Slimefun4/commit/19e2f37ac6cc49e2ab53908572954ce729a7d9b9", "message": "Resolve merge conflicts", "committedDate": "2021-01-12T16:21:31Z", "type": "commit"}, {"oid": "f0e891134bc027e0f8ee6af557f68d0da33f878b", "url": "https://github.com/Slimefun/Slimefun4/commit/f0e891134bc027e0f8ee6af557f68d0da33f878b", "message": "Cleaned imports", "committedDate": "2021-01-12T17:47:23Z", "type": "commit"}, {"oid": "a0ab148a65c227a2ca81466e44b42b7179b1799d", "url": "https://github.com/Slimefun/Slimefun4/commit/a0ab148a65c227a2ca81466e44b42b7179b1799d", "message": "Cleaned imports pt.2", "committedDate": "2021-01-12T18:12:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4MzE4Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r555983183", "bodyText": "Needs to extend ItemAttribute", "author": "TheBusyBiscuit", "createdAt": "2021-01-12T18:24:08Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/NotHopperable.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+\n+/**\n+ * Implement this interface for any {@link AContainer} to prevent\n+ * that {@link AContainer} from being hopperable.\n+ *\n+ * @author CURVX\n+ *\n+ */\n+public interface NotHopperable {", "originalCommit": "a0ab148a65c227a2ca81466e44b42b7179b1799d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "889ffe48720365f37516f81493dfa0dfd30eb50e", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/NotHopperable.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/NotHopperable.java\nindex 115c31e52..5e284e569 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/NotHopperable.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/NotHopperable.java\n\n@@ -9,6 +9,6 @@ import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n  * @author CURVX\n  *\n  */\n-public interface NotHopperable {\n+public interface NotHopperable extends ItemAttribute {\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4MzkzMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r555983932", "bodyText": "Should only be @see NotHopperable", "author": "TheBusyBiscuit", "createdAt": "2021-01-12T18:25:23Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.AutoBrewer;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.AutoDrier;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricFurnace;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricIngotPulverizer;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricOreGrinder;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricSmeltery;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to\n+ * and from {@link AContainer} using a hopper.\n+ *\n+ * @author CURVX\n+ *\n+ * @see AutoBrewer\n+ * @see AutoDrier\n+ * @see ElectricFurnace\n+ * @see ElectricIngotPulverizer\n+ * @see ElectricOreGrinder\n+ * @see ElectricSmeltery", "originalCommit": "a0ab148a65c227a2ca81466e44b42b7179b1799d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "889ffe48720365f37516f81493dfa0dfd30eb50e", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\nindex 54c6ebddf..94c07556e 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java\n\n@@ -8,14 +8,8 @@ import org.bukkit.event.Listener;\n import org.bukkit.event.inventory.InventoryMoveItemEvent;\n import org.bukkit.event.inventory.InventoryType;\n \n-import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;\n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.AutoBrewer;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.AutoDrier;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricFurnace;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricIngotPulverizer;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricOreGrinder;\n-import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricSmeltery;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;\n import me.mrCookieSlime.Slimefun.api.BlockStorage;\n import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n \n"}}, {"oid": "889ffe48720365f37516f81493dfa0dfd30eb50e", "url": "https://github.com/Slimefun/Slimefun4/commit/889ffe48720365f37516f81493dfa0dfd30eb50e", "message": "Few minor changes", "committedDate": "2021-01-13T05:01:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU5MzY0Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2487#discussion_r556593643", "bodyText": "Will this destination inv ever be non-null and an SF item? Custom inventories have getLocation() returning null. You're expecting destination to be an SF block however I don't believe that can ever be the case.\nEdit: Nevermind, this is true do to it being a furnace (or other). Yep cool", "author": "WalshyDev", "createdAt": "2021-01-13T15:13:08Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HopperListener.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Location;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryMoveItemEvent;\n+import org.bukkit.event.inventory.InventoryType;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+\n+/**\n+ * This {@link Listener} prevents item from being transferred to\n+ * and from {@link AContainer} using a hopper.\n+ *\n+ * @author CURVX\n+ *\n+ * @see NotHopperable\n+ *\n+ */\n+public class HopperListener implements Listener {\n+\n+    public HopperListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onHopperInsert(InventoryMoveItemEvent e) {\n+        Location loc = e.getDestination().getLocation();", "originalCommit": "889ffe48720365f37516f81493dfa0dfd30eb50e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}