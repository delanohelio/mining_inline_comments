{"pr_number": 2055, "pr_title": "Lots of refactoring and rewriting of Item Energy", "pr_createdAt": "2020-06-26T13:35:17Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2055", "timeline": [{"oid": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58", "url": "https://github.com/Slimefun/Slimefun4/commit/6ffa5ab9a7d42e1cb40b2d56720f41564198bc58", "message": "Lots of refactoring and rewriting of Item Energy", "committedDate": "2020-06-26T13:32:57Z", "type": "commit"}, {"oid": "8d0c816ed2fe1bc767dbd0c5779467ed450e68b9", "url": "https://github.com/Slimefun/Slimefun4/commit/8d0c816ed2fe1bc767dbd0c5779467ed450e68b9", "message": "Some performance improvements", "committedDate": "2020-06-26T14:27:16Z", "type": "commit"}, {"oid": "28e5b57c5d91fe62f79953ffe5186281cc77e0f6", "url": "https://github.com/Slimefun/Slimefun4/commit/28e5b57c5d91fe62f79953ffe5186281cc77e0f6", "message": "Some better exception handling", "committedDate": "2020-06-26T15:36:57Z", "type": "commit"}, {"oid": "ed85a9a051e3f63b9e3b903d194c5b815f01c538", "url": "https://github.com/Slimefun/Slimefun4/commit/ed85a9a051e3f63b9e3b903d194c5b815f01c538", "message": "Added Unit tests for rechargeable items", "committedDate": "2020-06-26T15:58:54Z", "type": "commit"}, {"oid": "f99c7275831980f0564553278764f3dd2b644425", "url": "https://github.com/Slimefun/Slimefun4/commit/f99c7275831980f0564553278764f3dd2b644425", "message": "Added another Unit Test", "committedDate": "2020-06-26T18:37:53Z", "type": "commit"}, {"oid": "80fc0a173e1d389873cdca0033539694e9e620d1", "url": "https://github.com/Slimefun/Slimefun4/commit/80fc0a173e1d389873cdca0033539694e9e620d1", "message": "Added lore addition", "committedDate": "2020-06-26T18:58:23Z", "type": "commit"}, {"oid": "e081d15c6d6643d40d46c1adb4275df80ac69d9c", "url": "https://github.com/Slimefun/Slimefun4/commit/e081d15c6d6643d40d46c1adb4275df80ac69d9c", "message": "Fixed a slight mistake with the lore", "committedDate": "2020-06-26T23:46:20Z", "type": "commit"}, {"oid": "b2833b3ce85782ea07f2513cbc44904026f43f89", "url": "https://github.com/Slimefun/Slimefun4/commit/b2833b3ce85782ea07f2513cbc44904026f43f89", "message": "Removed unused parameter", "committedDate": "2020-06-27T00:18:49Z", "type": "commit"}, {"oid": "f6f09d2e2eef4d34c2cff586e6b477899301a1dd", "url": "https://github.com/Slimefun/Slimefun4/commit/f6f09d2e2eef4d34c2cff586e6b477899301a1dd", "message": "Some more refactoring", "committedDate": "2020-06-27T00:28:01Z", "type": "commit"}, {"oid": "0dfd40e4079448db5e6d48910566084f3b7cfe14", "url": "https://github.com/Slimefun/Slimefun4/commit/0dfd40e4079448db5e6d48910566084f3b7cfe14", "message": "Fixed a few more color codes for 1.16 (Sorry Walshy :P )", "committedDate": "2020-06-27T00:35:29Z", "type": "commit"}, {"oid": "44c0029587805a0721655ce52149c5af0bfa5993", "url": "https://github.com/Slimefun/Slimefun4/commit/44c0029587805a0721655ce52149c5af0bfa5993", "message": "Fixed a rare concurrency issue with world saving", "committedDate": "2020-06-27T00:47:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzQwNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446193404", "bodyText": "I make an API to make this smaller but you do this :PepeHands:", "author": "WalshyDev", "createdAt": "2020-06-26T13:45:16Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataType;\n+\n+import io.github.thebusybiscuit.cscorelib2.chat.ChatColors;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * This is just a simple helper class to provide static methods to the {@link Rechargeable}\n+ * interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see Rechargeable\n+ *\n+ */\n+final class RechargeableHelper {\n+\n+    private static final NamespacedKey CHARGE_KEY = new NamespacedKey(SlimefunPlugin.instance, \"item_charge\");\n+    private static final String LORE_PREFIX = ChatColors.color(\"&c&o&8\\u21E8 &e\\u26A1 &7\");\n+\n+    private RechargeableHelper() {}\n+\n+    static void setCharge(ItemMeta meta, float charge, float capacity) {\n+        BigDecimal decimal = BigDecimal.valueOf(charge).setScale(2, RoundingMode.HALF_UP);\n+        float value = decimal.floatValue();\n+\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n+            meta.getPersistentDataContainer().set(CHARGE_KEY, PersistentDataType.FLOAT, value);", "originalCommit": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTQxMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446465412", "bodyText": "For very good reasons: Your API loads in classes on startup which will crash the entire plugin, if on 1.13", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzExNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467114", "bodyText": "True... why do you insist on 1.13 support :NotLikeThis:", "author": "WalshyDev", "createdAt": "2020-06-27T01:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzE5Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467193", "bodyText": "Because all that's required for 1.13 support is throwing out your API >.>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzUyOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467528", "bodyText": "1.8% of servers by the way LUL\nAlso means you can throw out these damn if (atLeast(1_14))", "author": "WalshyDev", "createdAt": "2020-06-27T01:27:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "80fc0a173e1d389873cdca0033539694e9e620d1", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\nindex e4bd282d1..43e0378ff 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\n\n@@ -43,10 +43,12 @@ final class RechargeableHelper {\n \n             if (line.startsWith(LORE_PREFIX)) {\n                 lore.set(i, LORE_PREFIX + value + \" / \" + capacity + \" J\");\n-                meta.setLore(lore);\n-                return;\n+                break;\n             }\n         }\n+\n+        lore.add(LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+        meta.setLore(lore);\n     }\n \n     static float getCharge(ItemMeta meta) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMTIyMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446201223", "bodyText": "Still into this pattern eh? Implementing abstract method here...\nPlease just accept a param and pass it. It's really quite ugly and unneeded having these methods implemented in here", "author": "WalshyDev", "createdAt": "2020-06-26T13:58:31Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -1975,15 +1975,22 @@ public int getCapacity() {\n \t\t\tnew AutoDrier(categories.electricity, SlimefunItems.AUTO_DRIER, RecipeType.ENHANCED_CRAFTING_TABLE,\n \t\t\tnew ItemStack[]{null, null, null, SlimefunItems.HEATING_COIL, new ItemStack(Material.SMOKER), SlimefunItems.HEATING_COIL, null, new ItemStack(Material.CAMPFIRE), null})\n \t\t\t.register(plugin);\n-\t\t} else {\n+\t\t} \n+\t\telse {\n \t\t\tnew AutoDrier(categories.electricity, SlimefunItems.AUTO_DRIER, RecipeType.ENHANCED_CRAFTING_TABLE,\n \t\t\tnew ItemStack[]{null, null, null, SlimefunItems.HEATING_COIL, new ItemStack(Material.FURNACE), SlimefunItems.HEATING_COIL, null, new ItemStack(Material.TORCH), null})\n \t\t\t.register(plugin);\n \t\t}\n \n \t\tnew AutoBrewer(categories.electricity, SlimefunItems.AUTO_BREWER, RecipeType.ENHANCED_CRAFTING_TABLE,\n-\t\tnew ItemStack[] {null, SlimefunItems.HEATING_COIL, null, SlimefunItems.REINFORCED_PLATE, new ItemStack(Material.BREWING_STAND), SlimefunItems.REINFORCED_PLATE, null, SlimefunItems.ELECTRIC_MOTOR, null})\n-\t\t.register(plugin);\n+\t\tnew ItemStack[] {null, SlimefunItems.HEATING_COIL, null, SlimefunItems.REINFORCED_PLATE, new ItemStack(Material.BREWING_STAND), SlimefunItems.REINFORCED_PLATE, null, SlimefunItems.ELECTRIC_MOTOR, null}) {\n+\n+            @Override\n+            public int getSpeed() {", "originalCommit": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTgyMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446465820", "bodyText": "I'd much prefer a parameter too. But this has nothing to do with this PR. I simply exposed it instead of having it hard-coded.\nAgain, not in scope of this PR.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMTIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzA2Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467066", "bodyText": "roll eyes you changed it, makes it in scope", "author": "WalshyDev", "createdAt": "2020-06-27T01:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMTIyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1OTk1Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446459957", "bodyText": "Should we just make these SlimefunItemStacks? I don't see a world where this would ever be on a normal item and that way we're also enforcing ID (so performance improvements) to be there.", "author": "WalshyDev", "createdAt": "2020-06-27T00:24:58Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/Rechargeable.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.Material;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+\n+import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNet;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.gadgets.Jetpack;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.gadgets.MultiTool;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ChargingBench;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * A {@link Rechargeable} {@link SlimefunItem} can hold energy and is able to\n+ * be recharged using a {@link ChargingBench}.\n+ * Any {@link SlimefunItem} which is supposed to be chargeable <b>must</b> implement this interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see ChargingBench\n+ * @see EnergyNet\n+ * @see Jetpack\n+ * @see MultiTool\n+ *\n+ */\n+@FunctionalInterface\n+public interface Rechargeable extends ItemAttribute {\n+\n+    /**\n+     * This method returns the maximum charge the given {@link ItemStack} is capable of holding.\n+     * \n+     * @param item\n+     *            The {@link ItemStack} for which to determine the maximum charge\n+     * \n+     * @return The maximum energy charge for this {@link ItemStack}\n+     */\n+    float getMaxItemCharge(ItemStack item);", "originalCommit": "e081d15c6d6643d40d46c1adb4275df80ac69d9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTUwNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446465504", "bodyText": "This will almost never be a SlimefunItemStack, unless it's factory new.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1OTk1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MDM3OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446460379", "bodyText": "How come you never just use Preconditions for these? Bit nicer to look at and generally more consistent with Bukkit internals which I like.", "author": "WalshyDev", "createdAt": "2020-06-27T00:27:38Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/Rechargeable.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.Material;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+\n+import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNet;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.gadgets.Jetpack;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.gadgets.MultiTool;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ChargingBench;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * A {@link Rechargeable} {@link SlimefunItem} can hold energy and is able to\n+ * be recharged using a {@link ChargingBench}.\n+ * Any {@link SlimefunItem} which is supposed to be chargeable <b>must</b> implement this interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see ChargingBench\n+ * @see EnergyNet\n+ * @see Jetpack\n+ * @see MultiTool\n+ *\n+ */\n+@FunctionalInterface\n+public interface Rechargeable extends ItemAttribute {\n+\n+    /**\n+     * This method returns the maximum charge the given {@link ItemStack} is capable of holding.\n+     * \n+     * @param item\n+     *            The {@link ItemStack} for which to determine the maximum charge\n+     * \n+     * @return The maximum energy charge for this {@link ItemStack}\n+     */\n+    float getMaxItemCharge(ItemStack item);\n+\n+    /**\n+     * This method sets the stored energy charge for a given {@link ItemStack}.\n+     * The charge must be at least zero and at most {@link #getMaxItemCharge(ItemStack)}.\n+     * \n+     * @param item\n+     *            The {@link ItemStack} to charge\n+     * @param charge\n+     *            The amount of charge to store\n+     */\n+    default void setItemCharge(ItemStack item, float charge) {\n+        if (item == null || item.getType() == Material.AIR) {\n+            throw new IllegalArgumentException(\"Cannot set Item charge for null or AIR\");", "originalCommit": "e081d15c6d6643d40d46c1adb4275df80ac69d9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjIwOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446466208", "bodyText": "Did you ever look at Slimefuns code? I use Validate literally everywhere to check for nulls, but if the expresssions get longer, I stick with an if.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzQzNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467435", "bodyText": "Yes I know. Hence why I said \"never\".", "author": "WalshyDev", "createdAt": "2020-06-27T01:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MDM3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTU5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446461596", "bodyText": "This comment is a little misleading. It makes it seem like the data doesn't exist here and will fall back to the lore. Yes you can see the code and tell but, should still be better.\nI'd simply say \"There's persistent data luckily so we return it rather than parsing the lore\"", "author": "WalshyDev", "createdAt": "2020-06-27T00:35:27Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataType;\n+\n+import io.github.thebusybiscuit.cscorelib2.chat.ChatColors;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * This is just a simple helper class to provide static methods to the {@link Rechargeable}\n+ * interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see Rechargeable\n+ *\n+ */\n+final class RechargeableHelper {\n+\n+    private static final NamespacedKey CHARGE_KEY = new NamespacedKey(SlimefunPlugin.instance, \"item_charge\");\n+    private static final String LORE_PREFIX = ChatColors.color(\"&c&o&8\\u21E8 &e\\u26A1 &7\");\n+\n+    private RechargeableHelper() {}\n+\n+    static void setCharge(ItemMeta meta, float charge, float capacity) {\n+        BigDecimal decimal = BigDecimal.valueOf(charge).setScale(2, RoundingMode.HALF_UP);\n+        float value = decimal.floatValue();\n+\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n+            meta.getPersistentDataContainer().set(CHARGE_KEY, PersistentDataType.FLOAT, value);\n+        }\n+\n+        List<String> lore = meta.hasLore() ? meta.getLore() : new ArrayList<>();\n+        for (int i = 0; i < lore.size(); i++) {\n+            String line = lore.get(i);\n+\n+            if (line.startsWith(LORE_PREFIX)) {\n+                lore.set(i, LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+                meta.setLore(lore);\n+                return;\n+            }\n+        }\n+\n+        lore.add(LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+        meta.setLore(lore);\n+    }\n+\n+    static float getCharge(ItemMeta meta) {\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n+            Float value = meta.getPersistentDataContainer().get(CHARGE_KEY, PersistentDataType.FLOAT);\n+\n+            // If no persistent data exists, we will just fall back to the lore", "originalCommit": "f6f09d2e2eef4d34c2cff586e6b477899301a1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTgzOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446465838", "bodyText": "Yeah, can change that.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "468617d9a2a81221488050c32b4986d5854269a7", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\nindex 546ffe0e9..47fe3b4a8 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\n\n@@ -57,12 +57,13 @@ final class RechargeableHelper {\n         if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n             Float value = meta.getPersistentDataContainer().get(CHARGE_KEY, PersistentDataType.FLOAT);\n \n-            // If no persistent data exists, we will just fall back to the lore\n+            // If persistent data is available, we just return this value\n             if (value != null) {\n                 return value;\n             }\n         }\n \n+        // If no persistent data exists, we will just fall back to the lore\n         if (meta.hasLore()) {\n             for (String line : meta.getLore()) {\n                 if (line.startsWith(LORE_PREFIX) && line.contains(\" / \") && line.endsWith(\" J\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTk1NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446461954", "bodyText": "Not a fan this doesn't set the meta. It will for sure lead to human error of not setting it after calling.", "author": "WalshyDev", "createdAt": "2020-06-27T00:38:47Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataType;\n+\n+import io.github.thebusybiscuit.cscorelib2.chat.ChatColors;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * This is just a simple helper class to provide static methods to the {@link Rechargeable}\n+ * interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see Rechargeable\n+ *\n+ */\n+final class RechargeableHelper {\n+\n+    private static final NamespacedKey CHARGE_KEY = new NamespacedKey(SlimefunPlugin.instance, \"item_charge\");\n+    private static final String LORE_PREFIX = ChatColors.color(\"&c&o&8\\u21E8 &e\\u26A1 &7\");\n+\n+    private RechargeableHelper() {}\n+\n+    static void setCharge(ItemMeta meta, float charge, float capacity) {\n+        BigDecimal decimal = BigDecimal.valueOf(charge).setScale(2, RoundingMode.HALF_UP);\n+        float value = decimal.floatValue();\n+\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n+            meta.getPersistentDataContainer().set(CHARGE_KEY, PersistentDataType.FLOAT, value);\n+        }\n+\n+        List<String> lore = meta.hasLore() ? meta.getLore() : new ArrayList<>();\n+        for (int i = 0; i < lore.size(); i++) {\n+            String line = lore.get(i);\n+\n+            if (line.startsWith(LORE_PREFIX)) {\n+                lore.set(i, LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+                meta.setLore(lore);\n+                return;\n+            }\n+        }\n+\n+        lore.add(LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+        meta.setLore(lore);", "originalCommit": "0dfd40e4079448db5e6d48910566084f3b7cfe14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTY2OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446465669", "bodyText": "You really didn't read through this, did you?\nThe method only takes the ItemMeta and modifies that, it's only for ItemMeta modification, not ItemStacks.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "468617d9a2a81221488050c32b4986d5854269a7", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\nindex 546ffe0e9..47fe3b4a8 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java\n\n@@ -57,12 +57,13 @@ final class RechargeableHelper {\n         if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n             Float value = meta.getPersistentDataContainer().get(CHARGE_KEY, PersistentDataType.FLOAT);\n \n-            // If no persistent data exists, we will just fall back to the lore\n+            // If persistent data is available, we just return this value\n             if (value != null) {\n                 return value;\n             }\n         }\n \n+        // If no persistent data exists, we will just fall back to the lore\n         if (meta.hasLore()) {\n             for (String line : meta.getLore()) {\n                 if (line.startsWith(LORE_PREFIX) && line.contains(\" / \") && line.endsWith(\" J\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446462976", "bodyText": "I'd probably check if env is end (or check the default world) and return 0 (also, could return true in nether, not sunlight but it's supposed to be a \"hell\" thing. I like to do it this way but dealers choice).\nThis will be quicker than the block initialisation which is done below.", "author": "WalshyDev", "createdAt": "2020-06-27T00:46:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -89,25 +93,28 @@ private void handleSlimefunArmor(Player p, ItemStack[] armor, HashedArmorpiece[]\n     }\n \n     private void checkForSolarHelmet(Player p) {\n-        // Temporary performance improvement\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SOLAR_HELMET, true)) {\n+        ItemStack helmet = p.getInventory().getHelmet();\n+\n+        if (SlimefunPlugin.getRegistry().isBackwardsCompatible() && !SlimefunUtils.isItemSimilar(helmet, SlimefunItems.SOLAR_HELMET, true, false)) {\n+            // Performance saver for slow backwards-compatible versions of Slimefun\n             return;\n         }\n \n-        SlimefunItem item = SlimefunItem.getByItem(p.getInventory().getHelmet());\n+        SlimefunItem item = SlimefunItem.getByItem(helmet);\n \n-        if (item instanceof SolarHelmet && Slimefun.hasUnlocked(p, item, true) && hasSunlight(p)) {\n-            ItemEnergy.chargeInventory(p, (float) ((SolarHelmet) item).getChargeAmount());\n+        if (item instanceof SolarHelmet && Slimefun.hasUnlocked(p, item, true)) {\n+            ((SolarHelmet) item).rechargeItems(p);\n         }\n     }\n \n     private boolean hasSunlight(Player p) {\n-        return (p.getWorld().getTime() < 12300 || p.getWorld().getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n+        World world = p.getWorld();", "originalCommit": "0dfd40e4079448db5e6d48910566084f3b7cfe14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTg1OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446465858", "bodyText": "??", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjkwNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446466905", "bodyText": "The end isn't ever light level 15 and considering initialising the block is slow anyway you may as well check the env (or the world) to just insta return false. Small optimisation but optimisations are good.", "author": "WalshyDev", "createdAt": "2020-06-27T01:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzEyMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467122", "bodyText": "I really have no idea what you mean, I know the Block call is slow but I don't understand what exact opimization you are trying to describe.\nIf you can outline it as code or make a follow up commit, it'd be awesome.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzM0MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467341", "bodyText": "if (world.getEnvironment() == Envrionment.END) return false; (Or check if end world and do the same)", "author": "WalshyDev", "createdAt": "2020-06-27T01:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzQ5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467496", "bodyText": "And true in the nether?\nI am just confused as you said \"return 0\" when this is a boolean method.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzYzMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467632", "bodyText": "Shh.\nAnd I'd say return true in nether since it's supposed to be a \"hell\" kinda thing. But, that's really up to you. Not sure the normal light levels of the nether but yeah. Just dealers choice in this regard.", "author": "WalshyDev", "createdAt": "2020-06-27T01:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzY0MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467641", "bodyText": "I'll probably make both false for now.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bd2f4b196d6a3c265ea8945bcbd4d1ac853b4afc", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex a23d3fe33..dbcde28bf 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n\n@@ -109,6 +110,12 @@ public class ArmorTask implements Runnable {\n \n     private boolean hasSunlight(Player p) {\n         World world = p.getWorld();\n+\n+        if (world.getEnvironment() != Environment.NORMAL) {\n+            // The End and Nether have no sunlight\n+            return false;\n+        }\n+\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MzI1Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446463253", "bodyText": ":LULW:", "author": "WalshyDev", "createdAt": "2020-06-27T00:48:05Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -89,25 +93,28 @@ private void handleSlimefunArmor(Player p, ItemStack[] armor, HashedArmorpiece[]\n     }\n \n     private void checkForSolarHelmet(Player p) {\n-        // Temporary performance improvement\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SOLAR_HELMET, true)) {\n+        ItemStack helmet = p.getInventory().getHelmet();\n+\n+        if (SlimefunPlugin.getRegistry().isBackwardsCompatible() && !SlimefunUtils.isItemSimilar(helmet, SlimefunItems.SOLAR_HELMET, true, false)) {\n+            // Performance saver for slow backwards-compatible versions of Slimefun\n             return;\n         }\n \n-        SlimefunItem item = SlimefunItem.getByItem(p.getInventory().getHelmet());\n+        SlimefunItem item = SlimefunItem.getByItem(helmet);\n \n-        if (item instanceof SolarHelmet && Slimefun.hasUnlocked(p, item, true) && hasSunlight(p)) {\n-            ItemEnergy.chargeInventory(p, (float) ((SolarHelmet) item).getChargeAmount());\n+        if (item instanceof SolarHelmet && Slimefun.hasUnlocked(p, item, true)) {\n+            ((SolarHelmet) item).rechargeItems(p);\n         }\n     }\n \n     private boolean hasSunlight(Player p) {\n-        return (p.getWorld().getTime() < 12300 || p.getWorld().getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n+        World world = p.getWorld();\n+        return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n     private void checkForRadiation(Player p) {\n         // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) || !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) || !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) || !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n+        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {", "originalCommit": "0dfd40e4079448db5e6d48910566084f3b7cfe14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTg2Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446465862", "bodyText": "??", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MzI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjkyNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446466927", "bodyText": "Wrong order. It was funny.", "author": "WalshyDev", "createdAt": "2020-06-27T01:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MzI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NzMzOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446467339", "bodyText": "Yeah, god knows for how long this must have been there...", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MzI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bd2f4b196d6a3c265ea8945bcbd4d1ac853b4afc", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex a23d3fe33..dbcde28bf 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n\n@@ -109,6 +110,12 @@ public class ArmorTask implements Runnable {\n \n     private boolean hasSunlight(Player p) {\n         World world = p.getWorld();\n+\n+        if (world.getEnvironment() != Environment.NORMAL) {\n+            // The End and Nether have no sunlight\n+            return false;\n+        }\n+\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mzk5Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446463992", "bodyText": "I would also check a space. Spaces can mess up quite a bit on different systems. We've had someone in the past who downloaded a world and it messed up on the shared Linux server due to that", "author": "WalshyDev", "createdAt": "2020-06-27T00:54:11Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -97,6 +97,10 @@ private static Location deserializeLocation(String l) {\n     public BlockStorage(World w) {\n         this.world = w;\n \n+        if (world.getName().indexOf('.') != -1) {", "originalCommit": "44c0029587805a0721655ce52149c5af0bfa5993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTkzNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446465937", "bodyText": "Never heard of that happening. If someone reports it, it can be added. Otherwise, feel free to make a PR. This is just a dirty band aid for a much deeper problem anyway.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T01:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mzk5Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "468617d9a2a81221488050c32b4986d5854269a7", "url": "https://github.com/Slimefun/Slimefun4/commit/468617d9a2a81221488050c32b4986d5854269a7", "message": "Changed a comment.", "committedDate": "2020-06-27T01:13:43Z", "type": "commit"}, {"oid": "bd2f4b196d6a3c265ea8945bcbd4d1ac853b4afc", "url": "https://github.com/Slimefun/Slimefun4/commit/bd2f4b196d6a3c265ea8945bcbd4d1ac853b4afc", "message": "Minor optimization for Solar Helmet checks", "committedDate": "2020-06-27T01:29:10Z", "type": "commit"}, {"oid": "6d3665508175600f592be2b68de06ea3215e7fa0", "url": "https://github.com/Slimefun/Slimefun4/commit/6d3665508175600f592be2b68de06ea3215e7fa0", "message": "Another optimization for Solar Generators", "committedDate": "2020-06-27T01:40:27Z", "type": "commit"}]}