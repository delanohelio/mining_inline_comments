{"pr_number": 2071, "pr_title": "Added Chance Drop for MOB_DROP recipe items. References #980", "pr_createdAt": "2020-07-04T03:23:17Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2071", "timeline": [{"oid": "1ddd763dbf1a4db94700fa33f6a0c95defa08004", "url": "https://github.com/Slimefun/Slimefun4/commit/1ddd763dbf1a4db94700fa33f6a0c95defa08004", "message": "Added Chance Drop for MOB_DROP recipe items. References #980\n\nAdded interface for ChanceDrop items\n\nAdded a check for chance drop items in the EntityDeathListener\n\nAdjusted circuit board to have a 75% chance rather than 100% chance", "committedDate": "2020-07-04T03:19:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0Nzk2Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449747966", "bodyText": "Should make a variable for the random since it could be called multiple times and this isn't exactly the least expensive thing in the world", "author": "WalshyDev", "createdAt": "2020-07-04T07:13:20Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -34,7 +36,17 @@ public void onEntityKill(EntityDeathEvent e) {\n \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n+            \tfor(ItemStack is:customDrops)\n+            \t{\n+            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n+            \t\tif(sfi != null && sfi instanceof ChanceDrop) {\n+            \t\t\tif(((ChanceDrop)sfi).getChance() <= ThreadLocalRandom.current().nextInt(0,100)) ", "originalCommit": "1ddd763dbf1a4db94700fa33f6a0c95defa08004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0Nzk5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449747996", "bodyText": "No need to specify the 0 as origin", "author": "WalshyDev", "createdAt": "2020-07-04T07:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0Nzk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f80bada54b184db71077a5d7bb6c53f8ed70287c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex 526e4d95f..4d7ba63e4 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,21 +34,18 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n+            if (customDrops != null && !customDrops.isEmpty()) \n             \tfor(ItemStack is:customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) {\n-            \t\t\tif(((ChanceDrop)sfi).getChance() <= ThreadLocalRandom.current().nextInt(0,100)) \n-                \t\t\tcontinue;\n-            \t\t\t else \n+            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n+            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n-            \t\t}\n-            \t\t\n-            \t}\n-            }\n+            \t}\t\n+            \n \n             if (item.getType() != Material.AIR) {\n                 SlimefunItem sfItem = SlimefunItem.getByItem(item);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0ODAxMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449748013", "bodyText": "Useless continue, there's no other logic in this for loop", "author": "WalshyDev", "createdAt": "2020-07-04T07:14:35Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -34,7 +36,17 @@ public void onEntityKill(EntityDeathEvent e) {\n \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n+            \tfor(ItemStack is:customDrops)\n+            \t{\n+            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n+            \t\tif(sfi != null && sfi instanceof ChanceDrop) {\n+            \t\t\tif(((ChanceDrop)sfi).getChance() <= ThreadLocalRandom.current().nextInt(0,100)) \n+                \t\t\tcontinue;", "originalCommit": "1ddd763dbf1a4db94700fa33f6a0c95defa08004", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f80bada54b184db71077a5d7bb6c53f8ed70287c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex 526e4d95f..4d7ba63e4 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,21 +34,18 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n+            if (customDrops != null && !customDrops.isEmpty()) \n             \tfor(ItemStack is:customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) {\n-            \t\t\tif(((ChanceDrop)sfi).getChance() <= ThreadLocalRandom.current().nextInt(0,100)) \n-                \t\t\tcontinue;\n-            \t\t\t else \n+            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n+            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n-            \t\t}\n-            \t\t\n-            \t}\n-            }\n+            \t}\t\n+            \n \n             if (item.getType() != Material.AIR) {\n                 SlimefunItem sfItem = SlimefunItem.getByItem(item);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0ODA5NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449748095", "bodyText": "The entire point of this class is to have a chance. Why would there be a default for it?\nRemove the constant and make this a standard non-default, interface method", "author": "WalshyDev", "createdAt": "2020-07-04T07:15:32Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\r\n+\r\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\r\n+\r\n+\r\n+public interface ChanceDrop extends ItemAttribute {\r\n+\r\n+    /**\r\n+     * This field sets the % chance for an item to drop when a creature is killed.\r\n+     */\r\n+    int chance = 100;  \r\n+\r\n+    public default int getChance() {\r", "originalCommit": "1ddd763dbf1a4db94700fa33f6a0c95defa08004", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f80bada54b184db71077a5d7bb6c53f8ed70287c", "chunk": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\nindex 0ea1d9f4c..c9f30b7d7 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n\n@@ -4,13 +4,10 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\n \n \n public interface ChanceDrop extends ItemAttribute {\n-\n+\t\n     /**\n-     * This field sets the % chance for an item to drop when a creature is killed.\n+     * This method returns the % chance for an item to drop when a creature is killed.\n      */\n-    int chance = 100;  \n-\n-    public default int getChance() {\n-    \treturn chance;\n-    }\n+    public int getChance() ;\n+    \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0ODEwMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449748102", "bodyText": "Missing @OverRide", "author": "WalshyDev", "createdAt": "2020-07-04T07:15:43Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/BasicCircuitBoard.java", "diffHunk": "@@ -9,18 +9,24 @@\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces.ChanceDrop;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n-public class BasicCircuitBoard extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable {\n+public class BasicCircuitBoard extends SimpleSlimefunItem<ItemUseHandler> implements NotPlaceable, ChanceDrop {\n \n     private final ItemSetting<Boolean> dropSetting = new ItemSetting<>(\"drop-from-golems\", true);\n-\n+    private final ItemSetting<Integer> chance = new ItemSetting<> (\"golem-drop-chance\", 75);\n+    \n     public BasicCircuitBoard(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n         super(category, item, recipeType, recipe);\n \n         addItemSetting(dropSetting);\n+        addItemSetting(chance);\n     }\n \n+    public int getChance() {", "originalCommit": "1ddd763dbf1a4db94700fa33f6a0c95defa08004", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f80bada54b184db71077a5d7bb6c53f8ed70287c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/BasicCircuitBoard.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/BasicCircuitBoard.java\nindex f16f80d5a..8e5cc1999 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/BasicCircuitBoard.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/BasicCircuitBoard.java\n\n@@ -24,6 +24,7 @@ public class BasicCircuitBoard extends SimpleSlimefunItem<ItemUseHandler> implem\n         addItemSetting(chance);\n     }\n \n+    @Override\n     public int getChance() {\n     \treturn chance.getValue();\n     }\n"}}, {"oid": "f80bada54b184db71077a5d7bb6c53f8ed70287c", "url": "https://github.com/Slimefun/Slimefun4/commit/f80bada54b184db71077a5d7bb6c53f8ed70287c", "message": "Made Requested Changes", "committedDate": "2020-07-04T13:36:29Z", "type": "commit"}, {"oid": "aca5b6efc5ce5c7536647bc2c5c72bb767cd87e5", "url": "https://github.com/Slimefun/Slimefun4/commit/aca5b6efc5ce5c7536647bc2c5c72bb767cd87e5", "message": "Removed unused import", "committedDate": "2020-07-04T13:39:13Z", "type": "commit"}, {"oid": "27149ee5143f9857805cae025f5e29ef5b2da188", "url": "https://github.com/Slimefun/Slimefun4/commit/27149ee5143f9857805cae025f5e29ef5b2da188", "message": "Fixed formatting error", "committedDate": "2020-07-04T13:42:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MjkzNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449782934", "bodyText": "Always use ThreadLocalRandom", "author": "WalshyDev", "createdAt": "2020-07-04T15:42:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,18 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b60d12c72..d99c89185 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,15 +33,14 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            Random rnd = new Random();\n+            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is:customDrops)\n+            \tfor(ItemStack is : customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n-            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n             \t}\t\n             \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4Mjk0Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449782943", "bodyText": "On the line above", "author": "WalshyDev", "createdAt": "2020-07-04T15:42:17Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,18 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n-            }\n+            if (customDrops != null && !customDrops.isEmpty()) \n+            \tfor(ItemStack is:customDrops)\n+            \t{", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg4MTk0NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449881944", "bodyText": "not sure what you're asking for with \"On the line above\"", "author": "dniym", "createdAt": "2020-07-05T14:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4Mjk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5MDk4MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449890981", "bodyText": "Move the curly brace to the line above. One true brace style", "author": "WalshyDev", "createdAt": "2020-07-05T15:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4Mjk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b60d12c72..d99c89185 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,15 +33,14 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            Random rnd = new Random();\n+            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is:customDrops)\n+            \tfor(ItemStack is : customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n-            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n             \t}\t\n             \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4Mjk2OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449782968", "bodyText": "Spacing between is the colon and custom drops", "author": "WalshyDev", "createdAt": "2020-07-04T15:42:33Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,18 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n-            }\n+            if (customDrops != null && !customDrops.isEmpty()) \n+            \tfor(ItemStack is:customDrops)", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b60d12c72..d99c89185 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,15 +33,14 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            Random rnd = new Random();\n+            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is:customDrops)\n+            \tfor(ItemStack is : customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n-            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n             \t}\t\n             \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MzAwNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449783006", "bodyText": "Space after if and below too", "author": "WalshyDev", "createdAt": "2020-07-04T15:42:48Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,18 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n-            }\n+            if (customDrops != null && !customDrops.isEmpty()) \n+            \tfor(ItemStack is:customDrops)\n+            \t{\n+            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n+            \t\tif(sfi != null && sfi instanceof ChanceDrop) ", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b60d12c72..d99c89185 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,15 +33,14 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            Random rnd = new Random();\n+            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is:customDrops)\n+            \tfor(ItemStack is : customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n-            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n             \t}\t\n             \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MzA0Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449783042", "bodyText": "Remove the space before the semicolon.", "author": "WalshyDev", "createdAt": "2020-07-04T15:43:21Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\r\n+\r\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\r\n+\r\n+\r\n+public interface ChanceDrop extends ItemAttribute {\r\n+\t\r\n+    /**\r\n+     * This method returns the % chance for an item to drop when a creature is killed.\r\n+     */\r\n+    public int getChance() ;\r", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\nindex c9f30b7d7..e7417e61c 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n\n@@ -2,12 +2,26 @@ package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\n \n import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\n \n-\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding \n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent}, this chance is 0-100\n+ * and used in conjunction with the MOB_DROP {@link RecipeType}. \n+ * see {@link BasicCircuitBoard} and {@link MobDropListener}.\n+ * \n+ * @author dNiym\n+ *\n+ */\n+@FunctionalInterface\n public interface ChanceDrop extends ItemAttribute {\n \t\n+\n     /**\n-     * This method returns the % chance for an item to drop when a creature is killed.\n+     * Implement this method to make the object have a variable chance of being\n+     * added to the dropList when {@link EntityType} (specified in the recipe) \n+     * is killed by the {@link Player}\n+     * \n+     * @return The integer chance (0-100%) {@link SlimefunItem} has to drop.\n      */\n-    public int getChance() ;\n+    public int getChance();\n     \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwOTAxMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449809013", "bodyText": "Also: Missing documentation and @author tag.\nShould probably also mark this as a @FunctionalInterface too.", "author": "TheBusyBiscuit", "createdAt": "2020-07-04T22:06:13Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\r\n+\r\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\r\n+\r\n+\r\n+public interface ChanceDrop extends ItemAttribute {\r", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\nindex c9f30b7d7..e7417e61c 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n\n@@ -2,12 +2,26 @@ package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\n \n import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\n \n-\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding \n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent}, this chance is 0-100\n+ * and used in conjunction with the MOB_DROP {@link RecipeType}. \n+ * see {@link BasicCircuitBoard} and {@link MobDropListener}.\n+ * \n+ * @author dNiym\n+ *\n+ */\n+@FunctionalInterface\n public interface ChanceDrop extends ItemAttribute {\n \t\n+\n     /**\n-     * This method returns the % chance for an item to drop when a creature is killed.\n+     * Implement this method to make the object have a variable chance of being\n+     * added to the dropList when {@link EntityType} (specified in the recipe) \n+     * is killed by the {@link Player}\n+     * \n+     * @return The integer chance (0-100%) {@link SlimefunItem} has to drop.\n      */\n-    public int getChance() ;\n+    public int getChance();\n     \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwOTA1Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449809056", "bodyText": "I think you can merge these two statements.", "author": "TheBusyBiscuit", "createdAt": "2020-07-04T22:06:59Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,18 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n-            }\n+            if (customDrops != null && !customDrops.isEmpty()) \n+            \tfor(ItemStack is:customDrops)\n+            \t{\n+            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n+            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n+            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) ", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b60d12c72..d99c89185 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,15 +33,14 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            Random rnd = new Random();\n+            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is:customDrops)\n+            \tfor(ItemStack is : customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n-            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n             \t}\t\n             \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwOTA5NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449809095", "bodyText": "Also: An instanceof check always returns false for null, so the null check is redundant here.", "author": "TheBusyBiscuit", "createdAt": "2020-07-04T22:07:32Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,18 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n-            }\n+            if (customDrops != null && !customDrops.isEmpty()) \n+            \tfor(ItemStack is:customDrops)\n+            \t{\n+            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n+            \t\tif(sfi != null && sfi instanceof ChanceDrop) ", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b60d12c72..d99c89185 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,15 +33,14 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            Random rnd = new Random();\n+            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is:customDrops)\n+            \tfor(ItemStack is : customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n-            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n             \t}\t\n             \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwOTEwMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449809102", "bodyText": "ThreadLocalRandom", "author": "TheBusyBiscuit", "createdAt": "2020-07-04T22:07:47Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,18 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            Random rnd = new Random();", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b60d12c72..d99c89185 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,15 +33,14 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            Random rnd = new Random();\n+            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is:customDrops)\n+            \tfor(ItemStack is : customDrops)\n             \t{\n             \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif(sfi != null && sfi instanceof ChanceDrop) \n-            \t\t\tif(((ChanceDrop)sfi).getChance() >= rnd.nextInt(100)) \n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n             \t\t\t\taddDrops(p, customDrops, e.getDrops());\n             \t}\t\n             \n"}}, {"oid": "645d73d0efde581faf1e7b9ef076d311a692d49c", "url": "https://github.com/Slimefun/Slimefun4/commit/645d73d0efde581faf1e7b9ef076d311a692d49c", "message": "Made requested changes.", "committedDate": "2020-07-05T14:40:07Z", "type": "commit"}, {"oid": "b3f801d84e5292c65b6ec85fb2942abb3d27ae4e", "url": "https://github.com/Slimefun/Slimefun4/commit/b3f801d84e5292c65b6ec85fb2942abb3d27ae4e", "message": "Made requested changes", "committedDate": "2020-07-05T16:35:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5OTAwMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449899001", "bodyText": "Many spaces on this line", "author": "WalshyDev", "createdAt": "2020-07-05T17:13:44Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,16 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            int random = ThreadLocalRandom.current().nextInt(100);\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n-            }\n+            if (customDrops != null && !customDrops.isEmpty()) \n+            \tfor(ItemStack is : customDrops) {\n+            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n+            \t\t\t\taddDrops(p, customDrops, e.getDrops());", "originalCommit": "b3f801d84e5292c65b6ec85fb2942abb3d27ae4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96b4394d7f1819ffacec2afeba3c5220d02afb7e", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b5d98aa37..208b81214 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,17 +34,11 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is : customDrops) {\n-            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n-            \t\t\t\taddDrops(p, customDrops, e.getDrops());\n-            \t}\t\n+            \taddDrops(p, customDrops, e.getDrops());\n             \n-\n             if (item.getType() != Material.AIR) {\n                 SlimefunItem sfItem = SlimefunItem.getByItem(item);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5OTAwOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449899009", "bodyText": "Space after for", "author": "WalshyDev", "createdAt": "2020-07-05T17:13:51Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,16 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            int random = ThreadLocalRandom.current().nextInt(100);\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n-            }\n+            if (customDrops != null && !customDrops.isEmpty()) \n+            \tfor(ItemStack is : customDrops) {", "originalCommit": "b3f801d84e5292c65b6ec85fb2942abb3d27ae4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96b4394d7f1819ffacec2afeba3c5220d02afb7e", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b5d98aa37..208b81214 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,17 +34,11 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is : customDrops) {\n-            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n-            \t\t\t\taddDrops(p, customDrops, e.getDrops());\n-            \t}\t\n+            \taddDrops(p, customDrops, e.getDrops());\n             \n-\n             if (item.getType() != Material.AIR) {\n                 SlimefunItem sfItem = SlimefunItem.getByItem(item);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwOTE2OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449809168", "bodyText": "Also I'd rather rename this to something like \"RandomMobDrop\" and the method to \"getDropChance()\".", "author": "TheBusyBiscuit", "createdAt": "2020-07-04T22:09:08Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\r\n+\r\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\r\n+\r\n+\r\n+public interface ChanceDrop extends ItemAttribute {\r", "originalCommit": "27149ee5143f9857805cae025f5e29ef5b2da188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d73d0efde581faf1e7b9ef076d311a692d49c", "chunk": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\nindex c9f30b7d7..e7417e61c 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n\n@@ -2,12 +2,26 @@ package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\n \n import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\n \n-\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding \n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent}, this chance is 0-100\n+ * and used in conjunction with the MOB_DROP {@link RecipeType}. \n+ * see {@link BasicCircuitBoard} and {@link MobDropListener}.\n+ * \n+ * @author dNiym\n+ *\n+ */\n+@FunctionalInterface\n public interface ChanceDrop extends ItemAttribute {\n \t\n+\n     /**\n-     * This method returns the % chance for an item to drop when a creature is killed.\n+     * Implement this method to make the object have a variable chance of being\n+     * added to the dropList when {@link EntityType} (specified in the recipe) \n+     * is killed by the {@link Player}\n+     * \n+     * @return The integer chance (0-100%) {@link SlimefunItem} has to drop.\n      */\n-    public int getChance() ;\n+    public int getChance();\n     \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwNzU1Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449907557", "bodyText": "There is an @ see which you should use here.", "author": "TheBusyBiscuit", "createdAt": "2020-07-05T18:53:18Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\r\n+\r\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\r\n+\r\n+/**\r\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding \r\n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent}, this chance is 0-100\r\n+ * and used in conjunction with the MOB_DROP {@link RecipeType}. \r\n+ * see {@link BasicCircuitBoard} and {@link MobDropListener}.\r", "originalCommit": "b3f801d84e5292c65b6ec85fb2942abb3d27ae4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96b4394d7f1819ffacec2afeba3c5220d02afb7e", "chunk": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/RandomMobDrop.java\nsimilarity index 81%\nrename from src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\nrename to src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/RandomMobDrop.java\nindex e7417e61c..745e04eb5 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/ChanceDrop.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/RandomMobDrop.java\n\n@@ -6,13 +6,13 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\n  * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding \n  * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent}, this chance is 0-100\n  * and used in conjunction with the MOB_DROP {@link RecipeType}. \n- * see {@link BasicCircuitBoard} and {@link MobDropListener}.\n+ * @see BasicCircuitBoard and @see MobDropListener.\n  * \n  * @author dNiym\n  *\n  */\n @FunctionalInterface\n-public interface ChanceDrop extends ItemAttribute {\n+public interface RandomMobDrop extends ItemAttribute {\n \t\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwNzY3OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449907679", "bodyText": "Also, since this is in a for loop... wouldn't this add the entire drops list multiple times instead of the items one by one?", "author": "TheBusyBiscuit", "createdAt": "2020-07-05T18:54:53Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -31,11 +33,16 @@ public void onEntityKill(EntityDeathEvent e) {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-\n+            int random = ThreadLocalRandom.current().nextInt(100);\n+            \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n-            if (customDrops != null && !customDrops.isEmpty()) {\n-                addDrops(p, customDrops, e.getDrops());\n-            }\n+            if (customDrops != null && !customDrops.isEmpty()) \n+            \tfor(ItemStack is : customDrops) {\n+            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n+            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n+            \t\t\t\taddDrops(p, customDrops, e.getDrops());", "originalCommit": "b3f801d84e5292c65b6ec85fb2942abb3d27ae4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzE5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449917196", "bodyText": "I see what you're saying here, however; in testing I did not ever receive any extra drops no matter how many other items the creature in question dropped.   It may have become an issue if the creature dropped multiple slimefun items...   Moved the logic to the addDrops() method to just skip them if they fail the chance check.", "author": "dniym", "createdAt": "2020-07-05T20:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwNzY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzMwNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449917305", "bodyText": "Yes, you are looping through \"customDrops\", so this issue would only appear when multiple Slimefun items were at play here.", "author": "TheBusyBiscuit", "createdAt": "2020-07-05T20:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwNzY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "96b4394d7f1819ffacec2afeba3c5220d02afb7e", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex b5d98aa37..208b81214 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -33,17 +34,11 @@ public class MobDropListener implements Listener {\n         if (e.getEntity().getKiller() != null) {\n             Player p = e.getEntity().getKiller();\n             ItemStack item = p.getInventory().getItemInMainHand();\n-            int random = ThreadLocalRandom.current().nextInt(100);\n             \n             Set<ItemStack> customDrops = SlimefunPlugin.getRegistry().getMobDrops(e.getEntityType());\n             if (customDrops != null && !customDrops.isEmpty()) \n-            \tfor(ItemStack is : customDrops) {\n-            \t\tSlimefunItem sfi = SlimefunItem.getByItem(is);\n-            \t\tif (sfi instanceof ChanceDrop && ((ChanceDrop)sfi).getChance() >= random) \n-            \t\t\t\taddDrops(p, customDrops, e.getDrops());\n-            \t}\t\n+            \taddDrops(p, customDrops, e.getDrops());\n             \n-\n             if (item.getType() != Material.AIR) {\n                 SlimefunItem sfItem = SlimefunItem.getByItem(item);\n \n"}}, {"oid": "96b4394d7f1819ffacec2afeba3c5220d02afb7e", "url": "https://github.com/Slimefun/Slimefun4/commit/96b4394d7f1819ffacec2afeba3c5220d02afb7e", "message": "Made requested changes", "committedDate": "2020-07-05T20:45:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzExMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449917111", "bodyText": "No need to even have this CircuitBoard variable at this point anymore. You can just check if sfi is an instance of your Circuit Board, would be much better performance wise since you already done these operations earlier.", "author": "TheBusyBiscuit", "createdAt": "2020-07-05T20:47:04Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -48,14 +50,20 @@ public void onEntityKill(EntityDeathEvent e) {\n     }\n \n     private void addDrops(Player p, Set<ItemStack> customDrops, List<ItemStack> drops) {\n+    \tint random = ThreadLocalRandom.current().nextInt(100);\n+    \t\n         for (ItemStack drop : customDrops) {\n             if (Slimefun.hasUnlocked(p, drop, true)) {\n-                if (circuitBoard != null && circuitBoard.isItem(drop) && !circuitBoard.isDroppedFromGolems()) {\n+            \tSlimefunItem sfi = SlimefunItem.getByItem(drop);\n+            \tif (sfi instanceof RandomMobDrop && ((RandomMobDrop)sfi).getDropChance() <= random) \n+            \t\tcontinue;\n+            \t\n+                if (circuitBoard != null && circuitBoard.isItem(drop) && !circuitBoard.isDroppedFromGolems()) ", "originalCommit": "96b4394d7f1819ffacec2afeba3c5220d02afb7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b48b4b3d9b2a2a57009ef5741d40aae4a0bd65", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex 208b81214..dcaf5f941 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -58,7 +55,7 @@ public class MobDropListener implements Listener {\n             \tif (sfi instanceof RandomMobDrop && ((RandomMobDrop)sfi).getDropChance() <= random) \n             \t\tcontinue;\n             \t\n-                if (circuitBoard != null && circuitBoard.isItem(drop) && !circuitBoard.isDroppedFromGolems()) \n+                if (sfi instanceof BasicCircuitBoard  && ((BasicCircuitBoard)sfi).isDroppedFromGolems()) \n                     continue;\n                 \n                 drops.add(drop.clone());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzE1MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449917151", "bodyText": "No \"and\" here. The syntax is as follow:\n@ see x\n@ see y\nAnd we usually place it below the @ author tag.", "author": "TheBusyBiscuit", "createdAt": "2020-07-05T20:47:38Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/RandomMobDrop.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.interfaces;\r\n+\r\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\r\n+\r\n+/**\r\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding \r\n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent}, this chance is 0-100\r\n+ * and used in conjunction with the MOB_DROP {@link RecipeType}. \r\n+ * @see BasicCircuitBoard and @see MobDropListener.\r", "originalCommit": "96b4394d7f1819ffacec2afeba3c5220d02afb7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b48b4b3d9b2a2a57009ef5741d40aae4a0bd65", "chunk": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/RandomMobDrop.java b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/RandomMobDrop.java\nindex 745e04eb5..1f7148a75 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/RandomMobDrop.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/interfaces/RandomMobDrop.java\n\n@@ -6,10 +6,12 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;\n  * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding \n  * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent}, this chance is 0-100\n  * and used in conjunction with the MOB_DROP {@link RecipeType}. \n- * @see BasicCircuitBoard and @see MobDropListener.\n  * \n  * @author dNiym\n  *\n+ * @see BasicCircuitBoard \n+ * @see MobDropListener.\n+ * \n  */\n @FunctionalInterface\n public interface RandomMobDrop extends ItemAttribute {\n"}}, {"oid": "43b48b4b3d9b2a2a57009ef5741d40aae4a0bd65", "url": "https://github.com/Slimefun/Slimefun4/commit/43b48b4b3d9b2a2a57009ef5741d40aae4a0bd65", "message": "Made Requested Changes", "committedDate": "2020-07-05T20:54:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyMjAzMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r449922031", "bodyText": "Why is this being continued? We want this to drop. You need to negate the isDropped...", "author": "WalshyDev", "createdAt": "2020-07-05T21:46:12Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java", "diffHunk": "@@ -48,14 +47,20 @@ public void onEntityKill(EntityDeathEvent e) {\n     }\n \n     private void addDrops(Player p, Set<ItemStack> customDrops, List<ItemStack> drops) {\n+    \tint random = ThreadLocalRandom.current().nextInt(100);\n+    \t\n         for (ItemStack drop : customDrops) {\n             if (Slimefun.hasUnlocked(p, drop, true)) {\n-                if (circuitBoard != null && circuitBoard.isItem(drop) && !circuitBoard.isDroppedFromGolems()) {\n+            \tSlimefunItem sfi = SlimefunItem.getByItem(drop);\n+            \tif (sfi instanceof RandomMobDrop && ((RandomMobDrop)sfi).getDropChance() <= random) \n+            \t\tcontinue;\n+            \t\n+                if (sfi instanceof BasicCircuitBoard  && ((BasicCircuitBoard)sfi).isDroppedFromGolems()) \n                     continue;", "originalCommit": "43b48b4b3d9b2a2a57009ef5741d40aae4a0bd65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyODU3Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r450528576", "bodyText": "this issue still exists", "author": "WalshyDev", "createdAt": "2020-07-06T23:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyMjAzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NzQ1MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2071#discussion_r450577450", "bodyText": "Fixed", "author": "dniym", "createdAt": "2020-07-07T02:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyMjAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "371b283d21ed39648a21cf34aa1a9ac97f186652", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\nindex dcaf5f941..11cf01f90 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MobDropListener.java\n\n@@ -47,17 +47,17 @@ public class MobDropListener implements Listener {\n     }\n \n     private void addDrops(Player p, Set<ItemStack> customDrops, List<ItemStack> drops) {\n-    \tint random = ThreadLocalRandom.current().nextInt(100);\n-    \t\n+        int random = ThreadLocalRandom.current().nextInt(100);\n+\n         for (ItemStack drop : customDrops) {\n             if (Slimefun.hasUnlocked(p, drop, true)) {\n-            \tSlimefunItem sfi = SlimefunItem.getByItem(drop);\n-            \tif (sfi instanceof RandomMobDrop && ((RandomMobDrop)sfi).getDropChance() <= random) \n-            \t\tcontinue;\n-            \t\n+                SlimefunItem sfi = SlimefunItem.getByItem(drop);\n+                if (sfi instanceof RandomMobDrop && ((RandomMobDrop)sfi).getDropChance() <= random) \n+                    continue;\n+\n                 if (sfi instanceof BasicCircuitBoard  && ((BasicCircuitBoard)sfi).isDroppedFromGolems()) \n                     continue;\n-                \n+\n                 drops.add(drop.clone());\n             }\n         }\n"}}, {"oid": "371b283d21ed39648a21cf34aa1a9ac97f186652", "url": "https://github.com/Slimefun/Slimefun4/commit/371b283d21ed39648a21cf34aa1a9ac97f186652", "message": "Replaced Tabs with Spaces as requested", "committedDate": "2020-07-06T23:19:13Z", "type": "commit"}, {"oid": "367dd8c9141a874e4b99cabd0b17b14bf3f7dd65", "url": "https://github.com/Slimefun/Slimefun4/commit/367dd8c9141a874e4b99cabd0b17b14bf3f7dd65", "message": "Negated isDroppedFromGolems", "committedDate": "2020-07-07T02:28:41Z", "type": "commit"}]}