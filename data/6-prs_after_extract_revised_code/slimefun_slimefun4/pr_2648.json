{"pr_number": 2648, "pr_title": "Fixes #2647", "pr_createdAt": "2020-12-23T14:19:47Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2648", "timeline": [{"oid": "2872cf8a2e832267f6a7f1deed1c580940af790b", "url": "https://github.com/Slimefun/Slimefun4/commit/2872cf8a2e832267f6a7f1deed1c580940af790b", "message": "Fixed #2647", "committedDate": "2020-12-23T14:17:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTczMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r547981731", "bodyText": "I think this unholy abomination of new lines justifies to have its own dedicated method.", "author": "TheBusyBiscuit", "createdAt": "2020-12-23T14:21:52Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -47,7 +47,12 @@ public void stomp(EntityDamageEvent fallDamageEvent) {\n         p.setVelocity(new Vector(0, 0.7, 0));\n \n         for (Entity n : p.getNearbyEntities(4, 4, 4)) {\n-            if (n instanceof LivingEntity && n.isValid() && !n.getUniqueId().equals(p.getUniqueId())) {\n+            if (n instanceof LivingEntity\n+                && n.isValid()\n+                && !n.getUniqueId().equals(p.getUniqueId())\n+                && ((LivingEntity) n).isCollidable()\n+                && n.hasGravity()\n+            ) {", "originalCommit": "2872cf8a2e832267f6a7f1deed1c580940af790b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MjQzMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r547982430", "bodyText": "\"abomination\"\nyou seen a few lines down? 181 chars on a line monkaS", "author": "WalshyDev", "createdAt": "2020-12-23T14:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTczMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4NTk4Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r547985982", "bodyText": "Still, putting this statement into its own method would also allow for flexibility in case a sub implementation wants to add additional checks.", "author": "TheBusyBiscuit", "createdAt": "2020-12-23T14:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "00c233dee59d1160e60513bea50439502eeb7818", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\nindex 1b934badb..7266bd8e6 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n\n@@ -37,54 +39,49 @@ public class StomperBoots extends SlimefunItem {\n \n     /**\n      * This will apply the \"stomp\" effect to the given {@link EntityDamageEvent}.\n-     * \n+     *\n      * @param fallDamageEvent\n      *            The {@link EntityDamageEvent} in which the {@link Player} has taken fall damage\n      */\n     public void stomp(EntityDamageEvent fallDamageEvent) {\n-        Player p = (Player) fallDamageEvent.getEntity();\n-        p.getWorld().playSound(p.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n-        p.setVelocity(new Vector(0, 0.7, 0));\n+        Player player = (Player) fallDamageEvent.getEntity();\n+        player.getWorld().playSound(player.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n+        player.setVelocity(new Vector(0, 0.7, 0));\n \n-        for (Entity n : p.getNearbyEntities(4, 4, 4)) {\n-            if (n instanceof LivingEntity\n-                && n.isValid()\n-                && !n.getUniqueId().equals(p.getUniqueId())\n-                && ((LivingEntity) n).isCollidable()\n-                && n.hasGravity()\n-            ) {\n-                Vector velocity = getShockwave(p.getLocation(), n.getLocation());\n-                n.setVelocity(velocity);\n+        for (Entity entity : player.getNearbyEntities(4, 4, 4)) {\n+            if (entity instanceof LivingEntity && canMoveEntity((LivingEntity) entity, player)) {\n+                Vector velocity = getShockwave(player.getLocation(), entity.getLocation());\n+                entity.setVelocity(velocity);\n \n                 // Check if it's not a Player or if PvP is enabled\n-                if (!(n instanceof Player) || (p.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(p, n.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n-                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(p, n, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n+                if (!(entity instanceof Player) || (player.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(player, entity.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n+                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(player, entity, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n                     Bukkit.getPluginManager().callEvent(event);\n \n                     if (!event.isCancelled()) {\n-                        ((LivingEntity) n).damage(event.getDamage());\n+                        ((LivingEntity) entity).damage(event.getDamage());\n                     }\n                 }\n             }\n         }\n \n         for (BlockFace face : BlockFace.values()) {\n-            Block b = p.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n-            p.getWorld().playEffect(b.getLocation(), Effect.STEP_SOUND, b.getType());\n+            Block b = player.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n+            player.getWorld().playEffect(b.getLocation(), Effect.STEP_SOUND, b.getType());\n         }\n     }\n \n     /**\n      * This gives us the \"shockwave\" {@link Vector} for a given target.\n-     * \n+     *\n      * @param origin\n      *            The {@link Location} of our {@link Player}\n      * @param target\n      *            The {@link Location} of the {@link Entity} we are pushing away\n-     * \n+     *\n      * @return A {@link Vector} to determine the velocity for our {@link Entity}\n      */\n-    private Vector getShockwave(Location origin, Location target) {\n+    private Vector getShockwave(@Nonnull Location origin, @Nonnull Location target) {\n         // As the distance approaches zero we might slip into a \"division by zero\" when normalizing\n         if (origin.distanceSquared(target) < 0.05) {\n             return new Vector(0, 1, 0);\n"}}, {"oid": "00c233dee59d1160e60513bea50439502eeb7818", "url": "https://github.com/Slimefun/Slimefun4/commit/00c233dee59d1160e60513bea50439502eeb7818", "message": "Move to a method", "committedDate": "2020-12-23T14:32:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODAyMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r547988022", "bodyText": "changes p to player but b not to block?", "author": "J3fftw1", "createdAt": "2020-12-23T14:35:28Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -37,54 +39,49 @@ public StomperBoots(Category category, SlimefunItemStack item, RecipeType recipe\n \n     /**\n      * This will apply the \"stomp\" effect to the given {@link EntityDamageEvent}.\n-     * \n+     *\n      * @param fallDamageEvent\n      *            The {@link EntityDamageEvent} in which the {@link Player} has taken fall damage\n      */\n     public void stomp(EntityDamageEvent fallDamageEvent) {\n-        Player p = (Player) fallDamageEvent.getEntity();\n-        p.getWorld().playSound(p.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n-        p.setVelocity(new Vector(0, 0.7, 0));\n+        Player player = (Player) fallDamageEvent.getEntity();\n+        player.getWorld().playSound(player.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n+        player.setVelocity(new Vector(0, 0.7, 0));\n \n-        for (Entity n : p.getNearbyEntities(4, 4, 4)) {\n-            if (n instanceof LivingEntity\n-                && n.isValid()\n-                && !n.getUniqueId().equals(p.getUniqueId())\n-                && ((LivingEntity) n).isCollidable()\n-                && n.hasGravity()\n-            ) {\n-                Vector velocity = getShockwave(p.getLocation(), n.getLocation());\n-                n.setVelocity(velocity);\n+        for (Entity entity : player.getNearbyEntities(4, 4, 4)) {\n+            if (entity instanceof LivingEntity && canMoveEntity((LivingEntity) entity, player)) {\n+                Vector velocity = getShockwave(player.getLocation(), entity.getLocation());\n+                entity.setVelocity(velocity);\n \n                 // Check if it's not a Player or if PvP is enabled\n-                if (!(n instanceof Player) || (p.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(p, n.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n-                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(p, n, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n+                if (!(entity instanceof Player) || (player.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(player, entity.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n+                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(player, entity, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n                     Bukkit.getPluginManager().callEvent(event);\n \n                     if (!event.isCancelled()) {\n-                        ((LivingEntity) n).damage(event.getDamage());\n+                        ((LivingEntity) entity).damage(event.getDamage());\n                     }\n                 }\n             }\n         }\n \n         for (BlockFace face : BlockFace.values()) {\n-            Block b = p.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n-            p.getWorld().playEffect(b.getLocation(), Effect.STEP_SOUND, b.getType());\n+            Block b = player.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);", "originalCommit": "00c233dee59d1160e60513bea50439502eeb7818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODMyNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r547988326", "bodyText": "reeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee leave me alone. Was just changing the shit associated with my method. Also b is a bit clearer than n or p", "author": "WalshyDev", "createdAt": "2020-12-23T14:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5MTM4Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r547991387", "bodyText": "i mean b is as clear as p in this case i agree n is weird but b and p are both really clear in this case so i would say make them all full name or 1 letter be consistent", "author": "J3fftw1", "createdAt": "2020-12-23T14:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6cf2051e604499c78e8f40c0be1bea463f8b4331", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\nindex 7266bd8e6..47637a8da 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n\n@@ -66,8 +66,8 @@ public class StomperBoots extends SlimefunItem {\n         }\n \n         for (BlockFace face : BlockFace.values()) {\n-            Block b = player.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n-            player.getWorld().playEffect(b.getLocation(), Effect.STEP_SOUND, b.getType());\n+            Block block = player.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n+            player.getWorld().playEffect(block.getLocation(), Effect.STEP_SOUND, block.getType());\n         }\n     }\n \n"}}, {"oid": "6cf2051e604499c78e8f40c0be1bea463f8b4331", "url": "https://github.com/Slimefun/Slimefun4/commit/6cf2051e604499c78e8f40c0be1bea463f8b4331", "message": "Panda smells", "committedDate": "2020-12-23T14:56:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA4ODk5MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548088990", "bodyText": "Why are you using @code instead of @link here?", "author": "TheBusyBiscuit", "createdAt": "2020-12-23T17:51:53Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -89,4 +91,20 @@ private Vector getShockwave(Location origin, Location target) {\n         }\n     }\n \n+    /**\n+     * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n+     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n+     * collision with {@code LivingEntity#setCollidable(false)} or\n+     * gravity with {@code LivingEntity#setGravity(false)}.", "originalCommit": "6cf2051e604499c78e8f40c0be1bea463f8b4331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI4NTk4MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548285981", "bodyText": "Just for the sake of adding false to be clear what people should do. I can change it", "author": "WalshyDev", "createdAt": "2020-12-23T22:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA4ODk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "9c31c746dd61da13303ad08fc41559fa22a4cebe", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\nindex 47637a8da..da217cf57 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n\n@@ -93,9 +93,10 @@ public class StomperBoots extends SlimefunItem {\n \n     /**\n      * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n-     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n-     * collision with {@code LivingEntity#setCollidable(false)} or\n-     * gravity with {@code LivingEntity#setGravity(false)}.\n+     * <p>\n+     * <b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n+     * collision with {@link LivingEntity#setCollidable(boolean)} or\n+     * gravity with {@link LivingEntity#setGravity(boolean)}.\n      *\n      * @param entity\n      *            The {@link LivingEntity} to check.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MDgxMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548090810", "bodyText": "I would suggest to swap the order of parameters here and rename the method.\nThe current order is unintuitive in my opinion or at least in a grammatical sense. If the method was called \"canBePushedBy\" then the current order would make more sense. So I am in favour of swapping these here.\nAlso if you want this to be overridden, then it should be at least protected.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean canMoveEntity(@Nonnull LivingEntity entity, @Nonnull Player player) {\n          \n          \n            \n                protected boolean canPush(@Nonnull Player player, @Nonnull LivingEntity entity) {", "author": "TheBusyBiscuit", "createdAt": "2020-12-23T17:54:03Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -89,4 +91,20 @@ private Vector getShockwave(Location origin, Location target) {\n         }\n     }\n \n+    /**\n+     * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n+     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n+     * collision with {@code LivingEntity#setCollidable(false)} or\n+     * gravity with {@code LivingEntity#setGravity(false)}.\n+     *\n+     * @param entity\n+     *            The {@link LivingEntity} to check.\n+     * @param player\n+     *            The {@link Player} using the {@link StomperBoots}.\n+     * @return If the entity can move.\n+     */\n+    private boolean canMoveEntity(@Nonnull LivingEntity entity, @Nonnull Player player) {", "originalCommit": "6cf2051e604499c78e8f40c0be1bea463f8b4331", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c31c746dd61da13303ad08fc41559fa22a4cebe", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\nindex 47637a8da..da217cf57 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n\n@@ -93,9 +93,10 @@ public class StomperBoots extends SlimefunItem {\n \n     /**\n      * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n-     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n-     * collision with {@code LivingEntity#setCollidable(false)} or\n-     * gravity with {@code LivingEntity#setGravity(false)}.\n+     * <p>\n+     * <b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n+     * collision with {@link LivingEntity#setCollidable(boolean)} or\n+     * gravity with {@link LivingEntity#setGravity(boolean)}.\n      *\n      * @param entity\n      *            The {@link LivingEntity} to check.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MTU3MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548091570", "bodyText": "According to the javadocs convention <br> should not be used. Instead <p> should be used to start a new paragraph.\nAlthough you will see the line break quite often in this codebase already because I didn't know that until recently either.", "author": "TheBusyBiscuit", "createdAt": "2020-12-23T17:54:54Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -89,4 +91,20 @@ private Vector getShockwave(Location origin, Location target) {\n         }\n     }\n \n+    /**\n+     * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n+     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying", "originalCommit": "6cf2051e604499c78e8f40c0be1bea463f8b4331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI4NjIwOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548286208", "bodyText": "Was doing it for consistency but sute", "author": "WalshyDev", "createdAt": "2020-12-23T22:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MTU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "9c31c746dd61da13303ad08fc41559fa22a4cebe", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\nindex 47637a8da..da217cf57 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n\n@@ -93,9 +93,10 @@ public class StomperBoots extends SlimefunItem {\n \n     /**\n      * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n-     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n-     * collision with {@code LivingEntity#setCollidable(false)} or\n-     * gravity with {@code LivingEntity#setGravity(false)}.\n+     * <p>\n+     * <b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n+     * collision with {@link LivingEntity#setCollidable(boolean)} or\n+     * gravity with {@link LivingEntity#setGravity(boolean)}.\n      *\n      * @param entity\n      *            The {@link LivingEntity} to check.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MjgzOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548092838", "bodyText": "I don't really see much of a problem with the naming of p, n and b but sure.", "author": "TheBusyBiscuit", "createdAt": "2020-12-23T17:56:20Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -37,49 +39,49 @@ public StomperBoots(Category category, SlimefunItemStack item, RecipeType recipe\n \n     /**\n      * This will apply the \"stomp\" effect to the given {@link EntityDamageEvent}.\n-     * \n+     *\n      * @param fallDamageEvent\n      *            The {@link EntityDamageEvent} in which the {@link Player} has taken fall damage\n      */\n     public void stomp(EntityDamageEvent fallDamageEvent) {\n-        Player p = (Player) fallDamageEvent.getEntity();\n-        p.getWorld().playSound(p.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n-        p.setVelocity(new Vector(0, 0.7, 0));\n+        Player player = (Player) fallDamageEvent.getEntity();\n+        player.getWorld().playSound(player.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n+        player.setVelocity(new Vector(0, 0.7, 0));\n \n-        for (Entity n : p.getNearbyEntities(4, 4, 4)) {\n-            if (n instanceof LivingEntity && n.isValid() && !n.getUniqueId().equals(p.getUniqueId())) {\n-                Vector velocity = getShockwave(p.getLocation(), n.getLocation());\n-                n.setVelocity(velocity);\n+        for (Entity entity : player.getNearbyEntities(4, 4, 4)) {\n+            if (entity instanceof LivingEntity && canMoveEntity((LivingEntity) entity, player)) {\n+                Vector velocity = getShockwave(player.getLocation(), entity.getLocation());\n+                entity.setVelocity(velocity);\n \n                 // Check if it's not a Player or if PvP is enabled\n-                if (!(n instanceof Player) || (p.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(p, n.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n-                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(p, n, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n+                if (!(entity instanceof Player) || (player.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(player, entity.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n+                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(player, entity, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n                     Bukkit.getPluginManager().callEvent(event);\n \n                     if (!event.isCancelled()) {\n-                        ((LivingEntity) n).damage(event.getDamage());\n+                        ((LivingEntity) entity).damage(event.getDamage());\n                     }\n                 }\n             }\n         }\n \n         for (BlockFace face : BlockFace.values()) {\n-            Block b = p.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n-            p.getWorld().playEffect(b.getLocation(), Effect.STEP_SOUND, b.getType());\n+            Block block = player.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n+            player.getWorld().playEffect(block.getLocation(), Effect.STEP_SOUND, block.getType());\n         }", "originalCommit": "6cf2051e604499c78e8f40c0be1bea463f8b4331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI3MTQyMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548271421", "bodyText": "p and b could be used fine like that but n for entity is a bit odd here, and besides I think using full names is cleaner and more easily readable", "author": "svr333", "createdAt": "2020-12-23T21:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MjgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "9c31c746dd61da13303ad08fc41559fa22a4cebe", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\nindex 47637a8da..da217cf57 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java\n\n@@ -49,7 +49,7 @@ public class StomperBoots extends SlimefunItem {\n         player.setVelocity(new Vector(0, 0.7, 0));\n \n         for (Entity entity : player.getNearbyEntities(4, 4, 4)) {\n-            if (entity instanceof LivingEntity && canMoveEntity((LivingEntity) entity, player)) {\n+            if (entity instanceof LivingEntity && canPush(player, (LivingEntity) entity)) {\n                 Vector velocity = getShockwave(player.getLocation(), entity.getLocation());\n                 entity.setVelocity(velocity);\n \n"}}, {"oid": "9c31c746dd61da13303ad08fc41559fa22a4cebe", "url": "https://github.com/Slimefun/Slimefun4/commit/9c31c746dd61da13303ad08fc41559fa22a4cebe", "message": "Requested changes", "committedDate": "2020-12-23T22:16:45Z", "type": "commit"}]}