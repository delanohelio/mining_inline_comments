{"pr_number": 2503, "pr_title": "Cargo Net Optimization: Cached Item Filters", "pr_createdAt": "2020-10-25T10:19:53Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2503", "timeline": [{"oid": "aaec763a78dd5d2995430b812549f67bb36bed72", "url": "https://github.com/Slimefun/Slimefun4/commit/aaec763a78dd5d2995430b812549f67bb36bed72", "message": "Added ItemFilter", "committedDate": "2020-10-20T11:56:21Z", "type": "commit"}, {"oid": "24806ab5d08e789d1b049a196042811f7ffbb6c8", "url": "https://github.com/Slimefun/Slimefun4/commit/24806ab5d08e789d1b049a196042811f7ffbb6c8", "message": "Adjusted CargoNet implementation", "committedDate": "2020-10-20T12:22:17Z", "type": "commit"}, {"oid": "e9ad3ee3574d80d7fe20718e60890172aa034d27", "url": "https://github.com/Slimefun/Slimefun4/commit/e9ad3ee3574d80d7fe20718e60890172aa034d27", "message": "Finished Cargo Filter implementation", "committedDate": "2020-10-25T00:47:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0MTk4MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r527341980", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This will markt the {@link ItemFilter} of the given node dirty.\n          \n          \n            \n                 * This will mark the {@link ItemFilter} of the given node dirty.", "author": "svr333", "createdAt": "2020-11-20T01:48:12Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java", "diffHunk": "@@ -326,10 +337,27 @@ protected long updateTerminals(@Nonnull Set<Location> providers) {\n \n     @Override\n     public void markDirty(@Nonnull Location l) {\n-        connectorCache.remove(l);\n+        markCargoNodeConfigurationDirty(l);\n         super.markDirty(l);\n     }\n \n+    /**\n+     * This will markt the {@link ItemFilter} of the given node dirty.", "originalCommit": "e9ad3ee3574d80d7fe20718e60890172aa034d27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f32b160a57523d407bb05eaef36e86d62c46507", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java\nindex 968b8f56b..524c6e8fe 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java\n\n@@ -342,7 +342,7 @@ abstract class AbstractItemNetwork extends Network {\n     }\n \n     /**\n-     * This will markt the {@link ItemFilter} of the given node dirty.\n+     * This will mark the {@link ItemFilter} of the given node dirty.\n      * It will also invalidate the cached rotation.\n      * \n      * @param node\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0MjgwOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r527342809", "bodyText": "Im not a fan of the name is because when reading it reads like:\nif is is not null\nHowever this is just my opinion", "author": "svr333", "createdAt": "2020-11-20T01:50:28Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java", "diffHunk": "@@ -432,7 +460,7 @@ private void gatherItemsFromBarrel(Location l, BlockMenu blockMenu, List<ItemSta\n             for (int slot : blockMenu.getPreset().getSlotsAccessedByItemTransport((DirtyChestMenu) blockMenu, ItemTransportFlow.WITHDRAW, null)) {\n                 ItemStack is = blockMenu.getItemInSlot(slot);\n \n-                if (is != null && CargoUtils.matchesFilter(l.getBlock(), is)) {\n+                if (is != null && CargoUtils.matchesFilter(this, l.getBlock(), is)) {", "originalCommit": "e9ad3ee3574d80d7fe20718e60890172aa034d27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1a3bf730beafb32f4a13a3438d5da56d94484c7", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java\nindex 968b8f56b..a7abb9eae 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java\n\n@@ -458,20 +458,20 @@ abstract class AbstractItemNetwork extends Network {\n             int stored = Integer.parseInt(data);\n \n             for (int slot : blockMenu.getPreset().getSlotsAccessedByItemTransport((DirtyChestMenu) blockMenu, ItemTransportFlow.WITHDRAW, null)) {\n-                ItemStack is = blockMenu.getItemInSlot(slot);\n+                ItemStack stack = blockMenu.getItemInSlot(slot);\n \n-                if (is != null && CargoUtils.matchesFilter(this, l.getBlock(), is)) {\n+                if (stack != null && CargoUtils.matchesFilter(this, l.getBlock(), stack)) {\n                     boolean add = true;\n \n                     for (ItemStackAndInteger item : items) {\n-                        if (SlimefunUtils.isItemSimilar(is, item.getItemStackWrapper(), true, false)) {\n+                        if (SlimefunUtils.isItemSimilar(stack, item.getItemStackWrapper(), true, false)) {\n                             add = false;\n-                            item.add(is.getAmount() + stored);\n+                            item.add(stack.getAmount() + stored);\n                         }\n                     }\n \n                     if (add) {\n-                        items.add(new ItemStackAndInteger(is, is.getAmount() + stored));\n+                        items.add(new ItemStackAndInteger(stack, stack.getAmount() + stored));\n                     }\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0MzQ4Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r527343487", "bodyText": "Not sure what the default here is\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (filter.isDirty()) {\n          \n          \n            \n                        filter.update(node);\n          \n          \n            \n                        return filter;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return filter;\n          \n          \n            \n                    } else if (filter.isDirty()) {\n          \n          \n            \n                        filter.update(node);\n          \n          \n            \n                    }\n          \n          \n            \n                    return filter;", "author": "svr333", "createdAt": "2020-11-20T01:52:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java", "diffHunk": "@@ -477,4 +505,21 @@ private void filter(@Nullable ItemStack stack, List<ItemStackAndInteger> items,\n         }\n     }\n \n+    @Nonnull\n+    protected ItemFilter getItemFilter(@Nonnull Block node) {\n+        Location loc = node.getLocation();\n+        ItemFilter filter = filterCache.get(loc);\n+\n+        if (filter == null) {\n+            ItemFilter newFilter = new ItemFilter(node);\n+            filterCache.put(loc, newFilter);\n+            return newFilter;\n+        } else if (filter.isDirty()) {\n+            filter.update(node);\n+            return filter;\n+        } else {\n+            return filter;", "originalCommit": "e9ad3ee3574d80d7fe20718e60890172aa034d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0NTgwMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r527345800", "bodyText": "Just no...", "author": "TheBusyBiscuit", "createdAt": "2020-11-20T02:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0MzQ4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4NzI4OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r527687289", "bodyText": "lol", "author": "svr333", "createdAt": "2020-11-20T13:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0MzQ4Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1f32b160a57523d407bb05eaef36e86d62c46507", "url": "https://github.com/Slimefun/Slimefun4/commit/1f32b160a57523d407bb05eaef36e86d62c46507", "message": "Update src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/AbstractItemNetwork.java\n\nCo-authored-by: Senne Van Rompaey <vanrompaey.senne@protonmail.com>", "committedDate": "2020-11-20T02:00:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjMwNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r534446304", "bodyText": "Not sure I'm the biggest fan of having another loop just for the sake of saving 1 #getItemMeta call on item. Especially since both the loops are for an Array meaning O(n). If it was a hash table and be O(1) then sure maybe but yeah. I feel like we're losing performance to try and improve performance.\nEdit: Not saying this should be using a hash table as there's no real way to use it here. Just saying I'd understand a bit more in that case", "author": "WalshyDev", "createdAt": "2020-12-02T20:03:09Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;\n+import io.github.thebusybiscuit.slimefun4.utils.itemstack.ItemStackWrapper;\n+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ * The {@link ItemFilter} is a performance-optimization for our {@link CargoNet}.\n+ * It is a snapshot of a cargo node's configuration.\n+ * \n+ * @author TheBusyBiscuit\n+ *\n+ */\n+class ItemFilter implements Predicate<ItemStack> {\n+\n+    /**\n+     * Our {@link List} of items to check against, might be empty.\n+     */\n+    private final List<ItemStackWrapper> items = new ArrayList<>();\n+\n+    /**\n+     * Our default value for this {@link ItemFilter}.\n+     * A default value of {@literal true} will mean that it returns true if no\n+     * match was found. It will deny any items that match.\n+     * A default value of {@literal false} means that it will return false if no\n+     * match was found. Only items that match will make it past this {@link ItemFilter}.\n+     */\n+    private boolean defaultValue;\n+\n+    /**\n+     * Whether we should also compare the lore.\n+     */\n+    private boolean checkLore;\n+\n+    /**\n+     * If an {@link ItemFilter} is marked as dirty / outdated, then it will be updated\n+     * on the next tick.\n+     */\n+    private boolean dirty = false;\n+\n+    /**\n+     * This creates a new {@link ItemFilter} for the given {@link Block}.\n+     * This will copy all settings from that {@link Block} to this filter.\n+     * \n+     * @param b\n+     *            The {@link Block}\n+     */\n+    public ItemFilter(@Nonnull Block b) {\n+        update(b);\n+    }\n+\n+    /**\n+     * This updates or refreshes the {@link ItemFilter} to copy the settings\n+     * from the given {@link Block}. It takes a new snapshot.\n+     * \n+     * @param b\n+     *            The {@link Block}\n+     */\n+    public void update(@Nonnull Block b) {\n+        // Store the returned Config instance to avoid heavy calls\n+        Config blockData = BlockStorage.getLocationInfo(b.getLocation());\n+        String id = blockData.getString(\"id\");\n+        SlimefunItem item = SlimefunItem.getByID(id);\n+        BlockMenu menu = BlockStorage.getInventory(b.getLocation());\n+\n+        if (item == null || menu == null) {\n+            // Don't filter for a non-existing item (safety check)\n+            clear(false);\n+        } else if (id.equals(\"CARGO_NODE_OUTPUT\")) {\n+            // Output Nodes have no filter, allow everything\n+            clear(true);\n+        } else {\n+            this.items.clear();\n+            this.checkLore = Objects.equals(blockData.getString(\"filter-lore\"), \"true\");\n+            this.defaultValue = !Objects.equals(blockData.getString(\"filter-type\"), \"whitelist\");\n+\n+            for (int slot : CargoUtils.FILTER_SLOTS) {\n+                ItemStack stack = menu.getItemInSlot(slot);\n+\n+                if (stack != null && stack.getType() != Material.AIR) {\n+                    this.items.add(new ItemStackWrapper(stack));\n+                }\n+            }\n+        }\n+\n+        this.dirty = false;\n+    }\n+\n+    /**\n+     * This will clear the {@link ItemFilter} and reject <strong>any</strong>\n+     * {@link ItemStack}.\n+     * \n+     * @param defaultValue\n+     *            The new default value.\n+     */\n+    private void clear(boolean defaultValue) {\n+        this.items.clear();\n+        this.checkLore = false;\n+        this.defaultValue = defaultValue;\n+    }\n+\n+    /**\n+     * Whether this {@link ItemFilter} is outdated and needs to be refreshed.\n+     * \n+     * @return Whether the filter is outdated.\n+     */\n+    public boolean isDirty() {\n+        return dirty;\n+    }\n+\n+    /**\n+     * This marks this {@link ItemFilter} as dirty / outdated.\n+     */\n+    public void markDirty() {\n+        this.dirty = true;\n+    }\n+\n+    @Override\n+    public boolean test(@Nonnull ItemStack item) {\n+        // An empty Filter does not need to be iterated over.\n+        if (items.isEmpty()) {\n+            return defaultValue;\n+        }\n+\n+        int potentialMatches = 0;\n+\n+        // This is a first check for materials to see if we might even have any match.\n+        // If there is no potential match then we won't need to perform the quite\n+        // intense operation .getItemMeta()\n+        for (ItemStackWrapper stack : items) {\n+            if (stack.getType() == item.getType()) {\n+                // We found a potential match based on the Material\n+                potentialMatches++;\n+            }\n+        }", "originalCommit": "1f32b160a57523d407bb05eaef36e86d62c46507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUzNzkyNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r534537927", "bodyText": "getItemMeta() is a very heavy function that can explode quite quickly.\nThis is a bit ugly but it does improve performance overall actually.\nThe horror of ItemMeta cloning is really worth this sacrifice here sadly.", "author": "TheBusyBiscuit", "createdAt": "2020-12-02T22:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAwMjQxMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r535002412", "bodyText": "Also, keep in mind that items has a maximum capacity of 9. So the impact will be quite small.", "author": "TheBusyBiscuit", "createdAt": "2020-12-03T09:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwMzgzMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r535203832", "bodyText": "(In the meantime I approved since I assume we're just waiting on Walshy to decide he believes you, take this as a bump for the blob)", "author": "Sfiguz7", "createdAt": "2020-12-03T12:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "e1a3bf730beafb32f4a13a3438d5da56d94484c7", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\nindex 634716edc..396493363 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\n\n@@ -29,8 +29,9 @@ class ItemFilter implements Predicate<ItemStack> {\n \n     /**\n      * Our {@link List} of items to check against, might be empty.\n+     * This has a maximum capacity of 9.\n      */\n-    private final List<ItemStackWrapper> items = new ArrayList<>();\n+    private final List<ItemStackWrapper> items = new ArrayList<>(9);\n \n     /**\n      * Our default value for this {@link ItemFilter}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjYyNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r534446627", "bodyText": "this. for consistency", "author": "WalshyDev", "createdAt": "2020-12-02T20:03:48Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;\n+import io.github.thebusybiscuit.slimefun4.utils.itemstack.ItemStackWrapper;\n+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ * The {@link ItemFilter} is a performance-optimization for our {@link CargoNet}.\n+ * It is a snapshot of a cargo node's configuration.\n+ * \n+ * @author TheBusyBiscuit\n+ *\n+ */\n+class ItemFilter implements Predicate<ItemStack> {\n+\n+    /**\n+     * Our {@link List} of items to check against, might be empty.\n+     */\n+    private final List<ItemStackWrapper> items = new ArrayList<>();\n+\n+    /**\n+     * Our default value for this {@link ItemFilter}.\n+     * A default value of {@literal true} will mean that it returns true if no\n+     * match was found. It will deny any items that match.\n+     * A default value of {@literal false} means that it will return false if no\n+     * match was found. Only items that match will make it past this {@link ItemFilter}.\n+     */\n+    private boolean defaultValue;\n+\n+    /**\n+     * Whether we should also compare the lore.\n+     */\n+    private boolean checkLore;\n+\n+    /**\n+     * If an {@link ItemFilter} is marked as dirty / outdated, then it will be updated\n+     * on the next tick.\n+     */\n+    private boolean dirty = false;\n+\n+    /**\n+     * This creates a new {@link ItemFilter} for the given {@link Block}.\n+     * This will copy all settings from that {@link Block} to this filter.\n+     * \n+     * @param b\n+     *            The {@link Block}\n+     */\n+    public ItemFilter(@Nonnull Block b) {\n+        update(b);\n+    }\n+\n+    /**\n+     * This updates or refreshes the {@link ItemFilter} to copy the settings\n+     * from the given {@link Block}. It takes a new snapshot.\n+     * \n+     * @param b\n+     *            The {@link Block}\n+     */\n+    public void update(@Nonnull Block b) {\n+        // Store the returned Config instance to avoid heavy calls\n+        Config blockData = BlockStorage.getLocationInfo(b.getLocation());\n+        String id = blockData.getString(\"id\");\n+        SlimefunItem item = SlimefunItem.getByID(id);\n+        BlockMenu menu = BlockStorage.getInventory(b.getLocation());\n+\n+        if (item == null || menu == null) {\n+            // Don't filter for a non-existing item (safety check)\n+            clear(false);\n+        } else if (id.equals(\"CARGO_NODE_OUTPUT\")) {\n+            // Output Nodes have no filter, allow everything\n+            clear(true);\n+        } else {\n+            this.items.clear();\n+            this.checkLore = Objects.equals(blockData.getString(\"filter-lore\"), \"true\");\n+            this.defaultValue = !Objects.equals(blockData.getString(\"filter-type\"), \"whitelist\");\n+\n+            for (int slot : CargoUtils.FILTER_SLOTS) {\n+                ItemStack stack = menu.getItemInSlot(slot);\n+\n+                if (stack != null && stack.getType() != Material.AIR) {\n+                    this.items.add(new ItemStackWrapper(stack));\n+                }\n+            }\n+        }\n+\n+        this.dirty = false;\n+    }\n+\n+    /**\n+     * This will clear the {@link ItemFilter} and reject <strong>any</strong>\n+     * {@link ItemStack}.\n+     * \n+     * @param defaultValue\n+     *            The new default value.\n+     */\n+    private void clear(boolean defaultValue) {\n+        this.items.clear();\n+        this.checkLore = false;\n+        this.defaultValue = defaultValue;\n+    }\n+\n+    /**\n+     * Whether this {@link ItemFilter} is outdated and needs to be refreshed.\n+     * \n+     * @return Whether the filter is outdated.\n+     */\n+    public boolean isDirty() {\n+        return dirty;", "originalCommit": "1f32b160a57523d407bb05eaef36e86d62c46507", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1a3bf730beafb32f4a13a3438d5da56d94484c7", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\nindex 634716edc..396493363 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\n\n@@ -29,8 +29,9 @@ class ItemFilter implements Predicate<ItemStack> {\n \n     /**\n      * Our {@link List} of items to check against, might be empty.\n+     * This has a maximum capacity of 9.\n      */\n-    private final List<ItemStackWrapper> items = new ArrayList<>();\n+    private final List<ItemStackWrapper> items = new ArrayList<>(9);\n \n     /**\n      * Our default value for this {@link ItemFilter}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0ODI3NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r534448274", "bodyText": "I don't really like the name of this variable. rejectItemIfMatched or something would be a bit clearer.", "author": "WalshyDev", "createdAt": "2020-12-02T20:06:36Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;\n+import io.github.thebusybiscuit.slimefun4.utils.itemstack.ItemStackWrapper;\n+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ * The {@link ItemFilter} is a performance-optimization for our {@link CargoNet}.\n+ * It is a snapshot of a cargo node's configuration.\n+ * \n+ * @author TheBusyBiscuit\n+ *\n+ */\n+class ItemFilter implements Predicate<ItemStack> {\n+\n+    /**\n+     * Our {@link List} of items to check against, might be empty.\n+     */\n+    private final List<ItemStackWrapper> items = new ArrayList<>();\n+\n+    /**\n+     * Our default value for this {@link ItemFilter}.\n+     * A default value of {@literal true} will mean that it returns true if no\n+     * match was found. It will deny any items that match.\n+     * A default value of {@literal false} means that it will return false if no\n+     * match was found. Only items that match will make it past this {@link ItemFilter}.\n+     */\n+    private boolean defaultValue;", "originalCommit": "1f32b160a57523d407bb05eaef36e86d62c46507", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1a3bf730beafb32f4a13a3438d5da56d94484c7", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\nindex 634716edc..396493363 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\n\n@@ -29,8 +29,9 @@ class ItemFilter implements Predicate<ItemStack> {\n \n     /**\n      * Our {@link List} of items to check against, might be empty.\n+     * This has a maximum capacity of 9.\n      */\n-    private final List<ItemStackWrapper> items = new ArrayList<>();\n+    private final List<ItemStackWrapper> items = new ArrayList<>(9);\n \n     /**\n      * Our default value for this {@link ItemFilter}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0OTU0Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2503#discussion_r534449547", "bodyText": "Not an issue just cool to see Objects.equals used here \ud83d\udc4d", "author": "WalshyDev", "createdAt": "2020-12-02T20:09:02Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;\n+import io.github.thebusybiscuit.slimefun4.utils.itemstack.ItemStackWrapper;\n+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ * The {@link ItemFilter} is a performance-optimization for our {@link CargoNet}.\n+ * It is a snapshot of a cargo node's configuration.\n+ * \n+ * @author TheBusyBiscuit\n+ *\n+ */\n+class ItemFilter implements Predicate<ItemStack> {\n+\n+    /**\n+     * Our {@link List} of items to check against, might be empty.\n+     */\n+    private final List<ItemStackWrapper> items = new ArrayList<>();\n+\n+    /**\n+     * Our default value for this {@link ItemFilter}.\n+     * A default value of {@literal true} will mean that it returns true if no\n+     * match was found. It will deny any items that match.\n+     * A default value of {@literal false} means that it will return false if no\n+     * match was found. Only items that match will make it past this {@link ItemFilter}.\n+     */\n+    private boolean defaultValue;\n+\n+    /**\n+     * Whether we should also compare the lore.\n+     */\n+    private boolean checkLore;\n+\n+    /**\n+     * If an {@link ItemFilter} is marked as dirty / outdated, then it will be updated\n+     * on the next tick.\n+     */\n+    private boolean dirty = false;\n+\n+    /**\n+     * This creates a new {@link ItemFilter} for the given {@link Block}.\n+     * This will copy all settings from that {@link Block} to this filter.\n+     * \n+     * @param b\n+     *            The {@link Block}\n+     */\n+    public ItemFilter(@Nonnull Block b) {\n+        update(b);\n+    }\n+\n+    /**\n+     * This updates or refreshes the {@link ItemFilter} to copy the settings\n+     * from the given {@link Block}. It takes a new snapshot.\n+     * \n+     * @param b\n+     *            The {@link Block}\n+     */\n+    public void update(@Nonnull Block b) {\n+        // Store the returned Config instance to avoid heavy calls\n+        Config blockData = BlockStorage.getLocationInfo(b.getLocation());\n+        String id = blockData.getString(\"id\");\n+        SlimefunItem item = SlimefunItem.getByID(id);\n+        BlockMenu menu = BlockStorage.getInventory(b.getLocation());\n+\n+        if (item == null || menu == null) {\n+            // Don't filter for a non-existing item (safety check)\n+            clear(false);\n+        } else if (id.equals(\"CARGO_NODE_OUTPUT\")) {\n+            // Output Nodes have no filter, allow everything\n+            clear(true);\n+        } else {\n+            this.items.clear();\n+            this.checkLore = Objects.equals(blockData.getString(\"filter-lore\"), \"true\");\n+            this.defaultValue = !Objects.equals(blockData.getString(\"filter-type\"), \"whitelist\");", "originalCommit": "1f32b160a57523d407bb05eaef36e86d62c46507", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1a3bf730beafb32f4a13a3438d5da56d94484c7", "chunk": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\nindex 634716edc..396493363 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/ItemFilter.java\n\n@@ -29,8 +29,9 @@ class ItemFilter implements Predicate<ItemStack> {\n \n     /**\n      * Our {@link List} of items to check against, might be empty.\n+     * This has a maximum capacity of 9.\n      */\n-    private final List<ItemStackWrapper> items = new ArrayList<>();\n+    private final List<ItemStackWrapper> items = new ArrayList<>(9);\n \n     /**\n      * Our default value for this {@link ItemFilter}.\n"}}, {"oid": "90df68b0e04a7ad9db88a798af525fd831d9198a", "url": "https://github.com/Slimefun/Slimefun4/commit/90df68b0e04a7ad9db88a798af525fd831d9198a", "message": "Merge branch 'master' of https://github.com/Slimefun/Slimefun4.git into optimization/cargo-filters", "committedDate": "2020-12-03T09:23:18Z", "type": "commit"}, {"oid": "e1a3bf730beafb32f4a13a3438d5da56d94484c7", "url": "https://github.com/Slimefun/Slimefun4/commit/e1a3bf730beafb32f4a13a3438d5da56d94484c7", "message": "Made requested changes", "committedDate": "2020-12-03T09:34:05Z", "type": "commit"}, {"oid": "5d15a7e5cf256f0ae23ce28002481add78b7e803", "url": "https://github.com/Slimefun/Slimefun4/commit/5d15a7e5cf256f0ae23ce28002481add78b7e803", "message": "Another small change", "committedDate": "2020-12-03T09:38:03Z", "type": "commit"}]}