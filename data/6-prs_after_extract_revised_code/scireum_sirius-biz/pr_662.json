{"pr_number": 662, "pr_title": "New DateRange and CodeListEntry job parameters", "pr_createdAt": "2020-01-16T09:30:39Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/662", "timeline": [{"oid": "cff699d2177e50a61fe2584bfd524ac5aa7b76b0", "url": "https://github.com/scireum/sirius-biz/commit/cff699d2177e50a61fe2584bfd524ac5aa7b76b0", "message": "Adds a new job parameter for DateRange entries\n\nFixes: OX-5522", "committedDate": "2020-01-16T09:25:26Z", "type": "commit"}, {"oid": "eb04724af5c286c9298e45d9e7e661792202be1f", "url": "https://github.com/scireum/sirius-biz/commit/eb04724af5c286c9298e45d9e7e661792202be1f", "message": "Adds a new job parameter for codelist entries\n\nA new getEntry helper method has been added to retrieve the raw entry object\n\nFixes: OX-5522", "committedDate": "2020-01-16T09:27:30Z", "type": "commit"}, {"oid": "d748bd54a1c8cb5a31975baa3b949f3964652c1e", "url": "https://github.com/scireum/sirius-biz/commit/d748bd54a1c8cb5a31975baa3b949f3964652c1e", "message": "Properly validates if a codelist entry exists\n\ntryGetValues would return the code itself with null value when the entry do not exist.\n\nFixes: OX-5522", "committedDate": "2020-01-16T09:29:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMxNTgwNA==", "url": "https://github.com/scireum/sirius-biz/pull/662#discussion_r367315804", "bodyText": "Maybe call list either list or codeList and the Param above codeListName?", "author": "sabieber", "createdAt": "2020-01-16T09:36:16Z", "path": "src/main/java/sirius/biz/codelists/CodeLists.java", "diffHunk": "@@ -394,6 +394,18 @@ public void verifyValue(@Nonnull String codeList, @Nullable String code) {\n                                  .queryList();\n     }\n \n+    /**\n+     * Returns the {@link CodeListEntry} from the given code list associated with the given code.\n+     *\n+     * @param codeList the code list to search in\n+     * @param code     the code to lookup\n+     * @return the entry associated with the code or an empty optional otherwise\n+     */\n+    public Optional<E> getEntry(@Nonnull String codeList, String code) {\n+        L cl = findOrCreateCodelist(codeList);", "originalCommit": "eb04724af5c286c9298e45d9e7e661792202be1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1da32301ea9f4f31cc1cf8d64dd662a09dbae83", "chunk": "diff --git a/src/main/java/sirius/biz/codelists/CodeLists.java b/src/main/java/sirius/biz/codelists/CodeLists.java\nindex b75324a4..efe26e5a 100644\n--- a/src/main/java/sirius/biz/codelists/CodeLists.java\n+++ b/src/main/java/sirius/biz/codelists/CodeLists.java\n\n@@ -369,26 +372,26 @@ public abstract class CodeLists<I, L extends BaseEntity<I> & CodeList, E extends\n      * safety net as these are rare circumstances (etc. during login) where a check and espically a failure does more\n      * harm than help. Also note that empty codes are simply ignored without reporting an error.\n      *\n-     * @param codeList the code list to search in\n-     * @param code     the code to lookup\n+     * @param codeListName the code list to search in\n+     * @param code         the code to lookup\n      * @throws sirius.kernel.health.HandledException if no entry exists for the given code or code list\n      */\n-    public void verifyValue(@Nonnull String codeList, @Nullable String code) {\n-        if (Strings.isFilled(code) && getCurrentTenant(codeList).isPresent() && !tryGetValue(codeList,\n-                                                                                             code).isPresent()) {\n-            throw createMissingCodeError(codeList, code);\n+    public void verifyValue(@Nonnull String codeListName, @Nullable String code) {\n+        if (Strings.isFilled(code) && getCurrentTenant(codeListName).isPresent() && !tryGetValue(codeListName,\n+                                                                                                 code).isPresent()) {\n+            throw createMissingCodeError(codeListName, code);\n         }\n     }\n \n     /**\n      * Returns all entries of a code list.\n      *\n-     * @param codeList the code list to fetch entries from\n+     * @param codeListName the code list to fetch entries from\n      * @return a list of all avilable entries in the given code list, sorted by priority\n      */\n-    public List<E> getEntries(@Nonnull String codeList) {\n-        L cl = findOrCreateCodelist(codeList);\n-        return createEntryQuery().eq(CodeListEntry.CODE_LIST, cl)\n+    public List<E> getEntries(@Nonnull String codeListName) {\n+        L codeList = findOrCreateCodelist(codeListName);\n+        return createEntryQuery().eq(CodeListEntry.CODE_LIST, codeList)\n                                  .orderAsc(CodeListEntry.CODE_LIST_ENTRY_DATA.inner(CodeListEntryData.PRIORITY))\n                                  .orderAsc(CodeListEntry.CODE_LIST_ENTRY_DATA.inner(CodeListEntryData.CODE))\n                                  .queryList();\n"}}, {"oid": "f1da32301ea9f4f31cc1cf8d64dd662a09dbae83", "url": "https://github.com/scireum/sirius-biz/commit/f1da32301ea9f4f31cc1cf8d64dd662a09dbae83", "message": "Review codestyle", "committedDate": "2020-01-16T10:11:34Z", "type": "commit"}]}