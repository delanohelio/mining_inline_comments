{"pr_number": 727, "pr_title": "SE-9561 save entity with unchanged blob", "pr_createdAt": "2020-04-21T13:50:17Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/727", "timeline": [{"oid": "5d8373014813f2eae2b40b31a2af2c134f29931d", "url": "https://github.com/scireum/sirius-biz/commit/5d8373014813f2eae2b40b31a2af2c134f29931d", "message": "Create parent class for Blob*RefProperty classes\n\nFixes: SE-9561", "committedDate": "2020-04-21T09:37:10Z", "type": "commit"}, {"oid": "86ed6fc6ad6b30b000e2f64a76b710cde48d6435", "url": "https://github.com/scireum/sirius-biz/commit/86ed6fc6ad6b30b000e2f64a76b710cde48d6435", "message": "Determine if blob has changed by comparing on entity\n\nFixes: SE-9561", "committedDate": "2020-04-21T09:50:56Z", "type": "commit"}, {"oid": "adc8cbc3fdc39e8b28230923da5af5126d6831a3", "url": "https://github.com/scireum/sirius-biz/commit/adc8cbc3fdc39e8b28230923da5af5126d6831a3", "message": "Remove old changed field and usages, add javadocs\n\nFixes: SE-9561", "committedDate": "2020-04-21T12:51:45Z", "type": "commit"}, {"oid": "48ac972467dd6c5c96ec6fffab338b6f68b7a38b", "url": "https://github.com/scireum/sirius-biz/commit/48ac972467dd6c5c96ec6fffab338b6f68b7a38b", "message": "Add testcase for bug verification\n\nFixes: SE-9561", "committedDate": "2020-04-21T13:34:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNjQ0NA==", "url": "https://github.com/scireum/sirius-biz/pull/727#discussion_r412206444", "bodyText": "protected or package visibility?", "author": "andyHa", "createdAt": "2020-04-21T13:55:50Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import sirius.db.jdbc.OMA;\n+import sirius.db.jdbc.schema.SQLPropertyInfo;\n+import sirius.db.jdbc.schema.Table;\n+import sirius.db.jdbc.schema.TableColumn;\n+import sirius.db.mixing.AccessPath;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Property;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import java.lang.reflect.Field;\n+import java.sql.Types;\n+\n+/**\n+ * Holder of common parts of blob reference property handling.\n+ * <p>\n+ * NOTE: This implementation assumes that BlobHardRef stays the parent class for all blob reference\n+ * property classes, which should be valid because hard and soft references should be enough.\n+ */\n+public abstract class BlobRefProperty extends Property implements SQLPropertyInfo {", "originalCommit": "48ac972467dd6c5c96ec6fffab338b6f68b7a38b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0NzY0NQ==", "url": "https://github.com/scireum/sirius-biz/pull/727#discussion_r412847645", "bodyText": "done", "author": "mkeckmkeck", "createdAt": "2020-04-22T10:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNjQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "bfb940e25ded1ff4fcb71f130575f17cc360eb62", "chunk": "diff --git a/src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java b/src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java\nindex e8f95008..c81cc23b 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java\n\n@@ -29,7 +29,7 @@ import java.sql.Types;\n  * NOTE: This implementation assumes that BlobHardRef stays the parent class for all blob reference\n  * property classes, which should be valid because hard and soft references should be enough.\n  */\n-public abstract class BlobRefProperty extends Property implements SQLPropertyInfo {\n+abstract class BlobRefProperty extends Property implements SQLPropertyInfo {\n \n     protected static final int DEFAULT_KEY_LENGTH = 64;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNjk5OA==", "url": "https://github.com/scireum/sirius-biz/pull/727#discussion_r412206998", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return <tt>true</tt> if unchanged, else <tt>false</tt>\n          \n          \n            \n                 * @return <tt>true</tt> if changed, <tt>false</tt> otherwise", "author": "andyHa", "createdAt": "2020-04-21T13:56:29Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import sirius.db.jdbc.OMA;\n+import sirius.db.jdbc.schema.SQLPropertyInfo;\n+import sirius.db.jdbc.schema.Table;\n+import sirius.db.jdbc.schema.TableColumn;\n+import sirius.db.mixing.AccessPath;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Property;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import java.lang.reflect.Field;\n+import java.sql.Types;\n+\n+/**\n+ * Holder of common parts of blob reference property handling.\n+ * <p>\n+ * NOTE: This implementation assumes that BlobHardRef stays the parent class for all blob reference\n+ * property classes, which should be valid because hard and soft references should be enough.\n+ */\n+public abstract class BlobRefProperty extends Property implements SQLPropertyInfo {\n+\n+    protected static final int DEFAULT_KEY_LENGTH = 64;\n+\n+    /**\n+     * Creates a new property for the given descriptor, access path and field.\n+     *\n+     * @param descriptor the descriptor which owns the property\n+     * @param accessPath the access path required to obtain the target object which contains the field\n+     * @param field      the field which stores the database value\n+     */\n+    protected BlobRefProperty(@Nonnull EntityDescriptor descriptor,\n+                              @Nonnull AccessPath accessPath,\n+                              @Nonnull Field field) {\n+        super(descriptor, accessPath, field);\n+    }\n+\n+    /**\n+     * Gets a {@link BlobHardRef} for the given entity.\n+     *\n+     * @param entity The entity to get the reference from\n+     * @return a {@link BlobHardRef} or a subclass of it\n+     */\n+    protected BlobHardRef getRef(Object entity) {\n+        try {\n+            return (BlobHardRef) super.getValueFromField(this.accessPath.apply(entity));\n+        } catch (Exception e) {\n+            throw Exceptions.handle()\n+                            .to(OMA.LOG)\n+                            .error(e)\n+                            .withSystemErrorMessage(\n+                                    \"Unable to obtain a reference object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                    getName(),\n+                                    descriptor.getType().getName())\n+                            .handle();\n+        }\n+    }\n+\n+    @Override\n+    protected Object getValueFromField(Object target) {\n+        return getRef(target).getKey();\n+    }\n+\n+    @Override\n+    public Object transformValue(Value value) {\n+        return value.get();\n+    }\n+\n+    @Override\n+    protected Object transformToJDBC(Object object) {\n+        return object;\n+    }\n+\n+    @Override\n+    protected Object transformFromJDBC(Value object) {\n+        return object.get();\n+    }\n+\n+    @Override\n+    public void setValue(Object entity, Object object) {\n+        this.setValueToField(object, entity);\n+    }\n+\n+    /**\n+     * Sets the given value on the target entity as either a blob or a key depending on the value.\n+     *\n+     * @param value        The value to be set\n+     * @param targetEntity The entity to be set on\n+     */\n+    protected void setValueToField(Object value, Object targetEntity) {\n+        BlobHardRef ref = getRef(targetEntity);\n+\n+        if (value == null || value instanceof Blob) {\n+            ref.setBlob((Blob) value);\n+        } else {\n+            ref.setKey((String) value);\n+        }\n+    }\n+\n+    @Override\n+    public void contributeToTable(Table table) {\n+        table.getColumns().add(new TableColumn(this, Types.CHAR));\n+    }\n+\n+    /**\n+     * Checks if the blob reference on the entity has changed since loading from DB.\n+     *\n+     * @param entity the entity to check\n+     * @return <tt>true</tt> if unchanged, else <tt>false</tt>", "originalCommit": "48ac972467dd6c5c96ec6fffab338b6f68b7a38b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNzQ2Ng==", "url": "https://github.com/scireum/sirius-biz/pull/727#discussion_r412207466", "bodyText": "the first part is the real change - second is just the common way to express the \"else\" part :)", "author": "andyHa", "createdAt": "2020-04-21T13:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNjk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0ODI4Mw==", "url": "https://github.com/scireum/sirius-biz/pull/727#discussion_r412848283", "bodyText": "done", "author": "mkeckmkeck", "createdAt": "2020-04-22T10:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNjk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "bfb940e25ded1ff4fcb71f130575f17cc360eb62", "chunk": "diff --git a/src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java b/src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java\nindex e8f95008..c81cc23b 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BlobRefProperty.java\n\n@@ -29,7 +29,7 @@ import java.sql.Types;\n  * NOTE: This implementation assumes that BlobHardRef stays the parent class for all blob reference\n  * property classes, which should be valid because hard and soft references should be enough.\n  */\n-public abstract class BlobRefProperty extends Property implements SQLPropertyInfo {\n+abstract class BlobRefProperty extends Property implements SQLPropertyInfo {\n \n     protected static final int DEFAULT_KEY_LENGTH = 64;\n \n"}}, {"oid": "c77a985d6e08dd1198863bdd6f83bef525d70f1d", "url": "https://github.com/scireum/sirius-biz/commit/c77a985d6e08dd1198863bdd6f83bef525d70f1d", "message": "Add some more tests\n\nFixes: SE-9561", "committedDate": "2020-04-22T10:03:07Z", "type": "commit"}, {"oid": "bfb940e25ded1ff4fcb71f130575f17cc360eb62", "url": "https://github.com/scireum/sirius-biz/commit/bfb940e25ded1ff4fcb71f130575f17cc360eb62", "message": "Fix review comments\n\nFixes: SE-9561", "committedDate": "2020-04-22T10:03:41Z", "type": "commit"}, {"oid": "591585e4ce15939d706702efa2dc7710218e3b4c", "url": "https://github.com/scireum/sirius-biz/commit/591585e4ce15939d706702efa2dc7710218e3b4c", "message": "Merge branch 'master' into mke/SE-9561_save_entity_with_unchanged_blob\n\n# Conflicts:\n#\tsrc/main/java/sirius/biz/storage/layer2/BlobHardRefProperty.java\n#\tsrc/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "committedDate": "2020-04-27T14:48:09Z", "type": "commit"}]}