{"pr_number": 796, "pr_title": "Provides the Performance Flags Framework", "pr_createdAt": "2020-06-23T14:37:12Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/796", "timeline": [{"oid": "aa1bdf65ca3e8d81989d06c4db2931538c69872d", "url": "https://github.com/scireum/sirius-biz/commit/aa1bdf65ca3e8d81989d06c4db2931538c69872d", "message": "Marks analytical tasks as AutoRegister.\n\nThese are typically classes not interfaces so they need this\nannotation to be automatically picked up by the framework.", "committedDate": "2020-06-23T14:33:03Z", "type": "commit"}, {"oid": "e3067bb9618f4839368d8c7d67ac6f1e416db8e4", "url": "https://github.com/scireum/sirius-biz/commit/e3067bb9618f4839368d8c7d67ac6f1e416db8e4", "message": "Adds some boilerplate methods when checking execution flags.", "committedDate": "2020-06-23T14:33:28Z", "type": "commit"}, {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef", "url": "https://github.com/scireum/sirius-biz/commit/1fc9594624fbe94ccf46ee35b073f5e382c02aef", "message": "Provides the initial implementation of the performance flags framework.\n\nSee src/main/java/sirius/biz/analytics/flags/README.md for a description\nof the framework.", "committedDate": "2020-06-23T14:34:49Z", "type": "commit"}, {"oid": "df7552abe10ac216a99e993ce5ee28f2e036fef3", "url": "https://github.com/scireum/sirius-biz/commit/df7552abe10ac216a99e993ce5ee28f2e036fef3", "message": "Code formatting.", "committedDate": "2020-06-23T14:35:10Z", "type": "commit"}, {"oid": "3ad196b6a86536469a5c15348edd23b4b64f9897", "url": "https://github.com/scireum/sirius-biz/commit/3ad196b6a86536469a5c15348edd23b4b64f9897", "message": "Permits an analytical task to throw an exception as these are handled anyway.", "committedDate": "2020-06-23T14:35:30Z", "type": "commit"}, {"oid": "60fbee3da26735104b777f7d73ee0c9dc5dbc611", "url": "https://github.com/scireum/sirius-biz/commit/60fbee3da26735104b777f7d73ee0c9dc5dbc611", "message": "Adds JavaDoc for PerformanceFlag.", "committedDate": "2020-06-23T14:53:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5NzcxMA==", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444297710", "bodyText": "why not exactly above the overloaded method?", "author": "sabieber", "createdAt": "2020-06-23T15:07:00Z", "path": "src/main/java/sirius/biz/analytics/flags/ExecutionFlags.java", "diffHunk": "@@ -37,6 +38,19 @@\n         return readExecutionFlag(reference.getUniqueName(), flag);\n     }\n \n+    /**\n+     * Determines if the last execution of the given <tt>flag</tt> for the given <tt>reference</tt> was within the\n+     * given <tt>duration</tt>.\n+     *\n+     * @param reference the entity for which the execution flag is to be determined\n+     * @param flag      the flag or type of execution to read\n+     * @param duration  the reference duration\n+     * @return <tt>true</tt> was stored (set) within the given duration, <tt>false</tt> otherwise\n+     */\n+    public boolean wasExecuted(BaseEntity<?> reference, String flag, Duration duration) {", "originalCommit": "e3067bb9618f4839368d8c7d67ac6f1e416db8e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8aa63afe1408625f43b03758b851494e6dec87e", "chunk": "diff --git a/src/main/java/sirius/biz/analytics/flags/ExecutionFlags.java b/src/main/java/sirius/biz/analytics/flags/ExecutionFlags.java\nindex 38be4a45..b5048612 100644\n--- a/src/main/java/sirius/biz/analytics/flags/ExecutionFlags.java\n+++ b/src/main/java/sirius/biz/analytics/flags/ExecutionFlags.java\n\n@@ -38,6 +38,15 @@ public abstract class ExecutionFlags {\n         return readExecutionFlag(reference.getUniqueName(), flag);\n     }\n \n+    /**\n+     * Determines the last execution of the given <tt>flag</tt> for the given <tt>reference</tt>.\n+     *\n+     * @param reference the entity for which the execution flag is to be determined\n+     * @param flag      the flag or type of execution to read\n+     * @return the timestamp of the last execution wrapped as optional or an empty optional if no record is available\n+     */\n+    public abstract Optional<LocalDateTime> readExecutionFlag(String reference, String flag);\n+\n     /**\n      * Determines if the last execution of the given <tt>flag</tt> for the given <tt>reference</tt> was within the\n      * given <tt>duration</tt>.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5ODA5Mw==", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444298093", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or\n          \n          \n            \n             * Note that this provides an abstract and database independent part. Use {@link SQLPerformanceData} or", "author": "sabieber", "createdAt": "2020-06-23T15:07:32Z", "path": "src/main/java/sirius/biz/analytics/flags/PerformanceData.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags;\n+\n+import sirius.biz.analytics.flags.jdbc.SQLPerformanceData;\n+import sirius.biz.analytics.flags.mongo.MongoPerformanceData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Can be embedded into an {@link BaseEntity entity} in order to record / toggle performance flags for it.\n+ * <p>\n+ * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or", "originalCommit": "1fc9594624fbe94ccf46ee35b073f5e382c02aef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c409bfed0c75cf28b4b8aafe31addf5a250fc8c", "chunk": "diff --git a/src/main/java/sirius/biz/analytics/flags/PerformanceData.java b/src/main/java/sirius/biz/analytics/flags/PerformanceData.java\nindex 33d947bc..154178c7 100644\n--- a/src/main/java/sirius/biz/analytics/flags/PerformanceData.java\n+++ b/src/main/java/sirius/biz/analytics/flags/PerformanceData.java\n\n@@ -20,7 +20,7 @@ import java.util.stream.Stream;\n /**\n  * Can be embedded into an {@link BaseEntity entity} in order to record / toggle performance flags for it.\n  * <p>\n- * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or\n+ * Note that this provides an abstract and database independent part. Use {@link SQLPerformanceData} or\n  * {@link MongoPerformanceData} depending on the actual entity type.\n  */\n public abstract class PerformanceData extends Composite {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5ODY0Mg==", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444298642", "bodyText": "modify?", "author": "sabieber", "createdAt": "2020-06-23T15:08:21Z", "path": "src/main/java/sirius/biz/analytics/flags/PerformanceData.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags;\n+\n+import sirius.biz.analytics.flags.jdbc.SQLPerformanceData;\n+import sirius.biz.analytics.flags.mongo.MongoPerformanceData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Can be embedded into an {@link BaseEntity entity} in order to record / toggle performance flags for it.\n+ * <p>\n+ * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or\n+ * {@link MongoPerformanceData} depending on the actual entity type.\n+ */\n+public abstract class PerformanceData extends Composite {\n+\n+    /**\n+     * Contains the name of the field which stores the flags.\n+     */\n+    public static final Mapping FLAGS = Mapping.named(\"flags\");\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    protected PerformanceData(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Obtains a modifier which can be used to efficiently update the flags for the underlying entity.\n+     *\n+     * @return a modifier used to change the flags for the underlying entity\n+     */\n+    public abstract PerformanceFlagModifier modifier();", "originalCommit": "1fc9594624fbe94ccf46ee35b073f5e382c02aef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c409bfed0c75cf28b4b8aafe31addf5a250fc8c", "chunk": "diff --git a/src/main/java/sirius/biz/analytics/flags/PerformanceData.java b/src/main/java/sirius/biz/analytics/flags/PerformanceData.java\nindex 33d947bc..154178c7 100644\n--- a/src/main/java/sirius/biz/analytics/flags/PerformanceData.java\n+++ b/src/main/java/sirius/biz/analytics/flags/PerformanceData.java\n\n@@ -20,7 +20,7 @@ import java.util.stream.Stream;\n /**\n  * Can be embedded into an {@link BaseEntity entity} in order to record / toggle performance flags for it.\n  * <p>\n- * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or\n+ * Note that this provides an abstract and database independent part. Use {@link SQLPerformanceData} or\n  * {@link MongoPerformanceData} depending on the actual entity type.\n  */\n public abstract class PerformanceData extends Composite {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMTE2Nw==", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444301167", "bodyText": "this sounds pretty generic and has performance flag specific implementation. maybe a more specific name is possible? Or a more generic implementation in sirius-db?", "author": "sabieber", "createdAt": "2020-06-23T15:11:56Z", "path": "src/main/java/sirius/biz/analytics/flags/jdbc/BitwiseConstraint.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags.jdbc;\n+\n+import sirius.biz.analytics.flags.PerformanceFlag;\n+import sirius.biz.analytics.flags.PerformanceFlagged;\n+import sirius.db.jdbc.SmartQuery;\n+import sirius.db.jdbc.constraints.SQLConstraint;\n+\n+/**\n+ * Provides a constraint which performs a bitwise check in order to determine if a performance flag is toggled.\n+ */\n+class BitwiseConstraint extends SQLConstraint {", "originalCommit": "1fc9594624fbe94ccf46ee35b073f5e382c02aef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "887cdbbab75f078bd1afeab8e01eb9838ce5d3c9", "chunk": "diff --git a/src/main/java/sirius/biz/analytics/flags/jdbc/BitwiseConstraint.java b/src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java\nsimilarity index 92%\nrename from src/main/java/sirius/biz/analytics/flags/jdbc/BitwiseConstraint.java\nrename to src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java\nindex 62ae8cec..0b724626 100644\n--- a/src/main/java/sirius/biz/analytics/flags/jdbc/BitwiseConstraint.java\n+++ b/src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java\n\n@@ -16,7 +16,7 @@ import sirius.db.jdbc.constraints.SQLConstraint;\n /**\n  * Provides a constraint which performs a bitwise check in order to determine if a performance flag is toggled.\n  */\n-class BitwiseConstraint extends SQLConstraint {\n+class PerformanceFlagConstraint extends SQLConstraint {\n \n     private PerformanceFlag flag;\n     private boolean expectedState;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjU5NA==", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444302594", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * As we use an optimized represnetation, each performance flag must be know ahead of time (declared as constant).\n          \n          \n            \n             * As we use an optimized representation, each performance flag must be know ahead of time (declared as constant).", "author": "sabieber", "createdAt": "2020-06-23T15:13:58Z", "path": "src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java", "diffHunk": "@@ -17,6 +21,11 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+/**\n+ * Represents a performance flag which can be toggled for an entity.\n+ * <p>\n+ * As we use an optimized represnetation, each performance flag must be know ahead of time (declared as constant).", "originalCommit": "60fbee3da26735104b777f7d73ee0c9dc5dbc611", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c409bfed0c75cf28b4b8aafe31addf5a250fc8c", "chunk": "diff --git a/src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java b/src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java\nindex 3e096566..41c742e7 100644\n--- a/src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java\n+++ b/src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java\n\n@@ -24,7 +24,7 @@ import java.util.stream.Stream;\n /**\n  * Represents a performance flag which can be toggled for an entity.\n  * <p>\n- * As we use an optimized represnetation, each performance flag must be know ahead of time (declared as constant).\n+ * As we use an optimized representation, each performance flag must be know ahead of time (declared as constant).\n  */\n public class PerformanceFlag {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjg5Mg==", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444302892", "bodyText": "this isnt really descriptive in my eyes", "author": "sabieber", "createdAt": "2020-06-23T15:14:22Z", "path": "src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java", "diffHunk": "@@ -17,6 +21,11 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+/**\n+ * Represents a performance flag which can be toggled for an entity.", "originalCommit": "60fbee3da26735104b777f7d73ee0c9dc5dbc611", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c409bfed0c75cf28b4b8aafe31addf5a250fc8c", "chunk": "diff --git a/src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java b/src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java\nindex 3e096566..41c742e7 100644\n--- a/src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java\n+++ b/src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java\n\n@@ -24,7 +24,7 @@ import java.util.stream.Stream;\n /**\n  * Represents a performance flag which can be toggled for an entity.\n  * <p>\n- * As we use an optimized represnetation, each performance flag must be know ahead of time (declared as constant).\n+ * As we use an optimized representation, each performance flag must be know ahead of time (declared as constant).\n  */\n public class PerformanceFlag {\n \n"}}, {"oid": "0c409bfed0c75cf28b4b8aafe31addf5a250fc8c", "url": "https://github.com/scireum/sirius-biz/commit/0c409bfed0c75cf28b4b8aafe31addf5a250fc8c", "message": "Apply suggestions from code review\n\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>", "committedDate": "2020-06-23T15:31:51Z", "type": "commit"}, {"oid": "5cdc8e109a04c5b73d02b256419d268d112a2e4a", "url": "https://github.com/scireum/sirius-biz/commit/5cdc8e109a04c5b73d02b256419d268d112a2e4a", "message": "Uses a proper method name.", "committedDate": "2020-06-23T15:37:18Z", "type": "commit"}, {"oid": "ceba80ea0dad1a234513e8f3ebfd37569bbc1a39", "url": "https://github.com/scireum/sirius-biz/commit/ceba80ea0dad1a234513e8f3ebfd37569bbc1a39", "message": "Tries to improve the JavaDocs of PerformanceFlag.", "committedDate": "2020-06-23T15:37:39Z", "type": "commit"}, {"oid": "887cdbbab75f078bd1afeab8e01eb9838ce5d3c9", "url": "https://github.com/scireum/sirius-biz/commit/887cdbbab75f078bd1afeab8e01eb9838ce5d3c9", "message": "Uses a proper class name to better represent the specific nature of this constraint.", "committedDate": "2020-06-23T15:38:14Z", "type": "commit"}, {"oid": "d8aa63afe1408625f43b03758b851494e6dec87e", "url": "https://github.com/scireum/sirius-biz/commit/d8aa63afe1408625f43b03758b851494e6dec87e", "message": "Sorts method by their function not by their level of boilerplateism.", "committedDate": "2020-06-23T16:01:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1Mjk1Nw==", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444652957", "bodyText": "Hat ein bisschen gedauert, bis ich geblickt hab, dass das bitwise operations sind... vllt n comment? Oder den column name auch als parameter in die query?", "author": "qw3ry", "createdAt": "2020-06-24T05:30:25Z", "path": "src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags.jdbc;\n+\n+import sirius.biz.analytics.flags.PerformanceFlag;\n+import sirius.biz.analytics.flags.PerformanceFlagged;\n+import sirius.db.jdbc.SmartQuery;\n+import sirius.db.jdbc.constraints.SQLConstraint;\n+\n+/**\n+ * Provides a constraint which performs a bitwise check in order to determine if a performance flag is toggled.\n+ */\n+class PerformanceFlagConstraint extends SQLConstraint {\n+\n+    private PerformanceFlag flag;\n+    private boolean expectedState;\n+\n+    /**\n+     * Generates a new constraint for the given flag and expected state.\n+     *\n+     * @param flag          the flag to check\n+     * @param expectedState the state to filter on\n+     */\n+    PerformanceFlagConstraint(PerformanceFlag flag, boolean expectedState) {\n+        this.flag = flag;\n+        this.expectedState = expectedState;\n+    }\n+\n+    @Override\n+    public void appendSQL(SmartQuery.Compiler compiler) {\n+        String columnName =\n+                compiler.translateColumnName(PerformanceFlagged.PERFORMANCE_DATA.inner(SQLPerformanceData.FLAGS));\n+        if (expectedState) {\n+            compiler.getWHEREBuilder().append(columnName).append(\" & ? <> 0\");\n+        } else {\n+            compiler.getWHEREBuilder().append(columnName).append(\" & ? = 0\");\n+        }", "originalCommit": "d8aa63afe1408625f43b03758b851494e6dec87e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "efff6b568ff5ee40f89f0e5ed360c084403829df", "chunk": "diff --git a/src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java b/src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java\nindex 0b724626..33dc5e1e 100644\n--- a/src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java\n+++ b/src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java\n\n@@ -15,6 +15,10 @@ import sirius.db.jdbc.constraints.SQLConstraint;\n \n /**\n  * Provides a constraint which performs a bitwise check in order to determine if a performance flag is toggled.\n+ * <p>\n+ * {@link SQLPerformanceData} stores all performance flag as bits in a 64 bit long ({@link SQLPerformanceData#FLAGS}).\n+ * So in order to check if a flag is set or not, we perform a bitwise and of this bit pattern\n+ * ({@code 1 << flag.getBitIndex()}) and then check for 1 if we filter on a set flag and 0 to filter on a cleared flag.\n  */\n class PerformanceFlagConstraint extends SQLConstraint {\n \n"}}, {"oid": "efff6b568ff5ee40f89f0e5ed360c084403829df", "url": "https://github.com/scireum/sirius-biz/commit/efff6b568ff5ee40f89f0e5ed360c084403829df", "message": "Improves the documentation of the inner workings of SQL/JDBC impl. of performance flags.", "committedDate": "2020-06-24T07:09:42Z", "type": "commit"}, {"oid": "a477ae59a9b15c3683cdbd0f9e1a0518c59a5487", "url": "https://github.com/scireum/sirius-biz/commit/a477ae59a9b15c3683cdbd0f9e1a0518c59a5487", "message": "Merge remote-tracking branch 'origin/master' into aha/performance-flags", "committedDate": "2020-06-24T07:10:00Z", "type": "commit"}]}