{"pr_number": 886, "pr_title": "Tycho: Updates Framework", "pr_createdAt": "2020-10-22T13:43:49Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/886", "timeline": [{"oid": "86756d99f63fed8259ae22e9c186d7fa2662a975", "url": "https://github.com/scireum/sirius-biz/commit/86756d99f63fed8259ae22e9c186d7fa2662a975", "message": "Provides an initial implementation of the updates framework.", "committedDate": "2020-10-22T13:27:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1MjU5MQ==", "url": "https://github.com/scireum/sirius-biz/pull/886#discussion_r511852591", "bodyText": "Codeformat", "author": "sabieber", "createdAt": "2020-10-26T10:19:20Z", "path": "src/main/java/sirius/biz/tycho/updates/UpdatesController.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.updates;\n+\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.tagliatelle.Tagliatelle;\n+import sirius.tagliatelle.compiler.CompileException;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+@Register(classes = Controller.class)\n+public class UpdatesController extends BizController {\n+\n+    @Part\n+    private UpdateManager updateManager;\n+\n+@Part", "originalCommit": "86756d99f63fed8259ae22e9c186d7fa2662a975", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "358c85babc6ace2ae0d594af3dad1f2d9c6beeff", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/updates/UpdatesController.java b/src/main/java/sirius/biz/tycho/updates/UpdatesController.java\nindex bff90b83..82d18cf6 100644\n--- a/src/main/java/sirius/biz/tycho/updates/UpdatesController.java\n+++ b/src/main/java/sirius/biz/tycho/updates/UpdatesController.java\n\n@@ -8,44 +8,39 @@\n \n package sirius.biz.tycho.updates;\n \n+import sirius.biz.analytics.events.EventRecorder;\n import sirius.biz.web.BizController;\n+import sirius.kernel.commons.Strings;\n import sirius.kernel.di.std.Part;\n import sirius.kernel.di.std.Register;\n-import sirius.tagliatelle.Tagliatelle;\n-import sirius.tagliatelle.compiler.CompileException;\n-import sirius.web.controller.Controller;\n import sirius.web.controller.Routed;\n import sirius.web.http.WebContext;\n+import sirius.web.services.InternalService;\n import sirius.web.services.JSONStructuredOutput;\n \n-@Register(classes = Controller.class)\n+/**\n+ * Provides a minimal API which creates a {@link UpdateClickEvent} if a user clicks on the \"read more\" link for an\n+ * {@link UpdateInfo update}.\n+ */\n+@Register\n public class UpdatesController extends BizController {\n \n     @Part\n-    private UpdateManager updateManager;\n-\n-@Part\n-private Tagliatelle tagliatelle;\n-\n-    @Routed(value = \"/tycho/updates\", jsonCall = true)\n-    public void checkForUpdates(WebContext webContext, JSONStructuredOutput output) throws CompileException {\n-        tagliatelle.resolve(\"/kb/IKGVF.html.pasta\").get().getPragma(\"tag\");\n-        output.property(\"hasUpdates\", getUser().isLoggedIn() && updateManager.hasUpdates(getUser().getUserId()));\n-        output.beginArray(\"updates\");\n-        for (UpdateInfo update : updateManager.getUpdates()) {\n-            output.beginObject(\"update\");\n-            output.property(\"label\", update.getLabel());\n-            output.property(\"description\", update.getDescription());\n-            output.property(\"link\", update.getLink());\n-            output.endObject();\n-        }\n-        output.endArray();\n-    }\n+    private EventRecorder eventRecorder;\n \n-    @Routed(value = \"/tycho/updates/markAsSeen\", jsonCall = true)\n+    /**\n+     * Records a click event for the given update and current user (if present).\n+     *\n+     * @param webContext the request to respond to\n+     * @param output     the JSON response - which is empty in this case, as this is a fire and forget operation for the\n+     *                   client\n+     */\n+    @InternalService\n+    @Routed(\"/tycho/updates/markAsSeen\")\n     public void markUpdatesAsSeen(WebContext webContext, JSONStructuredOutput output) {\n-        if (getUser().isLoggedIn()) {\n-            updateManager.markUpdatesAsShown(getUser().getUserId());\n+        String updateId = webContext.require(\"updateId\").asString();\n+        if (Strings.isFilled(updateId)) {\n+            eventRecorder.record(new UpdateClickEvent().forUpdateGuid(updateId));\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1MzA3Ng==", "url": "https://github.com/scireum/sirius-biz/pull/886#discussion_r511853076", "bodyText": "Hardcoded?", "author": "sabieber", "createdAt": "2020-10-26T10:20:13Z", "path": "src/main/java/sirius/biz/tycho/updates/UpdateManager.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.updates;\n+\n+import sirius.biz.analytics.flags.ExecutionFlags;\n+import sirius.kernel.commons.Limit;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.xml.StructuredNode;\n+import sirius.kernel.xml.XMLCall;\n+\n+import javax.xml.xpath.XPathExpressionException;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.time.LocalDateTime;\n+import java.time.Period;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Register(classes = UpdateManager.class)\n+public class UpdateManager {\n+\n+    @Part\n+    private ExecutionFlags executionFlags;\n+\n+    private List<UpdateInfo> updates = Collections.emptyList();\n+    private LocalDateTime lastFetch;\n+\n+    public boolean hasUpdates(String reference) {\n+        if (getUpdates().isEmpty()) {\n+            return false;\n+        }\n+\n+        Optional<LocalDateTime> lastView = executionFlags.readExecutionFlag(reference, \"updates-last-view\");\n+        if (!lastView.isPresent()) {\n+            return true;\n+        }\n+\n+        LocalDateTime limit = LocalDateTime.now().minusMonths(3);\n+\n+        return getUpdates().stream()\n+                           .filter(update -> update.getTimestamp().isAfter(limit))\n+                           .findFirst()\n+                           .filter(update -> update.getTimestamp().isAfter(lastView.get()))\n+                           .isPresent();\n+    }\n+\n+    public List<UpdateInfo> getUpdates() {\n+        LocalDateTime limit = LocalDateTime.now().minusDays(1);\n+        if (lastFetch == null || lastFetch.isBefore(limit)) {\n+            fetchUpdates();\n+        }\n+\n+        return Collections.unmodifiableList(updates);\n+    }\n+\n+    private void fetchUpdates() {\n+        try {\n+            Limit limit = new Limit(0, 5);\n+            List<UpdateInfo> nextUpdates = new ArrayList<>();\n+            XMLCall call = XMLCall.to(new URL(\"https://blog.scireum.de/feed\"));", "originalCommit": "86756d99f63fed8259ae22e9c186d7fa2662a975", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "358c85babc6ace2ae0d594af3dad1f2d9c6beeff", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/updates/UpdateManager.java b/src/main/java/sirius/biz/tycho/updates/UpdateManager.java\nindex 42761105..6d3a55ea 100644\n--- a/src/main/java/sirius/biz/tycho/updates/UpdateManager.java\n+++ b/src/main/java/sirius/biz/tycho/updates/UpdateManager.java\n\n@@ -8,85 +8,162 @@\n \n package sirius.biz.tycho.updates;\n \n-import sirius.biz.analytics.flags.ExecutionFlags;\n+import sirius.biz.analytics.events.EventRecorder;\n+import sirius.biz.analytics.events.UserData;\n+import sirius.db.jdbc.OMA;\n import sirius.kernel.commons.Limit;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.ConfigValue;\n import sirius.kernel.di.std.Part;\n import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n import sirius.kernel.xml.StructuredNode;\n import sirius.kernel.xml.XMLCall;\n+import sirius.web.security.UserInfo;\n \n-import javax.xml.xpath.XPathExpressionException;\n import java.io.IOException;\n import java.net.URL;\n import java.time.LocalDateTime;\n-import java.time.Period;\n import java.time.format.DateTimeFormatter;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Optional;\n+import java.util.stream.Collectors;\n \n+/**\n+ * Reads a given <tt>ATOM</tt> feed and serves the recorded items as {@link UpdateInfo updates} to the users of the\n+ * system.\n+ */\n @Register(classes = UpdateManager.class)\n public class UpdateManager {\n \n-    @Part\n-    private ExecutionFlags executionFlags;\n+    private static final String ATOM_FEED_CHANNEL = \"channel\";\n+    private static final String ATOM_FEED_ITEM = \"item\";\n+    private static final String WP_EXTENSION_POST_ID = \"post-id\";\n+    private static final String ATOM_ITEM_GUID = \"guid\";\n+    private static final String ATOM_ITEM_PUB_DATE = \"pubDate\";\n+    private static final String ATOM_ITEM_TITLE = \"title\";\n+    private static final String ATOM_ITEM_DESCRIPTION = \"description\";\n+    private static final String ATOM_ITEM_LINK = \"link\";\n+    private static final String ATOM_ITEM_CATEGORY = \"category\";\n \n-    private List<UpdateInfo> updates = Collections.emptyList();\n-    private LocalDateTime lastFetch;\n+    private static final int FEED_FETCH_INTERVAL_DAYS = 1;\n+    private static final int FEED_FETCH_RETRY_MINUTES = 15;\n+    private static final int MAX_FEED_ITEMS_TO_FETCH = 3;\n+    private static final long MAX_AGE_MONTHS = 3;\n \n-    public boolean hasUpdates(String reference) {\n-        if (getUpdates().isEmpty()) {\n-            return false;\n-        }\n+    @ConfigValue(\"tycho.updates.feedUrl\")\n+    private String feedUrl;\n \n-        Optional<LocalDateTime> lastView = executionFlags.readExecutionFlag(reference, \"updates-last-view\");\n-        if (!lastView.isPresent()) {\n-            return true;\n-        }\n+    @ConfigValue(\"tycho.updates.triggerCategories\")\n+    private List<String> triggerCategories;\n \n-        LocalDateTime limit = LocalDateTime.now().minusMonths(3);\n+    @ConfigValue(\"tycho.updates.importantCategories\")\n+    private List<String> importantCategories;\n \n-        return getUpdates().stream()\n-                           .filter(update -> update.getTimestamp().isAfter(limit))\n-                           .findFirst()\n-                           .filter(update -> update.getTimestamp().isAfter(lastView.get()))\n-                           .isPresent();\n-    }\n+    @Part\n+    private EventRecorder eventRecorder;\n+\n+    @Part\n+    private OMA oma;\n \n-    public List<UpdateInfo> getUpdates() {\n-        LocalDateTime limit = LocalDateTime.now().minusDays(1);\n-        if (lastFetch == null || lastFetch.isBefore(limit)) {\n-            fetchUpdates();\n+    private List<UpdateInfo> globalUpdates = Collections.emptyList();\n+    private LocalDateTime lastFetch;\n+    private LocalDateTime lastAttempt;\n+\n+    /**\n+     * Fetches all currently available updates.\n+     * <p>\n+     * Note that this can be called frequently, as the feed results are cached locally.\n+     *\n+     * @return the list of available updates.\n+     */\n+    public List<UpdateInfo> fetchUpdates() {\n+        if (Strings.isEmpty(feedUrl)) {\n+            return Collections.emptyList();\n         }\n \n-        return Collections.unmodifiableList(updates);\n+        LocalDateTime fetchLimit = LocalDateTime.now().minusDays(FEED_FETCH_INTERVAL_DAYS);\n+        LocalDateTime retryLimit = LocalDateTime.now().minusMinutes(FEED_FETCH_RETRY_MINUTES);\n+        if ((lastFetch == null || lastFetch.isBefore(fetchLimit)) && (lastAttempt == null || lastAttempt.isBefore(\n+                retryLimit))) {\n+            fetchUpdatesFromFeed();\n+        }\n+\n+        return Collections.unmodifiableList(globalUpdates);\n     }\n \n-    private void fetchUpdates() {\n+    private void fetchUpdatesFromFeed() {\n         try {\n-            Limit limit = new Limit(0, 5);\n+            this.lastAttempt = LocalDateTime.now();\n             List<UpdateInfo> nextUpdates = new ArrayList<>();\n-            XMLCall call = XMLCall.to(new URL(\"https://blog.scireum.de/feed\"));\n-            for (StructuredNode node : call.getInput().getNode(\"channel\").queryNodeList(\"item\")) {\n-                if (limit.nextRow()) {\n-                    UpdateInfo updateInfo =\n-                            new UpdateInfo(LocalDateTime.from(DateTimeFormatter.RFC_1123_DATE_TIME.parse(node.queryString(\n-                                    \"pubDate\"))),\n-                                           node.queryString(\"title\"),\n-                                           node.queryString(\"description\"),\n-                                           node.queryString(\"link\"));\n+            XMLCall call = XMLCall.to(new URL(feedUrl));\n+            Limit limit = new Limit(0, MAX_FEED_ITEMS_TO_FETCH);\n+            for (StructuredNode node : call.getInput().getNode(ATOM_FEED_CHANNEL).queryNodeList(ATOM_FEED_ITEM)) {\n+                List<String> categories = node.queryNodeList(ATOM_ITEM_CATEGORY)\n+                                              .stream()\n+                                              .map(category -> category.queryString(\".\"))\n+                                              .collect(Collectors.toList());\n+                UpdateInfo updateInfo = parseFeedItem(node, categories);\n+                if (isTriggerCategoryPresent(categories) && !isOutdated(updateInfo) && limit.nextRow()) {\n                     nextUpdates.add(updateInfo);\n                 }\n             }\n-            updates = nextUpdates;\n-            lastFetch = LocalDateTime.now();\n+            this.globalUpdates = nextUpdates;\n+            this.lastFetch = LocalDateTime.now();\n         } catch (IOException e) {\n-            e.printStackTrace();\n+            Exceptions.handle()\n+                      .error(e)\n+                      .to(Log.BACKGROUND)\n+                      .withSystemErrorMessage(\"Failed to fetch updates feed: %s (%s)\")\n+                      .handle();\n+        }\n+    }\n+\n+    private boolean isOutdated(UpdateInfo updateInfo) {\n+        return updateInfo.getCreated().isBefore(LocalDateTime.now().minusMonths(MAX_AGE_MONTHS));\n+    }\n+\n+    private boolean isTriggerCategoryPresent(List<String> categories) {\n+        return this.triggerCategories.isEmpty() || categories.stream().anyMatch(this.triggerCategories::contains);\n+    }\n+\n+    private UpdateInfo parseFeedItem(StructuredNode node, List<String> categories) {\n+        String guid = node.queryValue(WP_EXTENSION_POST_ID).asString(node.queryString(ATOM_ITEM_GUID));\n+        LocalDateTime pubDate =\n+                LocalDateTime.from(DateTimeFormatter.RFC_1123_DATE_TIME.parse(node.queryString(ATOM_ITEM_PUB_DATE)));\n+\n+        UpdateInfo updateInfo = new UpdateInfo(guid,\n+                                               pubDate,\n+                                               node.queryString(ATOM_ITEM_TITLE),\n+                                               node.queryString(ATOM_ITEM_DESCRIPTION),\n+                                               node.queryString(ATOM_ITEM_LINK));\n+        if (categories.stream().anyMatch(this.importantCategories::contains)) {\n+            updateInfo.markImportant();\n         }\n+        return updateInfo;\n     }\n \n-    public void markUpdatesAsShown(String reference) {\n-        executionFlags.storeExecutionFlag(reference, \"updates-last-view\", LocalDateTime.now(), Period.ofMonths(3));\n+    /**\n+     * Determines if the given user read (clicked) the given update item.\n+     * <p>\n+     * This is done by searching for a {@link UpdateClickEvent}. Note that this isn't supported by an index and\n+     * thus shouldn't be used heavily (i.e. in the frontend). This is rather intended to be used by the analytics\n+     * framework to decide if and when a user must be notified about updates via an email.\n+     *\n+     * @param userId     the id of the user to check. This must be the format as given in {@link UserInfo#getUserId()}\n+     * @param updateGuid the {@link UpdateInfo#getGuid()} to check\n+     * @return <tt>true</tt> if a click event was recorded, <tt>false</tt> otherwise\n+     */\n+    public boolean isRead(String userId, String updateGuid) {\n+        if (!eventRecorder.isConfigured()) {\n+            return false;\n+        }\n+\n+        return oma.select(UpdateClickEvent.class)\n+                  .eq(UpdateClickEvent.USER_DATA.inner(UserData.USER_ID), userId)\n+                  .eq(UpdateClickEvent.UPDATE_GUID, updateGuid)\n+                  .exists();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1MzIzNg==", "url": "https://github.com/scireum/sirius-biz/pull/886#discussion_r511853236", "bodyText": "Whats this?", "author": "sabieber", "createdAt": "2020-10-26T10:20:30Z", "path": "src/main/java/sirius/biz/tycho/updates/UpdatesController.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.updates;\n+\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.tagliatelle.Tagliatelle;\n+import sirius.tagliatelle.compiler.CompileException;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+@Register(classes = Controller.class)\n+public class UpdatesController extends BizController {\n+\n+    @Part\n+    private UpdateManager updateManager;\n+\n+@Part\n+private Tagliatelle tagliatelle;\n+\n+    @Routed(value = \"/tycho/updates\", jsonCall = true)\n+    public void checkForUpdates(WebContext webContext, JSONStructuredOutput output) throws CompileException {\n+        tagliatelle.resolve(\"/kb/IKGVF.html.pasta\").get().getPragma(\"tag\");", "originalCommit": "86756d99f63fed8259ae22e9c186d7fa2662a975", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "358c85babc6ace2ae0d594af3dad1f2d9c6beeff", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/updates/UpdatesController.java b/src/main/java/sirius/biz/tycho/updates/UpdatesController.java\nindex bff90b83..82d18cf6 100644\n--- a/src/main/java/sirius/biz/tycho/updates/UpdatesController.java\n+++ b/src/main/java/sirius/biz/tycho/updates/UpdatesController.java\n\n@@ -8,44 +8,39 @@\n \n package sirius.biz.tycho.updates;\n \n+import sirius.biz.analytics.events.EventRecorder;\n import sirius.biz.web.BizController;\n+import sirius.kernel.commons.Strings;\n import sirius.kernel.di.std.Part;\n import sirius.kernel.di.std.Register;\n-import sirius.tagliatelle.Tagliatelle;\n-import sirius.tagliatelle.compiler.CompileException;\n-import sirius.web.controller.Controller;\n import sirius.web.controller.Routed;\n import sirius.web.http.WebContext;\n+import sirius.web.services.InternalService;\n import sirius.web.services.JSONStructuredOutput;\n \n-@Register(classes = Controller.class)\n+/**\n+ * Provides a minimal API which creates a {@link UpdateClickEvent} if a user clicks on the \"read more\" link for an\n+ * {@link UpdateInfo update}.\n+ */\n+@Register\n public class UpdatesController extends BizController {\n \n     @Part\n-    private UpdateManager updateManager;\n-\n-@Part\n-private Tagliatelle tagliatelle;\n-\n-    @Routed(value = \"/tycho/updates\", jsonCall = true)\n-    public void checkForUpdates(WebContext webContext, JSONStructuredOutput output) throws CompileException {\n-        tagliatelle.resolve(\"/kb/IKGVF.html.pasta\").get().getPragma(\"tag\");\n-        output.property(\"hasUpdates\", getUser().isLoggedIn() && updateManager.hasUpdates(getUser().getUserId()));\n-        output.beginArray(\"updates\");\n-        for (UpdateInfo update : updateManager.getUpdates()) {\n-            output.beginObject(\"update\");\n-            output.property(\"label\", update.getLabel());\n-            output.property(\"description\", update.getDescription());\n-            output.property(\"link\", update.getLink());\n-            output.endObject();\n-        }\n-        output.endArray();\n-    }\n+    private EventRecorder eventRecorder;\n \n-    @Routed(value = \"/tycho/updates/markAsSeen\", jsonCall = true)\n+    /**\n+     * Records a click event for the given update and current user (if present).\n+     *\n+     * @param webContext the request to respond to\n+     * @param output     the JSON response - which is empty in this case, as this is a fire and forget operation for the\n+     *                   client\n+     */\n+    @InternalService\n+    @Routed(\"/tycho/updates/markAsSeen\")\n     public void markUpdatesAsSeen(WebContext webContext, JSONStructuredOutput output) {\n-        if (getUser().isLoggedIn()) {\n-            updateManager.markUpdatesAsShown(getUser().getUserId());\n+        String updateId = webContext.require(\"updateId\").asString();\n+        if (Strings.isFilled(updateId)) {\n+            eventRecorder.record(new UpdateClickEvent().forUpdateGuid(updateId));\n         }\n     }\n }\n"}}, {"oid": "7c0f8e9cd303f7248b536e06b9b7518020b27a0a", "url": "https://github.com/scireum/sirius-biz/commit/7c0f8e9cd303f7248b536e06b9b7518020b27a0a", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-updates", "committedDate": "2021-06-30T06:51:25Z", "type": "commit"}, {"oid": "21cd5cd6b66d84c2ce1d02aeba74eb13c75c210c", "url": "https://github.com/scireum/sirius-biz/commit/21cd5cd6b66d84c2ce1d02aeba74eb13c75c210c", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-updates", "committedDate": "2021-07-02T08:52:19Z", "type": "commit"}, {"oid": "c8939e038247841c79e9a72fb32da3dcf221921f", "url": "https://github.com/scireum/sirius-biz/commit/c8939e038247841c79e9a72fb32da3dcf221921f", "message": "Provides a generic dashboard as main entry-point of Tycho apps.", "committedDate": "2021-07-02T20:15:53Z", "type": "commit"}, {"oid": "29c894285ef510b3cd75540eac87ed5bfca6c322", "url": "https://github.com/scireum/sirius-biz/commit/29c894285ef510b3cd75540eac87ed5bfca6c322", "message": "Provides extensions for common help topics.", "committedDate": "2021-07-02T20:16:50Z", "type": "commit"}, {"oid": "e643a2342466d1890cf1bb42b4bdc279910a4b5a", "url": "https://github.com/scireum/sirius-biz/commit/e643a2342466d1890cf1bb42b4bdc279910a4b5a", "message": "Improves the security for accessTokens used by the academy.\n\nBy only using a hash of the user-id, tokens might be generated elsewhere\nand used here. Therefor we add a custom suffix to make them unique.", "committedDate": "2021-07-02T20:17:49Z", "type": "commit"}, {"oid": "0b4973e11171f028e6d4869ca6838ffde639f2d5", "url": "https://github.com/scireum/sirius-biz/commit/0b4973e11171f028e6d4869ca6838ffde639f2d5", "message": "Adds a random academy video to the dashboard sidebar.", "committedDate": "2021-07-02T20:18:08Z", "type": "commit"}, {"oid": "358c85babc6ace2ae0d594af3dad1f2d9c6beeff", "url": "https://github.com/scireum/sirius-biz/commit/358c85babc6ace2ae0d594af3dad1f2d9c6beeff", "message": "Finalizes the updates framework.\n\nThis loads news from an ATOM feed and shows them to the users of the\nTycho UI.", "committedDate": "2021-07-02T20:21:13Z", "type": "commit"}, {"oid": "358c85babc6ace2ae0d594af3dad1f2d9c6beeff", "url": "https://github.com/scireum/sirius-biz/commit/358c85babc6ace2ae0d594af3dad1f2d9c6beeff", "message": "Finalizes the updates framework.\n\nThis loads news from an ATOM feed and shows them to the users of the\nTycho UI.", "committedDate": "2021-07-02T20:21:13Z", "type": "forcePushed"}, {"oid": "01f8fa685e1ccc0049d9866b8a771851ce1d0c8c", "url": "https://github.com/scireum/sirius-biz/commit/01f8fa685e1ccc0049d9866b8a771851ce1d0c8c", "message": "Typo", "committedDate": "2021-07-05T06:53:44Z", "type": "commit"}, {"oid": "56670dbac80c9ff0ce0a00f75ac68baea24f52cd", "url": "https://github.com/scireum/sirius-biz/commit/56670dbac80c9ff0ce0a00f75ac68baea24f52cd", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-updates", "committedDate": "2021-07-06T14:27:13Z", "type": "commit"}, {"oid": "a410cbb8761c630f6519ad618606df99e0629fe9", "url": "https://github.com/scireum/sirius-biz/commit/a410cbb8761c630f6519ad618606df99e0629fe9", "message": "Prevents a template error in case a framework is disabled.", "committedDate": "2021-07-08T15:09:51Z", "type": "commit"}, {"oid": "ec93a87cfa786ced9a80a39ef9d4bdc87078b400", "url": "https://github.com/scireum/sirius-biz/commit/ec93a87cfa786ced9a80a39ef9d4bdc87078b400", "message": "Fixes startup warnings.", "committedDate": "2021-07-08T15:19:21Z", "type": "commit"}, {"oid": "f9705148a65d09a95f9fd2387824048410238fe0", "url": "https://github.com/scireum/sirius-biz/commit/f9705148a65d09a95f9fd2387824048410238fe0", "message": "Removes a leftover bracket.", "committedDate": "2021-07-08T15:24:56Z", "type": "commit"}, {"oid": "9b0f4793c9b2e18835f282483b487cee292434e4", "url": "https://github.com/scireum/sirius-biz/commit/9b0f4793c9b2e18835f282483b487cee292434e4", "message": "Updates to the latest sirius dependencies.", "committedDate": "2021-07-19T07:34:48Z", "type": "commit"}, {"oid": "0a398f5354b21a4f44ebe131cdb50f0e53a6d8a0", "url": "https://github.com/scireum/sirius-biz/commit/0a398f5354b21a4f44ebe131cdb50f0e53a6d8a0", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-updates\n\n# Conflicts:\n#\tpom.xml\n#\tsrc/main/resources/biz_de.properties", "committedDate": "2021-07-19T07:36:28Z", "type": "commit"}, {"oid": "f7e08b731bb620ad8041c1b3326a62818a8c7473", "url": "https://github.com/scireum/sirius-biz/commit/f7e08b731bb620ad8041c1b3326a62818a8c7473", "message": "Updates to the correct sirius version.", "committedDate": "2021-07-19T08:02:54Z", "type": "commit"}, {"oid": "e7f272c9a9ad9ead32912699e10becfa3c4a7396", "url": "https://github.com/scireum/sirius-biz/commit/e7f272c9a9ad9ead32912699e10becfa3c4a7396", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-updates\n\n# Conflicts:\n#\tpom.xml", "committedDate": "2021-07-19T08:09:25Z", "type": "commit"}]}