{"pr_number": 850, "pr_title": "Allows job parameters to be logged only as system message or not at all", "pr_createdAt": "2020-09-03T08:54:21Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/850", "timeline": [{"oid": "fc391e3cfefb80ef51de0d9e5e91c4f9af505065", "url": "https://github.com/scireum/sirius-biz/commit/fc391e3cfefb80ef51de0d9e5e91c4f9af505065", "message": "Allows job parameters to be logged only as system message or not at all\n\nAltough parameters can be restricted by permission within the collectParameters method, once they are logged they can be seen by everyone who has access to these logs. As this could expose sensitive data, parameters can now restrict their logging behaviour.\n\nFixes: OX-6144", "committedDate": "2020-09-03T08:51:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyMzQ4MQ==", "url": "https://github.com/scireum/sirius-biz/pull/850#discussion_r482823481", "bodyText": "i18n", "author": "andyHa", "createdAt": "2020-09-03T09:04:23Z", "path": "src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java", "diffHunk": "@@ -213,16 +216,36 @@ protected void executeTask(ProcessContext process) throws Exception {\n     protected abstract BatchJob createJob(ProcessContext process) throws Exception;\n \n     protected void logParameters(ProcessContext process) {\n+        List<Parameter<?, ?>> parameters = getParameters();\n+\n         StringBuilder output = new StringBuilder();\n         output.append(\"Parameter:\\n\\n\");\n+        appendParameterValues(process, output, parameters, Parameter::shouldBeNormalLogged);\n+        process.log(ProcessLog.info().withMessage(output.toString().trim()));\n+\n+        if (parameters.stream().anyMatch(Parameter::shouldBeSystemLogged)) {\n+            logSystemParameters(process, parameters);\n+        }\n+    }\n \n-        getParameters().forEach(param -> {\n+    private void logSystemParameters(ProcessContext process, List<Parameter<?, ?>> parameters) {\n+        StringBuilder output = new StringBuilder();\n+        output.append(\"Systemparameter:\\n\\n\");", "originalCommit": "fc391e3cfefb80ef51de0d9e5e91c4f9af505065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6d3e70b56e9a5d1fab3b689f162d4a6c12859aa", "chunk": "diff --git a/src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java b/src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java\nindex 359457c5..e1bd4cb8 100644\n--- a/src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java\n+++ b/src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java\n\n@@ -218,34 +218,28 @@ public abstract class BatchProcessJobFactory extends BasicJobFactory {\n     protected void logParameters(ProcessContext process) {\n         List<Parameter<?, ?>> parameters = getParameters();\n \n-        StringBuilder output = new StringBuilder();\n-        output.append(\"Parameter:\\n\\n\");\n-        appendParameterValues(process, output, parameters, Parameter::shouldBeNormalLogged);\n-        process.log(ProcessLog.info().withMessage(output.toString().trim()));\n-\n-        if (parameters.stream().anyMatch(Parameter::shouldBeSystemLogged)) {\n-            logSystemParameters(process, parameters);\n-        }\n+        makeParameterLog(process, parameters, Parameter.LogVisibility.NORMAL).ifPresent(process::log);\n+        makeParameterLog(process, parameters, Parameter.LogVisibility.SYSTEM).ifPresent(processLog -> process.log(\n+                processLog.asSystemMessage()));\n     }\n \n-    private void logSystemParameters(ProcessContext process, List<Parameter<?, ?>> parameters) {\n+    private Optional<ProcessLog> makeParameterLog(ProcessContext process,\n+                                                  List<Parameter<?, ?>> parameters,\n+                                                  Parameter.LogVisibility logVisibility) {\n+        if (parameters.stream().noneMatch(parameter -> logVisibility == parameter.getLogVisibility())) {\n+            return Optional.empty();\n+        }\n         StringBuilder output = new StringBuilder();\n-        output.append(\"Systemparameter:\\n\\n\");\n-        appendParameterValues(process, output, parameters, Parameter::shouldBeSystemLogged);\n-        process.log(ProcessLog.info().asSystemMessage().withMessage(output.toString().trim()));\n-    }\n-\n-    private void appendParameterValues(ProcessContext process,\n-                                       StringBuilder output,\n-                                       List<Parameter<?, ?>> parameters,\n-                                       Predicate<Parameter<?, ?>> logFilter) {\n+        output.append(NLS.get(\"ProcessLog.parameterHeading.\" + logVisibility.name()));\n+        output.append(\":\\n\\n\");\n \n-        parameters.stream().filter(logFilter).forEach(param -> {\n+        parameters.stream().filter(parameter -> logVisibility == parameter.getLogVisibility()).forEach(param -> {\n             String value = process.getParameter(param).map(NLS::toUserString).orElse(\"\");\n             output.append(param.getLabel());\n             output.append(\": \");\n             output.append(value);\n             output.append(\"\\n\");\n         });\n+        return Optional.of(ProcessLog.info().withMessage(output.toString().trim()));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyMzU0Mw==", "url": "https://github.com/scireum/sirius-biz/pull/850#discussion_r482823543", "bodyText": "i18n", "author": "andyHa", "createdAt": "2020-09-03T09:04:30Z", "path": "src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java", "diffHunk": "@@ -213,16 +216,36 @@ protected void executeTask(ProcessContext process) throws Exception {\n     protected abstract BatchJob createJob(ProcessContext process) throws Exception;\n \n     protected void logParameters(ProcessContext process) {\n+        List<Parameter<?, ?>> parameters = getParameters();\n+\n         StringBuilder output = new StringBuilder();\n         output.append(\"Parameter:\\n\\n\");", "originalCommit": "fc391e3cfefb80ef51de0d9e5e91c4f9af505065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNDQ0Mg==", "url": "https://github.com/scireum/sirius-biz/pull/850#discussion_r482824442", "bodyText": "couldn't we re-use the code and call it twice with a different heading and predicate (Parameter::shouldBeSystemLogged or p -> !p.shouldBeSystemLogged())", "author": "andyHa", "createdAt": "2020-09-03T09:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyMzU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNTc1MQ==", "url": "https://github.com/scireum/sirius-biz/pull/850#discussion_r482825751", "bodyText": "scratch that - add a getVisibility() +- parameter and simply pass in the desired visibility type (other normal or system)...", "author": "andyHa", "createdAt": "2020-09-03T09:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyMzU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b6d3e70b56e9a5d1fab3b689f162d4a6c12859aa", "chunk": "diff --git a/src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java b/src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java\nindex 359457c5..e1bd4cb8 100644\n--- a/src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java\n+++ b/src/main/java/sirius/biz/jobs/batch/BatchProcessJobFactory.java\n\n@@ -218,34 +218,28 @@ public abstract class BatchProcessJobFactory extends BasicJobFactory {\n     protected void logParameters(ProcessContext process) {\n         List<Parameter<?, ?>> parameters = getParameters();\n \n-        StringBuilder output = new StringBuilder();\n-        output.append(\"Parameter:\\n\\n\");\n-        appendParameterValues(process, output, parameters, Parameter::shouldBeNormalLogged);\n-        process.log(ProcessLog.info().withMessage(output.toString().trim()));\n-\n-        if (parameters.stream().anyMatch(Parameter::shouldBeSystemLogged)) {\n-            logSystemParameters(process, parameters);\n-        }\n+        makeParameterLog(process, parameters, Parameter.LogVisibility.NORMAL).ifPresent(process::log);\n+        makeParameterLog(process, parameters, Parameter.LogVisibility.SYSTEM).ifPresent(processLog -> process.log(\n+                processLog.asSystemMessage()));\n     }\n \n-    private void logSystemParameters(ProcessContext process, List<Parameter<?, ?>> parameters) {\n+    private Optional<ProcessLog> makeParameterLog(ProcessContext process,\n+                                                  List<Parameter<?, ?>> parameters,\n+                                                  Parameter.LogVisibility logVisibility) {\n+        if (parameters.stream().noneMatch(parameter -> logVisibility == parameter.getLogVisibility())) {\n+            return Optional.empty();\n+        }\n         StringBuilder output = new StringBuilder();\n-        output.append(\"Systemparameter:\\n\\n\");\n-        appendParameterValues(process, output, parameters, Parameter::shouldBeSystemLogged);\n-        process.log(ProcessLog.info().asSystemMessage().withMessage(output.toString().trim()));\n-    }\n-\n-    private void appendParameterValues(ProcessContext process,\n-                                       StringBuilder output,\n-                                       List<Parameter<?, ?>> parameters,\n-                                       Predicate<Parameter<?, ?>> logFilter) {\n+        output.append(NLS.get(\"ProcessLog.parameterHeading.\" + logVisibility.name()));\n+        output.append(\":\\n\\n\");\n \n-        parameters.stream().filter(logFilter).forEach(param -> {\n+        parameters.stream().filter(parameter -> logVisibility == parameter.getLogVisibility()).forEach(param -> {\n             String value = process.getParameter(param).map(NLS::toUserString).orElse(\"\");\n             output.append(param.getLabel());\n             output.append(\": \");\n             output.append(value);\n             output.append(\"\\n\");\n         });\n+        return Optional.of(ProcessLog.info().withMessage(output.toString().trim()));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNTM0MQ==", "url": "https://github.com/scireum/sirius-biz/pull/850#discussion_r482825341", "bodyText": "wouldn't a getter be enough here? it is only used in another condition, we could even use this as a parameter (s.a.)", "author": "andyHa", "createdAt": "2020-09-03T09:07:21Z", "path": "src/main/java/sirius/biz/jobs/params/Parameter.java", "diffHunk": "@@ -122,6 +148,25 @@ public boolean isVisible(Map<String, String> context) {\n         return get(context).isPresent();\n     }\n \n+    /**", "originalCommit": "fc391e3cfefb80ef51de0d9e5e91c4f9af505065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6d3e70b56e9a5d1fab3b689f162d4a6c12859aa", "chunk": "diff --git a/src/main/java/sirius/biz/jobs/params/Parameter.java b/src/main/java/sirius/biz/jobs/params/Parameter.java\nindex 19fef576..5629f552 100644\n--- a/src/main/java/sirius/biz/jobs/params/Parameter.java\n+++ b/src/main/java/sirius/biz/jobs/params/Parameter.java\n\n@@ -148,25 +148,6 @@ public abstract class Parameter<V, P extends Parameter<V, P>> {\n         return get(context).isPresent();\n     }\n \n-    /**\n-     * Determines if the parameter can appear in the normal log.\n-     *\n-     * @return <tt>true</tt> if the parameter should be logged, <tt>false</tt> otherwise\n-     */\n-    public boolean shouldBeNormalLogged() {\n-        return this.logVisibility == LogVisibility.NORMAL;\n-    }\n-\n-    /**\n-     * Determines if the parameter should only appear in the system log.\n-     *\n-     * @return <tt>true</tt> if the parameter should be logged, <tt>false</tt> otherwise\n-     */\n-    public boolean shouldBeSystemLogged() {\n-        return this.logVisibility == LogVisibility.SYSTEM;\n-    }\n-\n-\n     /**\n      * Returns the name of the template used to render the parameter in the UI.\n      *\n"}}, {"oid": "b6d3e70b56e9a5d1fab3b689f162d4a6c12859aa", "url": "https://github.com/scireum/sirius-biz/commit/b6d3e70b56e9a5d1fab3b689f162d4a6c12859aa", "message": "Refactors and simplifies parameter logging\n\nFixes: OX-6144", "committedDate": "2020-09-03T10:03:31Z", "type": "commit"}]}