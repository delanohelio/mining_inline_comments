{"pr_number": 887, "pr_title": "Tycho: OpenSearch Framework", "pr_createdAt": "2020-10-22T13:44:38Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/887", "timeline": [{"oid": "a9f2d8462829744882fff7ff72c8251856751cb9", "url": "https://github.com/scireum/sirius-biz/commit/a9f2d8462829744882fff7ff72c8251856751cb9", "message": "Provides an initial implementation of the Tycho Search Framework.", "committedDate": "2020-10-23T07:35:59Z", "type": "commit"}, {"oid": "7188fd45f34fe7ffa998e83ba4ee5bee249ddb16", "url": "https://github.com/scireum/sirius-biz/commit/7188fd45f34fe7ffa998e83ba4ee5bee249ddb16", "message": "Makes a permission check reusable.", "committedDate": "2020-10-23T12:19:53Z", "type": "commit"}, {"oid": "e525e03d7c9a22d8d6ca0bf9d68e3f7a59ce09ad", "url": "https://github.com/scireum/sirius-biz/commit/e525e03d7c9a22d8d6ca0bf9d68e3f7a59ce09ad", "message": "Also selects the title and salutation when rendering a list of users.", "committedDate": "2020-10-23T12:20:28Z", "type": "commit"}, {"oid": "8843da01f977ac101eeb8105879f620f4ccf2180", "url": "https://github.com/scireum/sirius-biz/commit/8843da01f977ac101eeb8105879f620f4ccf2180", "message": "Provides open search providers for user accounts.", "committedDate": "2020-10-23T12:20:56Z", "type": "commit"}, {"oid": "044778e8e70081c86f3d3f7aa3b4a75d5f65f2bd", "url": "https://github.com/scireum/sirius-biz/commit/044778e8e70081c86f3d3f7aa3b4a75d5f65f2bd", "message": "Provides open search providers for user tenants.", "committedDate": "2020-10-23T12:21:09Z", "type": "commit"}, {"oid": "dd1de1b2dbafd8e7f07f5fee91a7d5c40c007716", "url": "https://github.com/scireum/sirius-biz/commit/dd1de1b2dbafd8e7f07f5fee91a7d5c40c007716", "message": "Provides an open search provider for jobs.", "committedDate": "2020-10-23T12:21:25Z", "type": "commit"}, {"oid": "efbfaf8baa40f74281f8584cde6154147d594644", "url": "https://github.com/scireum/sirius-biz/commit/efbfaf8baa40f74281f8584cde6154147d594644", "message": "Provides an open search provider for VFS roots.", "committedDate": "2020-10-23T12:21:38Z", "type": "commit"}, {"oid": "cf1c669b29d20c492d1c40eb5c82afd8c31e79bc", "url": "https://github.com/scireum/sirius-biz/commit/cf1c669b29d20c492d1c40eb5c82afd8c31e79bc", "message": "Fixes a JS bug in the scaffolding UI.", "committedDate": "2020-10-23T12:22:00Z", "type": "commit"}, {"oid": "cf1c669b29d20c492d1c40eb5c82afd8c31e79bc", "url": "https://github.com/scireum/sirius-biz/commit/cf1c669b29d20c492d1c40eb5c82afd8c31e79bc", "message": "Fixes a JS bug in the scaffolding UI.", "committedDate": "2020-10-23T12:22:00Z", "type": "forcePushed"}, {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81", "url": "https://github.com/scireum/sirius-biz/commit/ad866481e0e866ee90aa966c4b9e222606adee81", "message": "Adds an initial and minimal documentation.", "committedDate": "2020-10-26T09:20:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDUyOA==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511854528", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n          \n          \n            \n             * searches being executed. This is done in order to protect the system as each search invokes multiple providers", "author": "sabieber", "createdAt": "2020-10-26T10:22:47Z", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\nindex 5dc3b17c..4e45ed65 100644\n--- a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n+++ b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n\n@@ -43,12 +43,12 @@ import java.util.concurrent.TimeUnit;\n  * <p>\n  * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n  * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n- * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * searches being executed. This is done in order to protect the system as each search invokes multiple providers\n  * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n  * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n  * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n- * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n- * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each\n  * in its own line (separated by a <tt>\\n</tt>).\n  * <p>\n  * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDg0OQ==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511854849", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n          \n          \n            \n             * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use", "author": "sabieber", "createdAt": "2020-10-26T10:23:20Z", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\nindex 5dc3b17c..4e45ed65 100644\n--- a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n+++ b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n\n@@ -43,12 +43,12 @@ import java.util.concurrent.TimeUnit;\n  * <p>\n  * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n  * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n- * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * searches being executed. This is done in order to protect the system as each search invokes multiple providers\n  * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n  * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n  * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n- * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n- * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each\n  * in its own line (separated by a <tt>\\n</tt>).\n  * <p>\n  * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NTAyMQ==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511855021", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n          \n          \n            \n             * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each", "author": "sabieber", "createdAt": "2020-10-26T10:23:35Z", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\nindex 5dc3b17c..4e45ed65 100644\n--- a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n+++ b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n\n@@ -43,12 +43,12 @@ import java.util.concurrent.TimeUnit;\n  * <p>\n  * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n  * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n- * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * searches being executed. This is done in order to protect the system as each search invokes multiple providers\n  * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n  * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n  * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n- * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n- * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each\n  * in its own line (separated by a <tt>\\n</tt>).\n  * <p>\n  * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NjI4Nw==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511856287", "bodyText": "Should this be bound to a framework/role ?", "author": "sabieber", "createdAt": "2020-10-26T10:25:38Z", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register", "originalCommit": "a9f2d8462829744882fff7ff72c8251856751cb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MzMyMA==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r513293320", "bodyText": "As this will be part of the default UI of sirius I'd always turn it on.\nIf someone wants to use the URIs differently, a lower prio value could be used.\nI'd say this is more convenient than having to remember to turn on all kinds of frameworks for the UI to work...", "author": "andyHa", "createdAt": "2020-10-28T09:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NjI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\nindex 5dc3b17c..4e45ed65 100644\n--- a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n+++ b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n\n@@ -43,12 +43,12 @@ import java.util.concurrent.TimeUnit;\n  * <p>\n  * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n  * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n- * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * searches being executed. This is done in order to protect the system as each search invokes multiple providers\n  * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n  * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n  * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n- * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n- * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each\n  * in its own line (separated by a <tt>\\n</tt>).\n  * <p>\n  * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzA1MQ==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511857051", "bodyText": "Shouldnt this be priorized as well?", "author": "sabieber", "createdAt": "2020-10-26T10:26:53Z", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register\n+public class OpenSearchController extends BizController {\n+\n+    /**\n+     * Contains a readily built byte array to separate messages.\n+     * <p>\n+     * The client library expects that we sent the results as \"comets\" - that are JSON objects separated by a new line.\n+     * This way, we can immediatelly render the first results even while other providers are still searching for\n+     * possible matches.\n+     */\n+    private static final byte[] NEWLINE = \"\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    /**\n+     * Specifies the maximal search duration before a search is canceled.\n+     * <p>\n+     * As we want to prevent a system overload if too many or too intense searches are performed, we abort once\n+     * a query has been running for 5 seconds. Note that we don't necessarily interrupt any provider itself as\n+     * this is not supported by the JVM - we however can close the connection to the client and free up the spot\n+     * in the main thread pool.\n+     */\n+    private static final Duration SEARCH_TIMEOUT = Duration.ofSeconds(5);\n+\n+    /**\n+     * To ensure that all possible results are rendered properly, we limit each provider to only 8 results at most.\n+     */\n+    private static final int MAX_RESULTS_PER_CATEGORY = 8;\n+\n+    /**\n+     * Contains the name of the main thread pool which executes all searches.\n+     */\n+    private static final String TYCHO_OPEN_SEARCH_POOL = \"tycho-open-search\";\n+\n+    /**\n+     * Contains the name of the inner thread pool which actually executes the query of a single provider. We use this\n+     * additional thread pool so that a slow provider does not slow down other providers.\n+     */\n+    private static final String TYCHO_OPEN_SEARCH_TASK_POOL = \"tycho-open-search-task\";\n+\n+    private static final String PARAM_QUERY = \"query\";\n+    private static final String RESPONSE_OVERLOAD = \"overload\";\n+    private static final String CONTENT_TYPE_APPLICATION_JSON = \"application/json\";\n+    private static final byte[] RESPONSE_COMPLETED_MESSAGE = \"{\\\"completed\\\":true}\\n\".getBytes(StandardCharsets.UTF_8);\n+    private static final String RESPONSE_CATEGORY = \"category\";\n+    private static final String RESPONSE_CATEGORY_URL = \"categoryUrl\";\n+    private static final String RESPONSE_PRIORITY = \"priority\";\n+    private static final String RESPONSE_LABEL = \"label\";\n+    private static final String RESPONSE_DESCRIPTION = \"description\";\n+    private static final String RESPONSE_URL = \"url\";\n+    private static final String RESPONSE_ACTIONS = \"actions\";\n+\n+    @Parts(OpenSearchProvider.class)", "originalCommit": "a9f2d8462829744882fff7ff72c8251856751cb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5Mzc2NQ==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r513293765", "bodyText": "nope, the results are - these providers are executed in parallel so sorting them doesn't make too much sense...", "author": "andyHa", "createdAt": "2020-10-28T09:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\nindex 5dc3b17c..4e45ed65 100644\n--- a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n+++ b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n\n@@ -43,12 +43,12 @@ import java.util.concurrent.TimeUnit;\n  * <p>\n  * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n  * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n- * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * searches being executed. This is done in order to protect the system as each search invokes multiple providers\n  * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n  * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n  * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n- * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n- * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each\n  * in its own line (separated by a <tt>\\n</tt>).\n  * <p>\n  * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MDI2Mw==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511860263", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n          \n          \n            \n             * Provides the base implementation to make implementations of {@link Tenant} visible in the", "author": "sabieber", "createdAt": "2020-10-26T10:32:06Z", "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.Formatter;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link Tenant} viaible in the", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tenants/TenantSearchProvider.java b/src/main/java/sirius/biz/tenants/TenantSearchProvider.java\nindex 858e6124..3ad86a08 100644\n--- a/src/main/java/sirius/biz/tenants/TenantSearchProvider.java\n+++ b/src/main/java/sirius/biz/tenants/TenantSearchProvider.java\n\n@@ -23,7 +23,7 @@ import javax.annotation.Nullable;\n import java.util.function.Consumer;\n \n /**\n- * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n+ * Provides the base implementation to make implementations of {@link Tenant} visible in the\n  * {@link sirius.biz.tycho.search.OpenSearchController}.\n  *\n  * @param <I> the type of database IDs used by the concrete implementation\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MTA0Mw==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511861043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provides the base implementation to mak implementations of {@link UserAccount} viaible in the\n          \n          \n            \n             * Provides the base implementation to make implementations of {@link UserAccount} visible in the", "author": "sabieber", "createdAt": "2020-10-26T10:33:25Z", "path": "src/main/java/sirius/biz/tenants/UserAccountSearchProvider.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tenants.jdbc.SQLUserAccount;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link UserAccount} viaible in the", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tenants/UserAccountSearchProvider.java b/src/main/java/sirius/biz/tenants/UserAccountSearchProvider.java\nindex 1188deb9..a8fe38ef 100644\n--- a/src/main/java/sirius/biz/tenants/UserAccountSearchProvider.java\n+++ b/src/main/java/sirius/biz/tenants/UserAccountSearchProvider.java\n\n@@ -25,7 +25,7 @@ import java.util.Objects;\n import java.util.function.Consumer;\n \n /**\n- * Provides the base implementation to mak implementations of {@link UserAccount} viaible in the\n+ * Provides the base implementation to make implementations of {@link UserAccount} visible in the\n  * {@link sirius.biz.tycho.search.OpenSearchController}.\n  *\n  * @param <I> the type of database IDs used by the concrete implementation\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNzIwNA==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512107204", "bodyText": "Space f\u00fcr Evaluation evtl. notwendig? Sonst weg.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        openSearchResult.withDescription(Formatter.create(\"[${zip}][ ${city}]\")\n          \n          \n            \n                        openSearchResult.withDescription(Formatter.create(\"[${zip}][${city}]\")", "author": "bwiedmann", "createdAt": "2020-10-26T16:44:07Z", "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.Formatter;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n+ * {@link sirius.biz.tycho.search.OpenSearchController}.\n+ *\n+ * @param <I> the type of database IDs used by the concrete implementation\n+ * @param <T> specifies the effective entity type used to represent Tenants\n+ */\n+public abstract class TenantSearchProvider<I, T extends BaseEntity<I> & Tenant<I>> implements OpenSearchProvider {\n+\n+    @Part\n+    private Tenants<I, T, ?> tenants;\n+\n+    @Override\n+    public String getLabel() {\n+        return NLS.get(\"Tenant.plural\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getUrl() {\n+        return \"/tenants\";\n+    }\n+\n+    @Override\n+    public boolean ensureAccess() {\n+        UserInfo currentUser = UserContext.getCurrentUser();\n+        return currentUser.hasPermission(TenantController.PERMISSION_MANAGE_TENANTS);\n+    }\n+\n+    @Override\n+    public void query(String query, int maxResults, Consumer<OpenSearchResult> resultCollector) {\n+        UserInfo currentUser = UserContext.getCurrentUser();\n+\n+        Query<?, T, ?> tenantQuery = createBaseQuery(query);\n+        tenantQuery.limit(maxResults);\n+\n+        tenantQuery.iterateAll(tenant -> {\n+            OpenSearchResult openSearchResult = new OpenSearchResult().withLabel(tenant.getTenantData().getName());\n+            openSearchResult.withDescription(Formatter.create(\"[${zip}][ ${city}]\")", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTQwMw==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r513291403", "bodyText": "The intended output is 1245 Fun City not 12345Fun City", "author": "andyHa", "createdAt": "2020-10-28T09:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNzIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tenants/TenantSearchProvider.java b/src/main/java/sirius/biz/tenants/TenantSearchProvider.java\nindex 858e6124..3ad86a08 100644\n--- a/src/main/java/sirius/biz/tenants/TenantSearchProvider.java\n+++ b/src/main/java/sirius/biz/tenants/TenantSearchProvider.java\n\n@@ -23,7 +23,7 @@ import javax.annotation.Nullable;\n import java.util.function.Consumer;\n \n /**\n- * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n+ * Provides the base implementation to make implementations of {@link Tenant} visible in the\n  * {@link sirius.biz.tycho.search.OpenSearchController}.\n  *\n  * @param <I> the type of database IDs used by the concrete implementation\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExMjgwOA==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512112808", "bodyText": "TODO insights Kommt noch?", "author": "bwiedmann", "createdAt": "2020-10-26T16:49:57Z", "path": "src/main/java/sirius/biz/tycho/QuickAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho;\n+\n+import com.alibaba.fastjson.JSONObject;\n+\n+/**\n+ * Represents a secondary action which can be attached to a data object.\n+ * <p>\n+ * This is used for both, {@link sirius.biz.tycho.search.OpenSearchResult} as well as for TODO insights.", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MjA2Nw==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r513292067", "bodyText": "yep - this will be placed in a separate PR and is a marker to updat the docs once all are merged.", "author": "andyHa", "createdAt": "2020-10-28T09:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExMjgwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExODc3NA==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512118774", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This way, we can immediatelly render the first results even while other providers are still searching for\n          \n          \n            \n                 * This way, we can immediately render the first results even while other providers are still searching for", "author": "bwiedmann", "createdAt": "2020-10-26T16:55:11Z", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register\n+public class OpenSearchController extends BizController {\n+\n+    /**\n+     * Contains a readily built byte array to separate messages.\n+     * <p>\n+     * The client library expects that we sent the results as \"comets\" - that are JSON objects separated by a new line.\n+     * This way, we can immediatelly render the first results even while other providers are still searching for", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\nindex 5dc3b17c..4e45ed65 100644\n--- a/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n+++ b/src/main/java/sirius/biz/tycho/search/OpenSearchController.java\n\n@@ -43,12 +43,12 @@ import java.util.concurrent.TimeUnit;\n  * <p>\n  * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n  * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n- * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * searches being executed. This is done in order to protect the system as each search invokes multiple providers\n  * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n  * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n  * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n- * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n- * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each\n  * in its own line (separated by a <tt>\\n</tt>).\n  * <p>\n  * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyMjgzNw==", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512122837", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the URL to be naviagated to when the user clicks on the category label.\n          \n          \n            \n                 * Returns the URL to be navigated to when the user clicks on the category label.", "author": "bwiedmann", "createdAt": "2020-10-26T17:00:56Z", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import sirius.kernel.di.std.AutoRegister;\n+import sirius.kernel.di.std.Priorized;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Represents a provider which participates in the system wide search of the Tycho UI.\n+ * <p>\n+ * A provider needs to wear a {@link sirius.kernel.di.std.Register} annotation in order to be discovered by the\n+ * framework.\n+ */\n+@AutoRegister\n+public interface OpenSearchProvider extends Priorized {\n+\n+    /**\n+     * Contains the label to show for the card generated for results yielded by this provider.\n+     *\n+     * @return the label of the category of results as yielded by this provider\n+     */\n+    String getLabel();\n+\n+    /**\n+     * Returns the URL to be naviagated to when the user clicks on the category label.", "originalCommit": "ad866481e0e866ee90aa966c4b9e222606adee81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "chunk": "diff --git a/src/main/java/sirius/biz/tycho/search/OpenSearchProvider.java b/src/main/java/sirius/biz/tycho/search/OpenSearchProvider.java\nindex 8b55677b..777ad103 100644\n--- a/src/main/java/sirius/biz/tycho/search/OpenSearchProvider.java\n+++ b/src/main/java/sirius/biz/tycho/search/OpenSearchProvider.java\n\n@@ -31,7 +31,7 @@ public interface OpenSearchProvider extends Priorized {\n     String getLabel();\n \n     /**\n-     * Returns the URL to be naviagated to when the user clicks on the category label.\n+     * Returns the URL to be navigated to when the user clicks on the category label.\n      * <p>\n      * This can be left empty if there is no group or overview to navigate to.\n      *\n"}}, {"oid": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "url": "https://github.com/scireum/sirius-biz/commit/96ed84a7ffa40307b378cac6f8a59992b88cdece", "message": "Apply suggestions from code review\n\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>\nCo-authored-by: Benjamin Wiedmann <bwi@scireum.de>", "committedDate": "2020-10-28T09:27:22Z", "type": "commit"}]}