{"pr_number": 939, "pr_title": "SIRI-286 Sanitize paths in the storage engine", "pr_createdAt": "2020-12-07T07:44:08Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/939", "timeline": [{"oid": "32d1a52356b5dd0eccc473a1f55fedfd5ceba08f", "url": "https://github.com/scireum/sirius-biz/commit/32d1a52356b5dd0eccc473a1f55fedfd5ceba08f", "message": "Add a utility function to sanitize paths\n\nThe old method (copied from the old framework) was marked as deprecated,\nas it isn't used anywhere.\n\nFixes: SIRI-286", "committedDate": "2020-12-07T07:31:41Z", "type": "commit"}, {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "url": "https://github.com/scireum/sirius-biz/commit/43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "message": "Sanitize the paths in the blob storage space\n\nThis also makes the method ensureRelativePath redundant as the sanitized\npaths are stripped of leading slashes already.\n\nFixes: SIRI-286", "committedDate": "2020-12-07T07:37:24Z", "type": "commit"}, {"oid": "abf008b0187082eb44b9c83428241f83cc97a10d", "url": "https://github.com/scireum/sirius-biz/commit/abf008b0187082eb44b9c83428241f83cc97a10d", "message": "Sanitize the paths in the virtual file system\n\nThis also makes the method ensureRelativePath redundant as the sanitized\npaths are stripped of leading slashes already.\n\nFixes: SIRI-286", "committedDate": "2020-12-07T07:41:32Z", "type": "commit"}, {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "url": "https://github.com/scireum/sirius-biz/commit/d37ac3b15f673301ffd86ca12a92b1c81b905a48", "message": "Ensure that newly created blobs are cached\n\nFixes: SIRI-286", "committedDate": "2020-12-07T07:43:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537295115", "bodyText": "I think this call has to be added to Blob::updateContent as well as we could otherwise overwrite a sanitized path with an unsanitized one by accident when updating the content of a blob and passing a file name", "author": "sabieber", "createdAt": "2020-12-07T07:51:59Z", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);", "originalCommit": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5ODgyOQ==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537298829", "bodyText": "updateContent only updates the file name. The only way to \"unsanitize\" the path is to pass an invalid file name, which is a separate problem?", "author": "jmuscireum", "createdAt": "2020-12-07T07:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2NjY1MQ==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537366651", "bodyText": "Yes thats exactly the problem, which when done will kill most parts of the storage system (vfs roots cant list any files of a space containing a single file with broken filename anymore)\nWe at least should create a ticket, my thought was that its at least related to the path sanitization (as the name seems to be created from the sanitized path in most cases, only the updateContent method somehow bypasses this logic.", "author": "sabieber", "createdAt": "2020-12-07T09:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyODM0NQ==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537428345", "bodyText": "The ticket SIRI-251 should cover this", "author": "jmuscireum", "createdAt": "2020-12-07T11:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyOTUwMg==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537429502", "bodyText": "Ah thx \ud83d\udc4d", "author": "sabieber", "createdAt": "2020-12-07T11:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "70e78591acc4e17e51492ce5555ce59572e47d18", "chunk": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex faf18df5..5be40c3c 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n\n@@ -391,8 +391,8 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n         String key = determinePathCacheKey(tenantId, sanitizedPath);\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n-            blobByPathCache.remove(key);\n             blob = fetchOrCreateByPath(tenantId, sanitizedPath);\n+            blobByPathCache.put(key, blob);\n         }\n         return blob;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NDcxMQ==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537294711", "bodyText": "ReplaceAll?", "author": "qw3ry", "createdAt": "2020-12-07T07:51:17Z", "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,39 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {\n+            path = path.replace(\"\\\\\", \"/\");", "originalCommit": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMzYyMQ==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537303621", "bodyText": "replace already replaces each occurrence. The only difference is that replaceAll expects a regex pattern.", "author": "jmuscireum", "createdAt": "2020-12-07T08:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NDcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "70e78591acc4e17e51492ce5555ce59572e47d18", "chunk": "diff --git a/src/main/java/sirius/biz/storage/util/StorageUtils.java b/src/main/java/sirius/biz/storage/util/StorageUtils.java\nindex 61e67adc..5504e9e0 100644\n--- a/src/main/java/sirius/biz/storage/util/StorageUtils.java\n+++ b/src/main/java/sirius/biz/storage/util/StorageUtils.java\n\n@@ -178,6 +178,9 @@ public class StorageUtils {\n \n     /**\n      * Sanitizes the given path.\n+     * <p>\n+     * This will replace backslashes with forward slashes, and remove successive slashes. Trailing slashes are removed\n+     * from directory paths, and absolute paths are made relative by removing leading slashes.\n      *\n      * @param path the path to cleanup\n      * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTg1Nw==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537295857", "bodyText": "Ist absolut = relativ? War vorher ja das gleiche Verhalten, aber das verdient IMO nen erkl\u00e4renden Kommentar", "author": "qw3ry", "createdAt": "2020-12-07T07:53:31Z", "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,39 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {\n+            path = path.replace(\"\\\\\", \"/\");\n+        }\n+\n+        if (path.contains(\"//\")) {\n+            path = path.replaceAll(\"/+\", \"/\");\n+        }\n+\n+        if (path.startsWith(\"/\")) {\n+            path = path.substring(1);", "originalCommit": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70e78591acc4e17e51492ce5555ce59572e47d18", "chunk": "diff --git a/src/main/java/sirius/biz/storage/util/StorageUtils.java b/src/main/java/sirius/biz/storage/util/StorageUtils.java\nindex 61e67adc..5504e9e0 100644\n--- a/src/main/java/sirius/biz/storage/util/StorageUtils.java\n+++ b/src/main/java/sirius/biz/storage/util/StorageUtils.java\n\n@@ -178,6 +178,9 @@ public class StorageUtils {\n \n     /**\n      * Sanitizes the given path.\n+     * <p>\n+     * This will replace backslashes with forward slashes, and remove successive slashes. Trailing slashes are removed\n+     * from directory paths, and absolute paths are made relative by removing leading slashes.\n      *\n      * @param path the path to cleanup\n      * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n"}}, {"oid": "70e78591acc4e17e51492ce5555ce59572e47d18", "url": "https://github.com/scireum/sirius-biz/commit/70e78591acc4e17e51492ce5555ce59572e47d18", "message": "More JavaDoc\n\nFixes: SIRI-286", "committedDate": "2020-12-07T08:11:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNzU3MQ==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537317571", "bodyText": "why check for a contains?", "author": "andyHa", "createdAt": "2020-12-07T08:32:45Z", "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,42 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     * <p>\n+     * This will replace backslashes with forward slashes, and remove successive slashes. Trailing slashes are removed\n+     * from directory paths, and absolute paths are made relative by removing leading slashes.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {", "originalCommit": "70e78591acc4e17e51492ce5555ce59572e47d18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ece13d92582b068fb77ff789182bb2d922b1ab32", "chunk": "diff --git a/src/main/java/sirius/biz/storage/util/StorageUtils.java b/src/main/java/sirius/biz/storage/util/StorageUtils.java\nindex 5504e9e0..630ee5b4 100644\n--- a/src/main/java/sirius/biz/storage/util/StorageUtils.java\n+++ b/src/main/java/sirius/biz/storage/util/StorageUtils.java\n\n@@ -193,13 +199,7 @@ public class StorageUtils {\n             return \"\";\n         }\n \n-        if (path.contains(\"\\\\\")) {\n-            path = path.replace(\"\\\\\", \"/\");\n-        }\n-\n-        if (path.contains(\"//\")) {\n-            path = path.replaceAll(\"/+\", \"/\");\n-        }\n+        path = SANITIZE_SLASHES.matcher(path).replaceAll(\"/\");\n \n         if (path.startsWith(\"/\")) {\n             path = path.substring(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNzY5Mw==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537317693", "bodyText": "s.a.", "author": "andyHa", "createdAt": "2020-12-07T08:32:55Z", "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,42 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     * <p>\n+     * This will replace backslashes with forward slashes, and remove successive slashes. Trailing slashes are removed\n+     * from directory paths, and absolute paths are made relative by removing leading slashes.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {\n+            path = path.replace(\"\\\\\", \"/\");\n+        }\n+\n+        if (path.contains(\"//\")) {", "originalCommit": "70e78591acc4e17e51492ce5555ce59572e47d18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ece13d92582b068fb77ff789182bb2d922b1ab32", "chunk": "diff --git a/src/main/java/sirius/biz/storage/util/StorageUtils.java b/src/main/java/sirius/biz/storage/util/StorageUtils.java\nindex 5504e9e0..630ee5b4 100644\n--- a/src/main/java/sirius/biz/storage/util/StorageUtils.java\n+++ b/src/main/java/sirius/biz/storage/util/StorageUtils.java\n\n@@ -193,13 +199,7 @@ public class StorageUtils {\n             return \"\";\n         }\n \n-        if (path.contains(\"\\\\\")) {\n-            path = path.replace(\"\\\\\", \"/\");\n-        }\n-\n-        if (path.contains(\"//\")) {\n-            path = path.replaceAll(\"/+\", \"/\");\n-        }\n+        path = SANITIZE_SLASHES.matcher(path).replaceAll(\"/\");\n \n         if (path.startsWith(\"/\")) {\n             path = path.substring(1);\n"}}, {"oid": "ece13d92582b068fb77ff789182bb2d922b1ab32", "url": "https://github.com/scireum/sirius-biz/commit/ece13d92582b068fb77ff789182bb2d922b1ab32", "message": "Replace consecutive slashes and backslashes in one go\n\nAlso remove the check if the replace is necessary and use a precompiled\npattern.\n\nFixes: SIRI-286", "committedDate": "2020-12-07T11:14:28Z", "type": "commit"}, {"oid": "c0d8871ad99b32c2b9c7fda4b74137fd16291827", "url": "https://github.com/scireum/sirius-biz/commit/c0d8871ad99b32c2b9c7fda4b74137fd16291827", "message": "Remove the unused normalizePath method instead of making it deprecated\n\nFixes: SIRI-286", "committedDate": "2020-12-07T11:15:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMDkyNw==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r538330927", "bodyText": "wasn't this put here intentionally as removed is distributed over the intercom and put isn't? @idlira", "author": "andyHa", "createdAt": "2020-12-08T12:50:42Z", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);\n+\n+        if (Strings.isEmpty(sanitizedPath)) {\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        String key = determinePathCacheKey(tenantId, path);\n+        String key = determinePathCacheKey(tenantId, sanitizedPath);\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n-            blobByPathCache.remove(key);", "originalCommit": "c0d8871ad99b32c2b9c7fda4b74137fd16291827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzODA0MA==", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r538338040", "bodyText": "Yup, put is not distributed", "author": "idlira", "createdAt": "2020-12-08T12:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMDkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "chunk": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 5be40c3c..4144a479 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n\n@@ -391,6 +391,9 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n         String key = determinePathCacheKey(tenantId, sanitizedPath);\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n+            // Ensure the cache entry is invalidated on all nodes\n+            blobByPathCache.remove(key);\n+\n             blob = fetchOrCreateByPath(tenantId, sanitizedPath);\n             blobByPathCache.put(key, blob);\n         }\n"}}, {"oid": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "url": "https://github.com/scireum/sirius-biz/commit/d32fdbfe350e3f58a3d0cc441b701752f6167015", "message": "Invalidate the old cache entry again before adding the new one\n\nThis is required as we need to invalidate the entry on all nodes. The\nput is only executed on the current node. Also this time we add a\ncomment so it's not removed again.\n\nFixes: SIRI-286", "committedDate": "2020-12-08T13:01:14Z", "type": "commit"}]}