{"pr_number": 665, "pr_title": "Job parameter enhancements", "pr_createdAt": "2020-01-18T16:37:39Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/665", "timeline": [{"oid": "6546f9ee4316b993b0548301e81123f663403bf4", "url": "https://github.com/scireum/sirius-biz/commit/6546f9ee4316b993b0548301e81123f663403bf4", "message": "Permits String parameters to be nullable\n\nWhen markNullable is used, empty strings will be returned as null and.\n\nFixes: OX-5523", "committedDate": "2020-01-18T15:57:08Z", "type": "commit"}, {"oid": "53385e72a4ef942a451a318b6f2bebf3a4e4e17d", "url": "https://github.com/scireum/sirius-biz/commit/53385e72a4ef942a451a318b6f2bebf3a4e4e17d", "message": "Adds a new job parameter type: String List\n\nRenders a key-value like single select input. Returns null when not required and no value is selected.\n\nFixes: OX-5523", "committedDate": "2020-01-18T16:34:38Z", "type": "commit"}, {"oid": "56eef4c4982438cee68f9b2cfc8a9bc7673bd773", "url": "https://github.com/scireum/sirius-biz/commit/56eef4c4982438cee68f9b2cfc8a9bc7673bd773", "message": "JavaDoc", "committedDate": "2020-01-18T16:34:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDUxNQ==", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368240515", "bodyText": "shouldn't this be the default? null instead of \"\" - even ifthe parameter isn marked as nullable it still might yield null as Value.getString() does filter null - asString would do this?", "author": "andyHa", "createdAt": "2020-01-18T18:14:42Z", "path": "src/main/java/sirius/biz/jobs/params/StringParameter.java", "diffHunk": "@@ -28,8 +30,35 @@ public StringParameter(String name, String label) {\n         super(name, label);\n     }\n \n+    /**\n+     * Marks the parameter as nullable.\n+     * <p>\n+     * When set, forces empty strings to be returned as {@code null} and makes it no longer required.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringParameter markNullable() {\n+        this.nullable = true;\n+        this.required = false;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks the parameter as required and resets the nullable state if set.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    @Override\n+    public StringParameter markRequired() {\n+        this.nullable = false;\n+        return super.markRequired();\n+    }\n+\n     @Override\n     protected String checkAndTransformValue(Value input) {\n+        if (nullable && input.isEmptyString()) {", "originalCommit": "56eef4c4982438cee68f9b2cfc8a9bc7673bd773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MTU0Mg==", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368241542", "bodyText": "I like that! If we agree on returning null instead of \"\" for a zero-length input, then there is no need for a markNullable method. I just didn't wanna break the previous behaviour.", "author": "idlira", "createdAt": "2020-01-18T18:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNzYxOQ==", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368527619", "bodyText": "After analysis, makeNullable made obsolete and defaults to null", "author": "idlira", "createdAt": "2020-01-20T12:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "14917b142385b3b0fc0e2a7107012ef569f7f665", "chunk": "diff --git a/src/main/java/sirius/biz/jobs/params/StringParameter.java b/src/main/java/sirius/biz/jobs/params/StringParameter.java\nindex ffc8d3fb..794d8313 100644\n--- a/src/main/java/sirius/biz/jobs/params/StringParameter.java\n+++ b/src/main/java/sirius/biz/jobs/params/StringParameter.java\n\n@@ -30,33 +28,9 @@ public class StringParameter extends TextParameter<String, StringParameter> {\n         super(name, label);\n     }\n \n-    /**\n-     * Marks the parameter as nullable.\n-     * <p>\n-     * When set, forces empty strings to be returned as {@code null} and makes it no longer required.\n-     *\n-     * @return the parameter itself for fluent method calls\n-     */\n-    public StringParameter markNullable() {\n-        this.nullable = true;\n-        this.required = false;\n-        return self();\n-    }\n-\n-    /**\n-     * Marks the parameter as required and resets the nullable state if set.\n-     *\n-     * @return the parameter itself for fluent method calls\n-     */\n-    @Override\n-    public StringParameter markRequired() {\n-        this.nullable = false;\n-        return super.markRequired();\n-    }\n-\n     @Override\n     protected String checkAndTransformValue(Value input) {\n-        if (nullable && input.isEmptyString()) {\n+        if (input.isEmptyString()) {\n             return null;\n         }\n         return input.getString();\n"}}, {"oid": "a229534c90e128e1f75b88c22db4835c59c879c7", "url": "https://github.com/scireum/sirius-biz/commit/a229534c90e128e1f75b88c22db4835c59c879c7", "message": "Allows smart get to be used when inserting entries to the list", "committedDate": "2020-01-20T08:34:38Z", "type": "commit"}, {"oid": "14917b142385b3b0fc0e2a7107012ef569f7f665", "url": "https://github.com/scireum/sirius-biz/commit/14917b142385b3b0fc0e2a7107012ef569f7f665", "message": "Makes markNullable obsolete making null as the default value when the string is empty", "committedDate": "2020-01-20T10:05:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MDU3Mw==", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368490573", "bodyText": "shouldn't i be receiving the whole Tuple in the job? There should be a lot of instance where the display value is never used in the job", "author": "meg1502", "createdAt": "2020-01-20T11:06:32Z", "path": "src/main/java/sirius/biz/jobs/params/StringListParameter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides a string list select parameter.\n+ */\n+public class StringListParameter extends Parameter<String, StringListParameter> {\n+\n+    private Map<String, String> entries = new LinkedHashMap<>();\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    public StringListParameter(String name, String label) {\n+        super(name, label);\n+    }\n+\n+    /**\n+     * Adds an entry to the list.\n+     *\n+     * @param key   the entry key\n+     * @param value the display value, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringListParameter withEntry(String key, String value) {\n+        this.entries.put(key, NLS.smartGet(value));\n+        return self();\n+    }\n+\n+    /**\n+     * Enumerates all values provided by the parameter.\n+     *\n+     * @return list of {@link Tuple entries} with the key as first and display value as second tuple items.\n+     */\n+    public List<Tuple<String, String>> getValues() {\n+        return entries.keySet()\n+                      .stream()\n+                      .map(entry -> Tuple.create(entry, entries.get(entry)))\n+                      .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String getTemplateName() {\n+        return \"/templates/biz/jobs/params/selectString.html.pasta\";\n+    }\n+\n+    @Override\n+    protected String checkAndTransformValue(Value input) {\n+        if (Strings.isEmpty(input) || !entries.containsKey(input.asString())) {\n+            return null;\n+        }\n+        return input.asString();\n+    }\n+\n+    @Override\n+    protected Optional<String> resolveFromString(@Nonnull Value input) {\n+        if (!entries.containsKey(input.asString())) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(entries.get(input.asString()));", "originalCommit": "14917b142385b3b0fc0e2a7107012ef569f7f665", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxNjg0MQ==", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368516841", "bodyText": "Refactored to SingleSelectParameter", "author": "idlira", "createdAt": "2020-01-20T12:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MDU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7650d2621125b03d4b9e7e81821dca7300a7101d", "chunk": "diff --git a/src/main/java/sirius/biz/jobs/params/StringListParameter.java b/src/main/java/sirius/biz/jobs/params/SingleSelectParameter.java\nsimilarity index 87%\nrename from src/main/java/sirius/biz/jobs/params/StringListParameter.java\nrename to src/main/java/sirius/biz/jobs/params/SingleSelectParameter.java\nindex 28e639cc..a37fda81 100644\n--- a/src/main/java/sirius/biz/jobs/params/StringListParameter.java\n+++ b/src/main/java/sirius/biz/jobs/params/SingleSelectParameter.java\n\n@@ -13,9 +13,9 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n /**\n- * Provides a string list select parameter.\n+ * Provides a single select parameter from a list of key-value pairs.\n  */\n-public class StringListParameter extends Parameter<String, StringListParameter> {\n+public class SingleSelectParameter extends Parameter<String, SingleSelectParameter> {\n \n     private Map<String, String> entries = new LinkedHashMap<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MTE2MA==", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368491160", "bodyText": "shouldnt this also return empty for null/\"\" ?", "author": "meg1502", "createdAt": "2020-01-20T11:08:02Z", "path": "src/main/java/sirius/biz/jobs/params/StringListParameter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides a string list select parameter.\n+ */\n+public class StringListParameter extends Parameter<String, StringListParameter> {\n+\n+    private Map<String, String> entries = new LinkedHashMap<>();\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    public StringListParameter(String name, String label) {\n+        super(name, label);\n+    }\n+\n+    /**\n+     * Adds an entry to the list.\n+     *\n+     * @param key   the entry key\n+     * @param value the display value, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringListParameter withEntry(String key, String value) {\n+        this.entries.put(key, NLS.smartGet(value));\n+        return self();\n+    }\n+\n+    /**\n+     * Enumerates all values provided by the parameter.\n+     *\n+     * @return list of {@link Tuple entries} with the key as first and display value as second tuple items.\n+     */\n+    public List<Tuple<String, String>> getValues() {\n+        return entries.keySet()\n+                      .stream()\n+                      .map(entry -> Tuple.create(entry, entries.get(entry)))\n+                      .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String getTemplateName() {\n+        return \"/templates/biz/jobs/params/selectString.html.pasta\";\n+    }\n+\n+    @Override\n+    protected String checkAndTransformValue(Value input) {\n+        if (Strings.isEmpty(input) || !entries.containsKey(input.asString())) {\n+            return null;\n+        }\n+        return input.asString();\n+    }\n+\n+    @Override\n+    protected Optional<String> resolveFromString(@Nonnull Value input) {\n+        if (!entries.containsKey(input.asString())) {", "originalCommit": "14917b142385b3b0fc0e2a7107012ef569f7f665", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxNjYzMg==", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368516632", "bodyText": "null.asString resolves to \"\" and there will likely be no key inside the map matching an empty string.", "author": "idlira", "createdAt": "2020-01-20T12:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MTE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "7650d2621125b03d4b9e7e81821dca7300a7101d", "chunk": "diff --git a/src/main/java/sirius/biz/jobs/params/StringListParameter.java b/src/main/java/sirius/biz/jobs/params/SingleSelectParameter.java\nsimilarity index 87%\nrename from src/main/java/sirius/biz/jobs/params/StringListParameter.java\nrename to src/main/java/sirius/biz/jobs/params/SingleSelectParameter.java\nindex 28e639cc..a37fda81 100644\n--- a/src/main/java/sirius/biz/jobs/params/StringListParameter.java\n+++ b/src/main/java/sirius/biz/jobs/params/SingleSelectParameter.java\n\n@@ -13,9 +13,9 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n /**\n- * Provides a string list select parameter.\n+ * Provides a single select parameter from a list of key-value pairs.\n  */\n-public class StringListParameter extends Parameter<String, StringListParameter> {\n+public class SingleSelectParameter extends Parameter<String, SingleSelectParameter> {\n \n     private Map<String, String> entries = new LinkedHashMap<>();\n \n"}}, {"oid": "7650d2621125b03d4b9e7e81821dca7300a7101d", "url": "https://github.com/scireum/sirius-biz/commit/7650d2621125b03d4b9e7e81821dca7300a7101d", "message": "Refactors to SingleSelectParameter for a better understanding of its purpose", "committedDate": "2020-01-20T12:10:24Z", "type": "commit"}]}