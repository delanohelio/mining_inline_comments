{"pr_number": 467, "pr_title": "attribute-update", "pr_createdAt": "2020-04-29T01:10:05Z", "pr_url": "https://github.com/constellation-app/constellation/pull/467", "timeline": [{"oid": "1660b7a23ef4816753512447fb89dba39bb271c2", "url": "https://github.com/constellation-app/constellation/commit/1660b7a23ef4816753512447fb89dba39bb271c2", "message": ":art: fixed some sonarqube security hotspots and bugs", "committedDate": "2020-04-24T03:24:04Z", "type": "commit"}, {"oid": "208070d51608109b8fe8478830a60787f30ae534", "url": "https://github.com/constellation-app/constellation/commit/208070d51608109b8fe8478830a60787f30ae534", "message": "Merge branch 'master' of https://github.com/constellation-app/constellation", "committedDate": "2020-04-24T03:24:15Z", "type": "commit"}, {"oid": "91f7ef99de562397e37c2413e2cc99a0bbb0ebc5", "url": "https://github.com/constellation-app/constellation/commit/91f7ef99de562397e37c2413e2cc99a0bbb0ebc5", "message": ":art: added default javafx stylesheets (caspian and modena)\n:art: added unit test for vertex type detection and validation\n:bug: fixed a couple of issues with type regex strings", "committedDate": "2020-04-24T10:05:06Z", "type": "commit"}, {"oid": "05dee16620cf2a24435bb5de722e4235b554a553", "url": "https://github.com/constellation-app/constellation/commit/05dee16620cf2a24435bb5de722e4235b554a553", "message": ":bug: updated PasswordObfuscator and PasswordDeobfuscator to use a secure mode and padding scheme\n:art: fixed an incorrect assignment in UndoGraphEditState", "committedDate": "2020-04-24T12:16:59Z", "type": "commit"}, {"oid": "9670743dde2a068b103ed1db6a96c3385e17fcac", "url": "https://github.com/constellation-app/constellation/commit/9670743dde2a068b103ed1db6a96c3385e17fcac", "message": "oops... i forgot to all all files in the last commit...\n:bug: updated PasswordObfuscator and PasswordDeobfuscator to use a secure mode and padding scheme\n:art: fixed an incorrect assignment in UndoGraphEditState", "committedDate": "2020-04-24T12:17:50Z", "type": "commit"}, {"oid": "2b5775e42bae290301be4603a1b22d86d5d37170", "url": "https://github.com/constellation-app/constellation/commit/2b5775e42bae290301be4603a1b22d86d5d37170", "message": "Merge branch 'master' of https://github.com/constellation-app/constellation", "committedDate": "2020-04-24T12:18:10Z", "type": "commit"}, {"oid": "91ae5a1ca65e88e500d72bdff821749d6fce8e5e", "url": "https://github.com/constellation-app/constellation/commit/91ae5a1ca65e88e500d72bdff821749d6fce8e5e", "message": ":art: renamed scatter arrangement to \"Scatter 3D\" and updated arrangement menu ordering", "committedDate": "2020-04-24T12:56:48Z", "type": "commit"}, {"oid": "6c5a2d7e9cbac4b7f4e12ec6979063ae73e98949", "url": "https://github.com/constellation-app/constellation/commit/6c5a2d7e9cbac4b7f4e12ec6979063ae73e98949", "message": ":art: updated author name", "committedDate": "2020-04-24T13:01:43Z", "type": "commit"}, {"oid": "9128b03f2f6ae18a5e95b3185bd06602920a9f8d", "url": "https://github.com/constellation-app/constellation/commit/9128b03f2f6ae18a5e95b3185bd06602920a9f8d", "message": ":art: fixed a minor typo\n:art: updated to latest JRE11 (in a previous commit)", "committedDate": "2020-04-24T13:03:36Z", "type": "commit"}, {"oid": "ba92ea25a093c4c4c35236091984329181f2bb88", "url": "https://github.com/constellation-app/constellation/commit/ba92ea25a093c4c4c35236091984329181f2bb88", "message": ":art: updated build script with the correct jre references", "committedDate": "2020-04-28T02:46:26Z", "type": "commit"}, {"oid": "8e1ed55423c7850c475a5d56b4bd06aca5f33369", "url": "https://github.com/constellation-app/constellation/commit/8e1ed55423c7850c475a5d56b4bd06aca5f33369", "message": "Merge branch 'master' into regex-update", "committedDate": "2020-04-28T02:49:24Z", "type": "commit"}, {"oid": "177878f215aedcf91fde657fbeb2c932dc81dd28", "url": "https://github.com/constellation-app/constellation/commit/177878f215aedcf91fde657fbeb2c932dc81dd28", "message": ":art: added support for double, short and byte attribute types\n:art: removed unused 'attr_list' attribute type\n:art: updated datetime attribute types to be backed by objects\n:art: disabled editor for 'raw' attribute type\n:art: ensured validation for all relevent attribute types\n:art: normalised code style across attribute classes\n:art: updated class headers with the current year", "committedDate": "2020-04-28T15:10:28Z", "type": "commit"}, {"oid": "b7f7035ebdd3b2310055cceb5615b3a887b784fe", "url": "https://github.com/constellation-app/constellation/commit/b7f7035ebdd3b2310055cceb5615b3a887b784fe", "message": ":art: attempting to revert header year update (i'll do this on a seperate branch)", "committedDate": "2020-04-29T00:10:22Z", "type": "commit"}, {"oid": "88737c4b36421de193b255497f3c03af6b317542", "url": "https://github.com/constellation-app/constellation/commit/88737c4b36421de193b255497f3c03af6b317542", "message": "Merge branch 'master' into attribute-update", "committedDate": "2020-04-29T00:55:38Z", "type": "commit"}, {"oid": "6a6d8267a2c068b2bf7688114b5ace7c32835f0e", "url": "https://github.com/constellation-app/constellation/commit/6a6d8267a2c068b2bf7688114b5ace7c32835f0e", "message": ":art: re-updated some class headers", "committedDate": "2020-04-29T01:13:50Z", "type": "commit"}, {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "url": "https://github.com/constellation-app/constellation/commit/3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "message": ":art: updated what's new\n:art: updated magic string references in Histogram\n:art: updated author tags for attribute descriptions which changed significantly", "committedDate": "2020-04-29T01:34:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzk4Mg==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417647982", "bodyText": "Weren't these changes made in one of your other PRs?", "author": "antares1470", "createdAt": "2020-04-29T22:23:51Z", "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/Edge.java", "diffHunk": "@@ -19,33 +19,33 @@\n  *\n  * @author algol\n  *\n- * @param <NodeType> the type of nodes the graph connects to.\n+ * @param <Node> the type of nodes this edge connects to.\n  */\n-public class Edge<NodeType extends NodeBase> {\n+public class Edge<Node extends NodeBase> {\n \n-    private final NodeType source;\n-    private final NodeType target;\n+    private final Node source;\n+    private final Node target;", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MzczMA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417683730", "bodyText": "Yep - this branches off that and so contains the same changes.", "author": "cygnus-x-1", "createdAt": "2020-04-30T00:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwODA1Ng==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417708056", "bodyText": "@cygnus-x-1 if that's the case then this PR will have to wait until the regex change gets properly tested. If you wen't off master this would have been better IMHO.", "author": "arcturus2", "createdAt": "2020-04-30T01:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzk4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0ODUwNA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417648504", "bodyText": "Probably easier to have StringUtils.isBlank(string)", "author": "antares1470", "createdAt": "2020-04-29T22:25:08Z", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java", "diffHunk": "@@ -46,8 +46,8 @@ public RawAttributeDescription() {\n \n     @Override\n     protected RawData convertFromString(final String string) {\n-        if (string == null) {\n-            return defaultValue;\n+        if (string == null || string.isBlank()) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4Mzc5Nw==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417683797", "bodyText": "I keep forgetting this exists - thanks :)", "author": "cygnus-x-1", "createdAt": "2020-04-30T00:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0ODUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "chunk": "diff --git a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java\nindex 7ac758911..5451e1b92 100644\n--- a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java\n+++ b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java\n\n@@ -46,8 +46,8 @@ public class RawAttributeDescription extends AbstractObjectAttributeDescription<\n \n     @Override\n     protected RawData convertFromString(final String string) {\n-        if (string == null || string.isBlank()) {\n-            return getDefault();\n+        if (string == null) {\n+            return defaultValue;\n         } else {\n             return new RawData(string);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0OTE3Mg==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417649172", "bodyText": "Ditto above", "author": "antares1470", "createdAt": "2020-04-29T22:26:54Z", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/TransactionTypeAttributeDescription.java", "diffHunk": "@@ -50,8 +50,8 @@ public TransactionTypeAttributeDescription() {\n \n     @Override\n     protected SchemaTransactionType convertFromString(final String string) {\n-        if (string == null) {\n-            return defaultValue;\n+        if (string == null || string.isEmpty()) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/TransactionTypeAttributeDescription.java b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/TransactionTypeAttributeDescription.java\nindex c6abc710f..e662d0819 100644\n--- a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/TransactionTypeAttributeDescription.java\n+++ b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/TransactionTypeAttributeDescription.java\n\n@@ -50,7 +51,7 @@ public class TransactionTypeAttributeDescription extends AbstractObjectAttribute\n \n     @Override\n     protected SchemaTransactionType convertFromString(final String string) {\n-        if (string == null || string.isEmpty()) {\n+        if (StringUtils.isBlank(string)) {\n             return getDefault();\n         } else {\n             return SchemaTransactionTypeUtilities.getTypeOrBuildNew(string);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0OTQwOA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417649408", "bodyText": "Ditto above", "author": "antares1470", "createdAt": "2020-04-29T22:27:27Z", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/VertexTypeAttributeDescription.java", "diffHunk": "@@ -50,19 +50,19 @@ public VertexTypeAttributeDescription() {\n     }\n \n     @Override\n-    protected SchemaVertexType convertFromString(final String value) {\n-        if (value == null) {\n-            return defaultValue;\n+    protected SchemaVertexType convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/VertexTypeAttributeDescription.java b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/VertexTypeAttributeDescription.java\nindex 08a862b7d..259a7d858 100644\n--- a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/VertexTypeAttributeDescription.java\n+++ b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/VertexTypeAttributeDescription.java\n\n@@ -51,7 +52,7 @@ public class VertexTypeAttributeDescription extends AbstractObjectAttributeDescr\n \n     @Override\n     protected SchemaVertexType convertFromString(final String string) {\n-        if (string == null || string.isEmpty()) {\n+        if (StringUtils.isBlank(string)) {\n             return getDefault();\n         } else {\n             return SchemaVertexTypeUtilities.getTypeOrBuildNew(string);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NDIxOA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417654218", "bodyText": "I believe this should be 'random' instead of 'RANDOM' to follow the naming convention", "author": "antares1470", "createdAt": "2020-04-29T22:40:04Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -16,71 +16,78 @@\n package au.gov.asd.tac.constellation.graph.attribute;\n \n import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n import java.lang.reflect.InvocationTargetException;\n+import java.security.SecureRandom;\n import java.util.Arrays;\n \n /**\n+ * Describes an attribute backed by a class which extends Object. This provides\n+ * many default implementations to make attribute type creation quick and easy.\n  *\n  * @param <T> the type of object stored by this description.\n  * @author cygnus_x-1\n  */\n public abstract class AbstractObjectAttributeDescription<T extends Object> extends AbstractAttributeDescription {\n-    \n+\n+    protected final SecureRandom RANDOM = new SecureRandom();", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4NDIwMA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417684200", "bodyText": "I blindly copy/pasted this... good pick.", "author": "cygnus-x-1", "createdAt": "2020-04-30T00:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NDIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\nindex d8a755dad..7d737f9f2 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\n\n@@ -31,8 +31,8 @@ import java.util.Arrays;\n  */\n public abstract class AbstractObjectAttributeDescription<T extends Object> extends AbstractAttributeDescription {\n \n-    protected final SecureRandom RANDOM = new SecureRandom();\n-    protected final int nullHash = RANDOM.nextInt();\n+    protected final SecureRandom random = new SecureRandom();\n+    protected final int nullHash = random.nextInt();\n \n     protected final String name;\n     protected final Class<T> nativeClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417656517", "bodyText": "I know we want to capture as many exceptions here as possible but I still think it might be better to only catch the relevant ones here (e.g. I wouldn't expect an IO exception to occur here)", "author": "antares1470", "createdAt": "2020-04-29T22:46:25Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);\n     }\n-    \n+\n     @Override\n     public void setString(final int id, final String value) {\n         data[id] = convertFromString(value);\n     }\n-    \n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4NDQ4MA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417684480", "bodyText": "I originally did convert this to specific exceptions, however later thought that it'd be safer to catch all exceptions since convertFromString is an overridable method.", "author": "cygnus-x-1", "createdAt": "2020-04-30T00:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNTgyMQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417705821", "bodyText": "I still think my preference would be catch the specific exceptions rather than the generic catch-all and then adjust the catches as need be. If for no other reason, sonar has a rule for avoiding catching generic exceptions and so if we can avoid introducing unnecessary code smells then that would be a preference", "author": "antares1470", "createdAt": "2020-04-30T01:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxMDg3NQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417710875", "bodyText": "I've set convertFromString with a throws IllegalArgumentException, and i'm now explicitely catching that. The problem is that we can't predict what the implementation will actually throw in terms of runtime exceptions, so if anything unplanned happens you will get a nasty popup instead of a message in the editor ui saying the value is invalid. Does this work for you @arcturus2, @antares1470?", "author": "cygnus-x-1", "createdAt": "2020-04-30T01:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxMzA2Mg==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417713062", "bodyText": "I'll leave the call to @arcturus2. The nasty pop up isn't ideal but may be a necessary risk. In theory, we could apply this thinking to a lot of functions in the code base but I'm not sure we want to take it that far", "author": "antares1470", "createdAt": "2020-04-30T02:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "4b474aaa0b28e6f6f04460be55a37223d13e2b4b", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\nindex d8a755dad..8d352545e 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\n\n@@ -112,7 +112,7 @@ public abstract class AbstractObjectAttributeDescription<T extends Object> exten\n         try {\n             convertFromString(value);\n             return null;\n-        } catch (final Exception ex) {\n+        } catch (final IllegalArgumentException ex) {\n             return ex.getMessage();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MTIzMg==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417661232", "bodyText": "Ditto above", "author": "antares1470", "createdAt": "2020-04-29T22:59:50Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * Copyright 2010-2019 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.attribute;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.NativeAttributeType;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n+import java.util.Arrays;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * This describes a type of attribute whose values are primitive bytes.\n+ * <p>\n+ * When setting these attribute values from numeric types, the values are\n+ * implicitly or explicitly cast as necessary. The\n+ * {@link #setString setString()} method will utilise\n+ * {@link Byte#parseByte}. The {@link #setBoolean setBoolean()} method will\n+ * yield 1 for true and 0 for false.\n+ * <p>\n+ * When retrieving these attribute values as numeric types the values are\n+ * implicitly or explicitly cast as necessary. The\n+ * {@link #getString getString()} method will utilise {@link String#valueOf}.\n+ * The {@link #getBoolean getBoolean()} method will return false for 0, and true\n+ * for any other value.\n+ *\n+ * @author cygnus_x-1\n+ */\n+@ServiceProvider(service = AttributeDescription.class)\n+public class ByteAttributeDescription extends AbstractAttributeDescription {\n+    \n+    public static final String ATTRIBUTE_NAME = \"byte\";\n+    public static final Class<Byte> NATIVE_CLASS = byte.class;\n+    public static final NativeAttributeType NATIVE_TYPE = NativeAttributeType.BYTE;\n+    private static final byte DEFAULT_VALUE = 0;\n+    \n+    private byte[] data = new byte[0];\n+    private byte defaultValue = DEFAULT_VALUE;\n+\n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n+    private byte convertFromObject(final Object object) {\n+        if (object == null) {\n+            return (byte) getDefault();\n+        } else if (object instanceof Number) {\n+            return ((Number) object).byteValue();\n+        } else if (object instanceof Boolean) {\n+            return ((Boolean) object) ? (byte) 1 : (byte) 0;\n+        } else if (object instanceof String) {\n+            return convertFromString((String) object);\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Error converting Object '%s' to byte\", object.getClass()));\n+        }\n+    }\n+\n+    private byte convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {\n+            return (byte) getDefault();\n+        } else {\n+            return Byte.parseByte(string);\n+        }\n+    }\n+    \n+    @Override\n+    public String getName() {\n+        return ATTRIBUTE_NAME;\n+    }\n+\n+    @Override\n+    public Class<?> getNativeClass() {\n+        return NATIVE_CLASS;\n+    }\n+    \n+    @Override\n+    public NativeAttributeType getNativeType() {\n+        return NATIVE_TYPE;\n+    }\n+\n+    @Override\n+    public Object getDefault() {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public void setDefault(final Object value) {\n+        defaultValue = convertFromObject(value);\n+    }\n+\n+    @Override\n+    public int getCapacity() {\n+        return data.length;\n+    }\n+\n+    @Override\n+    public void setCapacity(final int capacity) {\n+        final int len = data.length;\n+        data = Arrays.copyOf(data, capacity);\n+        if (capacity > len) {\n+            Arrays.fill(data, len, capacity, defaultValue);\n+        }\n+    }\n+\n+    @Override\n+    public byte getByte(final int id) {\n+        return data[id];\n+    }\n+\n+    @Override\n+    public void setByte(final int id, final byte value) {\n+        data[id] = value;\n+    }\n+\n+    @Override\n+    public short getShort(final int id) {\n+        return (short) data[id];\n+    }\n+\n+    @Override\n+    public void setShort(final int id, final short value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public int getInt(final int id) {\n+        return (int) data[id];\n+    }\n+\n+    @Override\n+    public void setInt(final int id, final int value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public long getLong(final int id) {\n+        return (long) data[id];\n+    }\n+\n+    @Override\n+    public void setLong(final int id, final long value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public float getFloat(final int id) {\n+        return (float) data[id];\n+    }\n+\n+    @Override\n+    public void setFloat(final int id, final float value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public double getDouble(final int id) {\n+        return (double) data[id];\n+    }\n+\n+    @Override\n+    public void setDouble(final int id, final double value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public boolean getBoolean(final int id) {\n+        return data[id] != (byte) 0;\n+    }\n+\n+    @Override\n+    public void setBoolean(final int id, final boolean value) {\n+        data[id] = value ? (byte) 1 : (byte) 0;\n+    }\n+\n+    @Override\n+    public char getChar(final int id) {\n+        return (char) data[id];\n+    }\n+\n+    @Override\n+    public void setChar(final int id, final char value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public String getString(final int id) {\n+        return String.valueOf(data[id]);\n+    }\n+\n+    @Override\n+    public void setString(final int id, final String value) {\n+        data[id] = convertFromString(value);\n+    }\n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4NDU2MQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417684561", "bodyText": "This one, however, can be made specific :)", "author": "cygnus-x-1", "createdAt": "2020-04-30T00:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MTIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java\nindex b2e98af2e..395a018e2 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java\n\n@@ -20,6 +20,7 @@ import au.gov.asd.tac.constellation.graph.NativeAttributeType;\n import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n import java.util.Arrays;\n+import org.apache.commons.lang3.StringUtils;\n import org.openide.util.lookup.ServiceProvider;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2Mjc4Nw==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417662787", "bodyText": "StringUtils.isBlank(string)", "author": "antares1470", "createdAt": "2020-04-29T23:04:41Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/HyperlinkAttributeDescription.java", "diffHunk": "@@ -21,58 +21,51 @@\n import org.openide.util.lookup.ServiceProvider;\n \n /**\n- * Hyperlink attribute.\n+ * This describes a type of attribute whose values are URIs.\n  *\n- * @author sirius\n+ * @author cygnus_x-1\n  */\n @ServiceProvider(service = AttributeDescription.class)\n public class HyperlinkAttributeDescription extends AbstractObjectAttributeDescription<URI> {\n \n     public static final String ATTRIBUTE_NAME = \"hyperlink\";\n     public static final Class<URI> NATIVE_CLASS = URI.class;\n     public static final URI DEFAULT_VALUE = null;\n-    \n-    private static final String ERROR_CONVERTING_MESSAGE = \"Error converting object to hyperlink: \";\n \n     public HyperlinkAttributeDescription() {\n         super(ATTRIBUTE_NAME, NATIVE_CLASS, DEFAULT_VALUE);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\") //Casts are manually checked\n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n     protected URI convertFromObject(final Object object) {\n-        if (object == null) {\n-            return null;\n-        } else if (object instanceof URI) {\n-            return (URI) object;\n-        } else if (object instanceof URL) {\n-            try {\n-                return ((URL) object).toURI();\n-            } catch (URISyntaxException ex) {\n-                throw new IllegalArgumentException(ERROR_CONVERTING_MESSAGE + object);\n+        try {\n+            return super.convertFromObject(object);\n+        } catch (final IllegalArgumentException ex) {\n+            if (object instanceof URL) {\n+                try {\n+                    return ((URL) object).toURI();\n+                } catch (final URISyntaxException ex2) {\n+                    throw new IllegalArgumentException(String.format(\n+                            \"Error converting Object '%s' to hyperlink\", object.getClass()));\n+                }\n+            } else {\n+                throw ex;\n             }\n-        } else if (object instanceof String) {\n-            return convertFromString((String) object);\n-        } else {\n-            throw new IllegalArgumentException(ERROR_CONVERTING_MESSAGE + object);\n         }\n     }\n \n     @Override\n-    protected URI convertFromString(String string) {\n-        if (string == null) {\n-            return null;\n+    protected URI convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/HyperlinkAttributeDescription.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/HyperlinkAttributeDescription.java\nindex 5dd3bd9bc..7a5148a4b 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/HyperlinkAttributeDescription.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/HyperlinkAttributeDescription.java\n\n@@ -18,6 +18,7 @@ package au.gov.asd.tac.constellation.graph.attribute;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import org.apache.commons.lang3.StringUtils;\n import org.openide.util.lookup.ServiceProvider;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTkyNQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417665925", "bodyText": "Believe it or not but sonar reckons the cast is actually necessary (seems to think we re parsing longBitsToDouble an integer)", "author": "antares1470", "createdAt": "2020-04-29T23:13:59Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "diffHunk": "@@ -716,14 +716,14 @@ public void updateUndo(UndoGraphEditState state, int instruction) {\n         @Override\n         public void execute(UndoGraphEditState state, GraphWriteMethods graph) {\n             if (VERBOSE) {\n-                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n+                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MDgxNQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417690815", "bodyText": "I don't believe it... but sure, reverted.", "author": "cygnus-x-1", "createdAt": "2020-04-30T00:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java\nindex 707ad841a..46828247a 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java\n\n@@ -716,7 +716,7 @@ public enum UndoGraphEditOperation {\n         @Override\n         public void execute(UndoGraphEditState state, GraphWriteMethods graph) {\n             if (VERBOSE) {\n-                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n+                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n             }\n             graph.setDoubleValue(state.getCurrentAttribute(), state.getCurrentId(), Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NzY2MA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417667660", "bodyText": "StringUtils.isBlank", "author": "antares1470", "createdAt": "2020-04-29T23:19:19Z", "path": "CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/BlazeAttributeDescription.java", "diffHunk": "@@ -38,12 +38,11 @@ public BlazeAttributeDescription() {\n \n     @Override\n     protected Blaze convertFromString(String string) {\n-        return Blaze.valueOf(string);\n-    }\n-\n-    @Override\n-    public boolean canBeImported() {\n-        return false;\n+        if (string == null || string.isEmpty()) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/BlazeAttributeDescription.java b/CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/BlazeAttributeDescription.java\nindex 8a6cb6e25..306597587 100644\n--- a/CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/BlazeAttributeDescription.java\n+++ b/CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/BlazeAttributeDescription.java\n\n@@ -38,7 +39,7 @@ public final class BlazeAttributeDescription extends AbstractObjectAttributeDesc\n \n     @Override\n     protected Blaze convertFromString(String string) {\n-        if (string == null || string.isEmpty()) {\n+        if (StringUtils.isBlank(string)) {\n             return getDefault();\n         } else {\n             return Blaze.valueOf(string);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NzkwMQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417667901", "bodyText": "StringUtils.isBlank", "author": "antares1470", "createdAt": "2020-04-29T23:20:05Z", "path": "CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/ColorAttributeDescription.java", "diffHunk": "@@ -48,37 +48,35 @@ public ColorAttributeDescription() {\n         super(ATTRIBUTE_NAME, NATIVE_CLASS, DEFAULT_VALUE);\n     }\n \n+    private ConstellationColor fromInt(final Integer integer) {\n+        final float red = (integer >>> 24) / 255.0f;\n+        final float green = ((integer >>> 16) & 0xFF) / 255.0f;\n+        final float blue = ((integer >>> 8) & 0xFF) / 255.0f;\n+        final float alpha = (integer & 0xFF) / 255.0f;\n+        return ConstellationColor.getColorValue(red, green, blue, alpha);\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\") //Casts are checked manually\n     public ConstellationColor convertFromObject(final Object object) {\n-        if (object == null) {\n-            return null;\n-        } else if (object instanceof Integer) {\n-            return fromInt((int) object);\n-        } else if (object instanceof String) {\n-            return convertFromString((String) object);\n-        } else if (object instanceof ConstellationColor) {\n-            return (ConstellationColor) object;\n-        } else {\n-            throw new IllegalArgumentException(String.format(\"Error converting '%s' to ColorAttributeDescription\", object.getClass()));\n+        try {\n+            return super.convertFromObject(object);\n+        } catch (final IllegalArgumentException ex) {\n+            if (object instanceof Integer) {\n+                return fromInt((int) object);\n+            } else {\n+                throw ex;\n+            }\n         }\n     }\n \n     @Override\n     protected ConstellationColor convertFromString(final String string) {\n-        return fromString(string);\n-    }\n-\n-    private ConstellationColor fromInt(Integer integer) {\n-        float red = (integer >>> 24) / 255.0f;\n-        float green = ((integer >>> 16) & 0xFF) / 255.0f;\n-        float blue = ((integer >>> 8) & 0xFF) / 255.0f;\n-        float alpha = (integer & 0xFF) / 255.0f;\n-        return ConstellationColor.getColorValue(red, green, blue, alpha);\n-    }\n-\n-    private ConstellationColor fromString(String string) {\n-        return ConstellationColor.getColorValue(string);\n+        if (string == null || string.isEmpty()) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/ColorAttributeDescription.java b/CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/ColorAttributeDescription.java\nindex 57d504bdc..943e0b2ed 100644\n--- a/CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/ColorAttributeDescription.java\n+++ b/CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/ColorAttributeDescription.java\n\n@@ -72,7 +73,7 @@ public final class ColorAttributeDescription extends AbstractObjectAttributeDesc\n \n     @Override\n     protected ConstellationColor convertFromString(final String string) {\n-        if (string == null || string.isEmpty()) {\n+        if (StringUtils.isBlank(string)) {\n             return getDefault();\n         } else {\n             return ConstellationColor.getColorValue(string);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2OTM3Ng==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417669376", "bodyText": "StringUtils.isBlank()", "author": "antares1470", "createdAt": "2020-04-29T23:24:37Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/IntegerAttributeDescription.java", "diffHunk": "@@ -38,15 +38,44 @@\n  * The {@link #getBoolean getBoolean()} method will return false for 0, and true\n  * for any other value.\n  *\n- * @author sirius\n+ * @author cygnus_x-1\n  */\n @ServiceProvider(service = AttributeDescription.class)\n public final class IntegerAttributeDescription extends AbstractAttributeDescription {\n \n     public static final String ATTRIBUTE_NAME = \"integer\";\n+    public static final Class<Integer> NATIVE_CLASS = int.class;\n+    public static final NativeAttributeType NATIVE_TYPE = NativeAttributeType.INT;\n     public static final int DEFAULT_VALUE = 0;\n-    private int defaultValue = DEFAULT_VALUE;\n+    \n     private int[] data = new int[0];\n+    private int defaultValue = DEFAULT_VALUE;\n+    \n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n+    private int convertFromObject(final Object object) {\n+        if (object == null) {\n+            return (int) getDefault();\n+        } else if (object instanceof Number) {\n+            return ((Number) object).intValue();\n+        } else if (object instanceof Boolean) {\n+            return ((Boolean) object) ? 1 : 0;\n+        } else if (object instanceof Character) {\n+            return (int) ((Character) object);\n+        } else if (object instanceof String) {\n+            return convertFromString((String) object);\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Error converting Object '%s' to integer\", object.getClass()));\n+        }\n+    }\n+\n+    private int convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/IntegerAttributeDescription.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/IntegerAttributeDescription.java\nindex 20dfb48c3..3fa22cb7a 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/IntegerAttributeDescription.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/IntegerAttributeDescription.java\n\n@@ -47,12 +48,12 @@ public final class IntegerAttributeDescription extends AbstractAttributeDescript\n     public static final Class<Integer> NATIVE_CLASS = int.class;\n     public static final NativeAttributeType NATIVE_TYPE = NativeAttributeType.INT;\n     public static final int DEFAULT_VALUE = 0;\n-    \n+\n     private int[] data = new int[0];\n     private int defaultValue = DEFAULT_VALUE;\n-    \n+\n     @SuppressWarnings(\"unchecked\") // Casts are manually checked\n-    private int convertFromObject(final Object object) {\n+    private int convertFromObject(final Object object) throws IllegalArgumentException {\n         if (object == null) {\n             return (int) getDefault();\n         } else if (object instanceof Number) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MDM2MQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417670361", "bodyText": "More specific exceptions", "author": "antares1470", "createdAt": "2020-04-29T23:27:39Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/BooleanAttributeDescription.java", "diffHunk": "@@ -215,19 +208,29 @@ public String getString(final int id) {\n \n     @Override\n     public void setString(final int id, final String value) {\n-        data[id] = Boolean.parseBoolean(value);\n+        data[id] = convertFromString(value);\n     }\n \n     @Override\n-    public String acceptsString(String value) {\n+    public String acceptsString(final String value) {\n         try {\n-            setString(value);\n+            convertFromString(value);\n             return null;\n-        } catch (Exception ex) {\n-            return \"Not a valid boolean value\";\n+        } catch (final Exception ex) {", "originalCommit": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/BooleanAttributeDescription.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/BooleanAttributeDescription.java\nindex ca9d63655..304e1f138 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/BooleanAttributeDescription.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/BooleanAttributeDescription.java\n\n@@ -216,7 +222,7 @@ public final class BooleanAttributeDescription extends AbstractAttributeDescript\n         try {\n             convertFromString(value);\n             return null;\n-        } catch (final Exception ex) {\n+        } catch (final IllegalArgumentException ex) {\n             return ex.getMessage();\n         }\n     }\n"}}, {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "url": "https://github.com/constellation-app/constellation/commit/6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "message": ":art: changes based on pull request feedback", "committedDate": "2020-04-30T00:39:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQyMw==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417707423", "bodyText": "I think there were a couple instances of this in the lines below that also need to be reverted (casting a long that is)", "author": "antares1470", "createdAt": "2020-04-30T01:37:52Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "diffHunk": "@@ -716,7 +716,7 @@ public void updateUndo(UndoGraphEditState state, int instruction) {\n         @Override\n         public void execute(UndoGraphEditState state, GraphWriteMethods graph) {\n             if (VERBOSE) {\n-                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n+                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");", "originalCommit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c06521190e56a762a3c219c175c5e0dfc566a73d", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java\nindex 46828247a..ee9dd103a 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java\n\n@@ -718,12 +718,12 @@ public enum UndoGraphEditOperation {\n             if (VERBOSE) {\n                 System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n             }\n-            graph.setDoubleValue(state.getCurrentAttribute(), state.getCurrentId(), Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())));\n+            graph.setDoubleValue(state.getCurrentAttribute(), state.getCurrentId(), Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())));\n         }\n \n         @Override\n         public void undo(UndoGraphEditState state, GraphWriteMethods graph) {\n-            graph.setDoubleValue(state.getCurrentAttribute(), state.getCurrentId(), Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())));\n+            graph.setDoubleValue(state.getCurrentAttribute(), state.getCurrentId(), Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())));\n         }\n \n         @Override\n"}}, {"oid": "c06521190e56a762a3c219c175c5e0dfc566a73d", "url": "https://github.com/constellation-app/constellation/commit/c06521190e56a762a3c219c175c5e0dfc566a73d", "message": ":art: missed a correction", "committedDate": "2020-04-30T01:46:54Z", "type": "commit"}, {"oid": "4b474aaa0b28e6f6f04460be55a37223d13e2b4b", "url": "https://github.com/constellation-app/constellation/commit/4b474aaa0b28e6f6f04460be55a37223d13e2b4b", "message": ":art: and one more change", "committedDate": "2020-04-30T01:49:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwOTEyMg==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417709122", "bodyText": "Can you walk me through why this case doesn't need to be considered anymore?", "author": "arcturus2", "createdAt": "2020-04-30T01:44:24Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java", "diffHunk": "@@ -515,7 +517,7 @@ private void buildIntervals(final GraphWriteMethods wgcopy, final ArrayList<Floa\n             // Only use transactions that have a datetime value set.\n             final long date = wgcopy.getLongValue(dtAttr, txId);\n \n-            if (date != ZonedDateTimeAttributeDescription.NULL_VALUE && d1t <= date && date < d2t) {", "originalCommit": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczNDkwNQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417734905", "bodyText": "This check is against the long value of a datetime. ZonedDateTimeAttributeDescription.DEFAULT_VALUE is a ZonedDateTime (and defaults to null), so the comparison doesn't make sense. I suspect it was a long at one point in time as the defaults for LocalDateTimeAttributeDescription, DateAttributeDescription and TimeAttributeDescription were all longs - however this would still be bad design as it assumes the user has chosen an attribute backed by ZonedDateTimeAttributeDescription.ATTRIBUTE_TYPE while still supporting attributes backed by other datetime types.", "author": "cygnus-x-1", "createdAt": "2020-04-30T03:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwOTEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "chunk": "diff --git a/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java b/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java\nindex a2747b885..3af067d1d 100644\n--- a/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java\n+++ b/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java\n\n@@ -517,7 +515,7 @@ public class LayerByTimePlugin extends SimpleReadPlugin {\n             // Only use transactions that have a datetime value set.\n             final long date = wgcopy.getLongValue(dtAttr, txId);\n \n-            if (d1t <= date && date < d2t) {\n+            if (date != ZonedDateTimeAttributeDescription.NULL_VALUE && d1t <= date && date < d2t) {\n                 final long layerId = (date - d1t) / intervalLength;\n                 final float layer = (float) layerId;\n \n"}}, {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d", "url": "https://github.com/constellation-app/constellation/commit/fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d", "message": ":art: updated changelog", "committedDate": "2020-04-30T03:43:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzODM4MA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418538380", "bodyText": "From what I can tell this is removed because it hasn't been used anywhere by any other class.", "author": "arcturus2", "createdAt": "2020-05-01T13:22:52Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java", "diffHunk": "@@ -53,108 +53,93 @@ public NativeAttributeType getNativeType() {\n     }\n \n     @Override\n-    public byte getByte(int id) {\n+    public byte getByte(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to byte\", getName()));\n     }\n \n     @Override\n-    public void setByte(int id, byte value) {\n+    public void setByte(final int id, final byte value) {\n         throw new IllegalArgumentException(String.format(\"Error converting byte to %s\", getName()));\n     }\n \n     @Override\n-    public short getShort(int id) {\n+    public short getShort(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to short\", getName()));\n     }\n \n     @Override\n-    public void setShort(int id, short value) {\n+    public void setShort(final int id, final short value) {\n         throw new IllegalArgumentException(String.format(\"Error converting short to %s\", getName()));\n     }\n \n     @Override\n-    public int getInt(int id) {\n+    public int getInt(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to int\", getName()));\n     }\n \n     @Override\n-    public void setInt(int id, int value) {\n+    public void setInt(final int id, final int value) {\n         throw new IllegalArgumentException(String.format(\"Error converting int to %s\", getName()));\n     }\n \n     @Override\n-    public long getLong(int id) {\n+    public long getLong(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to long\", getName()));\n     }\n \n     @Override\n-    public void setLong(int id, long value) {\n+    public void setLong(final int id, final long value) {\n         throw new IllegalArgumentException(String.format(\"Error converting long to %s\", getName()));\n     }\n \n     @Override\n-    public float getFloat(int id) {\n+    public float getFloat(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to float\", getName()));\n     }\n \n     @Override\n-    public void setFloat(int id, float value) {\n+    public void setFloat(final int id, final float value) {\n         throw new IllegalArgumentException(String.format(\"Error converting float to %s\", getName()));\n     }\n \n     @Override\n-    public double getDouble(int id) {\n+    public double getDouble(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to double\", getName()));\n     }\n \n     @Override\n-    public void setDouble(int id, double value) {\n+    public void setDouble(final int id, final double value) {\n         throw new IllegalArgumentException(String.format(\"Error converting double to %s\", getName()));\n     }\n \n     @Override\n-    public boolean getBoolean(int id) {\n+    public boolean getBoolean(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to boolean\", getName()));\n     }\n \n     @Override\n-    public void setBoolean(int id, boolean value) {\n+    public void setBoolean(final int id, final boolean value) {\n         throw new IllegalArgumentException(String.format(\"Error converting boolean to %s\", getName()));\n     }\n \n     @Override\n-    public char getChar(int id) {\n+    public char getChar(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to char\", getName()));\n     }\n \n     @Override\n-    public void setChar(int id, char value) {\n+    public void setChar(final int id, final char value) {\n         throw new IllegalArgumentException(String.format(\"Error converting char to %s\", getName()));\n     }\n \n     @Override\n-    public String getSearchString(int id) {", "originalCommit": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1OTAxOA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418559018", "bodyText": "Correct. I think there were a couple of methods I removed from AttributeDescription for the same reason.", "author": "cygnus-x-1", "createdAt": "2020-05-01T14:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzODM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java\nindex 6449f5828..46b49069a 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java\n\n@@ -53,93 +53,108 @@ public abstract class AbstractAttributeDescription implements AttributeDescripti\n     }\n \n     @Override\n-    public byte getByte(final int id) {\n+    public byte getByte(int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to byte\", getName()));\n     }\n \n     @Override\n-    public void setByte(final int id, final byte value) {\n+    public void setByte(int id, byte value) {\n         throw new IllegalArgumentException(String.format(\"Error converting byte to %s\", getName()));\n     }\n \n     @Override\n-    public short getShort(final int id) {\n+    public short getShort(int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to short\", getName()));\n     }\n \n     @Override\n-    public void setShort(final int id, final short value) {\n+    public void setShort(int id, short value) {\n         throw new IllegalArgumentException(String.format(\"Error converting short to %s\", getName()));\n     }\n \n     @Override\n-    public int getInt(final int id) {\n+    public int getInt(int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to int\", getName()));\n     }\n \n     @Override\n-    public void setInt(final int id, final int value) {\n+    public void setInt(int id, int value) {\n         throw new IllegalArgumentException(String.format(\"Error converting int to %s\", getName()));\n     }\n \n     @Override\n-    public long getLong(final int id) {\n+    public long getLong(int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to long\", getName()));\n     }\n \n     @Override\n-    public void setLong(final int id, final long value) {\n+    public void setLong(int id, long value) {\n         throw new IllegalArgumentException(String.format(\"Error converting long to %s\", getName()));\n     }\n \n     @Override\n-    public float getFloat(final int id) {\n+    public float getFloat(int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to float\", getName()));\n     }\n \n     @Override\n-    public void setFloat(final int id, final float value) {\n+    public void setFloat(int id, float value) {\n         throw new IllegalArgumentException(String.format(\"Error converting float to %s\", getName()));\n     }\n \n     @Override\n-    public double getDouble(final int id) {\n+    public double getDouble(int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to double\", getName()));\n     }\n \n     @Override\n-    public void setDouble(final int id, final double value) {\n+    public void setDouble(int id, double value) {\n         throw new IllegalArgumentException(String.format(\"Error converting double to %s\", getName()));\n     }\n \n     @Override\n-    public boolean getBoolean(final int id) {\n+    public boolean getBoolean(int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to boolean\", getName()));\n     }\n \n     @Override\n-    public void setBoolean(final int id, final boolean value) {\n+    public void setBoolean(int id, boolean value) {\n         throw new IllegalArgumentException(String.format(\"Error converting boolean to %s\", getName()));\n     }\n \n     @Override\n-    public char getChar(final int id) {\n+    public char getChar(int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to char\", getName()));\n     }\n \n     @Override\n-    public void setChar(final int id, final char value) {\n+    public void setChar(int id, char value) {\n         throw new IllegalArgumentException(String.format(\"Error converting char to %s\", getName()));\n     }\n \n     @Override\n-    public String acceptsString(final String value) {\n+    public String getSearchString(int id) {\n+        return getString(id);\n+    }\n+\n+    @Override\n+    public String acceptsString(String value) {\n         return null;\n     }\n \n     @Override\n-    public Object convertToNativeValue(final Object object) {\n-        return object;\n+    public Object convertToNativeValue(Object objectValue) {\n+        return objectValue;\n+    }\n+\n+    @Override\n+    public boolean canBeImported() {\n+        return true;\n+    }\n+\n+    @Override\n+    public int ordering() {\n+        return Integer.MAX_VALUE;\n     }\n \n     protected static boolean equals(final Object a, final Object b) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTM3NA==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418539374", "bodyText": "This feels a bit dangerous - won't we get NPE by not checking for null?", "author": "arcturus2", "createdAt": "2020-05-01T13:25:31Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);", "originalCommit": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MDY0Nw==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418560647", "bodyText": "It's not dangerous as String.valueOf(null) returns \"null\"... but it does seem wrong and i'm not sure why I changed it to that. It may have just been an oversight - I'll change it back.", "author": "cygnus-x-1", "createdAt": "2020-05-01T14:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\nindex 8d352545e..a9af3a7c5 100644\n--- a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java\n\n@@ -96,48 +89,39 @@ public abstract class AbstractObjectAttributeDescription<T extends Object> exten\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-\n+    \n     @Override\n     public String getString(final int id) {\n-        return String.valueOf((T) data[id]);\n+        return data[id] != null ? String.valueOf((T) data[id]) : null;\n     }\n-\n+    \n     @Override\n     public void setString(final int id, final String value) {\n         data[id] = convertFromString(value);\n     }\n-\n-    @Override\n-    public String acceptsString(final String value) {\n-        try {\n-            convertFromString(value);\n-            return null;\n-        } catch (final IllegalArgumentException ex) {\n-            return ex.getMessage();\n-        }\n-    }\n-\n+    \n     @Override\n-    @SuppressWarnings(\"unchecked\") // idData will be of type T which extends from Object type\n     public T getObject(final int id) {\n-        return (T) data[id];\n+        @SuppressWarnings(\"unchecked\") //idData will be of type T which extends from Object type\n+        final T idData = (T) data[id];\n+        return idData;\n     }\n-\n+    \n     @Override\n     public void setObject(final int id, final Object value) {\n         data[id] = convertFromObject(value);\n     }\n-\n+    \n     @Override\n     public boolean isClear(final int id) {\n         return equals(data[id], defaultValue);\n     }\n-\n+    \n     @Override\n     public void clear(final int id) {\n         data[id] = defaultValue;\n     }\n-\n+    \n     @Override\n     public AttributeDescription copy(final GraphReadMethods graph) {\n         final AbstractObjectAttributeDescription<T> attribute;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTQ5MQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418561491", "bodyText": "@cygnus-x-1 is this removed as a cleanup activity? Unfortunately I need all of these deprecated classes to remain to open old graphs that have written data with these attribute descriptions.\nAn idea I had was perhaps we could move all of these deprecated classes into a \"Attributes(Deprecated)\" module so that everyone else does not have to worry about them?\nWhen I get an update site running this \"deprecated\" module can be turned off by default too to avoid everyone having to deal with these legacy formats.", "author": "arcturus2", "createdAt": "2020-05-01T14:19:45Z", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java", "diffHunk": "@@ -1,223 +0,0 @@\n-/*\n- * Copyright 2010-2019 Australian Signals Directorate\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package au.gov.asd.tac.constellation.graph.attribute.compatibility;", "originalCommit": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3OTA3OQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418579079", "bodyText": "Yes - this was removed as part of cleaning up and normalising attributes. The issue here is that this attribute type is no longer supported (and can be broken), but because it's still 'registered' as an attribute it is available for use in the Attribute Editor, Delimited File Importer, etc. Rather than update the deprecated class, I figured it was easier to just remove it; after all that is the point of deprecation. Perhaps it's time to update those old graphs?", "author": "cygnus-x-1", "createdAt": "2020-05-01T14:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODEwOQ==", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418778109", "bodyText": "Can do (eventually). For now though can we keep them for a bit longer but start with removing the ServiceProvider annotation so they don't appear in the views? Doing this type of cleanup makes sense now that we are in v2 and I'm OK with that - I'll just need the classes around for a bit longer rather than having to troll through git history \ud83d\ude04.\nFeel free to add a big comment saying which ones you think are broken too as that will help me.", "author": "arcturus2", "createdAt": "2020-05-01T23:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "chunk": "diff --git a/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java\nnew file mode 100644\nindex 000000000..e9f822fcc\n--- /dev/null\n+++ b/CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java\n\n@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2010-2019 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.attribute.compatibility;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.AbstractAttributeDescription;\n+import au.gov.asd.tac.constellation.graph.attribute.AttributeDescription;\n+import java.util.Arrays;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * This describes a type of attribute whose values are lists of the names of\n+ * other attributes.\n+ * <p>\n+ * The string representation of an attribute value of this type consists is a\n+ * comma-separated list of attribute names.\n+ * <p>\n+ * Note that this attribute description should no longer be used and only\n+ * remains to support legacy graph files.\n+ *\n+ * @author algol\n+ */\n+@Deprecated\n+@ServiceProvider(service = AttributeDescription.class)\n+public final class AttrListAttributeDescriptionV0 extends AbstractAttributeDescription {\n+\n+    private static final String DEFAULT_VALUE = null;\n+    public static final String ATTR_NAME = \"attr_list\";\n+    private String[] data = new String[0];\n+    private String defaultValue = DEFAULT_VALUE;\n+\n+    @Override\n+    public String getName() {\n+        return ATTR_NAME;\n+    }\n+\n+    @Override\n+    public int getCapacity() {\n+        return data.length;\n+    }\n+\n+    @Override\n+    public void setCapacity(final int capacity) {\n+        final int len = data.length;\n+        data = Arrays.copyOf(data, capacity);\n+        if (capacity > len) {\n+            Arrays.fill(data, len, capacity, defaultValue);\n+        }\n+    }\n+\n+    @Override\n+    public void clear(final int id) {\n+        data[id] = defaultValue;\n+    }\n+\n+    @Override\n+    public void setByte(final int id, final byte value) {\n+        throw new IllegalArgumentException(String.format(\"Error converting byte to %s\", getName()));\n+    }\n+\n+    @Override\n+    public void setShort(final int id, final short value) {\n+        throw new IllegalArgumentException(String.format(\"Error converting short to %s\", getName()));\n+    }\n+\n+    @Override\n+    public void setInt(final int id, final int value) {\n+        throw new IllegalArgumentException(String.format(\"Error converting int to %s\", getName()));\n+    }\n+\n+    @Override\n+    public void setLong(final int id, final long value) {\n+        throw new IllegalArgumentException(String.format(\"Error converting long to %s\", getName()));\n+    }\n+\n+    @Override\n+    public void setFloat(final int id, final float value) {\n+        throw new IllegalArgumentException(String.format(\"Error converting float to %s\", getName()));\n+    }\n+\n+    @Override\n+    public void setDouble(final int id, final double value) {\n+        throw new IllegalArgumentException(String.format(\"Error converting double to %s\", getName()));\n+    }\n+\n+    @Override\n+    public void setBoolean(final int id, final boolean value) {\n+        throw new IllegalArgumentException(String.format(\"Error converting boolean to %s\", getName()));\n+    }\n+\n+    @Override\n+    public void setChar(final int id, final char value) {\n+        throw new IllegalArgumentException(String.format(\"Error converting char to %s\", getName()));\n+    }\n+\n+    @Override\n+    public void setObject(final int id, final Object value) {\n+        data[id] = (String) value;\n+    }\n+\n+    @Override\n+    public void setString(final int id, final String value) {\n+        data[id] = value;\n+    }\n+\n+    @Override\n+    public byte getByte(final int id) {\n+        throw new IllegalArgumentException(String.format(\"Error converting %s to byte\", getName()));\n+    }\n+\n+    @Override\n+    public short getShort(final int id) {\n+        throw new IllegalArgumentException(String.format(\"Error converting %s to short\", getName()));\n+    }\n+\n+    @Override\n+    public int getInt(final int id) {\n+        throw new IllegalArgumentException(String.format(\"Error converting %s to int\", getName()));\n+    }\n+\n+    @Override\n+    public long getLong(final int id) {\n+        throw new IllegalArgumentException(String.format(\"Error converting %s to long\", getName()));\n+    }\n+\n+    @Override\n+    public float getFloat(final int id) {\n+        throw new IllegalArgumentException(String.format(\"Error converting %s to float\", getName()));\n+    }\n+\n+    @Override\n+    public double getDouble(final int id) {\n+        throw new IllegalArgumentException(String.format(\"Error converting %s to double\", getName()));\n+    }\n+\n+    @Override\n+    public boolean getBoolean(final int id) {\n+        throw new IllegalArgumentException(String.format(\"Error converting %s to boolean\", getName()));\n+    }\n+\n+    @Override\n+    public char getChar(final int id) {\n+        throw new IllegalArgumentException(String.format(\"Error converting %s to char\", getName()));\n+    }\n+\n+    @Override\n+    public Object getObject(final int id) {\n+        return data[id];\n+    }\n+\n+    @Override\n+    public String getString(final int id) {\n+        return data[id];\n+    }\n+\n+    @Override\n+    public AttributeDescription copy(GraphReadMethods graph) {\n+        final AttrListAttributeDescriptionV0 attribute = new AttrListAttributeDescriptionV0();\n+        attribute.data = Arrays.copyOf(data, data.length);\n+        attribute.defaultValue = this.defaultValue;\n+        attribute.graph = graph;\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Class<?> getNativeClass() {\n+        return AttrListAttributeDescriptionV0.class;\n+    }\n+\n+    @Override\n+    public void setDefault(final Object value) {\n+        defaultValue = (String) value;\n+    }\n+\n+    @Override\n+    public Object getDefault() {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public int hashCode(final int id) {\n+        return data[id] == null ? 0 : data[id].hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final int id1, final int id2) {\n+        return data[id1] == null ? data[id2] == null : data[id1].equals(data[id2]);\n+    }\n+\n+    @Override\n+    public boolean canBeImported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isClear(final int id) {\n+        return equals(data[id], defaultValue);\n+    }\n+\n+    @Override\n+    public Object saveData() {\n+        return Arrays.copyOf(data, data.length);\n+    }\n+\n+    @Override\n+    public void restoreData(final Object savedData) {\n+        final String[] sd = (String[]) savedData;\n+        data = Arrays.copyOf(sd, sd.length);\n+    }\n+}\n"}}, {"oid": "edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "url": "https://github.com/constellation-app/constellation/commit/edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "message": ":art: changes based on pull request feedback", "committedDate": "2020-05-01T14:47:10Z", "type": "commit"}, {"oid": "65c013395a1f0597d5a6860c45b1876b4f33e2d7", "url": "https://github.com/constellation-app/constellation/commit/65c013395a1f0597d5a6860c45b1876b4f33e2d7", "message": "Merge branch 'master' into regex-update", "committedDate": "2020-05-01T14:47:56Z", "type": "commit"}, {"oid": "2b90df7f02e0d36cced83ac9c6f9bcd616edebf8", "url": "https://github.com/constellation-app/constellation/commit/2b90df7f02e0d36cced83ac9c6f9bcd616edebf8", "message": "Merge branch 'regex-update' into attribute-update\n\n# Conflicts:\n#\tCoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/interaction/ConnectionModeAttributeInteraction.java", "committedDate": "2020-05-01T14:59:30Z", "type": "commit"}, {"oid": "739747823d2307766f0c65f47dcb1ffd893f3e89", "url": "https://github.com/constellation-app/constellation/commit/739747823d2307766f0c65f47dcb1ffd893f3e89", "message": ":art: added attr_list attribute back, but disabled it.", "committedDate": "2020-05-04T00:36:27Z", "type": "commit"}, {"oid": "d7852e035b1e1ecec38ef442f997572ea76c6bc1", "url": "https://github.com/constellation-app/constellation/commit/d7852e035b1e1ecec38ef442f997572ea76c6bc1", "message": "Merge branch 'master' into attribute-update", "committedDate": "2020-05-04T00:38:49Z", "type": "commit"}]}