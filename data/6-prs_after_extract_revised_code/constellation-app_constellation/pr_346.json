{"pr_number": 346, "pr_title": "Remove brackets", "pr_createdAt": "2020-03-23T23:31:46Z", "pr_url": "https://github.com/constellation-app/constellation/pull/346", "timeline": [{"oid": "01ac4ce09120c77974eb9ccf5fe3218e3327e5e8", "url": "https://github.com/constellation-app/constellation/commit/01ac4ce09120c77974eb9ccf5fe3218e3327e5e8", "message": "removed braces from single variable lambdas", "committedDate": "2020-03-23T23:24:06Z", "type": "commit"}, {"oid": "8cb319137c30e9908255608fbbb2a29dc4798cc9", "url": "https://github.com/constellation-app/constellation/commit/8cb319137c30e9908255608fbbb2a29dc4798cc9", "message": "Merge branch 'master-nb11' into remove-brackets", "committedDate": "2020-03-23T23:25:43Z", "type": "commit"}, {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030", "url": "https://github.com/constellation-app/constellation/commit/3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030", "message": "fixed code smell from PR", "committedDate": "2020-03-23T23:51:04Z", "type": "commit"}, {"oid": "f8b01c9758b4724ca9e98d84aa148b15f414e88d", "url": "https://github.com/constellation-app/constellation/commit/f8b01c9758b4724ca9e98d84aa148b15f414e88d", "message": "Merge branch 'master-nb11' into remove-brackets", "committedDate": "2020-03-24T00:09:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDIxNQ==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396870215", "bodyText": "I think i liked the multi-line version here - it's too long to easily read.", "author": "cygnus-x-1", "createdAt": "2020-03-24T02:34:49Z", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/objects/ExpandedCompositeNodeState.java", "diffHunk": "@@ -110,9 +110,7 @@ private void contractSingleVertex(GraphWriteMethods wg, final int vxId, final Re\n         idToCopiedId.put(vxId, copiedId[0]);\n \n         // Add to the expansion store those transactions between this vertex and all vertices already added to the expansion store\n-        idToCopiedId.entrySet().stream().forEach((entry) -> {\n-            GraphRecordStoreUtilities.copyTransactionsBetweenVertices(wg, constituentNodeStore, vxId, entry.getKey(), copiedId[0], entry.getValue());\n-        });\n+        idToCopiedId.entrySet().stream().forEach(entry -> GraphRecordStoreUtilities.copyTransactionsBetweenVertices(wg, constituentNodeStore, vxId, entry.getKey(), copiedId[0], entry.getValue()));", "originalCommit": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NTIyMg==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396895222", "bodyText": "Done", "author": "antares1470", "createdAt": "2020-03-24T04:22:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f9d419c426e9ce27e635ae34288d2dd5995adc7d", "chunk": "diff --git a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/objects/ExpandedCompositeNodeState.java b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/objects/ExpandedCompositeNodeState.java\nindex f4e25b159..18d9a2e1d 100644\n--- a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/objects/ExpandedCompositeNodeState.java\n+++ b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/objects/ExpandedCompositeNodeState.java\n\n@@ -110,7 +110,9 @@ public class ExpandedCompositeNodeState {\n         idToCopiedId.put(vxId, copiedId[0]);\n \n         // Add to the expansion store those transactions between this vertex and all vertices already added to the expansion store\n-        idToCopiedId.entrySet().stream().forEach(entry -> GraphRecordStoreUtilities.copyTransactionsBetweenVertices(wg, constituentNodeStore, vxId, entry.getKey(), copiedId[0], entry.getValue()));\n+        idToCopiedId.entrySet().stream().forEach(entry -> \n+                GraphRecordStoreUtilities.copyTransactionsBetweenVertices(wg, constituentNodeStore, vxId, entry.getKey(), copiedId[0], entry.getValue())\n+        );\n \n         // Add the copied id of the expanded vertex to the relevant lists in the contracted composite state.\n         expandedIds.add(copiedId[0]);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDg3MA==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396870870", "bodyText": "Ditto here (although the line below is also stupidly long).", "author": "cygnus-x-1", "createdAt": "2020-03-24T02:37:23Z", "path": "CoreAttributeEditorView/src/au/gov/asd/tac/constellation/views/attributeeditor/AttributeEditorPanel.java", "diffHunk": "@@ -868,9 +863,7 @@ private void modifyAttributeAction(final AttributeData attr) {\n     }\n \n     private void updateTimeZoneAction(final AttributeData attr) {\n-        final EditOperation editOperation = (zoneId) -> {\n-            PluginExecution.withPlugin(new UpdateTimeZonePlugin((ZoneId) zoneId, attr)).executeLater(GraphManager.getDefault().getActiveGraph());\n-        };\n+        final EditOperation editOperation = zoneId -> PluginExecution.withPlugin(new UpdateTimeZonePlugin((ZoneId) zoneId, attr)).executeLater(GraphManager.getDefault().getActiveGraph());", "originalCommit": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NTE5OQ==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396895199", "bodyText": "Done", "author": "antares1470", "createdAt": "2020-03-24T04:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "f9d419c426e9ce27e635ae34288d2dd5995adc7d", "chunk": "diff --git a/CoreAttributeEditorView/src/au/gov/asd/tac/constellation/views/attributeeditor/AttributeEditorPanel.java b/CoreAttributeEditorView/src/au/gov/asd/tac/constellation/views/attributeeditor/AttributeEditorPanel.java\nindex c095bd3c2..c4d5adafe 100644\n--- a/CoreAttributeEditorView/src/au/gov/asd/tac/constellation/views/attributeeditor/AttributeEditorPanel.java\n+++ b/CoreAttributeEditorView/src/au/gov/asd/tac/constellation/views/attributeeditor/AttributeEditorPanel.java\n\n@@ -863,7 +863,8 @@ public class AttributeEditorPanel extends javax.swing.JPanel {\n     }\n \n     private void updateTimeZoneAction(final AttributeData attr) {\n-        final EditOperation editOperation = zoneId -> PluginExecution.withPlugin(new UpdateTimeZonePlugin((ZoneId) zoneId, attr)).executeLater(GraphManager.getDefault().getActiveGraph());\n+        final EditOperation editOperation = zoneId -> \n+                PluginExecution.withPlugin(new UpdateTimeZonePlugin((ZoneId) zoneId, attr)).executeLater(GraphManager.getDefault().getActiveGraph());\n         final AbstractEditor editor = UPDATE_TIME_ZONE_EDITOR_FACTORY.createEditor(editOperation, String.format(\"Set time-zone for attribute %s\", attr.getAttributeName()), TimeZone.getTimeZone(ZoneOffset.UTC).toZoneId());\n         final AttributeEditorDialog dialog = new AttributeEditorDialog(true, editor);\n         dialog.showDialog();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396871197", "bodyText": "Is the stream redundant here given forEach is used right after? I noticed this all throughout this PR - would you mind searching for instances of stream().forEach(...) and correcting that?", "author": "cygnus-x-1", "createdAt": "2020-03-24T02:38:32Z", "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "diffHunk": "@@ -84,11 +80,9 @@\n      */\n     private static List<PositionalDataAccessPluginType> getTypesOrderedByPosition() {\n         final List<PositionalDataAccessPluginType> ptypeList = new ArrayList<>();\n-        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach((type) -> {\n-            ptypeList.addAll(type.getPluginTypeList());\n-        });\n+        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach(type -> ptypeList.addAll(type.getPluginTypeList()));", "originalCommit": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3ODIzMQ==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396878231", "bodyText": "The forEach function used is for the stream object. Removing the stream call will result in this instance (and I suspect others) in using the Iterable version. Do you know if they have similar implementations? If they don't, it may be worthwhile leaving as is", "author": "antares1470", "createdAt": "2020-03-24T03:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxOTA0MQ==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396919041", "bodyText": "You are correct, and from what I've read it shouldn't make too much difference which one you use for most cases. That being said, unless you're following up with streaming operations, the Iterable version does seem a little more flexible in that it has order, respects data locks and allows premature returns. @arcturus2 - what do you think?", "author": "cygnus-x-1", "createdAt": "2020-03-24T06:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5ODIzMw==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396998233", "bodyText": "@cygnus-x-1 based on what I've read a stream is less memory intensive that an iterator which writes to the heap more often (for the reasons you have described - the extra checks it does).\nI'd like to get into using streams more so I'd favor to leave it as is.", "author": "arcturus2", "createdAt": "2020-03-24T09:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MzU5NA==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r397463594", "bodyText": "Ok I think I'll leave it as is then. We can address this at a later date if we do decide we want to go down a different path", "author": "antares1470", "createdAt": "2020-03-24T21:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTEzMg==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r397535132", "bodyText": "@arcturus from what i've read the memory and time improvements only really apply when streaming over large datasets. For a Lookup as above, where you would expect no more than 10's of results, streams can actually have a higher time and possibly even memory overhead due to the additional objects created by the stream. We should revisit this later...", "author": "cygnus-x-1", "createdAt": "2020-03-25T00:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMzEyOQ==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r397623129", "bodyText": "ok @cygnus-x-1 worth fleshing out more sometime.", "author": "arcturus2", "createdAt": "2020-03-25T05:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MjU3NA==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396872574", "bodyText": "Could you expand the single character variable names here?", "author": "cygnus-x-1", "createdAt": "2020-03-24T02:44:13Z", "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/placeholder/PlaceholderUtilities.java", "diffHunk": "@@ -130,10 +130,10 @@ public static StoreGraph collapsePlaceholders(final StoreGraphRecordStore graph,\n         // remove all transactions with type 'unknown' and all nodes with identifier 'unknown'\n         if (cleanupGraph) {\n             g.streamTransactions()\n-                    .filter((t) -> t.getTypeValue().equals(SchemaTransactionTypeUtilities.getDefaultType()))\n+                    .filter(t -> t.getTypeValue().equals(SchemaTransactionTypeUtilities.getDefaultType()))", "originalCommit": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NTE2NA==", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396895164", "bodyText": "Done", "author": "antares1470", "createdAt": "2020-03-24T04:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f9d419c426e9ce27e635ae34288d2dd5995adc7d", "chunk": "diff --git a/CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/placeholder/PlaceholderUtilities.java b/CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/placeholder/PlaceholderUtilities.java\nindex befcf87dd..85cf5dd66 100644\n--- a/CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/placeholder/PlaceholderUtilities.java\n+++ b/CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/placeholder/PlaceholderUtilities.java\n\n@@ -130,10 +130,10 @@ public class PlaceholderUtilities {\n         // remove all transactions with type 'unknown' and all nodes with identifier 'unknown'\n         if (cleanupGraph) {\n             g.streamTransactions()\n-                    .filter(t -> t.getTypeValue().equals(SchemaTransactionTypeUtilities.getDefaultType()))\n+                    .filter(transaction -> transaction.getTypeValue().equals(SchemaTransactionTypeUtilities.getDefaultType()))\n                     .forEach(GraphTransaction::deferRemove);\n             g.streamVertices()\n-                    .filter(v -> v.getStringValue(VisualConcept.VertexAttribute.IDENTIFIER).equals(\"unknown\"))\n+                    .filter(vertex -> vertex.getStringValue(VisualConcept.VertexAttribute.IDENTIFIER).equals(\"unknown\"))\n                     .forEach(GraphVertex::deferRemove);\n             g.completeDeferred();\n         }\n"}}, {"oid": "f9d419c426e9ce27e635ae34288d2dd5995adc7d", "url": "https://github.com/constellation-app/constellation/commit/f9d419c426e9ce27e635ae34288d2dd5995adc7d", "message": "made some suggested PR changes", "committedDate": "2020-03-24T04:21:57Z", "type": "commit"}]}