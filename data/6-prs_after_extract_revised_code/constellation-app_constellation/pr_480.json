{"pr_number": 480, "pr_title": "Scatter3d - allow negative numbers to have logarithmic expansion as well", "pr_createdAt": "2020-05-02T23:59:32Z", "pr_url": "https://github.com/constellation-app/constellation/pull/480", "timeline": [{"oid": "76fdd64e2705cf79db7f4096ae5b5217ecc04560", "url": "https://github.com/constellation-app/constellation/commit/76fdd64e2705cf79db7f4096ae5b5217ecc04560", "message": "Allow negative numbers to not just be 0 when logarithmic is done.", "committedDate": "2020-05-02T23:55:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE3OTMzOA==", "url": "https://github.com/constellation-app/constellation/pull/480#discussion_r419179338", "bodyText": "Not enough finals :)", "author": "cygnus-x-1", "createdAt": "2020-05-04T00:22:03Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java", "diffHunk": "@@ -179,7 +179,7 @@ public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n     private float scaleValue(float value, boolean logarithmic) {", "originalCommit": "76fdd64e2705cf79db7f4096ae5b5217ecc04560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4ODA1MA==", "url": "https://github.com/constellation-app/constellation/pull/480#discussion_r419188050", "bodyText": "Added.", "author": "CrucisGamma", "createdAt": "2020-05-04T01:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE3OTMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "2e2291630d462c3a827a9dcdc9e5c138b8686eb0", "chunk": "diff --git a/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java b/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java\nindex 0df45b10a..8c34008fa 100644\n--- a/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java\n+++ b/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java\n\n@@ -176,12 +176,12 @@ public class Scatter3dArranger implements Arranger {\n         }\n     }\n \n-    private float scaleValue(float value, boolean logarithmic) {\n+    private float scaleValue(final float value, final boolean logarithmic) {\n         if (logarithmic) {\n-            if (value <= 0.0) {\n-                return (float) Math.log10(-value) * -1;\n+            if (value != 0.0) {\n+                return (float) Math.log10(Math.abs(value)) * Math.signum(value);\n             }\n-            return (float) Math.log10(value);\n+            return 0.0f;\n         }\n         return value;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4MDA5MQ==", "url": "https://github.com/constellation-app/constellation/pull/480#discussion_r419180091", "bodyText": "You could do this in one operation using Math.log10(Math.abs(value)) * Math.signum(value).", "author": "cygnus-x-1", "createdAt": "2020-05-04T00:29:26Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java", "diffHunk": "@@ -179,7 +179,7 @@ public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n     private float scaleValue(float value, boolean logarithmic) {\n         if (logarithmic) {\n             if (value <= 0.0) {\n-                return 0.0f;\n+                return (float) Math.log10(-value) * -1;", "originalCommit": "76fdd64e2705cf79db7f4096ae5b5217ecc04560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4MzMzOQ==", "url": "https://github.com/constellation-app/constellation/pull/480#discussion_r419183339", "bodyText": "Hmm, I actually broke it with the request :(\nlog10(0) = -Infinity is the thing I want to avoid.", "author": "spjspj", "createdAt": "2020-05-04T01:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4MDA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4ODExOQ==", "url": "https://github.com/constellation-app/constellation/pull/480#discussion_r419188119", "bodyText": "Seems that log10(0) * 0 still gives NaN so kept the 0.0 case in.", "author": "CrucisGamma", "createdAt": "2020-05-04T01:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4MDA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2NzgwMA==", "url": "https://github.com/constellation-app/constellation/pull/480#discussion_r419767800", "bodyText": "Good catch.", "author": "cygnus-x-1", "createdAt": "2020-05-04T22:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4MDA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e2291630d462c3a827a9dcdc9e5c138b8686eb0", "chunk": "diff --git a/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java b/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java\nindex 0df45b10a..8c34008fa 100644\n--- a/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java\n+++ b/CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java\n\n@@ -176,12 +176,12 @@ public class Scatter3dArranger implements Arranger {\n         }\n     }\n \n-    private float scaleValue(float value, boolean logarithmic) {\n+    private float scaleValue(final float value, final boolean logarithmic) {\n         if (logarithmic) {\n-            if (value <= 0.0) {\n-                return (float) Math.log10(-value) * -1;\n+            if (value != 0.0) {\n+                return (float) Math.log10(Math.abs(value)) * Math.signum(value);\n             }\n-            return (float) Math.log10(value);\n+            return 0.0f;\n         }\n         return value;\n     }\n"}}, {"oid": "2e2291630d462c3a827a9dcdc9e5c138b8686eb0", "url": "https://github.com/constellation-app/constellation/commit/2e2291630d462c3a827a9dcdc9e5c138b8686eb0", "message": "Allow negative numbers to not just be 0 when logarithmic is done.\n\nThis accounts for Math.log10(0) * 0 ==> NaN still.", "committedDate": "2020-05-04T01:46:20Z", "type": "commit"}]}