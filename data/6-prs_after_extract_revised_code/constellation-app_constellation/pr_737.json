{"pr_number": 737, "pr_title": "Upgrade Schema Vertex Types - Fixes #730", "pr_createdAt": "2020-07-23T04:18:53Z", "pr_url": "https://github.com/constellation-app/constellation/pull/737", "timeline": [{"oid": "037d7011be215033329ea88af76102fd1c549546", "url": "https://github.com/constellation-app/constellation/commit/037d7011be215033329ea88af76102fd1c549546", "message": ":bug: Upgrade Schema Vertex Types\n* Adding certain nodes to a v1 graph opened in v2 will introduce duplicate types. This is because the Type have changed (which is the validation and detection regex).", "committedDate": "2020-07-23T04:05:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNzE5NQ==", "url": "https://github.com/constellation-app/constellation/pull/737#discussion_r459217195", "bodyText": "Sonar is identifying using double brace initialisation as a bug. Consequently, it would be good to remove the need to use it", "author": "antares1470", "createdAt": "2020-07-23T05:09:51Z", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.schema.analytic.compatibility;\n+\n+import au.gov.asd.tac.constellation.graph.StoreGraph;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactoryUtilities;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.AnalyticSchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.concept.AnalyticConcept;\n+import au.gov.asd.tac.constellation.graph.schema.type.SchemaVertexType;\n+import au.gov.asd.tac.constellation.graph.versioning.SchemaUpdateProvider;\n+import au.gov.asd.tac.constellation.graph.versioning.UpdateProvider;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Upgrade Vertex Types that have changed.\n+ * <p>\n+ * The detection regex and validation regex was reviewed and improved.\n+ *\n+ * @author arcturus\n+ */\n+@ServiceProvider(service = UpdateProvider.class)\n+public class AnalyticSchemaV4UpdateProvider extends SchemaUpdateProvider {\n+\n+    public static final int SCHEMA_VERSION_THIS_UPDATE = 4;\n+\n+    @Override\n+    protected SchemaFactory getSchema() {\n+        return SchemaFactoryUtilities.getSchemaFactory(AnalyticSchemaFactory.ANALYTIC_SCHEMA_ID);\n+    }\n+\n+    @Override\n+    public int getFromVersionNumber() {\n+        return AnalyticSchemaV3UpdateProvider.SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    public int getToVersionNumber() {\n+        return SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    protected void schemaUpdate(final StoreGraph graph) {\n+        final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n+\n+        final Map<String, SchemaVertexType> typesToUpgrade = new HashMap<>() {\n+            {\n+                put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+                put(AnalyticConcept.VertexType.SHA1.getName(), AnalyticConcept.VertexType.SHA1);\n+                put(AnalyticConcept.VertexType.SHA256.getName(), AnalyticConcept.VertexType.SHA256);\n+                put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n+                put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n+                put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n+                put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+                put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n+                put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n+                put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n+                put(AnalyticConcept.VertexType.HOST_NAME.getName(), AnalyticConcept.VertexType.HOST_NAME);\n+                put(AnalyticConcept.VertexType.URL.getName(), AnalyticConcept.VertexType.URL);\n+                put(AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER.getName(), AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER);\n+            }", "originalCommit": "037d7011be215033329ea88af76102fd1c549546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzODI4MA==", "url": "https://github.com/constellation-app/constellation/pull/737#discussion_r459238280", "bodyText": "Yep, easily fixed.", "author": "arcturus2", "createdAt": "2020-07-23T06:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNzE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e92213720e735a6c9e53943c71f1d348eed9df9", "chunk": "diff --git a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java\nindex b89b29d15..f33aa5393 100644\n--- a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java\n+++ b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java\n\n@@ -58,23 +58,20 @@ public class AnalyticSchemaV4UpdateProvider extends SchemaUpdateProvider {\n     protected void schemaUpdate(final StoreGraph graph) {\n         final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n \n-        final Map<String, SchemaVertexType> typesToUpgrade = new HashMap<>() {\n-            {\n-                put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n-                put(AnalyticConcept.VertexType.SHA1.getName(), AnalyticConcept.VertexType.SHA1);\n-                put(AnalyticConcept.VertexType.SHA256.getName(), AnalyticConcept.VertexType.SHA256);\n-                put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n-                put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n-                put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n-                put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n-                put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n-                put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n-                put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n-                put(AnalyticConcept.VertexType.HOST_NAME.getName(), AnalyticConcept.VertexType.HOST_NAME);\n-                put(AnalyticConcept.VertexType.URL.getName(), AnalyticConcept.VertexType.URL);\n-                put(AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER.getName(), AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER);\n-            }\n-        };\n+        final Map<String, SchemaVertexType> typesToUpgrade = new HashMap<>();\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.SHA1.getName(), AnalyticConcept.VertexType.SHA1);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.SHA256.getName(), AnalyticConcept.VertexType.SHA256);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.HOST_NAME.getName(), AnalyticConcept.VertexType.HOST_NAME);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.URL.getName(), AnalyticConcept.VertexType.URL);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER.getName(), AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER);\n \n         for (int vertex = 0; vertex < graph.getVertexCount(); vertex++) {\n             final int vertexId = graph.getVertex(vertex);\n"}}, {"oid": "8e92213720e735a6c9e53943c71f1d348eed9df9", "url": "https://github.com/constellation-app/constellation/commit/8e92213720e735a6c9e53943c71f1d348eed9df9", "message": ":shirt: Fix a SonarQube warning", "committedDate": "2020-07-23T06:28:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNDg4OQ==", "url": "https://github.com/constellation-app/constellation/pull/737#discussion_r459814889", "bodyText": "This will probably work just fine, but could be improved by comparing more of the type object than just the name.", "author": "cygnus-x-1", "createdAt": "2020-07-24T01:40:15Z", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.schema.analytic.compatibility;\n+\n+import au.gov.asd.tac.constellation.graph.StoreGraph;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactoryUtilities;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.AnalyticSchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.concept.AnalyticConcept;\n+import au.gov.asd.tac.constellation.graph.schema.type.SchemaVertexType;\n+import au.gov.asd.tac.constellation.graph.versioning.SchemaUpdateProvider;\n+import au.gov.asd.tac.constellation.graph.versioning.UpdateProvider;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Upgrade Vertex Types that have changed.\n+ * <p>\n+ * The detection regex and validation regex was reviewed and improved.\n+ *\n+ * @author arcturus\n+ */\n+@ServiceProvider(service = UpdateProvider.class)\n+public class AnalyticSchemaV4UpdateProvider extends SchemaUpdateProvider {\n+\n+    public static final int SCHEMA_VERSION_THIS_UPDATE = 4;\n+\n+    @Override\n+    protected SchemaFactory getSchema() {\n+        return SchemaFactoryUtilities.getSchemaFactory(AnalyticSchemaFactory.ANALYTIC_SCHEMA_ID);\n+    }\n+\n+    @Override\n+    public int getFromVersionNumber() {\n+        return AnalyticSchemaV3UpdateProvider.SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    public int getToVersionNumber() {\n+        return SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    protected void schemaUpdate(final StoreGraph graph) {\n+        final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n+\n+        final Map<String, SchemaVertexType> typesToUpgrade = new HashMap<>();\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.SHA1.getName(), AnalyticConcept.VertexType.SHA1);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.SHA256.getName(), AnalyticConcept.VertexType.SHA256);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.HOST_NAME.getName(), AnalyticConcept.VertexType.HOST_NAME);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.URL.getName(), AnalyticConcept.VertexType.URL);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER.getName(), AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER);\n+\n+        for (int vertex = 0; vertex < graph.getVertexCount(); vertex++) {\n+            final int vertexId = graph.getVertex(vertex);\n+            final SchemaVertexType oldType = graph.getObjectValue(typeAttribute, vertexId);\n+\n+            if (typesToUpgrade.containsKey(oldType.getName())) {", "originalCommit": "8e92213720e735a6c9e53943c71f1d348eed9df9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0MDY5Mg==", "url": "https://github.com/constellation-app/constellation/pull/737#discussion_r460040692", "bodyText": "Perhaps @cygnus-x-1 though remember that this is upgrading from v3 so we should be safe to assume what the type is at this point.", "author": "arcturus2", "createdAt": "2020-07-24T13:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNDg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0f75b50e4e811a4b9594106fd95b13760e8d3afa", "chunk": "diff --git a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java\nindex f33aa5393..9e66a7783 100644\n--- a/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java\n+++ b/CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java\n\n@@ -65,7 +65,6 @@ public class AnalyticSchemaV4UpdateProvider extends SchemaUpdateProvider {\n         typesToUpgrade.put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n         typesToUpgrade.put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n         typesToUpgrade.put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n-        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n         typesToUpgrade.put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n         typesToUpgrade.put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n         typesToUpgrade.put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n"}}, {"oid": "0f75b50e4e811a4b9594106fd95b13760e8d3afa", "url": "https://github.com/constellation-app/constellation/commit/0f75b50e4e811a4b9594106fd95b13760e8d3afa", "message": ":bug: Upgrade Schema Vertex Types", "committedDate": "2020-07-24T13:09:36Z", "type": "commit"}]}