{"pr_number": 890, "pr_title": "Performance/878 drag performance", "pr_createdAt": "2020-11-10T00:00:31Z", "pr_url": "https://github.com/constellation-app/constellation/pull/890", "timeline": [{"oid": "d55f1a802ca28624e5706b12c225079b5835f661", "url": "https://github.com/constellation-app/constellation/commit/d55f1a802ca28624e5706b12c225079b5835f661", "message": ":art: :racehorse: Added updateModCounts method\n\nAdded method updateModCounts to allow for the modification counters to\nbe updated without triggering visual updates. This will be used when\nopening a graph for the first time top avoid unnecessary visual updates.\nGeneralised other update methods to allow for a graph argument to\nfacilitate this.", "committedDate": "2020-09-29T05:07:10Z", "type": "commit"}, {"oid": "5f35f14104e15a48ed654fe4799fc5ced6fbcf52", "url": "https://github.com/constellation-app/constellation/commit/5f35f14104e15a48ed654fe4799fc5ced6fbcf52", "message": ":art: :racehorse: Update modcounts of visualAccess when opening graph\n\nNow updates the modcounts of the GraphVisualAccess when constructing a \nvisualManager. This allows for the updateFromIndigenousChanges listener\nto be added without triggering every single visualUpdate.", "committedDate": "2020-09-29T05:09:22Z", "type": "commit"}, {"oid": "e2a31dec78606f4d2d90ff9bb98998b2d13725df", "url": "https://github.com/constellation-app/constellation/commit/e2a31dec78606f4d2d90ff9bb98998b2d13725df", "message": ":art: :racehorse: Added refreshVisualProcessor call\n\nAdded refreshVisualProcessor call to perform initial render of graph\nto the GLCanavas. This is required now that visualUpdates will not\nautomatically be triggered when opening a new graph. Testing shows this\nto be more performant. This makes sense as now it is performing the\nminimal number of visual updates that will render the graph to the \nscreen whereas perviously it would do more than required (duplicates).", "committedDate": "2020-09-29T05:11:44Z", "type": "commit"}, {"oid": "e95838292f549b4df7858225a90f23aa6e44d4d8", "url": "https://github.com/constellation-app/constellation/commit/e95838292f549b4df7858225a90f23aa6e44d4d8", "message": ":art: Deleted accidental blank line.", "committedDate": "2020-09-29T05:28:41Z", "type": "commit"}, {"oid": "7ce24a82c3a9d15b2e92b51d31e3076fb67ad675", "url": "https://github.com/constellation-app/constellation/commit/7ce24a82c3a9d15b2e92b51d31e3076fb67ad675", "message": ":art: Made variables final where appropriate as per feedback.", "committedDate": "2020-10-02T00:26:59Z", "type": "commit"}, {"oid": "57b7f50e554604767504ce605e659e4e9c70eba9", "url": "https://github.com/constellation-app/constellation/commit/57b7f50e554604767504ce605e659e4e9c70eba9", "message": ":racehorse: Moved rebuild from dispose to reshape.\n\nMoved rebuild from dispose method to reshape method. This will stop a\nrebuild from being triggered when a graph is closed and mean we can\nremove the refresh from VisualGraphTopCOmponent as opening a graph\ncalls reshape (but not dispose).", "committedDate": "2020-10-02T02:49:23Z", "type": "commit"}, {"oid": "b8c148542ba0ca83d9f47049f320658f4b18c969", "url": "https://github.com/constellation-app/constellation/commit/b8c148542ba0ca83d9f47049f320658f4b18c969", "message": ":racehorse: Moved rebuild from reshape to init.\n\nMoved rebuild from reshape method to init method it must be called \nafter a dispose to render the graph back to the screen (where the graph\nhasn't actually been closed). An init must always be called in this\nscenario.", "committedDate": "2020-10-02T05:42:11Z", "type": "commit"}, {"oid": "2da0bbc650dede26716c5f9ee290afaa8befba59", "url": "https://github.com/constellation-app/constellation/commit/2da0bbc650dede26716c5f9ee290afaa8befba59", "message": ":bug: Make addRectImage threadsafe\n\nMade addRectImage more threadsafe by combining check to see if hashCode is contained in memory and the action to add the hadCode to the memory if it isnt. This elimnated multithreading scenario where the same hashcode is added twice ( next check for the presence of the hashcode is completed before it previous check finished adding it to memory) and the ptr values becomes incorrect.", "committedDate": "2020-10-15T22:07:52Z", "type": "commit"}, {"oid": "a8285bd232e1fe538c93b401d3f4ef49e65db247", "url": "https://github.com/constellation-app/constellation/commit/a8285bd232e1fe538c93b401d3f4ef49e65db247", "message": ":art: Created GlyphStreamContext and NodeGlyphStreamContext\n\nCreated a GlyphStreamContext object which holds the information required by a GlyphStream to perform the compulsory methods. This will more easily allow for consistent method signatures across types of GlyphStreams.", "committedDate": "2020-10-15T22:12:35Z", "type": "commit"}, {"oid": "f7b6318bd5d9a349af37f42017c7746d62d939d5", "url": "https://github.com/constellation-app/constellation/commit/f7b6318bd5d9a349af37f42017c7746d62d939d5", "message": ":art: Created NodeGlyphStream\n\nCreated a NodeGlyphStream object which contains logig to adding glyphs to a glyphStream focussed on Nodes. This logic previously resided in NodeLabelBuffer. The creation of this object will allow for the glyphStream to be treated separately to the buffer.", "committedDate": "2020-10-15T22:14:49Z", "type": "commit"}, {"oid": "c304f4fb74d00f80995508c3c8b16322b6af653b", "url": "https://github.com/constellation-app/constellation/commit/c304f4fb74d00f80995508c3c8b16322b6af653b", "message": ":art: Accomodate new NodeGlyphStream and NodeGlyphStreamContext classes\n\nChanges to method signatures to add in new object types NodeGlyphStream and NodeGlyphStreamContext.\nNOTE: This commit does not contain all changes required for this. However other files have additional changes which should be explained in the commit.", "committedDate": "2020-10-15T22:17:34Z", "type": "commit"}, {"oid": "4668c45e0e5b6fcd58281a77de96f57de11e5264", "url": "https://github.com/constellation-app/constellation/commit/4668c45e0e5b6fcd58281a77de96f57de11e5264", "message": ":art: Accomodate new classes, make RenderTextAsLigatures threadsafe.\n\nChanges to method signatures to add in new object types NodeGlyphStream and NodeGlyphStreamContext.\nEliminate the reliance on class object drawing in method renderTextAsLigatures. Combined with changes to the methods which renderTextAsLigatures calls this has the affect of making the method more threadsafe.", "committedDate": "2020-10-15T22:19:45Z", "type": "commit"}, {"oid": "bdd133da9815750e3e4735d3b84254a2a9b52186", "url": "https://github.com/constellation-app/constellation/commit/bdd133da9815750e3e4735d3b84254a2a9b52186", "message": ":racehorse: Add multithreading to methods\n\nMade methods createBatch, fillTopLabels and fillBottomLabels multithreaded. This will improve the performance of these methods enabling faster application of graph changes. In particular refreshing the graph should be much quicker, leading to faster graph opening times.\nNOTE: The branch, including this commit and all previous should work, however there has been limited testing. It is likely that more changes will be made.", "committedDate": "2020-10-15T22:24:50Z", "type": "commit"}, {"oid": "4a3a130a179ec47faa1b879032ff1e0ea3d6b9b0", "url": "https://github.com/constellation-app/constellation/commit/4a3a130a179ec47faa1b879032ff1e0ea3d6b9b0", "message": ":arte: Incorporate GlyphStreamContext class\n\nChange to method signatures and small change to logic to incorporate the new GlyphStreamContextClass. Should have been added to previous commit.", "committedDate": "2020-10-16T06:40:16Z", "type": "commit"}, {"oid": "2e5beb10bfc3b8335f7f4a1467fbe26313c84bbe", "url": "https://github.com/constellation-app/constellation/commit/2e5beb10bfc3b8335f7f4a1467fbe26313c84bbe", "message": ":bug: Stronger synchronized condition to stop rare rendering bug\n\nCombined array specific locks into one stronger lock that ensures\naddition of nodes to both currentFloats and currentInts prior to allowing access to either. This seems to stop a glitch where characters would occasionally not appear in the node label when opening a graph.", "committedDate": "2020-10-20T00:45:49Z", "type": "commit"}, {"oid": "17d0d1a6a1e9046a1734db4b20f2ea88e5cddd64", "url": "https://github.com/constellation-app/constellation/commit/17d0d1a6a1e9046a1734db4b20f2ea88e5cddd64", "message": ":art: Make GlyphStreamContext attributes public, remove get/set\n\nMade GlyphStreamContext and child member variables public to improve\nreadability and ease of use.", "committedDate": "2020-10-20T04:51:13Z", "type": "commit"}, {"oid": "249379260648ecfd6bd68475855102d90012ea61", "url": "https://github.com/constellation-app/constellation/commit/249379260648ecfd6bd68475855102d90012ea61", "message": ":racehorse: Make ConnectionLabelBatcher multithreaded.\n\nUsing the same parent classes and principles used when multithreading NodeLabelBatcher I have multithreaded ConnectionGlyphStream. This improved the rendering time of graphs dominated by connection count rather than node count.", "committedDate": "2020-10-20T04:53:18Z", "type": "commit"}, {"oid": "4a0bdfd17f275b699f202a93afe23ab04b845582", "url": "https://github.com/constellation-app/constellation/commit/4a0bdfd17f275b699f202a93afe23ab04b845582", "message": ":racehorse: Multithread updateTop/BottomLabels\n\nupdateTopLabels and updateBottomLabels now use the multithreaded version of\nFillTopLabels and FillBottomLabels respectively, brining them in line with changes madde to createBatch.", "committedDate": "2020-10-20T20:47:25Z", "type": "commit"}, {"oid": "6e2457aed8d34e925ed56fa9941de09224f9c5b0", "url": "https://github.com/constellation-app/constellation/commit/6e2457aed8d34e925ed56fa9941de09224f9c5b0", "message": ":Art: Removing TODO comment (tried it)\n\nTried refactoring NodeLabelBatcher and NodeGlyphStream to run multiple\nnodeGlyphStreams independently and then combine them to eliminate the need to synchronize on addLock. There was no improvement in speed, however my implementation likely wasn't optimal.", "committedDate": "2020-10-20T21:47:17Z", "type": "commit"}, {"oid": "47adb98d6dcda0e10f488de3b63bcfb122b489a7", "url": "https://github.com/constellation-app/constellation/commit/47adb98d6dcda0e10f488de3b63bcfb122b489a7", "message": ":Art: Removing TODO comments (Done)", "committedDate": "2020-10-20T21:56:14Z", "type": "commit"}, {"oid": "5124a805c4ec20f1658ff01bc3550c77a5c542ac", "url": "https://github.com/constellation-app/constellation/commit/5124a805c4ec20f1658ff01bc3550c77a5c542ac", "message": ":Art: Changed thread pool size to number of cores.\n\nAll three multithreaded methods are entirely CPU dependent. In this scenario the accepted wisdom is to have a number of threads equal to the number of cores. Setting each to the number of cores isn't perfect (as often more than one of these methods will run, such as when opening a graph. There are also potentially threads already running.) however accurately acounting for each scenario is quite involved and as far as I can tell there should be minimal penalty for having a few too many threads.", "committedDate": "2020-10-21T00:37:54Z", "type": "commit"}, {"oid": "1e273a1845c90632eed74449bfc4666be61cc089", "url": "https://github.com/constellation-app/constellation/commit/1e273a1845c90632eed74449bfc4666be61cc089", "message": "Merge branch 'master' into performance/838-MultiThreading", "committedDate": "2020-10-26T21:02:33Z", "type": "commit"}, {"oid": "ca7238c065cf532f50388718f3410cd193d57686", "url": "https://github.com/constellation-app/constellation/commit/ca7238c065cf532f50388718f3410cd193d57686", "message": ":racehorse: scheduleXYZChangeOperation argument change.\n\nChanged the argument used by DefaultInteractionEventHandler.scheduleXyzChangeOperation to an integer array of the verticies that have been moved. This changes processing downstream from processing every node to just those moved.", "committedDate": "2020-10-27T01:57:52Z", "type": "commit"}, {"oid": "b5ea2ecb802f104ee22ec4db0f46602ec8bf4948", "url": "https://github.com/constellation-app/constellation/commit/b5ea2ecb802f104ee22ec4db0f46602ec8bf4948", "message": ":racehorse: Use vertexStream to improve performance\n\ngatherSelectedNodes now uses a vertexStream to more quickly find selected nodes. This leads to better performance when dragging nodes.", "committedDate": "2020-10-27T23:04:05Z", "type": "commit"}, {"oid": "a03581e5b7d0b09d1046338b6ceaa7ab44c0d7f1", "url": "https://github.com/constellation-app/constellation/commit/a03581e5b7d0b09d1046338b6ceaa7ab44c0d7f1", "message": ":racehorse: Streamline getMixedVertexCoordinates, setVertexCoordinates\n\nCreated new versions of getMixedVertexCoordinates and setVertexCoordinates which required the attributeIds that would normally be derived within the function to be provided as arguments. This allows the methods to run very slightly quicker. They should be used when the methods are expected to be called repeatedly with the same attribute Id's so that the ID's can be retrieved only once instead of every time they are run.", "committedDate": "2020-11-08T23:26:20Z", "type": "commit"}, {"oid": "99124ef533f8775a018f7ad33d71024bee50511b", "url": "https://github.com/constellation-app/constellation/commit/99124ef533f8775a018f7ad33d71024bee50511b", "message": "Merge master into performance/878-DragPerformance\n\nConflicts:\n\tCoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java\n\tCoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java\n\tCoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/ConnectionGlyphStream.java\n\tCoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/GlyphStreamContext.java\n\tCoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/NodeGlyphStream.java", "committedDate": "2020-11-09T05:04:57Z", "type": "commit"}, {"oid": "6624db304bab724143b80a2e43086f2b97958a31", "url": "https://github.com/constellation-app/constellation/commit/6624db304bab724143b80a2e43086f2b97958a31", "message": "Revert \":racehorse: Streamline getMixedVertexCoordinates, setVertexCoordinates\"\n\nThis reverts commit a03581e5b7d0b09d1046338b6ceaa7ab44c0d7f1.", "committedDate": "2020-11-09T05:08:30Z", "type": "commit"}, {"oid": "aa530ff3a58816a2475b2b3969739d5adacc5487", "url": "https://github.com/constellation-app/constellation/commit/aa530ff3a58816a2475b2b3969739d5adacc5487", "message": ":art: Refactored to be same as master.\n\nI ruined the previous merge of master onto this branch. This corrects that.", "committedDate": "2020-11-09T05:19:42Z", "type": "commit"}, {"oid": "0b4466bdd8de7782f39162630f2f8bcf14feafdc", "url": "https://github.com/constellation-app/constellation/commit/0b4466bdd8de7782f39162630f2f8bcf14feafdc", "message": ":art: Recommit changes", "committedDate": "2020-11-09T20:28:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MzYyNA==", "url": "https://github.com/constellation-app/constellation/pull/890#discussion_r520893624", "bodyText": "Is there a reason for using the Ints library rather than using draggedNodeIds.toArray(new int[])?", "author": "antares1470", "createdAt": "2020-11-10T21:45:17Z", "path": "CoreInteractiveGraph/src/au/gov/asd/tac/constellation/graph/interaction/visual/DefaultInteractionEventHandler.java", "diffHunk": "@@ -1006,13 +1006,21 @@ private void performDrag(GraphWriteMethods wg, final Camera camera, final Point\n \n         final Vector3f delta = visualInteraction.convertTranslationToDrag(camera, position, from, to);\n \n+        final int xAttribute = VisualConcept.VertexAttribute.X.get(wg);\n+        final int yAttribute = VisualConcept.VertexAttribute.Y.get(wg);\n+        final int zAttribute = VisualConcept.VertexAttribute.Z.get(wg);\n+        final int x2Attribute = VisualConcept.VertexAttribute.X2.get(wg);\n+        final int y2Attribute = VisualConcept.VertexAttribute.Y2.get(wg);\n+        final int z2Attribute = VisualConcept.VertexAttribute.Z2.get(wg);\n+        final int cameraAttribute = VisualConcept.GraphAttribute.CAMERA.get(wg);\n+        \n         draggedNodeIds.forEach(vertexId -> {\n-            final Vector3f currentPos = VisualGraphUtilities.getMixedVertexCoordinates(wg, vertexId);\n+            final Vector3f currentPos = VisualGraphUtilities.getMixedVertexCoordinates(wg, vertexId, xAttribute, x2Attribute, yAttribute, y2Attribute, zAttribute, z2Attribute, cameraAttribute);\n             currentPos.add(delta);\n-            VisualGraphUtilities.setVertexCoordinates(wg, currentPos, vertexId);\n+            VisualGraphUtilities.setVertexCoordinates(wg, currentPos, vertexId, xAttribute, yAttribute, zAttribute);\n         });\n \n-        scheduleXYZChangeOperation(wg.getVertexCount());\n+        scheduleXYZChangeOperation(Ints.toArray(draggedNodeIds));", "originalCommit": "0b4466bdd8de7782f39162630f2f8bcf14feafdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAwMjIwNQ==", "url": "https://github.com/constellation-app/constellation/pull/890#discussion_r521002205", "bodyText": "No reason, it was just the first method I found on google", "author": "Nova-2119", "createdAt": "2020-11-11T01:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MzYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4OTU5OA==", "url": "https://github.com/constellation-app/constellation/pull/890#discussion_r521389598", "bodyText": "@Nova-2119 I wouldn't mind using @antares1470's suggestion. One less library use has to be good right?", "author": "arcturus2", "createdAt": "2020-11-11T14:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MzYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4ODM5NA==", "url": "https://github.com/constellation-app/constellation/pull/890#discussion_r521788394", "bodyText": "I cant seem to get it to work :/", "author": "Nova-2119", "createdAt": "2020-11-12T03:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MzYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNzA1MQ==", "url": "https://github.com/constellation-app/constellation/pull/890#discussion_r522527051", "bodyText": "Alright, lets leave it then. I haven't tried myself  - if we find a way we can update it afterwards.", "author": "arcturus2", "createdAt": "2020-11-13T00:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MzYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxNjkxOQ==", "url": "https://github.com/constellation-app/constellation/pull/890#discussion_r525816919", "bodyText": "I cant seem to get it to work :/\nSorry ^thought I had sent this message days ago, apparently I never clicked comment..", "author": "Nova-2119", "createdAt": "2020-11-18T05:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MzYyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5NzU4Mg==", "url": "https://github.com/constellation-app/constellation/pull/890#discussion_r520897582", "bodyText": "Neither or these will be null as the functions generating them are always returning new Vector3f objects. Therefore you can probably omit the if statement", "author": "antares1470", "createdAt": "2020-11-10T21:53:15Z", "path": "CoreVisualGraph/src/au/gov/asd/tac/constellation/graph/visual/utilities/VisualGraphUtilities.java", "diffHunk": "@@ -99,6 +124,16 @@ public static Vector3f getMixedVertexCoordinates(final GraphReadMethods graph, f\n         return coordinates;\n     }\n \n+    public static Vector3f getMixedVertexCoordinates(final GraphReadMethods graph, final int vertexId, final int xAttribute, final int x2Attribute, final int yAttribute, final int y2Attribute, final int zAttribute, final int z2Attribute, final int cameraAttribute) {\n+        final Vector3f coordinates = getVertexCoordinates(graph, vertexId, xAttribute, yAttribute, zAttribute);\n+        final Vector3f altCoordinates = getAlternateVertexCoordinates(graph, vertexId, x2Attribute, y2Attribute, z2Attribute);\n+        final float mixRatio = getCamera(graph, cameraAttribute).getMixRatio();\n+        if (coordinates != null && altCoordinates != null) {", "originalCommit": "0b4466bdd8de7782f39162630f2f8bcf14feafdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxOTQ3Nw==", "url": "https://github.com/constellation-app/constellation/pull/890#discussion_r521019477", "bodyText": "Fixed", "author": "Nova-2119", "createdAt": "2020-11-11T02:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5NzU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "34a8d5573033bd396380edf7cd96737866253dbf", "chunk": "diff --git a/CoreVisualGraph/src/au/gov/asd/tac/constellation/graph/visual/utilities/VisualGraphUtilities.java b/CoreVisualGraph/src/au/gov/asd/tac/constellation/graph/visual/utilities/VisualGraphUtilities.java\nindex d84762bdd..7a19a54b2 100644\n--- a/CoreVisualGraph/src/au/gov/asd/tac/constellation/graph/visual/utilities/VisualGraphUtilities.java\n+++ b/CoreVisualGraph/src/au/gov/asd/tac/constellation/graph/visual/utilities/VisualGraphUtilities.java\n\n@@ -118,9 +118,7 @@ public class VisualGraphUtilities {\n         final Vector3f coordinates = getVertexCoordinates(graph, vertexId);\n         final Vector3f altCoordinates = getAlternateVertexCoordinates(graph, vertexId);\n         final float mixRatio = getCamera(graph).getMixRatio();\n-        if (coordinates != null && altCoordinates != null) {\n-            coordinates.convexCombineWith(altCoordinates, mixRatio);\n-        }\n+        coordinates.convexCombineWith(altCoordinates, mixRatio);\n         return coordinates;\n     }\n \n"}}, {"oid": "34a8d5573033bd396380edf7cd96737866253dbf", "url": "https://github.com/constellation-app/constellation/commit/34a8d5573033bd396380edf7cd96737866253dbf", "message": ":art: Remove unneccesary null check.\nRemoved code smell caused by unneccesary null check.", "committedDate": "2020-11-11T02:02:12Z", "type": "commit"}]}