{"pr_number": 397, "pr_title": "Created generric JSON config file read/writer.", "pr_createdAt": "2020-04-03T08:03:29Z", "pr_url": "https://github.com/constellation-app/constellation/pull/397", "timeline": [{"oid": "b7747aca784af698377a1df3fa69779571b8f149", "url": "https://github.com/constellation-app/constellation/commit/b7747aca784af698377a1df3fa69779571b8f149", "message": "Created generric JSON config file read/writer.", "committedDate": "2020-04-03T07:17:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDU5Mg==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r402934592", "bodyText": "Since this doesn't appear to rely on graphs or anything else high-level, could you please move it into Core Utilities.", "author": "cygnus-x-1", "createdAt": "2020-04-03T11:16:28Z", "path": "CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIODialog.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.functionality.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.gui.DraggableCell;\n+//import au.gov.asd.tac.constellation.visual.DraggableCell;\n+import java.util.Optional;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextInputDialog;\n+\n+/**\n+ * Displays a generic dialog window that can allow the user to select a Json\n+ * preference from a list\n+ *\n+ * @author formalhaut69\n+ */\n+public class JsonIODialog {", "originalCommit": "b7747aca784af698377a1df3fa69779571b8f149", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTExMw==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403439113", "bodyText": "Movel this - and JsonIO (below) into CoreUtilties,", "author": "serpens24", "createdAt": "2020-04-04T07:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDU5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4969e5fd9a405d479571ccf0d440e5edcb5c52e6", "chunk": "diff --git a/CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIODialog.java b/CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIODialog.java\nindex 0250f2216..99dfa0975 100644\n--- a/CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIODialog.java\n+++ b/CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIODialog.java\n\n@@ -17,7 +17,6 @@ package au.gov.asd.tac.constellation.functionality.genericjsonio;\n \n import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n import au.gov.asd.tac.constellation.utilities.gui.DraggableCell;\n-//import au.gov.asd.tac.constellation.visual.DraggableCell;\n import java.util.Optional;\n import javafx.collections.FXCollections;\n import javafx.collections.ObservableList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDgyOQ==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r402934829", "bodyText": "And this one...", "author": "cygnus-x-1", "createdAt": "2020-04-03T11:16:59Z", "path": "CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.functionality.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24\n+ */\n+public class JsonIO {", "originalCommit": "b7747aca784af698377a1df3fa69779571b8f149", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTE1Nw==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403439157", "bodyText": "Moved to CoreUtilities.", "author": "serpens24", "createdAt": "2020-04-04T07:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4969e5fd9a405d479571ccf0d440e5edcb5c52e6", "chunk": "diff --git a/CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIO.java b/CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIO.java\nindex 6aab76380..d32678fc0 100644\n--- a/CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIO.java\n+++ b/CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIO.java\n\n@@ -43,10 +43,18 @@ import org.openide.util.NbPreferences;\n  */\n public class JsonIO {\n \n+    private static final String FILE_EXT = \".json\";\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter\n             .ofPattern(\"yyyy-MM-dd HH:mm:ss z\").withZone(ZoneId.systemDefault());\n-    private static String CURRENT_DIR = \"\";  // Stores directory used by load dialog for reuse in delete call\n+    private static String currentDir = \"\";  // Stores directory used by load dialog for reuse in delete call\n \n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private JsonIO() {\n+        throw new IllegalStateException(\"Static class\");\n+    }\n+ \n     /**\n      * Save the supplied JSON data in a file, within an allocated subdirectory\n      * of the users configuration directory. The filename can optionally be\n"}}, {"oid": "4969e5fd9a405d479571ccf0d440e5edcb5c52e6", "url": "https://github.com/constellation-app/constellation/commit/4969e5fd9a405d479571ccf0d440e5edcb5c52e6", "message": "SonarQube updates", "committedDate": "2020-04-04T05:28:12Z", "type": "commit"}, {"oid": "6f75a6868c5c5ff6b3ad4b32ac929451a7f6b8a8", "url": "https://github.com/constellation-app/constellation/commit/6f75a6868c5c5ff6b3ad4b32ac929451a7f6b8a8", "message": "Moved genericjsonio from CoreFunctionality to CoreUtilities", "committedDate": "2020-04-04T06:12:05Z", "type": "commit"}, {"oid": "aa95a97edccd33eb55015176788c832d0e4c9ccc", "url": "https://github.com/constellation-app/constellation/commit/aa95a97edccd33eb55015176788c832d0e4c9ccc", "message": "Reenabled JsonIO test and removed Tableview dependency on CoreFunctionality.", "committedDate": "2020-04-04T07:40:21Z", "type": "commit"}, {"oid": "bc98f86ab546580ec473157874492fd148866554", "url": "https://github.com/constellation-app/constellation/commit/bc98f86ab546580ec473157874492fd148866554", "message": "Delete pref file fix + further Sonarqube.", "committedDate": "2020-04-04T08:57:27Z", "type": "commit"}, {"oid": "595be8b9493848216dfad50e7040f298610a1aa9", "url": "https://github.com/constellation-app/constellation/commit/595be8b9493848216dfad50e7040f298610a1aa9", "message": "Sonarqube", "committedDate": "2020-04-04T09:39:58Z", "type": "commit"}, {"oid": "e904c960638acac5a0c1bf6cdea339d1e742e7a8", "url": "https://github.com/constellation-app/constellation/commit/e904c960638acac5a0c1bf6cdea339d1e742e7a8", "message": "Moved filename encode/decode functions into their own utilities package to remove code duplication. Other minor sonarqube issues.", "committedDate": "2020-04-04T10:36:12Z", "type": "commit"}, {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "url": "https://github.com/constellation-app/constellation/commit/f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "message": "Found extra duplicate code for filename encode/decode. Replaced with calls to new coreUtilities version.", "committedDate": "2020-04-04T11:02:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNjI5OQ==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403836299", "bodyText": "More a preference thing but possibly putting the 2 authorships on seperate lines?", "author": "antares1470", "createdAt": "2020-04-06T05:24:31Z", "path": "CoreTableView/src/au/gov/asd/tac/constellation/views/tableview2/io/TableViewPreferencesIOUtilities.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.tableview2.io;\n+\n+import au.gov.asd.tac.constellation.utilities.genericjsonio.JsonIO;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.prefs.Preferences;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Save and Load TableView preferences.\n+ *\n+ * @author formalhaut69/serpens24", "originalCommit": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MzI4Nw==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403843287", "bodyText": "done", "author": "serpens24", "createdAt": "2020-04-06T05:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNjI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "chunk": "diff --git a/CoreTableView/src/au/gov/asd/tac/constellation/views/tableview2/io/TableViewPreferencesIOUtilities.java b/CoreTableView/src/au/gov/asd/tac/constellation/views/tableview2/io/TableViewPreferencesIOUtilities.java\nindex c2d05b663..eb39b8d6b 100644\n--- a/CoreTableView/src/au/gov/asd/tac/constellation/views/tableview2/io/TableViewPreferencesIOUtilities.java\n+++ b/CoreTableView/src/au/gov/asd/tac/constellation/views/tableview2/io/TableViewPreferencesIOUtilities.java\n\n@@ -36,7 +36,8 @@ import org.openide.util.NbPreferences;\n /**\n  * Save and Load TableView preferences.\n  *\n- * @author formalhaut69/serpens24\n+ * @author formalhaut69\n+ * @author serpens24\n  */\n public class TableViewPreferencesIOUtilities {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNjk0Mg==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403836942", "bodyText": "I might need some clarification here. You mention in the exception that it is a static class but the class itself doesn't appear to be static", "author": "antares1470", "createdAt": "2020-04-06T05:27:16Z", "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/file/FilenameEncoder.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package au.gov.asd.tac.constellation.utilities.file;\n+\n+/**\n+ * Manage the encode/decode of strings into filenames. This essentially ensures\n+ * the characters in the filename are within a valid set.\n+ * @author serpens24\n+ */\n+public class FilenameEncoder {\n+\n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private FilenameEncoder() {\n+        throw new IllegalStateException(\"Static class\");", "originalCommit": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MzAzMQ==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403843031", "bodyText": "good point. This change was made based on a sonarqube code smell, basically to prevent a default public constructor getting called. I'll fix\nHave modified comment to highlight an invalid call to private constructor - which is all sonarqube was wanting. IE - remove ability to call default public constructor.", "author": "serpens24", "createdAt": "2020-04-06T05:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNjk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "chunk": "diff --git a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/file/FilenameEncoder.java b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/file/FilenameEncoder.java\nindex 29ace0b33..58c3caaca 100644\n--- a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/file/FilenameEncoder.java\n+++ b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/file/FilenameEncoder.java\n\n@@ -16,7 +16,7 @@ public class FilenameEncoder {\n      * Private constructor to hide implicit public one.\n      */\n     private FilenameEncoder() {\n-        throw new IllegalStateException(\"Static class\");\n+        throw new IllegalStateException(\"Invalid call to private default constructor\");\n     }\n     \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzI2Mg==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403837262", "bodyText": "same comment as before. Possibly moving authorships to separate lines", "author": "antares1470", "createdAt": "2020-04-06T05:28:27Z", "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.utilities.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.file.FilenameEncoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24", "originalCommit": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MzEyMA==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403843120", "bodyText": "as above", "author": "serpens24", "createdAt": "2020-04-06T05:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "chunk": "diff --git a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\nindex f03602f4d..c124a18e7 100644\n--- a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\n+++ b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\n\n@@ -28,6 +28,8 @@ import java.time.Instant;\n import java.time.ZoneId;\n import java.time.format.DateTimeFormatter;\n import java.util.Optional;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n import java.util.prefs.Preferences;\n import javafx.scene.control.Alert;\n import javafx.scene.control.ButtonType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzM3Mg==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403837372", "bodyText": "same comment as before on static class", "author": "antares1470", "createdAt": "2020-04-06T05:28:48Z", "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.utilities.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.file.FilenameEncoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24\n+ */\n+public class JsonIO {\n+\n+    private static final String FILE_EXT = \".json\";\n+    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter\n+            .ofPattern(\"yyyy-MM-dd HH:mm:ss z\").withZone(ZoneId.systemDefault());\n+    private static String currentDir = \"\";  // Stores directory used by load dialog for reuse in delete call\n+    private static String currentPrefix = \"\";  // Stores prefix used by load dialog for reuse in delete call\n+\n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private JsonIO() {\n+        throw new IllegalStateException(\"Static class\");", "originalCommit": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MDE3MQ==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403890171", "bodyText": "as above.", "author": "serpens24", "createdAt": "2020-04-06T07:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "chunk": "diff --git a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\nindex f03602f4d..c124a18e7 100644\n--- a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\n+++ b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\n\n@@ -28,6 +28,8 @@ import java.time.Instant;\n import java.time.ZoneId;\n import java.time.format.DateTimeFormatter;\n import java.util.Optional;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n import java.util.prefs.Preferences;\n import javafx.scene.control.Alert;\n import javafx.scene.control.ButtonType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzg2NQ==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403837865", "bodyText": "is there a way to right the void function without the return? More that sonar is probably going to flag this", "author": "antares1470", "createdAt": "2020-04-06T05:30:33Z", "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.utilities.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.file.FilenameEncoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24\n+ */\n+public class JsonIO {\n+\n+    private static final String FILE_EXT = \".json\";\n+    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter\n+            .ofPattern(\"yyyy-MM-dd HH:mm:ss z\").withZone(ZoneId.systemDefault());\n+    private static String currentDir = \"\";  // Stores directory used by load dialog for reuse in delete call\n+    private static String currentPrefix = \"\";  // Stores prefix used by load dialog for reuse in delete call\n+\n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private JsonIO() {\n+        throw new IllegalStateException(\"Static class\");\n+    }\n+ \n+    /**\n+     * Save the supplied JSON data in a file, within an allocated subdirectory\n+     * of the users configuration directory. The filename can optionally be\n+     * prefixed with a string, which can be used to categorize it. Refer to\n+     * further comments inline.\n+     *\n+     * @param saveDir Directory name within users directory to save the\n+     * configuration file to\n+     * @param mapper ObjectMapper tied to the JSON object being written to file\n+     * @param rootNode The root node of the JSON object being written\n+     * @param filePrefix Ignored if blank, if not, a string to prefix the\n+     * filename with.\n+     *\n+     */\n+    public static void saveJsonPreferences(String saveDir, ObjectMapper mapper, ArrayNode rootNode, String filePrefix) {\n+        // Normal operation sees an empty filePrefix string supplied. In this case, the name of the file will contain\n+        // only the filename entered by the user. If however a non-empty filePrefix is supplied, then the filename\n+        // privided by the user will be prefixed with this.\n+        // This is MOST useful when a dedicated directory exists for similar 'type' config files, like the example\n+        // directory structure below:\n+        // <user-dir>\n+        //     +-- tableconfigs\n+        //              +--- transaction_config1.json\n+        //              +--- transaction_config2.json\n+        //              +--- transaction_config3.json\n+        //              +--- vertex_configa.json\n+        //              +--- vertex_configb.json\n+        //              +--- vertex_configc.json\n+        //\n+        // The above structure could have been contructed with multiple calls to saveJsonPreferences all using\n+        // tableconfigs as the value for saveDir, three using 'transaction_' for filePrefix and the other three\n+        // using 'vertex_'.\n+        // This functionality is integrated with loadJsonPreferences such that if a filePrefix is supplied in the\n+        // loadJsonPreferences call then only files that contain the prefix are offered to the user to load. Hence,\n+        // it allows a form of config file filtering.\n+        final Preferences prefs = NbPreferences.forModule(ApplicationPreferenceKeys.class);\n+        final File prefDir = new File(ApplicationPreferenceKeys.getUserDir(prefs), saveDir);\n+\n+        // Create containing directory if it doesn't exist, wnsure it was successful.\n+        if (!prefDir.exists()) {\n+            prefDir.mkdir();\n+        }\n+        if (!prefDir.isDirectory()) {\n+            final String msg = String.format(\"Can't create data access directory '%s'.\", prefDir);\n+            final NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);\n+            DialogDisplayer.getDefault().notify(nd);\n+        }\n+\n+        // Configure the mapper\n+        mapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n+        mapper.configure(SerializationFeature.CLOSE_CLOSEABLE, true);\n+\n+        // Obtain a filename from the user. If no filename is supplied, and the user didn't hit cancel, then\n+        // generate a filename for them based on username and timestamp. If cancel was hit, no more processing\n+        // is required.\n+        Tuple<Boolean, String> preferenceNameDetails = JsonIODialog.getName();\n+        if (!preferenceNameDetails.getFirst()) {\n+            // Cancel was pressed, lets exit straight away - nothing to do here\n+            return;", "originalCommit": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MjU3NA==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403842574", "bodyText": "I hadn't seen sonar complain about this, but can inverse the test and wrap all the remaining function code in the if condition if you feel its worth addressing.", "author": "serpens24", "createdAt": "2020-04-06T05:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg3Nzc2MQ==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403877761", "bodyText": "@antares1470 and @serpens24 based on a test today #401 I didn't see SonarQube complain about this.", "author": "arcturus2", "createdAt": "2020-04-06T07:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MDc2OA==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403890768", "bodyText": "In that case I'll leve as is... I think it reads quite simply... sometimes easier than nested if conditions.", "author": "serpens24", "createdAt": "2020-04-06T07:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "chunk": "diff --git a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\nindex f03602f4d..c124a18e7 100644\n--- a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\n+++ b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\n\n@@ -28,6 +28,8 @@ import java.time.Instant;\n import java.time.ZoneId;\n import java.time.format.DateTimeFormatter;\n import java.util.Optional;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n import java.util.prefs.Preferences;\n import javafx.scene.control.Alert;\n import javafx.scene.control.ButtonType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzODA1Mw==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403838053", "bodyText": "is it possible is this can be made to use a logger instead?", "author": "antares1470", "createdAt": "2020-04-06T05:31:23Z", "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.utilities.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.file.FilenameEncoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24\n+ */\n+public class JsonIO {\n+\n+    private static final String FILE_EXT = \".json\";\n+    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter\n+            .ofPattern(\"yyyy-MM-dd HH:mm:ss z\").withZone(ZoneId.systemDefault());\n+    private static String currentDir = \"\";  // Stores directory used by load dialog for reuse in delete call\n+    private static String currentPrefix = \"\";  // Stores prefix used by load dialog for reuse in delete call\n+\n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private JsonIO() {\n+        throw new IllegalStateException(\"Static class\");\n+    }\n+ \n+    /**\n+     * Save the supplied JSON data in a file, within an allocated subdirectory\n+     * of the users configuration directory. The filename can optionally be\n+     * prefixed with a string, which can be used to categorize it. Refer to\n+     * further comments inline.\n+     *\n+     * @param saveDir Directory name within users directory to save the\n+     * configuration file to\n+     * @param mapper ObjectMapper tied to the JSON object being written to file\n+     * @param rootNode The root node of the JSON object being written\n+     * @param filePrefix Ignored if blank, if not, a string to prefix the\n+     * filename with.\n+     *\n+     */\n+    public static void saveJsonPreferences(String saveDir, ObjectMapper mapper, ArrayNode rootNode, String filePrefix) {\n+        // Normal operation sees an empty filePrefix string supplied. In this case, the name of the file will contain\n+        // only the filename entered by the user. If however a non-empty filePrefix is supplied, then the filename\n+        // privided by the user will be prefixed with this.\n+        // This is MOST useful when a dedicated directory exists for similar 'type' config files, like the example\n+        // directory structure below:\n+        // <user-dir>\n+        //     +-- tableconfigs\n+        //              +--- transaction_config1.json\n+        //              +--- transaction_config2.json\n+        //              +--- transaction_config3.json\n+        //              +--- vertex_configa.json\n+        //              +--- vertex_configb.json\n+        //              +--- vertex_configc.json\n+        //\n+        // The above structure could have been contructed with multiple calls to saveJsonPreferences all using\n+        // tableconfigs as the value for saveDir, three using 'transaction_' for filePrefix and the other three\n+        // using 'vertex_'.\n+        // This functionality is integrated with loadJsonPreferences such that if a filePrefix is supplied in the\n+        // loadJsonPreferences call then only files that contain the prefix are offered to the user to load. Hence,\n+        // it allows a form of config file filtering.\n+        final Preferences prefs = NbPreferences.forModule(ApplicationPreferenceKeys.class);\n+        final File prefDir = new File(ApplicationPreferenceKeys.getUserDir(prefs), saveDir);\n+\n+        // Create containing directory if it doesn't exist, wnsure it was successful.\n+        if (!prefDir.exists()) {\n+            prefDir.mkdir();\n+        }\n+        if (!prefDir.isDirectory()) {\n+            final String msg = String.format(\"Can't create data access directory '%s'.\", prefDir);\n+            final NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);\n+            DialogDisplayer.getDefault().notify(nd);\n+        }\n+\n+        // Configure the mapper\n+        mapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n+        mapper.configure(SerializationFeature.CLOSE_CLOSEABLE, true);\n+\n+        // Obtain a filename from the user. If no filename is supplied, and the user didn't hit cancel, then\n+        // generate a filename for them based on username and timestamp. If cancel was hit, no more processing\n+        // is required.\n+        Tuple<Boolean, String> preferenceNameDetails = JsonIODialog.getName();\n+        if (!preferenceNameDetails.getFirst()) {\n+            // Cancel was pressed, lets exit straight away - nothing to do here\n+            return;\n+        }\n+        String fileName = preferenceNameDetails.getSecond();\n+        if (fileName.equals(\"\")) {\n+            // User didn't enter anyhting but hit OK ... this is a trigger to auto generate a filename\n+            fileName = String.format(\"%s at %s\", System.getProperty(\"user.name\"), TIMESTAMP_FORMAT.format(Instant.now()));\n+        }\n+\n+        // At this point ensure the filename isn't all whitespace, if it is, the user may have entered multiple spaces\n+        // or similar which is a bad filename.\n+        if (fileName.trim().length() > 0) {\n+            // Append filePrefix - it may well be empty, in which case the final fileName is unchanged.\n+            fileName = filePrefix.concat(fileName);\n+\n+            // Configure JSON mapper settings\n+            mapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n+            mapper.configure(SerializationFeature.CLOSE_CLOSEABLE, true);\n+\n+            // Create the file and write its contents. IF the file already exists, confirm from the user that they\n+            // wish to continue (and overwrite the existing file).\n+            final File f = new File(prefDir, FilenameEncoder.encode(fileName + FILE_EXT));\n+            boolean go = true;\n+            if (f.exists()) {\n+                final String msg = String.format(\"'%s' already exists. Do you want to overwrite it?\", fileName);\n+                final Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n+                alert.setHeaderText(\"Preference file exists\");\n+                alert.setContentText(msg);\n+                final Optional<ButtonType> option = alert.showAndWait();\n+                go = option.isPresent() && option.get() == ButtonType.OK;\n+            }\n+\n+            if (go) {\n+                try {\n+                    mapper.writeValue(f, rootNode);\n+                    StatusDisplayer.getDefault().setStatusText(String.format(\"Preference saved to %s.\", f.getPath()));\n+                } catch (IOException ex) {\n+                    final String msg = String.format(\"Can't save table view preference: %s\", ex.getMessage());\n+                    final NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);\n+                    DialogDisplayer.getDefault().notify(nd);\n+                }\n+            }\n+        } else {\n+            final NotifyDescriptor nd = new NotifyDescriptor.Message(\"There must be a valid preference name.\", NotifyDescriptor.ERROR_MESSAGE);\n+            DialogDisplayer.getDefault().notify(nd);\n+        }\n+    }\n+\n+    /**\n+     * Wrapper around base saveJsonPreferences method which sets an empty prefix\n+     * string meaning no prefix is supplied.\n+     *\n+     * @param saveDir Directory name within users directory to save the\n+     * configuration file to\n+     * @param mapper ObjectMapper tied to the JSON object being written to file\n+     * @param rootNode The root node of the JSON object being written\n+     */\n+    public static void saveJsonPreferences(String saveDir, ObjectMapper mapper, ArrayNode rootNode) {\n+        saveJsonPreferences(saveDir, mapper, rootNode, \"\");\n+    }\n+\n+    /**\n+     * Allow user to select a preference file to load from the supplied\n+     * directory. If filePrefix was provided as a non empty string, then only\n+     * files prefixed with this value are available to the user to load.\n+     *\n+     * @param loadDir the directory location of the JSON files as a string\n+     * @param filePrefix if not blank a prefix string is pre-pended to the\n+     * beginning of the filename this can be used to create categorized JSON\n+     * files with forced name groupings\n+     *\n+     * @return The JsonNode of the selected preference or null if nothing is\n+     * selected\n+     */\n+    public static JsonNode loadJsonPreferences(final String loadDir, String filePrefix) {\n+        final Preferences prefs = NbPreferences.forModule(ApplicationPreferenceKeys.class);\n+        final String userDir = ApplicationPreferenceKeys.getUserDir(prefs);\n+        final File prefDir = new File(userDir, loadDir);\n+        final String[] names;\n+        final ObjectMapper mapper = new ObjectMapper();\n+\n+        // Store the load directory/prefix so that they can be used by deleteJsonPreference\n+        currentDir = loadDir;\n+        currentPrefix = filePrefix;\n+\n+        // Check the supplied directory for any files, if filePrefix was supplied, only files\n+        // containing the prefix are returned. Return a list of filenames for the user to select from.\n+        if (prefDir.isDirectory()) {\n+            names = prefDir.list((File dir, String name) -> {\n+                if (filePrefix.isEmpty()) {\n+                    return name.toLowerCase().endsWith(FILE_EXT);\n+                }\n+                return (name.toLowerCase().startsWith(filePrefix) && name.toLowerCase().endsWith(FILE_EXT));\n+            });\n+        } else {\n+            // Nothing to select from - return an empty list\n+            names = new String[0];\n+        }\n+\n+        // chop off \".json\" from the filenames\n+        for (int i = 0; i < names.length; i++) {\n+            final String nextName = FilenameEncoder.decode(names[i].substring(0, names[i].length() - 5));\n+            if (nextName != null && !nextName.isEmpty()) {\n+                names[i] = nextName;\n+                // Hide any file prefix which the user didn't see when saving\n+                if (!filePrefix.isEmpty()) {\n+                    names[i] = names[i].substring(filePrefix.length());\n+                }\n+            } \n+        }\n+\n+        // Allow user to select a filename from the crafted list using the dialog.\n+        String fileName = JsonIODialog.getSelection(names);\n+        if (fileName != null) {\n+            try {\n+                // Reconsitute filename to include any file prefix\n+                if (!filePrefix.isEmpty()) {\n+                    fileName = filePrefix.concat(fileName);\n+                }\n+                return mapper.readTree(new File(prefDir, FilenameEncoder.encode(fileName) + FILE_EXT));\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);", "originalCommit": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNzQzNw==", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403907437", "bodyText": "done.", "author": "serpens24", "createdAt": "2020-04-06T08:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzODA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "chunk": "diff --git a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\nindex f03602f4d..c124a18e7 100644\n--- a/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\n+++ b/CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java\n\n@@ -28,6 +28,8 @@ import java.time.Instant;\n import java.time.ZoneId;\n import java.time.format.DateTimeFormatter;\n import java.util.Optional;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n import java.util.prefs.Preferences;\n import javafx.scene.control.Alert;\n import javafx.scene.control.ButtonType;\n"}}, {"oid": "fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "url": "https://github.com/constellation-app/constellation/commit/fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "message": "Addressed review comments from antares1470", "committedDate": "2020-04-06T08:17:39Z", "type": "commit"}, {"oid": "42cb85f8a16fed5b54d18e5e9095e4b9cae28a64", "url": "https://github.com/constellation-app/constellation/commit/42cb85f8a16fed5b54d18e5e9095e4b9cae28a64", "message": "remove unused import.", "committedDate": "2020-04-06T09:21:46Z", "type": "commit"}]}