{"pr_number": 185, "pr_title": "The 'split nodes' plugin should copy all attribute values #164", "pr_createdAt": "2020-01-06T01:43:25Z", "pr_url": "https://github.com/constellation-app/constellation/pull/185", "timeline": [{"oid": "687349d32d2c84991febb5b4203007d2aeb9c43e", "url": "https://github.com/constellation-app/constellation/commit/687349d32d2c84991febb5b4203007d2aeb9c43e", "message": "Add fix for issue #164", "committedDate": "2020-01-06T00:54:13Z", "type": "commit"}, {"oid": "630d9b769187f7f84d48cb8455a34c09d7050a8b", "url": "https://github.com/constellation-app/constellation/commit/630d9b769187f7f84d48cb8455a34c09d7050a8b", "message": "Merge branch 'master' into The-'Split-Nodes'-plugin-should-copy-all-attribute-values-#164", "committedDate": "2020-01-06T00:54:23Z", "type": "commit"}, {"oid": "e6cb1f0d861abdff516aeb4598ea86a488e56832", "url": "https://github.com/constellation-app/constellation/commit/e6cb1f0d861abdff516aeb4598ea86a488e56832", "message": "Update SplitNodesPlugin.java", "committedDate": "2020-01-20T06:21:06Z", "type": "commit"}, {"oid": "90c1d07e3f3b799ebae773f386ce3770d254365a", "url": "https://github.com/constellation-app/constellation/commit/90c1d07e3f3b799ebae773f386ce3770d254365a", "message": "Merge branch 'master' into The-'Split-Nodes'-plugin-should-copy-all-attribute-values-#164", "committedDate": "2020-01-20T06:21:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NjgwNA==", "url": "https://github.com/constellation-app/constellation/pull/185#discussion_r368846804", "bodyText": "@formalhaut69 thanks for this.\n@cygnus-x-1 I wanted to ask if you have any ideas about how we could format this a bit better so that we don't have to be so verbose and replace the type <string> to get this to work.\nWe can replace query.keys() with ((GraphRecordStore) query).keysWithType() which will work for line 160 but then the if block (162-164) comparing x, y and z will not work because the key is now x<float>.\nTo me something looks wrong with the design of the GraphRecordStore. Keen for feedback from anyone.", "author": "arcturus2", "createdAt": "2020-01-21T07:36:30Z", "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java", "diffHunk": "@@ -152,6 +152,25 @@ private void editResultStore(final RecordStore result, final String left, final\n             result.set(GraphRecordStoreUtilities.SOURCE + AnalyticConcept.VertexAttribute.TYPE, leftVertexTypesMatches.get(0));\n         }\n         result.set(GraphRecordStoreUtilities.DESTINATION + VisualConcept.VertexAttribute.IDENTIFIER, right);\n+        \n+        //Loops through all of the Node attributes and copies them to the new node\n+        query.reset();\n+        while(query.next()){\n+            for (final String key : query.keys()){\n+                if(SOURCE_ID.replace(\"<string>\", \"\").equals(key) || SOURCE_IDENTIFIER.replace(\"<string>\", \"\").equals(key)) {", "originalCommit": "90c1d07e3f3b799ebae773f386ce3770d254365a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MTgyMA==", "url": "https://github.com/constellation-app/constellation/pull/185#discussion_r370491820", "bodyText": "You shouldn't need to worry about the field type, as the default behaviour of GraphRecordStore.keys is to explicitly not return field types.", "author": "cygnus-x-1", "createdAt": "2020-01-24T06:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NjgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMDY3Ng==", "url": "https://github.com/constellation-app/constellation/pull/185#discussion_r371530676", "bodyText": "constellation/CoreGraph/src/au/gov/asd/tac/constellation/graph/processing/GraphRecordStoreUtilities.java\n    \n    \n         Line 59\n      in\n      28443a9\n    \n    \n    \n    \n\n        \n          \n           public static final String ID = \"[id]<string>\"; \n        \n    \n  \n\n\n@cygnus-x-1 @arcturus2 I've made a mistake here sorry, the SOURCE_IDENTIFIER never contains <string> so when comparing it to the key, we don't need to replace <string>. The SOURCE_ID does still contain it's type so we still need to replace <string> for it. You can see in GraphRecordStoreUtilities it's declared with <string> in its value . The X,Y and Z values are declared without their type.", "author": "formalhaut69", "createdAt": "2020-01-27T23:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NjgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1MTg4Mw==", "url": "https://github.com/constellation-app/constellation/pull/185#discussion_r371651883", "bodyText": "While GraphRecordStoreUtilites.ID does explicitly declare a type (because it's designed to work with GraphRecordStore which requires typed fields), this type will only be recorded in the typedRecords object. GraphRecordStore.keys will return the keys of its records object (which has no types as it comes from TabularRecordStore) whereas GraphRecordStore.keysWithType will return keys from typedRecords. Since you are using GraphRecordStore.keys in this case, you shouldn't have to worry about types.", "author": "cygnus-x-1", "createdAt": "2020-01-28T08:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NjgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxNjQ3NQ==", "url": "https://github.com/constellation-app/constellation/pull/185#discussion_r372216475", "bodyText": "Thanks @formalhaut69 for the fix.\nThanks @cygnus-x-1 for the explanation.\nIt looks like we are using features from the TabularRecordStore and GraphRecordStore causing issues. Though I'm not a fan of magic strings (i.e \".[id]\"), I don't know how best to solve this one without going deep into the framework...and I don't feel its worth it right now given what @formalhaut69 has proposed works and I'm worrying about semantics.", "author": "arcturus2", "createdAt": "2020-01-29T07:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NjgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MDY1OQ==", "url": "https://github.com/constellation-app/constellation/pull/185#discussion_r372360659", "bodyText": "A simple fix might be to create TabularRecordStoreUtilities.ID as an untyped analogue to GraphRecordStoreUtilities.ID and to use that instead. But @arcturus2 is right, it's not really a big deal.", "author": "cygnus-x-1", "createdAt": "2020-01-29T12:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NjgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "dd90921941b8539726cf01669f0e2164a71e51ba", "chunk": "diff --git a/CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java b/CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java\nindex 4b21ca2d6..d61fc7087 100644\n--- a/CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java\n+++ b/CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java\n\n@@ -152,25 +152,6 @@ public class SplitNodesPlugin extends RecordStoreQueryPlugin implements DataAcce\n             result.set(GraphRecordStoreUtilities.SOURCE + AnalyticConcept.VertexAttribute.TYPE, leftVertexTypesMatches.get(0));\n         }\n         result.set(GraphRecordStoreUtilities.DESTINATION + VisualConcept.VertexAttribute.IDENTIFIER, right);\n-        \n-        //Loops through all of the Node attributes and copies them to the new node\n-        query.reset();\n-        while(query.next()){\n-            for (final String key : query.keys()){\n-                if(SOURCE_ID.replace(\"<string>\", \"\").equals(key) || SOURCE_IDENTIFIER.replace(\"<string>\", \"\").equals(key)) {\n-                     //Skips the id and Identifier to make the new node unique\n-                } else if ((GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.X).equals(key) \n-                        || (GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.Y).equals(key) \n-                        || (GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.Z).equals(key)){ \n-                    //The coordinates are also skipped so that the second node is not created in the exact same location\n-                    //as the first node\n-                } else {\n-                     result.set(GraphRecordStoreUtilities.DESTINATION + key.replace(GraphRecordStoreUtilities.SOURCE, \"\"), \n-                     query.get(key));\n-                }\n-            }\n-        }\n-        \n         if (ordered_types.size() > 1 && rightVertexTypesMatches.size() > 0) {\n             result.set(GraphRecordStoreUtilities.DESTINATION + AnalyticConcept.VertexAttribute.TYPE, rightVertexTypesMatches.get(0));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NzcyMQ==", "url": "https://github.com/constellation-app/constellation/pull/185#discussion_r368847721", "bodyText": "A very minor comment but I would put this in 1 line because it is a little confusing seeing the query.get on its own.", "author": "arcturus2", "createdAt": "2020-01-21T07:39:40Z", "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java", "diffHunk": "@@ -152,6 +152,25 @@ private void editResultStore(final RecordStore result, final String left, final\n             result.set(GraphRecordStoreUtilities.SOURCE + AnalyticConcept.VertexAttribute.TYPE, leftVertexTypesMatches.get(0));\n         }\n         result.set(GraphRecordStoreUtilities.DESTINATION + VisualConcept.VertexAttribute.IDENTIFIER, right);\n+        \n+        //Loops through all of the Node attributes and copies them to the new node\n+        query.reset();\n+        while(query.next()){\n+            for (final String key : query.keys()){\n+                if(SOURCE_ID.replace(\"<string>\", \"\").equals(key) || SOURCE_IDENTIFIER.replace(\"<string>\", \"\").equals(key)) {\n+                     //Skips the id and Identifier to make the new node unique\n+                } else if ((GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.X).equals(key) \n+                        || (GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.Y).equals(key) \n+                        || (GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.Z).equals(key)){ \n+                    //The coordinates are also skipped so that the second node is not created in the exact same location\n+                    //as the first node\n+                } else {\n+                     result.set(GraphRecordStoreUtilities.DESTINATION + key.replace(GraphRecordStoreUtilities.SOURCE, \"\"), ", "originalCommit": "90c1d07e3f3b799ebae773f386ce3770d254365a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd90921941b8539726cf01669f0e2164a71e51ba", "chunk": "diff --git a/CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java b/CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java\nindex 4b21ca2d6..d61fc7087 100644\n--- a/CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java\n+++ b/CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/plugins/clean/SplitNodesPlugin.java\n\n@@ -152,25 +152,6 @@ public class SplitNodesPlugin extends RecordStoreQueryPlugin implements DataAcce\n             result.set(GraphRecordStoreUtilities.SOURCE + AnalyticConcept.VertexAttribute.TYPE, leftVertexTypesMatches.get(0));\n         }\n         result.set(GraphRecordStoreUtilities.DESTINATION + VisualConcept.VertexAttribute.IDENTIFIER, right);\n-        \n-        //Loops through all of the Node attributes and copies them to the new node\n-        query.reset();\n-        while(query.next()){\n-            for (final String key : query.keys()){\n-                if(SOURCE_ID.replace(\"<string>\", \"\").equals(key) || SOURCE_IDENTIFIER.replace(\"<string>\", \"\").equals(key)) {\n-                     //Skips the id and Identifier to make the new node unique\n-                } else if ((GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.X).equals(key) \n-                        || (GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.Y).equals(key) \n-                        || (GraphRecordStoreUtilities.SOURCE + VisualConcept.VertexAttribute.Z).equals(key)){ \n-                    //The coordinates are also skipped so that the second node is not created in the exact same location\n-                    //as the first node\n-                } else {\n-                     result.set(GraphRecordStoreUtilities.DESTINATION + key.replace(GraphRecordStoreUtilities.SOURCE, \"\"), \n-                     query.get(key));\n-                }\n-            }\n-        }\n-        \n         if (ordered_types.size() > 1 && rightVertexTypesMatches.size() > 0) {\n             result.set(GraphRecordStoreUtilities.DESTINATION + AnalyticConcept.VertexAttribute.TYPE, rightVertexTypesMatches.get(0));\n         }\n"}}, {"oid": "e17fb84ab5ccd2cab26bf8aac5b5cd085620ab4c", "url": "https://github.com/constellation-app/constellation/commit/e17fb84ab5ccd2cab26bf8aac5b5cd085620ab4c", "message": "Merge branch 'master' into The-'Split-Nodes'-plugin-should-copy-all-attribute-values-#164", "committedDate": "2020-01-29T00:22:57Z", "type": "commit"}, {"oid": "dd90921941b8539726cf01669f0e2164a71e51ba", "url": "https://github.com/constellation-app/constellation/commit/dd90921941b8539726cf01669f0e2164a71e51ba", "message": "Merge pull request #7 from constellation-app/master\n\nUpdate Master", "committedDate": "2020-01-29T00:27:30Z", "type": "commit"}, {"oid": "fcf2d7be003c5e6bedf31d96534b24ae5c7834e7", "url": "https://github.com/constellation-app/constellation/commit/fcf2d7be003c5e6bedf31d96534b24ae5c7834e7", "message": "Merge branch 'master' into The-'Split-Nodes'-plugin-should-copy-all-attribute-values-#164", "committedDate": "2020-01-29T00:29:02Z", "type": "commit"}, {"oid": "f311947644f0bdc3fd3d82740c4c041aedb0d5fc", "url": "https://github.com/constellation-app/constellation/commit/f311947644f0bdc3fd3d82740c4c041aedb0d5fc", "message": "Update to the issue #164 solution\n\nChanged how to check if the key is the ID and moved the query.get(key) onto the same line as the result.set().", "committedDate": "2020-01-29T00:56:52Z", "type": "commit"}]}