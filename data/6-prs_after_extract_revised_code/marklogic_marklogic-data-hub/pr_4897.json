{"pr_number": 4897, "pr_title": "DHFPROD-6201: Visualize history of a record in the document metadata view", "pr_createdAt": "2020-11-20T17:19:22Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4897", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2NDY2Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4897#discussion_r527964667", "bodyText": "It's difficult to read this test and see that the 3 scenarios called out in the story - no prov records, 1 prov record, and 2 prov records - are being tested.\nAlso, I'd much rather see this tests in core DHF as opposed to HC. In HC, a single smoke test will do the trick.\nSo move the tests to core DHF, write the test against the EntitySearchService - call it GetRecordTest, since you're testing the getRecord endpoint - and I recommend a separate test method for each of the 3 scenarios. The steps don't matter. So for the first one, you can just ingest a record. For the second one, ingest it and map it. For the 3rd, ingest it, map it, and maybe use a custom step (or 2 custom steps instead of map). All values in each row in the history object need to be verified.", "author": "rjrudin", "createdAt": "2020-11-20T20:54:20Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java", "diffHunk": "@@ -108,9 +108,17 @@ void testCRUDOnSavedQuery() throws Exception {\n         verifyRequestIsForbidden(MockMvcRequestBuilders.delete(SAVED_QUERIES_PATH + \"/query\").param(\"id\", \"some-id\"));\n     }\n \n+    // This test is done at the Java layer as multiple scenarios cannot be tested in ml-unit-tests due to the optic calls occurring in the same request.\n+    // There appears to be a bug with Optic caching values in the same request that is being investigated.\n     @Test\n     void testGetDocumentByURI() throws Exception {\n         ReferenceModelProject project = installOnlyReferenceModelEntities(true);\n+        project.setCustomerDocumentMetadata(new DocumentMetadataHandle()", "originalCommit": "6578d19fd325b74ace6bd76e52cb7e57cd8a5651", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3NjAzMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4897#discussion_r527976032", "bodyText": "There is a getRecordHistoryTest.sjs for that covers all the scenarios. getRecord.sjs test is failing as multiple scenarios cannot be tested in ml-unit-tests due to the optic calls occurring in the same request. There appears to be a bug with Optic caching values in the same request that is being investigated.", "author": "rahulvudutala", "createdAt": "2020-11-20T21:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2NDY2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bbdb468e18dffc811fd08f5df9e7c3597f0bd8cf", "chunk": "diff --git a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java\nindex 8bd57ef60..4090ce8ff 100644\n--- a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java\n+++ b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java\n\n@@ -108,17 +108,9 @@ public class EntitySearchControllerTest extends AbstractMvcTest {\n         verifyRequestIsForbidden(MockMvcRequestBuilders.delete(SAVED_QUERIES_PATH + \"/query\").param(\"id\", \"some-id\"));\n     }\n \n-    // This test is done at the Java layer as multiple scenarios cannot be tested in ml-unit-tests due to the optic calls occurring in the same request.\n-    // There appears to be a bug with Optic caching values in the same request that is being investigated.\n     @Test\n     void testGetDocumentByURI() throws Exception {\n         ReferenceModelProject project = installOnlyReferenceModelEntities(true);\n-        project.setCustomerDocumentMetadata(new DocumentMetadataHandle()\n-                .withCollections(ReferenceModelProject.CUSTOMER_ENTITY_TYPE)\n-                .withPermission(\"data-hub-common\", DocumentMetadataHandle.Capability.READ, DocumentMetadataHandle.Capability.UPDATE)\n-                .withMetadataValue(\"datahubCreatedInFlow\", \"getRecordTestFlow\")\n-                .withMetadataValue(\"datahubCreatedByStep\", \"getRecordTestStep\"));\n-\n         Customer customer1 = new Customer();\n         customer1.setCustomerId(1);\n         customer1.setName(\"Jane\");\n"}}, {"oid": "bbdb468e18dffc811fd08f5df9e7c3597f0bd8cf", "url": "https://github.com/marklogic/marklogic-data-hub/commit/bbdb468e18dffc811fd08f5df9e7c3597f0bd8cf", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-23T07:50:01Z", "type": "forcePushed"}, {"oid": "65d37a1e4305c77b7959460f509a5b948d75c390", "url": "https://github.com/marklogic/marklogic-data-hub/commit/65d37a1e4305c77b7959460f509a5b948d75c390", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-23T08:14:10Z", "type": "forcePushed"}, {"oid": "319a877274f5be12f22eb5d8aad00c60803b2e48", "url": "https://github.com/marklogic/marklogic-data-hub/commit/319a877274f5be12f22eb5d8aad00c60803b2e48", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-24T03:35:05Z", "type": "forcePushed"}, {"oid": "31755019342ce0602287ccc7b513ee8f95382476", "url": "https://github.com/marklogic/marklogic-data-hub/commit/31755019342ce0602287ccc7b513ee8f95382476", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-24T03:43:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwNDU2MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4897#discussion_r529604560", "bodyText": "To make it clear what this scenario is testing, name this \"recordHasMetadataButNoProvenance\".", "author": "rjrudin", "createdAt": "2020-11-24T14:52:24Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package com.marklogic.hub.dataservices.entitySearch;\n+\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.client.io.Format;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import com.marklogic.hub.dataservices.EntitySearchService;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.flow.impl.FlowRunnerImpl;\n+import com.marklogic.hub.test.Customer;\n+import com.marklogic.hub.test.ReferenceModelProject;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+//This test is done at the Java layer as multiple scenarios cannot be tested in ml-unit-tests due to the optic calls occurring in the same request.\n+// There appears to be a bug with Optic caching values in the same request that is being investigated.\n+public class GetRecordTest extends AbstractHubCoreTest {\n+\n+    private EntitySearchService service;\n+    private ReferenceModelProject project;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        service = EntitySearchService.on(getHubClient().getFinalClient());\n+        project = installReferenceModelProject();\n+    }\n+\n+    @Test\n+    void testGetRecord() {", "originalCommit": "31755019342ce0602287ccc7b513ee8f95382476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxMjgxOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4897#discussion_r529612818", "bodyText": "This is testing all other properties in the response from getRecord endpoint except for the history. There are 3 methods for 3 different scenarios for record history", "author": "rahulvudutala", "createdAt": "2020-11-24T15:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwNDU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "47bcd69ad2ad0e51957cad163b677f930415fd8d", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java\nindex 550a9048b..95f0a6bd2 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java\n\n@@ -95,18 +95,14 @@ public class GetRecordTest extends AbstractHubCoreTest {\n     @Test\n     public void testRecordHistoryWithTwoProvenanceRecords() {\n         String path = \"entity-reference-model/data/customers\";\n-        FlowInputs inputs = new FlowInputs(\"ingestToFinal\", \"3\");\n+        FlowInputs inputs = new FlowInputs(\"ingestToFinal\");\n         inputs.setInputFilePath(getClass().getClassLoader().getResource(path).getPath());\n \n         FlowRunner flowRunner = new FlowRunnerImpl(getHubClient());\n         flowRunner.runFlow(inputs);\n         flowRunner.awaitCompletion();\n \n-        inputs.setSteps(Arrays.asList(\"4\"));\n-        flowRunner.runFlow(inputs);\n-        flowRunner.awaitCompletion();\n-\n-        ObjectNode response = (ObjectNode) service.getRecord(\"/customers/customer1.json\");\n+        ObjectNode response = (ObjectNode) service.getRecord(\"/history-test/customer1.json\");\n         ArrayNode history = (ArrayNode) response.get(\"history\");\n         assertEquals(2, history.size());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwNTMwNg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4897#discussion_r529605306", "bodyText": "I think JUnit is fine here, but was the problem that you had multiple scenarios in one test module? Or was there a problem with multiple test modules, each testing one scenario? In ml-unit-test, the setup.xqy module can be used for doing setup before each test module.", "author": "rjrudin", "createdAt": "2020-11-24T14:53:10Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package com.marklogic.hub.dataservices.entitySearch;\n+\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.client.io.Format;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import com.marklogic.hub.dataservices.EntitySearchService;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.flow.impl.FlowRunnerImpl;\n+import com.marklogic.hub.test.Customer;\n+import com.marklogic.hub.test.ReferenceModelProject;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+//This test is done at the Java layer as multiple scenarios cannot be tested in ml-unit-tests due to the optic calls occurring in the same request.", "originalCommit": "31755019342ce0602287ccc7b513ee8f95382476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyODI1MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4897#discussion_r529628251", "bodyText": "This was the error.\nOPTIC-INVALARGS: fn.error(null, 'OPTIC-INVALARGS', errMsg+arg); -- Invalid arguments: cannot call pattern() with invalid predicates : [object Object]\nI had multiple multiple scenarios in one test module", "author": "rahulvudutala", "createdAt": "2020-11-24T15:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwNTMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "47bcd69ad2ad0e51957cad163b677f930415fd8d", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java\nindex 550a9048b..95f0a6bd2 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/entitySearch/GetRecordTest.java\n\n@@ -95,18 +95,14 @@ public class GetRecordTest extends AbstractHubCoreTest {\n     @Test\n     public void testRecordHistoryWithTwoProvenanceRecords() {\n         String path = \"entity-reference-model/data/customers\";\n-        FlowInputs inputs = new FlowInputs(\"ingestToFinal\", \"3\");\n+        FlowInputs inputs = new FlowInputs(\"ingestToFinal\");\n         inputs.setInputFilePath(getClass().getClassLoader().getResource(path).getPath());\n \n         FlowRunner flowRunner = new FlowRunnerImpl(getHubClient());\n         flowRunner.runFlow(inputs);\n         flowRunner.awaitCompletion();\n \n-        inputs.setSteps(Arrays.asList(\"4\"));\n-        flowRunner.runFlow(inputs);\n-        flowRunner.awaitCompletion();\n-\n-        ObjectNode response = (ObjectNode) service.getRecord(\"/customers/customer1.json\");\n+        ObjectNode response = (ObjectNode) service.getRecord(\"/history-test/customer1.json\");\n         ArrayNode history = (ArrayNode) response.get(\"history\");\n         assertEquals(2, history.size());\n \n"}}, {"oid": "47bcd69ad2ad0e51957cad163b677f930415fd8d", "url": "https://github.com/marklogic/marklogic-data-hub/commit/47bcd69ad2ad0e51957cad163b677f930415fd8d", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-24T15:36:17Z", "type": "forcePushed"}, {"oid": "aa90c419e6bf558d0a1941640a112e98c5051ecf", "url": "https://github.com/marklogic/marklogic-data-hub/commit/aa90c419e6bf558d0a1941640a112e98c5051ecf", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-24T18:41:34Z", "type": "forcePushed"}, {"oid": "0ddfc4a856318d1531e595ff09b7d38d374f2c05", "url": "https://github.com/marklogic/marklogic-data-hub/commit/0ddfc4a856318d1531e595ff09b7d38d374f2c05", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-24T18:54:51Z", "type": "forcePushed"}, {"oid": "4d7458b419aee92038da3d0cddff539961dd99c8", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4d7458b419aee92038da3d0cddff539961dd99c8", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-24T19:34:07Z", "type": "forcePushed"}, {"oid": "3a400e2f02915d5818e6d23e9748f0119f3a9d5e", "url": "https://github.com/marklogic/marklogic-data-hub/commit/3a400e2f02915d5818e6d23e9748f0119f3a9d5e", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-24T19:59:14Z", "type": "commit"}, {"oid": "3a400e2f02915d5818e6d23e9748f0119f3a9d5e", "url": "https://github.com/marklogic/marklogic-data-hub/commit/3a400e2f02915d5818e6d23e9748f0119f3a9d5e", "message": "DHFPROD-6201: Visualize history of a record in the document metadata view", "committedDate": "2020-11-24T19:59:14Z", "type": "forcePushed"}]}