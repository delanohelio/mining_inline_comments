{"pr_number": 4740, "pr_title": "DHFPROD-6051: The connector should point to java-client-api version 5.3", "pr_createdAt": "2020-10-20T18:12:53Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4740", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2OTY3MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4740#discussion_r508769670", "bodyText": "Don't we still need ingestEndpointState? Or is that not relevant at all to input-only endpoints?", "author": "rjrudin", "createdAt": "2020-10-20T19:01:25Z", "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/Options.java", "diffHunk": "@@ -21,8 +21,7 @@\n     private String permissions;\n     private String sourceName;\n     private String sourceType;\n-    private JsonNode ingestWorkUnit;\n-    private JsonNode ingestEndpointState;\n+    private JsonNode ingestEndpointConstants;", "originalCommit": "c676f2518148ccf99243f3653e2d239b62f36820", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MTUxMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4740#discussion_r509041513", "bodyText": "Done.", "author": "anu3990", "createdAt": "2020-10-21T07:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2OTY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "73d369ca34b830400e0e6b5665b2879ab5829d2b", "chunk": "diff --git a/marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/Options.java b/marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/Options.java\nindex e274fb2fb..09dfa8dcf 100644\n--- a/marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/Options.java\n+++ b/marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/Options.java\n\n@@ -22,6 +22,7 @@ public class Options {\n     private String sourceName;\n     private String sourceType;\n     private JsonNode ingestEndpointConstants;\n+    private JsonNode ingestEndpointState;\n     private Map<String, String> hubProperties;\n \n     public Options() {\n"}}, {"oid": "73d369ca34b830400e0e6b5665b2879ab5829d2b", "url": "https://github.com/marklogic/marklogic-data-hub/commit/73d369ca34b830400e0e6b5665b2879ab5829d2b", "message": "DHFPROD-6051: The connector should point to java-client-api version - 5.3", "committedDate": "2020-10-21T07:10:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxNzI1OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4740#discussion_r509317258", "bodyText": "We still want to verify that if Ernie has custom endpointState, his endpoint gets access to it.", "author": "rjrudin", "createdAt": "2020-10-21T14:06:07Z", "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataViaCustomEndpointTest.java", "diffHunk": "@@ -60,8 +60,7 @@ private void thenTheExpectedDocumentExists() {\n         assertEquals(\"apple\", doc.get(\"input\").get(\"fruitName\").asText(), message);\n         assertEquals(\"red\", doc.get(\"input\").get(\"fruitColor\").asText(), message);\n \n-        assertEquals(\"value\", doc.get(\"workUnit\").get(\"someString\").asText(), message);\n-        assertEquals(123, doc.get(\"workUnit\").get(\"someNumber\").asInt(), message);\n-        assertEquals(\"hello world\", doc.get(\"endpointState\").get(\"someState\").asText(), message);", "originalCommit": "73d369ca34b830400e0e6b5665b2879ab5829d2b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bab561baec6b5e1e362233824cb84dce7c8b7f42", "chunk": "diff --git a/marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataViaCustomEndpointTest.java b/marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataViaCustomEndpointTest.java\nindex a86c571a1..f36e34295 100644\n--- a/marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataViaCustomEndpointTest.java\n+++ b/marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataViaCustomEndpointTest.java\n\n@@ -36,31 +35,69 @@ public class WriteDataViaCustomEndpointTest extends AbstractSparkConnectorTest {\n             new FileHandle(new ClassPathResource(\"custom-ingestion-endpoint/endpoint.sjs\").getFile()).withFormat(Format.TEXT));\n     }\n \n-    private void whenARowIsWrittenUsingTheCustomEndpoint() throws IOException {\n-        ObjectNode customEndpointConstants = objectMapper.createObjectNode();\n-        customEndpointConstants.put(\"someString\", \"value\");\n-        customEndpointConstants.put(\"someNumber\", 123);\n+    @Test\n+    void customEndpointStateAndEndpointConstants() {\n+        ObjectNode endpointConstants = objectMapper.createObjectNode();\n+        endpointConstants.put(\"someString\", \"value\");\n+        endpointConstants.put(\"someNumber\", 123);\n+\n+        ObjectNode endpointState = objectMapper.createObjectNode();\n+        endpointState.put(\"someState\", \"hello world\");\n+\n+        writeRowUsingCustomEndpoint(endpointConstants, endpointState);\n+\n+        // Verify custom constants and state data were added to document\n+        assertEquals(\"value\", writtenDocument.get(\"myEndpointConstants\").get(\"someString\").asText());\n+        assertEquals(123, writtenDocument.get(\"myEndpointConstants\").get(\"someNumber\").asInt());\n+        assertEquals(\"hello world\", writtenDocument.get(\"myEndpointState\").get(\"someState\").asText());\n+    }\n+\n+    @Test\n+    void customEndpointNoEndpointStateAndNoEndpointConstants() {\n+        writeRowUsingCustomEndpoint(null, null);\n+\n+        verifyEndpointConstantsIsEmpty();\n+        assertTrue(writtenDocument.has(\"myEndpointState\"), \"myEndpointState should exist, but it should be null since \" +\n+            \"we didn't pass anything to the endpoint\");\n+        assertEquals(JsonNodeType.NULL, writtenDocument.get(\"myEndpointState\").getNodeType());\n+    }\n+\n+    @Test\n+    void customEndpointWithEndpointStateAndNoEndpointConstants() {\n         ObjectNode customEndpointState = objectMapper.createObjectNode();\n         customEndpointState.put(\"someState\", \"hello world\");\n \n+        writeRowUsingCustomEndpoint(null, customEndpointState);\n+\n+        verifyEndpointConstantsIsEmpty();\n+        assertEquals(\"hello world\", writtenDocument.get(\"myEndpointState\").get(\"someState\").asText());\n+    }\n+\n+    private void writeRowUsingCustomEndpoint(ObjectNode customEndpointConstants, ObjectNode customEndpointState) {\n         DataWriter<InternalRow> dataWriter = buildDataWriter(new Options(getHubPropertiesAsMap())\n             .withIngestApiPath(\"/custom-ingestion-endpoint/endpoint.api\")\n             .withIngestEndpointConstants(customEndpointConstants)\n             .withIngestEndpointState(customEndpointState));\n \n-        dataWriter.write(buildRow(\"apple\", \"red\"));\n-        dataWriter.commit();\n-    }\n+        try {\n+            dataWriter.write(buildRow(\"apple\", \"red\"));\n+            dataWriter.commit();\n \n-    private void thenTheExpectedDocumentExists() {\n-        JsonNode doc = getHubClient().getStagingClient().newJSONDocumentManager().read(\"/test/doc.json\", new JacksonHandle()).get();\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n \n-        final String message = \"Did not find expected data in doc: \" + doc.toString();\n+        loadDocumentAndVerifyInputData();\n+    }\n \n-        assertEquals(\"apple\", doc.get(\"input\").get(\"fruitName\").asText(), message);\n-        assertEquals(\"red\", doc.get(\"input\").get(\"fruitColor\").asText(), message);\n+    private void loadDocumentAndVerifyInputData() {\n+        writtenDocument = getHubClient().getStagingClient().newJSONDocumentManager().read(\"/test/doc.json\", new JacksonHandle()).get();\n+        assertEquals(\"apple\", writtenDocument.get(\"input\").get(\"fruitName\").asText());\n+        assertEquals(\"red\", writtenDocument.get(\"input\").get(\"fruitColor\").asText());\n+    }\n \n-        assertEquals(\"value\", doc.get(\"endpointConstants\").get(\"someString\").asText(), message);\n-        assertEquals(123, doc.get(\"endpointConstants\").get(\"someNumber\").asInt(), message);\n+    private void verifyEndpointConstantsIsEmpty() {\n+        assertEquals(0, writtenDocument.get(\"myEndpointConstants\").size(), \"The constants should default to an empty object when no options \" +\n+            \"are set that will populate the constants\");\n     }\n }\n"}}, {"oid": "bab561baec6b5e1e362233824cb84dce7c8b7f42", "url": "https://github.com/marklogic/marklogic-data-hub/commit/bab561baec6b5e1e362233824cb84dce7c8b7f42", "message": "DHFPROD-6051: The connector should point to java-client-api version - 5.3", "committedDate": "2020-10-21T17:27:15Z", "type": "forcePushed"}, {"oid": "81ff21919bf2b041a37c0fca0363d4213be9ee79", "url": "https://github.com/marklogic/marklogic-data-hub/commit/81ff21919bf2b041a37c0fca0363d4213be9ee79", "message": "DHFPROD-6051: The connector should point to java-client-api version - 5.3", "committedDate": "2020-10-21T21:21:12Z", "type": "commit"}, {"oid": "81ff21919bf2b041a37c0fca0363d4213be9ee79", "url": "https://github.com/marklogic/marklogic-data-hub/commit/81ff21919bf2b041a37c0fca0363d4213be9ee79", "message": "DHFPROD-6051: The connector should point to java-client-api version - 5.3", "committedDate": "2020-10-21T21:21:12Z", "type": "forcePushed"}]}