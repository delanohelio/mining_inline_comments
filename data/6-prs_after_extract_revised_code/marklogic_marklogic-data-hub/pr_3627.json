{"pr_number": 3627, "pr_title": "DHFPROD-4054: Reworking Spring Security to use granted authorities", "pr_createdAt": "2020-03-01T19:59:51Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3627", "timeline": [{"oid": "6b5a3f4b4a42a72ae090bb3cbe7feb2e703a5f88", "url": "https://github.com/marklogic/marklogic-data-hub/commit/6b5a3f4b4a42a72ae090bb3cbe7feb2e703a5f88", "message": "DHFPROD-4054: Reworking Spring Security to use granted authorities\n\nChanges:\n\n- Added SecurityService.getAuthorities, which has a stubbed out implementation\n- Reworked Spring Security so that nearly everything is in the AuthenticationFilter class\n- Enabled method-level security so that granted authorities can be used with the @Secured annotation on controller methods\n\nI tested this manually - with DH installed and without it installed - and all seemed fine. But the method-level security test - see what's commented out in EnvironmentController - didn't seem to work yet. Not sure if the proper response is being sent to the browser yet.", "committedDate": "2020-03-01T20:01:52Z", "type": "forcePushed"}, {"oid": "018b55c127465d2984ded76c10c5b1304601d50e", "url": "https://github.com/marklogic/marklogic-data-hub/commit/018b55c127465d2984ded76c10c5b1304601d50e", "message": "DHFPROD-4054: Reworking Spring Security to use granted authorities\n\nChanges:\n\n- Added SecurityService.getAuthorities, which has a stubbed out implementation\n- Reworked Spring Security so that nearly everything is in the AuthenticationFilter class\n- Enabled method-level security so that granted authorities can be used with the @Secured annotation on controller methods\n\nI tested this manually - with DH installed and without it installed - and all seemed fine.\n\nThe GUI though seems to need a concept of a \"You're logged in, but you can't do this page\". The CustomExceptionHandler is returning a 403 for an AccessDeniedException - can test this out using the commented-out example in EnvironmentController - but this directs the user back to the login page.", "committedDate": "2020-03-02T01:48:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MTU5Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3627#discussion_r386171592", "bodyText": "very nice refactors... One question is that why we need to have two services (RolesService and SecurityServicce)? Would it better use a SecurityService which consolidate the roles and authorities along with one DS call?", "author": "hao1st", "createdAt": "2020-03-02T02:19:43Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.oneui.auth;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.dataservices.RolesService;\n+import com.marklogic.hub.dataservices.SecurityService;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import com.marklogic.hub.oneui.exceptions.ForbiddenException;\n+import com.marklogic.hub.oneui.models.EnvironmentInfo;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.AuthenticationServiceException;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.ResourceAccessException;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Custom authentication filter for the one-ui web application. All authentication logic is handled by this class, with\n+ * success handled by LoginHandler and failure handled by LoginFailureHandler.\n+ */\n+public class AuthenticationFilter extends AbstractAuthenticationProcessingFilter {\n+\n+    private EnvironmentService environmentService;\n+    private HubConfigSession hubConfig;\n+\n+    public AuthenticationFilter(EnvironmentService environmentService, HubConfigSession hubConfig) {\n+        super(new AntPathRequestMatcher(\"/api/login\", \"POST\"));\n+        this.environmentService = environmentService;\n+        this.hubConfig = hubConfig;\n+        setAuthenticationSuccessHandler(new LoginHandler());\n+        setAuthenticationFailureHandler(new LoginFailureHandler());\n+    }\n+\n+    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException {\n+        if (!request.getMethod().toUpperCase().equals(\"POST\")) {\n+            throw new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n+        }\n+\n+        final EnvironmentInfo originalEnvironmentInfo = environmentService.getEnvironment();\n+\n+        final LoginInfo loginInfo = new ObjectMapper().readValue(request.getInputStream(), LoginInfo.class);\n+\n+        final boolean datahubIsInstalled = StringUtils.isEmpty(loginInfo.mlHost);\n+        if (!datahubIsInstalled) {\n+            environmentService.setEnvironment(new EnvironmentInfo(loginInfo.mlHost, loginInfo.mlAuthMethod,\n+                loginInfo.mlPort, loginInfo.mlManageAuthMethod, loginInfo.mlManagePort, loginInfo.dhStagingAuthMethod, loginInfo.dhStagingPort, loginInfo.dhFinalAuthMethod, loginInfo.dhFinalPort));\n+        }\n+\n+        try {\n+            AuthenticationToken token = authenticateUser(loginInfo.username, loginInfo.password);\n+            token.setDetails(authenticationDetailsSource.buildDetails(request));\n+            return token;\n+        } catch (Exception e) {\n+            environmentService.setEnvironment(originalEnvironmentInfo);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * @param username\n+     * @param password\n+     */\n+    protected AuthenticationToken authenticateUser(String username, String password) {\n+        if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {\n+            throw new BadCredentialsException(\"Unauthorized\");\n+        }\n+\n+        username = username.trim();\n+\n+        EnvironmentInfo environmentInfo = environmentService.getEnvironment();\n+        hubConfig.setCredentials(environmentInfo, username, password);\n+\n+        final boolean hasManagePrivileges = canAccessManageServer(environmentInfo.mlHost);\n+\n+        final DatabaseClient stagingClient = hubConfig.newStagingClient(null);\n+\n+        boolean dataHubInstalled = false;\n+        List<GrantedAuthority> authorities = new ArrayList<>();\n+        ArrayNode roles = null;\n+\n+        try {\n+            dataHubInstalled = stagingClient.checkConnection().isConnected();\n+            if (dataHubInstalled) {\n+                roles = (ArrayNode) RolesService.on(stagingClient).getRoles();", "originalCommit": "018b55c127465d2984ded76c10c5b1304601d50e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MjczOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3627#discussion_r386172739", "bodyText": "BTW, I still tried to figout out @secured, @PreAuthorize, @PostAuthorize. Another question is that do we really need to return roles of the current users to front-end. I thought that we wanted to client-side has little knowledge about roles rather than authorities (canInstallDataHub, canRead{artifactType}, canWrite{artifact})  ?", "author": "hao1st", "createdAt": "2020-03-02T02:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3ODA0Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3627#discussion_r386178047", "bodyText": "I didn't want to get rid of RolesService and \"roles\" until the GUI is updated to depend on authorities instead of roles.", "author": "rjrudin", "createdAt": "2020-03-02T02:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3ODE4Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3627#discussion_r386178187", "bodyText": "I think @secured should be all we need. That will reference authorities, but will include a \"ROLE_\" prefix to make Spring Security happy. And yes, the GUI shouldn't care about roles anymore.", "author": "rjrudin", "createdAt": "2020-03-02T02:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MTU5Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "775448aa062bc006eb5ea24bb403ff582ad35f8d", "url": "https://github.com/marklogic/marklogic-data-hub/commit/775448aa062bc006eb5ea24bb403ff582ad35f8d", "message": "DHFPROD-4054: Reworking Spring Security to use granted authorities\n\nChanges:\n\n- Added SecurityService.getAuthorities, which has a stubbed out implementation\n- Reworked Spring Security so that nearly everything is in the AuthenticationFilter class\n- Enabled method-level security so that granted authorities can be used with the @Secured annotation on controller methods\n\nI tested this manually - with DH installed and without it installed - and all seemed fine.", "committedDate": "2020-03-02T18:58:22Z", "type": "forcePushed"}, {"oid": "2eab5d166c21973d502256488df8b5a2879597a9", "url": "https://github.com/marklogic/marklogic-data-hub/commit/2eab5d166c21973d502256488df8b5a2879597a9", "message": "DHFPROD-4054: Reworking Spring Security to use granted authorities\n\nChanges:\n\n- Added SecurityService.getAuthorities, which has a stubbed out implementation\n- Reworked Spring Security so that nearly everything is in the AuthenticationFilter class\n- Enabled method-level security so that granted authorities can be used with the @Secured annotation on controller methods\n\nI tested this manually - with DH installed and without it installed - and all seemed fine.", "committedDate": "2020-03-02T19:02:56Z", "type": "forcePushed"}, {"oid": "ac99abcd0112bb401cbf202c4a0a1d98ba03ac5a", "url": "https://github.com/marklogic/marklogic-data-hub/commit/ac99abcd0112bb401cbf202c4a0a1d98ba03ac5a", "message": "DHFPROD-4054: Reworking Spring Security to use granted authorities\n\nChanges:\n\n- Added SecurityService.getAuthorities, which has a stubbed out implementation\n- Reworked Spring Security so that nearly everything is in the AuthenticationFilter class\n- Enabled method-level security so that granted authorities can be used with the @Secured annotation on controller methods\n\nI tested this manually - with DH installed and without it installed - and all seemed fine.", "committedDate": "2020-03-02T19:51:23Z", "type": "forcePushed"}, {"oid": "ac99abcd0112bb401cbf202c4a0a1d98ba03ac5a", "url": "https://github.com/marklogic/marklogic-data-hub/commit/ac99abcd0112bb401cbf202c4a0a1d98ba03ac5a", "message": "DHFPROD-4054: Reworking Spring Security to use granted authorities\n\nChanges:\n\n- Added SecurityService.getAuthorities, which has a stubbed out implementation\n- Reworked Spring Security so that nearly everything is in the AuthenticationFilter class\n- Enabled method-level security so that granted authorities can be used with the @Secured annotation on controller methods\n\nI tested this manually - with DH installed and without it installed - and all seemed fine.", "committedDate": "2020-03-02T19:51:23Z", "type": "commit"}]}