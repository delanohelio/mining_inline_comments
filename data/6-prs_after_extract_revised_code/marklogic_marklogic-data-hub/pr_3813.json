{"pr_number": 3813, "pr_title": "DHFPROD-3992:Backend work for running the mapping", "pr_createdAt": "2020-04-14T08:52:01Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3813", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNjU3Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408106576", "bodyText": "Why does stepDefinition needs it own code here?", "author": "rjrudin", "createdAt": "2020-04-14T12:45:12Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -142,15 +142,23 @@ protected Modules findModulesWithResolvedBaseDir(String resolvedBaseDir) {\n                         return modules;\n                     }\n                 };\n-                Files.walkFileTree(artifactPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        if (dir.toFile().isDirectory()) {\n-                            executeWalkWithDataService(dir, modulesFinder, artifactService, typeInfo);\n+                if(\"stepDefinition\".equals(artifactType)){", "originalCommit": "6ed16cf6c854d816cd3b2734bd602cc030a18f38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxODA5MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409918091", "bodyText": "All artifacts are present in base dir except stepdef, hence calling File.walk in case of stepdef,\nalso we don't want to reload the previously loaded mappings(using REST) using DS.", "author": "srinathgit", "createdAt": "2020-04-17T00:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNjU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fbda5fd10133f3b38da5603af334ac8abbaa599e", "chunk": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java\nindex e80bc38f8..696a86fd7 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java\n\n@@ -138,10 +138,15 @@ public class LoadUserArtifactsCommand extends AbstractCommand {\n                     @Override\n                     protected Modules findModulesWithResolvedBaseDir(String resolvedBaseDir) {\n                         Modules modules = new Modules();\n-                        modules.setAssets(findResources(artifactType + \" Artifact\", resolvedBaseDir, fileExtension, settingFileExtension));\n+                        /* First write settings and then the artifact to prevent creation of default artifacts\n+                         */\n+                        modules.setAssets(findResources(artifactType + \" Artifact\", resolvedBaseDir, settingFileExtension, fileExtension));\n                         return modules;\n                     }\n                 };\n+                /*  All artifacts are present in base dir except stepdef, hence run File.walk\n+                    also we shouldn't attempt to reload the previously loaded mappings(using REST) using DS.\n+                 */\n                 if(\"stepDefinition\".equals(artifactType)){\n                     Files.walkFileTree(artifactPath, new SimpleFileVisitor<Path>() {\n                         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExMzE0MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408113141", "bodyText": "If the purpose of this test is to run a flow and not to test the creation of a step, I think it's better just to add the step to the test flow file.", "author": "rjrudin", "createdAt": "2020-04-14T12:55:11Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java", "diffHunk": "@@ -177,6 +178,39 @@ void runFlow() {\n         JsonNode job = jobsController.getJob(resp.getJobId());\n         String jobStatus = job.get(\"jobStatus\").asText();\n         assertEquals(\"finished\", jobStatus, \"Job status should be 'finished' once threads complete; job doc: \" + job);\n+\n+\n+        addStagingDoc(\"input/mapInput.json\", \"/input/mapInput.json\", \"default-ingestion\");\n+\n+        //Equivalent to adding a step from GUI\n+        controller.createStep(\"testFlow\" , 2, \"{\\n\" +", "originalCommit": "6ed16cf6c854d816cd3b2734bd602cc030a18f38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fbda5fd10133f3b38da5603af334ac8abbaa599e", "chunk": "diff --git a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowControllerTest.java\nsimilarity index 84%\nrename from marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java\nrename to marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowControllerTest.java\nindex a69130a6b..bb9259824 100644\n--- a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java\n+++ b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowControllerTest.java\n\n@@ -165,25 +166,13 @@ class FlowControllerTest extends AbstractOneUiTest {\n             loadDataController.deleteArtifact(\"validArtifact\");\n         }\n     }\n-\n     @Test\n-    void runFlow() throws IOException {\n-        installProject(\"run-flow-test\");\n-\n-        RunFlowResponse resp = controller.runFlow(\"testFlow\", Collections.singletonList(\"testStep-custom\"));\n-\n-        assertEquals(\"testFlow\", resp.getFlowName(), \"Run flow response has correct flow name\");\n-        controller.getLastFlowRunner().awaitCompletion();\n-\n-        JsonNode job = jobsController.getJob(resp.getJobId());\n-        String jobStatus = job.get(\"jobStatus\").asText();\n-        assertEquals(\"finished\", jobStatus, \"Job status should be 'finished' once threads complete; job doc: \" + job);\n-\n-\n+    void addMappingToStepAndRun(){\n+        installProject(\"reference-project\");\n         addStagingDoc(\"input/mapInput.json\", \"/input/mapInput.json\", \"default-ingestion\");\n \n         //Equivalent to adding a step from GUI\n-        controller.createStep(\"testFlow\" , 2, \"{\\n\" +\n+        controller.createStep(\"refFlow\" , 1, \"{\\n\" +\n             \"\\\"name\\\": \\\"testMap\\\",\\n\" +\n             \"\\\"stepDefinitionName\\\": \\\"entity-services-mapping\\\",\\n\" +\n             \"\\\"stepDefinitionType\\\": \\\"MAPPING\\\",\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExNDIwOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408114209", "bodyText": "Can you switch this to use the reference project instead of \"run-flow-test\"? I'd like for as many tests as possible to use the reference project. Adding a flow there with an entity-services-mapping would be a very useful addition.", "author": "rjrudin", "createdAt": "2020-04-14T12:56:51Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java", "diffHunk": "@@ -166,7 +167,7 @@ void getFlow() throws IOException {\n     }\n \n     @Test\n-    void runFlow() {\n+    void runFlow() throws IOException {", "originalCommit": "6ed16cf6c854d816cd3b2734bd602cc030a18f38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxODMzOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409918338", "bodyText": "Used reference-project for the tests", "author": "srinathgit", "createdAt": "2020-04-17T00:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExNDIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbda5fd10133f3b38da5603af334ac8abbaa599e", "chunk": "diff --git a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowControllerTest.java\nsimilarity index 84%\nrename from marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java\nrename to marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowControllerTest.java\nindex a69130a6b..bb9259824 100644\n--- a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java\n+++ b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowControllerTest.java\n\n@@ -165,25 +166,13 @@ class FlowControllerTest extends AbstractOneUiTest {\n             loadDataController.deleteArtifact(\"validArtifact\");\n         }\n     }\n-\n     @Test\n-    void runFlow() throws IOException {\n-        installProject(\"run-flow-test\");\n-\n-        RunFlowResponse resp = controller.runFlow(\"testFlow\", Collections.singletonList(\"testStep-custom\"));\n-\n-        assertEquals(\"testFlow\", resp.getFlowName(), \"Run flow response has correct flow name\");\n-        controller.getLastFlowRunner().awaitCompletion();\n-\n-        JsonNode job = jobsController.getJob(resp.getJobId());\n-        String jobStatus = job.get(\"jobStatus\").asText();\n-        assertEquals(\"finished\", jobStatus, \"Job status should be 'finished' once threads complete; job doc: \" + job);\n-\n-\n+    void addMappingToStepAndRun(){\n+        installProject(\"reference-project\");\n         addStagingDoc(\"input/mapInput.json\", \"/input/mapInput.json\", \"default-ingestion\");\n \n         //Equivalent to adding a step from GUI\n-        controller.createStep(\"testFlow\" , 2, \"{\\n\" +\n+        controller.createStep(\"refFlow\" , 1, \"{\\n\" +\n             \"\\\"name\\\": \\\"testMap\\\",\\n\" +\n             \"\\\"stepDefinitionName\\\": \\\"entity-services-mapping\\\",\\n\" +\n             \"\\\"stepDefinitionType\\\": \\\"MAPPING\\\",\\n\" +\n"}}, {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e", "url": "https://github.com/marklogic/marklogic-data-hub/commit/fbda5fd10133f3b38da5603af334ac8abbaa599e", "message": "DHFPROD-3992:Backend work for running the mapping", "committedDate": "2020-04-17T00:04:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxOTgyNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409919825", "bodyText": "Spoke with @sbayatpur , she said DHF 5.3.0 will be supported on ML servers  >=9.0-11 for 9.x and >=10.0-2.1 for 10.x. Hence removed the check.", "author": "srinathgit", "createdAt": "2020-04-17T00:13:12Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/MappingStepDefinitionImpl.java", "diffHunk": "@@ -42,14 +40,7 @@ public MappingStepDefinitionImpl(String name) {\n \n         options.put(\"sourceDatabase\", HubConfig.DEFAULT_STAGING_NAME);\n         options.put(\"targetDatabase\", HubConfig.DEFAULT_FINAL_NAME);\n-        Versions versions = ApplicationContextReference.getBean(Versions.class);\n-        if (versions == null || versions.isVersionCompatibleWithES()){\n-            setModulePath(\"/data-hub/5/builtins/steps/mapping/entity-services/main.sjs\");\n-        }\n-        else {\n-            setModulePath(\"/data-hub/5/builtins/steps/mapping/default/main.sjs\");\n-        }\n-", "originalCommit": "fbda5fd10133f3b38da5603af334ac8abbaa599e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyOTAyMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409929021", "bodyText": "You can remove this, as I'm just going to end up removing it in 4757 since it involves the filesystem. Can remove the line above it too, though you can leave it if you want and I'll delete it as part of 4757.", "author": "rjrudin", "createdAt": "2020-04-17T00:44:35Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -52,7 +52,15 @@ public ArrayNode getArtifacts(String artifactType) {\n     public ObjectNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) {\n         ObjectNode resp = (ObjectNode) getArtifactService().setArtifact(artifactType, artifactName, artifactJson);\n         writeArtifactInProject(artifactType, (ObjectNode) artifactJson, false);\n-        return resp;\n+        //Write default settings to project", "originalCommit": "fbda5fd10133f3b38da5603af334ac8abbaa599e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "125c93b8b721de50d1d649918d25e61b23a7a2dc", "chunk": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java\nindex f2a15996a..97d9b7594 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java\n\n@@ -52,15 +52,7 @@ public class ArtifactManagerImpl implements ArtifactManager {\n     public ObjectNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) {\n         ObjectNode resp = (ObjectNode) getArtifactService().setArtifact(artifactType, artifactName, artifactJson);\n         writeArtifactInProject(artifactType, (ObjectNode) artifactJson, false);\n-        //Write default settings to project\n-        if(resp.has(\"settings\")) {\n-            Path fileLocation = buildArtifactProjectLocation(artifactType, artifactName, getVersionFromArtifact(artifactType, (ObjectNode) artifactJson),true);\n-            if(fileLocation.toFile().exists()){\n-                throw new RuntimeException(\"Default settings file cannot be created as settings file for this artifact already exists\");\n-            }\n-            writeArtifactInProject(artifactType, (ObjectNode)resp.get(\"settings\"), true);\n-        }\n-        return (ObjectNode) resp.get(\"artifact\");\n+        return resp;\n     }\n \n     public ObjectNode getArtifact(String artifactType, String artifactName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyOTI1MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409929250", "bodyText": "Can you remove this line of code? retryLimit isn't used anywhere, no need to set it.", "author": "rjrudin", "createdAt": "2020-04-17T00:45:31Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/Step.java", "diffHunk": "@@ -134,9 +133,9 @@ public static Step deserialize(JsonNode json) {\n         step.setDescription(jsonObject.getString(\"description\"));\n         step.setOptions(jsonObject.getMap(\"options\"));\n         step.setCustomHook(jsonObject.getNode(\"customHook\"));\n-        step.setRetryLimit(jsonObject.getInt(\"retryLimit\"));\n-        step.setBatchSize(jsonObject.getInt(\"batchSize\"));\n-        step.setThreadCount(jsonObject.getInt(\"threadCount\"));\n+        step.setRetryLimit(jsonObject.getIntValue(\"retryLimit\"));", "originalCommit": "fbda5fd10133f3b38da5603af334ac8abbaa599e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "125c93b8b721de50d1d649918d25e61b23a7a2dc", "chunk": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/Step.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/Step.java\nindex 7ef286f12..8985f7ae4 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/Step.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/Step.java\n\n@@ -133,7 +133,6 @@ public class Step {\n         step.setDescription(jsonObject.getString(\"description\"));\n         step.setOptions(jsonObject.getMap(\"options\"));\n         step.setCustomHook(jsonObject.getNode(\"customHook\"));\n-        step.setRetryLimit(jsonObject.getIntValue(\"retryLimit\"));\n         step.setBatchSize(jsonObject.getIntValue(\"batchSize\"));\n         step.setThreadCount(jsonObject.getIntValue(\"threadCount\"));\n         step.setFileLocations(jsonObject.getNode(\"fileLocations\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMTg2NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409931864", "bodyText": "This is great that this is all going away - is there just not a need for StepModel anymore, and Step is sufficient?", "author": "rjrudin", "createdAt": "2020-04-17T00:56:09Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/FlowController.java", "diffHunk": "@@ -379,100 +370,13 @@ public StepModel createStep(String flowName, Integer stepOrder, String stepId, S\n         }\n \n         if (existingStep != null && existingStep.isEqual(step)) {\n-            return transformStepToWebModel(existingStep);\n+            return existingStep;\n         }\n \n         flowManager.saveFlow(flow);\n-        return transformStepToWebModel(step);\n-    }\n-\n-    private List<StepModel> getStepsToWebModel(String flowName) {", "originalCommit": "fbda5fd10133f3b38da5603af334ac8abbaa599e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NDk4MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409944980", "bodyText": "If the step is going to look something like the one below, I don't think it's needed. We allowed creating custom steps in QS, hence StepModel contained \"modulePath\"  (which was not in Step) which was used to create a step definition and a step in the backend. Since we won't do that, I believe it wouldn't be necessary. We can include it if there is a need\n    \"1\" : {\n      \"name\" : \"mapItem\",\n      \"options\" : {\n        \"mapping\" : {\n          \"name\" : \"mapItem\"\n        }\n      },\n      \"stepDefinitionName\" : \"entity-services-mapping\",\n      \"stepDefinitionType\" : \"MAPPING\"\n    }", "author": "srinathgit", "createdAt": "2020-04-17T01:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1ODczMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410158733", "bodyText": "Sounds good!", "author": "rjrudin", "createdAt": "2020-04-17T11:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMTg2NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "125c93b8b721de50d1d649918d25e61b23a7a2dc", "url": "https://github.com/marklogic/marklogic-data-hub/commit/125c93b8b721de50d1d649918d25e61b23a7a2dc", "message": "DHFPROD-3992:Backend work for running the mapping", "committedDate": "2020-04-18T15:45:36Z", "type": "forcePushed"}, {"oid": "3c668b650200a7e481b203fb07692f22cb01b834", "url": "https://github.com/marklogic/marklogic-data-hub/commit/3c668b650200a7e481b203fb07692f22cb01b834", "message": "DHFPROD-3992:Backend work for running the mapping", "committedDate": "2020-04-18T17:54:53Z", "type": "forcePushed"}, {"oid": "230ccb1915dc7fdc63f94ca115833276e8c5d829", "url": "https://github.com/marklogic/marklogic-data-hub/commit/230ccb1915dc7fdc63f94ca115833276e8c5d829", "message": "DHFPROD-3992:Backend work for running the mapping", "committedDate": "2020-04-18T20:29:27Z", "type": "forcePushed"}, {"oid": "f455f4040865e1a629e3bc7c54d097e4b58afb76", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f455f4040865e1a629e3bc7c54d097e4b58afb76", "message": "DHFPROD-3992:Backend work for running the mapping", "committedDate": "2020-04-20T17:21:49Z", "type": "commit"}, {"oid": "f455f4040865e1a629e3bc7c54d097e4b58afb76", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f455f4040865e1a629e3bc7c54d097e4b58afb76", "message": "DHFPROD-3992:Backend work for running the mapping", "committedDate": "2020-04-20T17:21:49Z", "type": "forcePushed"}]}