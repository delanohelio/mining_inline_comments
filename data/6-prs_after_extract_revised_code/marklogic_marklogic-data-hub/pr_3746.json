{"pr_number": 3746, "pr_title": "DHFPROD-4559: Explorer returns empty results when there is no data", "pr_createdAt": "2020-03-24T16:51:45Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3746", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NDA4Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3746#discussion_r397364086", "bodyText": "This seems like something we can check on before trying to do the search, right?\nAlso, I'd say we should add a test - but it doesn't look like SearchHelper is actually being tested at all??? I see in SearchManagerTest that it's being mocked.\nWhy is SearchHelper separate from SearchManager? SearchManager isn't doing anything other than delegating to SearchHelper.\nI recommend trying to write a real test here. This one is easy, because you don't need any data - just pass in a SearchQuery with no entity names, and verify you get back an empty StringHandle.", "author": "rjrudin", "createdAt": "2020-03-24T18:14:09Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchHelper.java", "diffHunk": "@@ -96,6 +99,12 @@ public StringHandle search(SearchQuery searchQuery) {\n \n         }\n         catch (MarkLogicServerException e) {\n+            // If there are no entityTypes to search, return empty result set", "originalCommit": "940a592494cfe84c0688bcbdbd28f994532482f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NzcwNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3746#discussion_r397467705", "bodyText": "The reason for adding this check in the catch block is we have to make a getModels call for every search request. This is handled by adding empty list to the collection query if the searchQuery.getQuery().getEntityNames() is empty which results in no results.\nIf there are no entityTypes, then there are no search options and we get 400 error with a missing options file. So I added this check in case of exception.", "author": "rahulvudutala", "createdAt": "2020-03-24T21:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NDA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2Nzk5Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3746#discussion_r397467993", "bodyText": "I will add a comment as you suggested\n\"if there are no entity models, then we expect an error because no search options will exist\"", "author": "rahulvudutala", "createdAt": "2020-03-24T21:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NDA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNDk0OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3746#discussion_r397824948", "bodyText": "What about a test for this? Can you submit a SearchQuery with no entity names and get this expected exception, and then verify that you get an empty StringHandle back?", "author": "rjrudin", "createdAt": "2020-03-25T12:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NDA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcwOTkzNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3746#discussion_r398709937", "bodyText": "Addressed in new commits", "author": "rahulvudutala", "createdAt": "2020-03-26T16:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NDA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0c4bcdcd60a72f039553034d9381bf58f80c7858", "chunk": "diff --git a/one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchHelper.java b/one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchHelper.java\ndeleted file mode 100644\nindex a1363b172..000000000\n--- a/one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchHelper.java\n+++ /dev/null\n\n@@ -1,263 +0,0 @@\n-/*\n- * Copyright 2012-2020 MarkLogic Corporation\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *\n- */\n-package com.marklogic.hub.oneui.util;\n-\n-import com.marklogic.client.DatabaseClient;\n-import com.marklogic.client.ForbiddenUserException;\n-import com.marklogic.client.MarkLogicServerException;\n-import com.marklogic.client.ResourceNotFoundException;\n-import com.marklogic.client.document.GenericDocumentManager;\n-import com.marklogic.client.io.DocumentMetadataHandle;\n-import com.marklogic.client.io.Format;\n-import com.marklogic.client.io.StringHandle;\n-import com.marklogic.client.io.marker.StructureWriteHandle;\n-import com.marklogic.client.query.QueryManager;\n-import com.marklogic.client.query.RawCombinedQueryDefinition;\n-import com.marklogic.client.query.StructuredQueryBuilder;\n-import com.marklogic.client.query.StructuredQueryBuilder.Operator;\n-import com.marklogic.client.query.StructuredQueryDefinition;\n-import com.marklogic.hub.DatabaseKind;\n-import com.marklogic.hub.HubConfig;\n-import com.marklogic.hub.oneui.exceptions.DataHubException;\n-import com.marklogic.hub.oneui.managers.ModelManager;\n-import com.marklogic.hub.oneui.models.DocSearchQueryInfo;\n-import com.marklogic.hub.oneui.models.Document;\n-import com.marklogic.hub.oneui.models.SearchQuery;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.util.CollectionUtils;\n-\n-import java.time.LocalDate;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-\n-public class SearchHelper {\n-\n-    private static final String QUERY_OPTIONS = \"exp-final-entity-options\";\n-\n-    private static final String COLLECTION_CONSTRAINT_NAME = \"Collection\";\n-    private static final String CREATED_ON_CONSTRAINT_NAME = \"createdOnRange\";\n-    private static final String JOB_WORD_CONSTRAINT_NAME = \"createdByJobWord\";\n-    private static final String JOB_RANGE_CONSTRAINT_NAME = \"createdByJob\";\n-\n-    private static final String MASTERING_AUDIT_COLLECTION_NAME = \"mdm-auditing\";\n-    private static final String[] IGNORED_SM_COLLECTION_SUFFIX = {\"auditing\", \"notification\"};\n-\n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-        .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n-\n-    private static final Logger logger = LoggerFactory.getLogger(SearchHelper.class);\n-\n-    private DatabaseClient finalDatabaseClient;\n-    private SearchOptionBuilder soBuilder;\n-    private ModelManager modelManager;\n-\n-    public SearchHelper(HubConfig hubConfig) {\n-        this.finalDatabaseClient = hubConfig.newFinalClient(hubConfig.getDbName(DatabaseKind.FINAL));\n-        this.soBuilder = new SearchOptionBuilder();\n-        this.modelManager = new ModelManager(hubConfig);\n-    }\n-\n-    public StringHandle search(SearchQuery searchQuery) {\n-        QueryManager queryMgr = finalDatabaseClient.newQueryManager();\n-\n-        // Setting criteria and searching\n-        StringHandle resultHandle = new StringHandle();\n-        resultHandle.setFormat(Format.JSON);\n-        try {\n-            //buildQuery includes datetime conversion which could cause DateTimeException or DateTimeParseException\n-            StructuredQueryDefinition queryDef = buildQuery(queryMgr, searchQuery);\n-\n-            String query = queryDef.serialize();\n-            StructureWriteHandle handle = new StringHandle(\n-                soBuilder.buildSearchOptions(query, searchQuery)).withMimetype(\"application/xml\");\n-\n-            RawCombinedQueryDefinition rcQueryDef = queryMgr\n-                .newRawCombinedQueryDefinition(handle, queryDef.getOptionsName());\n-\n-            return queryMgr.search(rcQueryDef, resultHandle, searchQuery.getStart());\n-\n-        }\n-        catch (MarkLogicServerException e) {\n-            // If there are no entityTypes to search, return empty result set\n-            if(searchQuery.getQuery().getEntityNames().isEmpty() || modelManager.getModels().size() == 0) {\n-                logger.warn(\"No entityTypes present to perform search\");\n-                return new StringHandle();\n-            }\n-\n-            logger.error(e.getLocalizedMessage());\n-\n-            // Resorting to string contains check as there isn't any other discernible difference\n-            if (e.getLocalizedMessage().contains(QUERY_OPTIONS)) {\n-                logger.error(\"If this is a configuration issue, fix the configuration issues as shown in\"\n-                    + \" the logs for enabling faceted search on the entity properties.\"\n-                    + \"\\n\"\n-                    + \"If the \" + QUERY_OPTIONS\n-                    + \" search options file is missing, please look into documentation \"\n-                    + \"for creating the options file. If the database is indexing then it might take some \"\n-                    + \"time for the file to get generated. This file is required to enable \"\n-                    + \"various search features.\");\n-            }\n-\n-            throw new DataHubException(e.getServerMessage(), e);\n-        }\n-        catch (Exception e) { //other runtime exceptions\n-            throw new DataHubException(e.getLocalizedMessage(), e);\n-        }\n-    }\n-\n-    public Optional<Document> getDocument(String docUri) {\n-        GenericDocumentManager docMgr = finalDatabaseClient.newDocumentManager();\n-        DocumentMetadataHandle documentMetadataReadHandle = new DocumentMetadataHandle();\n-\n-        // Fetching document content and meta-data\n-        try {\n-            String content = docMgr.readAs(docUri, documentMetadataReadHandle, String.class);\n-            Map<String, String> metadata = documentMetadataReadHandle.getMetadataValues();\n-            return Optional.ofNullable(new Document(content, metadata));\n-        }\n-        catch (MarkLogicServerException e) {\n-            if (e instanceof ResourceNotFoundException || e instanceof ForbiddenUserException) {\n-                logger.warn(e.getLocalizedMessage());\n-            }\n-            else { //FailedRequestException || ResourceNotResendableException\n-                logger.error(e.getLocalizedMessage());\n-            }\n-            throw new DataHubException(e.getServerMessage(), e);\n-        }\n-        catch (Exception e) { //other runtime exceptions\n-            throw new DataHubException(e.getLocalizedMessage(), e);\n-        }\n-    }\n-\n-    private StructuredQueryDefinition buildQuery(QueryManager queryMgr, SearchQuery searchQuery) {\n-        queryMgr.setPageLength(searchQuery.getPageLength());\n-        StructuredQueryBuilder queryBuilder = queryMgr.newStructuredQueryBuilder(QUERY_OPTIONS);\n-\n-        // Creating queries object\n-        List<StructuredQueryDefinition> queries = new ArrayList<>();\n-\n-        // Filtering search results for docs related to an entity\n-        if (!CollectionUtils.isEmpty(searchQuery.getQuery().getEntityNames())) {\n-            // Collections to search\n-            String[] collections = searchQuery.getQuery().getEntityNames().toArray(new String[0]);\n-            // Collections that have the mastering audit and notification docs. Excluding docs from\n-            // these collection in search results\n-            String[] excludedCollections = getExcludedCollections(\n-                searchQuery.getQuery().getEntityNames());\n-\n-            StructuredQueryDefinition finalCollQuery = queryBuilder\n-                .andNot(queryBuilder.collection(collections),\n-                    queryBuilder.collection(excludedCollections));\n-\n-            queries.add(finalCollQuery);\n-        }\n-        else { // If entity-model collections are empty, don't return any documents\n-            StructuredQueryDefinition finalCollQuery = queryBuilder.and(queryBuilder.collection());\n-            queries.add(finalCollQuery);\n-        }\n-\n-        // Filtering by facets\n-        searchQuery.getQuery().getFacets().forEach((facetType, data) -> {\n-            StructuredQueryDefinition facetDef = null;\n-\n-            if (facetType.equals(COLLECTION_CONSTRAINT_NAME)) {\n-                facetDef = queryBuilder\n-                    .collectionConstraint(facetType, data.getStringValues().toArray(new String[0]));\n-            }\n-            else if (facetType.equals(JOB_RANGE_CONSTRAINT_NAME)) {\n-                facetDef = queryBuilder\n-                    .wordConstraint(JOB_WORD_CONSTRAINT_NAME,\n-                        data.getStringValues().toArray(new String[0]));\n-            }\n-            else if (facetType.equals(CREATED_ON_CONSTRAINT_NAME)) {\n-                // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-                LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-                String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                    .format(DATE_TIME_FORMAT);\n-\n-                // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-                // Adding 1 day to end date to get docs harmonized on the end date as well.\n-                LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                    .plusDays(1);\n-                String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n-\n-                facetDef = queryBuilder\n-                    .and(queryBuilder.rangeConstraint(facetType, Operator.GE, startDateTime),\n-                        queryBuilder.rangeConstraint(facetType, Operator.LT, endDateTime));\n-            }\n-            else { // If a property is not a Hub property, then it is an Entity Property\n-                facetDef = getEntityPropertyConstraints(facetType, data, queryBuilder);\n-            }\n-\n-            if (facetDef != null) {\n-                queries.add(facetDef);\n-            }\n-        });\n-\n-        // And between all the queries\n-        StructuredQueryDefinition finalQueryDef = queryBuilder\n-            .and(queries.toArray(new StructuredQueryDefinition[0]));\n-\n-        return finalQueryDef;\n-    }\n-\n-    private String[] getExcludedCollections(List<String> entityNames) {\n-        List<String> excludedCol = new ArrayList<>();\n-        entityNames.forEach(name -> {\n-            for (String suffix : IGNORED_SM_COLLECTION_SUFFIX) {\n-                excludedCol.add(String.format(\"sm-%s-%s\", name, suffix));\n-            }\n-        });\n-        excludedCol.add(MASTERING_AUDIT_COLLECTION_NAME);\n-        return excludedCol.toArray(new String[0]);\n-    }\n-\n-    private StructuredQueryDefinition getEntityPropertyConstraints(String facetType, DocSearchQueryInfo.FacetData data,\n-                                                                   StructuredQueryBuilder queryBuilder) {\n-        StructuredQueryDefinition facetDef = null;\n-        switch (data.getDataType()) {\n-            case \"int\":\n-            case \"integer\":\n-            case \"decimal\":\n-            case \"long\":\n-            case \"float\":\n-            case \"double\":\n-            case \"date\":\n-            case \"dateTime\":\n-                String lowerBound = data.getRangeValues().getLowerBound();\n-                String upperBound = data.getRangeValues().getUpperBound();\n-                if (StringUtils.isNotEmpty(lowerBound) || StringUtils.isNotEmpty(upperBound)) {\n-                    facetDef = queryBuilder\n-                        .and(queryBuilder.rangeConstraint(facetType, Operator.GE, lowerBound),\n-                            queryBuilder.rangeConstraint(facetType, Operator.LE, upperBound));\n-                }\n-                break;\n-\n-            default:\n-                facetDef = queryBuilder.rangeConstraint(facetType, StructuredQueryBuilder.Operator.EQ,\n-                    data.getStringValues().toArray(new String[0]));\n-        }\n-        return facetDef;\n-    }\n-}\n"}}, {"oid": "0c4bcdcd60a72f039553034d9381bf58f80c7858", "url": "https://github.com/marklogic/marklogic-data-hub/commit/0c4bcdcd60a72f039553034d9381bf58f80c7858", "message": "DHFPROD-4559: Refactoring SearchHelper, SearchManager classes and deprecated content", "committedDate": "2020-03-26T16:00:55Z", "type": "forcePushed"}, {"oid": "d275aec2d5d2a1189b088b8db6a922f039521e74", "url": "https://github.com/marklogic/marklogic-data-hub/commit/d275aec2d5d2a1189b088b8db6a922f039521e74", "message": "DHFPROD-4559: Refactoring SearchHelper, SearchManager classes and deprecated content", "committedDate": "2020-03-26T17:06:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3NzEyOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3746#discussion_r398777128", "bodyText": "This is a lot of redundant logging for an exception. If the point is to make it clear what query failed, just rethrow the exception:\nthrow new RuntimeException(\"Failed to run query:  \" + query,e);", "author": "rjrudin", "createdAt": "2020-03-26T17:56:41Z", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java", "diffHunk": "@@ -188,11 +190,35 @@ private void assignRoleToUser(String username, String role) {\n         user.save();\n     }\n \n-    protected GenericDocumentManager getFinalGenericDocumentManager(DatabaseKind databaseKind) {\n-        return getFinalClient(databaseKind).newDocumentManager();\n+    protected EvalResultIterator runJsInDatabase(String query, String databaseName) {\n+        try {\n+            return getServerEval(databaseName).javascript(query).eval();\n+        }\n+        catch(FailedRequestException e) {\n+            logger.error(\"Failed run code: \" + query, e);\n+            e.printStackTrace();\n+            throw e;", "originalCommit": "d275aec2d5d2a1189b088b8db6a922f039521e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecf5e23ca76632897f2795411a531f1bda0f4d5f", "chunk": "diff --git a/one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java b/one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java\nindex 9d2023763..51aaceaeb 100644\n--- a/one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java\n+++ b/one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java\n\n@@ -190,35 +188,11 @@ public class TestHelper {\n         user.save();\n     }\n \n-    protected EvalResultIterator runJsInDatabase(String query, String databaseName) {\n-        try {\n-            return getServerEval(databaseName).javascript(query).eval();\n-        }\n-        catch(FailedRequestException e) {\n-            logger.error(\"Failed run code: \" + query, e);\n-            e.printStackTrace();\n-            throw e;\n-        }\n-    }\n-\n-    private ServerEvaluationCall getServerEval(String databaseName) {\n-        return getClientByName(databaseName).newServerEval();\n-    }\n-\n-    protected DatabaseClient getClientByName(String databaseName) {\n-        switch(databaseName) {\n-            case HubConfig.DEFAULT_FINAL_NAME:\n-                return hubConfig.newFinalClient(databaseName);\n-            case HubConfig.DEFAULT_MODULES_DB_NAME:\n-                return hubConfig.newModulesDbClient();\n-            case HubConfig.DEFAULT_JOB_NAME:\n-                return hubConfig.newJobDbClient();\n-            default:\n-                return hubConfig.newStagingClient(databaseName);\n-        }\n+    protected GenericDocumentManager getFinalGenericDocumentManager(DatabaseKind databaseKind) {\n+        return getFinalClient(databaseKind).newDocumentManager();\n     }\n \n-    protected HubConfig getHubConfig() {\n-        return this.hubConfig;\n+    protected DatabaseClient getFinalClient(DatabaseKind databaseKind) {\n+        return hubConfig.newFinalClient(hubConfig.getDbName(databaseKind));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3Nzg4Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3746#discussion_r398777883", "bodyText": "This is worth adding a unit test for - why escapeXml10 and not escapeXml? What scenario is this handling, such that it would break if we didn't call escapeXml10?", "author": "rjrudin", "createdAt": "2020-03-26T17:57:51Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchOptionBuilder.java", "diffHunk": "@@ -51,7 +51,7 @@ public String buildSearchOptions(String query, SearchQuery searchQuery) throws I\n         // Setting search string if provided by user\n         if (StringUtils.isNotEmpty(searchQuery.getQuery().getSearchStr())) {\n             sb.append(\"<qtext>\")\n-                .append(StringEscapeUtils.escapeXml(searchQuery.getQuery().getSearchStr()))\n+                .append(StringEscapeUtils.escapeXml10(searchQuery.getQuery().getSearchStr()))", "originalCommit": "d275aec2d5d2a1189b088b8db6a922f039521e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecf5e23ca76632897f2795411a531f1bda0f4d5f", "chunk": "diff --git a/one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchOptionBuilder.java b/one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchOptionBuilder.java\nindex ec3918d54..b599c18bd 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchOptionBuilder.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/oneui/util/SearchOptionBuilder.java\n\n@@ -51,7 +51,7 @@ public class SearchOptionBuilder {\n         // Setting search string if provided by user\n         if (StringUtils.isNotEmpty(searchQuery.getQuery().getSearchStr())) {\n             sb.append(\"<qtext>\")\n-                .append(StringEscapeUtils.escapeXml10(searchQuery.getQuery().getSearchStr()))\n+                .append(StringEscapeUtils.escapeXml(searchQuery.getQuery().getSearchStr()))\n                 .append(\"</qtext>\");\n         }\n         sb.append(query);\n"}}, {"oid": "ecf5e23ca76632897f2795411a531f1bda0f4d5f", "url": "https://github.com/marklogic/marklogic-data-hub/commit/ecf5e23ca76632897f2795411a531f1bda0f4d5f", "message": "DHFPROD-4559: Explorer returns empty results when there is no data", "committedDate": "2020-03-27T01:50:39Z", "type": "commit"}, {"oid": "6452684d6a4b82dfedb8ff68f190cf6eeae97ae0", "url": "https://github.com/marklogic/marklogic-data-hub/commit/6452684d6a4b82dfedb8ff68f190cf6eeae97ae0", "message": "DHFPROD-4559: Refactoring SearchHelper, SearchManager classes and deprecated content", "committedDate": "2020-03-27T01:50:39Z", "type": "commit"}, {"oid": "6452684d6a4b82dfedb8ff68f190cf6eeae97ae0", "url": "https://github.com/marklogic/marklogic-data-hub/commit/6452684d6a4b82dfedb8ff68f190cf6eeae97ae0", "message": "DHFPROD-4559: Refactoring SearchHelper, SearchManager classes and deprecated content", "committedDate": "2020-03-27T01:50:39Z", "type": "forcePushed"}]}