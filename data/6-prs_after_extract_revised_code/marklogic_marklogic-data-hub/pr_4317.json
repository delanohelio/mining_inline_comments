{"pr_number": 4317, "pr_title": "DHFPROD-3577: Global sort based on sortable properties", "pr_createdAt": "2020-07-30T17:43:59Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4317", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5ODE3Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r463198176", "bodyText": "You can use StringUtils.capitalize() here", "author": "akshaysonvane", "createdAt": "2020-07-30T18:43:00Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -371,32 +346,14 @@ private String getFileNameForDownload(JsonNode queryDocument, String fileExtensi\n         return FILE_PREFIX + queryInfo + SEPARATOR + timestamp + fileExtension;\n     }\n \n-    private void buildSortOrderOptions(StringBuilder sb, SearchQuery searchQuery) {\n+    private void buildSearchTextWithSortOperator(SearchQuery searchQuery) {\n+        StringBuilder searchTextBuilder = new StringBuilder(searchQuery.getQuery().getSearchText());\n         Optional<List<SearchQuery.SortOrder>> sortOrders = searchQuery.getSortOrder();\n-        sortOrders.ifPresent(so -> {\n-            sb.append(\"<options>\");\n-            so.forEach(o -> {\n-                sb.append(\"<sort-order\");\n-                if (!METADATA_FIELD_NAME.contains(o.getName())) {\n-                    sb.append(String.format(\" type=\\\"xs:%s\\\"\", StringEscapeUtils.escapeXml10(o.getDataType())));\n-                }\n-\n-                if (o.isAscending()) {\n-                    sb.append(\" direction=\\\"ascending\\\">\");\n-                }\n-                else {\n-                    sb.append(\" direction=\\\"descending\\\">\");\n-                }\n-\n-                if (METADATA_FIELD_NAME.contains(o.getName())) {\n-                    sb.append(String.format(\"<field name=\\\"%s\\\"/>\\n\", StringEscapeUtils.escapeXml10(o.getName())));\n-                }\n-                else {\n-                    sb.append(String.format(\"<element ns=\\\"\\\" name=\\\"%s\\\"/>\\n\", StringEscapeUtils.escapeXml10(o.getName())));\n-                }\n-                sb.append(\"</sort-order>\");\n-            });\n-            sb.append(\"</options>\");\n-        });\n+        sortOrders.ifPresent(sortOrderList -> sortOrderList.forEach(sortOrder -> {\n+            String sortOperator = \"sort\".concat(sortOrder.getSortOperator().substring(0, 1).toUpperCase()).concat(sortOrder.getSortOperator().substring(1));\n+            String sortDirection = sortOperator.concat(sortOrder.getSortDirection().substring(0, 1).toUpperCase()).concat(sortOrder.getSortDirection().substring(1));", "originalCommit": "ea9cad1264d14cf44d85f6829f6bc9fa170fbb0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1fb0d277de0cd6c5ed38b0e20343e2d01aa7d39", "chunk": "diff --git a/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java b/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java\nindex efd011208..48a5c7691 100644\n--- a/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java\n+++ b/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java\n\n@@ -350,8 +350,8 @@ public class EntitySearchManager {\n         StringBuilder searchTextBuilder = new StringBuilder(searchQuery.getQuery().getSearchText());\n         Optional<List<SearchQuery.SortOrder>> sortOrders = searchQuery.getSortOrder();\n         sortOrders.ifPresent(sortOrderList -> sortOrderList.forEach(sortOrder -> {\n-            String sortOperator = \"sort\".concat(sortOrder.getSortOperator().substring(0, 1).toUpperCase()).concat(sortOrder.getSortOperator().substring(1));\n-            String sortDirection = sortOperator.concat(sortOrder.getSortDirection().substring(0, 1).toUpperCase()).concat(sortOrder.getSortDirection().substring(1));\n+            String sortOperator = \"sort\".concat(StringUtils.capitalize(sortOrder.getSortOperator()));\n+            String sortDirection = sortOperator.concat(StringUtils.capitalize(sortOrder.getSortDirection()));\n             searchTextBuilder.append(\" \").append(sortOperator).append(\":\").append(sortDirection);\n         }));\n         searchQuery.getQuery().setSearchText(searchTextBuilder.toString().trim());\n"}}, {"oid": "e1fb0d277de0cd6c5ed38b0e20343e2d01aa7d39", "url": "https://github.com/marklogic/marklogic-data-hub/commit/e1fb0d277de0cd6c5ed38b0e20343e2d01aa7d39", "message": "DHFPROD-3577: Global sort based on sortable properties\n\nAdding tests", "committedDate": "2020-07-30T19:26:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzMTM0Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r463231342", "bodyText": "I believe we need two kinds of tests in this class:\n\nOne or more tests that verify that the correct \"criteria\" is constructed based on the SortOrder objects in the SearchQuery\nA test that verifies that inserts two customer entity instances and verifies that sorting on a property in ascending and then descending order returns the 2 instances in the correct order.", "author": "rjrudin", "createdAt": "2020-07-30T19:47:04Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -122,41 +122,6 @@ public void testSearchResultsOnNoData() {\n         assertTrue(new EntitySearchManager(getHubClient()).search(query).get().isEmpty());\n     }", "originalCommit": "e1fb0d277de0cd6c5ed38b0e20343e2d01aa7d39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28911c6bcb881fcee6257c4aa9292ff8823e5b65", "chunk": "diff --git a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java\nindex ba14a6203..46305901a 100644\n--- a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java\n+++ b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java\n\n@@ -122,6 +126,89 @@ public class EntitySearchManagerTest extends AbstractHubCentralTest {\n         assertTrue(new EntitySearchManager(getHubClient()).search(query).get().isEmpty());\n     }\n \n+    @Test\n+    public void testSortCriteria() {\n+        EntitySearchManager entitySearchManager = new EntitySearchManager(getHubClient());\n+        SearchQuery query = new SearchQuery();\n+        DocSearchQueryInfo info = new DocSearchQueryInfo();\n+        info.setEntityTypeIds(Arrays.asList(\"Customer\"));\n+        query.setQuery(info);\n+\n+        SearchQuery.SortOrder sortOrder = new SearchQuery.SortOrder();\n+        sortOrder.setPropertyName(\"customerId\");\n+        sortOrder.setSortDirection(\"ascending\");\n+        List<SearchQuery.SortOrder> sortOrderList = new ArrayList<>();\n+        sortOrderList.add(sortOrder);\n+        query.setSortOrder(sortOrderList);\n+\n+        entitySearchManager.buildSearchTextWithSortOperator(query);\n+        assertTrue(\"sort:customerIdAscending\".equals(query.getQuery().getSearchText()));\n+\n+        query.getQuery().setSearchText(\"\");\n+        sortOrderList.get(0).setSortDirection(\"descending\");\n+        entitySearchManager.buildSearchTextWithSortOperator(query);\n+        assertTrue(\"sort:customerIdDescending\".equals(query.getQuery().getSearchText()));\n+\n+        query.getQuery().setSearchText(\"Jane\");\n+        sortOrderList.get(0).setSortDirection(\"descending\");\n+        entitySearchManager.buildSearchTextWithSortOperator(query);\n+        assertTrue(\"Jane sort:customerIdDescending\".equals(query.getQuery().getSearchText()));\n+\n+        query.getQuery().setSearchText(\"Jane\");\n+        sortOrderList.get(0).setSortDirection(\"someOtherValue\");\n+        entitySearchManager.buildSearchTextWithSortOperator(query);\n+        assertTrue(\"Jane sort:customerIdDescending\".equals(query.getQuery().getSearchText()));\n+\n+        query.getQuery().setSearchText(\"Jane\");\n+        sortOrderList.get(0).setSortDirection(\"descending\");\n+        sortOrder = new SearchQuery.SortOrder();\n+        sortOrder.setPropertyName(\"customerId\");\n+        sortOrder.setSortDirection(\"ascending\");\n+        sortOrderList.add(sortOrder);\n+        entitySearchManager.buildSearchTextWithSortOperator(query);\n+        assertTrue(\"Jane sort:customerIdDescending sort:customerIdAscending\".equals(query.getQuery().getSearchText()));\n+    }\n+\n+    @Test\n+    public void testSearchResultsWithSorting() {\n+        runAsDataHubDeveloper();\n+        installProjectInFolder(\"customer-entity-with-indexes\", true);\n+        new EntityManagerImpl(getHubConfig()).saveDbIndexes();\n+        new DhsDeployer().deployAsDeveloper(getHubConfig());\n+\n+        ReferenceModelProject project = new ReferenceModelProject(getHubClient());\n+        project.createCustomerInstance(new Customer(1, \"Jane\"));\n+        project.createCustomerInstance(new Customer(2, \"Sally\"));\n+        project.createCustomerInstance(new Customer(3, \"Kim\"));\n+\n+        runAsHubCentralUser();\n+\n+        SearchQuery query = new SearchQuery();\n+        DocSearchQueryInfo info = new DocSearchQueryInfo();\n+        info.setEntityTypeIds(Arrays.asList(\"Customer\"));\n+        query.setQuery(info);\n+\n+        SearchQuery.SortOrder sortOrder = new SearchQuery.SortOrder();\n+        sortOrder.setPropertyName(\"customerId\");\n+        sortOrder.setSortDirection(\"ascending\");\n+        List<SearchQuery.SortOrder> sortOrderList = new ArrayList<>();\n+        sortOrderList.add(sortOrder);\n+        query.setSortOrder(sortOrderList);\n+\n+        StringHandle results = new EntitySearchManager(getHubClient()).search(query);\n+        ObjectNode node = readJsonObject(results.get());\n+        assertEquals(1, node.get(\"results\").get(0).get(\"entityProperties\").get(0).get(\"propertyValue\").asInt());\n+        assertEquals(2, node.get(\"results\").get(1).get(\"entityProperties\").get(0).get(\"propertyValue\").asInt());\n+        assertEquals(3, node.get(\"results\").get(2).get(\"entityProperties\").get(0).get(\"propertyValue\").asInt());\n+\n+        sortOrderList.get(0).setSortDirection(\"descending\");\n+        results = new EntitySearchManager(getHubClient()).search(query);\n+        node = readJsonObject(results.get());\n+        assertEquals(3, node.get(\"results\").get(0).get(\"entityProperties\").get(0).get(\"propertyValue\").asInt());\n+        assertEquals(2, node.get(\"results\").get(1).get(\"entityProperties\").get(0).get(\"propertyValue\").asInt());\n+        assertEquals(1, node.get(\"results\").get(2).get(\"entityProperties\").get(0).get(\"propertyValue\").asInt());\n+    }\n+\n     @Test\n     void testGetColumnNamesForRowExport() throws JsonProcessingException {\n         String json = \"{\\n\" +\n"}}, {"oid": "28911c6bcb881fcee6257c4aa9292ff8823e5b65", "url": "https://github.com/marklogic/marklogic-data-hub/commit/28911c6bcb881fcee6257c4aa9292ff8823e5b65", "message": "DHFPROD-3577: Global sort based on sortable properties", "committedDate": "2020-08-01T21:20:44Z", "type": "forcePushed"}, {"oid": "4eef6a414c01bf3eadf0825fcaf1b335c44db521", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4eef6a414c01bf3eadf0825fcaf1b335c44db521", "message": "DHFPROD-3577: Global sort based on sortable properties\n\nDHFPROD-3577: Addressing Export related changes for Sort", "committedDate": "2020-08-03T17:38:52Z", "type": "commit"}, {"oid": "4eef6a414c01bf3eadf0825fcaf1b335c44db521", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4eef6a414c01bf3eadf0825fcaf1b335c44db521", "message": "DHFPROD-3577: Global sort based on sortable properties\n\nDHFPROD-3577: Addressing Export related changes for Sort", "committedDate": "2020-08-03T17:38:52Z", "type": "forcePushed"}]}