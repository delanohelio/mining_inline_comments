{"pr_number": 4700, "pr_title": "DHFPROD-5534:Clear user modules from DHS instance", "pr_createdAt": "2020-10-10T05:05:42Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4700", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjAwMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r502986000", "bodyText": "Let's drop the logger command above instead include the message in the first arg to RuntimeException.", "author": "rjrudin", "createdAt": "2020-10-12T00:14:25Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java", "diffHunk": "@@ -402,8 +403,9 @@ public void clearUserModules(List<String> resourceNamesToNotDelete) {\n             runInDatabase(query, hubConfig.getDbName(DatabaseKind.MODULES));\n         } catch (Exception e) {\n             logger.error(\"Failed to clear user modules, cause: \" + e.getMessage(), e);\n+            throw new RuntimeException(e);", "originalCommit": "8081a44ecb039a4d979fc275a09cc063db847c9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "chunk": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java\nindex f79cc829b..a1338b9b0 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java\n\n@@ -402,8 +402,7 @@ public class DataHubImpl implements DataHub, InitializingBean {\n                     \"] ! xdmp:document-delete(.)\\n\";\n             runInDatabase(query, hubConfig.getDbName(DatabaseKind.MODULES));\n         } catch (Exception e) {\n-            logger.error(\"Failed to clear user modules, cause: \" + e.getMessage(), e);\n-            throw new RuntimeException(e);\n+            throw new RuntimeException(e.getMessage());\n         }\n         logger.info(\"Finished clearing user modules; time elapsed: \" + (System.currentTimeMillis() - start));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjA3OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r502986079", "bodyText": "No need for a constructor", "author": "rjrudin", "createdAt": "2020-10-12T00:15:00Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.admin.QueryOptionsManager;\n+import com.marklogic.client.admin.ResourceExtensionsManager;\n+import com.marklogic.client.admin.ServerConfigurationManager;\n+import com.marklogic.client.admin.TransformExtensionsManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.QueryOptionsListHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class ClearUserModulesTest extends AbstractHubCoreTest {\n+    ClearUserModulesTest() {", "originalCommit": "8081a44ecb039a4d979fc275a09cc063db847c9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\nindex 6bec2d136..c02d51f7c 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n\n@@ -8,76 +8,119 @@ import com.marklogic.client.admin.TransformExtensionsManager;\n import com.marklogic.client.io.JacksonHandle;\n import com.marklogic.client.io.QueryOptionsListHandle;\n import com.marklogic.hub.AbstractHubCoreTest;\n-import java.io.IOException;\n-import java.nio.file.Path;\n+\n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.io.FileUtils;\n+\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Assumptions;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n class ClearUserModulesTest extends AbstractHubCoreTest {\n-    ClearUserModulesTest() {\n-    }\n-\n-    @BeforeEach\n-    void setUp() throws IOException {\n-        Assumptions.assumeTrue(this.isVersionCompatibleWith520Roles());\n-        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-        Path servicesFile = this.getHubProject().getModulesDir().resolve(\"services\");\n-        servicesFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/services/mlBatches.sjs\"), servicesFile.resolve(\"myResourceExtension.sjs\").toFile());\n-        Path optionsFile = this.getHubProject().getModulesDir().resolve(\"options\");\n-        optionsFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules-staging/options/default.xml\"), optionsFile.resolve(\"myOptions.xml\").toFile());\n-        Path transformsFile = this.getHubProject().getModulesDir().resolve(\"transforms\");\n-        transformsFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/transforms/hubEntitySearchTransform.sjs\"), transformsFile.resolve(\"myTransform.sjs\").toFile());\n-        this.installProjectInFolder(\"flow-runner-test\");\n-    }\n \n     @Test\n     void testClearUserModules() {\n-        ServerConfigurationManager configMgr = this.runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n-        QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n-        Map<String, String> optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n-        Assertions.assertEquals(2, optionsMap.keySet().size());\n-        Assertions.assertTrue(optionsMap.containsKey(\"myOptions\"));\n-        String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n-        int hubCoreModuleCount = Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));\n-        TransformExtensionsManager transformExtensionsManager = configMgr.newTransformExtensionsManager();\n-        JsonNode transformsList = ((JacksonHandle)transformExtensionsManager.listTransforms(new JacksonHandle())).get();\n-        List<String> transforms = transformsList.findValuesAsText(\"name\");\n-        Assertions.assertTrue(transforms.contains(\"myTransform\"));\n-        ResourceExtensionsManager resourceExtensionsManager = configMgr.newResourceExtensionsManager();\n-        JsonNode resourceExtensionsList = ((JacksonHandle)resourceExtensionsManager.listServices(new JacksonHandle())).get();\n-        List<String> resourceExtensions = resourceExtensionsList.findValuesAsText(\"name\");\n-        Assertions.assertTrue(resourceExtensions.contains(\"myResourceExtension\"));\n-        int modulesDbCount = this.getDocumentCount(this.getHubClient().getModulesClient());\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        ModuleCounts beforeClearingModules = new ModuleCounts();\n+        beforeClearingModules.setModuleCounts();\n+\n+        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n+        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n+        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n+\n+        installProjectWithEachTypeOfModule();\n \n         try {\n-            (new DataHubImpl(this.runAsDataHubOperator())).clearUserModules();\n+            new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n             Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n-        } catch (RuntimeException var14) {\n-            Assertions.assertTrue(var14.getMessage().contains(\"com.marklogic.client.ForbiddenUserException\"));\n-            this.logger.info(\"'data-hub-operator' cannot delete user artifacts\");\n+        } catch (RuntimeException e) {\n+            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            logger.info(\"'data-hub-operator' cannot delete user modules\");\n         }\n \n-        Assertions.assertEquals(modulesDbCount, this.getDocumentCount(this.getHubClient().getModulesClient()), \"No modules are deleted by dh-operator\");\n-        (new DataHubImpl(this.runAsDataHubDeveloper())).clearUserModules();\n-        optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n-        Assertions.assertEquals(1, optionsMap.keySet().size());\n-        Assertions.assertFalse(optionsMap.containsKey(\"myOptions\"));\n-        Assertions.assertTrue(optionsMap.containsKey(\"default\"));\n-        transformsList = ((JacksonHandle)transformExtensionsManager.listTransforms(new JacksonHandle())).get();\n-        Assertions.assertEquals(transforms.size() - 1, transformsList.findValuesAsText(\"name\").size());\n-        Assertions.assertFalse(transformsList.findValuesAsText(\"name\").contains(\"myTransform\"));\n-        resourceExtensionsList = ((JacksonHandle)resourceExtensionsManager.listServices(new JacksonHandle())).get();\n-        Assertions.assertFalse(resourceExtensionsList.findValuesAsText(\"name\").contains(\"myResourceExtension\"));\n-        Assertions.assertEquals(resourceExtensions.size() - 1, resourceExtensionsList.findValuesAsText(\"name\").size());\n-        Assertions.assertEquals(hubCoreModuleCount, Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class)));\n-        Assertions.assertEquals(2, Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(\"cts.estimate(cts.collectionQuery('http://marklogic.com/entity-services/function-metadata'))\").evalAs(String.class)));\n+        ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n+        afterClearingModulesAsOperator.setModuleCounts();\n+\n+        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n+        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n+        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        checkIfCustomModulesArePresent();\n+\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+\n+        ModuleCounts afterClearingModulesAsDeveloper = new ModuleCounts();\n+        afterClearingModulesAsDeveloper.setModuleCounts();\n+\n+        Assertions.assertEquals(beforeClearingModules.optionsCount, afterClearingModulesAsDeveloper.optionsCount);\n+        Assertions.assertEquals(beforeClearingModules.transformsCount, afterClearingModulesAsDeveloper.transformsCount);\n+        Assertions.assertEquals(beforeClearingModules.resourceExtensionCount, afterClearingModulesAsDeveloper.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsDeveloper.hubCoreModuleCount);\n+        //Before test starts , additional custom modules may be present\n+        Assertions.assertTrue(afterClearingModulesAsDeveloper.totalModulesCount <= beforeClearingModules.totalModulesCount);\n+        //All custom options, transforms and extensions should have been deleted\n+        checkIfCustomModulesAreAbsent();\n+\n+        //Only function metadata that should remain is that of ootb core.sjs\n+        Assertions.assertEquals(2, Integer.parseInt(getHubClient().getModulesClient().newServerEval().javascript(\"cts.estimate(cts.collectionQuery('http://marklogic.com/entity-services/function-metadata'))\").evalAs(String.class)));\n+    }\n+\n+    private void installProjectWithEachTypeOfModule(){\n+        installProjectInFolder(\"test-projects/all-module-types\");\n+        //installing flow-runner-test so that xml/xslt are generated by mappings\n+        installProjectInFolder(\"flow-runner-test\");\n+        checkIfCustomModulesArePresent();\n+    }\n+\n+    private void checkIfCustomModulesArePresent(){\n+        List<Collection<String>> moduleTypes = new ModuleCounts().getAllModuleTypes();\n+        Assertions.assertTrue(moduleTypes.get(0).contains(\"myOptions\"));\n+        Assertions.assertTrue(moduleTypes.get(1).contains(\"myTransform\"));\n+        Assertions.assertTrue(moduleTypes.get(2).contains(\"myResourceExtension\"));\n+    }\n+\n+    private void checkIfCustomModulesAreAbsent(){\n+        List<Collection<String>> moduleTypes = new ModuleCounts().getAllModuleTypes();\n+        Assertions.assertFalse(moduleTypes.get(0).contains(\"myOptions\"));\n+        Assertions.assertFalse(moduleTypes.get(1).contains(\"myTransform\"));\n+        Assertions.assertFalse(moduleTypes.get(2).contains(\"myResourceExtension\"));\n+    }\n+\n+    class ModuleCounts {\n+        int totalModulesCount;\n+        int hubCoreModuleCount;\n+        int optionsCount;\n+        int transformsCount;\n+        int resourceExtensionCount;\n+\n+        private List<Collection<String>> getAllModuleTypes(){\n+            ServerConfigurationManager configMgr = runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n+            QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n+            Map<String, String> optionsMap = finalOptionsManager.optionsList(new QueryOptionsListHandle()).getValuesMap();\n+\n+            TransformExtensionsManager transformExtensionsManager = configMgr.newTransformExtensionsManager();\n+            JsonNode transformsList = transformExtensionsManager.listTransforms(new JacksonHandle()).get();\n+            List<String> transforms = transformsList.findValuesAsText(\"name\");\n+\n+            ResourceExtensionsManager resourceExtensionsManager = configMgr.newResourceExtensionsManager();\n+            JsonNode resourceExtensionsList = resourceExtensionsManager.listServices(new JacksonHandle()).get();\n+            List<String> resourceExtensions = resourceExtensionsList.findValuesAsText(\"name\");\n+\n+            return List.of(optionsMap.keySet(), transforms, resourceExtensions);\n+        }\n+\n+        private void setModuleCounts(){\n+            List<Collection<String>> moduleTypes = getAllModuleTypes();\n+            optionsCount = moduleTypes.get(0).size();\n+            transformsCount = moduleTypes.get(1).size();\n+            resourceExtensionCount = moduleTypes.get(2).size();\n+\n+            String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n+            hubCoreModuleCount = Integer.parseInt(getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));\n+\n+            totalModulesCount = getDocumentCount(getHubClient().getModulesClient());\n+        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjczOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r502986738", "bodyText": "It looks like this is setting up a project with a user module of each type. Just make a new test-project instead - e.g. test-project/all-module-types. And then add a file for each module type. That avoids all of this custom code, you can just use installProjectInFolder.", "author": "rjrudin", "createdAt": "2020-10-12T00:20:22Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.admin.QueryOptionsManager;\n+import com.marklogic.client.admin.ResourceExtensionsManager;\n+import com.marklogic.client.admin.ServerConfigurationManager;\n+import com.marklogic.client.admin.TransformExtensionsManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.QueryOptionsListHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class ClearUserModulesTest extends AbstractHubCoreTest {\n+    ClearUserModulesTest() {\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws IOException {\n+        Assumptions.assumeTrue(this.isVersionCompatibleWith520Roles());\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();", "originalCommit": "8081a44ecb039a4d979fc275a09cc063db847c9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\nindex 6bec2d136..c02d51f7c 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n\n@@ -8,76 +8,119 @@ import com.marklogic.client.admin.TransformExtensionsManager;\n import com.marklogic.client.io.JacksonHandle;\n import com.marklogic.client.io.QueryOptionsListHandle;\n import com.marklogic.hub.AbstractHubCoreTest;\n-import java.io.IOException;\n-import java.nio.file.Path;\n+\n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.io.FileUtils;\n+\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Assumptions;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n class ClearUserModulesTest extends AbstractHubCoreTest {\n-    ClearUserModulesTest() {\n-    }\n-\n-    @BeforeEach\n-    void setUp() throws IOException {\n-        Assumptions.assumeTrue(this.isVersionCompatibleWith520Roles());\n-        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-        Path servicesFile = this.getHubProject().getModulesDir().resolve(\"services\");\n-        servicesFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/services/mlBatches.sjs\"), servicesFile.resolve(\"myResourceExtension.sjs\").toFile());\n-        Path optionsFile = this.getHubProject().getModulesDir().resolve(\"options\");\n-        optionsFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules-staging/options/default.xml\"), optionsFile.resolve(\"myOptions.xml\").toFile());\n-        Path transformsFile = this.getHubProject().getModulesDir().resolve(\"transforms\");\n-        transformsFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/transforms/hubEntitySearchTransform.sjs\"), transformsFile.resolve(\"myTransform.sjs\").toFile());\n-        this.installProjectInFolder(\"flow-runner-test\");\n-    }\n \n     @Test\n     void testClearUserModules() {\n-        ServerConfigurationManager configMgr = this.runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n-        QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n-        Map<String, String> optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n-        Assertions.assertEquals(2, optionsMap.keySet().size());\n-        Assertions.assertTrue(optionsMap.containsKey(\"myOptions\"));\n-        String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n-        int hubCoreModuleCount = Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));\n-        TransformExtensionsManager transformExtensionsManager = configMgr.newTransformExtensionsManager();\n-        JsonNode transformsList = ((JacksonHandle)transformExtensionsManager.listTransforms(new JacksonHandle())).get();\n-        List<String> transforms = transformsList.findValuesAsText(\"name\");\n-        Assertions.assertTrue(transforms.contains(\"myTransform\"));\n-        ResourceExtensionsManager resourceExtensionsManager = configMgr.newResourceExtensionsManager();\n-        JsonNode resourceExtensionsList = ((JacksonHandle)resourceExtensionsManager.listServices(new JacksonHandle())).get();\n-        List<String> resourceExtensions = resourceExtensionsList.findValuesAsText(\"name\");\n-        Assertions.assertTrue(resourceExtensions.contains(\"myResourceExtension\"));\n-        int modulesDbCount = this.getDocumentCount(this.getHubClient().getModulesClient());\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        ModuleCounts beforeClearingModules = new ModuleCounts();\n+        beforeClearingModules.setModuleCounts();\n+\n+        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n+        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n+        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n+\n+        installProjectWithEachTypeOfModule();\n \n         try {\n-            (new DataHubImpl(this.runAsDataHubOperator())).clearUserModules();\n+            new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n             Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n-        } catch (RuntimeException var14) {\n-            Assertions.assertTrue(var14.getMessage().contains(\"com.marklogic.client.ForbiddenUserException\"));\n-            this.logger.info(\"'data-hub-operator' cannot delete user artifacts\");\n+        } catch (RuntimeException e) {\n+            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            logger.info(\"'data-hub-operator' cannot delete user modules\");\n         }\n \n-        Assertions.assertEquals(modulesDbCount, this.getDocumentCount(this.getHubClient().getModulesClient()), \"No modules are deleted by dh-operator\");\n-        (new DataHubImpl(this.runAsDataHubDeveloper())).clearUserModules();\n-        optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n-        Assertions.assertEquals(1, optionsMap.keySet().size());\n-        Assertions.assertFalse(optionsMap.containsKey(\"myOptions\"));\n-        Assertions.assertTrue(optionsMap.containsKey(\"default\"));\n-        transformsList = ((JacksonHandle)transformExtensionsManager.listTransforms(new JacksonHandle())).get();\n-        Assertions.assertEquals(transforms.size() - 1, transformsList.findValuesAsText(\"name\").size());\n-        Assertions.assertFalse(transformsList.findValuesAsText(\"name\").contains(\"myTransform\"));\n-        resourceExtensionsList = ((JacksonHandle)resourceExtensionsManager.listServices(new JacksonHandle())).get();\n-        Assertions.assertFalse(resourceExtensionsList.findValuesAsText(\"name\").contains(\"myResourceExtension\"));\n-        Assertions.assertEquals(resourceExtensions.size() - 1, resourceExtensionsList.findValuesAsText(\"name\").size());\n-        Assertions.assertEquals(hubCoreModuleCount, Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class)));\n-        Assertions.assertEquals(2, Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(\"cts.estimate(cts.collectionQuery('http://marklogic.com/entity-services/function-metadata'))\").evalAs(String.class)));\n+        ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n+        afterClearingModulesAsOperator.setModuleCounts();\n+\n+        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n+        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n+        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        checkIfCustomModulesArePresent();\n+\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+\n+        ModuleCounts afterClearingModulesAsDeveloper = new ModuleCounts();\n+        afterClearingModulesAsDeveloper.setModuleCounts();\n+\n+        Assertions.assertEquals(beforeClearingModules.optionsCount, afterClearingModulesAsDeveloper.optionsCount);\n+        Assertions.assertEquals(beforeClearingModules.transformsCount, afterClearingModulesAsDeveloper.transformsCount);\n+        Assertions.assertEquals(beforeClearingModules.resourceExtensionCount, afterClearingModulesAsDeveloper.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsDeveloper.hubCoreModuleCount);\n+        //Before test starts , additional custom modules may be present\n+        Assertions.assertTrue(afterClearingModulesAsDeveloper.totalModulesCount <= beforeClearingModules.totalModulesCount);\n+        //All custom options, transforms and extensions should have been deleted\n+        checkIfCustomModulesAreAbsent();\n+\n+        //Only function metadata that should remain is that of ootb core.sjs\n+        Assertions.assertEquals(2, Integer.parseInt(getHubClient().getModulesClient().newServerEval().javascript(\"cts.estimate(cts.collectionQuery('http://marklogic.com/entity-services/function-metadata'))\").evalAs(String.class)));\n+    }\n+\n+    private void installProjectWithEachTypeOfModule(){\n+        installProjectInFolder(\"test-projects/all-module-types\");\n+        //installing flow-runner-test so that xml/xslt are generated by mappings\n+        installProjectInFolder(\"flow-runner-test\");\n+        checkIfCustomModulesArePresent();\n+    }\n+\n+    private void checkIfCustomModulesArePresent(){\n+        List<Collection<String>> moduleTypes = new ModuleCounts().getAllModuleTypes();\n+        Assertions.assertTrue(moduleTypes.get(0).contains(\"myOptions\"));\n+        Assertions.assertTrue(moduleTypes.get(1).contains(\"myTransform\"));\n+        Assertions.assertTrue(moduleTypes.get(2).contains(\"myResourceExtension\"));\n+    }\n+\n+    private void checkIfCustomModulesAreAbsent(){\n+        List<Collection<String>> moduleTypes = new ModuleCounts().getAllModuleTypes();\n+        Assertions.assertFalse(moduleTypes.get(0).contains(\"myOptions\"));\n+        Assertions.assertFalse(moduleTypes.get(1).contains(\"myTransform\"));\n+        Assertions.assertFalse(moduleTypes.get(2).contains(\"myResourceExtension\"));\n+    }\n+\n+    class ModuleCounts {\n+        int totalModulesCount;\n+        int hubCoreModuleCount;\n+        int optionsCount;\n+        int transformsCount;\n+        int resourceExtensionCount;\n+\n+        private List<Collection<String>> getAllModuleTypes(){\n+            ServerConfigurationManager configMgr = runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n+            QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n+            Map<String, String> optionsMap = finalOptionsManager.optionsList(new QueryOptionsListHandle()).getValuesMap();\n+\n+            TransformExtensionsManager transformExtensionsManager = configMgr.newTransformExtensionsManager();\n+            JsonNode transformsList = transformExtensionsManager.listTransforms(new JacksonHandle()).get();\n+            List<String> transforms = transformsList.findValuesAsText(\"name\");\n+\n+            ResourceExtensionsManager resourceExtensionsManager = configMgr.newResourceExtensionsManager();\n+            JsonNode resourceExtensionsList = resourceExtensionsManager.listServices(new JacksonHandle()).get();\n+            List<String> resourceExtensions = resourceExtensionsList.findValuesAsText(\"name\");\n+\n+            return List.of(optionsMap.keySet(), transforms, resourceExtensions);\n+        }\n+\n+        private void setModuleCounts(){\n+            List<Collection<String>> moduleTypes = getAllModuleTypes();\n+            optionsCount = moduleTypes.get(0).size();\n+            transformsCount = moduleTypes.get(1).size();\n+            resourceExtensionCount = moduleTypes.get(2).size();\n+\n+            String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n+            hubCoreModuleCount = Integer.parseInt(getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));\n+\n+            totalModulesCount = getDocumentCount(getHubClient().getModulesClient());\n+        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjkzOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r502986939", "bodyText": "I think these assertions to verify that each user module type was actually loaded should be part of the setup. Though since there's only one test method, I wouldn't bother with a BeforeEach method. Just make a private method called \"installProjectWithEachTypeOfModule\" - that documents what's going on here too. That method will use installProjectInFolder and will then verify that each user module exists.", "author": "rjrudin", "createdAt": "2020-10-12T00:22:19Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.admin.QueryOptionsManager;\n+import com.marklogic.client.admin.ResourceExtensionsManager;\n+import com.marklogic.client.admin.ServerConfigurationManager;\n+import com.marklogic.client.admin.TransformExtensionsManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.QueryOptionsListHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class ClearUserModulesTest extends AbstractHubCoreTest {\n+    ClearUserModulesTest() {\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws IOException {\n+        Assumptions.assumeTrue(this.isVersionCompatibleWith520Roles());\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        Path servicesFile = this.getHubProject().getModulesDir().resolve(\"services\");\n+        servicesFile.toFile().mkdirs();\n+        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/services/mlBatches.sjs\"), servicesFile.resolve(\"myResourceExtension.sjs\").toFile());\n+        Path optionsFile = this.getHubProject().getModulesDir().resolve(\"options\");\n+        optionsFile.toFile().mkdirs();\n+        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules-staging/options/default.xml\"), optionsFile.resolve(\"myOptions.xml\").toFile());\n+        Path transformsFile = this.getHubProject().getModulesDir().resolve(\"transforms\");\n+        transformsFile.toFile().mkdirs();\n+        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/transforms/hubEntitySearchTransform.sjs\"), transformsFile.resolve(\"myTransform.sjs\").toFile());\n+        this.installProjectInFolder(\"flow-runner-test\");\n+    }\n+\n+    @Test\n+    void testClearUserModules() {\n+        ServerConfigurationManager configMgr = this.runAsDataHubDeveloper().newFinalClient().newServerConfigManager();", "originalCommit": "8081a44ecb039a4d979fc275a09cc063db847c9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\nindex 6bec2d136..c02d51f7c 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n\n@@ -8,76 +8,119 @@ import com.marklogic.client.admin.TransformExtensionsManager;\n import com.marklogic.client.io.JacksonHandle;\n import com.marklogic.client.io.QueryOptionsListHandle;\n import com.marklogic.hub.AbstractHubCoreTest;\n-import java.io.IOException;\n-import java.nio.file.Path;\n+\n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.io.FileUtils;\n+\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Assumptions;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n class ClearUserModulesTest extends AbstractHubCoreTest {\n-    ClearUserModulesTest() {\n-    }\n-\n-    @BeforeEach\n-    void setUp() throws IOException {\n-        Assumptions.assumeTrue(this.isVersionCompatibleWith520Roles());\n-        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-        Path servicesFile = this.getHubProject().getModulesDir().resolve(\"services\");\n-        servicesFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/services/mlBatches.sjs\"), servicesFile.resolve(\"myResourceExtension.sjs\").toFile());\n-        Path optionsFile = this.getHubProject().getModulesDir().resolve(\"options\");\n-        optionsFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules-staging/options/default.xml\"), optionsFile.resolve(\"myOptions.xml\").toFile());\n-        Path transformsFile = this.getHubProject().getModulesDir().resolve(\"transforms\");\n-        transformsFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/transforms/hubEntitySearchTransform.sjs\"), transformsFile.resolve(\"myTransform.sjs\").toFile());\n-        this.installProjectInFolder(\"flow-runner-test\");\n-    }\n \n     @Test\n     void testClearUserModules() {\n-        ServerConfigurationManager configMgr = this.runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n-        QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n-        Map<String, String> optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n-        Assertions.assertEquals(2, optionsMap.keySet().size());\n-        Assertions.assertTrue(optionsMap.containsKey(\"myOptions\"));\n-        String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n-        int hubCoreModuleCount = Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));\n-        TransformExtensionsManager transformExtensionsManager = configMgr.newTransformExtensionsManager();\n-        JsonNode transformsList = ((JacksonHandle)transformExtensionsManager.listTransforms(new JacksonHandle())).get();\n-        List<String> transforms = transformsList.findValuesAsText(\"name\");\n-        Assertions.assertTrue(transforms.contains(\"myTransform\"));\n-        ResourceExtensionsManager resourceExtensionsManager = configMgr.newResourceExtensionsManager();\n-        JsonNode resourceExtensionsList = ((JacksonHandle)resourceExtensionsManager.listServices(new JacksonHandle())).get();\n-        List<String> resourceExtensions = resourceExtensionsList.findValuesAsText(\"name\");\n-        Assertions.assertTrue(resourceExtensions.contains(\"myResourceExtension\"));\n-        int modulesDbCount = this.getDocumentCount(this.getHubClient().getModulesClient());\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        ModuleCounts beforeClearingModules = new ModuleCounts();\n+        beforeClearingModules.setModuleCounts();\n+\n+        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n+        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n+        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n+\n+        installProjectWithEachTypeOfModule();\n \n         try {\n-            (new DataHubImpl(this.runAsDataHubOperator())).clearUserModules();\n+            new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n             Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n-        } catch (RuntimeException var14) {\n-            Assertions.assertTrue(var14.getMessage().contains(\"com.marklogic.client.ForbiddenUserException\"));\n-            this.logger.info(\"'data-hub-operator' cannot delete user artifacts\");\n+        } catch (RuntimeException e) {\n+            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            logger.info(\"'data-hub-operator' cannot delete user modules\");\n         }\n \n-        Assertions.assertEquals(modulesDbCount, this.getDocumentCount(this.getHubClient().getModulesClient()), \"No modules are deleted by dh-operator\");\n-        (new DataHubImpl(this.runAsDataHubDeveloper())).clearUserModules();\n-        optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n-        Assertions.assertEquals(1, optionsMap.keySet().size());\n-        Assertions.assertFalse(optionsMap.containsKey(\"myOptions\"));\n-        Assertions.assertTrue(optionsMap.containsKey(\"default\"));\n-        transformsList = ((JacksonHandle)transformExtensionsManager.listTransforms(new JacksonHandle())).get();\n-        Assertions.assertEquals(transforms.size() - 1, transformsList.findValuesAsText(\"name\").size());\n-        Assertions.assertFalse(transformsList.findValuesAsText(\"name\").contains(\"myTransform\"));\n-        resourceExtensionsList = ((JacksonHandle)resourceExtensionsManager.listServices(new JacksonHandle())).get();\n-        Assertions.assertFalse(resourceExtensionsList.findValuesAsText(\"name\").contains(\"myResourceExtension\"));\n-        Assertions.assertEquals(resourceExtensions.size() - 1, resourceExtensionsList.findValuesAsText(\"name\").size());\n-        Assertions.assertEquals(hubCoreModuleCount, Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class)));\n-        Assertions.assertEquals(2, Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(\"cts.estimate(cts.collectionQuery('http://marklogic.com/entity-services/function-metadata'))\").evalAs(String.class)));\n+        ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n+        afterClearingModulesAsOperator.setModuleCounts();\n+\n+        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n+        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n+        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        checkIfCustomModulesArePresent();\n+\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+\n+        ModuleCounts afterClearingModulesAsDeveloper = new ModuleCounts();\n+        afterClearingModulesAsDeveloper.setModuleCounts();\n+\n+        Assertions.assertEquals(beforeClearingModules.optionsCount, afterClearingModulesAsDeveloper.optionsCount);\n+        Assertions.assertEquals(beforeClearingModules.transformsCount, afterClearingModulesAsDeveloper.transformsCount);\n+        Assertions.assertEquals(beforeClearingModules.resourceExtensionCount, afterClearingModulesAsDeveloper.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsDeveloper.hubCoreModuleCount);\n+        //Before test starts , additional custom modules may be present\n+        Assertions.assertTrue(afterClearingModulesAsDeveloper.totalModulesCount <= beforeClearingModules.totalModulesCount);\n+        //All custom options, transforms and extensions should have been deleted\n+        checkIfCustomModulesAreAbsent();\n+\n+        //Only function metadata that should remain is that of ootb core.sjs\n+        Assertions.assertEquals(2, Integer.parseInt(getHubClient().getModulesClient().newServerEval().javascript(\"cts.estimate(cts.collectionQuery('http://marklogic.com/entity-services/function-metadata'))\").evalAs(String.class)));\n+    }\n+\n+    private void installProjectWithEachTypeOfModule(){\n+        installProjectInFolder(\"test-projects/all-module-types\");\n+        //installing flow-runner-test so that xml/xslt are generated by mappings\n+        installProjectInFolder(\"flow-runner-test\");\n+        checkIfCustomModulesArePresent();\n+    }\n+\n+    private void checkIfCustomModulesArePresent(){\n+        List<Collection<String>> moduleTypes = new ModuleCounts().getAllModuleTypes();\n+        Assertions.assertTrue(moduleTypes.get(0).contains(\"myOptions\"));\n+        Assertions.assertTrue(moduleTypes.get(1).contains(\"myTransform\"));\n+        Assertions.assertTrue(moduleTypes.get(2).contains(\"myResourceExtension\"));\n+    }\n+\n+    private void checkIfCustomModulesAreAbsent(){\n+        List<Collection<String>> moduleTypes = new ModuleCounts().getAllModuleTypes();\n+        Assertions.assertFalse(moduleTypes.get(0).contains(\"myOptions\"));\n+        Assertions.assertFalse(moduleTypes.get(1).contains(\"myTransform\"));\n+        Assertions.assertFalse(moduleTypes.get(2).contains(\"myResourceExtension\"));\n+    }\n+\n+    class ModuleCounts {\n+        int totalModulesCount;\n+        int hubCoreModuleCount;\n+        int optionsCount;\n+        int transformsCount;\n+        int resourceExtensionCount;\n+\n+        private List<Collection<String>> getAllModuleTypes(){\n+            ServerConfigurationManager configMgr = runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n+            QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n+            Map<String, String> optionsMap = finalOptionsManager.optionsList(new QueryOptionsListHandle()).getValuesMap();\n+\n+            TransformExtensionsManager transformExtensionsManager = configMgr.newTransformExtensionsManager();\n+            JsonNode transformsList = transformExtensionsManager.listTransforms(new JacksonHandle()).get();\n+            List<String> transforms = transformsList.findValuesAsText(\"name\");\n+\n+            ResourceExtensionsManager resourceExtensionsManager = configMgr.newResourceExtensionsManager();\n+            JsonNode resourceExtensionsList = resourceExtensionsManager.listServices(new JacksonHandle()).get();\n+            List<String> resourceExtensions = resourceExtensionsList.findValuesAsText(\"name\");\n+\n+            return List.of(optionsMap.keySet(), transforms, resourceExtensions);\n+        }\n+\n+        private void setModuleCounts(){\n+            List<Collection<String>> moduleTypes = getAllModuleTypes();\n+            optionsCount = moduleTypes.get(0).size();\n+            transformsCount = moduleTypes.get(1).size();\n+            resourceExtensionCount = moduleTypes.get(2).size();\n+\n+            String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n+            hubCoreModuleCount = Integer.parseInt(getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));\n+\n+            totalModulesCount = getDocumentCount(getHubClient().getModulesClient());\n+        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NzQwNg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r502987406", "bodyText": "I think that before you install the project with user modules, you need to get counts of all docs in the modules database, all docs in hub-core-module, and then counts of each REST extension type that DHF installs - services, transforms, and options.\nThen you install the user modules project, and you verify that the counts are now increased by the appropriate amount.\nThen you clear user modules, and you verify the counts are back to what they used to be.\nTo simplify all of this, I recommend creating a class - ModuleCounts - that has 5 fields, one for each count. Then make a private method that returns a ModuleCounts, doing all the queries necessary to get the correct amount.\nI know that's a lot to test, but it's much better to automate this, this would be a real pain to test manually. And because of REST extensions resulting in multiple modules, we really need to verify individual counts of each extension type.", "author": "rjrudin", "createdAt": "2020-10-12T00:26:05Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.admin.QueryOptionsManager;\n+import com.marklogic.client.admin.ResourceExtensionsManager;\n+import com.marklogic.client.admin.ServerConfigurationManager;\n+import com.marklogic.client.admin.TransformExtensionsManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.QueryOptionsListHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class ClearUserModulesTest extends AbstractHubCoreTest {\n+    ClearUserModulesTest() {\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws IOException {\n+        Assumptions.assumeTrue(this.isVersionCompatibleWith520Roles());\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        Path servicesFile = this.getHubProject().getModulesDir().resolve(\"services\");\n+        servicesFile.toFile().mkdirs();\n+        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/services/mlBatches.sjs\"), servicesFile.resolve(\"myResourceExtension.sjs\").toFile());\n+        Path optionsFile = this.getHubProject().getModulesDir().resolve(\"options\");\n+        optionsFile.toFile().mkdirs();\n+        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules-staging/options/default.xml\"), optionsFile.resolve(\"myOptions.xml\").toFile());\n+        Path transformsFile = this.getHubProject().getModulesDir().resolve(\"transforms\");\n+        transformsFile.toFile().mkdirs();\n+        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/transforms/hubEntitySearchTransform.sjs\"), transformsFile.resolve(\"myTransform.sjs\").toFile());\n+        this.installProjectInFolder(\"flow-runner-test\");\n+    }\n+\n+    @Test\n+    void testClearUserModules() {\n+        ServerConfigurationManager configMgr = this.runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n+        QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n+        Map<String, String> optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n+        Assertions.assertEquals(2, optionsMap.keySet().size());\n+        Assertions.assertTrue(optionsMap.containsKey(\"myOptions\"));\n+        String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n+        int hubCoreModuleCount = Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));", "originalCommit": "8081a44ecb039a4d979fc275a09cc063db847c9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\nindex 6bec2d136..c02d51f7c 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n\n@@ -8,76 +8,119 @@ import com.marklogic.client.admin.TransformExtensionsManager;\n import com.marklogic.client.io.JacksonHandle;\n import com.marklogic.client.io.QueryOptionsListHandle;\n import com.marklogic.hub.AbstractHubCoreTest;\n-import java.io.IOException;\n-import java.nio.file.Path;\n+\n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.io.FileUtils;\n+\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Assumptions;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n class ClearUserModulesTest extends AbstractHubCoreTest {\n-    ClearUserModulesTest() {\n-    }\n-\n-    @BeforeEach\n-    void setUp() throws IOException {\n-        Assumptions.assumeTrue(this.isVersionCompatibleWith520Roles());\n-        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-        Path servicesFile = this.getHubProject().getModulesDir().resolve(\"services\");\n-        servicesFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/services/mlBatches.sjs\"), servicesFile.resolve(\"myResourceExtension.sjs\").toFile());\n-        Path optionsFile = this.getHubProject().getModulesDir().resolve(\"options\");\n-        optionsFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules-staging/options/default.xml\"), optionsFile.resolve(\"myOptions.xml\").toFile());\n-        Path transformsFile = this.getHubProject().getModulesDir().resolve(\"transforms\");\n-        transformsFile.toFile().mkdirs();\n-        FileUtils.copyInputStreamToFile(classLoader.getResourceAsStream(\"ml-modules/transforms/hubEntitySearchTransform.sjs\"), transformsFile.resolve(\"myTransform.sjs\").toFile());\n-        this.installProjectInFolder(\"flow-runner-test\");\n-    }\n \n     @Test\n     void testClearUserModules() {\n-        ServerConfigurationManager configMgr = this.runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n-        QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n-        Map<String, String> optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n-        Assertions.assertEquals(2, optionsMap.keySet().size());\n-        Assertions.assertTrue(optionsMap.containsKey(\"myOptions\"));\n-        String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n-        int hubCoreModuleCount = Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));\n-        TransformExtensionsManager transformExtensionsManager = configMgr.newTransformExtensionsManager();\n-        JsonNode transformsList = ((JacksonHandle)transformExtensionsManager.listTransforms(new JacksonHandle())).get();\n-        List<String> transforms = transformsList.findValuesAsText(\"name\");\n-        Assertions.assertTrue(transforms.contains(\"myTransform\"));\n-        ResourceExtensionsManager resourceExtensionsManager = configMgr.newResourceExtensionsManager();\n-        JsonNode resourceExtensionsList = ((JacksonHandle)resourceExtensionsManager.listServices(new JacksonHandle())).get();\n-        List<String> resourceExtensions = resourceExtensionsList.findValuesAsText(\"name\");\n-        Assertions.assertTrue(resourceExtensions.contains(\"myResourceExtension\"));\n-        int modulesDbCount = this.getDocumentCount(this.getHubClient().getModulesClient());\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        ModuleCounts beforeClearingModules = new ModuleCounts();\n+        beforeClearingModules.setModuleCounts();\n+\n+        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n+        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n+        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n+\n+        installProjectWithEachTypeOfModule();\n \n         try {\n-            (new DataHubImpl(this.runAsDataHubOperator())).clearUserModules();\n+            new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n             Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n-        } catch (RuntimeException var14) {\n-            Assertions.assertTrue(var14.getMessage().contains(\"com.marklogic.client.ForbiddenUserException\"));\n-            this.logger.info(\"'data-hub-operator' cannot delete user artifacts\");\n+        } catch (RuntimeException e) {\n+            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            logger.info(\"'data-hub-operator' cannot delete user modules\");\n         }\n \n-        Assertions.assertEquals(modulesDbCount, this.getDocumentCount(this.getHubClient().getModulesClient()), \"No modules are deleted by dh-operator\");\n-        (new DataHubImpl(this.runAsDataHubDeveloper())).clearUserModules();\n-        optionsMap = ((QueryOptionsListHandle)finalOptionsManager.optionsList(new QueryOptionsListHandle())).getValuesMap();\n-        Assertions.assertEquals(1, optionsMap.keySet().size());\n-        Assertions.assertFalse(optionsMap.containsKey(\"myOptions\"));\n-        Assertions.assertTrue(optionsMap.containsKey(\"default\"));\n-        transformsList = ((JacksonHandle)transformExtensionsManager.listTransforms(new JacksonHandle())).get();\n-        Assertions.assertEquals(transforms.size() - 1, transformsList.findValuesAsText(\"name\").size());\n-        Assertions.assertFalse(transformsList.findValuesAsText(\"name\").contains(\"myTransform\"));\n-        resourceExtensionsList = ((JacksonHandle)resourceExtensionsManager.listServices(new JacksonHandle())).get();\n-        Assertions.assertFalse(resourceExtensionsList.findValuesAsText(\"name\").contains(\"myResourceExtension\"));\n-        Assertions.assertEquals(resourceExtensions.size() - 1, resourceExtensionsList.findValuesAsText(\"name\").size());\n-        Assertions.assertEquals(hubCoreModuleCount, Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class)));\n-        Assertions.assertEquals(2, Integer.parseInt((String)this.getHubClient().getModulesClient().newServerEval().javascript(\"cts.estimate(cts.collectionQuery('http://marklogic.com/entity-services/function-metadata'))\").evalAs(String.class)));\n+        ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n+        afterClearingModulesAsOperator.setModuleCounts();\n+\n+        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n+        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n+        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        checkIfCustomModulesArePresent();\n+\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+\n+        ModuleCounts afterClearingModulesAsDeveloper = new ModuleCounts();\n+        afterClearingModulesAsDeveloper.setModuleCounts();\n+\n+        Assertions.assertEquals(beforeClearingModules.optionsCount, afterClearingModulesAsDeveloper.optionsCount);\n+        Assertions.assertEquals(beforeClearingModules.transformsCount, afterClearingModulesAsDeveloper.transformsCount);\n+        Assertions.assertEquals(beforeClearingModules.resourceExtensionCount, afterClearingModulesAsDeveloper.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsDeveloper.hubCoreModuleCount);\n+        //Before test starts , additional custom modules may be present\n+        Assertions.assertTrue(afterClearingModulesAsDeveloper.totalModulesCount <= beforeClearingModules.totalModulesCount);\n+        //All custom options, transforms and extensions should have been deleted\n+        checkIfCustomModulesAreAbsent();\n+\n+        //Only function metadata that should remain is that of ootb core.sjs\n+        Assertions.assertEquals(2, Integer.parseInt(getHubClient().getModulesClient().newServerEval().javascript(\"cts.estimate(cts.collectionQuery('http://marklogic.com/entity-services/function-metadata'))\").evalAs(String.class)));\n+    }\n+\n+    private void installProjectWithEachTypeOfModule(){\n+        installProjectInFolder(\"test-projects/all-module-types\");\n+        //installing flow-runner-test so that xml/xslt are generated by mappings\n+        installProjectInFolder(\"flow-runner-test\");\n+        checkIfCustomModulesArePresent();\n+    }\n+\n+    private void checkIfCustomModulesArePresent(){\n+        List<Collection<String>> moduleTypes = new ModuleCounts().getAllModuleTypes();\n+        Assertions.assertTrue(moduleTypes.get(0).contains(\"myOptions\"));\n+        Assertions.assertTrue(moduleTypes.get(1).contains(\"myTransform\"));\n+        Assertions.assertTrue(moduleTypes.get(2).contains(\"myResourceExtension\"));\n+    }\n+\n+    private void checkIfCustomModulesAreAbsent(){\n+        List<Collection<String>> moduleTypes = new ModuleCounts().getAllModuleTypes();\n+        Assertions.assertFalse(moduleTypes.get(0).contains(\"myOptions\"));\n+        Assertions.assertFalse(moduleTypes.get(1).contains(\"myTransform\"));\n+        Assertions.assertFalse(moduleTypes.get(2).contains(\"myResourceExtension\"));\n+    }\n+\n+    class ModuleCounts {\n+        int totalModulesCount;\n+        int hubCoreModuleCount;\n+        int optionsCount;\n+        int transformsCount;\n+        int resourceExtensionCount;\n+\n+        private List<Collection<String>> getAllModuleTypes(){\n+            ServerConfigurationManager configMgr = runAsDataHubDeveloper().newFinalClient().newServerConfigManager();\n+            QueryOptionsManager finalOptionsManager = configMgr.newQueryOptionsManager();\n+            Map<String, String> optionsMap = finalOptionsManager.optionsList(new QueryOptionsListHandle()).getValuesMap();\n+\n+            TransformExtensionsManager transformExtensionsManager = configMgr.newTransformExtensionsManager();\n+            JsonNode transformsList = transformExtensionsManager.listTransforms(new JacksonHandle()).get();\n+            List<String> transforms = transformsList.findValuesAsText(\"name\");\n+\n+            ResourceExtensionsManager resourceExtensionsManager = configMgr.newResourceExtensionsManager();\n+            JsonNode resourceExtensionsList = resourceExtensionsManager.listServices(new JacksonHandle()).get();\n+            List<String> resourceExtensions = resourceExtensionsList.findValuesAsText(\"name\");\n+\n+            return List.of(optionsMap.keySet(), transforms, resourceExtensions);\n+        }\n+\n+        private void setModuleCounts(){\n+            List<Collection<String>> moduleTypes = getAllModuleTypes();\n+            optionsCount = moduleTypes.get(0).size();\n+            transformsCount = moduleTypes.get(1).size();\n+            resourceExtensionCount = moduleTypes.get(2).size();\n+\n+            String query = \"cts.estimate(cts.collectionQuery('hub-core-module'))\";\n+            hubCoreModuleCount = Integer.parseInt(getHubClient().getModulesClient().newServerEval().javascript(query).evalAs(String.class));\n+\n+            totalModulesCount = getDocumentCount(getHubClient().getModulesClient());\n+        }\n     }\n }\n"}}, {"oid": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "url": "https://github.com/marklogic/marklogic-data-hub/commit/7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "message": "DHFPROD-5534:Clear user modules from DHS instance", "committedDate": "2020-10-12T17:00:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDAzMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r503430033", "bodyText": "Let's keep the message though that was being logged, but just put it in the exception - e.g. throw new RuntimeException(\"Failed to clear user modules, cause: \" + e.getMessage(), e).", "author": "rjrudin", "createdAt": "2020-10-12T17:14:57Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java", "diffHunk": "@@ -401,9 +402,9 @@ public void clearUserModules(List<String> resourceNamesToNotDelete) {\n                     \"] ! xdmp:document-delete(.)\\n\";\n             runInDatabase(query, hubConfig.getDbName(DatabaseKind.MODULES));\n         } catch (Exception e) {\n-            logger.error(\"Failed to clear user modules, cause: \" + e.getMessage(), e);\n+            throw new RuntimeException(e.getMessage());", "originalCommit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b68b021d82c7bbf8d4533975accdb0e79b54e3", "chunk": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java\nindex a1338b9b0..c497313b3 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/DataHubImpl.java\n\n@@ -402,7 +402,7 @@ public class DataHubImpl implements DataHub, InitializingBean {\n                     \"] ! xdmp:document-delete(.)\\n\";\n             runInDatabase(query, hubConfig.getDbName(DatabaseKind.MODULES));\n         } catch (Exception e) {\n-            throw new RuntimeException(e.getMessage());\n+            throw new RuntimeException(\"Failed to clear user modules, cause: \" + e.getMessage(), e);\n         }\n         logger.info(\"Finished clearing user modules; time elapsed: \" + (System.currentTimeMillis() - start));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMzIyMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r503433220", "bodyText": "This is fine, but for future tests, check out the Intellij Tips Wiki page I just wrote that explains how to auto-import static functions. The test is easier to read if \"Assertions.\" isn't repeated in many places.", "author": "rjrudin", "createdAt": "2020-10-12T17:21:54Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.admin.QueryOptionsManager;\n+import com.marklogic.client.admin.ResourceExtensionsManager;\n+import com.marklogic.client.admin.ServerConfigurationManager;\n+import com.marklogic.client.admin.TransformExtensionsManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.QueryOptionsListHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n+\n+class ClearUserModulesTest extends AbstractHubCoreTest {\n+\n+    @Test\n+    void testClearUserModules() {\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());", "originalCommit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b68b021d82c7bbf8d4533975accdb0e79b54e3", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\nindex c02d51f7c..cf41ce6ad 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n\n@@ -13,40 +13,37 @@ import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n \n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Assumptions;\n import org.junit.jupiter.api.Test;\n \n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static org.springframework.test.util.AssertionErrors.fail;\n+\n class ClearUserModulesTest extends AbstractHubCoreTest {\n \n     @Test\n     void testClearUserModules() {\n-        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n-        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        assumeTrue(isVersionCompatibleWith520Roles());\n         ModuleCounts beforeClearingModules = new ModuleCounts();\n         beforeClearingModules.setModuleCounts();\n \n-        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n-        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n-        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n-\n         installProjectWithEachTypeOfModule();\n \n         try {\n             new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n-            Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n+            fail(\"'data-hub-operator' should not be able delete user modules\");\n         } catch (RuntimeException e) {\n-            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n             logger.info(\"'data-hub-operator' cannot delete user modules\");\n         }\n \n         ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n         afterClearingModulesAsOperator.setModuleCounts();\n \n-        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n-        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n-        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n-        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        assertEquals(beforeClearingModules.optionsCount + 1, afterClearingModulesAsOperator.optionsCount);\n+        assertEquals(beforeClearingModules.transformsCount + 1, afterClearingModulesAsOperator.transformsCount);\n+        assertEquals(beforeClearingModules.resourceExtensionCount + 1, afterClearingModulesAsOperator.resourceExtensionCount);\n+        assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n         checkIfCustomModulesArePresent();\n \n         new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNDI1OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r503434259", "bodyText": "I don't think we want precise counts here, because these assertions will break whenever a REST extension is added/removed (most likely removed). I think all we care about is capturing the initial counts. No need to assert on the expected values.", "author": "rjrudin", "createdAt": "2020-10-12T17:24:11Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.admin.QueryOptionsManager;\n+import com.marklogic.client.admin.ResourceExtensionsManager;\n+import com.marklogic.client.admin.ServerConfigurationManager;\n+import com.marklogic.client.admin.TransformExtensionsManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.QueryOptionsListHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n+\n+class ClearUserModulesTest extends AbstractHubCoreTest {\n+\n+    @Test\n+    void testClearUserModules() {\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        ModuleCounts beforeClearingModules = new ModuleCounts();\n+        beforeClearingModules.setModuleCounts();\n+\n+        Assertions.assertEquals(1, beforeClearingModules.optionsCount);", "originalCommit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b68b021d82c7bbf8d4533975accdb0e79b54e3", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\nindex c02d51f7c..cf41ce6ad 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n\n@@ -13,40 +13,37 @@ import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n \n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Assumptions;\n import org.junit.jupiter.api.Test;\n \n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static org.springframework.test.util.AssertionErrors.fail;\n+\n class ClearUserModulesTest extends AbstractHubCoreTest {\n \n     @Test\n     void testClearUserModules() {\n-        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n-        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        assumeTrue(isVersionCompatibleWith520Roles());\n         ModuleCounts beforeClearingModules = new ModuleCounts();\n         beforeClearingModules.setModuleCounts();\n \n-        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n-        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n-        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n-\n         installProjectWithEachTypeOfModule();\n \n         try {\n             new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n-            Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n+            fail(\"'data-hub-operator' should not be able delete user modules\");\n         } catch (RuntimeException e) {\n-            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n             logger.info(\"'data-hub-operator' cannot delete user modules\");\n         }\n \n         ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n         afterClearingModulesAsOperator.setModuleCounts();\n \n-        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n-        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n-        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n-        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        assertEquals(beforeClearingModules.optionsCount + 1, afterClearingModulesAsOperator.optionsCount);\n+        assertEquals(beforeClearingModules.transformsCount + 1, afterClearingModulesAsOperator.transformsCount);\n+        assertEquals(beforeClearingModules.resourceExtensionCount + 1, afterClearingModulesAsOperator.resourceExtensionCount);\n+        assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n         checkIfCustomModulesArePresent();\n \n         new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNDUwMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r503434502", "bodyText": "These assertions should then be relative to the before counts - e.g. optionsCount = before + 1.", "author": "rjrudin", "createdAt": "2020-10-12T17:24:43Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.admin.QueryOptionsManager;\n+import com.marklogic.client.admin.ResourceExtensionsManager;\n+import com.marklogic.client.admin.ServerConfigurationManager;\n+import com.marklogic.client.admin.TransformExtensionsManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.QueryOptionsListHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n+\n+class ClearUserModulesTest extends AbstractHubCoreTest {\n+\n+    @Test\n+    void testClearUserModules() {\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        ModuleCounts beforeClearingModules = new ModuleCounts();\n+        beforeClearingModules.setModuleCounts();\n+\n+        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n+        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n+        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n+\n+        installProjectWithEachTypeOfModule();\n+\n+        try {\n+            new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n+            Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n+        } catch (RuntimeException e) {\n+            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            logger.info(\"'data-hub-operator' cannot delete user modules\");\n+        }\n+\n+        ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n+        afterClearingModulesAsOperator.setModuleCounts();\n+\n+        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);", "originalCommit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b68b021d82c7bbf8d4533975accdb0e79b54e3", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\nindex c02d51f7c..cf41ce6ad 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n\n@@ -13,40 +13,37 @@ import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n \n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Assumptions;\n import org.junit.jupiter.api.Test;\n \n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static org.springframework.test.util.AssertionErrors.fail;\n+\n class ClearUserModulesTest extends AbstractHubCoreTest {\n \n     @Test\n     void testClearUserModules() {\n-        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n-        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        assumeTrue(isVersionCompatibleWith520Roles());\n         ModuleCounts beforeClearingModules = new ModuleCounts();\n         beforeClearingModules.setModuleCounts();\n \n-        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n-        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n-        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n-\n         installProjectWithEachTypeOfModule();\n \n         try {\n             new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n-            Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n+            fail(\"'data-hub-operator' should not be able delete user modules\");\n         } catch (RuntimeException e) {\n-            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n             logger.info(\"'data-hub-operator' cannot delete user modules\");\n         }\n \n         ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n         afterClearingModulesAsOperator.setModuleCounts();\n \n-        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n-        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n-        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n-        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        assertEquals(beforeClearingModules.optionsCount + 1, afterClearingModulesAsOperator.optionsCount);\n+        assertEquals(beforeClearingModules.transformsCount + 1, afterClearingModulesAsOperator.transformsCount);\n+        assertEquals(beforeClearingModules.resourceExtensionCount + 1, afterClearingModulesAsOperator.resourceExtensionCount);\n+        assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n         checkIfCustomModulesArePresent();\n \n         new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNTkxOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4700#discussion_r503435918", "bodyText": "For assertTrue/assertFalse, it's often helpful to have an assertion message that shows the actual values; otherwise JUnit just says that we didn't get true back, which makes debugging more difficult. We can remove the comment in favor of an assertion message too - e.g. \"Expected total module count to be same or less than the before count, as some custom modules may have existed from other tests; before count: \" + beforeCount + \"; after count: \" + afterCount\nGenerally, assertion messages are better at explaining things than comments, and they're more likely to stay in sync with the code.", "author": "rjrudin", "createdAt": "2020-10-12T17:27:46Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.admin.QueryOptionsManager;\n+import com.marklogic.client.admin.ResourceExtensionsManager;\n+import com.marklogic.client.admin.ServerConfigurationManager;\n+import com.marklogic.client.admin.TransformExtensionsManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.QueryOptionsListHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n+\n+class ClearUserModulesTest extends AbstractHubCoreTest {\n+\n+    @Test\n+    void testClearUserModules() {\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        ModuleCounts beforeClearingModules = new ModuleCounts();\n+        beforeClearingModules.setModuleCounts();\n+\n+        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n+        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n+        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n+\n+        installProjectWithEachTypeOfModule();\n+\n+        try {\n+            new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n+            Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n+        } catch (RuntimeException e) {\n+            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            logger.info(\"'data-hub-operator' cannot delete user modules\");\n+        }\n+\n+        ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n+        afterClearingModulesAsOperator.setModuleCounts();\n+\n+        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n+        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n+        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        checkIfCustomModulesArePresent();\n+\n+        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n+\n+        ModuleCounts afterClearingModulesAsDeveloper = new ModuleCounts();\n+        afterClearingModulesAsDeveloper.setModuleCounts();\n+\n+        Assertions.assertEquals(beforeClearingModules.optionsCount, afterClearingModulesAsDeveloper.optionsCount);\n+        Assertions.assertEquals(beforeClearingModules.transformsCount, afterClearingModulesAsDeveloper.transformsCount);\n+        Assertions.assertEquals(beforeClearingModules.resourceExtensionCount, afterClearingModulesAsDeveloper.resourceExtensionCount);\n+        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsDeveloper.hubCoreModuleCount);\n+        //Before test starts , additional custom modules may be present\n+        Assertions.assertTrue(afterClearingModulesAsDeveloper.totalModulesCount <= beforeClearingModules.totalModulesCount);", "originalCommit": "7a66735ed290d2d569e245bf16aaf1ba7df3aea1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b68b021d82c7bbf8d4533975accdb0e79b54e3", "chunk": "diff --git a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\nindex c02d51f7c..cf41ce6ad 100644\n--- a/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n+++ b/marklogic-data-hub/src/test/java/com/marklogic/hub/impl/ClearUserModulesTest.java\n\n@@ -13,40 +13,37 @@ import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n \n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Assumptions;\n import org.junit.jupiter.api.Test;\n \n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static org.springframework.test.util.AssertionErrors.fail;\n+\n class ClearUserModulesTest extends AbstractHubCoreTest {\n \n     @Test\n     void testClearUserModules() {\n-        new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n-        Assumptions.assumeTrue(isVersionCompatibleWith520Roles());\n+        assumeTrue(isVersionCompatibleWith520Roles());\n         ModuleCounts beforeClearingModules = new ModuleCounts();\n         beforeClearingModules.setModuleCounts();\n \n-        Assertions.assertEquals(1, beforeClearingModules.optionsCount);\n-        Assertions.assertEquals(12, beforeClearingModules.transformsCount);\n-        Assertions.assertEquals(23, beforeClearingModules.resourceExtensionCount);\n-\n         installProjectWithEachTypeOfModule();\n \n         try {\n             new DataHubImpl(runAsDataHubOperator()).clearUserModules();\n-            Assertions.fail(\"'data-hub-operator' should not be able delete user modules\");\n+            fail(\"'data-hub-operator' should not be able delete user modules\");\n         } catch (RuntimeException e) {\n-            Assertions.assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n+            assertTrue(e.getMessage().contains(\"User is not allowed to delete /config/query\"));\n             logger.info(\"'data-hub-operator' cannot delete user modules\");\n         }\n \n         ModuleCounts afterClearingModulesAsOperator = new ModuleCounts();\n         afterClearingModulesAsOperator.setModuleCounts();\n \n-        Assertions.assertEquals(2, afterClearingModulesAsOperator.optionsCount);\n-        Assertions.assertEquals(13, afterClearingModulesAsOperator.transformsCount);\n-        Assertions.assertEquals(24, afterClearingModulesAsOperator.resourceExtensionCount);\n-        Assertions.assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n+        assertEquals(beforeClearingModules.optionsCount + 1, afterClearingModulesAsOperator.optionsCount);\n+        assertEquals(beforeClearingModules.transformsCount + 1, afterClearingModulesAsOperator.transformsCount);\n+        assertEquals(beforeClearingModules.resourceExtensionCount + 1, afterClearingModulesAsOperator.resourceExtensionCount);\n+        assertEquals(beforeClearingModules.hubCoreModuleCount, afterClearingModulesAsOperator.hubCoreModuleCount);\n         checkIfCustomModulesArePresent();\n \n         new DataHubImpl(runAsDataHubDeveloper()).clearUserModules();\n"}}, {"oid": "f2b68b021d82c7bbf8d4533975accdb0e79b54e3", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f2b68b021d82c7bbf8d4533975accdb0e79b54e3", "message": "DHFPROD-5534:Clear user modules from DHS instance", "committedDate": "2020-10-12T17:44:21Z", "type": "forcePushed"}, {"oid": "3b38924cd97fb2462244bcaab6876748d0105cf0", "url": "https://github.com/marklogic/marklogic-data-hub/commit/3b38924cd97fb2462244bcaab6876748d0105cf0", "message": "DHFPROD-5534:Clear user modules from DHS instance", "committedDate": "2020-10-12T19:04:54Z", "type": "forcePushed"}, {"oid": "598b83c31e6cbf28de078420609d4d4c713f7d70", "url": "https://github.com/marklogic/marklogic-data-hub/commit/598b83c31e6cbf28de078420609d4d4c713f7d70", "message": "DHFPROD-5534:Clear user modules from DHS instance", "committedDate": "2020-10-12T23:06:23Z", "type": "commit"}, {"oid": "598b83c31e6cbf28de078420609d4d4c713f7d70", "url": "https://github.com/marklogic/marklogic-data-hub/commit/598b83c31e6cbf28de078420609d4d4c713f7d70", "message": "DHFPROD-5534:Clear user modules from DHS instance", "committedDate": "2020-10-12T23:06:23Z", "type": "forcePushed"}]}