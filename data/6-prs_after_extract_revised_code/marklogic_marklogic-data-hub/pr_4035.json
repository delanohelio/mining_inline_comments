{"pr_number": 4035, "pr_title": "DHFPROD-4904:Run load step with selected files", "pr_createdAt": "2020-06-02T08:58:33Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4035", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMzI4Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4035#discussion_r433833282", "bodyText": "No need to change, but you can do these 2 lines in 1 line - loginAsTestUserWithRoles.", "author": "rjrudin", "createdAt": "2020-06-02T12:22:02Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.marklogic.hub.central.controllers;\n+\n+import com.marklogic.hub.central.AbstractMvcTest;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+import org.springframework.test.web.servlet.result.MockMvcResultHandlers;\n+\n+import javax.ws.rs.core.MediaType;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class FlowMvcTest extends AbstractMvcTest {\n+\n+    private final static String PATH = \"/api/flows\";\n+\n+    @Test\n+    void runIngestionStep() throws Exception {\n+        installReferenceModelProject();\n+        setTestUserRoles(\"hub-central-user\",\"data-hub-operator\");\n+        loginAsTestUser();", "originalCommit": "5795f9eafcaecb7b872096e6261c338c639fc8b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e7995128d89a0c0cca1cc6ab30e29f93fdc9af8", "chunk": "diff --git a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\nindex 04613c6c1..702234359 100644\n--- a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\n+++ b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\n\n@@ -1,35 +1,81 @@\n package com.marklogic.hub.central.controllers;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.io.JacksonHandle;\n import com.marklogic.hub.central.AbstractMvcTest;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.job.JobStatus;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.springframework.mock.web.MockMultipartFile;\n-import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n-import org.springframework.test.web.servlet.result.MockMvcResultHandlers;\n \n import javax.ws.rs.core.MediaType;\n import java.nio.charset.StandardCharsets;\n \n \n+\n public class FlowMvcTest extends AbstractMvcTest {\n \n     private final static String PATH = \"/api/flows\";\n+    private ObjectMapper mapper = new ObjectMapper();\n \n     @Test\n     void runIngestionStep() throws Exception {\n         installReferenceModelProject();\n-        setTestUserRoles(\"hub-central-user\",\"data-hub-operator\");\n-        loginAsTestUser();\n-\n-        MockMultipartFile file1 = new MockMultipartFile(\"file1\", \"file1.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"Joe\\\"}\".getBytes(StandardCharsets.UTF_8));\n-        MockMultipartFile file2 = new MockMultipartFile(\"file2\",\"file2.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"John\\\"}\".getBytes(StandardCharsets.UTF_8));\n-\n-        mockMvc.perform(MockMvcRequestBuilders.multipart(PATH + \"/{flowName}/steps/{stepNumber}\", \"ingestToFinal\", \"1\")\n-                        .file(file1)\n-                        .file(file2)\n-                        .contentType(MediaType.MULTIPART_FORM_DATA)\n-                        .session(mockHttpSession))\n-                .andDo(MockMvcResultHandlers.log())\n-                .andExpect(status().isOk());\n+        loginAsTestUserWithRoles(\"hub-central-user\",\"data-hub-operator\");\n+\n+        MockMultipartFile file1 = new MockMultipartFile(\"files\",\"file1.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"Joe\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        MockMultipartFile file2 = new MockMultipartFile(\"files\",\"file2.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"John\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        mockMvc.perform(multipart(PATH + \"/{flowName}/steps/{stepNumber}\", \"ingestToFinal\", \"1\")\n+            .file(file1)\n+            .file(file2)\n+            .session(mockHttpSession))\n+            .andExpect(status().isOk())\n+            .andDo(resp -> {\n+                RunFlowResponse flowResponse = mapper.readValue(resp.getResponse().getContentAsString(), RunFlowResponse.class);\n+                waitForJobToFinish(flowResponse.getJobId());\n+            });\n+        JsonNode rawDoc = getFinalDoc(\"/customers/file1.json\");\n+        assertEquals(\"Joe\", rawDoc.get(\"envelope\").get(\"instance\").get(\"name\").asText(),\n+            \"Verifying that 2 docs were ingested into the final database\");\n+\n+        rawDoc = getFinalDoc(\"/customers/file2.json\");\n+        assertEquals(\"John\", rawDoc.get(\"envelope\").get(\"instance\").get(\"name\").asText(),\n+            \"Verifying that 2 docs were ingested into the final database\");\n+\n+    }\n+\n+\n+    private void waitForJobToFinish(String jobId) {\n+        final int maxTries = 5;\n+        final long sleepPeriod = 5000;\n+        DatabaseClient jobsClient = getHubClient().getJobsClient();\n+        JSONDocumentManager documentManager = jobsClient.newJSONDocumentManager();\n+        JacksonHandle responseHandle = new JacksonHandle();\n+        int tries = 0;\n+        RunFlowResponse  runFlowResponse = null;\n+        do {\n+            try {\n+                tries++;\n+                Thread.sleep(sleepPeriod);\n+                documentManager.read(\"/jobs/\" + jobId + \".json\").next().getContent(responseHandle);\n+                runFlowResponse = mapper.readValue(responseHandle.get().toString(), RunFlowResponse.class);\n+                logger.debug(\"Waiting for job to finish, status: \" + runFlowResponse.getJobStatus());\n+            } catch (Exception ex) {\n+                // ignore\n+            }\n+        }\n+        while ((runFlowResponse !=null && runFlowResponse.getJobStatus().startsWith(JobStatus.RUNNING_PREFIX)) && tries < maxTries);\n+        if(runFlowResponse !=null && runFlowResponse.getJobStatus().startsWith(JobStatus.RUNNING_PREFIX)){\n+            Assertions.fail(\"Job has been running for more than 25 seconds.\");\n+        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMzkzOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4035#discussion_r433833939", "bodyText": "I think we need to verify that the two JSON documents were ingested as well. This is good in that it verifies no error occurred, but it should be a simple matter to verify that the two documents are in the staging database too - I imagine you can assert on the size of the collection that the documents were ingested into.", "author": "rjrudin", "createdAt": "2020-06-02T12:23:15Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.marklogic.hub.central.controllers;\n+\n+import com.marklogic.hub.central.AbstractMvcTest;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+import org.springframework.test.web.servlet.result.MockMvcResultHandlers;\n+\n+import javax.ws.rs.core.MediaType;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class FlowMvcTest extends AbstractMvcTest {\n+\n+    private final static String PATH = \"/api/flows\";\n+\n+    @Test\n+    void runIngestionStep() throws Exception {\n+        installReferenceModelProject();\n+        setTestUserRoles(\"hub-central-user\",\"data-hub-operator\");\n+        loginAsTestUser();\n+\n+        MockMultipartFile file1 = new MockMultipartFile(\"file1\", \"file1.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"Joe\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        MockMultipartFile file2 = new MockMultipartFile(\"file2\",\"file2.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"John\\\"}\".getBytes(StandardCharsets.UTF_8));\n+\n+        mockMvc.perform(MockMvcRequestBuilders.multipart(PATH + \"/{flowName}/steps/{stepNumber}\", \"ingestToFinal\", \"1\")\n+                        .file(file1)\n+                        .file(file2)\n+                        .contentType(MediaType.MULTIPART_FORM_DATA)\n+                        .session(mockHttpSession))\n+                .andDo(MockMvcResultHandlers.log())\n+                .andExpect(status().isOk());", "originalCommit": "5795f9eafcaecb7b872096e6261c338c639fc8b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5OTU1NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4035#discussion_r434099554", "bodyText": "runFlow() starts the job and returns , so had to include a function to check for completion of job and verified if the docs were ingested.", "author": "srinathgit", "createdAt": "2020-06-02T18:41:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMzkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e7995128d89a0c0cca1cc6ab30e29f93fdc9af8", "chunk": "diff --git a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\nindex 04613c6c1..702234359 100644\n--- a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\n+++ b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\n\n@@ -1,35 +1,81 @@\n package com.marklogic.hub.central.controllers;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.io.JacksonHandle;\n import com.marklogic.hub.central.AbstractMvcTest;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.job.JobStatus;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.springframework.mock.web.MockMultipartFile;\n-import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n-import org.springframework.test.web.servlet.result.MockMvcResultHandlers;\n \n import javax.ws.rs.core.MediaType;\n import java.nio.charset.StandardCharsets;\n \n \n+\n public class FlowMvcTest extends AbstractMvcTest {\n \n     private final static String PATH = \"/api/flows\";\n+    private ObjectMapper mapper = new ObjectMapper();\n \n     @Test\n     void runIngestionStep() throws Exception {\n         installReferenceModelProject();\n-        setTestUserRoles(\"hub-central-user\",\"data-hub-operator\");\n-        loginAsTestUser();\n-\n-        MockMultipartFile file1 = new MockMultipartFile(\"file1\", \"file1.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"Joe\\\"}\".getBytes(StandardCharsets.UTF_8));\n-        MockMultipartFile file2 = new MockMultipartFile(\"file2\",\"file2.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"John\\\"}\".getBytes(StandardCharsets.UTF_8));\n-\n-        mockMvc.perform(MockMvcRequestBuilders.multipart(PATH + \"/{flowName}/steps/{stepNumber}\", \"ingestToFinal\", \"1\")\n-                        .file(file1)\n-                        .file(file2)\n-                        .contentType(MediaType.MULTIPART_FORM_DATA)\n-                        .session(mockHttpSession))\n-                .andDo(MockMvcResultHandlers.log())\n-                .andExpect(status().isOk());\n+        loginAsTestUserWithRoles(\"hub-central-user\",\"data-hub-operator\");\n+\n+        MockMultipartFile file1 = new MockMultipartFile(\"files\",\"file1.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"Joe\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        MockMultipartFile file2 = new MockMultipartFile(\"files\",\"file2.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"John\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        mockMvc.perform(multipart(PATH + \"/{flowName}/steps/{stepNumber}\", \"ingestToFinal\", \"1\")\n+            .file(file1)\n+            .file(file2)\n+            .session(mockHttpSession))\n+            .andExpect(status().isOk())\n+            .andDo(resp -> {\n+                RunFlowResponse flowResponse = mapper.readValue(resp.getResponse().getContentAsString(), RunFlowResponse.class);\n+                waitForJobToFinish(flowResponse.getJobId());\n+            });\n+        JsonNode rawDoc = getFinalDoc(\"/customers/file1.json\");\n+        assertEquals(\"Joe\", rawDoc.get(\"envelope\").get(\"instance\").get(\"name\").asText(),\n+            \"Verifying that 2 docs were ingested into the final database\");\n+\n+        rawDoc = getFinalDoc(\"/customers/file2.json\");\n+        assertEquals(\"John\", rawDoc.get(\"envelope\").get(\"instance\").get(\"name\").asText(),\n+            \"Verifying that 2 docs were ingested into the final database\");\n+\n+    }\n+\n+\n+    private void waitForJobToFinish(String jobId) {\n+        final int maxTries = 5;\n+        final long sleepPeriod = 5000;\n+        DatabaseClient jobsClient = getHubClient().getJobsClient();\n+        JSONDocumentManager documentManager = jobsClient.newJSONDocumentManager();\n+        JacksonHandle responseHandle = new JacksonHandle();\n+        int tries = 0;\n+        RunFlowResponse  runFlowResponse = null;\n+        do {\n+            try {\n+                tries++;\n+                Thread.sleep(sleepPeriod);\n+                documentManager.read(\"/jobs/\" + jobId + \".json\").next().getContent(responseHandle);\n+                runFlowResponse = mapper.readValue(responseHandle.get().toString(), RunFlowResponse.class);\n+                logger.debug(\"Waiting for job to finish, status: \" + runFlowResponse.getJobStatus());\n+            } catch (Exception ex) {\n+                // ignore\n+            }\n+        }\n+        while ((runFlowResponse !=null && runFlowResponse.getJobStatus().startsWith(JobStatus.RUNNING_PREFIX)) && tries < maxTries);\n+        if(runFlowResponse !=null && runFlowResponse.getJobStatus().startsWith(JobStatus.RUNNING_PREFIX)){\n+            Assertions.fail(\"Job has been running for more than 25 seconds.\");\n+        }\n     }\n }\n"}}, {"oid": "3e7995128d89a0c0cca1cc6ab30e29f93fdc9af8", "url": "https://github.com/marklogic/marklogic-data-hub/commit/3e7995128d89a0c0cca1cc6ab30e29f93fdc9af8", "message": "DHFPROD-4904:Run load step with selected files", "committedDate": "2020-06-02T18:38:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MzczMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4035#discussion_r434143730", "bodyText": "This is a common problem we have, which is obtaining a reference to the FlowRunner so we can call awaitCompletion instead of having to write a lot of code here, or subclass NewFlowController.\nHere's a better approach - add a \"private Consumer flowRunnerConsumer\" to NewFlowController (and can you actually rename that to FlowController too? I forgot to do so before). Add a public setter for it.\nIf flowRunnerConsumer is non-null, then call accept on it after running the flow.\nThat way, a test can obtain the Autowired FlowController and then pass in a Consumer impl so it'll get a reference to the FlowRunner. The impl of Consumer can then call awaitCompletion.", "author": "rjrudin", "createdAt": "2020-06-02T20:02:58Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.marklogic.hub.central.controllers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.hub.central.AbstractMvcTest;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.job.JobStatus;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.mock.web.MockMultipartFile;\n+\n+import javax.ws.rs.core.MediaType;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+\n+public class FlowMvcTest extends AbstractMvcTest {\n+\n+    private final static String PATH = \"/api/flows\";\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    @Test\n+    void runIngestionStep() throws Exception {\n+        installReferenceModelProject();\n+        loginAsTestUserWithRoles(\"hub-central-user\",\"data-hub-operator\");\n+\n+        MockMultipartFile file1 = new MockMultipartFile(\"files\",\"file1.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"Joe\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        MockMultipartFile file2 = new MockMultipartFile(\"files\",\"file2.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"John\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        mockMvc.perform(multipart(PATH + \"/{flowName}/steps/{stepNumber}\", \"ingestToFinal\", \"1\")\n+            .file(file1)\n+            .file(file2)\n+            .session(mockHttpSession))\n+            .andExpect(status().isOk())\n+            .andDo(resp -> {\n+                RunFlowResponse flowResponse = mapper.readValue(resp.getResponse().getContentAsString(), RunFlowResponse.class);\n+                waitForJobToFinish(flowResponse.getJobId());\n+            });\n+        JsonNode rawDoc = getFinalDoc(\"/customers/file1.json\");\n+        assertEquals(\"Joe\", rawDoc.get(\"envelope\").get(\"instance\").get(\"name\").asText(),\n+            \"Verifying that 2 docs were ingested into the final database\");\n+\n+        rawDoc = getFinalDoc(\"/customers/file2.json\");\n+        assertEquals(\"John\", rawDoc.get(\"envelope\").get(\"instance\").get(\"name\").asText(),\n+            \"Verifying that 2 docs were ingested into the final database\");\n+\n+    }\n+\n+\n+    private void waitForJobToFinish(String jobId) {", "originalCommit": "3e7995128d89a0c0cca1cc6ab30e29f93fdc9af8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc2f083492cb35374e266a96b14fb9bc7b32bae8", "chunk": "diff --git a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\nindex 702234359..935b7c212 100644\n--- a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\n+++ b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java\n\n@@ -13,8 +13,10 @@ import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.\n \n import com.marklogic.hub.flow.RunFlowResponse;\n import com.marklogic.hub.job.JobStatus;\n+import io.swagger.annotations.OAuth2Definition;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mock.web.MockMultipartFile;\n \n import javax.ws.rs.core.MediaType;\n"}}, {"oid": "bc2f083492cb35374e266a96b14fb9bc7b32bae8", "url": "https://github.com/marklogic/marklogic-data-hub/commit/bc2f083492cb35374e266a96b14fb9bc7b32bae8", "message": "DHFPROD-4904:Run load step with selected files", "committedDate": "2020-06-02T22:09:57Z", "type": "forcePushed"}, {"oid": "399adb30d037598c812c30545d28cee60b81a11a", "url": "https://github.com/marklogic/marklogic-data-hub/commit/399adb30d037598c812c30545d28cee60b81a11a", "message": "DHFPROD-4904:Run load step with selected files", "committedDate": "2020-06-02T22:32:18Z", "type": "commit"}, {"oid": "399adb30d037598c812c30545d28cee60b81a11a", "url": "https://github.com/marklogic/marklogic-data-hub/commit/399adb30d037598c812c30545d28cee60b81a11a", "message": "DHFPROD-4904:Run load step with selected files", "committedDate": "2020-06-02T22:32:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzg3Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4035#discussion_r434237873", "bodyText": "Nice! And we should be able to reuse this too.", "author": "rjrudin", "createdAt": "2020-06-02T23:59:59Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/FlowMvcTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.marklogic.hub.central.controllers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.hub.central.AbstractMvcTest;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.job.JobStatus;\n+import io.swagger.annotations.OAuth2Definition;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+\n+import javax.ws.rs.core.MediaType;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+\n+public class FlowMvcTest extends AbstractMvcTest {\n+\n+    @Autowired\n+    FlowController flowController;\n+\n+    private final static String PATH = \"/api/flows\";\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    @Test\n+    void runIngestionStep() throws Exception {\n+        installReferenceModelProject();\n+        loginAsTestUserWithRoles(\"hub-central-user\",\"data-hub-operator\");\n+\n+        MockMultipartFile file1 = new MockMultipartFile(\"files\",\"file1.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"Joe\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        MockMultipartFile file2 = new MockMultipartFile(\"files\",\"file2.json\", MediaType.APPLICATION_JSON, \"{\\\"name\\\": \\\"John\\\"}\".getBytes(StandardCharsets.UTF_8));\n+        flowController.setFlowRunnerConsumer((flowRunner -> {", "originalCommit": "399adb30d037598c812c30545d28cee60b81a11a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}