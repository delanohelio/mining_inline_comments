{"pr_number": 4238, "pr_title": "DHFPROD-5497: Creating granular privileges will now reuse existing ones", "pr_createdAt": "2020-07-20T15:11:25Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4238", "timeline": [{"oid": "25cd105b65139c1ce0625617850e3b30d1835acd", "url": "https://github.com/marklogic/marklogic-data-hub/commit/25cd105b65139c1ce0625617850e3b30d1835acd", "message": "DHFPROD-5497: Creating granular privileges will now reuse existing ones\n\nThis is close to a re-write of the command. All privileges are now built in memory before any are saved. Each is then saved via the same process, which checks for an existing privilege with the same action.", "committedDate": "2020-07-20T15:04:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODk0Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4238#discussion_r457478946", "bodyText": "This is the method that every in-memory privilege goes through, it's where the new logic is.", "author": "rjrudin", "createdAt": "2020-07-20T15:12:14Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/CreateGranularPrivilegesCommand.java", "diffHunk": "@@ -95,160 +102,196 @@ public Integer getUndoSortOrder() {\n \n     @Override\n     public void execute(CommandContext context) {\n+        Map<String, Privilege> granularPrivileges = buildGranularPrivileges(context.getManageClient());\n+        saveGranularPrivileges(context.getManageClient(), granularPrivileges);\n+    }\n+\n+    /**\n+     * Delete every granular privilege. Not to be used in a DHS environment of course.\n+     *\n+     * @param context\n+     */\n+    @Override\n+    public void undo(CommandContext context) {\n+        Map<String, Privilege> granularPrivileges = buildGranularPrivileges(context.getManageClient());\n+        PrivilegeManager mgr = new PrivilegeManager(context.getManageClient());\n+        granularPrivileges.values().forEach(privilege -> {\n+            mgr.deleteAtPath(\"/manage/v2/privileges/\" + privilege.getPrivilegeName() + \"?kind=execute\");\n+        });\n+    }\n+\n+    /**\n+     * @param manageClient\n+     * @return a map of privilege action, containing an ID, and a Privilege object to be saved. The key must be an\n+     * action with an ID so that we can determine if a privilege with the same action already exists.\n+     */\n+    protected Map<String, Privilege> buildGranularPrivileges(ManageClient manageClient) {\n         final String finalDbName = hubConfig.getDbName(DatabaseKind.FINAL);\n         final String stagingDbName = hubConfig.getDbName(DatabaseKind.STAGING);\n+        final String jobsDbName = hubConfig.getDbName(DatabaseKind.JOB);\n         final String finalTriggersDbName = hubConfig.getDbName(DatabaseKind.FINAL_TRIGGERS);\n         final String stagingTriggersDbName = hubConfig.getDbName(DatabaseKind.STAGING_TRIGGERS);\n \n-        PrivilegeManager mgr = new PrivilegeManager(context.getManageClient());\n-        buildPrivilegesThatDhsMayHaveCreated(context.getManageClient()).forEach(p -> mgr.save(p.getJson()));\n+        DatabaseManager dbMgr = new DatabaseManager(manageClient);\n+        ResourcesFragment databases = dbMgr.getAsXml();\n+        final String finalDbId = databases.getIdForNameOrId(finalDbName);\n+        final String stagingDbId = databases.getIdForNameOrId(stagingDbName);\n+        final String jobsDbId = databases.getIdForNameOrId(jobsDbName);\n+        final String finalTriggersDbId = databases.getIdForNameOrId(finalTriggersDbName);\n+        final String stagingTriggersDbId = databases.getIdForNameOrId(stagingTriggersDbName);\n \n-        Privilege p = new Privilege(null, \"admin-database-triggers-\" + stagingTriggersDbName);\n-        p.setKind(\"execute\");\n-        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/triggers/$$database-id(\" + stagingTriggersDbName + \")\");\n-        p.addRole(\"data-hub-developer\");\n-        mgr.save(p.getJson());\n+        final String adminRole = \"data-hub-admin\";\n+        final String clearUserDataRole = \"hub-central-clear-user-data\";\n+        final String developerRole = \"data-hub-developer\";\n+        final String hubCentralEntityModelWriterRole = \"hub-central-entity-model-writer\";\n \n-        p.setPrivilegeName(\"admin-database-triggers-\" + finalTriggersDbName);\n-        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/triggers/$$database-id(\" + finalTriggersDbName + \")\");\n-        mgr.save(p.getJson());\n+        final Map<String, Privilege> granularPrivilegeMap = new LinkedHashMap<>();\n \n-        p.setPrivilegeName(\"admin-database-temporal-\" + stagingDbName);\n-        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/temporal/$$database-id(\" + stagingDbName + \")\");\n-        mgr.save(p.getJson());\n+        Privilege p = newPrivilege(\"admin-database-clear-\" + stagingDbName, adminRole, clearUserDataRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/clear/$$database-id(\" + stagingDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/clear/\" + stagingDbId, p);\n \n-        p.setPrivilegeName(\"admin-database-temporal-\" + finalDbName);\n-        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/temporal/$$database-id(\" + finalDbName + \")\");\n-        mgr.save(p.getJson());\n+        p = newPrivilege(\"admin-database-clear-\" + finalDbName, adminRole, clearUserDataRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/clear/$$database-id(\" + finalDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/clear/\" + finalDbId, p);\n \n-        p.setPrivilegeName(\"admin-database-alerts-\" + stagingDbName);\n-        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/alerts/$$database-id(\" + stagingDbName + \")\");\n-        mgr.save(p.getJson());\n+        p = newPrivilege(\"admin-database-clear-\" + jobsDbName, adminRole, clearUserDataRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/clear/$$database-id(\" + jobsDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/clear/\" + jobsDbId, p);\n \n-        p.setPrivilegeName(\"admin-database-alerts-\" + finalDbName);\n-        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/alerts/$$database-id(\" + finalDbName + \")\");\n-        mgr.save(p.getJson());\n+        p = newPrivilege(\"admin-database-index-\" + stagingDbName, developerRole, hubCentralEntityModelWriterRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/index/$$database-id(\" + stagingDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/index/\" + stagingDbId, p);\n \n-        buildScheduledTaskPrivileges().forEach(privilege -> mgr.save(privilege.getJson()));\n+        p = newPrivilege(\"admin-database-index-\" + finalDbName, developerRole, hubCentralEntityModelWriterRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/index/$$database-id(\" + finalDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/index/\" + finalDbId, p);\n \n-        addRolePrivilegesToDataHubSecurityAdmin(context.getManageClient());\n-    }\n+        p = newPrivilege(\"admin-database-index-\" + jobsDbName, developerRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/index/$$database-id(\" + jobsDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/index/\" + jobsDbId, p);\n \n-    @Override\n-    public void undo(CommandContext context) {\n-        final String finalDbName = hubConfig.getDbName(DatabaseKind.FINAL);\n-        final String stagingDbName = hubConfig.getDbName(DatabaseKind.STAGING);\n-        final String jobsDbName = hubConfig.getDbName(DatabaseKind.JOB);\n-        final String finalTriggersDbName = hubConfig.getDbName(DatabaseKind.FINAL_TRIGGERS);\n-        final String stagingTriggersDbName = hubConfig.getDbName(DatabaseKind.STAGING_TRIGGERS);\n+        p = newPrivilege(\"admin-database-triggers-\" + stagingTriggersDbName, developerRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/triggers/$$database-id(\" + stagingTriggersDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/triggers/\" + stagingTriggersDbId, p);\n \n-        PrivilegeManager mgr = new PrivilegeManager(context.getManageClient());\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-clear-\" + finalDbName + \"?kind=execute\");\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-clear-\" + stagingDbName + \"?kind=execute\");\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-clear-\" + jobsDbName + \"?kind=execute\");\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-index-\" + finalDbName + \"?kind=execute\");\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-index-\" + stagingDbName + \"?kind=execute\");\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-index-\" + jobsDbName + \"?kind=execute\");\n+        p = newPrivilege(\"admin-database-triggers-\" + finalTriggersDbName, developerRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/triggers/$$database-id(\" + finalTriggersDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/triggers/\" + finalTriggersDbId, p);\n \n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-triggers-\" + finalTriggersDbName + \"?kind=execute\");\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-triggers-\" + stagingTriggersDbName + \"?kind=execute\");\n+        p = newPrivilege(\"admin-database-temporal-\" + stagingDbName, developerRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/temporal/$$database-id(\" + stagingDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/temporal/\" + stagingDbId, p);\n \n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-temporal-\" + finalDbName + \"?kind=execute\");\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-temporal-\" + stagingDbName + \"?kind=execute\");\n+        p = newPrivilege(\"admin-database-temporal-\" + finalDbName, developerRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/temporal/$$database-id(\" + finalDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/temporal/\" + finalDbId, p);\n \n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-alerts-\" + finalDbName + \"?kind=execute\");\n-        mgr.deleteAtPath(\"/manage/v2/privileges/admin-database-alerts-\" + stagingDbName + \"?kind=execute\");\n+        p = newPrivilege(\"admin-database-alerts-\" + stagingDbName, developerRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/alerts/$$database-id(\" + stagingDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/alerts/\" + stagingDbId, p);\n \n+        p = newPrivilege(\"admin-database-alerts-\" + finalDbName, developerRole);\n+        p.setAction(\"http://marklogic.com/xdmp/privileges/admin/database/alerts/$$database-id(\" + finalDbName + \")\");\n+        granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/database/alerts/\" + finalDbId, p);\n+\n+        final ResourcesFragment existingGroups = new GroupManager(manageClient).getAsXml();\n         getGroupNamesForScheduledTaskPrivileges().forEach(groupName -> {\n-            mgr.deleteAtPath(\"/manage/v2/privileges/admin-group-scheduled-task-\" + groupName + \"?kind=execute\");\n+            // Check for a value ID, as user may have a typo in a group name\n+            final String groupId = existingGroups.getIdForNameOrId(groupName);\n+            if (groupId == null) {\n+                logger.warn(format(\"Unable to find group ID for group name '%s'; will not create scheduled tasks privilege for the group\"));\n+            } else {\n+                Privilege priv = newPrivilege(\"admin-group-scheduled-task-\" + groupName, developerRole);\n+                priv.setAction(\"http://marklogic.com/xdmp/privileges/admin/group/scheduled-task/$$group-id(\" + groupName + \")\");\n+                granularPrivilegeMap.put(\"http://marklogic.com/xdmp/privileges/admin/group/scheduled-task/\" + groupId, priv);\n+            }\n         });\n \n-        List<Privilege> privileges = buildPrivilegesForRolesThatCanBeInherited(context.getManageClient());\n-        for (Privilege privilege : privileges) {\n-            String path = \"/manage/v2/privileges/\" + privilege.getPrivilegeName() + \"?kind=execute\";\n-            mgr.deleteAtPath(path);\n-        }\n-    }\n-\n-    /**\n-     * Some of the privileges that need to be created may already exist in DHS. If so, then a role is added to that\n-     * privilege instead of creating a duplicate one with the same action, which ML does not allow.\n-     *\n-     * @param client\n-     * @return\n-     */\n-    protected List<Privilege> buildPrivilegesThatDhsMayHaveCreated(ManageClient client) {\n-        final List<String> existingPrivilegeNames = new PrivilegeManager(client).getAsXml().getListItemNameRefs();\n-        final String stagingDbName = hubConfig.getDbName(DatabaseKind.STAGING);\n-        final String finalDbName = hubConfig.getDbName(DatabaseKind.FINAL);\n-        final String jobsDbName = hubConfig.getDbName(DatabaseKind.JOB);\n-\n-        final String adminRole = \"data-hub-admin\";\n-        final String clearUserDataRole = \"hub-central-clear-user-data\";\n-        final String developerRole = \"data-hub-developer\";\n-        final String hubCentralEntityModelWriterRole = \"hub-central-entity-model-writer\";\n+        final ResourcesFragment existingRoles = new RoleManager(manageClient).getAsXml();\n+        ROLES_THAT_CAN_BE_INHERITED.forEach(roleName -> {\n+            // We expect each role to translate to a role; otherwise, an error should be thrown\n+            String roleId = existingRoles.getIdForNameOrId(roleName);\n+            Privilege priv = newPrivilege(\"data-role-inherit-\" + roleId, \"data-hub-security-admin\");\n+            priv.setAction(\"http://marklogic.com/xdmp/privileges/role/inherit/\" + roleId);\n+            granularPrivilegeMap.put(priv.getAction(), priv);\n+        });\n \n-        List<Privilege> list = new ArrayList<>();\n-        list.add(buildPrivilege(client, \"admin-database-clear-\" + stagingDbName, \"http://marklogic.com/xdmp/privileges/admin/database/clear/$$database-id(\" + stagingDbName + \")\",\n-            \"clear-data-hub-STAGING\", existingPrivilegeNames, adminRole, clearUserDataRole));\n-        list.add(buildPrivilege(client, \"admin-database-clear-\" + finalDbName, \"http://marklogic.com/xdmp/privileges/admin/database/clear/$$database-id(\" + finalDbName + \")\",\n-            \"clear-data-hub-FINAL\", existingPrivilegeNames, adminRole, clearUserDataRole));\n-        list.add(buildPrivilege(client, \"admin-database-clear-\" + jobsDbName, \"http://marklogic.com/xdmp/privileges/admin/database/clear/$$database-id(\" + jobsDbName + \")\",\n-            \"clear-data-hub-JOBS\", existingPrivilegeNames, adminRole, clearUserDataRole));\n-\n-        list.add(buildPrivilege(client, \"admin-database-index-\" + stagingDbName, \"http://marklogic.com/xdmp/privileges/admin/database/index/$$database-id(\" + stagingDbName + \")\",\n-            \"STAGING-index-editor\", existingPrivilegeNames, developerRole, hubCentralEntityModelWriterRole));\n-        list.add(buildPrivilege(client, \"admin-database-index-\" + finalDbName, \"http://marklogic.com/xdmp/privileges/admin/database/index/$$database-id(\" + finalDbName + \")\",\n-            \"FINAL-index-editor\", existingPrivilegeNames, developerRole, hubCentralEntityModelWriterRole));\n-        list.add(buildPrivilege(client, \"admin-database-index-\" + jobsDbName, \"http://marklogic.com/xdmp/privileges/admin/database/index/$$database-id(\" + jobsDbName + \")\",\n-            \"JOBS-index-editor\", existingPrivilegeNames, developerRole));\n-\n-        return list;\n+        return granularPrivilegeMap;\n     }\n \n     /**\n-     * @param client\n-     * @param name                   The name of the privilege to create if a privilege with the given dhsName does not exist. This name\n-     *                               is not the same as the dhsName, as the initial goal was to have a consistent naming convention for\n-     *                               all granular privileges, and the DHS privilege names are not consistent with that convention.\n-     * @param action\n-     * @param dhsName\n-     * @param existingPrivilegeNames\n-     * @param rolesToAdd\n-     * @return\n+     * Save each of the given privileges. For each key in the map - where the key is expected to be an action with a\n+     * resource ID in it - we check to see if an existing privilege has the same action. If so, then the roles in the\n+     * granular privilege are added to that existing privilege. This ensures we never cause an error by trying to create\n+     * a privilege with the same action as an existing one. This is crucial for DHS, as the DHS config will create some\n+     * of the same granular privileges that DHF needs to create (but with a different name).\n+     *\n+     * @param manageClient\n+     * @param granularPrivileges\n      */\n-    protected Privilege buildPrivilege(ManageClient client, String name, String action, String dhsName, List<String> existingPrivilegeNames, String... rolesToAdd) {\n-        Privilege p;\n-        if (existingPrivilegeNames.contains(dhsName)) {\n-            final String json = new PrivilegeManager(client).getAsJson(dhsName, \"kind\", \"execute\");\n-            p = new DefaultResourceMapper(new API(client)).readResource(json, Privilege.class);\n-        } else {\n-            p = new Privilege(null, name);\n-            p.setKind(\"execute\");\n-            p.setAction(action);\n-        }\n-        for (String role : rolesToAdd) {\n-            p.addRole(role);\n-        }\n-        return p;\n+    protected void saveGranularPrivileges(ManageClient manageClient, Map<String, Privilege> granularPrivileges) {", "originalCommit": "25cd105b65139c1ce0625617850e3b30d1835acd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}