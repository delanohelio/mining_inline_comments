{"pr_number": 4950, "pr_title": "DHFPROD-6303: Download a record or artifact from All Data View", "pr_createdAt": "2020-12-07T23:14:57Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4950", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMDQ3Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537920476", "bodyText": "I think this can be simpler and wholly implemented in the controller by using a DocumentManager from a DatabaseClient. Just read the URI as an InputStreamHandle, then use Spring's FileCopyUtils class to copy that class's InputStream to the HTTP response's OutputStream. You can remove all the code from the Manager (which doesn't really add any value here), and only have one try/catch too.", "author": "rjrudin", "createdAt": "2020-12-07T23:44:11Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "diffHunk": "@@ -54,7 +57,22 @@ public String search(@RequestBody SearchQuery searchQuery, @RequestParam(default\n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public JsonNode getRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database) {\n-        return getEntitySearchService(database).getRecord(docUri);\n+        return getEntitySearchService(database).getRecord(docUri, true);\n+    }\n+\n+    @RequestMapping(value = \"/downloadRecord\", method = RequestMethod.GET)\n+    public void downloadRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database, HttpServletResponse response) {\n+        String[] docUriArray = docUri.split(\"/\");\n+        String fileName = docUriArray[docUriArray.length-1];\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        response.addHeader(\"Content-Disposition\", String.format(\"attachment; filename=%s\", fileName));\n+\n+        try (OutputStream out = response.getOutputStream()) {\n+            newEntitySearchManager(database).downloadRecord(docUri, out);", "originalCommit": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55ab47236c5677f0a3af27c48a991e5b91f16ca8", "chunk": "diff --git a/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java b/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java\nindex 56027db16..2be3243c7 100644\n--- a/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java\n+++ b/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java\n\n@@ -57,21 +59,32 @@ public class EntitySearchController extends BaseController {\n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public JsonNode getRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database) {\n-        return getEntitySearchService(database).getRecord(docUri, true);\n+        return getEntitySearchService(database).getRecord(docUri);\n     }\n \n     @RequestMapping(value = \"/downloadRecord\", method = RequestMethod.GET)\n     public void downloadRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database, HttpServletResponse response) {\n-        String[] docUriArray = docUri.split(\"/\");\n-        String fileName = docUriArray[docUriArray.length-1];\n-        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n-        response.addHeader(\"Content-Disposition\", String.format(\"attachment; filename=%s\", fileName));\n-\n         try (OutputStream out = response.getOutputStream()) {\n-            newEntitySearchManager(database).downloadRecord(docUri, out);\n+            String[] docUriArray = docUri.split(\"/\");\n+            String fileName = docUriArray[docUriArray.length-1];\n+            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+            response.addHeader(\"Content-Disposition\", String.format(\"attachment; filename=%s\", fileName));\n+\n+            byte[] bytes = null;\n+            JsonNode record = getEntitySearchService(database).getRecord(docUri);\n+            if(null == record || null == record.get(\"data\")) {\n+                throw new RuntimeException(String.format(\"Unable to download record with URI: %s as document does not exist\", docUri));\n+            }\n+\n+            if(record.get(\"recordType\").asText().equals(\"binary\")) {\n+                bytes = Hex.decodeHex(record.get(\"data\").asText().toCharArray());\n+            } else {\n+                bytes = record.get(\"data\").asText().getBytes();\n+            }\n+            out.write(bytes);\n             response.flushBuffer();\n-        } catch (IOException e) {\n-            throw new RuntimeException(String.format(\"Unable to download record with docUri: %s with cause: %s\", docUri, e.getMessage()));\n+        } catch (IOException | DecoderException e) {\n+            throw new RuntimeException(String.format(\"Unable to download record with URI: %s with cause: %s\", docUri, e.getMessage()));\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMTk4OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537921989", "bodyText": "Just test the controller instead via an AbstractMvcTest - that gives us coverage over the controller as well, which is missing right now.\nShould test downloading a binary as well - that could be as simple as capturing the bytes of the string \"hello world\" and storing that as a document. Can assert on its size too.", "author": "rjrudin", "createdAt": "2020-12-07T23:47:44Z", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -274,6 +279,39 @@ void testGetQueryOptions() {\n         assertThrows(RuntimeException.class, () -> new EntitySearchManager(getHubClient()).getQueryOptions(\"non-existent-options\"), \"Search options doesn't exist\");\n     }\n \n+    @Test\n+    void testDownloadRecord() {", "originalCommit": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzQ3NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537923475", "bodyText": "Also, no need to install the reference project and create customer entities. The \"download\" feature doesn't care about whether the doc is an entity or not - it just takes a URI as an input and returns the document in the HTTP response output stream.\nFor testing then, I'd have 5 separate tests - one a JSON doc, one for XML, one for Text, one for Binary, and one for a missing URI (verify you get an appropriate error message).", "author": "rjrudin", "createdAt": "2020-12-07T23:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMTk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "55ab47236c5677f0a3af27c48a991e5b91f16ca8", "chunk": "diff --git a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java\nindex 674c16ce1..c840e117a 100644\n--- a/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java\n+++ b/marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java\n\n@@ -279,39 +274,6 @@ public class EntitySearchManagerTest extends AbstractHubCentralTest {\n         assertThrows(RuntimeException.class, () -> new EntitySearchManager(getHubClient()).getQueryOptions(\"non-existent-options\"), \"Search options doesn't exist\");\n     }\n \n-    @Test\n-    void testDownloadRecord() {\n-        try {\n-            ReferenceModelProject project = installOnlyReferenceModelEntities(true);\n-            project.createCustomerInstance(new Customer(1, \"Jane\"));\n-            project.createCustomerInstance(new Customer(1, \"Jane\"), Format.XML, \"doesnt-matter\");\n-\n-            EntitySearchManager entitySearchManager = new EntitySearchManager(getHubClient());\n-            FileOutputStream fos= new FileOutputStream(\"build/record.json\");\n-            entitySearchManager.downloadRecord(\"/Customer1.json\", fos);\n-            fos= new FileOutputStream(\"build/artifact.json\");\n-            entitySearchManager.downloadRecord(\"/entities/Customer.entity.json\", fos);\n-            fos= new FileOutputStream(\"build/record.xml\");\n-            entitySearchManager.downloadRecord(\"/Customer1.xml\", fos);\n-            fos.close();\n-\n-            ObjectMapper mapper = new ObjectMapper();\n-            JsonNode downloadedDocument = mapper.readTree(new File(\"build/record.json\"));\n-            JsonNode documentInDb = getFinalDoc(\"/Customer1.json\");\n-            assertEquals(documentInDb, downloadedDocument);\n-\n-            downloadedDocument = mapper.readTree(new File(\"build/artifact.json\"));\n-            documentInDb = getFinalDoc(\"/entities/Customer.entity.json\");\n-            assertEquals(documentInDb, downloadedDocument);\n-\n-            String downloadedDocumentString = new String(Files.readAllBytes(Paths.get(\"build/record.xml\")));\n-            String documentInDbString = EntitySearchService.on(getHubClient().getFinalClient()).getRecord(\"/Customer1.xml\", false).get(\"data\").asText();\n-            assertEquals(documentInDbString, downloadedDocumentString);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n     private void validateSearchWithTransform(String databaseType) {\n         runAsDataHubDeveloper();\n         ReferenceModelProject project = installOnlyReferenceModelEntities(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzY4Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537923683", "bodyText": "Use \"URI\" in the error message ; \"docUri\" is a variable name that is not as meaningful to a user like Pari as \"URI\" is.", "author": "rjrudin", "createdAt": "2020-12-07T23:51:49Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "diffHunk": "@@ -54,7 +57,22 @@ public String search(@RequestBody SearchQuery searchQuery, @RequestParam(default\n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public JsonNode getRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database) {\n-        return getEntitySearchService(database).getRecord(docUri);\n+        return getEntitySearchService(database).getRecord(docUri, true);\n+    }\n+\n+    @RequestMapping(value = \"/downloadRecord\", method = RequestMethod.GET)\n+    public void downloadRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database, HttpServletResponse response) {\n+        String[] docUriArray = docUri.split(\"/\");\n+        String fileName = docUriArray[docUriArray.length-1];\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        response.addHeader(\"Content-Disposition\", String.format(\"attachment; filename=%s\", fileName));\n+\n+        try (OutputStream out = response.getOutputStream()) {\n+            newEntitySearchManager(database).downloadRecord(docUri, out);\n+            response.flushBuffer();\n+        } catch (IOException e) {\n+            throw new RuntimeException(String.format(\"Unable to download record with docUri: %s with cause: %s\", docUri, e.getMessage()));", "originalCommit": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55ab47236c5677f0a3af27c48a991e5b91f16ca8", "chunk": "diff --git a/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java b/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java\nindex 56027db16..2be3243c7 100644\n--- a/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java\n+++ b/marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java\n\n@@ -57,21 +59,32 @@ public class EntitySearchController extends BaseController {\n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public JsonNode getRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database) {\n-        return getEntitySearchService(database).getRecord(docUri, true);\n+        return getEntitySearchService(database).getRecord(docUri);\n     }\n \n     @RequestMapping(value = \"/downloadRecord\", method = RequestMethod.GET)\n     public void downloadRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database, HttpServletResponse response) {\n-        String[] docUriArray = docUri.split(\"/\");\n-        String fileName = docUriArray[docUriArray.length-1];\n-        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n-        response.addHeader(\"Content-Disposition\", String.format(\"attachment; filename=%s\", fileName));\n-\n         try (OutputStream out = response.getOutputStream()) {\n-            newEntitySearchManager(database).downloadRecord(docUri, out);\n+            String[] docUriArray = docUri.split(\"/\");\n+            String fileName = docUriArray[docUriArray.length-1];\n+            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+            response.addHeader(\"Content-Disposition\", String.format(\"attachment; filename=%s\", fileName));\n+\n+            byte[] bytes = null;\n+            JsonNode record = getEntitySearchService(database).getRecord(docUri);\n+            if(null == record || null == record.get(\"data\")) {\n+                throw new RuntimeException(String.format(\"Unable to download record with URI: %s as document does not exist\", docUri));\n+            }\n+\n+            if(record.get(\"recordType\").asText().equals(\"binary\")) {\n+                bytes = Hex.decodeHex(record.get(\"data\").asText().toCharArray());\n+            } else {\n+                bytes = record.get(\"data\").asText().getBytes();\n+            }\n+            out.write(bytes);\n             response.flushBuffer();\n-        } catch (IOException e) {\n-            throw new RuntimeException(String.format(\"Unable to download record with docUri: %s with cause: %s\", docUri, e.getMessage()));\n+        } catch (IOException | DecoderException e) {\n+            throw new RuntimeException(String.format(\"Unable to download record with URI: %s with cause: %s\", docUri, e.getMessage()));\n         }\n     }\n \n"}}, {"oid": "55ab47236c5677f0a3af27c48a991e5b91f16ca8", "url": "https://github.com/marklogic/marklogic-data-hub/commit/55ab47236c5677f0a3af27c48a991e5b91f16ca8", "message": "DHFPROD-6303: Download a record or artifact from All Data View", "committedDate": "2020-12-09T00:41:00Z", "type": "forcePushed"}, {"oid": "8a3ae2b53037f6771c2ed45347dca7823d948176", "url": "https://github.com/marklogic/marklogic-data-hub/commit/8a3ae2b53037f6771c2ed45347dca7823d948176", "message": "DHFPROD-6303: Download a record or artifact from All Data View", "committedDate": "2020-12-09T05:36:02Z", "type": "forcePushed"}, {"oid": "d88ae43b293be2d5bf31b52a6df64c5cd595e7b0", "url": "https://github.com/marklogic/marklogic-data-hub/commit/d88ae43b293be2d5bf31b52a6df64c5cd595e7b0", "message": "DHFPROD-6303: Download a record or artifact from All Data View", "committedDate": "2020-12-09T17:50:45Z", "type": "forcePushed"}, {"oid": "121178a2ff6920f33f12ad137c8faa19b44cc491", "url": "https://github.com/marklogic/marklogic-data-hub/commit/121178a2ff6920f33f12ad137c8faa19b44cc491", "message": "DHFPROD-6303: Download a record or artifact from All Data View", "committedDate": "2020-12-09T17:58:10Z", "type": "forcePushed"}, {"oid": "4aab108104361b656b1ce9e56efa75d7068db709", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4aab108104361b656b1ce9e56efa75d7068db709", "message": "DHFPROD-6303: Download a record or artifact from All Data View", "committedDate": "2020-12-09T18:16:22Z", "type": "commit"}, {"oid": "4aab108104361b656b1ce9e56efa75d7068db709", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4aab108104361b656b1ce9e56efa75d7068db709", "message": "DHFPROD-6303: Download a record or artifact from All Data View", "committedDate": "2020-12-09T18:16:22Z", "type": "forcePushed"}]}