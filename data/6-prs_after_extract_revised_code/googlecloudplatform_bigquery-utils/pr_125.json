{"pr_number": 125, "pr_title": "Automatic Query Fixer: Implement Tokenizer and a few query helper classes", "pr_createdAt": "2020-07-30T23:11:25Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125", "timeline": [{"oid": "fab85becdc0345f57bfc78394ceaad4b70618bb9", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/fab85becdc0345f57bfc78394ceaad4b70618bb9", "message": "add getMessage method", "committedDate": "2020-07-17T18:08:15Z", "type": "commit"}, {"oid": "0ec1d3710e919bc04b693a2819d896866d298a95", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0ec1d3710e919bc04b693a2819d896866d298a95", "message": "implement SqlErrorFactory", "committedDate": "2020-07-17T18:10:58Z", "type": "commit"}, {"oid": "c904515daa5d85c2d7761784ea040e7f41188120", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/c904515daa5d85c2d7761784ea040e7f41188120", "message": "Merge remote-tracking branch 'upstream/master' into add_error_class", "committedDate": "2020-07-17T18:12:33Z", "type": "commit"}, {"oid": "f546f5d54e17211d513f0b56d6aaa7a545126f0c", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f546f5d54e17211d513f0b56d6aaa7a545126f0c", "message": "minor change", "committedDate": "2020-07-27T18:17:36Z", "type": "commit"}, {"oid": "64133924809dfc239ad0e0f3bf4cb31c2370916e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/64133924809dfc239ad0e0f3bf4cb31c2370916e", "message": "Merge remote-tracking branch 'upstream/master' into add_error_class", "committedDate": "2020-07-27T18:20:50Z", "type": "commit"}, {"oid": "225248220a13d782a7daaa74eedd46e0207f97d8", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/225248220a13d782a7daaa74eedd46e0207f97d8", "message": "Implement tokenizer and a few helper classes to process query", "committedDate": "2020-07-30T23:06:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNTIzNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464225234", "bodyText": "nit: \"Use\" and unwanted new line :)", "author": "kikkyo", "createdAt": "2020-08-03T06:52:00Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import lombok.Getter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/** A class used to convert between index and position (row and column) of a query. */\n+@Getter\n+public class QueryPositionConverter {\n+\n+  /** The query used to convert indices and positions. */\n+  private final String query;\n+\n+  /** The index in the query corresponding to the starting position of each line. */\n+  private List<Integer> startIndices;\n+\n+  public QueryPositionConverter(String query) {\n+    this.query = query;\n+    fillInStartIndices(query);\n+  }\n+\n+  private void fillInStartIndices(String query) {\n+    startIndices = new ArrayList<>();\n+    startIndices.add(0);\n+    for (int i = 0; i < query.length() - 1; i++) {\n+      if (query.charAt(i) == '\\n') {\n+        startIndices.add(i + 1);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Convert row and column number to an index.\n+   *\n+   * @param row row number\n+   * @param col col number\n+   * @return index\n+   */\n+  public int posToIndex(int row, int col) {\n+    if (row > startIndices.size()) {\n+      return -1;\n+    }\n+\n+    // row and col are 1-index, but the String is 0-index\n+    // therefore -1 is needed for conversion.\n+    int index = startIndices.get(row - 1) + col - 1;\n+\n+    int nextLineStartIndex;\n+    if (row == startIndices.size()) {\n+      nextLineStartIndex = query.length();\n+    } else {\n+      nextLineStartIndex = startIndices.get(row);\n+    }\n+    if (index > nextLineStartIndex) {\n+      return -1;\n+    }\n+    return index;\n+  }\n+\n+  /**\n+   * Convert index to position.\n+   *\n+   * @param index index to be converted\n+   * @return position\n+   */\n+  public Position indexToPos(int index) {\n+    if (index < 0 || index >= query.length()) {\n+      return Position.invalid();\n+    }\n+    int line = findStartLine(index);\n+    return new Position(line, index - startIndices.get(line - 1) + 1);\n+  }\n+\n+  // use the binary search on startIndices to find the greatest start index", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNTcyMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464605720", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-03T19:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "cbfbbfc01d8a62c7adf7b77cec349ea1b9e36942", "chunk": "diff --git a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\nindex 216648c..4645fa8 100644\n--- a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\n+++ b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\n\n@@ -73,15 +73,15 @@ public class QueryPositionConverter {\n     return new Position(line, index - startIndices.get(line - 1) + 1);\n   }\n \n-  // use the binary search on startIndices to find the greatest start index\n-  // that is less or equal index.\n-  // the return line should be 1-index\n+  // Use the binary search on startIndices to find the greatest start index\n+  // that is less than or equals to index. The return line should be 1-index.\n   private int findStartLine(int index) {\n     int left = 0, right = startIndices.size() - 1;\n     while (left < right) {\n       // in case left + right overflow.\n       int mid = left + (right - left + 1) / 2;\n       if (startIndices.get(mid) == index) {\n+        // +1 is to convert the 0-based index to 1-based.\n         return mid + 1;\n       } else if (startIndices.get(mid) < index) {\n         left = mid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNTYxMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464225611", "bodyText": "why right - left + 1? not right -left", "author": "kikkyo", "createdAt": "2020-08-03T06:53:06Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import lombok.Getter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/** A class used to convert between index and position (row and column) of a query. */\n+@Getter\n+public class QueryPositionConverter {\n+\n+  /** The query used to convert indices and positions. */\n+  private final String query;\n+\n+  /** The index in the query corresponding to the starting position of each line. */\n+  private List<Integer> startIndices;\n+\n+  public QueryPositionConverter(String query) {\n+    this.query = query;\n+    fillInStartIndices(query);\n+  }\n+\n+  private void fillInStartIndices(String query) {\n+    startIndices = new ArrayList<>();\n+    startIndices.add(0);\n+    for (int i = 0; i < query.length() - 1; i++) {\n+      if (query.charAt(i) == '\\n') {\n+        startIndices.add(i + 1);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Convert row and column number to an index.\n+   *\n+   * @param row row number\n+   * @param col col number\n+   * @return index\n+   */\n+  public int posToIndex(int row, int col) {\n+    if (row > startIndices.size()) {\n+      return -1;\n+    }\n+\n+    // row and col are 1-index, but the String is 0-index\n+    // therefore -1 is needed for conversion.\n+    int index = startIndices.get(row - 1) + col - 1;\n+\n+    int nextLineStartIndex;\n+    if (row == startIndices.size()) {\n+      nextLineStartIndex = query.length();\n+    } else {\n+      nextLineStartIndex = startIndices.get(row);\n+    }\n+    if (index > nextLineStartIndex) {\n+      return -1;\n+    }\n+    return index;\n+  }\n+\n+  /**\n+   * Convert index to position.\n+   *\n+   * @param index index to be converted\n+   * @return position\n+   */\n+  public Position indexToPos(int index) {\n+    if (index < 0 || index >= query.length()) {\n+      return Position.invalid();\n+    }\n+    int line = findStartLine(index);\n+    return new Position(line, index - startIndices.get(line - 1) + 1);\n+  }\n+\n+  // use the binary search on startIndices to find the greatest start index\n+  // that is less or equal index.\n+  // the return line should be 1-index\n+  private int findStartLine(int index) {\n+    int left = 0, right = startIndices.size() - 1;\n+    while (left < right) {\n+      // in case left + right overflow.\n+      int mid = left + (right - left + 1) / 2;", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNzQ3MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464607471", "bodyText": "It corresponds to the mid - 1 in line 89. When left + 1 == right, then mid = right. Despite the result of startIndices.get(mid) < index, the for loop will be broken given finally left == right. If we don't have the +1, then it will becomes a dead loop if startIndices.get(mid) < index == true.", "author": "mingen-pan", "createdAt": "2020-08-03T19:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNTYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NTQ5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465265493", "bodyText": "Can you have (right - left + 1) and right = mid instead then?", "author": "kikkyo", "createdAt": "2020-08-04T19:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNTYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbfbbfc01d8a62c7adf7b77cec349ea1b9e36942", "chunk": "diff --git a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\nindex 216648c..4645fa8 100644\n--- a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\n+++ b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\n\n@@ -73,15 +73,15 @@ public class QueryPositionConverter {\n     return new Position(line, index - startIndices.get(line - 1) + 1);\n   }\n \n-  // use the binary search on startIndices to find the greatest start index\n-  // that is less or equal index.\n-  // the return line should be 1-index\n+  // Use the binary search on startIndices to find the greatest start index\n+  // that is less than or equals to index. The return line should be 1-index.\n   private int findStartLine(int index) {\n     int left = 0, right = startIndices.size() - 1;\n     while (left < right) {\n       // in case left + right overflow.\n       int mid = left + (right - left + 1) / 2;\n       if (startIndices.get(mid) == index) {\n+        // +1 is to convert the 0-based index to 1-based.\n         return mid + 1;\n       } else if (startIndices.get(mid) < index) {\n         left = mid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNjc5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464226793", "bodyText": "if there is only one element, left = right = 0, seems you will return 1?", "author": "kikkyo", "createdAt": "2020-08-03T06:56:24Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import lombok.Getter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/** A class used to convert between index and position (row and column) of a query. */\n+@Getter\n+public class QueryPositionConverter {\n+\n+  /** The query used to convert indices and positions. */\n+  private final String query;\n+\n+  /** The index in the query corresponding to the starting position of each line. */\n+  private List<Integer> startIndices;\n+\n+  public QueryPositionConverter(String query) {\n+    this.query = query;\n+    fillInStartIndices(query);\n+  }\n+\n+  private void fillInStartIndices(String query) {\n+    startIndices = new ArrayList<>();\n+    startIndices.add(0);\n+    for (int i = 0; i < query.length() - 1; i++) {\n+      if (query.charAt(i) == '\\n') {\n+        startIndices.add(i + 1);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Convert row and column number to an index.\n+   *\n+   * @param row row number\n+   * @param col col number\n+   * @return index\n+   */\n+  public int posToIndex(int row, int col) {\n+    if (row > startIndices.size()) {\n+      return -1;\n+    }\n+\n+    // row and col are 1-index, but the String is 0-index\n+    // therefore -1 is needed for conversion.\n+    int index = startIndices.get(row - 1) + col - 1;\n+\n+    int nextLineStartIndex;\n+    if (row == startIndices.size()) {\n+      nextLineStartIndex = query.length();\n+    } else {\n+      nextLineStartIndex = startIndices.get(row);\n+    }\n+    if (index > nextLineStartIndex) {\n+      return -1;\n+    }\n+    return index;\n+  }\n+\n+  /**\n+   * Convert index to position.\n+   *\n+   * @param index index to be converted\n+   * @return position\n+   */\n+  public Position indexToPos(int index) {\n+    if (index < 0 || index >= query.length()) {\n+      return Position.invalid();\n+    }\n+    int line = findStartLine(index);\n+    return new Position(line, index - startIndices.get(line - 1) + 1);\n+  }\n+\n+  // use the binary search on startIndices to find the greatest start index\n+  // that is less or equal index.\n+  // the return line should be 1-index\n+  private int findStartLine(int index) {\n+    int left = 0, right = startIndices.size() - 1;", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMDc1OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464600758", "bodyText": "Yes, you are right, because the returned line number should be 1-based index. Thus, +1 is added to the line number.", "author": "mingen-pan", "createdAt": "2020-08-03T18:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNjc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cbfbbfc01d8a62c7adf7b77cec349ea1b9e36942", "chunk": "diff --git a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\nindex 216648c..4645fa8 100644\n--- a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\n+++ b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\n\n@@ -73,15 +73,15 @@ public class QueryPositionConverter {\n     return new Position(line, index - startIndices.get(line - 1) + 1);\n   }\n \n-  // use the binary search on startIndices to find the greatest start index\n-  // that is less or equal index.\n-  // the return line should be 1-index\n+  // Use the binary search on startIndices to find the greatest start index\n+  // that is less than or equals to index. The return line should be 1-index.\n   private int findStartLine(int index) {\n     int left = 0, right = startIndices.size() - 1;\n     while (left < right) {\n       // in case left + right overflow.\n       int mid = left + (right - left + 1) / 2;\n       if (startIndices.get(mid) == index) {\n+        // +1 is to convert the 0-based index to 1-based.\n         return mid + 1;\n       } else if (startIndices.get(mid) < index) {\n         left = mid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNzE5NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464227195", "bodyText": "nit: The", "author": "kikkyo", "createdAt": "2020-08-03T06:57:29Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.google.cloud.bigquery.utils.queryfixer.tokenizer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.QueryPositionConverter;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.util.StringUtil;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+\n+/** A class used to convert between index and position (row and column) of a query. */\n+@AllArgsConstructor\n+public class QueryTokenProcessor {\n+\n+  private final Tokenizer tokenizer;\n+\n+  /**\n+   * Return a token which is closed to a specific position at a query.\n+   *\n+   * @param query the input query\n+   * @param row the row of the position.\n+   * @param column the column of the position\n+   * @return the closed token.\n+   */\n+  public IToken getTokenAt(String query, int row, int column) {\n+    for (IToken token : getAllTokens(query)) {\n+      if (token.getEndRow() >= row && token.getEndColumn() >= column) {\n+        return token;\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Tokenize a query and return all its tokens.\n+   *\n+   * @param query the query to be tokenized\n+   * @return a list of tokens of the query\n+   */\n+  public List<IToken> getAllTokens(String query) {\n+    return tokenizer.tokenize(query);\n+  }\n+\n+  /**\n+   * Replace a token of a query and return the new query.\n+   *\n+   * @param query the query whose token is to be replaced\n+   * @param token the token to be replaced\n+   * @param identifier the identifier the token is placed to.\n+   * @return the replaced query\n+   */\n+  public String replaceToken(String query, IToken token, String identifier) {\n+    QueryPositionConverter converter = new QueryPositionConverter(query);\n+    // the token's row and column number are 1-index,", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNzU2Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464607563", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-03T19:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNzE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbfbbfc01d8a62c7adf7b77cec349ea1b9e36942", "chunk": "diff --git a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java\nindex af3bcb1..dd1c0eb 100644\n--- a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java\n+++ b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java\n\n@@ -51,12 +51,11 @@ public class QueryTokenProcessor {\n    */\n   public String replaceToken(String query, IToken token, String identifier) {\n     QueryPositionConverter converter = new QueryPositionConverter(query);\n-    // the token's row and column number are 1-index,\n-    // but the array and string index start with 0.\n+    // The token's row and column number are 1-index, but the array and string index start with 0.\n     int startIndex = converter.posToIndex(token.getBeginRow(), token.getBeginColumn());\n     int endIndex = converter.posToIndex(token.getEndRow(), token.getEndColumn());\n     if (startIndex == -1 || endIndex == -1) {\n-      throw new IllegalArgumentException(\"token position does not fit in the input query\");\n+      throw new IllegalArgumentException(\"Token position does not fit in the input query\");\n     }\n     return StringUtil.replaceStringBetweenIndex(query, startIndex, endIndex + 1, identifier);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNzM0Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464227343", "bodyText": "nit: Token", "author": "kikkyo", "createdAt": "2020-08-03T06:57:53Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.google.cloud.bigquery.utils.queryfixer.tokenizer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.QueryPositionConverter;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.util.StringUtil;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+\n+/** A class used to convert between index and position (row and column) of a query. */\n+@AllArgsConstructor\n+public class QueryTokenProcessor {\n+\n+  private final Tokenizer tokenizer;\n+\n+  /**\n+   * Return a token which is closed to a specific position at a query.\n+   *\n+   * @param query the input query\n+   * @param row the row of the position.\n+   * @param column the column of the position\n+   * @return the closed token.\n+   */\n+  public IToken getTokenAt(String query, int row, int column) {\n+    for (IToken token : getAllTokens(query)) {\n+      if (token.getEndRow() >= row && token.getEndColumn() >= column) {\n+        return token;\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Tokenize a query and return all its tokens.\n+   *\n+   * @param query the query to be tokenized\n+   * @return a list of tokens of the query\n+   */\n+  public List<IToken> getAllTokens(String query) {\n+    return tokenizer.tokenize(query);\n+  }\n+\n+  /**\n+   * Replace a token of a query and return the new query.\n+   *\n+   * @param query the query whose token is to be replaced\n+   * @param token the token to be replaced\n+   * @param identifier the identifier the token is placed to.\n+   * @return the replaced query\n+   */\n+  public String replaceToken(String query, IToken token, String identifier) {\n+    QueryPositionConverter converter = new QueryPositionConverter(query);\n+    // the token's row and column number are 1-index,\n+    // but the array and string index start with 0.\n+    int startIndex = converter.posToIndex(token.getBeginRow(), token.getBeginColumn());\n+    int endIndex = converter.posToIndex(token.getEndRow(), token.getEndColumn());\n+    if (startIndex == -1 || endIndex == -1) {\n+      throw new IllegalArgumentException(\"token position does not fit in the input query\");", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNzU5Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464607596", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-03T19:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNzM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cbfbbfc01d8a62c7adf7b77cec349ea1b9e36942", "chunk": "diff --git a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java\nindex af3bcb1..dd1c0eb 100644\n--- a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java\n+++ b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/QueryTokenProcessor.java\n\n@@ -51,12 +51,11 @@ public class QueryTokenProcessor {\n    */\n   public String replaceToken(String query, IToken token, String identifier) {\n     QueryPositionConverter converter = new QueryPositionConverter(query);\n-    // the token's row and column number are 1-index,\n-    // but the array and string index start with 0.\n+    // The token's row and column number are 1-index, but the array and string index start with 0.\n     int startIndex = converter.posToIndex(token.getBeginRow(), token.getBeginColumn());\n     int endIndex = converter.posToIndex(token.getEndRow(), token.getEndColumn());\n     if (startIndex == -1 || endIndex == -1) {\n-      throw new IllegalArgumentException(\"token position does not fit in the input query\");\n+      throw new IllegalArgumentException(\"Token position does not fit in the input query\");\n     }\n     return StringUtil.replaceStringBetweenIndex(query, startIndex, endIndex + 1, identifier);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyODI4MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464228281", "bodyText": "I think this is very common algorithm you don't have to comment on this :)", "author": "kikkyo", "createdAt": "2020-08-03T07:00:23Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/StringUtil.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.google.cloud.bigquery.utils.queryfixer.util;\n+\n+import lombok.Value;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/** A utility class to provide static helper methods regarding String. */\n+public class StringUtil {\n+\n+  /**\n+   * Find word(s) from a dictionary that are most similar to a target word. The similarity is\n+   * measured by edit distance between two words.\n+   *\n+   * @param dict dictionary of words\n+   * @param target target word\n+   * @return a list of Strings and their edit distance to the target.\n+   */\n+  public static SimilarStrings findSimilarWords(Collection<String> dict, String target) {\n+    List<Pair<Integer, String>> distanceWordPairs =\n+        dict.stream()\n+            .map(word -> Pair.of(editDistance(word, target), word))\n+            .collect(Collectors.toList());\n+\n+    if (distanceWordPairs.isEmpty()) {\n+      return SimilarStrings.empty();\n+    }\n+\n+    Integer minDistance =\n+        distanceWordPairs.stream().min(Comparator.comparingInt(Pair::getLeft)).get().getLeft();\n+\n+    List<String> words =\n+        distanceWordPairs.stream()\n+            .filter(pair -> (pair.getLeft().equals(minDistance)))\n+            .map(Pair::getRight)\n+            .collect(Collectors.toList());\n+    return new SimilarStrings(words, minDistance);\n+  }\n+\n+  // the code was inspired from\n+  // https://www.programcreek.com/2013/12/edit-distance-in-java/", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNzc1Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r464607753", "bodyText": "This comment was removed.", "author": "mingen-pan", "createdAt": "2020-08-03T19:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyODI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbfbbfc01d8a62c7adf7b77cec349ea1b9e36942", "chunk": "diff --git a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/StringUtil.java b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/StringUtil.java\nindex f8ee643..bcfa53f 100644\n--- a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/StringUtil.java\n+++ b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/StringUtil.java\n\n@@ -41,8 +41,6 @@ public class StringUtil {\n     return new SimilarStrings(words, minDistance);\n   }\n \n-  // the code was inspired from\n-  // https://www.programcreek.com/2013/12/edit-distance-in-java/\n   private static int editDistance(String word1, String word2) {\n     int len1 = word1.length();\n     int len2 = word2.length();\n"}}, {"oid": "cbfbbfc01d8a62c7adf7b77cec349ea1b9e36942", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cbfbbfc01d8a62c7adf7b77cec349ea1b9e36942", "message": "Minor change to comments.", "committedDate": "2020-08-03T19:02:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3MTQzOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465271439", "bodyText": "merged into one line? String target = \"....\"", "author": "kikkyo", "createdAt": "2020-08-04T19:14:42Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessorTest.java", "diffHunk": "@@ -15,16 +16,47 @@\n \n   @Before\n   public void createService() {\n-    tokenService = new QueryTokenProcessor(new BigQueryParserFactory());\n+    tokenService = new QueryTokenProcessor(new CalciteTokenizer(new BigQueryParserFactory()));\n   }\n \n   @Test\n   public void convertQueryToTokens() {\n-    String sql = \"Select col from `d1.t1`\\n\" + \"where t1.col>'val'\";\n+    String query = \"Select col from `d1.t1`\\n\" + \"where t1.col>'val'\";\n+\n+    List<IToken> tokens = tokenService.getAllTokens(query);\n+    QueryPositionConverter converter = new QueryPositionConverter(query);\n \n-    List<IToken> tokens = tokenService.getAllTokens(sql);\n-    assertEquals(10, tokens.size());\n-    assertEquals(\"Select\", tokens.get(0).getImage());\n-    assertEquals(\"'val'\", tokens.get(tokens.size() - 1).getImage());\n+    for (IToken token : tokens) {\n+      int startIndex = converter.posToIndex(token.getBeginRow(), token.getBeginColumn());\n+      int endIndex = converter.posToIndex(token.getEndRow(), token.getEndColumn() + 1);\n+      assertEquals(\n+          token.getImage().toUpperCase(), query.substring(startIndex, endIndex).toUpperCase());\n+    }\n+  }\n+\n+  @Test\n+  public void verifyModifiedQuery() {\n+    String origin = \"Select col from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";\n+    String target;\n+\n+    target = \"Select Distinct col from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4ODY3Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465388672", "bodyText": "Yes, the auto formatter put them in one line with +s, so I deleted the +s since they are in one line.", "author": "mingen-pan", "createdAt": "2020-08-04T23:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3MTQzOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3MzE4Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465273187", "bodyText": "Is this intended that extra space between \"Select\" and \"Distinct\" ?", "author": "kikkyo", "createdAt": "2020-08-04T19:18:05Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessorTest.java", "diffHunk": "@@ -15,16 +16,47 @@\n \n   @Before\n   public void createService() {\n-    tokenService = new QueryTokenProcessor(new BigQueryParserFactory());\n+    tokenService = new QueryTokenProcessor(new CalciteTokenizer(new BigQueryParserFactory()));\n   }\n \n   @Test\n   public void convertQueryToTokens() {\n-    String sql = \"Select col from `d1.t1`\\n\" + \"where t1.col>'val'\";\n+    String query = \"Select col from `d1.t1`\\n\" + \"where t1.col>'val'\";\n+\n+    List<IToken> tokens = tokenService.getAllTokens(query);\n+    QueryPositionConverter converter = new QueryPositionConverter(query);\n \n-    List<IToken> tokens = tokenService.getAllTokens(sql);\n-    assertEquals(10, tokens.size());\n-    assertEquals(\"Select\", tokens.get(0).getImage());\n-    assertEquals(\"'val'\", tokens.get(tokens.size() - 1).getImage());\n+    for (IToken token : tokens) {\n+      int startIndex = converter.posToIndex(token.getBeginRow(), token.getBeginColumn());\n+      int endIndex = converter.posToIndex(token.getEndRow(), token.getEndColumn() + 1);\n+      assertEquals(\n+          token.getImage().toUpperCase(), query.substring(startIndex, endIndex).toUpperCase());\n+    }\n+  }\n+\n+  @Test\n+  public void verifyModifiedQuery() {\n+    String origin = \"Select col from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";\n+    String target;\n+\n+    target = \"Select Distinct col from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";\n+    String identifier = \"Select Distinct\";\n+    IToken token = tokenService.getTokenAt(origin, 1, 1);\n+    // Replace Select With Select Distinct\n+    String modifiedQuery = tokenService.replaceToken(origin, token, identifier);\n+    assertEquals(target, modifiedQuery);\n+\n+    target = \"Select  Distinct col from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4OTMyOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465389328", "bodyText": "Yes, I think so. insertBeforeToken will automatically put a whitespace in case there is no whitespace.", "author": "mingen-pan", "createdAt": "2020-08-04T23:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3MzE4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3MzMxNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465273316", "bodyText": "Is this intended that extra space between \"Select\" and \"from\" ?", "author": "kikkyo", "createdAt": "2020-08-04T19:18:20Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessorTest.java", "diffHunk": "@@ -15,16 +16,47 @@\n \n   @Before\n   public void createService() {\n-    tokenService = new QueryTokenProcessor(new BigQueryParserFactory());\n+    tokenService = new QueryTokenProcessor(new CalciteTokenizer(new BigQueryParserFactory()));\n   }\n \n   @Test\n   public void convertQueryToTokens() {\n-    String sql = \"Select col from `d1.t1`\\n\" + \"where t1.col>'val'\";\n+    String query = \"Select col from `d1.t1`\\n\" + \"where t1.col>'val'\";\n+\n+    List<IToken> tokens = tokenService.getAllTokens(query);\n+    QueryPositionConverter converter = new QueryPositionConverter(query);\n \n-    List<IToken> tokens = tokenService.getAllTokens(sql);\n-    assertEquals(10, tokens.size());\n-    assertEquals(\"Select\", tokens.get(0).getImage());\n-    assertEquals(\"'val'\", tokens.get(tokens.size() - 1).getImage());\n+    for (IToken token : tokens) {\n+      int startIndex = converter.posToIndex(token.getBeginRow(), token.getBeginColumn());\n+      int endIndex = converter.posToIndex(token.getEndRow(), token.getEndColumn() + 1);\n+      assertEquals(\n+          token.getImage().toUpperCase(), query.substring(startIndex, endIndex).toUpperCase());\n+    }\n+  }\n+\n+  @Test\n+  public void verifyModifiedQuery() {\n+    String origin = \"Select col from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";\n+    String target;\n+\n+    target = \"Select Distinct col from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";\n+    String identifier = \"Select Distinct\";\n+    IToken token = tokenService.getTokenAt(origin, 1, 1);\n+    // Replace Select With Select Distinct\n+    String modifiedQuery = tokenService.replaceToken(origin, token, identifier);\n+    assertEquals(target, modifiedQuery);\n+\n+    target = \"Select  Distinct col from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";\n+    identifier = \"Distinct\";\n+    token = tokenService.getTokenAt(origin, 1, 8);\n+    // Insert Distinct before FROM\n+    modifiedQuery = tokenService.insertBeforeToken(origin, token, identifier);\n+    assertEquals(target, modifiedQuery);\n+\n+    target = \"Select  from t1 Join\\nt2 on t1.id = t2.id\\nwhere t1.col > 'val'\";", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4OTU3NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465389575", "bodyText": "Yes, the deleteToken can only delete token not the whitespace between it.", "author": "mingen-pan", "createdAt": "2020-08-04T23:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3MzMxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3NjMwMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465276300", "bodyText": "nit: always use \"extra space\" \"1 - index\" same with the code style :)", "author": "kikkyo", "createdAt": "2020-08-04T19:24:24Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import lombok.Getter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/** A class used to convert between index and position (row and column) of a query. */\n+@Getter\n+public class QueryPositionConverter {\n+\n+  /** The query used to convert indices and positions. */\n+  private final String query;\n+\n+  /** The index in the query corresponding to the starting position of each line. */\n+  private List<Integer> startIndices;\n+\n+  public QueryPositionConverter(String query) {\n+    this.query = query;\n+    fillInStartIndices(query);\n+  }\n+\n+  private void fillInStartIndices(String query) {\n+    startIndices = new ArrayList<>();\n+    startIndices.add(0);\n+    for (int i = 0; i < query.length() - 1; i++) {\n+      if (query.charAt(i) == '\\n') {\n+        startIndices.add(i + 1);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Convert row and column number to an index.\n+   *\n+   * @param row row number\n+   * @param col col number\n+   * @return index\n+   */\n+  public int posToIndex(int row, int col) {\n+    if (row > startIndices.size()) {\n+      return -1;\n+    }\n+\n+    // row and col are 1-index, but the String is 0-index", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88aa4fa6951b881cf55cc74aa0998cbf6efbd4d5", "chunk": "diff --git a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\nindex 216648c..4645fa8 100644\n--- a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\n+++ b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryPositionConverter.java\n\n@@ -73,15 +73,15 @@ public class QueryPositionConverter {\n     return new Position(line, index - startIndices.get(line - 1) + 1);\n   }\n \n-  // use the binary search on startIndices to find the greatest start index\n-  // that is less or equal index.\n-  // the return line should be 1-index\n+  // Use the binary search on startIndices to find the greatest start index\n+  // that is less than or equals to index. The return line should be 1-index.\n   private int findStartLine(int index) {\n     int left = 0, right = startIndices.size() - 1;\n     while (left < right) {\n       // in case left + right overflow.\n       int mid = left + (right - left + 1) / 2;\n       if (startIndices.get(mid) == index) {\n+        // +1 is to convert the 0-based index to 1-based.\n         return mid + 1;\n       } else if (startIndices.get(mid) < index) {\n         left = mid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3Nzg5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465277893", "bodyText": "is this overridden \"sql\" by mistake ?", "author": "kikkyo", "createdAt": "2020-08-04T19:26:24Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/CalciteTokenizer.java", "diffHunk": "@@ -1,38 +1,27 @@\n-package com.google.cloud.bigquery.utils.queryfixer;\n-\n-import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n-import org.apache.calcite.sql.parser.babel.Token;\n+package com.google.cloud.bigquery.utils.queryfixer.tokenizer;\n \n+import com.google.cloud.bigquery.utils.queryfixer.BigQueryParserFactory;\n import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n import com.google.cloud.bigquery.utils.queryfixer.entity.TokenImpl;\n-import com.google.common.base.Preconditions;\n-\n import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.parser.babel.Token;\n \n import java.util.ArrayList;\n import java.util.List;\n \n-/**\n- * A processor provides methods for queries and tokens. It can be used to tokenize queries, find tokens based on\n- * positions, and modify a query in token-level.\n- * */\n @AllArgsConstructor\n-public class QueryTokenProcessor {\n+public class CalciteTokenizer implements Tokenizer {\n \n   private final BigQueryParserFactory parserFactory;\n \n-  /**\n-   * Tokenize a query and return all its tokens.\n-   * @param query the query to be tokenized\n-   * @return a list of tokens of the query\n-   */\n-  public List<IToken> getAllTokens(String query) {\n-    Preconditions.checkNotNull(query, \"Input query should not be null.\");\n-\n+  @Override\n+  public List<IToken> tokenize(@NonNull final String sql) {", "originalCommit": "225248220a13d782a7daaa74eedd46e0207f97d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MDE3MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/125#discussion_r465390171", "bodyText": "Ah yes. This code was written long time ago and I forgot to refactor it.", "author": "mingen-pan", "createdAt": "2020-08-04T23:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI3Nzg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "88aa4fa6951b881cf55cc74aa0998cbf6efbd4d5", "chunk": "diff --git a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/CalciteTokenizer.java b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/CalciteTokenizer.java\nindex 246946e..17ce094 100644\n--- a/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/CalciteTokenizer.java\n+++ b/tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/tokenizer/CalciteTokenizer.java\n\n@@ -17,11 +17,11 @@ public class CalciteTokenizer implements Tokenizer {\n   private final BigQueryParserFactory parserFactory;\n \n   @Override\n-  public List<IToken> tokenize(@NonNull final String sql) {\n+  public List<IToken> tokenize(@NonNull final String query) {\n     List<IToken> tokens = new ArrayList<>();\n \n     // SqlBabelParserImpl has a token manager to tokenize the input query.\n-    SqlBabelParserImpl parserImpl = parserFactory.getBabelParserImpl(sql);\n+    SqlBabelParserImpl parserImpl = parserFactory.getBabelParserImpl(query);\n \n     Token token;\n     final int EndKind = 0;\n"}}, {"oid": "88aa4fa6951b881cf55cc74aa0998cbf6efbd4d5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/88aa4fa6951b881cf55cc74aa0998cbf6efbd4d5", "message": "Minor change", "committedDate": "2020-08-04T23:43:04Z", "type": "commit"}, {"oid": "091656e2e0c99fdc0e2280e92f24104cd8e93b5a", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/091656e2e0c99fdc0e2280e92f24104cd8e93b5a", "message": "Merge branch 'master' into add_error_class", "committedDate": "2020-08-04T23:43:59Z", "type": "commit"}]}