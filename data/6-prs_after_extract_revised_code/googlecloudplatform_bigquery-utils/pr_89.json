{"pr_number": 89, "pr_title": "Query Verification: Data free verification with json schema", "pr_createdAt": "2020-07-08T23:54:04Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89", "timeline": [{"oid": "95b43a5d64312357c289693ac89b4a317328bb63", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/95b43a5d64312357c289693ac89b4a317328bb63", "message": "Data free verification with json schema", "committedDate": "2020-07-08T23:05:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNjk1OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r451906959", "bodyText": "Should we check length before accessing?", "author": "yzhvictor", "createdAt": "2020-07-09T01:08:19Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -54,4 +101,28 @@ public void verifyDataAware() {\n         System.out.printf(\"Data-Aware Verification %s\\n\", verificationResult ? \"Succeeded\" : \"Failed\");\n     }\n \n+    /**\n+     * Reads JSON schema to create table fields based on the schema\n+     * @param queryVerificationSchema Schema to read from\n+     * @return New table info\n+     */\n+    public static TableInfo getTableInfoFromJsonSchema(QueryVerificationSchema queryVerificationSchema) {\n+        // TODO Support multiple table schema\n+        JsonObject schemaObject = queryVerificationSchema.getJsonArray().get(0).getAsJsonObject();", "originalCommit": "95b43a5d64312357c289693ac89b4a317328bb63", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "578baa20ae5784322f9bd308bd268a963da7c595", "chunk": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\nindex d2724e0..a5602ff 100644\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\n+++ b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\n\n@@ -106,11 +106,16 @@ public class QueryVerifier {\n      * @param queryVerificationSchema Schema to read from\n      * @return New table info\n      */\n+    @Nullable\n     public static TableInfo getTableInfoFromJsonSchema(QueryVerificationSchema queryVerificationSchema) {\n+        if (queryVerificationSchema.getJsonArray().size() == 0) {\n+            return null;\n+        }\n+\n         // TODO Support multiple table schema\n         JsonObject schemaObject = queryVerificationSchema.getJsonArray().get(0).getAsJsonObject();\n \n-        JsonArray schemaFields = schemaObject.getAsJsonObject(\"schema\").getAsJsonArray(\"fields\");\n+        JsonArray schemaFields = schemaObject.getAsJsonArray(\"fields\");\n         JsonObject tableReference = schemaObject.get(\"tableReference\").getAsJsonObject();\n \n         // Deserialize fields\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNzI1Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r451907256", "bodyText": "Maybe add more comments regarding why using LegacySQLTypeName", "author": "yzhvictor", "createdAt": "2020-07-09T01:09:30Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQuerySchemaJsonDeserializer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.google.bigquery;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.StandardSQLTypeName;\n+import com.google.gson.*;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Class to deserialize the JSON schema to BigQuery fields\n+ */\n+public class BigQuerySchemaJsonDeserializer implements JsonDeserializer<FieldList> {\n+\n+    @Override\n+    public FieldList deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {\n+        JsonArray fieldsArray = jsonElement.getAsJsonArray();\n+\n+        for (JsonElement fieldElement : fieldsArray) {\n+            JsonObject fieldObject = fieldElement.getAsJsonObject();\n+\n+            // Field class uses LegacySQLTypeName for type", "originalCommit": "95b43a5d64312357c289693ac89b4a317328bb63", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "578baa20ae5784322f9bd308bd268a963da7c595", "chunk": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/BigQuerySchemaJsonDeserializer.java b/tools/query_verification/src/main/java/com/google/bigquery/BigQuerySchemaJsonDeserializer.java\nindex 6099414..ac81776 100644\n--- a/tools/query_verification/src/main/java/com/google/bigquery/BigQuerySchemaJsonDeserializer.java\n+++ b/tools/query_verification/src/main/java/com/google/bigquery/BigQuerySchemaJsonDeserializer.java\n\n@@ -20,17 +20,19 @@ public class BigQuerySchemaJsonDeserializer implements JsonDeserializer<FieldLis\n         for (JsonElement fieldElement : fieldsArray) {\n             JsonObject fieldObject = fieldElement.getAsJsonObject();\n \n-            // Field class uses LegacySQLTypeName for type\n+            // Field class stores types as LegacySQLTypeName instead of StandardSQLTypeName\n             if (fieldObject.has(\"type\")) {\n+                // Convert standard type to legacy type\n                 StandardSQLTypeName standardType = StandardSQLTypeName.valueOf(fieldObject.get(\"type\").getAsString());\n                 LegacySQLTypeName legacyType = LegacySQLTypeName.legacySQLTypeName(standardType);\n \n+                // Insert LegacySQLTypeName object so it can be used for type\n                 JsonObject typeObject = new JsonObject();\n                 typeObject.addProperty(\"constant\", legacyType.name());\n                 fieldObject.add(\"type\", typeObject);\n             }\n \n-            // Field class uses subFields instead of fields\n+            // Field class uses subFields instead of fields for STRUCT/RECORD type\n             if (fieldObject.has(\"fields\")) {\n                 fieldObject.add(\"subFields\", fieldObject.get(\"fields\"));\n                 fieldObject.remove(\"fields\");\n"}}, {"oid": "578baa20ae5784322f9bd308bd268a963da7c595", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/578baa20ae5784322f9bd308bd268a963da7c595", "message": "Updated schema formatting and error handling", "committedDate": "2020-07-09T16:10:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNTQ1Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452435452", "bodyText": "Although this saves some lines of code I'd advise against catching a NPE as it could be triggered for a variety of reasons. If possible I'd recommend handling null objects in the verifier code even if it makes a bit more verbose.", "author": "Luminarys", "createdAt": "2020-07-09T19:16:21Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -38,7 +44,48 @@ public void verify() {\n     public void verifyDataFree() {\n         boolean verificationResult = false;\n \n-        // TODO Implement data free verification\n+        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();\n+\n+        List<Table> tables = new ArrayList<Table>();\n+\n+        // Create tables based on schema\n+        if (migratedSchema != null) {\n+            try {\n+                if (migratedSchema.isInJsonFormat()) {\n+                    TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                    Table table = bigQuery.create(tableInfo);\n+                    tables.add(table);\n+                } else {\n+                    // TODO Load schema from DDL\n+                }\n+            } catch (NullPointerException e) {", "originalCommit": "578baa20ae5784322f9bd308bd268a963da7c595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0220ede92a935af662f0cdd028a4477c25d264ff", "chunk": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\nindex a5602ff..c17e221 100644\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\n+++ b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\n\n@@ -50,16 +50,16 @@ public class QueryVerifier {\n \n         // Create tables based on schema\n         if (migratedSchema != null) {\n-            try {\n-                if (migratedSchema.isInJsonFormat()) {\n-                    TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+            if (migratedSchema.isInJsonFormat()) {\n+                TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                if (tableInfo != null) {\n                     Table table = bigQuery.create(tableInfo);\n                     tables.add(table);\n                 } else {\n-                    // TODO Load schema from DDL\n+                    System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n                 }\n-            } catch (NullPointerException e) {\n-                System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n+            } else {\n+                // TODO Load schema from DDL\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNzE4Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452437183", "bodyText": "I assume in the case of a bad query we'd get back some error information from queryJob, it's probably worth collecting that if we can.", "author": "Luminarys", "createdAt": "2020-07-09T19:19:27Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -38,7 +44,48 @@ public void verify() {\n     public void verifyDataFree() {\n         boolean verificationResult = false;\n \n-        // TODO Implement data free verification\n+        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();\n+\n+        List<Table> tables = new ArrayList<Table>();\n+\n+        // Create tables based on schema\n+        if (migratedSchema != null) {\n+            try {\n+                if (migratedSchema.isInJsonFormat()) {\n+                    TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                    Table table = bigQuery.create(tableInfo);\n+                    tables.add(table);\n+                } else {\n+                    // TODO Load schema from DDL\n+                }\n+            } catch (NullPointerException e) {\n+                System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n+            }\n+        }\n+\n+        // Create dry-run job\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(migratedQuery.query())\n+                .setDryRun(true)\n+                .build();\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());\n+        JobInfo jobInfo = JobInfo.newBuilder(queryConfig)\n+                .setJobId(jobId)\n+                .build();\n+\n+        // TODO Support multiple queries\n+\n+        try {\n+            // Run dry-run\n+            Job queryJob = bigQuery.create(jobInfo);\n+            verificationResult = queryJob.getStatistics() != null;", "originalCommit": "578baa20ae5784322f9bd308bd268a963da7c595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0220ede92a935af662f0cdd028a4477c25d264ff", "chunk": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\nindex a5602ff..c17e221 100644\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\n+++ b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java\n\n@@ -50,16 +50,16 @@ public class QueryVerifier {\n \n         // Create tables based on schema\n         if (migratedSchema != null) {\n-            try {\n-                if (migratedSchema.isInJsonFormat()) {\n-                    TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+            if (migratedSchema.isInJsonFormat()) {\n+                TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                if (tableInfo != null) {\n                     Table table = bigQuery.create(tableInfo);\n                     tables.add(table);\n                 } else {\n-                    // TODO Load schema from DDL\n+                    System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n                 }\n-            } catch (NullPointerException e) {\n-                System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n+            } else {\n+                // TODO Load schema from DDL\n             }\n         }\n \n"}}, {"oid": "0220ede92a935af662f0cdd028a4477c25d264ff", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0220ede92a935af662f0cdd028a4477c25d264ff", "message": "Error handling fixes", "committedDate": "2020-07-09T22:01:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzk5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452527993", "bodyText": "Have you tested an exception is thrown due to a bad query, not just due to something like a failure to connect/bad credentials etc?", "author": "Luminarys", "createdAt": "2020-07-09T22:38:53Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -38,7 +44,49 @@ public void verify() {\n     public void verifyDataFree() {\n         boolean verificationResult = false;\n \n-        // TODO Implement data free verification\n+        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();\n+\n+        List<Table> tables = new ArrayList<Table>();\n+\n+        // Create tables based on schema\n+        if (migratedSchema != null) {\n+            if (migratedSchema.isInJsonFormat()) {\n+                TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                if (tableInfo != null) {\n+                    Table table = bigQuery.create(tableInfo);\n+                    tables.add(table);\n+                } else {\n+                    System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n+                }\n+            } else {\n+                // TODO Load schema from DDL\n+            }\n+        }\n+\n+        // Create dry-run job\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(migratedQuery.query())\n+                .setDryRun(true)\n+                .build();\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());\n+        JobInfo jobInfo = JobInfo.newBuilder(queryConfig)\n+                .setJobId(jobId)\n+                .build();\n+\n+        // TODO Support multiple queries\n+\n+        try {\n+            // Run dry-run\n+            Job queryJob = bigQuery.create(jobInfo);\n+            verificationResult = queryJob.getStatus().getState() == JobStatus.State.DONE;\n+        } catch (BigQueryException e) {\n+            // Print out syntax/semantic errors returned from BQ", "originalCommit": "0220ede92a935af662f0cdd028a4477c25d264ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MTE0NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452541145", "bodyText": "I've found that if the query is invalid from a syntax or semantic error, BQ throws an exception so I can just print the error message in catch block.", "author": "krishsuchdev", "createdAt": "2020-07-09T23:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NDU2Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452574563", "bodyText": "Ok that should be good for now then, thanks!", "author": "Luminarys", "createdAt": "2020-07-10T01:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzk5Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "bebd6b39656d3294585c6a17b1b637a587b199dc", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/bebd6b39656d3294585c6a17b1b637a587b199dc", "message": "Merge branch 'master' into dataFreeJson", "committedDate": "2020-07-10T18:06:32Z", "type": "commit"}]}