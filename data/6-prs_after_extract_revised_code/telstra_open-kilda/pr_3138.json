{"pr_number": 3138, "pr_title": "Introduce PoP for the switch and take it into account in pce", "pr_createdAt": "2020-01-22T14:20:47Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3138", "timeline": [{"oid": "7c189e129454bd63e5784cd740124b6fbcaa2f13", "url": "https://github.com/telstra/open-kilda/commit/7c189e129454bd63e5784cd740124b6fbcaa2f13", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-22T14:23:11Z", "type": "forcePushed"}, {"oid": "5dd8af87c74af2f9689b42566663f212d90e9c9c", "url": "https://github.com/telstra/open-kilda/commit/5dd8af87c74af2f9689b42566663f212d90e9c9c", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-22T14:34:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MjI3Ng==", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r369642276", "bodyText": "Why not to use computeIfAbsent method with Node::fromSwitch function?", "author": "rozdy", "createdAt": "2020-01-22T15:50:46Z", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -77,7 +80,12 @@ public void addLink(Isl isl, boolean errorOnDuplicates) {\n     }\n \n     private Node getOrInitSwitch(Switch sw) {\n-        return switches.computeIfAbsent(sw.getSwitchId(), Node::fromSwitchId);\n+        Node node = switches.get(sw.getSwitchId());\n+        if (node == null) {\n+            node = Node.fromSwitch(sw);\n+            switches.put(sw.getSwitchId(), node);\n+        }\n+        return node;", "originalCommit": "5dd8af87c74af2f9689b42566663f212d90e9c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "247c125b05637a5409a889a4540d2d6ffc226be3", "chunk": "diff --git a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\nindex 442a7e230..cf5750ecd 100644\n--- a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n+++ b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n\n@@ -79,13 +79,8 @@ public class AvailableNetwork {\n         }\n     }\n \n-    private Node getOrInitSwitch(Switch sw) {\n-        Node node = switches.get(sw.getSwitchId());\n-        if (node == null) {\n-            node = Node.fromSwitch(sw);\n-            switches.put(sw.getSwitchId(), node);\n-        }\n-        return node;\n+    private Node getOrInitSwitch(final Switch sw) {\n+        return switches.computeIfAbsent(sw.getSwitchId(), switchId ->  Node.fromSwitch(sw));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0NTcxMQ==", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r369645711", "bodyText": "Maybe rework foreach to for with explicit counter?", "author": "rozdy", "createdAt": "2020-01-22T15:56:07Z", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +121,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() == 1) {\n+            return;\n+        }\n+        int c = 0;\n+        Set<String> allocatedPopSet = new HashSet<>();\n+\n+        for (PathSegment ps : segments) {\n+            if (c == 0) {\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            } else if (c == segments.size() - 1) {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            } else {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            }\n+            c++;", "originalCommit": "5dd8af87c74af2f9689b42566663f212d90e9c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "247c125b05637a5409a889a4540d2d6ffc226be3", "chunk": "diff --git a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\nindex 442a7e230..cf5750ecd 100644\n--- a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n+++ b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n\n@@ -125,32 +120,32 @@ public class AvailableNetwork {\n      * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n      */\n     public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n-        if (segments.size() == 1) {\n+        if (segments.size() <= 1) {\n             return;\n         }\n-        int c = 0;\n+\n         Set<String> allocatedPopSet = new HashSet<>();\n \n-        for (PathSegment ps : segments) {\n-            if (c == 0) {\n+        for (int i = 0; i < segments.size(); i++) {\n+            PathSegment ps = segments.get(i);\n+            if (i == 0) {\n                 allocatedPopSet.add(ps.getDestSwitch().getPop());\n-            } else if (c == segments.size() - 1) {\n+            } else if (i == segments.size() - 1) {\n                 allocatedPopSet.add(ps.getSrcSwitch().getPop());\n             } else {\n                 allocatedPopSet.add(ps.getSrcSwitch().getPop());\n                 allocatedPopSet.add(ps.getDestSwitch().getPop());\n             }\n-            c++;\n         }\n         for (Edge edge : edges) {\n             String srcPop = edge.getSrcSwitch().getPop();\n             if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n-                edge.increaseDiversityGroupUseCounter();\n+                edge.increaseDiversityGroupPerPopUseCounter();\n                 continue;\n             }\n             String dstPop = edge.getDestSwitch().getPop();\n             if (dstPop != null && allocatedPopSet.contains(dstPop)) {\n-                edge.increaseDiversityGroupUseCounter();\n+                edge.increaseDiversityGroupPerPopUseCounter();\n                 continue;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODM0Ng==", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r369648346", "bodyText": "I think we need some combination of this method and old processDiversitySegments without pops method. Should we try to create diverse path through already used pops if no \"unused\" pops are available? Maybe add separate PopDiversityGroupUseCounter and related diversity.pop.cost param?", "author": "rozdy", "createdAt": "2020-01-22T16:00:14Z", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +121,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() == 1) {\n+            return;\n+        }\n+        int c = 0;\n+        Set<String> allocatedPopSet = new HashSet<>();\n+\n+        for (PathSegment ps : segments) {\n+            if (c == 0) {\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            } else if (c == segments.size() - 1) {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            } else {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            }\n+            c++;\n+        }\n+        for (Edge edge : edges) {\n+            String srcPop = edge.getSrcSwitch().getPop();\n+            if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n+                edge.increaseDiversityGroupUseCounter();\n+                continue;\n+            }\n+            String dstPop = edge.getDestSwitch().getPop();\n+            if (dstPop != null && allocatedPopSet.contains(dstPop)) {\n+                edge.increaseDiversityGroupUseCounter();\n+                continue;\n+            }\n+        }\n+\n+\n+    }", "originalCommit": "5dd8af87c74af2f9689b42566663f212d90e9c9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMDYwNg==", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r369810606", "bodyText": "I think it makes sense, and overall we should use both strategies at the same time. I introduced new param for config and add new counter for edge, it will also mitigate an issues when there are no PoPs in db yet. good catch", "author": "timofei-durakov", "createdAt": "2020-01-22T21:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "247c125b05637a5409a889a4540d2d6ffc226be3", "chunk": "diff --git a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\nindex 442a7e230..cf5750ecd 100644\n--- a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n+++ b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n\n@@ -125,32 +120,32 @@ public class AvailableNetwork {\n      * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n      */\n     public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n-        if (segments.size() == 1) {\n+        if (segments.size() <= 1) {\n             return;\n         }\n-        int c = 0;\n+\n         Set<String> allocatedPopSet = new HashSet<>();\n \n-        for (PathSegment ps : segments) {\n-            if (c == 0) {\n+        for (int i = 0; i < segments.size(); i++) {\n+            PathSegment ps = segments.get(i);\n+            if (i == 0) {\n                 allocatedPopSet.add(ps.getDestSwitch().getPop());\n-            } else if (c == segments.size() - 1) {\n+            } else if (i == segments.size() - 1) {\n                 allocatedPopSet.add(ps.getSrcSwitch().getPop());\n             } else {\n                 allocatedPopSet.add(ps.getSrcSwitch().getPop());\n                 allocatedPopSet.add(ps.getDestSwitch().getPop());\n             }\n-            c++;\n         }\n         for (Edge edge : edges) {\n             String srcPop = edge.getSrcSwitch().getPop();\n             if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n-                edge.increaseDiversityGroupUseCounter();\n+                edge.increaseDiversityGroupPerPopUseCounter();\n                 continue;\n             }\n             String dstPop = edge.getDestSwitch().getPop();\n             if (dstPop != null && allocatedPopSet.contains(dstPop)) {\n-                edge.increaseDiversityGroupUseCounter();\n+                edge.increaseDiversityGroupPerPopUseCounter();\n                 continue;\n             }\n         }\n"}}, {"oid": "247c125b05637a5409a889a4540d2d6ffc226be3", "url": "https://github.com/telstra/open-kilda/commit/247c125b05637a5409a889a4540d2d6ffc226be3", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-22T21:26:03Z", "type": "forcePushed"}, {"oid": "61d2d5e949d86ef94b9bc1dbfda9cd2db0371dff", "url": "https://github.com/telstra/open-kilda/commit/61d2d5e949d86ef94b9bc1dbfda9cd2db0371dff", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-23T07:51:23Z", "type": "forcePushed"}, {"oid": "6fc16e59d2a4276c8aacde79d9bdaba141091185", "url": "https://github.com/telstra/open-kilda/commit/6fc16e59d2a4276c8aacde79d9bdaba141091185", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-23T09:10:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDQwOQ==", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r370040409", "bodyText": "nit: allocatedPopSet -> allocatedPops or transitPops", "author": "rozdy", "createdAt": "2020-01-23T10:31:05Z", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +118,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() <= 1) {\n+            return;\n+        }\n+\n+        Set<String> allocatedPopSet = new HashSet<>();", "originalCommit": "6fc16e59d2a4276c8aacde79d9bdaba141091185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MjcyMQ==", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r370052721", "bodyText": "fixed as we discussed offline", "author": "timofei-durakov", "createdAt": "2020-01-23T10:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "adddccb5d2e3bf39dc1cf8d68861adc697cdda20", "chunk": "diff --git a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\nindex d0e42beb2..5310f052d 100644\n--- a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n+++ b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n\n@@ -128,17 +128,18 @@ public class AvailableNetwork {\n \n         Set<String> allocatedPopSet = new HashSet<>();\n \n-        for (int i = 0; i < segments.size(); i++) {\n-            PathSegment ps = segments.get(i);\n-            if (i == 0) {\n-                allocatedPopSet.add(ps.getDestSwitch().getPop());\n-            } else if (i == segments.size() - 1) {\n-                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n-            } else {\n-                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n-                allocatedPopSet.add(ps.getDestSwitch().getPop());\n-            }\n+        for (PathSegment ps : segments) {\n+            allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            allocatedPopSet.add(ps.getDestSwitch().getPop());\n         }\n+\n+        String inPop = segments.get(0).getSrcSwitch().getPop();\n+        allocatedPopSet.remove(inPop);\n+\n+        String outPop = segments.get(segments.size() - 1).getDestSwitch().getPop();\n+        allocatedPopSet.remove(outPop);\n+\n+\n         for (Edge edge : edges) {\n             String srcPop = edge.getSrcSwitch().getPop();\n             if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDU5MA==", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r370040590", "bodyText": "nit: this continue is redundant.", "author": "rozdy", "createdAt": "2020-01-23T10:31:28Z", "path": "services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java", "diffHunk": "@@ -113,6 +118,43 @@ public void processDiversitySegments(List<PathSegment> segments) {\n         }\n     }\n \n+    /**\n+     * Adds diversity weights into {@link AvailableNetwork} based on passed path segments and configuration.\n+     */\n+    public void processDiversitySegmentsWithPop(List<PathSegment> segments) {\n+        if (segments.size() <= 1) {\n+            return;\n+        }\n+\n+        Set<String> allocatedPopSet = new HashSet<>();\n+\n+        for (int i = 0; i < segments.size(); i++) {\n+            PathSegment ps = segments.get(i);\n+            if (i == 0) {\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            } else if (i == segments.size() - 1) {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            } else {\n+                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+                allocatedPopSet.add(ps.getDestSwitch().getPop());\n+            }\n+        }\n+        for (Edge edge : edges) {\n+            String srcPop = edge.getSrcSwitch().getPop();\n+            if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n+                edge.increaseDiversityGroupPerPopUseCounter();\n+                continue;\n+            }\n+            String dstPop = edge.getDestSwitch().getPop();\n+            if (dstPop != null && allocatedPopSet.contains(dstPop)) {\n+                edge.increaseDiversityGroupPerPopUseCounter();\n+                continue;", "originalCommit": "6fc16e59d2a4276c8aacde79d9bdaba141091185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MzA1MQ==", "url": "https://github.com/telstra/open-kilda/pull/3138#discussion_r370053051", "bodyText": "it was added intentionally so in case of upcoming changes it won't be forgotten", "author": "timofei-durakov", "createdAt": "2020-01-23T10:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "adddccb5d2e3bf39dc1cf8d68861adc697cdda20", "chunk": "diff --git a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\nindex d0e42beb2..5310f052d 100644\n--- a/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n+++ b/services/src/kilda-pce/src/main/java/org/openkilda/pce/impl/AvailableNetwork.java\n\n@@ -128,17 +128,18 @@ public class AvailableNetwork {\n \n         Set<String> allocatedPopSet = new HashSet<>();\n \n-        for (int i = 0; i < segments.size(); i++) {\n-            PathSegment ps = segments.get(i);\n-            if (i == 0) {\n-                allocatedPopSet.add(ps.getDestSwitch().getPop());\n-            } else if (i == segments.size() - 1) {\n-                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n-            } else {\n-                allocatedPopSet.add(ps.getSrcSwitch().getPop());\n-                allocatedPopSet.add(ps.getDestSwitch().getPop());\n-            }\n+        for (PathSegment ps : segments) {\n+            allocatedPopSet.add(ps.getSrcSwitch().getPop());\n+            allocatedPopSet.add(ps.getDestSwitch().getPop());\n         }\n+\n+        String inPop = segments.get(0).getSrcSwitch().getPop();\n+        allocatedPopSet.remove(inPop);\n+\n+        String outPop = segments.get(segments.size() - 1).getDestSwitch().getPop();\n+        allocatedPopSet.remove(outPop);\n+\n+\n         for (Edge edge : edges) {\n             String srcPop = edge.getSrcSwitch().getPop();\n             if (srcPop != null && allocatedPopSet.contains(srcPop)) {\n"}}, {"oid": "adddccb5d2e3bf39dc1cf8d68861adc697cdda20", "url": "https://github.com/telstra/open-kilda/commit/adddccb5d2e3bf39dc1cf8d68861adc697cdda20", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-23T10:57:01Z", "type": "forcePushed"}, {"oid": "77a74d2593219e15da89235edd93abd557060bc0", "url": "https://github.com/telstra/open-kilda/commit/77a74d2593219e15da89235edd93abd557060bc0", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-23T12:25:49Z", "type": "forcePushed"}, {"oid": "1f7277416e651b9a075e4a5bf64d925bb1deceeb", "url": "https://github.com/telstra/open-kilda/commit/1f7277416e651b9a075e4a5bf64d925bb1deceeb", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-25T05:53:39Z", "type": "commit"}, {"oid": "1f7277416e651b9a075e4a5bf64d925bb1deceeb", "url": "https://github.com/telstra/open-kilda/commit/1f7277416e651b9a075e4a5bf64d925bb1deceeb", "message": "Introduce PoP for the switch and take it into account in pce\n\nprotected paths should take into account PoP and try not to\nplace protected path into the same transit PoPs", "committedDate": "2020-01-25T05:53:39Z", "type": "forcePushed"}]}