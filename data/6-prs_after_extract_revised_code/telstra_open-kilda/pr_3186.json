{"pr_number": 3186, "pr_title": "Fixed resource allocation.", "pr_createdAt": "2020-02-10T08:12:43Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3186", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4NzIwMA==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376987200", "bodyText": "Why do we need to inherit this methods? As for me static utils methods are preferable here.", "author": "rozdy", "createdAt": "2020-02-10T10:45:50Z", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/flow/resources/ResourcePool.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.flow.resources;\n+\n+import java.util.Random;\n+\n+public abstract class ResourcePool {\n+    /**\n+     * Return a random integer value between minValue and maxValue.\n+     */\n+    protected int computeStartValue(int minValue, int maxValue) {\n+        return new Random().ints(1, minValue, maxValue).iterator().nextInt();\n+    }\n+\n+    /**\n+     * Return a random long value between minValue and maxValue.\n+     */\n+    protected long computeStartValue(long minValue, long maxValue) {\n+        return new Random().longs(1, minValue, maxValue).iterator().nextLong();\n+    }", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMjI2Mw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377012263", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4NzIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NjIyNw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377486227", "bodyText": "I believe this was a very controversial decision. Why should we expose internal pool logic as a dedicated class with static methods? To allow other classes to reuse them? But what for, if they're pool specific? I don't see any benefits in the solution with static methods vs inherited.\nThere's an option with moving the methods out of the class, create a strategy, and allow pool to choose among implementations.", "author": "sergii-iakovenko", "createdAt": "2020-02-11T08:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4NzIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "eebe309b0467cc896a241faed351b23e6b647fe1", "chunk": "diff --git a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/flow/resources/ResourcePool.java b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/flow/resources/ResourceUtils.java\nsimilarity index 79%\nrename from src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/flow/resources/ResourcePool.java\nrename to src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/flow/resources/ResourceUtils.java\nindex 495dbc953..a1bb73a67 100644\n--- a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/flow/resources/ResourcePool.java\n+++ b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/flow/resources/ResourceUtils.java\n\n@@ -17,18 +17,22 @@ package org.openkilda.wfm.share.flow.resources;\n \n import java.util.Random;\n \n-public abstract class ResourcePool {\n+public class ResourceUtils {\n     /**\n      * Return a random integer value between minValue and maxValue.\n      */\n-    protected int computeStartValue(int minValue, int maxValue) {\n+    public static int computeStartValue(int minValue, int maxValue) {\n         return new Random().ints(1, minValue, maxValue).iterator().nextInt();\n     }\n \n     /**\n      * Return a random long value between minValue and maxValue.\n      */\n-    protected long computeStartValue(long minValue, long maxValue) {\n+    public static long computeStartValue(long minValue, long maxValue) {\n         return new Random().longs(1, minValue, maxValue).iterator().nextLong();\n     }\n+\n+    private ResourceUtils() {\n+        throw new UnsupportedOperationException();\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MTM3NA==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376991374", "bodyText": "Please update this section too.", "author": "rozdy", "createdAt": "2020-02-10T10:53:52Z", "path": "src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowCookieRepository.java", "diffHunk": "@@ -26,8 +26,9 @@\n      * Find an unmasked cookie which is not assigned to any flow.\n      * Use the provided {@code defaultCookie} as the first candidate.", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMjI5Nw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377012297", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "3c93eca49f9429b18604dcb63740992af1ed75ce", "chunk": "diff --git a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowCookieRepository.java b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowCookieRepository.java\nindex 6e6c5de52..eab438e4c 100644\n--- a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowCookieRepository.java\n+++ b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowCookieRepository.java\n\n@@ -24,7 +24,7 @@ public interface FlowCookieRepository extends Repository<FlowCookie> {\n \n     /**\n      * Find an unmasked cookie which is not assigned to any flow.\n-     * Use the provided {@code defaultCookie} as the first candidate.\n+     * Use the provided {@code minCookie} as the first candidate.\n      *\n      * @param minCookie the potential cookie to be checked first.\n      * @param maxCookie the max value of cookie.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MTk2OQ==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376991969", "bodyText": "Update param name here.", "author": "rozdy", "createdAt": "2020-02-10T10:55:02Z", "path": "src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowMeterRepository.java", "diffHunk": "@@ -40,8 +40,9 @@\n      * Use the provided {@code defaultMeterId} as the first candidate.", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMjgxOA==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377012818", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MTk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eebe309b0467cc896a241faed351b23e6b647fe1", "chunk": "diff --git a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowMeterRepository.java b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowMeterRepository.java\nindex 7b9f83985..1538d4be1 100644\n--- a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowMeterRepository.java\n+++ b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowMeterRepository.java\n\n@@ -37,7 +37,7 @@ public interface FlowMeterRepository extends Repository<FlowMeter> {\n \n     /**\n      * Find a meter id which is not assigned to any flow.\n-     * Use the provided {@code defaultMeterId} as the first candidate.\n+     * Use the provided {@code minMeterId} as the first candidate.\n      *\n      * @param switchId       the switch defines where the meter is applied on.\n      * @param minMeterId the potential meter to be checked first.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MjIyOQ==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376992229", "bodyText": "Same here.", "author": "rozdy", "createdAt": "2020-02-10T10:55:34Z", "path": "src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/TransitVlanRepository.java", "diffHunk": "@@ -30,8 +30,9 @@\n      * Find a transit vlan which is not assigned to any flow.\n      * Use the provided defaultVlan as the first candidate.", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMjg2Nw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377012867", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MjIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "eebe309b0467cc896a241faed351b23e6b647fe1", "chunk": "diff --git a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/TransitVlanRepository.java b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/TransitVlanRepository.java\nindex 4e6bb838c..26b1445e5 100644\n--- a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/TransitVlanRepository.java\n+++ b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/TransitVlanRepository.java\n\n@@ -28,7 +28,7 @@ public interface TransitVlanRepository extends Repository<TransitVlan> {\n \n     /**\n      * Find a transit vlan which is not assigned to any flow.\n-     * Use the provided defaultVlan as the first candidate.\n+     * Use the provided minVlan as the first candidate.\n      *\n      * @param minVlan the potential vlan to be checked first.\n      * @param maxVlan the max value of vlan.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MjMzNg==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376992336", "bodyText": "And here.", "author": "rozdy", "createdAt": "2020-02-10T10:55:48Z", "path": "src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/VxlanRepository.java", "diffHunk": "@@ -28,8 +28,9 @@\n      * Find a vxlan which is not assigned to any flow.\n      * Use the provided defaultVxlan as the first candidate.", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMjg5MA==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377012890", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MjMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "eebe309b0467cc896a241faed351b23e6b647fe1", "chunk": "diff --git a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/VxlanRepository.java b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/VxlanRepository.java\nindex 090f5b6bc..695fa43fc 100644\n--- a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/VxlanRepository.java\n+++ b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/VxlanRepository.java\n\n@@ -26,7 +26,7 @@ public interface VxlanRepository extends Repository<Vxlan> {\n \n     /**\n      * Find a vxlan which is not assigned to any flow.\n-     * Use the provided defaultVxlan as the first candidate.\n+     * Use the provided minVni as the first candidate.\n      *\n      * @param minVni the potential vxlan to be checked first.\n      * @param maxVni the max value of vxlan.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MzMxNg==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376993316", "bodyText": "default_cookie -> min_cookie", "author": "rozdy", "createdAt": "2020-02-10T10:57:49Z", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowCookieRepository.java", "diffHunk": "@@ -52,22 +52,23 @@ public Neo4jFlowCookieRepository(Neo4jSessionFactory sessionFactory, Transaction\n     }\n \n     @Override\n-    public Optional<Long> findUnassignedCookie(long defaultCookie) {\n+    public Optional<Long> findUnassignedCookie(long minCookie, long maxCookie) {\n         Map<String, Object> parameters = ImmutableMap.of(\n-                \"default_cookie\", defaultCookie);\n+                \"min_cookie\", minCookie,\n+                \"max_cookie\", maxCookie);\n \n         // The query returns the default_cookie if it's not used in any flow_cookie,", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMjkxMw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377012913", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MzMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "eebe309b0467cc896a241faed351b23e6b647fe1", "chunk": "diff --git a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowCookieRepository.java b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowCookieRepository.java\nindex 1687c801e..ec50808c8 100644\n--- a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowCookieRepository.java\n+++ b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowCookieRepository.java\n\n@@ -57,7 +57,7 @@ public class Neo4jFlowCookieRepository extends Neo4jGenericRepository<FlowCookie\n                 \"min_cookie\", minCookie,\n                 \"max_cookie\", maxCookie);\n \n-        // The query returns the default_cookie if it's not used in any flow_cookie,\n+        // The query returns the min_cookie if it's not used in any flow_cookie,\n         // otherwise locates a gap between / after the values used in flow_cookie entities.\n \n         String query = \"UNWIND [$min_cookie] AS cookie \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MzY2Mw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376993663", "bodyText": "default_meter -> min_meter_id", "author": "rozdy", "createdAt": "2020-02-10T10:58:29Z", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowMeterRepository.java", "diffHunk": "@@ -77,24 +77,25 @@ public Neo4jFlowMeterRepository(Neo4jSessionFactory sessionFactory, TransactionM\n     }\n \n     @Override\n-    public Optional<MeterId> findUnassignedMeterId(SwitchId switchId, MeterId defaultMeterId) {\n+    public Optional<MeterId> findUnassignedMeterId(SwitchId switchId, MeterId minMeterId, MeterId maxMeterId) {\n         Map<String, Object> parameters = ImmutableMap.of(\n-                \"default_meter\", defaultMeterId.getValue(),\n+                \"min_meter\", minMeterId.getValue(),\n+                \"max_meter\", maxMeterId.getValue(),\n                 \"switch_id\", switchId.toString()\n         );\n \n         // The query returns the default_meter if it's not used in any flow_meter,", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMjk1OA==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377012958", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MzY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "eebe309b0467cc896a241faed351b23e6b647fe1", "chunk": "diff --git a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowMeterRepository.java b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowMeterRepository.java\nindex 513cd389b..3a8826c6e 100644\n--- a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowMeterRepository.java\n+++ b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jFlowMeterRepository.java\n\n@@ -84,7 +84,7 @@ public class Neo4jFlowMeterRepository extends Neo4jGenericRepository<FlowMeter>\n                 \"switch_id\", switchId.toString()\n         );\n \n-        // The query returns the default_meter if it's not used in any flow_meter,\n+        // The query returns the min_meter if it's not used in any flow_meter,\n         // otherwise locates a gap between / after the values used in flow_meter entities.\n \n         String query = \"UNWIND [$min_meter] AS meter \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5Mzg1Mw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376993853", "bodyText": "default_vlan -> min_vlan", "author": "rozdy", "createdAt": "2020-02-10T10:58:51Z", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jTransitVlanRepository.java", "diffHunk": "@@ -77,22 +77,23 @@ public Neo4jTransitVlanRepository(Neo4jSessionFactory sessionFactory, Transactio\n     }\n \n     @Override\n-    public Optional<Integer> findUnassignedTransitVlan(int defaultVlan) {\n+    public Optional<Integer> findUnassignedTransitVlan(int minVlan, int maxVlan) {\n         Map<String, Object> parameters = ImmutableMap.of(\n-                \"default_vlan\", defaultVlan);\n+                \"min_vlan\", minVlan,\n+                \"max_vlan\", maxVlan);\n \n         // The query returns the default_vlan if it's not used in any transit_vlan,", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMjk3Nw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377012977", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5Mzg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "eebe309b0467cc896a241faed351b23e6b647fe1", "chunk": "diff --git a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jTransitVlanRepository.java b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jTransitVlanRepository.java\nindex 7abebaf37..d97c1793c 100644\n--- a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jTransitVlanRepository.java\n+++ b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jTransitVlanRepository.java\n\n@@ -82,7 +82,7 @@ public class Neo4jTransitVlanRepository extends Neo4jGenericRepository<TransitVl\n                 \"min_vlan\", minVlan,\n                 \"max_vlan\", maxVlan);\n \n-        // The query returns the default_vlan if it's not used in any transit_vlan,\n+        // The query returns the min_vlan if it's not used in any transit_vlan,\n         // otherwise locates a gap between / after the values used in transit_vlan entities.\n \n         String query = \"UNWIND [$min_vlan] AS vlan \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5NDAwOA==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r376994008", "bodyText": "default_vni -> min_vni", "author": "rozdy", "createdAt": "2020-02-10T10:59:10Z", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jVxlanRepository.java", "diffHunk": "@@ -50,22 +50,23 @@ public Neo4jVxlanRepository(Neo4jSessionFactory sessionFactory, TransactionManag\n     }\n \n     @Override\n-    public Optional<Integer> findUnassignedVxlan(int defaultVni) {\n+    public Optional<Integer> findUnassignedVxlan(int minVni, int maxVni) {\n         Map<String, Object> parameters = ImmutableMap.of(\n-                \"default_vni\", defaultVni);\n+                \"min_vni\", minVni,\n+                \"max_vni\", maxVni);\n \n         // The query returns the default_vni if it's not used in any vxlan,", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxMzAwOQ==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377013009", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-02-10T11:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5NDAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "eebe309b0467cc896a241faed351b23e6b647fe1", "chunk": "diff --git a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jVxlanRepository.java b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jVxlanRepository.java\nindex cc859e251..9ec0a600b 100644\n--- a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jVxlanRepository.java\n+++ b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jVxlanRepository.java\n\n@@ -55,7 +55,7 @@ public class Neo4jVxlanRepository extends Neo4jGenericRepository<Vxlan> implemen\n                 \"min_vni\", minVni,\n                 \"max_vni\", maxVni);\n \n-        // The query returns the default_vni if it's not used in any vxlan,\n+        // The query returns the min_vni if it's not used in any vxlan,\n         // otherwise locates a gap between / after the values used in vxlan entities.\n \n         String query = \"UNWIND [$min_vni] AS vni \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMzU0NQ==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377003545", "bodyText": "you removed deallocate() call.", "author": "niksv", "createdAt": "2020-02-10T11:20:03Z", "path": "src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/MeterPoolTest.java", "diffHunk": "@@ -56,26 +58,11 @@ public void setUp() {\n \n     @Test\n     public void meterPoolTest() {\n-        long first = meterPool.allocate(SWITCH_ID, FLOW_1, PATH_ID_1).getValue();\n-        assertEquals(31, first);\n-\n-        long second = meterPool.allocate(SWITCH_ID, FLOW_2, PATH_ID_2).getValue();\n-        assertEquals(32, second);\n-\n-        long third = meterPool.allocate(SWITCH_ID, FLOW_3, PATH_ID_3).getValue();\n-        assertEquals(33, third);\n-\n-        meterPool.deallocate(PATH_ID_3);\n-        meterPool.deallocate(PATH_ID_2);\n-\n-        long fourth = meterPool.allocate(SWITCH_ID, \"flow_4\", new PathId(\"path_4\")).getValue();\n-        assertEquals(32, fourth);\n-\n-        long fifth = meterPool.allocate(SWITCH_ID, \"flow_5\", new PathId(\"path_5\")).getValue();\n-        assertEquals(33, fifth);\n-\n-        long sixth = meterPool.allocate(SWITCH_ID, \"flow_6\", new PathId(\"path_6\")).getValue();\n-        assertEquals(34, sixth);\n+        Set<MeterId> cookies = new HashSet<>();\n+        for (int i = 31; i < 41; i++) {\n+            cookies.add(meterPool.allocate(SWITCH_ID, format(\"flow_%d\", i), new PathId(format(\"path_%d\", i))));\n+        }\n+        assertEquals(10, cookies.size());", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51e4782c92b607f5cbe3dd1f13d2e1bd6e423e20", "chunk": "diff --git a/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/MeterPoolTest.java b/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/MeterPoolTest.java\nindex 97d08a282..43a95e034 100644\n--- a/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/MeterPoolTest.java\n+++ b/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/MeterPoolTest.java\n\n@@ -58,16 +61,19 @@ public class MeterPoolTest extends Neo4jBasedTest {\n \n     @Test\n     public void meterPoolTest() {\n-        Set<MeterId> cookies = new HashSet<>();\n-        for (int i = 31; i < 41; i++) {\n-            cookies.add(meterPool.allocate(SWITCH_ID, format(\"flow_%d\", i), new PathId(format(\"path_%d\", i))));\n+        long minMeterId = MIN_METER_ID.getValue();\n+        long maxMeterId = MAX_METER_ID.getValue();\n+        Set<MeterId> meterIds = new HashSet<>();\n+        for (long i = minMeterId; i <= maxMeterId; i++) {\n+            meterIds.add(meterPool.allocate(SWITCH_ID, format(\"flow_%d\", i), new PathId(format(\"path_%d\", i))));\n         }\n-        assertEquals(10, cookies.size());\n+        assertEquals(maxMeterId - minMeterId + 1, meterIds.size());\n+        meterIds.forEach(meterId -> assertTrue(meterId.getValue() >= minMeterId && meterId.getValue() <= maxMeterId));\n     }\n \n     @Test(expected = ResourceNotAvailableException.class)\n     public void meterPoolFullTest() {\n-        for (int i = 31; i <= 41; i++) {\n+        for (long i = MIN_METER_ID.getValue(); i <= MAX_METER_ID.getValue() + 1; i++) {\n             meterPool.allocate(SWITCH_ID, format(\"flow_%d\", i), new PathId(format(\"path_%d\", i)));\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMzc4Nw==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377003787", "bodyText": "you removed deallocate too", "author": "niksv", "createdAt": "2020-02-10T11:20:40Z", "path": "src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/transitvlan/TransitVlanPoolTest.java", "diffHunk": "@@ -49,34 +48,14 @@ public void setUp() {\n     }\n \n     @Test\n-    public void vlanIdPool() {\n-        Flow flow = Flow.builder().flowId(\"flow_1\").srcSwitch(switch1).destSwitch(switch2).build();\n-        int first = transitVlanPool.allocate(flow, new PathId(\"path_1\"), new PathId(\"opposit_1\"))\n-                .getTransitVlan().getVlan();\n-        assertEquals(100, first);\n-\n-        PathId path2 = new PathId(\"path_2\");\n-\n-        flow.setFlowId(\"flow_2\");\n-        int second = transitVlanPool.allocate(flow, path2, new PathId(\"opposit_2\")).getTransitVlan().getVlan();\n-        assertEquals(101, second);\n-\n-        flow.setFlowId(\"flow_3\");\n-        int third = transitVlanPool.allocate(flow, new PathId(\"path_3\"), new PathId(\"opposit_3\"))\n-                .getTransitVlan().getVlan();\n-        assertEquals(102, third);\n-\n-        transitVlanPool.deallocate(path2);\n-\n-        flow.setFlowId(\"flow_4\");\n-        int fourth = transitVlanPool.allocate(flow, new PathId(\"path_4\"), new PathId(\"opposit_4\"))\n-                .getTransitVlan().getVlan();\n-        assertEquals(101, fourth);\n-\n-        flow.setFlowId(\"flow_5\");\n-        int fifth = transitVlanPool.allocate(flow, new PathId(\"path_5\"), new PathId(\"opposit_5\"))\n-                .getTransitVlan().getVlan();\n-        assertEquals(103, fifth);\n+    public void vlanPoolTest() {\n+        for (int i = 100; i <= 110; i++) {\n+            Flow flow = Flow.builder().flowId(format(\"flow_%d\", i)).srcSwitch(switch1).destSwitch(switch2).build();\n+            assertTrue(transitVlanPool.allocate(\n+                    flow,\n+                    new PathId(format(\"path_%d\", i)),\n+                    new PathId(format(\"opposite_dummy_%d\", i))).getTransitVlan().getVlan() > 0);\n+        }", "originalCommit": "ec5c518643b98a5e33e131821ca2a8e797aa4e01", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51e4782c92b607f5cbe3dd1f13d2e1bd6e423e20", "chunk": "diff --git a/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/transitvlan/TransitVlanPoolTest.java b/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/transitvlan/TransitVlanPoolTest.java\nindex e5b099cba..38b1f8286 100644\n--- a/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/transitvlan/TransitVlanPoolTest.java\n+++ b/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/transitvlan/TransitVlanPoolTest.java\n\n@@ -25,43 +26,60 @@ import org.openkilda.model.SwitchId;\n import org.openkilda.model.TransitVlan;\n import org.openkilda.persistence.Neo4jBasedTest;\n import org.openkilda.persistence.repositories.SwitchRepository;\n+import org.openkilda.persistence.repositories.TransitVlanRepository;\n import org.openkilda.wfm.share.flow.resources.ResourceNotAvailableException;\n \n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n public class TransitVlanPoolTest extends Neo4jBasedTest {\n+    private static final Switch SWITCH_A = Switch.builder().switchId(new SwitchId(\"ff:00\")).build();\n+    private static final Switch SWITCH_B = Switch.builder().switchId(new SwitchId(\"ff:01\")).build();\n+    private static final Flow FLOW_1 = Flow.builder().flowId(\"flow_1\").srcSwitch(SWITCH_A).destSwitch(SWITCH_B).build();\n+    private static final Flow FLOW_2 = Flow.builder().flowId(\"flow_2\").srcSwitch(SWITCH_A).destSwitch(SWITCH_B).build();\n+    private static final Flow FLOW_3 = Flow.builder().flowId(\"flow_3\").srcSwitch(SWITCH_A).destSwitch(SWITCH_B).build();\n+    private static final PathId PATH_ID_1 = new PathId(\"path_1\");\n+    private static final PathId PATH_ID_2 = new PathId(\"path_2\");\n+    private static final PathId PATH_ID_3 = new PathId(\"path_3\");\n+    private static final int MIN_TRANSIT_VLAN = 100;\n+    private static final int MAX_TRANSIT_VLAN = 110;\n \n     private TransitVlanPool transitVlanPool;\n-\n-    private Switch switch1 = Switch.builder().switchId(new SwitchId(\"ff:00\")).build();\n-    private Switch switch2 = Switch.builder().switchId(new SwitchId(\"ff:01\")).build();\n+    private TransitVlanRepository transitVlanRepository;\n \n     @Before\n     public void setUp() {\n-        transitVlanPool = new TransitVlanPool(persistenceManager, 100, 110);\n+        transitVlanPool = new TransitVlanPool(persistenceManager, MIN_TRANSIT_VLAN, MAX_TRANSIT_VLAN);\n+        transitVlanRepository = persistenceManager.getRepositoryFactory().createTransitVlanRepository();\n \n         SwitchRepository switchRepository = persistenceManager.getRepositoryFactory().createSwitchRepository();\n-        switchRepository.createOrUpdate(switch1);\n-        switchRepository.createOrUpdate(switch2);\n+        switchRepository.createOrUpdate(SWITCH_A);\n+        switchRepository.createOrUpdate(SWITCH_B);\n     }\n \n     @Test\n     public void vlanPoolTest() {\n-        for (int i = 100; i <= 110; i++) {\n-            Flow flow = Flow.builder().flowId(format(\"flow_%d\", i)).srcSwitch(switch1).destSwitch(switch2).build();\n-            assertTrue(transitVlanPool.allocate(\n+        Set<Integer> transitVlans = new HashSet<>();\n+        for (int i = MIN_TRANSIT_VLAN; i <= MAX_TRANSIT_VLAN; i++) {\n+            Flow flow = Flow.builder().flowId(format(\"flow_%d\", i)).srcSwitch(SWITCH_A).destSwitch(SWITCH_B).build();\n+            transitVlans.add(transitVlanPool.allocate(\n                     flow,\n                     new PathId(format(\"path_%d\", i)),\n-                    new PathId(format(\"opposite_dummy_%d\", i))).getTransitVlan().getVlan() > 0);\n+                    new PathId(format(\"opposite_dummy_%d\", i))).getTransitVlan().getVlan());\n         }\n+        assertEquals(MAX_TRANSIT_VLAN - MIN_TRANSIT_VLAN + 1, transitVlans.size());\n+        transitVlans.forEach(vlan -> assertTrue(vlan >= MIN_TRANSIT_VLAN && vlan <= MAX_TRANSIT_VLAN));\n     }\n \n     @Test(expected = ResourceNotAvailableException.class)\n     public void vlanPoolFullTest() {\n-        for (int i = 100; i <= 111; i++) {\n-            Flow flow = Flow.builder().flowId(format(\"flow_%d\", i)).srcSwitch(switch1).destSwitch(switch2).build();\n+        for (int i = MIN_TRANSIT_VLAN; i <= MAX_TRANSIT_VLAN + 1; i++) {\n+            Flow flow = Flow.builder().flowId(format(\"flow_%d\", i)).srcSwitch(SWITCH_A).destSwitch(SWITCH_B).build();\n             assertTrue(transitVlanPool.allocate(\n                     flow,\n                     new PathId(format(\"path_%d\", i)),\n"}}, {"oid": "eebe309b0467cc896a241faed351b23e6b647fe1", "url": "https://github.com/telstra/open-kilda/commit/eebe309b0467cc896a241faed351b23e6b647fe1", "message": "Fixed resource allocation.", "committedDate": "2020-02-10T11:40:03Z", "type": "forcePushed"}, {"oid": "3c93eca49f9429b18604dcb63740992af1ed75ce", "url": "https://github.com/telstra/open-kilda/commit/3c93eca49f9429b18604dcb63740992af1ed75ce", "message": "Fixed resource allocation.", "committedDate": "2020-02-10T11:41:52Z", "type": "forcePushed"}, {"oid": "dd6cacb56e4e1e0d0a2b345848a949b7e568e97f", "url": "https://github.com/telstra/open-kilda/commit/dd6cacb56e4e1e0d0a2b345848a949b7e568e97f", "message": "Fixed resource allocation.", "committedDate": "2020-02-10T12:34:51Z", "type": "forcePushed"}, {"oid": "1f1cb93b6f319a553c2902cc594dfb9c9eed2333", "url": "https://github.com/telstra/open-kilda/commit/1f1cb93b6f319a553c2902cc594dfb9c9eed2333", "message": "Fixed resource allocation.", "committedDate": "2020-02-11T05:45:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4ODc3MQ==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377488771", "bodyText": "Please, check my comment about the class.", "author": "sergii-iakovenko", "createdAt": "2020-02-11T08:15:45Z", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/flow/resources/ResourceUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.flow.resources;\n+\n+import java.util.Random;\n+\n+public final class ResourceUtils {", "originalCommit": "1f1cb93b6f319a553c2902cc594dfb9c9eed2333", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4OTIzNg==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377489236", "bodyText": "The test became shallow: it doesn't verify the allocated values and doesn't check deallocation. I think additional tests should be added to cover this.", "author": "sergii-iakovenko", "createdAt": "2020-02-11T08:17:04Z", "path": "src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/CookiePoolTest.java", "diffHunk": "@@ -35,26 +39,16 @@ public void setUp() {\n \n     @Test\n     public void cookiePool() {\n-        long first = cookiePool.allocate(\"flow_1\");\n-        assertEquals(5, first);\n-\n-        long second = cookiePool.allocate(\"flow_2\");\n-        assertEquals(6, second);\n-\n-        long third = cookiePool.allocate(\"flow_3\");\n-        assertEquals(7, third);\n-\n-        cookiePool.deallocate(second);\n-        long fourth = cookiePool.allocate(\"flow_4\");\n-        assertEquals(6, fourth);\n-\n-        long fifth = cookiePool.allocate(\"flow_5\");\n-        assertEquals(8, fifth);\n+        Set<Long> cookies = new HashSet<>();\n+        for (int i = 5; i <= 25; i++) {\n+            cookies.add(cookiePool.allocate(format(\"flow_%d\", i)));", "originalCommit": "1f1cb93b6f319a553c2902cc594dfb9c9eed2333", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0Mjc1Mg==", "url": "https://github.com/telstra/open-kilda/pull/3186#discussion_r377542752", "bodyText": "Tests have been added.", "author": "dpoltavets", "createdAt": "2020-02-11T10:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4OTIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "51e4782c92b607f5cbe3dd1f13d2e1bd6e423e20", "chunk": "diff --git a/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/CookiePoolTest.java b/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/CookiePoolTest.java\nindex cc14ae50a..fa8ad6ff8 100644\n--- a/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/CookiePoolTest.java\n+++ b/src-java/base-topology/base-storm-topology/src/test/java/org/openkilda/wfm/share/flow/resources/CookiePoolTest.java\n\n@@ -17,38 +17,48 @@ package org.openkilda.wfm.share.flow.resources;\n \n import static java.lang.String.format;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import org.openkilda.model.FlowCookie;\n import org.openkilda.persistence.Neo4jBasedTest;\n+import org.openkilda.persistence.repositories.FlowCookieRepository;\n \n import org.junit.Before;\n import org.junit.Test;\n \n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n public class CookiePoolTest extends Neo4jBasedTest {\n+    private static final long MIN_COOKIE = 5L;\n+    private static final long MAX_COOKIE = 25L;\n \n     private CookiePool cookiePool;\n+    private FlowCookieRepository flowCookieRepository;\n \n     @Before\n     public void setUp() {\n-        cookiePool = new CookiePool(persistenceManager, 5, 25);\n+        cookiePool = new CookiePool(persistenceManager, MIN_COOKIE, MAX_COOKIE);\n+        flowCookieRepository = persistenceManager.getRepositoryFactory().createFlowCookieRepository();\n     }\n \n     @Test\n     public void cookiePool() {\n         Set<Long> cookies = new HashSet<>();\n-        for (int i = 5; i <= 25; i++) {\n+        for (long i = MIN_COOKIE; i <= MAX_COOKIE; i++) {\n             cookies.add(cookiePool.allocate(format(\"flow_%d\", i)));\n         }\n-        assertEquals(21, cookies.size());\n+        assertEquals(MAX_COOKIE - MIN_COOKIE + 1, cookies.size());\n+        cookies.forEach(cookie -> assertTrue(cookie >= MIN_COOKIE && cookie <= MAX_COOKIE));\n     }\n \n     @Test(expected = ResourceNotAvailableException.class)\n     public void cookiePoolFullTest() {\n-        for (int i = 5; i <= 26; i++) {\n+        for (long i = MIN_COOKIE; i <= MAX_COOKIE + 1; i++) {\n             assertTrue(cookiePool.allocate(format(\"flow_%d\", i)) > 0);\n         }\n     }\n"}}, {"oid": "51e4782c92b607f5cbe3dd1f13d2e1bd6e423e20", "url": "https://github.com/telstra/open-kilda/commit/51e4782c92b607f5cbe3dd1f13d2e1bd6e423e20", "message": "Fixed resource allocation.", "committedDate": "2020-02-11T10:12:05Z", "type": "forcePushed"}, {"oid": "ba21fc88fee4bae9fe4ac8eded07414204412e6d", "url": "https://github.com/telstra/open-kilda/commit/ba21fc88fee4bae9fe4ac8eded07414204412e6d", "message": "Fixed resource allocation.", "committedDate": "2020-02-11T12:10:48Z", "type": "forcePushed"}, {"oid": "e81a9a6d46030e270bad8486e3b200bc09da5f64", "url": "https://github.com/telstra/open-kilda/commit/e81a9a6d46030e270bad8486e3b200bc09da5f64", "message": "Fixed resource allocation.", "committedDate": "2020-03-02T11:26:06Z", "type": "commit"}, {"oid": "e81a9a6d46030e270bad8486e3b200bc09da5f64", "url": "https://github.com/telstra/open-kilda/commit/e81a9a6d46030e270bad8486e3b200bc09da5f64", "message": "Fixed resource allocation.", "committedDate": "2020-03-02T11:26:06Z", "type": "forcePushed"}]}