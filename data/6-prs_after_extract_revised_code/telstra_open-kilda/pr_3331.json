{"pr_number": 3331, "pr_title": "OF metadata bit manipulation toolset", "pr_createdAt": "2020-03-25T09:55:54Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3331", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTU1OQ==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398555559", "bodyText": "why -1? you are trying to set a boolean field (with 1 bit). I guess it should be 1 here. It's strange to see here FFFFFFFFFFFFFF", "author": "niksv", "createdAt": "2020-03-26T13:05:45Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());\n+\n+        U64 mask = setField(base.getMask(), -1, schema.getOuterVlanField());\n+        mask = setField(mask, -1, schema.getOuterVlanPresenceFlag());\n+\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private MetadataMatch setBooleanField(MetadataMatch base, boolean flag, BitField field) {\n+        U64 value = setField(base.getValue(), flag ? -1 : 0, field);\n+        U64 mask = setField(base.getMask(), -1, field);", "originalCommit": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNTkxMQ==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r399125911", "bodyText": "Because I do not want to hardcode this bit placement one more time. setField method will cut off all extra bits, so I can pass 0xFFFFFFFFFFFFFFFF as input to set 1 for all bits included into specific BitField.", "author": "surabujin", "createdAt": "2020-03-27T09:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTU1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "chunk": "diff --git a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\nindex 86b33a4df..7dcb9a7f5 100644\n--- a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\n+++ b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\n\n@@ -60,6 +60,14 @@ public class MetadataAdapter {\n         return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n     }\n \n+    public MetadataMatch addressOuterVlanPresenceFlag(boolean flag) {\n+        return addressOuterVlanPresenceFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOuterVlanPresenceFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOuterVlanPresenceFlag());\n+    }\n+\n     public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n         return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEyOA==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398556128", "bodyText": "magic numbers is a bad practice. Please move -1 to constants like FULL_MASK = FFFF_FFFF_FFFF_FFFF or something else", "author": "niksv", "createdAt": "2020-03-26T13:06:38Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());", "originalCommit": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNzQ3Mw==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r399127473", "bodyText": "Usually yes, but not always. I do not like \"extra\" constants. And in this specific case, it is extra constant.", "author": "surabujin", "createdAt": "2020-03-27T09:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "chunk": "diff --git a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\nindex 86b33a4df..7dcb9a7f5 100644\n--- a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\n+++ b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\n\n@@ -60,6 +60,14 @@ public class MetadataAdapter {\n         return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n     }\n \n+    public MetadataMatch addressOuterVlanPresenceFlag(boolean flag) {\n+        return addressOuterVlanPresenceFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOuterVlanPresenceFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOuterVlanPresenceFlag());\n+    }\n+\n     public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n         return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NzM3NQ==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398557375", "bodyText": "Where is it used? or it will be used in next patch?", "author": "niksv", "createdAt": "2020-03-26T13:08:37Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.SwitchFeature;\n+import org.openkilda.model.bitops.BitField;\n+\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.projectfloodlight.openflow.types.OFVlanVidMatch;\n+import org.projectfloodlight.openflow.types.U64;\n+\n+import java.util.Set;\n+\n+public class MetadataAdapter {\n+    private final MetadataSchema schema;\n+\n+    public MetadataAdapter(@NonNull Set<SwitchFeature> features) {\n+        if (features.contains(SwitchFeature.HALF_SIZE_METADATA)) {\n+            schema = HalfSizeMetadataSchema.INSTANCE;\n+        } else {\n+            schema = MetadataSchema.INSTANCE;\n+        }\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(boolean flag) {\n+        return addressLldpMarkerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressLldpMarkerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getLldpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(boolean flag) {\n+        return addressArpMakerFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressArpMakerFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getArpMarkerFlagField());\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(boolean flag) {\n+        return addressOneSwitchFlowFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOneSwitchFlowFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n+    }\n+\n+    public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n+        return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n+    }\n+\n+    /**\n+     * Address outer VLAN ID bits inside metadata.\n+     */\n+    public MetadataMatch addressOuterVlan(MetadataMatch base, OFVlanVidMatch vlanMatch) {\n+        U64 value = setField(base.getValue(), vlanMatch.getVlan(), schema.getOuterVlanField());\n+        value = setField(value, -1, schema.getOuterVlanPresenceFlag());\n+\n+        U64 mask = setField(base.getMask(), -1, schema.getOuterVlanField());\n+        mask = setField(mask, -1, schema.getOuterVlanPresenceFlag());\n+\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private MetadataMatch setBooleanField(MetadataMatch base, boolean flag, BitField field) {\n+        U64 value = setField(base.getValue(), flag ? -1 : 0, field);\n+        U64 mask = setField(base.getMask(), -1, field);\n+        return new MetadataMatch(value, mask);\n+    }\n+\n+    private static U64 setField(U64 target, long value, BitField field) {\n+        U64 result = target.and(U64.of(~field.getMask()));\n+        value <<= field.getOffset();\n+        return result.or(U64.of(value & field.getMask()));\n+    }\n+\n+    @Value\n+    public static class MetadataMatch {\n+        protected static final MetadataMatch ZERO = new MetadataMatch(U64.ZERO, U64.ZERO);\n+\n+        private final U64 value;\n+        private final U64 mask;\n+\n+        protected MetadataMatch merge(U64 extendValue, U64 extendMask) {", "originalCommit": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NDY0MQ==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401454641", "bodyText": "Not used, removed.", "author": "surabujin", "createdAt": "2020-04-01T08:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NzM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "chunk": "diff --git a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\nindex 86b33a4df..7dcb9a7f5 100644\n--- a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\n+++ b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataAdapter.java\n\n@@ -60,6 +60,14 @@ public class MetadataAdapter {\n         return setBooleanField(base, flag, schema.getOneSwitchFlowFlagField());\n     }\n \n+    public MetadataMatch addressOuterVlanPresenceFlag(boolean flag) {\n+        return addressOuterVlanPresenceFlag(MetadataMatch.ZERO, flag);\n+    }\n+\n+    public MetadataMatch addressOuterVlanPresenceFlag(MetadataMatch base, boolean flag) {\n+        return setBooleanField(base, flag, schema.getOuterVlanPresenceFlag());\n+    }\n+\n     public MetadataMatch addressOuterVlan(OFVlanVidMatch vlanMatch) {\n         return addressOuterVlan(MetadataMatch.ZERO, vlanMatch);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE4MA==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398559180", "bodyText": "Why don't we just use 0x0000_0000_0000_0008L as a flag?\nThis will save us from using HALF_SIZE_METADATA feature.", "author": "niksv", "createdAt": "2020-03-26T13:11:23Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+import org.openkilda.model.bitops.BitField;\n+\n+public class MetadataSchema {\n+    public static final MetadataSchema INSTANCE = new MetadataSchema();\n+\n+    private static final BitField LLDP_MARKER_FLAG         = new BitField(0x0000_0000_0000_0001L);\n+    private static final BitField ARP_MARKER_FLAG          = new BitField(0x0000_0000_0000_0004L);\n+\n+    private static final BitField ONE_SWITCH_FLOW_FLAG     = new BitField(0x0000_0000_0000_0002L);\n+\n+    private static final BitField OUTER_VLAN_FIELD         = new BitField(0x0000_0000_0000_fff0L);\n+    private static final BitField OUTER_VLAN_PRESENCE_FLAG = new BitField(0x1000_0000_0000_0000L);", "originalCommit": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMjIyOA==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r399132228", "bodyText": "I have a doubts regarding usage of bits in upper half of metadata. I prefer to have tools that allow us to work with all possible hardware, also I want to highlight, that some hardware do not implement OF spec requirement and has such \"limitation\".\nOne more argument - is a requirement to make migration if we will decide to change any bit/flag location/meaning.", "author": "surabujin", "createdAt": "2020-03-27T09:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NTEwOQ==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401455109", "bodyText": "I have moded the outer-VLAN presence flag into the lower half of metadata schema.", "author": "surabujin", "createdAt": "2020-04-01T08:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "chunk": "diff --git a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java\nindex 30c74c195..2c000dcc0 100644\n--- a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java\n+++ b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/MetadataSchema.java\n\n@@ -21,12 +21,11 @@ public class MetadataSchema {\n     public static final MetadataSchema INSTANCE = new MetadataSchema();\n \n     private static final BitField LLDP_MARKER_FLAG         = new BitField(0x0000_0000_0000_0001L);\n-    private static final BitField ARP_MARKER_FLAG          = new BitField(0x0000_0000_0000_0004L);\n-\n     private static final BitField ONE_SWITCH_FLOW_FLAG     = new BitField(0x0000_0000_0000_0002L);\n+    private static final BitField ARP_MARKER_FLAG          = new BitField(0x0000_0000_0000_0004L);\n+    private static final BitField OUTER_VLAN_PRESENCE_FLAG = new BitField(0x0000_0000_0000_0008L);\n \n     private static final BitField OUTER_VLAN_FIELD         = new BitField(0x0000_0000_0000_fff0L);\n-    private static final BitField OUTER_VLAN_PRESENCE_FLAG = new BitField(0x1000_0000_0000_0000L);\n \n     public BitField getLldpMarkerFlagField() {\n         return LLDP_MARKER_FLAG;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NDg0Ng==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398584846", "bodyText": "Did you checked that this limitation is actual only for WB switches? I thought that it is actual for all noviflow switches.", "author": "niksv", "createdAt": "2020-03-26T13:48:01Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        if (is100GbHw(sw)) {\n+            return Optional.of(SwitchFeature.HALF_SIZE_METADATA);", "originalCommit": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMjgxMw==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r399132813", "bodyText": "Not yet (but it will be weird if all nowiswitches affected).", "author": "surabujin", "createdAt": "2020-03-27T09:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NDg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1Njc3Nw==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401456777", "bodyText": "I have made a test and it confirms that all nowiflow switches have truncated metadata field. I have updated feature detection.", "author": "surabujin", "createdAt": "2020-04-01T08:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NDg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "chunk": "diff --git a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java\nindex efe4aa349..b979b4f31 100644\n--- a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java\n+++ b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java\n\n@@ -24,7 +24,12 @@ import java.util.Optional;\n public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n     @Override\n     public Optional<SwitchFeature> discover(IOFSwitch sw) {\n-        if (is100GbHw(sw)) {\n+        boolean match = E_SWITCH_MANUFACTURER_DESCRIPTION.equalsIgnoreCase(getManufacturer(sw));\n+        if (! match) {\n+            match = isNoviSwitch(sw);\n+        }\n+\n+        if (match) {\n             return Optional.of(SwitchFeature.HALF_SIZE_METADATA);\n         }\n         return Optional.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NzE3MA==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r398587170", "bodyText": "this class contains 2 other tests with WB switches (line 113, line 162). But those tests are green. seems method is100GbHw works wrong", "author": "niksv", "createdAt": "2020-03-26T13:50:49Z", "path": "src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java", "diffHunk": "@@ -139,7 +140,7 @@ public void eswitch500Software() {\n         discoveryCheck(makeSwitchMock(\"NoviFlow Inc\", \"NW500.0.1\", \"WB5164-E\", OFVersion.OF_13, 2),\n                 ImmutableSet.of(\n                         GROUP_PACKET_OUT_CONTROLLER, BFD, METERS, RESET_COUNTS_FLAG, INACCURATE_METER, MATCH_UDP_PORT,\n-                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN));\n+                        MULTI_TABLE, NOVIFLOW_PUSH_POP_VXLAN, HALF_SIZE_METADATA));", "originalCommit": "ee7fbfd8f5a85fdf92d092c0c96e81a2f45098e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NzEzNQ==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401457135", "bodyText": "I have verified is100GbHw check and it works incorrectly. I will make fix for it in separate PR.", "author": "surabujin", "createdAt": "2020-04-01T08:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NzE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjkwNQ==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401522905", "bodyText": "Looks like isNoviSwitch works incorrect as well (as you had to add E switch check in HALF_SIZE_METADATA feature detector). But the probkem is not related to this patch. Will fix in separate PR.", "author": "niksv", "createdAt": "2020-04-01T10:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NzE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "chunk": "diff --git a/src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java b/src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java\nindex 5a950aabc..5da66e7a5 100644\n--- a/src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java\n+++ b/src-java/floodlight-service/floodlight-modules/src/test/java/org/openkilda/floodlight/service/FeatureDetectorServiceTest.java\n\n@@ -148,7 +149,8 @@ public class FeatureDetectorServiceTest extends EasyMockSupport {\n         discoveryCheck(makeSwitchMock(\"NoviFlow Inc\", \"NW400.4.0\", \"NS21100\", OFVersion.OF_13, 1),\n                 ImmutableSet.of(\n                         GROUP_PACKET_OUT_CONTROLLER, BFD, METERS, RESET_COUNTS_FLAG, NOVIFLOW_COPY_FIELD,\n-                        PKTPS_FLAG, MATCH_UDP_PORT, MAX_BURST_COEFFICIENT_LIMITATION, NOVIFLOW_PUSH_POP_VXLAN));\n+                        PKTPS_FLAG, MATCH_UDP_PORT, MAX_BURST_COEFFICIENT_LIMITATION, NOVIFLOW_PUSH_POP_VXLAN,\n+                        HALF_SIZE_METADATA));\n     }\n \n     @Test\n"}}, {"oid": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "url": "https://github.com/telstra/open-kilda/commit/3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-01T08:40:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjMxMg==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r401526312", "bodyText": "as I understand it's useless now", "author": "niksv", "createdAt": "2020-04-01T10:51:34Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadataSchema.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.utils.metadata;\n+\n+/**\n+ * Will raise error for fields not available in half-sized metadata.\n+ */\n+public class HalfSizeMetadataSchema extends MetadataSchema {\n+    public static final HalfSizeMetadataSchema INSTANCE = new HalfSizeMetadataSchema();\n+\n+    protected HalfSizeMetadataSchema() {\n+        super();\n+        // hide public constructor\n+    }\n+}", "originalCommit": "3d972574a2abc1989602ab6bc0d94a7dc5e6df1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b9f38e60d6f6304605f362cb13799dbf25a41cf", "chunk": "diff --git a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadataSchema.java b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadata.java\nsimilarity index 67%\nrename from src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadataSchema.java\nrename to src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadata.java\nindex d450a6d1b..8ff7730ec 100644\n--- a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadataSchema.java\n+++ b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/utils/metadata/HalfSizeMetadata.java\n\n@@ -15,14 +15,11 @@\n \n package org.openkilda.floodlight.utils.metadata;\n \n-/**\n- * Will raise error for fields not available in half-sized metadata.\n- */\n-public class HalfSizeMetadataSchema extends MetadataSchema {\n-    public static final HalfSizeMetadataSchema INSTANCE = new HalfSizeMetadataSchema();\n-\n-    protected HalfSizeMetadataSchema() {\n-        super();\n-        // hide public constructor\n+public class HalfSizeMetadata extends Metadata {\n+    /**\n+     * Must raise error for fields not available in half-sized metadata.\n+     */\n+    public HalfSizeMetadata(Boolean lldpFlag, Boolean arpFlag, Boolean oneSwitchFlowFlag) {\n+        super(lldpFlag, arpFlag, oneSwitchFlowFlag);\n     }\n }\n"}}, {"oid": "66f464f3ba04afe0f9f2c6a90e85620716cfa5a1", "url": "https://github.com/telstra/open-kilda/commit/66f464f3ba04afe0f9f2c6a90e85620716cfa5a1", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-01T15:57:27Z", "type": "forcePushed"}, {"oid": "fd33e42a15acd6fef85dad83794ca1967e9c2d89", "url": "https://github.com/telstra/open-kilda/commit/fd33e42a15acd6fef85dad83794ca1967e9c2d89", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-02T13:14:48Z", "type": "forcePushed"}, {"oid": "610f81b76079e2043abb3deb98d47b16612254d9", "url": "https://github.com/telstra/open-kilda/commit/610f81b76079e2043abb3deb98d47b16612254d9", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-02T17:36:51Z", "type": "forcePushed"}, {"oid": "3d2aa1b6850f5939a09445469afe9a08f417f637", "url": "https://github.com/telstra/open-kilda/commit/3d2aa1b6850f5939a09445469afe9a08f417f637", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-06T14:35:41Z", "type": "forcePushed"}, {"oid": "4b9f38e60d6f6304605f362cb13799dbf25a41cf", "url": "https://github.com/telstra/open-kilda/commit/4b9f38e60d6f6304605f362cb13799dbf25a41cf", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-13T10:13:08Z", "type": "forcePushed"}, {"oid": "c71eae855234a2b16a789613e3e8c549875e85cf", "url": "https://github.com/telstra/open-kilda/commit/c71eae855234a2b16a789613e3e8c549875e85cf", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-21T17:09:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2OTE3Mw==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r412869173", "bodyText": "why is it still E_SWITCH_MANUFACTURER_DESCRIPTION match first? isNoviSwitch by itself should be enough", "author": "timofei-durakov", "createdAt": "2020-04-22T10:37:28Z", "path": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.floodlight.feature;\n+\n+import org.openkilda.model.SwitchFeature;\n+\n+import net.floodlightcontroller.core.IOFSwitch;\n+\n+import java.util.Optional;\n+\n+public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n+    @Override\n+    public Optional<SwitchFeature> discover(IOFSwitch sw) {\n+        boolean match = E_SWITCH_MANUFACTURER_DESCRIPTION.equalsIgnoreCase(getManufacturer(sw));", "originalCommit": "c71eae855234a2b16a789613e3e8c549875e85cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MzE0Nw==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r412883147", "bodyText": "Correct. I forgot to change this feature-detector.", "author": "surabujin", "createdAt": "2020-04-22T11:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2OTE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "chunk": "diff --git a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java\nindex b979b4f31..2c9b525e9 100644\n--- a/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java\n+++ b/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/feature/HalfSizeMetadataFeature.java\n\n@@ -24,12 +24,7 @@ import java.util.Optional;\n public class HalfSizeMetadataFeature extends NoviflowSpecificFeature {\n     @Override\n     public Optional<SwitchFeature> discover(IOFSwitch sw) {\n-        boolean match = E_SWITCH_MANUFACTURER_DESCRIPTION.equalsIgnoreCase(getManufacturer(sw));\n-        if (! match) {\n-            match = isNoviSwitch(sw);\n-        }\n-\n-        if (match) {\n+        if (isNoviSwitch(sw)) {\n             return Optional.of(SwitchFeature.HALF_SIZE_METADATA);\n         }\n         return Optional.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NTYzNA==", "url": "https://github.com/telstra/open-kilda/pull/3331#discussion_r412875634", "bodyText": "Javadoc required", "author": "timofei-durakov", "createdAt": "2020-04-22T10:47:52Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model.bitops;\n+\n+import org.openkilda.model.Cookie;\n+\n+import lombok.Getter;\n+\n+/**\n+ * Represent bit-mask and offset of continuous(without 0 in the middle) bit-field.\n+ */\n+@Getter\n+public class BitField {\n+    private final long mask;\n+    private final int offset;\n+\n+    public BitField(long mask) {", "originalCommit": "c71eae855234a2b16a789613e3e8c549875e85cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java b/src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java\nindex a7e0be025..eed1d6daa 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/bitops/BitField.java\n\n@@ -27,6 +27,9 @@ public class BitField {\n     private final long mask;\n     private final int offset;\n \n+    /**\n+     * Parse bit-mask from long (prevent zero mask and \"holes\" inside mask).\n+     */\n     public BitField(long mask) {\n         Integer start = null;\n         Integer end = null;\n"}}, {"oid": "08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "url": "https://github.com/telstra/open-kilda/commit/08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-22T11:23:58Z", "type": "commit"}, {"oid": "08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "url": "https://github.com/telstra/open-kilda/commit/08d84f646e0ffbaa87547f3daf4e7ef70cb7ae1c", "message": "OF metadata bit manipulation toolset", "committedDate": "2020-04-22T11:23:58Z", "type": "forcePushed"}]}