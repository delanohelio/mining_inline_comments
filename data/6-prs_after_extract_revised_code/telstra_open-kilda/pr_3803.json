{"pr_number": 3803, "pr_title": "Introduce fine tuning for storm topologies", "pr_createdAt": "2020-10-23T20:48:00Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3803", "timeline": [{"oid": "137dbcb053f7bce15210f9c7bef1958eb6d5e474", "url": "https://github.com/telstra/open-kilda/commit/137dbcb053f7bce15210f9c7bef1958eb6d5e474", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-10-23T22:34:48Z", "type": "forcePushed"}, {"oid": "e0ba7bfd0829e6397eecdf441e57566819a4500a", "url": "https://github.com/telstra/open-kilda/commit/e0ba7bfd0829e6397eecdf441e57566819a4500a", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-11-05T14:51:37Z", "type": "forcePushed"}, {"oid": "31e0378dc4b7344cc6279eaa3b843f63619a5555", "url": "https://github.com/telstra/open-kilda/commit/31e0378dc4b7344cc6279eaa3b843f63619a5555", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-11-05T23:28:53Z", "type": "forcePushed"}, {"oid": "8ef4f1223329a592a5eda1c540bcfaf958bef056", "url": "https://github.com/telstra/open-kilda/commit/8ef4f1223329a592a5eda1c540bcfaf958bef056", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-11-09T12:58:45Z", "type": "forcePushed"}, {"oid": "8d9f0506736f13343ca812c1463b6c549ac29703", "url": "https://github.com/telstra/open-kilda/commit/8d9f0506736f13343ca812c1463b6c549ac29703", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-11-10T07:55:14Z", "type": "forcePushed"}, {"oid": "e0fbba25885f5e2ac88c76c35233053a304d4431", "url": "https://github.com/telstra/open-kilda/commit/e0fbba25885f5e2ac88c76c35233053a304d4431", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-11-10T08:17:42Z", "type": "forcePushed"}, {"oid": "ec9348750bfdf0a6ed73b799cac435f49b780d9b", "url": "https://github.com/telstra/open-kilda/commit/ec9348750bfdf0a6ed73b799cac435f49b780d9b", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-11-10T08:28:46Z", "type": "forcePushed"}, {"oid": "0614c809a75e4530153bf445775799b7c6e39a64", "url": "https://github.com/telstra/open-kilda/commit/0614c809a75e4530153bf445775799b7c6e39a64", "message": "Attempt to fix opentsdb-topology unit tests", "committedDate": "2020-11-10T19:54:22Z", "type": "forcePushed"}, {"oid": "2672e241e677aa4d9842fa520137fa4c6bc73c99", "url": "https://github.com/telstra/open-kilda/commit/2672e241e677aa4d9842fa520137fa4c6bc73c99", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-11-11T02:37:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4MzY0OQ==", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r538583649", "bodyText": "As for me kafkaConfig.getHosts() is ... weird enough.", "author": "surabujin", "createdAt": "2020-12-08T16:42:55Z", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "diffHunk": "@@ -99,12 +111,36 @@ protected AbstractTopology(LaunchEnvironment env, Class<T> topologyConfigClass)\n         kafkaConfig = configurationProvider.getConfiguration(KafkaConfig.class);\n \n         logger.debug(\"Topology built {}: kafka={}, parallelism={}, workers={}\",\n-                topologyName, kafkaConfig.getHosts(), topologyConfig.getParallelism(),\n-                topologyConfig.getWorkers());\n+                topologyName, kafkaConfig.getHosts(), getTopologyParallelism(), getTopologyWorkers());", "originalCommit": "2672e241e677aa4d9842fa520137fa4c6bc73c99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bcab2dac61004a852f362245caf96626de65db9", "chunk": "diff --git a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java\nindex 82f48f3ea..65a91b75f 100644\n--- a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java\n+++ b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java\n\n@@ -109,9 +114,10 @@ public abstract class AbstractTopology<T extends AbstractTopologyConfig> impleme\n \n         topologyConfig = configurationProvider.getConfiguration(topologyConfigClass);\n         kafkaConfig = configurationProvider.getConfiguration(KafkaConfig.class);\n-\n+        zookeeperConfig = configurationProvider.getConfiguration(ZookeeperConfig.class);\n         logger.debug(\"Topology built {}: kafka={}, parallelism={}, workers={}\",\n                 topologyName, kafkaConfig.getHosts(), getTopologyParallelism(), getTopologyWorkers());\n+        logger.info(\"Starting topology {} in {} mode\", topologyName, topologyConfig.getBlueGreenMode());\n     }\n \n     private Optional<TopologyDef> loadTopologyDef(String topologyDefinitionName, Properties properties) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4ODY0OA==", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r538588648", "bodyText": "looks like we buildin this yamls inside .jar. In this case I don't see any reason to generate them with confd, we should put \"raw\" yaml files into the resources folder. The only reason to keep confd generated configs - the ability to change configuration option without recompile project. If we can't change it without recompilation, we can get rid from confd layer.", "author": "surabujin", "createdAt": "2020-12-08T16:47:22Z", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java", "diffHunk": "@@ -99,12 +111,36 @@ protected AbstractTopology(LaunchEnvironment env, Class<T> topologyConfigClass)\n         kafkaConfig = configurationProvider.getConfiguration(KafkaConfig.class);\n \n         logger.debug(\"Topology built {}: kafka={}, parallelism={}, workers={}\",\n-                topologyName, kafkaConfig.getHosts(), topologyConfig.getParallelism(),\n-                topologyConfig.getWorkers());\n+                topologyName, kafkaConfig.getHosts(), getTopologyParallelism(), getTopologyWorkers());\n     }\n \n-    protected String getDefaultTopologyName() {\n-        return getClass().getSimpleName().toLowerCase();\n+    private Optional<TopologyDef> loadTopologyDef(String topologyDefinitionName, Properties properties) {\n+        try {\n+            // Check the definition in resources for existence.\n+            String yamlResource = format(\"/%s.yaml\", topologyDefinitionName);\n+            if (FluxParser.class.getResourceAsStream(yamlResource) == null) {", "originalCommit": "2672e241e677aa4d9842fa520137fa4c6bc73c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NjQxNg==", "url": "https://github.com/telstra/open-kilda/pull/3803#discussion_r539576416", "bodyText": "For topology definition files I reuse the templating approach we apply for topology.properties. So a developer defines which Storm components require individual configuration, and puts it into the corresponding topology definition. Then during the deployment, we can override the file in the way we do for topology.properties.", "author": "sergii-iakovenko", "createdAt": "2020-12-09T19:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4ODY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "8bcab2dac61004a852f362245caf96626de65db9", "chunk": "diff --git a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java\nindex 82f48f3ea..65a91b75f 100644\n--- a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java\n+++ b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/AbstractTopology.java\n\n@@ -109,9 +114,10 @@ public abstract class AbstractTopology<T extends AbstractTopologyConfig> impleme\n \n         topologyConfig = configurationProvider.getConfiguration(topologyConfigClass);\n         kafkaConfig = configurationProvider.getConfiguration(KafkaConfig.class);\n-\n+        zookeeperConfig = configurationProvider.getConfiguration(ZookeeperConfig.class);\n         logger.debug(\"Topology built {}: kafka={}, parallelism={}, workers={}\",\n                 topologyName, kafkaConfig.getHosts(), getTopologyParallelism(), getTopologyWorkers());\n+        logger.info(\"Starting topology {} in {} mode\", topologyName, topologyConfig.getBlueGreenMode());\n     }\n \n     private Optional<TopologyDef> loadTopologyDef(String topologyDefinitionName, Properties properties) {\n"}}, {"oid": "8bcab2dac61004a852f362245caf96626de65db9", "url": "https://github.com/telstra/open-kilda/commit/8bcab2dac61004a852f362245caf96626de65db9", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-12-09T19:03:52Z", "type": "commit"}, {"oid": "8bcab2dac61004a852f362245caf96626de65db9", "url": "https://github.com/telstra/open-kilda/commit/8bcab2dac61004a852f362245caf96626de65db9", "message": "PoC for fine tuning storm topologies: introduce per topology config file, utilize Storm Flux for it.", "committedDate": "2020-12-09T19:03:52Z", "type": "forcePushed"}]}