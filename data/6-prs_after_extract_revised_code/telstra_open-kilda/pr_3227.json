{"pr_number": 3227, "pr_title": "Model update for kilda applications", "pr_createdAt": "2020-02-21T07:57:25Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3227", "timeline": [{"oid": "0de271315b55e054bdb043af5394bbe27b56a4b1", "url": "https://github.com/telstra/open-kilda/commit/0de271315b55e054bdb043af5394bbe27b56a4b1", "message": "Model update for kilda applications", "committedDate": "2020-03-03T08:36:48Z", "type": "forcePushed"}, {"oid": "354abef0b6a7af6c7334471b4e422da85f3b6bfc", "url": "https://github.com/telstra/open-kilda/commit/354abef0b6a7af6c7334471b4e422da85f3b6bfc", "message": "Model update for kilda applications", "committedDate": "2020-03-06T07:19:30Z", "type": "forcePushed"}, {"oid": "13a1b949bf4e908300a5691ad00c7e3211b91fa5", "url": "https://github.com/telstra/open-kilda/commit/13a1b949bf4e908300a5691ad00c7e3211b91fa5", "message": "Model update for kilda applications", "committedDate": "2020-03-12T13:04:04Z", "type": "forcePushed"}, {"oid": "7cd8365fe6e87ecda7f5ed4e703aa11ee4ef1e2e", "url": "https://github.com/telstra/open-kilda/commit/7cd8365fe6e87ecda7f5ed4e703aa11ee4ef1e2e", "message": "Model update for kilda applications", "committedDate": "2020-03-12T13:18:29Z", "type": "forcePushed"}, {"oid": "54e06120518d01d8196c0856be87c332627b7966", "url": "https://github.com/telstra/open-kilda/commit/54e06120518d01d8196c0856be87c332627b7966", "message": "Model update for kilda applications", "committedDate": "2020-03-19T07:09:55Z", "type": "forcePushed"}, {"oid": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "url": "https://github.com/telstra/open-kilda/commit/d2d9384b6d05d92beff5ed213b1980a106c13cbb", "message": "Model update for kilda applications", "committedDate": "2020-03-25T08:43:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA4MzIzMA==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400083230", "bodyText": "Wrong numbers. Exclude is 7, Telescope is 8. I guess I didn't update doc for ARP type", "author": "niksv", "createdAt": "2020-03-30T10:23:05Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -42,6 +43,8 @@\n  * 3 - Multi-table ISL rule for vxlan encapsulation for egress table\n  * 4 - Multi-table ISL rule for vxlan encapsulation for transit table\n  * 5 - Multi-table customer flow rule for ingress table pass-through\n+ * 6 - Exclude rule\n+ * 7 - Telescope rule.", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\nindex 4b7a72f25..6f2b5e525 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\n\n@@ -43,8 +42,9 @@ import java.util.stream.Collectors;\n  * 3 - Multi-table ISL rule for vxlan encapsulation for egress table\n  * 4 - Multi-table ISL rule for vxlan encapsulation for transit table\n  * 5 - Multi-table customer flow rule for ingress table pass-through\n- * 6 - Exclude rule\n- * 7 - Telescope rule.\n+ * 6 - Arp input customer\n+ * 7 - Exclude rule\n+ * 8 - Telescope rule.\n  * </p>\n  */\n @Value\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5MzYzMg==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400093632", "bodyText": "I think this mask must be after line 64 to have all masks in one place", "author": "niksv", "createdAt": "2020-03-30T10:41:52Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -93,6 +97,11 @@\n     public static final long MULTITABLE_ISL_VXLAN_TRANSIT_RULES_TYPE = 0x0040_0000_0000_0000L;\n     public static final long MULTITABLE_INGRESS_RULES_TYPE           = 0x0050_0000_0000_0000L;\n     public static final long ARP_INPUT_CUSTOMER_TYPE                 = 0x0060_0000_0000_0000L;\n+    public static final long EXCLUSION_COOKIE_TYPE                   = 0x0070_0000_0000_0000L;\n+    public static final long TELESCOPE_COOKIE_TYPE                   = 0x0080_0000_0000_0000L;\n+\n+    public static final long TYPE_METADATA_MASK                      = 0x0000_000F_FFF0_0000L;", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\nindex 4b7a72f25..6f2b5e525 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\n\n@@ -100,7 +99,6 @@ public class Cookie implements Comparable<Cookie>, Serializable {\n     public static final long EXCLUSION_COOKIE_TYPE                   = 0x0070_0000_0000_0000L;\n     public static final long TELESCOPE_COOKIE_TYPE                   = 0x0080_0000_0000_0000L;\n \n-    public static final long TYPE_METADATA_MASK                      = 0x0000_000F_FFF0_0000L;\n     public static final int TYPE_METADATA_SHIFT = 20; // count of Payload Reserved bits.\n \n     private final long value;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5NzI2OA==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400097268", "bodyText": "this flag intersects with TYPE_METADATA_MASK. is it ok?", "author": "niksv", "createdAt": "2020-03-30T10:48:30Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java", "diffHunk": "@@ -51,6 +54,7 @@\n     public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n     public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n     public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n+    public static final long FLOW_FORWARD_SHORT_FLAG             = 0x0000_0000_0010_0000L;", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\nindex 4b7a72f25..6f2b5e525 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Cookie.java\n\n@@ -54,7 +54,6 @@ public class Cookie implements Comparable<Cookie>, Serializable {\n     public static final long DEFAULT_RULE_FLAG                   = 0x8000_0000_0000_0000L;\n     public static final long FLOW_PATH_FORWARD_FLAG              = 0x4000_0000_0000_0000L;\n     public static final long FLOW_PATH_REVERSE_FLAG              = 0x2000_0000_0000_0000L;\n-    public static final long FLOW_FORWARD_SHORT_FLAG             = 0x0000_0000_0010_0000L;\n \n     // There is no alive system that use this deprecated direction flags so it should be save to drop it.\n     @Deprecated\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODkzNA==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400098934", "bodyText": "I think you need to overwrite setId() and setFlowId() methods because unique index field must be recalculated after calling of set methods.\nSee FlowMeter class", "author": "niksv", "createdAt": "2020-03-30T10:51:37Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/ExclusionId.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+import static java.lang.String.format;\n+\n+import lombok.AccessLevel;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import org.neo4j.ogm.annotation.GeneratedValue;\n+import org.neo4j.ogm.annotation.Id;\n+import org.neo4j.ogm.annotation.Index;\n+import org.neo4j.ogm.annotation.NodeEntity;\n+import org.neo4j.ogm.annotation.Property;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represents an exclusion id allocated for a flow.\n+ */\n+@Data\n+@NoArgsConstructor\n+@EqualsAndHashCode(exclude = {\"entityId\"})\n+@NodeEntity(label = \"exclusion_id\")\n+public class ExclusionId implements Serializable {\n+    private static final long serialVersionUID = 6022722903714656513L;\n+\n+    // Hidden as needed for OGM only.\n+    @Id\n+    @GeneratedValue\n+    @Setter(AccessLevel.NONE)\n+    @Getter(AccessLevel.NONE)\n+    private Long entityId;\n+\n+    @NonNull\n+    @Property(name = \"flow_id\")\n+    private String flowId;\n+\n+    @NonNull\n+    @Property(name = \"id\")\n+    private int id;\n+\n+    // Hidden as used to imitate unique composite index for non-enterprise Neo4j versions.\n+    @Setter(AccessLevel.NONE)\n+    @Getter(AccessLevel.NONE)\n+    @Property(name = \"unique_index\")\n+    @Index(unique = true)\n+    private String uniqueIndex;\n+\n+    @Builder(toBuilder = true)\n+    public ExclusionId(@NonNull String flowId, int id) {\n+        this.flowId = flowId;\n+        this.id = id;\n+        calculateUniqueIndex();\n+    }\n+\n+    private void calculateUniqueIndex() {\n+        uniqueIndex = format(\"%s_%d\", flowId, id);\n+    }\n+}", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzODQwOQ==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411238409", "bodyText": "so what about setId()?\nI mean use calculateUniqueIndex() in setId() to recalculate index if id was changed", "author": "niksv", "createdAt": "2020-04-20T09:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/ExclusionId.java b/src-java/kilda-model/src/main/java/org/openkilda/model/ExclusionId.java\nindex 692bdbfb3..6e8988a90 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/ExclusionId.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/ExclusionId.java\n\n@@ -72,6 +72,16 @@ public class ExclusionId implements Serializable {\n         calculateUniqueIndex();\n     }\n \n+\n+    /**\n+     * Set flow id.\n+      * @param flowId - flow id\n+     */\n+    public void setFlowId(String flowId) {\n+        this.flowId = flowId;\n+        calculateUniqueIndex();\n+    }\n+\n     private void calculateUniqueIndex() {\n         uniqueIndex = format(\"%s_%d\", flowId, id);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5OTcwMA==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400099700", "bodyText": "extra space at the begining", "author": "niksv", "createdAt": "2020-03-30T10:52:55Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java", "diffHunk": "@@ -557,5 +557,34 @@ public FlowStatus computeFlowStatus() {\n     public boolean isActualPathId(PathId pathId) {\n         return pathId != null && (pathId.equals(this.getForwardPathId()) || pathId.equals(this.getReversePathId())\n                 || pathId.equals(this.getProtectedForwardPathId()) || pathId.equals(this.getProtectedReversePathId()));\n+\n+    }\n+\n+    /**\n+     *  Lookup flow path by its endpoint.", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java\nindex ff2f2ab9a..99205eea2 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java\n\n@@ -561,7 +567,7 @@ public class Flow implements Serializable {\n     }\n \n     /**\n-     *  Lookup flow path by its endpoint.\n+     * Lookup flow path by its endpoint.\n      * @param switchId target switchId\n      * @param port target port\n      * @param vlan target vlan\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNTExOA==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400105118", "bodyText": "I think we should we handle case when getPath(oppositePathId) returns empty Optional. For example when Flow object loaded without relationships.", "author": "niksv", "createdAt": "2020-03-30T11:02:32Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java", "diffHunk": "@@ -557,5 +557,34 @@ public FlowStatus computeFlowStatus() {\n     public boolean isActualPathId(PathId pathId) {\n         return pathId != null && (pathId.equals(this.getForwardPathId()) || pathId.equals(this.getReversePathId())\n                 || pathId.equals(this.getProtectedForwardPathId()) || pathId.equals(this.getProtectedReversePathId()));\n+\n+    }\n+\n+    /**\n+     *  Lookup flow path by its endpoint.\n+     * @param switchId target switchId\n+     * @param port target port\n+     * @param vlan target vlan\n+     * @return flowPath with matching source endpoint\n+     */\n+    public FlowPath getFlowPathByEndpoint(SwitchId switchId, int port, int vlan) {\n+        if (switchId.equals(srcSwitch.getSwitchId()) && srcPort == port && vlan == srcVlan) {\n+            return getForwardPath();\n+        } else if (switchId.equals(destSwitch.getSwitchId()) && destPort == port && vlan == destVlan) {\n+            return getReversePath();\n+        }\n+        throw new IllegalArgumentException(String.format(\"Unable to find target endpoint switch_id=\\\"%s\\\",\"\n+                + \"port=%d,vlanId=%d\", switchId, port, vlan));\n+    }\n+\n+    /**\n+     * Gets opposite path by pathId.\n+     * @param pathId target path id\n+     * @return opposite path\n+     */\n+    public FlowPath getOppositePath(PathId pathId) {\n+        PathId oppositePathId = getOppositePathId(pathId)\n+                .orElseThrow(() -> new IllegalArgumentException(String.format(\"Unknown path id %s\", pathId)));\n+        return getPath(oppositePathId).get();", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java\nindex ff2f2ab9a..99205eea2 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Flow.java\n\n@@ -561,7 +567,7 @@ public class Flow implements Serializable {\n     }\n \n     /**\n-     *  Lookup flow path by its endpoint.\n+     * Lookup flow path by its endpoint.\n      * @param switchId target switchId\n      * @param port target port\n      * @param vlan target vlan\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNjQzNw==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400106437", "bodyText": "Java name and Json name are different. I think we should use same names (like we do everywhere)", "author": "niksv", "createdAt": "2020-03-30T11:05:03Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/FlowPath.java", "diffHunk": "@@ -115,14 +116,16 @@\n     @Setter(AccessLevel.NONE)\n     private List<PathSegment> segments = new ArrayList<>();\n \n-\n+    @Property(name = \"enabled_applications\")\n+    private Set<FlowApplication> applications;", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/FlowPath.java b/src-java/kilda-model/src/main/java/org/openkilda/model/FlowPath.java\nindex afb78abdf..70e878065 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/FlowPath.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/FlowPath.java\n\n@@ -116,7 +116,7 @@ public class FlowPath implements Serializable {\n     @Setter(AccessLevel.NONE)\n     private List<PathSegment> segments = new ArrayList<>();\n \n-    @Property(name = \"enabled_applications\")\n+    @Property(name = \"applications\")\n     private Set<FlowApplication> applications;\n \n     @Builder(toBuilder = true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNzYwNw==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400107607", "bodyText": "missed | after A\nthere is no information about encapsulation ID mask here\nplacement of flags is wrong. Now flags are in the middle. Between prefix and encapsulationId", "author": "niksv", "createdAt": "2020-03-30T11:07:18Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "diffHunk": "@@ -15,34 +15,43 @@\n \n package org.openkilda.model;\n \n-import lombok.Value;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n \n import java.io.Serializable;\n \n /**\n  * Represents information about a metadata.\n- * Uses 64 bit to encode information about the packet:\n- *  0                   1                   2                   3\n- *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+ * Uses 32 bit to encode information about the packet:\n+ * 0                   1                   2                   3\n+ * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |L|O|                      Reserved Prefix                      |\n- * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |                          Reserved Prefix                      |\n+ * |L|O|A                       Reserved Prefix                      |", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\nindex aed734e3d..6cbd85b9f 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\n\n@@ -29,12 +29,14 @@ import java.io.Serializable;\n  * 0                   1                   2                   3\n  * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |L|O|A                       Reserved Prefix                      |\n+ * |               Encapsulation Id                |F|O|L|A|       |\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  *\n  * <p>\n+ * F - flag for forward direction\n  * L - flag indicates LLDP packet\n  * O - flag indicates packet received by one switch flow\n+ * A - flag indicates ARP packet\n  * </p>\n  */\n @Data\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNzgzNg==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400107836", "bodyText": "you forgot to change ARP flag", "author": "niksv", "createdAt": "2020-03-30T11:07:46Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "diffHunk": "@@ -15,34 +15,43 @@\n \n package org.openkilda.model;\n \n-import lombok.Value;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n \n import java.io.Serializable;\n \n /**\n  * Represents information about a metadata.\n- * Uses 64 bit to encode information about the packet:\n- *  0                   1                   2                   3\n- *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+ * Uses 32 bit to encode information about the packet:\n+ * 0                   1                   2                   3\n+ * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |L|O|                      Reserved Prefix                      |\n- * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |                          Reserved Prefix                      |\n+ * |L|O|A                       Reserved Prefix                      |\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n+ *\n  * <p>\n  * L - flag indicates LLDP packet\n  * O - flag indicates packet received by one switch flow\n  * </p>\n  */\n-@Value\n+@Data\n+@EqualsAndHashCode(callSuper = false)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonNaming(SnakeCaseStrategy.class)\n+\n public class Metadata implements Serializable {\n     private static final long serialVersionUID = 5505079196135886296L;\n \n-    public static final long METADATA_LLDP_VALUE = 0x0000_0000_0000_0001L;\n-    public static final long METADATA_LLDP_MASK =  0x0000_0000_0000_0001L;\n+    public static final long METADATA_LLDP_VALUE = 0x0000_0000_0020_0000L;\n+    public static final long METADATA_LLDP_MASK = 0x0000_0000_0020_0000L;", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\nindex aed734e3d..6cbd85b9f 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\n\n@@ -29,12 +29,14 @@ import java.io.Serializable;\n  * 0                   1                   2                   3\n  * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |L|O|A                       Reserved Prefix                      |\n+ * |               Encapsulation Id                |F|O|L|A|       |\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  *\n  * <p>\n+ * F - flag for forward direction\n  * L - flag indicates LLDP packet\n  * O - flag indicates packet received by one switch flow\n+ * A - flag indicates ARP packet\n  * </p>\n  */\n @Data\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjI1NQ==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400112255", "bodyText": "more that 1 Group\nI think it will be helpful to add information about these extra groups. Something like\n\"Found more that 1 Group entity by path (%s). Group IDs: [%s]\"", "author": "niksv", "createdAt": "2020-03-30T11:16:19Z", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4JMirrorGroupRepository.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.persistence.repositories.impl;\n+\n+import static java.lang.String.format;\n+\n+import org.openkilda.model.GroupId;\n+import org.openkilda.model.MirrorGroup;\n+import org.openkilda.model.PathId;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.persistence.PersistenceException;\n+import org.openkilda.persistence.TransactionManager;\n+import org.openkilda.persistence.repositories.MirrorGroupRepository;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.neo4j.ogm.cypher.ComparisonOperator;\n+import org.neo4j.ogm.cypher.Filter;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class Neo4JMirrorGroupRepository extends Neo4jGenericRepository<MirrorGroup> implements MirrorGroupRepository {\n+    static final String PATH_ID_PROPERTY_NAME = \"path_id\";\n+\n+    public Neo4JMirrorGroupRepository(Neo4jSessionFactory sessionFactory, TransactionManager transactionManager) {\n+        super(sessionFactory, transactionManager);\n+    }\n+\n+    @Override\n+    public Collection<MirrorGroup> findByPathId(PathId pathId) {\n+        Filter pathIdFilter = new Filter(PATH_ID_PROPERTY_NAME, ComparisonOperator.EQUALS, pathId);\n+\n+        Collection<MirrorGroup> groups = loadAll(pathIdFilter);\n+        if (groups.size() > 1) {\n+            throw new PersistenceException(format(\"Found more that 2 Group entity by path (%s). \"", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4JMirrorGroupRepository.java b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4JMirrorGroupRepository.java\nindex 63111c306..25319ea61 100644\n--- a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4JMirrorGroupRepository.java\n+++ b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4JMirrorGroupRepository.java\n\n@@ -46,7 +46,7 @@ public class Neo4JMirrorGroupRepository extends Neo4jGenericRepository<MirrorGro\n \n         Collection<MirrorGroup> groups = loadAll(pathIdFilter);\n         if (groups.size() > 1) {\n-            throw new PersistenceException(format(\"Found more that 2 Group entity by path (%s). \"\n+            throw new PersistenceException(format(\"Found more that 1 Group entity by path (%s). \"\n                     + \" One path must have up to 1 group.\", pathId));\n         }\n         return groups;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMzgxMQ==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400113811", "bodyText": "extra spaces before =", "author": "niksv", "createdAt": "2020-03-30T11:19:16Z", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.persistence.repositories.impl;\n+\n+import static org.neo4j.ogm.cypher.ComparisonOperator.EQUALS;\n+\n+import org.openkilda.model.ApplicationRule;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.persistence.PersistenceException;\n+import org.openkilda.persistence.TransactionManager;\n+import org.openkilda.persistence.repositories.ApplicationRepository;\n+\n+import org.neo4j.ogm.cypher.Filter;\n+import org.neo4j.ogm.cypher.Filters;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class Neo4jApplicationRepository extends Neo4jGenericRepository<ApplicationRule>\n+        implements ApplicationRepository {\n+    private static final String SWITCH_ID_PROPERTY_NAME   = \"switch_id\";\n+    private static final String SRC_IP_PROPERTY_NAME   = \"src_ip\";\n+    private static final String SRC_PORT_PROPERTY_NAME   = \"src_port\";\n+    private static final String DST_IP_PROPERTY_NAME   = \"dst_ip\";\n+    private static final String DST_PORT_PROPERTY_NAME   = \"dst_port\";\n+    private static final String PROTO_PROPERTY_NAME   = \"proto\";\n+    private static final String ETH_TYPE_PROPERTY_NAME   = \"eth_type\";\n+    private static final String METADATA_PROPERTY_NAME   = \"metadata\";\n+    private static final String FLOW_ID_PROPERTY_NAME   = \"flow_id\";\n+    private static final String COOKIE_PROPERTY_NAME   = \"cookie\";", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java\nindex 4a6a30576..b578a96a1 100644\n--- a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java\n+++ b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java\n\n@@ -32,16 +32,16 @@ import java.util.Optional;\n \n public class Neo4jApplicationRepository extends Neo4jGenericRepository<ApplicationRule>\n         implements ApplicationRepository {\n-    private static final String SWITCH_ID_PROPERTY_NAME   = \"switch_id\";\n-    private static final String SRC_IP_PROPERTY_NAME   = \"src_ip\";\n-    private static final String SRC_PORT_PROPERTY_NAME   = \"src_port\";\n-    private static final String DST_IP_PROPERTY_NAME   = \"dst_ip\";\n-    private static final String DST_PORT_PROPERTY_NAME   = \"dst_port\";\n-    private static final String PROTO_PROPERTY_NAME   = \"proto\";\n-    private static final String ETH_TYPE_PROPERTY_NAME   = \"eth_type\";\n-    private static final String METADATA_PROPERTY_NAME   = \"metadata\";\n-    private static final String FLOW_ID_PROPERTY_NAME   = \"flow_id\";\n-    private static final String COOKIE_PROPERTY_NAME   = \"cookie\";\n+    private static final String SWITCH_ID_PROPERTY_NAME = \"switch_id\";\n+    private static final String SRC_IP_PROPERTY_NAME = \"src_ip\";\n+    private static final String SRC_PORT_PROPERTY_NAME = \"src_port\";\n+    private static final String DST_IP_PROPERTY_NAME = \"dst_ip\";\n+    private static final String DST_PORT_PROPERTY_NAME = \"dst_port\";\n+    private static final String PROTO_PROPERTY_NAME = \"proto\";\n+    private static final String ETH_TYPE_PROPERTY_NAME = \"eth_type\";\n+    private static final String METADATA_PROPERTY_NAME = \"metadata\";\n+    private static final String FLOW_ID_PROPERTY_NAME = \"flow_id\";\n+    private static final String COOKIE_PROPERTY_NAME = \"cookie\";\n \n     public Neo4jApplicationRepository(Neo4jSessionFactory sessionFactory, TransactionManager transactionManager) {\n         super(sessionFactory, transactionManager);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNTY4MQ==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r400115681", "bodyText": "I think you mast add more information in error message. At least group ids.\nnow it's just like \"something is wrong with some group\"", "author": "niksv", "createdAt": "2020-03-30T11:22:50Z", "path": "src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.persistence.repositories.impl;\n+\n+import static org.neo4j.ogm.cypher.ComparisonOperator.EQUALS;\n+\n+import org.openkilda.model.ApplicationRule;\n+import org.openkilda.model.Cookie;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.persistence.PersistenceException;\n+import org.openkilda.persistence.TransactionManager;\n+import org.openkilda.persistence.repositories.ApplicationRepository;\n+\n+import org.neo4j.ogm.cypher.Filter;\n+import org.neo4j.ogm.cypher.Filters;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class Neo4jApplicationRepository extends Neo4jGenericRepository<ApplicationRule>\n+        implements ApplicationRepository {\n+    private static final String SWITCH_ID_PROPERTY_NAME   = \"switch_id\";\n+    private static final String SRC_IP_PROPERTY_NAME   = \"src_ip\";\n+    private static final String SRC_PORT_PROPERTY_NAME   = \"src_port\";\n+    private static final String DST_IP_PROPERTY_NAME   = \"dst_ip\";\n+    private static final String DST_PORT_PROPERTY_NAME   = \"dst_port\";\n+    private static final String PROTO_PROPERTY_NAME   = \"proto\";\n+    private static final String ETH_TYPE_PROPERTY_NAME   = \"eth_type\";\n+    private static final String METADATA_PROPERTY_NAME   = \"metadata\";\n+    private static final String FLOW_ID_PROPERTY_NAME   = \"flow_id\";\n+    private static final String COOKIE_PROPERTY_NAME   = \"cookie\";\n+\n+    public Neo4jApplicationRepository(Neo4jSessionFactory sessionFactory, TransactionManager transactionManager) {\n+        super(sessionFactory, transactionManager);\n+    }\n+\n+    @Override\n+    protected Class<ApplicationRule> getEntityType() {\n+        return ApplicationRule.class;\n+    }\n+\n+    @Override\n+    public Optional<ApplicationRule> lookupRuleByMatchAndFlow(SwitchId switchId, String flowId, String srcIp,\n+                                                              Integer srcPort, String dstIp, Integer dstPort,\n+                                                              String proto, String ethType, Long metadata) {\n+        Filters filters = getBaseFilters(switchId, srcIp, srcPort, dstIp, dstPort, proto, ethType, metadata);\n+        filters.and(new Filter(FLOW_ID_PROPERTY_NAME, EQUALS, flowId));\n+        return processQuery(filters);\n+    }\n+\n+    @Override\n+    public Optional<ApplicationRule> lookupRuleByMatchAndCookie(SwitchId switchId, Cookie cookie, String srcIp,\n+                                                                Integer srcPort, String dstIp, Integer dstPort,\n+                                                                String proto, String ethType, Long metadata) {\n+        Filters filters = getBaseFilters(switchId, srcIp, srcPort, dstIp, dstPort, proto, ethType, metadata);\n+        filters.and(new Filter(COOKIE_PROPERTY_NAME, EQUALS, cookie));\n+        return processQuery(filters);\n+    }\n+\n+    @Override\n+    public Collection<ApplicationRule> findBySwitchId(SwitchId switchId) {\n+        return loadAll(new Filter(SWITCH_ID_PROPERTY_NAME, EQUALS, switchId));\n+    }\n+\n+    @Override\n+    public Collection<ApplicationRule> findByFlowId(String flowId) {\n+        return loadAll(new Filter(FLOW_ID_PROPERTY_NAME, EQUALS, flowId));\n+    }\n+\n+    private Filters getBaseFilters(SwitchId switchId, String srcIp, Integer srcPort, String dstIp,\n+                                               Integer dstPort, String proto, String ethType, Long metadata) {\n+        Filters filters = new Filters(new Filter(SWITCH_ID_PROPERTY_NAME, EQUALS, switchId));\n+        filters.and(new Filter(SRC_IP_PROPERTY_NAME, EQUALS, srcIp));\n+        filters.and(new Filter(SRC_PORT_PROPERTY_NAME, EQUALS, srcPort));\n+        filters.and(new Filter(DST_IP_PROPERTY_NAME, EQUALS, dstIp));\n+        filters.and(new Filter(DST_PORT_PROPERTY_NAME, EQUALS, dstPort));\n+        filters.and(new Filter(PROTO_PROPERTY_NAME, EQUALS, proto));\n+        filters.and(new Filter(ETH_TYPE_PROPERTY_NAME, EQUALS, ethType));\n+        filters.and(new Filter(METADATA_PROPERTY_NAME, EQUALS, metadata));\n+\n+        return filters;\n+    }\n+\n+    private Optional<ApplicationRule> processQuery(Filters filters) {\n+        Collection<ApplicationRule> results = loadAll(filters);\n+\n+        if (results.size() > 1) {\n+            throw new PersistenceException(\"Found more that 1 Application Rule entity by criteria\");", "originalCommit": "d2d9384b6d05d92beff5ed213b1980a106c13cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7ba63da5238a8b94960387de6baced801ffb944", "chunk": "diff --git a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java\nindex 4a6a30576..b578a96a1 100644\n--- a/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java\n+++ b/src-java/kilda-persistence-neo4j/src/main/java/org/openkilda/persistence/repositories/impl/Neo4jApplicationRepository.java\n\n@@ -32,16 +32,16 @@ import java.util.Optional;\n \n public class Neo4jApplicationRepository extends Neo4jGenericRepository<ApplicationRule>\n         implements ApplicationRepository {\n-    private static final String SWITCH_ID_PROPERTY_NAME   = \"switch_id\";\n-    private static final String SRC_IP_PROPERTY_NAME   = \"src_ip\";\n-    private static final String SRC_PORT_PROPERTY_NAME   = \"src_port\";\n-    private static final String DST_IP_PROPERTY_NAME   = \"dst_ip\";\n-    private static final String DST_PORT_PROPERTY_NAME   = \"dst_port\";\n-    private static final String PROTO_PROPERTY_NAME   = \"proto\";\n-    private static final String ETH_TYPE_PROPERTY_NAME   = \"eth_type\";\n-    private static final String METADATA_PROPERTY_NAME   = \"metadata\";\n-    private static final String FLOW_ID_PROPERTY_NAME   = \"flow_id\";\n-    private static final String COOKIE_PROPERTY_NAME   = \"cookie\";\n+    private static final String SWITCH_ID_PROPERTY_NAME = \"switch_id\";\n+    private static final String SRC_IP_PROPERTY_NAME = \"src_ip\";\n+    private static final String SRC_PORT_PROPERTY_NAME = \"src_port\";\n+    private static final String DST_IP_PROPERTY_NAME = \"dst_ip\";\n+    private static final String DST_PORT_PROPERTY_NAME = \"dst_port\";\n+    private static final String PROTO_PROPERTY_NAME = \"proto\";\n+    private static final String ETH_TYPE_PROPERTY_NAME = \"eth_type\";\n+    private static final String METADATA_PROPERTY_NAME = \"metadata\";\n+    private static final String FLOW_ID_PROPERTY_NAME = \"flow_id\";\n+    private static final String COOKIE_PROPERTY_NAME = \"cookie\";\n \n     public Neo4jApplicationRepository(Neo4jSessionFactory sessionFactory, TransactionManager transactionManager) {\n         super(sessionFactory, transactionManager);\n"}}, {"oid": "5c296e713318eb22c235d8744ba7bde9795e8752", "url": "https://github.com/telstra/open-kilda/commit/5c296e713318eb22c235d8744ba7bde9795e8752", "message": "Model update for kilda applications", "committedDate": "2020-04-20T08:22:40Z", "type": "forcePushed"}, {"oid": "c7ba63da5238a8b94960387de6baced801ffb944", "url": "https://github.com/telstra/open-kilda/commit/c7ba63da5238a8b94960387de6baced801ffb944", "message": "Model update for kilda applications", "committedDate": "2020-04-20T09:11:18Z", "type": "forcePushed"}, {"oid": "698b6477dc1ad561f55c606d5353251a0053e0c9", "url": "https://github.com/telstra/open-kilda/commit/698b6477dc1ad561f55c606d5353251a0053e0c9", "message": "Model update for kilda applications", "committedDate": "2020-04-20T09:42:27Z", "type": "forcePushed"}, {"oid": "5eb164ea55d4840e72d0f95f03cc08dc7542a4af", "url": "https://github.com/telstra/open-kilda/commit/5eb164ea55d4840e72d0f95f03cc08dc7542a4af", "message": "Model update for kilda applications", "committedDate": "2020-04-20T09:58:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI1NDM5Ng==", "url": "https://github.com/telstra/open-kilda/pull/3227#discussion_r411254396", "bodyText": "Please do not remove space before zero.\nBefore removal it was easy to understand that L is in 0 bit, O is in 1 bit. After removing it's hard to understand that.\nespecially in the middle. Digits are under | now\n4 5 6 7 8 \n+-+-+-+-+\n|F|O|L|A|", "author": "niksv", "createdAt": "2020-04-20T10:05:54Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java", "diffHunk": "@@ -15,37 +15,46 @@\n \n package org.openkilda.model;\n \n-import lombok.Value;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n \n import java.io.Serializable;\n \n /**\n  * Represents information about a metadata.\n- * Uses 64 bit to encode information about the packet:\n- *  0                   1                   2                   3\n- *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+ * Uses 32 bit to encode information about the packet:\n+ * 0                   1                   2                   3\n+ * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n- * |L|O|                      Reserved Prefix                      |\n- * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+", "originalCommit": "5eb164ea55d4840e72d0f95f03cc08dc7542a4af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b526d669b9eb0d4c92f60e238f83b4aa825bc9ef", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\nindex 6cbd85b9f..a84b010cd 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Metadata.java\n\n@@ -26,8 +26,8 @@ import java.io.Serializable;\n /**\n  * Represents information about a metadata.\n  * Uses 32 bit to encode information about the packet:\n- * 0                   1                   2                   3\n- * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+ *  0                   1                   2                   3\n+ *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  * |               Encapsulation Id                |F|O|L|A|       |\n  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"}}, {"oid": "b526d669b9eb0d4c92f60e238f83b4aa825bc9ef", "url": "https://github.com/telstra/open-kilda/commit/b526d669b9eb0d4c92f60e238f83b4aa825bc9ef", "message": "Model update for kilda applications", "committedDate": "2020-04-20T10:44:11Z", "type": "forcePushed"}, {"oid": "59da5f17259ca39128275767c0b22f52151cbc08", "url": "https://github.com/telstra/open-kilda/commit/59da5f17259ca39128275767c0b22f52151cbc08", "message": "Model update for kilda applications", "committedDate": "2020-04-20T11:06:59Z", "type": "forcePushed"}, {"oid": "b5dd6fe2886c425ecb18835cd2ad858aa99af521", "url": "https://github.com/telstra/open-kilda/commit/b5dd6fe2886c425ecb18835cd2ad858aa99af521", "message": "Model update for kilda applications", "committedDate": "2020-04-20T12:41:48Z", "type": "forcePushed"}, {"oid": "1030d4417802abe7d0722e328a596fcc1f9ad8e8", "url": "https://github.com/telstra/open-kilda/commit/1030d4417802abe7d0722e328a596fcc1f9ad8e8", "message": "Model update for kilda applications", "committedDate": "2020-04-29T07:30:13Z", "type": "forcePushed"}, {"oid": "2ceacfa9d450050cbbb11da6c4b1444ed1fb2bc1", "url": "https://github.com/telstra/open-kilda/commit/2ceacfa9d450050cbbb11da6c4b1444ed1fb2bc1", "message": "Model update for kilda applications", "committedDate": "2020-04-29T20:40:20Z", "type": "forcePushed"}, {"oid": "2ae07c73804ddbe5aed02bd1b4782bd40ce31c36", "url": "https://github.com/telstra/open-kilda/commit/2ae07c73804ddbe5aed02bd1b4782bd40ce31c36", "message": "Model update for kilda applications", "committedDate": "2020-05-06T08:56:07Z", "type": "forcePushed"}, {"oid": "3f946b0a63c4e6de9138766ef23c207426e8ce00", "url": "https://github.com/telstra/open-kilda/commit/3f946b0a63c4e6de9138766ef23c207426e8ce00", "message": "Model update for kilda applications", "committedDate": "2020-05-19T13:24:41Z", "type": "forcePushed"}, {"oid": "296205c3b02304c301badc0927611fcd348827e2", "url": "https://github.com/telstra/open-kilda/commit/296205c3b02304c301badc0927611fcd348827e2", "message": "Model update for kilda applications", "committedDate": "2020-05-19T14:52:13Z", "type": "commit"}, {"oid": "296205c3b02304c301badc0927611fcd348827e2", "url": "https://github.com/telstra/open-kilda/commit/296205c3b02304c301badc0927611fcd348827e2", "message": "Model update for kilda applications", "committedDate": "2020-05-19T14:52:13Z", "type": "forcePushed"}]}