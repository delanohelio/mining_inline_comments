{"pr_number": 3109, "pr_title": "Obviously report operation timeout into flow CRUD operations", "pr_createdAt": "2020-01-10T16:26:50Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3109", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODc0Ng==", "url": "https://github.com/telstra/open-kilda/pull/3109#discussion_r387128746", "bodyText": "nit: I think, \"protected\" visibility fits better as the method will never be invoked by other components.", "author": "sergii-iakovenko", "createdAt": "2020-03-03T16:13:08Z", "path": "services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/WithHistorySupportFsm.java", "diffHunk": "@@ -158,4 +158,13 @@ public final Instant getNextHistoryEntryTime() {\n         }\n         return lastHistoryEntryTime;\n     }\n+\n+    public abstract void reportError(E event);\n+\n+    public void reportGlobalTimeout() {", "originalCommit": "e1e6ec76c10f6774173a3b7f353278be5aa6a951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc4Mzk1Ng==", "url": "https://github.com/telstra/open-kilda/pull/3109#discussion_r405783956", "bodyText": "ok. Changed.", "author": "surabujin", "createdAt": "2020-04-08T20:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b9ecd7104ade957a08412cba680c388c5ba7eba5", "chunk": "diff --git a/services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/WithHistorySupportFsm.java b/services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/WithHistorySupportFsm.java\ndeleted file mode 100644\nindex 4c20e4d62..000000000\n--- a/services/wfm/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/WithHistorySupportFsm.java\n+++ /dev/null\n\n@@ -1,170 +0,0 @@\n-/* Copyright 2019 Telstra Open Source\n- *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n- */\n-\n-package org.openkilda.wfm.topology.flowhs.fsm.common;\n-\n-import org.openkilda.wfm.CommandContext;\n-import org.openkilda.wfm.share.history.model.FlowDumpData;\n-import org.openkilda.wfm.share.history.model.FlowEventData;\n-import org.openkilda.wfm.share.history.model.FlowHistoryData;\n-import org.openkilda.wfm.share.history.model.FlowHistoryHolder;\n-import org.openkilda.wfm.topology.flowhs.service.FlowGenericCarrier;\n-\n-import org.squirrelframework.foundation.fsm.StateMachine;\n-\n-import java.time.Instant;\n-\n-public abstract class WithHistorySupportFsm<T extends StateMachine<T, S, E, C>, S, E, C>\n-        extends WithCommandContextFsm<T, S, E, C> {\n-\n-    private Instant lastHistoryEntryTime;\n-\n-    public WithHistorySupportFsm(CommandContext commandContext) {\n-        super(commandContext);\n-    }\n-\n-    public abstract String getFlowId();\n-\n-    public abstract FlowGenericCarrier getCarrier();\n-\n-    /**\n-     * Add a history record on the action.\n-     */\n-    public void saveActionToHistory(String action) {\n-        log.debug(\"Flow {} action - {}\", getFlowId(), action);\n-        sendHistoryData(action, null);\n-    }\n-\n-    /**\n-     * Add a history record on the action.\n-     */\n-    public void saveActionToHistory(String action, String description) {\n-        log.debug(\"Flow {} action - {} : {}\", getFlowId(), action, description);\n-        sendHistoryData(action, description);\n-    }\n-\n-    /**\n-     * Add a history record on the error.\n-     */\n-    public void saveErrorToHistory(String action, String errorMessage) {\n-        log.error(\"Flow {} error - {} : {}\", getFlowId(), action, errorMessage);\n-        sendHistoryData(action, errorMessage);\n-    }\n-\n-    /**\n-     * Add a history record on the error.\n-     */\n-    public void saveErrorToHistory(String errorMessage) {\n-        log.error(\"Flow {} error - {}\", getFlowId(), errorMessage);\n-        sendHistoryData(errorMessage, null);\n-    }\n-\n-    /**\n-     * Add a history record on the error.\n-     */\n-    public void saveErrorToHistory(String errorMessage, Exception ex) {\n-        log.error(\"Flow {} error - {}\", getFlowId(), errorMessage, ex);\n-        sendHistoryData(errorMessage, null);\n-    }\n-\n-    protected void sendHistoryData(String action, String description) {\n-        FlowHistoryHolder historyHolder = FlowHistoryHolder.builder()\n-                .taskId(getCommandContext().getCorrelationId())\n-                .flowHistoryData(FlowHistoryData.builder()\n-                        .action(action)\n-                        .time(getNextHistoryEntryTime())\n-                        .flowId(getFlowId())\n-                        .description(description)\n-                        .build())\n-                .build();\n-        getCarrier().sendHistoryUpdate(historyHolder);\n-    }\n-\n-    /**\n-     * Add a history record on the new event.\n-     */\n-    public void saveNewEventToHistory(String action, FlowEventData.Event event) {\n-        saveNewEventToHistory(action, event, null, null);\n-    }\n-\n-    /**\n-     * Add a history record on the new event.\n-     */\n-    public void saveNewEventToHistory(String action, FlowEventData.Event event,\n-                                      FlowEventData.Initiator initiator,\n-                                      String details) {\n-        log.debug(\"Flow {} action - {} : {}\", getFlowId(), action, event);\n-\n-        Instant timestamp = getNextHistoryEntryTime();\n-        FlowHistoryHolder historyHolder = FlowHistoryHolder.builder()\n-                .taskId(getCommandContext().getCorrelationId())\n-                .flowHistoryData(FlowHistoryData.builder()\n-                        .action(action)\n-                        .time(timestamp)\n-                        .flowId(getFlowId())\n-                        .build())\n-                .flowEventData(FlowEventData.builder()\n-                        .flowId(getFlowId())\n-                        .event(event)\n-                        .initiator(initiator)\n-                        .time(timestamp)\n-                        .details(details)\n-                        .build())\n-                .build();\n-        getCarrier().sendHistoryUpdate(historyHolder);\n-    }\n-\n-    /**\n-     * Add a history record on the action.\n-     */\n-    public void saveActionWithDumpToHistory(String action, String description,\n-                                            FlowDumpData flowDumpData) {\n-        log.debug(\"Flow {} action - {} : {}\", getFlowId(), action, description);\n-\n-        FlowHistoryHolder historyHolder = FlowHistoryHolder.builder()\n-                .taskId(getCommandContext().getCorrelationId())\n-                .flowDumpData(flowDumpData)\n-                .flowHistoryData(FlowHistoryData.builder()\n-                        .action(action)\n-                        .time(getNextHistoryEntryTime())\n-                        .description(description)\n-                        .flowId(getFlowId())\n-                        .build())\n-                .build();\n-        getCarrier().sendHistoryUpdate(historyHolder);\n-    }\n-\n-    public final Instant getNextHistoryEntryTime() {\n-        Instant now = Instant.now();\n-        if (lastHistoryEntryTime == null || lastHistoryEntryTime.isBefore(now)) {\n-            lastHistoryEntryTime = now;\n-        } else {\n-            // To maintain the ordering of history records, each next record must be at least 1 ms later\n-            // than the previous one. In a case of subsequent calls that receive the same value of Instant.now(),\n-            // we have to manually increment the timestamp by adding 1 ms.\n-            lastHistoryEntryTime = lastHistoryEntryTime.plusMillis(1);\n-        }\n-        return lastHistoryEntryTime;\n-    }\n-\n-    public abstract void reportError(E event);\n-\n-    public void reportGlobalTimeout() {\n-        saveErrorToHistory(String.format(\n-                \"Global timeout reached for %s operation on flow \\\"%s\\\"\", getCrudActionName(), getFlowId()));\n-    }\n-\n-    protected abstract String getCrudActionName();\n-}\n"}}, {"oid": "b9ecd7104ade957a08412cba680c388c5ba7eba5", "url": "https://github.com/telstra/open-kilda/commit/b9ecd7104ade957a08412cba680c388c5ba7eba5", "message": "Obviously report operation timeout into flow CRUD operations", "committedDate": "2020-04-08T20:43:38Z", "type": "forcePushed"}, {"oid": "1c2e50cddd6d3f142e02f12ceb78a031440dd9c2", "url": "https://github.com/telstra/open-kilda/commit/1c2e50cddd6d3f142e02f12ceb78a031440dd9c2", "message": "Obviously report operation timeout into flow CRUD operations", "committedDate": "2020-04-16T08:37:54Z", "type": "commit"}, {"oid": "1c2e50cddd6d3f142e02f12ceb78a031440dd9c2", "url": "https://github.com/telstra/open-kilda/commit/1c2e50cddd6d3f142e02f12ceb78a031440dd9c2", "message": "Obviously report operation timeout into flow CRUD operations", "committedDate": "2020-04-16T08:37:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMjgxNA==", "url": "https://github.com/telstra/open-kilda/pull/3109#discussion_r410102814", "bodyText": "nit:\ngetActionName", "author": "timofei-durakov", "createdAt": "2020-04-17T09:25:14Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/WithHistorySupportFsm.java", "diffHunk": "@@ -158,4 +158,13 @@ public final Instant getNextHistoryEntryTime() {\n         }\n         return lastHistoryEntryTime;\n     }\n+\n+    public abstract void reportError(E event);\n+\n+    protected void reportGlobalTimeout() {\n+        saveErrorToHistory(String.format(\n+                \"Global timeout reached for %s operation on flow \\\"%s\\\"\", getCrudActionName(), getFlowId()));\n+    }\n+\n+    protected abstract String getCrudActionName();", "originalCommit": "1c2e50cddd6d3f142e02f12ceb78a031440dd9c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA1NTMyNw==", "url": "https://github.com/telstra/open-kilda/pull/3109#discussion_r412055327", "bodyText": "I would like to keep more verbose getCrudActionName method name. There is too many \"action\" \"things\" around FSM.", "author": "surabujin", "createdAt": "2020-04-21T10:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMjgxNA=="}], "type": "inlineReview", "revised_code": null}]}