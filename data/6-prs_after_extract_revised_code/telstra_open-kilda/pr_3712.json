{"pr_number": 3712, "pr_title": "Per ISL BFD properties", "pr_createdAt": "2020-09-06T13:33:15Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3712", "timeline": [{"oid": "a7810deb56c18a26e2d355b61ee200b7b2ba737c", "url": "https://github.com/telstra/open-kilda/commit/a7810deb56c18a26e2d355b61ee200b7b2ba737c", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-09-06T15:50:44Z", "type": "forcePushed"}, {"oid": "2c662bd120dc6cda374384efa70492539bd4e7cd", "url": "https://github.com/telstra/open-kilda/commit/2c662bd120dc6cda374384efa70492539bd4e7cd", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-09-07T15:24:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MTI0Ng==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485651246", "bodyText": "As for me readBfdProperties and writeBfdProperties is better methods naming.", "author": "rozdy", "createdAt": "2020-09-09T14:21:15Z", "path": "src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java", "diffHunk": "@@ -150,44 +157,75 @@ public LinkOperationsService(ILinkOperationsServiceCarrier carrier,\n         return isls;\n     }\n \n+    /**\n+     * Read ISL bfd properties.\n+     */\n+    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4MDk2OA==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492880968", "bodyText": "The proposed named schema provide one handy \"feature\" - it provides natural method grouping - into alphabetically ordered lists you will always have methods working with the same object placed together. Also, the targeted object is more important than the action being applied to it. That why bfdPropertiesRead is handier than readBfdProperties at least for me.\nRenaming...", "author": "surabujin", "createdAt": "2020-09-22T16:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MTI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\nindex f96a7f5c0..6c90eb76d 100644\n--- a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n+++ b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n\n@@ -160,23 +160,20 @@ public class LinkOperationsService {\n     /**\n      * Read ISL bfd properties.\n      */\n-    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+    public BfdPropertiesResponse readBfdProperties(Endpoint source, Endpoint destination) throws IslNotFoundException {\n         Isl link = findIsl(source, destination);\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     /**\n-     * Update the \"Under maintenance\" flag in ISL.\n-     *\n-     * @throws IslNotFoundException if there is no isl with these parameters.\n+     * Update BFD properties for specified ISL (both directions).\n      */\n-    public BfdPropertiesResponse bfdPropertiesWrite(\n+    public BfdPropertiesResponse writeBfdProperties(\n             Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n-        Isl link = transactionManager.doInTransaction(() -> bfdPropertiesWriteGoal(\n-                source, destination, properties));\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        Isl link = transactionManager.doInTransaction(() -> writeBfdPropertiesGoalValue(source, destination, properties));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     private Isl findIsl(Endpoint leftEnd, Endpoint rightEnd) throws IslNotFoundException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MTcyMQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485651721", "bodyText": "Please update javadoc.", "author": "rozdy", "createdAt": "2020-09-09T14:21:51Z", "path": "src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java", "diffHunk": "@@ -150,44 +157,75 @@ public LinkOperationsService(ILinkOperationsServiceCarrier carrier,\n         return isls;\n     }\n \n+    /**\n+     * Read ISL bfd properties.\n+     */\n+    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+        Isl link = findIsl(source, destination);\n+        return LinkMapper.INSTANCE.responseMap(\n+                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+    }\n+\n     /**\n      * Update the \"Under maintenance\" flag in ISL.\n      *\n      * @throws IslNotFoundException if there is no isl with these parameters.\n      */\n-    public Collection<Isl> updateEnableBfdFlag(Endpoint source, Endpoint destination, boolean flagValue)\n-            throws IslNotFoundException {\n-        return transactionManager.doInTransaction(() -> {\n-            List<Isl> processed = new ArrayList<>(2);\n-            boolean madeChange;\n-            madeChange = updateUniIslEnableBfdFlag(source, destination, flagValue, processed);\n-            madeChange |= updateUniIslEnableBfdFlag(destination, source, flagValue, processed);\n+    public BfdPropertiesResponse bfdPropertiesWrite(", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4Mzc5NA==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492883794", "bodyText": "done", "author": "surabujin", "createdAt": "2020-09-22T16:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MTcyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\nindex f96a7f5c0..6c90eb76d 100644\n--- a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n+++ b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n\n@@ -160,23 +160,20 @@ public class LinkOperationsService {\n     /**\n      * Read ISL bfd properties.\n      */\n-    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+    public BfdPropertiesResponse readBfdProperties(Endpoint source, Endpoint destination) throws IslNotFoundException {\n         Isl link = findIsl(source, destination);\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     /**\n-     * Update the \"Under maintenance\" flag in ISL.\n-     *\n-     * @throws IslNotFoundException if there is no isl with these parameters.\n+     * Update BFD properties for specified ISL (both directions).\n      */\n-    public BfdPropertiesResponse bfdPropertiesWrite(\n+    public BfdPropertiesResponse writeBfdProperties(\n             Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n-        Isl link = transactionManager.doInTransaction(() -> bfdPropertiesWriteGoal(\n-                source, destination, properties));\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        Isl link = transactionManager.doInTransaction(() -> writeBfdPropertiesGoalValue(source, destination, properties));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     private Isl findIsl(Endpoint leftEnd, Endpoint rightEnd) throws IslNotFoundException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MzUyMg==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485653522", "bodyText": "Rename responseMap to mapResponse.", "author": "rozdy", "createdAt": "2020-09-09T14:24:12Z", "path": "src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/share/mappers/LinkMapper.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.share.mappers;\n+\n+import org.openkilda.messaging.model.NetworkEndpoint;\n+import org.openkilda.messaging.nbtopology.response.BfdPropertiesResponse;\n+import org.openkilda.model.BfdProperties;\n+import org.openkilda.model.Isl;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+\n+@Mapper\n+public abstract class LinkMapper {\n+    public static final LinkMapper INSTANCE = Mappers.getMapper(LinkMapper.class);\n+\n+    /**\n+     * Convert {@link Isl} into {@link BfdPropertiesResponse}.\n+     */\n+    public BfdPropertiesResponse responseMap(", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4NjY0Mg==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492886642", "bodyText": "done", "author": "surabujin", "createdAt": "2020-09-22T16:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MzUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/share/mappers/LinkMapper.java b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/share/mappers/LinkMapper.java\nindex 4548a9404..28ce81ff7 100644\n--- a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/share/mappers/LinkMapper.java\n+++ b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/share/mappers/LinkMapper.java\n\n@@ -31,7 +31,7 @@ public abstract class LinkMapper {\n     /**\n      * Convert {@link Isl} into {@link BfdPropertiesResponse}.\n      */\n-    public BfdPropertiesResponse responseMap(\n+    public BfdPropertiesResponse mapResponse(\n             Isl link, BfdProperties effectiveSource, BfdProperties effectiveDestination) {\n         return new BfdPropertiesResponse(\n                 mapSource(link), mapDestination(link),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NjQxOA==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485656418", "bodyText": "Rename bfdPropertiesReadEffective -> readBfdPropertiesByEndpoint.", "author": "rozdy", "createdAt": "2020-09-09T14:27:54Z", "path": "src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java", "diffHunk": "@@ -150,44 +157,75 @@ public LinkOperationsService(ILinkOperationsServiceCarrier carrier,\n         return isls;\n     }\n \n+    /**\n+     * Read ISL bfd properties.\n+     */\n+    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+        Isl link = findIsl(source, destination);\n+        return LinkMapper.INSTANCE.responseMap(\n+                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+    }\n+\n     /**\n      * Update the \"Under maintenance\" flag in ISL.\n      *\n      * @throws IslNotFoundException if there is no isl with these parameters.\n      */\n-    public Collection<Isl> updateEnableBfdFlag(Endpoint source, Endpoint destination, boolean flagValue)\n-            throws IslNotFoundException {\n-        return transactionManager.doInTransaction(() -> {\n-            List<Isl> processed = new ArrayList<>(2);\n-            boolean madeChange;\n-            madeChange = updateUniIslEnableBfdFlag(source, destination, flagValue, processed);\n-            madeChange |= updateUniIslEnableBfdFlag(destination, source, flagValue, processed);\n+    public BfdPropertiesResponse bfdPropertiesWrite(\n+            Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n+        Isl link = transactionManager.doInTransaction(() -> bfdPropertiesWriteGoal(\n+                source, destination, properties));\n+        return LinkMapper.INSTANCE.responseMap(\n+                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+    }\n \n-            if (processed.size() != 2) {\n-                throw new IslNotFoundException(source, destination);\n-            }\n-            if (madeChange) {\n-                carrier.islBfdFlagChanged(processed.get(0));\n-            }\n+    private Isl findIsl(Endpoint leftEnd, Endpoint rightEnd) throws IslNotFoundException {\n+        return islRepository.findByEndpoints(\n+                leftEnd.getDatapath(), leftEnd.getPortNumber(), rightEnd.getDatapath(), rightEnd.getPortNumber())\n+                .orElseThrow(() -> new IslNotFoundException(leftEnd, rightEnd));\n+    }\n \n-            return processed;\n-        });\n+    private BfdProperties bfdPropertiesReadEffective(Endpoint endpoint) {", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4ODExMA==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492888110", "bodyText": "no. It reads effective value stored into bfd_session collection, not \"goal\" value stored into isl collections.", "author": "surabujin", "createdAt": "2020-09-22T16:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NjQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\nindex f96a7f5c0..6c90eb76d 100644\n--- a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n+++ b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n\n@@ -160,23 +160,20 @@ public class LinkOperationsService {\n     /**\n      * Read ISL bfd properties.\n      */\n-    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+    public BfdPropertiesResponse readBfdProperties(Endpoint source, Endpoint destination) throws IslNotFoundException {\n         Isl link = findIsl(source, destination);\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     /**\n-     * Update the \"Under maintenance\" flag in ISL.\n-     *\n-     * @throws IslNotFoundException if there is no isl with these parameters.\n+     * Update BFD properties for specified ISL (both directions).\n      */\n-    public BfdPropertiesResponse bfdPropertiesWrite(\n+    public BfdPropertiesResponse writeBfdProperties(\n             Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n-        Isl link = transactionManager.doInTransaction(() -> bfdPropertiesWriteGoal(\n-                source, destination, properties));\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        Isl link = transactionManager.doInTransaction(() -> writeBfdPropertiesGoalValue(source, destination, properties));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     private Isl findIsl(Endpoint leftEnd, Endpoint rightEnd) throws IslNotFoundException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTYwOQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485659609", "bodyText": "Rename bfdPropertiesWriteGoal to writeBfdPropertiesGoal.", "author": "rozdy", "createdAt": "2020-09-09T14:31:54Z", "path": "src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java", "diffHunk": "@@ -150,44 +157,75 @@ public LinkOperationsService(ILinkOperationsServiceCarrier carrier,\n         return isls;\n     }\n \n+    /**\n+     * Read ISL bfd properties.\n+     */\n+    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+        Isl link = findIsl(source, destination);\n+        return LinkMapper.INSTANCE.responseMap(\n+                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+    }\n+\n     /**\n      * Update the \"Under maintenance\" flag in ISL.\n      *\n      * @throws IslNotFoundException if there is no isl with these parameters.\n      */\n-    public Collection<Isl> updateEnableBfdFlag(Endpoint source, Endpoint destination, boolean flagValue)\n-            throws IslNotFoundException {\n-        return transactionManager.doInTransaction(() -> {\n-            List<Isl> processed = new ArrayList<>(2);\n-            boolean madeChange;\n-            madeChange = updateUniIslEnableBfdFlag(source, destination, flagValue, processed);\n-            madeChange |= updateUniIslEnableBfdFlag(destination, source, flagValue, processed);\n+    public BfdPropertiesResponse bfdPropertiesWrite(\n+            Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n+        Isl link = transactionManager.doInTransaction(() -> bfdPropertiesWriteGoal(\n+                source, destination, properties));\n+        return LinkMapper.INSTANCE.responseMap(\n+                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+    }\n \n-            if (processed.size() != 2) {\n-                throw new IslNotFoundException(source, destination);\n-            }\n-            if (madeChange) {\n-                carrier.islBfdFlagChanged(processed.get(0));\n-            }\n+    private Isl findIsl(Endpoint leftEnd, Endpoint rightEnd) throws IslNotFoundException {\n+        return islRepository.findByEndpoints(\n+                leftEnd.getDatapath(), leftEnd.getPortNumber(), rightEnd.getDatapath(), rightEnd.getPortNumber())\n+                .orElseThrow(() -> new IslNotFoundException(leftEnd, rightEnd));\n+    }\n \n-            return processed;\n-        });\n+    private BfdProperties bfdPropertiesReadEffective(Endpoint endpoint) {\n+        return bfdSessionRepository.findBySwitchIdAndPhysicalPort(endpoint.getDatapath(), endpoint.getPortNumber())\n+                .map(IslMapper.INSTANCE::readBfdProperties)\n+                .orElse(new BfdProperties());\n     }\n \n-    private boolean updateUniIslEnableBfdFlag(\n-            Endpoint leftEnd, Endpoint rightEnd, boolean flagValue, List<Isl> processed) {\n+    private Isl bfdPropertiesWriteGoal(", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NTI5NA==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492895294", "bodyText": "done, mostly", "author": "surabujin", "createdAt": "2020-09-22T17:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\nindex f96a7f5c0..6c90eb76d 100644\n--- a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n+++ b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n\n@@ -160,23 +160,20 @@ public class LinkOperationsService {\n     /**\n      * Read ISL bfd properties.\n      */\n-    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+    public BfdPropertiesResponse readBfdProperties(Endpoint source, Endpoint destination) throws IslNotFoundException {\n         Isl link = findIsl(source, destination);\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     /**\n-     * Update the \"Under maintenance\" flag in ISL.\n-     *\n-     * @throws IslNotFoundException if there is no isl with these parameters.\n+     * Update BFD properties for specified ISL (both directions).\n      */\n-    public BfdPropertiesResponse bfdPropertiesWrite(\n+    public BfdPropertiesResponse writeBfdProperties(\n             Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n-        Isl link = transactionManager.doInTransaction(() -> bfdPropertiesWriteGoal(\n-                source, destination, properties));\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        Isl link = transactionManager.doInTransaction(() -> writeBfdPropertiesGoalValue(source, destination, properties));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     private Isl findIsl(Endpoint leftEnd, Endpoint rightEnd) throws IslNotFoundException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2MDQ4Mg==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485660482", "bodyText": "And here.", "author": "rozdy", "createdAt": "2020-09-09T14:33:02Z", "path": "src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java", "diffHunk": "@@ -150,44 +157,75 @@ public LinkOperationsService(ILinkOperationsServiceCarrier carrier,\n         return isls;\n     }\n \n+    /**\n+     * Read ISL bfd properties.\n+     */\n+    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+        Isl link = findIsl(source, destination);\n+        return LinkMapper.INSTANCE.responseMap(\n+                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+    }\n+\n     /**\n      * Update the \"Under maintenance\" flag in ISL.\n      *\n      * @throws IslNotFoundException if there is no isl with these parameters.\n      */\n-    public Collection<Isl> updateEnableBfdFlag(Endpoint source, Endpoint destination, boolean flagValue)\n-            throws IslNotFoundException {\n-        return transactionManager.doInTransaction(() -> {\n-            List<Isl> processed = new ArrayList<>(2);\n-            boolean madeChange;\n-            madeChange = updateUniIslEnableBfdFlag(source, destination, flagValue, processed);\n-            madeChange |= updateUniIslEnableBfdFlag(destination, source, flagValue, processed);\n+    public BfdPropertiesResponse bfdPropertiesWrite(\n+            Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n+        Isl link = transactionManager.doInTransaction(() -> bfdPropertiesWriteGoal(\n+                source, destination, properties));\n+        return LinkMapper.INSTANCE.responseMap(\n+                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+    }\n \n-            if (processed.size() != 2) {\n-                throw new IslNotFoundException(source, destination);\n-            }\n-            if (madeChange) {\n-                carrier.islBfdFlagChanged(processed.get(0));\n-            }\n+    private Isl findIsl(Endpoint leftEnd, Endpoint rightEnd) throws IslNotFoundException {\n+        return islRepository.findByEndpoints(\n+                leftEnd.getDatapath(), leftEnd.getPortNumber(), rightEnd.getDatapath(), rightEnd.getPortNumber())\n+                .orElseThrow(() -> new IslNotFoundException(leftEnd, rightEnd));\n+    }\n \n-            return processed;\n-        });\n+    private BfdProperties bfdPropertiesReadEffective(Endpoint endpoint) {\n+        return bfdSessionRepository.findBySwitchIdAndPhysicalPort(endpoint.getDatapath(), endpoint.getPortNumber())\n+                .map(IslMapper.INSTANCE::readBfdProperties)\n+                .orElse(new BfdProperties());\n     }\n \n-    private boolean updateUniIslEnableBfdFlag(\n-            Endpoint leftEnd, Endpoint rightEnd, boolean flagValue, List<Isl> processed) {\n+    private Isl bfdPropertiesWriteGoal(\n+            Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n+        List<Isl> processed = new ArrayList<>(2);\n+        boolean madeChange;\n+        madeChange = bfdPropertiesWriteGoal(source, destination, properties, processed);\n+        madeChange |= bfdPropertiesWriteGoal(destination, source, properties, processed);\n+\n+        if (processed.size() != 2) {\n+            throw new IslNotFoundException(source, destination);\n+        }\n+        if (madeChange) {\n+            carrier.islBfdPropertiesChanged(source, destination);\n+        }\n+\n+        return processed.get(0);\n+    }\n+\n+    private boolean bfdPropertiesWriteGoal(", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NTU0NQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492895545", "bodyText": "done", "author": "surabujin", "createdAt": "2020-09-22T17:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2MDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\nindex f96a7f5c0..6c90eb76d 100644\n--- a/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n+++ b/src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/services/LinkOperationsService.java\n\n@@ -160,23 +160,20 @@ public class LinkOperationsService {\n     /**\n      * Read ISL bfd properties.\n      */\n-    public BfdPropertiesResponse bfdPropertiesRead(Endpoint source, Endpoint destination) throws IslNotFoundException {\n+    public BfdPropertiesResponse readBfdProperties(Endpoint source, Endpoint destination) throws IslNotFoundException {\n         Isl link = findIsl(source, destination);\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     /**\n-     * Update the \"Under maintenance\" flag in ISL.\n-     *\n-     * @throws IslNotFoundException if there is no isl with these parameters.\n+     * Update BFD properties for specified ISL (both directions).\n      */\n-    public BfdPropertiesResponse bfdPropertiesWrite(\n+    public BfdPropertiesResponse writeBfdProperties(\n             Endpoint source, Endpoint destination, BfdProperties properties) throws IslNotFoundException {\n-        Isl link = transactionManager.doInTransaction(() -> bfdPropertiesWriteGoal(\n-                source, destination, properties));\n-        return LinkMapper.INSTANCE.responseMap(\n-                link, bfdPropertiesReadEffective(source), bfdPropertiesReadEffective(destination));\n+        Isl link = transactionManager.doInTransaction(() -> writeBfdPropertiesGoalValue(source, destination, properties));\n+        return LinkMapper.INSTANCE.mapResponse(\n+                link, readBfdPropertiesEffectiveValue(source), readBfdPropertiesEffectiveValue(destination));\n     }\n \n     private Isl findIsl(Endpoint leftEnd, Endpoint rightEnd) throws IslNotFoundException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MjQzNA==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485672434", "bodyText": "I guess you can rename leftToRight and rightToLeft to simple left and right.", "author": "rozdy", "createdAt": "2020-09-09T14:48:27Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -600,6 +637,25 @@ private void initializeFromLinkProps(Endpoint source, Endpoint dest, IslBuilder\n         return result;\n     }\n \n+    private BfdProperties loadBfdProperties() {\n+        BfdProperties leftToRight = loadBfdProperties(reference.getSource(), reference.getDest());", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NjY0OA==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492896648", "bodyText": "it does not exact enough", "author": "surabujin", "createdAt": "2020-09-22T17:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MjQzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4NjM4Nw==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485686387", "bodyText": "Rename responseMap -> mapResponse.", "author": "rozdy", "createdAt": "2020-09-09T15:05:56Z", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/LinkMapper.java", "diffHunk": "@@ -17,23 +17,88 @@\n \n import org.openkilda.messaging.info.event.IslInfoData;\n import org.openkilda.messaging.info.event.PathNode;\n+import org.openkilda.messaging.model.NetworkEndpoint;\n+import org.openkilda.messaging.nbtopology.request.BfdPropertiesReadRequest;\n+import org.openkilda.messaging.nbtopology.request.BfdPropertiesWriteRequest;\n+import org.openkilda.messaging.nbtopology.response.BfdPropertiesResponse;\n import org.openkilda.model.SwitchId;\n import org.openkilda.northbound.dto.v1.links.LinkDto;\n import org.openkilda.northbound.dto.v1.links.PathDto;\n+import org.openkilda.northbound.dto.v2.links.BfdPropertiesByEndpoint;\n+import org.openkilda.northbound.dto.v2.links.BfdPropertiesPayload;\n \n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n+import org.mapstruct.MappingTarget;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n \n @Mapper(componentModel = \"spring\")\n-public interface LinkMapper {\n+public abstract class LinkMapper {\n+    public abstract PathDto map(PathNode data);\n+\n+    @Mapping(target = \"interval\", source = \"intervalMs\")\n+    public abstract org.openkilda.model.BfdProperties map(org.openkilda.northbound.dto.v2.links.BfdProperties source);\n+\n+    @Mapping(target = \"intervalMs\", source = \"interval\")\n+    public abstract org.openkilda.northbound.dto.v2.links.BfdProperties map(org.openkilda.model.BfdProperties source);\n+\n+    @Mapping(target = \"timestamp\", ignore = true)\n+    public abstract BfdPropertiesReadRequest bfdRequestMap(NetworkEndpoint source, NetworkEndpoint destination);\n+\n+    @Mapping(target = \"timestamp\", ignore = true)\n+    @Mapping(target = \"source\", source = \"source\")\n+    @Mapping(target = \"destination\", source = \"destination\")\n+    @Mapping(target = \"properties\", source = \"properties\")\n+    public abstract BfdPropertiesWriteRequest bfdRequestMap(\n+            NetworkEndpoint source, NetworkEndpoint destination,\n+            org.openkilda.northbound.dto.v2.links.BfdProperties  properties);\n+\n+    /**\n+     * Convert {@link BfdPropertiesResponse} into {@link BfdPropertiesPayload}.\n+     */\n+    @Mapping(target = \"intervalMs\", source = \"properties.interval\")\n+    @Mapping(target = \"multiplier\", source = \"properties.multiplier\")\n+    public BfdPropertiesPayload responseMap(BfdPropertiesResponse response) {", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NzY1NQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492897655", "bodyText": "done", "author": "surabujin", "createdAt": "2020-09-22T17:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4NjM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/LinkMapper.java b/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/LinkMapper.java\nindex 73183273e..90d6557f0 100644\n--- a/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/LinkMapper.java\n+++ b/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/converter/LinkMapper.java\n\n@@ -45,22 +45,22 @@ public abstract class LinkMapper {\n     public abstract org.openkilda.northbound.dto.v2.links.BfdProperties map(org.openkilda.model.BfdProperties source);\n \n     @Mapping(target = \"timestamp\", ignore = true)\n-    public abstract BfdPropertiesReadRequest bfdRequestMap(NetworkEndpoint source, NetworkEndpoint destination);\n+    public abstract BfdPropertiesReadRequest mapBfdRequest(NetworkEndpoint source, NetworkEndpoint destination);\n \n     @Mapping(target = \"timestamp\", ignore = true)\n     @Mapping(target = \"source\", source = \"source\")\n     @Mapping(target = \"destination\", source = \"destination\")\n     @Mapping(target = \"properties\", source = \"properties\")\n-    public abstract BfdPropertiesWriteRequest bfdRequestMap(\n+    public abstract BfdPropertiesWriteRequest mapBfdRequest(\n             NetworkEndpoint source, NetworkEndpoint destination,\n-            org.openkilda.northbound.dto.v2.links.BfdProperties  properties);\n+            org.openkilda.northbound.dto.v2.links.BfdProperties properties);\n \n     /**\n      * Convert {@link BfdPropertiesResponse} into {@link BfdPropertiesPayload}.\n      */\n     @Mapping(target = \"intervalMs\", source = \"properties.interval\")\n     @Mapping(target = \"multiplier\", source = \"properties.multiplier\")\n-    public BfdPropertiesPayload responseMap(BfdPropertiesResponse response) {\n+    public BfdPropertiesPayload mapResponse(BfdPropertiesResponse response) {\n         org.openkilda.northbound.dto.v2.links.BfdProperties properties = map(response.getGoal());\n         BfdPropertiesByEndpoint effectiveSource = new BfdPropertiesByEndpoint(\n                 response.getSource(), map(response.getEffectiveSource()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4ODI3Nw==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485688277", "bodyText": "Rename methods to write/read/deleteBfdProperties.", "author": "rozdy", "createdAt": "2020-09-09T15:08:30Z", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/LinkService.java", "diffHunk": "@@ -106,13 +108,15 @@\n      */\n     CompletableFuture<List<LinkDto>> deleteLink(LinkParametersDto linkParameters, boolean force);\n \n-    /**\n-     * Update \"Enable BFD\" flag.\n-     *\n-     * @param link link parameters.\n-     * @return updated link.\n-     */\n-    CompletableFuture<List<LinkDto>> updateLinkEnableBfd(LinkEnableBfdDto link);\n+    CompletableFuture<List<LinkDto>> bfdPropertiesWrite(", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5ODUwMQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492898501", "bodyText": "done", "author": "surabujin", "createdAt": "2020-09-22T17:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4ODI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/LinkService.java b/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/LinkService.java\nindex b75a71807..36934931e 100644\n--- a/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/LinkService.java\n+++ b/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/LinkService.java\n\n@@ -108,15 +109,18 @@ public interface LinkService {\n      */\n     CompletableFuture<List<LinkDto>> deleteLink(LinkParametersDto linkParameters, boolean force);\n \n-    CompletableFuture<List<LinkDto>> bfdPropertiesWrite(\n+    CompletableFuture<List<LinkDto>> writeBfdProperties(\n             NetworkEndpoint source, NetworkEndpoint dest, boolean isEnabled);\n \n-    CompletableFuture<BfdPropertiesPayload> bfdPropertiesWrite(\n+    CompletableFuture<BfdPropertiesPayload> writeBfdProperties(\n             NetworkEndpoint source, NetworkEndpoint dest, BfdProperties properties);\n \n-    CompletableFuture<BfdPropertiesPayload> bfdPropertiesRead(NetworkEndpoint source, NetworkEndpoint dest);\n+    CompletableFuture<BfdPropertiesPayload> readBfdProperties(NetworkEndpoint source, NetworkEndpoint dest);\n \n-    CompletableFuture<Void> bfdPropertiesDelete(NetworkEndpoint source, NetworkEndpoint dest);\n+    CompletableFuture<BfdPropertiesResponse> readBfdProperties(\n+            NetworkEndpoint source, NetworkEndpoint dest, String correlationId);\n+\n+    CompletableFuture<BfdPropertiesPayload> deleteBfdProperties(NetworkEndpoint source, NetworkEndpoint dest);\n \n     /**\n      * Update maximum bandwidth for link.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5MTM5NQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485691395", "bodyText": "Didn't get it. Why we need to discard this call?", "author": "rozdy", "createdAt": "2020-09-09T15:12:43Z", "path": "src-java/nbworker-topology/nbworker-storm-topology/src/main/java/org/openkilda/wfm/topology/nbworker/bolts/SwitchOperationsBolt.java", "diffHunk": "@@ -323,4 +324,9 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {\n         declarer.declareStream(StreamType.TO_SERVER42.toString(),\n                 new Fields(MessageEncoder.FIELD_ID_PAYLOAD, MessageEncoder.FIELD_ID_CONTEXT));\n     }\n+\n+    @Override\n+    public void islBfdPropertiesChanged(Endpoint source, Endpoint destination) {\n+        log.warn(\"Discard islBfdPropertiesChanged link carrier call\");", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwMjE0Mw==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492902143", "bodyText": "... this is the ugly design of nbworker.\nMethod islBfdPropertiesChanged is part of ILinkOperationsServiceCarrier, this interface are implemented by LinkOperationsBolt and SwitchOperationsBolt. LinkOperationsBolt can and must provide a correct implementation of this method, while SwitchOperationsBolt can't do it. I have added this warning to have visibility of the issue, when something will goest wrong.", "author": "surabujin", "createdAt": "2020-09-22T17:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5MTM5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NDc0MQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r485694741", "bodyText": "Do we still need this method?", "author": "rozdy", "createdAt": "2020-09-09T15:17:10Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java", "diffHunk": "@@ -486,11 +525,9 @@ private void fireBecomeStateEvent(IslFsmContext context) {\n         fire(route, context);\n     }\n \n-    private boolean shouldSetupBfd() {\n+    private boolean canSetupBfd() {\n         // TODO(surabujin): ensure the switch is BFD capable\n-\n-        return isPerIslBfdToggleEnabled(reference.getSource(), reference.getDest())\n-                || isPerIslBfdToggleEnabled(reference.getDest(), reference.getSource());\n+        return true;", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwMjg1OA==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492902858", "bodyText": "I would like to keep it and follow TODO placed there i.e. \"ensure the switch is BFD capable\".", "author": "surabujin", "createdAt": "2020-09-22T17:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NDc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffd106aa322710a3321c558d1877b780d80e1202", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java\nindex d6df17fcc..1a6668d72 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/controller/isl/IslFsm.java\n\n@@ -533,7 +531,6 @@ public final class IslFsm extends AbstractBaseFsm<IslFsm, IslFsmState, IslFsmEve\n     private Socket prepareSocket() {\n         Anchor source = loadSwitchCreateIfMissing(reference.getSource());\n         Anchor dest = loadSwitchCreateIfMissing(reference.getDest());\n-        switchRepository.lockSwitches(source.getSw(), dest.getSw());\n \n         return new Socket(source, dest);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwMzAzMQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r486403031", "bodyText": "Please, double-check that property is worked as expected on the current master.", "author": "nikitamarchenko", "createdAt": "2020-09-10T14:46:01Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java", "diffHunk": "@@ -116,9 +117,17 @@\n     @Property(name = \"under_maintenance\")\n     private boolean underMaintenance;\n \n+    // TODO(surabujin): drop after migration\n     @Property(name = \"enable_bfd\")\n     private boolean enableBfd;\n \n+    @Property(\"bfd_interval\")\n+    @Convert(graphPropertyType = Long.class)\n+    private Duration bfdInterval;\n+\n+    @Property(\"bfd_multiplier\")\n+    private short bfdMultiplier;\n+\n     @Property(name = \"bfd_session_status\")\n     @Convert(graphPropertyType = String.class)\n     private BfdSessionStatus bfdSessionStatus;", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwNDMwMQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492904301", "bodyText": "Is there any specific scenario that causes this comment to appear here? I will review BFD \"reportiong\" tools one more time.", "author": "surabujin", "createdAt": "2020-09-22T17:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwMzAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffd106aa322710a3321c558d1877b780d80e1202", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java\nindex 18ee27505..a1e23ba87 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java\n\n@@ -15,187 +15,304 @@\n \n package org.openkilda.model;\n \n-import lombok.AccessLevel;\n+import com.esotericsoftware.kryo.DefaultSerializer;\n+import com.esotericsoftware.kryo.serializers.BeanSerializer;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n-import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.NonNull;\n import lombok.Setter;\n-import org.neo4j.ogm.annotation.EndNode;\n-import org.neo4j.ogm.annotation.GeneratedValue;\n-import org.neo4j.ogm.annotation.Id;\n-import org.neo4j.ogm.annotation.Property;\n-import org.neo4j.ogm.annotation.RelationshipEntity;\n-import org.neo4j.ogm.annotation.StartNode;\n-import org.neo4j.ogm.annotation.Transient;\n-import org.neo4j.ogm.annotation.typeconversion.Convert;\n-import org.neo4j.ogm.typeconversion.InstantStringConverter;\n+import lombok.experimental.Delegate;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.MappingTarget;\n+import org.mapstruct.factory.Mappers;\n \n import java.io.Serializable;\n import java.time.Duration;\n import java.time.Instant;\n+import java.util.Objects;\n \n /**\n  * Represents an inter-switch link (ISL). This includes the source and destination, link status,\n  * maximum and available bandwidth.\n  */\n-@Data\n-@NoArgsConstructor\n-@EqualsAndHashCode(exclude = {\"entityId\"})\n-@RelationshipEntity(type = \"isl\")\n-public class Isl implements Serializable {\n-    private static final long serialVersionUID = 1L;\n+@DefaultSerializer(BeanSerializer.class)\n+public class Isl implements CompositeDataEntity<Isl.IslData> {\n+    @Setter\n+    @Getter\n+    private transient IslConfig islConfig;\n+\n+    @Getter\n+    @Setter\n+    @Delegate\n+    @JsonIgnore\n+    private IslData data;\n+\n+    /**\n+     * No args constructor for deserialization purpose.\n+     */\n+    private Isl() {\n+        data = new IslDataImpl();\n+    }\n+\n+    /**\n+     * Cloning constructor which performs deep copy of the entity.\n+     *\n+     * @param entityToClone the entity to copy entity data from.\n+     */\n+    public Isl(@NonNull Isl entityToClone) {\n+        data = IslCloner.INSTANCE.copy(entityToClone.getData());\n+    }\n+\n+    @Builder\n+    public Isl(@NonNull Switch srcSwitch, @NonNull Switch destSwitch, int srcPort, int destPort,\n+               long latency, long speed, int cost, long maxBandwidth, long defaultMaxBandwidth,\n+               long availableBandwidth, IslStatus status, IslStatus actualStatus, IslStatus roundTripStatus,\n+               IslDownReason downReason,\n+               boolean underMaintenance, Duration bfdInterval, short bfdMultiplier,\n+               BfdSessionStatus bfdSessionStatus, Instant timeUnstable) {\n+        data = IslDataImpl.builder().srcSwitch(srcSwitch).destSwitch(destSwitch).srcPort(srcPort).destPort(destPort)\n+                .latency(latency).speed(speed).cost(cost).maxBandwidth(maxBandwidth)\n+                .defaultMaxBandwidth(defaultMaxBandwidth).availableBandwidth(availableBandwidth)\n+                .status(status).actualStatus(actualStatus).roundTripStatus(roundTripStatus)\n+                .downReason(downReason)\n+                .underMaintenance(underMaintenance)\n+                .bfdInterval(bfdInterval).bfdMultiplier(bfdMultiplier).bfdSessionStatus(bfdSessionStatus)\n+                .timeUnstable(timeUnstable).build();\n+    }\n+\n+    public Isl(@NonNull IslData data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Return true if ISL is unstable and false otherwise.\n+     */\n+    public boolean isUnstable() {\n+        if (islConfig == null) {\n+            throw new IllegalStateException(\"IslConfig has not initialized.\");\n+        }\n \n-    // Hidden as needed for OGM only.\n-    @Id\n-    @GeneratedValue\n-    @Setter(AccessLevel.NONE)\n-    @Getter(AccessLevel.NONE)\n-    private Long entityId;\n+        return getTimeUnstable() != null\n+                && getTimeUnstable().plus(islConfig.getUnstableIslTimeout()).isAfter(Instant.now());\n+    }\n \n-    @NonNull\n-    @StartNode\n-    private Switch srcSwitch;\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        Isl that = (Isl) o;\n+        return new EqualsBuilder()\n+                .append(getSrcPort(), that.getSrcPort())\n+                .append(getDestPort(), that.getDestPort())\n+                .append(getLatency(), that.getLatency())\n+                .append(getSpeed(), that.getSpeed())\n+                .append(getCost(), that.getCost())\n+                .append(getMaxBandwidth(), that.getMaxBandwidth())\n+                .append(getDefaultMaxBandwidth(), that.getDefaultMaxBandwidth())\n+                .append(getAvailableBandwidth(), that.getAvailableBandwidth())\n+                .append(isUnderMaintenance(), that.isUnderMaintenance())\n+                .append(getSrcSwitchId(), that.getSrcSwitchId())\n+                .append(getDestSwitchId(), that.getDestSwitchId())\n+                .append(getStatus(), that.getStatus())\n+                .append(getActualStatus(), that.getActualStatus())\n+                .append(getRoundTripStatus(), that.getRoundTripStatus())\n+                .append(getDownReason(), that.getDownReason())\n+                .append(getTimeCreate(), that.getTimeCreate())\n+                .append(getTimeModify(), that.getTimeModify())\n+                .append(getBfdInterval(), that.getBfdInterval())\n+                .append(getBfdMultiplier(), that.getBfdInterval())\n+                .append(getBfdSessionStatus(), that.getBfdSessionStatus())\n+                .append(getTimeUnstable(), that.getTimeUnstable())\n+                .isEquals();\n+    }\n \n-    @NonNull\n-    @EndNode\n-    private Switch destSwitch;\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getSrcSwitchId(), getDestSwitchId(), getSrcPort(), getDestPort(), getLatency(),\n+                getSpeed(), getCost(), getMaxBandwidth(), getDefaultMaxBandwidth(), getAvailableBandwidth(),\n+                getStatus(), getActualStatus(), getRoundTripStatus(), getDownReason(),\n+                getTimeCreate(), getTimeModify(),\n+                isUnderMaintenance(), getBfdInterval(), getBfdMultiplier(), getBfdSessionStatus(), getTimeUnstable());\n+    }\n \n-    @Property(name = \"src_port\")\n-    private int srcPort;\n+    @Override\n+    public String toString() {\n+        return \"Isl{\"\n+                + \"srcSwitch=\" + getSrcSwitchId()\n+                + \", destSwitch=\" + data.getDestSwitchId()\n+                + \", srcPort=\" + getSrcPort()\n+                + \", destPort=\" + getDestPort()\n+                + \", cost=\" + getCost()\n+                + \", availableBandwidth=\" + getAvailableBandwidth()\n+                + \", status=\" + getStatus()\n+                + '}';\n+    }\n \n-    @Property(name = \"dst_port\")\n-    private int destPort;\n+    /**\n+     * Defines persistable data of the IslData.\n+     */\n+    public interface IslData {\n+        SwitchId getSrcSwitchId();\n \n-    private long latency;\n+        Switch getSrcSwitch();\n \n-    private long speed;\n+        void setSrcSwitch(Switch srcSwitch);\n \n-    private int cost;\n+        SwitchId getDestSwitchId();\n \n-    @Property(name = \"max_bandwidth\")\n-    private long maxBandwidth;\n+        Switch getDestSwitch();\n \n-    @Property(name = \"default_max_bandwidth\")\n-    private long defaultMaxBandwidth;\n+        void setDestSwitch(Switch destSwitch);\n \n-    @Property(name = \"available_bandwidth\")\n-    private long availableBandwidth;\n+        int getSrcPort();\n \n-    @NonNull\n-    @Property(name = \"status\")\n-    // Enforce usage of custom converters.\n-    @Convert(graphPropertyType = String.class)\n-    private IslStatus status;\n+        void setSrcPort(int srcPort);\n \n-    @NonNull\n-    @Property(name = \"actual\")\n-    // Enforce usage of custom converters.\n-    @Convert(graphPropertyType = String.class)\n-    private IslStatus actualStatus;\n+        int getDestPort();\n \n-    @Property(\"round_trip_status\")\n-    @Convert(graphPropertyType = String.class)\n-    private IslStatus roundTripStatus;\n+        void setDestPort(int destPort);\n \n-    @Property(name = \"down_reason\")\n-    @Convert(graphPropertyType = String.class)\n-    private IslDownReason downReason;\n+        long getLatency();\n \n-    @NonNull\n-    @Property(name = \"time_create\")\n-    @Convert(InstantStringConverter.class)\n-    private Instant timeCreate;\n+        void setLatency(long latency);\n \n-    @NonNull\n-    @Property(name = \"time_modify\")\n-    @Convert(InstantStringConverter.class)\n-    private Instant timeModify;\n+        long getSpeed();\n \n-    @Property(name = \"under_maintenance\")\n-    private boolean underMaintenance;\n+        void setSpeed(long speed);\n \n-    // TODO(surabujin): drop after migration\n-    @Property(name = \"enable_bfd\")\n-    private boolean enableBfd;\n+        int getCost();\n \n-    @Property(\"bfd_interval\")\n-    @Convert(graphPropertyType = Long.class)\n-    private Duration bfdInterval;\n+        void setCost(int cost);\n \n-    @Property(\"bfd_multiplier\")\n-    private short bfdMultiplier;\n+        long getMaxBandwidth();\n \n-    @Property(name = \"bfd_session_status\")\n-    @Convert(graphPropertyType = String.class)\n-    private BfdSessionStatus bfdSessionStatus;\n+        void setMaxBandwidth(long maxBandwidth);\n \n-    @Property(name = \"time_unstable\")\n-    @Convert(InstantStringConverter.class)\n-    private Instant timeUnstable;\n+        long getDefaultMaxBandwidth();\n \n-    @Transient\n-    private transient IslConfig islConfig;\n+        void setDefaultMaxBandwidth(long defaultMaxBandwidth);\n+\n+        long getAvailableBandwidth();\n+\n+        void setAvailableBandwidth(long availableBandwidth);\n+\n+        IslStatus getStatus();\n+\n+        void setStatus(IslStatus status);\n+\n+        IslStatus getActualStatus();\n+\n+        void setActualStatus(IslStatus actualStatus);\n+\n+        IslStatus getRoundTripStatus();\n+\n+        void setRoundTripStatus(IslStatus roundTripStatus);\n+\n+        IslDownReason getDownReason();\n+\n+        void setDownReason(IslDownReason downReason);\n+\n+        Instant getTimeCreate();\n+\n+        void setTimeCreate(Instant timeCreate);\n+\n+        Instant getTimeModify();\n+\n+        void setTimeModify(Instant timeModify);\n+\n+        boolean isUnderMaintenance();\n+\n+        void setUnderMaintenance(boolean underMaintenance);\n+\n+        Duration getBfdInterval();\n+\n+        void setBfdInterval(Duration interval);\n+\n+        short getBfdMultiplier();\n+\n+        void setBfdMultiplier(short multiplier);\n+\n+        BfdSessionStatus getBfdSessionStatus();\n+\n+        void setBfdSessionStatus(BfdSessionStatus bfdSessionStatus);\n+\n+        Instant getTimeUnstable();\n+\n+        void setTimeUnstable(Instant timeUnstable);\n+    }\n \n     /**\n-     * Constructor used by the builder only and needed to copy srcSwitch to srcSwitchId, destSwitch to destSwitchId.\n+     * POJO implementation of IslData.\n      */\n-    @Builder(toBuilder = true)\n-    public Isl(@NonNull Switch srcSwitch, @NonNull Switch destSwitch, int srcPort, int destPort,\n-               long latency, long speed, int cost, long maxBandwidth, long defaultMaxBandwidth, long availableBandwidth,\n-               IslStatus status, IslStatus actualStatus, IslStatus roundTripStatus,\n-               Instant timeCreate, Instant timeModify, boolean underMaintenance,\n-               Duration bfdInterval, short bfdMultiplier, BfdSessionStatus bfdSessionStatus, Instant timeUnstable) {\n-        this.srcSwitch = srcSwitch;\n-        this.destSwitch = destSwitch;\n-        this.srcPort = srcPort;\n-        this.destPort = destPort;\n-        this.latency = latency;\n-        this.speed = speed;\n-        this.cost = cost;\n-        this.maxBandwidth = maxBandwidth;\n-        this.defaultMaxBandwidth = defaultMaxBandwidth;\n-        this.availableBandwidth = availableBandwidth;\n-        this.status = status;\n-        this.actualStatus = actualStatus;\n-        this.roundTripStatus = roundTripStatus;\n-        this.timeCreate = timeCreate;\n-        this.timeModify = timeModify;\n-        this.underMaintenance = underMaintenance;\n-        this.bfdInterval = bfdInterval;\n-        this.bfdMultiplier = bfdMultiplier;\n-        this.bfdSessionStatus = bfdSessionStatus;\n-        this.timeUnstable = timeUnstable;\n-\n-        BfdProperties bfdProperties = BfdProperties.builder()\n-                .interval(bfdInterval).multiplier(bfdMultiplier)\n-                .build();\n-        enableBfd = bfdProperties.isEnabled();\n-    }\n+    @Data\n+    @Builder\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    static final class IslDataImpl implements IslData, Serializable {\n+        private static final long serialVersionUID = 1L;\n+        @NonNull Switch srcSwitch;\n+        @NonNull Switch destSwitch;\n+        int srcPort;\n+        int destPort;\n+        long latency;\n+        long speed;\n+        int cost;\n+        long maxBandwidth;\n+        long defaultMaxBandwidth;\n+        long availableBandwidth;\n+        IslStatus status;\n+        IslStatus actualStatus;\n+        IslStatus roundTripStatus;\n+        IslDownReason downReason;\n+        Instant timeCreate;\n+        Instant timeModify;\n+        boolean underMaintenance;\n+        Duration bfdInterval;\n+        short bfdMultiplier;\n+        BfdSessionStatus bfdSessionStatus;\n+        Instant timeUnstable;\n+\n+        @Override\n+        public SwitchId getSrcSwitchId() {\n+            return srcSwitch.getSwitchId();\n+        }\n \n-    @Override\n-    public String toString() {\n-        return \"Isl{\"\n-                + \"srcSwitch=\" + srcSwitch.getSwitchId()\n-                + \", destSwitch=\" + destSwitch.getSwitchId()\n-                + \", srcPort=\" + srcPort\n-                + \", destPort=\" + destPort\n-                + \", cost=\" + cost\n-                + \", availableBandwidth=\" + availableBandwidth\n-                + \", status=\" + status\n-                + '}';\n+        @Override\n+        public SwitchId getDestSwitchId() {\n+            return destSwitch.getSwitchId();\n+        }\n     }\n \n     /**\n-     * Return true if ISL is unstable and false otherwise.\n+     * A cloner for Isl entity.\n      */\n-    public boolean isUnstable() {\n-        if (islConfig == null) {\n-            throw new IllegalStateException(\"IslConfig has not initialized.\");\n+    @Mapper\n+    public interface IslCloner {\n+        IslCloner INSTANCE = Mappers.getMapper(IslCloner.class);\n+\n+        @Mapping(target = \"srcSwitch\", ignore = true)\n+        @Mapping(target = \"destSwitch\", ignore = true)\n+        void copyWithoutSwitches(IslData source, @MappingTarget IslData target);\n+\n+        /**\n+         * Performs deep copy of entity data.\n+         */\n+        default IslData copy(IslData source) {\n+            IslData result = new IslDataImpl();\n+            copyWithoutSwitches(source, result);\n+            result.setSrcSwitch(new Switch(source.getSrcSwitch()));\n+            result.setDestSwitch(new Switch(source.getDestSwitch()));\n+            return result;\n         }\n-\n-        return timeUnstable != null && timeUnstable.plus(islConfig.getUnstableIslTimeout()).isAfter(Instant.now());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMTMzNg==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r486411336", "bodyText": "Why did you use literals?", "author": "nikitamarchenko", "createdAt": "2020-09-10T14:56:45Z", "path": "src-java/network-topology/network-storm-topology/src/test/java/org/openkilda/wfm/topology/network/controller/bfd/AbstractBfdActionTest.java", "diffHunk": "@@ -45,8 +45,8 @@\n             .logicalPortNumber(alphaLogicalEndpoint.getPortNumber())\n             .udpPortNumber(BfdPortFsm.BFD_UDP_PORT)\n             .discriminator(1001)\n-            .intervalMs(BfdPortFsm.bfdPollInterval)\n-            .multiplier(BfdPortFsm.bfdFailCycleLimit)\n+            .intervalMs(350)", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwNzk0Mw==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492907943", "bodyText": "Because there are no(since this commit) corresponding constants that keep default values for these fields and because this is the test object.", "author": "surabujin", "createdAt": "2020-09-22T17:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMTMzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0MDg0OQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r486440849", "bodyText": "Not sure about that format.", "author": "nikitamarchenko", "createdAt": "2020-09-10T15:36:28Z", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v2/LinkControllerV2.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.northbound.controller.v2;\n+\n+import org.openkilda.messaging.model.NetworkEndpoint;\n+import org.openkilda.model.SwitchId;\n+import org.openkilda.northbound.controller.BaseLinkController;\n+import org.openkilda.northbound.dto.v2.links.BfdProperties;\n+import org.openkilda.northbound.dto.v2.links.BfdPropertiesPayload;\n+import org.openkilda.northbound.service.LinkService;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Stream;\n+\n+@RestController\n+@RequestMapping(\"/v2/links\")\n+public class LinkControllerV2 extends BaseLinkController {\n+    private static final int BFD_INTERVAL_MIN = 100;\n+    private static final short BFD_MULTIPLIER_MIN = 1;\n+\n+    private final LinkService linkService;\n+\n+    public LinkControllerV2(LinkService linkService) {\n+        this.linkService = linkService;\n+    }\n+\n+    /**\n+     * Write/update/enable BFD properties for specific ISL.\n+     */\n+    @ApiOperation(value = \"Set/update BFD properties\", response = BfdPropertiesPayload.class)\n+    @PutMapping(value = \"/{src-switch}_{src-port}/{dst-switch}_{dst-port}/bfd\")", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwOTAzMg==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492909032", "bodyText": "I am open to propositions. .../src switch/src port/dst switch/dst_port/... is worse as for me.", "author": "surabujin", "createdAt": "2020-09-22T17:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0MDg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v2/LinkControllerV2.java b/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v2/LinkControllerV2.java\nindex 7f5c16cc7..0fc035149 100644\n--- a/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v2/LinkControllerV2.java\n+++ b/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/controller/v2/LinkControllerV2.java\n\n@@ -65,7 +65,7 @@ public class LinkControllerV2 extends BaseLinkController {\n         verifyRequest(payload);\n         NetworkEndpoint source = makeSourceEndpoint(srcSwitchId, srcPortNumber);\n         NetworkEndpoint dest = makeDestinationEndpoint(dstSwitchId, dstPortNumber);\n-        return linkService.bfdPropertiesWrite(source, dest, verifyRequest(payload).getProperties());\n+        return linkService.writeBfdProperties(source, dest, verifyRequest(payload).getProperties());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMjQ1Mg==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r489302452", "bodyText": "as for me, it is a little bit unusual that the ed ending is missing (ed -> disabled). we almost everywhere(except roundTrip) use the ed ending (i.e. failed, activated, discovered)", "author": "andriidovhan", "createdAt": "2020-09-16T09:36:51Z", "path": "src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/LinkServiceImpl.java", "diffHunk": "@@ -324,32 +346,87 @@ private BatchResults getLinkPropsResult(List<LinkPropsResponse> responses, List<\n         return messagingChannel.sendAndGetChunked(nbworkerTopic, message)\n                 .thenApply(response -> response.stream()\n                         .map(IslInfoData.class::cast)\n-                        .map(linkMapper::toLinkDto)\n+                        .map(linkMapper::responseMap)\n                         .collect(Collectors.toList()));\n     }\n \n     @Override\n-    public CompletableFuture<List<LinkDto>> updateLinkEnableBfd(LinkEnableBfdDto link) {\n+    public CompletableFuture<List<LinkDto>> bfdPropertiesWrite(\n+            NetworkEndpoint source, NetworkEndpoint dest, boolean isEnabled) {\n+        BfdProperties properties;\n+        if (isEnabled) {\n+            properties = bfdPropertiesDefault;\n+        } else {\n+            properties = BfdProperties.DISABLE;", "originalCommit": "2c662bd120dc6cda374384efa70492539bd4e7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwOTIzMQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r492909231", "bodyText": "renamed", "author": "surabujin", "createdAt": "2020-09-22T17:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMjQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "510d3f58051caf4fc526f4e860da79d72526671f", "chunk": "diff --git a/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/LinkServiceImpl.java b/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/LinkServiceImpl.java\nindex 3be210083..0aacbcc85 100644\n--- a/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/LinkServiceImpl.java\n+++ b/src-java/northbound-service/northbound/src/main/java/org/openkilda/northbound/service/impl/LinkServiceImpl.java\n\n@@ -346,56 +346,73 @@ public class LinkServiceImpl implements LinkService {\n         return messagingChannel.sendAndGetChunked(nbworkerTopic, message)\n                 .thenApply(response -> response.stream()\n                         .map(IslInfoData.class::cast)\n-                        .map(linkMapper::responseMap)\n+                        .map(linkMapper::mapResponse)\n                         .collect(Collectors.toList()));\n     }\n \n     @Override\n-    public CompletableFuture<List<LinkDto>> bfdPropertiesWrite(\n+    public CompletableFuture<List<LinkDto>> writeBfdProperties(\n             NetworkEndpoint source, NetworkEndpoint dest, boolean isEnabled) {\n         BfdProperties properties;\n         if (isEnabled) {\n             properties = bfdPropertiesDefault;\n         } else {\n-            properties = BfdProperties.DISABLE;\n+            properties = BfdProperties.DISABLED;\n         }\n \n-        return bfdPropertiesCommonWrite(source, dest, properties)\n-                .thenApply(response -> Collections.singletonList(linkMapper.responseMap(response.getLinkData())));\n+        return actualWriteBfdProperties(source, dest, properties)\n+                .thenApply(response -> Collections.singletonList(linkMapper.mapResponse(response.getLinkData())));\n     }\n \n     @Override\n-    public CompletableFuture<BfdPropertiesPayload> bfdPropertiesWrite(\n+    public CompletableFuture<BfdPropertiesPayload> writeBfdProperties(\n             NetworkEndpoint source, NetworkEndpoint dest, BfdProperties properties) {\n         if (properties == null) {\n             properties = bfdPropertiesDefault;\n         }\n-        return bfdPropertiesCommonWrite(source, dest, properties)\n-                .thenApply(linkMapper::responseMap);\n+        return actualWriteBfdProperties(source, dest, properties)\n+                .thenApply(linkMapper::mapResponse);\n     }\n \n     @Override\n-    public CompletableFuture<BfdPropertiesPayload> bfdPropertiesRead(NetworkEndpoint source, NetworkEndpoint dest) {\n+    public CompletableFuture<BfdPropertiesPayload> readBfdProperties(NetworkEndpoint source, NetworkEndpoint dest) {\n         logger.debug(\"Handling link {} ==> {} BFD properties read request\", source, dest);\n-        BfdPropertiesReadRequest request = linkMapper.bfdRequestMap(source, dest);\n-        return messagingChannel.sendAndGetChunked(nbworkerTopic, makeMessage(request))\n-                .thenApply(response -> unpackBfdPropertiesResponse(response, request, RequestCorrelationId.getId()))\n-                .thenApply(linkMapper::responseMap);\n+        return readBfdProperties(source, dest, RequestCorrelationId.getId()).thenApply(linkMapper::mapResponse);\n+    }\n+\n+    @Override\n+    public CompletableFuture<BfdPropertiesResponse> readBfdProperties(\n+            NetworkEndpoint source, NetworkEndpoint dest, String correlationId) {\n+        BfdPropertiesReadRequest request = linkMapper.mapBfdRequest(source, dest);\n+        return messagingChannel.sendAndGetChunked(nbworkerTopic, makeMessage(request, correlationId))\n+                .thenApply(response -> unpackBfdPropertiesResponse(response, request, RequestCorrelationId.getId()));\n     }\n \n     @Override\n-    public CompletableFuture<Void> bfdPropertiesDelete(NetworkEndpoint source, NetworkEndpoint dest) {\n+    public CompletableFuture<BfdPropertiesPayload> deleteBfdProperties(NetworkEndpoint source, NetworkEndpoint dest) {\n         logger.debug(\"Handling link {} ==> {} BFD properties delete request (write wrapper)\", source, dest);\n-        return CompletableFuture.allOf(bfdPropertiesCommonWrite(source, dest, BfdProperties.DISABLE));\n+        return writeBfdProperties(source, dest, BfdProperties.DISABLED);\n     }\n \n-    private CompletableFuture<BfdPropertiesResponse> bfdPropertiesCommonWrite(\n+    private CompletableFuture<BfdPropertiesResponse> actualWriteBfdProperties(\n             NetworkEndpoint source, NetworkEndpoint dest, BfdProperties properties) {\n         logger.debug(\"Handling link {} ==> {} BFD properties write request with payload {}\", source, dest, properties);\n-        BfdPropertiesWriteRequest request = linkMapper.bfdRequestMap(source, dest, properties);\n+\n+        BfdPropertiesWriteRequest request = linkMapper.mapBfdRequest(source, dest, properties);\n         CommandMessage message = makeMessage(request);\n+\n+        final String correlationId = RequestCorrelationId.getId();\n+        BfdPropertiesMonitor monitor = new BfdPropertiesMonitor(\n+                this, taskScheduler, request.getProperties(), correlationId, bfdPropertiesApplyPeriod, clock);\n         return messagingChannel.sendAndGetChunked(nbworkerTopic, message)\n-                .thenApply(response -> unpackBfdPropertiesResponse(response, request, RequestCorrelationId.getId()));\n+                .thenApply(response -> unpackBfdPropertiesResponse(response, request, correlationId))\n+                .thenCompose(monitor::consume)\n+                .handle((response, error) -> {\n+                    if (error != null) {\n+                        handleException(error);\n+                    }\n+                    return response;\n+                });\n     }\n \n     private BfdPropertiesResponse unpackBfdPropertiesResponse(\n"}}, {"oid": "510d3f58051caf4fc526f4e860da79d72526671f", "url": "https://github.com/telstra/open-kilda/commit/510d3f58051caf4fc526f4e860da79d72526671f", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-09-22T17:25:40Z", "type": "forcePushed"}, {"oid": "47d682c83300b9e25cf9448bfd7f83c804ad1011", "url": "https://github.com/telstra/open-kilda/commit/47d682c83300b9e25cf9448bfd7f83c804ad1011", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-09-23T07:32:54Z", "type": "forcePushed"}, {"oid": "a0a23e4acdb4d23f76fff2f18d5263abe10a7c5e", "url": "https://github.com/telstra/open-kilda/commit/a0a23e4acdb4d23f76fff2f18d5263abe10a7c5e", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-09-24T17:17:33Z", "type": "forcePushed"}, {"oid": "23c5093f9c204bd8e7762655af1e5127db552cc4", "url": "https://github.com/telstra/open-kilda/commit/23c5093f9c204bd8e7762655af1e5127db552cc4", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-09-24T21:51:19Z", "type": "forcePushed"}, {"oid": "582fa87d03afea66dc2a944a365a0b58afa78214", "url": "https://github.com/telstra/open-kilda/commit/582fa87d03afea66dc2a944a365a0b58afa78214", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-09-26T09:50:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NDYzMg==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r496454632", "bodyText": "I wouldn't use Duration here, it force to create new db converter(converters in our case not the most reliable thing ever),\nmappers, etc. While the actual usage of it as duration is made in single place only", "author": "timofei-durakov", "createdAt": "2020-09-29T06:47:29Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/BfdProperties.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+import java.time.Duration;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+public class BfdProperties {\n+    @JsonProperty(\"interval\")\n+    protected final Duration interval;", "originalCommit": "582fa87d03afea66dc2a944a365a0b58afa78214", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2ODIxMg==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r496468212", "bodyText": "This is the easiest and simple way to store time duration in an unambiguous way.\nRegarding issues with converters - first point - we are going to move out neo4j soon enough, the second we do not have a clear vision where the issue and is there any relation to the number of converters. So I don't see the reason to not use proper/handy data types in our model.\nRegarding mappers - all other codebase uses Duration for this field, so if we use a different type here we must use mappers too.", "author": "surabujin", "createdAt": "2020-09-29T07:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NDYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "ffd106aa322710a3321c558d1877b780d80e1202", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/BfdProperties.java b/src-java/kilda-model/src/main/java/org/openkilda/model/BfdProperties.java\nindex 918f99d93..b8edbba73 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/BfdProperties.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/BfdProperties.java\n\n@@ -43,13 +43,17 @@ public class BfdProperties {\n     }\n \n     @Builder\n-    public BfdProperties(Duration interval, short multiplier) {\n+    public BfdProperties(Duration interval, Short multiplier) {\n         this.interval = interval;\n-        this.multiplier = multiplier;\n+        this.multiplier = normalizeMultiplier(multiplier);\n     }\n \n     @JsonIgnore\n     public boolean isEnabled() {\n         return 0 < multiplier && interval != null && ! interval.isZero();\n     }\n+\n+    public static short normalizeMultiplier(Short multiplier) {\n+        return multiplier != null ? multiplier : 0;\n+    }\n }\n"}}, {"oid": "1aad686c977a796ff687e5b158fa55b0eef21167", "url": "https://github.com/telstra/open-kilda/commit/1aad686c977a796ff687e5b158fa55b0eef21167", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-09-29T07:26:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzNTAzNQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r498635035", "bodyText": "should we add new fields into toString() method? or just remove toString() to generate it by @Data?", "author": "niksv", "createdAt": "2020-10-02T06:23:50Z", "path": "src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java", "diffHunk": "@@ -116,9 +117,17 @@\n     @Property(name = \"under_maintenance\")\n     private boolean underMaintenance;\n \n+    // TODO(surabujin): drop after migration\n     @Property(name = \"enable_bfd\")\n     private boolean enableBfd;\n \n+    @Property(\"bfd_interval\")\n+    @Convert(graphPropertyType = Long.class)\n+    private Duration bfdInterval;\n+\n+    @Property(\"bfd_multiplier\")\n+    private short bfdMultiplier;", "originalCommit": "1aad686c977a796ff687e5b158fa55b0eef21167", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4ODM1OQ==", "url": "https://github.com/telstra/open-kilda/pull/3712#discussion_r498688359", "bodyText": "Can't say for sure.\nLooks like .toString() include a brief and only most important view of Isl object. Added fields do not part of the most important fields of Isl object, from my point of view. I would like not to include them in the .toString() view now.", "author": "surabujin", "createdAt": "2020-10-02T08:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzNTAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffd106aa322710a3321c558d1877b780d80e1202", "chunk": "diff --git a/src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java b/src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java\nindex 18ee27505..a1e23ba87 100644\n--- a/src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java\n+++ b/src-java/kilda-model/src/main/java/org/openkilda/model/Isl.java\n\n@@ -15,187 +15,304 @@\n \n package org.openkilda.model;\n \n-import lombok.AccessLevel;\n+import com.esotericsoftware.kryo.DefaultSerializer;\n+import com.esotericsoftware.kryo.serializers.BeanSerializer;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n-import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.NonNull;\n import lombok.Setter;\n-import org.neo4j.ogm.annotation.EndNode;\n-import org.neo4j.ogm.annotation.GeneratedValue;\n-import org.neo4j.ogm.annotation.Id;\n-import org.neo4j.ogm.annotation.Property;\n-import org.neo4j.ogm.annotation.RelationshipEntity;\n-import org.neo4j.ogm.annotation.StartNode;\n-import org.neo4j.ogm.annotation.Transient;\n-import org.neo4j.ogm.annotation.typeconversion.Convert;\n-import org.neo4j.ogm.typeconversion.InstantStringConverter;\n+import lombok.experimental.Delegate;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.MappingTarget;\n+import org.mapstruct.factory.Mappers;\n \n import java.io.Serializable;\n import java.time.Duration;\n import java.time.Instant;\n+import java.util.Objects;\n \n /**\n  * Represents an inter-switch link (ISL). This includes the source and destination, link status,\n  * maximum and available bandwidth.\n  */\n-@Data\n-@NoArgsConstructor\n-@EqualsAndHashCode(exclude = {\"entityId\"})\n-@RelationshipEntity(type = \"isl\")\n-public class Isl implements Serializable {\n-    private static final long serialVersionUID = 1L;\n+@DefaultSerializer(BeanSerializer.class)\n+public class Isl implements CompositeDataEntity<Isl.IslData> {\n+    @Setter\n+    @Getter\n+    private transient IslConfig islConfig;\n+\n+    @Getter\n+    @Setter\n+    @Delegate\n+    @JsonIgnore\n+    private IslData data;\n+\n+    /**\n+     * No args constructor for deserialization purpose.\n+     */\n+    private Isl() {\n+        data = new IslDataImpl();\n+    }\n+\n+    /**\n+     * Cloning constructor which performs deep copy of the entity.\n+     *\n+     * @param entityToClone the entity to copy entity data from.\n+     */\n+    public Isl(@NonNull Isl entityToClone) {\n+        data = IslCloner.INSTANCE.copy(entityToClone.getData());\n+    }\n+\n+    @Builder\n+    public Isl(@NonNull Switch srcSwitch, @NonNull Switch destSwitch, int srcPort, int destPort,\n+               long latency, long speed, int cost, long maxBandwidth, long defaultMaxBandwidth,\n+               long availableBandwidth, IslStatus status, IslStatus actualStatus, IslStatus roundTripStatus,\n+               IslDownReason downReason,\n+               boolean underMaintenance, Duration bfdInterval, short bfdMultiplier,\n+               BfdSessionStatus bfdSessionStatus, Instant timeUnstable) {\n+        data = IslDataImpl.builder().srcSwitch(srcSwitch).destSwitch(destSwitch).srcPort(srcPort).destPort(destPort)\n+                .latency(latency).speed(speed).cost(cost).maxBandwidth(maxBandwidth)\n+                .defaultMaxBandwidth(defaultMaxBandwidth).availableBandwidth(availableBandwidth)\n+                .status(status).actualStatus(actualStatus).roundTripStatus(roundTripStatus)\n+                .downReason(downReason)\n+                .underMaintenance(underMaintenance)\n+                .bfdInterval(bfdInterval).bfdMultiplier(bfdMultiplier).bfdSessionStatus(bfdSessionStatus)\n+                .timeUnstable(timeUnstable).build();\n+    }\n+\n+    public Isl(@NonNull IslData data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Return true if ISL is unstable and false otherwise.\n+     */\n+    public boolean isUnstable() {\n+        if (islConfig == null) {\n+            throw new IllegalStateException(\"IslConfig has not initialized.\");\n+        }\n \n-    // Hidden as needed for OGM only.\n-    @Id\n-    @GeneratedValue\n-    @Setter(AccessLevel.NONE)\n-    @Getter(AccessLevel.NONE)\n-    private Long entityId;\n+        return getTimeUnstable() != null\n+                && getTimeUnstable().plus(islConfig.getUnstableIslTimeout()).isAfter(Instant.now());\n+    }\n \n-    @NonNull\n-    @StartNode\n-    private Switch srcSwitch;\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        Isl that = (Isl) o;\n+        return new EqualsBuilder()\n+                .append(getSrcPort(), that.getSrcPort())\n+                .append(getDestPort(), that.getDestPort())\n+                .append(getLatency(), that.getLatency())\n+                .append(getSpeed(), that.getSpeed())\n+                .append(getCost(), that.getCost())\n+                .append(getMaxBandwidth(), that.getMaxBandwidth())\n+                .append(getDefaultMaxBandwidth(), that.getDefaultMaxBandwidth())\n+                .append(getAvailableBandwidth(), that.getAvailableBandwidth())\n+                .append(isUnderMaintenance(), that.isUnderMaintenance())\n+                .append(getSrcSwitchId(), that.getSrcSwitchId())\n+                .append(getDestSwitchId(), that.getDestSwitchId())\n+                .append(getStatus(), that.getStatus())\n+                .append(getActualStatus(), that.getActualStatus())\n+                .append(getRoundTripStatus(), that.getRoundTripStatus())\n+                .append(getDownReason(), that.getDownReason())\n+                .append(getTimeCreate(), that.getTimeCreate())\n+                .append(getTimeModify(), that.getTimeModify())\n+                .append(getBfdInterval(), that.getBfdInterval())\n+                .append(getBfdMultiplier(), that.getBfdInterval())\n+                .append(getBfdSessionStatus(), that.getBfdSessionStatus())\n+                .append(getTimeUnstable(), that.getTimeUnstable())\n+                .isEquals();\n+    }\n \n-    @NonNull\n-    @EndNode\n-    private Switch destSwitch;\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getSrcSwitchId(), getDestSwitchId(), getSrcPort(), getDestPort(), getLatency(),\n+                getSpeed(), getCost(), getMaxBandwidth(), getDefaultMaxBandwidth(), getAvailableBandwidth(),\n+                getStatus(), getActualStatus(), getRoundTripStatus(), getDownReason(),\n+                getTimeCreate(), getTimeModify(),\n+                isUnderMaintenance(), getBfdInterval(), getBfdMultiplier(), getBfdSessionStatus(), getTimeUnstable());\n+    }\n \n-    @Property(name = \"src_port\")\n-    private int srcPort;\n+    @Override\n+    public String toString() {\n+        return \"Isl{\"\n+                + \"srcSwitch=\" + getSrcSwitchId()\n+                + \", destSwitch=\" + data.getDestSwitchId()\n+                + \", srcPort=\" + getSrcPort()\n+                + \", destPort=\" + getDestPort()\n+                + \", cost=\" + getCost()\n+                + \", availableBandwidth=\" + getAvailableBandwidth()\n+                + \", status=\" + getStatus()\n+                + '}';\n+    }\n \n-    @Property(name = \"dst_port\")\n-    private int destPort;\n+    /**\n+     * Defines persistable data of the IslData.\n+     */\n+    public interface IslData {\n+        SwitchId getSrcSwitchId();\n \n-    private long latency;\n+        Switch getSrcSwitch();\n \n-    private long speed;\n+        void setSrcSwitch(Switch srcSwitch);\n \n-    private int cost;\n+        SwitchId getDestSwitchId();\n \n-    @Property(name = \"max_bandwidth\")\n-    private long maxBandwidth;\n+        Switch getDestSwitch();\n \n-    @Property(name = \"default_max_bandwidth\")\n-    private long defaultMaxBandwidth;\n+        void setDestSwitch(Switch destSwitch);\n \n-    @Property(name = \"available_bandwidth\")\n-    private long availableBandwidth;\n+        int getSrcPort();\n \n-    @NonNull\n-    @Property(name = \"status\")\n-    // Enforce usage of custom converters.\n-    @Convert(graphPropertyType = String.class)\n-    private IslStatus status;\n+        void setSrcPort(int srcPort);\n \n-    @NonNull\n-    @Property(name = \"actual\")\n-    // Enforce usage of custom converters.\n-    @Convert(graphPropertyType = String.class)\n-    private IslStatus actualStatus;\n+        int getDestPort();\n \n-    @Property(\"round_trip_status\")\n-    @Convert(graphPropertyType = String.class)\n-    private IslStatus roundTripStatus;\n+        void setDestPort(int destPort);\n \n-    @Property(name = \"down_reason\")\n-    @Convert(graphPropertyType = String.class)\n-    private IslDownReason downReason;\n+        long getLatency();\n \n-    @NonNull\n-    @Property(name = \"time_create\")\n-    @Convert(InstantStringConverter.class)\n-    private Instant timeCreate;\n+        void setLatency(long latency);\n \n-    @NonNull\n-    @Property(name = \"time_modify\")\n-    @Convert(InstantStringConverter.class)\n-    private Instant timeModify;\n+        long getSpeed();\n \n-    @Property(name = \"under_maintenance\")\n-    private boolean underMaintenance;\n+        void setSpeed(long speed);\n \n-    // TODO(surabujin): drop after migration\n-    @Property(name = \"enable_bfd\")\n-    private boolean enableBfd;\n+        int getCost();\n \n-    @Property(\"bfd_interval\")\n-    @Convert(graphPropertyType = Long.class)\n-    private Duration bfdInterval;\n+        void setCost(int cost);\n \n-    @Property(\"bfd_multiplier\")\n-    private short bfdMultiplier;\n+        long getMaxBandwidth();\n \n-    @Property(name = \"bfd_session_status\")\n-    @Convert(graphPropertyType = String.class)\n-    private BfdSessionStatus bfdSessionStatus;\n+        void setMaxBandwidth(long maxBandwidth);\n \n-    @Property(name = \"time_unstable\")\n-    @Convert(InstantStringConverter.class)\n-    private Instant timeUnstable;\n+        long getDefaultMaxBandwidth();\n \n-    @Transient\n-    private transient IslConfig islConfig;\n+        void setDefaultMaxBandwidth(long defaultMaxBandwidth);\n+\n+        long getAvailableBandwidth();\n+\n+        void setAvailableBandwidth(long availableBandwidth);\n+\n+        IslStatus getStatus();\n+\n+        void setStatus(IslStatus status);\n+\n+        IslStatus getActualStatus();\n+\n+        void setActualStatus(IslStatus actualStatus);\n+\n+        IslStatus getRoundTripStatus();\n+\n+        void setRoundTripStatus(IslStatus roundTripStatus);\n+\n+        IslDownReason getDownReason();\n+\n+        void setDownReason(IslDownReason downReason);\n+\n+        Instant getTimeCreate();\n+\n+        void setTimeCreate(Instant timeCreate);\n+\n+        Instant getTimeModify();\n+\n+        void setTimeModify(Instant timeModify);\n+\n+        boolean isUnderMaintenance();\n+\n+        void setUnderMaintenance(boolean underMaintenance);\n+\n+        Duration getBfdInterval();\n+\n+        void setBfdInterval(Duration interval);\n+\n+        short getBfdMultiplier();\n+\n+        void setBfdMultiplier(short multiplier);\n+\n+        BfdSessionStatus getBfdSessionStatus();\n+\n+        void setBfdSessionStatus(BfdSessionStatus bfdSessionStatus);\n+\n+        Instant getTimeUnstable();\n+\n+        void setTimeUnstable(Instant timeUnstable);\n+    }\n \n     /**\n-     * Constructor used by the builder only and needed to copy srcSwitch to srcSwitchId, destSwitch to destSwitchId.\n+     * POJO implementation of IslData.\n      */\n-    @Builder(toBuilder = true)\n-    public Isl(@NonNull Switch srcSwitch, @NonNull Switch destSwitch, int srcPort, int destPort,\n-               long latency, long speed, int cost, long maxBandwidth, long defaultMaxBandwidth, long availableBandwidth,\n-               IslStatus status, IslStatus actualStatus, IslStatus roundTripStatus,\n-               Instant timeCreate, Instant timeModify, boolean underMaintenance,\n-               Duration bfdInterval, short bfdMultiplier, BfdSessionStatus bfdSessionStatus, Instant timeUnstable) {\n-        this.srcSwitch = srcSwitch;\n-        this.destSwitch = destSwitch;\n-        this.srcPort = srcPort;\n-        this.destPort = destPort;\n-        this.latency = latency;\n-        this.speed = speed;\n-        this.cost = cost;\n-        this.maxBandwidth = maxBandwidth;\n-        this.defaultMaxBandwidth = defaultMaxBandwidth;\n-        this.availableBandwidth = availableBandwidth;\n-        this.status = status;\n-        this.actualStatus = actualStatus;\n-        this.roundTripStatus = roundTripStatus;\n-        this.timeCreate = timeCreate;\n-        this.timeModify = timeModify;\n-        this.underMaintenance = underMaintenance;\n-        this.bfdInterval = bfdInterval;\n-        this.bfdMultiplier = bfdMultiplier;\n-        this.bfdSessionStatus = bfdSessionStatus;\n-        this.timeUnstable = timeUnstable;\n-\n-        BfdProperties bfdProperties = BfdProperties.builder()\n-                .interval(bfdInterval).multiplier(bfdMultiplier)\n-                .build();\n-        enableBfd = bfdProperties.isEnabled();\n-    }\n+    @Data\n+    @Builder\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    static final class IslDataImpl implements IslData, Serializable {\n+        private static final long serialVersionUID = 1L;\n+        @NonNull Switch srcSwitch;\n+        @NonNull Switch destSwitch;\n+        int srcPort;\n+        int destPort;\n+        long latency;\n+        long speed;\n+        int cost;\n+        long maxBandwidth;\n+        long defaultMaxBandwidth;\n+        long availableBandwidth;\n+        IslStatus status;\n+        IslStatus actualStatus;\n+        IslStatus roundTripStatus;\n+        IslDownReason downReason;\n+        Instant timeCreate;\n+        Instant timeModify;\n+        boolean underMaintenance;\n+        Duration bfdInterval;\n+        short bfdMultiplier;\n+        BfdSessionStatus bfdSessionStatus;\n+        Instant timeUnstable;\n+\n+        @Override\n+        public SwitchId getSrcSwitchId() {\n+            return srcSwitch.getSwitchId();\n+        }\n \n-    @Override\n-    public String toString() {\n-        return \"Isl{\"\n-                + \"srcSwitch=\" + srcSwitch.getSwitchId()\n-                + \", destSwitch=\" + destSwitch.getSwitchId()\n-                + \", srcPort=\" + srcPort\n-                + \", destPort=\" + destPort\n-                + \", cost=\" + cost\n-                + \", availableBandwidth=\" + availableBandwidth\n-                + \", status=\" + status\n-                + '}';\n+        @Override\n+        public SwitchId getDestSwitchId() {\n+            return destSwitch.getSwitchId();\n+        }\n     }\n \n     /**\n-     * Return true if ISL is unstable and false otherwise.\n+     * A cloner for Isl entity.\n      */\n-    public boolean isUnstable() {\n-        if (islConfig == null) {\n-            throw new IllegalStateException(\"IslConfig has not initialized.\");\n+    @Mapper\n+    public interface IslCloner {\n+        IslCloner INSTANCE = Mappers.getMapper(IslCloner.class);\n+\n+        @Mapping(target = \"srcSwitch\", ignore = true)\n+        @Mapping(target = \"destSwitch\", ignore = true)\n+        void copyWithoutSwitches(IslData source, @MappingTarget IslData target);\n+\n+        /**\n+         * Performs deep copy of entity data.\n+         */\n+        default IslData copy(IslData source) {\n+            IslData result = new IslDataImpl();\n+            copyWithoutSwitches(source, result);\n+            result.setSrcSwitch(new Switch(source.getSrcSwitch()));\n+            result.setDestSwitch(new Switch(source.getDestSwitch()));\n+            return result;\n         }\n-\n-        return timeUnstable != null && timeUnstable.plus(islConfig.getUnstableIslTimeout()).isAfter(Instant.now());\n     }\n }\n"}}, {"oid": "ffd106aa322710a3321c558d1877b780d80e1202", "url": "https://github.com/telstra/open-kilda/commit/ffd106aa322710a3321c558d1877b780d80e1202", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-07T16:46:33Z", "type": "forcePushed"}, {"oid": "ded8f80cd5e7e4ca48f8b1e59440f93949bec52e", "url": "https://github.com/telstra/open-kilda/commit/ded8f80cd5e7e4ca48f8b1e59440f93949bec52e", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-12T16:24:28Z", "type": "forcePushed"}, {"oid": "9e591760693d1c9ff818bf7682e1f6f0e77cc152", "url": "https://github.com/telstra/open-kilda/commit/9e591760693d1c9ff818bf7682e1f6f0e77cc152", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-12T19:40:11Z", "type": "forcePushed"}, {"oid": "81533e45b6dbc1c19f5cc2aca7498cb30bc78160", "url": "https://github.com/telstra/open-kilda/commit/81533e45b6dbc1c19f5cc2aca7498cb30bc78160", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-15T15:16:13Z", "type": "forcePushed"}, {"oid": "45255671e10ce4b9dd27eaefac368c7d96d42dc0", "url": "https://github.com/telstra/open-kilda/commit/45255671e10ce4b9dd27eaefac368c7d96d42dc0", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-15T15:20:23Z", "type": "forcePushed"}, {"oid": "5bf7232967b6b5ecbf4c5d2a323ee5c99138e96c", "url": "https://github.com/telstra/open-kilda/commit/5bf7232967b6b5ecbf4c5d2a323ee5c99138e96c", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-15T18:47:39Z", "type": "forcePushed"}, {"oid": "9bee18a17470a1c6b3bcc4c18c91361fbe5a0bec", "url": "https://github.com/telstra/open-kilda/commit/9bee18a17470a1c6b3bcc4c18c91361fbe5a0bec", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-16T07:07:15Z", "type": "forcePushed"}, {"oid": "3e1533f470ebd77c622a9a4ca930615ae1302bc5", "url": "https://github.com/telstra/open-kilda/commit/3e1533f470ebd77c622a9a4ca930615ae1302bc5", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-16T07:43:11Z", "type": "forcePushed"}, {"oid": "85c44070b94617f5218ed3f15c0c3b65f58274ef", "url": "https://github.com/telstra/open-kilda/commit/85c44070b94617f5218ed3f15c0c3b65f58274ef", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-16T10:14:18Z", "type": "forcePushed"}, {"oid": "c553f0c738fb8867408c37338a961bdcaaa0c301", "url": "https://github.com/telstra/open-kilda/commit/c553f0c738fb8867408c37338a961bdcaaa0c301", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-18T17:59:08Z", "type": "forcePushed"}, {"oid": "9ef0f863281e747f5bc2c675e26ad9a577e25478", "url": "https://github.com/telstra/open-kilda/commit/9ef0f863281e747f5bc2c675e26ad9a577e25478", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-19T06:00:18Z", "type": "forcePushed"}, {"oid": "6b11396dd0b2de31166f2d53577eba99963d20ba", "url": "https://github.com/telstra/open-kilda/commit/6b11396dd0b2de31166f2d53577eba99963d20ba", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-19T09:01:29Z", "type": "forcePushed"}, {"oid": "c035c89557c6cd19d69b72c08bb6a0452eaa5b86", "url": "https://github.com/telstra/open-kilda/commit/c035c89557c6cd19d69b72c08bb6a0452eaa5b86", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-19T16:55:40Z", "type": "forcePushed"}, {"oid": "ef6c31cb6935965a61e8f46affe2c21d459c748e", "url": "https://github.com/telstra/open-kilda/commit/ef6c31cb6935965a61e8f46affe2c21d459c748e", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-20T13:08:57Z", "type": "forcePushed"}, {"oid": "dbed6da0f60d55f9026a1ce882a863192d860f3d", "url": "https://github.com/telstra/open-kilda/commit/dbed6da0f60d55f9026a1ce882a863192d860f3d", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-21T13:44:18Z", "type": "forcePushed"}, {"oid": "846816d98decd7040e0bf8eba6fb28e48a8c0605", "url": "https://github.com/telstra/open-kilda/commit/846816d98decd7040e0bf8eba6fb28e48a8c0605", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-23T08:09:22Z", "type": "forcePushed"}, {"oid": "8e76b64b06cb237fa57fbfd3502c7e6016db2240", "url": "https://github.com/telstra/open-kilda/commit/8e76b64b06cb237fa57fbfd3502c7e6016db2240", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-23T14:12:30Z", "type": "commit"}, {"oid": "8e76b64b06cb237fa57fbfd3502c7e6016db2240", "url": "https://github.com/telstra/open-kilda/commit/8e76b64b06cb237fa57fbfd3502c7e6016db2240", "message": "Per isl bfd properties\n\nAdd ability to define BFD interval and multiplier for each ISL. New API\nv2 endpoint was created for this feature. Existing API v1 endpoint was\nadopted to use default BFD properties on enable request.", "committedDate": "2020-10-23T14:12:30Z", "type": "forcePushed"}]}