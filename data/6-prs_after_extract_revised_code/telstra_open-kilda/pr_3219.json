{"pr_number": 3219, "pr_title": "Expose processed kafka record reference", "pr_createdAt": "2020-02-18T16:55:12Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3219", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI5OTM0Ng==", "url": "https://github.com/telstra/open-kilda/pull/3219#discussion_r381299346", "bodyText": "It's OK as a quick solution. But this bounds CommandContext to classes of the transport layer (kafka). All arguments constructor + a dedicated builder may handle the case better.", "author": "sergii-iakovenko", "createdAt": "2020-02-19T13:47:26Z", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/CommandContext.java", "diffHunk": "@@ -18,35 +18,56 @@\n import org.openkilda.messaging.Message;\n \n import lombok.Data;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;", "originalCommit": "4fbf30b09b75062e7d6ce2effcf879e91ae83f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa24ad4910e27862be7494323d525fdf82b291d1", "chunk": "diff --git a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/CommandContext.java b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/CommandContext.java\nindex 7fd87980a..a8397b955 100644\n--- a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/CommandContext.java\n+++ b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/CommandContext.java\n\n@@ -18,56 +18,35 @@ package org.openkilda.wfm;\n import org.openkilda.messaging.Message;\n \n import lombok.Data;\n-import org.apache.kafka.clients.consumer.ConsumerRecord;\n \n import java.io.Serializable;\n import java.util.UUID;\n \n /**\n  * Class that contains command context information.\n+ * @deprecated {@link org.openkilda.messaging.MessageContext} should be used instead.\n  */\n @Data\n+@Deprecated\n public class CommandContext implements Serializable {\n     private final String correlationId;\n     private final long createTime;\n \n-    private String kafkaTopic = null;\n-    private Integer kafkaPartition = null;\n-    private Long kafkaOffset = null;\n-\n     public CommandContext() {\n-        this(UUID.randomUUID().toString(), null);\n-    }\n-\n-    public CommandContext(ConsumerRecord<?, ?> kafkaRecord) {\n-        this(UUID.randomUUID().toString(), kafkaRecord);\n+        this(UUID.randomUUID().toString());\n     }\n \n     public CommandContext(Message message) {\n-        this(message.getCorrelationId(), message.getTimestamp(), null);\n-    }\n-\n-    public CommandContext(Message message, ConsumerRecord<?, ?> kafkaRecord) {\n-        this(message.getCorrelationId(), message.getTimestamp(), kafkaRecord);\n+        this(message.getCorrelationId(), message.getTimestamp());\n     }\n \n     public CommandContext(String correlationId) {\n-        this(correlationId, System.currentTimeMillis(), null);\n-    }\n-\n-    public CommandContext(String correlationId, ConsumerRecord<?, ?> kafkaRecord) {\n-        this(correlationId, kafkaRecord != null ? kafkaRecord.timestamp() : System.currentTimeMillis(), kafkaRecord);\n+        this(correlationId, System.currentTimeMillis());\n     }\n \n-    protected CommandContext(String correlationId, long createTime, ConsumerRecord<?, ?> kafkaRecord) {\n+    protected CommandContext(String correlationId, long createTime) {\n         this.correlationId = correlationId;\n         this.createTime = createTime;\n-\n-        if (kafkaRecord != null) {\n-            kafkaTopic = kafkaRecord.topic();\n-            kafkaPartition = kafkaRecord.partition();\n-            kafkaOffset = kafkaRecord.offset();\n-        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgzNzY1Mw==", "url": "https://github.com/telstra/open-kilda/pull/3219#discussion_r381837653", "bodyText": "what's the purpose of this method?", "author": "timofei-durakov", "createdAt": "2020-02-20T08:07:14Z", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/utils/GenericKafkaRecordTranslator.java", "diffHunk": "@@ -23,26 +23,24 @@\n import org.apache.storm.tuple.Fields;\n import org.apache.storm.tuple.Values;\n \n-import java.util.List;\n-\n-abstract class GenericKafkaRecordTranslator<R, D> extends KafkaRecordTranslator<String, R> {\n+abstract class GenericKafkaRecordTranslator<D> extends KafkaRecordTranslator<String, D, D> {\n     // use FIELD_ID_KEY instead\n     @Deprecated\n     public static final String KEY_FIELD = FIELD_ID_KEY;\n     public static final Fields STREAM_FIELDS = new Fields(FIELD_ID_KEY, FIELD_ID_PAYLOAD, FIELD_ID_CONTEXT);\n \n     @Override\n-    public List<Object> apply(ConsumerRecord<String, R> record) {\n-        D payload = decodePayload(record.value());\n-        return new Values(record.key(), payload, makeContext(payload));\n+    public Fields getFieldsFor(String stream) {\n+        return STREAM_FIELDS;\n     }\n \n-    protected abstract D decodePayload(R payload);\n-\n-    protected abstract CommandContext makeContext(D payload);\n+    @Override\n+    protected D decodePayload(D payload) {", "originalCommit": "4fbf30b09b75062e7d6ce2effcf879e91ae83f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgzNzk1Mw==", "url": "https://github.com/telstra/open-kilda/pull/3219#discussion_r381837953", "bodyText": "the same question", "author": "timofei-durakov", "createdAt": "2020-02-20T08:08:08Z", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/topology/utils/InfoDataTranslator.java", "diffHunk": "@@ -16,23 +16,32 @@\n package org.openkilda.wfm.topology.utils;\n \n import org.openkilda.messaging.info.InfoData;\n+import org.openkilda.wfm.CommandContext;\n \n import org.apache.kafka.clients.consumer.ConsumerRecord;\n import org.apache.storm.tuple.Fields;\n import org.apache.storm.tuple.Values;\n \n-import java.util.List;\n+public class InfoDataTranslator extends KafkaRecordTranslator<String, InfoData, InfoData> {\n+    public static final Fields STREAM_FIELDS = new Fields(FIELD_ID_KEY, FIELD_ID_PAYLOAD);\n \n-public class InfoDataTranslator extends KafkaRecordTranslator<String, InfoData> {\n+    @Override\n+    public Fields getFieldsFor(String stream) {\n+        return STREAM_FIELDS;\n+    }\n \n     @Override\n-    public List<Object> apply(ConsumerRecord<String, InfoData> record) {\n-        InfoData data = record.value();\n-        return new Values(record.key(), data);\n+    protected InfoData decodePayload(InfoData payload) {", "originalCommit": "4fbf30b09b75062e7d6ce2effcf879e91ae83f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "fa24ad4910e27862be7494323d525fdf82b291d1", "url": "https://github.com/telstra/open-kilda/commit/fa24ad4910e27862be7494323d525fdf82b291d1", "message": "Cleanup code responsible for creating CommandContext", "committedDate": "2020-02-20T08:29:59Z", "type": "commit"}, {"oid": "ec9fd835a85b4b545ef43d30a313d0046dd25018", "url": "https://github.com/telstra/open-kilda/commit/ec9fd835a85b4b545ef43d30a313d0046dd25018", "message": "Expose processed kafka record reference\n\nTo simplify correlation between log messages and kafka records add kafka\ntopic/partition/offset info into logger MDC.", "committedDate": "2020-02-20T08:31:12Z", "type": "commit"}, {"oid": "ec9fd835a85b4b545ef43d30a313d0046dd25018", "url": "https://github.com/telstra/open-kilda/commit/ec9fd835a85b4b545ef43d30a313d0046dd25018", "message": "Expose processed kafka record reference\n\nTo simplify correlation between log messages and kafka records add kafka\ntopic/partition/offset info into logger MDC.", "committedDate": "2020-02-20T08:31:12Z", "type": "forcePushed"}]}