{"pr_number": 3372, "pr_title": "Flow HS changes for migrating swap endpoints", "pr_createdAt": "2020-04-08T08:20:18Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3372", "timeline": [{"oid": "adf61123001a39cacdd14aae5a77149aa68b3c04", "url": "https://github.com/telstra/open-kilda/commit/adf61123001a39cacdd14aae5a77149aa68b3c04", "message": "Flow HS changes for migrating swap endpoints:\n- added RequestedFlow mapper;\n- added validation for swap endpoints;\n- fixed several bugs in the flow update operation.", "committedDate": "2020-04-23T13:35:10Z", "type": "forcePushed"}, {"oid": "69ee5fdb6dc6042f049eeb50045580020a78c89a", "url": "https://github.com/telstra/open-kilda/commit/69ee5fdb6dc6042f049eeb50045580020a78c89a", "message": "Flow HS changes for migrating swap endpoints:\n- added RequestedFlow mapper;\n- added validation for swap endpoints;\n- fixed several bugs in the flow update operation.", "committedDate": "2020-04-28T07:30:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTA4NQ==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r423501085", "bodyText": "Flows, not flow", "author": "timofei-durakov", "createdAt": "2020-05-12T06:53:07Z", "path": "src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/history/model/FlowEventData.java", "diffHunk": "@@ -43,7 +43,8 @@\n         CREATE(\"Flow creating\"),\n         UPDATE(\"Flow updating\"),\n         REROUTE(\"Flow rerouting\"),\n-        DELETE(\"Flow deleting\");\n+        DELETE(\"Flow deleting\"),\n+        SWAP_ENDPOINTS(\"Flow swap endpoints\");", "originalCommit": "69ee5fdb6dc6042f049eeb50045580020a78c89a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzNzQ3NQ==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r423637475", "bodyText": "Fixed", "author": "dpoltavets", "createdAt": "2020-05-12T10:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "aed67242fe369e650990d51da96c49fd0b389890", "chunk": "diff --git a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/history/model/FlowEventData.java b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/history/model/FlowEventData.java\nindex a7f82b36f..562243555 100644\n--- a/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/history/model/FlowEventData.java\n+++ b/src-java/base-topology/base-storm-topology/src/main/java/org/openkilda/wfm/share/history/model/FlowEventData.java\n\n@@ -44,7 +44,8 @@ public class FlowEventData {\n         UPDATE(\"Flow updating\"),\n         REROUTE(\"Flow rerouting\"),\n         DELETE(\"Flow deleting\"),\n-        SWAP_ENDPOINTS(\"Flow swap endpoints\");\n+        PATH_SWAP(\"Flow paths swap\"),\n+        SWAP_ENDPOINTS(\"Flows swap endpoints\");\n \n         private String description;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzM5NA==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r423503394", "bodyText": "nit: revertable otherwise it will be less readable imho", "author": "timofei-durakov", "createdAt": "2020-05-12T06:57:55Z", "path": "src-java/flow-topology/flow-messaging/src/main/java/org/openkilda/messaging/command/flow/FlowRequest.java", "diffHunk": "@@ -73,6 +76,10 @@\n     @Builder.Default\n     DetectConnectedDevicesDto detectConnectedDevices = new DetectConnectedDevicesDto();\n \n+    @Builder.Default\n+    Set<String> bulkUpdateFlowIds = new HashSet<>();\n+    boolean doNotRevert;", "originalCommit": "69ee5fdb6dc6042f049eeb50045580020a78c89a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NDM4Ng==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r425264386", "bodyText": "Is \"doNotRevert\" flag applicable to all types of flow requests? If not, it makes sense to have a dedicated request class.", "author": "sergii-iakovenko", "createdAt": "2020-05-14T16:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4NzM0MA==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r427887340", "bodyText": "I think that need to do this after removing Flow Topology. Otherwise, there will be more mess in the requests and names.", "author": "dpoltavets", "createdAt": "2020-05-20T09:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzM5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxODU3OQ==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r423518579", "bodyText": "need more details on that validation logic, please leave a comment", "author": "timofei-durakov", "createdAt": "2020-05-12T07:27:31Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java", "diffHunk": "@@ -288,4 +328,49 @@ private void validateMultiTableProperty(SwitchId switchId, List<String> errorMes\n             }\n         }\n     }\n+\n+    /**\n+     * Check for equals endpoints.\n+     *\n+     * @param firstFlow a first flow.\n+     * @param secondFlow a second flow.\n+     */\n+    @VisibleForTesting\n+    void checkForEqualsEndpoints(RequestedFlow firstFlow, RequestedFlow secondFlow) throws InvalidFlowException {\n+        List<Endpoint> endpoints = new ArrayList<>();\n+        endpoints.add(new Endpoint(firstFlow.getSrcSwitch(),\n+                firstFlow.getSrcPort(), firstFlow.getSrcVlan()));\n+        endpoints.add(new Endpoint(firstFlow.getDestSwitch(),\n+                firstFlow.getDestPort(), firstFlow.getDestVlan()));\n+        endpoints.add(new Endpoint(secondFlow.getSrcSwitch(),\n+                secondFlow.getSrcPort(), secondFlow.getSrcVlan()));\n+        endpoints.add(new Endpoint(secondFlow.getDestSwitch(),\n+                secondFlow.getDestPort(), secondFlow.getDestVlan()));\n+\n+        Set<Endpoint> checkSet = new HashSet<>();\n+        for (Endpoint endpoint : endpoints) {\n+            if (!checkSet.contains(endpoint)) {\n+                checkSet.add(endpoint);\n+            } else {", "originalCommit": "69ee5fdb6dc6042f049eeb50045580020a78c89a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzNzUzNw==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r423637537", "bodyText": "Fixed", "author": "dpoltavets", "createdAt": "2020-05-12T10:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxODU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "aed67242fe369e650990d51da96c49fd0b389890", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java\nindex 9db454216..92b94561a 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java\n\n@@ -337,36 +337,34 @@ public class FlowValidator {\n      */\n     @VisibleForTesting\n     void checkForEqualsEndpoints(RequestedFlow firstFlow, RequestedFlow secondFlow) throws InvalidFlowException {\n-        List<Endpoint> endpoints = new ArrayList<>();\n-        endpoints.add(new Endpoint(firstFlow.getSrcSwitch(),\n-                firstFlow.getSrcPort(), firstFlow.getSrcVlan()));\n-        endpoints.add(new Endpoint(firstFlow.getDestSwitch(),\n-                firstFlow.getDestPort(), firstFlow.getDestVlan()));\n-        endpoints.add(new Endpoint(secondFlow.getSrcSwitch(),\n-                secondFlow.getSrcPort(), secondFlow.getSrcVlan()));\n-        endpoints.add(new Endpoint(secondFlow.getDestSwitch(),\n-                secondFlow.getDestPort(), secondFlow.getDestVlan()));\n-\n-        Set<Endpoint> checkSet = new HashSet<>();\n-        for (Endpoint endpoint : endpoints) {\n-            if (!checkSet.contains(endpoint)) {\n-                checkSet.add(endpoint);\n-            } else {\n-                String message = \"New requested endpoint for '%s' conflicts with existing endpoint for '%s'\";\n-                if (checkSet.size() <= 1) {\n-                    message = String.format(message, firstFlow.getFlowId(), firstFlow.getFlowId());\n-                } else {\n-                    if (endpoints.indexOf(endpoint) <= 1) {\n-                        message = String.format(message, secondFlow.getFlowId(), firstFlow.getFlowId());\n-                    } else {\n-                        message = String.format(message, secondFlow.getFlowId(), secondFlow.getFlowId());\n-                    }\n-                }\n+        String message = \"New requested endpoint for '%s' conflicts with existing endpoint for '%s'\";\n+\n+        Set<Endpoint> firstFlowEndpoints = validateFlowEqualsEndpoints(firstFlow, message);\n+        Set<Endpoint> secondFlowEndpoints = validateFlowEqualsEndpoints(secondFlow, message);\n+\n+        for (Endpoint endpoint : secondFlowEndpoints) {\n+            if (firstFlowEndpoints.contains(endpoint)) {\n+                message = String.format(message, secondFlow.getFlowId(), firstFlow.getFlowId());\n                 throw new InvalidFlowException(message, ErrorType.DATA_INVALID);\n             }\n         }\n     }\n \n+    private Set<Endpoint> validateFlowEqualsEndpoints(RequestedFlow flow, String errorMessage)\n+            throws InvalidFlowException {\n+\n+        Set<Endpoint> flowEndpoints = new HashSet<>();\n+        flowEndpoints.add(new Endpoint(flow.getSrcSwitch(), flow.getSrcPort(), flow.getSrcVlan()));\n+        flowEndpoints.add(new Endpoint(flow.getDestSwitch(), flow.getDestPort(), flow.getDestVlan()));\n+\n+        if (flowEndpoints.size() != 2) {\n+            errorMessage = String.format(errorMessage, flow.getFlowId(), flow.getFlowId());\n+            throw new InvalidFlowException(errorMessage, ErrorType.DATA_INVALID);\n+        }\n+\n+        return flowEndpoints;\n+    }\n+\n     @Value\n     private static class Endpoint {\n         SwitchId switchId;\n"}}, {"oid": "aed67242fe369e650990d51da96c49fd0b389890", "url": "https://github.com/telstra/open-kilda/commit/aed67242fe369e650990d51da96c49fd0b389890", "message": "Flow HS changes for migrating swap endpoints:\n- added RequestedFlow mapper;\n- added validation for swap endpoints;\n- fixed several bugs in the flow update operation.", "committedDate": "2020-05-12T10:42:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NTY4MA==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r425265680", "bodyText": "nit: why not just 2?", "author": "sergii-iakovenko", "createdAt": "2020-05-14T16:22:01Z", "path": "src-java/flow-topology/flow-messaging/src/main/java/org/openkilda/messaging/command/flow/SwapFlowEndpointRequest.java", "diffHunk": "@@ -28,16 +28,16 @@\n  */\n @Value\n @EqualsAndHashCode(callSuper = false)\n-public class SwapFlowEndpointRequest extends FlowsBaseRequest {\n-    private static final long serialVersionUID = 1L;\n+public class SwapFlowEndpointRequest extends BaseRequest {\n+    private static final long serialVersionUID = 694340554858269632L;", "originalCommit": "aed67242fe369e650990d51da96c49fd0b389890", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5NDM5Nw==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r425294397", "bodyText": "Why did we put this method in generic and shared FlowProcessingAction? It has a very specific use case - wrap the result of findPathIdsByFlowIds into a list for PCE.", "author": "sergii-iakovenko", "createdAt": "2020-05-14T17:03:38Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java", "diffHunk": "@@ -104,4 +112,18 @@ protected FlowPath getFlowPath(PathId pathId) {\n                         .filter(flowId -> !flowId.equals(flow.getFlowId()))\n                         .collect(Collectors.toSet());\n     }\n+\n+    protected List<PathId> getFlowsPathIds(Set<String> flowIds) {", "originalCommit": "aed67242fe369e650990d51da96c49fd0b389890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4NzUzMA==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r427887530", "bodyText": "Fixed", "author": "dpoltavets", "createdAt": "2020-05-20T09:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5NDM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2bb038818b52c4fbe5e6695afad20ecf0b784827", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java\nindex d0bd06b01..0f710df87 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/actions/FlowProcessingAction.java\n\n@@ -106,6 +110,11 @@ public abstract class FlowProcessingAction<T extends FlowProcessingFsm<T, S, E,\n         return new HashSet<>(flowRepository.findFlowsIdsByEndpointWithMultiTableSupport(switchId, port));\n     }\n \n+    protected Set<String> findFlowIdsForMultiSwitchFlowsByEndpointWithMultiTableSupport(SwitchId switchId, int port) {\n+        return new HashSet<>(\n+                flowRepository.findFlowIdsForMultiSwitchFlowsByEndpointWithMultiTableSupport(switchId, port));\n+    }\n+\n     protected Set<String> getDiverseWithFlowIds(Flow flow) {\n         return flow.getGroupId() == null ? Collections.emptySet() :\n                 flowRepository.findFlowsIdByGroupId(flow.getGroupId()).stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MTgyNw==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r425661827", "bodyText": "hit: you can apply the annotation to the field instead.", "author": "sergii-iakovenko", "createdAt": "2020-05-15T08:56:27Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/NbTrackableFsm.java", "diffHunk": "@@ -18,14 +18,20 @@\n import org.openkilda.messaging.Message;\n import org.openkilda.wfm.CommandContext;\n \n+import lombok.Getter;\n+import lombok.Setter;\n import org.squirrelframework.foundation.fsm.StateMachine;\n \n+@Getter", "originalCommit": "aed67242fe369e650990d51da96c49fd0b389890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4NzY0OA==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r427887648", "bodyText": "Fixed", "author": "dpoltavets", "createdAt": "2020-05-20T09:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MTgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "2bb038818b52c4fbe5e6695afad20ecf0b784827", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/NbTrackableFsm.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/NbTrackableFsm.java\nindex 215140f3c..eb67a91d3 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/NbTrackableFsm.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/NbTrackableFsm.java\n\n@@ -22,11 +22,11 @@ import lombok.Getter;\n import lombok.Setter;\n import org.squirrelframework.foundation.fsm.StateMachine;\n \n-@Getter\n-@Setter\n public abstract class NbTrackableFsm<T extends StateMachine<T, S, E, C>, S, E, C>\n         extends FlowProcessingFsm<T, S, E, C> {\n \n+    @Getter\n+    @Setter\n     private Message operationResultMessage;\n \n     public NbTrackableFsm(CommandContext commandContext) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3NjI0Ng==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r425676246", "bodyText": "So now, a FSM can log an history event with the taskId and flowId which don't belong to the FSM? Let's discuss this.", "author": "sergii-iakovenko", "createdAt": "2020-05-15T09:21:57Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/common/WithHistorySupportFsm.java", "diffHunk": "@@ -99,24 +122,41 @@ public void saveNewEventToHistory(String action, FlowEventData.Event event) {\n         saveNewEventToHistory(action, event, null, null);\n     }\n \n+    /**\n+     * Add a history record on the new event.\n+     */\n+    public void saveNewEventToHistory(String flowId, String action, FlowEventData.Event event) {\n+        String taskId = KeyProvider.joinKeys(flowId, getCommandContext().getCorrelationId());\n+        saveNewEventToHistory(flowId, action, event, null, null, taskId);\n+    }\n+\n     /**\n      * Add a history record on the new event.\n      */\n     public void saveNewEventToHistory(String action, FlowEventData.Event event,\n                                       FlowEventData.Initiator initiator,\n                                       String details) {\n-        log.debug(\"Flow {} action - {} : {}\", getFlowId(), action, event);\n+        saveNewEventToHistory(getFlowId(), action, event, initiator, details, getCommandContext().getCorrelationId());\n+    }\n+\n+    /**\n+     * Add a history record on the new event.\n+     */\n+    public void saveNewEventToHistory(String flowId, String action, FlowEventData.Event event,", "originalCommit": "aed67242fe369e650990d51da96c49fd0b389890", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MDI3NA==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r425680274", "bodyText": "It's a really controversial solution - you allow overprovisioning for the sum of all flows' bandwidth for a single new path, but can't guarantee that this bandwidth will be release by those flows as they can have different paths.", "author": "sergii-iakovenko", "createdAt": "2020-05-15T09:29:01Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/AllocatePrimaryResourcesAction.java", "diffHunk": "@@ -69,7 +82,9 @@ protected void allocate(FlowUpdateFsm stateMachine)\n                 .forward(flow.getForwardPath())\n                 .reverse(flow.getReversePath())\n                 .build();\n-        FlowPathPair newPaths = createFlowPathPair(flow, oldPaths, potentialPath, flowResources);\n+        long overprovisionedBandwidth = getFlowsBandwidthSum(flowIds);\n+        FlowPathPair newPaths = createFlowPathPair(flow, oldPaths, potentialPath, flowResources,", "originalCommit": "aed67242fe369e650990d51da96c49fd0b389890", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4ODA4Nw==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r427888087", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-05-20T09:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4MDI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "2bb038818b52c4fbe5e6695afad20ecf0b784827", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/AllocatePrimaryResourcesAction.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/AllocatePrimaryResourcesAction.java\nindex feb05bb51..fac4fa105 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/AllocatePrimaryResourcesAction.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/update/actions/AllocatePrimaryResourcesAction.java\n\n@@ -66,25 +69,22 @@ public class AllocatePrimaryResourcesAction extends\n             flowIds.addAll(stateMachine.getBulkUpdateFlowIds());\n         }\n \n-        log.debug(\"Finding path ids for flows {}\", flowIds);\n-        List<PathId> pathsToReuse = getFlowsPathIds(flowIds);\n+        log.debug(\"Finding paths for flows {}\", flowIds);\n+        List<FlowPath> pathsToReuse = new ArrayList<>(flowPathRepository.findPathIdsByFlowIds(flowIds));\n \n         Flow flow = getFlow(flowId);\n         log.debug(\"Finding a new primary path for flow {}\", flowId);\n-        final PathPair potentialPath = pathComputer.getPath(flow, pathsToReuse);\n+        List<PathId> pathIdsToReuse = pathsToReuse.stream().map(FlowPath::getPathId).collect(Collectors.toList());\n+        final PathPair potentialPath = pathComputer.getPath(flow, pathIdsToReuse);\n \n         log.debug(\"Allocating resources for a new primary path of flow {}\", flowId);\n         FlowResources flowResources = resourcesManager.allocateFlowResources(flow);\n         log.debug(\"Resources have been allocated: {}\", flowResources);\n         stateMachine.setNewPrimaryResources(flowResources);\n \n-        FlowPathPair oldPaths = FlowPathPair.builder()\n-                .forward(flow.getForwardPath())\n-                .reverse(flow.getReversePath())\n-                .build();\n-        long overprovisionedBandwidth = getFlowsBandwidthSum(flowIds);\n-        FlowPathPair newPaths = createFlowPathPair(flow, oldPaths, potentialPath, flowResources,\n-                overprovisionedBandwidth);\n+        pathsToReuse.add(flow.getForwardPath());\n+        pathsToReuse.add(flow.getReversePath());\n+        FlowPathPair newPaths = createFlowPathPair(flow, pathsToReuse, potentialPath, flowResources);\n         log.debug(\"New primary path has been created: {}\", newPaths);\n         stateMachine.setNewPrimaryForwardPath(newPaths.getForward().getPathId());\n         stateMachine.setNewPrimaryReversePath(newPaths.getReverse().getPathId());\n"}}, {"oid": "2bb038818b52c4fbe5e6695afad20ecf0b784827", "url": "https://github.com/telstra/open-kilda/commit/2bb038818b52c4fbe5e6695afad20ecf0b784827", "message": "Flow HS changes for migrating swap endpoints:\n- added RequestedFlow mapper;\n- added validation for swap endpoints;\n- fixed several bugs in the flow update operation.", "committedDate": "2020-05-20T09:24:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwNTc2NQ==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r428005765", "bodyText": "Shouldn't we rename it to \"findByFlowIds\"?", "author": "sergii-iakovenko", "createdAt": "2020-05-20T13:23:07Z", "path": "src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowPathRepository.java", "diffHunk": "@@ -39,9 +39,9 @@\n \n     Collection<FlowPath> findByFlowGroupId(String flowGroupId);\n \n-    Collection<PathId> findPathIdsByFlowGroupId(String flowGroupId);\n+    Collection<FlowPath> findPathIdsByFlowIds(Set<String> flowIds);", "originalCommit": "2bb038818b52c4fbe5e6695afad20ecf0b784827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMzIwMw==", "url": "https://github.com/telstra/open-kilda/pull/3372#discussion_r428023203", "bodyText": "Yes, you are right. Fixed.", "author": "dpoltavets", "createdAt": "2020-05-20T13:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwNTc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4484449e109db01f75e05bd6dcc5eb77874fa6e1", "chunk": "diff --git a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowPathRepository.java b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowPathRepository.java\nindex 53fcbd11c..cbb9d7315 100644\n--- a/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowPathRepository.java\n+++ b/src-java/kilda-persistence-api/src/main/java/org/openkilda/persistence/repositories/FlowPathRepository.java\n\n@@ -39,7 +39,7 @@ public interface FlowPathRepository extends Repository<FlowPath> {\n \n     Collection<FlowPath> findByFlowGroupId(String flowGroupId);\n \n-    Collection<FlowPath> findPathIdsByFlowIds(Set<String> flowIds);\n+    Collection<FlowPath> findByFlowIds(Set<String> flowIds);\n \n     Collection<PathId> findPathIdsByFlowGroupId(String flowGroupId);\n \n"}}, {"oid": "4484449e109db01f75e05bd6dcc5eb77874fa6e1", "url": "https://github.com/telstra/open-kilda/commit/4484449e109db01f75e05bd6dcc5eb77874fa6e1", "message": "Flow HS changes for migrating swap endpoints:\n- added RequestedFlow mapper;\n- added validation for swap endpoints;\n- fixed several bugs in the flow update operation.", "committedDate": "2020-05-20T13:42:34Z", "type": "forcePushed"}, {"oid": "4e5396975e2bd0fc18fd4a5de2c09b458e1c5fc6", "url": "https://github.com/telstra/open-kilda/commit/4e5396975e2bd0fc18fd4a5de2c09b458e1c5fc6", "message": "Northbound V1 requests redirected to FlowHSTopology", "committedDate": "2020-05-25T14:30:01Z", "type": "forcePushed"}, {"oid": "df3d792529af2c776461014fc661d883ac2968ab", "url": "https://github.com/telstra/open-kilda/commit/df3d792529af2c776461014fc661d883ac2968ab", "message": "Northbound V1 requests redirected to FlowHSTopology", "committedDate": "2020-05-26T05:14:11Z", "type": "forcePushed"}, {"oid": "1748da1764933e5fd66c6445b079358cf44c2842", "url": "https://github.com/telstra/open-kilda/commit/1748da1764933e5fd66c6445b079358cf44c2842", "message": "Northbound V1 requests redirected to FlowHSTopology", "committedDate": "2020-05-26T07:58:20Z", "type": "forcePushed"}, {"oid": "3195b8fcad7c7706c90ad5f7b8702402aa44e209", "url": "https://github.com/telstra/open-kilda/commit/3195b8fcad7c7706c90ad5f7b8702402aa44e209", "message": "Flow HS changes for migrating swap endpoints:\n- added RequestedFlow mapper;\n- added validation for swap endpoints;\n- fixed several bugs in the flow update operation.", "committedDate": "2020-05-26T08:15:53Z", "type": "commit"}, {"oid": "fc4cb2ca1bebe2a4982796d5e764ae55ac1b7ae7", "url": "https://github.com/telstra/open-kilda/commit/fc4cb2ca1bebe2a4982796d5e764ae55ac1b7ae7", "message": "Added swap endpoints fsm.", "committedDate": "2020-05-26T08:15:55Z", "type": "commit"}, {"oid": "063b2673dc1761286803af247e8c11ac4708a82b", "url": "https://github.com/telstra/open-kilda/commit/063b2673dc1761286803af247e8c11ac4708a82b", "message": "Northbound V1 requests redirected to FlowHSTopology", "committedDate": "2020-05-26T08:15:55Z", "type": "commit"}, {"oid": "063b2673dc1761286803af247e8c11ac4708a82b", "url": "https://github.com/telstra/open-kilda/commit/063b2673dc1761286803af247e8c11ac4708a82b", "message": "Northbound V1 requests redirected to FlowHSTopology", "committedDate": "2020-05-26T08:15:55Z", "type": "forcePushed"}]}