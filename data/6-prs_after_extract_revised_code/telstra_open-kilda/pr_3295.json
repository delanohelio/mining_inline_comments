{"pr_number": 3295, "pr_title": "Flow reroute retry", "pr_createdAt": "2020-03-16T12:36:36Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3295", "timeline": [{"oid": "b2bf2105b7b5e4f5a8adb37e8f5e1942a4c9adc4", "url": "https://github.com/telstra/open-kilda/commit/b2bf2105b7b5e4f5a8adb37e8f5e1942a4c9adc4", "message": "Implement flow reroute retry mechanism\n\n* rework reroute topology to support parallelism and handle manual reroute requests\n* rework flow H&S reroute implementation to send reroute result to reroute topology", "committedDate": "2020-03-16T14:57:23Z", "type": "forcePushed"}, {"oid": "20c55111ad50e9c254889af9d01768a1225afc41", "url": "https://github.com/telstra/open-kilda/commit/20c55111ad50e9c254889af9d01768a1225afc41", "message": "Implement flow reroute retry mechanism\n\n* rework reroute topology to support parallelism and handle manual reroute requests\n* rework flow H&S reroute implementation to send reroute result to reroute topology", "committedDate": "2020-03-17T13:14:05Z", "type": "forcePushed"}, {"oid": "9761fcce54df8db0c481a766adee7b3f1dacb12f", "url": "https://github.com/telstra/open-kilda/commit/9761fcce54df8db0c481a766adee7b3f1dacb12f", "message": "Implement flow reroute retry mechanism\n\n* rework reroute topology to support parallelism and handle manual reroute requests\n* rework flow H&S reroute implementation to send reroute result to reroute topology", "committedDate": "2020-03-18T11:19:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzMxMg==", "url": "https://github.com/telstra/open-kilda/pull/3295#discussion_r396413312", "bodyText": "maybe use some constant for 1?", "author": "niksv", "createdAt": "2020-03-23T12:27:33Z", "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java", "diffHunk": "@@ -65,26 +84,47 @@ public StormTopology createTopology() {\n         topologyBuilder.setBolt(BOLT_ID_REROUTE, rerouteBolt, parallelism)\n                 .shuffleGrouping(SPOUT_ID_REROUTE);\n \n-        FlowThrottlingBolt flowThrottlingBolt = new FlowThrottlingBolt(persistenceManager,\n-                topologyConfig.getRerouteThrottlingMinDelay(),\n-                topologyConfig.getRerouteThrottlingMaxDelay(),\n-                topologyConfig.getDefaultFlowPriority());\n-        //TODO(siakovenko): fix ThrottlingBolt with parallelism > 1 : see topologyConfig.getNewParallelism()\n-        topologyBuilder.setBolt(BOLT_ID_REROUTE_THROTTLING, flowThrottlingBolt, parallelism)\n-                .fieldsGrouping(BOLT_ID_REROUTE, new Fields(RerouteBolt.FLOW_ID_FIELD));\n-\n-        KafkaBolt kafkaFlowBolt = buildKafkaBolt(topologyConfig.getKafkaFlowTopic());\n+        int rerouteTimeout = (int) TimeUnit.SECONDS.toMillis(topologyConfig.getRerouteTimeoutSeconds());\n+        FlowRerouteQueueBolt flowRerouteQueueBolt = new FlowRerouteQueueBolt(persistenceManager,\n+                topologyConfig.getDefaultFlowPriority(),\n+                topologyConfig.getMaxRetry(), rerouteTimeout);\n+        topologyBuilder.setBolt(BOLT_ID_REROUTE_QUEUE, flowRerouteQueueBolt, parallelism)\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_REQUEST_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_MANUAL_REROUTE_REQUEST_ID,\n+                        new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_RESULT_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .allGrouping(BOLT_ID_TIME_WINDOW)\n+                .directGrouping(CoordinatorBolt.ID);\n+\n+        TimeWindowBolt timeWindowBolt = new TimeWindowBolt(topologyConfig.getRerouteThrottlingMinDelay(),\n+                topologyConfig.getRerouteThrottlingMaxDelay());\n+        // Time window bolt should use parallelism 1 to provide synchronisation for all reroute queue bolts\n+        topologyBuilder.setBolt(BOLT_ID_TIME_WINDOW, timeWindowBolt, 1)", "originalCommit": "b6cee0dc1a29d2cc94a82f942f8680dd2342758a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NzcyMg==", "url": "https://github.com/telstra/open-kilda/pull/3295#discussion_r401757722", "bodyText": "I think comment is enough here.", "author": "rozdy", "createdAt": "2020-04-01T16:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "0ccbc189e328f1fdb1c98a0924aff96fb7027148", "chunk": "diff --git a/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java b/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java\nindex 7cd7cfeb3..ebeb72b0d 100644\n--- a/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java\n+++ b/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java\n\n@@ -80,49 +77,61 @@ public class RerouteTopology extends AbstractTopology<RerouteTopologyConfig> {\n         PersistenceManager persistenceManager = PersistenceProvider.getInstance()\n                 .createPersistenceManager(configurationProvider);\n \n+        rerouteBolt(topologyBuilder, parallelism, persistenceManager);\n+        rerouteQueueBolt(topologyBuilder, parallelism, persistenceManager);\n+        timeWindowBolt(topologyBuilder);\n+\n+        KafkaBolt<String, Message> kafkaFlowBolt = buildKafkaBolt(topologyConfig.getKafkaFlowTopic());\n+        topologyBuilder.setBolt(BOLT_ID_KAFKA_FLOW, kafkaFlowBolt, parallelism)\n+                .shuffleGrouping(RerouteBolt.BOLT_ID, STREAM_SWAP_ID);\n+\n+        KafkaBolt<String, Message> kafkaFlowHsBolt = buildKafkaBolt(topologyConfig.getKafkaFlowHsTopic());\n+        topologyBuilder.setBolt(BOLT_ID_KAFKA_FLOWHS, kafkaFlowHsBolt, parallelism)\n+                .shuffleGrouping(FlowRerouteQueueBolt.BOLT_ID, FlowRerouteQueueBolt.STREAM_FLOWHS_ID);\n+\n+        KafkaBolt<String, Message> kafkaNorthboundBolt = buildKafkaBolt(topologyConfig.getKafkaNorthboundTopic());\n+        topologyBuilder.setBolt(BOLT_ID_KAFKA_NB, kafkaNorthboundBolt, parallelism)\n+                .shuffleGrouping(FlowRerouteQueueBolt.BOLT_ID, STREAM_NORTHBOUND_ID);\n+\n+        return topologyBuilder.createTopology();\n+    }\n+\n+    private void rerouteBolt(TopologyBuilder topologyBuilder, int parallelism,\n+                             PersistenceManager persistenceManager) {\n         RerouteBolt rerouteBolt = new RerouteBolt(persistenceManager);\n-        topologyBuilder.setBolt(BOLT_ID_REROUTE, rerouteBolt, parallelism)\n+        topologyBuilder.setBolt(RerouteBolt.BOLT_ID, rerouteBolt, parallelism)\n                 .shuffleGrouping(SPOUT_ID_REROUTE);\n+    }\n \n+    private void rerouteQueueBolt(TopologyBuilder topologyBuilder, int parallelism,\n+                                  PersistenceManager persistenceManager) {\n         int rerouteTimeout = (int) TimeUnit.SECONDS.toMillis(topologyConfig.getRerouteTimeoutSeconds());\n         FlowRerouteQueueBolt flowRerouteQueueBolt = new FlowRerouteQueueBolt(persistenceManager,\n                 topologyConfig.getDefaultFlowPriority(),\n                 topologyConfig.getMaxRetry(), rerouteTimeout);\n-        topologyBuilder.setBolt(BOLT_ID_REROUTE_QUEUE, flowRerouteQueueBolt, parallelism)\n-                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_REQUEST_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n-                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_MANUAL_REROUTE_REQUEST_ID,\n+        topologyBuilder.setBolt(FlowRerouteQueueBolt.BOLT_ID, flowRerouteQueueBolt, parallelism)\n+                .fieldsGrouping(RerouteBolt.BOLT_ID, STREAM_REROUTE_REQUEST_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .fieldsGrouping(RerouteBolt.BOLT_ID, STREAM_MANUAL_REROUTE_REQUEST_ID,\n                         new Fields(RerouteBolt.FLOW_ID_FIELD))\n-                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_RESULT_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n-                .allGrouping(BOLT_ID_TIME_WINDOW)\n+                .fieldsGrouping(RerouteBolt.BOLT_ID, STREAM_REROUTE_RESULT_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .allGrouping(TimeWindowBolt.BOLT_ID)\n                 .directGrouping(CoordinatorBolt.ID);\n+    }\n \n+    private void timeWindowBolt(TopologyBuilder topologyBuilder) {\n         TimeWindowBolt timeWindowBolt = new TimeWindowBolt(topologyConfig.getRerouteThrottlingMinDelay(),\n                 topologyConfig.getRerouteThrottlingMaxDelay());\n         // Time window bolt should use parallelism 1 to provide synchronisation for all reroute queue bolts\n-        topologyBuilder.setBolt(BOLT_ID_TIME_WINDOW, timeWindowBolt, 1)\n-                .allGrouping(BOLT_ID_REROUTE_QUEUE, STREAM_TIME_WINDOW_EVENT_ID)\n+        topologyBuilder.setBolt(TimeWindowBolt.BOLT_ID, timeWindowBolt, 1)\n+                .allGrouping(FlowRerouteQueueBolt.BOLT_ID, STREAM_TIME_WINDOW_EVENT_ID)\n                 .allGrouping(CoordinatorSpout.ID);\n-\n-        KafkaBolt<String, Message> kafkaFlowBolt = buildKafkaBolt(topologyConfig.getKafkaFlowTopic());\n-        topologyBuilder.setBolt(BOLT_ID_KAFKA_FLOW, kafkaFlowBolt, parallelism)\n-                .shuffleGrouping(BOLT_ID_REROUTE, STREAM_SWAP_ID);\n-\n-        KafkaBolt<String, Message> kafkaFlowHsBolt = buildKafkaBolt(topologyConfig.getKafkaFlowHsTopic());\n-        topologyBuilder.setBolt(BOLT_ID_KAFKA_FLOWHS, kafkaFlowHsBolt, parallelism)\n-                .shuffleGrouping(BOLT_ID_REROUTE_QUEUE, FlowRerouteQueueBolt.STREAM_FLOWHS_ID);\n-\n-        KafkaBolt<String, Message> kafkaNorthboundBolt = buildKafkaBolt(topologyConfig.getKafkaNorthboundTopic());\n-        topologyBuilder.setBolt(BOLT_ID_KAFKA_NB, kafkaNorthboundBolt, parallelism)\n-                .shuffleGrouping(BOLT_ID_REROUTE_QUEUE, STREAM_NORTHBOUND_ID);\n-\n-        return topologyBuilder.createTopology();\n     }\n \n     private void coordinator(TopologyBuilder topologyBuilder, int parallelism) {\n         topologyBuilder.setSpout(CoordinatorSpout.ID, new CoordinatorSpout());\n         topologyBuilder.setBolt(CoordinatorBolt.ID, new CoordinatorBolt(), parallelism)\n                 .allGrouping(CoordinatorSpout.ID)\n-                .fieldsGrouping(BOLT_ID_REROUTE_QUEUE, CoordinatorBolt.INCOME_STREAM, FIELDS_KEY);\n+                .fieldsGrouping(FlowRerouteQueueBolt.BOLT_ID, CoordinatorBolt.INCOME_STREAM, FIELDS_KEY);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjAwMA==", "url": "https://github.com/telstra/open-kilda/pull/3295#discussion_r396416000", "bodyText": "I'm a little bit worried about setting parallelism to 2 in almost all Bolts and spouts. We need to test it carefully", "author": "niksv", "createdAt": "2020-03-23T12:32:33Z", "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java", "diffHunk": "@@ -53,9 +69,12 @@ public StormTopology createTopology() {\n \n         TopologyBuilder topologyBuilder = new TopologyBuilder();\n \n-        final Integer parallelism = topologyConfig.getParallelism();\n+        final Integer parallelism = topologyConfig.getNewParallelism();", "originalCommit": "b6cee0dc1a29d2cc94a82f942f8680dd2342758a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1ODQzOQ==", "url": "https://github.com/telstra/open-kilda/pull/3295#discussion_r401758439", "bodyText": "Design for this feature also include parallelism support. We are working on testing.", "author": "rozdy", "createdAt": "2020-04-01T16:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "0ccbc189e328f1fdb1c98a0924aff96fb7027148", "chunk": "diff --git a/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java b/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java\nindex 7cd7cfeb3..ebeb72b0d 100644\n--- a/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java\n+++ b/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/RerouteTopology.java\n\n@@ -80,49 +77,61 @@ public class RerouteTopology extends AbstractTopology<RerouteTopologyConfig> {\n         PersistenceManager persistenceManager = PersistenceProvider.getInstance()\n                 .createPersistenceManager(configurationProvider);\n \n+        rerouteBolt(topologyBuilder, parallelism, persistenceManager);\n+        rerouteQueueBolt(topologyBuilder, parallelism, persistenceManager);\n+        timeWindowBolt(topologyBuilder);\n+\n+        KafkaBolt<String, Message> kafkaFlowBolt = buildKafkaBolt(topologyConfig.getKafkaFlowTopic());\n+        topologyBuilder.setBolt(BOLT_ID_KAFKA_FLOW, kafkaFlowBolt, parallelism)\n+                .shuffleGrouping(RerouteBolt.BOLT_ID, STREAM_SWAP_ID);\n+\n+        KafkaBolt<String, Message> kafkaFlowHsBolt = buildKafkaBolt(topologyConfig.getKafkaFlowHsTopic());\n+        topologyBuilder.setBolt(BOLT_ID_KAFKA_FLOWHS, kafkaFlowHsBolt, parallelism)\n+                .shuffleGrouping(FlowRerouteQueueBolt.BOLT_ID, FlowRerouteQueueBolt.STREAM_FLOWHS_ID);\n+\n+        KafkaBolt<String, Message> kafkaNorthboundBolt = buildKafkaBolt(topologyConfig.getKafkaNorthboundTopic());\n+        topologyBuilder.setBolt(BOLT_ID_KAFKA_NB, kafkaNorthboundBolt, parallelism)\n+                .shuffleGrouping(FlowRerouteQueueBolt.BOLT_ID, STREAM_NORTHBOUND_ID);\n+\n+        return topologyBuilder.createTopology();\n+    }\n+\n+    private void rerouteBolt(TopologyBuilder topologyBuilder, int parallelism,\n+                             PersistenceManager persistenceManager) {\n         RerouteBolt rerouteBolt = new RerouteBolt(persistenceManager);\n-        topologyBuilder.setBolt(BOLT_ID_REROUTE, rerouteBolt, parallelism)\n+        topologyBuilder.setBolt(RerouteBolt.BOLT_ID, rerouteBolt, parallelism)\n                 .shuffleGrouping(SPOUT_ID_REROUTE);\n+    }\n \n+    private void rerouteQueueBolt(TopologyBuilder topologyBuilder, int parallelism,\n+                                  PersistenceManager persistenceManager) {\n         int rerouteTimeout = (int) TimeUnit.SECONDS.toMillis(topologyConfig.getRerouteTimeoutSeconds());\n         FlowRerouteQueueBolt flowRerouteQueueBolt = new FlowRerouteQueueBolt(persistenceManager,\n                 topologyConfig.getDefaultFlowPriority(),\n                 topologyConfig.getMaxRetry(), rerouteTimeout);\n-        topologyBuilder.setBolt(BOLT_ID_REROUTE_QUEUE, flowRerouteQueueBolt, parallelism)\n-                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_REQUEST_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n-                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_MANUAL_REROUTE_REQUEST_ID,\n+        topologyBuilder.setBolt(FlowRerouteQueueBolt.BOLT_ID, flowRerouteQueueBolt, parallelism)\n+                .fieldsGrouping(RerouteBolt.BOLT_ID, STREAM_REROUTE_REQUEST_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .fieldsGrouping(RerouteBolt.BOLT_ID, STREAM_MANUAL_REROUTE_REQUEST_ID,\n                         new Fields(RerouteBolt.FLOW_ID_FIELD))\n-                .fieldsGrouping(BOLT_ID_REROUTE, STREAM_REROUTE_RESULT_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n-                .allGrouping(BOLT_ID_TIME_WINDOW)\n+                .fieldsGrouping(RerouteBolt.BOLT_ID, STREAM_REROUTE_RESULT_ID, new Fields(RerouteBolt.FLOW_ID_FIELD))\n+                .allGrouping(TimeWindowBolt.BOLT_ID)\n                 .directGrouping(CoordinatorBolt.ID);\n+    }\n \n+    private void timeWindowBolt(TopologyBuilder topologyBuilder) {\n         TimeWindowBolt timeWindowBolt = new TimeWindowBolt(topologyConfig.getRerouteThrottlingMinDelay(),\n                 topologyConfig.getRerouteThrottlingMaxDelay());\n         // Time window bolt should use parallelism 1 to provide synchronisation for all reroute queue bolts\n-        topologyBuilder.setBolt(BOLT_ID_TIME_WINDOW, timeWindowBolt, 1)\n-                .allGrouping(BOLT_ID_REROUTE_QUEUE, STREAM_TIME_WINDOW_EVENT_ID)\n+        topologyBuilder.setBolt(TimeWindowBolt.BOLT_ID, timeWindowBolt, 1)\n+                .allGrouping(FlowRerouteQueueBolt.BOLT_ID, STREAM_TIME_WINDOW_EVENT_ID)\n                 .allGrouping(CoordinatorSpout.ID);\n-\n-        KafkaBolt<String, Message> kafkaFlowBolt = buildKafkaBolt(topologyConfig.getKafkaFlowTopic());\n-        topologyBuilder.setBolt(BOLT_ID_KAFKA_FLOW, kafkaFlowBolt, parallelism)\n-                .shuffleGrouping(BOLT_ID_REROUTE, STREAM_SWAP_ID);\n-\n-        KafkaBolt<String, Message> kafkaFlowHsBolt = buildKafkaBolt(topologyConfig.getKafkaFlowHsTopic());\n-        topologyBuilder.setBolt(BOLT_ID_KAFKA_FLOWHS, kafkaFlowHsBolt, parallelism)\n-                .shuffleGrouping(BOLT_ID_REROUTE_QUEUE, FlowRerouteQueueBolt.STREAM_FLOWHS_ID);\n-\n-        KafkaBolt<String, Message> kafkaNorthboundBolt = buildKafkaBolt(topologyConfig.getKafkaNorthboundTopic());\n-        topologyBuilder.setBolt(BOLT_ID_KAFKA_NB, kafkaNorthboundBolt, parallelism)\n-                .shuffleGrouping(BOLT_ID_REROUTE_QUEUE, STREAM_NORTHBOUND_ID);\n-\n-        return topologyBuilder.createTopology();\n     }\n \n     private void coordinator(TopologyBuilder topologyBuilder, int parallelism) {\n         topologyBuilder.setSpout(CoordinatorSpout.ID, new CoordinatorSpout());\n         topologyBuilder.setBolt(CoordinatorBolt.ID, new CoordinatorBolt(), parallelism)\n                 .allGrouping(CoordinatorSpout.ID)\n-                .fieldsGrouping(BOLT_ID_REROUTE_QUEUE, CoordinatorBolt.INCOME_STREAM, FIELDS_KEY);\n+                .fieldsGrouping(FlowRerouteQueueBolt.BOLT_ID, CoordinatorBolt.INCOME_STREAM, FIELDS_KEY);\n     }\n \n     /**\n"}}, {"oid": "0ccbc189e328f1fdb1c98a0924aff96fb7027148", "url": "https://github.com/telstra/open-kilda/commit/0ccbc189e328f1fdb1c98a0924aff96fb7027148", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-03-27T14:03:42Z", "type": "forcePushed"}, {"oid": "572336e16b243b39117b328bbe914c37303771a1", "url": "https://github.com/telstra/open-kilda/commit/572336e16b243b39117b328bbe914c37303771a1", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-03-31T10:01:14Z", "type": "forcePushed"}, {"oid": "5db3ca0208460b90701d6fd09b760c9271d8a1b8", "url": "https://github.com/telstra/open-kilda/commit/5db3ca0208460b90701d6fd09b760c9271d8a1b8", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-01T10:24:35Z", "type": "forcePushed"}, {"oid": "f65d9c588ba820ea534ba353c927374756d5b811", "url": "https://github.com/telstra/open-kilda/commit/f65d9c588ba820ea534ba353c927374756d5b811", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-01T14:18:29Z", "type": "forcePushed"}, {"oid": "22bfaeb48cf34765be879033eb56f17f53133927", "url": "https://github.com/telstra/open-kilda/commit/22bfaeb48cf34765be879033eb56f17f53133927", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-01T16:37:21Z", "type": "forcePushed"}, {"oid": "83f4c5be0f6b67d663aef52c88207690832a9468", "url": "https://github.com/telstra/open-kilda/commit/83f4c5be0f6b67d663aef52c88207690832a9468", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-02T09:58:49Z", "type": "forcePushed"}, {"oid": "900f499f5e9bec01fdeba94151b2162665b950b9", "url": "https://github.com/telstra/open-kilda/commit/900f499f5e9bec01fdeba94151b2162665b950b9", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-03T10:09:18Z", "type": "forcePushed"}, {"oid": "d5254d24ca7cd601ffd7b02abf2726843bcc6ae7", "url": "https://github.com/telstra/open-kilda/commit/d5254d24ca7cd601ffd7b02abf2726843bcc6ae7", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-03T11:46:30Z", "type": "forcePushed"}, {"oid": "719c3d6c11ef289c5ebbe6e89d3065fb632734e7", "url": "https://github.com/telstra/open-kilda/commit/719c3d6c11ef289c5ebbe6e89d3065fb632734e7", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-07T11:28:00Z", "type": "forcePushed"}, {"oid": "1e87054ada9831c11d24efbb2a133a9e78fe9379", "url": "https://github.com/telstra/open-kilda/commit/1e87054ada9831c11d24efbb2a133a9e78fe9379", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-07T18:47:45Z", "type": "forcePushed"}, {"oid": "f53d9da3f9f82003c37325a6ad81bfa721a53031", "url": "https://github.com/telstra/open-kilda/commit/f53d9da3f9f82003c37325a6ad81bfa721a53031", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-08T08:12:26Z", "type": "forcePushed"}, {"oid": "d804ad2a55fba4c8a6924943dd7d1f94ca60ee83", "url": "https://github.com/telstra/open-kilda/commit/d804ad2a55fba4c8a6924943dd7d1f94ca60ee83", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-08T11:37:46Z", "type": "forcePushed"}, {"oid": "9354b55fa0f18c5ff872c1435ba0f435c5c0a7b0", "url": "https://github.com/telstra/open-kilda/commit/9354b55fa0f18c5ff872c1435ba0f435c5c0a7b0", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-08T14:56:53Z", "type": "forcePushed"}, {"oid": "7a9b03887024b0cc8b3e14597217d7d7cd4d95c9", "url": "https://github.com/telstra/open-kilda/commit/7a9b03887024b0cc8b3e14597217d7d7cd4d95c9", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-08T16:40:22Z", "type": "forcePushed"}, {"oid": "be7424638982ad30c37bc28fbc50e8d3b9df154b", "url": "https://github.com/telstra/open-kilda/commit/be7424638982ad30c37bc28fbc50e8d3b9df154b", "message": "Remove hotfix implementation of flow reroute retry mechanism", "committedDate": "2020-04-09T12:48:02Z", "type": "commit"}, {"oid": "9d43b030436fb5bc33b6fbfedff7caf626acccd8", "url": "https://github.com/telstra/open-kilda/commit/9d43b030436fb5bc33b6fbfedff7caf626acccd8", "message": "Implement flow reroute retry mechanism\n\n* rework reroute topology to support parallelism and handle manual reroute requests\n* rework flow H&S reroute implementation to send reroute result to reroute topology", "committedDate": "2020-04-09T12:48:02Z", "type": "commit"}, {"oid": "09a5dd9a8a45c932163b3275ede43463c51f2316", "url": "https://github.com/telstra/open-kilda/commit/09a5dd9a8a45c932163b3275ede43463c51f2316", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-09T12:49:45Z", "type": "commit"}, {"oid": "09a5dd9a8a45c932163b3275ede43463c51f2316", "url": "https://github.com/telstra/open-kilda/commit/09a5dd9a8a45c932163b3275ede43463c51f2316", "message": "improve test according to #3295 (#3300)", "committedDate": "2020-04-09T12:49:45Z", "type": "forcePushed"}]}