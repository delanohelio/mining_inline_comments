{"pr_number": 3521, "pr_title": "Repripritize reroute requests", "pr_createdAt": "2020-06-03T13:36:12Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3521", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NzkxNg==", "url": "https://github.com/telstra/open-kilda/pull/3521#discussion_r434577916", "bodyText": "What if we have the same bandwidths. Shouldn't we then compare by creation time?", "author": "dpoltavets", "createdAt": "2020-06-03T13:45:01Z", "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java", "diffHunk": "@@ -228,15 +230,31 @@ public int compare(FlowThrottlingData throttlingDataA, FlowThrottlingData thrott\n             int priorityB = throttlingDataB.getPriority() == null ? defaultFlowPriority : throttlingDataB.getPriority();\n             Instant timeCreateA = throttlingDataA.getTimeCreate();\n             Instant timeCreateB = throttlingDataB.getTimeCreate();\n+            PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();\n+            PathComputationStrategy pathComputationStrategyB = throttlingDataB.getPathComputationStrategy();\n \n-            if (priorityA == priorityB && (timeCreateA != null || timeCreateB != null)) {\n-                if (timeCreateA == null) {\n-                    return -1;\n+            if (priorityA == priorityB) {\n+                if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH\n+                        && pathComputationStrategyB == COST_AND_AVAILABLE_BANDWIDTH) {\n+                    return Long.compare(throttlingDataB.getBandwidth(), throttlingDataA.getBandwidth());", "originalCommit": "12df6fbe479093a1f199e39f8e0ba71ed859431a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNjM3OA==", "url": "https://github.com/telstra/open-kilda/pull/3521#discussion_r434606378", "bodyText": "Fixed", "author": "rozdy", "createdAt": "2020-06-03T14:22:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NzkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "36e03f04e6b41cc40fd2b3d7952c4dfb3803b907", "chunk": "diff --git a/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java b/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java\nindex 02a6d32fe..45975824e 100644\n--- a/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java\n+++ b/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java\n\n@@ -232,11 +232,15 @@ public class RerouteQueueService {\n             Instant timeCreateB = throttlingDataB.getTimeCreate();\n             PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();\n             PathComputationStrategy pathComputationStrategyB = throttlingDataB.getPathComputationStrategy();\n+            long bandwidthA = throttlingDataA.getBandwidth();\n+            long bandwidthB = throttlingDataB.getBandwidth();\n \n             if (priorityA == priorityB) {\n                 if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH\n                         && pathComputationStrategyB == COST_AND_AVAILABLE_BANDWIDTH) {\n-                    return Long.compare(throttlingDataB.getBandwidth(), throttlingDataA.getBandwidth());\n+                    if (bandwidthA != bandwidthB) {\n+                        return Long.compare(bandwidthB, bandwidthA);\n+                    }\n                 } else {\n                     if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH) {\n                         return 1;\n"}}, {"oid": "36e03f04e6b41cc40fd2b3d7952c4dfb3803b907", "url": "https://github.com/telstra/open-kilda/commit/36e03f04e6b41cc40fd2b3d7952c4dfb3803b907", "message": "Repripritize reroute requests\n\nFlows with COST_AND_AVAILABLE_BANDWIDTH path computation strategy should be rerouted from low to high bandwidth", "committedDate": "2020-06-03T14:19:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzOTg4Nw==", "url": "https://github.com/telstra/open-kilda/pull/3521#discussion_r435839887", "bodyText": "As for me it should be separate comparator joined to existing via thenComparing.", "author": "surabujin", "createdAt": "2020-06-05T10:42:31Z", "path": "src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java", "diffHunk": "@@ -228,15 +230,35 @@ public int compare(FlowThrottlingData throttlingDataA, FlowThrottlingData thrott\n             int priorityB = throttlingDataB.getPriority() == null ? defaultFlowPriority : throttlingDataB.getPriority();\n             Instant timeCreateA = throttlingDataA.getTimeCreate();\n             Instant timeCreateB = throttlingDataB.getTimeCreate();\n+            PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();", "originalCommit": "36e03f04e6b41cc40fd2b3d7952c4dfb3803b907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2MTQwNg==", "url": "https://github.com/telstra/open-kilda/pull/3521#discussion_r435961406", "bodyText": "Reworked", "author": "rozdy", "createdAt": "2020-06-05T14:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzOTg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a2b3902244b65c298a996ddef018992e9ec991b9", "chunk": "diff --git a/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java b/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java\nindex 45975824e..dc9d531dc 100644\n--- a/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java\n+++ b/src-java/reroute-topology/reroute-storm-topology/src/main/java/org/openkilda/wfm/topology/reroute/service/RerouteQueueService.java\n\n@@ -223,45 +226,41 @@ public class RerouteQueueService {\n         return reroutes;\n     }\n \n-    private class FlowPriorityComparator implements Comparator<FlowThrottlingData> {\n-        @Override\n-        public int compare(FlowThrottlingData throttlingDataA, FlowThrottlingData throttlingDataB) {\n-            int priorityA = throttlingDataA.getPriority() == null ? defaultFlowPriority : throttlingDataA.getPriority();\n-            int priorityB = throttlingDataB.getPriority() == null ? defaultFlowPriority : throttlingDataB.getPriority();\n-            Instant timeCreateA = throttlingDataA.getTimeCreate();\n-            Instant timeCreateB = throttlingDataB.getTimeCreate();\n-            PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();\n-            PathComputationStrategy pathComputationStrategyB = throttlingDataB.getPathComputationStrategy();\n-            long bandwidthA = throttlingDataA.getBandwidth();\n-            long bandwidthB = throttlingDataB.getBandwidth();\n+    private int compareAvailableBandwidth(FlowThrottlingData throttlingDataA, FlowThrottlingData throttlingDataB) {\n+        PathComputationStrategy pathComputationStrategyA = throttlingDataA.getPathComputationStrategy();\n+        PathComputationStrategy pathComputationStrategyB = throttlingDataB.getPathComputationStrategy();\n+        long bandwidthA = throttlingDataA.getBandwidth();\n+        long bandwidthB = throttlingDataB.getBandwidth();\n \n-            if (priorityA == priorityB) {\n-                if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH\n-                        && pathComputationStrategyB == COST_AND_AVAILABLE_BANDWIDTH) {\n-                    if (bandwidthA != bandwidthB) {\n-                        return Long.compare(bandwidthB, bandwidthA);\n-                    }\n-                } else {\n-                    if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH) {\n-                        return 1;\n-                    }\n-                    if (pathComputationStrategyB == COST_AND_AVAILABLE_BANDWIDTH) {\n-                        return -1;\n-                    }\n-                }\n-\n-                if (timeCreateA != null || timeCreateB != null) {\n-                    if (timeCreateA == null) {\n-                        return -1;\n-                    }\n-                    if (timeCreateB == null) {\n-                        return 1;\n-                    }\n-                    return timeCreateA.compareTo(timeCreateB);\n-                }\n+        if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH\n+                && pathComputationStrategyB == COST_AND_AVAILABLE_BANDWIDTH) {\n+            if (bandwidthA != bandwidthB) {\n+                return Long.compare(bandwidthB, bandwidthA);\n+            }\n+        } else {\n+            if (pathComputationStrategyA == COST_AND_AVAILABLE_BANDWIDTH) {\n+                return 1;\n             }\n+            if (pathComputationStrategyB == COST_AND_AVAILABLE_BANDWIDTH) {\n+                return -1;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    private int compareTimeCreate(FlowThrottlingData throttlingDataA, FlowThrottlingData throttlingDataB) {\n+        Instant timeCreateA = throttlingDataA.getTimeCreate();\n+        Instant timeCreateB = throttlingDataB.getTimeCreate();\n \n-            return Integer.compare(priorityA, priorityB);\n+        if (timeCreateA != null || timeCreateB != null) {\n+            if (timeCreateA == null) {\n+                return -1;\n+            }\n+            if (timeCreateB == null) {\n+                return 1;\n+            }\n+            return timeCreateA.compareTo(timeCreateB);\n         }\n+        return 0;\n     }\n }\n"}}, {"oid": "a2b3902244b65c298a996ddef018992e9ec991b9", "url": "https://github.com/telstra/open-kilda/commit/a2b3902244b65c298a996ddef018992e9ec991b9", "message": "Repripritize reroute requests\n\nFlows with COST_AND_AVAILABLE_BANDWIDTH path computation strategy should be rerouted from low to high bandwidth", "committedDate": "2020-06-05T14:26:55Z", "type": "forcePushed"}, {"oid": "d107aa2273ceb7ca20b200476a9a2e1f50f6df7d", "url": "https://github.com/telstra/open-kilda/commit/d107aa2273ceb7ca20b200476a9a2e1f50f6df7d", "message": "Repripritize reroute requests\n\nFlows with COST_AND_AVAILABLE_BANDWIDTH path computation strategy should be rerouted from low to high bandwidth", "committedDate": "2020-06-09T11:27:01Z", "type": "forcePushed"}, {"oid": "95efb54ad8d4adb9a9b1c1d4a6f27a69cb533473", "url": "https://github.com/telstra/open-kilda/commit/95efb54ad8d4adb9a9b1c1d4a6f27a69cb533473", "message": "Repripritize reroute requests\n\nFlows with COST_AND_AVAILABLE_BANDWIDTH path computation strategy should be rerouted from low to high bandwidth", "committedDate": "2020-06-09T13:04:44Z", "type": "commit"}, {"oid": "95efb54ad8d4adb9a9b1c1d4a6f27a69cb533473", "url": "https://github.com/telstra/open-kilda/commit/95efb54ad8d4adb9a9b1c1d4a6f27a69cb533473", "message": "Repripritize reroute requests\n\nFlows with COST_AND_AVAILABLE_BANDWIDTH path computation strategy should be rerouted from low to high bandwidth", "committedDate": "2020-06-09T13:04:44Z", "type": "forcePushed"}]}