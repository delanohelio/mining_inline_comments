{"pr_number": 3863, "pr_title": "Network 0-Downtime PoC", "pr_createdAt": "2020-11-18T21:33:18Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3863", "timeline": [{"oid": "ad89c26475c2a70128bd1b3c98405cb282f0a53b", "url": "https://github.com/telstra/open-kilda/commit/ad89c26475c2a70128bd1b3c98405cb282f0a53b", "message": "Network 0-Downtime PoC", "committedDate": "2020-11-25T12:20:16Z", "type": "forcePushed"}, {"oid": "1bda013536052a1774b7e4f988f150beb98ddf8c", "url": "https://github.com/telstra/open-kilda/commit/1bda013536052a1774b7e4f988f150beb98ddf8c", "message": "Network 0-Downtime PoC", "committedDate": "2020-11-26T07:05:03Z", "type": "forcePushed"}, {"oid": "bf39c56d469af24c8efb23e9db112d9ed0ecc1d8", "url": "https://github.com/telstra/open-kilda/commit/bf39c56d469af24c8efb23e9db112d9ed0ecc1d8", "message": "Network zero-downtime upgrade", "committedDate": "2020-11-27T12:01:22Z", "type": "forcePushed"}, {"oid": "ef8c90b05df30806eb38592f63ecac787dbdfabd", "url": "https://github.com/telstra/open-kilda/commit/ef8c90b05df30806eb38592f63ecac787dbdfabd", "message": "Network zero-downtime upgrade", "committedDate": "2020-11-28T08:13:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3Mjc2NQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r534172765", "bodyText": "I think we do not need emit() here because we already send tuple to ZkBolt in handleLifeCycleEvent()", "author": "niksv", "createdAt": "2020-12-02T13:39:14Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -97,12 +102,20 @@\n     public static final String STREAM_BFD_WORKER_ID = \"worker\";\n     public static final Fields STREAM_BFD_WORKER_FIELDS = new Fields(FIELD_ID_KEY, FIELD_ID_INPUT, FIELD_ID_CONTEXT);\n \n+    public static final String STREAM_ZOOKEEPER_ID = ZkStreams.ZK.toString();\n+    public static final Fields STREAM_ZOOKEEPER_FIELDS = new Fields(ZooKeeperBolt.FIELD_ID_STATE,\n+            ZooKeeperBolt.FIELD_ID_CONTEXT);\n+\n     @Override\n     protected void handleInput(Tuple input) throws Exception {\n         String source = input.getSourceComponent();\n         if (ComponentId.INPUT_SPEAKER.toString().equals(source)) {\n             Message message = pullValue(input, FIELD_ID_INPUT, Message.class);\n             speakerMessage(input, message);\n+        } else if (ComponentId.INPUT_ZOOKEEPER.toString().equals(source)) {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_LIFECYCLE_EVENT);\n+            handleLifeCycleEvent(event);\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));", "originalCommit": "ef8c90b05df30806eb38592f63ecac787dbdfabd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY3OTg3Ng==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547679876", "bodyText": "Removed.", "author": "dpoltavets", "createdAt": "2020-12-23T05:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3Mjc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9e6906a0881d9c2e5bff1b6c9bb8f9cf1880080", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java\nindex 0b728ce42..1cfff9c79 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java\n\n@@ -112,7 +113,7 @@ public class SpeakerRouter extends AbstractBolt {\n         if (ComponentId.INPUT_SPEAKER.toString().equals(source)) {\n             Message message = pullValue(input, FIELD_ID_INPUT, Message.class);\n             speakerMessage(input, message);\n-        } else if (ComponentId.INPUT_ZOOKEEPER.toString().equals(source)) {\n+        } else if (ZooKeeperSpout.BOLT_ID.equals(source)) {\n             LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_LIFECYCLE_EVENT);\n             handleLifeCycleEvent(event);\n             emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n"}}, {"oid": "35227fe26fcdba4d5016f6c5a55c27f77a5a3765", "url": "https://github.com/telstra/open-kilda/commit/35227fe26fcdba4d5016f6c5a55c27f77a5a3765", "message": "Replaced History Spout with History Bolt", "committedDate": "2020-12-03T08:33:52Z", "type": "forcePushed"}, {"oid": "0b32d31a67859315ffcf69a67b4b3474a7646bac", "url": "https://github.com/telstra/open-kilda/commit/0b32d31a67859315ffcf69a67b4b3474a7646bac", "message": "Replaced History Spout with History Bolt", "committedDate": "2020-12-07T09:38:08Z", "type": "forcePushed"}, {"oid": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72", "url": "https://github.com/telstra/open-kilda/commit/bae1312bc9c71e61cf077f0f9c966f14f96a3b72", "message": "Replaced History Spout with History Bolt", "committedDate": "2020-12-09T11:51:08Z", "type": "forcePushed"}, {"oid": "4d0df95603988c004ba511e169beb3f0fb658c35", "url": "https://github.com/telstra/open-kilda/commit/4d0df95603988c004ba511e169beb3f0fb658c35", "message": "Replaced History Spout with History Bolt", "committedDate": "2020-12-11T15:00:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NDMzMA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r540864330", "bodyText": "We already have topology name. Why for we need one more it's variant? I mean that our usual topology name can differ from zk-topology-name it will increase tangledness. If it is going to always match with the existing name, why we need one more place defining this name?", "author": "surabujin", "createdAt": "2020-12-11T10:58:30Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -404,6 +433,23 @@ private void historyBolt(TopologyBuilder topology, int scaleFactor) {\n                 .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_HISTORY_ID);\n     }\n \n+    private void zookeeperBolt(TopologyBuilder topology) {\n+        ZooKeeperBolt zooKeeperBolt = new ZooKeeperBolt(topologyConfig.getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        topology.setBolt(ComponentId.ZOOKEEPER_OUTPUT.toString(), zooKeeperBolt, 1)\n+                .shuffleGrouping(SpeakerRouter.BOLT_ID, SpeakerRouter.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(WatcherHandler.BOLT_ID, WatcherHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(WatchListHandler.BOLT_ID, WatchListHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(DecisionMakerHandler.BOLT_ID, DecisionMakerHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_ZOOKEEPER_ID)\n+                .shuffleGrouping(NetworkHistory.BOLT_ID, NetworkHistory.STREAM_ZOOKEEPER_ID);\n+    }\n+\n+    @Override\n+    protected String getZkTopoName() {\n+        return \"network\";", "originalCommit": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MDYxNA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547680614", "bodyText": "Removed. getTopologyName() method is used now.", "author": "dpoltavets", "createdAt": "2020-12-23T05:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NDMzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzUwNjQyNw==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r567506427", "bodyText": "+1. We definitely need to unify topology ids, names, etc. BTW, keep in mind that on topology submission the topology name can be overwritten.", "author": "sergii-iakovenko", "createdAt": "2021-02-01T00:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NDMzMA=="}], "type": "inlineReview", "revised_code": {"commit": "4d0df95603988c004ba511e169beb3f0fb658c35", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\nindex 9ad588ac8..7824f57cd 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n\n@@ -328,108 +319,108 @@ public class NetworkTopology extends AbstractTopology<NetworkTopologyConfig> {\n                 .fieldsGrouping(GrpcRouter.BOLT_ID, GrpcRouter.STREAM_BFD_WORKER_ID, keyGrouping);\n     }\n \n-    private void uniIslHandler(TopologyBuilder topology, int scaleFactor) {\n+    private void uniIslHandler(TopologyBuilder topology) {\n         UniIslHandler bolt = new UniIslHandler();\n         Fields portGrouping = new Fields(PortHandler.FIELD_ID_DATAPATH, PortHandler.FIELD_ID_PORT_NUMBER);\n         Fields bfdPortGrouping = new Fields(BfdHub.FIELD_ID_DATAPATH, BfdHub.FIELD_ID_PORT_NUMBER);\n         Fields islGrouping = new Fields(IslHandler.FIELD_ID_DATAPATH, IslHandler.FIELD_ID_PORT_NUMBER);\n-        topology.setBolt(UniIslHandler.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, UniIslHandler.BOLT_ID)\n                 .fieldsGrouping(PortHandler.BOLT_ID, portGrouping)\n                 .fieldsGrouping(BfdHub.BOLT_ID, BfdHub.STREAM_UNIISL_ID, bfdPortGrouping)\n                 .fieldsGrouping(IslHandler.BOLT_ID, IslHandler.STREAM_UNIISL_ID, islGrouping);\n     }\n \n-    private void islHandler(TopologyBuilder topology, int scaleFactor) {\n+    private void islHandler(TopologyBuilder topology) {\n         IslHandler bolt = new IslHandler(persistenceManager, options);\n         Fields islGrouping = new Fields(UniIslHandler.FIELD_ID_ISL_SOURCE, UniIslHandler.FIELD_ID_ISL_DEST);\n-        topology.setBolt(IslHandler.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, IslHandler.BOLT_ID)\n                 .fieldsGrouping(UniIslHandler.BOLT_ID, islGrouping)\n                 .fieldsGrouping(SpeakerRouter.BOLT_ID, SpeakerRouter.STREAM_ISL_ID, islGrouping)\n                 .directGrouping(SpeakerRulesWorker.BOLT_ID, SpeakerRulesWorker.STREAM_HUB_ID);\n     }\n \n-    private void outputSpeaker(TopologyBuilder topology, int scaleFactor) {\n+    private void outputSpeaker(TopologyBuilder topology) {\n         SpeakerEncoder bolt = new SpeakerEncoder();\n-        topology.setBolt(SpeakerEncoder.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, SpeakerEncoder.BOLT_ID)\n                 .shuffleGrouping(WatcherHandler.BOLT_ID, WatcherHandler.STREAM_SPEAKER_ID)\n                 .shuffleGrouping(BfdWorker.BOLT_ID, BfdWorker.STREAM_SPEAKER_ID);\n \n         KafkaBolt output = buildKafkaBolt(kafkaTopics.getSpeakerDiscoTopic(),\n                 getZkTopoName(), getConfig().getBlueGreenMode());\n-        topology.setBolt(ComponentId.SPEAKER_OUTPUT.toString(), output, scaleFactor)\n+        declareBolt(topology, output, ComponentId.SPEAKER_OUTPUT.toString())\n                 .shuffleGrouping(SpeakerEncoder.BOLT_ID);\n     }\n \n-    private void outputSwitchManager(TopologyBuilder topology, int scaleFactor) {\n+    private void outputSwitchManager(TopologyBuilder topology) {\n         SwitchManagerEncoder bolt = new SwitchManagerEncoder();\n-        topology.setBolt(SwitchManagerEncoder.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, SwitchManagerEncoder.BOLT_ID)\n                 .shuffleGrouping(SwitchManagerWorker.BOLT_ID);\n \n         KafkaBolt output = buildKafkaBolt(kafkaTopics.getTopoSwitchManagerNetworkTopic(),\n                 getZkTopoName(), getConfig().getBlueGreenMode());\n-        topology.setBolt(ComponentId.SWMANAGER_OUTPUT.toString(), output, scaleFactor)\n+        declareBolt(topology, output, ComponentId.SWMANAGER_OUTPUT.toString())\n                 .shuffleGrouping(SwitchManagerEncoder.BOLT_ID);\n     }\n \n-    private void outputSpeakerRules(TopologyBuilder topology, int scaleFactor) {\n+    private void outputSpeakerRules(TopologyBuilder topology) {\n         SpeakerRulesEncoder encoderRules = new SpeakerRulesEncoder();\n-        topology.setBolt(SpeakerRulesEncoder.BOLT_ID, encoderRules, scaleFactor)\n+        declareBolt(topology, encoderRules, SpeakerRulesEncoder.BOLT_ID)\n                 .shuffleGrouping(SpeakerRulesWorker.BOLT_ID);\n \n         KafkaBolt outputRules = buildKafkaBolt(kafkaTopics.getSpeakerTopic(),\n                 getZkTopoName(), getConfig().getBlueGreenMode());\n-        topology.setBolt(ComponentId.SPEAKER_RULES_OUTPUT.toString(), outputRules, scaleFactor)\n+        declareBolt(topology, outputRules, ComponentId.SPEAKER_RULES_OUTPUT.toString())\n                 .shuffleGrouping(SpeakerRulesEncoder.BOLT_ID);\n \n     }\n \n-    private void outputReroute(TopologyBuilder topology, int scaleFactor) {\n+    private void outputReroute(TopologyBuilder topology) {\n         RerouteEncoder bolt = new RerouteEncoder();\n-        topology.setBolt(RerouteEncoder.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, RerouteEncoder.BOLT_ID)\n                 .shuffleGrouping(IslHandler.BOLT_ID, IslHandler.STREAM_REROUTE_ID)\n                 .shuffleGrouping(SwitchHandler.BOLT_ID, SwitchHandler.STREAM_REROUTE_ID);\n \n         KafkaBolt output = buildKafkaBolt(kafkaTopics.getTopoRerouteTopic(),\n                 getZkTopoName(), getConfig().getBlueGreenMode());\n-        topology.setBolt(ComponentId.REROUTE_OUTPUT.toString(), output, scaleFactor)\n+        declareBolt(topology, output, ComponentId.REROUTE_OUTPUT.toString())\n                 .shuffleGrouping(RerouteEncoder.BOLT_ID);\n     }\n \n-    private void outputStatus(TopologyBuilder topology, int scaleFactor) {\n+    private void outputStatus(TopologyBuilder topology) {\n         StatusEncoder bolt = new StatusEncoder();\n-        topology.setBolt(StatusEncoder.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, StatusEncoder.BOLT_ID)\n                 .shuffleGrouping(IslHandler.BOLT_ID, IslHandler.STREAM_STATUS_ID);\n \n         KafkaBolt output = buildKafkaBolt(kafkaTopics.getNetworkIslStatusTopic(),\n                 getZkTopoName(), getConfig().getBlueGreenMode());\n-        topology.setBolt(ComponentId.STATUS_OUTPUT.toString(), output, scaleFactor)\n+        declareBolt(topology, output, ComponentId.STATUS_OUTPUT.toString())\n                 .shuffleGrouping(StatusEncoder.BOLT_ID);\n     }\n \n-    private void outputNorthbound(TopologyBuilder topology, int scaleFactor) {\n+    private void outputNorthbound(TopologyBuilder topology) {\n         NorthboundEncoder bolt = new NorthboundEncoder();\n-        topology.setBolt(NorthboundEncoder.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, NorthboundEncoder.BOLT_ID)\n                 .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_NORTHBOUND_ID);\n \n         KafkaBolt kafkaNorthboundBolt = buildKafkaBolt(kafkaTopics.getNorthboundTopic(),\n                 getZkTopoName(), getConfig().getBlueGreenMode());\n-        topology.setBolt(ComponentId.NB_OUTPUT.toString(), kafkaNorthboundBolt, scaleFactor)\n+        declareBolt(topology, kafkaNorthboundBolt, ComponentId.NB_OUTPUT.toString())\n                 .shuffleGrouping(NorthboundEncoder.BOLT_ID);\n     }\n \n-    private void outputGrpc(TopologyBuilder topology, int scaleFactor) {\n+    private void outputGrpc(TopologyBuilder topology) {\n         GrpcEncoder encoder = new GrpcEncoder();\n-        topology.setBolt(GrpcEncoder.BOLT_ID, encoder, scaleFactor)\n+        declareBolt(topology, encoder, GrpcEncoder.BOLT_ID)\n                 .shuffleGrouping(BfdWorker.BOLT_ID, BfdWorker.STREAM_GRPC_ID);\n \n         KafkaBolt<String, Message> output = makeKafkaBolt(kafkaTopics.getGrpcSpeakerTopic(), MessageSerializer.class);\n-        topology.setBolt(ComponentId.GRPC_OUTPUT.toString(), output, scaleFactor)\n+        declareBolt(topology, output, ComponentId.GRPC_OUTPUT.toString())\n                 .shuffleGrouping(GrpcEncoder.BOLT_ID);\n     }\n \n-    private void historyBolt(TopologyBuilder topology, int scaleFactor) {\n+    private void historyBolt(TopologyBuilder topology) {\n         HistoryHandler bolt = new HistoryHandler(persistenceManager);\n-        topology.setBolt(ComponentId.HISTORY_HANDLER.toString(), bolt, scaleFactor)\n+        declareBolt(topology, bolt, ComponentId.HISTORY_HANDLER.toString())\n                 .shuffleGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_HISTORY_ID);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NjczOQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r540866739", "bodyText": "Do we really need to pass getConfig().getBlueGreenMode() ? buildKafkaSpout (and any other methods of AbstractTopology) have access to getConfig() method and know enough about return value to make getConfig().getBlueGreenMode().", "author": "surabujin", "createdAt": "2020-12-11T11:02:32Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -133,21 +139,30 @@ private void coordinator(TopologyBuilder topology) {\n                 .fieldsGrouping(SwitchManagerWorker.BOLT_ID, CoordinatorBolt.INCOME_STREAM, keyGrouping);\n     }\n \n+    private void zookeeperSpout(TopologyBuilder topology) {\n+        ZooKeeperSpout zooKeeperSpout = new ZooKeeperSpout(getConfig().getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        topology.setSpout(ComponentId.INPUT_ZOOKEEPER.toString(), zooKeeperSpout, 1);\n+    }\n+\n     private void inputSpeaker(TopologyBuilder topology, int scaleFactor) {\n         KafkaSpout<String, Message> spout = buildKafkaSpout(\n-                kafkaTopics.getTopoDiscoTopic(), ComponentId.INPUT_SPEAKER.toString());\n+                kafkaTopics.getTopoDiscoTopic(), ComponentId.INPUT_SPEAKER.toString(),\n+                getZkTopoName(), getConfig().getBlueGreenMode());", "originalCommit": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MTkyNw==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547681927", "bodyText": "This will be fixed when the COMMON_COMPONENT is no longer needed.", "author": "dpoltavets", "createdAt": "2020-12-23T05:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NjczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4d0df95603988c004ba511e169beb3f0fb658c35", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\nindex 9ad588ac8..7824f57cd 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n\n@@ -130,10 +126,10 @@ public class NetworkTopology extends AbstractTopology<NetworkTopologyConfig> {\n     }\n \n     private void coordinator(TopologyBuilder topology) {\n-        topology.setSpout(CoordinatorSpout.ID, new CoordinatorSpout(), 1);\n+        declareSpout(topology, new CoordinatorSpout(), CoordinatorSpout.ID);\n \n         Fields keyGrouping = new Fields(MessageKafkaTranslator.KEY_FIELD);\n-        topology.setBolt(CoordinatorBolt.ID, new CoordinatorBolt(), 1)\n+        declareBolt(topology, new CoordinatorBolt(), CoordinatorBolt.ID)\n                 .allGrouping(CoordinatorSpout.ID)\n                 .fieldsGrouping(BfdWorker.BOLT_ID, CoordinatorBolt.INCOME_STREAM, keyGrouping)\n                 .fieldsGrouping(SwitchManagerWorker.BOLT_ID, CoordinatorBolt.INCOME_STREAM, keyGrouping);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTI5NA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r540869294", "bodyText": "... so network ... untill START signal can't initialize itself. It will not read DB objects and it will not receive network dumps from flrouter.", "author": "surabujin", "createdAt": "2020-12-11T11:06:56Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -220,7 +237,9 @@ private void speakerRulesRouter(TopologyBuilder topology, int scaleFactor) {\n \n     private void networkHistory(TopologyBuilder topology) {\n         NetworkHistory spout = new NetworkHistory(persistenceManager);\n-        topology.setSpout(NetworkHistory.SPOUT_ID, spout, 1);\n+        // Parallelism of this bolt Must be 1 to do not read History twice\n+        topology.setBolt(NetworkHistory.BOLT_ID, spout, 1)", "originalCommit": "bae1312bc9c71e61cf077f0f9c966f14f96a3b72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d0df95603988c004ba511e169beb3f0fb658c35", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\nindex 9ad588ac8..7824f57cd 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n\n@@ -214,40 +206,39 @@ public class NetworkTopology extends AbstractTopology<NetworkTopologyConfig> {\n                 .build();\n         SwitchManagerWorker switchManagerWorker = new SwitchManagerWorker(workerConfig, options);\n         Fields keyGrouping = new Fields(MessageKafkaTranslator.FIELD_ID_KEY);\n-        topology.setBolt(SwitchManagerWorker.BOLT_ID, switchManagerWorker, scaleFactor)\n+        declareBolt(topology, switchManagerWorker, SwitchManagerWorker.BOLT_ID)\n                 .directGrouping(CoordinatorBolt.ID)\n                 .fieldsGrouping(workerConfig.getHubComponent(), SwitchHandler.STREAM_SWMANAGER_ID, keyGrouping)\n                 .fieldsGrouping(workerConfig.getWorkerSpoutComponent(),\n                         SwitchManagerRouter.STREAM_WORKER_ID, keyGrouping);\n     }\n \n-    private void switchManagerRouter(TopologyBuilder topology, int scaleFactor) {\n+    private void switchManagerRouter(TopologyBuilder topology) {\n         Fields keyGrouping = new Fields(MessageKafkaTranslator.FIELD_ID_KEY);\n         SwitchManagerRouter bolt = new SwitchManagerRouter();\n-        topology.setBolt(SwitchManagerRouter.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, SwitchManagerRouter.BOLT_ID)\n                 .fieldsGrouping(ComponentId.INPUT_SWMANAGER.toString(), keyGrouping);\n     }\n \n-    private void speakerRulesRouter(TopologyBuilder topology, int scaleFactor) {\n+    private void speakerRulesRouter(TopologyBuilder topology) {\n         Fields keyGrouping = new Fields(MessageKafkaTranslator.KEY_FIELD);\n         SpeakerRulesRouter bolt = new SpeakerRulesRouter();\n-        topology.setBolt(SpeakerRulesRouter.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, SpeakerRulesRouter.BOLT_ID)\n                 .fieldsGrouping(ComponentId.INPUT_SPEAKER_RULES.toString(), keyGrouping);\n     }\n \n     private void networkHistory(TopologyBuilder topology) {\n         NetworkHistory spout = new NetworkHistory(persistenceManager);\n-        // Parallelism of this bolt Must be 1 to do not read History twice\n-        topology.setBolt(NetworkHistory.BOLT_ID, spout, 1)\n+        declareBolt(topology, spout, NetworkHistory.BOLT_ID)\n                 .allGrouping(ComponentId.INPUT_ZOOKEEPER.toString());\n     }\n \n-    private void watchList(TopologyBuilder topology, int scaleFactor) {\n+    private void watchList(TopologyBuilder topology) {\n         WatchListHandler bolt = new WatchListHandler(options);\n         Fields portGrouping = new Fields(PortHandler.FIELD_ID_DATAPATH, PortHandler.FIELD_ID_PORT_NUMBER);\n         Fields uniIslGrouping = new Fields(UniIslHandler.FIELD_ID_DATAPATH, UniIslHandler.FIELD_ID_PORT_NUMBER);\n         Fields islGrouping = new Fields(IslHandler.FIELD_ID_DATAPATH, IslHandler.FIELD_ID_PORT_NUMBER);\n-        topology.setBolt(WatchListHandler.BOLT_ID, bolt, scaleFactor)\n+        declareBolt(topology, bolt, WatchListHandler.BOLT_ID)\n                 .allGrouping(CoordinatorSpout.ID)\n                 .allGrouping(ComponentId.INPUT_ZOOKEEPER.toString())\n                 .fieldsGrouping(PortHandler.BOLT_ID, PortHandler.STREAM_POLL_ID, portGrouping)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5MzI0MA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542293240", "bodyText": "bolt -> BOLT_ID\nspout -> SPOUT_ID\n?", "author": "surabujin", "createdAt": "2020-12-14T10:56:48Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -130,19 +135,28 @@ private void coordinator(TopologyBuilder topology) {\n                 .fieldsGrouping(SwitchManagerWorker.BOLT_ID, CoordinatorBolt.INCOME_STREAM, keyGrouping);\n     }\n \n+    private void zookeeperSpout(TopologyBuilder topology) {\n+        ZooKeeperSpout zooKeeperSpout = new ZooKeeperSpout(getConfig().getBlueGreenMode(), getZkTopoName(),\n+                getZookeeperConfig().getConnectString());\n+        declareSpout(topology, zooKeeperSpout, ZooKeeperSpout.BOLT_ID);", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MjE4MA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547682180", "bodyText": "Fixed", "author": "dpoltavets", "createdAt": "2020-12-23T05:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5MzI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "1ae87af39c9973f300d2d0e9cdc61d6876a6df22", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\nindex 7824f57cd..3381f5a65 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n\n@@ -136,27 +136,27 @@ public class NetworkTopology extends AbstractTopology<NetworkTopologyConfig> {\n     }\n \n     private void zookeeperSpout(TopologyBuilder topology) {\n-        ZooKeeperSpout zooKeeperSpout = new ZooKeeperSpout(getConfig().getBlueGreenMode(), getZkTopoName(),\n+        ZooKeeperSpout zooKeeperSpout = new ZooKeeperSpout(getConfig().getBlueGreenMode(), getTopologyName(),\n                 getZookeeperConfig().getConnectString());\n-        declareSpout(topology, zooKeeperSpout, ZooKeeperSpout.BOLT_ID);\n+        declareSpout(topology, zooKeeperSpout, ZooKeeperSpout.SPOUT_ID);\n     }\n \n     private void inputSpeaker(TopologyBuilder topology) {\n         declareKafkaSpout(topology,\n                 kafkaTopics.getTopoDiscoTopic(), ComponentId.INPUT_SPEAKER.toString(),\n-                getZkTopoName(), getConfig().getBlueGreenMode());\n+                getTopologyName(), getConfig().getBlueGreenMode());\n     }\n \n     private void inputSwitchManager(TopologyBuilder topology) {\n         declareKafkaSpout(topology,\n                 kafkaTopics.getNorthboundTopic(), ComponentId.INPUT_SWMANAGER.toString(),\n-                getZkTopoName(), getConfig().getBlueGreenMode());\n+                getTopologyName(), getConfig().getBlueGreenMode());\n     }\n \n     private void inputSpeakerRules(TopologyBuilder topology) {\n         declareKafkaSpout(topology,\n                 kafkaTopics.getTopoSwitchManagerTopic(), ComponentId.INPUT_SPEAKER_RULES.toString(),\n-                getZkTopoName(), getConfig().getBlueGreenMode());\n+                getTopologyName(), getConfig().getBlueGreenMode());\n     }\n \n     private void workerSpeakerRules(TopologyBuilder topology) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMDM2OQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542300369", "bodyText": "You have declared Zookeeper spout as ZooKeeperSpout.BOLT_ID but all stream refer it as ComponentId.INPUT_ZOOKEEPER.toString(). Looks incorrect.", "author": "surabujin", "createdAt": "2020-12-14T11:08:13Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java", "diffHunk": "@@ -213,7 +229,8 @@ private void speakerRulesRouter(TopologyBuilder topology) {\n \n     private void networkHistory(TopologyBuilder topology) {\n         NetworkHistory spout = new NetworkHistory(persistenceManager);\n-        declareSpout(topology, spout, NetworkHistory.SPOUT_ID);\n+        declareBolt(topology, spout, NetworkHistory.BOLT_ID)\n+                .allGrouping(ComponentId.INPUT_ZOOKEEPER.toString());", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4Mjg2Ng==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547682866", "bodyText": "Fixed", "author": "dpoltavets", "createdAt": "2020-12-23T05:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMDM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9e6906a0881d9c2e5bff1b6c9bb8f9cf1880080", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\nindex 7824f57cd..e6cef0307 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/NetworkTopology.java\n\n@@ -230,7 +230,7 @@ public class NetworkTopology extends AbstractTopology<NetworkTopologyConfig> {\n     private void networkHistory(TopologyBuilder topology) {\n         NetworkHistory spout = new NetworkHistory(persistenceManager);\n         declareBolt(topology, spout, NetworkHistory.BOLT_ID)\n-                .allGrouping(ComponentId.INPUT_ZOOKEEPER.toString());\n+                .allGrouping(ZooKeeperSpout.BOLT_ID);\n     }\n \n     private void watchList(TopologyBuilder topology) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMTk3MQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542301971", "bodyText": "\ud83d\udc4d", "author": "surabujin", "createdAt": "2020-12-14T11:10:43Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkDecisionMakerService.java", "diffHunk": "@@ -85,8 +87,13 @@ void failed(Endpoint endpoint, long packetId, long currentTime) {\n         controllerExecutor.fire(decisionMakerFsm, DecisionMakerFsmEvent.FAIL, context);\n     }\n \n+    /**\n+     * .", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MzE4NQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547683185", "bodyText": "Docs were added.", "author": "dpoltavets", "createdAt": "2020-12-23T05:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ae87af39c9973f300d2d0e9cdc61d6876a6df22", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkDecisionMakerService.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkDecisionMakerService.java\nindex feb900c7c..5b7fb192f 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkDecisionMakerService.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkDecisionMakerService.java\n\n@@ -88,7 +88,7 @@ public class NetworkDecisionMakerService {\n     }\n \n     /**\n-     * .\n+     * Process timer tick.\n      */\n     public void tick() {\n         if (active) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMzEzNQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542303135", "bodyText": "timeoutAction called only from tick(...).", "author": "surabujin", "createdAt": "2020-12-14T11:12:46Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatcherService.java", "diffHunk": "@@ -206,14 +213,24 @@ private void timeoutAction(Packet packet) {\n         if (confirmedPackets.remove(packet)) {\n             log.debug(\"Detect discovery packet lost sent via {} id:{} task:{}\",\n                       packet.endpoint, packet.packetNo, taskId);\n-            carrier.discoveryFailed(packet.getEndpoint(), packet.packetNo, now());\n+            if (active) {", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4Mzc5MA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547683790", "bodyText": "This condition has been removed.", "author": "dpoltavets", "createdAt": "2020-12-23T05:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMzEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "101cdff191d1ef00d5ff27f5a6e44680343912ec", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatcherService.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatcherService.java\nindex d756fa1bc..6ee3c6820 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatcherService.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkWatcherService.java\n\n@@ -236,11 +192,6 @@ public class NetworkWatcherService {\n         return discoveryPackets;\n     }\n \n-    @VisibleForTesting\n-    Set<Packet> getRoundTripPackets() {\n-        return roundTripPackets;\n-    }\n-\n     @VisibleForTesting\n     Set<Packet> getConfirmedPackets() {\n         return confirmedPackets;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNzU1MA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542307550", "bodyText": "It is mostly copy of org.openkilda.wfm.AbstractBolt#handleLifeCycleEvent. If AbstactBolt will define activate / deactivate methods we can use them into successor bolts.", "author": "surabujin", "createdAt": "2020-12-14T11:19:58Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java", "diffHunk": "@@ -71,6 +82,19 @@ private void handleTimer(Tuple input) {\n         service.tick();\n     }\n \n+    private void handleLifeCycleEvent(Tuple input) {", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NDExMQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547684111", "bodyText": "Fixed.", "author": "dpoltavets", "createdAt": "2020-12-23T06:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNzU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "101cdff191d1ef00d5ff27f5a6e44680343912ec", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java\nindex 216ae888c..786fdc7d1 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java\n\n@@ -79,16 +83,19 @@ public class DecisionMakerHandler extends AbstractBolt implements IDecisionMaker\n     }\n \n     private void handleTimer(Tuple input) {\n-        service.tick();\n+        oneWayDiscoveryService.tick();\n+        roundTripDiscoveryService.tick();\n     }\n \n     private void handleLifeCycleEvent(Tuple input) {\n         LifecycleEvent event = (LifecycleEvent) input.getValueByField(ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT);\n         if (event.getSignal().equals(Signal.SHUTDOWN)) {\n-            service.deactivate();\n+            oneWayDiscoveryService.deactivate();\n+            roundTripDiscoveryService.deactivate();\n             emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n         } else if (event.getSignal().equals(Signal.START)) {\n-            service.activate();\n+            oneWayDiscoveryService.activate();\n+            roundTripDiscoveryService.activate();\n             emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n         } else {\n             log.info(\"Received signal info %s\", event.getSignal());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNTE3MQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542315171", "bodyText": "super.init() ?", "author": "surabujin", "createdAt": "2020-12-14T11:32:57Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java", "diffHunk": "@@ -13,72 +13,95 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.network.storm.spout;\n+package org.openkilda.wfm.topology.network.storm.bolt.history;\n \n+import static org.openkilda.wfm.share.zk.ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n import org.openkilda.model.SwitchId;\n import org.openkilda.persistence.PersistenceManager;\n-import org.openkilda.persistence.context.PersistenceContextRequired;\n import org.openkilda.wfm.AbstractBolt;\n import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.share.zk.ZkStreams;\n+import org.openkilda.wfm.share.zk.ZooKeeperBolt;\n import org.openkilda.wfm.topology.network.model.facts.HistoryFacts;\n import org.openkilda.wfm.topology.network.service.ISwitchPrepopulateCarrier;\n import org.openkilda.wfm.topology.network.service.NetworkHistoryService;\n import org.openkilda.wfm.topology.network.storm.ComponentId;\n import org.openkilda.wfm.topology.network.storm.bolt.speaker.SpeakerRouter;\n import org.openkilda.wfm.topology.network.storm.bolt.sw.command.SwitchHistoryCommand;\n \n-import org.apache.storm.spout.SpoutOutputCollector;\n-import org.apache.storm.task.TopologyContext;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.storm.topology.OutputFieldsDeclarer;\n-import org.apache.storm.topology.base.BaseRichSpout;\n import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Tuple;\n import org.apache.storm.tuple.Values;\n \n-import java.util.Map;\n-\n-public class NetworkHistory extends BaseRichSpout implements ISwitchPrepopulateCarrier {\n-    public static final String SPOUT_ID = ComponentId.NETWORK_HISTORY.toString();\n+@Slf4j\n+public class NetworkHistory extends AbstractBolt implements ISwitchPrepopulateCarrier {\n+    public static final String BOLT_ID = ComponentId.NETWORK_HISTORY.toString();\n \n     public static final String FIELD_ID_DATAPATH = SpeakerRouter.FIELD_ID_DATAPATH;\n     public static final String FIELD_ID_PAYLOAD = \"switch-init\";\n     public static final String FIELD_ID_CONTEXT = AbstractBolt.FIELD_ID_CONTEXT;\n \n     public static final Fields STREAM_FIELDS = new Fields(FIELD_ID_DATAPATH, FIELD_ID_PAYLOAD, FIELD_ID_CONTEXT);\n \n+    public static final String STREAM_ZOOKEEPER_ID = ZkStreams.ZK.toString();\n+    public static final Fields STREAM_ZOOKEEPER_FIELDS = new Fields(ZooKeeperBolt.FIELD_ID_STATE,\n+            ZooKeeperBolt.FIELD_ID_CONTEXT);\n+\n     private final PersistenceManager persistenceManager;\n \n     private transient NetworkHistoryService service;\n-    private transient SpoutOutputCollector output;\n-\n-    private final CommandContext rootContext = new CommandContext();\n-\n-    private boolean workDone = false;\n \n     public NetworkHistory(PersistenceManager persistenceManager) {\n         this.persistenceManager = persistenceManager;\n     }\n \n     @Override\n-    @PersistenceContextRequired(requiresNew = true)\n-    public void nextTuple() {\n-        if (workDone) {\n-            org.apache.storm.utils.Utils.sleep(1L);\n-            return;\n+    protected void handleInput(Tuple input) throws Exception {\n+        if (ComponentId.INPUT_ZOOKEEPER.toString().equals(input.getSourceComponent())) {\n+            LifecycleEvent event = (LifecycleEvent) input.getValueByField(FIELD_ID_LIFECYCLE_EVENT);\n+            handleLifeCycleEvent(event);\n+        } else {\n+            unhandledInput(input);\n         }\n-        workDone = true;\n+    }\n \n-        service.applyHistory();\n+    @Override\n+    protected void handleLifeCycleEvent(LifecycleEvent event) {\n+        log.info(\"Handling life cycle event {}\", event);\n+        if (Signal.START.equals(event.getSignal())) {\n+            final boolean currentActive = active;\n+            active = true;\n+            emit(ZkStreams.ZK.toString(), getCurrentTuple(), new Values(event, getCommandContext()));\n+\n+            if (!currentActive) {\n+                // Every new START signal will cause history reading\n+                log.info(\"Allying history events\");\n+                service.applyHistory();\n+            } else {\n+                log.info(\"Skip history events\");\n+            }\n+        } else if (Signal.SHUTDOWN.equals(event.getSignal())) {\n+            active = false;\n+            emit(ZkStreams.ZK.toString(), getCurrentTuple(), new Values(event, getCommandContext()));\n+        } else {\n+            log.info(\"Unsupported signal received: {}\", event.getSignal());\n+        }\n     }\n \n     @Override\n-    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n-        output = collector;\n+    protected void init() {", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NDE4MA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547684180", "bodyText": "Added.", "author": "dpoltavets", "createdAt": "2020-12-23T06:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNTE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9e6906a0881d9c2e5bff1b6c9bb8f9cf1880080", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java\nindex e101f95a0..12fced227 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java\n\n@@ -25,6 +25,7 @@ import org.openkilda.wfm.AbstractBolt;\n import org.openkilda.wfm.CommandContext;\n import org.openkilda.wfm.share.zk.ZkStreams;\n import org.openkilda.wfm.share.zk.ZooKeeperBolt;\n+import org.openkilda.wfm.share.zk.ZooKeeperSpout;\n import org.openkilda.wfm.topology.network.model.facts.HistoryFacts;\n import org.openkilda.wfm.topology.network.service.ISwitchPrepopulateCarrier;\n import org.openkilda.wfm.topology.network.service.NetworkHistoryService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNTU2MQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542315561", "bodyText": "It should have the suffix Handler because it is bolt now.", "author": "surabujin", "createdAt": "2020-12-14T11:33:43Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java", "diffHunk": "@@ -13,72 +13,95 @@\n  *   limitations under the License.\n  */\n \n-package org.openkilda.wfm.topology.network.storm.spout;\n+package org.openkilda.wfm.topology.network.storm.bolt.history;\n \n+import static org.openkilda.wfm.share.zk.ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT;\n+\n+import org.openkilda.bluegreen.LifecycleEvent;\n+import org.openkilda.bluegreen.Signal;\n import org.openkilda.model.SwitchId;\n import org.openkilda.persistence.PersistenceManager;\n-import org.openkilda.persistence.context.PersistenceContextRequired;\n import org.openkilda.wfm.AbstractBolt;\n import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.share.zk.ZkStreams;\n+import org.openkilda.wfm.share.zk.ZooKeeperBolt;\n import org.openkilda.wfm.topology.network.model.facts.HistoryFacts;\n import org.openkilda.wfm.topology.network.service.ISwitchPrepopulateCarrier;\n import org.openkilda.wfm.topology.network.service.NetworkHistoryService;\n import org.openkilda.wfm.topology.network.storm.ComponentId;\n import org.openkilda.wfm.topology.network.storm.bolt.speaker.SpeakerRouter;\n import org.openkilda.wfm.topology.network.storm.bolt.sw.command.SwitchHistoryCommand;\n \n-import org.apache.storm.spout.SpoutOutputCollector;\n-import org.apache.storm.task.TopologyContext;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.storm.topology.OutputFieldsDeclarer;\n-import org.apache.storm.topology.base.BaseRichSpout;\n import org.apache.storm.tuple.Fields;\n+import org.apache.storm.tuple.Tuple;\n import org.apache.storm.tuple.Values;\n \n-import java.util.Map;\n-\n-public class NetworkHistory extends BaseRichSpout implements ISwitchPrepopulateCarrier {\n-    public static final String SPOUT_ID = ComponentId.NETWORK_HISTORY.toString();\n+@Slf4j\n+public class NetworkHistory extends AbstractBolt implements ISwitchPrepopulateCarrier {", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NDQ3MA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547684470", "bodyText": "Suffix has been added", "author": "dpoltavets", "createdAt": "2020-12-23T06:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNTU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9e6906a0881d9c2e5bff1b6c9bb8f9cf1880080", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java\nindex e101f95a0..12fced227 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/history/NetworkHistory.java\n\n@@ -25,6 +25,7 @@ import org.openkilda.wfm.AbstractBolt;\n import org.openkilda.wfm.CommandContext;\n import org.openkilda.wfm.share.zk.ZkStreams;\n import org.openkilda.wfm.share.zk.ZooKeeperBolt;\n+import org.openkilda.wfm.share.zk.ZooKeeperSpout;\n import org.openkilda.wfm.topology.network.model.facts.HistoryFacts;\n import org.openkilda.wfm.topology.network.service.ISwitchPrepopulateCarrier;\n import org.openkilda.wfm.topology.network.service.NetworkHistoryService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxODc3MA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542318770", "bodyText": "I would like to put this filter \"closer\" to the handleInput... We can wrap the whole handleInput in this condition if we move zookeeper stream routing inside the dispatch method... or allow AbstractBolt to do it for us.", "author": "surabujin", "createdAt": "2020-12-14T11:39:08Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/speaker/SpeakerRouter.java", "diffHunk": "@@ -113,10 +126,12 @@ private void speakerMessage(Tuple input, Message message) throws PipelineExcepti\n     }\n \n     private void proxySpeaker(Tuple input, Message message) throws PipelineException {\n-        if (message instanceof InfoMessage) {\n-            proxySpeaker(input, ((InfoMessage) message).getData());\n-        } else {\n-            log.error(\"Do not proxy speaker message - unexpected message type \\\"{}\\\"\", message.getClass());\n+        if (active) {", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NjQ3MA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547686470", "bodyText": "We can not wrap the whole handleInput in this condition, because sometimes we wait for responses and have to handle them.", "author": "dpoltavets", "createdAt": "2020-12-23T06:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxODc3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyMTMyMw==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r542321323", "bodyText": "%s -> {}\nI don't know how many times this chunk is copy-pasted, but definitely, there are some more of them.", "author": "surabujin", "createdAt": "2020-12-14T11:43:41Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java", "diffHunk": "@@ -71,6 +82,19 @@ private void handleTimer(Tuple input) {\n         service.tick();\n     }\n \n+    private void handleLifeCycleEvent(Tuple input) {\n+        LifecycleEvent event = (LifecycleEvent) input.getValueByField(ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT);\n+        if (event.getSignal().equals(Signal.SHUTDOWN)) {\n+            service.deactivate();\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n+        } else if (event.getSignal().equals(Signal.START)) {\n+            service.activate();\n+            emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n+        } else {\n+            log.info(\"Received signal info %s\", event.getSignal());", "originalCommit": "4d0df95603988c004ba511e169beb3f0fb658c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NjYxNw==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547686617", "bodyText": "Fixed", "author": "dpoltavets", "createdAt": "2020-12-23T06:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyMTMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "101cdff191d1ef00d5ff27f5a6e44680343912ec", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java\nindex 216ae888c..786fdc7d1 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/storm/bolt/decisionmaker/DecisionMakerHandler.java\n\n@@ -79,16 +83,19 @@ public class DecisionMakerHandler extends AbstractBolt implements IDecisionMaker\n     }\n \n     private void handleTimer(Tuple input) {\n-        service.tick();\n+        oneWayDiscoveryService.tick();\n+        roundTripDiscoveryService.tick();\n     }\n \n     private void handleLifeCycleEvent(Tuple input) {\n         LifecycleEvent event = (LifecycleEvent) input.getValueByField(ZooKeeperSpout.FIELD_ID_LIFECYCLE_EVENT);\n         if (event.getSignal().equals(Signal.SHUTDOWN)) {\n-            service.deactivate();\n+            oneWayDiscoveryService.deactivate();\n+            roundTripDiscoveryService.deactivate();\n             emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n         } else if (event.getSignal().equals(Signal.START)) {\n-            service.activate();\n+            oneWayDiscoveryService.activate();\n+            roundTripDiscoveryService.activate();\n             emit(STREAM_ZOOKEEPER_ID, input, new Values(event, getCommandContext()));\n         } else {\n             log.info(\"Received signal info %s\", event.getSignal());\n"}}, {"oid": "d9e6906a0881d9c2e5bff1b6c9bb8f9cf1880080", "url": "https://github.com/telstra/open-kilda/commit/d9e6906a0881d9c2e5bff1b6c9bb8f9cf1880080", "message": "Replaced History Spout with History Bolt", "committedDate": "2020-12-15T07:39:56Z", "type": "forcePushed"}, {"oid": "ac532a633607cb51973a218645f6480b93e5e396", "url": "https://github.com/telstra/open-kilda/commit/ac532a633607cb51973a218645f6480b93e5e396", "message": "Replaced History Spout with History Bolt", "committedDate": "2020-12-17T12:38:20Z", "type": "forcePushed"}, {"oid": "101cdff191d1ef00d5ff27f5a6e44680343912ec", "url": "https://github.com/telstra/open-kilda/commit/101cdff191d1ef00d5ff27f5a6e44680343912ec", "message": "Network zero-downtime upgrade", "committedDate": "2020-12-21T19:43:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTU2OA==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547041568", "bodyText": "why are all of these active by default?", "author": "timofei-durakov", "createdAt": "2020-12-22T03:06:01Z", "path": "src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkAntiFlapService.java", "diffHunk": "@@ -39,6 +39,8 @@\n     private final IAntiFlapCarrier carrier;\n     private final AntiFlapFsm.Config config;\n \n+    private boolean active = true;", "originalCommit": "101cdff191d1ef00d5ff27f5a6e44680343912ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NzYyOQ==", "url": "https://github.com/telstra/open-kilda/pull/3863#discussion_r547687629", "bodyText": "This was the old approach. Fixed.", "author": "dpoltavets", "createdAt": "2020-12-23T06:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "1ae87af39c9973f300d2d0e9cdc61d6876a6df22", "chunk": "diff --git a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkAntiFlapService.java b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkAntiFlapService.java\nindex 30639ff41..fdc866210 100644\n--- a/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkAntiFlapService.java\n+++ b/src-java/network-topology/network-storm-topology/src/main/java/org/openkilda/wfm/topology/network/service/NetworkAntiFlapService.java\n\n@@ -39,7 +39,7 @@ public class NetworkAntiFlapService {\n     private final IAntiFlapCarrier carrier;\n     private final AntiFlapFsm.Config config;\n \n-    private boolean active = true;\n+    private boolean active;\n \n     public NetworkAntiFlapService(IAntiFlapCarrier carrier, AntiFlapFsm.Config config) {\n         this.carrier = carrier;\n"}}, {"oid": "1ae87af39c9973f300d2d0e9cdc61d6876a6df22", "url": "https://github.com/telstra/open-kilda/commit/1ae87af39c9973f300d2d0e9cdc61d6876a6df22", "message": "Network zero-downtime upgrade", "committedDate": "2020-12-23T05:53:17Z", "type": "forcePushed"}, {"oid": "20038c7c25b594dae5646ced0877f2cf5521dffb", "url": "https://github.com/telstra/open-kilda/commit/20038c7c25b594dae5646ced0877f2cf5521dffb", "message": "Network zero-downtime upgrade", "committedDate": "2020-12-28T11:07:31Z", "type": "forcePushed"}, {"oid": "c70961c6d9549439101de8ad8effef8230896c1e", "url": "https://github.com/telstra/open-kilda/commit/c70961c6d9549439101de8ad8effef8230896c1e", "message": "Network zero-downtime upgrade", "committedDate": "2021-01-11T08:13:02Z", "type": "forcePushed"}, {"oid": "c403ff40322e7a64612f068109cd76df9ea0d93a", "url": "https://github.com/telstra/open-kilda/commit/c403ff40322e7a64612f068109cd76df9ea0d93a", "message": "Network zero-downtime upgrade", "committedDate": "2021-01-14T14:26:39Z", "type": "forcePushed"}, {"oid": "c66efc5e291b07afb4d5a0c9f69c774c625a8b48", "url": "https://github.com/telstra/open-kilda/commit/c66efc5e291b07afb4d5a0c9f69c774c625a8b48", "message": "Network zero-downtime upgrade", "committedDate": "2021-01-20T13:26:54Z", "type": "forcePushed"}, {"oid": "3fe7e0e7d1cc91511d81e9221d867fd5b2db2a34", "url": "https://github.com/telstra/open-kilda/commit/3fe7e0e7d1cc91511d81e9221d867fd5b2db2a34", "message": "Network zero-downtime upgrade", "committedDate": "2021-01-25T07:59:26Z", "type": "forcePushed"}, {"oid": "9232aff2b157fc3bbd3f8af0a99c1a604ab6d655", "url": "https://github.com/telstra/open-kilda/commit/9232aff2b157fc3bbd3f8af0a99c1a604ab6d655", "message": "Network zero-downtime upgrade", "committedDate": "2021-01-25T08:01:54Z", "type": "forcePushed"}, {"oid": "43a796f9bd7d4fc92c781c5dfd4bd2e9e316c1ae", "url": "https://github.com/telstra/open-kilda/commit/43a796f9bd7d4fc92c781c5dfd4bd2e9e316c1ae", "message": "Network zero-downtime upgrade", "committedDate": "2021-01-27T08:05:58Z", "type": "forcePushed"}, {"oid": "ab81069886d48a7a1ce472a69794bcd3343a2965", "url": "https://github.com/telstra/open-kilda/commit/ab81069886d48a7a1ce472a69794bcd3343a2965", "message": "Network zero-downtime upgrade", "committedDate": "2021-01-29T06:00:33Z", "type": "forcePushed"}, {"oid": "1a82a9be828447506553504472dfa7370f6288bc", "url": "https://github.com/telstra/open-kilda/commit/1a82a9be828447506553504472dfa7370f6288bc", "message": "Network zero-downtime upgrade", "committedDate": "2021-02-03T12:50:02Z", "type": "forcePushed"}, {"oid": "fcc3e2830b36184ca285a0ca623135a4cfe637ef", "url": "https://github.com/telstra/open-kilda/commit/fcc3e2830b36184ca285a0ca623135a4cfe637ef", "message": "Network zero-downtime upgrade", "committedDate": "2021-02-03T13:00:10Z", "type": "commit"}, {"oid": "fcc3e2830b36184ca285a0ca623135a4cfe637ef", "url": "https://github.com/telstra/open-kilda/commit/fcc3e2830b36184ca285a0ca623135a4cfe637ef", "message": "Network zero-downtime upgrade", "committedDate": "2021-02-03T13:00:10Z", "type": "forcePushed"}]}