{"pr_number": 3892, "pr_title": "Fix swap endpoints for looped flows", "pr_createdAt": "2020-11-30T20:08:57Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3892", "timeline": [{"oid": "e52ac7e073ced106aec3b38a5ebf3ddca0fc9dc8", "url": "https://github.com/telstra/open-kilda/commit/e52ac7e073ced106aec3b38a5ebf3ddca0fc9dc8", "message": "Fix swap endpoints for looped flows", "committedDate": "2020-12-01T08:46:55Z", "type": "forcePushed"}, {"oid": "0470f3e182a0d178c4269040f772600160d75870", "url": "https://github.com/telstra/open-kilda/commit/0470f3e182a0d178c4269040f772600160d75870", "message": "Fix swap endpoints for looped flows", "committedDate": "2020-12-01T11:46:15Z", "type": "forcePushed"}, {"oid": "429db1b4dfa857e6cbafe1947af8f16b3a68d2b6", "url": "https://github.com/telstra/open-kilda/commit/429db1b4dfa857e6cbafe1947af8f16b3a68d2b6", "message": "Fix swap endpoints for looped flows", "committedDate": "2020-12-03T14:42:23Z", "type": "forcePushed"}, {"oid": "808e6fcd8033577b6fc039555dc147e44039e51b", "url": "https://github.com/telstra/open-kilda/commit/808e6fcd8033577b6fc039555dc147e44039e51b", "message": "Fix swap endpoints for looped flows", "committedDate": "2020-12-03T16:47:42Z", "type": "forcePushed"}, {"oid": "c04433426fb2e1b9e21908a1f873235cfb8c9569", "url": "https://github.com/telstra/open-kilda/commit/c04433426fb2e1b9e21908a1f873235cfb8c9569", "message": "Fix swap endpoints for looped flows", "committedDate": "2020-12-03T18:18:58Z", "type": "forcePushed"}, {"oid": "35064b28af8f262182196c34f6ab0571e178ccd0", "url": "https://github.com/telstra/open-kilda/commit/35064b28af8f262182196c34f6ab0571e178ccd0", "message": "Fix swap endpoints for looped flows", "committedDate": "2020-12-04T14:17:36Z", "type": "forcePushed"}, {"oid": "c493520917997e22c7ffa77e4ba01219bda7b8a2", "url": "https://github.com/telstra/open-kilda/commit/c493520917997e22c7ffa77e4ba01219bda7b8a2", "message": "Fix swap endpoints for looped flows", "committedDate": "2020-12-04T15:11:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3MDg1OQ==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r539470859", "bodyText": "em... can we just use flowRequest.setLoopSwitchId(flow.getLoopSwitchId()) ?\nPS In current shape it will produce unexpected issues if/when we will try to make loops on transit switches.", "author": "surabujin", "createdAt": "2020-12-09T16:47:44Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/actions/UpdateRequestAction.java", "diffHunk": "@@ -54,6 +54,12 @@ private void sendUpdateCommand(Flow flow, RequestedFlow targetFlow, String anoth\n         flowRequest.setDestination(\n                 new FlowEndpoint(targetFlow.getDestSwitch(), targetFlow.getDestPort(), targetFlow.getDestVlan()));\n \n+        if (flow.getLoopSwitchId() != null) {\n+            boolean flowLoopedOnSrc = flow.getLoopSwitchId().equals(flow.getSrcSwitchId());\n+            flowRequest.setLoopSwitchId(flowLoopedOnSrc ? flowRequest.getSource().getSwitchId()", "originalCommit": "c493520917997e22c7ffa77e4ba01219bda7b8a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzOTI3Ng==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r542439276", "bodyText": "The idea behind this logic was to save flow in \"src-looped\" or \"dest-looped\" state regardless of what switches was source and destination. For flows with loop on transit switches swap operation is undefined for now.", "author": "rozdy", "createdAt": "2020-12-14T14:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3MDg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d2fd37a1b28496b037f2ecdb10acec728c5db41e", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/actions/UpdateRequestAction.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/actions/UpdateRequestAction.java\nindex 5635b9f97..d148124de 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/actions/UpdateRequestAction.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/actions/UpdateRequestAction.java\n\n@@ -54,12 +54,6 @@ public class UpdateRequestAction extends AnonymousAction<FlowSwapEndpointsFsm, S\n         flowRequest.setDestination(\n                 new FlowEndpoint(targetFlow.getDestSwitch(), targetFlow.getDestPort(), targetFlow.getDestVlan()));\n \n-        if (flow.getLoopSwitchId() != null) {\n-            boolean flowLoopedOnSrc = flow.getLoopSwitchId().equals(flow.getSrcSwitchId());\n-            flowRequest.setLoopSwitchId(flowLoopedOnSrc ? flowRequest.getSource().getSwitchId()\n-                    : flowRequest.getDestination().getSwitchId());\n-        }\n-\n         flowRequest.setBulkUpdateFlowIds(Sets.newHashSet(anotherFlowId));\n         flowRequest.setType(Type.UPDATE);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3MjQ5NA==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r539472494", "bodyText": "mapstruct is able to create mapping by itself if field names match.", "author": "surabujin", "createdAt": "2020-12-09T16:49:49Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/mapper/RequestedFlowMapper.java", "diffHunk": "@@ -167,6 +167,7 @@ public PathComputationStrategy mapComputationStrategy(String raw) {\n     @Mapping(target = \"priority\", source = \"priority\")\n     @Mapping(target = \"pinned\", source = \"pinned\")\n     @Mapping(target = \"detectConnectedDevices\", source = \"detectConnectedDevices\")\n+    @Mapping(target = \"loopSwitchId\", source = \"loopSwitchId\")", "originalCommit": "c493520917997e22c7ffa77e4ba01219bda7b8a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MDY0Mw==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r542440643", "bodyText": "Yes, I know but here all other fields was listed so for similarity reasons I decided to put it here.", "author": "rozdy", "createdAt": "2020-12-14T14:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3MjQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "d2fd37a1b28496b037f2ecdb10acec728c5db41e", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/mapper/RequestedFlowMapper.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/mapper/RequestedFlowMapper.java\nindex e2da5bb3b..1186842ec 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/mapper/RequestedFlowMapper.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/mapper/RequestedFlowMapper.java\n\n@@ -167,7 +167,6 @@ public abstract class RequestedFlowMapper {\n     @Mapping(target = \"priority\", source = \"priority\")\n     @Mapping(target = \"pinned\", source = \"pinned\")\n     @Mapping(target = \"detectConnectedDevices\", source = \"detectConnectedDevices\")\n-    @Mapping(target = \"loopSwitchId\", source = \"loopSwitchId\")\n     @Mapping(target = \"transitEncapsulationId\", ignore = true)\n     @Mapping(target = \"diverseFlowId\", ignore = true)\n     @Mapping(target = \"type\", ignore = true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NTA4OQ==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r539475089", "bodyText": "We should not emit errors if the loop already exists on requested now flow + endpoint.", "author": "surabujin", "createdAt": "2020-12-09T16:53:06Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java", "diffHunk": "@@ -143,8 +141,12 @@ public void handleCreateFlowLoopRequest(String key, CommandContext commandContex\n         Optional<Flow> flow = flowRepository.findById(request.getFlowId());\n         if (flow.isPresent()) {\n             FlowRequest flowRequest = RequestedFlowMapper.INSTANCE.toFlowRequest(flow.get());\n-            flowRequest.setLoopSwitchId(request.getSwitchId());\n-            handleRequest(key, commandContext, flowRequest);\n+            if (flowRequest.getLoopSwitchId() == null) {\n+                flowRequest.setLoopSwitchId(request.getSwitchId());\n+                handleRequest(key, commandContext, flowRequest);\n+            } else {", "originalCommit": "c493520917997e22c7ffa77e4ba01219bda7b8a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MDc1NA==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r542440754", "bodyText": "Fixed.", "author": "rozdy", "createdAt": "2020-12-14T14:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NTA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d2fd37a1b28496b037f2ecdb10acec728c5db41e", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java\nindex 4e8c8adbe..99d614620 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java\n\n@@ -141,12 +143,8 @@ public class FlowUpdateService {\n         Optional<Flow> flow = flowRepository.findById(request.getFlowId());\n         if (flow.isPresent()) {\n             FlowRequest flowRequest = RequestedFlowMapper.INSTANCE.toFlowRequest(flow.get());\n-            if (flowRequest.getLoopSwitchId() == null) {\n-                flowRequest.setLoopSwitchId(request.getSwitchId());\n-                handleRequest(key, commandContext, flowRequest);\n-            } else {\n-                carrier.sendNorthboundResponse(buildFlowAlreadyLoopedErrorMessage(flowRequest, commandContext));\n-            }\n+            flowRequest.setLoopSwitchId(request.getSwitchId());\n+            handleRequest(key, commandContext, flowRequest);\n         } else {\n             carrier.sendNorthboundResponse(buildFlowNotFoundErrorMessage(request.getFlowId(), commandContext));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NTkxMA==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r539475910", "bodyText": "\"found\"?", "author": "surabujin", "createdAt": "2020-12-09T16:54:10Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java", "diffHunk": "@@ -205,6 +207,13 @@ private Message buildFlowNotFoundErrorMessage(String flowId, CommandContext comm\n         return new ErrorMessage(error, commandContext.getCreateTime(), commandContext.getCorrelationId());\n     }\n \n+    private Message buildFlowAlreadyLoopedErrorMessage(FlowRequest flow, CommandContext commandContext) {\n+        String description = String.format(\"Flow is already looped on switch '%s'\", flow.getLoopSwitchId());\n+        ErrorData error = new ErrorData(ErrorType.UNPROCESSABLE_REQUEST,\n+                String.format(\"Can't create flow loop on '%s' found\", flow.getFlowId()), description);", "originalCommit": "c493520917997e22c7ffa77e4ba01219bda7b8a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MDg0OA==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r542440848", "bodyText": "Fixed.", "author": "rozdy", "createdAt": "2020-12-14T14:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3NTkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "d2fd37a1b28496b037f2ecdb10acec728c5db41e", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java\nindex 4e8c8adbe..99d614620 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/service/FlowUpdateService.java\n\n@@ -207,13 +205,6 @@ public class FlowUpdateService {\n         return new ErrorMessage(error, commandContext.getCreateTime(), commandContext.getCorrelationId());\n     }\n \n-    private Message buildFlowAlreadyLoopedErrorMessage(FlowRequest flow, CommandContext commandContext) {\n-        String description = String.format(\"Flow is already looped on switch '%s'\", flow.getLoopSwitchId());\n-        ErrorData error = new ErrorData(ErrorType.UNPROCESSABLE_REQUEST,\n-                String.format(\"Can't create flow loop on '%s' found\", flow.getFlowId()), description);\n-        return new ErrorMessage(error, commandContext.getCreateTime(), commandContext.getCorrelationId());\n-    }\n-\n     private void removeIfFinished(FlowUpdateFsm fsm, String key) {\n         if (fsm.isTerminated()) {\n             log.debug(\"FSM with key {} is finished with state {}\", key, fsm.getCurrentState());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3ODA0Mg==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r539478042", "bodyText": "flow is not used anymore.", "author": "surabujin", "createdAt": "2020-12-09T16:56:47Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java", "diffHunk": "@@ -105,22 +105,18 @@ public void validate(RequestedFlow flow, Set<String> bulkUpdateFlowIds)\n     public void validate(Flow flow, RequestedFlow requestedFlow, Set<String> bulkUpdateFlowIds)", "originalCommit": "c493520917997e22c7ffa77e4ba01219bda7b8a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MDk1Mg==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r542440952", "bodyText": "Fixed.", "author": "rozdy", "createdAt": "2020-12-14T14:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3ODA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d2fd37a1b28496b037f2ecdb10acec728c5db41e", "chunk": "diff --git a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java\nindex 6a9353210..f3ae612ee 100644\n--- a/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java\n+++ b/src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/validation/FlowValidator.java\n\n@@ -105,18 +105,22 @@ public class FlowValidator {\n     public void validate(Flow flow, RequestedFlow requestedFlow, Set<String> bulkUpdateFlowIds)\n             throws InvalidFlowException, UnavailableFlowEndpointException {\n         validate(requestedFlow, bulkUpdateFlowIds);\n-        validateFlowLoop(requestedFlow);\n+        validateFlowLoop(flow, requestedFlow);\n     }\n \n-    private void validateFlowLoop(RequestedFlow requestedFlow) throws InvalidFlowException {\n+    private void validateFlowLoop(Flow flow, RequestedFlow requestedFlow) throws InvalidFlowException {\n         if (requestedFlow.getLoopSwitchId() != null) {\n             SwitchId loopSwitchId = requestedFlow.getLoopSwitchId();\n-            boolean loopSwitchIsTerminating = requestedFlow.getSrcSwitch().equals(loopSwitchId)\n-                    || requestedFlow.getDestSwitch().equals(loopSwitchId);\n+            boolean loopSwitchIsTerminating = flow.getSrcSwitchId().equals(loopSwitchId)\n+                    || flow.getDestSwitchId().equals(loopSwitchId);\n             if (!loopSwitchIsTerminating) {\n                 throw new InvalidFlowException(\"Loop switch is not terminating in flow path\",\n                         ErrorType.PARAMETERS_INVALID);\n             }\n+\n+            if (flow.isLooped() && !loopSwitchId.equals(flow.getLoopSwitchId())) {\n+                throw new InvalidFlowException(\"Can't change loop switch\", ErrorType.PARAMETERS_INVALID);\n+            }\n         }\n     }\n \n"}}, {"oid": "d2fd37a1b28496b037f2ecdb10acec728c5db41e", "url": "https://github.com/telstra/open-kilda/commit/d2fd37a1b28496b037f2ecdb10acec728c5db41e", "message": "Fix flow loops for single switch flows", "committedDate": "2020-12-11T08:43:33Z", "type": "commit"}, {"oid": "e1182ad8581f9aa7f1c7886f589001dc04cfdc5a", "url": "https://github.com/telstra/open-kilda/commit/e1182ad8581f9aa7f1c7886f589001dc04cfdc5a", "message": "add swapEndpoint test for flowLoop (#3894)", "committedDate": "2020-12-11T08:48:14Z", "type": "forcePushed"}, {"oid": "2dfb7128012c4e03bf2b5e7e562fac52d1be7c40", "url": "https://github.com/telstra/open-kilda/commit/2dfb7128012c4e03bf2b5e7e562fac52d1be7c40", "message": "Fix swap endpoints for looped flows", "committedDate": "2020-12-14T14:38:30Z", "type": "commit"}, {"oid": "a80c859b84d6bf077491536b5d36fc93325c6a95", "url": "https://github.com/telstra/open-kilda/commit/a80c859b84d6bf077491536b5d36fc93325c6a95", "message": "add swapEndpoint test for flowLoop (#3894)", "committedDate": "2020-12-14T14:38:42Z", "type": "commit"}, {"oid": "a80c859b84d6bf077491536b5d36fc93325c6a95", "url": "https://github.com/telstra/open-kilda/commit/a80c859b84d6bf077491536b5d36fc93325c6a95", "message": "add swapEndpoint test for flowLoop (#3894)", "committedDate": "2020-12-14T14:38:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0ODQ2OA==", "url": "https://github.com/telstra/open-kilda/pull/3892#discussion_r542648468", "bodyText": "ugly look", "author": "nikitamarchenko", "createdAt": "2020-12-14T18:58:50Z", "path": "src-java/stats-topology/stats-storm-topology/src/main/java/org/openkilda/wfm/topology/stats/metrics/FlowMetricGenBolt.java", "diffHunk": "@@ -64,7 +65,8 @@ protected void handleInput(Tuple input) throws Exception {\n \n     private void emit(FlowStatsEntry entry, long timestamp, @Nonnull SwitchId switchId,\n                       @Nullable CacheFlowEntry flowEntry) throws FlowCookieException {\n-        boolean isFlowSegmentEntry = new Cookie(entry.getCookie()).getType() == CookieType.SERVICE_OR_FLOW_SEGMENT;\n+        boolean isFlowSegmentEntry = new Cookie(entry.getCookie()).getType() == CookieType.SERVICE_OR_FLOW_SEGMENT\n+                && !new FlowSegmentCookie(entry.getCookie()).isLooped();", "originalCommit": "a80c859b84d6bf077491536b5d36fc93325c6a95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}