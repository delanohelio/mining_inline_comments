{"pr_number": 6305, "pr_title": "6865 fix past occurrences discovery", "pr_createdAt": "2020-09-21T18:05:58Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/6305", "timeline": [{"oid": "7c652b384cda1c9b6a688198a57a56cc4bddc3d8", "url": "https://github.com/sleuthkit/autopsy/commit/7c652b384cda1c9b6a688198a57a56cc4bddc3d8", "message": "6865 fix other occurrences for files", "committedDate": "2020-09-21T17:51:29Z", "type": "commit"}, {"oid": "0f0f7022b77f8f1515147c71cce53fd66f549adf", "url": "https://github.com/sleuthkit/autopsy/commit/0f0f7022b77f8f1515147c71cce53fd66f549adf", "message": "6865 fix alternate filter use for domains", "committedDate": "2020-09-21T17:57:11Z", "type": "commit"}, {"oid": "a1d6e36dba2bafaf854a05a600c659e9f8afe483", "url": "https://github.com/sleuthkit/autopsy/commit/a1d6e36dba2bafaf854a05a600c659e9f8afe483", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6865-FixPastOccurrencesDiscovery", "committedDate": "2020-09-21T18:04:21Z", "type": "commit"}, {"oid": "55b1ff2809ae6b0013520ec2672c0f3b6cab0007", "url": "https://github.com/sleuthkit/autopsy/commit/55b1ff2809ae6b0013520ec2672c0f3b6cab0007", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6865-FixPastOccurrencesDiscovery", "committedDate": "2020-09-21T18:11:28Z", "type": "commit"}, {"oid": "8cb278473dfdffdc36e2e52d3f47917764e67227", "url": "https://github.com/sleuthkit/autopsy/commit/8cb278473dfdffdc36e2e52d3f47917764e67227", "message": "6865 resolve merge conflicts", "committedDate": "2020-09-21T18:49:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NjIxOQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493656219", "bodyText": "I don't think we should run the CR for every query.", "author": "dannysmyda", "createdAt": "2020-09-23T14:49:44Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java", "diffHunk": "@@ -59,23 +59,25 @@\n     public Map<GroupKey, List<Result>> load(SearchKey key) throws DiscoveryException, SQLException, TskCoreException {\n \n         List<Result> domainResults = getResultDomainsFromDatabase(key);\n-\n+        //manually add the attributes for filters which use alternate non filters and could be used by grouping or sorting\n+        DiscoveryAttributes.FrequencyAttribute freqAttr = new DiscoveryAttributes.FrequencyAttribute();", "originalCommit": "8cb278473dfdffdc36e2e52d3f47917764e67227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5Mjk2OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493692969", "bodyText": "With your solution below this will be removed.", "author": "wschaeferB", "createdAt": "2020-09-23T15:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NjIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "14de7eda35ed9f1aba0edc69bf267e5571eb71fb", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java b/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\nindex 5388afc961..cd20b1ff00 100755\n--- a/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\n\n@@ -57,30 +57,23 @@\n \n     @Override\n     public Map<GroupKey, List<Result>> load(SearchKey key) throws DiscoveryException, SQLException, TskCoreException {\n-\n         List<Result> domainResults = getResultDomainsFromDatabase(key);\n-        //manually add the attributes for filters which use alternate non filters and could be used by grouping or sorting\n-        DiscoveryAttributes.FrequencyAttribute freqAttr = new DiscoveryAttributes.FrequencyAttribute();\n-        freqAttr.addAttributeToResults(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n-        // Apply secondary in memory filters\n-        for (AbstractFilter filter : key.getFilters()) {\n-            if (filter.useAlternateFilter()) {\n-                domainResults = filter.applyAlternateFilter(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n-            }\n-        }\n-\n         // Grouping by CR Frequency, for example, will require further processing\n         // in order to make the correct decision. The attribute types that require\n         // more information implement their logic by overriding `addAttributeToResults`.\n         List<AttributeType> searchAttributes = new ArrayList<>();\n         searchAttributes.add(key.getGroupAttributeType());\n         searchAttributes.addAll(key.getFileSortingMethod().getRequiredAttributes());\n-\n         for (AttributeType attr : searchAttributes) {\n             attr.addAttributeToResults(domainResults,\n                     key.getSleuthkitCase(), key.getCentralRepository());\n         }\n-\n+        // Apply secondary in memory filters\n+        for (AbstractFilter filter : key.getFilters()) {\n+            if (filter.useAlternateFilter()) {\n+                domainResults = filter.applyAlternateFilter(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n+            }\n+        }\n         // Sort the ResultDomains by the requested criteria.\n         final SearchResults searchResults = new SearchResults(\n                 key.getGroupSortingType(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODU5Nw==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493658597", "bodyText": "I think the mistake here on my part was not adding attributes to results before running the filters. So, I think this block of code should be moved before the filters are applied. That way, only the frequency attribute will run when it's selected.", "author": "dannysmyda", "createdAt": "2020-09-23T14:52:35Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java", "diffHunk": "@@ -59,23 +59,25 @@\n     public Map<GroupKey, List<Result>> load(SearchKey key) throws DiscoveryException, SQLException, TskCoreException {\n \n         List<Result> domainResults = getResultDomainsFromDatabase(key);\n-\n+        //manually add the attributes for filters which use alternate non filters and could be used by grouping or sorting\n+        DiscoveryAttributes.FrequencyAttribute freqAttr = new DiscoveryAttributes.FrequencyAttribute();\n+        freqAttr.addAttributeToResults(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n         // Apply secondary in memory filters\n         for (AbstractFilter filter : key.getFilters()) {\n             if (filter.useAlternateFilter()) {\n                 domainResults = filter.applyAlternateFilter(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n             }\n         }\n-        \n+\n         // Grouping by CR Frequency, for example, will require further processing\n         // in order to make the correct decision. The attribute types that require\n         // more information implement their logic by overriding `addAttributeToResults`.", "originalCommit": "8cb278473dfdffdc36e2e52d3f47917764e67227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NTM2MA==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493685360", "bodyText": "Definitely a better solution thank you, I just tossed in what I was doing for files and should of spent more time and figured out out how to re-arrange the code.", "author": "wschaeferB", "createdAt": "2020-09-23T15:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "14de7eda35ed9f1aba0edc69bf267e5571eb71fb", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java b/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\nindex 5388afc961..cd20b1ff00 100755\n--- a/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\n\n@@ -57,30 +57,23 @@\n \n     @Override\n     public Map<GroupKey, List<Result>> load(SearchKey key) throws DiscoveryException, SQLException, TskCoreException {\n-\n         List<Result> domainResults = getResultDomainsFromDatabase(key);\n-        //manually add the attributes for filters which use alternate non filters and could be used by grouping or sorting\n-        DiscoveryAttributes.FrequencyAttribute freqAttr = new DiscoveryAttributes.FrequencyAttribute();\n-        freqAttr.addAttributeToResults(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n-        // Apply secondary in memory filters\n-        for (AbstractFilter filter : key.getFilters()) {\n-            if (filter.useAlternateFilter()) {\n-                domainResults = filter.applyAlternateFilter(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n-            }\n-        }\n-\n         // Grouping by CR Frequency, for example, will require further processing\n         // in order to make the correct decision. The attribute types that require\n         // more information implement their logic by overriding `addAttributeToResults`.\n         List<AttributeType> searchAttributes = new ArrayList<>();\n         searchAttributes.add(key.getGroupAttributeType());\n         searchAttributes.addAll(key.getFileSortingMethod().getRequiredAttributes());\n-\n         for (AttributeType attr : searchAttributes) {\n             attr.addAttributeToResults(domainResults,\n                     key.getSleuthkitCase(), key.getCentralRepository());\n         }\n-\n+        // Apply secondary in memory filters\n+        for (AbstractFilter filter : key.getFilters()) {\n+            if (filter.useAlternateFilter()) {\n+                domainResults = filter.applyAlternateFilter(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n+            }\n+        }\n         // Sort the ResultDomains by the requested criteria.\n         final SearchResults searchResults = new SearchResults(\n                 key.getGroupSortingType(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MDI3OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493660279", "bodyText": "I think this should stay, so that if only the frequency filter is selected it'll work.", "author": "dannysmyda", "createdAt": "2020-09-23T14:54:38Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java", "diffHunk": "@@ -649,10 +652,6 @@ public boolean useAlternateFilter() {\n         @Override\n         public List<Result> applyAlternateFilter(List<Result> currentResults, SleuthkitCase caseDb,\n                 CentralRepository centralRepoDb) throws DiscoveryException {\n-            // Set the frequency for each file", "originalCommit": "8cb278473dfdffdc36e2e52d3f47917764e67227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NjM2OA==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493686368", "bodyText": "With your above change of re-ordering code yes it will be necessary to keep this.", "author": "wschaeferB", "createdAt": "2020-09-23T15:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MDI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "14de7eda35ed9f1aba0edc69bf267e5571eb71fb", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java b/Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java\nindex 4f7e13b570..9505cfa5e2 100644\n--- a/Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java\n\n@@ -652,6 +649,10 @@ public boolean useAlternateFilter() {\n         @Override\n         public List<Result> applyAlternateFilter(List<Result> currentResults, SleuthkitCase caseDb,\n                 CentralRepository centralRepoDb) throws DiscoveryException {\n+            // Set the frequency for each file\n+            DiscoveryAttributes.FrequencyAttribute freqAttr = new DiscoveryAttributes.FrequencyAttribute();\n+            freqAttr.addAttributeToResults(currentResults, caseDb, centralRepoDb);\n+\n             // If the frequency matches the filter, add the file to the results\n             List<Result> frequencyResults = new ArrayList<>();\n             for (Result file : currentResults) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MTUzNw==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493661537", "bodyText": "Wouldn't you need to do this https://github.com/sleuthkit/autopsy/blob/develop/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java#L73, before applying filters? Also just for grouping in general if the selected attribute needs it.", "author": "dannysmyda", "createdAt": "2020-09-23T14:56:08Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java", "diffHunk": "@@ -116,6 +116,9 @@\n             resultList.add(new ResultFile(abstractFile));\n         }\n \n+        //manually add the attributes for filters which use alternate non filters and could be used by grouping or sorting", "originalCommit": "8cb278473dfdffdc36e2e52d3f47917764e67227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5NjYxMw==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493696613", "bodyText": "We are currently adding the grouping and sorting attributes right before we group and sort in FileSearch.runFileSearch so my comment was very misleading by mentioning that it could also be used by grouping and sorting.\nI can pass along the additional arguments for grouping and sorting to this SearchFiltering.runQueries and then to this method getResultList and move the adding of grouping and sorting attributes into this method to re-order in a similar fashion to your fix for the Domain Search.\nThank you.", "author": "wschaeferB", "createdAt": "2020-09-23T15:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MTUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwNjkyNA==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493706924", "bodyText": "Or wait need to think about this, I can't remember what moving it will get me.", "author": "wschaeferB", "createdAt": "2020-09-23T15:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MTUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxOTU2Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493919562", "bodyText": "Yeah didn't need to be moved apparently not initializing the frequency variable to unknown for file results was basically the entire problem with file based other occurrences.", "author": "wschaeferB", "createdAt": "2020-09-23T21:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MTUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "14de7eda35ed9f1aba0edc69bf267e5571eb71fb", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java b/Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java\nindex 4f7e13b570..9505cfa5e2 100644\n--- a/Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/search/SearchFiltering.java\n\n@@ -116,9 +116,6 @@\n             resultList.add(new ResultFile(abstractFile));\n         }\n \n-        //manually add the attributes for filters which use alternate non filters and could be used by grouping or sorting\n-        DiscoveryAttributes.FrequencyAttribute freqAttr = new DiscoveryAttributes.FrequencyAttribute();\n-        freqAttr.addAttributeToResults(resultList, caseDb, centralRepoDb);\n         // Now run any non-SQL filters. \n         for (AbstractFilter filter : filters) {\n             if (filter.useAlternateFilter()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NDgwMw==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493664803", "bodyText": "This is important for not re-calculating frequencies. I think it should stay.", "author": "dannysmyda", "createdAt": "2020-09-23T15:00:09Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/search/DiscoveryAttributes.java", "diffHunk": "@@ -258,37 +258,33 @@ private void processResultFilesForCR(List<Result> results,\n             Set<String> hashesToLookUp = new HashSet<>();\n             List<ResultDomain> domainsToQuery = new ArrayList<>();\n             for (Result result : results) {\n-                if (result.getKnown() == TskData.FileKnown.KNOWN) {\n-                    result.setFrequency(SearchData.Frequency.KNOWN);\n-                }\n-\n-                if (result.getType() != SearchData.Type.DOMAIN) {\n-                    ResultFile file = (ResultFile) result;\n-                    if (file.getFrequency() == SearchData.Frequency.UNKNOWN\n-                            && file.getFirstInstance().getMd5Hash() != null\n-                            && !file.getFirstInstance().getMd5Hash().isEmpty()) {\n-                        hashesToLookUp.add(file.getFirstInstance().getMd5Hash());\n-                        currentFiles.add(file);\n+                // If frequency was already calculated, skip...\n+                if (result.getFrequency() == SearchData.Frequency.UNKNOWN) {\n+                    if (result.getKnown() == TskData.FileKnown.KNOWN) {\n+                        result.setFrequency(SearchData.Frequency.KNOWN);\n                     }\n \n-                    if (hashesToLookUp.size() >= BATCH_SIZE) {\n-                        computeFrequency(hashesToLookUp, currentFiles, centralRepoDb);\n+                    if (result.getType() != SearchData.Type.DOMAIN) {\n+                        ResultFile file = (ResultFile) result;\n+                        if (file.getFirstInstance().getMd5Hash() != null\n+                                && !file.getFirstInstance().getMd5Hash().isEmpty()) {\n+                            hashesToLookUp.add(file.getFirstInstance().getMd5Hash());\n+                            currentFiles.add(file);\n+                        }\n \n-                        hashesToLookUp.clear();\n-                        currentFiles.clear();\n-                    }\n-                } else {\n-                    ResultDomain domainInstance = (ResultDomain) result;\n-                    if (domainInstance.getFrequency() != SearchData.Frequency.UNKNOWN) {", "originalCommit": "8cb278473dfdffdc36e2e52d3f47917764e67227", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MzM2OA==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r493683368", "bodyText": "This check was moved earlier to line 262 as a conditional just inside the for the loop wrapping everything so that frequencies won't be recalculated for files either.", "author": "wschaeferB", "createdAt": "2020-09-23T15:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NDgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MjgzOQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r494352839", "bodyText": "I missed that, thanks", "author": "dannysmyda", "createdAt": "2020-09-24T14:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NDgwMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1fd17fa52140c2f6d055dc6f7ac0c9b7e888ab84", "url": "https://github.com/sleuthkit/autopsy/commit/1fd17fa52140c2f6d055dc6f7ac0c9b7e888ab84", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6865-FixPastOccurrencesDiscovery", "committedDate": "2020-09-23T15:20:09Z", "type": "commit"}, {"oid": "14de7eda35ed9f1aba0edc69bf267e5571eb71fb", "url": "https://github.com/sleuthkit/autopsy/commit/14de7eda35ed9f1aba0edc69bf267e5571eb71fb", "message": "6865 changes to address feedback and help performance", "committedDate": "2020-09-23T21:55:30Z", "type": "commit"}, {"oid": "fb57c45be5cdfdf7713f0eba14729664e514b9aa", "url": "https://github.com/sleuthkit/autopsy/commit/fb57c45be5cdfdf7713f0eba14729664e514b9aa", "message": "6865 resolve merge conflicts", "committedDate": "2020-09-23T22:05:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MjAwMA==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r494352000", "bodyText": "There was a thread interrupt check here that got removed with the merge conflict.", "author": "dannysmyda", "createdAt": "2020-09-24T14:10:49Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java", "diffHunk": "@@ -57,36 +57,35 @@\n \n     @Override\n     public Map<GroupKey, List<Result>> load(SearchKey key) throws DiscoveryException, SQLException, TskCoreException, InterruptedException {\n-\n         List<Result> domainResults = getResultDomainsFromDatabase(key);\n-\n         // Apply secondary in memory filters\n         for (AbstractFilter filter : key.getFilters()) {\n             if(Thread.currentThread().isInterrupted()) {\n                 throw new InterruptedException();\n-            }\n-            \n+            }      \n             if (filter.useAlternateFilter()) {\n                 domainResults = filter.applyAlternateFilter(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n             }\n         }\n-        \n         // Grouping by CR Frequency, for example, will require further processing\n         // in order to make the correct decision. The attribute types that require\n         // more information implement their logic by overriding `addAttributeToResults`.\n         List<AttributeType> searchAttributes = new ArrayList<>();\n         searchAttributes.add(key.getGroupAttributeType());\n         searchAttributes.addAll(key.getFileSortingMethod().getRequiredAttributes());\n-        \n         for (AttributeType attr : searchAttributes) {\n             if(Thread.currentThread().isInterrupted()) {\n                 throw new InterruptedException();\n-            }\n-            \n+            }       \n             attr.addAttributeToResults(domainResults, \n                     key.getSleuthkitCase(), key.getCentralRepository());\n         }\n-\n+        // Apply secondary in memory filters\n+        for (AbstractFilter filter : key.getFilters()) {\n+            if (filter.useAlternateFilter()) {", "originalCommit": "fb57c45be5cdfdf7713f0eba14729664e514b9aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NDExNg==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r494374116", "bodyText": "woops, good catch. Thank you", "author": "wschaeferB", "createdAt": "2020-09-24T14:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MjAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "8098b7c1e9ac43447ca5a1377d7a54d0c39cf814", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java b/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\nindex e8f5bcade9..16729b49d3 100755\n--- a/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\n\n@@ -60,9 +60,9 @@\n         List<Result> domainResults = getResultDomainsFromDatabase(key);\n         // Apply secondary in memory filters\n         for (AbstractFilter filter : key.getFilters()) {\n-            if(Thread.currentThread().isInterrupted()) {\n+            if (Thread.currentThread().isInterrupted()) {\n                 throw new InterruptedException();\n-            }      \n+            }\n             if (filter.useAlternateFilter()) {\n                 domainResults = filter.applyAlternateFilter(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n             }\n"}}, {"oid": "8098b7c1e9ac43447ca5a1377d7a54d0c39cf814", "url": "https://github.com/sleuthkit/autopsy/commit/8098b7c1e9ac43447ca5a1377d7a54d0c39cf814", "message": "6865 add back interrupted check after bad merge conflict resolution", "committedDate": "2020-09-24T14:55:10Z", "type": "commit"}, {"oid": "5f64357034a879dd2ecc6b6d3dabbaf405b31a9f", "url": "https://github.com/sleuthkit/autopsy/commit/5f64357034a879dd2ecc6b6d3dabbaf405b31a9f", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6865-FixPastOccurrencesDiscovery", "committedDate": "2020-09-24T14:56:19Z", "type": "commit"}, {"oid": "8ad93614adda628edbd2d61574770af1228088f6", "url": "https://github.com/sleuthkit/autopsy/commit/8ad93614adda628edbd2d61574770af1228088f6", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6865-FixPastOccurrencesDiscovery", "committedDate": "2020-09-24T15:23:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2NjQ5Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r494566492", "bodyText": "This code is now duplicated.", "author": "dannysmyda", "createdAt": "2020-09-24T19:40:24Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java", "diffHunk": "@@ -57,36 +57,38 @@\n \n     @Override\n     public Map<GroupKey, List<Result>> load(SearchKey key) throws DiscoveryException, SQLException, TskCoreException, InterruptedException {\n-\n         List<Result> domainResults = getResultDomainsFromDatabase(key);\n-\n         // Apply secondary in memory filters\n         for (AbstractFilter filter : key.getFilters()) {", "originalCommit": "8ad93614adda628edbd2d61574770af1228088f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4OTQwMA==", "url": "https://github.com/sleuthkit/autopsy/pull/6305#discussion_r494589400", "bodyText": "it appears this happened at the same time as the deleted conditional, and all revolves around me botching that merge conflict resolution.\nWill fix, thank you for catching, apologies for the headache.", "author": "wschaeferB", "createdAt": "2020-09-24T20:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2NjQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "05f8806c5a19ff9d17ba6c1e1fa0ab80813c52f8", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java b/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\nindex 16729b49d3..11b34f5fd4 100755\n--- a/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/search/DomainSearchCacheLoader.java\n\n@@ -58,15 +58,6 @@\n     @Override\n     public Map<GroupKey, List<Result>> load(SearchKey key) throws DiscoveryException, SQLException, TskCoreException, InterruptedException {\n         List<Result> domainResults = getResultDomainsFromDatabase(key);\n-        // Apply secondary in memory filters\n-        for (AbstractFilter filter : key.getFilters()) {\n-            if (Thread.currentThread().isInterrupted()) {\n-                throw new InterruptedException();\n-            }\n-            if (filter.useAlternateFilter()) {\n-                domainResults = filter.applyAlternateFilter(domainResults, key.getSleuthkitCase(), key.getCentralRepository());\n-            }\n-        }\n         // Grouping by CR Frequency, for example, will require further processing\n         // in order to make the correct decision. The attribute types that require\n         // more information implement their logic by overriding `addAttributeToResults`.\n"}}, {"oid": "6bd138cdc529e08b87df24b64c3c79ee9bf919eb", "url": "https://github.com/sleuthkit/autopsy/commit/6bd138cdc529e08b87df24b64c3c79ee9bf919eb", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6865-FixPastOccurrencesDiscovery", "committedDate": "2020-09-24T20:29:26Z", "type": "commit"}, {"oid": "05f8806c5a19ff9d17ba6c1e1fa0ab80813c52f8", "url": "https://github.com/sleuthkit/autopsy/commit/05f8806c5a19ff9d17ba6c1e1fa0ab80813c52f8", "message": "6865 remove duplicated code", "committedDate": "2020-09-24T20:29:52Z", "type": "commit"}]}