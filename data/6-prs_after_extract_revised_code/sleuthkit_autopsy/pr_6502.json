{"pr_number": 6502, "pr_title": "6985 mini timeline discovery", "pr_createdAt": "2020-11-25T19:52:36Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/6502", "timeline": [{"oid": "597eec83b1d82f7dfaf8eae40e94007450c5031a", "url": "https://github.com/sleuthkit/autopsy/commit/597eec83b1d82f7dfaf8eae40e94007450c5031a", "message": "6985 discovery mini timeline view", "committedDate": "2020-11-23T15:52:30Z", "type": "commit"}, {"oid": "9752e3ff5f7596917fbc9766c096ec83dac30531", "url": "https://github.com/sleuthkit/autopsy/commit/9752e3ff5f7596917fbc9766c096ec83dac30531", "message": "6885 bundle merged files, select mini timeline by default", "committedDate": "2020-11-23T15:58:00Z", "type": "commit"}, {"oid": "11cdf94713a2d2a22637c825a3375698699944b1", "url": "https://github.com/sleuthkit/autopsy/commit/11cdf94713a2d2a22637c825a3375698699944b1", "message": "6985 latest fix for viewing results", "committedDate": "2020-11-23T16:14:17Z", "type": "commit"}, {"oid": "1fb98023d1be2a6c5357ba3c390f82cf713b9156", "url": "https://github.com/sleuthkit/autopsy/commit/1fb98023d1be2a6c5357ba3c390f82cf713b9156", "message": "6985 working mini-timeline view for discovery", "committedDate": "2020-11-24T16:17:00Z", "type": "commit"}, {"oid": "9aeaa01319e7007bd13540fe72ba72b1268dc4b8", "url": "https://github.com/sleuthkit/autopsy/commit/9aeaa01319e7007bd13540fe72ba72b1268dc4b8", "message": "6985 fix raw types warning", "committedDate": "2020-11-24T17:39:25Z", "type": "commit"}, {"oid": "8653e908fe4a26757529727f15c30d3405e177e3", "url": "https://github.com/sleuthkit/autopsy/commit/8653e908fe4a26757529727f15c30d3405e177e3", "message": "6985 some fixes for comments and names", "committedDate": "2020-11-25T19:27:30Z", "type": "commit"}, {"oid": "f52351bf47056b5787e43e087cc85fdced9b3c9c", "url": "https://github.com/sleuthkit/autopsy/commit/f52351bf47056b5787e43e087cc85fdced9b3c9c", "message": "6985 final clean up of mini timeline before initial pr", "committedDate": "2020-11-25T19:48:23Z", "type": "commit"}, {"oid": "83a8625d65159ce411cac80b71062153ce40473e", "url": "https://github.com/sleuthkit/autopsy/commit/83a8625d65159ce411cac80b71062153ce40473e", "message": "6985 bundle merged file", "committedDate": "2020-11-25T19:52:16Z", "type": "commit"}, {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970", "url": "https://github.com/sleuthkit/autopsy/commit/186ca85b4594a47ea977a56d7183b1c9802ff970", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6985-MiniTimelineDiscovery", "committedDate": "2020-11-25T20:15:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyNjg4Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533526883", "bodyText": "Should the InterruptedException here be treated as a cancellation?", "author": "gdicristofaro", "createdAt": "2020-12-01T15:59:59Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import org.sleuthkit.autopsy.discovery.search.MiniTimelineResult;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import javax.swing.SwingWorker;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.discovery.search.DiscoveryEventUtils;\n+import org.sleuthkit.autopsy.discovery.search.DomainSearch;\n+\n+/**\n+ * SwingWorker to retrieve a list of artifacts for a specified type and domain.\n+ */\n+class MiniTimelineWorker extends SwingWorker<List<MiniTimelineResult>, Void> {\n+\n+    private final static Logger logger = Logger.getLogger(MiniTimelineWorker.class.getName());\n+    private final String domain;\n+\n+    /**\n+     * Construct a new ArtifactsWorker.\n+     *\n+     * @param artifactType The type of artifact being retrieved.\n+     * @param domain       The domain the artifacts should have as an attribute.\n+     */\n+    MiniTimelineWorker(String domain) {\n+        this.domain = domain;\n+    }\n+\n+    @Override\n+    protected List<MiniTimelineResult> doInBackground() throws Exception {\n+        if (!StringUtils.isBlank(domain)) {\n+            DomainSearch domainSearch = new DomainSearch();\n+            return domainSearch.getAllArtifactsForDomain(Case.getCurrentCase().getSleuthkitCase(), domain);\n+        } else {\n+            return new ArrayList<>();\n+        }\n+    }\n+\n+    @Override\n+    protected void done() {\n+        List<MiniTimelineResult> results = null;\n+        if (!isCancelled()) {\n+            try {\n+                results = get();\n+            } catch (InterruptedException | ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Exception while trying to get list of artifacts for Domain details for mini timeline view for domain: \" + domain, ex);", "originalCommit": "186ca85b4594a47ea977a56d7183b1c9802ff970", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3Mjc5MQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r534372791", "bodyText": "I don't think it should at this point, since we only want to entirely ignore things if the swing worker is cancelled in which case there will be a cancellation exception instead of an interruptedexception.", "author": "wschaeferB", "createdAt": "2020-12-02T18:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyNjg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bd3f55803e5ffcabdbf2b7575f71d1c013347d45", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java\nindex 8bb994d745..2bf3653751 100644\n--- a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java\n\n@@ -29,6 +29,7 @@\n import org.sleuthkit.autopsy.casemodule.Case;\n import org.sleuthkit.autopsy.coreutils.Logger;\n import org.sleuthkit.autopsy.discovery.search.DiscoveryEventUtils;\n+import org.sleuthkit.autopsy.discovery.search.DiscoveryException;\n import org.sleuthkit.autopsy.discovery.search.DomainSearch;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyODg1OA==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533528858", "bodyText": "It would help readability if this was broken up into multiple lines.", "author": "gdicristofaro", "createdAt": "2020-12-01T16:02:21Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JPanel;\n+import javax.swing.event.ListSelectionListener;\n+import javax.swing.table.AbstractTableModel;\n+import org.apache.commons.lang.StringUtils;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.ThreadConfined;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.BlackboardAttribute.Type;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Panel to display list of dates and counts.\n+ */\n+class MiniTimelineArtifactListPanel extends JPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+    private final TypeDescriptionTableModel tableModel;\n+    private static final Logger logger = Logger.getLogger(MiniTimelineArtifactListPanel.class.getName());\n+    private static final BlackboardAttribute.ATTRIBUTE_TYPE[] DESCRIPTION_TYPES = {BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TITLE, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PROG_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TEXT, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL};", "originalCommit": "186ca85b4594a47ea977a56d7183b1c9802ff970", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb6a593300ad1791a9b399a6d441a7941abac845", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\nindex 7a07108d9d..81919329cd 100644\n--- a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\n\n@@ -34,7 +34,7 @@\n import org.sleuthkit.datamodel.TskCoreException;\n \n /**\n- * Panel to display list of dates and counts.\n+ * Panel to display list of artifacts types and descriptions.\n  */\n class MiniTimelineArtifactListPanel extends JPanel {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNDczMA==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533534730", "bodyText": "It looks like this file was generated with the gui designer.  Is there are corresponding .form file?", "author": "gdicristofaro", "createdAt": "2020-12-01T16:09:51Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*", "originalCommit": "186ca85b4594a47ea977a56d7183b1c9802ff970", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb6a593300ad1791a9b399a6d441a7941abac845", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\nindex 7a07108d9d..81919329cd 100644\n--- a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\n\n@@ -34,7 +34,7 @@\n import org.sleuthkit.datamodel.TskCoreException;\n \n /**\n- * Panel to display list of dates and counts.\n+ * Panel to display list of artifacts types and descriptions.\n  */\n class MiniTimelineArtifactListPanel extends JPanel {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNTM2Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533535363", "bodyText": "It looks like this file was generated with the gui designer.  Is there are corresponding .form file?", "author": "gdicristofaro", "createdAt": "2020-12-01T16:10:43Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineDateListPanel.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*", "originalCommit": "186ca85b4594a47ea977a56d7183b1c9802ff970", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MjczMQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533552731", "bodyText": "Same as the other list no form file because it was a refactored copy", "author": "wschaeferB", "createdAt": "2020-12-01T16:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNTM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bb6a593300ad1791a9b399a6d441a7941abac845", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineDateListPanel.java b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineDateListPanel.java\nindex 99455ee967..10d83ab5f9 100644\n--- a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineDateListPanel.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineDateListPanel.java\n\n@@ -123,7 +123,7 @@ void addArtifacts(List<MiniTimelineResult> dateArtifactList) {\n      * Remove all artifacts from the list of artifacts displayed.\n      */\n     @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n-    void clearDates() {\n+    void clearList() {\n         tableModel.setContents(new ArrayList<>());\n         tableModel.fireTableDataChanged();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MDQ1MA==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533550450", "bodyText": "It was a copy refactor so there is not a form file. I did put this comment in the initComponents file to reflect the nature of this file.", "author": "wschaeferB", "createdAt": "2020-12-01T16:30:29Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JPanel;\n+import javax.swing.event.ListSelectionListener;\n+import javax.swing.table.AbstractTableModel;\n+import org.apache.commons.lang.StringUtils;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.ThreadConfined;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.BlackboardAttribute.Type;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Panel to display list of dates and counts.\n+ */\n+class MiniTimelineArtifactListPanel extends JPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+    private final TypeDescriptionTableModel tableModel;\n+    private static final Logger logger = Logger.getLogger(MiniTimelineArtifactListPanel.class.getName());\n+    private static final BlackboardAttribute.ATTRIBUTE_TYPE[] DESCRIPTION_TYPES = {BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TITLE, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PROG_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TEXT, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL};\n+\n+    /**\n+     * Creates new form DiscoveryTimelineListPanel.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    MiniTimelineArtifactListPanel() {\n+        tableModel = new TypeDescriptionTableModel();\n+        initComponents();\n+        jTable1.getRowSorter().toggleSortOrder(0);\n+        jTable1.getRowSorter().toggleSortOrder(0);\n+    }\n+\n+    /**\n+     * Add a listener to the table of dates to perform actions when a date is\n+     * selected.\n+     *\n+     * @param listener The listener to add to the table of artifacts.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void addSelectionListener(ListSelectionListener listener) {\n+        jTable1.getSelectionModel().addListSelectionListener(listener);\n+    }\n+\n+    /**\n+     * Remove a listener from the table of dates.\n+     *\n+     * @param listener The listener to remove from the table of dates.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void removeListSelectionListener(ListSelectionListener listener) {\n+        jTable1.getSelectionModel().removeListSelectionListener(listener);\n+    }\n+\n+    /**\n+     * Whether the list of dates is empty.\n+     *\n+     * @return True if the list of dates is empty, false if there are dates.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    boolean isEmpty() {\n+        return tableModel.getRowCount() <= 0;\n+    }\n+\n+    /**\n+     * Select the first available date in the list if it is not empty to\n+     * populate the list to the right.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void selectFirst() {\n+        if (!isEmpty()) {\n+            jTable1.setRowSelectionInterval(0, 0);\n+        } else {\n+            jTable1.clearSelection();\n+        }\n+    }\n+\n+    /**\n+     * The artifact which is currently selected, null if no artifact is\n+     * selected.\n+     *\n+     * @return The currently selected BlackboardArtifact or null if none is\n+     *         selected.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    BlackboardArtifact getSelectedArtifact() {\n+        int selectedIndex = jTable1.getSelectionModel().getLeadSelectionIndex();\n+        if (selectedIndex < jTable1.getSelectionModel().getMinSelectionIndex() || jTable1.getSelectionModel().getMaxSelectionIndex() < 0 || selectedIndex > jTable1.getSelectionModel().getMaxSelectionIndex()) {\n+            return null;\n+        }\n+        return tableModel.getArtifactByRow(jTable1.convertRowIndexToModel(selectedIndex));\n+    }\n+\n+    /**\n+     * Add the specified list of dates to the list of dates which should be\n+     * displayed.\n+     *\n+     * @param dateCountList The list of dates to display.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void addArtifacts(List<BlackboardArtifact> dateCountList) {\n+        tableModel.setContents(dateCountList);\n+        jTable1.validate();\n+        jTable1.repaint();\n+        tableModel.fireTableDataChanged();\n+    }\n+\n+    /**\n+     * Remove all artifacts from the list of artifacts displayed.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void clearDates() {\n+        tableModel.setContents(new ArrayList<>());\n+        tableModel.fireTableDataChanged();\n+    }\n+\n+    /**\n+     * Initialize the UI components.\n+     */\n+    private void initComponents() {\n+        //This class is a refactored copy of ArtifactsListPanel so lacks the form however the init method still constructs the proper UI elements.", "originalCommit": "186ca85b4594a47ea977a56d7183b1c9802ff970", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2NzI5MA==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533567290", "bodyText": "Yeah, I missed that.", "author": "gdicristofaro", "createdAt": "2020-12-01T16:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MDQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "bb6a593300ad1791a9b399a6d441a7941abac845", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\nindex 7a07108d9d..81919329cd 100644\n--- a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java\n\n@@ -34,7 +34,7 @@\n import org.sleuthkit.datamodel.TskCoreException;\n \n /**\n- * Panel to display list of dates and counts.\n+ * Panel to display list of artifacts types and descriptions.\n  */\n class MiniTimelineArtifactListPanel extends JPanel {\n \n"}}, {"oid": "46212101789be2742945bc7b66b8bf52ac38e8f7", "url": "https://github.com/sleuthkit/autopsy/commit/46212101789be2742945bc7b66b8bf52ac38e8f7", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6985-MiniTimelineDiscovery", "committedDate": "2020-12-01T17:03:15Z", "type": "commit"}, {"oid": "63ee350aa9f5b61287b288887d4c27368fd0c34f", "url": "https://github.com/sleuthkit/autopsy/commit/63ee350aa9f5b61287b288887d4c27368fd0c34f", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6985-MiniTimelineDiscovery", "committedDate": "2020-12-01T17:32:15Z", "type": "commit"}, {"oid": "bd3f55803e5ffcabdbf2b7575f71d1c013347d45", "url": "https://github.com/sleuthkit/autopsy/commit/bd3f55803e5ffcabdbf2b7575f71d1c013347d45", "message": "6985 fix exception when caching cancelled during minitimeline population", "committedDate": "2020-12-01T18:48:49Z", "type": "commit"}, {"oid": "3616433420152596b1c8a58eca1511aff137ce4d", "url": "https://github.com/sleuthkit/autopsy/commit/3616433420152596b1c8a58eca1511aff137ce4d", "message": "6985 clarify message", "committedDate": "2020-12-01T18:50:44Z", "type": "commit"}, {"oid": "1386b7680f8b054bd812d82ab20424ce18c6e0a9", "url": "https://github.com/sleuthkit/autopsy/commit/1386b7680f8b054bd812d82ab20424ce18c6e0a9", "message": "6985 fix exception handling for artifact type tabs", "committedDate": "2020-12-01T19:40:32Z", "type": "commit"}, {"oid": "bb6a593300ad1791a9b399a6d441a7941abac845", "url": "https://github.com/sleuthkit/autopsy/commit/bb6a593300ad1791a9b399a6d441a7941abac845", "message": "6985 fix reseting of lists", "committedDate": "2020-12-01T21:37:28Z", "type": "commit"}, {"oid": "f896b6724821ccfacbe62bed757e960f97af04fb", "url": "https://github.com/sleuthkit/autopsy/commit/f896b6724821ccfacbe62bed757e960f97af04fb", "message": "6985 attempt to fix resizing", "committedDate": "2020-12-01T22:26:16Z", "type": "commit"}, {"oid": "ccf2ebdb6d666b9ed2fd2f1589e46e8ce90e4baa", "url": "https://github.com/sleuthkit/autopsy/commit/ccf2ebdb6d666b9ed2fd2f1589e46e8ce90e4baa", "message": "6985 break up long lines for readability", "committedDate": "2020-12-01T22:30:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4OTczOQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r535189739", "bodyText": "I think the CancellationException is thrown if the get method is called after the swing worker has been cancelled and the InterruptedException is thrown if a waiting thread receives an interrupt during cancellation based on https://docs.oracle.com/javase/tutorial/uiswing/concurrency/cancel.html and https://docs.oracle.com/javase/7/docs/api/javax/swing/SwingWorker.html#get(). I'm not seeing anything in your get method that would directly throw an InterruptedException so it is probably okay, but if the background method was changed to use, say the cache or a sql query directly where an InterruptedException could potentially be thrown, it might be good to treat as a cancellation.", "author": "gdicristofaro", "createdAt": "2020-12-03T12:32:12Z", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import org.sleuthkit.autopsy.discovery.search.MiniTimelineResult;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import javax.swing.SwingWorker;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.discovery.search.DiscoveryEventUtils;\n+import org.sleuthkit.autopsy.discovery.search.DiscoveryException;\n+import org.sleuthkit.autopsy.discovery.search.DomainSearch;\n+\n+/**\n+ * SwingWorker to retrieve a list of artifacts for a specified type and domain.\n+ */\n+class MiniTimelineWorker extends SwingWorker<List<MiniTimelineResult>, Void> {\n+\n+    private final static Logger logger = Logger.getLogger(MiniTimelineWorker.class.getName());\n+    private final String domain;\n+\n+    /**\n+     * Construct a new ArtifactsWorker.\n+     *\n+     * @param artifactType The type of artifact being retrieved.\n+     * @param domain       The domain the artifacts should have as an attribute.\n+     */\n+    MiniTimelineWorker(String domain) {\n+        this.domain = domain;\n+    }\n+\n+    @Override\n+    protected List<MiniTimelineResult> doInBackground() throws Exception {\n+        if (!StringUtils.isBlank(domain)) {\n+            DomainSearch domainSearch = new DomainSearch();\n+            try {\n+                return domainSearch.getAllArtifactsForDomain(Case.getCurrentCase().getSleuthkitCase(), domain);\n+            } catch (DiscoveryException ex) {\n+                if (ex.getCause() instanceof InterruptedException) {\n+                    logger.log(Level.INFO, \"MiniTimeline search was cancelled or interrupted for domain: {0}\", domain);\n+                } else {\n+                    throw ex;\n+                }\n+            }\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    @Override\n+    protected void done() {\n+        List<MiniTimelineResult> results = null;\n+        if (!isCancelled()) {\n+            try {\n+                results = get();\n+            } catch (InterruptedException | ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Exception while trying to get list of artifacts for Domain details for mini timeline view for domain: \" + domain, ex);", "originalCommit": "ccf2ebdb6d666b9ed2fd2f1589e46e8ce90e4baa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a6d883b4997b0e4dff6fb58514ab9734eff17dc", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java\nindex fefe5d08d3..5df30ba3f6 100644\n--- a/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java\n+++ b/Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java\n\n@@ -52,10 +52,12 @@\n \n     @Override\n     protected List<MiniTimelineResult> doInBackground() throws Exception {\n+        List<MiniTimelineResult> results = new ArrayList<>();\n         if (!StringUtils.isBlank(domain)) {\n             DomainSearch domainSearch = new DomainSearch();\n             try {\n-                return domainSearch.getAllArtifactsForDomain(Case.getCurrentCase().getSleuthkitCase(), domain);\n+                results.addAll(domainSearch.getAllArtifactsForDomain(Case.getCurrentCase().getSleuthkitCase(), domain));\n+\n             } catch (DiscoveryException ex) {\n                 if (ex.getCause() instanceof InterruptedException) {\n                     logger.log(Level.INFO, \"MiniTimeline search was cancelled or interrupted for domain: {0}\", domain);\n"}}, {"oid": "9a6d883b4997b0e4dff6fb58514ab9734eff17dc", "url": "https://github.com/sleuthkit/autopsy/commit/9a6d883b4997b0e4dff6fb58514ab9734eff17dc", "message": "6985 fix failure to load first time", "committedDate": "2020-12-07T14:46:40Z", "type": "commit"}, {"oid": "6a70439b8fcd9cd2e4e486452d5ae2ab8cf9648c", "url": "https://github.com/sleuthkit/autopsy/commit/6a70439b8fcd9cd2e4e486452d5ae2ab8cf9648c", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6985-MiniTimelineDiscovery", "committedDate": "2020-12-07T14:47:55Z", "type": "commit"}]}