{"pr_number": 6393, "pr_title": "6951 - Fix for Nightly TIFF failures", "pr_createdAt": "2020-10-15T21:03:18Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/6393", "timeline": [{"oid": "46ef84d40b6026c1712a11850a44745fdb453e1f", "url": "https://github.com/sleuthkit/autopsy/commit/46ef84d40b6026c1712a11850a44745fdb453e1f", "message": "Fixed the nightly tiff bug by adding a consistent ordering to the image providers of ImageIO", "committedDate": "2020-10-15T21:00:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzODU2OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6393#discussion_r506338569", "bodyText": "Could change to size - 1", "author": "APriestman", "createdAt": "2020-10-16T11:55:21Z", "path": "Core/src/org/sleuthkit/autopsy/ingest/IngestManager.java", "diffHunk": "@@ -887,6 +897,44 @@ long getFreeDiskSpace() {\n         }\n     }\n \n+    /**\n+     * Initializes the ImageIO API and sorts the providers for\n+     * deterministic image reading and writing.\n+     */\n+    private void initializeImageIO() {\n+        ImageIO.scanForPlugins();\n+        \n+        // Sift through each registry category and sort category providers by\n+        // their canonical class name.\n+        IIORegistry pluginRegistry = IIORegistry.getDefaultInstance();\n+        Iterator<Class<?>> categories = pluginRegistry.getCategories();\n+        while(categories.hasNext()) {\n+            sortPluginsInCategory(pluginRegistry, categories.next());\n+        }\n+    }\n+    \n+    /**\n+     * Sorts all ImageIO SPI providers by their class name.\n+     */\n+    private <T> void sortPluginsInCategory(IIORegistry pluginRegistry, Class<T> category) {\n+        Iterator<T> serviceProviderIter = pluginRegistry.getServiceProviders(category, false);\n+        ArrayList<T> providers = new ArrayList<>();\n+        while (serviceProviderIter.hasNext()) {\n+            providers.add(serviceProviderIter.next());\n+        }\n+        Collections.sort(providers, (first, second) -> {\n+            return first.getClass().getCanonicalName().compareToIgnoreCase(second.getClass().getCanonicalName());\n+        });\n+        for(int i = 0; i < providers.size(); i++) {", "originalCommit": "46ef84d40b6026c1712a11850a44745fdb453e1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67dc05956dfb1821184dcbd43d5e890dd826830b", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/ingest/IngestManager.java b/Core/src/org/sleuthkit/autopsy/ingest/IngestManager.java\nindex 3600108a0a..8dc04f9f56 100644\n--- a/Core/src/org/sleuthkit/autopsy/ingest/IngestManager.java\n+++ b/Core/src/org/sleuthkit/autopsy/ingest/IngestManager.java\n\n@@ -897,44 +890,6 @@ long getFreeDiskSpace() {\n         }\n     }\n \n-    /**\n-     * Initializes the ImageIO API and sorts the providers for\n-     * deterministic image reading and writing.\n-     */\n-    private void initializeImageIO() {\n-        ImageIO.scanForPlugins();\n-        \n-        // Sift through each registry category and sort category providers by\n-        // their canonical class name.\n-        IIORegistry pluginRegistry = IIORegistry.getDefaultInstance();\n-        Iterator<Class<?>> categories = pluginRegistry.getCategories();\n-        while(categories.hasNext()) {\n-            sortPluginsInCategory(pluginRegistry, categories.next());\n-        }\n-    }\n-    \n-    /**\n-     * Sorts all ImageIO SPI providers by their class name.\n-     */\n-    private <T> void sortPluginsInCategory(IIORegistry pluginRegistry, Class<T> category) {\n-        Iterator<T> serviceProviderIter = pluginRegistry.getServiceProviders(category, false);\n-        ArrayList<T> providers = new ArrayList<>();\n-        while (serviceProviderIter.hasNext()) {\n-            providers.add(serviceProviderIter.next());\n-        }\n-        Collections.sort(providers, (first, second) -> {\n-            return first.getClass().getCanonicalName().compareToIgnoreCase(second.getClass().getCanonicalName());\n-        });\n-        for(int i = 0; i < providers.size(); i++) {\n-            for(int j = i + 1; j < providers.size(); j++) {\n-                // The registry only accepts pairwise orderings. To guarentee a \n-                // total order, all pairs need to be exhausted.\n-                pluginRegistry.setOrdering(category, providers.get(i), \n-                        providers.get(j));\n-            }\n-        }\n-    }\n-\n     /**\n      * Creates and starts an ingest job for a collection of data sources.\n      */\n"}}, {"oid": "67dc05956dfb1821184dcbd43d5e890dd826830b", "url": "https://github.com/sleuthkit/autopsy/commit/67dc05956dfb1821184dcbd43d5e890dd826830b", "message": "Removed the init code from ingest and added it to the embedded file extractors start up code", "committedDate": "2020-10-16T18:32:24Z", "type": "commit"}, {"oid": "600585ebab44734c68225cc7fbd529b3dc1caa2b", "url": "https://github.com/sleuthkit/autopsy/commit/600585ebab44734c68225cc7fbd529b3dc1caa2b", "message": "Removed unused imports", "committedDate": "2020-10-16T18:33:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MDk2OA==", "url": "https://github.com/sleuthkit/autopsy/pull/6393#discussion_r506690968", "bodyText": "We don't need to do this on every thread, i.e., in every ingest module instance startUp() call in an ingest job, do we? In fact, we should only need to do this once per application session, right?", "author": "rcordovano", "createdAt": "2020-10-16T19:52:59Z", "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/EmbeddedFileExtractorIngestModule.java", "diffHunk": "@@ -122,8 +127,53 @@ public void startUp(IngestJobContext context) throws IngestModuleException {\n         } catch (NoCurrentCaseException ex) {\n             throw new IngestModuleException(Bundle.EmbeddedFileExtractorIngestModule_UnableToGetMSOfficeExtractor_errMsg(), ex);\n         }\n+        \n+        /**\n+         * Initialize Java's Image I/O API so that image reading and writing \n+         * (needed for image extraction) happens consistently through the \n+         * same providers. See JIRA-6951 for more details.\n+         */\n+        initializeImageIO();        ", "originalCommit": "600585ebab44734c68225cc7fbd529b3dc1caa2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwODk2Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/6393#discussion_r506708962", "bodyText": "I don't think it hurts. Besides, being a global registry means any libraries can rearrange ordering. For that reason, it'd be most correct to do it before every module instance run.", "author": "dannysmyda", "createdAt": "2020-10-16T20:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MDk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4ODg3NA==", "url": "https://github.com/sleuthkit/autopsy/pull/6393#discussion_r508088874", "bodyText": "Assuming there is no significant performance cost, then no, it shouldn't hurt. There is certainly no need for premature optimization, so I will withdraw my objection.\nFor the sake of our understanding, the registry is not global to the application, it's global to the thread group, right? I know that we are not explicitly creating the ThreadGroup that the file ingest threads belong to and the doc at https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html says this about Executors.defaultThreadFactory(): \"This factory creates all new threads used by an Executor in the same ThreadGroup\" while a comment in the code for com.google.common.util.concurrent.ThreadFactoryBuilder indicates that this is the ThreadGroup we are getting because we do not supply one: \"If no backing thread factory is provided, a default backing thread factory is used as if by calling {@code setThreadFactory(}{@linkExecutors#defaultThreadFactory()}{@code )}.\" I conclude from this that the meddlers would have to be ingest modules that did their meddling after the EFE module instances all execute their startUp() methods, right?", "author": "rcordovano", "createdAt": "2020-10-19T22:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MDk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MzE5Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/6393#discussion_r508093193", "bodyText": "Yes, I withdraw my global comment. It would be local to the ingest modules since they're in the same thread group. And yes, exactly.", "author": "dannysmyda", "createdAt": "2020-10-19T22:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MDk2OA=="}], "type": "inlineReview", "revised_code": null}]}