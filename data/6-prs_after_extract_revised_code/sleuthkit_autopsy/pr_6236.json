{"pr_number": 6236, "pr_title": "6727 i leapp module parser with minimal parsing of plugins", "pr_createdAt": "2020-09-04T02:58:30Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/6236", "timeline": [{"oid": "2b0729d60e01876957db080fdf7eafddb4060cbb", "url": "https://github.com/sleuthkit/autopsy/commit/2b0729d60e01876957db080fdf7eafddb4060cbb", "message": "Initial commit of iosanalyser module\n\nInitial commit of iosanalyser module.", "committedDate": "2020-08-25T15:56:04Z", "type": "commit"}, {"oid": "c9cb1e27a428427374a5e532d0365618042458a2", "url": "https://github.com/sleuthkit/autopsy/commit/c9cb1e27a428427374a5e532d0365618042458a2", "message": "Merge remote-tracking branch 'upstream/develop' into 6727-iLeapp-module-parser-with-minimal-parsing-of-plugins", "committedDate": "2020-08-25T15:56:31Z", "type": "commit"}, {"oid": "e4242c5e1ee8da7398823c848a6faef619655ed9", "url": "https://github.com/sleuthkit/autopsy/commit/e4242c5e1ee8da7398823c848a6faef619655ed9", "message": "Module runs ileapp program correctly\n\nModule runs ileapp program correctly", "committedDate": "2020-08-26T14:40:47Z", "type": "commit"}, {"oid": "8f5a066a7a9db43905b3eea0c6c3da46f189885d", "url": "https://github.com/sleuthkit/autopsy/commit/8f5a066a7a9db43905b3eea0c6c3da46f189885d", "message": "xml reader and output files found\n\nXml file has been read and iLeapp files found to process", "committedDate": "2020-08-28T15:56:18Z", "type": "commit"}, {"oid": "406ae5328dfa7f6609252c5ba695f30f8ec00d74", "url": "https://github.com/sleuthkit/autopsy/commit/406ae5328dfa7f6609252c5ba695f30f8ec00d74", "message": "Ingest Module Working\n\nIngest module is working, just need to cleanup stuff", "committedDate": "2020-09-03T20:13:09Z", "type": "commit"}, {"oid": "62a2815cf742cdf8ab61d61a85d7d6ebe83d6c77", "url": "https://github.com/sleuthkit/autopsy/commit/62a2815cf742cdf8ab61d61a85d7d6ebe83d6c77", "message": "Added Exceptions and TSK_Comment\n\nAdded more exceptions and TSK_Comment to artifact.", "committedDate": "2020-09-04T01:35:20Z", "type": "commit"}, {"oid": "f12726f42b24799fbd8ee30a49a89d80d891ae32", "url": "https://github.com/sleuthkit/autopsy/commit/f12726f42b24799fbd8ee30a49a89d80d891ae32", "message": "Update ileap-artifact-attribute-reference.xml\n\nAdd documentation to beginning of the file.", "committedDate": "2020-09-04T02:03:36Z", "type": "commit"}, {"oid": "1f327e2eda0121f92d364ed066dbdac3981cf594", "url": "https://github.com/sleuthkit/autopsy/commit/1f327e2eda0121f92d364ed066dbdac3981cf594", "message": "Rename directory\n\nRename directory", "committedDate": "2020-09-04T02:15:18Z", "type": "commit"}, {"oid": "b04622d30883b5aad0b4687b1c8bd3921b03b169", "url": "https://github.com/sleuthkit/autopsy/commit/b04622d30883b5aad0b4687b1c8bd3921b03b169", "message": "fix copyright and bundle\n\nFix the copyright and bundle name", "committedDate": "2020-09-04T02:25:58Z", "type": "commit"}, {"oid": "641bdab2c47caaa323527f52461f641ff6a064fc", "url": "https://github.com/sleuthkit/autopsy/commit/641bdab2c47caaa323527f52461f641ff6a064fc", "message": "format files and remove commented code\n\nformat files and remove commented code", "committedDate": "2020-09-04T02:56:40Z", "type": "commit"}, {"oid": "3c0d85613fcb62646ecaeaf7698bd1488d06dd78", "url": "https://github.com/sleuthkit/autopsy/commit/3c0d85613fcb62646ecaeaf7698bd1488d06dd78", "message": "Update ILeappAnalyserIngestModule.java\n\ncodacy fixes", "committedDate": "2020-09-04T03:29:03Z", "type": "commit"}, {"oid": "98730ca5a0b5462e7f14135657ec8496ef8c60ba", "url": "https://github.com/sleuthkit/autopsy/commit/98730ca5a0b5462e7f14135657ec8496ef8c60ba", "message": "Update ILeappAnalyserIngestModule.java\n\nCodacy Fixes", "committedDate": "2020-09-04T03:37:07Z", "type": "commit"}, {"oid": "21db4d084f3d794e3b16680f8e2f7b443a688b19", "url": "https://github.com/sleuthkit/autopsy/commit/21db4d084f3d794e3b16680f8e2f7b443a688b19", "message": "Refactor module\n\nrefactor module", "committedDate": "2020-09-10T13:57:44Z", "type": "commit"}, {"oid": "2ee8df5a8480fe741f516ed5e3fc63540a222542", "url": "https://github.com/sleuthkit/autopsy/commit/2ee8df5a8480fe741f516ed5e3fc63540a222542", "message": "COdacy\n\nCodacy changes?", "committedDate": "2020-09-10T14:10:56Z", "type": "commit"}, {"oid": "7d58820e5d3aee55b4e4e6ca9f4bce7466b2a08d", "url": "https://github.com/sleuthkit/autopsy/commit/7d58820e5d3aee55b4e4e6ca9f4bce7466b2a08d", "message": "Codacy\n\nCodacy", "committedDate": "2020-09-10T14:28:02Z", "type": "commit"}, {"oid": "b7d5f00eb17d119e256f5207171a305b6fbd417b", "url": "https://github.com/sleuthkit/autopsy/commit/b7d5f00eb17d119e256f5207171a305b6fbd417b", "message": "Codacy\n\nCodacy", "committedDate": "2020-09-10T15:06:58Z", "type": "commit"}, {"oid": "91997324304c98816ced36edc8c70b330d311f17", "url": "https://github.com/sleuthkit/autopsy/commit/91997324304c98816ced36edc8c70b330d311f17", "message": "Codacy Fixes\n\nCodacy Fixes", "committedDate": "2020-09-10T18:22:59Z", "type": "commit"}, {"oid": "0b10757d3e175a675c1fc3d7c0017449466fc071", "url": "https://github.com/sleuthkit/autopsy/commit/0b10757d3e175a675c1fc3d7c0017449466fc071", "message": "Update ILeappFileProcessor.java\n\nFormat code", "committedDate": "2020-09-10T18:32:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3MDkwNg==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486570906", "bodyText": "I think this is cut and paste error.", "author": "dannysmyda", "createdAt": "2020-09-10T19:03:18Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.ileappanalyzer;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Locale;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.openide.modules.InstalledFileLocator;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import static org.sleuthkit.autopsy.casemodule.Case.getCurrentCase;\n+import org.sleuthkit.autopsy.casemodule.services.FileManager;\n+import org.sleuthkit.autopsy.coreutils.ExecUtil;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModule;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProcessTerminator;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.autopsy.ingest.IngestMessage;\n+import org.sleuthkit.autopsy.ingest.IngestServices;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Data source ingest module that runs Plaso against the image.", "originalCommit": "0b10757d3e175a675c1fc3d7c0017449466fc071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxODE5OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486618199", "bodyText": "Yes it is.  Fixed", "author": "markmckinnon", "createdAt": "2020-09-10T20:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3MDkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "8b50298ccfe66e782ca79f399edb37785a643b14", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex 0e070c2f35..a35dc5a2c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3MTgxNQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486571815", "bodyText": "Is this check necessary? I think you can just let the for loop recognize there is nothing to process.", "author": "dannysmyda", "createdAt": "2020-09-10T19:04:55Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.ileappanalyzer;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Locale;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.openide.modules.InstalledFileLocator;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import static org.sleuthkit.autopsy.casemodule.Case.getCurrentCase;\n+import org.sleuthkit.autopsy.casemodule.services.FileManager;\n+import org.sleuthkit.autopsy.coreutils.ExecUtil;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModule;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProcessTerminator;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.autopsy.ingest.IngestMessage;\n+import org.sleuthkit.autopsy.ingest.IngestServices;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Data source ingest module that runs Plaso against the image.\n+ */\n+public class ILeappAnalyzerIngestModule implements DataSourceIngestModule {\n+\n+    private static final Logger logger = Logger.getLogger(ILeappAnalyzerIngestModule.class.getName());\n+    private static final String MODULE_NAME = ILeappAnalyzerModuleFactory.getModuleName();\n+\n+    private static final String ILEAPP = \"iLeapp\"; //NON-NLS\n+    private static final String ILEAPP_EXECUTABLE = \"ileapp.exe\";//NON-NLS\n+\n+    private File iLeappExecutable;\n+\n+    private IngestJobContext context;\n+    \n+    private ILeappFileProcessor iLeappFileProcessor;\n+\n+    ILeappAnalyzerIngestModule() {\n+        // This constructor is intentionally empty. Nothing special is needed here.     \n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappAnalyzerIngestModule.executable.not.found=iLeapp Executable Not Found.\",\n+        \"ILeappAnalyzerIngestModule.requires.windows=iLeapp module requires windows.\",\n+        \"ILeappAnalyzerIngestModule.error.ileapp.file.processor.init=Failure to initialize ILeappProcessFile\"})\n+    @Override\n+    public void startUp(IngestJobContext context) throws IngestModuleException {\n+        this.context = context;\n+\n+        if (false == PlatformUtil.isWindowsOS()) {\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_requires_windows());\n+        }\n+\n+        try {\n+            iLeappFileProcessor = new ILeappFileProcessor();\n+        } catch (IOException | IngestModuleException ex) {\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_error_ileapp_file_processor_init(), ex);\n+        }\n+\n+        try {\n+            iLeappExecutable = locateExecutable(ILEAPP_EXECUTABLE);\n+        } catch (FileNotFoundException exception) {\n+            logger.log(Level.WARNING, \"iLeapp executable not found.\", exception); //NON-NLS\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_executable_not_found(), exception);\n+        }\n+\n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappAnalyzerIngestModule.error.running.iLeapp=Error running iLeapp, see log file.\",\n+        \"ILeappAnalyzerIngestModule.error.creating.output.dir=Error creating iLeapp module output directory.\",\n+        \"ILeappAnalyzerIngestModule.starting.iLeapp=Starting iLeapp\",\n+        \"ILeappAnalyzerIngestModule.running.iLeapp=Running iLeapp\",\n+        \"ILeappAnalyzerIngestModule.has.run=iLeapp\",\n+        \"ILeappAnalyzerIngestModule.iLeapp.cancelled=iLeapp run was canceled\",\n+        \"ILeappAnalyzerIngestModule.completed=iLeapp Processing Completed\",\n+        \"ILeappAnalyzerIngestModule.report.name=iLeapp Html Report\"})\n+    @Override\n+    public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress statusHelper) {\n+\n+        statusHelper.progress(Bundle.ILeappAnalyzerIngestModule_starting_iLeapp(), 0);\n+\n+        List<AbstractFile> iLeappFilesToProcess = findiLeappFilesToProcess(dataSource);\n+\n+        statusHelper.switchToDeterminate(iLeappFilesToProcess.size());\n+\n+        Integer filesProcessedCount = 0;\n+\n+        if (!iLeappFilesToProcess.isEmpty()) {", "originalCommit": "0b10757d3e175a675c1fc3d7c0017449466fc071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxODM2MQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486618361", "bodyText": "It was removed and ran fine", "author": "markmckinnon", "createdAt": "2020-09-10T20:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3MTgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b50298ccfe66e782ca79f399edb37785a643b14", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex 0e070c2f35..a35dc5a2c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3NDA0Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486574043", "bodyText": "I think you can remove this comment, assuming you did change it", "author": "dannysmyda", "createdAt": "2020-09-10T19:09:12Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.ileappanalyzer;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Locale;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.openide.modules.InstalledFileLocator;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import static org.sleuthkit.autopsy.casemodule.Case.getCurrentCase;\n+import org.sleuthkit.autopsy.casemodule.services.FileManager;\n+import org.sleuthkit.autopsy.coreutils.ExecUtil;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModule;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProcessTerminator;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.autopsy.ingest.IngestMessage;\n+import org.sleuthkit.autopsy.ingest.IngestServices;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Data source ingest module that runs Plaso against the image.\n+ */\n+public class ILeappAnalyzerIngestModule implements DataSourceIngestModule {\n+\n+    private static final Logger logger = Logger.getLogger(ILeappAnalyzerIngestModule.class.getName());\n+    private static final String MODULE_NAME = ILeappAnalyzerModuleFactory.getModuleName();\n+\n+    private static final String ILEAPP = \"iLeapp\"; //NON-NLS\n+    private static final String ILEAPP_EXECUTABLE = \"ileapp.exe\";//NON-NLS\n+\n+    private File iLeappExecutable;\n+\n+    private IngestJobContext context;\n+    \n+    private ILeappFileProcessor iLeappFileProcessor;\n+\n+    ILeappAnalyzerIngestModule() {\n+        // This constructor is intentionally empty. Nothing special is needed here.     \n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappAnalyzerIngestModule.executable.not.found=iLeapp Executable Not Found.\",\n+        \"ILeappAnalyzerIngestModule.requires.windows=iLeapp module requires windows.\",\n+        \"ILeappAnalyzerIngestModule.error.ileapp.file.processor.init=Failure to initialize ILeappProcessFile\"})\n+    @Override\n+    public void startUp(IngestJobContext context) throws IngestModuleException {\n+        this.context = context;\n+\n+        if (false == PlatformUtil.isWindowsOS()) {\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_requires_windows());\n+        }\n+\n+        try {\n+            iLeappFileProcessor = new ILeappFileProcessor();\n+        } catch (IOException | IngestModuleException ex) {\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_error_ileapp_file_processor_init(), ex);\n+        }\n+\n+        try {\n+            iLeappExecutable = locateExecutable(ILEAPP_EXECUTABLE);\n+        } catch (FileNotFoundException exception) {\n+            logger.log(Level.WARNING, \"iLeapp executable not found.\", exception); //NON-NLS\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_executable_not_found(), exception);\n+        }\n+\n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappAnalyzerIngestModule.error.running.iLeapp=Error running iLeapp, see log file.\",\n+        \"ILeappAnalyzerIngestModule.error.creating.output.dir=Error creating iLeapp module output directory.\",\n+        \"ILeappAnalyzerIngestModule.starting.iLeapp=Starting iLeapp\",\n+        \"ILeappAnalyzerIngestModule.running.iLeapp=Running iLeapp\",\n+        \"ILeappAnalyzerIngestModule.has.run=iLeapp\",\n+        \"ILeappAnalyzerIngestModule.iLeapp.cancelled=iLeapp run was canceled\",\n+        \"ILeappAnalyzerIngestModule.completed=iLeapp Processing Completed\",\n+        \"ILeappAnalyzerIngestModule.report.name=iLeapp Html Report\"})\n+    @Override\n+    public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress statusHelper) {\n+\n+        statusHelper.progress(Bundle.ILeappAnalyzerIngestModule_starting_iLeapp(), 0);\n+\n+        List<AbstractFile> iLeappFilesToProcess = findiLeappFilesToProcess(dataSource);\n+\n+        statusHelper.switchToDeterminate(iLeappFilesToProcess.size());\n+\n+        Integer filesProcessedCount = 0;\n+\n+        if (!iLeappFilesToProcess.isEmpty()) {\n+            // Run iLeapp\n+\n+            Case currentCase = Case.getCurrentCase();\n+            for (AbstractFile iLeappFile : iLeappFilesToProcess) {\n+\n+                String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n+                Path moduleOutputPath = Paths.get(currentCase.getModuleDirectory(), ILEAPP, currentTime);\n+                try {\n+                    Files.createDirectories(moduleOutputPath);\n+                } catch (IOException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error creating iLeapp output directory %s\", moduleOutputPath.toString()), ex);\n+                    return ProcessResult.ERROR;\n+                }\n+\n+                statusHelper.progress(NbBundle.getMessage(this.getClass(), \"ILeappAnalyzerIngestModule.processing.file\", iLeappFile.getName()), filesProcessedCount);\n+                ProcessBuilder iLeappCommand = buildiLeappCommand(moduleOutputPath, iLeappFile.getLocalAbsPath(), iLeappFile.getNameExtension());\n+                try {\n+                    int result = ExecUtil.execute(iLeappCommand, new DataSourceIngestModuleProcessTerminator(context));\n+                    if (result != 0) {\n+                        logger.log(Level.SEVERE, String.format(\"Error running iLeapp, error code returned %d\", result)); //NON-NLS\n+                        return ProcessResult.ERROR;\n+                    }\n+                    \n+                    addILeappReportToReports(moduleOutputPath, currentCase);\n+\n+                } catch (IOException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error when trying to execute iLeapp program against file %s\", iLeappFile.getLocalAbsPath()), ex);\n+                    return ProcessResult.ERROR;\n+                }\n+\n+                if (context.dataSourceIngestIsCancelled()) {\n+                    logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+                    return ProcessResult.OK;\n+                }\n+\n+                ProcessResult fileProcessorResult = iLeappFileProcessor.processFiles(dataSource, moduleOutputPath, iLeappFile);\n+\n+                if (fileProcessorResult == ProcessResult.ERROR) {\n+                    return ProcessResult.ERROR;\n+                }\n+                \n+                filesProcessedCount++;\n+            }\n+\n+        }\n+\n+        IngestMessage message = IngestMessage.createMessage(IngestMessage.MessageType.DATA,\n+                Bundle.ILeappAnalyzerIngestModule_has_run(),\n+                Bundle.ILeappAnalyzerIngestModule_completed());\n+        IngestServices.getInstance().postMessage(message);\n+        return ProcessResult.OK;\n+    }\n+\n+    /**\n+     * Find the files to process that will be processed by the iLeapp program\n+     *\n+     * @param dataSource\n+     *\n+     * @return List of abstract files to process.\n+     */\n+    private List<AbstractFile> findiLeappFilesToProcess(Content dataSource) {\n+\n+        List<AbstractFile> iLeappFiles = new ArrayList<>();\n+\n+        FileManager fileManager = getCurrentCase().getServices().getFileManager();\n+\n+        // findFiles use the SQL wildcard # in the file name\n+        try {\n+            iLeappFiles = fileManager.findFiles(dataSource, \"%\", \"/\"); //NON-NLS\n+        } catch (TskCoreException ex) {\n+            //Change this", "originalCommit": "0b10757d3e175a675c1fc3d7c0017449466fc071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxODQ4Ng==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486618486", "bodyText": "Comment removed", "author": "markmckinnon", "createdAt": "2020-09-10T20:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3NDA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8b50298ccfe66e782ca79f399edb37785a643b14", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex 0e070c2f35..a35dc5a2c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3NzQ5NA==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486577494", "bodyText": "The first condition should check not empty.", "author": "dannysmyda", "createdAt": "2020-09-10T19:15:45Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.ileappanalyzer;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Locale;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.openide.modules.InstalledFileLocator;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import static org.sleuthkit.autopsy.casemodule.Case.getCurrentCase;\n+import org.sleuthkit.autopsy.casemodule.services.FileManager;\n+import org.sleuthkit.autopsy.coreutils.ExecUtil;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModule;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProcessTerminator;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.autopsy.ingest.IngestMessage;\n+import org.sleuthkit.autopsy.ingest.IngestServices;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Data source ingest module that runs Plaso against the image.\n+ */\n+public class ILeappAnalyzerIngestModule implements DataSourceIngestModule {\n+\n+    private static final Logger logger = Logger.getLogger(ILeappAnalyzerIngestModule.class.getName());\n+    private static final String MODULE_NAME = ILeappAnalyzerModuleFactory.getModuleName();\n+\n+    private static final String ILEAPP = \"iLeapp\"; //NON-NLS\n+    private static final String ILEAPP_EXECUTABLE = \"ileapp.exe\";//NON-NLS\n+\n+    private File iLeappExecutable;\n+\n+    private IngestJobContext context;\n+    \n+    private ILeappFileProcessor iLeappFileProcessor;\n+\n+    ILeappAnalyzerIngestModule() {\n+        // This constructor is intentionally empty. Nothing special is needed here.     \n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappAnalyzerIngestModule.executable.not.found=iLeapp Executable Not Found.\",\n+        \"ILeappAnalyzerIngestModule.requires.windows=iLeapp module requires windows.\",\n+        \"ILeappAnalyzerIngestModule.error.ileapp.file.processor.init=Failure to initialize ILeappProcessFile\"})\n+    @Override\n+    public void startUp(IngestJobContext context) throws IngestModuleException {\n+        this.context = context;\n+\n+        if (false == PlatformUtil.isWindowsOS()) {\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_requires_windows());\n+        }\n+\n+        try {\n+            iLeappFileProcessor = new ILeappFileProcessor();\n+        } catch (IOException | IngestModuleException ex) {\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_error_ileapp_file_processor_init(), ex);\n+        }\n+\n+        try {\n+            iLeappExecutable = locateExecutable(ILEAPP_EXECUTABLE);\n+        } catch (FileNotFoundException exception) {\n+            logger.log(Level.WARNING, \"iLeapp executable not found.\", exception); //NON-NLS\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_executable_not_found(), exception);\n+        }\n+\n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappAnalyzerIngestModule.error.running.iLeapp=Error running iLeapp, see log file.\",\n+        \"ILeappAnalyzerIngestModule.error.creating.output.dir=Error creating iLeapp module output directory.\",\n+        \"ILeappAnalyzerIngestModule.starting.iLeapp=Starting iLeapp\",\n+        \"ILeappAnalyzerIngestModule.running.iLeapp=Running iLeapp\",\n+        \"ILeappAnalyzerIngestModule.has.run=iLeapp\",\n+        \"ILeappAnalyzerIngestModule.iLeapp.cancelled=iLeapp run was canceled\",\n+        \"ILeappAnalyzerIngestModule.completed=iLeapp Processing Completed\",\n+        \"ILeappAnalyzerIngestModule.report.name=iLeapp Html Report\"})\n+    @Override\n+    public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress statusHelper) {\n+\n+        statusHelper.progress(Bundle.ILeappAnalyzerIngestModule_starting_iLeapp(), 0);\n+\n+        List<AbstractFile> iLeappFilesToProcess = findiLeappFilesToProcess(dataSource);\n+\n+        statusHelper.switchToDeterminate(iLeappFilesToProcess.size());\n+\n+        Integer filesProcessedCount = 0;\n+\n+        if (!iLeappFilesToProcess.isEmpty()) {\n+            // Run iLeapp\n+\n+            Case currentCase = Case.getCurrentCase();\n+            for (AbstractFile iLeappFile : iLeappFilesToProcess) {\n+\n+                String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n+                Path moduleOutputPath = Paths.get(currentCase.getModuleDirectory(), ILEAPP, currentTime);\n+                try {\n+                    Files.createDirectories(moduleOutputPath);\n+                } catch (IOException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error creating iLeapp output directory %s\", moduleOutputPath.toString()), ex);\n+                    return ProcessResult.ERROR;\n+                }\n+\n+                statusHelper.progress(NbBundle.getMessage(this.getClass(), \"ILeappAnalyzerIngestModule.processing.file\", iLeappFile.getName()), filesProcessedCount);\n+                ProcessBuilder iLeappCommand = buildiLeappCommand(moduleOutputPath, iLeappFile.getLocalAbsPath(), iLeappFile.getNameExtension());\n+                try {\n+                    int result = ExecUtil.execute(iLeappCommand, new DataSourceIngestModuleProcessTerminator(context));\n+                    if (result != 0) {\n+                        logger.log(Level.SEVERE, String.format(\"Error running iLeapp, error code returned %d\", result)); //NON-NLS\n+                        return ProcessResult.ERROR;\n+                    }\n+                    \n+                    addILeappReportToReports(moduleOutputPath, currentCase);\n+\n+                } catch (IOException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error when trying to execute iLeapp program against file %s\", iLeappFile.getLocalAbsPath()), ex);\n+                    return ProcessResult.ERROR;\n+                }\n+\n+                if (context.dataSourceIngestIsCancelled()) {\n+                    logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+                    return ProcessResult.OK;\n+                }\n+\n+                ProcessResult fileProcessorResult = iLeappFileProcessor.processFiles(dataSource, moduleOutputPath, iLeappFile);\n+\n+                if (fileProcessorResult == ProcessResult.ERROR) {\n+                    return ProcessResult.ERROR;\n+                }\n+                \n+                filesProcessedCount++;\n+            }\n+\n+        }\n+\n+        IngestMessage message = IngestMessage.createMessage(IngestMessage.MessageType.DATA,\n+                Bundle.ILeappAnalyzerIngestModule_has_run(),\n+                Bundle.ILeappAnalyzerIngestModule_completed());\n+        IngestServices.getInstance().postMessage(message);\n+        return ProcessResult.OK;\n+    }\n+\n+    /**\n+     * Find the files to process that will be processed by the iLeapp program\n+     *\n+     * @param dataSource\n+     *\n+     * @return List of abstract files to process.\n+     */\n+    private List<AbstractFile> findiLeappFilesToProcess(Content dataSource) {\n+\n+        List<AbstractFile> iLeappFiles = new ArrayList<>();\n+\n+        FileManager fileManager = getCurrentCase().getServices().getFileManager();\n+\n+        // findFiles use the SQL wildcard # in the file name\n+        try {\n+            iLeappFiles = fileManager.findFiles(dataSource, \"%\", \"/\"); //NON-NLS\n+        } catch (TskCoreException ex) {\n+            //Change this\n+            logger.log(Level.WARNING, \"No files found to process\"); //NON-NLS\n+            return iLeappFiles;\n+        }\n+\n+        List<AbstractFile> iLeappFilesToProcess = new ArrayList<>();\n+        for (AbstractFile iLeappFile : iLeappFiles) {\n+            if ((iLeappFile.getName().toLowerCase().contains(\".zip\") || (iLeappFile.getName().toLowerCase().contains(\".tar\"))\n+                    || iLeappFile.getName().toLowerCase().contains(\".tgz\"))) {\n+                iLeappFilesToProcess.add(iLeappFile);\n+            }\n+        }\n+\n+        return iLeappFilesToProcess;\n+    }\n+\n+    private ProcessBuilder buildiLeappCommand(Path moduleOutputPath, String sourceFilePath, String iLeappFileSystemType) {\n+\n+        ProcessBuilder processBuilder = buildProcessWithRunAsInvoker(\n+                \"\\\"\" + iLeappExecutable + \"\\\"\", //NON-NLS\n+                \"-t\", iLeappFileSystemType, //NON-NLS\n+                \"-i\", sourceFilePath, //NON-NLS\n+                \"-o\", moduleOutputPath.toString()\n+        );\n+        processBuilder.redirectError(moduleOutputPath.resolve(\"iLeapp_err.txt\").toFile());  //NON-NLS\n+        processBuilder.redirectOutput(moduleOutputPath.resolve(\"iLeapp_out.txt\").toFile());  //NON-NLS\n+        return processBuilder;\n+    }\n+\n+    static private ProcessBuilder buildProcessWithRunAsInvoker(String... commandLine) {\n+        ProcessBuilder processBuilder = new ProcessBuilder(commandLine);\n+        /*\n+         * Add an environment variable to force log2timeline/psort to run with\n+         * the same permissions Autopsy uses.\n+         */\n+        processBuilder.environment().put(\"__COMPAT_LAYER\", \"RunAsInvoker\"); //NON-NLS\n+        return processBuilder;\n+    }\n+\n+    private static File locateExecutable(String executableName) throws FileNotFoundException {\n+        String executableToFindName = Paths.get(ILEAPP, executableName).toString();\n+\n+        File exeFile = InstalledFileLocator.getDefault().locate(executableToFindName, ILeappAnalyzerIngestModule.class.getPackage().getName(), false);\n+        if (null == exeFile || exeFile.canExecute() == false) {\n+            throw new FileNotFoundException(executableName + \" executable not found.\");\n+        }\n+        return exeFile;\n+    }\n+\n+    /**\n+     * Find the index.html file in the iLeapp output directory so it can be added to reports\n+     */\n+    private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n+        List<String> allIndexFiles = new ArrayList<>();\n+\n+        try (Stream<Path> walk = Files.walk(iLeappOutputDir)) {\n+\n+            allIndexFiles = walk.map(x -> x.toString())\n+                    .filter(f -> f.toLowerCase().endsWith(\"index.html\")).collect(Collectors.toList());\n+\n+            if (allIndexFiles.get(0).length() > 2) {", "originalCommit": "0b10757d3e175a675c1fc3d7c0017449466fc071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxODc5Nw==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486618797", "bodyText": "Now checks !allIndexFiles.isEmpty()", "author": "markmckinnon", "createdAt": "2020-09-10T20:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3NzQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8b50298ccfe66e782ca79f399edb37785a643b14", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex 0e070c2f35..a35dc5a2c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDUyNw==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486584527", "bodyText": "You also need to catch UncheckedIOException, a runtime wrapper for IOException. The IOException caught here, according to the Files.walk documentation, is just related to accessing the iLeappOutputDir. If there is a problem while iterating, then UncheckedIOException will be thrown. Checked exception support was never worked into Java 8 streams and lambdas. You can log the underlying IOException by calling ex.getCause() or something like that.", "author": "dannysmyda", "createdAt": "2020-09-10T19:29:19Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.ileappanalyzer;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Locale;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.openide.modules.InstalledFileLocator;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import static org.sleuthkit.autopsy.casemodule.Case.getCurrentCase;\n+import org.sleuthkit.autopsy.casemodule.services.FileManager;\n+import org.sleuthkit.autopsy.coreutils.ExecUtil;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModule;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProcessTerminator;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.autopsy.ingest.IngestMessage;\n+import org.sleuthkit.autopsy.ingest.IngestServices;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Data source ingest module that runs Plaso against the image.\n+ */\n+public class ILeappAnalyzerIngestModule implements DataSourceIngestModule {\n+\n+    private static final Logger logger = Logger.getLogger(ILeappAnalyzerIngestModule.class.getName());\n+    private static final String MODULE_NAME = ILeappAnalyzerModuleFactory.getModuleName();\n+\n+    private static final String ILEAPP = \"iLeapp\"; //NON-NLS\n+    private static final String ILEAPP_EXECUTABLE = \"ileapp.exe\";//NON-NLS\n+\n+    private File iLeappExecutable;\n+\n+    private IngestJobContext context;\n+    \n+    private ILeappFileProcessor iLeappFileProcessor;\n+\n+    ILeappAnalyzerIngestModule() {\n+        // This constructor is intentionally empty. Nothing special is needed here.     \n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappAnalyzerIngestModule.executable.not.found=iLeapp Executable Not Found.\",\n+        \"ILeappAnalyzerIngestModule.requires.windows=iLeapp module requires windows.\",\n+        \"ILeappAnalyzerIngestModule.error.ileapp.file.processor.init=Failure to initialize ILeappProcessFile\"})\n+    @Override\n+    public void startUp(IngestJobContext context) throws IngestModuleException {\n+        this.context = context;\n+\n+        if (false == PlatformUtil.isWindowsOS()) {\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_requires_windows());\n+        }\n+\n+        try {\n+            iLeappFileProcessor = new ILeappFileProcessor();\n+        } catch (IOException | IngestModuleException ex) {\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_error_ileapp_file_processor_init(), ex);\n+        }\n+\n+        try {\n+            iLeappExecutable = locateExecutable(ILEAPP_EXECUTABLE);\n+        } catch (FileNotFoundException exception) {\n+            logger.log(Level.WARNING, \"iLeapp executable not found.\", exception); //NON-NLS\n+            throw new IngestModuleException(Bundle.ILeappAnalyzerIngestModule_executable_not_found(), exception);\n+        }\n+\n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappAnalyzerIngestModule.error.running.iLeapp=Error running iLeapp, see log file.\",\n+        \"ILeappAnalyzerIngestModule.error.creating.output.dir=Error creating iLeapp module output directory.\",\n+        \"ILeappAnalyzerIngestModule.starting.iLeapp=Starting iLeapp\",\n+        \"ILeappAnalyzerIngestModule.running.iLeapp=Running iLeapp\",\n+        \"ILeappAnalyzerIngestModule.has.run=iLeapp\",\n+        \"ILeappAnalyzerIngestModule.iLeapp.cancelled=iLeapp run was canceled\",\n+        \"ILeappAnalyzerIngestModule.completed=iLeapp Processing Completed\",\n+        \"ILeappAnalyzerIngestModule.report.name=iLeapp Html Report\"})\n+    @Override\n+    public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress statusHelper) {\n+\n+        statusHelper.progress(Bundle.ILeappAnalyzerIngestModule_starting_iLeapp(), 0);\n+\n+        List<AbstractFile> iLeappFilesToProcess = findiLeappFilesToProcess(dataSource);\n+\n+        statusHelper.switchToDeterminate(iLeappFilesToProcess.size());\n+\n+        Integer filesProcessedCount = 0;\n+\n+        if (!iLeappFilesToProcess.isEmpty()) {\n+            // Run iLeapp\n+\n+            Case currentCase = Case.getCurrentCase();\n+            for (AbstractFile iLeappFile : iLeappFilesToProcess) {\n+\n+                String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n+                Path moduleOutputPath = Paths.get(currentCase.getModuleDirectory(), ILEAPP, currentTime);\n+                try {\n+                    Files.createDirectories(moduleOutputPath);\n+                } catch (IOException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error creating iLeapp output directory %s\", moduleOutputPath.toString()), ex);\n+                    return ProcessResult.ERROR;\n+                }\n+\n+                statusHelper.progress(NbBundle.getMessage(this.getClass(), \"ILeappAnalyzerIngestModule.processing.file\", iLeappFile.getName()), filesProcessedCount);\n+                ProcessBuilder iLeappCommand = buildiLeappCommand(moduleOutputPath, iLeappFile.getLocalAbsPath(), iLeappFile.getNameExtension());\n+                try {\n+                    int result = ExecUtil.execute(iLeappCommand, new DataSourceIngestModuleProcessTerminator(context));\n+                    if (result != 0) {\n+                        logger.log(Level.SEVERE, String.format(\"Error running iLeapp, error code returned %d\", result)); //NON-NLS\n+                        return ProcessResult.ERROR;\n+                    }\n+                    \n+                    addILeappReportToReports(moduleOutputPath, currentCase);\n+\n+                } catch (IOException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error when trying to execute iLeapp program against file %s\", iLeappFile.getLocalAbsPath()), ex);\n+                    return ProcessResult.ERROR;\n+                }\n+\n+                if (context.dataSourceIngestIsCancelled()) {\n+                    logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+                    return ProcessResult.OK;\n+                }\n+\n+                ProcessResult fileProcessorResult = iLeappFileProcessor.processFiles(dataSource, moduleOutputPath, iLeappFile);\n+\n+                if (fileProcessorResult == ProcessResult.ERROR) {\n+                    return ProcessResult.ERROR;\n+                }\n+                \n+                filesProcessedCount++;\n+            }\n+\n+        }\n+\n+        IngestMessage message = IngestMessage.createMessage(IngestMessage.MessageType.DATA,\n+                Bundle.ILeappAnalyzerIngestModule_has_run(),\n+                Bundle.ILeappAnalyzerIngestModule_completed());\n+        IngestServices.getInstance().postMessage(message);\n+        return ProcessResult.OK;\n+    }\n+\n+    /**\n+     * Find the files to process that will be processed by the iLeapp program\n+     *\n+     * @param dataSource\n+     *\n+     * @return List of abstract files to process.\n+     */\n+    private List<AbstractFile> findiLeappFilesToProcess(Content dataSource) {\n+\n+        List<AbstractFile> iLeappFiles = new ArrayList<>();\n+\n+        FileManager fileManager = getCurrentCase().getServices().getFileManager();\n+\n+        // findFiles use the SQL wildcard # in the file name\n+        try {\n+            iLeappFiles = fileManager.findFiles(dataSource, \"%\", \"/\"); //NON-NLS\n+        } catch (TskCoreException ex) {\n+            //Change this\n+            logger.log(Level.WARNING, \"No files found to process\"); //NON-NLS\n+            return iLeappFiles;\n+        }\n+\n+        List<AbstractFile> iLeappFilesToProcess = new ArrayList<>();\n+        for (AbstractFile iLeappFile : iLeappFiles) {\n+            if ((iLeappFile.getName().toLowerCase().contains(\".zip\") || (iLeappFile.getName().toLowerCase().contains(\".tar\"))\n+                    || iLeappFile.getName().toLowerCase().contains(\".tgz\"))) {\n+                iLeappFilesToProcess.add(iLeappFile);\n+            }\n+        }\n+\n+        return iLeappFilesToProcess;\n+    }\n+\n+    private ProcessBuilder buildiLeappCommand(Path moduleOutputPath, String sourceFilePath, String iLeappFileSystemType) {\n+\n+        ProcessBuilder processBuilder = buildProcessWithRunAsInvoker(\n+                \"\\\"\" + iLeappExecutable + \"\\\"\", //NON-NLS\n+                \"-t\", iLeappFileSystemType, //NON-NLS\n+                \"-i\", sourceFilePath, //NON-NLS\n+                \"-o\", moduleOutputPath.toString()\n+        );\n+        processBuilder.redirectError(moduleOutputPath.resolve(\"iLeapp_err.txt\").toFile());  //NON-NLS\n+        processBuilder.redirectOutput(moduleOutputPath.resolve(\"iLeapp_out.txt\").toFile());  //NON-NLS\n+        return processBuilder;\n+    }\n+\n+    static private ProcessBuilder buildProcessWithRunAsInvoker(String... commandLine) {\n+        ProcessBuilder processBuilder = new ProcessBuilder(commandLine);\n+        /*\n+         * Add an environment variable to force log2timeline/psort to run with\n+         * the same permissions Autopsy uses.\n+         */\n+        processBuilder.environment().put(\"__COMPAT_LAYER\", \"RunAsInvoker\"); //NON-NLS\n+        return processBuilder;\n+    }\n+\n+    private static File locateExecutable(String executableName) throws FileNotFoundException {\n+        String executableToFindName = Paths.get(ILEAPP, executableName).toString();\n+\n+        File exeFile = InstalledFileLocator.getDefault().locate(executableToFindName, ILeappAnalyzerIngestModule.class.getPackage().getName(), false);\n+        if (null == exeFile || exeFile.canExecute() == false) {\n+            throw new FileNotFoundException(executableName + \" executable not found.\");\n+        }\n+        return exeFile;\n+    }\n+\n+    /**\n+     * Find the index.html file in the iLeapp output directory so it can be added to reports\n+     */\n+    private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n+        List<String> allIndexFiles = new ArrayList<>();\n+\n+        try (Stream<Path> walk = Files.walk(iLeappOutputDir)) {\n+\n+            allIndexFiles = walk.map(x -> x.toString())\n+                    .filter(f -> f.toLowerCase().endsWith(\"index.html\")).collect(Collectors.toList());\n+\n+            if (allIndexFiles.get(0).length() > 2) {\n+                currentCase.addReport(allIndexFiles.get(0), MODULE_NAME, Bundle.ILeappAnalyzerIngestModule_report_name());\n+            }\n+\n+        } catch (IOException | TskCoreException ex) {", "originalCommit": "0b10757d3e175a675c1fc3d7c0017449466fc071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxODkzMA==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486618930", "bodyText": "Added exception", "author": "markmckinnon", "createdAt": "2020-09-10T20:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "8b50298ccfe66e782ca79f399edb37785a643b14", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex 0e070c2f35..a35dc5a2c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDkyNA==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486584924", "bodyText": "Same here as well.", "author": "dannysmyda", "createdAt": "2020-09-10T19:30:06Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java", "diffHunk": "@@ -0,0 +1,447 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.ileappanalyzer;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import static java.util.Locale.US;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import org.apache.commons.io.FilenameUtils;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.autopsy.ingest.IngestModule.ProcessResult;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Blackboard;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+import org.sleuthkit.datamodel.TskException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Data source ingest module that runs Plaso against the image.", "originalCommit": "0b10757d3e175a675c1fc3d7c0017449466fc071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxOTE2OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486619169", "bodyText": "Changed comment", "author": "markmckinnon", "createdAt": "2020-09-10T20:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "8b50298ccfe66e782ca79f399edb37785a643b14", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\nindex 31c5ea450d..1bc80c9019 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\n\n@@ -23,6 +23,7 @@\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.text.ParseException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTM4Nw==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486585387", "bodyText": "This check is not necessary.", "author": "dannysmyda", "createdAt": "2020-09-10T19:31:00Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java", "diffHunk": "@@ -0,0 +1,447 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.ileappanalyzer;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import static java.util.Locale.US;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import org.apache.commons.io.FilenameUtils;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.autopsy.ingest.IngestModule.ProcessResult;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Blackboard;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+import org.sleuthkit.datamodel.TskException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Data source ingest module that runs Plaso against the image.\n+ */\n+public final class ILeappFileProcessor {\n+\n+    private static final Logger logger = Logger.getLogger(ILeappFileProcessor.class.getName());\n+    private static final String MODULE_NAME = ILeappAnalyzerModuleFactory.getModuleName();\n+\n+    private static final String XMLFILE = \"ileap-artifact-attribute-reference.xml\"; //NON-NLS\n+\n+    private final Map<String, String> tsvFiles;\n+    private final Map<String, String> tsvFileArtifacts;\n+    private final Map<String, String> tsvFileArtifactComments;\n+    private final Map<String, List<List<String>>> tsvFileAttributes;\n+\n+    public ILeappFileProcessor() throws IOException, IngestModuleException {\n+        this.tsvFiles = new HashMap<>();\n+        this.tsvFileArtifacts = new HashMap<>();\n+        this.tsvFileArtifactComments = new HashMap<>();\n+        this.tsvFileAttributes = new HashMap<>();\n+\n+        configExtractor();\n+        loadConfigFile();\n+\n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappFileProcessor.error.running.iLeapp=Error running iLeapp, see log file.\",\n+        \"ILeappFileProcessor.error.creating.output.dir=Error creating iLeapp module output directory.\",\n+        \"ILeappFileProcessor.starting.iLeapp=Starting iLeapp\",\n+        \"ILeappFileProcessor.running.iLeapp=Running iLeapp\",\n+        \"ILeappFileProcessor.has.run=iLeapp\",\n+        \"ILeappFileProcessor.iLeapp.cancelled=iLeapp run was canceled\",\n+        \"ILeappFileProcessor.completed=iLeapp Processing Completed\",\n+        \"ILeappFileProcessor.error.reading.iLeapp.directory=Error reading iLeapp Output Directory\"})\n+\n+    public ProcessResult processFiles(Content dataSource, Path moduleOutputPath, AbstractFile iLeappFile) {\n+\n+        try {\n+            List<String> iLeappTsvOutputFiles = findTsvFiles(moduleOutputPath);\n+            if (!iLeappTsvOutputFiles.isEmpty()) {", "originalCommit": "0b10757d3e175a675c1fc3d7c0017449466fc071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxOTAyMg==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486619022", "bodyText": "Removed check", "author": "markmckinnon", "createdAt": "2020-09-10T20:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8b50298ccfe66e782ca79f399edb37785a643b14", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\nindex 31c5ea450d..1bc80c9019 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\n\n@@ -23,6 +23,7 @@\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.text.ParseException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTg1Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486585853", "bodyText": "See previous comments on Files.walk() in the ingest module, UncheckedIOException should be caught here too.", "author": "dannysmyda", "createdAt": "2020-09-10T19:31:40Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java", "diffHunk": "@@ -0,0 +1,447 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.ileappanalyzer;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import static java.util.Locale.US;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import org.apache.commons.io.FilenameUtils;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.autopsy.ingest.IngestModule.ProcessResult;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Blackboard;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+import org.sleuthkit.datamodel.TskException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Data source ingest module that runs Plaso against the image.\n+ */\n+public final class ILeappFileProcessor {\n+\n+    private static final Logger logger = Logger.getLogger(ILeappFileProcessor.class.getName());\n+    private static final String MODULE_NAME = ILeappAnalyzerModuleFactory.getModuleName();\n+\n+    private static final String XMLFILE = \"ileap-artifact-attribute-reference.xml\"; //NON-NLS\n+\n+    private final Map<String, String> tsvFiles;\n+    private final Map<String, String> tsvFileArtifacts;\n+    private final Map<String, String> tsvFileArtifactComments;\n+    private final Map<String, List<List<String>>> tsvFileAttributes;\n+\n+    public ILeappFileProcessor() throws IOException, IngestModuleException {\n+        this.tsvFiles = new HashMap<>();\n+        this.tsvFileArtifacts = new HashMap<>();\n+        this.tsvFileArtifactComments = new HashMap<>();\n+        this.tsvFileAttributes = new HashMap<>();\n+\n+        configExtractor();\n+        loadConfigFile();\n+\n+    }\n+\n+    @NbBundle.Messages({\n+        \"ILeappFileProcessor.error.running.iLeapp=Error running iLeapp, see log file.\",\n+        \"ILeappFileProcessor.error.creating.output.dir=Error creating iLeapp module output directory.\",\n+        \"ILeappFileProcessor.starting.iLeapp=Starting iLeapp\",\n+        \"ILeappFileProcessor.running.iLeapp=Running iLeapp\",\n+        \"ILeappFileProcessor.has.run=iLeapp\",\n+        \"ILeappFileProcessor.iLeapp.cancelled=iLeapp run was canceled\",\n+        \"ILeappFileProcessor.completed=iLeapp Processing Completed\",\n+        \"ILeappFileProcessor.error.reading.iLeapp.directory=Error reading iLeapp Output Directory\"})\n+\n+    public ProcessResult processFiles(Content dataSource, Path moduleOutputPath, AbstractFile iLeappFile) {\n+\n+        try {\n+            List<String> iLeappTsvOutputFiles = findTsvFiles(moduleOutputPath);\n+            if (!iLeappTsvOutputFiles.isEmpty()) {\n+                processiLeappFiles(iLeappTsvOutputFiles, iLeappFile);\n+            }\n+        } catch (IOException | IngestModuleException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error trying to process iLeapp output files in directory %s. \", moduleOutputPath.toString()), ex); //NON-NLS\n+            return ProcessResult.ERROR;\n+        }\n+\n+        return ProcessResult.OK;\n+    }\n+\n+    /**\n+     * Find the tsv files in the iLeapp output directory and match them to files\n+     * we know we want to process and return the list to process those files.\n+     */\n+    private List<String> findTsvFiles(Path iLeappOutputDir) throws IngestModuleException {\n+        List<String> allTsvFiles = new ArrayList<>();\n+        List<String> foundTsvFiles = new ArrayList<>();\n+\n+        try (Stream<Path> walk = Files.walk(iLeappOutputDir)) {\n+\n+            allTsvFiles = walk.map(x -> x.toString())\n+                    .filter(f -> f.toLowerCase().endsWith(\".tsv\")).collect(Collectors.toList());\n+\n+            for (String tsvFile : allTsvFiles) {\n+                if (tsvFiles.containsKey(FilenameUtils.getName(tsvFile))) {\n+                    foundTsvFiles.add(tsvFile);\n+                }\n+            }\n+\n+        } catch (IOException e) {", "originalCommit": "0b10757d3e175a675c1fc3d7c0017449466fc071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxOTI3MQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6236#discussion_r486619271", "bodyText": "Added check for exception", "author": "markmckinnon", "createdAt": "2020-09-10T20:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NTg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8b50298ccfe66e782ca79f399edb37785a643b14", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\nindex 31c5ea450d..1bc80c9019 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappFileProcessor.java\n\n@@ -23,6 +23,7 @@\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.text.ParseException;\n"}}, {"oid": "8b50298ccfe66e782ca79f399edb37785a643b14", "url": "https://github.com/sleuthkit/autopsy/commit/8b50298ccfe66e782ca79f399edb37785a643b14", "message": "Address comments\n\nAddress Comments", "committedDate": "2020-09-10T20:35:37Z", "type": "commit"}]}