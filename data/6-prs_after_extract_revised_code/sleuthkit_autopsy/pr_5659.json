{"pr_number": 5659, "pr_title": "6071 Make correlation attrs for account arts (part one)", "pr_createdAt": "2020-02-24T21:19:32Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/5659", "timeline": [{"oid": "c8bf39e715490170196add63610ae8ad7508ff35", "url": "https://github.com/sleuthkit/autopsy/commit/c8bf39e715490170196add63610ae8ad7508ff35", "message": "Skeleton for creating correlation attrs for account artifacts", "committedDate": "2020-02-24T21:00:31Z", "type": "commit"}, {"oid": "b1050b96700190e731dc3eaa23b5bf2503b19a85", "url": "https://github.com/sleuthkit/autopsy/commit/b1050b96700190e731dc3eaa23b5bf2503b19a85", "message": "Skeleton for creating correlation attrs for account artifacts", "committedDate": "2020-02-24T21:14:16Z", "type": "commit"}, {"oid": "75e55dc7d4e96dd4b329413ba046fb12f05c5e73", "url": "https://github.com/sleuthkit/autopsy/commit/75e55dc7d4e96dd4b329413ba046fb12f05c5e73", "message": "Skeleton for creating correlation attrs for account artifacts", "committedDate": "2020-02-24T21:36:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNjE1MA==", "url": "https://github.com/sleuthkit/autopsy/pull/5659#discussion_r383916150", "bodyText": "Terms Artifact & Attrs are used throughout our code and easy to confuse.  I think explicitly naming the method makeCorrAttrsForArtifact() would be useful to clarify this method makes Correlation Attribute (instances) as opposed to TSK attributes.", "author": "raman-bt", "createdAt": "2020-02-25T14:35:11Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java", "diffHunk": "@@ -48,55 +48,61 @@ public static String getEmailAddressAttrString() {\n     }\n \n     /**\n-     * Static factory method to examine a BlackboardArtifact to determine if it\n-     * has contents that can be used for Correlation. If so, return a\n-     * EamArtifact with a single EamArtifactInstance within. If not, return\n-     * null.\n+     * Examines an artifact and makes zero to many correlation attribute\n+     * instances from its attributes.\n      *\n-     * @param artifact     BlackboardArtifact to examine\n-     * @param checkEnabled If true, only create a CorrelationAttribute if it is\n-     *                     enabled\n+     * IMPORTANT: The correlation attribute instances are NOT added to the\n+     * central repository by this method.\n      *\n-     * @return List of EamArtifacts\n+     * @param artifact An artifact.\n+     *\n+     * @return A list, possibly empty, of correlation attribute instances for\n+     *         the artifact.\n      */\n-    public static List<CorrelationAttributeInstance> makeInstancesFromBlackboardArtifact(BlackboardArtifact artifact,\n-            boolean checkEnabled) {\n-        List<CorrelationAttributeInstance> eamArtifacts = new ArrayList<>();\n+    public static List<CorrelationAttributeInstance> makeAttrsForArtifact(BlackboardArtifact artifact) {", "originalCommit": "75e55dc7d4e96dd4b329413ba046fb12f05c5e73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk5Mzk2NA==", "url": "https://github.com/sleuthkit/autopsy/pull/5659#discussion_r383993964", "bodyText": "That's a good idea. I will make the change. Please stand by for a new commit.", "author": "rcordovano", "createdAt": "2020-02-25T16:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNjE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "61cfc91c8708c5e2cab8fb21789a1fb633796daf", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\nindex ab1a381720..a93354901b 100644\n--- a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n+++ b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n\n@@ -30,131 +30,110 @@\n import org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n import org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE;\n-import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.datamodel.HashUtility;\n import org.sleuthkit.datamodel.TskCoreException;\n import org.sleuthkit.datamodel.TskData;\n \n /**\n- * Utility class for correlation attributes in the central repository\n+ * Utility class for working with correlation attributes in the central\n+ * repository.\n  */\n public class CorrelationAttributeUtil {\n \n     private static final Logger logger = Logger.getLogger(CorrelationAttributeUtil.class.getName());\n \n-    @Messages({\"EamArtifactUtil.emailaddresses.text=Email Addresses\"})\n-    public static String getEmailAddressAttrString() {\n-        return Bundle.EamArtifactUtil_emailaddresses_text();\n+    /**\n+     * Gets a string that is expected to be the same string that is stored in\n+     * the correlation_types table in the central repository as the display name\n+     * for the email address correlation attribute type. This string is\n+     * duplicated in the CorrelationAttributeInstance class.\n+     *\n+     * TODO (Jira-6088): We should not have multiple deifnitions of this string.\n+     *\n+     * @return The display name of the email address correlation attribute type.\n+     */\n+    @Messages({\"CorrelationAttributeUtil.emailaddresses.text=Email Addresses\"})\n+    private static String getEmailAddressAttrDisplayName() {\n+        return Bundle.CorrelationAttributeUtil_emailaddresses_text();\n     }\n \n     /**\n-     * Examines an artifact and makes zero to many correlation attribute\n-     * instances from its attributes.\n+     * Makes zero to many correlation attribute instances from the attributes of\n+     * an artifact.\n      *\n      * IMPORTANT: The correlation attribute instances are NOT added to the\n      * central repository by this method.\n      *\n+     * TODO (Jira-6088): The methods in this low-level, utility class should\n+     * throw exceptions instead of logging them. The reason for this is that the\n+     * clients of the utility class, not the utility class itself, should be in\n+     * charge of error handling policy, per the Autopsy Coding Standard. Note\n+     * that clients of several of these methods currently cannot determine\n+     * whether receiving a null return value is an error or not, plus null\n+     * checking is easy to forget, while catching exceptions is enforced.\n+     *\n      * @param artifact An artifact.\n      *\n      * @return A list, possibly empty, of correlation attribute instances for\n      *         the artifact.\n      */\n-    public static List<CorrelationAttributeInstance> makeAttrsForArtifact(BlackboardArtifact artifact) {\n+    public static List<CorrelationAttributeInstance> makeCorrAttrsFromArtifact(BlackboardArtifact artifact) {\n         List<CorrelationAttributeInstance> correlationAttrs = new ArrayList<>();\n         try {\n-            /*\n-             * If the artifact is an interesting artifact hit, examine the\n-             * interesting artifact, not the hit \"meta-artifact.\"\n-             */\n-            BlackboardArtifact artToExamine = null;\n-            if (BlackboardArtifact.ARTIFACT_TYPE.TSK_INTERESTING_ARTIFACT_HIT.getTypeID() == artifact.getArtifactTypeID()) {\n-                BlackboardAttribute assocArtifactAttr = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT));\n-                if (assocArtifactAttr != null) {\n-                    artToExamine = Case.getCurrentCaseThrows().getSleuthkitCase().getBlackboardArtifact(assocArtifactAttr.getValueLong());\n-                }\n-            } else {\n-                artToExamine = artifact;\n-            }\n-\n-            /*\n-             *\n-             */\n-            if (artToExamine != null) {\n-                int artifactTypeID = artToExamine.getArtifactTypeID();\n+            BlackboardArtifact sourceArtifact = getCorrAttrSourceArtifact(artifact);\n+            if (sourceArtifact != null) {\n+                int artifactTypeID = sourceArtifact.getArtifactTypeID();\n                 if (artifactTypeID == ARTIFACT_TYPE.TSK_KEYWORD_HIT.getTypeID()) {\n-                    BlackboardAttribute setNameAttr = artToExamine.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_SET_NAME));\n-                    if (setNameAttr != null && CorrelationAttributeUtil.getEmailAddressAttrString().equals(setNameAttr.getValueString())) {\n-                        makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD, CorrelationAttributeInstance.EMAIL_TYPE_ID);\n+                    BlackboardAttribute setNameAttr = sourceArtifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_SET_NAME));\n+                    if (setNameAttr != null && CorrelationAttributeUtil.getEmailAddressAttrDisplayName().equals(setNameAttr.getValueString())) {\n+                        makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD, CorrelationAttributeInstance.EMAIL_TYPE_ID);\n                     }\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_WEB_BOOKMARK.getTypeID()\n                         || artifactTypeID == ARTIFACT_TYPE.TSK_WEB_COOKIE.getTypeID()\n                         || artifactTypeID == ARTIFACT_TYPE.TSK_WEB_DOWNLOAD.getTypeID()\n                         || artifactTypeID == ARTIFACT_TYPE.TSK_WEB_HISTORY.getTypeID()) {\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DOMAIN, CorrelationAttributeInstance.DOMAIN_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DOMAIN, CorrelationAttributeInstance.DOMAIN_TYPE_ID);\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_CONTACT.getTypeID()\n                         || artifactTypeID == ARTIFACT_TYPE.TSK_CALLLOG.getTypeID()\n                         || artifactTypeID == ARTIFACT_TYPE.TSK_MESSAGE.getTypeID()) {\n-                    String value = null;\n-                    if (null != artToExamine.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))) {\n-                        value = artToExamine.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER)).getValueString();\n-                    } else if (null != artToExamine.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))) {\n-                        value = artToExamine.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM)).getValueString();\n-                    } else if (null != artToExamine.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))) {\n-                        value = artToExamine.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO)).getValueString();\n-                    }\n-                    // Remove all non-numeric symbols to semi-normalize phone numbers, preserving leading \"+\" character\n-                    if (value != null) {\n-                        String newValue = value.replaceAll(\"\\\\D\", \"\");\n-                        if (value.startsWith(\"+\")) {\n-                            newValue = \"+\" + newValue;\n-                        }\n-                        value = newValue;\n-                        // Only add the correlation attribute if the resulting phone number large enough to be of use\n-                        // (these 3-5 digit numbers can be valid, but are not useful for correlation)\n-                        if (value.length() > 5) {\n-                            CorrelationAttributeInstance inst = makeCorrelationAttributeInstanceUsingTypeValue(artToExamine, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.PHONE_TYPE_ID), value);\n-                            if (inst != null) {\n-                                correlationAttrs.add(inst);\n-                            }\n-                        }\n-                    }\n+                    makeCorrAttrFromArtifactPhoneAttr(sourceArtifact);\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_DEVICE_ATTACHED.getTypeID()) {\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DEVICE_ID, CorrelationAttributeInstance.USBID_TYPE_ID);\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_MAC_ADDRESS, CorrelationAttributeInstance.MAC_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DEVICE_ID, CorrelationAttributeInstance.USBID_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_MAC_ADDRESS, CorrelationAttributeInstance.MAC_TYPE_ID);\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_WIFI_NETWORK.getTypeID()) {\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_SSID, CorrelationAttributeInstance.SSID_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_SSID, CorrelationAttributeInstance.SSID_TYPE_ID);\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_WIFI_NETWORK_ADAPTER.getTypeID()\n                         || artifactTypeID == ARTIFACT_TYPE.TSK_BLUETOOTH_PAIRING.getTypeID()\n                         || artifactTypeID == ARTIFACT_TYPE.TSK_BLUETOOTH_ADAPTER.getTypeID()) {\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_MAC_ADDRESS, CorrelationAttributeInstance.MAC_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_MAC_ADDRESS, CorrelationAttributeInstance.MAC_TYPE_ID);\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_DEVICE_INFO.getTypeID()) {\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_IMEI, CorrelationAttributeInstance.IMEI_TYPE_ID);\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_IMSI, CorrelationAttributeInstance.IMSI_TYPE_ID);\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ICCID, CorrelationAttributeInstance.ICCID_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_IMEI, CorrelationAttributeInstance.IMEI_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_IMSI, CorrelationAttributeInstance.IMSI_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ICCID, CorrelationAttributeInstance.ICCID_TYPE_ID);\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_SIM_ATTACHED.getTypeID()) {\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_IMSI, CorrelationAttributeInstance.IMSI_TYPE_ID);\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ICCID, CorrelationAttributeInstance.ICCID_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_IMSI, CorrelationAttributeInstance.IMSI_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ICCID, CorrelationAttributeInstance.ICCID_TYPE_ID);\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_WEB_FORM_ADDRESS.getTypeID()) {\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER, CorrelationAttributeInstance.PHONE_TYPE_ID);\n-                    makeCorrAttrFromArtifactAttr(correlationAttrs, artToExamine, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL, CorrelationAttributeInstance.EMAIL_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER, CorrelationAttributeInstance.PHONE_TYPE_ID);\n+                    makeCorrAttrFromArtifactAttr(correlationAttrs, sourceArtifact, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL, CorrelationAttributeInstance.EMAIL_TYPE_ID);\n \n                 } else if (artifactTypeID == ARTIFACT_TYPE.TSK_ACCOUNT.getTypeID()) {\n-                    makeAttributeFromAccountArtifact(correlationAttrs, artToExamine);\n+                    makeCorrAttrFromAcctArtifact(correlationAttrs, sourceArtifact);\n                 }\n             }\n         } catch (CentralRepoException ex) {\n-            logger.log(Level.SEVERE, \"Error getting defined correlation types\", ex); // NON-NLS\n+            logger.log(Level.SEVERE, String.format(\"Error querying central repository (%s)\", artifact), ex); // NON-NLS\n             return correlationAttrs;\n         } catch (TskCoreException ex) {\n-            logger.log(Level.SEVERE, \"Error getting querying case database for artifact attribute\", ex); // NON-NLS\n+            logger.log(Level.SEVERE, String.format(\"Error getting querying case database (%s)\", artifact), ex); // NON-NLS\n             return correlationAttrs;\n         } catch (NoCurrentCaseException ex) {\n             logger.log(Level.SEVERE, \"Error getting current case\", ex); // NON-NLS\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxODExNQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5659#discussion_r383918115", "bodyText": "Why does the Copyright start date change here?", "author": "raman-bt", "createdAt": "2020-02-25T14:38:22Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java", "diffHunk": "@@ -1,7 +1,7 @@\n /*\n  * Central Repository\n  *\n- * Copyright 2015-2020 Basis Technology Corp.\n+ * Copyright 2017-2020 Basis Technology Corp.", "originalCommit": "75e55dc7d4e96dd4b329413ba046fb12f05c5e73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk5MzE0OA==", "url": "https://github.com/sleuthkit/autopsy/pull/5659#discussion_r383993148", "bodyText": "The copyright notice was copied and pasted into this file without regard for the actual date in the notice. The initial work on the feature we now know as the central repository was done in 2017. This change was part of my ongoing campaign to make the copyright notices more accurate.", "author": "rcordovano", "createdAt": "2020-02-25T16:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxODExNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMzUwOQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5659#discussion_r383923509", "bodyText": "Again, why is start date changing?", "author": "raman-bt", "createdAt": "2020-02-25T14:46:33Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/eventlisteners/IngestEventsListener.java", "diffHunk": "@@ -1,7 +1,7 @@\n /*\n  * Central Repository\n  *\n- * Copyright 2015-2019 Basis Technology Corp.\n+ * Copyright 2017-2020 Basis Technology Corp.", "originalCommit": "75e55dc7d4e96dd4b329413ba046fb12f05c5e73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMDIzMg==", "url": "https://github.com/sleuthkit/autopsy/pull/5659#discussion_r384000232", "bodyText": "See previous answer.", "author": "rcordovano", "createdAt": "2020-02-25T16:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMzUwOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "61cfc91c8708c5e2cab8fb21789a1fb633796daf", "url": "https://github.com/sleuthkit/autopsy/commit/61cfc91c8708c5e2cab8fb21789a1fb633796daf", "message": "Partial clean up of CorrelationAttributeUtil.java", "committedDate": "2020-02-26T00:50:43Z", "type": "commit"}, {"oid": "97a838653178f76167749a88aaac6dc4bdc49880", "url": "https://github.com/sleuthkit/autopsy/commit/97a838653178f76167749a88aaac6dc4bdc49880", "message": "Partial clean up of CorrelationAttributeUtil.java", "committedDate": "2020-02-26T01:04:30Z", "type": "commit"}]}