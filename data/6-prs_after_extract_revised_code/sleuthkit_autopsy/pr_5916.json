{"pr_number": 5916, "pr_title": "6397 Add Persona functionality", "pr_createdAt": "2020-05-27T14:53:17Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/5916", "timeline": [{"oid": "661866f964dcc24adbbb3e68d8b159f7543f02b4", "url": "https://github.com/sleuthkit/autopsy/commit/661866f964dcc24adbbb3e68d8b159f7543f02b4", "message": "first steps", "committedDate": "2020-05-26T15:06:32Z", "type": "commit"}, {"oid": "8158088c70db2737cd6c1873880574abf6167c43", "url": "https://github.com/sleuthkit/autopsy/commit/8158088c70db2737cd6c1873880574abf6167c43", "message": "Merge branch 'develop' into 6397-add-personas", "committedDate": "2020-05-26T18:32:39Z", "type": "commit"}, {"oid": "b851f7a314707efa2b4771f54eba00768b572d4c", "url": "https://github.com/sleuthkit/autopsy/commit/b851f7a314707efa2b4771f54eba00768b572d4c", "message": "6397 Basic creation functionality", "committedDate": "2020-05-27T14:31:04Z", "type": "commit"}, {"oid": "b1f2513b8a83083adab851c35716bdd7f6a2c5af", "url": "https://github.com/sleuthkit/autopsy/commit/b1f2513b8a83083adab851c35716bdd7f6a2c5af", "message": "6397 Cleanup and bugs", "committedDate": "2020-05-27T15:13:59Z", "type": "commit"}, {"oid": "d556f3a3858afeca21587ace80473586c99a284c", "url": "https://github.com/sleuthkit/autopsy/commit/d556f3a3858afeca21587ace80473586c99a284c", "message": "6397 Single selection tables", "committedDate": "2020-05-27T15:17:39Z", "type": "commit"}, {"oid": "2264098b911ec448a4feb6a44419551c95ea1c43", "url": "https://github.com/sleuthkit/autopsy/commit/2264098b911ec448a4feb6a44419551c95ea1c43", "message": "6397 Reworking account adding", "committedDate": "2020-05-27T18:46:33Z", "type": "commit"}, {"oid": "e92aa6496e612a6547fcb45765ee2958378deb96", "url": "https://github.com/sleuthkit/autopsy/commit/e92aa6496e612a6547fcb45765ee2958378deb96", "message": "6397 Fixing small bug", "committedDate": "2020-05-27T18:47:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4MjI1Ng==", "url": "https://github.com/sleuthkit/autopsy/pull/5916#discussion_r431982256", "bodyText": "We added these  apis to CentralRepoAccount:\n\ngetAccountsWithIdentifierLike()\ngetAccountsWithIdentifier()\n\nI think when looking for an account to create a persona, those are the ones we should use here.\nAlso it isn't obvious if the user is supposed to type in a substring or a full account identifier.  We are using the api getAccountsWithIdentifierLike().  What if that returns multiple hits  - does the user get to pick one?", "author": "raman-bt", "createdAt": "2020-05-28T16:52:15Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/persona/AddAccountDialog.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.persona;\n+\n+import java.awt.Component;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.logging.Level;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JOptionPane;\n+import javax.swing.ListCellRenderer;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.WindowManager;\n+import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoAccount;\n+import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoAccount.CentralRepoAccountType;\n+import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoException;\n+import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepository;\n+import org.sleuthkit.autopsy.centralrepository.datamodel.Persona;\n+import org.sleuthkit.autopsy.centralrepository.datamodel.PersonaAccount;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * Configuration dialog for adding an account to a persona.\n+ */\n+@SuppressWarnings(\"PMD.SingularField\") // UI widgets cause lots of false positives\n+public class AddAccountDialog extends JDialog {\n+\n+    private static final Logger logger = Logger.getLogger(AddAccountDialog.class.getName());\n+\n+    private static final long serialVersionUID = 1L;\n+    \n+    private final TypeChoiceRenderer TYPE_CHOICE_RENDERER = new TypeChoiceRenderer();\n+    private final PersonaDetailsPanel pdp;\n+    \n+    /**\n+     * Creates new add account dialog\n+     */\n+    @Messages({\"AddAccountDialog.title.text=Add Account\",})\n+    public AddAccountDialog(PersonaDetailsPanel pdp) {\n+        super((JFrame) WindowManager.getDefault().getMainWindow(),\n+                Bundle.AddAccountDialog_title_text(),\n+                false);\n+        this.pdp = pdp;\n+\n+        initComponents();\n+        typeComboBox.setRenderer(TYPE_CHOICE_RENDERER);\n+        display();\n+    }\n+    \n+    /**\n+     * This class handles displaying and rendering drop down menu for account choices\n+     */\n+    private class TypeChoiceRenderer extends JLabel implements ListCellRenderer<CentralRepoAccountType>, Serializable {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        public Component getListCellRendererComponent(\n+                JList<? extends CentralRepoAccountType> list, CentralRepoAccountType value,\n+                int index, boolean isSelected, boolean cellHasFocus) {\n+            setText(value.getAcctType().getDisplayName());\n+            return this;\n+        }\n+    }\n+    \n+    @Messages({\n+        \"AddAccountDialog_get_types_exception_Title=Central Repository failure\",\n+        \"AddAccountDialog_get_types_exception_msg=Failed to access central repository\",\n+    })\n+    private CentralRepoAccountType[] getAllAccountTypes() {\n+        Collection<CentralRepoAccountType> allAccountTypes;\n+        try {\n+            allAccountTypes = CentralRepository.getInstance().getAllAccountTypes();\n+        } catch (CentralRepoException e) {\n+            logger.log(Level.SEVERE, \"Failed to access central repository\", e);\n+            JOptionPane.showMessageDialog(this,\n+                                    Bundle.AddAccountDialog_get_types_exception_Title(),\n+                                    Bundle.AddAccountDialog_get_types_exception_msg(),\n+                                    JOptionPane.ERROR_MESSAGE);\n+            return new CentralRepoAccountType[0];\n+        }\n+        return allAccountTypes.toArray(new CentralRepoAccountType[0]);\n+    }\n+\n+    /**\n+     * This method is called from within the constructor to initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is always\n+     * regenerated by the Form Editor.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        settingsPanel = new javax.swing.JPanel();\n+        identiferLbl = new javax.swing.JLabel();\n+        identifierTextField = new javax.swing.JTextField();\n+        typeLbl = new javax.swing.JLabel();\n+        typeComboBox = new javax.swing.JComboBox<>();\n+        justificationLbl = new javax.swing.JLabel();\n+        justificationTextField = new javax.swing.JTextField();\n+        confidenceLbl = new javax.swing.JLabel();\n+        confidenceComboBox = new javax.swing.JComboBox<>();\n+        cancelBtn = new javax.swing.JButton();\n+        okBtn = new javax.swing.JButton();\n+\n+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n+        setResizable(false);\n+\n+        settingsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(identiferLbl, org.openide.util.NbBundle.getMessage(AddAccountDialog.class, \"AddAccountDialog.identiferLbl.text\")); // NOI18N\n+\n+        identifierTextField.setText(org.openide.util.NbBundle.getMessage(AddAccountDialog.class, \"AddAccountDialog.identifierTextField.text\")); // NOI18N\n+        identifierTextField.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                identifierTextFieldActionPerformed(evt);\n+            }\n+        });\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(typeLbl, org.openide.util.NbBundle.getMessage(AddAccountDialog.class, \"AddAccountDialog.typeLbl.text\")); // NOI18N\n+\n+        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(getAllAccountTypes()));\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(justificationLbl, org.openide.util.NbBundle.getMessage(AddAccountDialog.class, \"AddAccountDialog.justificationLbl.text\")); // NOI18N\n+\n+        justificationTextField.setText(org.openide.util.NbBundle.getMessage(AddAccountDialog.class, \"AddAccountDialog.justificationTextField.text\")); // NOI18N\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(confidenceLbl, org.openide.util.NbBundle.getMessage(AddAccountDialog.class, \"AddAccountDialog.confidenceLbl.text\")); // NOI18N\n+\n+        confidenceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(org.sleuthkit.autopsy.centralrepository.datamodel.Persona.Confidence.values()));\n+\n+        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);\n+        settingsPanel.setLayout(settingsPanelLayout);\n+        settingsPanelLayout.setHorizontalGroup(\n+            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(settingsPanelLayout.createSequentialGroup()\n+                .addContainerGap()\n+                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addGroup(settingsPanelLayout.createSequentialGroup()\n+                        .addComponent(typeLbl)\n+                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                        .addComponent(typeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n+                    .addGroup(settingsPanelLayout.createSequentialGroup()\n+                        .addComponent(identiferLbl)\n+                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                        .addComponent(identifierTextField))\n+                    .addGroup(settingsPanelLayout.createSequentialGroup()\n+                        .addComponent(confidenceLbl)\n+                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                        .addComponent(confidenceComboBox, 0, 269, Short.MAX_VALUE))\n+                    .addGroup(settingsPanelLayout.createSequentialGroup()\n+                        .addComponent(justificationLbl)\n+                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                        .addComponent(justificationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)))\n+                .addContainerGap())\n+        );\n+        settingsPanelLayout.setVerticalGroup(\n+            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(settingsPanelLayout.createSequentialGroup()\n+                .addContainerGap()\n+                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(identiferLbl)\n+                    .addComponent(identifierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                    .addComponent(typeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(justificationLbl)\n+                    .addComponent(justificationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(confidenceLbl)\n+                    .addComponent(confidenceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n+        );\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(cancelBtn, org.openide.util.NbBundle.getMessage(AddAccountDialog.class, \"AddAccountDialog.cancelBtn.text\")); // NOI18N\n+        cancelBtn.setMaximumSize(new java.awt.Dimension(79, 23));\n+        cancelBtn.setMinimumSize(new java.awt.Dimension(79, 23));\n+        cancelBtn.setPreferredSize(new java.awt.Dimension(79, 23));\n+        cancelBtn.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                cancelBtnActionPerformed(evt);\n+            }\n+        });\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(okBtn, org.openide.util.NbBundle.getMessage(AddAccountDialog.class, \"AddAccountDialog.okBtn.text\")); // NOI18N\n+        okBtn.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                okBtnActionPerformed(evt);\n+            }\n+        });\n+\n+        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n+        getContentPane().setLayout(layout);\n+        layout.setHorizontalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                    .addGroup(layout.createSequentialGroup()\n+                        .addContainerGap(202, Short.MAX_VALUE)\n+                        .addComponent(okBtn)\n+                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n+                .addContainerGap())\n+        );\n+\n+        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelBtn, okBtn});\n+\n+        layout.setVerticalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addComponent(okBtn, javax.swing.GroupLayout.Alignment.TRAILING)\n+                    .addComponent(cancelBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n+        );\n+\n+        pack();\n+    }// </editor-fold>//GEN-END:initComponents\n+\n+    private void display() {\n+        this.setLocationRelativeTo(WindowManager.getDefault().getMainWindow());\n+        setVisible(true);\n+    }\n+\n+    @Messages({\n+        \"AddAccountDialog_dup_Title=Account add failure\",\n+        \"AddAccountDialog_dup_msg=This account is already added to the persona\",\n+        \"AddAccountDialog_empty_Title=Empty identifier\",\n+        \"AddAccountDialog_empty_msg=The identifier field cannot be empty\",\n+        \"AddAccountDialog_search_failure_Title=Account add failure\",\n+        \"AddAccountDialog_search_failure_msg=Central Repository account search failed\",\n+        \"AddAccountDialog_search_empty_Title=Account not found\",\n+        \"AddAccountDialog_search_empty_msg=Account not found for given identifier and type\",})\n+    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed\n+        if (identifierTextField.getText().isEmpty()) {\n+            JOptionPane.showMessageDialog(this,\n+                    Bundle.AddAccountDialog_empty_msg(),\n+                    Bundle.AddAccountDialog_empty_Title(),\n+                    JOptionPane.ERROR_MESSAGE);\n+            return;\n+        }\n+        Collection<PersonaAccount> candidates;\n+        try {\n+            candidates = \n+                    PersonaAccount.getPersonaAccountsForIdentifierLike(identifierTextField.getText());", "originalCommit": "e92aa6496e612a6547fcb45765ee2958378deb96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ee10bc713a9c0c4105bc585d98abdf4d9f0e874", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/centralrepository/persona/AddAccountDialog.java b/Core/src/org/sleuthkit/autopsy/centralrepository/persona/AddAccountDialog.java\nindex 020cbf8285..9a9146851b 100644\n--- a/Core/src/org/sleuthkit/autopsy/centralrepository/persona/AddAccountDialog.java\n+++ b/Core/src/org/sleuthkit/autopsy/centralrepository/persona/AddAccountDialog.java\n\n@@ -35,7 +35,6 @@\n import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoException;\n import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepository;\n import org.sleuthkit.autopsy.centralrepository.datamodel.Persona;\n-import org.sleuthkit.autopsy.centralrepository.datamodel.PersonaAccount;\n import org.sleuthkit.autopsy.coreutils.Logger;\n \n /**\n"}}, {"oid": "534a36f041cc75442989c9f8a034702e040e65ef", "url": "https://github.com/sleuthkit/autopsy/commit/534a36f041cc75442989c9f8a034702e040e65ef", "message": "Merge branch 'develop' into 6397-add-personas", "committedDate": "2020-05-28T17:01:56Z", "type": "commit"}, {"oid": "4ee10bc713a9c0c4105bc585d98abdf4d9f0e874", "url": "https://github.com/sleuthkit/autopsy/commit/4ee10bc713a9c0c4105bc585d98abdf4d9f0e874", "message": "6397 Fixing account search in AddAccount dialog", "committedDate": "2020-05-28T17:08:47Z", "type": "commit"}, {"oid": "6fba8768905a122af35dfa674048cbcb6c089967", "url": "https://github.com/sleuthkit/autopsy/commit/6fba8768905a122af35dfa674048cbcb6c089967", "message": "6397 Codacy", "committedDate": "2020-05-28T18:05:41Z", "type": "commit"}, {"oid": "1b0ac03903e6868a72e3789c977856d525da15c1", "url": "https://github.com/sleuthkit/autopsy/commit/1b0ac03903e6868a72e3789c977856d525da15c1", "message": "6397 Codacy", "committedDate": "2020-05-28T18:29:24Z", "type": "commit"}]}