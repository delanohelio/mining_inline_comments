{"pr_number": 5780, "pr_title": "6228 - Fix CR Regressions", "pr_createdAt": "2020-04-06T19:06:05Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/5780", "timeline": [{"oid": "922805c071812d4779a54983bac0161caacb9de0", "url": "https://github.com/sleuthkit/autopsy/commit/922805c071812d4779a54983bac0161caacb9de0", "message": "Implemented and tested fixes for the regression", "committedDate": "2020-04-06T18:57:11Z", "type": "commit"}, {"oid": "bdcbb85f6002f6509fddb563d326cc02f44cb1c6", "url": "https://github.com/sleuthkit/autopsy/commit/bdcbb85f6002f6509fddb563d326cc02f44cb1c6", "message": "codacy", "committedDate": "2020-04-06T19:13:12Z", "type": "commit"}, {"oid": "72f8aafbbab03ee1365a3e637cd8fca794132483", "url": "https://github.com/sleuthkit/autopsy/commit/72f8aafbbab03ee1365a3e637cd8fca794132483", "message": "codacy", "committedDate": "2020-04-06T19:14:35Z", "type": "commit"}, {"oid": "18359fc2e6fcf661d03a934e0de8bb3838c3f3a3", "url": "https://github.com/sleuthkit/autopsy/commit/18359fc2e6fcf661d03a934e0de8bb3838c3f3a3", "message": "Codacy and renamed variable", "committedDate": "2020-04-06T19:15:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2NTQ2OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404865469", "bodyText": "Whoops, I don't know how this got deleted. I'll add it back in.", "author": "dannysmyda", "createdAt": "2020-04-07T14:43:58Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java", "diffHunk": "@@ -59,28 +62,58 @@ private static String getEmailAddressAttrDisplayName() {\n         return Bundle.CorrelationAttributeUtil_emailaddresses_text();\n     }\n \n+    // Defines which artifact types act as the sources for CR data.\n+    // Most notably, does not include KEYWORD HIT, CALLLOGS, MESSAGES, CONTACTS\n+    // TSK_INTERESTING_ARTIFACT_HIT (See JIRA-6129 for more details on the\n+    // interesting artifact hit).\n+    private static final Set<Integer> SOURCE_TYPES_FOR_CR_INSERT = new HashSet<Integer>() {{\n+        add(ARTIFACT_TYPE.TSK_WEB_BOOKMARK.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_WEB_COOKIE.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_WEB_HISTORY.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_DEVICE_ATTACHED.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_WIFI_NETWORK.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_WIFI_NETWORK_ADAPTER.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_BLUETOOTH_PAIRING.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_BLUETOOTH_ADAPTER.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_DEVICE_INFO.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_SIM_ATTACHED.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_WEB_FORM_ADDRESS.getTypeID());\n+        add(ARTIFACT_TYPE.TSK_ACCOUNT.getTypeID());\n+    }};\n+\n     /**\n      * Makes zero to many correlation attribute instances from the attributes of\n-     * an artifact.\n-     *\n-     * IMPORTANT: The correlation attribute instances are NOT added to the\n-     * central repository by this method.\n-     *\n-     * @param artifact An artifact.\n+     * artifacts that have correlatable data. The intention of this method is to\n+     * use the results to save to the CR, not to correlate with them. If you \n+     * want to correlate, please use makeCorrAttrsForCorrelation. An artifact that can\n+     * have correlatable data != An artifact that should be the source of data\n+     * in the CR, so results may be un-necessarily incomplete.\n+     * \n+     * @param artifact              An artifact.\n      *\n      * @return A list, possibly empty, of correlation attribute instances for\n-     *         the artifact.\n+     *          the artifact.\n      */\n-    public static List<CorrelationAttributeInstance> makeCorrAttrsFromArtifact(BlackboardArtifact artifact) {\n-        return makeCorrAttrsFromArtifact(artifact, true );\n+    public static List<CorrelationAttributeInstance> makeCorrAttrsToSave(BlackboardArtifact artifact) {\n+        if(SOURCE_TYPES_FOR_CR_INSERT.contains(artifact.getArtifactTypeID())) {\n+            // Restrict the correlation attributes to use for saving.\n+            // The artifacts which are suitable for saving are a subset of the\n+            // artifacts that are suitable for correlating.\n+            return makeCorrAttrsForCorrelation(artifact);\n+        }\n+        // Return an empty collection.\n+        return new ArrayList<>();\n     }\n-    \n+\n     /**\n      * Makes zero to many correlation attribute instances from the attributes of\n-     * an artifact.\n+     * artifacts that have correlatable data. The intention of this method is to\n+     * use the results to correlate with, not to save. If you \n+     * want to save, please use makeCorrAttrsToSave. An artifact that can\n+     * have correlatable data != An artifact that should be the source of data\n+     * in the CR, so results may be too lenient.\n      *\n-     * IMPORTANT: The correlation attribute instances are NOT added to the", "originalCommit": "18359fc2e6fcf661d03a934e0de8bb3838c3f3a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9842156733379fa1d944d0b1094dc3ff70a60a6a", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\nindex 15c796f858..f1d68b7db1 100644\n--- a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n+++ b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n\n@@ -66,6 +66,9 @@ private static String getEmailAddressAttrDisplayName() {\n     // Most notably, does not include KEYWORD HIT, CALLLOGS, MESSAGES, CONTACTS\n     // TSK_INTERESTING_ARTIFACT_HIT (See JIRA-6129 for more details on the\n     // interesting artifact hit).\n+    \n+    // IMPORTANT: This set should be updated for new artifacts types that need to\n+    // be inserted into the CR.\n     private static final Set<Integer> SOURCE_TYPES_FOR_CR_INSERT = new HashSet<Integer>() {{\n         add(ARTIFACT_TYPE.TSK_WEB_BOOKMARK.getTypeID());\n         add(ARTIFACT_TYPE.TSK_WEB_COOKIE.getTypeID());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MjI4MA==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404872280", "bodyText": "Just FYI, this is a revert of previous changes.", "author": "dannysmyda", "createdAt": "2020-04-07T14:52:30Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java", "diffHunk": "@@ -158,6 +192,51 @@ private static String getEmailAddressAttrDisplayName() {\n         return correlationAttrs;\n     }\n \n+    /**\n+     * Makes a correlation attribute instance from a phone number attribute of an\n+     * artifact.\n+     *\n+     * @param artifact An artifact with a phone number attribute.\n+     *\n+     * @return The correlation instance artifact or null, if the phone number is\n+     *         not a valid correlation attribute.\n+     *\n+     * @throws TskCoreException     If there is an error querying the case\n+     *                              database.\n+     * @throws CentralRepoException If there is an error querying the central\n+     *                              repository.\n+     */\n+    private static void makeCorrAttrFromArtifactPhoneAttr(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {", "originalCommit": "18359fc2e6fcf661d03a934e0de8bb3838c3f3a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNjE5Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404916193", "bodyText": "I know this is simply reverting to what 'was'...\nBut we could have email address attributes in the CONTACT_ARTIFACT, which should produce an CR attribute.  Perhaps we should make a story to come back and revisit this later.", "author": "raman-bt", "createdAt": "2020-04-07T15:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MjI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyMTgyMA==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404921820", "bodyText": "I'd like us to make the fix now.", "author": "rcordovano", "createdAt": "2020-04-07T15:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MjI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyMTk5OA==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404921998", "bodyText": "Yes, it can have email, email_to, email_cc, email_bcc, phone, phone_to, phone_from, phone_home, phone_office, phone_mobile. I looked at the code and the same logic applies to some other artifacts. I think creating a story would be a good idea.", "author": "dannysmyda", "createdAt": "2020-04-07T15:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MjI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NTMxMg==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404945312", "bodyText": "@dannysmyda, please create the story, assign it to yourself, etc. Thanks!", "author": "rcordovano", "createdAt": "2020-04-07T16:27:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MjI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjcwNQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404976705", "bodyText": "I'll just do it here then, for the phone attr method.", "author": "dannysmyda", "createdAt": "2020-04-07T17:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MjI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "9842156733379fa1d944d0b1094dc3ff70a60a6a", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\nindex 15c796f858..f1d68b7db1 100644\n--- a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n+++ b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n\n@@ -193,46 +198,49 @@ private static String getEmailAddressAttrDisplayName() {\n     }\n \n     /**\n-     * Makes a correlation attribute instance from a phone number attribute of an\n-     * artifact.\n+     * Makes correlation attribute instances from phone or email attributes \n+     * found on communication-type artifacts.\n      *\n-     * @param artifact An artifact with a phone number attribute.\n-     *\n-     * @return The correlation instance artifact or null, if the phone number is\n-     *         not a valid correlation attribute.\n+     * @param artifact A communication-type artifact\n      *\n      * @throws TskCoreException     If there is an error querying the case\n      *                              database.\n      * @throws CentralRepoException If there is an error querying the central\n      *                              repository.\n      */\n-    private static void makeCorrAttrFromArtifactPhoneAttr(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {\n-        CorrelationAttributeInstance corrAttr = null;\n-\n-        /*\n-         * Extract the phone number from the artifact attribute.\n-         */\n-        String value = null;\n-        if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER)).getValueString();\n-        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM)).getValueString();\n-        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO)).getValueString();\n-        }\n-\n-        /*\n-         * Normalize the phone number.\n-         */\n-        if (value != null) {\n-            try {\n-                value = CommunicationsUtils.normalizePhoneNum(value);\n-                corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.PHONE_TYPE_ID), value);\n-                if(corrAttr != null) {\n-                    corrAttrInstances.add(corrAttr);\n+    private static void makeCorrAttrsFromCommunicationArtifacts(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {\n+        for(BlackboardAttribute attribute : artifact.getAttributes()) {\n+            BlackboardAttribute.Type attributeType = attribute.getAttributeType();\n+            if(attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_HOME))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_OFFICE))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_MOBILE))) {\n+                String phoneNumber = attribute.getValueString();\n+                if(CommunicationsUtils.isValidPhoneNumber(phoneNumber)) {\n+                    String phoneNumberNorm = CommunicationsUtils.normalizePhoneNum(phoneNumber);\n+                    CorrelationAttributeInstance corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.PHONE_TYPE_ID), phoneNumberNorm);\n+                    if(corrAttr != null) {\n+                        corrAttrInstances.add(corrAttr);\n+                    }\n+                }\n+            } else if (attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_FROM))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_TO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_HOME))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_OFFICE))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_REPLYTO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_BCC))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_CC))) {\n+                String emailAddress = attribute.getValueString();\n+                if(CommunicationsUtils.isValidEmailAddress(emailAddress)) {\n+                    String emailAddressNorm = CommunicationsUtils.normalizeEmailAddress(emailAddress);\n+                    CorrelationAttributeInstance corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.EMAIL_TYPE_ID), emailAddressNorm);\n+                    if(corrAttr != null) {\n+                        corrAttrInstances.add(corrAttr);\n+                    }\n                 }\n-            } catch(TskCoreException ex) {\n-                logger.log(Level.INFO, String.format(\"Phone number found in artifact %d did not pass validation.\", artifact.getId()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MjQzNw==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404872437", "bodyText": "With the exception of this", "author": "dannysmyda", "createdAt": "2020-04-07T14:52:42Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java", "diffHunk": "@@ -158,6 +192,51 @@ private static String getEmailAddressAttrDisplayName() {\n         return correlationAttrs;\n     }\n \n+    /**\n+     * Makes a correlation attribute instance from a phone number attribute of an\n+     * artifact.\n+     *\n+     * @param artifact An artifact with a phone number attribute.\n+     *\n+     * @return The correlation instance artifact or null, if the phone number is\n+     *         not a valid correlation attribute.\n+     *\n+     * @throws TskCoreException     If there is an error querying the case\n+     *                              database.\n+     * @throws CentralRepoException If there is an error querying the central\n+     *                              repository.\n+     */\n+    private static void makeCorrAttrFromArtifactPhoneAttr(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {\n+        CorrelationAttributeInstance corrAttr = null;\n+\n+        /*\n+         * Extract the phone number from the artifact attribute.\n+         */\n+        String value = null;\n+        if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))) {\n+            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER)).getValueString();\n+        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))) {\n+            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM)).getValueString();\n+        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))) {\n+            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO)).getValueString();\n+        }\n+\n+        /*\n+         * Normalize the phone number.\n+         */\n+        if (value != null) {\n+            try {\n+                value = CommunicationsUtils.normalizePhoneNum(value);", "originalCommit": "18359fc2e6fcf661d03a934e0de8bb3838c3f3a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9842156733379fa1d944d0b1094dc3ff70a60a6a", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\nindex 15c796f858..f1d68b7db1 100644\n--- a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n+++ b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n\n@@ -193,46 +198,49 @@ private static String getEmailAddressAttrDisplayName() {\n     }\n \n     /**\n-     * Makes a correlation attribute instance from a phone number attribute of an\n-     * artifact.\n+     * Makes correlation attribute instances from phone or email attributes \n+     * found on communication-type artifacts.\n      *\n-     * @param artifact An artifact with a phone number attribute.\n-     *\n-     * @return The correlation instance artifact or null, if the phone number is\n-     *         not a valid correlation attribute.\n+     * @param artifact A communication-type artifact\n      *\n      * @throws TskCoreException     If there is an error querying the case\n      *                              database.\n      * @throws CentralRepoException If there is an error querying the central\n      *                              repository.\n      */\n-    private static void makeCorrAttrFromArtifactPhoneAttr(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {\n-        CorrelationAttributeInstance corrAttr = null;\n-\n-        /*\n-         * Extract the phone number from the artifact attribute.\n-         */\n-        String value = null;\n-        if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER)).getValueString();\n-        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM)).getValueString();\n-        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO)).getValueString();\n-        }\n-\n-        /*\n-         * Normalize the phone number.\n-         */\n-        if (value != null) {\n-            try {\n-                value = CommunicationsUtils.normalizePhoneNum(value);\n-                corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.PHONE_TYPE_ID), value);\n-                if(corrAttr != null) {\n-                    corrAttrInstances.add(corrAttr);\n+    private static void makeCorrAttrsFromCommunicationArtifacts(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {\n+        for(BlackboardAttribute attribute : artifact.getAttributes()) {\n+            BlackboardAttribute.Type attributeType = attribute.getAttributeType();\n+            if(attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_HOME))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_OFFICE))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_MOBILE))) {\n+                String phoneNumber = attribute.getValueString();\n+                if(CommunicationsUtils.isValidPhoneNumber(phoneNumber)) {\n+                    String phoneNumberNorm = CommunicationsUtils.normalizePhoneNum(phoneNumber);\n+                    CorrelationAttributeInstance corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.PHONE_TYPE_ID), phoneNumberNorm);\n+                    if(corrAttr != null) {\n+                        corrAttrInstances.add(corrAttr);\n+                    }\n+                }\n+            } else if (attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_FROM))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_TO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_HOME))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_OFFICE))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_REPLYTO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_BCC))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_CC))) {\n+                String emailAddress = attribute.getValueString();\n+                if(CommunicationsUtils.isValidEmailAddress(emailAddress)) {\n+                    String emailAddressNorm = CommunicationsUtils.normalizeEmailAddress(emailAddress);\n+                    CorrelationAttributeInstance corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.EMAIL_TYPE_ID), emailAddressNorm);\n+                    if(corrAttr != null) {\n+                        corrAttrInstances.add(corrAttr);\n+                    }\n                 }\n-            } catch(TskCoreException ex) {\n-                logger.log(Level.INFO, String.format(\"Phone number found in artifact %d did not pass validation.\", artifact.getId()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MDcxNQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404880715", "bodyText": "Motivation for defining the types, and not their negation (by that I mean not keyword hit, not calllog, not contacts), is this will be safer to keep it up to date. Basically, if a new type comes along for correlation only, we are good. If a new type comes along for insert, during testing they (developer) won't see the expected behavior and update this set. However, with the negation, any new artifact types accepted for correlation will automatically be saved, which is too accepting of mistakes.", "author": "dannysmyda", "createdAt": "2020-04-07T15:02:29Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java", "diffHunk": "@@ -59,28 +62,58 @@ private static String getEmailAddressAttrDisplayName() {\n         return Bundle.CorrelationAttributeUtil_emailaddresses_text();\n     }\n \n+    // Defines which artifact types act as the sources for CR data.\n+    // Most notably, does not include KEYWORD HIT, CALLLOGS, MESSAGES, CONTACTS\n+    // TSK_INTERESTING_ARTIFACT_HIT (See JIRA-6129 for more details on the\n+    // interesting artifact hit).\n+    private static final Set<Integer> SOURCE_TYPES_FOR_CR_INSERT = new HashSet<Integer>() {{", "originalCommit": "18359fc2e6fcf661d03a934e0de8bb3838c3f3a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzg3NA==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404937874", "bodyText": "I think a comment here to indicate that this list should be updated with any new artifacts that may be source for CR attributes (for creation) would be useful.", "author": "raman-bt", "createdAt": "2020-04-07T16:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MDcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NTAzNg==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404975036", "bodyText": "Good idea, I've added a comment. Thanks.", "author": "dannysmyda", "createdAt": "2020-04-07T17:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MDcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9842156733379fa1d944d0b1094dc3ff70a60a6a", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\nindex 15c796f858..f1d68b7db1 100644\n--- a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n+++ b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n\n@@ -66,6 +66,9 @@ private static String getEmailAddressAttrDisplayName() {\n     // Most notably, does not include KEYWORD HIT, CALLLOGS, MESSAGES, CONTACTS\n     // TSK_INTERESTING_ARTIFACT_HIT (See JIRA-6129 for more details on the\n     // interesting artifact hit).\n+    \n+    // IMPORTANT: This set should be updated for new artifacts types that need to\n+    // be inserted into the CR.\n     private static final Set<Integer> SOURCE_TYPES_FOR_CR_INSERT = new HashSet<Integer>() {{\n         add(ARTIFACT_TYPE.TSK_WEB_BOOKMARK.getTypeID());\n         add(ARTIFACT_TYPE.TSK_WEB_COOKIE.getTypeID());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg5ODg4MA==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404898880", "bodyText": "soruces => sources", "author": "rcordovano", "createdAt": "2020-04-07T15:25:44Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/eventlisteners/IngestEventsListener.java", "diffHunk": "@@ -455,11 +455,8 @@ public void run() {\n             List<CorrelationAttributeInstance> eamArtifacts = new ArrayList<>();\n \n             for (BlackboardArtifact bbArtifact : bbArtifacts) {\n-                // If the incoming artifact is of type TSK_INTERESTING_ARTIFACT_HIT, \n-                // do not resolve to the source artifact, as correlation attributes \n-                // for the source artifact would have already been created, \n-                // when the event for that source artifact was received.\n-                List<CorrelationAttributeInstance> convertedArtifacts = CorrelationAttributeUtil.makeCorrAttrsFromArtifact(bbArtifact, false);\n+                // makeCorrAttrToSave will filter out artifacts which should not be soruces of CR data.", "originalCommit": "18359fc2e6fcf661d03a934e0de8bb3838c3f3a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9842156733379fa1d944d0b1094dc3ff70a60a6a", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/centralrepository/eventlisteners/IngestEventsListener.java b/Core/src/org/sleuthkit/autopsy/centralrepository/eventlisteners/IngestEventsListener.java\nindex bf347de026..843e476499 100644\n--- a/Core/src/org/sleuthkit/autopsy/centralrepository/eventlisteners/IngestEventsListener.java\n+++ b/Core/src/org/sleuthkit/autopsy/centralrepository/eventlisteners/IngestEventsListener.java\n\n@@ -455,7 +455,7 @@ public void run() {\n             List<CorrelationAttributeInstance> eamArtifacts = new ArrayList<>();\n \n             for (BlackboardArtifact bbArtifact : bbArtifacts) {\n-                // makeCorrAttrToSave will filter out artifacts which should not be soruces of CR data.\n+                // makeCorrAttrToSave will filter out artifacts which should not be sources of CR data.\n                 List<CorrelationAttributeInstance> convertedArtifacts = CorrelationAttributeUtil.makeCorrAttrsToSave(bbArtifact);\n                 for (CorrelationAttributeInstance eamArtifact : convertedArtifacts) {\n                     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNTg0Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404905843", "bodyText": "I realize that the code above is restored code, but it looks like it contains another bug. The contact book entry, call log entry and message artifacts all support multiple phone number attributes. I think we need to loop over all of the attributes in the artifact, rather than stop after \"harvesting\" one phone number.", "author": "rcordovano", "createdAt": "2020-04-07T15:34:30Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java", "diffHunk": "@@ -158,6 +192,51 @@ private static String getEmailAddressAttrDisplayName() {\n         return correlationAttrs;\n     }\n \n+    /**\n+     * Makes a correlation attribute instance from a phone number attribute of an\n+     * artifact.\n+     *\n+     * @param artifact An artifact with a phone number attribute.\n+     *\n+     * @return The correlation instance artifact or null, if the phone number is\n+     *         not a valid correlation attribute.\n+     *\n+     * @throws TskCoreException     If there is an error querying the case\n+     *                              database.\n+     * @throws CentralRepoException If there is an error querying the central\n+     *                              repository.\n+     */\n+    private static void makeCorrAttrFromArtifactPhoneAttr(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {\n+        CorrelationAttributeInstance corrAttr = null;\n+\n+        /*\n+         * Extract the phone number from the artifact attribute.\n+         */\n+        String value = null;\n+        if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))) {\n+            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER)).getValueString();\n+        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))) {\n+            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM)).getValueString();\n+        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))) {\n+            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO)).getValueString();\n+        }", "originalCommit": "18359fc2e6fcf661d03a934e0de8bb3838c3f3a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyMjI2Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404922263", "bodyText": "See Raman's comment for new story proposal.", "author": "dannysmyda", "createdAt": "2020-04-07T15:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNTg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NTkzOA==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404945938", "bodyText": "@dannysmyda, please create the story or stories, assign to self, etc. Thanks!", "author": "rcordovano", "createdAt": "2020-04-07T16:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNTg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjM0Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/5780#discussion_r404976342", "bodyText": "I'll just do it here then.", "author": "dannysmyda", "createdAt": "2020-04-07T17:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNTg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9842156733379fa1d944d0b1094dc3ff70a60a6a", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\nindex 15c796f858..f1d68b7db1 100644\n--- a/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n+++ b/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeUtil.java\n\n@@ -193,46 +198,49 @@ private static String getEmailAddressAttrDisplayName() {\n     }\n \n     /**\n-     * Makes a correlation attribute instance from a phone number attribute of an\n-     * artifact.\n+     * Makes correlation attribute instances from phone or email attributes \n+     * found on communication-type artifacts.\n      *\n-     * @param artifact An artifact with a phone number attribute.\n-     *\n-     * @return The correlation instance artifact or null, if the phone number is\n-     *         not a valid correlation attribute.\n+     * @param artifact A communication-type artifact\n      *\n      * @throws TskCoreException     If there is an error querying the case\n      *                              database.\n      * @throws CentralRepoException If there is an error querying the central\n      *                              repository.\n      */\n-    private static void makeCorrAttrFromArtifactPhoneAttr(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {\n-        CorrelationAttributeInstance corrAttr = null;\n-\n-        /*\n-         * Extract the phone number from the artifact attribute.\n-         */\n-        String value = null;\n-        if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER)).getValueString();\n-        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM)).getValueString();\n-        } else if (null != artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))) {\n-            value = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO)).getValueString();\n-        }\n-\n-        /*\n-         * Normalize the phone number.\n-         */\n-        if (value != null) {\n-            try {\n-                value = CommunicationsUtils.normalizePhoneNum(value);\n-                corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.PHONE_TYPE_ID), value);\n-                if(corrAttr != null) {\n-                    corrAttrInstances.add(corrAttr);\n+    private static void makeCorrAttrsFromCommunicationArtifacts(List<CorrelationAttributeInstance> corrAttrInstances, BlackboardArtifact artifact) throws TskCoreException, CentralRepoException {\n+        for(BlackboardAttribute attribute : artifact.getAttributes()) {\n+            BlackboardAttribute.Type attributeType = attribute.getAttributeType();\n+            if(attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_TO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_FROM))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_HOME))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_OFFICE))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_MOBILE))) {\n+                String phoneNumber = attribute.getValueString();\n+                if(CommunicationsUtils.isValidPhoneNumber(phoneNumber)) {\n+                    String phoneNumberNorm = CommunicationsUtils.normalizePhoneNum(phoneNumber);\n+                    CorrelationAttributeInstance corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.PHONE_TYPE_ID), phoneNumberNorm);\n+                    if(corrAttr != null) {\n+                        corrAttrInstances.add(corrAttr);\n+                    }\n+                }\n+            } else if (attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_FROM))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_TO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_HOME))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_OFFICE))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_REPLYTO))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_BCC))\n+                    || attributeType.equals(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_CC))) {\n+                String emailAddress = attribute.getValueString();\n+                if(CommunicationsUtils.isValidEmailAddress(emailAddress)) {\n+                    String emailAddressNorm = CommunicationsUtils.normalizeEmailAddress(emailAddress);\n+                    CorrelationAttributeInstance corrAttr = makeCorrAttr(artifact, CentralRepository.getInstance().getCorrelationTypeById(CorrelationAttributeInstance.EMAIL_TYPE_ID), emailAddressNorm);\n+                    if(corrAttr != null) {\n+                        corrAttrInstances.add(corrAttr);\n+                    }\n                 }\n-            } catch(TskCoreException ex) {\n-                logger.log(Level.INFO, String.format(\"Phone number found in artifact %d did not pass validation.\", artifact.getId()));\n             }\n         }\n     }\n"}}, {"oid": "9842156733379fa1d944d0b1094dc3ff70a60a6a", "url": "https://github.com/sleuthkit/autopsy/commit/9842156733379fa1d944d0b1094dc3ff70a60a6a", "message": "Addressed review feedback", "committedDate": "2020-04-07T18:21:01Z", "type": "commit"}, {"oid": "b9660f974784881f3e15924e927eb88f09250135", "url": "https://github.com/sleuthkit/autopsy/commit/b9660f974784881f3e15924e927eb88f09250135", "message": "Reverted attribute util changes", "committedDate": "2020-04-07T20:50:18Z", "type": "commit"}, {"oid": "f34ea638706fbc0fffddf947622da257f01bc8d0", "url": "https://github.com/sleuthkit/autopsy/commit/f34ea638706fbc0fffddf947622da257f01bc8d0", "message": "Merged in develop", "committedDate": "2020-04-07T22:56:51Z", "type": "commit"}]}