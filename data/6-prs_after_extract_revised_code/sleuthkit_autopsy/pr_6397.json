{"pr_number": 6397, "pr_title": "6898 get iLeapp to work on other disk images and logical file sets", "pr_createdAt": "2020-10-19T13:33:57Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/6397", "timeline": [{"oid": "797a89e4aec23ef31a74b61d95be9c900acb2737", "url": "https://github.com/sleuthkit/autopsy/commit/797a89e4aec23ef31a74b61d95be9c900acb2737", "message": "Initial Commit of code\n\ninitial commit of code.", "committedDate": "2020-10-14T13:24:00Z", "type": "commit"}, {"oid": "fd7f4525e5628d8c9f3bce8143066242927d67ff", "url": "https://github.com/sleuthkit/autopsy/commit/fd7f4525e5628d8c9f3bce8143066242927d67ff", "message": "Update ILeappAnalyzerIngestModule.java\n\nadded FS datasource id", "committedDate": "2020-10-14T19:18:52Z", "type": "commit"}, {"oid": "f91606c4565ca240c80b62be7d759d42163d0e1b", "url": "https://github.com/sleuthkit/autopsy/commit/f91606c4565ca240c80b62be7d759d42163d0e1b", "message": "add new version of iLeapp and other fixes\n\nAdd new version of iLeapp and other minor fixes.", "committedDate": "2020-10-19T12:55:43Z", "type": "commit"}, {"oid": "0acb11c9ac2132635fbafc5112dd5f27dbfd43d8", "url": "https://github.com/sleuthkit/autopsy/commit/0acb11c9ac2132635fbafc5112dd5f27dbfd43d8", "message": "Update ILeappAnalyzerIngestModule.java\n\nAddress codacy issues", "committedDate": "2020-10-19T19:15:56Z", "type": "commit"}, {"oid": "3580f5a379a949201e32d4d19632d16b0499d12a", "url": "https://github.com/sleuthkit/autopsy/commit/3580f5a379a949201e32d4d19632d16b0499d12a", "message": "Update ILeappAnalyzerIngestModule.java\n\nAddress Codacy Issue", "committedDate": "2020-10-19T19:26:01Z", "type": "commit"}, {"oid": "2fdc83a72db5f15c89add23d14ad4793691d55e2", "url": "https://github.com/sleuthkit/autopsy/commit/2fdc83a72db5f15c89add23d14ad4793691d55e2", "message": "Update ILeappAnalyzerIngestModule.java\n\nAddress codacy", "committedDate": "2020-10-19T19:34:00Z", "type": "commit"}, {"oid": "a1a20e6bc06c6c0a91fb1e502e2b66fb3b4d115c", "url": "https://github.com/sleuthkit/autopsy/commit/a1a20e6bc06c6c0a91fb1e502e2b66fb3b4d115c", "message": "Update Where files are extracted to\n\nUPdate where files are extracted to and add check for duplicate attributes", "committedDate": "2020-10-20T18:07:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODE0NA==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r518948144", "bodyText": "Missing method header", "author": "kellykelly3", "createdAt": "2020-11-06T19:05:12Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -112,65 +120,134 @@ public void startUp(IngestJobContext context) throws IngestModuleException {\n     @Override\n     public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress statusHelper) {\n \n-        if (!(context.getDataSource() instanceof LocalFilesDataSource)) {\n-            return ProcessResult.OK;\n+        Case currentCase = Case.getCurrentCase();\n+        Path tempOutputPath = Paths.get(currentCase.getTempDirectory(), ILEAPP, ILEAPP_FS + dataSource.getId());\n+        try {\n+            Files.createDirectories(tempOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error creating iLeapp output directory %s\", tempOutputPath.toString()), ex);\n+            return ProcessResult.ERROR;\n+        }\n+\n+        List<String> iLeappPathsToProcess = new ArrayList<>();\n+        ProcessBuilder iLeappCommand = buildiLeappListCommand(tempOutputPath);\n+        try {\n+            int result = ExecUtil.execute(iLeappCommand, new DataSourceIngestModuleProcessTerminator(context, true));\n+            if (result != 0) {\n+                logger.log(Level.SEVERE, String.format(\"Error when trying to execute iLeapp program getting file paths to search for result is %d\", result));\n+                return ProcessResult.ERROR;\n+            }\n+            iLeappPathsToProcess = loadIleappPathFile(tempOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error when trying to execute iLeapp program getting file paths to search\"), ex);\n+            return ProcessResult.ERROR;\n         }\n \n         statusHelper.progress(Bundle.ILeappAnalyzerIngestModule_starting_iLeapp(), 0);\n \n-        List<AbstractFile> iLeappFilesToProcess = findiLeappFilesToProcess(dataSource);\n+        List<AbstractFile> iLeappFilesToProcess = new ArrayList<>();\n \n-        statusHelper.switchToDeterminate(iLeappFilesToProcess.size());\n+        if (!(context.getDataSource() instanceof LocalFilesDataSource)) {\n+            extractFilesFromImage(dataSource, iLeappPathsToProcess, tempOutputPath);\n+            statusHelper.switchToDeterminate(iLeappFilesToProcess.size());\n+            processILeappFs(dataSource, currentCase, statusHelper, tempOutputPath.toString());\n+        } else {\n+            iLeappFilesToProcess = findiLeappFilesToProcess(dataSource);\n+            statusHelper.switchToDeterminate(iLeappFilesToProcess.size());\n+\n+            Integer filesProcessedCount = 0;\n+            for (AbstractFile iLeappFile : iLeappFilesToProcess) {\n+                processILeappFile(dataSource, currentCase, statusHelper, filesProcessedCount, iLeappFile);\n+                filesProcessedCount++;\n+            }\n+            // Process the logical image as a fs in iLeapp to make sure this is not a logical fs that was added\n+            extractFilesFromImage(dataSource, iLeappPathsToProcess, tempOutputPath);\n+            processILeappFs(dataSource, currentCase, statusHelper, tempOutputPath.toString());\n+        }\n \n-        Integer filesProcessedCount = 0;\n+        IngestMessage message = IngestMessage.createMessage(IngestMessage.MessageType.DATA,\n+                Bundle.ILeappAnalyzerIngestModule_has_run(),\n+                Bundle.ILeappAnalyzerIngestModule_completed());\n+        IngestServices.getInstance().postMessage(message);\n+        return ProcessResult.OK;\n+    }\n \n-        Case currentCase = Case.getCurrentCase();\n-        for (AbstractFile iLeappFile : iLeappFilesToProcess) {\n+    private void processILeappFile(Content dataSource, Case currentCase, DataSourceIngestModuleProgress statusHelper, int filesProcessedCount,\n+            AbstractFile iLeappFile) {\n+        String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n+        Path moduleOutputPath = Paths.get(currentCase.getModuleDirectory(), ILEAPP, currentTime);\n+        try {\n+            Files.createDirectories(moduleOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error creating iLeapp output directory %s\", moduleOutputPath.toString()), ex);\n+            return;\n+        }\n \n-            String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n-            Path moduleOutputPath = Paths.get(currentCase.getModuleDirectory(), ILEAPP, currentTime);\n-            try {\n-                Files.createDirectories(moduleOutputPath);\n-            } catch (IOException ex) {\n-                logger.log(Level.SEVERE, String.format(\"Error creating iLeapp output directory %s\", moduleOutputPath.toString()), ex);\n-                return ProcessResult.ERROR;\n+        statusHelper.progress(NbBundle.getMessage(this.getClass(), \"ILeappAnalyzerIngestModule.processing.file\", iLeappFile.getName()), filesProcessedCount);\n+        ProcessBuilder iLeappCommand = buildiLeappCommand(moduleOutputPath, iLeappFile.getLocalAbsPath(), iLeappFile.getNameExtension());\n+        try {\n+            int result = ExecUtil.execute(iLeappCommand, new DataSourceIngestModuleProcessTerminator(context, true));\n+            if (result != 0) {\n+                logger.log(Level.WARNING, String.format(\"Error when trying to execute iLeapp program getting file paths to search for result is %d\", result));\n+                return;\n             }\n \n-            statusHelper.progress(NbBundle.getMessage(this.getClass(), \"ILeappAnalyzerIngestModule.processing.file\", iLeappFile.getName()), filesProcessedCount);\n-            ProcessBuilder iLeappCommand = buildiLeappCommand(moduleOutputPath, iLeappFile.getLocalAbsPath(), iLeappFile.getNameExtension());\n-            try {\n-                int result = ExecUtil.execute(iLeappCommand, new DataSourceIngestModuleProcessTerminator(context, true));\n-                if (result != 0) {\n-                    // ignore if there is an error and continue to try and process the next file if there is one\n-                    continue;\n-                }\n+            addILeappReportToReports(moduleOutputPath, currentCase);\n \n-                addILeappReportToReports(moduleOutputPath, currentCase);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error when trying to execute iLeapp program against file %s\", iLeappFile.getLocalAbsPath()), ex);\n+            return;\n+        }\n \n-            } catch (IOException ex) {\n-                logger.log(Level.SEVERE, String.format(\"Error when trying to execute iLeapp program against file %s\", iLeappFile.getLocalAbsPath()), ex);\n-                return ProcessResult.ERROR;\n-            }\n+        if (context.dataSourceIngestIsCancelled()) {\n+            logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+            return;\n+        }\n \n-            if (context.dataSourceIngestIsCancelled()) {\n-                logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n-                return ProcessResult.OK;\n-            }\n+        ProcessResult fileProcessorResult = iLeappFileProcessor.processFiles(dataSource, moduleOutputPath, iLeappFile);\n+\n+        if (fileProcessorResult == ProcessResult.ERROR) {\n+            return;\n+        }\n+    }\n \n-            ProcessResult fileProcessorResult = iLeappFileProcessor.processFiles(dataSource, moduleOutputPath, iLeappFile);\n+    private void processILeappFs(Content dataSource, Case currentCase, DataSourceIngestModuleProgress statusHelper, String directoryToProcess) {", "originalCommit": "a1a20e6bc06c6c0a91fb1e502e2b66fb3b4d115c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODQ2NQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r526518465", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-11-19T00:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "eab03f4c7c2c32049984d7378ec541fc21070efe", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex bb437a20b8..abec90e6c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -172,6 +172,14 @@ public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress\n         return ProcessResult.OK;\n     }\n \n+    /**\n+     * Process each tar/zip file that is found in a logical image that contains xLeapp data\n+     * @param dataSource Datasource where the file has been found\n+     * @param currentCase current case\n+     * @param statusHelper Progress bar for messages to show user\n+     * @param filesProcessedCount count that is incremented for progress bar\n+     * @param iLeappFile abstract file that will be processed\n+     */\n     private void processILeappFile(Content dataSource, Case currentCase, DataSourceIngestModuleProgress statusHelper, int filesProcessedCount,\n             AbstractFile iLeappFile) {\n         String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODkxNg==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r518948916", "bodyText": "Method header.", "author": "kellykelly3", "createdAt": "2020-11-06T19:06:46Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -221,10 +298,21 @@ private ProcessBuilder buildiLeappCommand(Path moduleOutputPath, String sourceFi\n         return processBuilder;\n     }\n \n+    private ProcessBuilder buildiLeappListCommand(Path moduleOutputPath) {", "originalCommit": "a1a20e6bc06c6c0a91fb1e502e2b66fb3b4d115c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODUxNg==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r526518516", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-11-19T00:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "eab03f4c7c2c32049984d7378ec541fc21070efe", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex bb437a20b8..abec90e6c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -298,6 +320,11 @@ private ProcessBuilder buildiLeappCommand(Path moduleOutputPath, String sourceFi\n         return processBuilder;\n     }\n \n+    /**\n+     * Command to run xLeapp using the path option\n+     * @param moduleOutputPath path where the file paths output will reside\n+     * @return process to run\n+     */\n     private ProcessBuilder buildiLeappListCommand(Path moduleOutputPath) {\n \n         ProcessBuilder processBuilder = buildProcessWithRunAsInvoker(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0OTY5Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r518949692", "bodyText": "Add @param to method header.", "author": "kellykelly3", "createdAt": "2020-11-06T19:08:26Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -264,4 +357,109 @@ private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n \n     }\n \n+    /*\n+     * Reads the iLeapp paths file to get the paths that we want to extract\n+     *\n+     */\n+    private List<String> loadIleappPathFile(Path moduleOutputPath) throws FileNotFoundException, IOException {", "originalCommit": "a1a20e6bc06c6c0a91fb1e502e2b66fb3b4d115c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODU2NA==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r526518564", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-11-19T00:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0OTY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eab03f4c7c2c32049984d7378ec541fc21070efe", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex bb437a20b8..abec90e6c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -360,6 +387,7 @@ private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n     /*\n      * Reads the iLeapp paths file to get the paths that we want to extract\n      *\n+     * @param moduleOutputPath path where the file paths output will reside\n      */\n     private List<String> loadIleappPathFile(Path moduleOutputPath) throws FileNotFoundException, IOException {\n         List<String> iLeappPathsToProcess = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0OTg5OA==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r518949898", "bodyText": "method header.", "author": "kellykelly3", "createdAt": "2020-11-06T19:08:52Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -264,4 +357,109 @@ private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n \n     }\n \n+    /*\n+     * Reads the iLeapp paths file to get the paths that we want to extract\n+     *\n+     */\n+    private List<String> loadIleappPathFile(Path moduleOutputPath) throws FileNotFoundException, IOException {\n+        List<String> iLeappPathsToProcess = new ArrayList<>();\n+\n+        Path filePath = Paths.get(moduleOutputPath.toString(), ILEAPP_PATHS_FILE);\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                if (line.contains(\"path list generation\") || line.length() < 2) {\n+                    line = reader.readLine();\n+                    continue;\n+                }\n+                iLeappPathsToProcess.add(line.trim());\n+                line = reader.readLine();\n+            }\n+        }\n+\n+        return iLeappPathsToProcess;\n+    }\n+\n+    private void extractFilesFromImage(Content dataSource, List<String> iLeappPathsToProcess, Path moduleOutputPath) {", "originalCommit": "a1a20e6bc06c6c0a91fb1e502e2b66fb3b4d115c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODYyMg==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r526518622", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-11-19T00:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0OTg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "eab03f4c7c2c32049984d7378ec541fc21070efe", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex bb437a20b8..abec90e6c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -360,6 +387,7 @@ private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n     /*\n      * Reads the iLeapp paths file to get the paths that we want to extract\n      *\n+     * @param moduleOutputPath path where the file paths output will reside\n      */\n     private List<String> loadIleappPathFile(Path moduleOutputPath) throws FileNotFoundException, IOException {\n         List<String> iLeappPathsToProcess = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MDA1OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r518950059", "bodyText": "method header", "author": "kellykelly3", "createdAt": "2020-11-06T19:09:09Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -264,4 +357,109 @@ private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n \n     }\n \n+    /*\n+     * Reads the iLeapp paths file to get the paths that we want to extract\n+     *\n+     */\n+    private List<String> loadIleappPathFile(Path moduleOutputPath) throws FileNotFoundException, IOException {\n+        List<String> iLeappPathsToProcess = new ArrayList<>();\n+\n+        Path filePath = Paths.get(moduleOutputPath.toString(), ILEAPP_PATHS_FILE);\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                if (line.contains(\"path list generation\") || line.length() < 2) {\n+                    line = reader.readLine();\n+                    continue;\n+                }\n+                iLeappPathsToProcess.add(line.trim());\n+                line = reader.readLine();\n+            }\n+        }\n+\n+        return iLeappPathsToProcess;\n+    }\n+\n+    private void extractFilesFromImage(Content dataSource, List<String> iLeappPathsToProcess, Path moduleOutputPath) {\n+        FileManager fileManager = getCurrentCase().getServices().getFileManager();\n+\n+        for (String fullFilePath : iLeappPathsToProcess) {\n+\n+            if (context.dataSourceIngestIsCancelled()) {\n+                logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+                break;\n+            }\n+\n+            String ffp = fullFilePath.replaceAll(\"\\\\*\", \"%\");\n+            ffp = FilenameUtils.normalize(ffp, true);\n+            String fileName = FilenameUtils.getName(ffp);\n+            String filePath = FilenameUtils.getPath(ffp);\n+\n+            List<AbstractFile> iLeappFiles = new ArrayList<>();\n+            try {\n+                if (filePath.isEmpty()) {\n+                    iLeappFiles = fileManager.findFiles(dataSource, fileName); //NON-NLS                \n+                } else {\n+                    iLeappFiles = fileManager.findFiles(dataSource, fileName, filePath); //NON-NLS\n+                }\n+            } catch (TskCoreException ex) {\n+                logger.log(Level.WARNING, \"No files found to process\"); //NON-NLS\n+                return;\n+            }\n+\n+            for (AbstractFile iLeappFile : iLeappFiles) {\n+                Path parentPath = Paths.get(moduleOutputPath.toString(), iLeappFile.getParentPath());\n+                File fileParentPath = new File(parentPath.toString());\n+\n+                extractFileToOutput(dataSource, iLeappFile, fileParentPath, parentPath);\n+            }\n+        }\n+    }\n+\n+    private void extractFileToOutput(Content dataSource, AbstractFile iLeappFile, File fileParentPath, Path parentPath) {", "originalCommit": "a1a20e6bc06c6c0a91fb1e502e2b66fb3b4d115c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODcwMQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r526518701", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-11-19T00:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MDA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eab03f4c7c2c32049984d7378ec541fc21070efe", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex bb437a20b8..abec90e6c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -360,6 +387,7 @@ private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n     /*\n      * Reads the iLeapp paths file to get the paths that we want to extract\n      *\n+     * @param moduleOutputPath path where the file paths output will reside\n      */\n     private List<String> loadIleappPathFile(Path moduleOutputPath) throws FileNotFoundException, IOException {\n         List<String> iLeappPathsToProcess = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MDExNg==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r518950116", "bodyText": "method header.", "author": "kellykelly3", "createdAt": "2020-11-06T19:09:17Z", "path": "Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java", "diffHunk": "@@ -264,4 +357,109 @@ private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n \n     }\n \n+    /*\n+     * Reads the iLeapp paths file to get the paths that we want to extract\n+     *\n+     */\n+    private List<String> loadIleappPathFile(Path moduleOutputPath) throws FileNotFoundException, IOException {\n+        List<String> iLeappPathsToProcess = new ArrayList<>();\n+\n+        Path filePath = Paths.get(moduleOutputPath.toString(), ILEAPP_PATHS_FILE);\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                if (line.contains(\"path list generation\") || line.length() < 2) {\n+                    line = reader.readLine();\n+                    continue;\n+                }\n+                iLeappPathsToProcess.add(line.trim());\n+                line = reader.readLine();\n+            }\n+        }\n+\n+        return iLeappPathsToProcess;\n+    }\n+\n+    private void extractFilesFromImage(Content dataSource, List<String> iLeappPathsToProcess, Path moduleOutputPath) {\n+        FileManager fileManager = getCurrentCase().getServices().getFileManager();\n+\n+        for (String fullFilePath : iLeappPathsToProcess) {\n+\n+            if (context.dataSourceIngestIsCancelled()) {\n+                logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+                break;\n+            }\n+\n+            String ffp = fullFilePath.replaceAll(\"\\\\*\", \"%\");\n+            ffp = FilenameUtils.normalize(ffp, true);\n+            String fileName = FilenameUtils.getName(ffp);\n+            String filePath = FilenameUtils.getPath(ffp);\n+\n+            List<AbstractFile> iLeappFiles = new ArrayList<>();\n+            try {\n+                if (filePath.isEmpty()) {\n+                    iLeappFiles = fileManager.findFiles(dataSource, fileName); //NON-NLS                \n+                } else {\n+                    iLeappFiles = fileManager.findFiles(dataSource, fileName, filePath); //NON-NLS\n+                }\n+            } catch (TskCoreException ex) {\n+                logger.log(Level.WARNING, \"No files found to process\"); //NON-NLS\n+                return;\n+            }\n+\n+            for (AbstractFile iLeappFile : iLeappFiles) {\n+                Path parentPath = Paths.get(moduleOutputPath.toString(), iLeappFile.getParentPath());\n+                File fileParentPath = new File(parentPath.toString());\n+\n+                extractFileToOutput(dataSource, iLeappFile, fileParentPath, parentPath);\n+            }\n+        }\n+    }\n+\n+    private void extractFileToOutput(Content dataSource, AbstractFile iLeappFile, File fileParentPath, Path parentPath) {\n+        if (fileParentPath.exists()) {\n+                    if (!iLeappFile.isDir()) {\n+                        writeiLeappFile(dataSource, iLeappFile, fileParentPath.toString());\n+                    } else {\n+                        try {\n+                            Files.createDirectories(Paths.get(parentPath.toString(), iLeappFile.getName()));\n+                        } catch (IOException ex) {\n+                            logger.log(Level.INFO, String.format(\"Error creating iLeapp output directory %s\", parentPath.toString()), ex);\n+                        }\n+                    }\n+                } else {\n+                    try {\n+                        Files.createDirectories(parentPath);\n+                    } catch (IOException ex) {\n+                        logger.log(Level.INFO, String.format(\"Error creating iLeapp output directory %s\", parentPath.toString()), ex);\n+                    }\n+                    if (!iLeappFile.isDir()) {\n+                        writeiLeappFile(dataSource, iLeappFile, fileParentPath.toString());\n+                    } else {\n+                        try {\n+                            Files.createDirectories(Paths.get(parentPath.toString(), iLeappFile.getName()));\n+                        } catch (IOException ex) {\n+                            logger.log(Level.INFO, String.format(\"Error creating iLeapp output directory %s\", parentPath.toString()), ex);\n+                        }\n+                    }\n+                }\n+    }\n+    \n+    private void writeiLeappFile(Content dataSource, AbstractFile iLeappFile, String parentPath) {", "originalCommit": "a1a20e6bc06c6c0a91fb1e502e2b66fb3b4d115c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODczMw==", "url": "https://github.com/sleuthkit/autopsy/pull/6397#discussion_r526518733", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-11-19T00:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MDExNg=="}], "type": "inlineReview", "revised_code": {"commit": "eab03f4c7c2c32049984d7378ec541fc21070efe", "chunk": "diff --git a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\nindex bb437a20b8..abec90e6c0 100644\n--- a/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n+++ b/Core/src/org/sleuthkit/autopsy/modules/ileappanalyzer/ILeappAnalyzerIngestModule.java\n\n@@ -360,6 +387,7 @@ private void addILeappReportToReports(Path iLeappOutputDir, Case currentCase) {\n     /*\n      * Reads the iLeapp paths file to get the paths that we want to extract\n      *\n+     * @param moduleOutputPath path where the file paths output will reside\n      */\n     private List<String> loadIleappPathFile(Path moduleOutputPath) throws FileNotFoundException, IOException {\n         List<String> iLeappPathsToProcess = new ArrayList<>();\n"}}, {"oid": "eab03f4c7c2c32049984d7378ec541fc21070efe", "url": "https://github.com/sleuthkit/autopsy/commit/eab03f4c7c2c32049984d7378ec541fc21070efe", "message": "Update ILeappAnalyzerIngestModule.java\n\nAdd method headers", "committedDate": "2020-11-19T00:46:37Z", "type": "commit"}]}