{"pr_number": 2216, "pr_title": "Fix #2196: don't hang on repeatWhenEmpty + discard handler", "pr_createdAt": "2020-06-23T14:00:57Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2216", "timeline": [{"oid": "f6a5f5b920aec6a55b7887e252feb5aa112e4392", "url": "https://github.com/reactor/reactor-core/commit/f6a5f5b920aec6a55b7887e252feb5aa112e4392", "message": "Fix #2196: don't hang on repeatWhenEmpty + discard handler", "committedDate": "2020-06-23T15:35:12Z", "type": "commit"}, {"oid": "f6a5f5b920aec6a55b7887e252feb5aa112e4392", "url": "https://github.com/reactor/reactor-core/commit/f6a5f5b920aec6a55b7887e252feb5aa112e4392", "message": "Fix #2196: don't hang on repeatWhenEmpty + discard handler", "committedDate": "2020-06-23T15:35:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzMyMA==", "url": "https://github.com/reactor/reactor-core/pull/2216#discussion_r444343320", "bodyText": "@ericbottard  @simonbasle\nisn't it better to use Flux.error(Supplier) version?\nas it always creates Exception which captures stacktrace ?", "author": "robotmrv", "createdAt": "2020-06-23T16:11:57Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -3416,23 +3417,16 @@ public T block(Duration timeout) {\n \t * as long as the companion {@link Publisher} produces an onNext signal and the maximum number of repeats isn't exceeded.\n \t */\n \tpublic final Mono<T> repeatWhenEmpty(int maxRepeat, Function<Flux<Long>, ? extends Publisher<?>> repeatFactory) {\n-\t\treturn Mono.defer(() -> {\n-\t\t\tFlux<Long> iterations;\n-\n-\t\t\tif(maxRepeat == Integer.MAX_VALUE) {\n-\t\t\t\titerations = Flux.fromStream(LongStream.range(0, Long.MAX_VALUE).boxed());\n+\t\treturn Mono.defer(() -> this.repeatWhen(o -> {\n+\t\t\tif (maxRepeat == Integer.MAX_VALUE) {\n+\t\t\t\treturn repeatFactory.apply(o.index().map(Tuple2::getT1));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\titerations = Flux\n-\t\t\t\t\t.range(0, maxRepeat)\n-\t\t\t\t\t.map(Integer::longValue)\n-\t\t\t\t\t.concatWith(Flux.error(new IllegalStateException(\"Exceeded maximum number of repeats\"), true));\n+\t\t\t\treturn repeatFactory.apply(o.index().map(Tuple2::getT1)\n+\t\t\t\t\t\t.take(maxRepeat)\n+\t\t\t\t\t\t.concatWith(Flux.error(new IllegalStateException(\"Exceeded maximum number of repeats\"), true)));", "originalCommit": "f6a5f5b920aec6a55b7887e252feb5aa112e4392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNjIxMw==", "url": "https://github.com/reactor/reactor-core/pull/2216#discussion_r444716213", "bodyText": "this could be an improvement to the existing code yeah, nothing to do with the bug addressed by this PR though. do you want to submit a PR @robotmrv ?", "author": "simonbasle", "createdAt": "2020-06-24T08:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzODkzMA==", "url": "https://github.com/reactor/reactor-core/pull/2216#discussion_r444838930", "bodyText": "@simonbasle\ncreated PR #2221", "author": "robotmrv", "createdAt": "2020-06-24T11:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzMyMA=="}], "type": "inlineReview", "revised_code": null}]}