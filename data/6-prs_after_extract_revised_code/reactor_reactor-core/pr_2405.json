{"pr_number": 2405, "pr_title": "See #2377 Add `emitXxx(EmitFailureHandler)` Sinks API", "pr_createdAt": "2020-09-28T15:21:51Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2405", "timeline": [{"oid": "45830ec00d583d1c1e9ac9ab83736b7c233221fc", "url": "https://github.com/reactor/reactor-core/commit/45830ec00d583d1c1e9ac9ab83736b7c233221fc", "message": "[WIP] add `EmitStrategy`", "committedDate": "2020-09-28T15:19:36Z", "type": "commit"}, {"oid": "2575168e999419ac635b2eda6fc5fb78fd13ee23", "url": "https://github.com/reactor/reactor-core/commit/2575168e999419ac635b2eda6fc5fb78fd13ee23", "message": "cover One/Empty", "committedDate": "2020-09-28T16:03:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NDUxMA==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496554510", "bodyText": "I guess there's no real reason for VoidProcessor to implement One rather than Empty, other than the fact that it was originally based on existing MonoProcessor... Follow-up issue maybe?", "author": "simonbasle", "createdAt": "2020-09-29T08:59:46Z", "path": "reactor-core/src/main/java/reactor/core/publisher/VoidProcessor.java", "diffHunk": "@@ -16,7 +16,7 @@\n import reactor.util.annotation.Nullable;\n import reactor.util.context.Context;\n \n-final class VoidProcessor<T> extends MonoProcessor<T> implements Sinks.One<T> {\n+final class VoidProcessor<T> extends MonoProcessor<T> implements InternalOneSink<T> {", "originalCommit": "2575168e999419ac635b2eda6fc5fb78fd13ee23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2ODIyMA==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496568220", "bodyText": "#2408", "author": "bsideup", "createdAt": "2020-09-29T09:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NDUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "48d8d8df0c69121f9b7a727424667636f3cf34b0", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/VoidProcessor.java b/reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java\nsimilarity index 58%\nrename from reactor-core/src/main/java/reactor/core/publisher/VoidProcessor.java\nrename to reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java\nindex 9a5a2ab0e..1bdb80bdf 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/VoidProcessor.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java\n\n@@ -10,19 +24,17 @@ import java.util.stream.Stream;\n import org.reactivestreams.Subscription;\n \n import reactor.core.CoreSubscriber;\n-import reactor.core.Exceptions;\n import reactor.core.Scannable;\n import reactor.core.publisher.Sinks.Emission;\n-import reactor.util.annotation.Nullable;\n import reactor.util.context.Context;\n \n-final class VoidProcessor<T> extends MonoProcessor<T> implements InternalOneSink<T> {\n+final class VoidProcessor<T> extends MonoProcessor<T> implements InternalOneSink {\n \n \tvolatile VoidInner<T>[] subscribers;\n \n \t@SuppressWarnings(\"rawtypes\")\n-\tstatic final AtomicReferenceFieldUpdater<VoidProcessor, VoidInner[]> SUBSCRIBERS =\n-\t\t\tAtomicReferenceFieldUpdater.newUpdater(VoidProcessor.class, VoidInner[].class, \"subscribers\");\n+\tstatic final AtomicReferenceFieldUpdater<SinkEmptyMulticast, VoidInner[]> SUBSCRIBERS =\n+\t\t\tAtomicReferenceFieldUpdater.newUpdater(SinkEmptyMulticast.class, VoidInner[].class, \"subscribers\");\n \n \t@SuppressWarnings(\"rawtypes\")\n \tstatic final VoidInner[] EMPTY = new VoidInner[0];\n"}}, {"oid": "c208b50bd5ba3c475097ac90ec0a964802b15065", "url": "https://github.com/reactor/reactor-core/commit/c208b50bd5ba3c475097ac90ec0a964802b15065", "message": "remove the public modifier", "committedDate": "2020-09-29T09:29:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1ODE2Ng==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496558166", "bodyText": "shouldn't it use the strategy? (or at least a specific strategy)", "author": "simonbasle", "createdAt": "2020-09-29T09:05:15Z", "path": "reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import reactor.core.Exceptions;\n+\n+interface InternalManySink<T> extends Sinks.Many<T>, ContextHolder {\n+\n+\t@Override\n+\tdefault void emitNext(T value, Sinks.EmitStrategy strategy) {\n+\t\tfor (;;) {\n+\t\t\tSinks.Emission emission = tryEmitNext(value);\n+\t\t\tif (emission.hasSucceeded()) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tboolean shouldRetry = strategy.onEmissionFailure(emission);\n+\t\t\tif (shouldRetry) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tswitch (emission) {\n+\t\t\t\tcase FAIL_ZERO_SUBSCRIBER:\n+\t\t\t\t\t//we want to \"discard\" without rendering the sink terminated.\n+\t\t\t\t\t// effectively NO-OP cause there's no subscriber, so no context :(\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_OVERFLOW:\n+\t\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t\t//the emitError will onErrorDropped if already terminated\n+\t\t\t\t\temitError(Exceptions.failWithOverflow(\"Backpressure overflow during Sinks.Many#emitNext\"));", "originalCommit": "2575168e999419ac635b2eda6fc5fb78fd13ee23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3NjM1MQ==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496576351", "bodyText": "Good catch!", "author": "bsideup", "createdAt": "2020-09-29T09:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1ODE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c97d6a7ec1c1979373256c5e7bae56156c061dec", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java b/reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java\nindex e510c8294..9a7b21af2 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java\n\n@@ -17,6 +17,7 @@\n package reactor.core.publisher;\n \n import reactor.core.Exceptions;\n+import reactor.core.publisher.Sinks.EmissionException;\n \n interface InternalManySink<T> extends Sinks.Many<T>, ContextHolder {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1OTQ2OA==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496559468", "bodyText": "I suspect most users will be really surprised by the throw, considering that's something we go out of our way to avoid in reactor... so that possibility should at least be documented in the javadoc... since we have a EmissionException, I'd use that (so that it can be caught specifically).", "author": "simonbasle", "createdAt": "2020-09-29T09:07:15Z", "path": "reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import reactor.core.Exceptions;\n+\n+interface InternalManySink<T> extends Sinks.Many<T>, ContextHolder {\n+\n+\t@Override\n+\tdefault void emitNext(T value, Sinks.EmitStrategy strategy) {\n+\t\tfor (;;) {\n+\t\t\tSinks.Emission emission = tryEmitNext(value);\n+\t\t\tif (emission.hasSucceeded()) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tboolean shouldRetry = strategy.onEmissionFailure(emission);\n+\t\t\tif (shouldRetry) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tswitch (emission) {\n+\t\t\t\tcase FAIL_ZERO_SUBSCRIBER:\n+\t\t\t\t\t//we want to \"discard\" without rendering the sink terminated.\n+\t\t\t\t\t// effectively NO-OP cause there's no subscriber, so no context :(\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_OVERFLOW:\n+\t\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t\t//the emitError will onErrorDropped if already terminated\n+\t\t\t\t\temitError(Exceptions.failWithOverflow(\"Backpressure overflow during Sinks.Many#emitNext\"));\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_CANCELLED:\n+\t\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_TERMINATED:\n+\t\t\t\t\tOperators.onNextDropped(value, currentContext());\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_NON_SERIALIZED:\n+\t\t\t\t\tthrow new IllegalStateException(\"Non-serialized access\");", "originalCommit": "2575168e999419ac635b2eda6fc5fb78fd13ee23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c97d6a7ec1c1979373256c5e7bae56156c061dec", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java b/reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java\nindex e510c8294..9a7b21af2 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java\n\n@@ -17,6 +17,7 @@\n package reactor.core.publisher;\n \n import reactor.core.Exceptions;\n+import reactor.core.publisher.Sinks.EmissionException;\n \n interface InternalManySink<T> extends Sinks.Many<T>, ContextHolder {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3NDkwNA==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496574904", "bodyText": "one risk with the combination of default implementation at interface level + use of a wrapper for serialization of calls is that even if the underlying delegate has a specific emitNext implem, the wrapper will revert it to the default behavior.\nit leads to a situation where the emitXxx methods are part of the interface API but are not supposed to be overridden, right?\nat the same time, we cannot enforce an implementation through the use of an abstract class rather than an interface, because our concrete implementations already must extend Flux or Mono \ud83d\ude22\nthat's a drawback I was trying to solve by giving more responsabilities to the strategy, so that the custom behavior would live in the strategy rather than the sink (and thus wrappers could reproduce the default behavior). I don't see that sort of composability here.", "author": "simonbasle", "createdAt": "2020-09-29T09:30:35Z", "path": "reactor-core/src/main/java/reactor/core/publisher/SinksSpecs.java", "diffHunk": "@@ -29,7 +29,7 @@\n \n }\n \n-final class SerializedManySink<T> implements Many<T>, Scannable {\n+final class SerializedManySink<T> implements InternalManySink<T>, Scannable {", "originalCommit": "2575168e999419ac635b2eda6fc5fb78fd13ee23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4MDM5Ng==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496580396", "bodyText": "if the underlying delegate has a specific emitNext implem, the wrapper will revert it to the default behavior.\n\ndon't we assume that emitNext is an API on top of tryEmitNext? I think this is an important assumption that otherwise will make a lot of things harder (think changing from emitNext to tryEmitNext for better control and having to deal with a behaviour change)", "author": "bsideup", "createdAt": "2020-09-29T09:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3NDkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4OTI3Ng==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496589276", "bodyText": "that assumption cannot be enforce by the compiler, so I would at least document it (eg. for people tempted to implement their own Sinks.Many)", "author": "simonbasle", "createdAt": "2020-09-29T09:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3NDkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "60f04e155eec4c9f4061371cb4ee0c4d42017cb9", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/SinksSpecs.java b/reactor-core/src/main/java/reactor/core/publisher/SinksSpecs.java\nindex 434bc07ac..a9fa85dd0 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/SinksSpecs.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/SinksSpecs.java\n\n@@ -34,18 +35,16 @@ final class SerializedManySink<T> implements InternalManySink<T>, Scannable {\n \tfinal Many<T>       sink;\n \tfinal ContextHolder contextHolder;\n \n-\tvolatile     Throwable                                                  error;\n+\tvolatile int wip;\n \t@SuppressWarnings(\"rawtypes\")\n-\tstatic final AtomicReferenceFieldUpdater<SerializedManySink, Throwable> ERROR =\n-\t\t\tAtomicReferenceFieldUpdater.newUpdater(SerializedManySink.class, Throwable.class, \"error\");\n+\tstatic final AtomicIntegerFieldUpdater<SerializedManySink> WIP =\n+\t\t\tAtomicIntegerFieldUpdater.newUpdater(SerializedManySink.class, \"wip\");\n \n \tvolatile Thread lockedAt;\n \t@SuppressWarnings(\"rawtypes\")\n \tstatic final AtomicReferenceFieldUpdater<SerializedManySink, Thread> LOCKED_AT =\n \t\t\tAtomicReferenceFieldUpdater.newUpdater(SerializedManySink.class, Thread.class, \"lockedAt\");\n \n-\tvolatile boolean done;\n-\n \tSerializedManySink(Many<T> sink, ContextHolder contextHolder) {\n \t\tthis.sink = sink;\n \t\tthis.contextHolder = contextHolder;\n"}}, {"oid": "c97d6a7ec1c1979373256c5e7bae56156c061dec", "url": "https://github.com/reactor/reactor-core/commit/c97d6a7ec1c1979373256c5e7bae56156c061dec", "message": "Use `EmissionException`", "committedDate": "2020-09-29T09:36:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4MDYzMA==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496580630", "bodyText": "actually, the message is not a bad idea either. don't remember if the EmissionException has such a constructor but it would make sense to have one", "author": "simonbasle", "createdAt": "2020-09-29T09:39:04Z", "path": "reactor-core/src/main/java/reactor/core/publisher/InternalEmptySink.java", "diffHunk": "@@ -67,11 +69,9 @@ default void emitError(Throwable error, Sinks.EmitStrategy strategy) {\n \t\t\t\t\tOperators.onErrorDropped(error, currentContext());\n \t\t\t\t\treturn;\n \t\t\t\tcase FAIL_NON_SERIALIZED:\n-\t\t\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\t\t\"Spec. Rule 1.3 - onSubscribe, onNext, onError and onComplete signaled to a Subscriber MUST be signaled serially.\"\n-\t\t\t\t\t);\n+\t\t\t\t\tthrow new EmissionException(emission);", "originalCommit": "c97d6a7ec1c1979373256c5e7bae56156c061dec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0957b8655545e467de6d62843f7d1619d122b4bc", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/InternalEmptySink.java b/reactor-core/src/main/java/reactor/core/publisher/InternalEmptySink.java\nindex 35b77c02b..ec804bcdc 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/InternalEmptySink.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/InternalEmptySink.java\n\n@@ -69,9 +72,12 @@ interface InternalEmptySink<T> extends Sinks.Empty<T>, ContextHolder {\n \t\t\t\t\tOperators.onErrorDropped(error, currentContext());\n \t\t\t\t\treturn;\n \t\t\t\tcase FAIL_NON_SERIALIZED:\n-\t\t\t\t\tthrow new EmissionException(emission);\n+\t\t\t\t\tthrow new EmissionException(\n+\t\t\t\t\t\t\temission,\n+\t\t\t\t\t\t\t\"Spec. Rule 1.3 - onSubscribe, onNext, onError and onComplete signaled to a Subscriber MUST be signaled serially.\"\n+\t\t\t\t\t);\n \t\t\t\tdefault:\n-\t\t\t\t\tthrow new EmissionException(new IllegalStateException(\"Unknown state\"), emission);\n+\t\t\t\t\tthrow new EmissionException(emission, \"Unknown emission value\");\n \t\t\t}\n \t\t}\n \t}\n"}}, {"oid": "3a3b884b456aac0e00f1b7aa7b9cfcaecdb8535e", "url": "https://github.com/reactor/reactor-core/commit/3a3b884b456aac0e00f1b7aa7b9cfcaecdb8535e", "message": "Rename to `EmitFailureHandler`, add `SignalType`", "committedDate": "2020-09-29T15:49:25Z", "type": "commit"}, {"oid": "8bda61968e4d032f84b11a432425d44553939f88", "url": "https://github.com/reactor/reactor-core/commit/8bda61968e4d032f84b11a432425d44553939f88", "message": "javadoc, tests", "committedDate": "2020-09-30T15:20:22Z", "type": "commit"}, {"oid": "48d8d8df0c69121f9b7a727424667636f3cf34b0", "url": "https://github.com/reactor/reactor-core/commit/48d8d8df0c69121f9b7a727424667636f3cf34b0", "message": "Merge branch 'master' into emit_strategies\n\n# Conflicts:\n#\treactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java\n#\treactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "committedDate": "2020-09-30T15:50:50Z", "type": "commit"}, {"oid": "95157d8b1241f321d953ac2ce2e1bb6ae3a047d1", "url": "https://github.com/reactor/reactor-core/commit/95157d8b1241f321d953ac2ce2e1bb6ae3a047d1", "message": "merge with master", "committedDate": "2020-09-30T15:59:04Z", "type": "commit"}, {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc", "url": "https://github.com/reactor/reactor-core/commit/0957b8655545e467de6d62843f7d1619d122b4bc", "message": "add a custom message to `EmissionException`", "committedDate": "2020-10-01T12:34:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjk1Nw==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498912957", "bodyText": "we need either to make it consistent with the above constructor or open a separate PR to swap the parameters of the above constructor, wdyt? (the later would be breaking between RC1 and RC2, but probably a more meaningful order)", "author": "simonbasle", "createdAt": "2020-10-02T16:04:28Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -167,15 +167,19 @@ public void orThrowWithCause(Throwable cause) {\n \t\tfinal Emission reason;\n \n \t\tpublic EmissionException(Emission reason) {\n-\t\t\tsuper(\"Sink emission failed with \" + reason);\n-\t\t\tthis.reason = reason;\n+\t\t\tthis(reason, \"Sink emission failed with \" + reason);\n \t\t}\n \n \t\tpublic EmissionException(Throwable cause, Emission reason) {\n \t\t\tsuper(\"Sink emission failed with \" + reason, cause);\n \t\t\tthis.reason = reason;\n \t\t}\n \n+\t\tpublic EmissionException(Emission reason, String message) {", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3NzEwMQ==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r499577101", "bodyText": "will do in a follow up PR", "author": "simonbasle", "createdAt": "2020-10-05T12:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjk1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjUwOQ==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498916509", "bodyText": "I'd cover more ground here: give examples, state that this isn't a Predicate because side effects like waiting is allowed...", "author": "simonbasle", "createdAt": "2020-10-02T16:11:22Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -186,6 +190,28 @@ public Emission getReason() {\n \t\t}\n \t}\n \n+\t/**\n+\t * A handler for any non-successful emission result from operations\n+\t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n+\t * that allows retrying or failing the operation.", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 1b28990e0..e71b71995 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -194,12 +194,15 @@ public final class Sinks {\n \t * A handler for any non-successful emission result from operations\n \t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n \t * that allows retrying or failing the operation.\n+\t *\n+\t * @implNote It is expected that the handler may perform side effects (e.g. busy looping)\n+\t * and should not be considered a plain {@link java.util.function.Predicate}.\n \t */\n \tpublic interface EmitFailureHandler {\n \n \t\t/**\n-\t\t * A pre-made handler that will not attempt at retry any failure\n-\t\t * trigger the failure handling immediately.\n+\t\t * A pre-made handler that will not instruct to retry any failure\n+\t\t * and trigger the failure handling immediately.\n \t\t */\n \t\tEmitFailureHandler FAIL_FAST = (signalType, emission) -> false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzcxMA==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498917710", "bodyText": "change beginning of sentence: \"will not attempt at instruct to retry\", add , at the end of the line, replace trigger below with triggering.", "author": "simonbasle", "createdAt": "2020-10-02T16:13:48Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -186,6 +190,28 @@ public Emission getReason() {\n \t\t}\n \t}\n \n+\t/**\n+\t * A handler for any non-successful emission result from operations\n+\t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n+\t * that allows retrying or failing the operation.\n+\t */\n+\tpublic interface EmitFailureHandler {\n+\n+\t\t/**\n+\t\t * A pre-made handler that will not attempt at retry any failure", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 1b28990e0..e71b71995 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -194,12 +194,15 @@ public final class Sinks {\n \t * A handler for any non-successful emission result from operations\n \t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n \t * that allows retrying or failing the operation.\n+\t *\n+\t * @implNote It is expected that the handler may perform side effects (e.g. busy looping)\n+\t * and should not be considered a plain {@link java.util.function.Predicate}.\n \t */\n \tpublic interface EmitFailureHandler {\n \n \t\t/**\n-\t\t * A pre-made handler that will not attempt at retry any failure\n-\t\t * trigger the failure handling immediately.\n+\t\t * A pre-made handler that will not instruct to retry any failure\n+\t\t * and trigger the failure handling immediately.\n \t\t */\n \t\tEmitFailureHandler FAIL_FAST = (signalType, emission) -> false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODM5OQ==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918399", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitNext (see #2405 (comment))\nalso, big red warning that the method can throw an EmissionException (see #2405 (comment))", "author": "simonbasle", "createdAt": "2020-10-02T16:15:08Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -605,7 +631,11 @@ public Emission getReason() {\n \t\t *\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitNext(T t);\n+\t\tdefault void emitNext(T t) {\n+\t\t\temitNext(t, EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitNext(T t, EmitFailureHandler failureHandler);", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 1b28990e0..e71b71995 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -635,6 +638,30 @@ public final class Sinks {\n \t\t\temitNext(t, EmitFailureHandler.FAIL_FAST);\n \t\t}\n \n+\t\t/**\n+\t\t * Emit a non-null element, generating an {@link Subscriber#onNext(Object) onNext} signal,\n+\t\t * or notifies the downstream subscriber(s) of a failure to do so via {@link #emitError(Throwable,EmitFailureHandler)}\n+\t\t * (with an {@link Exceptions#isOverflow(Throwable) overflow exception}).\n+\t\t * <p>\n+\t\t * Generally, {@link #tryEmitNext(Object)} is preferable since it allows a custom handling\n+\t\t * of error cases, although this implies checking the returned {@link Emission} and correctly\n+\t\t * acting on it (see implementation notes).\n+\t\t * <p>\n+\t\t * Might throw an unchecked exception in case of a fatal error downstream which cannot\n+\t\t * be propagated to any asynchronous handler (aka a bubbling exception).\n+\t\t *\n+\t\t * @implNote Implementors should typically delegate to {@link #tryEmitNext(Object)} and act on\n+\t\t * failures: {@link Emission#FAIL_OVERFLOW} should lead to {@link Operators#onDiscard(Object, Context)} followed\n+\t\t * by {@link #emitError(Throwable)}. {@link Emission#FAIL_CANCELLED} should lead to {@link Operators#onDiscard(Object, Context)}.\n+\t\t * {@link Emission#FAIL_TERMINATED} should lead to {@link Operators#onNextDropped(Object, Context)}.\n+\t\t * @implNote the duality between this method and {@link #tryEmitNext(Object)} is expected.\n+\t\t *\n+\t\t * @param t the value to emit, not null\n+\t\t * @param failureHandler the failure handler that allows retrying failed {@link Emission}.\n+\t\t * @throws EmissionException on non-serialized access\n+\t\t * @see #tryEmitNext(Object)\n+\t\t * @see Subscriber#onNext(Object)\n+\t\t */\n \t\tvoid emitNext(T t, EmitFailureHandler failureHandler);\n \n \t\t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODQ1NA==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918454", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitComplete (see #2405 (comment))", "author": "simonbasle", "createdAt": "2020-10-02T16:15:14Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -622,7 +652,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitComplete()} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitComplete();\n+\t\tdefault void emitComplete() {\n+\t\t\temitComplete(EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitComplete(EmitFailureHandler failureHandler);", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 1b28990e0..e71b71995 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -656,6 +683,22 @@ public final class Sinks {\n \t\t\temitComplete(EmitFailureHandler.FAIL_FAST);\n \t\t}\n \n+\t\t/**\n+\t\t * Terminate the sequence successfully, generating an {@link Subscriber#onComplete() onComplete}\n+\t\t * signal.\n+\t\t * <p>\n+\t\t * Generally, {@link #tryEmitComplete()} is preferable, since it allows a custom handling\n+\t\t * of error cases.\n+\t\t *\n+\t\t * @implNote Implementors should typically delegate to {@link #tryEmitComplete()}. Failure {@link Emission}\n+\t\t * don't need any particular handling where emitComplete is concerned.\n+\t\t * @implNote the duality between this method and {@link #tryEmitComplete()} is expected.\n+\t\t *\n+\t\t * @param failureHandler the failure handler that allows retrying failed {@link Emission}.\n+\t\t * @throws EmissionException on non-serialized access\n+\t\t * @see #tryEmitComplete()\n+\t\t * @see Subscriber#onComplete()\n+\t\t */\n \t\tvoid emitComplete(EmitFailureHandler failureHandler);\n \n \t\t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODUxMQ==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918511", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitError (see #2405 (comment))", "author": "simonbasle", "createdAt": "2020-10-02T16:15:20Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -641,7 +675,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitError(Throwable)} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitError(Throwable error);\n+\t\tdefault void emitError(Throwable error) {\n+\t\t\temitError(error, EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitError(Throwable error, EmitFailureHandler failureHandler);", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 1b28990e0..e71b71995 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -679,6 +722,24 @@ public final class Sinks {\n \t\t\temitError(error, EmitFailureHandler.FAIL_FAST);\n \t\t}\n \n+\t\t/**\n+\t\t * Fail the sequence, generating an {@link Subscriber#onError(Throwable) onError}\n+\t\t * signal.\n+\t\t * <p>\n+\t\t * Generally, {@link #tryEmitError(Throwable)} is preferable since it allows a custom handling\n+\t\t * of error cases, although this implies checking the returned {@link Emission} and correctly\n+\t\t * acting on it (see implementation notes).\n+\t\t *\n+\t\t * @implNote Implementors should typically delegate to {@link #tryEmitError(Throwable)} and act on\n+\t\t * {@link Emission#FAIL_TERMINATED} by calling {@link Operators#onErrorDropped(Throwable, Context)}.\n+\t\t * @implNote the duality between this method and {@link #tryEmitError(Throwable)} is expected.\n+\t\t *\n+\t\t * @param error the exception to signal, not null\n+\t\t * @param failureHandler the failure handler that allows retrying failed {@link Emission}.\n+\t\t * @throws EmissionException on non-serialized access\n+\t\t * @see #tryEmitError(Throwable)\n+\t\t * @see Subscriber#onError(Throwable)\n+\t\t */\n \t\tvoid emitError(Throwable error, EmitFailureHandler failureHandler);\n \n \t\t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODYxNQ==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918615", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitEmpty (see #2405 (comment))", "author": "simonbasle", "createdAt": "2020-10-02T16:15:31Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -710,7 +748,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitEmpty()} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitEmpty();\n+\t\tdefault void emitEmpty() {\n+\t\t\temitEmpty(EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitEmpty(EmitFailureHandler failureHandler);", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 1b28990e0..e71b71995 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -752,6 +813,22 @@ public final class Sinks {\n \t\t\temitEmpty(EmitFailureHandler.FAIL_FAST);\n \t\t}\n \n+\t\t/**\n+\t\t * Terminate the sequence successfully, generating an {@link Subscriber#onComplete() onComplete}\n+\t\t * signal.\n+\t\t * <p>\n+\t\t * Generally, {@link #tryEmitEmpty()} is preferable, since it allows a custom handling\n+\t\t * of error cases.\n+\t\t *\n+\t\t * @implNote Implementors should typically delegate to {@link #tryEmitEmpty()}. Failure {@link Emission}\n+\t\t * don't need any particular handling where emitEmpty is concerned.\n+\t\t * @implNote the duality between this method and {@link #tryEmitEmpty()} is expected.\n+\t\t *\n+\t\t * @param failureHandler the failure handler that allows retrying failed {@link Emission}.\n+\t\t * @throws EmissionException on non-serialized access\n+\t\t * @see #tryEmitEmpty()\n+\t\t * @see Subscriber#onComplete()\n+\t\t */\n \t\tvoid emitEmpty(EmitFailureHandler failureHandler);\n \n \t\t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODY2Mw==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918663", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitError (see #2405 (comment))", "author": "simonbasle", "createdAt": "2020-10-02T16:15:35Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -729,7 +771,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitError(Throwable)} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitError(Throwable error);\n+\t\tdefault void emitError(Throwable error) {\n+\t\t\temitError(error, EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitError(Throwable error, EmitFailureHandler failureHandler);", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 1b28990e0..e71b71995 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -775,6 +852,24 @@ public final class Sinks {\n \t\t\temitError(error, EmitFailureHandler.FAIL_FAST);\n \t\t}\n \n+\t\t/**\n+\t\t * Fail the sequence, generating an {@link Subscriber#onError(Throwable) onError}\n+\t\t * signal.\n+\t\t * <p>\n+\t\t * Generally, {@link #tryEmitError(Throwable)} is preferable since it allows a custom handling\n+\t\t * of error cases, although this implies checking the returned {@link Emission} and correctly\n+\t\t * acting on it (see implementation notes).\n+\t\t *\n+\t\t * @implNote Implementors should typically delegate to {@link #tryEmitError(Throwable)} and act on\n+\t\t * {@link Emission#FAIL_TERMINATED} by calling {@link Operators#onErrorDropped(Throwable, Context)}.\n+\t\t * @implNote the duality between this method and {@link #tryEmitError(Throwable)} is expected.\n+\t\t *\n+\t\t * @param error the exception to signal, not null\n+\t\t * @param failureHandler the failure handler that allows retrying failed {@link Emission}.\n+\t\t * @throws EmissionException on non-serialized access\n+\t\t * @see #tryEmitError(Throwable)\n+\t\t * @see Subscriber#onError(Throwable)\n+\t\t */\n \t\tvoid emitError(Throwable error, EmitFailureHandler failureHandler);\n \n \t\t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODcyMQ==", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918721", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitValue (see #2405 (comment))\nalso, big red warning that the method can throw an EmissionException (see #2405 (comment))", "author": "simonbasle", "createdAt": "2020-10-02T16:15:40Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -802,7 +848,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitValue(Object)} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitValue(@Nullable T value);\n+\t\tdefault void emitValue(@Nullable T value) {\n+\t\t\temitValue(value, EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitValue(@Nullable T value, EmitFailureHandler failureHandler);", "originalCommit": "0957b8655545e467de6d62843f7d1619d122b4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 1b28990e0..e71b71995 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -852,6 +947,32 @@ public final class Sinks {\n \t\t\temitValue(value, EmitFailureHandler.FAIL_FAST);\n \t\t}\n \n+\t\t/**\n+\t\t * Emit a non-null element, generating an {@link Subscriber#onNext(Object) onNext} signal\n+\t\t * immediately followed by an {@link Subscriber#onComplete() onComplete} signal,\n+\t\t * or notifies the downstream subscriber(s) of a failure to do so via {@link #emitError(Throwable)}\n+\t\t * (with an {@link Exceptions#isOverflow(Throwable) overflow exception}).\n+\t\t * <p>\n+\t\t * Generally, {@link #tryEmitValue(Object)} is preferable since it allows a custom handling\n+\t\t * of error cases, although this implies checking the returned {@link Emission} and correctly\n+\t\t * acting on it (see implementation notes).\n+\t\t * <p>\n+\t\t * Might throw an unchecked exception in case of a fatal error downstream which cannot\n+\t\t * be propagated to any asynchronous handler (aka a bubbling exception).\n+\t\t *\n+\t\t * @implNote Implementors should typically delegate to {@link #tryEmitValue (Object)} and act on\n+\t\t * failures: {@link Emission#FAIL_OVERFLOW} should lead to {@link Operators#onDiscard(Object, Context)} followed\n+\t\t * by {@link #emitError(Throwable)}. {@link Emission#FAIL_CANCELLED} should lead to {@link Operators#onDiscard(Object, Context)}.\n+\t\t * {@link Emission#FAIL_TERMINATED} should lead to {@link Operators#onNextDropped(Object, Context)}.\n+\t\t * @implNote the duality between this method and {@link #tryEmitValue(Object)} is expected.\n+\t\t *\n+\t\t * @param value the value to emit and complete with, or {@code null} to only trigger an onComplete\n+\t\t * @param failureHandler the failure handler that allows retrying failed {@link Emission}.\n+\t\t * @throws EmissionException on non-serialized access\n+\t\t * @see #tryEmitValue(Object)\n+\t\t * @see Subscriber#onNext(Object)\n+\t\t * @see Subscriber#onComplete()\n+\t\t */\n \t\tvoid emitValue(@Nullable T value, EmitFailureHandler failureHandler);\n \n \t}\n"}}, {"oid": "60f04e155eec4c9f4061371cb4ee0c4d42017cb9", "url": "https://github.com/reactor/reactor-core/commit/60f04e155eec4c9f4061371cb4ee0c4d42017cb9", "message": "Merge branch 'master' into emit_strategies\n\n# Conflicts:\n#\treactor-core/src/jcstress/java/reactor/core/publisher/SerializedManySinkStressTest.java", "committedDate": "2020-10-05T11:06:45Z", "type": "commit"}, {"oid": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "url": "https://github.com/reactor/reactor-core/commit/853cf7b0b664f64290d889d44b04e65ba6bfe45e", "message": "Add javadoc", "committedDate": "2020-10-05T12:50:36Z", "type": "commit"}]}