{"pr_number": 2327, "pr_title": "fix #2319 Split emitXxx/tryEmitXxx", "pr_createdAt": "2020-08-13T16:46:25Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2327", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDUxNg==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470174516", "bodyText": "IMO this and many other usages should use the regular emitNext that would fail on overflow. Otherwise we're introducing the same problem as in M2", "author": "bsideup", "createdAt": "2020-08-13T18:52:35Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "diffHunk": "@@ -47,17 +47,17 @@ public Context currentContext() {\n \n \t@Override\n \tpublic void onComplete() {\n-\t\tsink.emitComplete();\n+\t\tsink.tryEmitComplete();\n \t}\n \n \t@Override\n \tpublic void onError(Throwable t) {\n-\t\tsink.emitError(t);\n+\t\tsink.tryEmitError(t);\n \t}\n \n \t@Override\n \tpublic void onNext(IN in) {\n-\t\tsink.emitNext(in);\n+\t\tsink.tryEmitNext(in);", "originalCommit": "da6855525b2760928ea56c9b51eec2f09908b035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3Mjg5OA==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470472898", "bodyText": "good catch, indeed and same for DelegateSinkOneMonoProcessor", "author": "simonbasle", "createdAt": "2020-08-14T08:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3NDg2NQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470474865", "bodyText": "this will actually greatly simplify the PR since most uses in tests will be back to calling emitXxx", "author": "simonbasle", "createdAt": "2020-08-14T08:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NTczNw==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470545737", "bodyText": "I've rebased so that a single commit has the introduction of tryEmit BUT correct use of emit in test classes", "author": "simonbasle", "createdAt": "2020-08-14T10:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java b/reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java\nindex ca7d3c48c..e314eaa2d 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java\n\n@@ -47,17 +47,17 @@ final class DelegateSinkFluxProcessor<IN> extends FluxProcessor<IN, IN> {\n \n \t@Override\n \tpublic void onComplete() {\n-\t\tsink.tryEmitComplete();\n+\t\tsink.emitComplete();\n \t}\n \n \t@Override\n \tpublic void onError(Throwable t) {\n-\t\tsink.tryEmitError(t);\n+\t\tsink.emitError(t);\n \t}\n \n \t@Override\n \tpublic void onNext(IN in) {\n-\t\tsink.tryEmitNext(in);\n+\t\tsink.emitNext(in);\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5MDc2MQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470490761", "bodyText": "nit: could use a switch for readability and performance", "author": "bsideup", "createdAt": "2020-08-14T08:39:42Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -166,13 +189,33 @@ public Emission emitError(Throwable t) {\n \t}\n \n \t@Override\n-\tpublic Emission emitNext(T t) {\n+\tpublic void emitNext(T value) {\n+\t\tEmission result = tryEmitNext(value);\n+\t\tif (result == Emission.FAIL_OVERFLOW) {", "originalCommit": "da6855525b2760928ea56c9b51eec2f09908b035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NTc5NA==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470545794", "bodyText": "done", "author": "simonbasle", "createdAt": "2020-08-14T10:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5MDc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "47ac116e21849dedb9a61bbe5b5e38787e83bb8a", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java b/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java\nindex 9cfa6ae7d..4479342d7 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java\n\n@@ -190,17 +190,20 @@ public final class DirectProcessor<T> extends FluxProcessor<T, T> implements Sin\n \n \t@Override\n \tpublic void emitNext(T value) {\n-\t\tEmission result = tryEmitNext(value);\n-\t\tif (result == Emission.FAIL_OVERFLOW) {\n-\t\t\tOperators.onDiscard(value, currentContext());\n-\t\t\t//the emitError will onErrorDropped if already terminated\n-\t\t\temitError(Exceptions.failWithOverflow(\"Backpressure overflow during Sinks.Many#emitNext\"));\n-\t\t}\n-\t\telse if (result == Emission.FAIL_CANCELLED) {\n-\t\t\tOperators.onDiscard(value, currentContext());\n-\t\t}\n-\t\telse if (result == Emission.FAIL_TERMINATED) {\n-\t\t\tOperators.onNextDroppedMulticast(value, subscribers);\n+\t\tswitch(tryEmitNext(value)) {\n+\t\t\tcase FAIL_OVERFLOW:\n+\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t//the emitError will onErrorDropped if already terminated\n+\t\t\t\temitError(Exceptions.failWithOverflow(\"Backpressure overflow during Sinks.Many#emitNext\"));\n+\t\t\t\tbreak;\n+\t\t\tcase FAIL_CANCELLED:\n+\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\tbreak;\n+\t\t\tcase FAIL_TERMINATED:\n+\t\t\t\tOperators.onNextDroppedMulticast(value, subscribers);\n+\t\t\t\tbreak;\n+\t\t\tcase OK:\n+\t\t\t\tbreak;\n \t\t}\n \t}\n \n"}}, {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff", "url": "https://github.com/reactor/reactor-core/commit/80d0e985e01f009f73d9e7dafa1e3e93840a7dff", "message": "replace most usage of tryEmitXxx with emitXxx since these don't check Emission", "committedDate": "2020-08-14T09:06:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470505517", "bodyText": "while migrating some of r-kafka code, I had the following in mind:\nwhat if r-core adds more \"negative\" Emission cases but I only handle one.\nHence the idea:\nAdd Emission#isSuccessful, so that it can be checked in places like this one.\nWDYT?", "author": "bsideup", "createdAt": "2020-08-14T09:08:22Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "originalCommit": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTU0OQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470511549", "bodyText": "there's hasEmitted() and hasFailed(). Maybe I should rename hasEmitted() to hasSucceeded()? not sure what you mean by \"checked in places like this one\" though... are you suggesting this piece of code should check something more?", "author": "simonbasle", "createdAt": "2020-08-14T09:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxNTMxMg==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470515312", "bodyText": "Ah, cool, so we can use hasEmitted() here (although renaming it to hasSucceeded() would be nice).\nBTW isn't hasFailed() == !hasEmitted()? Why both?\nre \"can be checked in places like this one\":\nsorry, I meant this method is a good example where such boolean could be handy, and there are more methods like this one (in this PR but also in r-kafka, for example), hence \"the flag that can be checked in places like this one\"", "author": "bsideup", "createdAt": "2020-08-14T09:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzNzgwMQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470537801", "bodyText": "yeah, I think it was just added because it reads better. And most likely, hasFailed() is going to be the more interesting one to check...\nI've opened a separate issue to track these", "author": "simonbasle", "createdAt": "2020-08-14T10:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NjA5Mw==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470546093", "bodyText": "added a commit for #2329 in the latest rebase (with the orThrow split out of the original tryEmit commit)", "author": "simonbasle", "createdAt": "2020-08-14T10:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2ODIyMg==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470568222", "bodyText": "Either I don't see it or don't get it :D\nAnyways, shouldn't it be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (result == Emission.FAIL_TERMINATED) {\n          \n          \n            \n            \t\tif (result.hasFailed()) {\n          \n      \n    \n    \n  \n\n?", "author": "bsideup", "createdAt": "2020-08-14T11:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwNTMzMQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470605331", "bodyText": "no. for an emitError, cancelled or overflown states don't warrant specific action, whereas an attempt at terminating twice is illegal and usually notified to the onErrorDropped", "author": "simonbasle", "createdAt": "2020-08-14T12:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwOTgxNQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470609815", "bodyText": "ok \ud83d\udc4d", "author": "bsideup", "createdAt": "2020-08-14T13:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java b/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java\nindex 9cfa6ae7d..69d2fbd34 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java\n\n@@ -158,26 +147,14 @@ public final class DirectProcessor<T> extends FluxProcessor<T, T> implements Sin\n \t}\n \n \t@Override\n-\tpublic void onError(Throwable throwable) {\n-\t\temitError(throwable);\n-\t}\n-\n-\t@Override\n-\tpublic void emitError(Throwable error) {\n-\t\tEmission result = tryEmitError(error);\n-\t\tif (result == Emission.FAIL_TERMINATED) {\n-\t\t\tOperators.onErrorDroppedMulticast(error, subscribers);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Emission tryEmitError(Throwable t) {\n+\tpublic Emission emitError(Throwable t) {\n \t\tObjects.requireNonNull(t, \"t\");\n \n \t\t@SuppressWarnings(\"unchecked\")\n \t\tDirectInner<T>[] inners = SUBSCRIBERS.getAndSet(this, TERMINATED);\n \n \t\tif (inners == TERMINATED) {\n+\t\t\tOperators.onErrorDroppedMulticast(t, subscribers);\n \t\t\treturn Emission.FAIL_TERMINATED;\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNjc0Ng==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470506746", "bodyText": "idea:\n@SuppressWarnings(\"unused\")\nEmission emission = tryEmitEmpty();", "author": "bsideup", "createdAt": "2020-08-14T09:10:50Z", "path": "reactor-core/src/main/java/reactor/core/publisher/NextProcessor.java", "diffHunk": "@@ -114,17 +114,41 @@ public O block(@Nullable Duration timeout) {\n \t}\n \n \t@Override\n-\tpublic Emission emitEmpty() {\n-\t\treturn emitValue(null);\n+\tpublic final void onComplete() {\n+\t\t//no particular error condition handling for onComplete", "originalCommit": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/NextProcessor.java b/reactor-core/src/main/java/reactor/core/publisher/NextProcessor.java\nindex 5702228be..2a49242c8 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/NextProcessor.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/NextProcessor.java\n\n@@ -114,41 +114,17 @@ class NextProcessor<O> extends MonoProcessor<O> implements Sinks.One<O> {\n \t}\n \n \t@Override\n-\tpublic final void onComplete() {\n-\t\t//no particular error condition handling for onComplete\n-\t\ttryEmitEmpty();\n-\t}\n-\n-\t@Override\n-\tpublic void emitEmpty() {\n-\t\t//no particular error condition handling for onComplete\n-\t\ttryEmitEmpty();\n-\t}\n-\n-\t@Override\n-\tpublic Emission tryEmitEmpty() {\n-\t\treturn tryEmitValue(null);\n-\t}\n-\n-\t@Override\n-\tpublic final void onError(Throwable cause) {\n-\t\temitError(cause);\n-\t}\n-\n-\t@Override\n-\tpublic void emitError(Throwable error) {\n-\t\tEmission result = tryEmitError(error);\n-\t\tif (result == Emission.FAIL_TERMINATED) {\n-\t\t\tOperators.onErrorDroppedMulticast(error, subscribers);\n-\t\t}\n+\tpublic Emission emitEmpty() {\n+\t\treturn emitValue(null);\n \t}\n \n \t@Override\n \t@SuppressWarnings(\"unchecked\")\n-\tpublic Emission tryEmitError(Throwable cause) {\n+\tpublic Emission emitError(Throwable cause) {\n \t\tObjects.requireNonNull(cause, \"onError cannot be null\");\n \n \t\tif (UPSTREAM.getAndSet(this, Operators.cancelledSubscription()) == Operators.cancelledSubscription()) {\n+\t\t\tOperators.onErrorDroppedMulticast(cause, subscribers);\n \t\t\treturn Emission.FAIL_TERMINATED;\n \t\t}\n \n"}}, {"oid": "47ac116e21849dedb9a61bbe5b5e38787e83bb8a", "url": "https://github.com/reactor/reactor-core/commit/47ac116e21849dedb9a61bbe5b5e38787e83bb8a", "message": "fix #2329 Improve Emission API: hasSucceeded, orThrow", "committedDate": "2020-08-14T10:30:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNDgzMg==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470614832", "bodyText": "this one is indeed inconsistent with other usages. tryEmitNext should probably not emit any error here", "author": "bsideup", "createdAt": "2020-08-14T13:12:26Z", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java", "diffHunk": "@@ -280,8 +328,7 @@ public Emission emitNext(T t) {\n \t\t\t\t\tex.initCause(e);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tOperators.onDiscard(t, ctx);\n-\t\t\tonError(ex);\n+\t\t\tonError(ex); //FIXME should this really error ??", "originalCommit": "6add6403b36a28e56d71b328d8aaf86ba984e7ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNjM5OQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470616399", "bodyText": "I opened a separate issue, SerializedManySink is also guilty of a similar thing => #2330", "author": "simonbasle", "createdAt": "2020-08-14T13:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNDgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java b/reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java\nindex 0186d7c9e..d2dc52020 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java\n\n@@ -328,7 +280,8 @@ public final class UnicastProcessor<T> extends FluxProcessor<T, T>\n \t\t\t\t\tex.initCause(e);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tonError(ex); //FIXME should this really error ??\n+\t\t\tOperators.onDiscard(t, ctx);\n+\t\t\tonError(ex);\n \t\t\treturn Emission.FAIL_OVERFLOW;\n \t\t}\n \t\tdrain(t);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTE0OQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615149", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\twhile (s.tryEmitNext(i).hasFailed() ) {\n          \n          \n            \n            \t\t\twhile (s.tryEmitNext(i).hasFailed()) {", "author": "bsideup", "createdAt": "2020-08-14T13:13:04Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "diffHunk": "@@ -1186,8 +1184,15 @@ public void mapNotifiesOnce() throws InterruptedException {\n \t\t\t                            }\n \t\t                            }));\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 0; i < COUNT; i++) {\n-\t\t\twhile (s.emitNext(i).hasFailed() );\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile (s.tryEmitNext(i).hasFailed() ) {", "originalCommit": "6add6403b36a28e56d71b328d8aaf86ba984e7ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMDk5NA==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470700994", "bodyText": "the extra space appears in several other places, I'll fix it", "author": "simonbasle", "createdAt": "2020-08-14T15:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java b/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\nindex 4159d3ff6..0d2f87274 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\n\n@@ -1184,15 +1186,8 @@ public class FluxPublishOnTest extends FluxOperatorTest<String, String> {\n \t\t\t                            }\n \t\t                            }));\n \n-\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 0; i < COUNT; i++) {\n-\t\t\tlong busyLoops = 0;\n-\t\t\twhile (s.tryEmitNext(i).hasFailed() ) {\n-\t\t\t\tbusyLoops++;\n-\t\t\t\tif (busyLoops % 5000 == 0 && System.currentTimeMillis() - start >= 10_0000) {\n-\t\t\t\t\tthrow new RuntimeException(\"Busy loop timed out\");\n-\t\t\t\t}\n-\t\t\t}\n+\t\t\twhile (s.emitNext(i).hasFailed() );\n \t\t}\n \n \t\tinternalLatch.await(5, TimeUnit.SECONDS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTU1NQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615555", "bodyText": "nit: this whole thing can be replaced with Awaitility, I think", "author": "bsideup", "createdAt": "2020-08-14T13:13:47Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "diffHunk": "@@ -1186,8 +1184,15 @@ public void mapNotifiesOnce() throws InterruptedException {\n \t\t\t                            }\n \t\t                            }));\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 0; i < COUNT; i++) {\n-\t\t\twhile (s.emitNext(i).hasFailed() );\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile (s.tryEmitNext(i).hasFailed() ) {\n+\t\t\t\tbusyLoops++;\n+\t\t\t\tif (busyLoops % 5000 == 0 && System.currentTimeMillis() - start >= 10_0000) {", "originalCommit": "6add6403b36a28e56d71b328d8aaf86ba984e7ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMDgwMQ==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470700801", "bodyText": "I tried, but it makes the test longer and the tuning of poll interval is complicated, I won't have time to fine tune it.", "author": "simonbasle", "createdAt": "2020-08-14T15:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java b/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\nindex 4159d3ff6..0d2f87274 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\n\n@@ -1184,15 +1186,8 @@ public class FluxPublishOnTest extends FluxOperatorTest<String, String> {\n \t\t\t                            }\n \t\t                            }));\n \n-\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 0; i < COUNT; i++) {\n-\t\t\tlong busyLoops = 0;\n-\t\t\twhile (s.tryEmitNext(i).hasFailed() ) {\n-\t\t\t\tbusyLoops++;\n-\t\t\t\tif (busyLoops % 5000 == 0 && System.currentTimeMillis() - start >= 10_0000) {\n-\t\t\t\t\tthrow new RuntimeException(\"Busy loop timed out\");\n-\t\t\t\t}\n-\t\t\t}\n+\t\t\twhile (s.emitNext(i).hasFailed() );\n \t\t}\n \n \t\tinternalLatch.await(5, TimeUnit.SECONDS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTY0OA==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615648", "bodyText": "ditto", "author": "bsideup", "createdAt": "2020-08-14T13:13:56Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "diffHunk": "@@ -1226,8 +1231,15 @@ public void mapManyFlushesAllValuesThoroughly() throws InterruptedException {\n \t\t\tlatch.countDown();\n \t\t});\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 1; i <= items; i++) {\n-\t\t\twhile (s.emitNext(String.valueOf(i)).hasFailed() );\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile (s.tryEmitNext(String.valueOf(i)).hasFailed() ) {", "originalCommit": "6add6403b36a28e56d71b328d8aaf86ba984e7ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java b/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\nindex 4159d3ff6..0d2f87274 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java\n\n@@ -1231,15 +1226,8 @@ public class FluxPublishOnTest extends FluxOperatorTest<String, String> {\n \t\t\tlatch.countDown();\n \t\t});\n \n-\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 1; i <= items; i++) {\n-\t\t\tlong busyLoops = 0;\n-\t\t\twhile (s.tryEmitNext(String.valueOf(i)).hasFailed() ) {\n-\t\t\t\tbusyLoops++;\n-\t\t\t\tif (busyLoops % 5000 == 0 && System.currentTimeMillis() - start >= 10_0000) {\n-\t\t\t\t\tthrow new RuntimeException(\"Busy loop timed out\");\n-\t\t\t\t}\n-\t\t\t}\n+\t\t\twhile (s.emitNext(String.valueOf(i)).hasFailed() );\n \t\t}\n \t\tlatch.await(15, TimeUnit.SECONDS);\n \t\tassertThat(latch.getCount())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTc3NA==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615774", "bodyText": "ditto", "author": "bsideup", "createdAt": "2020-08-14T13:14:10Z", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxSpecTests.java", "diffHunk": "@@ -1103,8 +1103,15 @@ public void collectFromMultipleThread1() throws Exception {\n \t\t\t\t\tlatch.countDown();\n \t\t\t\t});\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tFlux.range(1, 1000).subscribe(data -> {\n-\t\t\twhile(head.emitNext(data).hasFailed());\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile(head.tryEmitNext(data).hasFailed()) {", "originalCommit": "6add6403b36a28e56d71b328d8aaf86ba984e7ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxSpecTests.java b/reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxSpecTests.java\nindex cd7c3a2cd..d88eb4f6d 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxSpecTests.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxSpecTests.java\n\n@@ -1103,15 +1103,8 @@ public class FluxSpecTests {\n \t\t\t\t\tlatch.countDown();\n \t\t\t\t});\n \n-\t\tfinal long start = System.currentTimeMillis();\n \t\tFlux.range(1, 1000).subscribe(data -> {\n-\t\t\tlong busyLoops = 0;\n-\t\t\twhile(head.tryEmitNext(data).hasFailed()) {\n-\t\t\t\tbusyLoops++;\n-\t\t\t\tif (busyLoops % 5000 == 0 && System.currentTimeMillis() - start >= 10_0000) {\n-\t\t\t\t\tthrow new RuntimeException(\"Busy loop timed out\");\n-\t\t\t\t}\n-\t\t\t}\n+\t\t\twhile(head.emitNext(data).hasFailed());\n \t\t}, head::emitError, head::emitComplete);\n \t\tlatch.await();\n \t\tAssert.assertTrue(sum.get() == length);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTg5OA==", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615898", "bodyText": "ditto", "author": "bsideup", "createdAt": "2020-08-14T13:14:26Z", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "diffHunk": "@@ -589,7 +589,13 @@ private void parallelBufferedTimeoutTest(int iterations) throws InterruptedExcep\n \t\tlong start = System.currentTimeMillis();\n \n \t\tfor (String i : data) {\n-\t\t\twhile (deferred.emitNext(i).hasFailed() );\n+\t\t\tlong busyLoops = 0;", "originalCommit": "6add6403b36a28e56d71b328d8aaf86ba984e7ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java b/reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java\nindex f9ffd88ef..5fceab3b5 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java\n\n@@ -589,13 +589,7 @@ public class FluxTests extends AbstractReactorTest {\n \t\tlong start = System.currentTimeMillis();\n \n \t\tfor (String i : data) {\n-\t\t\tlong busyLoops = 0;\n-\t\t\twhile (deferred.tryEmitNext(i).hasFailed() ) {\n-\t\t\t\tbusyLoops++;\n-\t\t\t\tif (busyLoops % 5000 == 0 && System.currentTimeMillis() - start >= 10_0000) {\n-\t\t\t\t\tthrow new RuntimeException(\"Busy loop timed out\");\n-\t\t\t\t}\n-\t\t\t}\n+\t\t\twhile (deferred.emitNext(i).hasFailed() );\n \t\t}\n \t\tif (!latch.await(10, TimeUnit.SECONDS)) {\n \t\t\tthrow new RuntimeException(latch.getCount()+ \" \");\n"}}, {"oid": "45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "url": "https://github.com/reactor/reactor-core/commit/45ef8bb534fdab2f8ca6910947c0ad6b6db8da0c", "message": "[Polish] Add inners[] param to Operators dropMulticast private methods\n\nReviewed-in: #2327", "committedDate": "2020-08-14T16:21:42Z", "type": "commit"}, {"oid": "fb25075300c52c9233b70193736b590a56348c44", "url": "https://github.com/reactor/reactor-core/commit/fb25075300c52c9233b70193736b590a56348c44", "message": "fix #2319 Split emitXxx/tryEmitXxx, more consistent use of hooks\n\ntryEmit methods should mostly not use onErrorDropped/onNextDropped or\nonDiscard hooks, leaving that to the emit methods (or to the user).\n\nmost usage of sinks in tests relies on `emit` methods, which is pretty\nconsistent with their new semantic of \"doing the right thing\" out of the\nbox (since most test usage didn't even check the Emission result).\n\nReviewed-in: #2327", "committedDate": "2020-08-14T16:21:58Z", "type": "commit"}, {"oid": "d2c4a420e341a2c9587b498d1fc1b48b6c2138da", "url": "https://github.com/reactor/reactor-core/commit/d2c4a420e341a2c9587b498d1fc1b48b6c2138da", "message": "[polish] Avoid potential infinite busy looping in tests\n\nReviewed-in: #2327", "committedDate": "2020-08-14T16:22:06Z", "type": "commit"}, {"oid": "19d093c6a624ebf6f2c77f7befb5944ac3104ba4", "url": "https://github.com/reactor/reactor-core/commit/19d093c6a624ebf6f2c77f7befb5944ac3104ba4", "message": "fix #2329 Improve Emission API: polish status helpers, add orThrow()\n\n - `hasEmitted` is a bit confusing (\"Emission has emitted\") so it has\n been renamed to `hasSucceeded()`\n - `hasOverflowed()`, `wasPreviouslyCancelled()` and\n `wasPreviouslyTerminate()` don't bring much value compared to direct\n equal checks, even in terms of readability (contrary to `hasFailed()`\n so these 3 methods have been removed\n\nOn top of that, a new `orThrow()` method is added to `Emission` to\neasily turn a failure enum into throwing an exception (if absolutely\nneeded and relevant).\n\nReviewed-in: #2327", "committedDate": "2020-08-14T16:22:37Z", "type": "commit"}, {"oid": "19d093c6a624ebf6f2c77f7befb5944ac3104ba4", "url": "https://github.com/reactor/reactor-core/commit/19d093c6a624ebf6f2c77f7befb5944ac3104ba4", "message": "fix #2329 Improve Emission API: polish status helpers, add orThrow()\n\n - `hasEmitted` is a bit confusing (\"Emission has emitted\") so it has\n been renamed to `hasSucceeded()`\n - `hasOverflowed()`, `wasPreviouslyCancelled()` and\n `wasPreviouslyTerminate()` don't bring much value compared to direct\n equal checks, even in terms of readability (contrary to `hasFailed()`\n so these 3 methods have been removed\n\nOn top of that, a new `orThrow()` method is added to `Emission` to\neasily turn a failure enum into throwing an exception (if absolutely\nneeded and relevant).\n\nReviewed-in: #2327", "committedDate": "2020-08-14T16:22:37Z", "type": "forcePushed"}]}