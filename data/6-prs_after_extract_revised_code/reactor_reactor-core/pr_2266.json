{"pr_number": 2266, "pr_title": "fix #2260 Avoid onSubscribe race in FluxTimeout", "pr_createdAt": "2020-07-13T16:12:02Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2266", "timeline": [{"oid": "1b3063d34d16e322f8c506199639c0b00e8048ee", "url": "https://github.com/reactor/reactor-core/commit/1b3063d34d16e322f8c506199639c0b00e8048ee", "message": "Fix `onSubscribe` race in `FluxTimeout`", "committedDate": "2020-07-13T16:10:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2ODc1NQ==", "url": "https://github.com/reactor/reactor-core/pull/2266#discussion_r453768755", "bodyText": "could use a StepVerifier here to validate we go to the fallback all the time ?\nalso the reporter indicated that a low-millis timeout would sometimes trigger the issue too. maybe we can either add a test with ofMillis(1) or set a non-zero timeout for a percentage of the loops (eg. 10%) ?", "author": "simonbasle", "createdAt": "2020-07-13T16:17:47Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxTimeoutTest.java", "diffHunk": "@@ -399,4 +399,15 @@ public void timeoutNotDurationMessageSecondTimeout() {\n \n \t\tassertThat(generatorUsed.get()).as(\"generator used\").isTrue();\n \t}\n+\n+\t@Test\n+\tpublic void onSubscribeRace() {\n+\t\tfor (int i = 0; i < 10_000; i++) {\n+\t\t\tFlux.just(\"Hello\")", "originalCommit": "1b3063d34d16e322f8c506199639c0b00e8048ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30c9a300803481fc7dd308f76a5ddf19720b9a12", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/FluxTimeoutTest.java b/reactor-core/src/test/java/reactor/core/publisher/FluxTimeoutTest.java\nindex 340be37b7..202232a1f 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/FluxTimeoutTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/FluxTimeoutTest.java\n\n@@ -405,9 +417,12 @@ public class FluxTimeoutTest {\n \t\tfor (int i = 0; i < 10_000; i++) {\n \t\t\tFlux.just(\"Hello\")\n \t\t\t    .concatMap(v -> Mono.delay(Duration.ofSeconds(10)))\n-\t\t\t    .timeout(Duration.ofMillis(0), Mono.just(123L))\n+\t\t\t    .timeout(Duration.ofMillis(i % 100 == 0 ? 1 : 0), Mono.just(123L))\n \t\t\t    .collectList()\n-\t\t\t    .block(Duration.ofSeconds(1));\n+\t\t\t    .as(StepVerifier::create)\n+\t\t\t    .expectNextMatches(it -> it.get(0).equals(123L))\n+\t\t\t    .expectComplete()\n+\t\t\t\t.verify(Duration.ofSeconds(1));\n \t\t}\n \t}\n }\n"}}, {"oid": "30c9a300803481fc7dd308f76a5ddf19720b9a12", "url": "https://github.com/reactor/reactor-core/commit/30c9a300803481fc7dd308f76a5ddf19720b9a12", "message": "behaviour change: always subscribe on source first", "committedDate": "2020-07-15T15:26:33Z", "type": "commit"}, {"oid": "9a759136684e6415e3b65fdaeffd266f107b1c53", "url": "https://github.com/reactor/reactor-core/commit/9a759136684e6415e3b65fdaeffd266f107b1c53", "message": "fix indentation in tests", "committedDate": "2020-07-15T16:00:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxMjA5MA==", "url": "https://github.com/reactor/reactor-core/pull/2266#discussion_r455612090", "bodyText": "let's order things logically, put firstTimeout before itemTimeout (and same in fields order above)", "author": "simonbasle", "createdAt": "2020-07-16T08:24:00Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxTimeout.java", "diffHunk": "@@ -134,11 +122,12 @@ static String addNameToTimeoutDescription(Publisher<?> source,\n \t\tTimeoutMainSubscriber(CoreSubscriber<? super T> actual,\n \t\t\t\tFunction<? super T, ? extends Publisher<V>> itemTimeout,\n \t\t\t\t@Nullable Publisher<? extends T> other,\n-\t\t\t\t@Nullable String timeoutDescription) {\n-\t\t\tsuper(actual);\n+\t\t\t\t@Nullable String timeoutDescription, Publisher<?> firstTimeout) {", "originalCommit": "9a759136684e6415e3b65fdaeffd266f107b1c53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eea4ee1088afb6a4d0185aa2d5a19d79e3e866b5", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/FluxTimeout.java b/reactor-core/src/main/java/reactor/core/publisher/FluxTimeout.java\nindex 02bfccb0c..40edd1e9b 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/FluxTimeout.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/FluxTimeout.java\n\n@@ -119,10 +120,13 @@ final class FluxTimeout<T, U, V> extends InternalFluxOperator<T, T> {\n \t\tstatic final AtomicLongFieldUpdater<TimeoutMainSubscriber> INDEX =\n \t\t\t\tAtomicLongFieldUpdater.newUpdater(TimeoutMainSubscriber.class, \"index\");\n \n-\t\tTimeoutMainSubscriber(CoreSubscriber<? super T> actual,\n+\t\tTimeoutMainSubscriber(\n+\t\t\t\tCoreSubscriber<? super T> actual,\n+\t\t\t\tPublisher<?> firstTimeout,\n \t\t\t\tFunction<? super T, ? extends Publisher<V>> itemTimeout,\n \t\t\t\t@Nullable Publisher<? extends T> other,\n-\t\t\t\t@Nullable String timeoutDescription, Publisher<?> firstTimeout) {\n+\t\t\t\t@Nullable String timeoutDescription\n+\t\t) {\n \t\t\tsuper(Operators.serialize(actual));\n \t\t\tthis.itemTimeout = itemTimeout;\n \t\t\tthis.other = other;\n"}}, {"oid": "eea4ee1088afb6a4d0185aa2d5a19d79e3e866b5", "url": "https://github.com/reactor/reactor-core/commit/eea4ee1088afb6a4d0185aa2d5a19d79e3e866b5", "message": "reorder", "committedDate": "2020-07-16T08:53:42Z", "type": "commit"}]}