{"pr_number": 2347, "pr_title": "Add `onBackpressureError()` variant of the unicast Sink", "pr_createdAt": "2020-08-28T11:10:00Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2347", "timeline": [{"oid": "005e9c2a94c47a32329ee832935e64a96d981f36", "url": "https://github.com/reactor/reactor-core/commit/005e9c2a94c47a32329ee832935e64a96d981f36", "message": "Support `onBackpressureError()` variant of the unicast Sink", "committedDate": "2020-08-28T11:09:22Z", "type": "commit"}, {"oid": "3522031f2a4b9329360756628c56a47ee44f03fa", "url": "https://github.com/reactor/reactor-core/commit/3522031f2a4b9329360756628c56a47ee44f03fa", "message": "Fix the license headers", "committedDate": "2020-08-31T12:47:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNTkwNg==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r480235906", "bodyText": "rename to Contextualizable or Contextualized ?", "author": "simonbasle", "createdAt": "2020-08-31T16:12:54Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Contextable.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package reactor.core.publisher;\n+\n+import reactor.util.context.Context;\n+\n+interface Contextable {", "originalCommit": "3522031f2a4b9329360756628c56a47ee44f03fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af44912c5ade7a6a18864c378e390971df7eaa2c", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Contextable.java b/reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java\nsimilarity index 97%\nrename from reactor-core/src/main/java/reactor/core/publisher/Contextable.java\nrename to reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java\nindex 4f9b81d87..d37df7170 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Contextable.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java\n\n@@ -17,7 +17,7 @@ package reactor.core.publisher;\n \n import reactor.util.context.Context;\n \n-interface Contextable {\n+interface ContextHolder {\n \n \t/**\n \t * Request a {@link Context} from dependent components which can include downstream\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzOTU1Mw==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r480239553", "bodyText": "I don't think we need a different emission for tryEmit[Error|Complete], but for tryEmitNext we might, so we can distinguish early attempts at emitting through a Sink that doesn't \"warm up\" from FAIL_OVERFLOW (and emitNext would also discard in these cases)... follow up issue I think.", "author": "simonbasle", "createdAt": "2020-08-31T16:19:14Z", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package reactor.core.publisher;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Sinks.Emission;\n+import reactor.util.context.Context;\n+\n+final class UnicastManySinkNoBackpressure<T> extends Flux<T> implements Sinks.Many<T>, Subscription, Contextable {\n+\n+\tpublic static <E> UnicastManySinkNoBackpressure<E> create() {\n+\t\treturn new UnicastManySinkNoBackpressure<>();\n+\t}\n+\n+\tenum State {\n+\t\tINITIAL,\n+\t\tSUBSCRIBED,\n+\t\tTERMINATED,\n+\t\tCANCELLED,\n+\t}\n+\n+\tvolatile State state;\n+\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate static final AtomicReferenceFieldUpdater<UnicastManySinkNoBackpressure, State> STATE = AtomicReferenceFieldUpdater.newUpdater(\n+\t\t\tUnicastManySinkNoBackpressure.class,\n+\t\t\tState.class,\n+\t\t\t\"state\"\n+\t);\n+\n+\tprivate volatile CoreSubscriber<? super T> actual = null;\n+\n+\tvolatile long requested;\n+\t@SuppressWarnings(\"rawtypes\")\n+\tstatic final AtomicLongFieldUpdater<UnicastManySinkNoBackpressure> REQUESTED =\n+\t\t\tAtomicLongFieldUpdater.newUpdater(UnicastManySinkNoBackpressure.class, \"requested\");\n+\n+\tUnicastManySinkNoBackpressure() {\n+\t\tSTATE.lazySet(this, State.INITIAL);\n+\t}\n+\n+\t@Override\n+\tpublic Flux<T> asFlux() {\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic void subscribe(CoreSubscriber<? super T> actual) {\n+\t\tObjects.requireNonNull(actual, \"subscribe\");\n+\n+\t\tif (!STATE.compareAndSet(this, State.INITIAL, State.SUBSCRIBED)) {\n+\t\t\tOperators.reportThrowInSubscribe(actual, new IllegalStateException(\"Unicast Sinks.Many allows only a single Subscriber\"));\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.actual = actual;\n+\t\tactual.onSubscribe(this);\n+\t}\n+\n+\t@Override\n+\tpublic void request(long n) {\n+\t\tif (Operators.validate(n)) {\n+\t\t\tOperators.addCap(REQUESTED, this, n);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void cancel() {\n+\t\tswitch (STATE.getAndSet(this, State.CANCELLED)) {\n+\t\t\tcase SUBSCRIBED:\n+\t\t\t\tactual = null;\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Context currentContext() {\n+\t\tCoreSubscriber<? super T> actual = this.actual;\n+\t\treturn actual != null ? actual.currentContext() : Context.empty();\n+\t}\n+\n+\t@Override\n+\tpublic void emitNext(T value) {\n+\t\tswitch (tryEmitNext(value)) {\n+\t\t\tcase FAIL_OVERFLOW:\n+\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t//the emitError will onErrorDropped if already terminated\n+\t\t\t\temitError(Exceptions.failWithOverflow(\"Backpressure overflow during Sinks.Many#emitNext\"));\n+\t\t\t\tbreak;\n+\t\t\tcase FAIL_CANCELLED:\n+\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\tbreak;\n+\t\t\tcase FAIL_TERMINATED:\n+\t\t\t\tOperators.onNextDropped(value, currentContext());\n+\t\t\t\tbreak;\n+\t\t\tcase OK:\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Emission tryEmitNext(T t) {\n+\t\tObjects.requireNonNull(t, \"t\");\n+\n+\t\tswitch (state) {\n+\t\t\tcase INITIAL:\n+\t\t\t\t// TODO different Emission?", "originalCommit": "3522031f2a4b9329360756628c56a47ee44f03fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af44912c5ade7a6a18864c378e390971df7eaa2c", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java b/reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java\nindex 863e8f0ed..fb3c6bd4f 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java\n\n@@ -25,7 +25,7 @@ import reactor.core.Exceptions;\n import reactor.core.publisher.Sinks.Emission;\n import reactor.util.context.Context;\n \n-final class UnicastManySinkNoBackpressure<T> extends Flux<T> implements Sinks.Many<T>, Subscription, Contextable {\n+final class UnicastManySinkNoBackpressure<T> extends Flux<T> implements Sinks.Many<T>, Subscription, ContextHolder {\n \n \tpublic static <E> UnicastManySinkNoBackpressure<E> create() {\n \t\treturn new UnicastManySinkNoBackpressure<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1OTUwNA==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r480959504", "bodyText": "if the interface is only added to FluxProcessor and the new sink, maybe make its name more sink-oriented? like SinkSerializable for instance?", "author": "simonbasle", "createdAt": "2020-09-01T08:21:31Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java", "diffHunk": "@@ -43,7 +43,7 @@\n  * @param <OUT> the output value type\n  */\n public abstract class FluxProcessor<IN, OUT> extends Flux<OUT>\n-\t\timplements Processor<IN, OUT>, CoreSubscriber<IN>, Scannable, Disposable {\n+\t\timplements Processor<IN, OUT>, CoreSubscriber<IN>, Scannable, Disposable, Contextable {", "originalCommit": "3522031f2a4b9329360756628c56a47ee44f03fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTQ1NA==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r480985454", "bodyText": "I see no reason to make it sink-oriented, especially given that it can be useful in other places.\nSinkSerializable sounds like \"a Sink that supports Java Serialization\" to me :D", "author": "bsideup", "createdAt": "2020-09-01T09:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1OTUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "af44912c5ade7a6a18864c378e390971df7eaa2c", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java b/reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java\nindex 9cfc24a3b..2b3111659 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java\n\n@@ -43,7 +43,7 @@ import static reactor.core.publisher.Sinks.Many;\n  * @param <OUT> the output value type\n  */\n public abstract class FluxProcessor<IN, OUT> extends Flux<OUT>\n-\t\timplements Processor<IN, OUT>, CoreSubscriber<IN>, Scannable, Disposable, Contextable {\n+\t\timplements Processor<IN, OUT>, CoreSubscriber<IN>, Scannable, Disposable, ContextHolder {\n \n \t/**\n \t * Convert a {@link Sinks.Many} to a {@link FluxProcessor} : subscribing to the processor\n"}}, {"oid": "22735d2f9319ad3a940d82897a474ec20a9cc8f1", "url": "https://github.com/reactor/reactor-core/commit/22735d2f9319ad3a940d82897a474ec20a9cc8f1", "message": "Merge branch 'master' into unicast_onBackpressureError", "committedDate": "2020-09-01T09:06:37Z", "type": "commit"}, {"oid": "5282d27d832353726b2414e95df39bfe277291ff", "url": "https://github.com/reactor/reactor-core/commit/5282d27d832353726b2414e95df39bfe277291ff", "message": "fix compilation errors", "committedDate": "2020-09-01T09:11:54Z", "type": "commit"}, {"oid": "af44912c5ade7a6a18864c378e390971df7eaa2c", "url": "https://github.com/reactor/reactor-core/commit/af44912c5ade7a6a18864c378e390971df7eaa2c", "message": "Rename `Contextable` -> `ContextHolder`", "committedDate": "2020-09-01T09:15:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MTE0Mg==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481081142", "bodyText": "markdown doesn't work \ud83d\ude1b either make it a link to Subscriber#onError(Throwable) or {@code onError}", "author": "simonbasle", "createdAt": "2020-09-01T11:55:21Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -260,6 +260,18 @@ public Emission getReason() {\n \t\t * @param endCallback when a terminal signal is observed: error, complete or cancel\n \t\t */\n \t\t<T> Sinks.Many<T> onBackpressureBuffer(Queue<T> queue, Disposable endCallback);\n+\n+\t\t/**\n+\t\t * A {@link Sinks.Many} with the following characteristics:\n+\t\t * <ul>\n+\t\t *     <li><strong>Unicast</strong>: contrary to most other {@link Sinks.Many}, the\n+\t\t *     {@link Flux} view rejects {@link Subscriber subscribers} past the first one.</li>\n+\t\t *     <li>Backpressure : this sink is able to honor downstream demand and will emit `onError` if there is a mismatch.</li>", "originalCommit": "af44912c5ade7a6a18864c378e390971df7eaa2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MTc1Mw==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481081753", "bodyText": "I'd also rephrase a bit to mimic the phrasing of the other methods (\"this sink honors downstream demand of its single Subscriber, and will emit onError if there is a mismatch\")", "author": "simonbasle", "createdAt": "2020-09-01T11:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MTE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5NTU5Ng==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481095596", "bodyText": "re \"markdown\" - this was copied from another method. Will fix both.", "author": "bsideup", "createdAt": "2020-09-01T12:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MTE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0031225cf6b16ed1ba4cebb21ca70dbfe71fbf16", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex 3ceb862c6..bed582cb3 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -266,7 +266,7 @@ public final class Sinks {\n \t\t * <ul>\n \t\t *     <li><strong>Unicast</strong>: contrary to most other {@link Sinks.Many}, the\n \t\t *     {@link Flux} view rejects {@link Subscriber subscribers} past the first one.</li>\n-\t\t *     <li>Backpressure : this sink is able to honor downstream demand and will emit `onError` if there is a mismatch.</li>\n+\t\t *     <li>Backpressure : this sink honors downstream demand of the Subscriber, and will emit {@link Subscriber#onError(Throwable)} if there is a mismatch.</li>\n \t\t *     <li>Replaying: No replay. Only forwards to a {@link Subscriber} the elements that have been\n \t\t *     pushed to the sink AFTER this subscriber was subscribed.</li>\n \t\t * </ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MzM5OA==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481083398", "bodyText": "would it be beneficial to mark it as @FunctionalInterface ?", "author": "simonbasle", "createdAt": "2020-09-01T11:59:22Z", "path": "reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package reactor.core.publisher;\n+\n+import reactor.util.context.Context;\n+\n+interface ContextHolder {", "originalCommit": "af44912c5ade7a6a18864c378e390971df7eaa2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5NTgzNw==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481095837", "bodyText": "Why? The lambda usage isn't the primary goal. And even if lambda form is used (e.g. in tests), it will work just fine. From @FunctionalInterface's Javadoc:\n\nHowever, the compiler will treat any interface meeting the\ndefinition of a functional interface as a functional interface\nregardless of whether or not a {@code FunctionalInterface}\nannotation is present on the interface declaration.", "author": "bsideup", "createdAt": "2020-09-01T12:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MzM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5ODY3Mw==", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481098673", "bodyText": "yeah ok, since the implementing classes are less than likely to be functional interfaces themselves, it doesn't really bring any value.", "author": "simonbasle", "createdAt": "2020-09-01T12:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MzM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "0031225cf6b16ed1ba4cebb21ca70dbfe71fbf16", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java b/reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java\nindex d37df7170..4e13826f4 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"oid": "0031225cf6b16ed1ba4cebb21ca70dbfe71fbf16", "url": "https://github.com/reactor/reactor-core/commit/0031225cf6b16ed1ba4cebb21ca70dbfe71fbf16", "message": "Review fixes", "committedDate": "2020-09-01T12:24:27Z", "type": "commit"}]}