{"pr_number": 2514, "pr_title": "fix #2513 ReplayProcessor now correctly pass nanos to buffer, not ms", "pr_createdAt": "2020-11-26T22:15:14Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2514", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMDExNQ==", "url": "https://github.com/reactor/reactor-core/pull/2514#discussion_r531510115", "bodyText": "please at least setup the replaySink in a @BeforeEach so that each test get their own", "author": "simonbasle", "createdAt": "2020-11-27T10:22:22Z", "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "diffHunk": "@@ -165,6 +165,39 @@ void noReplayBeforeFirstSubscriberIfEarlyError() {\n \t\t}\n \t}\n \n+\t@Nested\n+\tclass MulticastReplayDuration {\n+\n+\t\tfinal Duration            duration = Duration.ofMillis(1000);\n+\t\tfinal Sinks.Many<Integer> replaySink = Sinks.many().replay().limit(duration);", "originalCommit": "f9dc7e6f02590ce81f774a1bb1c8836de66e2b14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1MjYzMw==", "url": "https://github.com/reactor/reactor-core/pull/2514#discussion_r531552633", "bodyText": "right, will fix it", "author": "dowgiallom", "createdAt": "2020-11-27T11:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMDExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "bb4c875ba635e7108665698e9f026277d2f6300e", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/SinksTest.java b/reactor-core/src/test/java/reactor/core/publisher/SinksTest.java\nindex 87864ef7f..13c357036 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/SinksTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/SinksTest.java\n\n@@ -169,10 +169,17 @@ class SinksTest {\n \tclass MulticastReplayDuration {\n \n \t\tfinal Duration            duration = Duration.ofMillis(1000);\n-\t\tfinal Sinks.Many<Integer> replaySink = Sinks.many().replay().limit(duration);\n-\t\tfinal Flux<Integer>       flux = replaySink.asFlux();\n \t\tfinal int \t\t\t\t  event = 12;\n+\t\tSinks.Many<Integer>       replaySink;\n+\t\tFlux<Integer>             flux;\n \n+\t\t@BeforeEach\n+\t\tvoid setup() {\n+\t\t\treplaySink = Sinks.many().replay().limit(duration);\n+\t\t\tflux = replaySink.asFlux();\n+\t\t}\n+\n+\t\t// fixes: https://github.com/reactor/reactor-core/issues/2513\n \t\t@Test\n \t\tvoid lateSubscriberReceivesEventInRetentionTime() {\n \t\t\treplaySink.emitNext(event, FAIL_FAST);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMjEwMw==", "url": "https://github.com/reactor/reactor-core/pull/2514#discussion_r531512103", "bodyText": "nitpick: I'd add a comment referencing the issue to avoid somebody later changing the retention duration or the minusMillis(1) instruction for example", "author": "simonbasle", "createdAt": "2020-11-27T10:26:06Z", "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "diffHunk": "@@ -165,6 +165,39 @@ void noReplayBeforeFirstSubscriberIfEarlyError() {\n \t\t}\n \t}\n \n+\t@Nested\n+\tclass MulticastReplayDuration {\n+\n+\t\tfinal Duration            duration = Duration.ofMillis(1000);\n+\t\tfinal Sinks.Many<Integer> replaySink = Sinks.many().replay().limit(duration);\n+\t\tfinal Flux<Integer>       flux = replaySink.asFlux();\n+\t\tfinal int \t\t\t\t  event = 12;\n+\n+\t\t@Test\n+\t\tvoid lateSubscriberReceivesEventInRetentionTime() {\n+\t\t\treplaySink.emitNext(event, FAIL_FAST);", "originalCommit": "f9dc7e6f02590ce81f774a1bb1c8836de66e2b14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1MjcxMA==", "url": "https://github.com/reactor/reactor-core/pull/2514#discussion_r531552710", "bodyText": "added comment", "author": "dowgiallom", "createdAt": "2020-11-27T11:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMjEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "bb4c875ba635e7108665698e9f026277d2f6300e", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/SinksTest.java b/reactor-core/src/test/java/reactor/core/publisher/SinksTest.java\nindex 87864ef7f..13c357036 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/SinksTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/SinksTest.java\n\n@@ -169,10 +169,17 @@ class SinksTest {\n \tclass MulticastReplayDuration {\n \n \t\tfinal Duration            duration = Duration.ofMillis(1000);\n-\t\tfinal Sinks.Many<Integer> replaySink = Sinks.many().replay().limit(duration);\n-\t\tfinal Flux<Integer>       flux = replaySink.asFlux();\n \t\tfinal int \t\t\t\t  event = 12;\n+\t\tSinks.Many<Integer>       replaySink;\n+\t\tFlux<Integer>             flux;\n \n+\t\t@BeforeEach\n+\t\tvoid setup() {\n+\t\t\treplaySink = Sinks.many().replay().limit(duration);\n+\t\t\tflux = replaySink.asFlux();\n+\t\t}\n+\n+\t\t// fixes: https://github.com/reactor/reactor-core/issues/2513\n \t\t@Test\n \t\tvoid lateSubscriberReceivesEventInRetentionTime() {\n \t\t\treplaySink.emitNext(event, FAIL_FAST);\n"}}, {"oid": "bac63849d49ebe0b8c11ab32dc84ccaf7e8a51b7", "url": "https://github.com/reactor/reactor-core/commit/bac63849d49ebe0b8c11ab32dc84ccaf7e8a51b7", "message": "fix #2513 ReplayProcessor passing millis instead of nanos to buffer\n\nFixes ReplayProcessor factory method by passing nanos instead of millis to SizeAndTimeBoundReplayBuffer constructor. This results in proper behavior of Sinks.many().replay(Duration) which now respects the retention time properly", "committedDate": "2020-11-27T16:37:24Z", "type": "commit"}, {"oid": "bb4c875ba635e7108665698e9f026277d2f6300e", "url": "https://github.com/reactor/reactor-core/commit/bb4c875ba635e7108665698e9f026277d2f6300e", "message": "2513 Review remarks improvements", "committedDate": "2020-11-27T16:37:24Z", "type": "commit"}, {"oid": "bb4c875ba635e7108665698e9f026277d2f6300e", "url": "https://github.com/reactor/reactor-core/commit/bb4c875ba635e7108665698e9f026277d2f6300e", "message": "2513 Review remarks improvements", "committedDate": "2020-11-27T16:37:24Z", "type": "forcePushed"}]}