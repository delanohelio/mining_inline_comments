{"pr_number": 2418, "pr_title": "Rework Sinks specs to put unsafe() at root level", "pr_createdAt": "2020-10-07T08:39:21Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2418", "timeline": [{"oid": "6348d9bc812059c4da091c7a6bd5697bba3a5846", "url": "https://github.com/reactor/reactor-core/commit/6348d9bc812059c4da091c7a6bd5697bba3a5846", "message": "polish formatting and naming of spec implementations", "committedDate": "2020-10-07T09:42:22Z", "type": "forcePushed"}, {"oid": "b22285f7559d53635dfef1d3a604c097ae5718d6", "url": "https://github.com/reactor/reactor-core/commit/b22285f7559d53635dfef1d3a604c097ae5718d6", "message": "fix wrapMany typesafety", "committedDate": "2020-10-07T16:46:45Z", "type": "forcePushed"}, {"oid": "63759112cec8f5c1b4a6ba623167244bf993e38c", "url": "https://github.com/reactor/reactor-core/commit/63759112cec8f5c1b4a6ba623167244bf993e38c", "message": "Rework specs to allow wrapping and put unsafe() at root level (#2418)\n\nThis commit reworks the Sinks specs so that the one() and empty() sinks\ncan have both a serialized and unsafe version.\n\nSince  `unsafe()` lives at the ManySpec level, currently there's only\none set of `one()` and `empty()` factories.\nSo this commit introduces RootSpec and moves the `unsafe()` switch from\n`ManySpec` to `Sinks` directly, retuning a `RootSpec` which allows\naccess to unsafe `one()` and `empty()`.\n\nInternally, the implementation is also heavily simplified, collapsed\ninto only 2 internal classes for the specs.", "committedDate": "2020-10-08T13:49:31Z", "type": "forcePushed"}, {"oid": "1efae9a65653bc35887b6674d4f8deda60992777", "url": "https://github.com/reactor/reactor-core/commit/1efae9a65653bc35887b6674d4f8deda60992777", "message": "Rework specs to allow wrapping and put unsafe() at root level (#2418)\n\nThis commit reworks the Sinks specs so that the one() and empty() sinks\ncan have both a serialized and unsafe version.\n\nSince  `unsafe()` lives at the ManySpec level, currently there's only\none set of `one()` and `empty()` factories.\nSo this commit introduces RootSpec and moves the `unsafe()` switch from\n`ManySpec` to `Sinks` directly, retuning a `RootSpec` which allows\naccess to unsafe `one()` and `empty()`.\n\nInternally, the implementation is also heavily simplified, collapsed\ninto only 2 internal classes for the specs.", "committedDate": "2020-10-08T13:56:30Z", "type": "commit"}, {"oid": "1efae9a65653bc35887b6674d4f8deda60992777", "url": "https://github.com/reactor/reactor-core/commit/1efae9a65653bc35887b6674d4f8deda60992777", "message": "Rework specs to allow wrapping and put unsafe() at root level (#2418)\n\nThis commit reworks the Sinks specs so that the one() and empty() sinks\ncan have both a serialized and unsafe version.\n\nSince  `unsafe()` lives at the ManySpec level, currently there's only\none set of `one()` and `empty()` factories.\nSo this commit introduces RootSpec and moves the `unsafe()` switch from\n`ManySpec` to `Sinks` directly, retuning a `RootSpec` which allows\naccess to unsafe `one()` and `empty()`.\n\nInternally, the implementation is also heavily simplified, collapsed\ninto only 2 internal classes for the specs.", "committedDate": "2020-10-08T13:56:30Z", "type": "forcePushed"}, {"oid": "66b76462a6edbc4ca8f87b39f12f776c3571b403", "url": "https://github.com/reactor/reactor-core/commit/66b76462a6edbc4ca8f87b39f12f776c3571b403", "message": "Make base one/empty serialized", "committedDate": "2020-10-08T14:08:08Z", "type": "commit"}, {"oid": "be7febc51bd7bf8beb0796507c3ac2d2864146f4", "url": "https://github.com/reactor/reactor-core/commit/be7febc51bd7bf8beb0796507c3ac2d2864146f4", "message": "avoid dangling classes, make them child classes of SinksSpecs", "committedDate": "2020-10-08T14:11:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODQ5Ng==", "url": "https://github.com/reactor/reactor-core/pull/2418#discussion_r501768496", "bodyText": "err? Why this change?", "author": "bsideup", "createdAt": "2020-10-08T14:30:59Z", "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptySerialized.java", "diffHunk": "@@ -21,7 +21,8 @@\n import java.util.Objects;\n import java.util.stream.Stream;\n \n-class SinkEmptySerialized<T> extends SerializedSink implements InternalEmptySink<T>, ContextHolder {\n+class SinkEmptySerialized<T> extends SinksSpecs.AbstractSerializedSink", "originalCommit": "be7febc51bd7bf8beb0796507c3ac2d2864146f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3NTU1Mg==", "url": "https://github.com/reactor/reactor-core/pull/2418#discussion_r501775552", "bodyText": "because I consider this a good polish. having the internal classes under SinksSpecs rather than next to it prevent unnecessary IDE completion and confusion. unless you mean the Abstract prefix? we do rarely use it, indeed, but I feel SerializedSink is more ambiguous than SinksSpecs.AbstractSerializedSink...", "author": "simonbasle", "createdAt": "2020-10-08T14:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODQ5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2OTczMA==", "url": "https://github.com/reactor/reactor-core/pull/2418#discussion_r501769730", "bodyText": "maybe not \"is serialized\" but \"is protected from non-serialized access\"?", "author": "bsideup", "createdAt": "2020-10-08T14:32:35Z", "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "diffHunk": "@@ -50,6 +50,30 @@\n  */\n class SinksTest {\n \n+\t@Test\n+\tvoid oneIsSerialized() {", "originalCommit": "be7febc51bd7bf8beb0796507c3ac2d2864146f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}