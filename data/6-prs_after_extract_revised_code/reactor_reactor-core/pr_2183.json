{"pr_number": 2183, "pr_title": "Fix #2181 Handle nulls from collectors in Flux.collect()", "pr_createdAt": "2020-06-08T13:25:44Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2183", "timeline": [{"oid": "06ca741229c6304e7bc7f696d02d355da6aac5d3", "url": "https://github.com/reactor/reactor-core/commit/06ca741229c6304e7bc7f696d02d355da6aac5d3", "message": "Fix #2181 Handle nulls from collectors in Flux.collect()\n\nEmit an NPE early instead of signaling onNext(null).", "committedDate": "2020-06-08T13:21:37Z", "type": "commit"}, {"oid": "06ca741229c6304e7bc7f696d02d355da6aac5d3", "url": "https://github.com/reactor/reactor-core/commit/06ca741229c6304e7bc7f696d02d355da6aac5d3", "message": "Fix #2181 Handle nulls from collectors in Flux.collect()\n\nEmit an NPE early instead of signaling onNext(null).", "committedDate": "2020-06-08T13:21:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyNTYzMA==", "url": "https://github.com/reactor/reactor-core/pull/2183#discussion_r436725630", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2011-2020 Pivotal Software Inc, All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.", "author": "bsideup", "createdAt": "2020-06-08T13:57:01Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxCollectTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2011-2020 Pivotal Software Inc, All Rights Reserved.", "originalCommit": "06ca741229c6304e7bc7f696d02d355da6aac5d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczNDM0Mg==", "url": "https://github.com/reactor/reactor-core/pull/2183#discussion_r436734342", "bodyText": "This should not be Pivotal but VMware", "author": "violetagg", "createdAt": "2020-06-08T14:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyNTYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "22a661fc2f17ec98dff4e1db51ceb56fe0348add", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/FluxCollectTest.java b/reactor-core/src/test/java/reactor/core/publisher/FluxCollectTest.java\ndeleted file mode 100644\nindex 7ad2242d1..000000000\n--- a/reactor-core/src/test/java/reactor/core/publisher/FluxCollectTest.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * Copyright (c) 2011-2020 Pivotal Software Inc, All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-\n-package reactor.core.publisher;\n-\n-import java.util.stream.Collector;\n-\n-import org.junit.Test;\n-import reactor.test.StepVerifier;\n-\n-import static java.util.stream.Collectors.reducing;\n-\n-/**\n- * Tests for {@link Flux#collect(Collector)}.\n- *\n- * @author Eric Bottard\n- */\n-public class FluxCollectTest {\n-\n-\t/**\n-\t * A collector producing null should be intercepted early instead of signaling onNext(null).\n-\t * @see <a href=\"https://github.com/reactor/reactor-core/issues/2181\" target=\"_top\">issue 2181</a>\n-\t */\n-\t@Test\n-\tpublic void collectHandlesNulls() {\n-\t\tStepVerifier.create(Flux.empty().collect(reducing(null, (a, b) -> a)))\n-\t\t\t\t.verifyError(NullPointerException.class);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyNzY3NA==", "url": "https://github.com/reactor/reactor-core/pull/2183#discussion_r436727674", "bodyText": "WDYT about an early return?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (r != null) {\n          \n          \n            \n            \t\t\t\tcomplete(r);\n          \n          \n            \n            \t\t\t} else {\n          \n          \n            \n            \t\t\t\tactual.onError(Operators.onOperatorError(new NullPointerException(\"Collector returned null\"), actual.currentContext()));\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t\tif (r == null) {\n          \n          \n            \n            \t\t\t\tactual.onError(Operators.onOperatorError(new NullPointerException(\"Collector returned null\"), actual.currentContext()));\n          \n          \n            \n            \t\t\t\treturn;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\tcomplete(r);", "author": "bsideup", "createdAt": "2020-06-08T13:59:00Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoStreamCollector.java", "diffHunk": "@@ -164,7 +164,11 @@ public void onComplete() {\n \t\t\t\treturn;\n \t\t\t}\n \n-\t\t\tcomplete(r);\n+\t\t\tif (r != null) {\n+\t\t\t\tcomplete(r);\n+\t\t\t} else {\n+\t\t\t\tactual.onError(Operators.onOperatorError(new NullPointerException(\"Collector returned null\"), actual.currentContext()));\n+\t\t\t}", "originalCommit": "06ca741229c6304e7bc7f696d02d355da6aac5d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a661fc2f17ec98dff4e1db51ceb56fe0348add", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/MonoStreamCollector.java b/reactor-core/src/main/java/reactor/core/publisher/MonoStreamCollector.java\nindex 578a8e5d9..a221bcc46 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/MonoStreamCollector.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/MonoStreamCollector.java\n\n@@ -164,11 +164,11 @@ final class MonoStreamCollector<T, A, R> extends MonoFromFluxOperator<T, R>\n \t\t\t\treturn;\n \t\t\t}\n \n-\t\t\tif (r != null) {\n-\t\t\t\tcomplete(r);\n-\t\t\t} else {\n+\t\t\tif (r == null) {\n \t\t\t\tactual.onError(Operators.onOperatorError(new NullPointerException(\"Collector returned null\"), actual.currentContext()));\n+\t\t\t\treturn;\n \t\t\t}\n+\t\t\tcomplete(r);\n \t\t}\n \n \t\t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyOTUzMw==", "url": "https://github.com/reactor/reactor-core/pull/2183#discussion_r436729533", "bodyText": "FYI there is MonoStreamCollectorTest that tests collect(Collector)", "author": "bsideup", "createdAt": "2020-06-08T14:00:49Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxCollectTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2011-2020 Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package reactor.core.publisher;\n+\n+import java.util.stream.Collector;\n+\n+import org.junit.Test;\n+import reactor.test.StepVerifier;\n+\n+import static java.util.stream.Collectors.reducing;\n+\n+/**\n+ * Tests for {@link Flux#collect(Collector)}.\n+ *\n+ * @author Eric Bottard\n+ */\n+public class FluxCollectTest {", "originalCommit": "06ca741229c6304e7bc7f696d02d355da6aac5d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a661fc2f17ec98dff4e1db51ceb56fe0348add", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/FluxCollectTest.java b/reactor-core/src/test/java/reactor/core/publisher/FluxCollectTest.java\ndeleted file mode 100644\nindex 7ad2242d1..000000000\n--- a/reactor-core/src/test/java/reactor/core/publisher/FluxCollectTest.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * Copyright (c) 2011-2020 Pivotal Software Inc, All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-\n-package reactor.core.publisher;\n-\n-import java.util.stream.Collector;\n-\n-import org.junit.Test;\n-import reactor.test.StepVerifier;\n-\n-import static java.util.stream.Collectors.reducing;\n-\n-/**\n- * Tests for {@link Flux#collect(Collector)}.\n- *\n- * @author Eric Bottard\n- */\n-public class FluxCollectTest {\n-\n-\t/**\n-\t * A collector producing null should be intercepted early instead of signaling onNext(null).\n-\t * @see <a href=\"https://github.com/reactor/reactor-core/issues/2181\" target=\"_top\">issue 2181</a>\n-\t */\n-\t@Test\n-\tpublic void collectHandlesNulls() {\n-\t\tStepVerifier.create(Flux.empty().collect(reducing(null, (a, b) -> a)))\n-\t\t\t\t.verifyError(NullPointerException.class);\n-\t}\n-}\n"}}, {"oid": "22a661fc2f17ec98dff4e1db51ceb56fe0348add", "url": "https://github.com/reactor/reactor-core/commit/22a661fc2f17ec98dff4e1db51ceb56fe0348add", "message": "Address review comments", "committedDate": "2020-06-08T15:56:34Z", "type": "commit"}]}