{"pr_number": 2265, "pr_title": "2253 redesign meterregistry", "pr_createdAt": "2020-07-10T10:59:13Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2265", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0Njg2MA==", "url": "https://github.com/reactor/reactor-core/pull/2265#discussion_r455146860", "bodyText": "unnecessary rename / typo teardDown", "author": "simonbasle", "createdAt": "2020-07-15T15:37:09Z", "path": "reactor-core/src/withMicrometerTest/java/reactor/core/scheduler/SchedulersMetricsTest.java", "diffHunk": "@@ -32,31 +33,33 @@\n @RunWith(JUnitParamsRunner.class)\n public class SchedulersMetricsTest {\n \n-\tSimpleMeterRegistry simpleMeterRegistry;\n \n \t@Rule\n \tpublic AutoDisposingRule afterTest = new AutoDisposingRule();\n \n+\tprivate MeterRegistry registry;\n+\tprivate MeterRegistry previousRegistry;\n+\n \t@Before\n \tpublic void setUp() {\n-\t\tsimpleMeterRegistry = new SimpleMeterRegistry();\n-\t\tMetrics.addRegistry(simpleMeterRegistry);\n+\t\tregistry = new SimpleMeterRegistry();\n+\t\tpreviousRegistry = reactor.util.Metrics.Configuration.useRegistry(registry);\n \t\tSchedulers.enableMetrics();\n \t}\n \n \t@After\n-\tpublic void tearDown() {\n+\tpublic void teardDown() {", "originalCommit": "127f69fa8ddb33042d29720174ddbf5b96db53b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d5871262723ec911637d68d8dab6489532bc7ecf", "chunk": "diff --git a/reactor-core/src/withMicrometerTest/java/reactor/core/scheduler/SchedulersMetricsTest.java b/reactor-core/src/withMicrometerTest/java/reactor/core/scheduler/SchedulersMetricsTest.java\nindex ff12fd27b..0b6239995 100644\n--- a/reactor-core/src/withMicrometerTest/java/reactor/core/scheduler/SchedulersMetricsTest.java\n+++ b/reactor-core/src/withMicrometerTest/java/reactor/core/scheduler/SchedulersMetricsTest.java\n\n@@ -43,15 +43,15 @@ public class SchedulersMetricsTest {\n \t@Before\n \tpublic void setUp() {\n \t\tregistry = new SimpleMeterRegistry();\n-\t\tpreviousRegistry = reactor.util.Metrics.Configuration.useRegistry(registry);\n+\t\tpreviousRegistry = Metrics.MicrometerConfiguration.useRegistry(registry);\n \t\tSchedulers.enableMetrics();\n \t}\n \n \t@After\n-\tpublic void teardDown() {\n+\tpublic void tearDown() {\n \t\tSchedulers.disableMetrics();\n \t\tregistry.close();\n-\t\treactor.util.Metrics.Configuration.useRegistry(previousRegistry);\n+\t\tMetrics.MicrometerConfiguration.useRegistry(previousRegistry);\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NzMwNw==", "url": "https://github.com/reactor/reactor-core/pull/2265#discussion_r455147307", "bodyText": "Maybe rename MicrometerConfiguration ?", "author": "simonbasle", "createdAt": "2020-07-15T15:37:52Z", "path": "reactor-core/src/main/java/reactor/util/Metrics.java", "diffHunk": "@@ -49,4 +52,23 @@ public static final boolean isInstrumentationAvailable() {\n \t\treturn isMicrometerAvailable;\n \t}\n \n+\tpublic static class Configuration {", "originalCommit": "127f69fa8ddb33042d29720174ddbf5b96db53b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyNzcxMA==", "url": "https://github.com/reactor/reactor-core/pull/2265#discussion_r455827710", "bodyText": "(the rationale is that this strongly signals classloading of Micrometer. an added benefit is if we ever add support of other metrics frameworks)", "author": "simonbasle", "createdAt": "2020-07-16T14:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NzMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "d5871262723ec911637d68d8dab6489532bc7ecf", "chunk": "diff --git a/reactor-core/src/main/java/reactor/util/Metrics.java b/reactor-core/src/main/java/reactor/util/Metrics.java\nindex e61f33748..48eeb68fe 100644\n--- a/reactor-core/src/main/java/reactor/util/Metrics.java\n+++ b/reactor-core/src/main/java/reactor/util/Metrics.java\n\n@@ -52,22 +52,26 @@ public class Metrics {\n \t\treturn isMicrometerAvailable;\n \t}\n \n-\tpublic static class Configuration {\n+\tpublic static class MicrometerConfiguration {\n \n-\t\t/**\n-\t\t * The registry to use in reactor for metrics related purposes.\n-\t\t * @see Flux#metrics()\n-\t\t */\n \t\tprivate static MeterRegistry registry = globalRegistry;\n \n+\t\t/**\n+\t\t * Set the registry to use in reactor for metrics related purposes.\n+\t\t * @return the previously configured registry.\n+\t\t */\n \t\tpublic static MeterRegistry useRegistry(MeterRegistry registry) {\n-\t\t\tMeterRegistry previous = Configuration.registry;\n-\t\t\tConfiguration.registry = registry;\n+\t\t\tMeterRegistry previous = MicrometerConfiguration.registry;\n+\t\t\tMicrometerConfiguration.registry = registry;\n \t\t\treturn previous;\n \t\t}\n \n+\t\t/**\n+\t\t * Get the registry used in reactor for metrics related purposes.\n+\t\t * @see Flux#metrics()\n+\t\t */\n \t\tpublic static MeterRegistry getRegistry() {\n-\t\t\treturn Configuration.registry;\n+\t\t\treturn MicrometerConfiguration.registry;\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NzY3OQ==", "url": "https://github.com/reactor/reactor-core/pull/2265#discussion_r455147679", "bodyText": "Move on getRegistry and mention the default is globalRegistry ?", "author": "simonbasle", "createdAt": "2020-07-15T15:38:29Z", "path": "reactor-core/src/main/java/reactor/util/Metrics.java", "diffHunk": "@@ -49,4 +52,23 @@ public static final boolean isInstrumentationAvailable() {\n \t\treturn isMicrometerAvailable;\n \t}\n \n+\tpublic static class Configuration {\n+\n+\t\t/**\n+\t\t * The registry to use in reactor for metrics related purposes.", "originalCommit": "127f69fa8ddb33042d29720174ddbf5b96db53b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d5871262723ec911637d68d8dab6489532bc7ecf", "chunk": "diff --git a/reactor-core/src/main/java/reactor/util/Metrics.java b/reactor-core/src/main/java/reactor/util/Metrics.java\nindex e61f33748..48eeb68fe 100644\n--- a/reactor-core/src/main/java/reactor/util/Metrics.java\n+++ b/reactor-core/src/main/java/reactor/util/Metrics.java\n\n@@ -52,22 +52,26 @@ public class Metrics {\n \t\treturn isMicrometerAvailable;\n \t}\n \n-\tpublic static class Configuration {\n+\tpublic static class MicrometerConfiguration {\n \n-\t\t/**\n-\t\t * The registry to use in reactor for metrics related purposes.\n-\t\t * @see Flux#metrics()\n-\t\t */\n \t\tprivate static MeterRegistry registry = globalRegistry;\n \n+\t\t/**\n+\t\t * Set the registry to use in reactor for metrics related purposes.\n+\t\t * @return the previously configured registry.\n+\t\t */\n \t\tpublic static MeterRegistry useRegistry(MeterRegistry registry) {\n-\t\t\tMeterRegistry previous = Configuration.registry;\n-\t\t\tConfiguration.registry = registry;\n+\t\t\tMeterRegistry previous = MicrometerConfiguration.registry;\n+\t\t\tMicrometerConfiguration.registry = registry;\n \t\t\treturn previous;\n \t\t}\n \n+\t\t/**\n+\t\t * Get the registry used in reactor for metrics related purposes.\n+\t\t * @see Flux#metrics()\n+\t\t */\n \t\tpublic static MeterRegistry getRegistry() {\n-\t\t\treturn Configuration.registry;\n+\t\t\treturn MicrometerConfiguration.registry;\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NjI4Nw==", "url": "https://github.com/reactor/reactor-core/pull/2265#discussion_r455776287", "bodyText": "Fix", "author": "ericbottard", "createdAt": "2020-07-16T13:15:12Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6072,6 +6073,11 @@ public int getPrefetch() {\n \t * Metrics are gathered on {@link Subscriber} events, and it is recommended to also\n \t * {@link #name(String) name} (and optionally {@link #tag(String, String) tag}) the\n \t * sequence.\n+\t * <p>\n+     * The {@link MeterRegistry} used by reactor can be configured via", "originalCommit": "127f69fa8ddb33042d29720174ddbf5b96db53b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d5871262723ec911637d68d8dab6489532bc7ecf", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Flux.java b/reactor-core/src/main/java/reactor/core/publisher/Flux.java\nindex 3ba228653..419ce7ab8 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Flux.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Flux.java\n\n@@ -6074,8 +6074,8 @@ public abstract class Flux<T> implements CorePublisher<T> {\n \t * {@link #name(String) name} (and optionally {@link #tag(String, String) tag}) the\n \t * sequence.\n \t * <p>\n-     * The {@link MeterRegistry} used by reactor can be configured via\n-     * {@link Metrics.Configuration#useRegistry(MeterRegistry)} prior to using this operator, the default being\n+\t * The {@link MeterRegistry} used by reactor can be configured via\n+\t * {@link Metrics.MicrometerConfiguration#useRegistry(MeterRegistry)} prior to using this operator, the default being\n \t * {@link io.micrometer.core.instrument.Metrics#globalRegistry}.\n \t * </p>\n \t *\n"}}, {"oid": "de3760e38c588a609674d0ef6ea7e10b5c58ccd6", "url": "https://github.com/reactor/reactor-core/commit/de3760e38c588a609674d0ef6ea7e10b5c58ccd6", "message": "fix 2253 redesign how MetricsRegistry is configured\n\nThis commit revisits the use of MicroMeter in project reactor by not\nsolely relying on MicroMeter's glogbalRegistry, but instead offering\na way to configure which registry to use prior to calling metrics().\nThe default value is still the globalRegistry, thus being fully backwards\ncompatible.", "committedDate": "2020-07-16T14:21:34Z", "type": "commit"}, {"oid": "d5871262723ec911637d68d8dab6489532bc7ecf", "url": "https://github.com/reactor/reactor-core/commit/d5871262723ec911637d68d8dab6489532bc7ecf", "message": "Address review comments", "committedDate": "2020-07-16T14:30:24Z", "type": "commit"}, {"oid": "d5871262723ec911637d68d8dab6489532bc7ecf", "url": "https://github.com/reactor/reactor-core/commit/d5871262723ec911637d68d8dab6489532bc7ecf", "message": "Address review comments", "committedDate": "2020-07-16T14:30:24Z", "type": "forcePushed"}]}