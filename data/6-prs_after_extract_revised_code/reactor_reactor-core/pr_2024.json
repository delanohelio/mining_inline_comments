{"pr_number": 2024, "pr_title": "Fix #2023 by handling \"empty `Callable`\" case in `Flux#collectList`", "pr_createdAt": "2020-01-27T12:57:00Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2024", "timeline": [{"oid": "89c8c96faafcbd5a36325ed4bfb20b741e9208d8", "url": "https://github.com/reactor/reactor-core/commit/89c8c96faafcbd5a36325ed4bfb20b741e9208d8", "message": "Fix #2023 by handling \"empty `Callable`\" case in `Flux#collectList`", "committedDate": "2020-01-27T12:53:57Z", "type": "commit"}, {"oid": "97e6c585de34f2e38dd2356283df0b02b57370bf", "url": "https://github.com/reactor/reactor-core/commit/97e6c585de34f2e38dd2356283df0b02b57370bf", "message": "always return a new list from `Fuseable.ScalarCallable` branch", "committedDate": "2020-01-27T13:16:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIzNDM4Mg==", "url": "https://github.com/reactor/reactor-core/pull/2024#discussion_r371234382", "bodyText": "@simonbasle I believe a single fromCallable is better than just + map and easier to follow. WDYT?", "author": "bsideup", "createdAt": "2020-01-27T13:19:51Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -3184,23 +3184,25 @@ public final T blockLast(Duration timeout) {\n \t\t\t\tcatch (Exception e) {\n \t\t\t\t\treturn Mono.error(e);\n \t\t\t\t}\n-\t\t\t\tif (v == null) {\n-\t\t\t\t\treturn Mono.onAssembly(new MonoSupplier<>(listSupplier()));\n-\t\t\t\t}\n-\t\t\t\treturn Mono.just(v).map(u -> {\n+\t\t\t\treturn Mono.fromCallable(() -> {", "originalCommit": "97e6c585de34f2e38dd2356283df0b02b57370bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIzOTc4OQ==", "url": "https://github.com/reactor/reactor-core/pull/2024#discussion_r371239789", "bodyText": "yeah that works for me", "author": "simonbasle", "createdAt": "2020-01-27T13:30:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIzNDM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2a44b7f8207616792076c312926ae510281e9466", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Flux.java b/reactor-core/src/main/java/reactor/core/publisher/Flux.java\nindex 94d4b71c4..9997095c4 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Flux.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Flux.java\n\n@@ -3184,25 +3184,25 @@ public abstract class Flux<T> implements Publisher<T> {\n \t\t\t\tcatch (Exception e) {\n \t\t\t\t\treturn Mono.error(e);\n \t\t\t\t}\n-\t\t\t\treturn Mono.fromCallable(() -> {\n+\t\t\t\treturn Mono.onAssembly(new MonoCallable<>(() -> {\n \t\t\t\t\tList<T> list = Flux.<T>listSupplier().get();\n \t\t\t\t\tif (v != null) {\n \t\t\t\t\t\tlist.add(v);\n \t\t\t\t\t}\n \t\t\t\t\treturn list;\n-\t\t\t\t});\n+\t\t\t\t}));\n \n \t\t\t}\n \t\t\t@SuppressWarnings(\"unchecked\")\n \t\t\tCallable<T> thiz = (Callable<T>)this;\n-\t\t\treturn Mono.fromCallable(() -> {\n+\t\t\treturn Mono.onAssembly(new MonoCallable<>(() -> {\n \t\t\t\tList<T> list = Flux.<T>listSupplier().get();\n \t\t\t\tT u = thiz.call();\n \t\t\t\tif (u != null) {\n \t\t\t\t\tlist.add(u);\n \t\t\t\t}\n \t\t\t\treturn list;\n-\t\t\t});\n+\t\t\t}));\n \t\t}\n \t\treturn Mono.onAssembly(new MonoCollectList<>(this));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIzNTg0Mw==", "url": "https://github.com/reactor/reactor-core/pull/2024#discussion_r371235843", "bodyText": "I would suggest to use the form onAssembly(new MonoCallable<>(...)) here and below, so that there is no additional step in the backtrace that corresponds to the fromCallable call.", "author": "simonbasle", "createdAt": "2020-01-27T13:22:52Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -3184,23 +3184,25 @@ public final T blockLast(Duration timeout) {\n \t\t\t\tcatch (Exception e) {\n \t\t\t\t\treturn Mono.error(e);\n \t\t\t\t}\n-\t\t\t\tif (v == null) {\n-\t\t\t\t\treturn Mono.onAssembly(new MonoSupplier<>(listSupplier()));\n-\t\t\t\t}\n-\t\t\t\treturn Mono.just(v).map(u -> {\n+\t\t\t\treturn Mono.fromCallable(() -> {", "originalCommit": "97e6c585de34f2e38dd2356283df0b02b57370bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a44b7f8207616792076c312926ae510281e9466", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Flux.java b/reactor-core/src/main/java/reactor/core/publisher/Flux.java\nindex 94d4b71c4..9997095c4 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Flux.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Flux.java\n\n@@ -3184,25 +3184,25 @@ public abstract class Flux<T> implements Publisher<T> {\n \t\t\t\tcatch (Exception e) {\n \t\t\t\t\treturn Mono.error(e);\n \t\t\t\t}\n-\t\t\t\treturn Mono.fromCallable(() -> {\n+\t\t\t\treturn Mono.onAssembly(new MonoCallable<>(() -> {\n \t\t\t\t\tList<T> list = Flux.<T>listSupplier().get();\n \t\t\t\t\tif (v != null) {\n \t\t\t\t\t\tlist.add(v);\n \t\t\t\t\t}\n \t\t\t\t\treturn list;\n-\t\t\t\t});\n+\t\t\t\t}));\n \n \t\t\t}\n \t\t\t@SuppressWarnings(\"unchecked\")\n \t\t\tCallable<T> thiz = (Callable<T>)this;\n-\t\t\treturn Mono.fromCallable(() -> {\n+\t\t\treturn Mono.onAssembly(new MonoCallable<>(() -> {\n \t\t\t\tList<T> list = Flux.<T>listSupplier().get();\n \t\t\t\tT u = thiz.call();\n \t\t\t\tif (u != null) {\n \t\t\t\t\tlist.add(u);\n \t\t\t\t}\n \t\t\t\treturn list;\n-\t\t\t});\n+\t\t\t}));\n \t\t}\n \t\treturn Mono.onAssembly(new MonoCollectList<>(this));\n \t}\n"}}, {"oid": "2a44b7f8207616792076c312926ae510281e9466", "url": "https://github.com/reactor/reactor-core/commit/2a44b7f8207616792076c312926ae510281e9466", "message": "Use `Mono.onAssembly` + `MonoCallable`", "committedDate": "2020-01-27T13:26:40Z", "type": "commit"}]}