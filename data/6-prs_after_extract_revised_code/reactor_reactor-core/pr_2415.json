{"pr_number": 2415, "pr_title": "fix #2377 Remove deprecated emit API", "pr_createdAt": "2020-10-06T10:27:26Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2415", "timeline": [{"oid": "8d28c1178069b96553f5b0eb814006bee640352f", "url": "https://github.com/reactor/reactor-core/commit/8d28c1178069b96553f5b0eb814006bee640352f", "message": "fix bad replace in stress tests", "committedDate": "2020-10-06T11:15:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3MzAxMA==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500273010", "bodyText": "isn't it a behaviour change of the test?", "author": "bsideup", "createdAt": "2020-10-06T13:24:54Z", "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -906,7 +907,7 @@ public void tryEmitNextWithNoSubscriberFailsOnlyIfNoCapacity() {\n \n \t\tStepVerifier.create(emitterProcessor)\n \t\t            .expectNext(1)\n-\t\t            .then(emitterProcessor::emitComplete)\n+\t\t            .then(emitterProcessor::tryEmitComplete)", "originalCommit": "8d28c1178069b96553f5b0eb814006bee640352f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg4MDEwMw==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500880103", "bodyText": "not really, since emitComplete doesn't do anything in particular", "author": "simonbasle", "createdAt": "2020-10-07T09:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3MzAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3MTg0Nw==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r501071847", "bodyText": "changed in latest commit", "author": "simonbasle", "createdAt": "2020-10-07T14:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3MzAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java b/reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java\nindex 87f426144..b4ad99278 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java\n\n@@ -907,7 +907,7 @@ public class EmitterProcessorTest {\n \n \t\tStepVerifier.create(emitterProcessor)\n \t\t            .expectNext(1)\n-\t\t            .then(emitterProcessor::tryEmitComplete)\n+\t\t            .then(() -> emitterProcessor.tryEmitComplete().orThrow())\n \t\t            .verifyComplete();\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NjUxMw==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500276513", "bodyText": "behaviour change?", "author": "bsideup", "createdAt": "2020-10-06T13:29:29Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "diffHunk": "@@ -721,25 +722,25 @@ public void normalWhileDoesntMatch() {\n \t\tStepVerifier.create(windowWhile.flatMap(Flux::materialize))\n \t\t            .expectSubscription()\n \t\t            .expectNoEvent(Duration.ofMillis(10))\n-\t\t            .then(() -> sp1.emitNext(1))\n+\t\t            .then(() -> sp1.emitNext(1, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(2))\n+\t\t            .then(() -> sp1.emitNext(2, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(3))\n+\t\t            .then(() -> sp1.emitNext(3, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(4))\n+\t\t            .then(() -> sp1.emitNext(4, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n \t\t            .expectNoEvent(Duration.ofMillis(10))\n-\t\t            .then(() -> sp1.emitNext(1))\n+\t\t            .then(() -> sp1.emitNext(1, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(2))\n+\t\t            .then(() -> sp1.emitNext(2, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(3))\n+\t\t            .then(() -> sp1.emitNext(3, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(4))\n+\t\t            .then(() -> sp1.emitNext(4, FAIL_FAST))\n \t\t            .expectNext(Signal.complete()) //closing window opened by 3\n \t\t            .expectNoEvent(Duration.ofMillis(10))\n-\t\t            .then(sp1::emitComplete)\n+\t\t            .then(sp1::tryEmitComplete)", "originalCommit": "8d28c1178069b96553f5b0eb814006bee640352f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java b/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java\nindex a121c60b7..65bee0cae 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java\n\n@@ -740,7 +740,7 @@ public class FluxWindowPredicateTest extends\n \t\t            .then(() -> sp1.emitNext(4, FAIL_FAST))\n \t\t            .expectNext(Signal.complete()) //closing window opened by 3\n \t\t            .expectNoEvent(Duration.ofMillis(10))\n-\t\t            .then(sp1::tryEmitComplete)\n+\t\t            .then(() -> sp1.emitComplete(FAIL_FAST))\n \t\t            //remainder window, not emitted\n \t\t            .expectComplete()\n \t\t            .verify(Duration.ofSeconds(1));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NjczNA==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500276734", "bodyText": "behaviour change?", "author": "bsideup", "createdAt": "2020-10-06T13:29:47Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "diffHunk": "@@ -683,28 +684,28 @@ public void normalWhileDoesntInitiallyMatch() {\n \t\tStepVerifier.create(windowWhile.flatMap(Flux::materialize))\n \t\t\t\t\t.expectSubscription()\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(() -> sp1.emitNext(1)) //closes initial, open 2nd\n+\t\t\t\t\t.then(() -> sp1.emitNext(1, FAIL_FAST)) //closes initial, open 2nd\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(2)) //closes second, open 3rd\n+\t\t\t\t\t.then(() -> sp1.emitNext(2, FAIL_FAST)) //closes second, open 3rd\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(3)) //emits 3\n+\t\t\t\t\t.then(() -> sp1.emitNext(3, FAIL_FAST)) //emits 3\n \t\t\t\t\t.expectNext(Signal.next(3))\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(() -> sp1.emitNext(4)) //closes 3rd, open 4th\n+\t\t\t\t\t.then(() -> sp1.emitNext(4, FAIL_FAST)) //closes 3rd, open 4th\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(5)) //closes 4th, open 5th\n+\t\t\t\t\t.then(() -> sp1.emitNext(5, FAIL_FAST)) //closes 4th, open 5th\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(6)) //emits 6\n+\t\t\t\t\t.then(() -> sp1.emitNext(6, FAIL_FAST)) //emits 6\n \t\t\t\t\t.expectNext(Signal.next(6))\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(() -> sp1.emitNext(7)) //closes 5th, open 6th\n+\t\t\t\t\t.then(() -> sp1.emitNext(7, FAIL_FAST)) //closes 5th, open 6th\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(8)) //closes 6th, open 7th\n+\t\t\t\t\t.then(() -> sp1.emitNext(8, FAIL_FAST)) //closes 6th, open 7th\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(9)) //emits 9\n+\t\t\t\t\t.then(() -> sp1.emitNext(9, FAIL_FAST)) //emits 9\n \t\t\t\t\t.expectNext(Signal.next(9))\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(sp1::emitComplete) // completion triggers completion of the last window (7th)\n+\t\t\t\t\t.then(sp1::tryEmitComplete) // completion triggers completion of the last window (7th)", "originalCommit": "8d28c1178069b96553f5b0eb814006bee640352f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java b/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java\nindex a121c60b7..65bee0cae 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java\n\n@@ -705,7 +705,7 @@ public class FluxWindowPredicateTest extends\n \t\t\t\t\t.then(() -> sp1.emitNext(9, FAIL_FAST)) //emits 9\n \t\t\t\t\t.expectNext(Signal.next(9))\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(sp1::tryEmitComplete) // completion triggers completion of the last window (7th)\n+\t\t\t\t\t.then(() -> sp1.emitComplete(FAIL_FAST)) // completion triggers completion of the last window (7th)\n \t\t\t\t\t.expectNext(Signal.complete())\n \t\t\t\t\t.expectComplete()\n \t\t\t\t\t.verify(Duration.ofSeconds(1));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NzgxNQ==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500277815", "bodyText": "behaviour change?", "author": "bsideup", "createdAt": "2020-10-06T13:31:05Z", "path": "reactor-core/src/test/java/reactor/core/publisher/SerializedManySinkTest.java", "diffHunk": "@@ -52,7 +52,7 @@ public void shouldNotThrowFromTryEmitNext() {\n \t\t\t\t\t            .as(\"emission\")\n \t\t\t\t\t            .isEqualTo(Emission.FAIL_OVERFLOW);\n \t\t            })\n-\t\t            .then(sink::emitComplete)\n+\t\t            .then(sink::tryEmitComplete)", "originalCommit": "8d28c1178069b96553f5b0eb814006bee640352f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/SerializedManySinkTest.java b/reactor-core/src/test/java/reactor/core/publisher/SerializedManySinkTest.java\nindex a7c180fc7..26c69afa8 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/SerializedManySinkTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/SerializedManySinkTest.java\n\n@@ -52,7 +52,7 @@ public class SerializedManySinkTest {\n \t\t\t\t\t            .as(\"emission\")\n \t\t\t\t\t            .isEqualTo(Emission.FAIL_OVERFLOW);\n \t\t            })\n-\t\t            .then(sink::tryEmitComplete)\n+\t\t            .then(() -> sink.tryEmitComplete().orThrow())\n \t\t            .verifyComplete();\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODMyNw==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500278327", "bodyText": "ditto", "author": "bsideup", "createdAt": "2020-10-06T13:31:38Z", "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -284,7 +285,7 @@ public void shouldNotThrowFromTryEmitNext() {\n \t\t\t\t\t            .as(\"emission\")\n \t\t\t\t\t            .isEqualTo(Sinks.Emission.FAIL_OVERFLOW);\n \t\t            })\n-\t\t            .then(processor::emitComplete)\n+\t\t            .then(processor::tryEmitComplete)", "originalCommit": "8d28c1178069b96553f5b0eb814006bee640352f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java b/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\nindex 45d0c4f46..26fafd682 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\n\n@@ -285,7 +285,7 @@ public class UnicastProcessorTest {\n \t\t\t\t\t            .as(\"emission\")\n \t\t\t\t\t            .isEqualTo(Sinks.Emission.FAIL_OVERFLOW);\n \t\t            })\n-\t\t            .then(processor::tryEmitComplete)\n+\t\t            .then(() -> processor.tryEmitComplete().orThrow())\n \t\t            .verifyComplete();\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODQ2NA==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500278464", "bodyText": "ditto", "author": "bsideup", "createdAt": "2020-10-06T13:31:48Z", "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -307,7 +308,7 @@ public void tryEmitNextWithNoSubscriberAndBoundedQueueFailsZeroSubscriber() {\n \n \t\tStepVerifier.create(unicastProcessor)\n \t\t            .expectNext(1)\n-\t\t            .then(unicastProcessor::emitComplete)\n+\t\t            .then(unicastProcessor::tryEmitComplete)", "originalCommit": "8d28c1178069b96553f5b0eb814006bee640352f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java b/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\nindex 45d0c4f46..26fafd682 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\n\n@@ -308,7 +308,7 @@ public class UnicastProcessorTest {\n \n \t\tStepVerifier.create(unicastProcessor)\n \t\t            .expectNext(1)\n-\t\t            .then(unicastProcessor::tryEmitComplete)\n+\t\t            .then(() -> unicastProcessor.tryEmitComplete().orThrow())\n \t\t            .verifyComplete();\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODYwNA==", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500278604", "bodyText": "ditto", "author": "bsideup", "createdAt": "2020-10-06T13:31:58Z", "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -333,13 +334,13 @@ public void emitNextWithNoSubscriberAndBoundedQueueIgnoresValueAndKeepsSinkOpen(\n \t\t//fill the buffer\n \t\tunicastProcessor.tryEmitNext(1);\n \t\t//this \"overflows\" but keeps the sink open. since there's no subscriber, there's no Context so no real discarding\n-\t\tunicastProcessor.emitNext(2);\n+\t\tunicastProcessor.emitNext(2, FAIL_FAST);\n \n \t\t//let's verify we get the buffer's content\n \t\tStepVerifier.create(unicastProcessor)\n \t\t            .expectNext(1) //from the buffer\n \t\t            .expectNoEvent(Duration.ofMillis(500))\n-\t\t            .then(unicastProcessor::emitComplete)\n+\t\t            .then(unicastProcessor::tryEmitComplete)", "originalCommit": "8d28c1178069b96553f5b0eb814006bee640352f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "chunk": "diff --git a/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java b/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\nindex 45d0c4f46..26fafd682 100644\n--- a/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\n+++ b/reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java\n\n@@ -340,7 +340,7 @@ public class UnicastProcessorTest {\n \t\tStepVerifier.create(unicastProcessor)\n \t\t            .expectNext(1) //from the buffer\n \t\t            .expectNoEvent(Duration.ofMillis(500))\n-\t\t            .then(unicastProcessor::tryEmitComplete)\n+\t\t            .then(() -> unicastProcessor.tryEmitComplete().orThrow())\n \t\t            .verifyComplete();\n \t}\n \n"}}, {"oid": "e531e6fa0c8d02d9ee63dfd4d4c9affc834497e0", "url": "https://github.com/reactor/reactor-core/commit/e531e6fa0c8d02d9ee63dfd4d4c9affc834497e0", "message": "fix #2377 Remove deprecated emit API", "committedDate": "2020-10-07T09:43:22Z", "type": "commit"}, {"oid": "a425f39c4105f8b30c53b730a72e5bc302111fb9", "url": "https://github.com/reactor/reactor-core/commit/a425f39c4105f8b30c53b730a72e5bc302111fb9", "message": "fix bad replace in stress tests", "committedDate": "2020-10-07T09:43:22Z", "type": "commit"}, {"oid": "a425f39c4105f8b30c53b730a72e5bc302111fb9", "url": "https://github.com/reactor/reactor-core/commit/a425f39c4105f8b30c53b730a72e5bc302111fb9", "message": "fix bad replace in stress tests", "committedDate": "2020-10-07T09:43:22Z", "type": "forcePushed"}, {"oid": "621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "url": "https://github.com/reactor/reactor-core/commit/621d2f0c20fd80d3da8b4d40c71273ed73cbe270", "message": "use either tryEmitComplete().orThrow() or emitComplete in tests", "committedDate": "2020-10-07T14:22:24Z", "type": "commit"}]}