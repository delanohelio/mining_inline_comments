{"pr_number": 2427, "pr_title": "fix #2426 Rename Emission to EmitResult", "pr_createdAt": "2020-10-08T11:07:27Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2427", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NDE3OQ==", "url": "https://github.com/reactor/reactor-core/pull/2427#discussion_r501644179", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * This is a particularly important distinction with regards to {@link #FAIL_CANCELLED} which means the sink is -now-\n          \n          \n            \n            \t * This is a particularly important distinction with regard to {@link #FAIL_CANCELLED} which means the sink is -now-", "author": "ericbottard", "createdAt": "2020-10-08T11:23:57Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -86,13 +86,14 @@ public static ManySpec many() {\n \t}\n \n \t/**\n-\t * Represents the immediate status of a signal emission. This does not guarantee that a signal is consumed,\n-\t * it simply refers to the sink state when an emit method is invoked. This is a particularly important\n-\t * distinction with regards to {@link #FAIL_CANCELLED} which means the sink is -now- interrupted and emission can't\n-\t * proceed. Consequently, it is possible to emit a signal and obtain an \"OK\" status even if an in-flight cancellation\n-\t * is happening. This is due to the async nature of these actions: producer emits while consumer can interrupt independently.\n+\t * Represents the immediate result of an emit attempt (eg. in {@link Sinks.Many#tryEmitNext(Object)}.\n+\t * This does not guarantee that a signal is consumed, it simply refers to the sink state when an emit method is invoked.\n+\t * This is a particularly important distinction with regards to {@link #FAIL_CANCELLED} which means the sink is -now-", "originalCommit": "468c7ccfbcb7aa45d630df1034c8b21fa58c061e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55157e7bd99f84919242b6a1dedabfb27d40d7c5", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex feebe1bc2..baf4ed028 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -88,7 +88,7 @@ public final class Sinks {\n \t/**\n \t * Represents the immediate result of an emit attempt (eg. in {@link Sinks.Many#tryEmitNext(Object)}.\n \t * This does not guarantee that a signal is consumed, it simply refers to the sink state when an emit method is invoked.\n-\t * This is a particularly important distinction with regards to {@link #FAIL_CANCELLED} which means the sink is -now-\n+\t * This is a particularly important distinction with regard to {@link #FAIL_CANCELLED} which means the sink is -now-\n \t * interrupted and emission can't proceed. Consequently, it is possible to emit a signal and obtain an \"OK\" status even\n \t * if an in-flight cancellation is happening. This is due to the async nature of these actions: producer emits while\n \t * consumer can interrupt independently.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NTg5NA==", "url": "https://github.com/reactor/reactor-core/pull/2427#discussion_r501645894", "bodyText": "These do not provide any added value, users can already discover the return type.", "author": "ericbottard", "createdAt": "2020-10-08T11:27:12Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -594,56 +595,56 @@ public Emission getReason() {\n \n \t\t/**\n \t\t * Try emitting a non-null element, generating an {@link Subscriber#onNext(Object) onNext} signal.\n-\t\t * The result of the attempt is represented as an {@link Emission}, which possibly indicates error cases.\n+\t\t * The result of the attempt is represented as an {@link EmitResult}, which possibly indicates error cases.\n \t\t * <p>\n \t\t * Might throw an unchecked exception in case of a fatal error downstream which cannot\n \t\t * be propagated to any asynchronous handler (aka a bubbling exception).\n \t\t *\n \t\t * @param t the value to emit, not null\n-\t\t * @return {@link Emission}\n+\t\t * @return {@link EmitResult}", "originalCommit": "468c7ccfbcb7aa45d630df1034c8b21fa58c061e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwNjA5Mw==", "url": "https://github.com/reactor/reactor-core/pull/2427#discussion_r501706093", "bodyText": "improved the comments", "author": "simonbasle", "createdAt": "2020-10-08T13:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NTg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "55157e7bd99f84919242b6a1dedabfb27d40d7c5", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex feebe1bc2..baf4ed028 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -601,7 +601,7 @@ public final class Sinks {\n \t\t * be propagated to any asynchronous handler (aka a bubbling exception).\n \t\t *\n \t\t * @param t the value to emit, not null\n-\t\t * @return {@link EmitResult}\n+\t\t * @return an {@link EmitResult}, which should be checked to distinguish different possible failures\n \t\t * @see Subscriber#onNext(Object)\n \t\t */\n \t\tEmitResult tryEmitNext(T t);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NjQ2Mw==", "url": "https://github.com/reactor/reactor-core/pull/2427#discussion_r501646463", "bodyText": "Same as before, this can be removed if there is nothing to add.", "author": "ericbottard", "createdAt": "2020-10-08T11:28:18Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -721,24 +722,24 @@ public Emission getReason() {\n \n \t\t/**\n \t\t * Try to complete the {@link Mono} without a value, generating only an {@link Subscriber#onComplete() onComplete} signal.\n-\t\t * The result of the attempt is represented as an {@link Emission}, which possibly indicates error cases.\n+\t\t * The result of the attempt is represented as an {@link EmitResult}, which possibly indicates error cases.\n \t\t *\n-\t\t * @return {@link Emission}\n+\t\t * @return {@link EmitResult}", "originalCommit": "468c7ccfbcb7aa45d630df1034c8b21fa58c061e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55157e7bd99f84919242b6a1dedabfb27d40d7c5", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\nindex feebe1bc2..baf4ed028 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/Sinks.java\n\n@@ -724,7 +724,7 @@ public final class Sinks {\n \t\t * Try to complete the {@link Mono} without a value, generating only an {@link Subscriber#onComplete() onComplete} signal.\n \t\t * The result of the attempt is represented as an {@link EmitResult}, which possibly indicates error cases.\n \t\t *\n-\t\t * @return {@link EmitResult}\n+\t\t * @return an {@link EmitResult}, which should be checked to distinguish different possible failures\n \t\t * @see #emitEmpty(EmitFailureHandler)\n \t\t * @see Subscriber#onComplete()\n \t\t */\n"}}, {"oid": "e5fa420bf7eb26d5e8906d245d120dd279f2af37", "url": "https://github.com/reactor/reactor-core/commit/e5fa420bf7eb26d5e8906d245d120dd279f2af37", "message": "fix #2426 Rename Emission to EmitResult", "committedDate": "2020-10-08T13:26:10Z", "type": "commit"}, {"oid": "55157e7bd99f84919242b6a1dedabfb27d40d7c5", "url": "https://github.com/reactor/reactor-core/commit/55157e7bd99f84919242b6a1dedabfb27d40d7c5", "message": "fix review comments around javadoc", "committedDate": "2020-10-08T13:26:15Z", "type": "commit"}, {"oid": "9a5a4720c567f448ad32d78f70c2c0b55106508e", "url": "https://github.com/reactor/reactor-core/commit/9a5a4720c567f448ad32d78f70c2c0b55106508e", "message": "also rename hasSucceeded/hasFailed methods for consistency", "committedDate": "2020-10-08T13:26:15Z", "type": "commit"}, {"oid": "9a5a4720c567f448ad32d78f70c2c0b55106508e", "url": "https://github.com/reactor/reactor-core/commit/9a5a4720c567f448ad32d78f70c2c0b55106508e", "message": "also rename hasSucceeded/hasFailed methods for consistency", "committedDate": "2020-10-08T13:26:15Z", "type": "forcePushed"}, {"oid": "031d283856c56e21d1938fab8bf47b8b3137cab2", "url": "https://github.com/reactor/reactor-core/commit/031d283856c56e21d1938fab8bf47b8b3137cab2", "message": "fix remaining Emission in refguide + jcstress test", "committedDate": "2020-10-08T14:22:52Z", "type": "commit"}]}