{"pr_number": 2313, "pr_title": "Polish metrics, following up on change #2253 and (#1803 #2304)", "pr_createdAt": "2020-08-07T16:16:47Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2313", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4MDk4NA==", "url": "https://github.com/reactor/reactor-core/pull/2313#discussion_r467180984", "bodyText": "this is not nearly enough, poll isn't managed and the ASYNC mode above isn't either", "author": "simonbasle", "createdAt": "2020-08-07T17:42:56Z", "path": "reactor-core/src/main/java/reactor/core/publisher/MonoMetricsFuseable.java", "diffHunk": "@@ -119,7 +105,7 @@ public void onComplete() {\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t\tdone = true;\n-\t\t\t\tFluxMetrics.recordOnComplete(sequenceName, commonTags, registry, subscribeToTerminateSample);\n+\t\t\t\tFluxMetrics.recordOnCompleteEmpty(sequenceName, commonTags, registry, subscribeToTerminateSample);", "originalCommit": "836d94cb26dc2610dbd0bf199405a5e1b61d4a18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14ceef2e8e56c9dad947f01bab441f9ea0b24362", "chunk": "diff --git a/reactor-core/src/main/java/reactor/core/publisher/MonoMetricsFuseable.java b/reactor-core/src/main/java/reactor/core/publisher/MonoMetricsFuseable.java\nindex 3f58785a4..3b7d08344 100644\n--- a/reactor-core/src/main/java/reactor/core/publisher/MonoMetricsFuseable.java\n+++ b/reactor-core/src/main/java/reactor/core/publisher/MonoMetricsFuseable.java\n\n@@ -105,7 +105,7 @@ final class MonoMetricsFuseable<T> extends InternalMonoOperator<T, T> implements\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t\tdone = true;\n-\t\t\t\tFluxMetrics.recordOnCompleteEmpty(sequenceName, commonTags, registry, subscribeToTerminateSample);\n+\t\t\t\tFluxMetrics.recordOnComplete(sequenceName, commonTags, registry, subscribeToTerminateSample);\n \t\t\t\tactual.onComplete();\n \t\t\t}\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4MTUwMg==", "url": "https://github.com/reactor/reactor-core/pull/2313#discussion_r467181502", "bodyText": "we'd need to test no-fusion and ASYNC case too !", "author": "simonbasle", "createdAt": "2020-08-07T17:44:01Z", "path": "reactor-core/src/withMicrometerTest/java/reactor/core/publisher/FluxMetricsFuseableTest.java", "diffHunk": "@@ -306,6 +300,55 @@ public void onNextTimerCountsFuseable() {\n \t\t\t\t.isEqualTo(126L);\n \t}\n \n+\t@Test\n+\tpublic void completeEmpty() {", "originalCommit": "836d94cb26dc2610dbd0bf199405a5e1b61d4a18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14ceef2e8e56c9dad947f01bab441f9ea0b24362", "chunk": "diff --git a/reactor-core/src/withMicrometerTest/java/reactor/core/publisher/FluxMetricsFuseableTest.java b/reactor-core/src/withMicrometerTest/java/reactor/core/publisher/FluxMetricsFuseableTest.java\nindex e55201682..2dbf1060c 100644\n--- a/reactor-core/src/withMicrometerTest/java/reactor/core/publisher/FluxMetricsFuseableTest.java\n+++ b/reactor-core/src/withMicrometerTest/java/reactor/core/publisher/FluxMetricsFuseableTest.java\n\n@@ -300,55 +306,6 @@ public class FluxMetricsFuseableTest {\n \t\t\t\t.isEqualTo(126L);\n \t}\n \n-\t@Test\n-\tpublic void completeEmpty() {\n-\t\tAssertSubscriber<Integer> subscriber = AssertSubscriber.create();\n-\t\tFluxMetricsFuseable.MetricsFuseableSubscriber<Integer> fuseable =\n-\t\t\t\tnew FluxMetricsFuseable.MetricsFuseableSubscriber<>(subscriber,\n-\t\t\t\t\t\tregistry, Clock.SYSTEM, \"foo\", Tags.empty());\n-\t\tfuseable.onSubscribe(new FluxPeekFuseableTest.AssertQueueSubscription<>());\n-\t\tfuseable.requestFusion(Fuseable.SYNC);\n-\t\tfuseable.poll();\n-\n-\t\tTimer stcCompleteCounter = registry.find(\"foo\" + METER_FLOW_DURATION)\n-\t\t\t\t.tags(Tags.of(TAG_ON_COMPLETE))\n-\t\t\t\t.timer();\n-\n-\t\tTimer stcCompleteEmptyCounter = registry.find(\"foo\" + METER_FLOW_DURATION)\n-\t\t\t\t.tags(Tags.of(TAG_ON_COMPLETE_EMPTY))\n-\t\t\t\t.timer();\n-\n-\t\tassertThat(stcCompleteCounter)\n-\t\t\t\t.as(\"complete with element\")\n-\t\t\t\t.isNull();\n-\n-\t\tassertThat(stcCompleteEmptyCounter.count())\n-\t\t\t\t.as(\"complete without any element\")\n-\t\t\t\t.isOne();\n-\t}\n-\n-\t@Test\n-\tpublic void completeWithElement() {\n-\t\tFlux<Integer> source = Flux.just(1, 2, 3);\n-\n-\t\tnew FluxMetricsFuseable<>(source).blockLast();\n-\n-\t\tTimer stcCompleteCounter = registry.find(REACTOR_DEFAULT_NAME + METER_FLOW_DURATION)\n-\t\t\t\t.tags(Tags.of(TAG_ON_COMPLETE))\n-\t\t\t\t.timer();\n-\n-\t\tTimer stcCompleteEmptyCounter = registry.find(REACTOR_DEFAULT_NAME + METER_FLOW_DURATION)\n-\t\t\t\t.tags(Tags.of(TAG_ON_COMPLETE_EMPTY))\n-\t\t\t\t.timer();\n-\n-\t\tassertThat(stcCompleteCounter.count())\n-\t\t\t\t.as(\"complete with element\")\n-\t\t\t\t.isOne();\n-\n-\t\tassertThat(stcCompleteEmptyCounter)\n-\t\t\t\t.as(\"complete without any element\")\n-\t\t\t\t.isNull();\n-\t}\n \n \t@Test\n \tpublic void subscribeToCompleteFuseable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4MTY4Ng==", "url": "https://github.com/reactor/reactor-core/pull/2313#discussion_r467181686", "bodyText": "we need to test ASYNC and SYNC fusion cases too!", "author": "simonbasle", "createdAt": "2020-08-07T17:44:24Z", "path": "reactor-core/src/withMicrometerTest/java/reactor/core/publisher/MonoMetricsFuseableTest.java", "diffHunk": "@@ -308,6 +301,51 @@ public void noOnNextTimerFuseable() {\n \t\tassertThat(nextMeter).isNull();\n \t}\n \n+\t@Test", "originalCommit": "836d94cb26dc2610dbd0bf199405a5e1b61d4a18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14ceef2e8e56c9dad947f01bab441f9ea0b24362", "chunk": "diff --git a/reactor-core/src/withMicrometerTest/java/reactor/core/publisher/MonoMetricsFuseableTest.java b/reactor-core/src/withMicrometerTest/java/reactor/core/publisher/MonoMetricsFuseableTest.java\nindex 7b86584cf..914b73c82 100644\n--- a/reactor-core/src/withMicrometerTest/java/reactor/core/publisher/MonoMetricsFuseableTest.java\n+++ b/reactor-core/src/withMicrometerTest/java/reactor/core/publisher/MonoMetricsFuseableTest.java\n\n@@ -301,52 +301,7 @@ public class MonoMetricsFuseableTest {\n \t\tassertThat(nextMeter).isNull();\n \t}\n \n-\t@Test\n-\tpublic void completeEmpty() {\n-\t\tMono<Integer> source = Mono.empty();\n-\n-\t\tnew MonoMetricsFuseable<>(source).block();\n-\n-\t\tTimer stcCompleteCounter = registry.find(REACTOR_DEFAULT_NAME + METER_FLOW_DURATION)\n-\t\t\t\t.tags(Tags.of(TAG_ON_COMPLETE))\n-\t\t\t\t.timer();\n-\n-\t\tTimer stcCompleteEmptyCounter = registry.find(REACTOR_DEFAULT_NAME + METER_FLOW_DURATION)\n-\t\t\t\t.tags(Tags.of(TAG_ON_COMPLETE_EMPTY))\n-\t\t\t\t.timer();\n-\n-\t\tassertThat(stcCompleteCounter)\n-\t\t\t\t.as(\"complete with element\")\n-\t\t\t\t.isNull();\n-\n-\t\tassertThat(stcCompleteEmptyCounter.count())\n-\t\t\t\t.as(\"complete without any element\")\n-\t\t\t\t.isOne();\n-\t}\n-\n-\t@Test\n-\tpublic void completeWithElement() {\n-\t\tMono<Integer> source = Mono.just(1);\n-\n-\t\tnew MonoMetricsFuseable<>(source).block();\n-\n-\t\tTimer stcCompleteCounter = registry.find(REACTOR_DEFAULT_NAME + METER_FLOW_DURATION)\n-\t\t\t\t.tags(Tags.of(TAG_ON_COMPLETE))\n-\t\t\t\t.timer();\n-\n-\t\tTimer stcCompleteEmptyCounter = registry.find(REACTOR_DEFAULT_NAME + METER_FLOW_DURATION)\n-\t\t\t\t.tags(Tags.of(TAG_ON_COMPLETE_EMPTY))\n-\t\t\t\t.timer();\n-\n-\t\tassertThat(stcCompleteCounter.count())\n-\t\t\t\t.as(\"complete with element\")\n-\t\t\t\t.isOne();\n-\n-\t\tassertThat(stcCompleteEmptyCounter)\n-\t\t\t\t.as(\"complete without any element\")\n-\t\t\t\t.isNull();\n-\t}\n-\n+\t\n \t@Test\n \tpublic void subscribeToCompleteFuseable() {\n \t\tMono<String> source = Mono.fromCallable(() -> {\n"}}, {"oid": "14ceef2e8e56c9dad947f01bab441f9ea0b24362", "url": "https://github.com/reactor/reactor-core/commit/14ceef2e8e56c9dad947f01bab441f9ea0b24362", "message": "[polish] fixup #2253 MonoMetricsFuseable also missing registry change", "committedDate": "2020-08-07T18:45:16Z", "type": "commit"}, {"oid": "4dd2b06eeda17f7648945509aba0aeed18043431", "url": "https://github.com/reactor/reactor-core/commit/4dd2b06eeda17f7648945509aba0aeed18043431", "message": "[polish] fixup #1803 Missing metrics complete[empty] of fuseable cases\n\nThis commit follows-up on #2304 since the fuseable variants were not\ncovered by the complete empty vs valued distinction.\n\nReviewed-in: #2313\n\nimprove test on FluxFuseableMetricsTest\n\ncover more ground and fix MonoMetricsFuseable", "committedDate": "2020-08-07T18:46:47Z", "type": "forcePushed"}, {"oid": "1e6829a14c8dabbd86b18f550f3e2b1cdec47572", "url": "https://github.com/reactor/reactor-core/commit/1e6829a14c8dabbd86b18f550f3e2b1cdec47572", "message": "[polish] fixup #1803 Missing metrics complete[empty] of fuseable cases\n\nThis commit follows-up on #2304 since the fuseable variants were not\ncovered by the complete empty vs valued distinction.\n\nReviewed-in: #2313", "committedDate": "2020-08-07T18:51:02Z", "type": "commit"}, {"oid": "1e6829a14c8dabbd86b18f550f3e2b1cdec47572", "url": "https://github.com/reactor/reactor-core/commit/1e6829a14c8dabbd86b18f550f3e2b1cdec47572", "message": "[polish] fixup #1803 Missing metrics complete[empty] of fuseable cases\n\nThis commit follows-up on #2304 since the fuseable variants were not\ncovered by the complete empty vs valued distinction.\n\nReviewed-in: #2313", "committedDate": "2020-08-07T18:51:02Z", "type": "forcePushed"}]}