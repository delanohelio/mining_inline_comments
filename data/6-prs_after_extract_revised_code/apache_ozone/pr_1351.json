{"pr_number": 1351, "pr_title": "HDDS-4121. Implement OmMetadataMangerImpl#getExpiredOpenKeys.", "pr_createdAt": "2020-08-25T21:11:53Z", "pr_url": "https://github.com/apache/ozone/pull/1351", "timeline": [{"oid": "cb41a81bec7a26d28d2b8da2339b201b00942cf3", "url": "https://github.com/apache/ozone/commit/cb41a81bec7a26d28d2b8da2339b201b00942cf3", "message": "Add key count parameter to MetadataManager#getExipedOpenKeys", "committedDate": "2020-08-24T14:27:49Z", "type": "commit"}, {"oid": "341a641cf07fcbee42add43cbe9f707e2402fb0c", "url": "https://github.com/apache/ozone/commit/341a641cf07fcbee42add43cbe9f707e2402fb0c", "message": "Implement OMMetadataManagerImpl#getExpiredOpenKeys", "committedDate": "2020-08-24T14:36:12Z", "type": "commit"}, {"oid": "64c275a3e39e630ae92c9965a1e0456860458e2b", "url": "https://github.com/apache/ozone/commit/64c275a3e39e630ae92c9965a1e0456860458e2b", "message": "Account for count parameter in OmMetadataManager#getExpiredOpenKeys", "committedDate": "2020-08-24T14:39:29Z", "type": "commit"}, {"oid": "a0476d4432f3b0db94952e6d7a1cca3e01ca98e0", "url": "https://github.com/apache/ozone/commit/a0476d4432f3b0db94952e6d7a1cca3e01ca98e0", "message": "Add count parameter for maximum number of open keys to return to KeyManager", "committedDate": "2020-08-24T15:44:09Z", "type": "commit"}, {"oid": "cc3c3a99a7ea73f2ea0910ddf91bc574621d75d7", "url": "https://github.com/apache/ozone/commit/cc3c3a99a7ea73f2ea0910ddf91bc574621d75d7", "message": "Create draft of unit test for getExpiredOpenKeys\n\nAdd the ability to manually set the creation time of OmKeyInfo objects for testing.", "committedDate": "2020-08-24T21:00:46Z", "type": "commit"}, {"oid": "00d54be3e9ca112c7cbb93eb0b2db750f2302c65", "url": "https://github.com/apache/ozone/commit/00d54be3e9ca112c7cbb93eb0b2db750f2302c65", "message": "Unit test for OmMetadataManagerImpl#getExpiredOpenKeys implemented and passing", "committedDate": "2020-08-25T14:20:58Z", "type": "commit"}, {"oid": "8c2ddf5974d9a8cc9e64276760c3008db9f27a24", "url": "https://github.com/apache/ozone/commit/8c2ddf5974d9a8cc9e64276760c3008db9f27a24", "message": "Create open key names using existing helper method instead of manually", "committedDate": "2020-08-25T14:58:16Z", "type": "commit"}, {"oid": "54ca61b296bb28d67bfb03109161af568d2363bc", "url": "https://github.com/apache/ozone/commit/54ca61b296bb28d67bfb03109161af568d2363bc", "message": "Add comments about cache usage", "committedDate": "2020-08-25T19:45:06Z", "type": "commit"}, {"oid": "747f1c6241feede8f2f6bc1769eafddcba5c0640", "url": "https://github.com/apache/ozone/commit/747f1c6241feede8f2f6bc1769eafddcba5c0640", "message": "Fix checkstyle violations", "committedDate": "2020-08-25T20:07:27Z", "type": "commit"}, {"oid": "2ce889dae178eae6eab6ac2ac41f239520990d3f", "url": "https://github.com/apache/ozone/commit/2ce889dae178eae6eab6ac2ac41f239520990d3f", "message": "Merge branch 'master' into HDDS-4121\n\n* master:\n  HDDS-4111. Keep the CSI.zh.md consistent with CSI.md (#1320)\n  HDDS-3654. Let backgroundCreator create pipeline for the support replication factors alternately (#984)\n  HDDS-4112. Improve SCM webui page performance (#1323)\n  HDDS-4074. [OFS] Implement AbstractFileSystem for RootedOzoneFileSystem (#1330)\n  HDDS-4144. Update version info in hadoop client dependency readme (#1348)\n  HDDS-4139. Update version number in upgrade tests (#1347)", "committedDate": "2020-08-25T20:08:05Z", "type": "commit"}, {"oid": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3", "url": "https://github.com/apache/ozone/commit/4a2578ec3f898c0d5b9f12f727d8da762d11d7c3", "message": "Clean up changes after viewing diffs with master", "committedDate": "2020-08-25T20:59:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTY1Mw==", "url": "https://github.com/apache/ozone/pull/1351#discussion_r476741653", "bodyText": "Here, we can collect just expired KeyNames.", "author": "bharatviswa504", "createdAt": "2020-08-25T21:15:26Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "diffHunk": "@@ -186,10 +186,11 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n    * the key name and all its associated block IDs. A pending open key has\n    * prefix #open# in OM DB.\n    *\n+   * @param count The maximum number of expired opne keys to return.\n    * @return a list of {@link BlockGroup} representing keys and blocks.\n    * @throws IOException\n    */\n-  List<BlockGroup> getExpiredOpenKeys() throws IOException;\n+  List<BlockGroup> getExpiredOpenKeys(int count) throws IOException;", "originalCommit": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTkyMQ==", "url": "https://github.com/apache/ozone/pull/1351#discussion_r476741921", "bodyText": "And also I think we might need last expired key also, as in next iteration we need to start from that one.", "author": "bharatviswa504", "createdAt": "2020-08-25T21:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NDE4MQ==", "url": "https://github.com/apache/ozone/pull/1351#discussion_r476754181", "bodyText": "You can ignore my 2nd comment, as delete expiredKeys will be done in a single iteration, those expired keys will not be there in the openKeyTable.", "author": "bharatviswa504", "createdAt": "2020-08-25T21:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "46b7be70eddc997f5d4c8bda7aeb1e6dd564adb6", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\nindex e1cf7dde6..658f503a1 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\n\n@@ -182,15 +182,15 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n   List<BlockGroup> getPendingDeletionKeys(int count) throws IOException;\n \n   /**\n-   * Returns a list of all still open key info. Which contains the info about\n-   * the key name and all its associated block IDs. A pending open key has\n-   * prefix #open# in OM DB.\n+   * Returns the names of up to {@code count} open keys that are older than\n+   * the configured expiration age.\n    *\n-   * @param count The maximum number of expired opne keys to return.\n-   * @return a list of {@link BlockGroup} representing keys and blocks.\n+   * @param count The maximum number of expired open keys to return.\n+   * @return a list of {@link String} representing the names of expired\n+   * open keys.\n    * @throws IOException\n    */\n-  List<BlockGroup> getExpiredOpenKeys(int count) throws IOException;\n+  List<String> getExpiredOpenKeys(int count) throws IOException;\n \n   /**\n    * Deletes a expired open key by its name. Called when a hanging key has been\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MjY0OA==", "url": "https://github.com/apache/ozone/pull/1351#discussion_r476742648", "bodyText": "opne -> open", "author": "bharatviswa504", "createdAt": "2020-08-25T21:17:21Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "diffHunk": "@@ -186,10 +186,11 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n    * the key name and all its associated block IDs. A pending open key has\n    * prefix #open# in OM DB.\n    *\n+   * @param count The maximum number of expired opne keys to return.", "originalCommit": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46b7be70eddc997f5d4c8bda7aeb1e6dd564adb6", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\nindex e1cf7dde6..658f503a1 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\n\n@@ -182,15 +182,15 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n   List<BlockGroup> getPendingDeletionKeys(int count) throws IOException;\n \n   /**\n-   * Returns a list of all still open key info. Which contains the info about\n-   * the key name and all its associated block IDs. A pending open key has\n-   * prefix #open# in OM DB.\n+   * Returns the names of up to {@code count} open keys that are older than\n+   * the configured expiration age.\n    *\n-   * @param count The maximum number of expired opne keys to return.\n-   * @return a list of {@link BlockGroup} representing keys and blocks.\n+   * @param count The maximum number of expired open keys to return.\n+   * @return a list of {@link String} representing the names of expired\n+   * open keys.\n    * @throws IOException\n    */\n-  List<BlockGroup> getExpiredOpenKeys(int count) throws IOException;\n+  List<String> getExpiredOpenKeys(int count) throws IOException;\n \n   /**\n    * Deletes a expired open key by its name. Called when a hanging key has been\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDgzNw==", "url": "https://github.com/apache/ozone/pull/1351#discussion_r477334837", "bodyText": "Is this line in the original documentation still relevant? It looks like open keys are placed in the open key table unprefixed.", "author": "errose28", "createdAt": "2020-08-26T14:14:41Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java", "diffHunk": "@@ -186,10 +186,11 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n    * the key name and all its associated block IDs. A pending open key has\n    * prefix #open# in OM DB.", "originalCommit": "4a2578ec3f898c0d5b9f12f727d8da762d11d7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46b7be70eddc997f5d4c8bda7aeb1e6dd564adb6", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\nindex e1cf7dde6..658f503a1 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/KeyManager.java\n\n@@ -182,15 +182,15 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n   List<BlockGroup> getPendingDeletionKeys(int count) throws IOException;\n \n   /**\n-   * Returns a list of all still open key info. Which contains the info about\n-   * the key name and all its associated block IDs. A pending open key has\n-   * prefix #open# in OM DB.\n+   * Returns the names of up to {@code count} open keys that are older than\n+   * the configured expiration age.\n    *\n-   * @param count The maximum number of expired opne keys to return.\n-   * @return a list of {@link BlockGroup} representing keys and blocks.\n+   * @param count The maximum number of expired open keys to return.\n+   * @return a list of {@link String} representing the names of expired\n+   * open keys.\n    * @throws IOException\n    */\n-  List<BlockGroup> getExpiredOpenKeys(int count) throws IOException;\n+  List<String> getExpiredOpenKeys(int count) throws IOException;\n \n   /**\n    * Deletes a expired open key by its name. Called when a hanging key has been\n"}}, {"oid": "46b7be70eddc997f5d4c8bda7aeb1e6dd564adb6", "url": "https://github.com/apache/ozone/commit/46b7be70eddc997f5d4c8bda7aeb1e6dd564adb6", "message": "Apply fixes from pull request comments\n\nMake getOpenExpiredKeys return a list of string key name strings instead of BlockGroups.\nFix documentation typo.", "committedDate": "2020-08-26T15:11:45Z", "type": "commit"}, {"oid": "e8b18d974044798013832c7bb53eb9fec889d2b8", "url": "https://github.com/apache/ozone/commit/e8b18d974044798013832c7bb53eb9fec889d2b8", "message": "Fix checkstyle and findbugs errors", "committedDate": "2020-08-26T17:42:06Z", "type": "commit"}, {"oid": "f9a0d418c9fecddf758c4e19add96529c442a1cc", "url": "https://github.com/apache/ozone/commit/f9a0d418c9fecddf758c4e19add96529c442a1cc", "message": "Fix missed checkstyle violation", "committedDate": "2020-08-26T17:48:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNjM1MQ==", "url": "https://github.com/apache/ozone/pull/1351#discussion_r479506351", "bodyText": "Unused code line", "author": "bharatviswa504", "createdAt": "2020-08-28T19:54:19Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/TestOmMetadataManager.java", "diffHunk": "@@ -521,6 +527,80 @@ public void testListKeysWithFewDeleteEntriesInCache() throws Exception {\n \n   }\n \n+  @Test\n+  public void testGetExpiredOpenKeys() throws Exception {\n+    final String bucketName = \"bucket\";\n+    final String volumeName = \"volume\";\n+    final int numExpiredOpenKeys = 4;\n+    final int numUnexpiredOpenKeys = 1;\n+    final long clientID = 1000L;\n+    // To create expired keys, they will be assigned a creation time twice as\n+    // old as the minimum expiration time.\n+    final long minExpiredTimeSeconds = ozoneConfiguration.getInt(\n+            OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS,\n+            OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS_DEFAULT);\n+    final long expiredAgeMillis =\n+            Instant.now().minus(minExpiredTimeSeconds * 2,\n+                    ChronoUnit.SECONDS).toEpochMilli();\n+\n+    // Add expired keys to open key table.\n+    // The method under test does not check for expired open keys in the\n+    // cache, since they will be picked up once the cache is flushed.\n+    Set<String> expiredKeys = new HashSet<>();\n+    for (int i = 0; i < numExpiredOpenKeys; i++) {\n+      OmKeyInfo keyInfo = TestOMRequestUtils.createOmKeyInfo(volumeName,\n+              bucketName, \"expired\" + i, HddsProtos.ReplicationType.RATIS,\n+              HddsProtos.ReplicationFactor.ONE, 0L, expiredAgeMillis);\n+\n+      TestOMRequestUtils.addKeyToTable(true, false,\n+              keyInfo, clientID, 0L, omMetadataManager);\n+\n+      String groupID = omMetadataManager.getOpenKey(volumeName, bucketName,\n+              keyInfo.getKeyName(), clientID);\n+      expiredKeys.add(groupID);\n+    }\n+\n+    // Add unexpired keys to open key table.\n+    for (int i = 0; i < numUnexpiredOpenKeys; i++) {\n+      OmKeyInfo keyInfo = TestOMRequestUtils.createOmKeyInfo(volumeName,\n+              bucketName, \"unexpired\" + i, HddsProtos.ReplicationType.RATIS,\n+              HddsProtos.ReplicationFactor.ONE);\n+\n+      TestOMRequestUtils.addKeyToTable(true, false,\n+              keyInfo, clientID, 0L, omMetadataManager);\n+\n+      String groupID = omMetadataManager.getOpenKey(volumeName, bucketName,", "originalCommit": "f9a0d418c9fecddf758c4e19add96529c442a1cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMzQyNg==", "url": "https://github.com/apache/ozone/pull/1351#discussion_r479513426", "bodyText": "Yeah. Removed it and pushing again.", "author": "errose28", "createdAt": "2020-08-28T20:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNjM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5189a167f1b5a8c9e9f8d1e369d362022fe55852", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/TestOmMetadataManager.java b/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/TestOmMetadataManager.java\nindex 78f755959..7c2d258e9 100644\n--- a/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/TestOmMetadataManager.java\n+++ b/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/TestOmMetadataManager.java\n\n@@ -568,9 +568,6 @@ public void testGetExpiredOpenKeys() throws Exception {\n \n       TestOMRequestUtils.addKeyToTable(true, false,\n               keyInfo, clientID, 0L, omMetadataManager);\n-\n-      String groupID = omMetadataManager.getOpenKey(volumeName, bucketName,\n-              keyInfo.getKeyName(), clientID);\n     }\n \n     // Test retrieving fewer expired keys than actually exist.\n"}}, {"oid": "5189a167f1b5a8c9e9f8d1e369d362022fe55852", "url": "https://github.com/apache/ozone/commit/5189a167f1b5a8c9e9f8d1e369d362022fe55852", "message": "Remove unused code line in TestOmMetadataManager#testGetExpiredOpenKeys", "committedDate": "2020-08-28T20:12:04Z", "type": "commit"}]}