{"pr_number": 629, "pr_title": "HDDS-3071. Datanodes unable to connect to recon in Secure Environment", "pr_createdAt": "2020-03-03T20:40:40Z", "pr_url": "https://github.com/apache/ozone/pull/629", "timeline": [{"oid": "428a2ba630e8a10320f2f1f1ccefa1c07e8122c9", "url": "https://github.com/apache/ozone/commit/428a2ba630e8a10320f2f1f1ccefa1c07e8122c9", "message": "HDDS-3071. Datanodes unable to connect to recon in Secure Environment", "committedDate": "2020-03-03T20:33:57Z", "type": "commit"}, {"oid": "fb525e3bb507fce25eadcba65638df4840699170", "url": "https://github.com/apache/ozone/commit/fb525e3bb507fce25eadcba65638df4840699170", "message": "HDDS-3071. Fix rat check failure.", "committedDate": "2020-03-03T20:48:27Z", "type": "commit"}, {"oid": "2727f3ebc2d99816eccf99e0e8f1482a0556444d", "url": "https://github.com/apache/ozone/commit/2727f3ebc2d99816eccf99e0e8f1482a0556444d", "message": "HDDS-3071. Fix findbugs failure.", "committedDate": "2020-03-03T21:12:39Z", "type": "commit"}, {"oid": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "url": "https://github.com/apache/ozone/commit/6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "message": "Merge remote-tracking branch 'upstream/master' into HDDS-3071-master", "committedDate": "2020-03-04T17:29:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MTc0MA==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387891740", "bodyText": "Can you add a description?", "author": "vivekratnavel", "createdAt": "2020-03-04T19:40:59Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.recon;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon service.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon\")\n+public class ReconConfig {\n+\n+  @Config(key = \"kerberos.principal\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n+      description = \"This Kerberos principal is used by the Recon service.\"\n+  )\n+  private String principal;\n+\n+  @Config(key = \"kerberos.keytab.file\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n+      description = \"The keytab file used by Recon daemon to login as \"+\n+          \"its service principal.\"\n+  )\n+  private String keytab;\n+\n+  @Config(key = \"security.client.datanode.container.protocol.acl\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n+      description = \"\"", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5809cb5fc8cd1e9cc19ac3f73f69dbd01239eaac", "chunk": "diff --git a/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java b/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\nindex a360af38c..09e93bed7 100644\n--- a/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\n+++ b/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\n\n@@ -49,7 +49,8 @@\n       type = ConfigType.STRING,\n       defaultValue = \"\",\n       tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n-      description = \"\"\n+      description = \"Comma separated acls (users, groups) allowing clients \" +\n+          \"accessing datanode container protocol\"\n   )\n   private String acl;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MjQxOA==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387892418", "bodyText": "nit: fix typo", "author": "vivekratnavel", "createdAt": "2020-03-04T19:42:15Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/ReconDatanodeProtocol.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.protocol;\n+\n+import org.apache.hadoop.hdds.annotation.InterfaceAudience;\n+import org.apache.hadoop.hdds.recon.ReconConfig;\n+import org.apache.hadoop.security.KerberosInfo;\n+\n+/**\n+ * The protocol spoken between datanodes and Recon. For specifics please the", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5809cb5fc8cd1e9cc19ac3f73f69dbd01239eaac", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/ReconDatanodeProtocol.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/ReconDatanodeProtocol.java\nindex 29cb783f9..c44a66f92 100644\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/ReconDatanodeProtocol.java\n+++ b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/ReconDatanodeProtocol.java\n\n@@ -22,8 +22,8 @@\n import org.apache.hadoop.security.KerberosInfo;\n \n /**\n- * The protocol spoken between datanodes and Recon. For specifics please the\n- * Protoc file that defines the parent protocol.\n+ * The protocol spoken between datanodes and Recon. For specifics please see\n+ * the Protoc file that defines the parent protocol.\n  */\n @KerberosInfo(serverPrincipal =\n         ReconConfig.ConfigStrings.OZONE_RECON_KERBEROS_PRINCIPAL_KEY)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NDM2MQ==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387894361", "bodyText": "nit: supported?", "author": "vivekratnavel", "createdAt": "2020-03-04T19:45:50Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java", "diffHunk": "@@ -179,21 +179,21 @@ private static void loginReconUser(OzoneConfiguration conf)\n \n     if (SecurityUtil.getAuthenticationMethod(conf).equals(\n         UserGroupInformation.AuthenticationMethod.KERBEROS)) {\n-\n+      ReconConfig reconConfig = conf.getObject(ReconConfig.class);\n       LOG.info(\"Ozone security is enabled. Attempting login for Recon user. \"\n-              + \"Principal: {}, keytab: {}\", conf.get(\n-          OZONE_RECON_KERBEROS_PRINCIPAL_KEY),\n-          conf.get(OZONE_RECON_KERBEROS_KEYTAB_FILE_KEY));\n-      \n+              + \"Principal: {}, keytab: {}\",\n+          reconConfig.getKerberosPrincipal(),\n+          reconConfig.getKerberosKeytab());\n       UserGroupInformation.setConfiguration(conf);\n-\n       InetSocketAddress socAddr = HddsUtils.getReconAddresses(conf);\n-      SecurityUtil.login(conf, OZONE_RECON_KERBEROS_KEYTAB_FILE_KEY,\n-          OZONE_RECON_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n+      SecurityUtil.login(conf,\n+          OZONE_RECON_KERBEROS_KEYTAB_FILE_KEY,\n+          OZONE_RECON_KERBEROS_PRINCIPAL_KEY,\n+          socAddr.getHostName());\n     } else {\n       throw new AuthenticationException(SecurityUtil.getAuthenticationMethod(\n-          conf) + \" authentication method not supported. Recon user login \"\n-          + \"failed.\");\n+          conf) + \" authentication method not support. \"", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5809cb5fc8cd1e9cc19ac3f73f69dbd01239eaac", "chunk": "diff --git a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java\nindex 2d018dc09..6fdd0cdc8 100644\n--- a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java\n+++ b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java\n\n@@ -192,7 +192,7 @@ private static void loginReconUser(OzoneConfiguration conf)\n           socAddr.getHostName());\n     } else {\n       throw new AuthenticationException(SecurityUtil.getAuthenticationMethod(\n-          conf) + \" authentication method not support. \"\n+          conf) + \" authentication method not supported. \"\n           + \"Recon user login failed.\");\n     }\n     LOG.info(\"Recon login successful.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNDIzNg==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387904236", "bodyText": "Can we add the newly introduced tag ConfigTag.RECON here for these keys?", "author": "xiaoyuyao", "createdAt": "2020-03-04T20:03:48Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.recon;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon service.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon\")\n+public class ReconConfig {\n+\n+  @Config(key = \"kerberos.principal\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNzc3Nw==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387907777", "bodyText": "Yes, I can use it. I could not get a general idea of when to use \"RECON\" config tag. Why do we have an \"OZONE\" config tag? :)", "author": "avijayanhwx", "createdAt": "2020-03-04T20:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNDIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "5809cb5fc8cd1e9cc19ac3f73f69dbd01239eaac", "chunk": "diff --git a/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java b/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\nindex a360af38c..09e93bed7 100644\n--- a/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\n+++ b/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\n\n@@ -49,7 +49,8 @@\n       type = ConfigType.STRING,\n       defaultValue = \"\",\n       tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n-      description = \"\"\n+      description = \"Comma separated acls (users, groups) allowing clients \" +\n+          \"accessing datanode container protocol\"\n   )\n   private String acl;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNDcxNg==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387904716", "bodyText": "The default value here should be * instead of empty.", "author": "xiaoyuyao", "createdAt": "2020-03-04T20:04:47Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.recon;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon service.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon\")\n+public class ReconConfig {\n+\n+  @Config(key = \"kerberos.principal\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n+      description = \"This Kerberos principal is used by the Recon service.\"\n+  )\n+  private String principal;\n+\n+  @Config(key = \"kerberos.keytab.file\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n+      description = \"The keytab file used by Recon daemon to login as \"+\n+          \"its service principal.\"\n+  )\n+  private String keytab;\n+\n+  @Config(key = \"security.client.datanode.container.protocol.acl\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNjk0OA==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387916948", "bodyText": "Good catch, will fix it.", "author": "avijayanhwx", "createdAt": "2020-03-04T20:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNDcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "5809cb5fc8cd1e9cc19ac3f73f69dbd01239eaac", "chunk": "diff --git a/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java b/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\nindex a360af38c..09e93bed7 100644\n--- a/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\n+++ b/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\n\n@@ -49,7 +49,8 @@\n       type = ConfigType.STRING,\n       defaultValue = \"\",\n       tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n-      description = \"\"\n+      description = \"Comma separated acls (users, groups) allowing clients \" +\n+          \"accessing datanode container protocol\"\n   )\n   private String acl;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNTExNg==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387905116", "bodyText": "Do we miss the getter and setter for the acl?", "author": "xiaoyuyao", "createdAt": "2020-03-04T20:05:41Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.recon;\n+\n+import org.apache.hadoop.hdds.conf.Config;\n+import org.apache.hadoop.hdds.conf.ConfigGroup;\n+import org.apache.hadoop.hdds.conf.ConfigTag;\n+import org.apache.hadoop.hdds.conf.ConfigType;\n+\n+/**\n+ * The configuration class for the Recon service.\n+ */\n+@ConfigGroup(prefix = \"ozone.recon\")\n+public class ReconConfig {\n+\n+  @Config(key = \"kerberos.principal\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n+      description = \"This Kerberos principal is used by the Recon service.\"\n+  )\n+  private String principal;\n+\n+  @Config(key = \"kerberos.keytab.file\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n+      description = \"The keytab file used by Recon daemon to login as \"+\n+          \"its service principal.\"\n+  )\n+  private String keytab;\n+\n+  @Config(key = \"security.client.datanode.container.protocol.acl\",\n+      type = ConfigType.STRING,\n+      defaultValue = \"\",\n+      tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n+      description = \"\"\n+  )\n+  private String acl;", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5809cb5fc8cd1e9cc19ac3f73f69dbd01239eaac", "chunk": "diff --git a/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java b/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\nindex a360af38c..09e93bed7 100644\n--- a/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\n+++ b/hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/recon/ReconConfig.java\n\n@@ -49,7 +49,8 @@\n       type = ConfigType.STRING,\n       defaultValue = \"\",\n       tags = { ConfigTag.SECURITY, ConfigTag.OZONE },\n-      description = \"\"\n+      description = \"Comma separated acls (users, groups) allowing clients \" +\n+          \"accessing datanode container protocol\"\n   )\n   private String acl;\n \n"}}, {"oid": "5809cb5fc8cd1e9cc19ac3f73f69dbd01239eaac", "url": "https://github.com/apache/ozone/commit/5809cb5fc8cd1e9cc19ac3f73f69dbd01239eaac", "message": "HDDS-3071. Address review comments.", "committedDate": "2020-03-04T20:06:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNzA0MQ==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387907041", "bodyText": "Given the reuse part is limited, it is better to move the new logic directly into addReconServer without introducing passiveSCM?", "author": "xiaoyuyao", "createdAt": "2020-03-04T20:09:32Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/SCMConnectionManager.java", "diffHunk": "@@ -160,22 +161,45 @@ private void addSCMServer(InetSocketAddress address, long sleepTime,\n             \"Ignoring the request.\");\n         return;\n       }\n-      RPC.setProtocolEngine(conf, StorageContainerDatanodeProtocolPB.class,\n-          ProtobufRpcEngine.class);\n-      long version =\n-          RPC.getProtocolVersion(StorageContainerDatanodeProtocolPB.class);\n-\n-      RetryPolicy retryPolicy =\n-          RetryPolicies.retryForeverWithFixedSleep(\n-              sleepTime, TimeUnit.MILLISECONDS);\n-      StorageContainerDatanodeProtocolPB rpcProxy = RPC.getProtocolProxy(\n-          StorageContainerDatanodeProtocolPB.class, version,\n-          address, UserGroupInformation.getCurrentUser(), conf,\n-          NetUtils.getDefaultSocketFactory(conf), getRpcTimeout(),\n-          retryPolicy).getProxy();\n-\n-      StorageContainerDatanodeProtocolClientSideTranslatorPB rpcClient =\n-          new StorageContainerDatanodeProtocolClientSideTranslatorPB(rpcProxy);\n+\n+      StorageContainerDatanodeProtocolClientSideTranslatorPB rpcClient;\n+      if (!passiveScm) {", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODEwNw==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387908107", "bodyText": "Yes, I agree. Will refactor this part.", "author": "avijayanhwx", "createdAt": "2020-03-04T20:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNzA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0b43aa5b7a4f1e7c37964d629dd10d71057cfa50", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/SCMConnectionManager.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/SCMConnectionManager.java\nindex 446175a21..814eeb4a2 100644\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/SCMConnectionManager.java\n+++ b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/SCMConnectionManager.java\n\n@@ -141,19 +174,6 @@ public void addSCMServer(InetSocketAddress address) throws IOException {\n    */\n   public void addReconServer(InetSocketAddress address) throws IOException {\n     LOG.info(\"Adding Recon Server : {}\", address.toString());\n-    addSCMServer(address, 60000, true);\n-  }\n-\n-  /**\n-   * Add scm server helper method.\n-   * @param address address\n-   * @param sleepTime sleepTime\n-   * @param passiveScm flag to specify passive SCM or not. Recon is passive SCM.\n-   * @throws IOException\n-   */\n-  private void addSCMServer(InetSocketAddress address, long sleepTime,\n-                            boolean passiveScm)\n-      throws IOException {\n     writeLock();\n     try {\n       if (scmMachines.containsKey(address)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwOTc5NA==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387909794", "bodyText": "NIT: can you highlight the changes relate to the issue? Or the change in this file is a refactor?", "author": "xiaoyuyao", "createdAt": "2020-03-04T20:15:14Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java", "diffHunk": "@@ -131,46 +133,24 @@ public SCMDatanodeProtocolServer(final OzoneConfiguration conf,\n \n     this.scm = scm;\n     this.eventPublisher = eventPublisher;\n-    final int handlerCount =\n-        conf.getInt(OZONE_SCM_HANDLER_COUNT_KEY,\n-            OZONE_SCM_HANDLER_COUNT_DEFAULT);\n \n     heartbeatDispatcher = new SCMDatanodeHeartbeatDispatcher(\n         scm.getScmNodeManager(), eventPublisher);\n \n-    RPC.setProtocolEngine(conf, StorageContainerDatanodeProtocolPB.class,", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b43aa5b7a4f1e7c37964d629dd10d71057cfa50", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java\nindex 2d7980e64..abc2f67a6 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java\n\n@@ -128,6 +128,8 @@ public SCMDatanodeProtocolServer(final OzoneConfiguration conf,\n                                    EventPublisher eventPublisher)\n       throws IOException {\n \n+    // This constructor has broken down to smaller methods so that Recon's\n+    // passive SCM server can override them.\n     Preconditions.checkNotNull(scm, \"SCM cannot be null\");\n     Preconditions.checkNotNull(eventPublisher, \"EventPublisher cannot be null\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMDY1NQ==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387910655", "bodyText": "NIT: \"Recon user\" => \"Recon service\"", "author": "xiaoyuyao", "createdAt": "2020-03-04T20:17:06Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java", "diffHunk": "@@ -179,21 +179,21 @@ private static void loginReconUser(OzoneConfiguration conf)\n \n     if (SecurityUtil.getAuthenticationMethod(conf).equals(\n         UserGroupInformation.AuthenticationMethod.KERBEROS)) {\n-\n+      ReconConfig reconConfig = conf.getObject(ReconConfig.class);\n       LOG.info(\"Ozone security is enabled. Attempting login for Recon user. \"", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b43aa5b7a4f1e7c37964d629dd10d71057cfa50", "chunk": "diff --git a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java\nindex 2d018dc09..9f0c17e90 100644\n--- a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java\n+++ b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/ReconServer.java\n\n@@ -180,7 +180,7 @@ private static void loginReconUser(OzoneConfiguration conf)\n     if (SecurityUtil.getAuthenticationMethod(conf).equals(\n         UserGroupInformation.AuthenticationMethod.KERBEROS)) {\n       ReconConfig reconConfig = conf.getObject(ReconConfig.class);\n-      LOG.info(\"Ozone security is enabled. Attempting login for Recon user. \"\n+      LOG.info(\"Ozone security is enabled. Attempting login for Recon service. \"\n               + \"Principal: {}, keytab: {}\",\n           reconConfig.getKerberosPrincipal(),\n           reconConfig.getKerberosKeytab());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTM3Mg==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387911372", "bodyText": "datanodeDetails toString is very verbose. You may choose to just log the hostname/ip here.", "author": "xiaoyuyao", "createdAt": "2020-03-04T20:18:39Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerManager.java", "diffHunk": "@@ -64,6 +69,22 @@ protected File getContainerDBPath(Configuration conf) {\n     return new File(metaDir, RECON_SCM_CONTAINER_DB);\n   }\n \n+  public void checkAndAddNewContainer(ContainerID containerID,\n+                                      DatanodeDetails datanodeDetails)\n+      throws IOException {\n+    if (!exists(containerID)) {\n+      LOG.info(\"New container {} got from {}.\", containerID, datanodeDetails);", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b43aa5b7a4f1e7c37964d629dd10d71057cfa50", "chunk": "diff --git a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerManager.java b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerManager.java\nindex bce1b0757..75d8ea3b4 100644\n--- a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerManager.java\n+++ b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerManager.java\n\n@@ -69,11 +69,18 @@ protected File getContainerDBPath(Configuration conf) {\n     return new File(metaDir, RECON_SCM_CONTAINER_DB);\n   }\n \n+  /**\n+   * Check and add new container if not already present in Recon.\n+   * @param containerID containerID to check.\n+   * @param datanodeDetails Datanode from where we got this container.\n+   * @throws IOException on Error.\n+   */\n   public void checkAndAddNewContainer(ContainerID containerID,\n                                       DatanodeDetails datanodeDetails)\n       throws IOException {\n     if (!exists(containerID)) {\n-      LOG.info(\"New container {} got from {}.\", containerID, datanodeDetails);\n+      LOG.info(\"New container {} got from {}.\", containerID,\n+          datanodeDetails.getHostName());\n       ContainerWithPipeline containerWithPipeline =\n           scmClient.getContainerWithPipeline(containerID.getId());\n       LOG.debug(\"Verified new container from SCM {} \",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNjE2OA==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387916168", "bodyText": "NIT: If we add a parameter Class<?> protocol for protocol? we don't need to overwrite getRpcServer in ReconDatanodeProtocolServer class.", "author": "xiaoyuyao", "createdAt": "2020-03-04T20:29:11Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java", "diffHunk": "@@ -407,14 +387,48 @@ private static String flatten(String input) {\n         .replaceAll(\" +\", \" \");\n   }\n \n-  protected String getScmDatanodeAddressKey() {\n+  protected RPC.Server getRpcServer(OzoneConfiguration conf,\n+      InetSocketAddress datanodeRpcAddr,", "originalCommit": "6a5481f2cb7bcd2d44e025bc13449eb5380e74ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0OTA0NQ==", "url": "https://github.com/apache/ozone/pull/629#discussion_r387949045", "bodyText": "@xiaoyuyao I have refactored this a little bit differently. Please let me know if this is OK.", "author": "avijayanhwx", "createdAt": "2020-03-04T21:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNjE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "0b43aa5b7a4f1e7c37964d629dd10d71057cfa50", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java\nindex 2d7980e64..abc2f67a6 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMDatanodeProtocolServer.java\n\n@@ -387,6 +405,14 @@ private static String flatten(String input) {\n         .replaceAll(\" +\", \" \");\n   }\n \n+  /**\n+   * Get the RPC server for this SCM server. Contains the protocol bindings.\n+   * @param conf ozone conf\n+   * @param datanodeRpcAddr Datanode RPC address for this server\n+   * @param metrics ProtocolMessageMetrics\n+   * @return RPC Server\n+   * @throws IOException on error.\n+   */\n   protected RPC.Server getRpcServer(OzoneConfiguration conf,\n       InetSocketAddress datanodeRpcAddr,\n       ProtocolMessageMetrics metrics) throws IOException {\n"}}, {"oid": "0b43aa5b7a4f1e7c37964d629dd10d71057cfa50", "url": "https://github.com/apache/ozone/commit/0b43aa5b7a4f1e7c37964d629dd10d71057cfa50", "message": "HDDS-3071. Address review comments (2).", "committedDate": "2020-03-04T21:35:26Z", "type": "commit"}, {"oid": "0022a271944444b161651b71db28e36633417a75", "url": "https://github.com/apache/ozone/commit/0022a271944444b161651b71db28e36633417a75", "message": "Merge remote-tracking branch 'upstream/master' into HDDS-3071-master", "committedDate": "2020-03-06T17:49:08Z", "type": "commit"}]}