{"pr_number": 1445, "pr_title": "HDDS-4272. Volume namespace: add usedNamespace and update it when create and delete bucket", "pr_createdAt": "2020-09-24T04:28:34Z", "pr_url": "https://github.com/apache/ozone/pull/1445", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5NTYzNg==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494095636", "bodyText": "How about we update the comment of this constructor by add @param usedNamespace - volume quota usage in counts\nThe description of the parameter is IMHO, feel free to correct it if you have an idea.", "author": "cxorm", "createdAt": "2020-09-24T07:27:27Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "diffHunk": "@@ -68,15 +69,16 @@\n       \"builder.\"})\n   private OmVolumeArgs(String adminName, String ownerName, String volume,\n       long quotaInBytes, long quotaInCounts, Map<String, String> metadata,\n-      long usedBytes, OmOzoneAclMap aclMap, long creationTime,\n-      long modificationTime, long objectID, long updateID) {\n+      long usedBytes, long usedNamespace, OmOzoneAclMap aclMap,\n+      long creationTime, long modificationTime, long objectID, long updateID) {", "originalCommit": "964463dfcb39a29e90639ae7300f992d7b2c6513", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NjI3Ng==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494576276", "bodyText": "I see. @param usedNamespace and updated both description of @param usedNamespace  and @param usedBytes", "author": "amaliujia", "createdAt": "2020-09-24T19:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5NTYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java\nindex b6882cc36c..7317ae6a43 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java\n\n@@ -57,28 +55,27 @@\n    * @param volume - volume name\n    * @param quotaInBytes - Volume Quota in bytes.\n    * @param quotaInCounts - Volume Quota in counts.\n+   * @param usedNamespace - Volume Namespace Quota Usage in counts.\n    * @param metadata - metadata map for custom key/value data.\n-   * @param usedBytes - Volume Quota Usage in bytes.\n    * @param aclMap - User to access rights map.\n    * @param creationTime - Volume creation time.\n-   * @param  objectID - ID of this object.\n+   * @param objectID - ID of this object.\n    * @param updateID - A sequence number that denotes the last update on this\n    * object. This is a monotonically increasing number.\n    */\n   @SuppressWarnings({\"checkstyle:ParameterNumber\", \"This is invoked from a \" +\n       \"builder.\"})\n   private OmVolumeArgs(String adminName, String ownerName, String volume,\n-      long quotaInBytes, long quotaInCounts, Map<String, String> metadata,\n-      long usedBytes, long usedNamespace, OmOzoneAclMap aclMap,\n-      long creationTime, long modificationTime, long objectID, long updateID) {\n+      long quotaInBytes, long quotaInCounts, long usedNamespace,\n+      Map<String, String> metadata, OmOzoneAclMap aclMap, long creationTime,\n+      long modificationTime, long objectID, long updateID) {\n     this.adminName = adminName;\n     this.ownerName = ownerName;\n     this.volume = volume;\n     this.quotaInBytes = quotaInBytes;\n     this.quotaInCounts = quotaInCounts;\n+    this.usedNamespace = usedNamespace;\n     this.metadata = metadata;\n-    this.usedBytes.add(usedBytes);\n-    this.usedNamespace.add(usedNamespace);\n     this.aclMap = aclMap;\n     this.creationTime = creationTime;\n     this.modificationTime = modificationTime;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5OTI2OQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494099269", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  omClientResponse = new OMBucketCreateResponse(omResponse.build(),\n          \n          \n            \n                      omBucketInfo);\n          \n          \n            \n                          omBucketInfo, omVolumeArgs);\n          \n          \n            \n                  omClientResponse = new OMBucketCreateResponse(omResponse.build(),\n          \n          \n            \n                      omBucketInfo, omVolumeArgs);\n          \n      \n    \n    \n  \n\nIt's my nit : could we use less indent here to keep consistent with this file", "author": "cxorm", "createdAt": "2020-09-24T07:33:48Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -209,7 +211,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setCreateBucketResponse(\n           CreateBucketResponse.newBuilder().build());\n       omClientResponse = new OMBucketCreateResponse(omResponse.build(),\n-          omBucketInfo);\n+              omBucketInfo, omVolumeArgs);", "originalCommit": "964463dfcb39a29e90639ae7300f992d7b2c6513", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTk3OQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494575979", "bodyText": "+1", "author": "amaliujia", "createdAt": "2020-09-24T19:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5OTI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\nindex c9f77e22b7..ff0c46a4fa 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n\n@@ -211,7 +215,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setCreateBucketResponse(\n           CreateBucketResponse.newBuilder().build());\n       omClientResponse = new OMBucketCreateResponse(omResponse.build(),\n-              omBucketInfo, omVolumeArgs);\n+          omBucketInfo, omVolumeArgs.copyObject());\n     } catch (IOException ex) {\n       exception = ex;\n       omClientResponse = new OMBucketCreateResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MTAwMg==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494161002", "bodyText": "Seems we don't use this variable,\nCould you be so kind as to let me know its usage if I miss something.", "author": "cxorm", "createdAt": "2020-09-24T09:12:06Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -270,6 +270,7 @@ private OzoneConsts() {\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n   public static final String USED_BYTES = \"usedBytes\";\n+  public static final String USED_NAMESPACE = \"usedNamespace\";", "originalCommit": "964463dfcb39a29e90639ae7300f992d7b2c6513", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTkzMA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494575930", "bodyText": "Indeed it is not used. Removed this constant and we can add it in the future when there is a need.", "author": "amaliujia", "createdAt": "2020-09-24T19:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MTAwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MjI4Nw==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494162287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n          \n          \n            \n                          omVolumeArgs);\n          \n          \n            \n                      omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n          \n          \n            \n                      omVolumeArgs);\n          \n      \n    \n    \n  \n\nJust nits.", "author": "cxorm", "createdAt": "2020-09-24T09:14:16Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketCreateResponse.java", "diffHunk": "@@ -66,6 +77,12 @@ public void addToDBBatch(OMMetadataManager omMetadataManager,\n             omBucketInfo.getBucketName());\n     omMetadataManager.getBucketTable().putWithBatch(batchOperation,\n         dbBucketKey, omBucketInfo);\n+    // update volume usedNamespace\n+    if (omVolumeArgs != null) {\n+      omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+              omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n+              omVolumeArgs);", "originalCommit": "964463dfcb39a29e90639ae7300f992d7b2c6513", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTcyNg==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494575726", "bodyText": "makes sense \ud83d\udc4d", "author": "amaliujia", "createdAt": "2020-09-24T19:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE2MjI4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3MTM2Mw==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494171363", "bodyText": "How about we update it this to add quota of used namespace or the same as update used namespace for volume in OMBucketDeleteRequest  ?", "author": "cxorm", "createdAt": "2020-09-24T09:29:04Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -201,6 +201,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // quotaAdd used namespace", "originalCommit": "964463dfcb39a29e90639ae7300f992d7b2c6513", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTY1NA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494575654", "bodyText": "used update used namespace for volume for both now.", "author": "amaliujia", "createdAt": "2020-09-24T19:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3MTM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\nindex c9f77e22b7..ff0c46a4fa 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n\n@@ -192,17 +192,21 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n         throw new OMException(\"Bucket already exist\", BUCKET_ALREADY_EXISTS);\n       }\n \n+      //Check quotaInBytes to update\n+      checkQuotaBytesValid(metadataManager, omVolumeArgs, omBucketInfo,\n+          volumeKey);\n+\n       // Add objectID and updateID\n       omBucketInfo.setObjectID(\n-          OMFileRequest.getObjIDFromTxId(transactionLogIndex));\n+          ozoneManager.getObjectIdFromTxId(transactionLogIndex));\n       omBucketInfo.setUpdateID(transactionLogIndex,\n           ozoneManager.isRatisEnabled());\n \n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n-      // quotaAdd used namespace\n-      omVolumeArgs.getUsedNamespace().add(1L);\n+      // update used namespace for volume\n+      omVolumeArgs.incrUsedNamespace(1L);\n \n       // Update table cache.\n       metadataManager.getBucketTable().addCacheEntry(new CacheKey<>(bucketKey),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NDIzMA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494174230", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // update used namespace for volumn\n          \n          \n            \n                  // update used namespace for volume", "author": "cxorm", "createdAt": "2020-09-24T09:33:45Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,6 +135,12 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volumn", "originalCommit": "964463dfcb39a29e90639ae7300f992d7b2c6513", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\nindex e7325aad0d..752889f2df 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n\n@@ -135,15 +135,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n-      // update used namespace for volumn\n+      // update used namespace for volume\n       String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n       OmVolumeArgs omVolumeArgs =\n               omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n-      omVolumeArgs.getUsedNamespace().add(-1L);\n+      omVolumeArgs.incrUsedNamespace(-1L);\n \n       // Add to double buffer.\n       omClientResponse = new OMBucketDeleteResponse(omResponse.build(),\n-          volumeName, bucketName);\n+          volumeName, bucketName, omVolumeArgs.copyObject());\n     } catch (IOException ex) {\n       success = false;\n       exception = ex;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NzAxOA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r494297018", "bodyText": "indent", "author": "captainzmc", "createdAt": "2020-09-24T13:00:39Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketDeleteResponse.java", "diffHunk": "@@ -64,6 +76,12 @@ public void addToDBBatch(OMMetadataManager omMetadataManager,\n         omMetadataManager.getBucketKey(volumeName, bucketName);\n     omMetadataManager.getBucketTable().deleteWithBatch(batchOperation,\n         dbBucketKey);\n+    // update volume usedNamespace\n+    if (omVolumeArgs != null) {\n+      omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+              omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n+              omVolumeArgs);", "originalCommit": "964463dfcb39a29e90639ae7300f992d7b2c6513", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "url": "https://github.com/apache/ozone/commit/f28ad7892f97a1f1d04c443b05340c5721d25c48", "message": "HDDS-4272. Volume namespace: add usedNamesapce and update it when create and delete bucket", "committedDate": "2020-12-11T04:44:01Z", "type": "commit"}, {"oid": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "url": "https://github.com/apache/ozone/commit/f28ad7892f97a1f1d04c443b05340c5721d25c48", "message": "HDDS-4272. Volume namespace: add usedNamesapce and update it when create and delete bucket", "committedDate": "2020-12-11T04:44:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcyOTkyOA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r540729928", "bodyText": "indent", "author": "captainzmc", "createdAt": "2020-12-11T06:55:00Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);", "originalCommit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\nindex 752889f2df..dbe361f9ff 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n\n@@ -138,8 +138,16 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // update used namespace for volume\n       String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n       OmVolumeArgs omVolumeArgs =\n-              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+          omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+      if (omVolumeArgs == null) {\n+        throw new OMException(\"Volume \" + volumeName + \" is not found\",\n+            OMException.ResultCodes.VOLUME_NOT_FOUND);\n+      }\n       omVolumeArgs.incrUsedNamespace(-1L);\n+      // Update table cache.\n+      omMetadataManager.getVolumeTable().addCacheEntry(\n+          new CacheKey<>(omMetadataManager.getVolumeKey(volumeName)),\n+          new CacheValue<>(Optional.of(omVolumeArgs), transactionLogIndex));\n \n       // Add to double buffer.\n       omClientResponse = new OMBucketDeleteResponse(omResponse.build(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDEwMw==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r540730103", "bodyText": "indent", "author": "captainzmc", "createdAt": "2020-12-11T06:55:34Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -885,6 +885,42 @@ public void testCheckUsedBytesQuota() throws IOException {\n     Assert.assertEquals(3, countException);\n   }\n \n+  @Test\n+  public void testVolumnUsedNamespace() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    String bucketName = UUID.randomUUID().toString();\n+    OzoneVolume volume = null;\n+\n+    store.createVolume(volumeName);\n+    volume = store.getVolume(volumeName);\n+    // The initial value should be 0\n+    Assert.assertEquals(0L, volume.getUsedNamespace());\n+    volume.createBucket(bucketName);\n+    // Used namespace should be 1\n+    volume = store.getVolume(volumeName);\n+    Assert.assertEquals(1L, volume.getUsedNamespace());\n+\n+    // test linked bucket\n+    String targetVolName = UUID.randomUUID().toString();\n+    store.createVolume(targetVolName);\n+    OzoneVolume volumeWithLinkedBucket = store.getVolume(targetVolName);\n+    String targetBucketName = UUID.randomUUID().toString();\n+    BucketArgs.Builder argsBuilder = new BucketArgs.Builder()\n+            .setStorageType(StorageType.DEFAULT)\n+            .setVersioning(false)\n+            .setSourceVolume(volumeName)\n+            .setSourceBucket(bucketName);", "originalCommit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "chunk": "diff --git a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\nindex 5ff9258773..f5b3d29a85 100644\n--- a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\n+++ b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\n\n@@ -886,12 +886,15 @@ public void testCheckUsedBytesQuota() throws IOException {\n   }\n \n   @Test\n-  public void testVolumnUsedNamespace() throws IOException {\n+  public void testVolumeUsedNamespace() throws IOException {\n     String volumeName = UUID.randomUUID().toString();\n     String bucketName = UUID.randomUUID().toString();\n+    String bucketName2 = UUID.randomUUID().toString();\n     OzoneVolume volume = null;\n \n-    store.createVolume(volumeName);\n+    // set Volume namespace quota as 1\n+    store.createVolume(volumeName,\n+        VolumeArgs.newBuilder().setQuotaInCounts(1L).build());\n     volume = store.getVolume(volumeName);\n     // The initial value should be 0\n     Assert.assertEquals(0L, volume.getUsedNamespace());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDY1Mg==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541040652", "bodyText": "As I see we defined usedBytes corresponding to quotaInBytes, so quotaInCounts  expected to be  quotaInNamespace. This is just my first feeling for this variable name. We could revisit these later in a separate JIRA to make this more understandable.", "author": "linyiqun", "createdAt": "2020-12-11T15:45:41Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -270,6 +270,7 @@ private OzoneConsts() {\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n   public static final String USED_BYTES = \"usedBytes\";\n+  public static final String USED_NAMESPACE = \"usedNamespace\";\n   public static final String QUOTA_IN_BYTES = \"quotaInBytes\";\n   public static final String QUOTA_IN_COUNTS = \"quotaInCounts\";", "originalCommit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5OTg4NQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541299885", "bodyText": "Yes. quotaInCounts seems not very readable to me as well :) I didn't change it in this PR as it is not relevant.\nCreated https://issues.apache.org/jira/browse/HDDS-4582 to revisit it later.", "author": "amaliujia", "createdAt": "2020-12-11T21:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNTc4OQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541335789", "bodyText": "I started to use quotaInNamespace in my new code. HDDS-4582 will be replacing existing quotaInCounts to quotaInNamesapce", "author": "amaliujia", "createdAt": "2020-12-11T21:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5Nzk4OA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541497988", "bodyText": "Makes sense to me.", "author": "linyiqun", "createdAt": "2020-12-12T04:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDY1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MzYzNQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541043635", "bodyText": "Not fully get this point, why this bucket create way will not increased the namespace quota? Just curious for this.", "author": "linyiqun", "createdAt": "2020-12-11T15:50:00Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -885,6 +885,42 @@ public void testCheckUsedBytesQuota() throws IOException {\n     Assert.assertEquals(3, countException);\n   }\n \n+  @Test\n+  public void testVolumnUsedNamespace() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    String bucketName = UUID.randomUUID().toString();\n+    OzoneVolume volume = null;\n+\n+    store.createVolume(volumeName);\n+    volume = store.getVolume(volumeName);\n+    // The initial value should be 0\n+    Assert.assertEquals(0L, volume.getUsedNamespace());\n+    volume.createBucket(bucketName);\n+    // Used namespace should be 1\n+    volume = store.getVolume(volumeName);\n+    Assert.assertEquals(1L, volume.getUsedNamespace());\n+\n+    // test linked bucket\n+    String targetVolName = UUID.randomUUID().toString();\n+    store.createVolume(targetVolName);\n+    OzoneVolume volumeWithLinkedBucket = store.getVolume(targetVolName);\n+    String targetBucketName = UUID.randomUUID().toString();\n+    BucketArgs.Builder argsBuilder = new BucketArgs.Builder()\n+            .setStorageType(StorageType.DEFAULT)\n+            .setVersioning(false)\n+            .setSourceVolume(volumeName)\n+            .setSourceBucket(bucketName);\n+    volumeWithLinkedBucket.createBucket(targetBucketName, argsBuilder.build());\n+    // Used namespace should be 0 because linked bucket does not consume\n+    // namespace quota\n+    Assert.assertEquals(0L, volumeWithLinkedBucket.getUsedNamespace());", "originalCommit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMjQwOA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541302408", "bodyText": "@amaliujia , could you add a new UT for bucket link case? Linked bucket should not be counted in the namespace quota.\n\nThis comes from one of the comment above. I consider this is more like a decision that linked bucket should not consume quota. At least linked bucket should not consume space quota. I think to make consistent, do not apply namespace quota also makes sense.", "author": "amaliujia", "createdAt": "2020-12-11T21:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MzYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "chunk": "diff --git a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\nindex 5ff9258773..f5b3d29a85 100644\n--- a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\n+++ b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\n\n@@ -886,12 +886,15 @@ public void testCheckUsedBytesQuota() throws IOException {\n   }\n \n   @Test\n-  public void testVolumnUsedNamespace() throws IOException {\n+  public void testVolumeUsedNamespace() throws IOException {\n     String volumeName = UUID.randomUUID().toString();\n     String bucketName = UUID.randomUUID().toString();\n+    String bucketName2 = UUID.randomUUID().toString();\n     OzoneVolume volume = null;\n \n-    store.createVolume(volumeName);\n+    // set Volume namespace quota as 1\n+    store.createVolume(volumeName,\n+        VolumeArgs.newBuilder().setQuotaInCounts(1L).build());\n     volume = store.getVolume(volumeName);\n     // The initial value should be 0\n     Assert.assertEquals(0L, volume.getUsedNamespace());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDc0MQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541044741", "bodyText": "Can you add an empty check for omVolumeArgs before updating the namespace used?\n    if (volumeArgs == null) {\n      throw new OMException(\"Volume \" + volume + \" is not found\",\n          OMException.ResultCodes.VOLUME_NOT_FOUND);\n    }", "author": "linyiqun", "createdAt": "2020-12-11T15:51:31Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);", "originalCommit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\nindex 752889f2df..dbe361f9ff 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n\n@@ -138,8 +138,16 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // update used namespace for volume\n       String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n       OmVolumeArgs omVolumeArgs =\n-              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+          omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+      if (omVolumeArgs == null) {\n+        throw new OMException(\"Volume \" + volumeName + \" is not found\",\n+            OMException.ResultCodes.VOLUME_NOT_FOUND);\n+      }\n       omVolumeArgs.incrUsedNamespace(-1L);\n+      // Update table cache.\n+      omMetadataManager.getVolumeTable().addCacheEntry(\n+          new CacheKey<>(omMetadataManager.getVolumeKey(volumeName)),\n+          new CacheValue<>(Optional.of(omVolumeArgs), transactionLogIndex));\n \n       // Add to double buffer.\n       omClientResponse = new OMBucketDeleteResponse(omResponse.build(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0Nzc4NQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541047785", "bodyText": "We should also update the volume table cache like above, as omVolumeArgs be updated.", "author": "linyiqun", "createdAt": "2020-12-11T15:55:59Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -205,14 +205,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // update used namespace for volume\n+      omVolumeArgs.incrUsedNamespace(1L);\n+\n       // Update table cache.\n       metadataManager.getBucketTable().addCacheEntry(new CacheKey<>(bucketKey),\n           new CacheValue<>(Optional.of(omBucketInfo), transactionLogIndex));\n ", "originalCommit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwNTE0OQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541305149", "bodyText": "O I see. it make senses.", "author": "amaliujia", "createdAt": "2020-12-11T21:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0Nzc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\nindex ff0c46a4fa..e884fe3807 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n\n@@ -205,10 +205,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // check namespace quota\n+      checkQuotaInNamespace(omVolumeArgs, 1L);\n+\n       // update used namespace for volume\n       omVolumeArgs.incrUsedNamespace(1L);\n \n       // Update table cache.\n+      metadataManager.getVolumeTable().addCacheEntry(new CacheKey<>(volumeKey),\n+          new CacheValue<>(Optional.of(omVolumeArgs), transactionLogIndex));\n       metadataManager.getBucketTable().addCacheEntry(new CacheKey<>(bucketKey),\n           new CacheValue<>(Optional.of(omBucketInfo), transactionLogIndex));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0ODM2OA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541048368", "bodyText": "Volume  table cache also need to be updated here as we update table cache in OMBucketCreateRequest.java", "author": "linyiqun", "createdAt": "2020-12-11T15:56:42Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+      omVolumeArgs.incrUsedNamespace(-1L);\n+", "originalCommit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\nindex 752889f2df..dbe361f9ff 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n\n@@ -138,8 +138,16 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // update used namespace for volume\n       String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n       OmVolumeArgs omVolumeArgs =\n-              omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+          omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+      if (omVolumeArgs == null) {\n+        throw new OMException(\"Volume \" + volumeName + \" is not found\",\n+            OMException.ResultCodes.VOLUME_NOT_FOUND);\n+      }\n       omVolumeArgs.incrUsedNamespace(-1L);\n+      // Update table cache.\n+      omMetadataManager.getVolumeTable().addCacheEntry(\n+          new CacheKey<>(omMetadataManager.getVolumeKey(volumeName)),\n+          new CacheValue<>(Optional.of(omVolumeArgs), transactionLogIndex));\n \n       // Add to double buffer.\n       omClientResponse = new OMBucketDeleteResponse(omResponse.build(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1MDgxNQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541050815", "bodyText": "Before this update, we need to do the namespace quota check in checkQuotaBytesValid.", "author": "linyiqun", "createdAt": "2020-12-11T16:00:08Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -205,14 +205,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // update used namespace for volume\n+      omVolumeArgs.incrUsedNamespace(1L);\n+", "originalCommit": "f28ad7892f97a1f1d04c443b05340c5721d25c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNjU1Nw==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541336557", "bodyText": "Also updated the test to test quota exceed case.", "author": "amaliujia", "createdAt": "2020-12-11T21:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1MDgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\nindex ff0c46a4fa..e884fe3807 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n\n@@ -205,10 +205,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // Add default acls from volume.\n       addDefaultAcls(omBucketInfo, omVolumeArgs);\n \n+      // check namespace quota\n+      checkQuotaInNamespace(omVolumeArgs, 1L);\n+\n       // update used namespace for volume\n       omVolumeArgs.incrUsedNamespace(1L);\n \n       // Update table cache.\n+      metadataManager.getVolumeTable().addCacheEntry(new CacheKey<>(volumeKey),\n+          new CacheValue<>(Optional.of(omVolumeArgs), transactionLogIndex));\n       metadataManager.getBucketTable().addCacheEntry(new CacheKey<>(bucketKey),\n           new CacheValue<>(Optional.of(omBucketInfo), transactionLogIndex));\n \n"}}, {"oid": "505bf7b840090cba7127b4db6506dbb85a22bddd", "url": "https://github.com/apache/ozone/commit/505bf7b840090cba7127b4db6506dbb85a22bddd", "message": "fixup! comments addressed.", "committedDate": "2020-12-11T21:56:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5Njk4MA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541496980", "bodyText": "Can you use omVolumeArgs.getQuotaInCounts() != OzoneConsts.QUOTA_RESET to replace above condition check? That will be the better check in case maybe OzoneConsts.QUOTA_RESET value can be changed to the positive number.", "author": "linyiqun", "createdAt": "2020-12-12T04:21:18Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java", "diffHunk": "@@ -301,6 +309,25 @@ private BucketEncryptionInfoProto getBeinfo(\n     return bekb.build();\n   }\n \n+  /**\n+   * Check namespace quota.\n+   */\n+  private void checkQuotaInNamespace(OmVolumeArgs omVolumeArgs,\n+      long allocatedNamespace) throws IOException {\n+    if (omVolumeArgs.getQuotaInCounts() > OzoneConsts.QUOTA_RESET) {\n+      long usedNamespace = omVolumeArgs.getUsedNamespace();", "originalCommit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzY1OA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541523658", "bodyText": "make senses! Done!", "author": "amaliujia", "createdAt": "2020-12-12T07:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5Njk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "cdfe3ba9a2307ca4c8c6b9d65576bc0e1feedabb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\nindex e884fe3807..e4a20df5ed 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketCreateRequest.java\n\n@@ -314,7 +314,7 @@ private BucketEncryptionInfoProto getBeinfo(\n    */\n   private void checkQuotaInNamespace(OmVolumeArgs omVolumeArgs,\n       long allocatedNamespace) throws IOException {\n-    if (omVolumeArgs.getQuotaInCounts() > OzoneConsts.QUOTA_RESET) {\n+    if (omVolumeArgs.getQuotaInCounts() != OzoneConsts.QUOTA_RESET) {\n       long usedNamespace = omVolumeArgs.getUsedNamespace();\n       long quotaInNamespace = omVolumeArgs.getQuotaInCounts();\n       long toUseNamespaceInTotal = usedNamespace + allocatedNamespace;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5NzIyOQ==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541497229", "bodyText": "We could directly use volumeKey, don't need to invoke omMetadataManager.getVolumeKey again.", "author": "linyiqun", "createdAt": "2020-12-12T04:22:47Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java", "diffHunk": "@@ -134,9 +135,23 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omResponse.setDeleteBucketResponse(\n           DeleteBucketResponse.newBuilder().build());\n \n+      // update used namespace for volume\n+      String volumeKey = omMetadataManager.getVolumeKey(volumeName);\n+      OmVolumeArgs omVolumeArgs =\n+          omMetadataManager.getVolumeTable().getReadCopy(volumeKey);\n+      if (omVolumeArgs == null) {\n+        throw new OMException(\"Volume \" + volumeName + \" is not found\",\n+            OMException.ResultCodes.VOLUME_NOT_FOUND);\n+      }\n+      omVolumeArgs.incrUsedNamespace(-1L);\n+      // Update table cache.\n+      omMetadataManager.getVolumeTable().addCacheEntry(\n+          new CacheKey<>(omMetadataManager.getVolumeKey(volumeName)),", "originalCommit": "505bf7b840090cba7127b4db6506dbb85a22bddd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzcwNA==", "url": "https://github.com/apache/ozone/pull/1445#discussion_r541523704", "bodyText": "O yes :)", "author": "amaliujia", "createdAt": "2020-12-12T07:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5NzIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cdfe3ba9a2307ca4c8c6b9d65576bc0e1feedabb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\nindex dbe361f9ff..7b165b24a5 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/bucket/OMBucketDeleteRequest.java\n\n@@ -146,7 +146,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       omVolumeArgs.incrUsedNamespace(-1L);\n       // Update table cache.\n       omMetadataManager.getVolumeTable().addCacheEntry(\n-          new CacheKey<>(omMetadataManager.getVolumeKey(volumeName)),\n+          new CacheKey<>(volumeKey),\n           new CacheValue<>(Optional.of(omVolumeArgs), transactionLogIndex));\n \n       // Add to double buffer.\n"}}, {"oid": "cdfe3ba9a2307ca4c8c6b9d65576bc0e1feedabb", "url": "https://github.com/apache/ozone/commit/cdfe3ba9a2307ca4c8c6b9d65576bc0e1feedabb", "message": "fjxup! address comments", "committedDate": "2020-12-12T07:29:21Z", "type": "commit"}, {"oid": "b8b6e4822903ef6b074a7115d9cdf6bc24cd94af", "url": "https://github.com/apache/ozone/commit/b8b6e4822903ef6b074a7115d9cdf6bc24cd94af", "message": "trigger new CI check", "committedDate": "2020-12-12T19:55:39Z", "type": "commit"}, {"oid": "7268bec38515ea7db1d4cb2c762eeb43e62f9224", "url": "https://github.com/apache/ozone/commit/7268bec38515ea7db1d4cb2c762eeb43e62f9224", "message": "fixup! fix UT", "committedDate": "2020-12-13T00:30:51Z", "type": "commit"}, {"oid": "42d7b3354c0b08fd7f12e5579b5d4a390dffb64e", "url": "https://github.com/apache/ozone/commit/42d7b3354c0b08fd7f12e5579b5d4a390dffb64e", "message": "fixup! fix CI", "committedDate": "2020-12-13T03:02:13Z", "type": "commit"}]}