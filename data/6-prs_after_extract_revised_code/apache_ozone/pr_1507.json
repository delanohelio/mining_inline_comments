{"pr_number": 1507, "pr_title": "HDDS-4307.Start Trash Emptier in Ozone Manager", "pr_createdAt": "2020-10-20T14:43:51Z", "pr_url": "https://github.com/apache/ozone/pull/1507", "timeline": [{"oid": "b07eebd22425878d46085618bf71e8840b1dc8bc", "url": "https://github.com/apache/ozone/commit/b07eebd22425878d46085618bf71e8840b1dc8bc", "message": "HDDS-4307.Start Background Service for Trash Deletion in Ozone Manager", "committedDate": "2020-10-20T14:14:59Z", "type": "commit"}, {"oid": "9341b92ccb4e7416aa5881896035d8b2300cf939", "url": "https://github.com/apache/ozone/commit/9341b92ccb4e7416aa5881896035d8b2300cf939", "message": "remove wildcard import", "committedDate": "2020-10-20T14:54:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyODI3NA==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508628274", "bodyText": "The indentation is at 4, it should be at 2.", "author": "mukul1987", "createdAt": "2020-10-20T15:43:38Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\ndeleted file mode 100644\nindex 555720a03..000000000\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\n+++ /dev/null\n\n@@ -1,114 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership.  The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.hadoop.ozone.om;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Trash;\n-import org.apache.hadoop.hdds.utils.BackgroundService;\n-import org.apache.hadoop.hdds.utils.BackgroundTask;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n-import org.apache.hadoop.ozone.OzoneConsts;\n-import org.apache.hadoop.security.SecurityUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n-\n-/**\n- * Background Service to empty keys that are moved to Trash.\n- */\n-public class TrashDeletingService extends BackgroundService {\n-\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(TrashDeletingService.class);\n-\n-    // Use single thread for  now\n-    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n-\n-    private OzoneManager ozoneManager;\n-\n-    public void setFsConf(Configuration fsConf) {\n-        this.fsConf = fsConf;\n-    }\n-\n-    private Configuration fsConf;\n-\n-    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n-        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n-        this.ozoneManager = ozoneManager;\n-        fsConf = new Configuration();\n-    }\n-\n-\n-    @Override\n-    public BackgroundTaskQueue getTasks() {\n-        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n-        String rootPath = String.format(\"%s://%s/\",\n-                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n-        // Configuration object where the rootpath is set to an OFS Uri.\n-        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n-        FileSystem fs = null;\n-        try {\n-            fs = SecurityUtil.doAsLoginUser(\n-                    new PrivilegedExceptionAction<FileSystem>() {\n-                        @Override\n-                        public FileSystem run() throws IOException {\n-                            return FileSystem.get(fsConf);\n-                        }\n-                    });\n-        } catch (IOException e) {\n-            LOG.error(\"Cannot instantiate filesystem instance\");\n-        }\n-        queue.add(new TrashDeletingTask(fs,fsConf));\n-        return queue;\n-    }\n-\n-    /**\n-     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n-     */\n-    private class TrashDeletingTask implements BackgroundTask {\n-\n-        FileSystem fs;\n-        Configuration conf;\n-\n-        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n-            this.fs = fs;\n-            this.conf = conf;\n-        }\n-\n-        @Override\n-        public BackgroundTaskResult call() throws Exception {\n-            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");\n-            emptier.setDaemon(true);\n-            emptier.start();\n-            return null;\n-        }\n-\n-        @Override\n-        public int getPriority() {\n-            return 0;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxMzMyMg==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508713322", "bodyText": "This will start 1 thread for the entire filesystem for every run? why do we need this a background service ?", "author": "mukul1987", "createdAt": "2020-10-20T17:33:32Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;\n+        try {\n+            fs = SecurityUtil.doAsLoginUser(\n+                    new PrivilegedExceptionAction<FileSystem>() {\n+                        @Override\n+                        public FileSystem run() throws IOException {\n+                            return FileSystem.get(fsConf);\n+                        }\n+                    });\n+        } catch (IOException e) {\n+            LOG.error(\"Cannot instantiate filesystem instance\");\n+        }\n+        queue.add(new TrashDeletingTask(fs,fsConf));\n+        return queue;\n+    }\n+\n+    /**\n+     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n+     */\n+    private class TrashDeletingTask implements BackgroundTask {\n+\n+        FileSystem fs;\n+        Configuration conf;\n+\n+        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n+            this.fs = fs;\n+            this.conf = conf;\n+        }\n+\n+        @Override\n+        public BackgroundTaskResult call() throws Exception {\n+            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\ndeleted file mode 100644\nindex 555720a03..000000000\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\n+++ /dev/null\n\n@@ -1,114 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership.  The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.hadoop.ozone.om;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Trash;\n-import org.apache.hadoop.hdds.utils.BackgroundService;\n-import org.apache.hadoop.hdds.utils.BackgroundTask;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n-import org.apache.hadoop.ozone.OzoneConsts;\n-import org.apache.hadoop.security.SecurityUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n-\n-/**\n- * Background Service to empty keys that are moved to Trash.\n- */\n-public class TrashDeletingService extends BackgroundService {\n-\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(TrashDeletingService.class);\n-\n-    // Use single thread for  now\n-    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n-\n-    private OzoneManager ozoneManager;\n-\n-    public void setFsConf(Configuration fsConf) {\n-        this.fsConf = fsConf;\n-    }\n-\n-    private Configuration fsConf;\n-\n-    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n-        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n-        this.ozoneManager = ozoneManager;\n-        fsConf = new Configuration();\n-    }\n-\n-\n-    @Override\n-    public BackgroundTaskQueue getTasks() {\n-        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n-        String rootPath = String.format(\"%s://%s/\",\n-                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n-        // Configuration object where the rootpath is set to an OFS Uri.\n-        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n-        FileSystem fs = null;\n-        try {\n-            fs = SecurityUtil.doAsLoginUser(\n-                    new PrivilegedExceptionAction<FileSystem>() {\n-                        @Override\n-                        public FileSystem run() throws IOException {\n-                            return FileSystem.get(fsConf);\n-                        }\n-                    });\n-        } catch (IOException e) {\n-            LOG.error(\"Cannot instantiate filesystem instance\");\n-        }\n-        queue.add(new TrashDeletingTask(fs,fsConf));\n-        return queue;\n-    }\n-\n-    /**\n-     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n-     */\n-    private class TrashDeletingTask implements BackgroundTask {\n-\n-        FileSystem fs;\n-        Configuration conf;\n-\n-        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n-            this.fs = fs;\n-            this.conf = conf;\n-        }\n-\n-        @Override\n-        public BackgroundTaskResult call() throws Exception {\n-            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");\n-            emptier.setDaemon(true);\n-            emptier.start();\n-            return null;\n-        }\n-\n-        @Override\n-        public int getPriority() {\n-            return 0;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3OTU4MA==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r508979580", "bodyText": "wouldnt 60s default be too frequent ?", "author": "prashantpogde", "createdAt": "2020-10-21T04:17:25Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -197,6 +197,12 @@\n   public static final String OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT\n       = \"60s\";\n \n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL =\n+          \"ozone.trash.deleting.service.interval\";\n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL_DEFAULT\n+          = \"60s\";", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java b/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java\nindex bebbca357..482ac88f3 100644\n--- a/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java\n+++ b/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java\n\n@@ -197,12 +197,6 @@\n   public static final String OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT\n       = \"60s\";\n \n-  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL =\n-          \"ozone.trash.deleting.service.interval\";\n-  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL_DEFAULT\n-          = \"60s\";\n-\n-\n   /**\n    * The interval of open key clean service.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2NzAwMg==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509867002", "bodyText": "Please add failure message -> Assert.fail(\"Delete from Trash Failed\");", "author": "rakeshadr", "createdAt": "2020-10-22T04:03:47Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -1170,4 +1172,50 @@ public void testFileDelete() throws Exception {\n     Boolean falseResult = fs.delete(parent, true);\n     assertFalse(falseResult);\n   }\n+\n+  /**\n+   * @throws Exception\n+   * 1.Move a Key to Trash\n+   * 2.Start TrashDeletingService\n+   * 3.Verify that the TrashDeletingService purges the key after minimum set TrashInterval of 1 min.\n+   */\n+  @Test\n+  public void testTrashDeletingService() throws Exception {\n+    String testKeyName = \"keyToBeDeleted\";\n+    Path path = new Path(bucketPath, testKeyName);\n+    try (FSDataOutputStream stream = fs.create(path)) {\n+      stream.write(1);\n+    }\n+    // Call moveToTrash. We can't call protected fs.rename() directly\n+    trash.moveToTrash(path);\n+    TrashDeletingService trashDeletingService = new\n+            TrashDeletingService(60,300,cluster.getOzoneManager());\n+    conf.setLong(FS_TRASH_INTERVAL_KEY,1);\n+    trashDeletingService.setFsConf(conf);\n+    trashDeletingService.start();\n+\n+\n+    // Construct paths\n+    String username = UserGroupInformation.getCurrentUser().getShortUserName();\n+    Path trashRoot = new Path(bucketPath, TRASH_PREFIX);\n+    Path userTrash = new Path(trashRoot, username);\n+    Path userTrashCurrent = new Path(userTrash, \"Current\");\n+    String key = path.toString().substring(1);\n+    Path trashPath = new Path(userTrashCurrent, key);\n+\n+    // Wait until the TrashDeletingService purges the key\n+    GenericTestUtils.waitFor(()-> {\n+      try {\n+        return !ofs.exists(trashPath);\n+      } catch (IOException e) {\n+        LOG.error(\"Delete from Trash Failed\");\n+        Assert.fail();", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java\nindex cc83404c8..97d6813e4 100644\n--- a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java\n+++ b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java\n\n@@ -1176,11 +1175,10 @@ public void testFileDelete() throws Exception {\n   /**\n    * @throws Exception\n    * 1.Move a Key to Trash\n-   * 2.Start TrashDeletingService\n-   * 3.Verify that the TrashDeletingService purges the key after minimum set TrashInterval of 1 min.\n+   * 2.Verify that the key gets deleted by the trash emptier.\n    */\n   @Test\n-  public void testTrashDeletingService() throws Exception {\n+  public void testTrash() throws Exception {\n     String testKeyName = \"keyToBeDeleted\";\n     Path path = new Path(bucketPath, testKeyName);\n     try (FSDataOutputStream stream = fs.create(path)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3MDMxMQ==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509870311", "bodyText": "Please shutdown the trashDeletingService during OM stop.", "author": "rakeshadr", "createdAt": "2020-10-22T04:18:58Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1236,34 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashDeletingService();\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+  private void startTrashDeletingService() {\n+    if (trashDeletingService == null) {\n+      long serviceTimeout = configuration.getTimeDuration(\n+              OZONE_TRASH_DELETING_SERVICE_TIMEOUT,\n+              OZONE_TRASH_DELETING_SERVICE_TIMEOUT_DEFAULT,\n+              TimeUnit.MILLISECONDS);\n+      long trashDeletionInterval = configuration.getTimeDuration(\n+              OZONE_TRASH_DELETING_SERVICE_INTERVAL,\n+              OZONE_TRASH_DELETING_SERVICE_INTERVAL_DEFAULT,\n+              TimeUnit.MILLISECONDS);\n+      trashDeletingService = new TrashDeletingService(trashDeletionInterval, serviceTimeout, this);\n+      trashDeletingService.start();", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex 1083bc21e..4d9844948 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -1240,7 +1242,7 @@ public void restart() throws IOException {\n \n     isOmRpcServerRunning = true;\n \n-    startTrashDeletingService();\n+    startTrashEmptier(configuration);\n \n     registerMXBean();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3MDg5Nw==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509870897", "bodyText": "I saw you are setting fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath); to get FS. Is that the reason for creating new Configuration() instead of using ozoneManager.getConfiguration() ?\nIf yes, can you please add comments mentioning the reason.", "author": "rakeshadr", "createdAt": "2020-10-22T04:21:23Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\ndeleted file mode 100644\nindex 555720a03..000000000\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\n+++ /dev/null\n\n@@ -1,114 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership.  The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.hadoop.ozone.om;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Trash;\n-import org.apache.hadoop.hdds.utils.BackgroundService;\n-import org.apache.hadoop.hdds.utils.BackgroundTask;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n-import org.apache.hadoop.ozone.OzoneConsts;\n-import org.apache.hadoop.security.SecurityUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n-\n-/**\n- * Background Service to empty keys that are moved to Trash.\n- */\n-public class TrashDeletingService extends BackgroundService {\n-\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(TrashDeletingService.class);\n-\n-    // Use single thread for  now\n-    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n-\n-    private OzoneManager ozoneManager;\n-\n-    public void setFsConf(Configuration fsConf) {\n-        this.fsConf = fsConf;\n-    }\n-\n-    private Configuration fsConf;\n-\n-    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n-        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n-        this.ozoneManager = ozoneManager;\n-        fsConf = new Configuration();\n-    }\n-\n-\n-    @Override\n-    public BackgroundTaskQueue getTasks() {\n-        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n-        String rootPath = String.format(\"%s://%s/\",\n-                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n-        // Configuration object where the rootpath is set to an OFS Uri.\n-        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n-        FileSystem fs = null;\n-        try {\n-            fs = SecurityUtil.doAsLoginUser(\n-                    new PrivilegedExceptionAction<FileSystem>() {\n-                        @Override\n-                        public FileSystem run() throws IOException {\n-                            return FileSystem.get(fsConf);\n-                        }\n-                    });\n-        } catch (IOException e) {\n-            LOG.error(\"Cannot instantiate filesystem instance\");\n-        }\n-        queue.add(new TrashDeletingTask(fs,fsConf));\n-        return queue;\n-    }\n-\n-    /**\n-     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n-     */\n-    private class TrashDeletingTask implements BackgroundTask {\n-\n-        FileSystem fs;\n-        Configuration conf;\n-\n-        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n-            this.fs = fs;\n-            this.conf = conf;\n-        }\n-\n-        @Override\n-        public BackgroundTaskResult call() throws Exception {\n-            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");\n-            emptier.setDaemon(true);\n-            emptier.start();\n-            return null;\n-        }\n-\n-        @Override\n-        public int getPriority() {\n-            return 0;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg5MTQxNA==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509891414", "bodyText": "Please add the new configs to ozone-default.xml. Thats the reason for TestOzoneConfigurationFields unit test failure.", "author": "rakeshadr", "createdAt": "2020-10-22T05:38:40Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -197,6 +197,12 @@\n   public static final String OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT\n       = \"60s\";\n \n+  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL =", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java b/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java\nindex bebbca357..482ac88f3 100644\n--- a/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java\n+++ b/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java\n\n@@ -197,12 +197,6 @@\n   public static final String OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT\n       = \"60s\";\n \n-  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL =\n-          \"ozone.trash.deleting.service.interval\";\n-  public static final String OZONE_TRASH_DELETING_SERVICE_INTERVAL_DEFAULT\n-          = \"60s\";\n-\n-\n   /**\n    * The interval of open key clean service.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg5Nzk0Nw==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509897947", "bodyText": "Please add exception trace to log like,\nLOG.error(\"Cannot instantiate filesystem instance\", e);\n\n\nShould we proceed to add TrashDeletingTask to queue as fs instantiation has failed ?", "author": "rakeshadr", "createdAt": "2020-10-22T05:59:57Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;\n+        try {\n+            fs = SecurityUtil.doAsLoginUser(\n+                    new PrivilegedExceptionAction<FileSystem>() {\n+                        @Override\n+                        public FileSystem run() throws IOException {\n+                            return FileSystem.get(fsConf);\n+                        }\n+                    });\n+        } catch (IOException e) {\n+            LOG.error(\"Cannot instantiate filesystem instance\");", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\ndeleted file mode 100644\nindex 555720a03..000000000\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\n+++ /dev/null\n\n@@ -1,114 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership.  The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.hadoop.ozone.om;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Trash;\n-import org.apache.hadoop.hdds.utils.BackgroundService;\n-import org.apache.hadoop.hdds.utils.BackgroundTask;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n-import org.apache.hadoop.ozone.OzoneConsts;\n-import org.apache.hadoop.security.SecurityUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n-\n-/**\n- * Background Service to empty keys that are moved to Trash.\n- */\n-public class TrashDeletingService extends BackgroundService {\n-\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(TrashDeletingService.class);\n-\n-    // Use single thread for  now\n-    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n-\n-    private OzoneManager ozoneManager;\n-\n-    public void setFsConf(Configuration fsConf) {\n-        this.fsConf = fsConf;\n-    }\n-\n-    private Configuration fsConf;\n-\n-    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n-        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n-        this.ozoneManager = ozoneManager;\n-        fsConf = new Configuration();\n-    }\n-\n-\n-    @Override\n-    public BackgroundTaskQueue getTasks() {\n-        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n-        String rootPath = String.format(\"%s://%s/\",\n-                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n-        // Configuration object where the rootpath is set to an OFS Uri.\n-        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n-        FileSystem fs = null;\n-        try {\n-            fs = SecurityUtil.doAsLoginUser(\n-                    new PrivilegedExceptionAction<FileSystem>() {\n-                        @Override\n-                        public FileSystem run() throws IOException {\n-                            return FileSystem.get(fsConf);\n-                        }\n-                    });\n-        } catch (IOException e) {\n-            LOG.error(\"Cannot instantiate filesystem instance\");\n-        }\n-        queue.add(new TrashDeletingTask(fs,fsConf));\n-        return queue;\n-    }\n-\n-    /**\n-     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n-     */\n-    private class TrashDeletingTask implements BackgroundTask {\n-\n-        FileSystem fs;\n-        Configuration conf;\n-\n-        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n-            this.fs = fs;\n-            this.conf = conf;\n-        }\n-\n-        @Override\n-        public BackgroundTaskResult call() throws Exception {\n-            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");\n-            emptier.setDaemon(true);\n-            emptier.start();\n-            return null;\n-        }\n-\n-        @Override\n-        public int getPriority() {\n-            return 0;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwMTkyNw==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509901927", "bodyText": "would fs be created/instantiated for every iteration ? Can we resuse fs ?", "author": "rakeshadr", "createdAt": "2020-10-22T06:10:59Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {\n+        this.fsConf = fsConf;\n+    }\n+\n+    private Configuration fsConf;\n+\n+    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n+        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n+        this.ozoneManager = ozoneManager;\n+        fsConf = new Configuration();\n+    }\n+\n+\n+    @Override\n+    public BackgroundTaskQueue getTasks() {\n+        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n+        String rootPath = String.format(\"%s://%s/\",\n+                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n+        // Configuration object where the rootpath is set to an OFS Uri.\n+        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n+        FileSystem fs = null;", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\ndeleted file mode 100644\nindex 555720a03..000000000\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\n+++ /dev/null\n\n@@ -1,114 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership.  The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.hadoop.ozone.om;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Trash;\n-import org.apache.hadoop.hdds.utils.BackgroundService;\n-import org.apache.hadoop.hdds.utils.BackgroundTask;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n-import org.apache.hadoop.ozone.OzoneConsts;\n-import org.apache.hadoop.security.SecurityUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n-\n-/**\n- * Background Service to empty keys that are moved to Trash.\n- */\n-public class TrashDeletingService extends BackgroundService {\n-\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(TrashDeletingService.class);\n-\n-    // Use single thread for  now\n-    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n-\n-    private OzoneManager ozoneManager;\n-\n-    public void setFsConf(Configuration fsConf) {\n-        this.fsConf = fsConf;\n-    }\n-\n-    private Configuration fsConf;\n-\n-    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n-        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n-        this.ozoneManager = ozoneManager;\n-        fsConf = new Configuration();\n-    }\n-\n-\n-    @Override\n-    public BackgroundTaskQueue getTasks() {\n-        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n-        String rootPath = String.format(\"%s://%s/\",\n-                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n-        // Configuration object where the rootpath is set to an OFS Uri.\n-        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n-        FileSystem fs = null;\n-        try {\n-            fs = SecurityUtil.doAsLoginUser(\n-                    new PrivilegedExceptionAction<FileSystem>() {\n-                        @Override\n-                        public FileSystem run() throws IOException {\n-                            return FileSystem.get(fsConf);\n-                        }\n-                    });\n-        } catch (IOException e) {\n-            LOG.error(\"Cannot instantiate filesystem instance\");\n-        }\n-        queue.add(new TrashDeletingTask(fs,fsConf));\n-        return queue;\n-    }\n-\n-    /**\n-     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n-     */\n-    private class TrashDeletingTask implements BackgroundTask {\n-\n-        FileSystem fs;\n-        Configuration conf;\n-\n-        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n-            this.fs = fs;\n-            this.conf = conf;\n-        }\n-\n-        @Override\n-        public BackgroundTaskResult call() throws Exception {\n-            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");\n-            emptier.setDaemon(true);\n-            emptier.start();\n-            return null;\n-        }\n-\n-        @Override\n-        public int getPriority() {\n-            return 0;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwMjg0NA==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r509902844", "bodyText": "I saw setFsConf used only in test. Please add @VisibleForTesting.", "author": "rakeshadr", "createdAt": "2020-10-22T06:13:16Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Trash;\n+import org.apache.hadoop.hdds.utils.BackgroundService;\n+import org.apache.hadoop.hdds.utils.BackgroundTask;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n+import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n+import org.apache.hadoop.ozone.OzoneConsts;\n+import org.apache.hadoop.security.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+\n+/**\n+ * Background Service to empty keys that are moved to Trash.\n+ */\n+public class TrashDeletingService extends BackgroundService {\n+\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(TrashDeletingService.class);\n+\n+    // Use single thread for  now\n+    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n+\n+    private OzoneManager ozoneManager;\n+\n+    public void setFsConf(Configuration fsConf) {", "originalCommit": "9341b92ccb4e7416aa5881896035d8b2300cf939", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\ndeleted file mode 100644\nindex 555720a03..000000000\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/TrashDeletingService.java\n+++ /dev/null\n\n@@ -1,114 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership.  The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.apache.hadoop.ozone.om;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.CommonConfigurationKeysPublic;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Trash;\n-import org.apache.hadoop.hdds.utils.BackgroundService;\n-import org.apache.hadoop.hdds.utils.BackgroundTask;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskQueue;\n-import org.apache.hadoop.hdds.utils.BackgroundTaskResult;\n-import org.apache.hadoop.ozone.OzoneConsts;\n-import org.apache.hadoop.security.SecurityUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n-\n-/**\n- * Background Service to empty keys that are moved to Trash.\n- */\n-public class TrashDeletingService extends BackgroundService {\n-\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(TrashDeletingService.class);\n-\n-    // Use single thread for  now\n-    private final static int KEY_DELETING_CORE_POOL_SIZE = 1;\n-\n-    private OzoneManager ozoneManager;\n-\n-    public void setFsConf(Configuration fsConf) {\n-        this.fsConf = fsConf;\n-    }\n-\n-    private Configuration fsConf;\n-\n-    public TrashDeletingService(long interval, long serviceTimeout,OzoneManager ozoneManager) {\n-        super(\"TrashDeletingService\", interval, TimeUnit.MILLISECONDS, KEY_DELETING_CORE_POOL_SIZE, serviceTimeout);\n-        this.ozoneManager = ozoneManager;\n-        fsConf = new Configuration();\n-    }\n-\n-\n-    @Override\n-    public BackgroundTaskQueue getTasks() {\n-        BackgroundTaskQueue queue = new BackgroundTaskQueue();\n-        String rootPath = String.format(\"%s://%s/\",\n-                OzoneConsts.OZONE_OFS_URI_SCHEME, ozoneManager.getConfiguration().get(OZONE_OM_ADDRESS_KEY));\n-        // Configuration object where the rootpath is set to an OFS Uri.\n-        fsConf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, rootPath);\n-        FileSystem fs = null;\n-        try {\n-            fs = SecurityUtil.doAsLoginUser(\n-                    new PrivilegedExceptionAction<FileSystem>() {\n-                        @Override\n-                        public FileSystem run() throws IOException {\n-                            return FileSystem.get(fsConf);\n-                        }\n-                    });\n-        } catch (IOException e) {\n-            LOG.error(\"Cannot instantiate filesystem instance\");\n-        }\n-        queue.add(new TrashDeletingTask(fs,fsConf));\n-        return queue;\n-    }\n-\n-    /**\n-     * This task creates an emptier thread that deletes all keys obtained from the trashRoots (fs.getTrashRoots)\n-     */\n-    private class TrashDeletingTask implements BackgroundTask {\n-\n-        FileSystem fs;\n-        Configuration conf;\n-\n-        public TrashDeletingTask(FileSystem fs, Configuration conf) {\n-            this.fs = fs;\n-            this.conf = conf;\n-        }\n-\n-        @Override\n-        public BackgroundTaskResult call() throws Exception {\n-            Thread emptier = new Thread(new Trash(fs,conf).getEmptier(),\"Trash Emptier\");\n-            emptier.setDaemon(true);\n-            emptier.start();\n-            return null;\n-        }\n-\n-        @Override\n-        public int getPriority() {\n-            return 0;\n-        }\n-    }\n-}\n"}}, {"oid": "51ef97259e5f47993ace8f3854121406e31e8ddb", "url": "https://github.com/apache/ozone/commit/51ef97259e5f47993ace8f3854121406e31e8ddb", "message": "Not using background service for a single thread for now", "committedDate": "2020-10-23T13:39:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMjUxMQ==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512432511", "bodyText": "Please add a warn or even  a lighter info log message to make the behavior loud to the users as this will disable trash emptier.", "author": "rakeshadr", "createdAt": "2020-10-27T05:54:42Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1238,57 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashEmptier(configuration);\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+\n+  /**\n+   * @param conf\n+   * @throws IOException\n+   * Starts a Trash Emptier thread that does an fs.trashRoots and performs\n+   * checkpointing & deletion\n+   */\n+  private void startTrashEmptier(Configuration conf) throws IOException {\n+    long trashInterval =\n+            conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT);\n+    if (trashInterval == 0) {\n+      return;", "originalCommit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NzUyNQ==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512567525", "bodyText": "Done.", "author": "sadanand48", "createdAt": "2020-10-27T10:18:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMjUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "16e7ba1575a02486e9289202135ae096024f36d8", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex 4d9844948..785f87907 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -1253,15 +1253,16 @@ public void restart() throws IOException {\n \n \n   /**\n-   * @param conf\n-   * @throws IOException\n    * Starts a Trash Emptier thread that does an fs.trashRoots and performs\n    * checkpointing & deletion\n+   * @param conf\n+   * @throws IOException\n    */\n   private void startTrashEmptier(Configuration conf) throws IOException {\n     long trashInterval =\n             conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT);\n     if (trashInterval == 0) {\n+      LOG.info(\"Trash Interval set to 0. Files deleted will not move to trash\");\n       return;\n     } else if (trashInterval < 0) {\n       throw new IOException(\"Cannot start trash emptier with negative interval.\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNTA0OA==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512525048", "bodyText": "Please follow general guidelines for the javadoc.\n\nBegins with function details.\nProvide @param details.\nThen @return info.\nEnding with @throws exception cases.", "author": "rakeshadr", "createdAt": "2020-10-27T09:13:46Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -1228,17 +1238,57 @@ public void restart() throws IOException {\n       // Allow OM to start as Http Server failure is not fatal.\n       LOG.error(\"OM HttpServer failed to start.\", ex);\n     }\n-\n     omRpcServer.start();\n+\n     isOmRpcServerRunning = true;\n \n+    startTrashEmptier(configuration);\n+\n     registerMXBean();\n \n     startJVMPauseMonitor();\n     setStartTime();\n     omState = State.RUNNING;\n   }\n \n+\n+  /**\n+   * @param conf\n+   * @throws IOException\n+   * Starts a Trash Emptier thread that does an fs.trashRoots and performs", "originalCommit": "51ef97259e5f47993ace8f3854121406e31e8ddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NzYxNg==", "url": "https://github.com/apache/ozone/pull/1507#discussion_r512567616", "bodyText": "Done", "author": "sadanand48", "createdAt": "2020-10-27T10:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNTA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "16e7ba1575a02486e9289202135ae096024f36d8", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex 4d9844948..785f87907 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -1253,15 +1253,16 @@ public void restart() throws IOException {\n \n \n   /**\n-   * @param conf\n-   * @throws IOException\n    * Starts a Trash Emptier thread that does an fs.trashRoots and performs\n    * checkpointing & deletion\n+   * @param conf\n+   * @throws IOException\n    */\n   private void startTrashEmptier(Configuration conf) throws IOException {\n     long trashInterval =\n             conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT);\n     if (trashInterval == 0) {\n+      LOG.info(\"Trash Interval set to 0. Files deleted will not move to trash\");\n       return;\n     } else if (trashInterval < 0) {\n       throw new IOException(\"Cannot start trash emptier with negative interval.\"\n"}}, {"oid": "16e7ba1575a02486e9289202135ae096024f36d8", "url": "https://github.com/apache/ozone/commit/16e7ba1575a02486e9289202135ae096024f36d8", "message": "Addressed review comments", "committedDate": "2020-10-27T10:15:37Z", "type": "commit"}, {"oid": "4b8873e1200a21b2c268b212aef53e2e70f1fe58", "url": "https://github.com/apache/ozone/commit/4b8873e1200a21b2c268b212aef53e2e70f1fe58", "message": "Addressed review comments", "committedDate": "2020-10-27T10:17:08Z", "type": "commit"}, {"oid": "ddf8fab48ac2735253206c2901dc1716b9d3923a", "url": "https://github.com/apache/ozone/commit/ddf8fab48ac2735253206c2901dc1716b9d3923a", "message": "fix checkstyle", "committedDate": "2020-10-27T14:04:24Z", "type": "commit"}, {"oid": "ed0fc93878eee314b362eb5178bfd26b53eb446d", "url": "https://github.com/apache/ozone/commit/ed0fc93878eee314b362eb5178bfd26b53eb446d", "message": "Run the trash emptier only on the leader OM", "committedDate": "2020-10-29T04:57:43Z", "type": "commit"}, {"oid": "55a47e643fcb980b64a3898ab68918022a824456", "url": "https://github.com/apache/ozone/commit/55a47e643fcb980b64a3898ab68918022a824456", "message": "trigger new CI check", "committedDate": "2020-10-29T16:59:59Z", "type": "commit"}, {"oid": "df54544293407e7b88795eea79418ba429c3b0c9", "url": "https://github.com/apache/ozone/commit/df54544293407e7b88795eea79418ba429c3b0c9", "message": "trigger new CI check", "committedDate": "2020-10-29T17:00:35Z", "type": "commit"}, {"oid": "f09fff75ada76c0daf214c94aca2d8a72750d1ea", "url": "https://github.com/apache/ozone/commit/f09fff75ada76c0daf214c94aca2d8a72750d1ea", "message": "remove isLeader check", "committedDate": "2020-11-11T10:18:22Z", "type": "commit"}, {"oid": "dda26bb8bda3f13a96fd3590a54ae4ab866405cc", "url": "https://github.com/apache/ozone/commit/dda26bb8bda3f13a96fd3590a54ae4ab866405cc", "message": "Update OzoneManager.java", "committedDate": "2020-11-11T10:20:59Z", "type": "commit"}]}