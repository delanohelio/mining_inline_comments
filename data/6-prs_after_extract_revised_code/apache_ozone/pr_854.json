{"pr_number": 854, "pr_title": "HDDS-3393. Recon throws NPE in clusterState endpoint", "pr_createdAt": "2020-04-21T18:00:08Z", "pr_url": "https://github.com/apache/ozone/pull/854", "timeline": [{"oid": "77ad175837f336c844241354711af70f51044763", "url": "https://github.com/apache/ozone/commit/77ad175837f336c844241354711af70f51044763", "message": "HDDS-3393. Recon throws NPE in clusterState endpoint", "committedDate": "2020-04-21T17:55:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5NTQwNg==", "url": "https://github.com/apache/ozone/pull/854#discussion_r412395406", "bodyText": "Instead of not null checks, can we have a state in MetadataManager like INITIALIZED, STOPPED? This will help be future proof, and if anywhere this check is required it will be generic to use state, instead of not null check", "author": "bharatviswa504", "createdAt": "2020-04-21T18:32:12Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/api/ClusterStateEndpoint.java", "diffHunk": "@@ -81,20 +82,26 @@ public Response getClusterState() {\n             stats.getScmUsed().get(), stats.getRemaining().get());\n     ClusterStateResponse.Builder builder = ClusterStateResponse.newBuilder();\n     try {\n-      builder.setVolumes(\n-          omMetadataManager.getVolumeTable().getEstimatedKeyCount());\n+      Table volumeTable = omMetadataManager.getVolumeTable();", "originalCommit": "77ad175837f336c844241354711af70f51044763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMjIyNQ==", "url": "https://github.com/apache/ozone/pull/854#discussion_r412412225", "bodyText": "Thanks for the review! I added a boolean flag to keep track of the initialized state to ReconOMMetadataManager.", "author": "vivekratnavel", "createdAt": "2020-04-21T18:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5NTQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "8aa1ea9a7bc90013ee3496f09690b048c2e61e8e", "chunk": "diff --git a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/api/ClusterStateEndpoint.java b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/api/ClusterStateEndpoint.java\nindex ae6f2f858..918ee1885 100644\n--- a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/api/ClusterStateEndpoint.java\n+++ b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/api/ClusterStateEndpoint.java\n\n@@ -81,29 +80,25 @@ public Response getClusterState() {\n         new DatanodeStorageReport(stats.getCapacity().get(),\n             stats.getScmUsed().get(), stats.getRemaining().get());\n     ClusterStateResponse.Builder builder = ClusterStateResponse.newBuilder();\n-    try {\n-      Table volumeTable = omMetadataManager.getVolumeTable();\n-      if (volumeTable != null) {\n-        builder.setVolumes(volumeTable.getEstimatedKeyCount());\n+    if (omMetadataManager.isOmTablesInitialized()) {\n+      try {\n+        builder.setVolumes(\n+            omMetadataManager.getVolumeTable().getEstimatedKeyCount());\n+      } catch (Exception ex) {\n+        LOG.error(\"Unable to get Volumes count in ClusterStateResponse.\", ex);\n       }\n-    } catch (Exception ex) {\n-      LOG.error(\"Unable to get Volumes count in ClusterStateResponse.\", ex);\n-    }\n-    try {\n-      Table bucketTable = omMetadataManager.getBucketTable();\n-      if (bucketTable != null) {\n-        builder.setBuckets(bucketTable.getEstimatedKeyCount());\n+      try {\n+        builder.setBuckets(\n+            omMetadataManager.getBucketTable().getEstimatedKeyCount());\n+      } catch (Exception ex) {\n+        LOG.error(\"Unable to get Buckets count in ClusterStateResponse.\", ex);\n       }\n-    } catch (Exception ex) {\n-      LOG.error(\"Unable to get Buckets count in ClusterStateResponse.\", ex);\n-    }\n-    try {\n-      Table keyTable = omMetadataManager.getKeyTable();\n-      if (keyTable != null) {\n-        builder.setKeys(keyTable.getEstimatedKeyCount());\n+      try {\n+        builder.setKeys(\n+            omMetadataManager.getKeyTable().getEstimatedKeyCount());\n+      } catch (Exception ex) {\n+        LOG.error(\"Unable to get Keys count in ClusterStateResponse.\", ex);\n       }\n-    } catch (Exception ex) {\n-      LOG.error(\"Unable to get Keys count in ClusterStateResponse.\", ex);\n     }\n     ClusterStateResponse response = builder\n         .setStorageReport(storageReport)\n"}}, {"oid": "8aa1ea9a7bc90013ee3496f09690b048c2e61e8e", "url": "https://github.com/apache/ozone/commit/8aa1ea9a7bc90013ee3496f09690b048c2e61e8e", "message": "Fix review comments.", "committedDate": "2020-04-21T18:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNzY3NQ==", "url": "https://github.com/apache/ozone/pull/854#discussion_r412537675", "bodyText": "Minor NIT: return true if OM Tables are initialized, otherwise false.", "author": "bharatviswa504", "createdAt": "2020-04-21T22:34:54Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOMMetadataManager.java", "diffHunk": "@@ -41,4 +41,10 @@\n    * Database.\n    */\n   long getLastSequenceNumberFromDB();\n+\n+  /**\n+   * Check if OM tables are initialized.\n+   * @return if OM Tables are initialized", "originalCommit": "8aa1ea9a7bc90013ee3496f09690b048c2e61e8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3a3c2cfdb17d763372ca9e62d248ba7c2902206", "chunk": "diff --git a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOMMetadataManager.java b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOMMetadataManager.java\nindex ebf32aaa6..a6104bf20 100644\n--- a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOMMetadataManager.java\n+++ b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOMMetadataManager.java\n\n@@ -44,7 +44,7 @@\n \n   /**\n    * Check if OM tables are initialized.\n-   * @return if OM Tables are initialized\n+   * @return true if OM Tables are initialized, otherwise false.\n    */\n   boolean isOmTablesInitialized();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNzkwNA==", "url": "https://github.com/apache/ozone/pull/854#discussion_r412537904", "bodyText": "Missed @override notion, and same comment as above related to Javadoc or it can be completely removed.", "author": "bharatviswa504", "createdAt": "2020-04-21T22:35:29Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOmMetadataManagerImpl.java", "diffHunk": "@@ -120,4 +122,11 @@ public long getLastSequenceNumberFromDB() {\n     }\n   }\n \n+  /**\n+   * Check if OM tables are initialized.\n+   * @return if OM Tables are initialized\n+   */\n+  public boolean isOmTablesInitialized() {", "originalCommit": "8aa1ea9a7bc90013ee3496f09690b048c2e61e8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3a3c2cfdb17d763372ca9e62d248ba7c2902206", "chunk": "diff --git a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOmMetadataManagerImpl.java b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOmMetadataManagerImpl.java\nindex 61c9b824d..fc5cead79 100644\n--- a/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOmMetadataManagerImpl.java\n+++ b/hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/recovery/ReconOmMetadataManagerImpl.java\n\n@@ -124,8 +124,9 @@ public long getLastSequenceNumberFromDB() {\n \n   /**\n    * Check if OM tables are initialized.\n-   * @return if OM Tables are initialized\n+   * @return true if OM Tables are initialized, otherwise false.\n    */\n+  @Override\n   public boolean isOmTablesInitialized() {\n     return omTablesInitialized;\n   }\n"}}, {"oid": "b3a3c2cfdb17d763372ca9e62d248ba7c2902206", "url": "https://github.com/apache/ozone/commit/b3a3c2cfdb17d763372ca9e62d248ba7c2902206", "message": "Fix review comments.", "committedDate": "2020-04-21T22:46:52Z", "type": "commit"}]}