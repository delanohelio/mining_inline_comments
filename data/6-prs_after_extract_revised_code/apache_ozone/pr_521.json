{"pr_number": 521, "pr_title": "HDDS-2592 Add Datanode command to allow the datanode to persist its admin state", "pr_createdAt": "2020-02-03T16:59:04Z", "pr_url": "https://github.com/apache/ozone/pull/521", "timeline": [{"oid": "82542ce2c96a3cfb1036d0928fd7b18cba8ab27a", "url": "https://github.com/apache/ozone/commit/82542ce2c96a3cfb1036d0928fd7b18cba8ab27a", "message": "Store operational state exiry in the NodeStatus object", "committedDate": "2020-01-13T13:40:14Z", "type": "commit"}, {"oid": "773d9289f9b3d1fb6d14a8004a0683c0960c33a0", "url": "https://github.com/apache/ozone/commit/773d9289f9b3d1fb6d14a8004a0683c0960c33a0", "message": "Added new datanode command to transfer any change in the operational state to the datanode via the existing command queue", "committedDate": "2020-01-14T10:48:01Z", "type": "commit"}, {"oid": "1649a5da864a512194c1d8dcd23a05c9bbfdbf99", "url": "https://github.com/apache/ozone/commit/1649a5da864a512194c1d8dcd23a05c9bbfdbf99", "message": "Used the HddsProto operational state everywhere and fixed some style issues", "committedDate": "2020-01-14T11:13:04Z", "type": "commit"}, {"oid": "78747387cd3c1dbda27b7b4da9cd8427d05f7b3d", "url": "https://github.com/apache/ozone/commit/78747387cd3c1dbda27b7b4da9cd8427d05f7b3d", "message": "Handle the SetNodeOperationalState command on the datanode and persist the values in the datanode yaml file (datanode.id) and ensure the parameters are sent with registration and the heartbeat", "committedDate": "2020-01-15T15:36:01Z", "type": "commit"}, {"oid": "2c8ed938a26764a3f95b33b2dd05b8691c8dee05", "url": "https://github.com/apache/ozone/commit/2c8ed938a26764a3f95b33b2dd05b8691c8dee05", "message": "Handle the persisted NodeStatus and expiry from the datanode on SCM during registration and heartbeat", "committedDate": "2020-01-17T12:00:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDc2NA==", "url": "https://github.com/apache/ozone/pull/521#discussion_r374850764", "bodyText": "Shouldn't this be also inside the if != null ? , I am going to presume that even if we have no data, datanodeDetailsYaml.getPersistedOpStateExpiryEpochSec is going to return zero, but since the expiry is a long, JVM would initialize it to zero by default, would it not?. So curious why this check is outside the if.", "author": "anuengineer", "createdAt": "2020-02-04T18:39:16Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/helpers/DatanodeIdYaml.java", "diffHunk": "@@ -82,6 +83,12 @@ public static DatanodeDetails readDatanodeIdFile(File path)\n           .setIpAddress(datanodeDetailsYaml.getIpAddress())\n           .setHostName(datanodeDetailsYaml.getHostName())\n           .setCertSerialId(datanodeDetailsYaml.getCertSerialId());\n+      if (datanodeDetailsYaml.getPersistedOpState() != null) {\n+        builder.setPersistedOpState(HddsProtos.NodeOperationalState.valueOf(\n+            datanodeDetailsYaml.getPersistedOpState()));\n+      }\n+      builder.setPersistedOpStateExpiry(", "originalCommit": "2c8ed938a26764a3f95b33b2dd05b8691c8dee05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NTg0NA==", "url": "https://github.com/apache/ozone/pull/521#discussion_r374945844", "bodyText": "If I recall (I wrote this code a month or so ago and forgot to create the PR) the reason the OpState is wrapped in a IF block is because I need take the string read from the YAML file and turn it into the enum. The enum didn't like me calling valueOf(null), so I only make that call if its non-null. All the other parameters in the builder are strings except for the two new ones (enum and long), so they never really had to handle the null case before.\nYou are correct, in that if there is no data, the \"getPersistedOpStateExpiryEpochSec\" will end up as zero. That is OK, as SCM treats zero as \"no expiry\" right now.\nI've got similar logic at the end of that class too to handle the turning the enum into a string:\n    String persistedOpString = null;\n    if (datanodeDetails.getPersistedOpState() != null) {\n      persistedOpString = datanodeDetails.getPersistedOpState().name();\n    }\n    return new DatanodeDetailsYaml(\n        datanodeDetails.getUuid().toString(),\n        datanodeDetails.getIpAddress(),\n        datanodeDetails.getHostName(),\n        datanodeDetails.getCertSerialId(),\n        persistedOpString,\n        datanodeDetails.getPersistedOpStateExpiryEpochSec(),\n        portDetails);\n  }\n\nI think the shorter summary is that the enums needs special handling around the nulls while the long and Strings behave OK without wrapping them in IF blocks.", "author": "sodonnel", "createdAt": "2020-02-04T21:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDc2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MzU2OQ==", "url": "https://github.com/apache/ozone/pull/521#discussion_r374853569", "bodyText": "We can add this to the Dn reports if you want to propagate this back into SCM.", "author": "anuengineer", "createdAt": "2020-02-04T18:44:39Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/SetNodeOperationalStateCommandHandler.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.container.common.statemachine.commandhandler;\n+\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos;\n+import org.apache.hadoop.hdds.scm.HddsServerUtil;\n+import org.apache.hadoop.hdds.scm.ScmConfigKeys;\n+import org.apache.hadoop.ozone.container.common.helpers.ContainerUtils;\n+import org.apache.hadoop.ozone.container.common.statemachine.SCMConnectionManager;\n+import org.apache.hadoop.ozone.container.common.statemachine.StateContext;\n+import org.apache.hadoop.ozone.container.ozoneimpl.OzoneContainer;\n+import org.apache.hadoop.ozone.protocol.commands.SCMCommand;\n+import org.apache.hadoop.ozone.protocol.commands.SetNodeOperationalStateCommand;\n+import org.apache.hadoop.util.Time;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import org.apache.hadoop.hdds.protocol.proto.\n+    StorageContainerDatanodeProtocolProtos.SCMCommandProto.Type;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+\n+/**\n+ * Handle the SetNodeOperationalStateCommand sent from SCM to the datanode\n+ * to persist the current operational state.\n+ */\n+public class SetNodeOperationalStateCommandHandler implements CommandHandler {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(SetNodeOperationalStateCommandHandler.class);\n+  private final Configuration conf;\n+  private final AtomicInteger invocationCount = new AtomicInteger(0);\n+  private final AtomicLong totalTime = new AtomicLong(0);\n+\n+  /**\n+   * Set Node State command handler.\n+   *\n+   * @param conf - Configuration for the datanode.\n+   */\n+  public SetNodeOperationalStateCommandHandler(Configuration conf) {\n+    this.conf = conf;\n+  }\n+\n+  /**\n+   * Handles a given SCM command.\n+   *\n+   * @param command - SCM Command\n+   * @param container - Ozone Container.\n+   * @param context - Current Context.\n+   * @param connectionManager - The SCMs that we are talking to.\n+   */\n+  @Override\n+  public void handle(SCMCommand command, OzoneContainer container,\n+      StateContext context, SCMConnectionManager connectionManager) {\n+    long startTime = Time.monotonicNow();\n+    invocationCount.incrementAndGet();\n+    StorageContainerDatanodeProtocolProtos.SetNodeOperationalStateCommandProto\n+        setNodeCmdProto = null;\n+\n+    if (command.getType() != Type.setNodeOperationalStateCommand) {\n+      LOG.warn(\"Skipping handling command, expected command \"\n+              + \"type {} but found {}\",\n+          Type.setNodeOperationalStateCommand, command.getType());\n+      return;\n+    }\n+    SetNodeOperationalStateCommand setNodeCmd =\n+        (SetNodeOperationalStateCommand) command;\n+    setNodeCmdProto = setNodeCmd.getProto();\n+    DatanodeDetails dni = context.getParent().getDatanodeDetails();\n+    dni.setPersistedOpState(setNodeCmdProto.getNodeOperationalState());\n+    dni.setPersistedOpStateExpiryEpochSec(\n+        setNodeCmd.getStateExpiryEpochSeconds());\n+    try {\n+      persistDatanodeDetails(dni);\n+    } catch (IOException ioe) {\n+      LOG.error(\"Failed to persist the datanode state\", ioe);\n+      // TODO - this should probably be raised, but it will break the command", "originalCommit": "2c8ed938a26764a3f95b33b2dd05b8691c8dee05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1NjEzNg==", "url": "https://github.com/apache/ozone/pull/521#discussion_r374856136", "bodyText": "Since zero is the default value for the long, would it make sense to enforce time; that is for each set command we need an explicit time. In that case, we can define a constant called INFINITY and set it to something like -1; but in the source, it will be very explicit when someone reads code, and in the command handler we can enforce the requirement (or perhaps better on the SCM side). So commands like decommission will have an infinite value explicitly set by SCM and it would be more obvious and explicit.", "author": "anuengineer", "createdAt": "2020-02-04T18:49:27Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/helpers/DatanodeIdYaml.java", "diffHunk": "@@ -105,6 +112,8 @@ public static DatanodeDetails readDatanodeIdFile(File path)\n     private String ipAddress;\n     private String hostName;\n     private String certSerialId;\n+    private String persistedOpState;\n+    private long persistedOpStateExpiryEpochSec = 0;", "originalCommit": "2c8ed938a26764a3f95b33b2dd05b8691c8dee05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0OTMwMA==", "url": "https://github.com/apache/ozone/pull/521#discussion_r374949300", "bodyText": "This might be a good idea. The current \"infinity\" value in SCM is zero, as it checks for greater than zero expiry right now, but it could be changed to a constant easily enough.\nIt would be good for the command to always get a time so its consistent. I need to go back and refresh my memory on the command etc here.", "author": "sodonnel", "createdAt": "2020-02-04T22:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1NjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2NDQxOQ==", "url": "https://github.com/apache/ozone/pull/521#discussion_r400464419", "bodyText": "I think this is a good suggestion so I have logged it in HDDS-3304 and we can consider it when the decommission work is started up again.", "author": "sodonnel", "createdAt": "2020-03-30T20:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1NjEzNg=="}], "type": "inlineReview", "revised_code": null}]}