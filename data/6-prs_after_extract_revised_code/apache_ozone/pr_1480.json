{"pr_number": 1480, "pr_title": "HDDS-4315. Use Epoch to generate unique ObjectIDs", "pr_createdAt": "2020-10-06T23:09:36Z", "pr_url": "https://github.com/apache/ozone/pull/1480", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5ODUyNA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r501398524", "bodyText": "I am thinking for this extreme case, user cannot write object anymore when TransactionID exceeds MAX_TRXN_ID, right? So what can we do for this, have to setup a new Ozone cluster to use?", "author": "linyiqun", "createdAt": "2020-10-08T01:28:48Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -523,6 +531,32 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param id of the transaction. This value cannot exceed 2^40 - 1 as\n+   *           out of the 64 bits for a long, 16 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);", "originalCommit": "a0bef37d1448e483c317c293308040a165b5b7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00959ae891d09b2cc2be1b82490781fdbd02a389", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\nindex 15f8666fe..9f58533de 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n\n@@ -531,10 +534,17 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n   /**\n    * Get the valid base object id given the transaction id.\n-   * @param id of the transaction. This value cannot exceed 2^40 - 1 as\n-   *           out of the 64 bits for a long, 16 are reserved for the epoch\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n    *           and 8 for recursive directory creation.\n    * @return base object id allocated against the transaction\n    */\n"}}, {"oid": "00959ae891d09b2cc2be1b82490781fdbd02a389", "url": "https://github.com/apache/ozone/commit/00959ae891d09b2cc2be1b82490781fdbd02a389", "message": "HDDS-4315. Ensure ObjectIDs are unique across restarts", "committedDate": "2020-10-20T20:43:04Z", "type": "forcePushed"}, {"oid": "bb1fd322d51700e932d9cf8b0fe605419f7a838d", "url": "https://github.com/apache/ozone/commit/bb1fd322d51700e932d9cf8b0fe605419f7a838d", "message": "HDDS-4315. Ensure ObjectIDs are unique across restarts", "committedDate": "2020-10-20T22:40:06Z", "type": "commit"}, {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "url": "https://github.com/apache/ozone/commit/3c1526ae7dcce5e0ce927b275851b6b01046a697", "message": "CI fixes", "committedDate": "2020-10-20T22:40:06Z", "type": "commit"}, {"oid": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "url": "https://github.com/apache/ozone/commit/3c1526ae7dcce5e0ce927b275851b6b01046a697", "message": "CI fixes", "committedDate": "2020-10-20T22:40:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2ODY0OA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r510268648", "bodyText": "Can we rename id -> trxnId", "author": "linyiqun", "createdAt": "2020-10-22T15:46:38Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);\n+  }\n+\n+  /**\n+   * Note - This function should not be called directly. It is directly called\n+   * only from OzoneManager#addS3GVolumeToDB() which is a one time operation\n+   * when OM is started first time to add S3G volume. In call other cases,\n+   * getObjectIdFromTxId() should be called to append epoch to objectID.\n+   */\n+  public static long addEpochToObjectId(long epoch, long id) {", "originalCommit": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzU5MA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997590", "bodyText": "Done.", "author": "hanishakoneru", "createdAt": "2020-11-03T22:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2ODY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\nindex 47589f7d2..ad27b9c8b 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n\n@@ -544,15 +545,15 @@ public static int getOMEpoch(boolean isRatisEnabled) {\n    * Get the valid base object id given the transaction id.\n    * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n    *              object will be set to this epoch.\n-   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   * @param txId of the transaction. This value cannot exceed 2^54 - 1 as\n    *           out of the 64 bits for a long, 2 are reserved for the epoch\n    *           and 8 for recursive directory creation.\n    * @return base object id allocated against the transaction\n    */\n-  public static long getObjectIdFromTxId(long epoch, long id) {\n-    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+  public static long getObjectIdFromTxId(long epoch, long txId) {\n+    Preconditions.checkArgument(txId <= MAX_TRXN_ID, \"TransactionID \" +\n         \"exceeds max limit of \" + MAX_TRXN_ID);\n-    return addEpochToObjectId(epoch, id);\n+    return addEpochToTxId(epoch, txId);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjY2NQ==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r510272665", "bodyText": "I prefer to reuse metadataManager#getOmEpoch to set epoch value, so that epoch number is from one same place.", "author": "linyiqun", "createdAt": "2020-10-22T15:52:01Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -394,6 +403,8 @@ private OzoneManager(OzoneConfiguration conf) throws IOException,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);\n \n+    omEpoch = OmUtils.getOMEpoch(isRatisEnabled);", "originalCommit": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzUzOA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997538", "bodyText": "Done.", "author": "hanishakoneru", "createdAt": "2020-11-03T22:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex ddd94d293..f8a7d2c9a 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -403,8 +394,6 @@ private OzoneManager(OzoneConfiguration conf) throws IOException,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,\n         OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);\n \n-    omEpoch = OmUtils.getOMEpoch(isRatisEnabled);\n-\n     InetSocketAddress omNodeRpcAddr = omNodeDetails.getRpcAddress();\n     omRpcAddressTxt = new Text(omNodeDetails.getRpcAddressString());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzQyOA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515393428", "bodyText": "can we use  1 << 54  instead of Math.pow ?", "author": "prashantpogde", "createdAt": "2020-10-30T21:36:05Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -76,6 +78,17 @@\n   private static final SecureRandom SRAND = new SecureRandom();\n   private static byte[] randomBytes = new byte[32];\n \n+  private static final long TRANSACTION_ID_SHIFT = 8;\n+  // from the 64 bits of ObjectID (long variable), 2 bits are reserved for\n+  // epoch and 8 bits for recursive directory creation, if required. This\n+  // leaves 54 bits for the transaction ID. Also, the last transaction ID is\n+  // reserved for creating S3G volume on OM start {@link\n+  // OzoneManager#addS3GVolumeToDB()}.\n+  public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n+  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);", "originalCommit": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzUwMA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997500", "bodyText": "Done.", "author": "hanishakoneru", "createdAt": "2020-11-03T22:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\nindex 47589f7d2..ad27b9c8b 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n\n@@ -85,7 +85,8 @@\n   // reserved for creating S3G volume on OM start {@link\n   // OzoneManager#addS3GVolumeToDB()}.\n   public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n-  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);\n+  public static final long REVERSE_EPOCH_ID_SHIFT = 2; // 64 - EPOCH_ID_SHIFT\n+  public static final long MAX_TRXN_ID = (long) ((1 << 54) - 2);\n   public static final int EPOCH_WHEN_RATIS_NOT_ENABLED = 1;\n   public static final int EPOCH_WHEN_RATIS_ENABLED = 2;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NDA1Mw==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515394053", "bodyText": "Don't we want these values to be 0 and 1 instead of 1 & 2 ?", "author": "prashantpogde", "createdAt": "2020-10-30T21:38:01Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -76,6 +78,17 @@\n   private static final SecureRandom SRAND = new SecureRandom();\n   private static byte[] randomBytes = new byte[32];\n \n+  private static final long TRANSACTION_ID_SHIFT = 8;\n+  // from the 64 bits of ObjectID (long variable), 2 bits are reserved for\n+  // epoch and 8 bits for recursive directory creation, if required. This\n+  // leaves 54 bits for the transaction ID. Also, the last transaction ID is\n+  // reserved for creating S3G volume on OM start {@link\n+  // OzoneManager#addS3GVolumeToDB()}.\n+  public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n+  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);\n+  public static final int EPOCH_WHEN_RATIS_NOT_ENABLED = 1;", "originalCommit": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NjI0OA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516996248", "bodyText": "Wanted to avoid 0 as we can assume that currently it is 0. This would give us a way to separate out objectIds created before this fix. If ever, these non-unique objectIds need to be fixed, it would be easy to identify them.", "author": "hanishakoneru", "createdAt": "2020-11-03T22:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NDA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\nindex 47589f7d2..ad27b9c8b 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n\n@@ -85,7 +85,8 @@\n   // reserved for creating S3G volume on OM start {@link\n   // OzoneManager#addS3GVolumeToDB()}.\n   public static final long EPOCH_ID_SHIFT = 62; // 64 - 2\n-  public static final long MAX_TRXN_ID = (long) (Math.pow(2, 54) - 2);\n+  public static final long REVERSE_EPOCH_ID_SHIFT = 2; // 64 - EPOCH_ID_SHIFT\n+  public static final long MAX_TRXN_ID = (long) ((1 << 54) - 2);\n   public static final int EPOCH_WHEN_RATIS_NOT_ENABLED = 1;\n   public static final int EPOCH_WHEN_RATIS_ENABLED = 2;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NjEyMg==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515396122", "bodyText": "nit : s/addEpochToObjectId /addEpochToTxnId since your definition is ObjectId = EpochId+TxnId", "author": "prashantpogde", "createdAt": "2020-10-30T21:44:03Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);", "originalCommit": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzQ1Nw==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997457", "bodyText": "Done.", "author": "hanishakoneru", "createdAt": "2020-11-03T22:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NjEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\nindex 47589f7d2..ad27b9c8b 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n\n@@ -544,15 +545,15 @@ public static int getOMEpoch(boolean isRatisEnabled) {\n    * Get the valid base object id given the transaction id.\n    * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n    *              object will be set to this epoch.\n-   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   * @param txId of the transaction. This value cannot exceed 2^54 - 1 as\n    *           out of the 64 bits for a long, 2 are reserved for the epoch\n    *           and 8 for recursive directory creation.\n    * @return base object id allocated against the transaction\n    */\n-  public static long getObjectIdFromTxId(long epoch, long id) {\n-    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+  public static long getObjectIdFromTxId(long epoch, long txId) {\n+    Preconditions.checkArgument(txId <= MAX_TRXN_ID, \"TransactionID \" +\n         \"exceeds max limit of \" + MAX_TRXN_ID);\n-    return addEpochToObjectId(epoch, id);\n+    return addEpochToTxId(epoch, txId);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NzU2OA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515397568", "bodyText": "consider EpochIdShift and TRANSACTION_ID_SHIFT here instead of hardcoded value.", "author": "prashantpogde", "createdAt": "2020-10-30T21:48:13Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java", "diffHunk": "@@ -524,6 +535,48 @@ public static OmKeyInfo prepareKeyForRecover(OmKeyInfo keyInfo,\n     }\n   }\n \n+  public static int getOMEpoch(boolean isRatisEnabled) {\n+    return isRatisEnabled ? EPOCH_WHEN_RATIS_ENABLED :\n+        EPOCH_WHEN_RATIS_NOT_ENABLED;\n+  }\n+\n+  /**\n+   * Get the valid base object id given the transaction id.\n+   * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n+   *              object will be set to this epoch.\n+   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   *           out of the 64 bits for a long, 2 are reserved for the epoch\n+   *           and 8 for recursive directory creation.\n+   * @return base object id allocated against the transaction\n+   */\n+  public static long getObjectIdFromTxId(long epoch, long id) {\n+    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+        \"exceeds max limit of \" + MAX_TRXN_ID);\n+    return addEpochToObjectId(epoch, id);\n+  }\n+\n+  /**\n+   * Note - This function should not be called directly. It is directly called\n+   * only from OzoneManager#addS3GVolumeToDB() which is a one time operation\n+   * when OM is started first time to add S3G volume. In call other cases,\n+   * getObjectIdFromTxId() should be called to append epoch to objectID.\n+   */\n+  public static long addEpochToObjectId(long epoch, long id) {\n+    long lsb54 = id << TRANSACTION_ID_SHIFT;\n+    long msb2 = epoch << EPOCH_ID_SHIFT;\n+\n+    return msb2 | lsb54;\n+  }\n+\n+  /**\n+   * Given an objectId, unset the 2 most significant bits to get the\n+   * corresponding transaction index.\n+   */\n+  @VisibleForTesting\n+  public static long getTxIdFromObjectId(long objectId) {\n+    return ((Long.MAX_VALUE >> 2) & objectId) >> 8;", "originalCommit": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzQwMA==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997400", "bodyText": "Done.", "author": "hanishakoneru", "createdAt": "2020-11-03T22:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NzU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\nindex 47589f7d2..ad27b9c8b 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/OmUtils.java\n\n@@ -544,15 +545,15 @@ public static int getOMEpoch(boolean isRatisEnabled) {\n    * Get the valid base object id given the transaction id.\n    * @param epoch a 2 bit epoch number. The 2 most significant bits of the\n    *              object will be set to this epoch.\n-   * @param id of the transaction. This value cannot exceed 2^54 - 1 as\n+   * @param txId of the transaction. This value cannot exceed 2^54 - 1 as\n    *           out of the 64 bits for a long, 2 are reserved for the epoch\n    *           and 8 for recursive directory creation.\n    * @return base object id allocated against the transaction\n    */\n-  public static long getObjectIdFromTxId(long epoch, long id) {\n-    Preconditions.checkArgument(id <= MAX_TRXN_ID, \"TransactionID \" +\n+  public static long getObjectIdFromTxId(long epoch, long txId) {\n+    Preconditions.checkArgument(txId <= MAX_TRXN_ID, \"TransactionID \" +\n         \"exceeds max limit of \" + MAX_TRXN_ID);\n-    return addEpochToObjectId(epoch, id);\n+    return addEpochToTxId(epoch, txId);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMDEwMg==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r515400102", "bodyText": "why differentiate between epoch before this change and non-ratis OM cluster ? both can be 0 ?", "author": "prashantpogde", "createdAt": "2020-10-30T21:55:45Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -306,6 +306,15 @@\n   private final Map<String, RatisDropwizardExports> ratisMetricsMap =\n       new ConcurrentHashMap<>();\n \n+  // Epoch is used to generate the objectIDs. The most significant 2 bits of\n+  // objectIDs is set to this epoch. For clusters before HDDS-4315 there is\n+  // no epoch as such. But it can be safely assumed that the most significant\n+  // 2 bits of the objectID will be 00. From HDDS-4315 onwards, the Epoch for\n+  // non-ratis OM clusters will be binary 01 (= decimal 1)  and for ratis", "originalCommit": "3c1526ae7dcce5e0ce927b275851b6b01046a697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzM0Nw==", "url": "https://github.com/apache/ozone/pull/1480#discussion_r516997347", "bodyText": "It would help if we ever wanted to update the non-unique objectIds to maintain uniqueness throughout.", "author": "hanishakoneru", "createdAt": "2020-11-03T22:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMDEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex ddd94d293..f8a7d2c9a 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -306,15 +306,6 @@\n   private final Map<String, RatisDropwizardExports> ratisMetricsMap =\n       new ConcurrentHashMap<>();\n \n-  // Epoch is used to generate the objectIDs. The most significant 2 bits of\n-  // objectIDs is set to this epoch. For clusters before HDDS-4315 there is\n-  // no epoch as such. But it can be safely assumed that the most significant\n-  // 2 bits of the objectID will be 00. From HDDS-4315 onwards, the Epoch for\n-  // non-ratis OM clusters will be binary 01 (= decimal 1)  and for ratis\n-  // enabled OM cluster will be binary 10 (= decimal 2). This epoch is added\n-  // to ensure uniqueness ofobjectIDs.\n-  private final int omEpoch;\n-\n   private KeyProviderCryptoExtension kmsProvider = null;\n   private static String keyProviderUriKeyName =\n       CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH;\n"}}, {"oid": "94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "url": "https://github.com/apache/ozone/commit/94d50565e67d5cfd8416a41f2f9ba0067ebffa63", "message": "review comments", "committedDate": "2020-11-03T23:00:26Z", "type": "commit"}, {"oid": "7b0caa20ea8028c74ebfb064926821c15e83294c", "url": "https://github.com/apache/ozone/commit/7b0caa20ea8028c74ebfb064926821c15e83294c", "message": "compile fix", "committedDate": "2020-11-03T23:37:05Z", "type": "commit"}]}