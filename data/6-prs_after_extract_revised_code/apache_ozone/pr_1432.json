{"pr_number": 1432, "pr_title": "HDDS-4252. Add the current layout versions to DN - SCM proto payload.", "pr_createdAt": "2020-09-17T03:02:48Z", "pr_url": "https://github.com/apache/ozone/pull/1432", "timeline": [{"oid": "bacd876921b9fca8744b3f7cf91658133ff608d0", "url": "https://github.com/apache/ozone/commit/bacd876921b9fca8744b3f7cf91658133ff608d0", "message": "HDDS-4252. Add the current layout versions to DN - SCM proto payload.", "committedDate": "2020-09-17T02:32:27Z", "type": "commit"}, {"oid": "2a24a5a8f300de77ee931af3a724081f28f81e6f", "url": "https://github.com/apache/ozone/commit/2a24a5a8f300de77ee931af3a724081f28f81e6f", "message": "HDDS-4252. Checkstyle fixes.", "committedDate": "2020-09-17T02:57:44Z", "type": "commit"}, {"oid": "128d087b044319a90f9e10b0f32c4e4fcb38c9d1", "url": "https://github.com/apache/ozone/commit/128d087b044319a90f9e10b0f32c4e4fcb38c9d1", "message": "HDDS-4252. Addressing CI failures.", "committedDate": "2020-09-17T22:03:08Z", "type": "commit"}, {"oid": "39213d18b279cab71f5353807610ce3840a49a0d", "url": "https://github.com/apache/ozone/commit/39213d18b279cab71f5353807610ce3840a49a0d", "message": "HDDS-4252. Addressing CI failures: part2.", "committedDate": "2020-09-18T03:41:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MTEzMw==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r490791133", "bodyText": "As OMStorage has om id(uuid), SCMStorageConfig has scm id(uuid). Can we also set/get datanode id (datanode uuid) as NodeProperties here?", "author": "linyiqun", "createdAt": "2020-09-18T08:36:01Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.common;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeType;\n+import org.apache.hadoop.ozone.common.Storage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import static org.apache.hadoop.hdds.server.ServerUtils.getOzoneMetaDirPath;\n+import static org.apache.hadoop.ozone.OzoneConsts.DATANODE_STORAGE_CONFIG;\n+\n+/**\n+ * DataNodeStorageConfig is responsible for management of the\n+ * StorageDirectories used by the DataNode.\n+ */\n+public class DataNodeStorageConfig extends Storage {\n+\n+  /**\n+   * Construct DataNodeStorageConfig.\n+   * @throws IOException if any directories are inaccessible.\n+   */\n+  public DataNodeStorageConfig(OzoneConfiguration conf) throws IOException {\n+    super(NodeType.DATANODE, getOzoneMetaDirPath(conf),\n+        DATANODE_STORAGE_CONFIG);\n+  }\n+\n+  public DataNodeStorageConfig(NodeType type, File root, String sdName)\n+      throws IOException {\n+    super(type, root, sdName);\n+  }\n+\n+  @Override\n+  protected Properties getNodeProperties() {\n+    // No additional properties for now.\n+    return null;", "originalCommit": "39213d18b279cab71f5353807610ce3840a49a0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNjgwMQ==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r491236801", "bodyText": "Yes, it can be added over time as needed.", "author": "prashantpogde", "createdAt": "2020-09-18T23:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MTEzMw=="}], "type": "inlineReview", "revised_code": {"commit": "5c464b8aa08272c45d64ba7ab03e85b532c7c62a", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java\ndeleted file mode 100644\nindex c45225d8d..000000000\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hadoop.ozone.container.common;\n-\n-import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeType;\n-import org.apache.hadoop.ozone.common.Storage;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Properties;\n-\n-import static org.apache.hadoop.hdds.server.ServerUtils.getOzoneMetaDirPath;\n-import static org.apache.hadoop.ozone.OzoneConsts.DATANODE_STORAGE_CONFIG;\n-\n-/**\n- * DataNodeStorageConfig is responsible for management of the\n- * StorageDirectories used by the DataNode.\n- */\n-public class DataNodeStorageConfig extends Storage {\n-\n-  /**\n-   * Construct DataNodeStorageConfig.\n-   * @throws IOException if any directories are inaccessible.\n-   */\n-  public DataNodeStorageConfig(OzoneConfiguration conf) throws IOException {\n-    super(NodeType.DATANODE, getOzoneMetaDirPath(conf),\n-        DATANODE_STORAGE_CONFIG);\n-  }\n-\n-  public DataNodeStorageConfig(NodeType type, File root, String sdName)\n-      throws IOException {\n-    super(type, root, sdName);\n-  }\n-\n-  @Override\n-  protected Properties getNodeProperties() {\n-    // No additional properties for now.\n-    return null;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NDEwOQ==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r490794109", "bodyText": "The variable name containerId seems not related, can we rename to finalizeUpgrade?", "author": "linyiqun", "createdAt": "2020-09-18T08:41:32Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/FinalizeNewLayoutVersionCommandHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.hadoop.ozone.container.common.statemachine.commandhandler;\n+\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.proto\n+    .StorageContainerDatanodeProtocolProtos.SCMCommandProto;\n+import org.apache.hadoop.hdds.protocol.proto\n+    .StorageContainerDatanodeProtocolProtos\n+    .FinalizeNewLayoutVersionCommandProto;\n+import org.apache.hadoop.ozone.container.common.statemachine\n+    .SCMConnectionManager;\n+import org.apache.hadoop.ozone.container.common.statemachine.StateContext;\n+import org.apache.hadoop.ozone.container.ozoneimpl.ContainerController;\n+import org.apache.hadoop.ozone.container.ozoneimpl.OzoneContainer;\n+import org.apache.hadoop.ozone.protocol.commands.FinalizeNewLayoutVersionCommand;\n+import org.apache.hadoop.ozone.protocol.commands.SCMCommand;\n+import org.apache.hadoop.util.Time;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Handler for FinalizeNewLayoutVersion command received from SCM.\n+ */\n+public class FinalizeNewLayoutVersionCommandHandler implements CommandHandler {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(FinalizeNewLayoutVersionCommandHandler.class);\n+\n+  private AtomicLong invocationCount = new AtomicLong(0);\n+  private long totalTime;\n+\n+  /**\n+   * Constructs a FinalizeNewLayoutVersionCommandHandler.\n+   */\n+  public FinalizeNewLayoutVersionCommandHandler() {\n+  }\n+\n+  /**\n+   * Handles a given SCM command.\n+   *\n+   * @param command           - SCM Command\n+   * @param ozoneContainer         - Ozone Container.\n+   * @param context           - Current Context.\n+   * @param connectionManager - The SCMs that we are talking to.\n+   */\n+  @Override\n+  public void handle(SCMCommand command, OzoneContainer ozoneContainer,\n+      StateContext context, SCMConnectionManager connectionManager) {\n+    LOG.debug(\"Processing FinalizeNewLayoutVersionCommandHandler command.\");\n+    invocationCount.incrementAndGet();\n+    final long startTime = Time.monotonicNow();\n+    final DatanodeDetails datanodeDetails = context.getParent()\n+        .getDatanodeDetails();\n+    final FinalizeNewLayoutVersionCommandProto finalizeCommand =\n+        ((FinalizeNewLayoutVersionCommand)command).getProto();\n+    final ContainerController controller = ozoneContainer.getController();\n+    final boolean containerId = finalizeCommand.getFinalizeNewLayoutVersion();", "originalCommit": "39213d18b279cab71f5353807610ce3840a49a0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNzM2Mg==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r491237362", "bodyText": "Yup.", "author": "prashantpogde", "createdAt": "2020-09-18T23:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NDEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "579e95ff765567e6d5a7988fcf479b1ddcc9a98d", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/FinalizeNewLayoutVersionCommandHandler.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/FinalizeNewLayoutVersionCommandHandler.java\nindex 2eda97da8..dc0fdfe9c 100644\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/FinalizeNewLayoutVersionCommandHandler.java\n+++ b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/statemachine/commandhandler/FinalizeNewLayoutVersionCommandHandler.java\n\n@@ -71,7 +71,8 @@ public void handle(SCMCommand command, OzoneContainer ozoneContainer,\n     final FinalizeNewLayoutVersionCommandProto finalizeCommand =\n         ((FinalizeNewLayoutVersionCommand)command).getProto();\n     final ContainerController controller = ozoneContainer.getController();\n-    final boolean containerId = finalizeCommand.getFinalizeNewLayoutVersion();\n+    final boolean finalizeUpgrade =\n+        finalizeCommand.getFinalizeNewLayoutVersion();\n     try {\n       // TODO : finalization logic\n       if (LOG.isDebugEnabled()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5ODEzNw==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r490798137", "bodyText": "Can we add a new constructor method without HDDSLayoutVersionManager passed in?\nBy default case, it can extract from DatanodeStateMachine.\nHeartbeatEndpointTask(EndpointStateMachine rpcEndpoint, ConfigurationSource conf, StateContext context,\nHDDSLayoutVersionManager versionManager) should only be visible for test.", "author": "linyiqun", "createdAt": "2020-09-18T08:48:42Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java", "diffHunk": "@@ -83,21 +87,28 @@\n   private StateContext context;\n   private int maxContainerActionsPerHB;\n   private int maxPipelineActionsPerHB;\n+  private HDDSLayoutVersionManager layoutVersionManager;\n \n   /**\n    * Constructs a SCM heart beat.\n    *\n    * @param conf Config.\n    */\n   public HeartbeatEndpointTask(EndpointStateMachine rpcEndpoint,", "originalCommit": "39213d18b279cab71f5353807610ce3840a49a0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNzYwMA==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r491237600", "bodyText": "ok. I will add another constructor.", "author": "prashantpogde", "createdAt": "2020-09-18T23:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5ODEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "579e95ff765567e6d5a7988fcf479b1ddcc9a98d", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java\nindex 88caae5e0..4554bafa7 100644\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java\n+++ b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java\n\n@@ -92,7 +92,29 @@\n   /**\n    * Constructs a SCM heart beat.\n    *\n+   * @param rpcEndpoint rpc Endpoint\n    * @param conf Config.\n+   * @param context State context\n+   */\n+  public HeartbeatEndpointTask(EndpointStateMachine rpcEndpoint,\n+                               ConfigurationSource conf, StateContext context) {\n+    this.rpcEndpoint = rpcEndpoint;\n+    this.conf = conf;\n+    this.context = context;\n+    this.maxContainerActionsPerHB = conf.getInt(HDDS_CONTAINER_ACTION_MAX_LIMIT,\n+        HDDS_CONTAINER_ACTION_MAX_LIMIT_DEFAULT);\n+    this.maxPipelineActionsPerHB = conf.getInt(HDDS_PIPELINE_ACTION_MAX_LIMIT,\n+        HDDS_PIPELINE_ACTION_MAX_LIMIT_DEFAULT);\n+    layoutVersionManager = context.getParent().getDataNodeVersionManager();\n+  }\n+\n+  /**\n+   * Constructs a SCM heart beat.\n+   *\n+   * @param rpcEndpoint rpc Endpoint\n+   * @param conf Config.\n+   * @param context State context\n+   * @param versionManager Layout version Manager\n    */\n   public HeartbeatEndpointTask(EndpointStateMachine rpcEndpoint,\n                                ConfigurationSource conf, StateContext context,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5OTkzOA==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r490799938", "bodyText": "Same review comment for RegisterEndpointTask construction method like above.", "author": "linyiqun", "createdAt": "2020-09-18T08:51:39Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java", "diffHunk": "@@ -65,12 +69,17 @@\n   @VisibleForTesting\n   public RegisterEndpointTask(EndpointStateMachine rpcEndPoint,\n       ConfigurationSource conf, OzoneContainer ozoneContainer,\n-      StateContext context) {\n+      StateContext context, HDDSLayoutVersionManager layoutVersionManager) {", "originalCommit": "39213d18b279cab71f5353807610ce3840a49a0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNzg0NQ==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r491237845", "bodyText": "yup, I will add another constructor.", "author": "prashantpogde", "createdAt": "2020-09-18T23:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5OTkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "579e95ff765567e6d5a7988fcf479b1ddcc9a98d", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java\nindex b4738599b..e8d82974d 100644\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java\n+++ b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java\n\n@@ -65,6 +65,29 @@\n    * @param rpcEndPoint - endpoint\n    * @param conf - conf\n    * @param ozoneContainer - container\n+   * @param context - State context\n+   */\n+  @VisibleForTesting\n+  public RegisterEndpointTask(EndpointStateMachine rpcEndPoint,\n+                              ConfigurationSource conf,\n+                              OzoneContainer ozoneContainer,\n+                              StateContext context) {\n+    this.rpcEndPoint = rpcEndPoint;\n+    this.conf = conf;\n+    this.datanodeContainerManager = ozoneContainer;\n+    this.stateContext = context;\n+    this.layoutVersionManager =\n+          stateContext.getParent().getDataNodeVersionManager();\n+  }\n+\n+  /**\n+   * Creates a register endpoint task.\n+   *\n+   * @param rpcEndPoint - endpoint\n+   * @param conf - conf\n+   * @param ozoneContainer - container\n+   * @param context - State context\n+   * @param layoutVersionManager - layout version Manager\n    */\n   @VisibleForTesting\n   public RegisterEndpointTask(EndpointStateMachine rpcEndPoint,\n"}}, {"oid": "579e95ff765567e6d5a7988fcf479b1ddcc9a98d", "url": "https://github.com/apache/ozone/commit/579e95ff765567e6d5a7988fcf479b1ddcc9a98d", "message": "HDDS-4252. Addressing review comments.", "committedDate": "2020-09-18T23:59:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MTgzOA==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r491251838", "bodyText": "We can reuse the lines of constructor method, like this\npublic HeartbeatEndpointTask(EndpointStateMachine rpcEndpoint,\nConfigurationSource conf, StateContext context) {\nthis(rpcEndpoint, conf, context, context.getParent().getDataNodeVersionManager())\n}\npublic HeartbeatEndpointTask(EndpointStateMachine rpcEndpoint,\nConfigurationSource conf, StateContext context,\nHDDSLayoutVersionManager versionManager) {\n...\nlayoutVersionManager = versionManager;\n}", "author": "linyiqun", "createdAt": "2020-09-19T01:28:10Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java", "diffHunk": "@@ -83,21 +87,50 @@\n   private StateContext context;\n   private int maxContainerActionsPerHB;\n   private int maxPipelineActionsPerHB;\n+  private HDDSLayoutVersionManager layoutVersionManager;\n \n   /**\n    * Constructs a SCM heart beat.\n    *\n+   * @param rpcEndpoint rpc Endpoint\n    * @param conf Config.\n+   * @param context State context\n    */\n   public HeartbeatEndpointTask(EndpointStateMachine rpcEndpoint,", "originalCommit": "579e95ff765567e6d5a7988fcf479b1ddcc9a98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MzYxOQ==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r491253619", "bodyText": "yup", "author": "prashantpogde", "createdAt": "2020-09-19T01:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MTgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "c0887d0b10878d7b99e3931a2113e216afb92df8", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java\nindex 4554bafa7..c63b52a57 100644\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java\n+++ b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/HeartbeatEndpointTask.java\n\n@@ -98,14 +98,8 @@\n    */\n   public HeartbeatEndpointTask(EndpointStateMachine rpcEndpoint,\n                                ConfigurationSource conf, StateContext context) {\n-    this.rpcEndpoint = rpcEndpoint;\n-    this.conf = conf;\n-    this.context = context;\n-    this.maxContainerActionsPerHB = conf.getInt(HDDS_CONTAINER_ACTION_MAX_LIMIT,\n-        HDDS_CONTAINER_ACTION_MAX_LIMIT_DEFAULT);\n-    this.maxPipelineActionsPerHB = conf.getInt(HDDS_PIPELINE_ACTION_MAX_LIMIT,\n-        HDDS_PIPELINE_ACTION_MAX_LIMIT_DEFAULT);\n-    layoutVersionManager = context.getParent().getDataNodeVersionManager();\n+    this(rpcEndpoint, conf, context,\n+        context.getParent().getDataNodeVersionManager());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MjAyNw==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r491252027", "bodyText": "Same suggestion comment for constructor method like above.", "author": "linyiqun", "createdAt": "2020-09-19T01:30:04Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java", "diffHunk": "@@ -54,23 +57,52 @@\n   private DatanodeDetails datanodeDetails;\n   private final OzoneContainer datanodeContainerManager;\n   private StateContext stateContext;\n+  private HDDSLayoutVersionManager layoutVersionManager;\n \n   /**\n    * Creates a register endpoint task.\n    *\n    * @param rpcEndPoint - endpoint\n    * @param conf - conf\n    * @param ozoneContainer - container\n+   * @param context - State context\n    */\n   @VisibleForTesting\n   public RegisterEndpointTask(EndpointStateMachine rpcEndPoint,", "originalCommit": "579e95ff765567e6d5a7988fcf479b1ddcc9a98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MzYzMQ==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r491253631", "bodyText": "yup", "author": "prashantpogde", "createdAt": "2020-09-19T01:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MjAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "c0887d0b10878d7b99e3931a2113e216afb92df8", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java\nindex e8d82974d..b6d0356fe 100644\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java\n+++ b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/states/endpoint/RegisterEndpointTask.java\n\n@@ -72,12 +72,8 @@ public RegisterEndpointTask(EndpointStateMachine rpcEndPoint,\n                               ConfigurationSource conf,\n                               OzoneContainer ozoneContainer,\n                               StateContext context) {\n-    this.rpcEndPoint = rpcEndPoint;\n-    this.conf = conf;\n-    this.datanodeContainerManager = ozoneContainer;\n-    this.stateContext = context;\n-    this.layoutVersionManager =\n-          stateContext.getParent().getDataNodeVersionManager();\n+    this(rpcEndPoint, conf, ozoneContainer, context,\n+        context.getParent().getDataNodeVersionManager());\n   }\n \n   /**\n"}}, {"oid": "c0887d0b10878d7b99e3931a2113e216afb92df8", "url": "https://github.com/apache/ozone/commit/c0887d0b10878d7b99e3931a2113e216afb92df8", "message": "HDDS-4252. Addressing review comments.", "committedDate": "2020-09-19T01:43:43Z", "type": "commit"}, {"oid": "1382acb19d90c5b29d43d245f669d9fb9dbd1bd7", "url": "https://github.com/apache/ozone/commit/1382acb19d90c5b29d43d245f669d9fb9dbd1bd7", "message": "HDDS-4252. Addressing CI failures: part 3.", "committedDate": "2020-09-19T03:28:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNjYyMg==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r492206622", "bodyText": "Nit. Can we return empty list here?", "author": "avijayanhwx", "createdAt": "2020-09-21T16:51:13Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.common;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeType;\n+import org.apache.hadoop.ozone.common.Storage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import static org.apache.hadoop.hdds.server.ServerUtils.getOzoneMetaDirPath;\n+import static org.apache.hadoop.ozone.OzoneConsts.DATANODE_STORAGE_CONFIG;\n+\n+/**\n+ * DataNodeStorageConfig is responsible for management of the\n+ * StorageDirectories used by the DataNode.\n+ */\n+public class DataNodeStorageConfig extends Storage {\n+\n+  /**\n+   * Construct DataNodeStorageConfig.\n+   * @throws IOException if any directories are inaccessible.\n+   */\n+  public DataNodeStorageConfig(OzoneConfiguration conf) throws IOException {\n+    super(NodeType.DATANODE, getOzoneMetaDirPath(conf),\n+        DATANODE_STORAGE_CONFIG);\n+  }\n+\n+  public DataNodeStorageConfig(NodeType type, File root, String sdName)\n+      throws IOException {\n+    super(type, root, sdName);\n+  }\n+\n+  @Override\n+  protected Properties getNodeProperties() {\n+    // No additional properties for now.\n+    return null;", "originalCommit": "1382acb19d90c5b29d43d245f669d9fb9dbd1bd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c464b8aa08272c45d64ba7ab03e85b532c7c62a", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java\ndeleted file mode 100644\nindex c45225d8d..000000000\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hadoop.ozone.container.common;\n-\n-import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeType;\n-import org.apache.hadoop.ozone.common.Storage;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Properties;\n-\n-import static org.apache.hadoop.hdds.server.ServerUtils.getOzoneMetaDirPath;\n-import static org.apache.hadoop.ozone.OzoneConsts.DATANODE_STORAGE_CONFIG;\n-\n-/**\n- * DataNodeStorageConfig is responsible for management of the\n- * StorageDirectories used by the DataNode.\n- */\n-public class DataNodeStorageConfig extends Storage {\n-\n-  /**\n-   * Construct DataNodeStorageConfig.\n-   * @throws IOException if any directories are inaccessible.\n-   */\n-  public DataNodeStorageConfig(OzoneConfiguration conf) throws IOException {\n-    super(NodeType.DATANODE, getOzoneMetaDirPath(conf),\n-        DATANODE_STORAGE_CONFIG);\n-  }\n-\n-  public DataNodeStorageConfig(NodeType type, File root, String sdName)\n-      throws IOException {\n-    super(type, root, sdName);\n-  }\n-\n-  @Override\n-  protected Properties getNodeProperties() {\n-    // No additional properties for now.\n-    return null;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMDAwNg==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r492210006", "bodyText": "There is already a Datanode Version file managed by the org.apache.hadoop.ozone.container.common.helpers.DatanodeVersionFile class. This is supposed to manage the clusterId, Datanode ID, layout version etc. If we create a new class to be passed into the Layout Version Manager, then we end up creating 2 Version files on disk for DN.", "author": "avijayanhwx", "createdAt": "2020-09-21T16:57:04Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.container.common;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeType;\n+import org.apache.hadoop.ozone.common.Storage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import static org.apache.hadoop.hdds.server.ServerUtils.getOzoneMetaDirPath;\n+import static org.apache.hadoop.ozone.OzoneConsts.DATANODE_STORAGE_CONFIG;\n+\n+/**\n+ * DataNodeStorageConfig is responsible for management of the\n+ * StorageDirectories used by the DataNode.\n+ */\n+public class DataNodeStorageConfig extends Storage {", "originalCommit": "1382acb19d90c5b29d43d245f669d9fb9dbd1bd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIyMTYwNg==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r493221606", "bodyText": "Earlier I was thinking of refactoring that so that the mechanism is consistent across OM/SCM/Datanode.\nBut I will go ahead and used the DataNodeVersionFile for now.", "author": "prashantpogde", "createdAt": "2020-09-23T06:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMDAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "5c464b8aa08272c45d64ba7ab03e85b532c7c62a", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java\ndeleted file mode 100644\nindex c45225d8d..000000000\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/container/common/DataNodeStorageConfig.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hadoop.ozone.container.common;\n-\n-import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeType;\n-import org.apache.hadoop.ozone.common.Storage;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Properties;\n-\n-import static org.apache.hadoop.hdds.server.ServerUtils.getOzoneMetaDirPath;\n-import static org.apache.hadoop.ozone.OzoneConsts.DATANODE_STORAGE_CONFIG;\n-\n-/**\n- * DataNodeStorageConfig is responsible for management of the\n- * StorageDirectories used by the DataNode.\n- */\n-public class DataNodeStorageConfig extends Storage {\n-\n-  /**\n-   * Construct DataNodeStorageConfig.\n-   * @throws IOException if any directories are inaccessible.\n-   */\n-  public DataNodeStorageConfig(OzoneConfiguration conf) throws IOException {\n-    super(NodeType.DATANODE, getOzoneMetaDirPath(conf),\n-        DATANODE_STORAGE_CONFIG);\n-  }\n-\n-  public DataNodeStorageConfig(NodeType type, File root, String sdName)\n-      throws IOException {\n-    super(type, root, sdName);\n-  }\n-\n-  @Override\n-  protected Properties getNodeProperties() {\n-    // No additional properties for now.\n-    return null;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjAzOA==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r492216038", "bodyText": "Why do we need to create a new 'register' method with Layout Version arg, without changing the existing method? We would always need a Layout Version during registering.", "author": "avijayanhwx", "createdAt": "2020-09-21T17:07:34Z", "path": "hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/StorageContainerDatanodeProtocol.java", "diffHunk": "@@ -84,4 +86,19 @@ SCMRegisteredResponseProto register(\n           ContainerReportsProto containerReportsRequestProto,\n           PipelineReportsProto pipelineReports) throws IOException;\n \n+  /**\n+   * Register Datanode.\n+   * @param datanodeDetails - Datanode Details.\n+   * @param nodeReport - Node Report.\n+   * @param containerReportsRequestProto - Container Reports.\n+   * @param layoutInfo - Layout Version Information.\n+   * @return SCM Command.\n+   */\n+  SCMRegisteredResponseProto register(", "originalCommit": "1382acb19d90c5b29d43d245f669d9fb9dbd1bd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIyMTcwMg==", "url": "https://github.com/apache/ozone/pull/1432#discussion_r493221702", "bodyText": "yup. Done.", "author": "prashantpogde", "createdAt": "2020-09-23T06:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "5c464b8aa08272c45d64ba7ab03e85b532c7c62a", "chunk": "diff --git a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/StorageContainerDatanodeProtocol.java b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/StorageContainerDatanodeProtocol.java\nindex 3c4ddf315..22bb09f22 100644\n--- a/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/StorageContainerDatanodeProtocol.java\n+++ b/hadoop-hdds/container-service/src/main/java/org/apache/hadoop/ozone/protocol/StorageContainerDatanodeProtocol.java\n\n@@ -73,19 +73,6 @@ SCMVersionResponseProto getVersion(SCMVersionRequestProto versionRequest)\n   SCMHeartbeatResponseProto sendHeartbeat(SCMHeartbeatRequestProto heartbeat)\n       throws IOException;\n \n-  /**\n-   * Register Datanode.\n-   * @param datanodeDetails - Datanode Details.\n-   * @param nodeReport - Node Report.\n-   * @param containerReportsRequestProto - Container Reports.\n-   * @return SCM Command.\n-   */\n-  SCMRegisteredResponseProto register(\n-          DatanodeDetailsProto datanodeDetails,\n-          NodeReportProto nodeReport,\n-          ContainerReportsProto containerReportsRequestProto,\n-          PipelineReportsProto pipelineReports) throws IOException;\n-\n   /**\n    * Register Datanode.\n    * @param datanodeDetails - Datanode Details.\n"}}, {"oid": "5c464b8aa08272c45d64ba7ab03e85b532c7c62a", "url": "https://github.com/apache/ozone/commit/5c464b8aa08272c45d64ba7ab03e85b532c7c62a", "message": "HDDS-4252. Addressing review comments: part 2", "committedDate": "2020-09-23T06:13:05Z", "type": "commit"}, {"oid": "caf3711fedae63cff691dcf3d48165ff53978bb7", "url": "https://github.com/apache/ozone/commit/caf3711fedae63cff691dcf3d48165ff53978bb7", "message": "Merge remote-tracking branch 'upstream/HDDS-3698-upgrade' into HDDS-4252", "committedDate": "2020-09-24T02:58:09Z", "type": "commit"}]}