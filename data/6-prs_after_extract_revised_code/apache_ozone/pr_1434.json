{"pr_number": 1434, "pr_title": "HDDS-3727. Volume space: check quotaUsageInBytes when write key.", "pr_createdAt": "2020-09-17T09:51:36Z", "pr_url": "https://github.com/apache/ozone/pull/1434", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyNjc5MA==", "url": "https://github.com/apache/ozone/pull/1434#discussion_r492526790", "bodyText": "QUOTA_CHECK_ERROR  -> QUOTA_EXCEEDED", "author": "ChenSammi", "createdAt": "2020-09-22T07:31:07Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/exceptions/OMException.java", "diffHunk": "@@ -229,7 +229,9 @@ public String toString() {\n \n     NOT_SUPPORTED_OPERATION,\n \n-    PARTIAL_RENAME\n+    PARTIAL_RENAME,\n+\n+    QUOTA_CHECK_ERROR", "originalCommit": "ea519b5d35956b90a0e258b3c40a6e7f03e77582", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d94b314c26473eb20c56b181684041b239a2d29", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/exceptions/OMException.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/exceptions/OMException.java\nindex b8a916b29..a2f4d6aef 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/exceptions/OMException.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/exceptions/OMException.java\n\n@@ -231,7 +231,7 @@ public String toString() {\n \n     PARTIAL_RENAME,\n \n-    QUOTA_CHECK_ERROR\n+    QUOTA_EXCEEDED\n \n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3NTEyNg==", "url": "https://github.com/apache/ozone/pull/1434#discussion_r492575126", "bodyText": "Can we add used bytes check in each test case?", "author": "ChenSammi", "createdAt": "2020-09-22T08:53:55Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -707,6 +707,62 @@ public void testPutKey() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testCheckUsedBytesQuota() throws IOException {", "originalCommit": "ea519b5d35956b90a0e258b3c40a6e7f03e77582", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d94b314c26473eb20c56b181684041b239a2d29", "chunk": "diff --git a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\nindex b0df46098..a5497c53d 100644\n--- a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\n+++ b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\n\n@@ -733,8 +733,10 @@ public void testCheckUsedBytesQuota() throws IOException {\n       writeKey(bucket, UUID.randomUUID().toString(), ONE, value, valueLength);\n     } catch (IOException ex) {\n       countException++;\n-      GenericTestUtils.assertExceptionContains(\"QUOTA_CHECK_ERROR\", ex);\n+      GenericTestUtils.assertExceptionContains(\"QUOTA_EXCEEDED\", ex);\n     }\n+    // Write failed, volume usedBytes should be 0\n+    Assert.assertEquals(0L, store.getVolume(volumeName).getUsedBytes());\n \n     // Test write file.\n     // The remaining quota does not satisfy a block size, so the write fails.\n"}}, {"oid": "8d94b314c26473eb20c56b181684041b239a2d29", "url": "https://github.com/apache/ozone/commit/8d94b314c26473eb20c56b181684041b239a2d29", "message": "add check volume quota in bytes", "committedDate": "2020-09-24T07:10:06Z", "type": "commit"}, {"oid": "8d94b314c26473eb20c56b181684041b239a2d29", "url": "https://github.com/apache/ozone/commit/8d94b314c26473eb20c56b181684041b239a2d29", "message": "add check volume quota in bytes", "committedDate": "2020-09-24T07:10:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMDc2Mg==", "url": "https://github.com/apache/ozone/pull/1434#discussion_r495520762", "bodyText": "Can we add a isQuotaInBytesSet check in OmVolumeArgs and use this function instead?", "author": "ChenSammi", "createdAt": "2020-09-27T03:06:17Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -277,6 +277,16 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           .collect(Collectors.toList());\n       omKeyInfo.appendNewBlocks(newLocationList, false);\n \n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      omBucketInfo = getBucketInfo(omMetadataManager, volumeName, bucketName);\n+      // check volume quota\n+      long preAllocatedSpace = newLocationList.size()\n+          * ozoneManager.getScmBlockSize()\n+          * omKeyInfo.getFactor().getNumber();\n+      if (omVolumeArgs.getQuotaInBytes() > OzoneConsts.QUOTA_RESET) {", "originalCommit": "8d94b314c26473eb20c56b181684041b239a2d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUzODY5NQ==", "url": "https://github.com/apache/ozone/pull/1434#discussion_r495538695", "bodyText": "I'm going to put the if in checkVolumeQuotaInBytes, which might seem a little more compact.", "author": "captainzmc", "createdAt": "2020-09-27T07:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMDc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6a7351f482511db2dade0c4d83a815ba7ec46bff", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java\nindex 73d5142e2..367e4ba51 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java\n\n@@ -283,9 +283,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       long preAllocatedSpace = newLocationList.size()\n           * ozoneManager.getScmBlockSize()\n           * omKeyInfo.getFactor().getNumber();\n-      if (omVolumeArgs.getQuotaInBytes() > OzoneConsts.QUOTA_RESET) {\n-        checkVolumeQuotaInBytes(omVolumeArgs, preAllocatedSpace);\n-      }\n+      checkVolumeQuotaInBytes(omVolumeArgs, preAllocatedSpace);\n \n       // Add to cache entry can be done outside of lock for this openKey.\n       // Even if bucket gets deleted, when commitKey we shall identify if\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTA4OQ==", "url": "https://github.com/apache/ozone/pull/1434#discussion_r495521089", "bodyText": "If A object has multiple blocks, and quota_exceeded exception is thrown out at the last block, shall we only deduct the block space size at this step?", "author": "ChenSammi", "createdAt": "2020-09-27T03:10:44Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -227,6 +232,18 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     } catch (IOException ex) {\n       omMetrics.incNumBlockAllocateCallFails();\n       exception = ex;\n+      if (exception.toString().contains(\n+          OMException.ResultCodes.QUOTA_EXCEEDED.toString())) {\n+        long keyAllocatedSpace = openKeyInfo.getLatestVersionLocations()\n+            .getLocationListCount() * ozoneManager.getScmBlockSize()\n+            * openKeyInfo.getFactor().getNumber();\n+        // Update usedBytes atomically. ErrorOMResponse does not persist the DB,\n+        // so we update the cache first. The next time another key is written,\n+        // volume Args will be persisted to the DB.\n+        // TODO: There is a delay in updating DB in this way, and if necessary\n+        //  we can modify the ErrorOMResponse to avoid it.\n+        omVolumeArgs.getUsedBytes().add(-keyAllocatedSpace);", "originalCommit": "8d94b314c26473eb20c56b181684041b239a2d29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a7351f482511db2dade0c4d83a815ba7ec46bff", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java\nindex 318ab20d4..afd616221 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java\n\n@@ -232,18 +229,6 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     } catch (IOException ex) {\n       omMetrics.incNumBlockAllocateCallFails();\n       exception = ex;\n-      if (exception.toString().contains(\n-          OMException.ResultCodes.QUOTA_EXCEEDED.toString())) {\n-        long keyAllocatedSpace = openKeyInfo.getLatestVersionLocations()\n-            .getLocationListCount() * ozoneManager.getScmBlockSize()\n-            * openKeyInfo.getFactor().getNumber();\n-        // Update usedBytes atomically. ErrorOMResponse does not persist the DB,\n-        // so we update the cache first. The next time another key is written,\n-        // volume Args will be persisted to the DB.\n-        // TODO: There is a delay in updating DB in this way, and if necessary\n-        //  we can modify the ErrorOMResponse to avoid it.\n-        omVolumeArgs.getUsedBytes().add(-keyAllocatedSpace);\n-      }\n       omClientResponse = new OMAllocateBlockResponse(createErrorOMResponse(\n           omResponse, exception));\n       LOG.error(\"Allocate Block failed. Volume:{}, Bucket:{}, OpenKey:{}. \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTI1Mw==", "url": "https://github.com/apache/ozone/pull/1434#discussion_r495521253", "bodyText": "Can we add a multiple block write case here\uff0cso the first few block will succeed\uff0c while the later block will fail due to quota exceed?", "author": "ChenSammi", "createdAt": "2020-09-27T03:13:12Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java", "diffHunk": "@@ -707,9 +707,71 @@ public void testPutKey() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testCheckUsedBytesQuota() throws IOException {\n+    String volumeName = UUID.randomUUID().toString();\n+    String bucketName = UUID.randomUUID().toString();\n+    OzoneVolume volume = null;\n+\n+    String value = \"sample value\";\n+    int blockSize = (int) ozoneManager.getConfiguration().getStorageSize(\n+        OZONE_SCM_BLOCK_SIZE, OZONE_SCM_BLOCK_SIZE_DEFAULT, StorageUnit.BYTES);\n+    int valueLength = value.getBytes().length;\n+    int countException = 0;\n+\n+    store.createVolume(volumeName);\n+    volume = store.getVolume(volumeName);\n+    // Set quota In Bytes for a smaller value\n+    store.getVolume(volumeName).setQuota(\n+        OzoneQuota.parseQuota(\"1 Bytes\", 100));\n+    volume.createBucket(bucketName);\n+    OzoneBucket bucket = volume.getBucket(bucketName);\n+\n+    // Test write key.\n+    // The remaining quota does not satisfy a block size, so the write fails.\n+    try {\n+      writeKey(bucket, UUID.randomUUID().toString(), ONE, value, valueLength);\n+    } catch (IOException ex) {\n+      countException++;\n+      GenericTestUtils.assertExceptionContains(\"QUOTA_EXCEEDED\", ex);\n+    }\n+    // Write failed, volume usedBytes should be 0\n+    Assert.assertEquals(0L, store.getVolume(volumeName).getUsedBytes());\n+\n+    // Test write file.\n+    // The remaining quota does not satisfy a block size, so the write fails.\n+    try {\n+      writeFile(bucket, UUID.randomUUID().toString(), ONE, value, 0);\n+    } catch (IOException ex) {\n+      countException++;\n+      GenericTestUtils.assertExceptionContains(\"QUOTA_EXCEEDED\", ex);\n+    }\n+    // Write failed, volume usedBytes should be 0\n+    Assert.assertEquals(0L, store.getVolume(volumeName).getUsedBytes());\n+\n+    // Write large key, test allocateBlock fails.\n+    store.getVolume(volumeName).setQuota(\n+        OzoneQuota.parseQuota(blockSize + \"Bytes\", 100));\n+    try {\n+      OzoneOutputStream out = bucket.createKey(UUID.randomUUID().toString(),\n+          valueLength, STAND_ALONE, ONE, new HashMap<>());\n+      for(int i=0; i <= blockSize/value.length(); i++) {\n+        out.write(value.getBytes());\n+      }\n+      out.close();\n+    } catch (IOException ex) {\n+      countException++;\n+      GenericTestUtils.assertExceptionContains(\"QUOTA_EXCEEDED\", ex);\n+    }\n+    // AllocateBlock failed, volume usedBytes should be 0\n+    Assert.assertEquals(0L, store.getVolume(volumeName).getUsedBytes());\n+\n+    Assert.assertEquals(3, countException);", "originalCommit": "8d94b314c26473eb20c56b181684041b239a2d29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a7351f482511db2dade0c4d83a815ba7ec46bff", "chunk": "diff --git a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\nindex a5497c53d..461313a14 100644\n--- a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\n+++ b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/client/rpc/TestOzoneRpcClientAbstract.java\n\n@@ -749,7 +749,7 @@ public void testCheckUsedBytesQuota() throws IOException {\n     // Write failed, volume usedBytes should be 0\n     Assert.assertEquals(0L, store.getVolume(volumeName).getUsedBytes());\n \n-    // Write large key, test allocateBlock fails.\n+    // Write a key(with two blocks), test allocateBlock fails.\n     store.getVolume(volumeName).setQuota(\n         OzoneQuota.parseQuota(blockSize + \"Bytes\", 100));\n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTU2OQ==", "url": "https://github.com/apache/ozone/pull/1434#discussion_r495521569", "bodyText": "unnessary empty line.", "author": "ChenSammi", "createdAt": "2020-09-27T03:16:49Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -533,6 +533,26 @@ protected FileEncryptionInfo getFileEncryptionInfo(KeyArgs keyArgs) {\n     return encryptionInfo;\n   }\n \n+  /**\n+   * Check volume quota in bytes.\n+   * @param omVolumeArgs\n+   * @param allocateSize\n+   * @throws IOException\n+   */\n+  protected void checkVolumeQuotaInBytes(OmVolumeArgs omVolumeArgs,\n+      long allocateSize) throws IOException {\n+    long usedBytes = omVolumeArgs.getUsedBytes().sum();\n+    long quotaInBytes = omVolumeArgs.getQuotaInBytes();\n+    if (quotaInBytes - usedBytes < allocateSize) {\n+      throw new OMException(\"The DiskSpace quota of volume:\"\n+          + omVolumeArgs.getVolume() + \"exceeded: quotaInBytes: \"\n+          + quotaInBytes + \" Bytes but diskspace consumed: \" + (usedBytes\n+          + allocateSize) + \" Bytes.\",\n+          OMException.ResultCodes.QUOTA_EXCEEDED);\n+    }\n+", "originalCommit": "8d94b314c26473eb20c56b181684041b239a2d29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a7351f482511db2dade0c4d83a815ba7ec46bff", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java\nindex 0e2a0f00a..e24f4e2bf 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java\n\n@@ -541,16 +542,17 @@ protected FileEncryptionInfo getFileEncryptionInfo(KeyArgs keyArgs) {\n    */\n   protected void checkVolumeQuotaInBytes(OmVolumeArgs omVolumeArgs,\n       long allocateSize) throws IOException {\n-    long usedBytes = omVolumeArgs.getUsedBytes().sum();\n-    long quotaInBytes = omVolumeArgs.getQuotaInBytes();\n-    if (quotaInBytes - usedBytes < allocateSize) {\n-      throw new OMException(\"The DiskSpace quota of volume:\"\n-          + omVolumeArgs.getVolume() + \"exceeded: quotaInBytes: \"\n-          + quotaInBytes + \" Bytes but diskspace consumed: \" + (usedBytes\n-          + allocateSize) + \" Bytes.\",\n-          OMException.ResultCodes.QUOTA_EXCEEDED);\n+    if (omVolumeArgs.getQuotaInBytes() > OzoneConsts.QUOTA_RESET) {\n+      long usedBytes = omVolumeArgs.getUsedBytes().sum();\n+      long quotaInBytes = omVolumeArgs.getQuotaInBytes();\n+      if (quotaInBytes - usedBytes < allocateSize) {\n+        throw new OMException(\"The DiskSpace quota of volume:\"\n+            + omVolumeArgs.getVolume() + \"exceeded: quotaInBytes: \"\n+            + quotaInBytes + \" Bytes but diskspace consumed: \" + (usedBytes\n+            + allocateSize) + \" Bytes.\",\n+            OMException.ResultCodes.QUOTA_EXCEEDED);\n+      }\n     }\n-\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTg5OA==", "url": "https://github.com/apache/ozone/pull/1434#discussion_r495521898", "bodyText": "unnessary blank line.", "author": "ChenSammi", "createdAt": "2020-09-27T03:21:11Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -239,8 +256,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     auditLog(auditLogger, buildAuditMessage(OMAction.ALLOCATE_BLOCK, auditMap,\n         exception, getOmRequest().getUserInfo()));\n \n-\n-\n     return omClientResponse;\n   }\n+", "originalCommit": "8d94b314c26473eb20c56b181684041b239a2d29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a7351f482511db2dade0c4d83a815ba7ec46bff", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java\nindex 318ab20d4..afd616221 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java\n\n@@ -258,5 +243,4 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n     return omClientResponse;\n   }\n-\n }\n"}}, {"oid": "6a7351f482511db2dade0c4d83a815ba7ec46bff", "url": "https://github.com/apache/ozone/commit/6a7351f482511db2dade0c4d83a815ba7ec46bff", "message": "fix review issues", "committedDate": "2020-09-27T08:25:53Z", "type": "commit"}, {"oid": "fc61b5694d715ce6656b3d7bb529d125a826c87d", "url": "https://github.com/apache/ozone/commit/fc61b5694d715ce6656b3d7bb529d125a826c87d", "message": "fix ut checkstyle", "committedDate": "2020-09-28T08:23:36Z", "type": "commit"}]}