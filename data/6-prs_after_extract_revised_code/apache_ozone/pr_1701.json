{"pr_number": 1701, "pr_title": "HDDS-4585. Support bucket acl operation in S3g", "pr_createdAt": "2020-12-15T08:29:36Z", "pr_url": "https://github.com/apache/ozone/pull/1701", "timeline": [{"oid": "381d737cb4c09da790e5de102cfdde427104f92c", "url": "https://github.com/apache/ozone/commit/381d737cb4c09da790e5de102cfdde427104f92c", "message": "HDDS-4585. Support bucket acl operation in S3 gateway.", "committedDate": "2020-12-15T08:23:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMDIwNQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r552910205", "bodyText": "NIT: can we use apache common ListUtils.unmodifiableList here?", "author": "xiaoyuyao", "createdAt": "2021-01-06T19:10:32Z", "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java", "diffHunk": "@@ -261,7 +270,37 @@ public Instant getModificationTime() {\n    * @return aclMap\n    */\n   public List<OzoneAcl> getAcls() {\n-    return acls;\n+    return (ArrayList)((ArrayList)acls).clone();", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkxNTQyOQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565915429", "bodyText": "Sure.", "author": "ChenSammi", "createdAt": "2021-01-28T08:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMDIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc84d5c2895564969db095c9f10275af783c74d3", "chunk": "diff --git a/hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java b/hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java\nindex 58aa58541a..3847b1214f 100644\n--- a/hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java\n+++ b/hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java\n\n@@ -270,7 +270,7 @@ public Instant getModificationTime() {\n    * @return aclMap\n    */\n   public List<OzoneAcl> getAcls() {\n-    return (ArrayList)((ArrayList)acls).clone();\n+    return ListUtils.unmodifiableList(acls);\n   }\n \n    /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMDkwOA==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r552910908", "bodyText": "Do we need volume acl APIs for s3g?", "author": "xiaoyuyao", "createdAt": "2021-01-06T19:12:03Z", "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java", "diffHunk": "@@ -261,7 +270,37 @@ public Instant getModificationTime() {\n    * @return aclMap\n    */\n   public List<OzoneAcl> getAcls() {\n-    return acls;\n+    return (ArrayList)((ArrayList)acls).clone();\n+  }\n+\n+   /**\n+   * Adds ACLs to the volume.\n+   * @param addAcl ACL to be added\n+   * @return true - if acl is successfully added, false if acl already exists\n+   * for the bucket.\n+   * @throws IOException\n+   */\n+  public boolean addAcl(OzoneAcl addAcl) throws IOException {", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NzMwNA==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565897304", "bodyText": "Yes.", "author": "ChenSammi", "createdAt": "2021-01-28T08:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMDkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "cc84d5c2895564969db095c9f10275af783c74d3", "chunk": "diff --git a/hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java b/hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java\nindex 58aa58541a..3847b1214f 100644\n--- a/hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java\n+++ b/hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java\n\n@@ -270,7 +270,7 @@ public Instant getModificationTime() {\n    * @return aclMap\n    */\n   public List<OzoneAcl> getAcls() {\n-    return (ArrayList)((ArrayList)acls).clone();\n+    return ListUtils.unmodifiableList(acls);\n   }\n \n    /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjgxMA==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r552912810", "bodyText": "Does this change the semantics of the get/list for bucket endpoint?", "author": "xiaoyuyao", "createdAt": "2021-01-06T19:15:50Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java", "diffHunk": "@@ -75,7 +87,7 @@\n   @GET\n   @SuppressFBWarnings\n   @SuppressWarnings(\"parameternumber\")\n-  public Response list(\n+  public Response get(", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwMDQwOQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565900409", "bodyText": "The function name doesn't matter.  It's the annotation @get which defines that this get or list function is called when HTTP GET against bucket is called.\nThere are plenty of HTTP GET operations for a bucket, such as list object, get ACL, each with different parameters.\nBefore this patch, bucket endpoint only supports bucket list GET. With this patch, bucket ACL get and bucket list are both supported.\nIn future, when we need to support another GET operation, we just need to add more logic to this bucket endpoint get function.", "author": "ChenSammi", "createdAt": "2021-01-28T08:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU3OTkxNA==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r566579914", "bodyText": "Thanks for the details. Make sense to me.", "author": "xiaoyuyao", "createdAt": "2021-01-29T04:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "51898fdbc6b49cd99df5f399409696f2f4371c72", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\nindex 2131b7d3cf..b25f73d5f7 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n\n@@ -87,7 +88,7 @@\n   @GET\n   @SuppressFBWarnings\n   @SuppressWarnings(\"parameternumber\")\n-  public Response get(\n+  public Response list(\n       @PathParam(\"bucket\") String bucketName,\n       @QueryParam(\"delimiter\") String delimiter,\n       @QueryParam(\"encoding-type\") String encodingType,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxNTM3Mg==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r552915372", "bodyText": "Can you add a TODO to support bucket owner here?", "author": "xiaoyuyao", "createdAt": "2021-01-06T19:21:14Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java", "diffHunk": "@@ -353,6 +375,215 @@ public MultiDeleteResponse multiDelete(@PathParam(\"bucket\") String bucketName,\n     return result;\n   }\n \n+  /**\n+   * Implement acl get.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAcl.html\n+   */\n+  public S3BucketAcl getAcl(String bucketName)\n+      throws OS3Exception, IOException {\n+    S3BucketAcl result = new S3BucketAcl();\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+      S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwMjk0MQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565902941", "bodyText": "Sure.", "author": "ChenSammi", "createdAt": "2021-01-28T08:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxNTM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cc84d5c2895564969db095c9f10275af783c74d3", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\nindex 2131b7d3cf..d667336a79 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n\n@@ -386,8 +384,13 @@ public S3BucketAcl getAcl(String bucketName)\n     try {\n       OzoneBucket bucket = getBucket(bucketName);\n       OzoneVolume volume = getVolume();\n+      // TODO: use bucket owner instead of volume owner here once bucket owner\n+      // TODO: is supported.\n       S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n       result.setOwner(owner);\n+\n+      // TODO: remove this duplication avoid logic when ACCESS and DEFAULT scope\n+      // TODO: are merged.\n       // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n       Set<Grant> grantSet = new HashSet<>();\n       // Return ACL list\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxODQ4OQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r552918489", "bodyText": "The Ozone Bucket acl should not have duplicate entries. Can we use the list directly with the the list->set->list conversion?", "author": "xiaoyuyao", "createdAt": "2021-01-06T19:27:26Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java", "diffHunk": "@@ -353,6 +375,215 @@ public MultiDeleteResponse multiDelete(@PathParam(\"bucket\") String bucketName,\n     return result;\n   }\n \n+  /**\n+   * Implement acl get.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAcl.html\n+   */\n+  public S3BucketAcl getAcl(String bucketName)\n+      throws OS3Exception, IOException {\n+    S3BucketAcl result = new S3BucketAcl();\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+      S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n+      result.setOwner(owner);\n+      // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n+      Set<Grant> grantSet = new HashSet<>();\n+      // Return ACL list\n+      for (OzoneAcl acl : bucket.getAcls()) {\n+        List<Grant> grants = S3Acl.ozoneNativeAclToS3Acl(acl);", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkxNjg4Mw==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565916883", "bodyText": "Yes, we don't have duplicate entries in individual ACCESS and DEFAULT scope, but we may have two entries with the same content besides the scope field. So I still need this set to cover this case, to avoid add two same entries.\nIn future, when ACCESS and DEFAULT scope is merged, we can refactor this part of code. I will add a TODO here.", "author": "ChenSammi", "createdAt": "2021-01-28T08:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxODQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc84d5c2895564969db095c9f10275af783c74d3", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\nindex 2131b7d3cf..d667336a79 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n\n@@ -386,8 +384,13 @@ public S3BucketAcl getAcl(String bucketName)\n     try {\n       OzoneBucket bucket = getBucket(bucketName);\n       OzoneVolume volume = getVolume();\n+      // TODO: use bucket owner instead of volume owner here once bucket owner\n+      // TODO: is supported.\n       S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n       result.setOwner(owner);\n+\n+      // TODO: remove this duplication avoid logic when ACCESS and DEFAULT scope\n+      // TODO: are merged.\n       // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n       Set<Grant> grantSet = new HashSet<>();\n       // Return ACL list\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM4MDI1MQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r562380251", "bodyText": "should we allow other combinations here? such as READ+WRITE?  I feel if we remove \"else\" here, the 1-1 mapping between Ozone AclType to the S3 ACLType can be added.", "author": "xiaoyuyao", "createdAt": "2021-01-22T04:26:25Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java", "diffHunk": "@@ -0,0 +1,388 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.hadoop.ozone.s3.endpoint;\n+\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.s3.endpoint.S3BucketAcl.Grant;\n+import org.apache.hadoop.ozone.s3.endpoint.S3BucketAcl.Grantee;\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.exception.S3ErrorTable;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.INVALID_ARGUMENT;\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.NOT_IMPLEMENTED;\n+\n+public final class S3Acl {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3Acl.class);\n+\n+  // ACL put related headers\n+  public static final String grantRead = \"x-amz-grant-read\";\n+  public static final String grantWrite = \"x-amz-grant-write\";\n+  public static final String grantReadACP = \"x-amz-grant-read-acp\";\n+  public static final String grantWriteACP = \"x-amz-grant-write-acp\";\n+  public static final String grantFullControl = \"x-amz-grant-full-control\";\n+\n+  // Not supported headers at current stage, may support it in future\n+  public static final String cannedAclHeader = \"x-amz-acl\";\n+\n+  /**\n+   * https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html.\n+   */\n+  enum ACLType {\n+    // Allows grantee to list the objects in the bucket\n+    READ(\"READ\"),\n+    // Allows grantee to create, overwrite, and delete any object in the bucket\n+    WRITE(\"WRITE\"),\n+    // Allows grantee to write the bucket ACL\n+    READ_ACP(\"READ_ACP\"),\n+    // Allows grantee to write the ACL for the applicable bucket\n+    WRITE_ACP(\"WRITE_ACP\"),\n+    // Allows grantee above all permissions on the bucket\n+    FULL_CONTROL(\"FULL_CONTROL\");\n+\n+    public String getValue() {\n+      return value;\n+    }\n+    /**\n+     * String value for this Enum.\n+     */\n+    private final String value;\n+\n+    /**\n+     * @param val String type for this enum.\n+     */\n+    ACLType(String val) {\n+      value = val;\n+    }\n+\n+\n+    public static ACLType getType(String typeStr) {\n+      for(ACLType type: ACLType.values()) {\n+        if (type.getValue().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  enum ACLIdentityType {\n+    USER(\"CanonicalUser\", true, \"id\"),\n+    GROUP(\"Group\", false, \"url\"),\n+    USER_BY_EMAIL(\"AmazonCustomerByEmail\", false, \"emailAddress\");\n+\n+    public String getGranteeType() {\n+      return granteeType;\n+    }\n+\n+    public String getHeaderType() {\n+      return granteeInHeader;\n+    }\n+\n+    /**\n+     *  Grantee type in body XML.\n+     */\n+    private final String granteeType;\n+\n+    /**\n+     * Is this type supported or not.\n+     */\n+    private final boolean supported;\n+\n+    /**\n+     * Grantee type in header.\n+     */\n+    private final String granteeInHeader;\n+\n+    /**\n+     * Init OzoneACLtypes enum.\n+     *\n+     * @param val String type for this enum.\n+     */\n+    ACLIdentityType(String val, boolean support, String headerType) {\n+      granteeType = val;\n+      supported = support;\n+      granteeInHeader = headerType;\n+    }\n+\n+    boolean isSupported() {\n+      return supported;\n+    }\n+\n+    public static ACLIdentityType getTypeFromGranteeType(String typeStr) {\n+      for(ACLIdentityType type: ACLIdentityType.values()) {\n+        if (type.getGranteeType().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+\n+    public static ACLIdentityType getTypeFromHeaderType(String typeStr) {\n+      for(ACLIdentityType type: ACLIdentityType.values()) {\n+        if (type.getHeaderType().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  public static boolean isGranteeTypeSupported(String typeStr) {\n+    ACLIdentityType type =  ACLIdentityType.getTypeFromGranteeType(typeStr);\n+    return type == null ? false : type.isSupported();\n+  }\n+\n+  public static boolean isHeaderTypeSupported(String typeStr) {\n+    ACLIdentityType type =  ACLIdentityType.getTypeFromHeaderType(typeStr);\n+    return type == null ? false : type.isSupported();\n+  }\n+\n+  public static List<Grant> ozoneNativeAclToS3Acl(OzoneAcl ozoneAcl) {\n+    // Since currently only \"CanonicalUser\" is supported, which maps to Ozone\n+    // \"USER\"\n+    List<Grant> grantList = new ArrayList<>();\n+    if (ozoneAcl.getType() != IAccessAuthorizer.ACLIdentityType.USER) {\n+      return grantList;\n+    }\n+\n+    Grantee grantee = new Grantee();\n+    grantee.setDisplayName(ozoneAcl.getName());\n+    grantee.setId(ozoneAcl.getName());\n+\n+    List<IAccessAuthorizer.ACLType> acls = ozoneAcl.getAclList();\n+    if (acls.contains(IAccessAuthorizer.ACLType.ALL)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.FULL_CONTROL.toString());\n+      grantList.add(grant);\n+      return grantList;\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.WRITE_ACL)) {", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwNjQ4Mg==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565906482", "bodyText": "If I understand your question correctly,  when else is removed, then we will have a grant list with both FULL_CONTROL and WRITE_ACL grant for the same user, which is kind of information duplicate.", "author": "ChenSammi", "createdAt": "2021-01-28T08:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM4MDI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc84d5c2895564969db095c9f10275af783c74d3", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\nindex 433139aacd..b59e686954 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\n\n@@ -179,7 +179,6 @@ public static boolean isHeaderTypeSupported(String typeStr) {\n       grant.setGrantee(grantee);\n       grant.setPermission(ACLType.FULL_CONTROL.toString());\n       grantList.add(grant);\n-      return grantList;\n     } else if (acls.contains(IAccessAuthorizer.ACLType.WRITE_ACL)) {\n       Grant grant = new Grant();\n       grant.setGrantee(grantee);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM4MjA0Mw==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r562382043", "bodyText": "s3 acl may have multiple grants for the same user. When it is converted to OzoneAcl, we should combine to take the advantage of BitSet.", "author": "xiaoyuyao", "createdAt": "2021-01-22T04:32:50Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java", "diffHunk": "@@ -0,0 +1,388 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.hadoop.ozone.s3.endpoint;\n+\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.s3.endpoint.S3BucketAcl.Grant;\n+import org.apache.hadoop.ozone.s3.endpoint.S3BucketAcl.Grantee;\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.exception.S3ErrorTable;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.INVALID_ARGUMENT;\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.NOT_IMPLEMENTED;\n+\n+public final class S3Acl {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3Acl.class);\n+\n+  // ACL put related headers\n+  public static final String grantRead = \"x-amz-grant-read\";\n+  public static final String grantWrite = \"x-amz-grant-write\";\n+  public static final String grantReadACP = \"x-amz-grant-read-acp\";\n+  public static final String grantWriteACP = \"x-amz-grant-write-acp\";\n+  public static final String grantFullControl = \"x-amz-grant-full-control\";\n+\n+  // Not supported headers at current stage, may support it in future\n+  public static final String cannedAclHeader = \"x-amz-acl\";\n+\n+  /**\n+   * https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html.\n+   */\n+  enum ACLType {\n+    // Allows grantee to list the objects in the bucket\n+    READ(\"READ\"),\n+    // Allows grantee to create, overwrite, and delete any object in the bucket\n+    WRITE(\"WRITE\"),\n+    // Allows grantee to write the bucket ACL\n+    READ_ACP(\"READ_ACP\"),\n+    // Allows grantee to write the ACL for the applicable bucket\n+    WRITE_ACP(\"WRITE_ACP\"),\n+    // Allows grantee above all permissions on the bucket\n+    FULL_CONTROL(\"FULL_CONTROL\");\n+\n+    public String getValue() {\n+      return value;\n+    }\n+    /**\n+     * String value for this Enum.\n+     */\n+    private final String value;\n+\n+    /**\n+     * @param val String type for this enum.\n+     */\n+    ACLType(String val) {\n+      value = val;\n+    }\n+\n+\n+    public static ACLType getType(String typeStr) {\n+      for(ACLType type: ACLType.values()) {\n+        if (type.getValue().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  enum ACLIdentityType {\n+    USER(\"CanonicalUser\", true, \"id\"),\n+    GROUP(\"Group\", false, \"url\"),\n+    USER_BY_EMAIL(\"AmazonCustomerByEmail\", false, \"emailAddress\");\n+\n+    public String getGranteeType() {\n+      return granteeType;\n+    }\n+\n+    public String getHeaderType() {\n+      return granteeInHeader;\n+    }\n+\n+    /**\n+     *  Grantee type in body XML.\n+     */\n+    private final String granteeType;\n+\n+    /**\n+     * Is this type supported or not.\n+     */\n+    private final boolean supported;\n+\n+    /**\n+     * Grantee type in header.\n+     */\n+    private final String granteeInHeader;\n+\n+    /**\n+     * Init OzoneACLtypes enum.\n+     *\n+     * @param val String type for this enum.\n+     */\n+    ACLIdentityType(String val, boolean support, String headerType) {\n+      granteeType = val;\n+      supported = support;\n+      granteeInHeader = headerType;\n+    }\n+\n+    boolean isSupported() {\n+      return supported;\n+    }\n+\n+    public static ACLIdentityType getTypeFromGranteeType(String typeStr) {\n+      for(ACLIdentityType type: ACLIdentityType.values()) {\n+        if (type.getGranteeType().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+\n+    public static ACLIdentityType getTypeFromHeaderType(String typeStr) {\n+      for(ACLIdentityType type: ACLIdentityType.values()) {\n+        if (type.getHeaderType().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  public static boolean isGranteeTypeSupported(String typeStr) {\n+    ACLIdentityType type =  ACLIdentityType.getTypeFromGranteeType(typeStr);\n+    return type == null ? false : type.isSupported();\n+  }\n+\n+  public static boolean isHeaderTypeSupported(String typeStr) {\n+    ACLIdentityType type =  ACLIdentityType.getTypeFromHeaderType(typeStr);\n+    return type == null ? false : type.isSupported();\n+  }\n+\n+  public static List<Grant> ozoneNativeAclToS3Acl(OzoneAcl ozoneAcl) {\n+    // Since currently only \"CanonicalUser\" is supported, which maps to Ozone\n+    // \"USER\"\n+    List<Grant> grantList = new ArrayList<>();\n+    if (ozoneAcl.getType() != IAccessAuthorizer.ACLIdentityType.USER) {\n+      return grantList;\n+    }\n+\n+    Grantee grantee = new Grantee();\n+    grantee.setDisplayName(ozoneAcl.getName());\n+    grantee.setId(ozoneAcl.getName());\n+\n+    List<IAccessAuthorizer.ACLType> acls = ozoneAcl.getAclList();\n+    if (acls.contains(IAccessAuthorizer.ACLType.ALL)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.FULL_CONTROL.toString());\n+      grantList.add(grant);\n+      return grantList;\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.WRITE_ACL)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.WRITE_ACP.toString());\n+      grantList.add(grant);\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.READ_ACL)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.READ_ACP.toString());\n+      grantList.add(grant);\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.WRITE) &&\n+        acls.contains(IAccessAuthorizer.ACLType.DELETE) &&\n+        acls.contains(IAccessAuthorizer.ACLType.CREATE)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.WRITE.toString());\n+      grantList.add(grant);\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.READ) &&\n+        acls.contains(IAccessAuthorizer.ACLType.LIST)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.READ.toString());\n+      grantList.add(grant);\n+    } else {\n+      LOG.error(\"Cannot find a good mapping for Ozone ACL {} to S3\",\n+          ozoneAcl.toString());\n+    }\n+    return grantList;\n+  }\n+\n+  public static List<OzoneAcl> s3AclToOzoneNativeAclOnBucket(\n+      S3BucketAcl bucketAcl) throws OS3Exception {\n+    List<OzoneAcl> ozoneAclList = new ArrayList<>();\n+    List<Grant> grantList = bucketAcl.getAclList().getGrantList();\n+    for (Grant grant : grantList) {\n+      //  Only \"CanonicalUser\" is supported, which maps to Ozone \"USER\"\n+      ACLIdentityType identityType = ACLIdentityType.getTypeFromGranteeType(\n+          grant.getGrantee().getXsiType());\n+      if (identityType != null && identityType.isSupported()) {\n+        String permission = grant.getPermission();\n+        BitSet acls = getOzoneAclOnBucketFromS3Permission(permission);\n+        OzoneAcl defaultOzoneAcl = new OzoneAcl(\n+            IAccessAuthorizer.ACLIdentityType.USER,\n+            grant.getGrantee().getId(), acls,\n+            OzoneAcl.AclScope.DEFAULT);\n+        OzoneAcl accessOzoneAcl = new OzoneAcl(\n+            IAccessAuthorizer.ACLIdentityType.USER,\n+            grant.getGrantee().getId(), acls,\n+            OzoneAcl.AclScope.ACCESS);\n+        ozoneAclList.add(defaultOzoneAcl);\n+        ozoneAclList.add(accessOzoneAcl);\n+      } else {\n+        LOG.error(\"Grantee type {} is not supported\",\n+            grant.getGrantee().getXsiType());\n+        throw S3ErrorTable.newError(NOT_IMPLEMENTED,\n+            grant.getGrantee().getXsiType());\n+      }\n+    }\n+    return ozoneAclList;\n+  }\n+\n+  public static BitSet getOzoneAclOnBucketFromS3Permission(String permission)\n+      throws OS3Exception {\n+    ACLType permissionType = ACLType.getType(permission);\n+    if (permissionType == null) {\n+      throw S3ErrorTable.newError(S3ErrorTable.INVALID_ARGUMENT, permission);\n+    }\n+    BitSet acls = new BitSet(IAccessAuthorizer.ACLType.getNoOfAcls());\n+    switch (permissionType) {\n+    case FULL_CONTROL:\n+      acls.set(IAccessAuthorizer.ACLType.ALL.ordinal());\n+      break;\n+    case WRITE_ACP:\n+      acls.set(IAccessAuthorizer.ACLType.WRITE_ACL.ordinal());\n+      break;\n+    case READ_ACP:\n+      acls.set(IAccessAuthorizer.ACLType.READ_ACL.ordinal());\n+      break;\n+    case WRITE:\n+      acls.set(IAccessAuthorizer.ACLType.WRITE.ordinal());\n+      acls.set(IAccessAuthorizer.ACLType.DELETE.ordinal());\n+      acls.set(IAccessAuthorizer.ACLType.CREATE.ordinal());\n+      break;\n+    case READ:\n+      acls.set(IAccessAuthorizer.ACLType.READ.ordinal());\n+      acls.set(IAccessAuthorizer.ACLType.LIST.ordinal());\n+      break;\n+    default:\n+      LOG.error(\"Failed to recognize S3 permission {}\", permission);\n+      throw S3ErrorTable.newError(INVALID_ARGUMENT, permission);\n+    }\n+    return acls;\n+  }\n+\n+  public static List<OzoneAcl> s3AclToOzoneNativeAclOnVolume(\n+      S3BucketAcl bucketAcl) throws OS3Exception {\n+    List<OzoneAcl> ozoneAclList = new ArrayList<>();\n+    List<Grant> grantList = bucketAcl.getAclList().getGrantList();\n+    for (Grant grant : grantList) {\n+      //  Only \"CanonicalUser\" is supported, which maps to Ozone \"USER\"\n+      ACLIdentityType identityType = ACLIdentityType.getTypeFromGranteeType(\n+          grant.getGrantee().getXsiType());\n+      if (identityType != null && identityType.isSupported()) {\n+        String permission = grant.getPermission();\n+        BitSet acls = getOzoneAclOnVolumeFromS3Permission(permission);\n+        OzoneAcl defaultOzoneAcl = new OzoneAcl(\n+            IAccessAuthorizer.ACLIdentityType.USER,", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkxNTIwNg==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565915206", "bodyText": "It's a good point. By going through the code, I think we can leverage the om side addAcl logic which will merge the BitSet if the user already has an ACL entry.", "author": "ChenSammi", "createdAt": "2021-01-28T08:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM4MjA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cc84d5c2895564969db095c9f10275af783c74d3", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\nindex 433139aacd..b59e686954 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\n\n@@ -179,7 +179,6 @@ public static boolean isHeaderTypeSupported(String typeStr) {\n       grant.setGrantee(grantee);\n       grant.setPermission(ACLType.FULL_CONTROL.toString());\n       grantList.add(grant);\n-      return grantList;\n     } else if (acls.contains(IAccessAuthorizer.ACLType.WRITE_ACL)) {\n       Grant grant = new Grant();\n       grant.setGrantee(grantee);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM4NDgxMQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r562384811", "bodyText": "why don't we call volume/bucket setAcl() directly instead of add new/remove old?", "author": "xiaoyuyao", "createdAt": "2021-01-22T04:43:53Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java", "diffHunk": "@@ -353,6 +375,215 @@ public MultiDeleteResponse multiDelete(@PathParam(\"bucket\") String bucketName,\n     return result;\n   }\n \n+  /**\n+   * Implement acl get.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAcl.html\n+   */\n+  public S3BucketAcl getAcl(String bucketName)\n+      throws OS3Exception, IOException {\n+    S3BucketAcl result = new S3BucketAcl();\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+      S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n+      result.setOwner(owner);\n+      // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n+      Set<Grant> grantSet = new HashSet<>();\n+      // Return ACL list\n+      for (OzoneAcl acl : bucket.getAcls()) {\n+        List<Grant> grants = S3Acl.ozoneNativeAclToS3Acl(acl);\n+        grantSet.addAll(grants);\n+      }\n+      ArrayList<Grant> grantList = new ArrayList<>();\n+      grantList.addAll(grantSet);\n+      result.setAclList(\n+          new S3BucketAcl.AccessControlList(grantList));\n+      return result;\n+    } catch (OMException ex) {\n+      if (ex.getResult() == ResultCodes.BUCKET_NOT_FOUND) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .NO_SUCH_BUCKET, bucketName);\n+      } else if (ex.getResult() == ResultCodes.PERMISSION_DENIED) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .ACCESS_DENIED, bucketName);\n+      } else {\n+        LOG.error(\"Failed to get acl of Bucket \" + bucketName, ex);\n+        throw S3ErrorTable.newError(S3ErrorTable.INTERNAL_ERROR, bucketName);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Implement acl put.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAcl.html\n+   */\n+  public Response putAcl(String bucketName, HttpHeaders httpHeaders,\n+      InputStream body) throws IOException, OS3Exception {\n+    String grantReads = httpHeaders.getHeaderString(S3Acl.grantRead);\n+    String grantWrites = httpHeaders.getHeaderString(S3Acl.grantWrite);\n+    String grantReadACP = httpHeaders.getHeaderString(S3Acl.grantReadACP);\n+    String grantWriteACP = httpHeaders.getHeaderString(S3Acl.grantWriteACP);\n+    String grantFull = httpHeaders.getHeaderString(S3Acl.grantFullControl);\n+\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+\n+      List<OzoneAcl> ozoneAclListOnBucket = new ArrayList<>();\n+      List<OzoneAcl> ozoneAclListOnVolume = new ArrayList<>();\n+\n+      if (grantReads == null && grantWrites == null && grantReadACP == null\n+          && grantWriteACP == null && grantFull == null) {\n+        S3BucketAcl putBucketAclRequest =\n+            new PutBucketAclRequestUnmarshaller().readFrom(\n+            null, null, null, null, null, body);\n+        // Handle grants in body\n+        ozoneAclListOnBucket.addAll(\n+            S3Acl.s3AclToOzoneNativeAclOnBucket(putBucketAclRequest));\n+        ozoneAclListOnVolume.addAll(\n+            S3Acl.s3AclToOzoneNativeAclOnVolume(putBucketAclRequest));\n+      } else {\n+\n+        // Handle grants in headers\n+        if (grantReads != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantReads,\n+              S3Acl.ACLType.READ.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantReads,\n+              S3Acl.ACLType.READ.getValue()));\n+        }\n+        if (grantWrites != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantWrites,\n+              S3Acl.ACLType.WRITE.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantWrites,\n+              S3Acl.ACLType.WRITE.getValue()));\n+        }\n+        if (grantReadACP != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantReadACP,\n+              S3Acl.ACLType.READ_ACP.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantReadACP,\n+              S3Acl.ACLType.READ_ACP.getValue()));\n+        }\n+        if (grantWriteACP != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantWriteACP,\n+              S3Acl.ACLType.WRITE_ACP.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantWriteACP,\n+              S3Acl.ACLType.WRITE_ACP.getValue()));\n+        }\n+        if (grantFull != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantFull,\n+              S3Acl.ACLType.FULL_CONTROL.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantFull,\n+              S3Acl.ACLType.FULL_CONTROL.getValue()));\n+        }\n+      }\n+\n+      List<OzoneAcl> oldBucketAcls = bucket.getAcls();\n+      List<OzoneAcl> oldVolumeAcls =\n+          S3Acl.getVolumeAclFromBucketAcl(oldBucketAcls);\n+\n+      // Add new ACLs\n+      for (OzoneAcl addAcl : ozoneAclListOnBucket) {\n+        bucket.addAcl(addAcl);", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5MzI0MA==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565893240", "bodyText": "Good point.  Currently setAcl is not exposed in OzoneBucket and OzoneVolume, I will add it first.", "author": "ChenSammi", "createdAt": "2021-01-28T08:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM4NDgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc84d5c2895564969db095c9f10275af783c74d3", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\nindex 2131b7d3cf..d667336a79 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n\n@@ -386,8 +384,13 @@ public S3BucketAcl getAcl(String bucketName)\n     try {\n       OzoneBucket bucket = getBucket(bucketName);\n       OzoneVolume volume = getVolume();\n+      // TODO: use bucket owner instead of volume owner here once bucket owner\n+      // TODO: is supported.\n       S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n       result.setOwner(owner);\n+\n+      // TODO: remove this duplication avoid logic when ACCESS and DEFAULT scope\n+      // TODO: are merged.\n       // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n       Set<Grant> grantSet = new HashSet<>();\n       // Return ACL list\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM4NTIzMQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r562385231", "bodyText": "NIT: you mean volume?", "author": "xiaoyuyao", "createdAt": "2021-01-22T04:45:23Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java", "diffHunk": "@@ -353,6 +375,215 @@ public MultiDeleteResponse multiDelete(@PathParam(\"bucket\") String bucketName,\n     return result;\n   }\n \n+  /**\n+   * Implement acl get.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAcl.html\n+   */\n+  public S3BucketAcl getAcl(String bucketName)\n+      throws OS3Exception, IOException {\n+    S3BucketAcl result = new S3BucketAcl();\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+      S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n+      result.setOwner(owner);\n+      // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n+      Set<Grant> grantSet = new HashSet<>();\n+      // Return ACL list\n+      for (OzoneAcl acl : bucket.getAcls()) {\n+        List<Grant> grants = S3Acl.ozoneNativeAclToS3Acl(acl);\n+        grantSet.addAll(grants);\n+      }\n+      ArrayList<Grant> grantList = new ArrayList<>();\n+      grantList.addAll(grantSet);\n+      result.setAclList(\n+          new S3BucketAcl.AccessControlList(grantList));\n+      return result;\n+    } catch (OMException ex) {\n+      if (ex.getResult() == ResultCodes.BUCKET_NOT_FOUND) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .NO_SUCH_BUCKET, bucketName);\n+      } else if (ex.getResult() == ResultCodes.PERMISSION_DENIED) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .ACCESS_DENIED, bucketName);\n+      } else {\n+        LOG.error(\"Failed to get acl of Bucket \" + bucketName, ex);\n+        throw S3ErrorTable.newError(S3ErrorTable.INTERNAL_ERROR, bucketName);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Implement acl put.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAcl.html\n+   */\n+  public Response putAcl(String bucketName, HttpHeaders httpHeaders,\n+      InputStream body) throws IOException, OS3Exception {\n+    String grantReads = httpHeaders.getHeaderString(S3Acl.grantRead);\n+    String grantWrites = httpHeaders.getHeaderString(S3Acl.grantWrite);\n+    String grantReadACP = httpHeaders.getHeaderString(S3Acl.grantReadACP);\n+    String grantWriteACP = httpHeaders.getHeaderString(S3Acl.grantWriteACP);\n+    String grantFull = httpHeaders.getHeaderString(S3Acl.grantFullControl);\n+\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+\n+      List<OzoneAcl> ozoneAclListOnBucket = new ArrayList<>();\n+      List<OzoneAcl> ozoneAclListOnVolume = new ArrayList<>();\n+\n+      if (grantReads == null && grantWrites == null && grantReadACP == null\n+          && grantWriteACP == null && grantFull == null) {\n+        S3BucketAcl putBucketAclRequest =\n+            new PutBucketAclRequestUnmarshaller().readFrom(\n+            null, null, null, null, null, body);\n+        // Handle grants in body\n+        ozoneAclListOnBucket.addAll(\n+            S3Acl.s3AclToOzoneNativeAclOnBucket(putBucketAclRequest));\n+        ozoneAclListOnVolume.addAll(\n+            S3Acl.s3AclToOzoneNativeAclOnVolume(putBucketAclRequest));\n+      } else {\n+\n+        // Handle grants in headers\n+        if (grantReads != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantReads,\n+              S3Acl.ACLType.READ.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantReads,\n+              S3Acl.ACLType.READ.getValue()));\n+        }\n+        if (grantWrites != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantWrites,\n+              S3Acl.ACLType.WRITE.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantWrites,\n+              S3Acl.ACLType.WRITE.getValue()));\n+        }\n+        if (grantReadACP != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantReadACP,\n+              S3Acl.ACLType.READ_ACP.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantReadACP,\n+              S3Acl.ACLType.READ_ACP.getValue()));\n+        }\n+        if (grantWriteACP != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantWriteACP,\n+              S3Acl.ACLType.WRITE_ACP.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantWriteACP,\n+              S3Acl.ACLType.WRITE_ACP.getValue()));\n+        }\n+        if (grantFull != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantFull,\n+              S3Acl.ACLType.FULL_CONTROL.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantFull,\n+              S3Acl.ACLType.FULL_CONTROL.getValue()));\n+        }\n+      }\n+\n+      List<OzoneAcl> oldBucketAcls = bucket.getAcls();\n+      List<OzoneAcl> oldVolumeAcls =\n+          S3Acl.getVolumeAclFromBucketAcl(oldBucketAcls);\n+\n+      // Add new ACLs\n+      for (OzoneAcl addAcl : ozoneAclListOnBucket) {\n+        bucket.addAcl(addAcl);\n+      }\n+      for (OzoneAcl addAcl : ozoneAclListOnVolume) {\n+        volume.addAcl(addAcl);\n+      }\n+\n+      // A put request will reset all previous ACLs\n+      for (OzoneAcl removeAcl : oldBucketAcls) {\n+        bucket.removeAcl(removeAcl);\n+      }\n+      for (OzoneAcl removeAcl : oldVolumeAcls) {\n+        volume.removeAcl(removeAcl);\n+      }\n+    } catch (OMException exception) {\n+      LOG.error(\"Error in set ACL Request for bucket: {}\", bucketName,\n+          exception);\n+      if (exception.getResult() == ResultCodes.BUCKET_NOT_FOUND) {\n+        throw S3ErrorTable.newError(S3ErrorTable.NO_SUCH_BUCKET,\n+            bucketName);\n+      } else if (exception.getResult() == ResultCodes.PERMISSION_DENIED) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .ACCESS_DENIED, bucketName);\n+      }\n+      throw exception;\n+    }\n+    return Response.status(HttpStatus.SC_OK).build();\n+  }\n+\n+  /**\n+   *  Example: x-amz-grant-write: \\\n+   *  uri=\"http://acs.amazonaws.com/groups/s3/LogDelivery\", id=\"111122223333\", \\\n+   *  id=\"555566667777\".\n+   */\n+  private List<OzoneAcl> getAndConvertAclOnBucket(String value,\n+      String permission) throws OS3Exception {\n+    List<OzoneAcl> ozoneAclList = new ArrayList<>();\n+    if (StringUtils.isEmpty(value)) {\n+      return ozoneAclList;\n+    }\n+    String[] subValues = value.split(\",\");\n+    for (String acl: subValues) {\n+      String[] part = acl.split(\"=\");\n+      if (part.length != 2) {\n+        throw S3ErrorTable.newError(S3ErrorTable.INVALID_ARGUMENT, acl);\n+      }\n+      S3Acl.ACLIdentityType type =\n+          S3Acl.ACLIdentityType.getTypeFromHeaderType(part[0]);\n+      if (type == null || !type.isSupported()) {\n+        LOG.warn(\"S3 grantee {} is null or not supported\", part[0]);\n+        throw S3ErrorTable.newError(NOT_IMPLEMENTED, part[0]);\n+      }\n+      // Build ACL on Bucket\n+      BitSet aclsOnBucket =\n+          S3Acl.getOzoneAclOnBucketFromS3Permission(permission);\n+      OzoneAcl defaultOzoneAcl = new OzoneAcl(\n+          IAccessAuthorizer.ACLIdentityType.USER, part[1], aclsOnBucket,\n+          OzoneAcl.AclScope.DEFAULT);\n+      OzoneAcl accessOzoneAcl = new OzoneAcl(\n+          IAccessAuthorizer.ACLIdentityType.USER, part[1], aclsOnBucket,\n+          OzoneAcl.AclScope.ACCESS);\n+      ozoneAclList.add(defaultOzoneAcl);\n+      ozoneAclList.add(accessOzoneAcl);\n+    }\n+    return ozoneAclList;\n+  }\n+\n+  private List<OzoneAcl> getAndConvertAclOnVolume(String value,\n+      String permission) throws OS3Exception {\n+    List<OzoneAcl> ozoneAclList = new ArrayList<>();\n+    if (StringUtils.isEmpty(value)) {\n+      return ozoneAclList;\n+    }\n+    String[] subValues = value.split(\",\");\n+    for (String acl: subValues) {\n+      String[] part = acl.split(\"=\");\n+      if (part.length != 2) {\n+        throw S3ErrorTable.newError(S3ErrorTable.INVALID_ARGUMENT, acl);\n+      }\n+      S3Acl.ACLIdentityType type =\n+          S3Acl.ACLIdentityType.getTypeFromHeaderType(part[0]);\n+      if (type == null || !type.isSupported()) {\n+        LOG.warn(\"S3 grantee {} is null or not supported\", part[0]);\n+        throw S3ErrorTable.newError(NOT_IMPLEMENTED, part[0]);\n+      }\n+      // Build ACL on Bucket", "originalCommit": "f38a34922072c62b656840bfd4720da779e7cf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5MzgzNQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r565893835", "bodyText": "Right.", "author": "ChenSammi", "createdAt": "2021-01-28T08:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM4NTIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc84d5c2895564969db095c9f10275af783c74d3", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\nindex 2131b7d3cf..d667336a79 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n\n@@ -386,8 +384,13 @@ public S3BucketAcl getAcl(String bucketName)\n     try {\n       OzoneBucket bucket = getBucket(bucketName);\n       OzoneVolume volume = getVolume();\n+      // TODO: use bucket owner instead of volume owner here once bucket owner\n+      // TODO: is supported.\n       S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n       result.setOwner(owner);\n+\n+      // TODO: remove this duplication avoid logic when ACCESS and DEFAULT scope\n+      // TODO: are merged.\n       // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n       Set<Grant> grantSet = new HashSet<>();\n       // Return ACL list\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODkzNzM3OQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r568937379", "bodyText": "Do we need to setup ACL on a volume here ? couldn't this lead to manipulating permissions on a bucket where the user doesn't have a permission ?", "author": "prashantpogde", "createdAt": "2021-02-02T21:17:51Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java", "diffHunk": "@@ -353,6 +373,204 @@ public MultiDeleteResponse multiDelete(@PathParam(\"bucket\") String bucketName,\n     return result;\n   }\n \n+  /**\n+   * Implement acl get.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAcl.html\n+   */\n+  public S3BucketAcl getAcl(String bucketName)\n+      throws OS3Exception, IOException {\n+    S3BucketAcl result = new S3BucketAcl();\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+      // TODO: use bucket owner instead of volume owner here once bucket owner\n+      // TODO: is supported.\n+      S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n+      result.setOwner(owner);\n+\n+      // TODO: remove this duplication avoid logic when ACCESS and DEFAULT scope\n+      // TODO: are merged.\n+      // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n+      Set<Grant> grantSet = new HashSet<>();\n+      // Return ACL list\n+      for (OzoneAcl acl : bucket.getAcls()) {\n+        List<Grant> grants = S3Acl.ozoneNativeAclToS3Acl(acl);\n+        grantSet.addAll(grants);\n+      }\n+      ArrayList<Grant> grantList = new ArrayList<>();\n+      grantList.addAll(grantSet);\n+      result.setAclList(\n+          new S3BucketAcl.AccessControlList(grantList));\n+      return result;\n+    } catch (OMException ex) {\n+      if (ex.getResult() == ResultCodes.BUCKET_NOT_FOUND) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .NO_SUCH_BUCKET, bucketName);\n+      } else if (ex.getResult() == ResultCodes.PERMISSION_DENIED) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .ACCESS_DENIED, bucketName);\n+      } else {\n+        LOG.error(\"Failed to get acl of Bucket \" + bucketName, ex);\n+        throw S3ErrorTable.newError(S3ErrorTable.INTERNAL_ERROR, bucketName);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Implement acl put.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAcl.html\n+   */\n+  public Response putAcl(String bucketName, HttpHeaders httpHeaders,\n+      InputStream body) throws IOException, OS3Exception {\n+    String grantReads = httpHeaders.getHeaderString(S3Acl.grantRead);\n+    String grantWrites = httpHeaders.getHeaderString(S3Acl.grantWrite);\n+    String grantReadACP = httpHeaders.getHeaderString(S3Acl.grantReadACP);\n+    String grantWriteACP = httpHeaders.getHeaderString(S3Acl.grantWriteACP);\n+    String grantFull = httpHeaders.getHeaderString(S3Acl.grantFullControl);\n+\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+\n+      List<OzoneAcl> ozoneAclListOnBucket = new ArrayList<>();\n+      List<OzoneAcl> ozoneAclListOnVolume = new ArrayList<>();\n+\n+      if (grantReads == null && grantWrites == null && grantReadACP == null\n+          && grantWriteACP == null && grantFull == null) {\n+        S3BucketAcl putBucketAclRequest =\n+            new PutBucketAclRequestUnmarshaller().readFrom(\n+            null, null, null, null, null, body);\n+        // Handle grants in body\n+        ozoneAclListOnBucket.addAll(\n+            S3Acl.s3AclToOzoneNativeAclOnBucket(putBucketAclRequest));\n+        ozoneAclListOnVolume.addAll(\n+            S3Acl.s3AclToOzoneNativeAclOnVolume(putBucketAclRequest));\n+      } else {\n+\n+        // Handle grants in headers\n+        if (grantReads != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantReads,\n+              S3Acl.ACLType.READ.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantReads,\n+              S3Acl.ACLType.READ.getValue()));\n+        }\n+        if (grantWrites != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantWrites,\n+              S3Acl.ACLType.WRITE.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantWrites,\n+              S3Acl.ACLType.WRITE.getValue()));\n+        }\n+        if (grantReadACP != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantReadACP,\n+              S3Acl.ACLType.READ_ACP.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantReadACP,\n+              S3Acl.ACLType.READ_ACP.getValue()));\n+        }\n+        if (grantWriteACP != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantWriteACP,\n+              S3Acl.ACLType.WRITE_ACP.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantWriteACP,\n+              S3Acl.ACLType.WRITE_ACP.getValue()));\n+        }\n+        if (grantFull != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantFull,\n+              S3Acl.ACLType.FULL_CONTROL.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantFull,\n+              S3Acl.ACLType.FULL_CONTROL.getValue()));\n+        }\n+      }\n+\n+      // A put request will reset all previous ACLs\n+      bucket.setAcl(ozoneAclListOnBucket);\n+      volume.setAcl(ozoneAclListOnVolume);", "originalCommit": "765cbe732ec64d507e853fe9bf1fd69484aa5f1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI0NzM1Mw==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r569247353", "bodyText": "Yes, we need to setup ACL on a volume for S3 bucket.  Here we grant the user least privilege on volume in order to make sure user can access the bucket. If a user has full control of the bucket while he doesn't have any permission on volume, user will fail to execute some operations, such as bucket list.\nThe thing is object hierarchy of Ozone is /volume/bucket/key.  ACL on Ozone has the hierarchical characteristic.  ACL of parent will impact the accessibility of it's child.", "author": "ChenSammi", "createdAt": "2021-02-03T09:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODkzNzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjY0OTI1Ng==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r612649256", "bodyText": "Should we read the existing volume acl, add the new ones necessary and set it back instead of overwrite the existing ACL on the s3 volume?\n@xiaoyuyao , I updated the implementation. Now it will remove all the ACLs of import users from Volume first, then apply the new ACLs on Volume.", "author": "xiaoyuyao", "createdAt": "2021-04-13T17:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODkzNzM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5af9912a68e70474c3262ac30e3edc8cc8db29a", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\nindex d667336a79..21b982cbfc 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n\n@@ -424,11 +424,11 @@ public S3BucketAcl getAcl(String bucketName)\n    */\n   public Response putAcl(String bucketName, HttpHeaders httpHeaders,\n       InputStream body) throws IOException, OS3Exception {\n-    String grantReads = httpHeaders.getHeaderString(S3Acl.grantRead);\n-    String grantWrites = httpHeaders.getHeaderString(S3Acl.grantWrite);\n-    String grantReadACP = httpHeaders.getHeaderString(S3Acl.grantReadACP);\n-    String grantWriteACP = httpHeaders.getHeaderString(S3Acl.grantWriteACP);\n-    String grantFull = httpHeaders.getHeaderString(S3Acl.grantFullControl);\n+    String grantReads = httpHeaders.getHeaderString(S3Acl.GRANT_READ);\n+    String grantWrites = httpHeaders.getHeaderString(S3Acl.GRANT_WRITE);\n+    String grantReadACP = httpHeaders.getHeaderString(S3Acl.GRANT_READ_CAP);\n+    String grantWriteACP = httpHeaders.getHeaderString(S3Acl.GRANT_WRITE_CAP);\n+    String grantFull = httpHeaders.getHeaderString(S3Acl.GRANT_FULL_CONTROL);\n \n     try {\n       OzoneBucket bucket = getBucket(bucketName);\n"}}, {"oid": "cc84d5c2895564969db095c9f10275af783c74d3", "url": "https://github.com/apache/ozone/commit/cc84d5c2895564969db095c9f10275af783c74d3", "message": "checkstyle", "committedDate": "2021-02-04T09:52:46Z", "type": "forcePushed"}, {"oid": "1ecfb4c41228046ba1667a2469ebfdf8f0a7554b", "url": "https://github.com/apache/ozone/commit/1ecfb4c41228046ba1667a2469ebfdf8f0a7554b", "message": "findbugs fix", "committedDate": "2021-02-19T08:42:47Z", "type": "forcePushed"}, {"oid": "a5af9912a68e70474c3262ac30e3edc8cc8db29a", "url": "https://github.com/apache/ozone/commit/a5af9912a68e70474c3262ac30e3edc8cc8db29a", "message": "address comments", "committedDate": "2021-03-10T09:14:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjYzMDM1Ng==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r612630356", "bodyText": "I don't think we should populate DEFAULT ACL on Volume with the same permission. This will affect all new buckets create after that.\nFor example if user foo change its bucket acl to allow full control of user bar on bucket1, but as a result of that, the default acl for user bar with full control was added on volume. user bar  will will gain full control on all volume/buckets created subsequently.", "author": "xiaoyuyao", "createdAt": "2021-04-13T17:08:24Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java", "diffHunk": "@@ -353,6 +373,204 @@ public MultiDeleteResponse multiDelete(@PathParam(\"bucket\") String bucketName,\n     return result;\n   }\n \n+  /**\n+   * Implement acl get.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAcl.html\n+   */\n+  public S3BucketAcl getAcl(String bucketName)\n+      throws OS3Exception, IOException {\n+    S3BucketAcl result = new S3BucketAcl();\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+      // TODO: use bucket owner instead of volume owner here once bucket owner\n+      // TODO: is supported.\n+      S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n+      result.setOwner(owner);\n+\n+      // TODO: remove this duplication avoid logic when ACCESS and DEFAULT scope\n+      // TODO: are merged.\n+      // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n+      Set<Grant> grantSet = new HashSet<>();\n+      // Return ACL list\n+      for (OzoneAcl acl : bucket.getAcls()) {\n+        List<Grant> grants = S3Acl.ozoneNativeAclToS3Acl(acl);\n+        grantSet.addAll(grants);\n+      }\n+      ArrayList<Grant> grantList = new ArrayList<>();\n+      grantList.addAll(grantSet);\n+      result.setAclList(\n+          new S3BucketAcl.AccessControlList(grantList));\n+      return result;\n+    } catch (OMException ex) {\n+      if (ex.getResult() == ResultCodes.BUCKET_NOT_FOUND) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .NO_SUCH_BUCKET, bucketName);\n+      } else if (ex.getResult() == ResultCodes.PERMISSION_DENIED) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .ACCESS_DENIED, bucketName);\n+      } else {\n+        LOG.error(\"Failed to get acl of Bucket \" + bucketName, ex);\n+        throw S3ErrorTable.newError(S3ErrorTable.INTERNAL_ERROR, bucketName);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Implement acl put.\n+   * <p>\n+   * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAcl.html\n+   */\n+  public Response putAcl(String bucketName, HttpHeaders httpHeaders,\n+      InputStream body) throws IOException, OS3Exception {\n+    String grantReads = httpHeaders.getHeaderString(S3Acl.GRANT_READ);\n+    String grantWrites = httpHeaders.getHeaderString(S3Acl.GRANT_WRITE);\n+    String grantReadACP = httpHeaders.getHeaderString(S3Acl.GRANT_READ_CAP);\n+    String grantWriteACP = httpHeaders.getHeaderString(S3Acl.GRANT_WRITE_CAP);\n+    String grantFull = httpHeaders.getHeaderString(S3Acl.GRANT_FULL_CONTROL);\n+\n+    try {\n+      OzoneBucket bucket = getBucket(bucketName);\n+      OzoneVolume volume = getVolume();\n+\n+      List<OzoneAcl> ozoneAclListOnBucket = new ArrayList<>();\n+      List<OzoneAcl> ozoneAclListOnVolume = new ArrayList<>();\n+\n+      if (grantReads == null && grantWrites == null && grantReadACP == null\n+          && grantWriteACP == null && grantFull == null) {\n+        S3BucketAcl putBucketAclRequest =\n+            new PutBucketAclRequestUnmarshaller().readFrom(\n+            null, null, null, null, null, body);\n+        // Handle grants in body\n+        ozoneAclListOnBucket.addAll(\n+            S3Acl.s3AclToOzoneNativeAclOnBucket(putBucketAclRequest));\n+        ozoneAclListOnVolume.addAll(\n+            S3Acl.s3AclToOzoneNativeAclOnVolume(putBucketAclRequest));\n+      } else {\n+\n+        // Handle grants in headers\n+        if (grantReads != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantReads,\n+              S3Acl.ACLType.READ.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantReads,\n+              S3Acl.ACLType.READ.getValue()));\n+        }\n+        if (grantWrites != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantWrites,\n+              S3Acl.ACLType.WRITE.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantWrites,\n+              S3Acl.ACLType.WRITE.getValue()));\n+        }\n+        if (grantReadACP != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantReadACP,\n+              S3Acl.ACLType.READ_ACP.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantReadACP,\n+              S3Acl.ACLType.READ_ACP.getValue()));\n+        }\n+        if (grantWriteACP != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantWriteACP,\n+              S3Acl.ACLType.WRITE_ACP.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantWriteACP,\n+              S3Acl.ACLType.WRITE_ACP.getValue()));\n+        }\n+        if (grantFull != null) {\n+          ozoneAclListOnBucket.addAll(getAndConvertAclOnBucket(grantFull,\n+              S3Acl.ACLType.FULL_CONTROL.getValue()));\n+          ozoneAclListOnVolume.addAll(getAndConvertAclOnVolume(grantFull,\n+              S3Acl.ACLType.FULL_CONTROL.getValue()));\n+        }\n+      }\n+\n+      // A put request will reset all previous ACLs\n+      bucket.setAcl(ozoneAclListOnBucket);\n+      volume.setAcl(ozoneAclListOnVolume);\n+    } catch (OMException exception) {\n+      LOG.error(\"Error in set ACL Request for bucket: {}\", bucketName,\n+          exception);\n+      if (exception.getResult() == ResultCodes.BUCKET_NOT_FOUND) {\n+        throw S3ErrorTable.newError(S3ErrorTable.NO_SUCH_BUCKET,\n+            bucketName);\n+      } else if (exception.getResult() == ResultCodes.PERMISSION_DENIED) {\n+        throw S3ErrorTable.newError(S3ErrorTable\n+            .ACCESS_DENIED, bucketName);\n+      }\n+      throw exception;\n+    }\n+    return Response.status(HttpStatus.SC_OK).build();\n+  }\n+\n+  /**\n+   *  Example: x-amz-grant-write: \\\n+   *  uri=\"http://acs.amazonaws.com/groups/s3/LogDelivery\", id=\"111122223333\", \\\n+   *  id=\"555566667777\".\n+   */\n+  private List<OzoneAcl> getAndConvertAclOnBucket(String value,\n+      String permission) throws OS3Exception {\n+    List<OzoneAcl> ozoneAclList = new ArrayList<>();\n+    if (StringUtils.isEmpty(value)) {\n+      return ozoneAclList;\n+    }\n+    String[] subValues = value.split(\",\");\n+    for (String acl: subValues) {\n+      String[] part = acl.split(\"=\");\n+      if (part.length != 2) {\n+        throw S3ErrorTable.newError(S3ErrorTable.INVALID_ARGUMENT, acl);\n+      }\n+      S3Acl.ACLIdentityType type =\n+          S3Acl.ACLIdentityType.getTypeFromHeaderType(part[0]);\n+      if (type == null || !type.isSupported()) {\n+        LOG.warn(\"S3 grantee {} is null or not supported\", part[0]);\n+        throw S3ErrorTable.newError(NOT_IMPLEMENTED, part[0]);\n+      }\n+      // Build ACL on Bucket\n+      BitSet aclsOnBucket =\n+          S3Acl.getOzoneAclOnBucketFromS3Permission(permission);\n+      OzoneAcl defaultOzoneAcl = new OzoneAcl(\n+          IAccessAuthorizer.ACLIdentityType.USER, part[1], aclsOnBucket,\n+          OzoneAcl.AclScope.DEFAULT);\n+      OzoneAcl accessOzoneAcl = new OzoneAcl(\n+          IAccessAuthorizer.ACLIdentityType.USER, part[1], aclsOnBucket,\n+          OzoneAcl.AclScope.ACCESS);\n+      ozoneAclList.add(defaultOzoneAcl);\n+      ozoneAclList.add(accessOzoneAcl);\n+    }\n+    return ozoneAclList;\n+  }\n+\n+  private List<OzoneAcl> getAndConvertAclOnVolume(String value,\n+      String permission) throws OS3Exception {\n+    List<OzoneAcl> ozoneAclList = new ArrayList<>();\n+    if (StringUtils.isEmpty(value)) {\n+      return ozoneAclList;\n+    }\n+    String[] subValues = value.split(\",\");\n+    for (String acl: subValues) {\n+      String[] part = acl.split(\"=\");\n+      if (part.length != 2) {\n+        throw S3ErrorTable.newError(S3ErrorTable.INVALID_ARGUMENT, acl);\n+      }\n+      S3Acl.ACLIdentityType type =\n+          S3Acl.ACLIdentityType.getTypeFromHeaderType(part[0]);\n+      if (type == null || !type.isSupported()) {\n+        LOG.warn(\"S3 grantee {} is null or not supported\", part[0]);\n+        throw S3ErrorTable.newError(NOT_IMPLEMENTED, part[0]);\n+      }\n+      // Build ACL on Volume\n+      BitSet aclsOnVolume =\n+          S3Acl.getOzoneAclOnVolumeFromS3Permission(permission);\n+      OzoneAcl defaultOzoneAcl = new OzoneAcl(\n+          IAccessAuthorizer.ACLIdentityType.USER, part[1], aclsOnVolume,", "originalCommit": "4a7256ec10d2119dab01dd85868d8f707691aa4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjQ0NDk3NQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r616444975", "bodyText": "Good catch.  DEFAULT ACL on volume is not necessary.", "author": "ChenSammi", "createdAt": "2021-04-20T08:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjYzMDM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "51898fdbc6b49cd99df5f399409696f2f4371c72", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\nindex 21b982cbfc..b25f73d5f7 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n\n@@ -378,43 +375,47 @@ public MultiDeleteResponse multiDelete(@PathParam(\"bucket\") String bucketName,\n    * <p>\n    * see: https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketAcl.html\n    */\n-  public S3BucketAcl getAcl(String bucketName)\n+  @GET\n+  @Produces(MediaType.APPLICATION_XML)\n+  public S3BucketAcl get(\n+      @PathParam(\"bucket\") String bucketName,\n+      @QueryParam(\"acl\") String aclMarker,\n+      @Context HttpServletRequest servletRequest)\n       throws OS3Exception, IOException {\n-    S3BucketAcl result = new S3BucketAcl();\n-    try {\n-      OzoneBucket bucket = getBucket(bucketName);\n-      OzoneVolume volume = getVolume();\n-      // TODO: use bucket owner instead of volume owner here once bucket owner\n-      // TODO: is supported.\n-      S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n-      result.setOwner(owner);\n-\n-      // TODO: remove this duplication avoid logic when ACCESS and DEFAULT scope\n-      // TODO: are merged.\n-      // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n-      Set<Grant> grantSet = new HashSet<>();\n-      // Return ACL list\n-      for (OzoneAcl acl : bucket.getAcls()) {\n-        List<Grant> grants = S3Acl.ozoneNativeAclToS3Acl(acl);\n-        grantSet.addAll(grants);\n-      }\n-      ArrayList<Grant> grantList = new ArrayList<>();\n-      grantList.addAll(grantSet);\n-      result.setAclList(\n-          new S3BucketAcl.AccessControlList(grantList));\n-      return result;\n-    } catch (OMException ex) {\n-      if (ex.getResult() == ResultCodes.BUCKET_NOT_FOUND) {\n-        throw S3ErrorTable.newError(S3ErrorTable\n-            .NO_SUCH_BUCKET, bucketName);\n-      } else if (ex.getResult() == ResultCodes.PERMISSION_DENIED) {\n-        throw S3ErrorTable.newError(S3ErrorTable\n-            .ACCESS_DENIED, bucketName);\n-      } else {\n-        LOG.error(\"Failed to get acl of Bucket \" + bucketName, ex);\n-        throw S3ErrorTable.newError(S3ErrorTable.INTERNAL_ERROR, bucketName);\n+    if (aclMarker != null) {\n+      S3BucketAcl result = new S3BucketAcl();\n+      try {\n+        OzoneBucket bucket = getBucket(bucketName);\n+        OzoneVolume volume = getVolume();\n+        S3Owner owner = new S3Owner(volume.getOwner(), volume.getOwner());\n+        result.setOwner(owner);\n+        // Use set to remove ACLs with different scopes(ACCESS and DEFAULT)\n+        Set<Grant> grantSet = new HashSet<>();\n+        // Return ACL list\n+        for (OzoneAcl acl : bucket.getAcls()) {\n+          List<Grant> grants = S3Acl.OzoneNativeACLToS3ACL(acl);\n+          grantSet.addAll(grants);\n+        }\n+        ArrayList<Grant> grantList = new ArrayList<>();\n+        grantList.addAll(grantSet);\n+        result.setAclList(\n+            new S3BucketAcl.AccessControlList(grantList));\n+        return result;\n+      } catch (OMException ex) {\n+        if (ex.getResult() == ResultCodes.BUCKET_NOT_FOUND) {\n+          throw S3ErrorTable.newError(S3ErrorTable\n+              .NO_SUCH_BUCKET, bucketName);\n+        } else if (ex.getResult() == ResultCodes.PERMISSION_DENIED) {\n+          throw S3ErrorTable.newError(S3ErrorTable\n+              .ACCESS_DENIED, bucketName);\n+        } else {\n+          LOG.error(\"Failed to get acl of Bucket \" + bucketName, ex);\n+          throw S3ErrorTable.newError(S3ErrorTable.INTERNAL_ERROR, bucketName);\n+        }\n       }\n     }\n+    throw S3ErrorTable.newError(NOT_IMPLEMENTED,\n+        servletRequest.getRequestURI());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjY0MzY4MQ==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r612643681", "bodyText": "In the design doc, the bucket read acl is mapped to read/list on both volume and bucket. The code mapped to read only on the volume. Can you confirm if the doc needs to be changed? https://docs.google.com/document/d/18loKS6qbMKh8kKkpPvma9X-fNIcxBVAcHulAQxZpI1c/edit#", "author": "xiaoyuyao", "createdAt": "2021-04-13T17:27:37Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java", "diffHunk": "@@ -0,0 +1,390 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.hadoop.ozone.s3.endpoint;\n+\n+import org.apache.hadoop.ozone.OzoneAcl;\n+import org.apache.hadoop.ozone.s3.endpoint.S3BucketAcl.Grant;\n+import org.apache.hadoop.ozone.s3.endpoint.S3BucketAcl.Grantee;\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.exception.S3ErrorTable;\n+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.INVALID_ARGUMENT;\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.NOT_IMPLEMENTED;\n+\n+public final class S3Acl {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3Acl.class);\n+\n+  // ACL put related headers\n+  public static final String GRANT_READ = \"x-amz-grant-read\";\n+  public static final String GRANT_WRITE = \"x-amz-grant-write\";\n+  public static final String GRANT_READ_CAP = \"x-amz-grant-read-acp\";\n+  public static final String GRANT_WRITE_CAP = \"x-amz-grant-write-acp\";\n+  public static final String GRANT_FULL_CONTROL = \"x-amz-grant-full-control\";\n+\n+  // Not supported headers at current stage, may support it in future\n+  public static final String CANNED_ACL_HEADER = \"x-amz-acl\";\n+\n+  /**\n+   * https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html.\n+   */\n+  enum ACLType {\n+    // Allows grantee to list the objects in the bucket\n+    READ(\"READ\"),\n+    // Allows grantee to create, overwrite, and delete any object in the bucket\n+    WRITE(\"WRITE\"),\n+    // Allows grantee to write the bucket ACL\n+    READ_ACP(\"READ_ACP\"),\n+    // Allows grantee to write the ACL for the applicable bucket\n+    WRITE_ACP(\"WRITE_ACP\"),\n+    // Allows grantee above all permissions on the bucket\n+    FULL_CONTROL(\"FULL_CONTROL\");\n+\n+    public String getValue() {\n+      return value;\n+    }\n+    /**\n+     * String value for this Enum.\n+     */\n+    private final String value;\n+\n+    /**\n+     * @param val String type for this enum.\n+     */\n+    ACLType(String val) {\n+      value = val;\n+    }\n+\n+\n+    public static ACLType getType(String typeStr) {\n+      for(ACLType type: ACLType.values()) {\n+        if (type.getValue().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  enum ACLIdentityType {\n+    USER(\"CanonicalUser\", true, \"id\"),\n+    GROUP(\"Group\", false, \"url\"),\n+    USER_BY_EMAIL(\"AmazonCustomerByEmail\", false, \"emailAddress\");\n+\n+    public String getGranteeType() {\n+      return granteeType;\n+    }\n+\n+    public String getHeaderType() {\n+      return granteeInHeader;\n+    }\n+\n+    /**\n+     *  Grantee type in body XML.\n+     */\n+    private final String granteeType;\n+\n+    /**\n+     * Is this type supported or not.\n+     */\n+    private final boolean supported;\n+\n+    /**\n+     * Grantee type in header.\n+     */\n+    private final String granteeInHeader;\n+\n+    /**\n+     * Init OzoneACLtypes enum.\n+     *\n+     * @param val String type for this enum.\n+     */\n+    ACLIdentityType(String val, boolean support, String headerType) {\n+      granteeType = val;\n+      supported = support;\n+      granteeInHeader = headerType;\n+    }\n+\n+    boolean isSupported() {\n+      return supported;\n+    }\n+\n+    public static ACLIdentityType getTypeFromGranteeType(String typeStr) {\n+      for(ACLIdentityType type: ACLIdentityType.values()) {\n+        if (type.getGranteeType().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+\n+    public static ACLIdentityType getTypeFromHeaderType(String typeStr) {\n+      for(ACLIdentityType type: ACLIdentityType.values()) {\n+        if (type.getHeaderType().equals(typeStr)) {\n+          return type;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  private S3Acl() {\n+  }\n+\n+  public static boolean isGranteeTypeSupported(String typeStr) {\n+    ACLIdentityType type =  ACLIdentityType.getTypeFromGranteeType(typeStr);\n+    return type == null ? false : type.isSupported();\n+  }\n+\n+  public static boolean isHeaderTypeSupported(String typeStr) {\n+    ACLIdentityType type =  ACLIdentityType.getTypeFromHeaderType(typeStr);\n+    return type == null ? false : type.isSupported();\n+  }\n+\n+  public static List<Grant> ozoneNativeAclToS3Acl(OzoneAcl ozoneAcl) {\n+    // Since currently only \"CanonicalUser\" is supported, which maps to Ozone\n+    // \"USER\"\n+    List<Grant> grantList = new ArrayList<>();\n+    if (ozoneAcl.getType() != IAccessAuthorizer.ACLIdentityType.USER) {\n+      return grantList;\n+    }\n+\n+    Grantee grantee = new Grantee();\n+    grantee.setDisplayName(ozoneAcl.getName());\n+    grantee.setId(ozoneAcl.getName());\n+\n+    List<IAccessAuthorizer.ACLType> acls = ozoneAcl.getAclList();\n+    if (acls.contains(IAccessAuthorizer.ACLType.ALL)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.FULL_CONTROL.toString());\n+      grantList.add(grant);\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.WRITE_ACL)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.WRITE_ACP.toString());\n+      grantList.add(grant);\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.READ_ACL)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.READ_ACP.toString());\n+      grantList.add(grant);\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.WRITE) &&\n+        acls.contains(IAccessAuthorizer.ACLType.DELETE) &&\n+        acls.contains(IAccessAuthorizer.ACLType.CREATE)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.WRITE.toString());\n+      grantList.add(grant);\n+    } else if (acls.contains(IAccessAuthorizer.ACLType.READ) &&\n+        acls.contains(IAccessAuthorizer.ACLType.LIST)) {\n+      Grant grant = new Grant();\n+      grant.setGrantee(grantee);\n+      grant.setPermission(ACLType.READ.toString());\n+      grantList.add(grant);\n+    } else {\n+      LOG.error(\"Cannot find a good mapping for Ozone ACL {} to S3\",\n+          ozoneAcl.toString());\n+    }\n+    return grantList;\n+  }\n+\n+  public static List<OzoneAcl> s3AclToOzoneNativeAclOnBucket(\n+      S3BucketAcl bucketAcl) throws OS3Exception {\n+    List<OzoneAcl> ozoneAclList = new ArrayList<>();\n+    List<Grant> grantList = bucketAcl.getAclList().getGrantList();\n+    for (Grant grant : grantList) {\n+      //  Only \"CanonicalUser\" is supported, which maps to Ozone \"USER\"\n+      ACLIdentityType identityType = ACLIdentityType.getTypeFromGranteeType(\n+          grant.getGrantee().getXsiType());\n+      if (identityType != null && identityType.isSupported()) {\n+        String permission = grant.getPermission();\n+        BitSet acls = getOzoneAclOnBucketFromS3Permission(permission);\n+        OzoneAcl defaultOzoneAcl = new OzoneAcl(\n+            IAccessAuthorizer.ACLIdentityType.USER,\n+            grant.getGrantee().getId(), acls,\n+            OzoneAcl.AclScope.DEFAULT);\n+        OzoneAcl accessOzoneAcl = new OzoneAcl(\n+            IAccessAuthorizer.ACLIdentityType.USER,\n+            grant.getGrantee().getId(), acls,\n+            OzoneAcl.AclScope.ACCESS);\n+        ozoneAclList.add(defaultOzoneAcl);\n+        ozoneAclList.add(accessOzoneAcl);\n+      } else {\n+        LOG.error(\"Grantee type {} is not supported\",\n+            grant.getGrantee().getXsiType());\n+        throw S3ErrorTable.newError(NOT_IMPLEMENTED,\n+            grant.getGrantee().getXsiType());\n+      }\n+    }\n+    return ozoneAclList;\n+  }\n+\n+  public static BitSet getOzoneAclOnBucketFromS3Permission(String permission)\n+      throws OS3Exception {\n+    ACLType permissionType = ACLType.getType(permission);\n+    if (permissionType == null) {\n+      throw S3ErrorTable.newError(S3ErrorTable.INVALID_ARGUMENT, permission);\n+    }\n+    BitSet acls = new BitSet(IAccessAuthorizer.ACLType.getNoOfAcls());\n+    switch (permissionType) {\n+    case FULL_CONTROL:\n+      acls.set(IAccessAuthorizer.ACLType.ALL.ordinal());\n+      break;\n+    case WRITE_ACP:\n+      acls.set(IAccessAuthorizer.ACLType.WRITE_ACL.ordinal());\n+      break;\n+    case READ_ACP:\n+      acls.set(IAccessAuthorizer.ACLType.READ_ACL.ordinal());\n+      break;\n+    case WRITE:\n+      acls.set(IAccessAuthorizer.ACLType.WRITE.ordinal());\n+      acls.set(IAccessAuthorizer.ACLType.DELETE.ordinal());\n+      acls.set(IAccessAuthorizer.ACLType.CREATE.ordinal());\n+      break;\n+    case READ:\n+      acls.set(IAccessAuthorizer.ACLType.READ.ordinal());\n+      acls.set(IAccessAuthorizer.ACLType.LIST.ordinal());\n+      break;\n+    default:\n+      LOG.error(\"Failed to recognize S3 permission {}\", permission);\n+      throw S3ErrorTable.newError(INVALID_ARGUMENT, permission);\n+    }\n+    return acls;\n+  }\n+\n+  public static List<OzoneAcl> s3AclToOzoneNativeAclOnVolume(\n+      S3BucketAcl bucketAcl) throws OS3Exception {\n+    List<OzoneAcl> ozoneAclList = new ArrayList<>();\n+    List<Grant> grantList = bucketAcl.getAclList().getGrantList();\n+    for (Grant grant : grantList) {\n+      //  Only \"CanonicalUser\" is supported, which maps to Ozone \"USER\"\n+      ACLIdentityType identityType = ACLIdentityType.getTypeFromGranteeType(\n+          grant.getGrantee().getXsiType());\n+      if (identityType != null && identityType.isSupported()) {\n+        String permission = grant.getPermission();\n+        BitSet acls = getOzoneAclOnVolumeFromS3Permission(permission);\n+        OzoneAcl defaultOzoneAcl = new OzoneAcl(\n+            IAccessAuthorizer.ACLIdentityType.USER,\n+            grant.getGrantee().getId(), acls,\n+            OzoneAcl.AclScope.DEFAULT);\n+        OzoneAcl accessOzoneAcl = new OzoneAcl(\n+            IAccessAuthorizer.ACLIdentityType.USER,\n+            grant.getGrantee().getId(), acls,\n+            OzoneAcl.AclScope.ACCESS);\n+        ozoneAclList.add(defaultOzoneAcl);\n+        ozoneAclList.add(accessOzoneAcl);\n+      } else {\n+        LOG.error(\"Grantee type {} is not supported\",\n+            grant.getGrantee().getXsiType());\n+        throw S3ErrorTable.newError(NOT_IMPLEMENTED,\n+            grant.getGrantee().getXsiType());\n+      }\n+    }\n+    return ozoneAclList;\n+  }\n+\n+  public static BitSet getOzoneAclOnVolumeFromS3Permission(String permission)\n+      throws OS3Exception {\n+    BitSet acls = new BitSet(IAccessAuthorizer.ACLType.getNoOfAcls());\n+    ACLType permissionType = ACLType.getType(permission);\n+    if (permissionType == null) {\n+      throw S3ErrorTable.newError(S3ErrorTable.INVALID_ARGUMENT, permission);\n+    }\n+    switch (permissionType) {\n+    case FULL_CONTROL:\n+      acls.set(IAccessAuthorizer.ACLType.ALL.ordinal());\n+      break;\n+    case WRITE_ACP:\n+      acls.set(IAccessAuthorizer.ACLType.WRITE.ordinal());\n+      break;\n+    case READ_ACP:\n+      acls.set(IAccessAuthorizer.ACLType.READ.ordinal());\n+      break;\n+    case WRITE:\n+      acls.set(IAccessAuthorizer.ACLType.WRITE.ordinal());\n+      break;\n+    case READ:", "originalCommit": "4a7256ec10d2119dab01dd85868d8f707691aa4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjQ0NDY0OA==", "url": "https://github.com/apache/ozone/pull/1701#discussion_r616444648", "bodyText": "Sure. I have updated the document and the implement based on test result.", "author": "ChenSammi", "createdAt": "2021-04-20T08:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjY0MzY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "51898fdbc6b49cd99df5f399409696f2f4371c72", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\nindex 65bfb66110..e9a802b7c1 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/S3Acl.java\n\n@@ -1,22 +1,3 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n package org.apache.hadoop.ozone.s3.endpoint;\n \n import org.apache.hadoop.ozone.OzoneAcl;\n"}}, {"oid": "51898fdbc6b49cd99df5f399409696f2f4371c72", "url": "https://github.com/apache/ozone/commit/51898fdbc6b49cd99df5f399409696f2f4371c72", "message": "HDDS-4585. Support bucket acl operation in S3 gateway.", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "3756862901dd42c6342efc1d3d5456e74b6e1859", "url": "https://github.com/apache/ozone/commit/3756862901dd42c6342efc1d3d5456e74b6e1859", "message": "fix rat and some checkstyle", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "6d8a8499ccc0e90a51b830bd173ee41fc98c0d85", "url": "https://github.com/apache/ozone/commit/6d8a8499ccc0e90a51b830bd173ee41fc98c0d85", "message": "checkstyle fix", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "ee06082dd626169e88a510a188625a32363f0133", "url": "https://github.com/apache/ozone/commit/ee06082dd626169e88a510a188625a32363f0133", "message": "Fix acceptance tests", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "fd040632b82b84b816d8e5b17f14886dc7f80637", "url": "https://github.com/apache/ozone/commit/fd040632b82b84b816d8e5b17f14886dc7f80637", "message": "fix checkstyle", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "ac1c461ad7ce8ac2d965fda18388535f73c3b417", "url": "https://github.com/apache/ozone/commit/ac1c461ad7ce8ac2d965fda18388535f73c3b417", "message": "address comments", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "9dba879fb8f5d05ece83691ed72e7f58e122a8a6", "url": "https://github.com/apache/ozone/commit/9dba879fb8f5d05ece83691ed72e7f58e122a8a6", "message": "checkstyle", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "60933f505913345908f97e85cc99dc3821697daf", "url": "https://github.com/apache/ozone/commit/60933f505913345908f97e85cc99dc3821697daf", "message": "findbugs fix", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "1fed47364e4b3aec2c8610e85ade92d1a10b9a8c", "url": "https://github.com/apache/ozone/commit/1fed47364e4b3aec2c8610e85ade92d1a10b9a8c", "message": "address comments", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "1330a0c0b7b7f7206ec4becd5345e27163277922", "url": "https://github.com/apache/ozone/commit/1330a0c0b7b7f7206ec4becd5345e27163277922", "message": "fix checkstyle and compile issue", "committedDate": "2021-04-19T07:10:15Z", "type": "commit"}, {"oid": "1310e7b947d8d58df34d57bca8fa569b40b62cb5", "url": "https://github.com/apache/ozone/commit/1310e7b947d8d58df34d57bca8fa569b40b62cb5", "message": "address comments", "committedDate": "2021-04-20T08:02:41Z", "type": "commit"}, {"oid": "1310e7b947d8d58df34d57bca8fa569b40b62cb5", "url": "https://github.com/apache/ozone/commit/1310e7b947d8d58df34d57bca8fa569b40b62cb5", "message": "address comments", "committedDate": "2021-04-20T08:02:41Z", "type": "forcePushed"}, {"oid": "f2125aa4a38e78d925586f57abaa0188cd633470", "url": "https://github.com/apache/ozone/commit/f2125aa4a38e78d925586f57abaa0188cd633470", "message": "fix findbugs issue", "committedDate": "2021-04-21T03:10:47Z", "type": "commit"}]}