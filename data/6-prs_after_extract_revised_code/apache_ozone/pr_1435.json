{"pr_number": 1435, "pr_title": "HDDS-4122. Implement OM Delete Expired Open Key Request and Response", "pr_createdAt": "2020-09-17T18:27:08Z", "pr_url": "https://github.com/apache/ozone/pull/1435", "timeline": [{"oid": "853bb3b9eb5aba4e4f6867de14e25d3c40612056", "url": "https://github.com/apache/ozone/commit/853bb3b9eb5aba4e4f6867de14e25d3c40612056", "message": "Create outline for open key delete request", "committedDate": "2020-09-01T16:28:38Z", "type": "commit"}, {"oid": "b1b0ac0d7176b4d4acc4168bc1cc26e6d4f07f9f", "url": "https://github.com/apache/ozone/commit/b1b0ac0d7176b4d4acc4168bc1cc26e6d4f07f9f", "message": "Add DeleteOpenKeyRequest proto, and store updated OMKeyInfo for the response", "committedDate": "2020-09-01T19:57:13Z", "type": "commit"}, {"oid": "ace8408599bfced25599061e1a152c16b6c9e629", "url": "https://github.com/apache/ozone/commit/ace8408599bfced25599061e1a152c16b6c9e629", "message": "Add empty class outline for open key delete response", "committedDate": "2020-09-01T20:04:16Z", "type": "commit"}, {"oid": "c2043a29eeb5b198d7038ff001dc20488ed83df6", "url": "https://github.com/apache/ozone/commit/c2043a29eeb5b198d7038ff001dc20488ed83df6", "message": "Merge branch 'master' into HDDS-4122\n\n* master: (26 commits)\n  HDDS-4167. Acceptance test logs missing if fails during cluster startup (#1366)\n  HDDS-4121. Implement OmMetadataMangerImpl#getExpiredOpenKeys. (#1351)\n  HDDS-3867. Extend the chunkinfo tool to display information from all nodes in the pipeline. (#1154)\n  HDDS-4077. Incomplete OzoneFileSystem statistics (#1329)\n  HDDS-3903. OzoneRpcClient support batch rename keys. (#1150)\n  HDDS-4151. Skip the inputstream while offset larger than zero in s3g (#1354)\n  HDDS-4147. Add OFS to FileSystem META-INF (#1352)\n  HDDS-4137. Turn on the verbose mode of safe mode check on testlib (#1343)\n  HDDS-4146. Show the ScmId and ClusterId in the scm web ui. (#1350)\n  HDDS-4145. Bump version to 1.1.0-SNAPSHOT on master (#1349)\n  HDDS-4109. Tests in TestOzoneFileSystem should use the existing MiniOzoneCluster (#1316)\n  HDDS-4149. Implement OzoneFileStatus#toString (#1356)\n  HDDS-4153. Increase default timeout in kubernetes tests (#1357)\n  HDDS-2411. add a datanode chunk validator fo datanode chunk generator (#1312)\n  HDDS-4140. Auto-close /pending pull requests after 21 days of inactivity (#1344)\n  HDDS-4152. Archive container logs for kubernetes check (#1355)\n  HDDS-4056. Convert OzoneAdmin to pluggable model (#1285)\n  HDDS-3972. Add option to limit number of items displaying through ldb tool. (#1206)\n  HDDS-4068. Client should not retry same OM on network connection failure (#1324)\n  HDDS-4062. Non rack aware pipelines should not be created if multiple racks are alive. (#1291)\n  ...", "committedDate": "2020-09-01T20:09:55Z", "type": "commit"}, {"oid": "73734ea7fc5149eeaf825c94f1df0952432a70f9", "url": "https://github.com/apache/ozone/commit/73734ea7fc5149eeaf825c94f1df0952432a70f9", "message": "Create first draft of AbstractOMKeyDeleteResponse", "committedDate": "2020-09-03T21:41:13Z", "type": "commit"}, {"oid": "5e9f881c2d0f59cd1f2d78d0750c57b797cdbf76", "url": "https://github.com/apache/ozone/commit/5e9f881c2d0f59cd1f2d78d0750c57b797cdbf76", "message": "Move common code from key delete requests into abstract class", "committedDate": "2020-09-10T13:36:47Z", "type": "commit"}, {"oid": "401723d39953b6497dcd9021ae1e296c55dc577c", "url": "https://github.com/apache/ozone/commit/401723d39953b6497dcd9021ae1e296c55dc577c", "message": "Merge branch 'HDDS-4122-abstract-om-response' into HDDS-4122\n\n* HDDS-4122-abstract-om-response:\n  Move common code from key delete requests into abstract class\n  Create first draft of AbstractOMKeyDeleteResponse", "committedDate": "2020-09-10T13:43:18Z", "type": "commit"}, {"oid": "e3f4ec2000bba24db628bb516449dc9b7f485d16", "url": "https://github.com/apache/ozone/commit/e3f4ec2000bba24db628bb516449dc9b7f485d16", "message": "Move audit log and metrics to helper methods", "committedDate": "2020-09-10T13:46:23Z", "type": "commit"}, {"oid": "15763427553d8d0a8238c139f3d42dc9fbecf454", "url": "https://github.com/apache/ozone/commit/15763427553d8d0a8238c139f3d42dc9fbecf454", "message": "Minor comment and format changes to open key delete request", "committedDate": "2020-09-10T19:09:58Z", "type": "commit"}, {"oid": "c2057fb46c08652a8aaffe220c3147c5ba61bc07", "url": "https://github.com/apache/ozone/commit/c2057fb46c08652a8aaffe220c3147c5ba61bc07", "message": "Add helper methods needed to write unit tests", "committedDate": "2020-09-11T15:46:00Z", "type": "commit"}, {"oid": "4fd853514b3e47d013cd4cb209c1e2934c250d70", "url": "https://github.com/apache/ozone/commit/4fd853514b3e47d013cd4cb209c1e2934c250d70", "message": "Refactor testing utils to easier manipulate keys", "committedDate": "2020-09-11T22:16:55Z", "type": "commit"}, {"oid": "cb87f6d67aa1c0ea18ed69b859a683721b71b998", "url": "https://github.com/apache/ozone/commit/cb87f6d67aa1c0ea18ed69b859a683721b71b998", "message": "First implementation of unit tests for OMOpenKeyDeleteRequest", "committedDate": "2020-09-14T14:39:12Z", "type": "commit"}, {"oid": "57d62f37e4277baadf5b2081518cbdff497d9f4a", "url": "https://github.com/apache/ozone/commit/57d62f37e4277baadf5b2081518cbdff497d9f4a", "message": "Comment out unfinished audit log and metrics code for testing", "committedDate": "2020-09-14T14:41:02Z", "type": "commit"}, {"oid": "53f75a3bb340d67cbf56eab6e3d1982f3308c2c0", "url": "https://github.com/apache/ozone/commit/53f75a3bb340d67cbf56eab6e3d1982f3308c2c0", "message": "Add protos to better represent open keys to delete", "committedDate": "2020-09-14T15:05:53Z", "type": "commit"}, {"oid": "9731b7274f61d2d3a2492d3376dd66f0ae9b9639", "url": "https://github.com/apache/ozone/commit/9731b7274f61d2d3a2492d3376dd66f0ae9b9639", "message": "Update proto layout and incorporate changes to OMOpenKeyDeleteRequest", "committedDate": "2020-09-14T15:26:51Z", "type": "commit"}, {"oid": "cea208f4e98772143ef8b4a649e28553c2e84844", "url": "https://github.com/apache/ozone/commit/cea208f4e98772143ef8b4a649e28553c2e84844", "message": "All unit tests pass with new proto structure", "committedDate": "2020-09-14T19:36:34Z", "type": "commit"}, {"oid": "8b2fe23300dfa8e3c2fd622ffaeca302c4bfffb0", "url": "https://github.com/apache/ozone/commit/8b2fe23300dfa8e3c2fd622ffaeca302c4bfffb0", "message": "Merge branch 'HDDS-4122-unit-tests-new-openkey-proto' into HDDS-4122-unit-tests\n\n* HDDS-4122-unit-tests-new-openkey-proto:\n  All unit tests pass with new proto structure\n  Update proto layout and incorporate changes to OMOpenKeyDeleteRequest\n  Add protos to better represent open keys to delete", "committedDate": "2020-09-14T19:37:34Z", "type": "commit"}, {"oid": "41f10138116fdd6dd0912d3de06908e85b782b26", "url": "https://github.com/apache/ozone/commit/41f10138116fdd6dd0912d3de06908e85b782b26", "message": "Implement unit tests for OMOpenKeyDeleteResponse\n\nThe tests uncover a failure to delete keys from the open key table.", "committedDate": "2020-09-15T17:10:36Z", "type": "commit"}, {"oid": "6222cd3a2d8a87764a3cc67ee4a43dc9f4bad8a8", "url": "https://github.com/apache/ozone/commit/6222cd3a2d8a87764a3cc67ee4a43dc9f4bad8a8", "message": "Pass key names to OMResponse for open keys, since their names cannot be fully recreated from OmKeyInfo\n\nClientID is not stored in OmKeyInfo, but is needed for the open key's full name as stored in the DB.", "committedDate": "2020-09-15T18:04:04Z", "type": "commit"}, {"oid": "efbc89c681bee8be4a9d396a39d11613aeb332a4", "url": "https://github.com/apache/ozone/commit/efbc89c681bee8be4a9d396a39d11613aeb332a4", "message": "Add documnetation to OMOpenKeyDeleteResponse unit tests", "committedDate": "2020-09-15T19:40:58Z", "type": "commit"}, {"oid": "c356fe900f6b050044d98ddd5f4f470bf0084859", "url": "https://github.com/apache/ozone/commit/c356fe900f6b050044d98ddd5f4f470bf0084859", "message": "Merge branch 'HDDS-4122-response-unit-tests' into HDDS-4122-unit-tests\n\n* HDDS-4122-response-unit-tests:\n  Add documnetation to OMOpenKeyDeleteResponse unit tests\n  Pass key names to OMResponse for open keys, since their names cannot be fully recreated from OmKeyInfo\n  Implement unit tests for OMOpenKeyDeleteResponse", "committedDate": "2020-09-15T19:42:31Z", "type": "commit"}, {"oid": "be2bacce46f53e9816fcb5b79af362a9265fb796", "url": "https://github.com/apache/ozone/commit/be2bacce46f53e9816fcb5b79af362a9265fb796", "message": "Merge branch 'HDDS-4122-unit-tests' into HDDS-4122\n\n* HDDS-4122-unit-tests:\n  Add documnetation to OMOpenKeyDeleteResponse unit tests\n  Pass key names to OMResponse for open keys, since their names cannot be fully recreated from OmKeyInfo\n  Implement unit tests for OMOpenKeyDeleteResponse\n  All unit tests pass with new proto structure\n  Update proto layout and incorporate changes to OMOpenKeyDeleteRequest\n  Add protos to better represent open keys to delete\n  Comment out unfinished audit log and metrics code for testing\n  First implementation of unit tests for OMOpenKeyDeleteRequest\n  Refactor testing utils to easier manipulate keys\n  Add helper methods needed to write unit tests", "committedDate": "2020-09-15T19:43:02Z", "type": "commit"}, {"oid": "2c00443d3e2babd769d8398ff82f42e4f5fb6aa9", "url": "https://github.com/apache/ozone/commit/2c00443d3e2babd769d8398ff82f42e4f5fb6aa9", "message": "Rename Id to clientID in OpenKey proto", "committedDate": "2020-09-15T19:55:07Z", "type": "commit"}, {"oid": "46ea78dd577c2c01af75c116d9b0c5f23a5a7ace", "url": "https://github.com/apache/ozone/commit/46ea78dd577c2c01af75c116d9b0c5f23a5a7ace", "message": "Add logging to OMOpenKeyDeleteRequest", "committedDate": "2020-09-16T22:12:58Z", "type": "commit"}, {"oid": "c800c8b6067cdd3e2aeb12d74992116fcccc6f78", "url": "https://github.com/apache/ozone/commit/c800c8b6067cdd3e2aeb12d74992116fcccc6f78", "message": "Implement metrics for OMOpenKeyDeleteRequest", "committedDate": "2020-09-17T13:44:40Z", "type": "commit"}, {"oid": "e37d06636d26880fe02b96918da20cfab4458284", "url": "https://github.com/apache/ozone/commit/e37d06636d26880fe02b96918da20cfab4458284", "message": "Add unit test for OMOpenKeyDeleteRequest metrics, and fix metrics bugs", "committedDate": "2020-09-17T14:39:36Z", "type": "commit"}, {"oid": "b61b529ab79b01098a08ae57a4a8747928e5451e", "url": "https://github.com/apache/ozone/commit/b61b529ab79b01098a08ae57a4a8747928e5451e", "message": "Merge branch 'HDDS-4122-log-and-metrics' into HDDS-4122\n\n* HDDS-4122-log-and-metrics:\n  Add unit test for OMOpenKeyDeleteRequest metrics, and fix metrics bugs\n  Implement metrics for OMOpenKeyDeleteRequest\n  Add logging to OMOpenKeyDeleteRequest", "committedDate": "2020-09-17T14:41:56Z", "type": "commit"}, {"oid": "181d705d31abda4936de71f49f6027101f34b85b", "url": "https://github.com/apache/ozone/commit/181d705d31abda4936de71f49f6027101f34b85b", "message": "Replace table get calls with isExist where applicable", "committedDate": "2020-09-17T14:57:38Z", "type": "commit"}, {"oid": "82f3386a3a3de07961a116dfe584f662dd455e23", "url": "https://github.com/apache/ozone/commit/82f3386a3a3de07961a116dfe584f662dd455e23", "message": "Give variables more intuitive names and update test documentation", "committedDate": "2020-09-17T15:21:46Z", "type": "commit"}, {"oid": "323c8cd75674a2f29d8f38d93e4a50c946094082", "url": "https://github.com/apache/ozone/commit/323c8cd75674a2f29d8f38d93e4a50c946094082", "message": "Fix checkstyle errors", "committedDate": "2020-09-17T15:37:28Z", "type": "commit"}, {"oid": "90ab92d2cee42f864324c25ab384d3ab705e9eff", "url": "https://github.com/apache/ozone/commit/90ab92d2cee42f864324c25ab384d3ab705e9eff", "message": "Merge branch 'master' into HDDS-4122-quota-attempt2\n\n* master: (47 commits)\n  HDDS-4104. Provide a way to get the default value and key of java-based-configuration easily (#1369)\n  HDDS-4250. Fix wrong logger name (#1429)\n  HDDS-4244. Container deleted wrong replica cause mis-replicated. (#1423)\n  HDDS-4053. Volume space: add quotaUsageInBytes and update it when write and delete key. (#1296)\n  HDDS-4210. ResolveBucket during checkAcls fails. (#1398)\n  HDDS-4075. Retry request on different OM on AccessControlException (#1303)\n  HDDS-4166. Documentation index page redirects to the wrong address (#1372)\n  HDDS-4039. Reduce the number of fields in hdds.proto to improve performance (#1289)\n  HDDS-4155. Directory and filename can end up with same name in a path. (#1361)\n  HDDS-3927. Rename Ozone OM,DN,SCM runtime options to conform to naming conventions (#1401)\n  HDDS-4119. Improve performance of the BufferPool management of Ozone client (#1336)\n  HDDS-4217.Remove test TestOzoneContainerRatis (#1408)\n  HDDS-4218.Remove test TestRatisManager (#1409)\n  HDDS-4129. change MAX_QUOTA_IN_BYTES to Long.MAX_VALUE. (#1337)\n  HDDS-4228: add field 'num' to ALLOCATE_BLOCK of scm audit log. (#1413)\n  HDDS-4196. Add an endpoint in Recon to query Prometheus (#1390)\n  HDDS-4211. [OFS] Better owner and group display for listing Ozone volumes and buckets (#1397)\n  HDDS-4150. recon.api.TestEndpoints test is flaky (#1396)\n  HDDS-4170 - Fix typo in method description. (#1406)\n  HDDS-4064. Show container verbose info with verbose option (#1290)\n  ...", "committedDate": "2020-09-18T14:02:54Z", "type": "commit"}, {"oid": "574d280831ac4256640b69d7c30c9dbd657fa628", "url": "https://github.com/apache/ozone/commit/574d280831ac4256640b69d7c30c9dbd657fa628", "message": "Add volume quota update to open key delete response, and group duplicate code", "committedDate": "2020-09-18T15:54:17Z", "type": "commit"}, {"oid": "fe526799ac7a86e58fe1d3ac81af2a1293f3b790", "url": "https://github.com/apache/ozone/commit/fe526799ac7a86e58fe1d3ac81af2a1293f3b790", "message": "Move common volume byte usage update code to AbstractOMKeyDeleteResponse", "committedDate": "2020-09-18T17:25:44Z", "type": "commit"}, {"oid": "998cd09d4a1451fa3fb9cb0c1e597434e2999545", "url": "https://github.com/apache/ozone/commit/998cd09d4a1451fa3fb9cb0c1e597434e2999545", "message": "Remove unused inports and fix super constructor calls", "committedDate": "2020-09-18T17:38:50Z", "type": "commit"}, {"oid": "e7c5ae112773d9ef3d0dfd1396b4f5fc23c56800", "url": "https://github.com/apache/ozone/commit/e7c5ae112773d9ef3d0dfd1396b4f5fc23c56800", "message": "Remove redundant check status calls in children of AbstractOMOpenKeyDeleteRequest", "committedDate": "2020-09-18T17:46:43Z", "type": "commit"}, {"oid": "5fccc6066534341864f24900980973a70ca22627", "url": "https://github.com/apache/ozone/commit/5fccc6066534341864f24900980973a70ca22627", "message": "Incorporate volume size tracking into open key commit request and response\n\n* HDDS-4122-quota-attempt2: (51 commits)\n  Remove redundant check status calls in children of AbstractOMOpenKeyDeleteRequest\n  Remove unused inports and fix super constructor calls\n  Move common volume byte usage update code to AbstractOMKeyDeleteResponse\n  Add volume quota update to open key delete response, and group duplicate code\n  HDDS-4104. Provide a way to get the default value and key of java-based-configuration easily (#1369)\n  HDDS-4250. Fix wrong logger name (#1429)\n  HDDS-4244. Container deleted wrong replica cause mis-replicated. (#1423)\n  HDDS-4053. Volume space: add quotaUsageInBytes and update it when write and delete key. (#1296)\n  HDDS-4210. ResolveBucket during checkAcls fails. (#1398)\n  HDDS-4075. Retry request on different OM on AccessControlException (#1303)\n  HDDS-4166. Documentation index page redirects to the wrong address (#1372)\n  HDDS-4039. Reduce the number of fields in hdds.proto to improve performance (#1289)\n  HDDS-4155. Directory and filename can end up with same name in a path. (#1361)\n  HDDS-3927. Rename Ozone OM,DN,SCM runtime options to conform to naming conventions (#1401)\n  HDDS-4119. Improve performance of the BufferPool management of Ozone client (#1336)\n  HDDS-4217.Remove test TestOzoneContainerRatis (#1408)\n  HDDS-4218.Remove test TestRatisManager (#1409)\n  HDDS-4129. change MAX_QUOTA_IN_BYTES to Long.MAX_VALUE. (#1337)\n  HDDS-4228: add field 'num' to ALLOCATE_BLOCK of scm audit log. (#1413)\n  HDDS-4196. Add an endpoint in Recon to query Prometheus (#1390)\n  ...", "committedDate": "2020-09-18T21:20:20Z", "type": "commit"}, {"oid": "918a82070e38cae5ac60a98138bc9cd4270bbfae", "url": "https://github.com/apache/ozone/commit/918a82070e38cae5ac60a98138bc9cd4270bbfae", "message": "Update volume table cache in OMOpenKeyDeleteRequest", "committedDate": "2020-09-18T21:50:38Z", "type": "commit"}, {"oid": "1ab1a80956b4dddb1ca405a2dce63479955683de", "url": "https://github.com/apache/ozone/commit/1ab1a80956b4dddb1ca405a2dce63479955683de", "message": "Support specifying a log transaction index in AbstractOMKeyDeleteResponse#deleteFromTable", "committedDate": "2020-09-18T21:58:18Z", "type": "commit"}, {"oid": "5b0619618d6b35633492d30ec8e5a9fc81075333", "url": "https://github.com/apache/ozone/commit/5b0619618d6b35633492d30ec8e5a9fc81075333", "message": "Merge branch 'HDDS-4122' into HDDS-4122-volume-quota\n\n* HDDS-4122:\n  Support specifying a log transaction index in AbstractOMKeyDeleteResponse#deleteFromTable\n  Update volume table cache in OMOpenKeyDeleteRequest", "committedDate": "2020-09-21T14:11:13Z", "type": "commit"}, {"oid": "6f52ea5448fe9988a6a22f6adb863f800afc3d52", "url": "https://github.com/apache/ozone/commit/6f52ea5448fe9988a6a22f6adb863f800afc3d52", "message": "Make unit tests build by using in dummy volume args object", "committedDate": "2020-09-21T14:15:07Z", "type": "commit"}, {"oid": "5b9fd769df32617dbc2eace19c2c407357d036b1", "url": "https://github.com/apache/ozone/commit/5b9fd769df32617dbc2eace19c2c407357d036b1", "message": "Only update volume quota if volume still exists.", "committedDate": "2020-09-21T14:20:49Z", "type": "commit"}, {"oid": "528a5f4c8384a1759d22cc6588add10392af46ed", "url": "https://github.com/apache/ozone/commit/528a5f4c8384a1759d22cc6588add10392af46ed", "message": "Merge branch 'HDDS-4122' into HDDS-4122-volume-usage\n\n* HDDS-4122:\n  Only update volume quota if volume still exists.\n  Make unit tests build by using in dummy volume args object", "committedDate": "2020-09-21T14:28:00Z", "type": "commit"}, {"oid": "ebf0bed7e10ce317a0fd0534b4b30765040e8592", "url": "https://github.com/apache/ozone/commit/ebf0bed7e10ce317a0fd0534b4b30765040e8592", "message": "Add todo comments with testing plans", "committedDate": "2020-09-21T15:12:17Z", "type": "commit"}, {"oid": "3700c55e1bb3f9b180d2a0500abd15a59e8ebcc9", "url": "https://github.com/apache/ozone/commit/3700c55e1bb3f9b180d2a0500abd15a59e8ebcc9", "message": "Add DeleteOpenKeys as a non-readonly operation", "committedDate": "2020-09-21T17:10:13Z", "type": "commit"}, {"oid": "6d427917bae40dd2dc8cd2d3132a24b20a103822", "url": "https://github.com/apache/ozone/commit/6d427917bae40dd2dc8cd2d3132a24b20a103822", "message": "Add table cleanup annotation to AbstractOMKeyDeleteResponse", "committedDate": "2020-09-21T17:10:44Z", "type": "commit"}, {"oid": "ab18e1bf327b55a7271a67816055d2b792a39c9c", "url": "https://github.com/apache/ozone/commit/ab18e1bf327b55a7271a67816055d2b792a39c9c", "message": "Fix unit test for OMKeysDeleteResponse that expected empty keys to be in the delete table\n\nSince the response is using the new shared code between other delete responses,\nit will operate on the same behavior as them: When a deleted key has no block\ninformation, it is not put in the delete table.", "committedDate": "2020-09-21T17:11:33Z", "type": "commit"}, {"oid": "8220b2f87f40dbc3814b3a16f8173a3863cb7196", "url": "https://github.com/apache/ozone/commit/8220b2f87f40dbc3814b3a16f8173a3863cb7196", "message": "Add check for volume existance before updating volume byte usage\n\nSince the open key cleanup service runs in the background, by the time it\nencounters an expired open key, the key's corresponding volume may have already\nbeen deleted.", "committedDate": "2020-09-21T17:13:58Z", "type": "commit"}, {"oid": "dba176398d3befaa214b2bea042bc6580aee5971", "url": "https://github.com/apache/ozone/commit/dba176398d3befaa214b2bea042bc6580aee5971", "message": "Remove unused imports", "committedDate": "2020-09-21T17:52:04Z", "type": "commit"}, {"oid": "be34b223b422ab85751c97af48e257133a852abb", "url": "https://github.com/apache/ozone/commit/be34b223b422ab85751c97af48e257133a852abb", "message": "Merge branch 'HDDS-4122' into HDDS-4122-volume-usage\n\n* HDDS-4122:\n  Remove unused imports\n  Add check for volume existance before updating volume byte usage\n  Fix unit test for OMKeysDeleteResponse that expected empty keys to be in the delete table\n  Add table cleanup annotation to AbstractOMKeyDeleteResponse\n  Add DeleteOpenKeys as a non-readonly operation", "committedDate": "2020-09-22T16:15:55Z", "type": "commit"}, {"oid": "cae3260ccba58cab509ff7e8ed5de6d78bb9de80", "url": "https://github.com/apache/ozone/commit/cae3260ccba58cab509ff7e8ed5de6d78bb9de80", "message": "Fix cache update for volume info in OMOpenKeyDeleteRequest", "committedDate": "2020-09-22T16:58:04Z", "type": "commit"}, {"oid": "53778c346484de260d0bfbe7cf7e74a3eded3158", "url": "https://github.com/apache/ozone/commit/53778c346484de260d0bfbe7cf7e74a3eded3158", "message": "Merge branch 'HDDS-4122' into HDDS-4122-volume-usage\n\n* HDDS-4122:\n  Fix cache update for volume info in OMOpenKeyDeleteRequest", "committedDate": "2020-09-22T16:59:32Z", "type": "commit"}, {"oid": "bec8cbad2dbe1427edd6ea3b5ec11bfa4fa663f5", "url": "https://github.com/apache/ozone/commit/bec8cbad2dbe1427edd6ea3b5ec11bfa4fa663f5", "message": "Rename method for updating volume args, and remove check in response for volume existing\n\nThe response should do whatever the request tells it.", "committedDate": "2020-09-23T16:07:21Z", "type": "commit"}, {"oid": "3d3cef2b0f42f86dc36ec4eb8e9fe696ddda0d9a", "url": "https://github.com/apache/ozone/commit/3d3cef2b0f42f86dc36ec4eb8e9fe696ddda0d9a", "message": "Add volume update test to unit tests for OMOpenKeyDeleteResponse", "committedDate": "2020-09-23T17:32:47Z", "type": "commit"}, {"oid": "51b3dd2a8d6eb07c3aa088c61503782a02bf352e", "url": "https://github.com/apache/ozone/commit/51b3dd2a8d6eb07c3aa088c61503782a02bf352e", "message": "Remove uneeded exception in method signature", "committedDate": "2020-09-23T19:58:54Z", "type": "commit"}, {"oid": "bde9a85cd34f21625553695f7744fbe05dad3047", "url": "https://github.com/apache/ozone/commit/bde9a85cd34f21625553695f7744fbe05dad3047", "message": "Move creation of blocks for keyinfo to TestOMRequestUtils", "committedDate": "2020-09-28T14:31:16Z", "type": "commit"}, {"oid": "2449f09b0e00bbb6e3d3b466588830e5521467c3", "url": "https://github.com/apache/ozone/commit/2449f09b0e00bbb6e3d3b466588830e5521467c3", "message": "Add passing test for volume byte usage update", "committedDate": "2020-09-28T15:02:53Z", "type": "commit"}, {"oid": "d528da30e8f97b03d107a81fced2f54fc3378d9e", "url": "https://github.com/apache/ozone/commit/d528da30e8f97b03d107a81fced2f54fc3378d9e", "message": "Update documentation and method names in TestOMOpenKeyDeleteRequest", "committedDate": "2020-09-28T15:32:02Z", "type": "commit"}, {"oid": "acdeef652f7fe5539901ecbcb66b347565dea7ea", "url": "https://github.com/apache/ozone/commit/acdeef652f7fe5539901ecbcb66b347565dea7ea", "message": "Update docs and method names in unit tests", "committedDate": "2020-09-28T16:10:14Z", "type": "commit"}, {"oid": "65ca25e53c65c0d5cd886ad4dd9af1f43d7a2008", "url": "https://github.com/apache/ozone/commit/65ca25e53c65c0d5cd886ad4dd9af1f43d7a2008", "message": "Merge branch 'HDDS-4122-volume-usage' into HDDS-4122\n\n* HDDS-4122-volume-usage:\n  Update docs and method names in unit tests\n  Update documentation and method names in TestOMOpenKeyDeleteRequest\n  Add passing test for volume byte usage update\n  Move creation of blocks for keyinfo to TestOMRequestUtils\n  Remove uneeded exception in method signature\n  Add volume update test to unit tests for OMOpenKeyDeleteResponse\n  Add todo comments with testing plans", "committedDate": "2020-09-28T16:13:30Z", "type": "commit"}, {"oid": "29969f225ba157eeae3112de28a6c6d3b231690f", "url": "https://github.com/apache/ozone/commit/29969f225ba157eeae3112de28a6c6d3b231690f", "message": "Fix checkstyle errors", "committedDate": "2020-09-28T17:22:14Z", "type": "commit"}, {"oid": "d46ab139c2ff4f66fa834d7d704dd1de3666f7d5", "url": "https://github.com/apache/ozone/commit/d46ab139c2ff4f66fa834d7d704dd1de3666f7d5", "message": "Make plural of keys consistent in file and class names", "committedDate": "2020-09-28T17:29:45Z", "type": "commit"}, {"oid": "9d137a179ed7536a7a28e81f080049caa6e46d03", "url": "https://github.com/apache/ozone/commit/9d137a179ed7536a7a28e81f080049caa6e46d03", "message": "Revert other delete request/response files back to their original states on master\n\nThey no longer call the shared helper methods for operations.", "committedDate": "2020-09-28T19:36:40Z", "type": "commit"}, {"oid": "82e70a60b1d743f8703a6669af0a2f0997d74e42", "url": "https://github.com/apache/ozone/commit/82e70a60b1d743f8703a6669af0a2f0997d74e42", "message": "Merge branch 'master' into HDDS-4122-remove-code-consolidation\n\n* master:\n  HDDS-4102. Normalize Keypath for lookupKey. (#1328)\n  HDDS-4263. ReplicatiomManager shouldn't consider origin node Id for CLOSED containers. (#1438)\n  HDDS-4282. Improve the emptyDir syntax (#1450)\n  HDDS-4194. Create a script to check AWS S3 compatibility (#1383)\n  HDDS-4270. Add more reusable byteman scripts to debug ofs/o3fs performance (#1443)\n  HDDS-2660. Create insight point for datanode container protocol (#1272)\n  HDDS-3297. Enable TestOzoneClientKeyGenerator. (#1442)\n  HDDS-4324. Add important comment to ListVolumes logic (#1417)\n  HDDS-4236. Move \"Om*Codec.java\" to new project hadoop-ozone/interface-storage (#1424)\n  HDDS-4254. Bucket space: add usedBytes and update it when create and delete key. (#1431)\n  HDDS-2766. security/SecuringDataNodes.md (#1175)\n  HDDS-4206. Attempt pipeline creation more frequently in acceptance tests (#1389)\n  HDDS-4233. Interrupted exeception printed out from DatanodeStateMachine (#1416)\n  HDDS-3947: Sort DNs for client when the key is a file for #getFileStatus #listStatus APIs (#1385)\n  HDDS-3102. ozone getconf command should use the GenericCli parent class (#1410)\n  HDDS-3981. Add more debug level log to XceiverClientGrpc for debug purpose (#1214)\n  HDDS-4255. Remove unused Ant and Jdiff dependency versions (#1433)\n  HDDS-4247. Fixed log4j usage in some places (#1426)\n  HDDS-4241. Support HADOOP_TOKEN_FILE_LOCATION for Ozone token CLI. (#1422)", "committedDate": "2020-09-28T19:38:35Z", "type": "commit"}, {"oid": "fbcb784371715bbbc9501c1652b90d09747c8ecb", "url": "https://github.com/apache/ozone/commit/fbcb784371715bbbc9501c1652b90d09747c8ecb", "message": "Restore files that had deduplicated code from master\n\nRemoves calls to new helper methods.", "committedDate": "2020-09-28T19:46:02Z", "type": "commit"}, {"oid": "3cb1e2ceeafb81b63d1ed1f68d342d0e00f19ab4", "url": "https://github.com/apache/ozone/commit/3cb1e2ceeafb81b63d1ed1f68d342d0e00f19ab4", "message": "Merge branch 'HDDS-4122-remove-code-consolidation' into HDDS-4122\n\n* HDDS-4122-remove-code-consolidation: (21 commits)\n  Restore files that had deduplicated code from master\n  Revert other delete request/response files back to their original states on master\n  HDDS-4102. Normalize Keypath for lookupKey. (#1328)\n  HDDS-4263. ReplicatiomManager shouldn't consider origin node Id for CLOSED containers. (#1438)\n  HDDS-4282. Improve the emptyDir syntax (#1450)\n  HDDS-4194. Create a script to check AWS S3 compatibility (#1383)\n  HDDS-4270. Add more reusable byteman scripts to debug ofs/o3fs performance (#1443)\n  HDDS-2660. Create insight point for datanode container protocol (#1272)\n  HDDS-3297. Enable TestOzoneClientKeyGenerator. (#1442)\n  HDDS-4324. Add important comment to ListVolumes logic (#1417)\n  HDDS-4236. Move \"Om*Codec.java\" to new project hadoop-ozone/interface-storage (#1424)\n  HDDS-4254. Bucket space: add usedBytes and update it when create and delete key. (#1431)\n  HDDS-2766. security/SecuringDataNodes.md (#1175)\n  HDDS-4206. Attempt pipeline creation more frequently in acceptance tests (#1389)\n  HDDS-4233. Interrupted exeception printed out from DatanodeStateMachine (#1416)\n  HDDS-3947: Sort DNs for client when the key is a file for #getFileStatus #listStatus APIs (#1385)\n  HDDS-3102. ozone getconf command should use the GenericCli parent class (#1410)\n  HDDS-3981. Add more debug level log to XceiverClientGrpc for debug purpose (#1214)\n  HDDS-4255. Remove unused Ant and Jdiff dependency versions (#1433)\n  HDDS-4247. Fixed log4j usage in some places (#1426)\n  ...", "committedDate": "2020-09-28T19:46:56Z", "type": "commit"}, {"oid": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "url": "https://github.com/apache/ozone/commit/14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "message": "Rename method getBytesUsed -> sumBlockLengths", "committedDate": "2020-09-28T19:55:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4ODM0NQ==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r497488345", "bodyText": "Good point to update the used bytes while doing this cleanup. I am wondering what this would mean with multiple key version support in the future. We do not seem to store the \"version\" of the current open key.", "author": "avijayanhwx", "createdAt": "2020-09-30T12:58:29Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -553,17 +554,43 @@ protected boolean checkDirectoryAlreadyExists(String volumeName,\n   }\n \n   /**\n-   * Return volume info for the specified volume.\n+   * Return volume info for the specified volume. If the volume does not\n+   * exist, returns {@code null}.\n    * @param omMetadataManager\n    * @param volume\n    * @return OmVolumeArgs\n    * @throws IOException\n    */\n   protected OmVolumeArgs getVolumeInfo(OMMetadataManager omMetadataManager,\n       String volume) {\n-    return omMetadataManager.getVolumeTable().getCacheValue(\n-        new CacheKey<>(omMetadataManager.getVolumeKey(volume)))\n-        .getCacheValue();\n+\n+    OmVolumeArgs volumeArgs = null;\n+\n+    CacheValue<OmVolumeArgs> value =\n+        omMetadataManager.getVolumeTable().getCacheValue(\n+        new CacheKey<>(omMetadataManager.getVolumeKey(volume)));\n+\n+    if (value != null) {\n+      volumeArgs = value.getCacheValue();\n+    }\n+\n+    return volumeArgs;\n+  }\n+\n+  /**\n+   * @return the number of bytes used by blocks pointed to by {@code omKeyInfo}.\n+   */\n+  protected static long sumBlockLengths(OmKeyInfo omKeyInfo) {\n+    long bytesUsed = 0;\n+    int keyFactor = omKeyInfo.getFactor().getNumber();\n+    OmKeyLocationInfoGroup keyLocationGroup =\n+        omKeyInfo.getLatestVersionLocations();", "originalCommit": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java\nindex 60a61bbde4..e24f4e2bff 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java\n\n@@ -554,8 +575,7 @@ protected boolean checkDirectoryAlreadyExists(String volumeName,\n   }\n \n   /**\n-   * Return volume info for the specified volume. If the volume does not\n-   * exist, returns {@code null}.\n+   * Return volume info for the specified volume.\n    * @param omMetadataManager\n    * @param volume\n    * @return OmVolumeArgs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3Mjg2MQ==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r498972861", "bodyText": "Instead of streams, use for loop and compute, as request execution is in hot code path.\nI see a few recent jira's to not to use streams and helped perf improvement.\nCan we use good old for loop here?", "author": "bharatviswa504", "createdAt": "2020-10-02T18:07:52Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.key.OMKeyRequest;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKeyBucket;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKey;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles requests to move open keys from the open key table to the delete\n+ * table. Modifies the open key table cache only, and no underlying databases.\n+ * The delete table cache does not need to be modified since it is not used\n+ * for client response validation.\n+ */\n+public class OMOpenKeysDeleteRequest extends OMKeyRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMOpenKeysDeleteRequest.class);\n+\n+  public OMOpenKeysDeleteRequest(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumOpenKeyDeleteRequests();\n+\n+    OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n+            getOmRequest().getDeleteOpenKeysRequest();\n+\n+    List<OpenKeyBucket> submittedOpenKeyBucket =\n+            deleteOpenKeysRequest.getOpenKeysPerBucketList();\n+\n+    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()", "originalCommit": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\nindex c280c298a8..9f9190bcb0 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n\n@@ -68,11 +68,13 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n             getOmRequest().getDeleteOpenKeysRequest();\n \n-    List<OpenKeyBucket> submittedOpenKeyBucket =\n+    List<OpenKeyBucket> submittedOpenKeyBuckets =\n             deleteOpenKeysRequest.getOpenKeysPerBucketList();\n \n-    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n-        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+    long numSubmittedOpenKeys = 0;\n+    for (OpenKeyBucket keyBucket: submittedOpenKeyBuckets) {\n+      numSubmittedOpenKeys += keyBucket.getKeysCount();\n+    }\n \n     LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n     omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTU5OQ==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r498981599", "bodyText": "Looks like we need a volume lock here, as we are updating the bytesUsed.", "author": "bharatviswa504", "createdAt": "2020-10-02T18:22:57Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.key.OMKeyRequest;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKeyBucket;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKey;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles requests to move open keys from the open key table to the delete\n+ * table. Modifies the open key table cache only, and no underlying databases.\n+ * The delete table cache does not need to be modified since it is not used\n+ * for client response validation.\n+ */\n+public class OMOpenKeysDeleteRequest extends OMKeyRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMOpenKeysDeleteRequest.class);\n+\n+  public OMOpenKeysDeleteRequest(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumOpenKeyDeleteRequests();\n+\n+    OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n+            getOmRequest().getDeleteOpenKeysRequest();\n+\n+    List<OpenKeyBucket> submittedOpenKeyBucket =\n+            deleteOpenKeysRequest.getOpenKeysPerBucketList();\n+\n+    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n+        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+\n+    LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n+    omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n+\n+    OzoneManagerProtocolProtos.OMResponse.Builder omResponse =\n+            OmResponseUtil.getOMResponseBuilder(getOmRequest());\n+\n+    IOException exception = null;\n+    OMClientResponse omClientResponse = null;\n+    Result result = null;\n+    Map<String, OmKeyInfo> deletedOpenKeys = new HashMap<>();\n+\n+    try {\n+      // Open keys are grouped by bucket, but there may be multiple buckets\n+      // per volume. This maps volume name to volume args to track\n+      // all volume updates for this request.\n+      Map<String, OmVolumeArgs> modifiedVolumes = new HashMap<>();\n+      OMMetadataManager metadataManager = ozoneManager.getMetadataManager();\n+\n+      for (OpenKeyBucket openKeyBucket: submittedOpenKeyBucket) {\n+        // For each bucket where keys will be deleted from,\n+        // get its bucket lock and update the cache accordingly.\n+        Map<String, OmKeyInfo> deleted = updateOpenKeyTableCache(ozoneManager,\n+            trxnLogIndex, openKeyBucket);\n+\n+        deletedOpenKeys.putAll(deleted);\n+\n+        // If open keys were deleted from this bucket and its volume still\n+        // exists, update the volume's byte usage in the cache.\n+        if (!deleted.isEmpty()) {\n+          String volumeName = openKeyBucket.getVolumeName();\n+          // Returns volume args from the cache if the volume is present,\n+          // null otherwise.\n+          OmVolumeArgs volumeArgs = getVolumeInfo(metadataManager, volumeName);\n+\n+          // If this volume still exists, decrement bytes used based on open\n+          // keys deleted.\n+          // The volume args object being updated is a reference from the\n+          // cache, so this serves as a cache update.\n+          if (volumeArgs != null) {", "originalCommit": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4NTM4NA==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r499585384", "bodyText": "I think we are safe because the bytes used value is stored in a thread safe LongAdder internally. See the original PR where this was introduced. If there is still an issue with this approach, then most of the request classes will need to be modified after HDDS-4053. We should discuss further, as this is really an issue with the design already introduced in master for HDDS-4053 rather than this PR.", "author": "errose28", "createdAt": "2020-10-05T13:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MTgzNw==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r500391837", "bodyText": "Volume byte usage updates will be removed from the open keys delete request and response classes. See this comment.", "author": "errose28", "createdAt": "2020-10-06T15:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\nindex c280c298a8..9f9190bcb0 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n\n@@ -68,11 +68,13 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n             getOmRequest().getDeleteOpenKeysRequest();\n \n-    List<OpenKeyBucket> submittedOpenKeyBucket =\n+    List<OpenKeyBucket> submittedOpenKeyBuckets =\n             deleteOpenKeysRequest.getOpenKeysPerBucketList();\n \n-    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n-        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+    long numSubmittedOpenKeys = 0;\n+    for (OpenKeyBucket keyBucket: submittedOpenKeyBuckets) {\n+      numSubmittedOpenKeys += keyBucket.getKeysCount();\n+    }\n \n     LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n     omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NDQyNA==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r498984424", "bodyText": "Same here avoid stream here.", "author": "bharatviswa504", "createdAt": "2020-10-02T18:28:30Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.key.OMKeyRequest;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKeyBucket;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKey;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles requests to move open keys from the open key table to the delete\n+ * table. Modifies the open key table cache only, and no underlying databases.\n+ * The delete table cache does not need to be modified since it is not used\n+ * for client response validation.\n+ */\n+public class OMOpenKeysDeleteRequest extends OMKeyRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMOpenKeysDeleteRequest.class);\n+\n+  public OMOpenKeysDeleteRequest(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumOpenKeyDeleteRequests();\n+\n+    OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n+            getOmRequest().getDeleteOpenKeysRequest();\n+\n+    List<OpenKeyBucket> submittedOpenKeyBucket =\n+            deleteOpenKeysRequest.getOpenKeysPerBucketList();\n+\n+    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n+        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+\n+    LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n+    omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n+\n+    OzoneManagerProtocolProtos.OMResponse.Builder omResponse =\n+            OmResponseUtil.getOMResponseBuilder(getOmRequest());\n+\n+    IOException exception = null;\n+    OMClientResponse omClientResponse = null;\n+    Result result = null;\n+    Map<String, OmKeyInfo> deletedOpenKeys = new HashMap<>();\n+\n+    try {\n+      // Open keys are grouped by bucket, but there may be multiple buckets\n+      // per volume. This maps volume name to volume args to track\n+      // all volume updates for this request.\n+      Map<String, OmVolumeArgs> modifiedVolumes = new HashMap<>();\n+      OMMetadataManager metadataManager = ozoneManager.getMetadataManager();\n+\n+      for (OpenKeyBucket openKeyBucket: submittedOpenKeyBucket) {\n+        // For each bucket where keys will be deleted from,\n+        // get its bucket lock and update the cache accordingly.\n+        Map<String, OmKeyInfo> deleted = updateOpenKeyTableCache(ozoneManager,\n+            trxnLogIndex, openKeyBucket);\n+\n+        deletedOpenKeys.putAll(deleted);\n+\n+        // If open keys were deleted from this bucket and its volume still\n+        // exists, update the volume's byte usage in the cache.\n+        if (!deleted.isEmpty()) {\n+          String volumeName = openKeyBucket.getVolumeName();\n+          // Returns volume args from the cache if the volume is present,\n+          // null otherwise.\n+          OmVolumeArgs volumeArgs = getVolumeInfo(metadataManager, volumeName);\n+\n+          // If this volume still exists, decrement bytes used based on open\n+          // keys deleted.\n+          // The volume args object being updated is a reference from the\n+          // cache, so this serves as a cache update.\n+          if (volumeArgs != null) {\n+            // If we already encountered the volume, it was a reference to\n+            // the same object from the cache, so this will update it.\n+            modifiedVolumes.put(volumeName, volumeArgs);\n+            subtractUsedBytes(volumeArgs, deleted.values());\n+          }\n+        }\n+      }\n+\n+      omClientResponse = new OMOpenKeysDeleteResponse(omResponse.build(),\n+          deletedOpenKeys, ozoneManager.isRatisEnabled(),\n+          modifiedVolumes.values());\n+\n+      result = Result.SUCCESS;\n+    } catch (IOException ex) {\n+      result = Result.FAILURE;\n+      exception = ex;\n+      omClientResponse =\n+          new OMKeyDeleteResponse(createErrorOMResponse(omResponse, exception));\n+    } finally {\n+      addResponseToDoubleBuffer(trxnLogIndex, omClientResponse,\n+              omDoubleBufferHelper);\n+    }\n+\n+    processResults(omMetrics, numSubmittedOpenKeys, deletedOpenKeys.size(),\n+        deleteOpenKeysRequest, result);\n+\n+    return omClientResponse;\n+  }\n+\n+  private void processResults(OMMetrics omMetrics, long numSubmittedOpenKeys,\n+      long numDeletedOpenKeys,\n+      OzoneManagerProtocolProtos.DeleteOpenKeysRequest request, Result result) {\n+\n+    switch (result) {\n+    case SUCCESS:\n+      LOG.debug(\"Deleted {} open keys out of {} submitted keys.\",\n+          numDeletedOpenKeys, numSubmittedOpenKeys);\n+      break;\n+    case FAILURE:\n+      omMetrics.incNumOpenKeyDeleteRequestFails();\n+      LOG.error(\"Failure occurred while trying to delete {} submitted open \" +\n+              \"keys.\", numSubmittedOpenKeys);\n+      break;\n+    default:\n+      LOG.error(\"Unrecognized result for OMOpenKeysDeleteRequest: {}\",\n+          request);\n+    }\n+  }\n+\n+  private Map<String, OmKeyInfo> updateOpenKeyTableCache(\n+      OzoneManager ozoneManager, long trxnLogIndex, OpenKeyBucket keysPerBucket)\n+      throws IOException {\n+\n+    Map<String, OmKeyInfo> deletedKeys = new HashMap<>();\n+\n+    boolean acquiredLock = false;\n+    String volumeName = keysPerBucket.getVolumeName();\n+    String bucketName = keysPerBucket.getBucketName();\n+    OMMetadataManager omMetadataManager = ozoneManager.getMetadataManager();\n+\n+    try {\n+      acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+              volumeName, bucketName);\n+\n+      for (OpenKey key: keysPerBucket.getKeysList()) {\n+        String fullKeyName = omMetadataManager.getOpenKey(volumeName,\n+                bucketName, key.getName(), key.getClientID());\n+\n+        // If an open key is no longer present in the table, it was committed\n+        // and should not be deleted.\n+        OmKeyInfo omKeyInfo =\n+            omMetadataManager.getOpenKeyTable().get(fullKeyName);\n+        if (omKeyInfo != null) {\n+          // Set the UpdateID to current transactionLogIndex\n+          omKeyInfo.setUpdateID(trxnLogIndex, ozoneManager.isRatisEnabled());\n+          deletedKeys.put(fullKeyName, omKeyInfo);\n+\n+          // Update table cache.\n+          omMetadataManager.getOpenKeyTable().addCacheEntry(\n+                  new CacheKey<>(fullKeyName),\n+                  new CacheValue<>(Optional.absent(), trxnLogIndex));\n+\n+          ozoneManager.getMetrics().incNumOpenKeysDeleted();\n+          LOG.debug(\"Open key {} deleted.\", fullKeyName);\n+\n+          // No need to add cache entries to delete table. As delete table will\n+          // be used by DeleteKeyService only, not used for any client response\n+          // validation, so we don't need to add to cache.\n+        } else {\n+          LOG.debug(\"Key {} was not deleted, as it was not \" +\n+                  \"found in the open key table.\", fullKeyName);\n+        }\n+      }\n+    } finally {\n+      if (acquiredLock) {\n+        omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n+                bucketName);\n+      }\n+    }\n+\n+    return deletedKeys;\n+  }\n+\n+  /**\n+   * Subtracts all bytes used by the blocks pointed to by {@code keyInfos}\n+   * from {@code volumeArgs}.\n+   */\n+  private void subtractUsedBytes(OmVolumeArgs volumeArgs,\n+      Collection<OmKeyInfo> keyInfos) {\n+\n+    long quotaReleased = keyInfos.stream()", "originalCommit": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\nindex c280c298a8..9f9190bcb0 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n\n@@ -68,11 +68,13 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n             getOmRequest().getDeleteOpenKeysRequest();\n \n-    List<OpenKeyBucket> submittedOpenKeyBucket =\n+    List<OpenKeyBucket> submittedOpenKeyBuckets =\n             deleteOpenKeysRequest.getOpenKeysPerBucketList();\n \n-    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n-        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+    long numSubmittedOpenKeys = 0;\n+    for (OpenKeyBucket keyBucket: submittedOpenKeyBuckets) {\n+      numSubmittedOpenKeys += keyBucket.getKeysCount();\n+    }\n \n     LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n     omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzA1MA==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r498987050", "bodyText": "And also here getting a cached object will cause issues.\nIf double buffer flush has not flushed this to DB, and other thread uses same volumeArgs reference and update volumeArgs, we will be updating to DB inconsistent state.\nSo getVolumeInfo should use Table#get API.", "author": "bharatviswa504", "createdAt": "2020-10-02T18:33:46Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.key.OMKeyRequest;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKeyBucket;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKey;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles requests to move open keys from the open key table to the delete\n+ * table. Modifies the open key table cache only, and no underlying databases.\n+ * The delete table cache does not need to be modified since it is not used\n+ * for client response validation.\n+ */\n+public class OMOpenKeysDeleteRequest extends OMKeyRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMOpenKeysDeleteRequest.class);\n+\n+  public OMOpenKeysDeleteRequest(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumOpenKeyDeleteRequests();\n+\n+    OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n+            getOmRequest().getDeleteOpenKeysRequest();\n+\n+    List<OpenKeyBucket> submittedOpenKeyBucket =\n+            deleteOpenKeysRequest.getOpenKeysPerBucketList();\n+\n+    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n+        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+\n+    LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n+    omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n+\n+    OzoneManagerProtocolProtos.OMResponse.Builder omResponse =\n+            OmResponseUtil.getOMResponseBuilder(getOmRequest());\n+\n+    IOException exception = null;\n+    OMClientResponse omClientResponse = null;\n+    Result result = null;\n+    Map<String, OmKeyInfo> deletedOpenKeys = new HashMap<>();\n+\n+    try {\n+      // Open keys are grouped by bucket, but there may be multiple buckets\n+      // per volume. This maps volume name to volume args to track\n+      // all volume updates for this request.\n+      Map<String, OmVolumeArgs> modifiedVolumes = new HashMap<>();\n+      OMMetadataManager metadataManager = ozoneManager.getMetadataManager();\n+\n+      for (OpenKeyBucket openKeyBucket: submittedOpenKeyBucket) {\n+        // For each bucket where keys will be deleted from,\n+        // get its bucket lock and update the cache accordingly.\n+        Map<String, OmKeyInfo> deleted = updateOpenKeyTableCache(ozoneManager,\n+            trxnLogIndex, openKeyBucket);\n+\n+        deletedOpenKeys.putAll(deleted);\n+\n+        // If open keys were deleted from this bucket and its volume still\n+        // exists, update the volume's byte usage in the cache.\n+        if (!deleted.isEmpty()) {\n+          String volumeName = openKeyBucket.getVolumeName();\n+          // Returns volume args from the cache if the volume is present,\n+          // null otherwise.\n+          OmVolumeArgs volumeArgs = getVolumeInfo(metadataManager, volumeName);\n+\n+          // If this volume still exists, decrement bytes used based on open\n+          // keys deleted.\n+          // The volume args object being updated is a reference from the\n+          // cache, so this serves as a cache update.\n+          if (volumeArgs != null) {\n+            // If we already encountered the volume, it was a reference to\n+            // the same object from the cache, so this will update it.\n+            modifiedVolumes.put(volumeName, volumeArgs);", "originalCommit": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyOTQ0Ng==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r499629446", "bodyText": "Just to clarify, is this the execution you are talking about?\n\nRequest1 deletes key1 from volume1 in cache.\nRequest2 deletes key2 from volume1 in cache.\nRequest1 sets cached VolumeArgs object volArgs.bytesUsed -= key1.bytesUsed.\n\ndivergence 1: The cache shows key1 and key2 as deleted, but cache byte usage only reflects key1's deletion.\n\n\nRequest2 sets cached VolumeArgs object volArgs.bytesUsed -= key2.bytesUsed.\n\nAt this point, byte usage in the cache is consistent with the keys it shows as deleted.\n\n\nResponse1 is processed, committing volArgs and the deletion of key1 to the DB.\n\ndivergence 2: the DB shows only key1 deleted, but volume byte usage has been set as if both key1 and key2 were deleted.\n\n\nResponse2 is processed, committing volArgs to the DB again, and committing the deletion of key2 to the DB.\n\nNow the keys deleted and bytes used align in the DB.\n\n\n\nIIRC the entire volume table is stored in memory and only persisted to the DB to save state. Reads only happen from the in memory cache for volume metadata. In this case, divergence 2 will never be detected by callers since it only happens at the DB level. divergence 1 my exist briefly and be detected by callers. Again, this is really an issue with all requests modified in HDDS-4053 and not just this PR. We should discuss to determine whether the slight inconsistency warrants a whole volume lock on all requests that modify byte usage.", "author": "errose28", "createdAt": "2020-10-05T14:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4Mzc4Ng==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r499683786", "bodyText": "Not exactly, what I mean here is by the time we process request1, as we add the same object to double buffer, and if other thread processing request2 and updating it, there might be a chance of updating DB state also (Technically this should happen after adding response to double buffer)\nCache is for holding in flight updates if it is not committed to DB, I see no issues with that, this is by design.\nDiveregence 1 should not exist, if volume locks are held.", "author": "bharatviswa504", "createdAt": "2020-10-05T15:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4NjI0OQ==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r499686249", "bodyText": "https://issues.apache.org/jira/browse/HDDS-2344 Jira but here just value updating (Might not be bringing ConcurrentModificationException, but it can provide some context)", "author": "bharatviswa504", "createdAt": "2020-10-05T15:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4OTc2OQ==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r500389769", "bodyText": "Thanks for the explanation @bharatviswa504. I now see that divergence 2 in the above example poses an issue in the event of an OM crash happening between steps 5 and 6. This will cause the byte usage update to be applied twice in the DB after OM restart. Volume byte usage updates will be removed from the open key requests and responses. Since this is really a larger problem with all requests/responses operating in this way under HDDS-541, we can add the byte usage updates when a solution is developed for all requests/responses as part of HDDS-4308.", "author": "errose28", "createdAt": "2020-10-06T15:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\nindex c280c298a8..9f9190bcb0 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n\n@@ -68,11 +68,13 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n             getOmRequest().getDeleteOpenKeysRequest();\n \n-    List<OpenKeyBucket> submittedOpenKeyBucket =\n+    List<OpenKeyBucket> submittedOpenKeyBuckets =\n             deleteOpenKeysRequest.getOpenKeysPerBucketList();\n \n-    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n-        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+    long numSubmittedOpenKeys = 0;\n+    for (OpenKeyBucket keyBucket: submittedOpenKeyBuckets) {\n+      numSubmittedOpenKeys += keyBucket.getKeysCount();\n+    }\n \n     LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n     omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwMTA4MQ==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r499001081", "bodyText": "OMKeyDeleteResponse -> OMOpenKeysDeleteResponse", "author": "bharatviswa504", "createdAt": "2020-10-02T19:05:05Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import com.google.common.base.Optional;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheKey;\n+import org.apache.hadoop.hdds.utils.db.cache.CacheValue;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OMMetrics;\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.key.OMKeyRequest;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKeyBucket;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OpenKey;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.apache.hadoop.ozone.om.lock.OzoneManagerLock.Resource.BUCKET_LOCK;\n+\n+/**\n+ * Handles requests to move open keys from the open key table to the delete\n+ * table. Modifies the open key table cache only, and no underlying databases.\n+ * The delete table cache does not need to be modified since it is not used\n+ * for client response validation.\n+ */\n+public class OMOpenKeysDeleteRequest extends OMKeyRequest {\n+\n+  private static final Logger LOG =\n+          LoggerFactory.getLogger(OMOpenKeysDeleteRequest.class);\n+\n+  public OMOpenKeysDeleteRequest(OMRequest omRequest) {\n+    super(omRequest);\n+  }\n+\n+  public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n+      long trxnLogIndex, OzoneManagerDoubleBufferHelper omDoubleBufferHelper) {\n+\n+    OMMetrics omMetrics = ozoneManager.getMetrics();\n+    omMetrics.incNumOpenKeyDeleteRequests();\n+\n+    OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n+            getOmRequest().getDeleteOpenKeysRequest();\n+\n+    List<OpenKeyBucket> submittedOpenKeyBucket =\n+            deleteOpenKeysRequest.getOpenKeysPerBucketList();\n+\n+    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n+        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+\n+    LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n+    omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n+\n+    OzoneManagerProtocolProtos.OMResponse.Builder omResponse =\n+            OmResponseUtil.getOMResponseBuilder(getOmRequest());\n+\n+    IOException exception = null;\n+    OMClientResponse omClientResponse = null;\n+    Result result = null;\n+    Map<String, OmKeyInfo> deletedOpenKeys = new HashMap<>();\n+\n+    try {\n+      // Open keys are grouped by bucket, but there may be multiple buckets\n+      // per volume. This maps volume name to volume args to track\n+      // all volume updates for this request.\n+      Map<String, OmVolumeArgs> modifiedVolumes = new HashMap<>();\n+      OMMetadataManager metadataManager = ozoneManager.getMetadataManager();\n+\n+      for (OpenKeyBucket openKeyBucket: submittedOpenKeyBucket) {\n+        // For each bucket where keys will be deleted from,\n+        // get its bucket lock and update the cache accordingly.\n+        Map<String, OmKeyInfo> deleted = updateOpenKeyTableCache(ozoneManager,\n+            trxnLogIndex, openKeyBucket);\n+\n+        deletedOpenKeys.putAll(deleted);\n+\n+        // If open keys were deleted from this bucket and its volume still\n+        // exists, update the volume's byte usage in the cache.\n+        if (!deleted.isEmpty()) {\n+          String volumeName = openKeyBucket.getVolumeName();\n+          // Returns volume args from the cache if the volume is present,\n+          // null otherwise.\n+          OmVolumeArgs volumeArgs = getVolumeInfo(metadataManager, volumeName);\n+\n+          // If this volume still exists, decrement bytes used based on open\n+          // keys deleted.\n+          // The volume args object being updated is a reference from the\n+          // cache, so this serves as a cache update.\n+          if (volumeArgs != null) {\n+            // If we already encountered the volume, it was a reference to\n+            // the same object from the cache, so this will update it.\n+            modifiedVolumes.put(volumeName, volumeArgs);\n+            subtractUsedBytes(volumeArgs, deleted.values());\n+          }\n+        }\n+      }\n+\n+      omClientResponse = new OMOpenKeysDeleteResponse(omResponse.build(),\n+          deletedOpenKeys, ozoneManager.isRatisEnabled(),\n+          modifiedVolumes.values());\n+\n+      result = Result.SUCCESS;\n+    } catch (IOException ex) {\n+      result = Result.FAILURE;\n+      exception = ex;\n+      omClientResponse =\n+          new OMKeyDeleteResponse(createErrorOMResponse(omResponse, exception));", "originalCommit": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\nindex c280c298a8..9f9190bcb0 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMOpenKeysDeleteRequest.java\n\n@@ -68,11 +68,13 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n     OzoneManagerProtocolProtos.DeleteOpenKeysRequest deleteOpenKeysRequest =\n             getOmRequest().getDeleteOpenKeysRequest();\n \n-    List<OpenKeyBucket> submittedOpenKeyBucket =\n+    List<OpenKeyBucket> submittedOpenKeyBuckets =\n             deleteOpenKeysRequest.getOpenKeysPerBucketList();\n \n-    long numSubmittedOpenKeys = submittedOpenKeyBucket.stream()\n-        .mapToLong(OpenKeyBucket::getKeysCount).sum();\n+    long numSubmittedOpenKeys = 0;\n+    for (OpenKeyBucket keyBucket: submittedOpenKeyBuckets) {\n+      numSubmittedOpenKeys += keyBucket.getKeysCount();\n+    }\n \n     LOG.debug(\"{} open keys submitted for deletion.\", numSubmittedOpenKeys);\n     omMetrics.incNumOpenKeysSubmittedForDeletion(numSubmittedOpenKeys);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTU2MA==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r499005560", "bodyText": "Looks some of the logic is common for OMKeyDeleteResponse and OMOpenKeysDeleteResponse like isKeyEmpty and deleteFromTable can be used from OMKeyDeleteResponse.\nCan we consolidate them and use this AbstractOMKeyDeleteResponse as base class for both of them", "author": "bharatviswa504", "createdAt": "2020-10-02T19:15:43Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfoGroup;\n+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.helpers.RepeatedOmKeyInfo;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n+        .OMResponse;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+\n+import java.io.IOException;\n+import javax.annotation.Nullable;\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.DELETED_TABLE;\n+\n+/**\n+ * Response for DeleteKey request.\n+ */\n+@CleanupTableInfo(cleanupTables = {DELETED_TABLE})\n+public abstract class AbstractOMKeyDeleteResponse extends OMClientResponse {\n+\n+  private boolean isRatisEnabled;\n+\n+  public AbstractOMKeyDeleteResponse(\n+      @Nonnull OMResponse omResponse, boolean isRatisEnabled) {\n+\n+    super(omResponse);\n+    this.isRatisEnabled = isRatisEnabled;\n+  }\n+\n+  /**\n+   * For when the request is not successful.\n+   * For a successful request, the other constructor should be used.\n+   */\n+  public AbstractOMKeyDeleteResponse(@Nonnull OMResponse omResponse) {\n+    super(omResponse);\n+    checkStatusNotOK();\n+  }\n+\n+  /**\n+   * Adds the operation of deleting the {@code keyName omKeyInfo} pair from\n+   * {@code fromTable} to the batch operation {@code batchOperation}. The\n+   * batch operation is not committed, so no changes are persisted to disk.\n+   * The log transaction index used will be retrieved by calling\n+   * {@link OmKeyInfo#getUpdateID} on {@code omKeyInfo}.\n+   */\n+  protected void deleteFromTable(\n+      OMMetadataManager omMetadataManager,\n+      BatchOperation batchOperation,\n+      Table<String, ?> fromTable,\n+      String keyName,\n+      OmKeyInfo omKeyInfo) throws IOException {\n+\n+    deleteFromTable(omMetadataManager, batchOperation, fromTable, keyName,\n+        omKeyInfo, omKeyInfo.getUpdateID());\n+  }\n+\n+  /**\n+   * Adds the operation of deleting the {@code keyName omKeyInfo} pair from\n+   * {@code fromTable} to the batch operation {@code batchOperation}. The\n+   * batch operation is not committed, so no changes are persisted to disk.\n+   */\n+  protected void deleteFromTable(\n+      OMMetadataManager omMetadataManager,\n+      BatchOperation batchOperation,\n+      Table<String, ?> fromTable,\n+      String keyName,\n+      OmKeyInfo omKeyInfo, long trxnLogIndex) throws IOException {\n+\n+    // For OmResponse with failure, this should do nothing. This method is\n+    // not called in failure scenario in OM code.\n+    fromTable.deleteWithBatch(batchOperation, keyName);\n+\n+    // If Key is not empty add this to delete table.\n+    if (!isKeyEmpty(omKeyInfo)) {\n+      // If a deleted key is put in the table where a key with the same\n+      // name already exists, then the old deleted key information would be\n+      // lost. To avoid this, first check if a key with same name exists.\n+      // deletedTable in OM Metadata stores <KeyName, RepeatedOMKeyInfo>.\n+      // The RepeatedOmKeyInfo is the structure that allows us to store a\n+      // list of OmKeyInfo that can be tied to same key name. For a keyName\n+      // if RepeatedOMKeyInfo structure is null, we create a new instance,\n+      // if it is not null, then we simply add to the list and store this\n+      // instance in deletedTable.\n+      RepeatedOmKeyInfo repeatedOmKeyInfo =\n+          omMetadataManager.getDeletedTable().get(keyName);\n+      repeatedOmKeyInfo = OmUtils.prepareKeyForDelete(\n+          omKeyInfo, repeatedOmKeyInfo, trxnLogIndex,\n+          isRatisEnabled);\n+      omMetadataManager.getDeletedTable().putWithBatch(\n+          batchOperation, keyName, repeatedOmKeyInfo);\n+    }\n+  }\n+\n+  protected void addVolumeArgsToBatch(OMMetadataManager metadataManager,\n+      BatchOperation batch, OmVolumeArgs volumeArgs) throws IOException {\n+\n+    Table<String, OmVolumeArgs> volumeTable = metadataManager.getVolumeTable();\n+    String volumeKey = metadataManager.getVolumeKey(volumeArgs.getVolume());\n+    volumeTable.putWithBatch(batch, volumeKey, volumeArgs);\n+  }\n+\n+  @Override\n+  public abstract void addToDBBatch(OMMetadataManager omMetadataManager,\n+        BatchOperation batchOperation) throws IOException;\n+\n+  /**\n+   * Check if the key is empty or not. Key will be empty if it does not have\n+   * blocks.\n+   *\n+   * @param keyInfo\n+   * @return if empty true, else false.\n+   */\n+  private boolean isKeyEmpty(@Nullable OmKeyInfo keyInfo) {", "originalCommit": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3ODU0Mw==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r499578543", "bodyText": "Yes, the idea of creating this abstract class was to eventually consolidate the duplicate code between OMOpenKeysDeleteResponse, OMKeyDeleteResponse, and OMKeysDeleteResponse. I had originally refactored the other classes as well to use this code, but since HDDS-451 (quota support) is moving along at a brisk pace, I could not keep up with the merge conflicts as the other response classes kept changing, and decided it was better to do this in a later PR.", "author": "errose28", "createdAt": "2020-10-05T12:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MzU0MQ==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r500393541", "bodyText": "Looks like development on the key(s) delete request and response classes has taken a break. I have refactored them to use these shared methods now.", "author": "errose28", "createdAt": "2020-10-06T15:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java\ndeleted file mode 100644\nindex 80ef2b7e97..0000000000\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java\n+++ /dev/null\n\n@@ -1,150 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hadoop.ozone.om.response.key;\n-\n-import org.apache.hadoop.hdds.utils.db.Table;\n-import org.apache.hadoop.ozone.OmUtils;\n-import org.apache.hadoop.ozone.om.OMMetadataManager;\n-import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n-import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfoGroup;\n-import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n-import org.apache.hadoop.ozone.om.helpers.RepeatedOmKeyInfo;\n-import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n-import org.apache.hadoop.ozone.om.response.OMClientResponse;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n-        .OMResponse;\n-import org.apache.hadoop.hdds.utils.db.BatchOperation;\n-\n-import java.io.IOException;\n-import javax.annotation.Nullable;\n-import javax.annotation.Nonnull;\n-\n-import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.DELETED_TABLE;\n-\n-/**\n- * Response for DeleteKey request.\n- */\n-@CleanupTableInfo(cleanupTables = {DELETED_TABLE})\n-public abstract class AbstractOMKeyDeleteResponse extends OMClientResponse {\n-\n-  private boolean isRatisEnabled;\n-\n-  public AbstractOMKeyDeleteResponse(\n-      @Nonnull OMResponse omResponse, boolean isRatisEnabled) {\n-\n-    super(omResponse);\n-    this.isRatisEnabled = isRatisEnabled;\n-  }\n-\n-  /**\n-   * For when the request is not successful.\n-   * For a successful request, the other constructor should be used.\n-   */\n-  public AbstractOMKeyDeleteResponse(@Nonnull OMResponse omResponse) {\n-    super(omResponse);\n-    checkStatusNotOK();\n-  }\n-\n-  /**\n-   * Adds the operation of deleting the {@code keyName omKeyInfo} pair from\n-   * {@code fromTable} to the batch operation {@code batchOperation}. The\n-   * batch operation is not committed, so no changes are persisted to disk.\n-   * The log transaction index used will be retrieved by calling\n-   * {@link OmKeyInfo#getUpdateID} on {@code omKeyInfo}.\n-   */\n-  protected void deleteFromTable(\n-      OMMetadataManager omMetadataManager,\n-      BatchOperation batchOperation,\n-      Table<String, ?> fromTable,\n-      String keyName,\n-      OmKeyInfo omKeyInfo) throws IOException {\n-\n-    deleteFromTable(omMetadataManager, batchOperation, fromTable, keyName,\n-        omKeyInfo, omKeyInfo.getUpdateID());\n-  }\n-\n-  /**\n-   * Adds the operation of deleting the {@code keyName omKeyInfo} pair from\n-   * {@code fromTable} to the batch operation {@code batchOperation}. The\n-   * batch operation is not committed, so no changes are persisted to disk.\n-   */\n-  protected void deleteFromTable(\n-      OMMetadataManager omMetadataManager,\n-      BatchOperation batchOperation,\n-      Table<String, ?> fromTable,\n-      String keyName,\n-      OmKeyInfo omKeyInfo, long trxnLogIndex) throws IOException {\n-\n-    // For OmResponse with failure, this should do nothing. This method is\n-    // not called in failure scenario in OM code.\n-    fromTable.deleteWithBatch(batchOperation, keyName);\n-\n-    // If Key is not empty add this to delete table.\n-    if (!isKeyEmpty(omKeyInfo)) {\n-      // If a deleted key is put in the table where a key with the same\n-      // name already exists, then the old deleted key information would be\n-      // lost. To avoid this, first check if a key with same name exists.\n-      // deletedTable in OM Metadata stores <KeyName, RepeatedOMKeyInfo>.\n-      // The RepeatedOmKeyInfo is the structure that allows us to store a\n-      // list of OmKeyInfo that can be tied to same key name. For a keyName\n-      // if RepeatedOMKeyInfo structure is null, we create a new instance,\n-      // if it is not null, then we simply add to the list and store this\n-      // instance in deletedTable.\n-      RepeatedOmKeyInfo repeatedOmKeyInfo =\n-          omMetadataManager.getDeletedTable().get(keyName);\n-      repeatedOmKeyInfo = OmUtils.prepareKeyForDelete(\n-          omKeyInfo, repeatedOmKeyInfo, trxnLogIndex,\n-          isRatisEnabled);\n-      omMetadataManager.getDeletedTable().putWithBatch(\n-          batchOperation, keyName, repeatedOmKeyInfo);\n-    }\n-  }\n-\n-  protected void addVolumeArgsToBatch(OMMetadataManager metadataManager,\n-      BatchOperation batch, OmVolumeArgs volumeArgs) throws IOException {\n-\n-    Table<String, OmVolumeArgs> volumeTable = metadataManager.getVolumeTable();\n-    String volumeKey = metadataManager.getVolumeKey(volumeArgs.getVolume());\n-    volumeTable.putWithBatch(batch, volumeKey, volumeArgs);\n-  }\n-\n-  @Override\n-  public abstract void addToDBBatch(OMMetadataManager omMetadataManager,\n-        BatchOperation batchOperation) throws IOException;\n-\n-  /**\n-   * Check if the key is empty or not. Key will be empty if it does not have\n-   * blocks.\n-   *\n-   * @param keyInfo\n-   * @return if empty true, else false.\n-   */\n-  private boolean isKeyEmpty(@Nullable OmKeyInfo keyInfo) {\n-    if (keyInfo == null) {\n-      return true;\n-    }\n-    for (OmKeyLocationInfoGroup keyLocationList : keyInfo\n-            .getKeyLocationVersions()) {\n-      if (keyLocationList.getLocationListCount() != 0) {\n-        return false;\n-      }\n-    }\n-    return true;\n-  }\n-}\n"}}, {"oid": "14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "url": "https://github.com/apache/ozone/commit/14a2241c5a0f7bc4726a7e6a28f0577ce471d559", "message": "Rename method getBytesUsed -> sumBlockLengths", "committedDate": "2020-09-28T19:55:50Z", "type": "forcePushed"}, {"oid": "c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "url": "https://github.com/apache/ozone/commit/c6ede36af7ada2cb3b2532d7702aadbc924cf40a", "message": "Fix minor issues from PR", "committedDate": "2020-10-06T16:49:39Z", "type": "commit"}, {"oid": "ff039570ea7a173a4502e4ec6a1c698cf5e35176", "url": "https://github.com/apache/ozone/commit/ff039570ea7a173a4502e4ec6a1c698cf5e35176", "message": "Remove volume byte usage update code and test cases", "committedDate": "2020-10-06T16:50:38Z", "type": "commit"}, {"oid": "8d3ca6feebe1ab8a09c25c174dac97666beb0120", "url": "https://github.com/apache/ozone/commit/8d3ca6feebe1ab8a09c25c174dac97666beb0120", "message": "Move misplaced @Test annotation", "committedDate": "2020-10-06T16:50:48Z", "type": "commit"}, {"oid": "4619c2911509cdf97d6fec101f6fa1114a85d8c8", "url": "https://github.com/apache/ozone/commit/4619c2911509cdf97d6fec101f6fa1114a85d8c8", "message": "Consolidate duplicate code among key delete requests and responses", "committedDate": "2020-10-06T16:50:48Z", "type": "commit"}, {"oid": "b1c200db005c72901c492a4092158c7b9f2c4a7c", "url": "https://github.com/apache/ozone/commit/b1c200db005c72901c492a4092158c7b9f2c4a7c", "message": "Fix checkstyle violations and accidental code deletion\n\nAccdientally deleted the volume and bucket info update code from\nOMKeysDeleteResponse when refactoring earlier.", "committedDate": "2020-10-06T16:50:48Z", "type": "commit"}, {"oid": "089605d7b85bcd72b59ff79c614be7495f83b52d", "url": "https://github.com/apache/ozone/commit/089605d7b85bcd72b59ff79c614be7495f83b52d", "message": "Merge remote-tracking branch 'origin/HDDS-4122' into HDDS-4122\n\n* origin/HDDS-4122: (51 commits)\n  Rename method getBytesUsed -> sumBlockLengths\n  Restore files that had deduplicated code from master\n  Revert other delete request/response files back to their original states on master\n  Make plural of keys consistent in file and class names\n  Fix checkstyle errors\n  Update docs and method names in unit tests\n  Update documentation and method names in TestOMOpenKeyDeleteRequest\n  Add passing test for volume byte usage update\n  Move creation of blocks for keyinfo to TestOMRequestUtils\n  Remove uneeded exception in method signature\n  Add volume update test to unit tests for OMOpenKeyDeleteResponse\n  Rename method for updating volume args, and remove check in response for volume existing\n  Fix cache update for volume info in OMOpenKeyDeleteRequest\n  Remove unused imports\n  Add check for volume existance before updating volume byte usage\n  Fix unit test for OMKeysDeleteResponse that expected empty keys to be in the delete table\n  Add table cleanup annotation to AbstractOMKeyDeleteResponse\n  Add DeleteOpenKeys as a non-readonly operation\n  Add todo comments with testing plans\n  Only update volume quota if volume still exists.\n  ...", "committedDate": "2020-10-06T17:05:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODcyMA==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r501938720", "bodyText": "Minor: Can we merge these two functions.", "author": "bharatviswa504", "createdAt": "2020-10-08T18:46:35Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.key;\n+\n+import org.apache.hadoop.hdds.utils.db.Table;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n+import org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfoGroup;\n+import org.apache.hadoop.ozone.om.helpers.RepeatedOmKeyInfo;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n+        .OMResponse;\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+\n+import java.io.IOException;\n+import javax.annotation.Nullable;\n+import javax.annotation.Nonnull;\n+\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.DELETED_TABLE;\n+\n+/**\n+ * Base class for responses that need to move keys from an arbitrary table to\n+ * the deleted table.\n+ */\n+@CleanupTableInfo(cleanupTables = {DELETED_TABLE})\n+public abstract class AbstractOMKeyDeleteResponse extends OMClientResponse {\n+\n+  private boolean isRatisEnabled;\n+\n+  public AbstractOMKeyDeleteResponse(\n+      @Nonnull OMResponse omResponse, boolean isRatisEnabled) {\n+\n+    super(omResponse);\n+    this.isRatisEnabled = isRatisEnabled;\n+  }\n+\n+  /**\n+   * For when the request is not successful.\n+   * For a successful request, the other constructor should be used.\n+   */\n+  public AbstractOMKeyDeleteResponse(@Nonnull OMResponse omResponse) {\n+    super(omResponse);\n+    checkStatusNotOK();\n+  }\n+\n+  /**\n+   * Adds the operation of deleting the {@code keyName omKeyInfo} pair from\n+   * {@code fromTable} to the batch operation {@code batchOperation}. The\n+   * batch operation is not committed, so no changes are persisted to disk.\n+   * The log transaction index used will be retrieved by calling\n+   * {@link OmKeyInfo#getUpdateID} on {@code omKeyInfo}.\n+   */\n+  protected void addDeletionToBatch(\n+      OMMetadataManager omMetadataManager,\n+      BatchOperation batchOperation,\n+      Table<String, ?> fromTable,\n+      String keyName,\n+      OmKeyInfo omKeyInfo) throws IOException {\n+\n+    addDeletionToBatch(omMetadataManager, batchOperation, fromTable, keyName,\n+        omKeyInfo, omKeyInfo.getUpdateID());\n+  }\n+\n+  /**\n+   * Adds the operation of deleting the {@code keyName omKeyInfo} pair from\n+   * {@code fromTable} to the batch operation {@code batchOperation}. The\n+   * batch operation is not committed, so no changes are persisted to disk.\n+   */\n+  protected void addDeletionToBatch(", "originalCommit": "089605d7b85bcd72b59ff79c614be7495f83b52d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NjM0Mg==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r501976342", "bodyText": "This is actually related to a mistake I made in OMKeysDeleteResponse. The original implementation had one trxnLogIndex it used for all the keys. All other calls to this method are using the updateID of the keyInfo provided as the trxnLogIndex. If the way I am doing it currently (OMKeysDeleteResponse uses the updateID of each key as its trxnLogIndex instead of one value for all keys deleted), then I can remove the overload. If not, I can fix OMKeysDeleteResponse to call the overload, giving it identical behavior to its original implementation.", "author": "errose28", "createdAt": "2020-10-08T19:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2NTM0Mw==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r502165343", "bodyText": "Previously we used to use updateID for detecting replay of transaction. Now we are not using updateID any more.\nBut from my understanding updateID should be set with transactionIndex even before.", "author": "bharatviswa504", "createdAt": "2020-10-09T03:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MTcyMQ==", "url": "https://github.com/apache/ozone/pull/1435#discussion_r502441721", "bodyText": "Got it. A closer look at the OMKeysDeleteRequest looks like this was happening anyways. Instead of setting the update ID for the key info to be the trxnLogIndex and submitting the key info to the response, it was just passing the trxnLogIndex separately with the key info to the response. I will update OMKeysDeleteRequest/Response to be consistent with the other request/responses in how they do this, and remove the overload of this method.", "author": "errose28", "createdAt": "2020-10-09T13:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b292bc2220d6f8ee8c1008a7bdb03c70b22d36b4", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java\nindex 60dd6ba16c..9392f7e8f3 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/AbstractOMKeyDeleteResponse.java\n\n@@ -75,23 +75,6 @@ protected void addDeletionToBatch(\n       String keyName,\n       OmKeyInfo omKeyInfo) throws IOException {\n \n-    addDeletionToBatch(omMetadataManager, batchOperation, fromTable, keyName,\n-        omKeyInfo, omKeyInfo.getUpdateID());\n-  }\n-\n-  /**\n-   * Adds the operation of deleting the {@code keyName omKeyInfo} pair from\n-   * {@code fromTable} to the batch operation {@code batchOperation}. The\n-   * batch operation is not committed, so no changes are persisted to disk.\n-   */\n-  protected void addDeletionToBatch(\n-      OMMetadataManager omMetadataManager,\n-      BatchOperation batchOperation,\n-      Table<String, ?> fromTable,\n-      String keyName,\n-      OmKeyInfo omKeyInfo,\n-      long trxnLogIndex) throws IOException {\n-\n     // For OmResponse with failure, this should do nothing. This method is\n     // not called in failure scenario in OM code.\n     fromTable.deleteWithBatch(batchOperation, keyName);\n"}}, {"oid": "b292bc2220d6f8ee8c1008a7bdb03c70b22d36b4", "url": "https://github.com/apache/ozone/commit/b292bc2220d6f8ee8c1008a7bdb03c70b22d36b4", "message": "Make OMKeysDeleteRequest set the updateID of each OmKeyInfo to the logTrxnIndex", "committedDate": "2020-10-09T14:06:57Z", "type": "commit"}, {"oid": "2f84e953949aa451f793b8e9a2a32b2651605087", "url": "https://github.com/apache/ozone/commit/2f84e953949aa451f793b8e9a2a32b2651605087", "message": "Remove unused trxnLogIndex field from OMKeysDeleteResponse", "committedDate": "2020-10-09T15:17:22Z", "type": "commit"}]}