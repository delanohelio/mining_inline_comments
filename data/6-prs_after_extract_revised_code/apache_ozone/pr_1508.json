{"pr_number": 1508, "pr_title": "HDDS-4342. Add DataNode state and transitions for a node going through upgrade.", "pr_createdAt": "2020-10-20T17:47:49Z", "pr_url": "https://github.com/apache/ozone/pull/1508", "timeline": [{"oid": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45", "url": "https://github.com/apache/ozone/commit/bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45", "message": "HDDS-4342. Add DataNode state and transitions for a node going through upgrade.", "committedDate": "2020-10-22T04:01:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5MzAzMw==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r517393033", "bodyText": "Is that right we just log an error log here and doesn't take action for the read-only node?\nSuppose here we should let these pipelines only allowed to be used for read operations rather than write operations.", "author": "linyiqun", "createdAt": "2020-11-04T14:41:52Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Stale node event.\n+ */\n+public class NonHealthyToReadOnlyHealthyNodeHandler\n+    implements EventHandler<DatanodeDetails> {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(NonHealthyToReadOnlyHealthyNodeHandler.class);\n+  private final PipelineManager pipelineManager;\n+  private final NodeManager nodeManager;\n+  private final ConfigurationSource conf;\n+\n+  public NonHealthyToReadOnlyHealthyNodeHandler(\n+      NodeManager nodeManager, PipelineManager pipelineManager,\n+      OzoneConfiguration conf) {\n+    this.pipelineManager = pipelineManager;\n+    this.nodeManager = nodeManager;\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public void onMessage(DatanodeDetails datanodeDetails,\n+      EventPublisher publisher) {\n+    Set<PipelineID> pipelineIds =\n+        nodeManager.getPipelines(datanodeDetails);\n+    LOG.info(\"Datanode {} moved to HEALTH READ ONLY state.\",\n+        datanodeDetails);\n+    if (!pipelineIds.isEmpty()) {\n+      LOG.error(\"Datanode {} is part of pipelines {} in HEALTH READ ONLY \" +\n+              \"state.\",\n+          datanodeDetails, pipelineIds);\n+    }", "originalCommit": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNzIyMg==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r518537222", "bodyText": "Yes, because this condition should never happen. Nodes are moved to this state as part of finalizeUpgrade process on SCM. This will be another PR on of this one.", "author": "prashantpogde", "createdAt": "2020-11-06T05:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5MzAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "a5b00891eca44cc57dbde2d4b7a2798ad307d3c5", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java\nindex 7ef89f35c..7fd36c721 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java\n\n@@ -30,7 +30,7 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * Handles Stale node event.\n+ * Handles non healthy to healthy(ReadOnly) node event.\n  */\n public class NonHealthyToReadOnlyHealthyNodeHandler\n     implements EventHandler<DatanodeDetails> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNTk1Mg==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520125952", "bodyText": "Why cannot we pass the layout version from DN registration to this 'DatanodeInfo' constructor? Instead of initializing with layout version '0'.", "author": "avijayanhwx", "createdAt": "2020-11-09T21:18:03Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "diffHunk": "@@ -53,6 +56,11 @@ public DatanodeInfo(DatanodeDetails datanodeDetails) {\n     super(datanodeDetails);\n     this.lock = new ReentrantReadWriteLock();\n     this.lastHeartbeatTime = Time.monotonicNow();\n+    lastKnownLayoutVersion =\n+        LayoutVersionProto.newBuilder()\n+            .setMetadataLayoutVersion(0)", "originalCommit": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMjQyOA==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520812428", "bodyText": "because register may not even be called when the datanode comes up. The very first message from datanode could be directly a heartbeat message.", "author": "prashantpogde", "createdAt": "2020-11-10T19:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNTk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTczODAyNw==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r521738027", "bodyText": "The first request from a DN has to be a registration request. If SCM has lost the in memory state of a Datanode while it was down, then it has to re-register again. In any case, we should be able to use the layout version from the DN's heartbeat/registration payload right?", "author": "avijayanhwx", "createdAt": "2020-11-12T00:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNTk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MTI2NA==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r523151264", "bodyText": "yup. I will upload the changes.", "author": "prashantpogde", "createdAt": "2020-11-13T18:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNTk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bc8d7a88797f8a5f20ab01a3d60b22b9ee8ccb73", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java\nindex cb9c469de..9848cd282 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java\n\n@@ -51,15 +51,19 @@\n    * Constructs DatanodeInfo from DatanodeDetails.\n    *\n    * @param datanodeDetails Details about the datanode\n+   * @param layoutInfo Details about the LayoutVersionProto\n    */\n-  public DatanodeInfo(DatanodeDetails datanodeDetails) {\n+  public DatanodeInfo(DatanodeDetails datanodeDetails,\n+                      LayoutVersionProto layoutInfo) {\n     super(datanodeDetails);\n     this.lock = new ReentrantReadWriteLock();\n     this.lastHeartbeatTime = Time.monotonicNow();\n     lastKnownLayoutVersion =\n         LayoutVersionProto.newBuilder()\n-            .setMetadataLayoutVersion(0)\n-            .setSoftwareLayoutVersion(0)\n+            .setMetadataLayoutVersion(layoutInfo == null ?\n+                layoutInfo.getMetadataLayoutVersion() : 0)\n+            .setSoftwareLayoutVersion(layoutInfo == null ?\n+                layoutInfo.getSoftwareLayoutVersion() : 0)\n             .build();\n     this.storageReports = Collections.emptyList();\n     this.metadataStorageReports = Collections.emptyList();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNjY5OQ==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520126699", "bodyText": "Nit. Should we combine this with the operation in 'updateLastHeartbeatTime'? We are taking a write lock in both the cases and doing minimal work.", "author": "avijayanhwx", "createdAt": "2020-11-09T21:19:27Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/DatanodeInfo.java", "diffHunk": "@@ -69,6 +77,24 @@ public void updateLastHeartbeatTime() {\n     }\n   }\n \n+  /**\n+   * Updates the last LayoutVersion.\n+   */\n+  public void updateLastKnownLayoutVersion(LayoutVersionProto version) {", "originalCommit": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNDY0Mg==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520814642", "bodyText": "it is doable. The reason I kept layout version info and its handling separate from the rest of the heartbeat processing is because I wanted to play with the idea that later on, we do not need to send layout version to SCM all the time but only when needed.", "author": "prashantpogde", "createdAt": "2020-11-10T19:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNjY5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMDIzMA==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520130230", "bodyText": "Nit. Javadoc needs update.", "author": "avijayanhwx", "createdAt": "2020-11-09T21:26:09Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import java.util.Set;\n+\n+import org.apache.hadoop.hdds.conf.ConfigurationSource;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Stale node event.", "originalCommit": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNTAxOA==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520815018", "bodyText": "yup, will do.", "author": "prashantpogde", "createdAt": "2020-11-10T19:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMDIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "a5b00891eca44cc57dbde2d4b7a2798ad307d3c5", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java\nindex 7ef89f35c..7fd36c721 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/NonHealthyToReadOnlyHealthyNodeHandler.java\n\n@@ -30,7 +30,7 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * Handles Stale node event.\n+ * Handles non healthy to healthy(ReadOnly) node event.\n  */\n public class NonHealthyToReadOnlyHealthyNodeHandler\n     implements EventHandler<DatanodeDetails> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MzA2OA==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520183068", "bodyText": "Can we change the test so that it still verifies the presence of \"HealthyNodes\" in the SCM eventually?", "author": "avijayanhwx", "createdAt": "2020-11-09T23:19:10Z", "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/ozone/scm/node/TestSCMNodeMetrics.java", "diffHunk": "@@ -182,7 +196,7 @@ public void testNodeCountAndInfoMetricsReported() throws Exception {\n \n     MetricsRecordBuilder metricsSource = getMetrics(SCMNodeMetrics.SOURCE_NAME);\n \n-    assertGauge(\"HealthyNodes\", 1, metricsSource);", "originalCommit": "bbabe0ff063836ff596d71d9cce2f8cdc7a9ad45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNTYzMA==", "url": "https://github.com/apache/ozone/pull/1508#discussion_r520835630", "bodyText": "yup. done.", "author": "prashantpogde", "createdAt": "2020-11-10T19:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MzA2OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "687334d91a866e329a4052ec8ba046b2e72a185a", "url": "https://github.com/apache/ozone/commit/687334d91a866e329a4052ec8ba046b2e72a185a", "message": "HDDS-4342. Add DataNode state and transitions for a node going through upgrade.", "committedDate": "2020-11-10T19:34:52Z", "type": "commit"}, {"oid": "a5b00891eca44cc57dbde2d4b7a2798ad307d3c5", "url": "https://github.com/apache/ozone/commit/a5b00891eca44cc57dbde2d4b7a2798ad307d3c5", "message": "HDDS-4342. Addressing review comments. part 1.", "committedDate": "2020-11-10T19:53:46Z", "type": "commit"}, {"oid": "a5b00891eca44cc57dbde2d4b7a2798ad307d3c5", "url": "https://github.com/apache/ozone/commit/a5b00891eca44cc57dbde2d4b7a2798ad307d3c5", "message": "HDDS-4342. Addressing review comments. part 1.", "committedDate": "2020-11-10T19:53:46Z", "type": "forcePushed"}, {"oid": "bc8d7a88797f8a5f20ab01a3d60b22b9ee8ccb73", "url": "https://github.com/apache/ozone/commit/bc8d7a88797f8a5f20ab01a3d60b22b9ee8ccb73", "message": "HDDS-4342. Addressing review comments: part 2.", "committedDate": "2020-11-13T19:49:41Z", "type": "commit"}, {"oid": "3a7734aecc48adc6b09d4d4fa23aba164a477acc", "url": "https://github.com/apache/ozone/commit/3a7734aecc48adc6b09d4d4fa23aba164a477acc", "message": "HDDS-4342. Addressing CI failure.", "committedDate": "2020-11-14T03:30:18Z", "type": "commit"}]}