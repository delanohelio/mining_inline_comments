{"pr_number": 1598, "pr_title": "HDDS-4478. Large deletedKeyset slows down OM via listStatus.", "pr_createdAt": "2020-11-17T16:40:16Z", "pr_url": "https://github.com/apache/ozone/pull/1598", "timeline": [{"oid": "11a011753fdea18d5f93f2abcf3f32ced1fd8a3a", "url": "https://github.com/apache/ozone/commit/11a011753fdea18d5f93f2abcf3f32ced1fd8a3a", "message": "HDDS-4478. Large deletedKeyset slows down OM via listStatus.", "committedDate": "2020-11-17T16:48:54Z", "type": "commit"}, {"oid": "11a011753fdea18d5f93f2abcf3f32ced1fd8a3a", "url": "https://github.com/apache/ozone/commit/11a011753fdea18d5f93f2abcf3f32ced1fd8a3a", "message": "HDDS-4478. Large deletedKeyset slows down OM via listStatus.", "committedDate": "2020-11-17T16:48:54Z", "type": "forcePushed"}, {"oid": "e1b8ab8c70a97ef08b817e01365bcc373b88b01f", "url": "https://github.com/apache/ozone/commit/e1b8ab8c70a97ef08b817e01365bcc373b88b01f", "message": "Address checkstyle issues.", "committedDate": "2020-11-17T17:01:42Z", "type": "commit"}, {"oid": "017180b96cdee7f6261246802817ce07d0394046", "url": "https://github.com/apache/ozone/commit/017180b96cdee7f6261246802817ce07d0394046", "message": "Fix overdone mindless refactoring. :)", "committedDate": "2020-11-17T18:17:50Z", "type": "commit"}, {"oid": "f87586ba60aaea42a06fdbea13c26706afce3ea6", "url": "https://github.com/apache/ozone/commit/f87586ba60aaea42a06fdbea13c26706afce3ea6", "message": "Trigger re-check.", "committedDate": "2020-11-17T19:31:55Z", "type": "commit"}, {"oid": "c37e863cb207232de159ead29e7546702471da8c", "url": "https://github.com/apache/ozone/commit/c37e863cb207232de159ead29e7546702471da8c", "message": "Trigger re-check.", "committedDate": "2020-11-17T20:55:16Z", "type": "commit"}, {"oid": "763b1620dca909d297c2566ce55b70ae2971dddc", "url": "https://github.com/apache/ozone/commit/763b1620dca909d297c2566ce55b70ae2971dddc", "message": "Trigger re-check.", "committedDate": "2020-11-17T22:42:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTA0Mw==", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525595043", "bodyText": "KEY_TABLE is needed for KeyCreate also, as when ozone.om.enable.filesystem.paths is true, directories are created for KeyCreate also.", "author": "bharatviswa504", "createdAt": "2020-11-17T23:31:56Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/file/OMFileCreateResponse.java", "diffHunk": "@@ -23,15 +23,20 @@\n import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n import org.apache.hadoop.ozone.om.helpers.OmKeyInfo;\n import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n import org.apache.hadoop.ozone.om.response.key.OMKeyCreateResponse;\n import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n     .OMResponse;\n \n import java.util.List;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.KEY_TABLE;\n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.OPEN_KEY_TABLE;\n+\n /**\n  * Response for crate file request.\n  */\n+@CleanupTableInfo(cleanupTables = {KEY_TABLE, OPEN_KEY_TABLE})", "originalCommit": "763b1620dca909d297c2566ce55b70ae2971dddc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxMjg3Nw==", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525612877", "bodyText": "Hmm... yes, you are right, key create I have missed for this one...\nLet me add that along with a test tomorrow.", "author": "fapifta", "createdAt": "2020-11-18T00:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTA0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMTAzOA==", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525601038", "bodyText": "Here we have checked only tables which are not part of FileCreateResponse cleanupTable annotation.\nDo we want to check tables which are affected also.\nJust a question, not got what these lines are testing? (Is it just to see any tables which are not affected have same size in Cache) But how this is verifying fix, not sure if i am missing something basic here.", "author": "bharatviswa504", "createdAt": "2020-11-17T23:48:49Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java", "diffHunk": "@@ -66,4 +105,188 @@ public void checkAnnotationAndTableName() throws Exception {\n       }\n     });\n   }\n+\n+  @Test\n+  public void testHDDS4478() throws Exception {\n+    HddsProtos.BlockID blockID = new BlockID(1, 1).getProtobuf();\n+    String volume = \"testVol\";\n+    String bucket = \"testBuck\";\n+    String key = \"/foo/bar/baz/key\";\n+\n+\n+    OMFileCreateRequest request =\n+        anOmFileCreateRequest(blockID, volume, bucket, key);\n+\n+    OMMetadataManager omMetaMgr = createOMMetadataManagerSpy();\n+    OMMetrics omMetrics = mock(OMMetrics.class);\n+    OzoneManager om =\n+        createOzoneManagerMock(volume, bucket, request, omMetaMgr, omMetrics);\n+\n+    OmVolumeArgs volumeArgs = aVolumeArgs(volume);\n+    OmBucketInfo bucketInfo = aBucketInfo(volume, bucket);\n+    addVolumeToMetaTable(volume, volumeArgs, omMetaMgr);\n+    addBucketToMetaTable(volume, bucket, bucketInfo, omMetaMgr);\n+\n+    OzoneManagerDoubleBufferHelper dbh =\n+        mock(OzoneManagerDoubleBufferHelper.class);\n+\n+    Map<String, Integer> cacheItemCount = new HashMap<>();\n+    for (String tableName : omMetaMgr.listTableNames()){\n+      cacheItemCount.put(tableName,\n+          Iterators.size(omMetaMgr.getTable(tableName).cacheIterator()));\n+    }\n+\n+\n+    request.validateAndUpdateCache(om, 1, dbh);\n+\n+\n+    CleanupTableInfo ann =\n+        OMFileCreateResponse.class.getAnnotation(CleanupTableInfo.class);\n+    List<String> cleanup = Arrays.asList(ann.cleanupTables());\n+    for (String tableName : omMetaMgr.listTableNames()) {\n+      if (!cleanup.contains(tableName)) {", "originalCommit": "763b1620dca909d297c2566ce55b70ae2971dddc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxNDcyMA==", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525614720", "bodyText": "Yes, the test does what you have summarized.\nThe basic idea is the following:\nThe issue is that we have certain epochs that are pushing entries to unexpected table caches. Unexpected in a way that eviction for those epochs on particular tables is not called when the DoubleBuffer flushes, because of the missing table name in the annotation.\nI think it is sufficient to check whether we have added any unexpected cache entries to any other table's cache during applyTransaction. I might be wrong on this one, or there might be an easier way though.", "author": "fapifta", "createdAt": "2020-11-18T00:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMTAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2MzMxOQ==", "url": "https://github.com/apache/ozone/pull/1598#discussion_r525763319", "bodyText": "Ya, it makes sense to me. It is basically checking all other table cache entries should be what it has an initial value, which should not be changed.", "author": "bharatviswa504", "createdAt": "2020-11-18T04:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMTAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "d3f2f3e78b5c6387309a35d36dbf5175c192772d", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java b/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java\nindex 0a7cc3b60e..980501e87f 100644\n--- a/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java\n+++ b/hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/response/TestCleanupTableInfo.java\n\n@@ -106,93 +154,112 @@ public void checkAnnotationAndTableName() throws Exception {\n     });\n   }\n \n+  private Set<Class<? extends OMClientResponse>> responseClasses() {\n+    Reflections reflections = new Reflections(OM_RESPONSE_PACKAGE);\n+    return reflections.getSubTypesOf(OMClientResponse.class);\n+  }\n+\n   @Test\n-  public void testHDDS4478() throws Exception {\n-    HddsProtos.BlockID blockID = new BlockID(1, 1).getProtobuf();\n-    String volume = \"testVol\";\n-    String bucket = \"testBuck\";\n-    String key = \"/foo/bar/baz/key\";\n+  public void testFileCreateRequestSetsAllTouchedTableCachesForEviction() {\n+    OMFileCreateRequest request = anOMFileCreateRequest();\n+    Map<String, Integer> cacheItemCount = recordCacheItemCounts();\n \n+    request.validateAndUpdateCache(om, 1, dbh);\n \n-    OMFileCreateRequest request =\n-        anOmFileCreateRequest(blockID, volume, bucket, key);\n+    assertCacheItemCounts(cacheItemCount, OMFileCreateResponse.class);\n+    verify(omMetrics, times(1)).incNumCreateFile();\n+  }\n \n-    OMMetadataManager omMetaMgr = createOMMetadataManagerSpy();\n-    OMMetrics omMetrics = mock(OMMetrics.class);\n-    OzoneManager om =\n-        createOzoneManagerMock(volume, bucket, request, omMetaMgr, omMetrics);\n+  @Test\n+  public void testKeyCreateRequestSetsAllTouchedTableCachesForEviction() {\n+    OMKeyCreateRequest request = anOMKeyCreateRequest();\n+    when(om.getEnableFileSystemPaths()).thenReturn(true);\n \n-    OmVolumeArgs volumeArgs = aVolumeArgs(volume);\n-    OmBucketInfo bucketInfo = aBucketInfo(volume, bucket);\n-    addVolumeToMetaTable(volume, volumeArgs, omMetaMgr);\n-    addBucketToMetaTable(volume, bucket, bucketInfo, omMetaMgr);\n+    Map<String, Integer> cacheItemCount = recordCacheItemCounts();\n \n-    OzoneManagerDoubleBufferHelper dbh =\n-        mock(OzoneManagerDoubleBufferHelper.class);\n+    request.validateAndUpdateCache(om, 1, dbh);\n \n-    Map<String, Integer> cacheItemCount = new HashMap<>();\n-    for (String tableName : omMetaMgr.listTableNames()){\n-      cacheItemCount.put(tableName,\n-          Iterators.size(omMetaMgr.getTable(tableName).cacheIterator()));\n-    }\n+    assertCacheItemCounts(cacheItemCount, OMKeyCreateResponse.class);\n+    verify(omMetrics, times(1)).incNumKeyAllocates();\n+  }\n \n \n-    request.validateAndUpdateCache(om, 1, dbh);\n \n+  private Map<String, Integer> recordCacheItemCounts() {\n+    Map<String, Integer> cacheItemCount = new HashMap<>();\n+    for (String tableName : om.getMetadataManager().listTableNames()) {\n+      cacheItemCount.put(\n+          tableName,\n+          Iterators.size(\n+              om.getMetadataManager().getTable(tableName).cacheIterator()\n+          )\n+      );\n+    }\n+    return cacheItemCount;\n+  }\n \n-    CleanupTableInfo ann =\n-        OMFileCreateResponse.class.getAnnotation(CleanupTableInfo.class);\n+  private void assertCacheItemCounts(Map<String, Integer> cacheItemCount,\n+      Class<? extends OMClientResponse> responseClass)\n+  {\n+    CleanupTableInfo ann = responseClass.getAnnotation(CleanupTableInfo.class);\n     List<String> cleanup = Arrays.asList(ann.cleanupTables());\n-    for (String tableName : omMetaMgr.listTableNames()) {\n+    for (String tableName : om.getMetadataManager().listTableNames()) {\n       if (!cleanup.contains(tableName)) {\n-        assertEquals(\"Cache item count of table \" +tableName,\n+        assertEquals(\n+            \"Cache item count of table \" +tableName,\n             cacheItemCount.get(tableName).intValue(),\n-            Iterators.size(omMetaMgr.getTable(tableName).cacheIterator())\n+            Iterators.size(\n+                om.getMetadataManager().getTable(tableName).cacheIterator()\n+            )\n         );\n       }\n     }\n-\n-    verify(omMetrics, times(1)).incNumCreateFile();\n   }\n \n-  private void addBucketToMetaTable(String volume, String bucket,\n-      OmBucketInfo bucketInfo, OMMetadataManager omMetaMgr) throws IOException {\n-    CacheValue<OmBucketInfo> cachedBucket = mock(CacheValue.class);\n-    when(cachedBucket.getCacheValue()).thenReturn(bucketInfo);\n-    String bucketKey = omMetaMgr.getBucketKey(volume, bucket);\n-    omMetaMgr.getBucketTable().put(bucketKey, bucketInfo);\n-    omMetaMgr.getBucketTable()\n-        .addCacheEntry(new CacheKey<>(bucketKey), cachedBucket);\n-  }\n-\n-  private void addVolumeToMetaTable(String volume, OmVolumeArgs volumeArgs,\n-      OMMetadataManager omMetaMgr) throws IOException {\n-    CacheValue<OmVolumeArgs> cachedVol = mock(CacheValue.class);\n-    when(cachedVol.getCacheValue()).thenReturn(volumeArgs);\n-    String volumeKey = omMetaMgr.getVolumeKey(volume);\n-    omMetaMgr.getVolumeTable().put(volumeKey, volumeArgs);\n-    omMetaMgr.getVolumeTable()\n-        .addCacheEntry(new CacheKey<>(volumeKey), cachedVol);\n+  /**\n+   * Adds the volume info to the volumeTable in the MetadataManager, and also\n+   * add the value to the table's cache.\n+   *\n+   * @param volumeArgs the OMVolumeArgs object specifying the volume propertes\n+   * @throws IOException if an IO issue occurs while wrtiing to RocksDB\n+   */\n+  private void addVolumeToMetaTable(OmVolumeArgs volumeArgs)\n+      throws IOException {\n+    String volumeKey = om.getMetadataManager().getVolumeKey(TEST_VOLUME_NAME);\n+    om.getMetadataManager().getVolumeTable().put(volumeKey, volumeArgs);\n+    om.getMetadataManager().getVolumeTable().addCacheEntry(\n+        new CacheKey<>(volumeKey),\n+        new CacheValue<>(Optional.of(volumeArgs), 2)\n+    );\n   }\n \n-  private OzoneManager createOzoneManagerMock(String volume, String bucket,\n-      OMFileCreateRequest request, OMMetadataManager omMetaMgr,\n-      OMMetrics metrics\n-  ) throws IOException {\n-    OzoneManager om = mock(OzoneManager.class);\n-    when(om.getMetrics()).thenReturn(metrics);\n-    when(om.getMetadataManager()).thenReturn(omMetaMgr);\n-    when(om.resolveBucketLink(any(KeyArgs.class), refEq(request))).thenAnswer(\n-        invocationOnMock -> {\n-          Pair<String, String> pair = Pair.of(volume, bucket);\n-          return new ResolvedBucket(pair, pair);\n-        }\n+  /**\n+   * Adds the bucket info to the bucketTable in the MetadataManager, and also\n+   * adds the value to the table's cache.\n+   *\n+   * @param bucketInfo the OMBucketInfo object specifying the bucket properties\n+   * @throws IOException if an IO issue occurs while writing to RocksDB\n+   */\n+  private void addBucketToMetaTable(OmBucketInfo bucketInfo)\n+      throws IOException {\n+    String bucketKey = om.getMetadataManager()\n+        .getBucketKey(bucketInfo.getVolumeName(), bucketInfo.getBucketName());\n+    om.getMetadataManager().getBucketTable().put(bucketKey, bucketInfo);\n+    om.getMetadataManager().getBucketTable().addCacheEntry(\n+        new CacheKey<>(bucketKey),\n+        new CacheValue<>(Optional.of(bucketInfo), 1)\n     );\n-    when(om.getAclsEnabled()).thenReturn(false);\n-    when(om.getAuditLogger()).thenReturn(mock(AuditLogger.class));\n-    return om;\n   }\n \n+  /**\n+   * Creates a spy object over an instantiated OMMetadataManager, giving the\n+   * possibility to redefine behaviour. In the current implementation\n+   * there isn't any behaviour which is redefined.\n+   *\n+   * @return the OMMetadataManager spy instance created.\n+   * @throws IOException if I/O error occurs in setting up data store for the\n+   *                     metadata manager.\n+   */\n   private OMMetadataManager createOMMetadataManagerSpy() throws IOException {\n     OzoneConfiguration conf = new OzoneConfiguration();\n     File newFolder = folder.newFolder();\n"}}, {"oid": "d3f2f3e78b5c6387309a35d36dbf5175c192772d", "url": "https://github.com/apache/ozone/commit/d3f2f3e78b5c6387309a35d36dbf5175c192772d", "message": "Added Junit test for KeyCreateResponse case came from the review.\n\nRefactored the test to make the real test methods easy to understand and free\nfrom setup clutter as much as possible.", "committedDate": "2020-11-19T02:38:45Z", "type": "commit"}, {"oid": "e403887f4db52ab65a77c0dbdb8125da035be468", "url": "https://github.com/apache/ozone/commit/e403887f4db52ab65a77c0dbdb8125da035be468", "message": "Fix checkstyle warnings.", "committedDate": "2020-11-19T02:45:32Z", "type": "commit"}, {"oid": "e2455eb167f455cc7bd35ea2a1500851c4d6002f", "url": "https://github.com/apache/ozone/commit/e2455eb167f455cc7bd35ea2a1500851c4d6002f", "message": "Trigger re-check.", "committedDate": "2020-11-19T10:40:26Z", "type": "commit"}, {"oid": "ae46f08910cc5c9966f69e20a37e1ee35aad7e05", "url": "https://github.com/apache/ozone/commit/ae46f08910cc5c9966f69e20a37e1ee35aad7e05", "message": "Trigger re-check.", "committedDate": "2020-11-19T11:48:21Z", "type": "commit"}]}