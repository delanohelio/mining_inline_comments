{"pr_number": 842, "pr_title": "HDDS-3455. Change MiniLoadGenerator to a pluggable model.", "pr_createdAt": "2020-04-19T14:54:49Z", "pr_url": "https://github.com/apache/ozone/pull/842", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NDUzMA==", "url": "https://github.com/apache/ozone/pull/842#discussion_r413094530", "bodyText": "If some generator fails to initialize(), should we still consider it in load(long)?  I think it would be more safe to add each generator to a separate list, from which load(long) should choose, only after successful initialization.", "author": "adoroszlai", "createdAt": "2020-04-22T15:41:43Z", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java", "diffHunk": "@@ -70,15 +73,19 @@ private void load(long runTimeMillis) {\n \n \n   public void startLoad(long time) {\n-    LOG.info(\"Starting {} threads for {}\", numThreads, generator);\n-    try {\n-      generator.initialize();\n-      for (int i = 0; i < numThreads; i++) {\n-        futures.add(CompletableFuture.runAsync(\n-            () -> load(time), executor));\n+    LOG.info(\"Starting {} threads for {} genrators\", numThreads,\n+        generators.size());\n+    for (LoadGenerator gen : generators) {\n+      try {\n+        LOG.info(\"Initializing {} generator\", gen);\n+        gen.initialize();\n+      } catch (Throwable t) {\n+        LOG.error(\"Failed to initialize loadgen:{}\", gen, t);\n       }\n-    } catch (Throwable t) {\n-      LOG.error(\"Failed to initialize loadgen:{}\", generator, t);\n+    }\n+\n+    for (int i = 0; i < numThreads; i++) {\n+      futures.add(CompletableFuture.runAsync(() -> load(time), executor));", "originalCommit": "976f181d10c0bf9723909b67a4e635896e2ccdb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2NDQ3NQ==", "url": "https://github.com/apache/ozone/pull/842#discussion_r415264475", "bodyText": "done, if the initialization fails. ane exception is thrown to stop the chaos cluster.", "author": "mukul1987", "createdAt": "2020-04-26T09:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NDUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "40262d343758ef970a974b1f7cdd8730c6384415", "chunk": "diff --git a/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java b/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java\nindex 872c471eb1..be9507b9c9 100644\n--- a/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java\n+++ b/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadExecutors.java\n\n@@ -72,7 +72,7 @@ private void load(long runTimeMillis) {\n   }\n \n \n-  public void startLoad(long time) {\n+  public void startLoad(long time) throws Exception {\n     LOG.info(\"Starting {} threads for {} genrators\", numThreads,\n         generators.size());\n     for (LoadGenerator gen : generators) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NjM1Mg==", "url": "https://github.com/apache/ozone/pull/842#discussion_r413096352", "bodyText": "Can you please document the required signature for the constructors of LoadGenerator implementations in the interface?", "author": "adoroszlai", "createdAt": "2020-04-22T15:43:58Z", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java", "diffHunk": "@@ -44,66 +39,99 @@\n   private static final Logger LOG =\n       LoggerFactory.getLogger(MiniOzoneLoadGenerator.class);\n \n-  private final List<LoadExecutors> loadExecutors;\n+  private final List<LoadGenerator> loadGenerators;\n+  private final LoadExecutors loadExecutor;\n \n   private final OzoneVolume volume;\n   private final OzoneConfiguration conf;\n   private final String omServiceID;\n \n-  MiniOzoneLoadGenerator(OzoneVolume volume, int numClients, int numThreads,\n-      int numBuffers, OzoneConfiguration conf, String omServiceId)\n+  MiniOzoneLoadGenerator(OzoneVolume volume, int numThreads,\n+      int numBuffers, OzoneConfiguration conf, String omServiceId,\n+      List<Class<? extends LoadGenerator>> loadGenratorClazzes)\n       throws Exception {\n     DataBuffer buffer = new DataBuffer(numBuffers);\n-    loadExecutors = new ArrayList<>();\n+    loadGenerators = new ArrayList<>();\n     this.volume = volume;\n     this.conf = conf;\n     this.omServiceID = omServiceId;\n \n-    // Random Load\n-    String mixBucketName = RandomStringUtils.randomAlphabetic(10).toLowerCase();\n-    volume.createBucket(mixBucketName);\n-    List<LoadBucket> ozoneBuckets = new ArrayList<>(numClients);\n-    for (int i = 0; i < numClients; i++) {\n-      ozoneBuckets.add(new LoadBucket(volume.getBucket(mixBucketName),\n-          conf, omServiceId));\n+    for(Class<? extends LoadGenerator> clazz : loadGenratorClazzes) {\n+      addLoads(clazz, buffer);\n     }\n-    RandomLoadGenerator loadGenerator =\n-        new RandomLoadGenerator(buffer, ozoneBuckets);\n-    loadExecutors.add(new LoadExecutors(numThreads, loadGenerator));\n \n-    // Aged Load\n-    addLoads(numThreads,\n-        bucket -> new AgedLoadGenerator(buffer, bucket));\n-\n-    //Filesystem Load\n-    addLoads(numThreads,\n-        bucket -> new FilesystemLoadGenerator(buffer, bucket));\n-\n-    //Repl Load\n-    addLoads(numThreads,\n-        bucket -> new ReadOnlyLoadGenerator(buffer, bucket, 20));\n+    this.loadExecutor = new LoadExecutors(numThreads, loadGenerators);\n   }\n \n-  private void addLoads(int numThreads,\n-                        Function<LoadBucket, LoadGenerator> function)\n-      throws Exception {\n+  private void addLoads(Class<? extends LoadGenerator> clazz,\n+                        DataBuffer buffer) throws Exception {\n     String bucketName = RandomStringUtils.randomAlphabetic(10).toLowerCase();\n     volume.createBucket(bucketName);\n-    LoadBucket bucket = new LoadBucket(volume.getBucket(bucketName), conf,\n-        omServiceID);\n-    LoadGenerator loadGenerator = function.apply(bucket);\n-    loadExecutors.add(new LoadExecutors(numThreads, loadGenerator));\n+    LoadBucket ozoneBucket = new LoadBucket(volume.getBucket(bucketName),\n+        conf, omServiceID);\n+\n+    LoadGenerator loadGenerator = clazz\n+        .getConstructor(DataBuffer.class, LoadBucket.class)\n+        .newInstance(buffer, ozoneBucket);", "originalCommit": "976f181d10c0bf9723909b67a4e635896e2ccdb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2NTE1NQ==", "url": "https://github.com/apache/ozone/pull/842#discussion_r415265155", "bodyText": "done, great comment :)", "author": "mukul1987", "createdAt": "2020-04-26T09:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NjM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9e3805d3a1132f6afd4bc2f4985c1f004497f5fe", "chunk": "diff --git a/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java b/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java\nindex 5d2d752630..74e7a3c9ab 100644\n--- a/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java\n+++ b/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/MiniOzoneLoadGenerator.java\n\n@@ -109,23 +109,23 @@ public Builder setOMServiceId(String serviceId) {\n       return this;\n     }\n \n-    public Builder setConf(OzoneConfiguration configuration) {\n-      this.conf = configuration;\n+    public Builder setConf(OzoneConfiguration conf) {\n+      this.conf = conf;\n       return this;\n     }\n \n-    public Builder setNumBuffers(int buffers) {\n-      this.numBuffers = buffers;\n+    public Builder setNumBuffers(int numBuffers) {\n+      this.numBuffers = numBuffers;\n       return this;\n     }\n \n-    public Builder setNumThreads(int threads) {\n-      this.numThreads = threads;\n+    public Builder setNumThreads(int numThreads) {\n+      this.numThreads = numThreads;\n       return this;\n     }\n \n-    public Builder setVolume(OzoneVolume vol) {\n-      this.volume = vol;\n+    public Builder setVolume(OzoneVolume volume) {\n+      this.volume = volume;\n       return this;\n     }\n \n"}}, {"oid": "9e3805d3a1132f6afd4bc2f4985c1f004497f5fe", "url": "https://github.com/apache/ozone/commit/9e3805d3a1132f6afd4bc2f4985c1f004497f5fe", "message": "HDDS-3455. Change MiniLoadGenerator to a pluggable model.", "committedDate": "2020-04-26T09:23:10Z", "type": "commit"}, {"oid": "cada4e45fa67d2425ba1955eb8d7b61a308f5553", "url": "https://github.com/apache/ozone/commit/cada4e45fa67d2425ba1955eb8d7b61a308f5553", "message": "fix checkstyle", "committedDate": "2020-04-26T09:23:10Z", "type": "commit"}, {"oid": "40262d343758ef970a974b1f7cdd8730c6384415", "url": "https://github.com/apache/ozone/commit/40262d343758ef970a974b1f7cdd8730c6384415", "message": "address review comments", "committedDate": "2020-04-26T09:44:52Z", "type": "commit"}, {"oid": "40262d343758ef970a974b1f7cdd8730c6384415", "url": "https://github.com/apache/ozone/commit/40262d343758ef970a974b1f7cdd8730c6384415", "message": "address review comments", "committedDate": "2020-04-26T09:44:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MzgwNA==", "url": "https://github.com/apache/ozone/pull/842#discussion_r415743804", "bodyText": "This is not a javadoc for keyNameDelimiter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n              /*", "author": "adoroszlai", "createdAt": "2020-04-27T11:47:29Z", "path": "hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadGenerator.java", "diffHunk": "@@ -22,6 +22,16 @@\n  * Interface for load generator.\n  */\n public abstract class LoadGenerator {\n+  /**", "originalCommit": "40262d343758ef970a974b1f7cdd8730c6384415", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5a50552bec733be386de421bd37cbb2dca3c874", "chunk": "diff --git a/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadGenerator.java b/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadGenerator.java\nindex dff6da67e7..7f79df58ad 100644\n--- a/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadGenerator.java\n+++ b/hadoop-ozone/fault-injection-test/mini-chaos-tests/src/test/java/org/apache/hadoop/ozone/loadgenerators/LoadGenerator.java\n\n@@ -22,7 +22,7 @@\n  * Interface for load generator.\n  */\n public abstract class LoadGenerator {\n-  /**\n+  /*\n    * The implemented LoadGenerators constructors should have the\n    * constructor with the signature as following\n    * class NewLoadGen implements LoadGenerator {\n"}}, {"oid": "b5a50552bec733be386de421bd37cbb2dca3c874", "url": "https://github.com/apache/ozone/commit/b5a50552bec733be386de421bd37cbb2dca3c874", "message": "Update javadoc\n\nCo-Authored-By: Doroszlai, Attila <6454655+adoroszlai@users.noreply.github.com>", "committedDate": "2020-04-27T11:58:27Z", "type": "commit"}]}