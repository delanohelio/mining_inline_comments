{"pr_number": 986, "pr_title": "HDDS-3476. Use persisted transaction info during OM startup in OM StateMachine.", "pr_createdAt": "2020-05-28T18:55:15Z", "pr_url": "https://github.com/apache/ozone/pull/986", "timeline": [{"oid": "3f88df1c24fdd5fc9608efb64e64a804bcc9ed64", "url": "https://github.com/apache/ozone/commit/3f88df1c24fdd5fc9608efb64e64a804bcc9ed64", "message": "HDDS-3476. Use persisted transaction info during OM startup in OM StateMachine.", "committedDate": "2020-05-28T19:28:35Z", "type": "forcePushed"}, {"oid": "2c3be122da1e6210d2e2c04fc4c7a227acdbcb33", "url": "https://github.com/apache/ozone/commit/2c3be122da1e6210d2e2c04fc4c7a227acdbcb33", "message": "HDDS-3476. Use persisted transaction info during OM startup in OM StateMachine.", "committedDate": "2020-05-28T19:50:45Z", "type": "forcePushed"}, {"oid": "d36348f889c0a1ecf85292a5be89d487358858cd", "url": "https://github.com/apache/ozone/commit/d36348f889c0a1ecf85292a5be89d487358858cd", "message": "HDDS-3476. Use persisted transaction info during OM startup in OM StateMachine.", "committedDate": "2020-05-28T20:31:59Z", "type": "forcePushed"}, {"oid": "bf0b8ac5fd4d12de820d2d10fa372f9aa57392d8", "url": "https://github.com/apache/ozone/commit/bf0b8ac5fd4d12de820d2d10fa372f9aa57392d8", "message": "HDDS-3476. Use persisted transaction info during OM startup in OM StateMachine.", "committedDate": "2020-05-28T20:49:19Z", "type": "forcePushed"}, {"oid": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "url": "https://github.com/apache/ozone/commit/93e0638d08a9dde55e47756fe4666c70c0691fbe", "message": "HDDS-3476. Use persisted transaction info during OM startup in OM StateMachine.", "committedDate": "2020-05-29T04:40:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyOTI2MA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433429260", "bodyText": "We need this config to be able to control the snapshot trigger from Ratis side for testing purposes. For some tests (TestOzoneManagerHA, OM HA robot tests) we need to set a lower value for auto trigger threshold so that logs can be purged which in turn can instantiate install snapshots.\nWe can keep it as an internal config and not expose it to users.", "author": "hanishakoneru", "createdAt": "2020-06-01T19:02:35Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "diffHunk": "@@ -133,13 +133,6 @@ private OMConfigKeys() {\n       \"ozone.om.ratis.log.purge.gap\";\n   public static final int OZONE_OM_RATIS_LOG_PURGE_GAP_DEFAULT = 1000000;\n \n-  // OM Snapshot configurations\n-  public static final String OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY\n-      = \"ozone.om.ratis.snapshot.auto.trigger.threshold\";", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxODQzMw==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437018433", "bodyText": "Yes. agreed done.", "author": "bharatviswa504", "createdAt": "2020-06-08T21:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyOTI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "72966bd33b5524c7438e7da93d020ac2961d70a2", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java\nindex e167685b32..755bb8d37e 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java\n\n@@ -133,6 +133,11 @@ private OMConfigKeys() {\n       \"ozone.om.ratis.log.purge.gap\";\n   public static final int OZONE_OM_RATIS_LOG_PURGE_GAP_DEFAULT = 1000000;\n \n+  public static final String OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY\n+      = \"ozone.om.ratis.snapshot.auto.trigger.threshold\";\n+  public static final long\n+      OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_DEFAULT = 400000;\n+\n   // OM Ratis server configurations\n   public static final String OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_KEY\n       = \"ozone.om.ratis.server.request.timeout\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMTYyNQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433431625", "bodyText": "Can we not call the OzoneManager#getRatisSnapshotIndex() method here?", "author": "hanishakoneru", "createdAt": "2020-06-01T19:07:22Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/snapshot/TestOzoneManagerSnapshotProvider.java", "diffHunk": "@@ -111,23 +113,43 @@ public void testDownloadCheckpoint() throws Exception {\n         .getFailoverProxyProvider(objectStore.getClientProxy())\n         .getCurrentProxyOMNodeId();\n \n-    OzoneManager ozoneManager = cluster.getOzoneManager(leaderOMNodeId);\n+    OzoneManager leaderOM = cluster.getOzoneManager(leaderOMNodeId);\n \n     // Get a follower OM\n-    String followerNodeId = ozoneManager.getPeerNodes().get(0).getOMNodeId();\n+    String followerNodeId = leaderOM.getPeerNodes().get(0).getOMNodeId();\n     OzoneManager followerOM = cluster.getOzoneManager(followerNodeId);\n \n     // Download latest checkpoint from leader OM to follower OM\n     DBCheckpoint omSnapshot = followerOM.getOmSnapshotProvider()\n         .getOzoneManagerDBSnapshot(leaderOMNodeId);\n \n-    long leaderSnapshotIndex = ozoneManager.getRatisSnapshotIndex();\n-    long downloadedSnapshotIndex = omSnapshot.getRatisSnapshotIndex();\n+    long leaderSnapshotIndex =\n+        OMTransactionInfo.readTransactionInfo(leaderOM.getMetadataManager())\n+            .getTransactionIndex();", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxODM2Ng==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437018366", "bodyText": "Yes. done", "author": "bharatviswa504", "createdAt": "2020-06-08T21:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMTYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "72966bd33b5524c7438e7da93d020ac2961d70a2", "chunk": "diff --git a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/snapshot/TestOzoneManagerSnapshotProvider.java b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/snapshot/TestOzoneManagerSnapshotProvider.java\nindex 4222a4627b..d77f4d9d13 100644\n--- a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/snapshot/TestOzoneManagerSnapshotProvider.java\n+++ b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/ozone/om/snapshot/TestOzoneManagerSnapshotProvider.java\n\n@@ -123,9 +123,7 @@ public void testDownloadCheckpoint() throws Exception {\n     DBCheckpoint omSnapshot = followerOM.getOmSnapshotProvider()\n         .getOzoneManagerDBSnapshot(leaderOMNodeId);\n \n-    long leaderSnapshotIndex =\n-        OMTransactionInfo.readTransactionInfo(leaderOM.getMetadataManager())\n-            .getTransactionIndex();\n+    long leaderSnapshotIndex = leaderOM.getRatisSnapshotIndex();\n     long downloadedSnapshotIndex = getDownloadSnapshotIndex(omSnapshot);\n \n     // The snapshot index downloaded from leader OM should match the ratis\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Njk1OQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433456959", "bodyText": "Instead of instantiating a new MetadataManagerImpl, can we not directly load the RocksDB and read the transactionInfo?", "author": "hanishakoneru", "createdAt": "2020-06-01T19:58:49Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3027,30 +3017,59 @@ public TermIndex installSnapshot(String leaderId) {\n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n     Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n \n-    // Check if current ratis log index is smaller than the downloaded\n-    // snapshot index. If yes, proceed by stopping the ratis server so that\n-    // the OM state can be re-initialized. If no, then do not proceed with\n-    // installSnapshot.\n     long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n-    long checkpointSnapshotIndex = omDBcheckpoint.getRatisSnapshotIndex();\n-    long checkpointSnapshotTermIndex =\n-        omDBcheckpoint.getRatisSnapshotTerm();\n-    if (checkpointSnapshotIndex <= lastAppliedIndex) {\n-      LOG.error(\"Failed to install checkpoint from OM leader: {}. The last \" +\n-          \"applied index: {} is greater than or equal to the checkpoint's \" +\n-          \"snapshot index: {}. Deleting the downloaded checkpoint {}\", leaderId,\n-          lastAppliedIndex, checkpointSnapshotIndex,\n-          newDBlocation);\n-      try {\n-        FileUtils.deleteFully(newDBlocation);\n-      } catch (IOException e) {\n-        LOG.error(\"Failed to fully delete the downloaded DB checkpoint {} \" +\n-            \"from OM leader {}.\", newDBlocation,\n-            leaderId, e);\n+\n+    // Check if current ratis log index is smaller than the downloaded\n+    // checkpoint transaction index. If yes, proceed by stopping the ratis\n+    // server so that the OM state can be re-initialized. If no, then do not\n+    // proceed with installSnapshot.\n+\n+    OMTransactionInfo omTransactionInfo = null;\n+    try {\n+      // Set new DB location as DB path\n+      OzoneConfiguration tempConfig = getConfiguration();\n+\n+      Path dbDir = newDBlocation.getParent();\n+      if (dbDir != null) {\n+        tempConfig.set(OZONE_OM_DB_DIRS, dbDir.toString());\n+      } else {\n+        LOG.error(\"Incorrect DB location path {} received from checkpoint.\",\n+            newDBlocation);\n+        return null;\n+      }\n+\n+      OMMetadataManager tempMetadataMgr =\n+          new OmMetadataManagerImpl(configuration);", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxODI5NA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437018294", "bodyText": "This is to make code simple, as anyway when using direct rocksdb also we need to open DB and read from the table. OMMetadataManager usage will be cleaner, and simpler to do.\nAs anyway, even if we open DB directly it opens all column families.", "author": "bharatviswa504", "createdAt": "2020-06-08T21:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Njk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NjEzNQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437056135", "bodyText": "With skip Initialization of tables which is heavy part during initalization is skipped. And made this as internal config by not adding to ozone-default.xml", "author": "bharatviswa504", "createdAt": "2020-06-08T23:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Njk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MDAzNA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437060034", "bodyText": "Added a config to use internally to skip initialization of tables. Rest most of the part is required for opening DB. This is done to make it simple and avoid less refactor.", "author": "bharatviswa504", "createdAt": "2020-06-08T23:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Njk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MzUwMw==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437073503", "bodyText": "This still seems very hacky. My suggestion is to move the logic inside OMMetadataManagerImpl#start() to a new method loadDB(File dbPath) which returns DBStore object.\n  public void start(OzoneConfiguration configuration) throws IOException {\n    // We need to create the DB here, as when during restart, stop closes the\n    // db, so we need to create the store object and initialize DB.\n    if (store == null) {\n        File metaDir = OMStorage.getOmDbDir(configuration);\n        store = loadDB(metaDir);\n        initializeOmTables();\n    }\n  }\n\nAnd after downloading the checkpoint from Leader, we would have to just call thie loadDB method with the location of the downloaded checkpoint. This way we can also keep the format of the downloaded checkpoint as before.", "author": "hanishakoneru", "createdAt": "2020-06-09T00:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Njk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNjY4NA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437126684", "bodyText": "The most expensive this is initialization of tables, and also for loadDB we cannot just pass path, it also requires configuration object.  So, to make it simple added an internal configuration.\nDBStoreBuilder dbStoreBuilder = DBStoreBuilder.newBuilder(configuration,\n          rocksDBConfiguration).setName(OM_DB_NAME)\n          .setPath(Paths.get(metaDir.getPath()));\n\n      this.store = addOMTablesAndCodecs(dbStoreBuilder).build();", "author": "bharatviswa504", "createdAt": "2020-06-09T04:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Njk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0MzAxNA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437643014", "bodyText": "Passing default config object should be trivial. Though this approach might make it simpler in terms of lines of code, it is not cleaner. I still don't see why OmMetadataMngr should be initialized just to read one value from the DB.\nEven better would be to pass this value from the leader itself. But not sure how complicated that can get. Might have to pause Leader disk sync while sending the checkpoint.", "author": "hanishakoneru", "createdAt": "2020-06-09T18:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Njk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MDY3MQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437780671", "bodyText": "Done. Removed extra config.", "author": "bharatviswa504", "createdAt": "2020-06-09T23:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Njk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "72966bd33b5524c7438e7da93d020ac2961d70a2", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex adc0011774..ff4e7b30db 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -3017,6 +3027,9 @@ public TermIndex installSnapshot(String leaderId) {\n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n     Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n \n+    LOG.info(\"Downloaded checkpoint from Leader {}, in to the location {}\",\n+        leaderId, newDBlocation);\n+\n     long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n \n     // Check if current ratis log index is smaller than the downloaded\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2MDM0Ng==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433460346", "bodyText": "The exception caught here could be due to varied reasons. Can we have a more generic error message or have different try blocks. Also, if there is an exception, we should delete the downloaded checkpoint.", "author": "hanishakoneru", "createdAt": "2020-06-01T20:05:56Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3027,30 +3017,59 @@ public TermIndex installSnapshot(String leaderId) {\n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n     Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n \n-    // Check if current ratis log index is smaller than the downloaded\n-    // snapshot index. If yes, proceed by stopping the ratis server so that\n-    // the OM state can be re-initialized. If no, then do not proceed with\n-    // installSnapshot.\n     long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n-    long checkpointSnapshotIndex = omDBcheckpoint.getRatisSnapshotIndex();\n-    long checkpointSnapshotTermIndex =\n-        omDBcheckpoint.getRatisSnapshotTerm();\n-    if (checkpointSnapshotIndex <= lastAppliedIndex) {\n-      LOG.error(\"Failed to install checkpoint from OM leader: {}. The last \" +\n-          \"applied index: {} is greater than or equal to the checkpoint's \" +\n-          \"snapshot index: {}. Deleting the downloaded checkpoint {}\", leaderId,\n-          lastAppliedIndex, checkpointSnapshotIndex,\n-          newDBlocation);\n-      try {\n-        FileUtils.deleteFully(newDBlocation);\n-      } catch (IOException e) {\n-        LOG.error(\"Failed to fully delete the downloaded DB checkpoint {} \" +\n-            \"from OM leader {}.\", newDBlocation,\n-            leaderId, e);\n+\n+    // Check if current ratis log index is smaller than the downloaded\n+    // checkpoint transaction index. If yes, proceed by stopping the ratis\n+    // server so that the OM state can be re-initialized. If no, then do not\n+    // proceed with installSnapshot.\n+\n+    OMTransactionInfo omTransactionInfo = null;\n+    try {\n+      // Set new DB location as DB path\n+      OzoneConfiguration tempConfig = getConfiguration();\n+\n+      Path dbDir = newDBlocation.getParent();\n+      if (dbDir != null) {\n+        tempConfig.set(OZONE_OM_DB_DIRS, dbDir.toString());\n+      } else {\n+        LOG.error(\"Incorrect DB location path {} received from checkpoint.\",\n+            newDBlocation);\n+        return null;\n+      }\n+\n+      OMMetadataManager tempMetadataMgr =\n+          new OmMetadataManagerImpl(configuration);\n+\n+      omTransactionInfo =\n+          OMTransactionInfo.readTransactionInfo(tempMetadataMgr);\n+      tempMetadataMgr.stop();\n+\n+      if (omTransactionInfo.getTransactionIndex() <= lastAppliedIndex) {\n+        LOG.error(\"Failed to install checkpoint from OM leader: {}. The last \" +\n+                \"applied index: {} is greater than or equal to the \" +\n+                \"checkpoint's applied index: {}. Deleting the downloaded \" +\n+                \"checkpoint {}\", leaderId, lastAppliedIndex,\n+            omTransactionInfo.getTransactionIndex(), newDBlocation);\n+        try {\n+          FileUtils.deleteFully(newDBlocation);\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to fully delete the downloaded DB checkpoint {} \" +\n+                  \"from OM leader {}.\", newDBlocation,\n+              leaderId, e);\n+          return null;\n+        }\n       }\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed during checking downloaded leader transaction index \" +", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNzg0NQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437017845", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-08T21:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2MDM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "72966bd33b5524c7438e7da93d020ac2961d70a2", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex adc0011774..ff4e7b30db 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -3017,6 +3027,9 @@ public TermIndex installSnapshot(String leaderId) {\n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n     Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n \n+    LOG.info(\"Downloaded checkpoint from Leader {}, in to the location {}\",\n+        leaderId, newDBlocation);\n+\n     long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n \n     // Check if current ratis log index is smaller than the downloaded\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2MTYwOA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433461608", "bodyText": "Question: In case of some failure after OM is paused, should we unpause with the old DB?", "author": "hanishakoneru", "createdAt": "2020-06-01T20:08:32Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3073,9 +3092,8 @@ public TermIndex installSnapshot(String leaderId) {\n     // Restart (unpause) the state machine and update its last applied index\n     // to the installed checkpoint's snapshot index.\n     try {\n-      reloadOMState(checkpointSnapshotIndex, checkpointSnapshotTermIndex);\n-      omRatisServer.getOmStateMachine().unpause(checkpointSnapshotIndex,\n-          checkpointSnapshotTermIndex);\n+      reloadOMState(leaderIndex, leaderTerm);\n+      omRatisServer.getOmStateMachine().unpause(leaderIndex, leaderTerm);", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNzgxMg==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437017812", "bodyText": "Yes, this is an existing issue\nI think you have opened a jira to address this issue\nhttps://issues.apache.org/jira/browse/HDDS-3741", "author": "bharatviswa504", "createdAt": "2020-06-08T21:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2MTYwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NTQ5Mw==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433485493", "bodyText": "This class seems redundant now. The getTermIndex() is only used in tests.\nThere are two options:\n\nWe can either update OMRatisSnapshotInfo on every DB flush when transactionInfo is updated to keep snapshotInfo in memory. But this update and DB update operation would need to be atomic and there is not mych used for it too.\nThe second option is to get rid of OMRatisSnapshotInfo and always read from DB for snapshotIndex.", "author": "hanishakoneru", "createdAt": "2020-06-01T20:56:58Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OMRatisSnapshotInfo.java", "diffHunk": "@@ -49,81 +39,15 @@\n   private volatile long term = 0;\n   private volatile long snapshotIndex = -1;\n \n-  private final File ratisSnapshotFile;\n-\n-  public OMRatisSnapshotInfo(File ratisDir) throws IOException {", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNjgwNw==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437016807", "bodyText": "This is needed during returning getLatestSnapshot in OMStateMachine.", "author": "bharatviswa504", "createdAt": "2020-06-08T21:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NTQ5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MDcyOQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433490729", "bodyText": "getLatestSnapshot is used internally in Ratis during state reload. During reload or restart, getLastAppliedTermIndex would be 0,-1. The TransactionInfo stored in DB should be returned here instead.", "author": "hanishakoneru", "createdAt": "2020-06-01T21:07:14Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -139,6 +139,10 @@ public void initialize(RaftServer server, RaftGroupId id,\n \n   @Override\n   public SnapshotInfo getLatestSnapshot() {\n+    TermIndex lastAppliedIndex = getLastAppliedTermIndex();", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTQ3NQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437055475", "bodyText": "This is already taken care during start and reload. We are setting the snapshotInfo from DB values. So, I think this should be fine here.", "author": "bharatviswa504", "createdAt": "2020-06-08T23:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MDcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5eada966ae091474b4ca0154a2fff466c895de8f", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\nindex cb9ebc1e78..41395dc361 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n\n@@ -137,12 +137,23 @@ public void initialize(RaftServer server, RaftGroupId id,\n     });\n   }\n \n+  @Override\n+  public void reinitialize() throws IOException {\n+    OMTransactionInfo omTransactionInfo =\n+        OMTransactionInfo.readTransactionInfo(\n+            ozoneManager.getMetadataManager());\n+    if (omTransactionInfo != null) {\n+      setLastAppliedTermIndex(TermIndex.newTermIndex(\n+          omTransactionInfo.getCurrentTerm(),\n+          omTransactionInfo.getTransactionIndex()));\n+      snapshotInfo.updateTermIndex(omTransactionInfo.getCurrentTerm(),\n+          omTransactionInfo.getTransactionIndex());\n+    }\n+  }\n+\n   @Override\n   public SnapshotInfo getLatestSnapshot() {\n-    TermIndex lastAppliedIndex = getLastAppliedTermIndex();\n-    LOG.info(\"Latest Snapshot Info {}\", lastAppliedIndex);\n-    snapshotInfo.updateTermIndex(lastAppliedIndex.getTerm(),\n-        lastAppliedIndex.getIndex());\n+    LOG.info(\"Latest Snapshot Info {}\", snapshotInfo);\n     return snapshotInfo;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNTg2Mg==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433505862", "bodyText": "We should return the flushed TransactionInfo#logIndex here too. TransactionIndex returned via getLastAppliedIndex() might not have been flushed to DB yet. And logs could be purged upto this index. And if OM crashes before the transactions are flushed to disk by OMDoubleBuffer, there could be data loss.", "author": "hanishakoneru", "createdAt": "2020-06-01T21:41:24Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -338,20 +341,17 @@ public void unpause(long newLastAppliedSnaphsotIndex,\n   }\n \n   /**\n-   * Take OM Ratis snapshot. Write the snapshot index to file. Snapshot index\n-   * is the log index corresponding to the last applied transaction on the OM\n-   * State Machine.\n+   * Take OM Ratis snapshot is a dummy operation as when double buffer\n+   * flushes the lastAppliedIndex is flushed to DB and that is used as\n+   * snapshot index.\n    *\n    * @return the last applied index on the state machine which has been\n    * stored in the snapshot file.\n    */\n   @Override\n   public long takeSnapshot() throws IOException {\n-    LOG.info(\"Saving Ratis snapshot on the OM.\");\n-    if (ozoneManager != null) {\n-      return ozoneManager.saveRatisSnapshot().getIndex();\n-    }\n-    return 0;\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    return getLastAppliedTermIndex().getIndex();", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTg3OA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437055878", "bodyText": "Good catch. Done", "author": "bharatviswa504", "createdAt": "2020-06-08T23:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNTg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "72966bd33b5524c7438e7da93d020ac2961d70a2", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\nindex cb9ebc1e78..7e5ba5dedd 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n\n@@ -351,7 +351,9 @@ public void unpause(long newLastAppliedSnaphsotIndex,\n   @Override\n   public long takeSnapshot() throws IOException {\n     LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n-    return getLastAppliedTermIndex().getIndex();\n+    long lastAppliedIndex = getLastAppliedTermIndex().getIndex();\n+    ozoneManager.getMetadataManager().getStore().flush();\n+    return lastAppliedIndex;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNzUwNw==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433507507", "bodyText": "On a newly setup OM, snapshotInfo is initialized to 0,-1 and so is LastAppliedTermIndex. This step is not required as it is setting the same values again.", "author": "hanishakoneru", "createdAt": "2020-06-01T21:45:15Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -515,13 +515,29 @@ private synchronized void computeAndUpdateLastAppliedIndex(\n     }\n   }\n \n-  public void updateLastAppliedIndexWithSnaphsotIndex() {\n+  public void updateLastAppliedIndexWithSnaphsotIndex() throws IOException {\n     // This is done, as we have a check in Ratis for not throwing\n     // LeaderNotReadyException, it checks stateMachineIndex >= raftLog\n     // nextIndex (placeHolderIndex).\n-    setLastAppliedTermIndex(TermIndex.newTermIndex(snapshotInfo.getTerm(),\n-        snapshotInfo.getIndex()));\n-    LOG.info(\"LastAppliedIndex set from SnapShotInfo {}\",\n+\n+    OMTransactionInfo omTransactionInfo =\n+        OMTransactionInfo.readTransactionInfo(\n+            ozoneManager.getMetadataManager());\n+\n+    if (omTransactionInfo != null) {\n+      setLastAppliedTermIndex(TermIndex.newTermIndex(\n+          omTransactionInfo.getCurrentTerm(),\n+          omTransactionInfo.getTransactionIndex()));\n+      snapshotInfo.updateTermIndex(omTransactionInfo.getCurrentTerm(),\n+          omTransactionInfo.getTransactionIndex());\n+    } else {\n+      // On a newly setup OM,it will not have any transaction info in DB,\n+      // use default values.\n+      setLastAppliedTermIndex(TermIndex.newTermIndex(snapshotInfo.getTerm(),", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTg0NQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437055845", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-08T23:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNzUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "72966bd33b5524c7438e7da93d020ac2961d70a2", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\nindex cb9ebc1e78..7e5ba5dedd 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n\n@@ -530,14 +532,9 @@ public void updateLastAppliedIndexWithSnaphsotIndex() throws IOException {\n           omTransactionInfo.getTransactionIndex()));\n       snapshotInfo.updateTermIndex(omTransactionInfo.getCurrentTerm(),\n           omTransactionInfo.getTransactionIndex());\n-    } else {\n-      // On a newly setup OM,it will not have any transaction info in DB,\n-      // use default values.\n-      setLastAppliedTermIndex(TermIndex.newTermIndex(snapshotInfo.getTerm(),\n-          snapshotInfo.getIndex()));\n     }\n \n-    LOG.info(\"LastAppliedIndex is set from TransactionInfo from OM DB is {}\",\n+    LOG.info(\"LastAppliedIndex is set from TransactionInfo from OM DB as {}\",\n         getLastAppliedTermIndex());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNzg4OQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433507889", "bodyText": "Typo: as {}", "author": "hanishakoneru", "createdAt": "2020-06-01T21:46:14Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -515,13 +515,29 @@ private synchronized void computeAndUpdateLastAppliedIndex(\n     }\n   }\n \n-  public void updateLastAppliedIndexWithSnaphsotIndex() {\n+  public void updateLastAppliedIndexWithSnaphsotIndex() throws IOException {\n     // This is done, as we have a check in Ratis for not throwing\n     // LeaderNotReadyException, it checks stateMachineIndex >= raftLog\n     // nextIndex (placeHolderIndex).\n-    setLastAppliedTermIndex(TermIndex.newTermIndex(snapshotInfo.getTerm(),\n-        snapshotInfo.getIndex()));\n-    LOG.info(\"LastAppliedIndex set from SnapShotInfo {}\",\n+\n+    OMTransactionInfo omTransactionInfo =\n+        OMTransactionInfo.readTransactionInfo(\n+            ozoneManager.getMetadataManager());\n+\n+    if (omTransactionInfo != null) {\n+      setLastAppliedTermIndex(TermIndex.newTermIndex(\n+          omTransactionInfo.getCurrentTerm(),\n+          omTransactionInfo.getTransactionIndex()));\n+      snapshotInfo.updateTermIndex(omTransactionInfo.getCurrentTerm(),\n+          omTransactionInfo.getTransactionIndex());\n+    } else {\n+      // On a newly setup OM,it will not have any transaction info in DB,\n+      // use default values.\n+      setLastAppliedTermIndex(TermIndex.newTermIndex(snapshotInfo.getTerm(),\n+          snapshotInfo.getIndex()));\n+    }\n+\n+    LOG.info(\"LastAppliedIndex is set from TransactionInfo from OM DB is {}\",", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTgyNg==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437055826", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-08T23:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNzg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "72966bd33b5524c7438e7da93d020ac2961d70a2", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\nindex cb9ebc1e78..7e5ba5dedd 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n\n@@ -530,14 +532,9 @@ public void updateLastAppliedIndexWithSnaphsotIndex() throws IOException {\n           omTransactionInfo.getTransactionIndex()));\n       snapshotInfo.updateTermIndex(omTransactionInfo.getCurrentTerm(),\n           omTransactionInfo.getTransactionIndex());\n-    } else {\n-      // On a newly setup OM,it will not have any transaction info in DB,\n-      // use default values.\n-      setLastAppliedTermIndex(TermIndex.newTermIndex(snapshotInfo.getTerm(),\n-          snapshotInfo.getIndex()));\n     }\n \n-    LOG.info(\"LastAppliedIndex is set from TransactionInfo from OM DB is {}\",\n+    LOG.info(\"LastAppliedIndex is set from TransactionInfo from OM DB as {}\",\n         getLastAppliedTermIndex());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDk4Mg==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433510982", "bodyText": "Any reason for changing the naming convention here?\nThe new naming scheme would be <OM_Ratis_Dir>//om.db.\nI think it would be more readable to have the timestamp at the end of file name instead of as a parent directory. What do you think?", "author": "hanishakoneru", "createdAt": "2020-06-01T21:54:06Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/snapshot/OzoneManagerSnapshotProvider.java", "diffHunk": "@@ -112,16 +112,16 @@ public OzoneManagerSnapshotProvider(ConfigurationSource conf,\n    */\n   public DBCheckpoint getOzoneManagerDBSnapshot(String leaderOMNodeID)\n       throws IOException {\n-    String snapshotFileName = OM_SNAPSHOT_DB + \"_\" + System.currentTimeMillis();\n-    File targetFile = new File(omSnapshotDir, snapshotFileName + \".tar.gz\");\n+    String snapshotTime = Long.toString(System.currentTimeMillis());\n+    String snapshotFileName = Paths.get(omSnapshotDir.getAbsolutePath(),\n+        snapshotTime, OM_DB_NAME).toFile().getAbsolutePath();\n+    File targetFile = new File(snapshotFileName + \".tar.gz\");", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTc5OQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437055799", "bodyText": "Yes so that we can reuse OMMetadataManager code.\n<OM_Ratis_Dir>//om.db", "author": "bharatviswa504", "createdAt": "2020-06-08T23:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODI4Mw==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438388283", "bodyText": "Can we revert this now that we don't need this to loadDB.", "author": "hanishakoneru", "createdAt": "2020-06-10T20:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwNzY0OA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438407648", "bodyText": "Still we need this. As We use DBStore.", "author": "bharatviswa504", "createdAt": "2020-06-10T21:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDk4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMjg0NQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r433512845", "bodyText": "Can we add a Info Log here. Something to say \"Downloaded checkpoint with OMTransactionInfo - {}\". This would help with debugging as the downloaded checkpoint's snapshotIndex is not logged in OMSnapshotProvider anymore.", "author": "hanishakoneru", "createdAt": "2020-06-01T21:58:55Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3027,30 +3017,59 @@ public TermIndex installSnapshot(String leaderId) {\n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n     Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n \n-    // Check if current ratis log index is smaller than the downloaded\n-    // snapshot index. If yes, proceed by stopping the ratis server so that\n-    // the OM state can be re-initialized. If no, then do not proceed with\n-    // installSnapshot.\n     long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n-    long checkpointSnapshotIndex = omDBcheckpoint.getRatisSnapshotIndex();\n-    long checkpointSnapshotTermIndex =\n-        omDBcheckpoint.getRatisSnapshotTerm();\n-    if (checkpointSnapshotIndex <= lastAppliedIndex) {\n-      LOG.error(\"Failed to install checkpoint from OM leader: {}. The last \" +\n-          \"applied index: {} is greater than or equal to the checkpoint's \" +\n-          \"snapshot index: {}. Deleting the downloaded checkpoint {}\", leaderId,\n-          lastAppliedIndex, checkpointSnapshotIndex,\n-          newDBlocation);\n-      try {\n-        FileUtils.deleteFully(newDBlocation);\n-      } catch (IOException e) {\n-        LOG.error(\"Failed to fully delete the downloaded DB checkpoint {} \" +\n-            \"from OM leader {}.\", newDBlocation,\n-            leaderId, e);\n+\n+    // Check if current ratis log index is smaller than the downloaded\n+    // checkpoint transaction index. If yes, proceed by stopping the ratis\n+    // server so that the OM state can be re-initialized. If no, then do not\n+    // proceed with installSnapshot.\n+\n+    OMTransactionInfo omTransactionInfo = null;\n+    try {\n+      // Set new DB location as DB path\n+      OzoneConfiguration tempConfig = getConfiguration();\n+\n+      Path dbDir = newDBlocation.getParent();\n+      if (dbDir != null) {\n+        tempConfig.set(OZONE_OM_DB_DIRS, dbDir.toString());\n+      } else {\n+        LOG.error(\"Incorrect DB location path {} received from checkpoint.\",\n+            newDBlocation);\n+        return null;\n+      }\n+\n+      OMMetadataManager tempMetadataMgr =\n+          new OmMetadataManagerImpl(configuration);\n+\n+      omTransactionInfo =\n+          OMTransactionInfo.readTransactionInfo(tempMetadataMgr);\n+      tempMetadataMgr.stop();\n+", "originalCommit": "93e0638d08a9dde55e47756fe4666c70c0691fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTcyOA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r437055728", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-08T23:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMjg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "72966bd33b5524c7438e7da93d020ac2961d70a2", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex adc0011774..ff4e7b30db 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -3017,6 +3027,9 @@ public TermIndex installSnapshot(String leaderId) {\n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n     Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n \n+    LOG.info(\"Downloaded checkpoint from Leader {}, in to the location {}\",\n+        leaderId, newDBlocation);\n+\n     long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n \n     // Check if current ratis log index is smaller than the downloaded\n"}}, {"oid": "72966bd33b5524c7438e7da93d020ac2961d70a2", "url": "https://github.com/apache/ozone/commit/72966bd33b5524c7438e7da93d020ac2961d70a2", "message": "review comments", "committedDate": "2020-06-08T23:31:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1MzA4Mg==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438353082", "bodyText": "We can remove this comment now.", "author": "hanishakoneru", "createdAt": "2020-06-10T19:17:27Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java", "diffHunk": "@@ -259,16 +261,25 @@ public void start(OzoneConfiguration configuration) throws IOException {\n         rocksDBConfiguration.setSyncOption(true);\n       }\n \n-      DBStoreBuilder dbStoreBuilder = DBStoreBuilder.newBuilder(configuration,\n-          rocksDBConfiguration).setName(OM_DB_NAME)\n-          .setPath(Paths.get(metaDir.getPath()));\n+      this.store = loadDB(configuration, metaDir);\n \n-      this.store = addOMTablesAndCodecs(dbStoreBuilder).build();\n+      // This value will be used internally, not to be exposed to end users.", "originalCommit": "630bf31ed01ceb7f3162159f2bdcc845154c8c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzNDY1MQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438434651", "bodyText": "Yes removed", "author": "bharatviswa504", "createdAt": "2020-06-10T22:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1MzA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fc1dc0789094f9c610598fc140e3c83ec1e81f5d", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java\nindex d75f2fb0d7..39a093ac97 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OmMetadataManagerImpl.java\n\n@@ -261,25 +259,16 @@ public void start(OzoneConfiguration configuration) throws IOException {\n         rocksDBConfiguration.setSyncOption(true);\n       }\n \n-      this.store = loadDB(configuration, metaDir);\n+      DBStoreBuilder dbStoreBuilder = DBStoreBuilder.newBuilder(configuration,\n+          rocksDBConfiguration).setName(OM_DB_NAME)\n+          .setPath(Paths.get(metaDir.getPath()));\n \n-      // This value will be used internally, not to be exposed to end users.\n+      this.store = addOMTablesAndCodecs(dbStoreBuilder).build();\n       initializeOmTables();\n     }\n   }\n \n-  public static DBStore loadDB(OzoneConfiguration configuration, File metaDir)\n-      throws IOException {\n-    RocksDBConfiguration rocksDBConfiguration =\n-        configuration.getObject(RocksDBConfiguration.class);\n-    DBStoreBuilder dbStoreBuilder = DBStoreBuilder.newBuilder(configuration,\n-        rocksDBConfiguration).setName(OM_DB_NAME)\n-        .setPath(Paths.get(metaDir.getPath()));\n-    DBStore dbStore = addOMTablesAndCodecs(dbStoreBuilder).build();\n-    return dbStore;\n-  }\n-\n-  protected static DBStoreBuilder addOMTablesAndCodecs(DBStoreBuilder builder) {\n+  protected DBStoreBuilder addOMTablesAndCodecs(DBStoreBuilder builder) {\n \n     return builder.addTable(USER_TABLE)\n         .addTable(VOLUME_TABLE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NzQ4OA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438367488", "bodyText": "The lastAppliedIndex could have been updated between its assignment and the canProceed check. This check should be synchronous. Or at least the assignment should happen after reading the transactionInfo from DB.", "author": "hanishakoneru", "createdAt": "2020-06-10T19:45:29Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3033,32 +3024,47 @@ public TermIndex installSnapshot(String leaderId) {\n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n     Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n \n-    // Check if current ratis log index is smaller than the downloaded\n-    // snapshot index. If yes, proceed by stopping the ratis server so that\n-    // the OM state can be re-initialized. If no, then do not proceed with\n-    // installSnapshot.\n+    LOG.info(\"Downloaded checkpoint from Leader {}, in to the location {}\",\n+        leaderId, newDBlocation);\n+\n     long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n-    long checkpointSnapshotIndex = omDBcheckpoint.getRatisSnapshotIndex();\n-    long checkpointSnapshotTermIndex =\n-        omDBcheckpoint.getRatisSnapshotTerm();\n-    if (checkpointSnapshotIndex <= lastAppliedIndex) {\n-      LOG.error(\"Failed to install checkpoint from OM leader: {}. The last \" +\n-              \"applied index: {} is greater than or equal to the checkpoint's\"\n-              + \" \" +\n-              \"snapshot index: {}. Deleting the downloaded checkpoint {}\",\n-          leaderId,\n-          lastAppliedIndex, checkpointSnapshotIndex,\n+\n+    // Check if current ratis log index is smaller than the downloaded\n+    // checkpoint transaction index. If yes, proceed by stopping the ratis\n+    // server so that the OM state can be re-initialized. If no, then do not\n+    // proceed with installSnapshot.\n+\n+    OMTransactionInfo omTransactionInfo = null;\n+\n+    Path dbDir = newDBlocation.getParent();\n+    if (dbDir == null) {\n+      LOG.error(\"Incorrect DB location path {} received from checkpoint.\",\n           newDBlocation);\n-      try {\n-        FileUtils.deleteFully(newDBlocation);\n-      } catch (IOException e) {\n-        LOG.error(\"Failed to fully delete the downloaded DB checkpoint {} \" +\n-                \"from OM leader {}.\", newDBlocation,\n-            leaderId, e);\n-      }\n       return null;\n     }\n \n+    try {\n+      omTransactionInfo =\n+          OzoneManagerRatisUtils.getTransactionInfoFromDownloadedSnapshot(\n+              configuration, dbDir);\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed during opening downloaded snapshot from \" +\n+          \"{} to obtain transaction index\", newDBlocation, ex);\n+      return null;\n+    }\n+\n+    boolean canProceed =\n+        OzoneManagerRatisUtils.verifyTransactionInfo(omTransactionInfo,\n+        lastAppliedIndex, leaderId, newDBlocation);\n+", "originalCommit": "b67cba16ecac7156620c21db959e20cfa0b0a709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzNDYyMg==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438434622", "bodyText": "Done.", "author": "bharatviswa504", "createdAt": "2020-06-10T22:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NzQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "fc1dc0789094f9c610598fc140e3c83ec1e81f5d", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex fe7a30ee90..5e3cd7ac81 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -3024,9 +3011,6 @@ public TermIndex installSnapshot(String leaderId) {\n     DBCheckpoint omDBcheckpoint = getDBCheckpointFromLeader(leaderId);\n     Path newDBlocation = omDBcheckpoint.getCheckpointLocation();\n \n-    LOG.info(\"Downloaded checkpoint from Leader {}, in to the location {}\",\n-        leaderId, newDBlocation);\n-\n     long lastAppliedIndex = omRatisServer.getLastAppliedTermIndex().getIndex();\n \n     // Check if current ratis log index is smaller than the downloaded\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2ODAzOA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438368038", "bodyText": "NIT: SnapShot -> Snapshot", "author": "hanishakoneru", "createdAt": "2020-06-10T19:46:27Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -3168,8 +3172,8 @@ File replaceOMDBWithCheckpoint(long lastAppliedIndex, Path checkpointPath)\n    * All the classes which use/ store MetadataManager should also be updated\n    * with the new MetadataManager instance.\n    */\n-  void reloadOMState(long newSnapshotIndex,\n-      long newSnapShotTermIndex) throws IOException {\n+  void reloadOMState(long newSnapshotIndex, long newSnapShotTermIndex)\n+      throws IOException {", "originalCommit": "b67cba16ecac7156620c21db959e20cfa0b0a709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzNDU3Nw==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438434577", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-10T22:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2ODAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "c6285a00b6e1b4340eb19cecc23431fc9ef1095a", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex fe7a30ee90..a791d28cd2 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -3172,7 +3162,7 @@ File replaceOMDBWithCheckpoint(long lastAppliedIndex, Path checkpointPath)\n    * All the classes which use/ store MetadataManager should also be updated\n    * with the new MetadataManager instance.\n    */\n-  void reloadOMState(long newSnapshotIndex, long newSnapShotTermIndex)\n+  void reloadOMState(long newSnapshotIndex, long newSnapshotTermIndex)\n       throws IOException {\n \n     instantiateServices();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MjQ1OQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438382459", "bodyText": "Can we rename this method to something like loadSnapshotInfo or loadSnapshotInfoFromDB?\nAlso I think we should move the logic inside reinitialize() here and call this function from reinitialize(). It feels offbeat to call reinitialize() during initialization.", "author": "hanishakoneru", "createdAt": "2020-06-10T20:14:48Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -515,13 +528,12 @@ private synchronized void computeAndUpdateLastAppliedIndex(\n     }\n   }\n \n-  public void updateLastAppliedIndexWithSnaphsotIndex() {\n+  public void updateLastAppliedIndexWithSnaphsotIndex() throws IOException {", "originalCommit": "b67cba16ecac7156620c21db959e20cfa0b0a709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzNDU1NQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438434555", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-10T22:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc1dc0789094f9c610598fc140e3c83ec1e81f5d", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\nindex 41395dc361..cb9ebc1e78 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n\n@@ -532,8 +519,25 @@ public void updateLastAppliedIndexWithSnaphsotIndex() throws IOException {\n     // This is done, as we have a check in Ratis for not throwing\n     // LeaderNotReadyException, it checks stateMachineIndex >= raftLog\n     // nextIndex (placeHolderIndex).\n-    reinitialize();\n-    LOG.info(\"LastAppliedIndex is set from TransactionInfo from OM DB as {}\",\n+\n+    OMTransactionInfo omTransactionInfo =\n+        OMTransactionInfo.readTransactionInfo(\n+            ozoneManager.getMetadataManager());\n+\n+    if (omTransactionInfo != null) {\n+      setLastAppliedTermIndex(TermIndex.newTermIndex(\n+          omTransactionInfo.getCurrentTerm(),\n+          omTransactionInfo.getTransactionIndex()));\n+      snapshotInfo.updateTermIndex(omTransactionInfo.getCurrentTerm(),\n+          omTransactionInfo.getTransactionIndex());\n+    } else {\n+      // On a newly setup OM,it will not have any transaction info in DB,\n+      // use default values.\n+      setLastAppliedTermIndex(TermIndex.newTermIndex(snapshotInfo.getTerm(),\n+          snapshotInfo.getIndex()));\n+    }\n+\n+    LOG.info(\"LastAppliedIndex is set from TransactionInfo from OM DB is {}\",\n         getLastAppliedTermIndex());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NzE5NQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438397195", "bodyText": "We should return the flushed TransactionInfo#logIndex here too. TransactionIndex returned via getLastAppliedIndex() might not have been flushed to DB yet. And logs could be purged upto this index. And if OM crashes before the transactions are flushed to disk by OMDoubleBuffer, there could be data loss.\n\nDBStore.flush() would not flush all the transactions in OMDoubleBuffer to disk, right?", "author": "hanishakoneru", "createdAt": "2020-06-10T20:43:54Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -338,20 +352,19 @@ public void unpause(long newLastAppliedSnaphsotIndex,\n   }\n \n   /**\n-   * Take OM Ratis snapshot. Write the snapshot index to file. Snapshot index\n-   * is the log index corresponding to the last applied transaction on the OM\n-   * State Machine.\n+   * Take OM Ratis snapshot is a dummy operation as when double buffer\n+   * flushes the lastAppliedIndex is flushed to DB and that is used as\n+   * snapshot index.\n    *\n    * @return the last applied index on the state machine which has been\n    * stored in the snapshot file.\n    */\n   @Override\n   public long takeSnapshot() throws IOException {\n-    LOG.info(\"Saving Ratis snapshot on the OM.\");\n-    if (ozoneManager != null) {\n-      return ozoneManager.saveRatisSnapshot().getIndex();\n-    }\n-    return 0;\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    long lastAppliedIndex = getLastAppliedTermIndex().getIndex();\n+    ozoneManager.getMetadataManager().getStore().flush();\n+    return lastAppliedIndex;", "originalCommit": "b67cba16ecac7156620c21db959e20cfa0b0a709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzMTUzMQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438431531", "bodyText": "Yes. It would not.", "author": "bharatviswa504", "createdAt": "2020-06-10T21:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NzE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzMjI4Mw==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438432283", "bodyText": "So this needs to be fixed then. Or could lead to data loss.", "author": "hanishakoneru", "createdAt": "2020-06-10T22:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NzE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzNTQ2OA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438435468", "bodyText": "Why it will lead to data loss. We are returning already flushed index, and ratis only does log purge which have been flushed to DB.", "author": "bharatviswa504", "createdAt": "2020-06-10T22:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NzE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzNTg4Mg==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438435882", "bodyText": "So, that is the reason get lastAppliedIndex first, then flush. If we change the order, it will lead to data loss.", "author": "bharatviswa504", "createdAt": "2020-06-10T22:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NzE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc1dc0789094f9c610598fc140e3c83ec1e81f5d", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\nindex 41395dc361..cb9ebc1e78 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n\n@@ -362,9 +351,7 @@ public void unpause(long newLastAppliedSnaphsotIndex,\n   @Override\n   public long takeSnapshot() throws IOException {\n     LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n-    long lastAppliedIndex = getLastAppliedTermIndex().getIndex();\n-    ozoneManager.getMetadataManager().getStore().flush();\n-    return lastAppliedIndex;\n+    return getLastAppliedTermIndex().getIndex();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5OTk4Mg==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438399982", "bodyText": "We should update the snapshotInfo also here.", "author": "hanishakoneru", "createdAt": "2020-06-10T20:49:38Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java", "diffHunk": "@@ -338,20 +352,19 @@ public void unpause(long newLastAppliedSnaphsotIndex,\n   }\n \n   /**\n-   * Take OM Ratis snapshot. Write the snapshot index to file. Snapshot index\n-   * is the log index corresponding to the last applied transaction on the OM\n-   * State Machine.\n+   * Take OM Ratis snapshot is a dummy operation as when double buffer\n+   * flushes the lastAppliedIndex is flushed to DB and that is used as\n+   * snapshot index.\n    *\n    * @return the last applied index on the state machine which has been\n    * stored in the snapshot file.\n    */\n   @Override\n   public long takeSnapshot() throws IOException {\n-    LOG.info(\"Saving Ratis snapshot on the OM.\");\n-    if (ozoneManager != null) {\n-      return ozoneManager.saveRatisSnapshot().getIndex();\n-    }\n-    return 0;\n+    LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n+    long lastAppliedIndex = getLastAppliedTermIndex().getIndex();\n+    ozoneManager.getMetadataManager().getStore().flush();", "originalCommit": "b67cba16ecac7156620c21db959e20cfa0b0a709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzNDQ5Ng==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438434496", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-10T22:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5OTk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyMjE0NA==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438922144", "bodyText": "The lastAppliedIndex returned to Ratis and updated in snapshotInfo could be different. We should call getLastAppliedTermIndex() only once and set the same value in snapshotInfo which is being returned to ratis.", "author": "hanishakoneru", "createdAt": "2020-06-11T16:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5OTk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyODU3NQ==", "url": "https://github.com/apache/ozone/pull/986#discussion_r438928575", "bodyText": "Done. Good catch.", "author": "bharatviswa504", "createdAt": "2020-06-11T16:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5OTk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fc1dc0789094f9c610598fc140e3c83ec1e81f5d", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\nindex 41395dc361..cb9ebc1e78 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerStateMachine.java\n\n@@ -362,9 +351,7 @@ public void unpause(long newLastAppliedSnaphsotIndex,\n   @Override\n   public long takeSnapshot() throws IOException {\n     LOG.info(\"Current Snapshot Index {}\", getLastAppliedTermIndex());\n-    long lastAppliedIndex = getLastAppliedTermIndex().getIndex();\n-    ozoneManager.getMetadataManager().getStore().flush();\n-    return lastAppliedIndex;\n+    return getLastAppliedTermIndex().getIndex();\n   }\n \n   /**\n"}}, {"oid": "fc1dc0789094f9c610598fc140e3c83ec1e81f5d", "url": "https://github.com/apache/ozone/commit/fc1dc0789094f9c610598fc140e3c83ec1e81f5d", "message": "HDDS-3476. Use persisted transaction info during OM startup in OM StateMachine.", "committedDate": "2020-06-10T23:56:16Z", "type": "commit"}, {"oid": "a98a43c9f5d0e6c0e6ff7fa01058ea1a2a2a8296", "url": "https://github.com/apache/ozone/commit/a98a43c9f5d0e6c0e6ff7fa01058ea1a2a2a8296", "message": "review comments", "committedDate": "2020-06-10T23:56:17Z", "type": "commit"}, {"oid": "e88b0a3cf4c01a8494c397c7ca7c1df7a0236964", "url": "https://github.com/apache/ozone/commit/e88b0a3cf4c01a8494c397c7ca7c1df7a0236964", "message": "fix checkstyle", "committedDate": "2020-06-10T23:56:17Z", "type": "commit"}, {"oid": "84298838f0d468118d5cf739fa4053ab86fac2f1", "url": "https://github.com/apache/ozone/commit/84298838f0d468118d5cf739fa4053ab86fac2f1", "message": "find bug", "committedDate": "2020-06-10T23:56:17Z", "type": "commit"}, {"oid": "5eada966ae091474b4ca0154a2fff466c895de8f", "url": "https://github.com/apache/ozone/commit/5eada966ae091474b4ca0154a2fff466c895de8f", "message": "use reinitialize and update snapshot info, as during reload sm, reinitialize is called", "committedDate": "2020-06-10T23:56:17Z", "type": "commit"}, {"oid": "959d6115664e09d0ca3119fbfbde7472b027ac4f", "url": "https://github.com/apache/ozone/commit/959d6115664e09d0ca3119fbfbde7472b027ac4f", "message": "skip few more with skip initialize flag", "committedDate": "2020-06-10T23:56:18Z", "type": "commit"}, {"oid": "aa040b9633cbda62370fa1116806a623bc27a5b8", "url": "https://github.com/apache/ozone/commit/aa040b9633cbda62370fa1116806a623bc27a5b8", "message": "add on", "committedDate": "2020-06-10T23:56:18Z", "type": "commit"}, {"oid": "bde965a8b153548f04625ae023f50c206a467eb8", "url": "https://github.com/apache/ozone/commit/bde965a8b153548f04625ae023f50c206a467eb8", "message": "review comments and test fix", "committedDate": "2020-06-10T23:56:18Z", "type": "commit"}, {"oid": "9e10eead49eec857adacf7aed25325e9dd5ffd10", "url": "https://github.com/apache/ozone/commit/9e10eead49eec857adacf7aed25325e9dd5ffd10", "message": "fix findbug", "committedDate": "2020-06-10T23:56:18Z", "type": "commit"}, {"oid": "59e59f6934f6558c313a0eacf1ab5f9f27897558", "url": "https://github.com/apache/ozone/commit/59e59f6934f6558c313a0eacf1ab5f9f27897558", "message": "check style", "committedDate": "2020-06-10T23:56:18Z", "type": "commit"}, {"oid": "32a217b7afbe2b2e507c983a38ffa7efe5b5d0db", "url": "https://github.com/apache/ozone/commit/32a217b7afbe2b2e507c983a38ffa7efe5b5d0db", "message": "Remove db path set and new config creation.", "committedDate": "2020-06-10T23:56:18Z", "type": "commit"}, {"oid": "097a8aaf8f6830fb3823af5b5f6aca33e857677c", "url": "https://github.com/apache/ozone/commit/097a8aaf8f6830fb3823af5b5f6aca33e857677c", "message": "fix checkstyle", "committedDate": "2020-06-10T23:56:19Z", "type": "commit"}, {"oid": "c6285a00b6e1b4340eb19cecc23431fc9ef1095a", "url": "https://github.com/apache/ozone/commit/c6285a00b6e1b4340eb19cecc23431fc9ef1095a", "message": "review comments", "committedDate": "2020-06-10T23:56:19Z", "type": "commit"}, {"oid": "4d9da285f66de8c37162485476fa2a9273fdf0cb", "url": "https://github.com/apache/ozone/commit/4d9da285f66de8c37162485476fa2a9273fdf0cb", "message": "checkstyle", "committedDate": "2020-06-10T23:56:19Z", "type": "commit"}, {"oid": "db7c370b22292e9d0be25443941987d2a6d20a4b", "url": "https://github.com/apache/ozone/commit/db7c370b22292e9d0be25443941987d2a6d20a4b", "message": "fix checkstyle", "committedDate": "2020-06-10T23:56:19Z", "type": "commit"}, {"oid": "db7c370b22292e9d0be25443941987d2a6d20a4b", "url": "https://github.com/apache/ozone/commit/db7c370b22292e9d0be25443941987d2a6d20a4b", "message": "fix checkstyle", "committedDate": "2020-06-10T23:56:19Z", "type": "forcePushed"}, {"oid": "73e6ed8077e8c72ae44ad9949b36d1f31aa32873", "url": "https://github.com/apache/ozone/commit/73e6ed8077e8c72ae44ad9949b36d1f31aa32873", "message": "address review comments", "committedDate": "2020-06-11T16:47:10Z", "type": "commit"}]}