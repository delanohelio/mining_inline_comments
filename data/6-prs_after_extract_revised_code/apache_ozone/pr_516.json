{"pr_number": 516, "pr_title": "HDDS-2923 Add fall-back protection for rack awareness in pipeline creation.", "pr_createdAt": "2020-02-01T17:09:20Z", "pr_url": "https://github.com/apache/ozone/pull/516", "timeline": [{"oid": "23f6c8bf2a1765635b0d097415513eed50bc1646", "url": "https://github.com/apache/ozone/commit/23f6c8bf2a1765635b0d097415513eed50bc1646", "message": "HDDS-2923 Add fall-back protection for rack awareness in pipeline creation.", "committedDate": "2020-02-01T17:05:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MTYxOA==", "url": "https://github.com/apache/ozone/pull/516#discussion_r373861618", "bodyText": "NIT: I think we can change to check positive instead and let the for loop handle the remaining node picking naturally based on the results set size.\nboolean rackAwareness = false;\nif (nextNode != null) {\n  rackAwareness = true;\n  results.add(nextNode);\n  exclude.add(nextNode);\n}", "author": "xiaoyuyao", "createdAt": "2020-02-02T17:22:20Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -241,29 +269,30 @@ boolean meetCriteria(DatanodeDetails datanodeDetails, int nodesRequired) {\n     exclude.add(anchor);\n \n     // Choose the second node on different racks from anchor.\n-    DatanodeDetails nodeOnDifferentRack = chooseNodeBasedOnRackAwareness(\n+    DatanodeDetails nextNode = chooseNodeBasedOnRackAwareness(\n         healthyNodes, exclude,\n         nodeManager.getClusterNetworkTopologyMap(), anchor);\n-    if (nodeOnDifferentRack == null) {\n-      LOG.warn(\"Pipeline Placement: Unable to find 2nd node on different \" +\n-          \"racks that meets the criteria. Required nodes: {}, Found nodes:\" +\n-          \" {}\", nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n-          SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n+    if (nextNode == null) {", "originalCommit": "23f6c8bf2a1765635b0d097415513eed50bc1646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyOTc0OA==", "url": "https://github.com/apache/ozone/pull/516#discussion_r375629748", "bodyText": "Updated.", "author": "timmylicheng", "createdAt": "2020-02-06T03:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MTYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "572195da277f70d9db62ec76a4516fd6a7692c6e", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java\nindex d3dc9631f6..9032c3020b 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java\n\n@@ -265,30 +268,28 @@ DatanodeDetails fallBackPickNodes(\n       LOG.debug(\"First node chosen: {}\", anchor);\n     }\n \n-    results.add(anchor);\n-    exclude.add(anchor);\n \n     // Choose the second node on different racks from anchor.\n     DatanodeDetails nextNode = chooseNodeBasedOnRackAwareness(\n         healthyNodes, exclude,\n         nodeManager.getClusterNetworkTopologyMap(), anchor);\n-    if (nextNode == null) {\n+    if (nextNode != null) {\n+      // Rack awareness is detected.\n+      rackAwareness = true;\n+      results.add(nextNode);\n+      exclude.add(nextNode);\n+    } else {\n       LOG.debug(\"Pipeline Placement: Unable to find 2nd node on different \" +\n           \"rack based on rack awareness.\");\n-      rackAwareness = false;\n-      nextNode = fallBackPickNodes(healthyNodes, exclude);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Second node chosen: {}\", nextNode);\n     }\n \n-    results.add(nextNode);\n-    exclude.add(nextNode);\n-\n     // Then choose nodes close to anchor based on network topology\n     int nodesToFind = nodesRequired - results.size();\n     for (int x = 0; x < nodesToFind; x++) {\n-      // invoke the choose function defined in the derived classes.\n+      // Pick remaining nodes based on the existence of rack awareness.\n       DatanodeDetails pick = rackAwareness\n           ? chooseNodeFromNetworkTopology(\n               nodeManager.getClusterNetworkTopologyMap(), anchor, exclude)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MTc5NA==", "url": "https://github.com/apache/ozone/pull/516#discussion_r373861794", "bodyText": "can we add a test simple test case with topology that all nodes on the same rack with topology aware and fall back enabled?", "author": "xiaoyuyao", "createdAt": "2020-02-02T17:24:58Z", "path": "hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestPipelinePlacementPolicy.java", "diffHunk": "@@ -83,10 +83,36 @@ public void testChooseNodeBasedOnRackAwareness() {\n     DatanodeDetails nextNode = placementPolicy.chooseNodeBasedOnRackAwareness(\n         healthyNodes, new ArrayList<>(PIPELINE_PLACEMENT_MAX_NODES_COUNT),\n         topologyWithDifRacks, anchor);\n+    Assert.assertNotNull(nextNode);\n     Assert.assertFalse(anchor.getNetworkLocation().equals(\n         nextNode.getNetworkLocation()));\n   }\n \n+  @Test", "originalCommit": "23f6c8bf2a1765635b0d097415513eed50bc1646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyOTgwMA==", "url": "https://github.com/apache/ozone/pull/516#discussion_r375629800", "bodyText": "I add a test. Please check the latest commit.", "author": "timmylicheng", "createdAt": "2020-02-06T03:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MTc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "572195da277f70d9db62ec76a4516fd6a7692c6e", "chunk": "diff --git a/hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestPipelinePlacementPolicy.java b/hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestPipelinePlacementPolicy.java\nindex e39956eedf..daad80834c 100644\n--- a/hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestPipelinePlacementPolicy.java\n+++ b/hadoop-hdds/server-scm/src/test/java/org/apache/hadoop/hdds/scm/pipeline/TestPipelinePlacementPolicy.java\n\n@@ -113,6 +113,36 @@ public void testFallBackPickNodes() {\n     }\n   }\n \n+  @Test\n+  public void testRackAwarenessNotEnabledWithFallBack() throws SCMException{\n+    List<DatanodeDetails> healthyNodes =\n+        nodeManager.getNodes(HddsProtos.NodeState.HEALTHY);\n+    DatanodeDetails anchor = placementPolicy.chooseNode(healthyNodes);\n+    DatanodeDetails randomNode = placementPolicy.chooseNode(healthyNodes);\n+    // rack awareness is not enabled.\n+    Assert.assertTrue(anchor.getNetworkLocation().equals(\n+        randomNode.getNetworkLocation()));\n+\n+    NetworkTopology topology = new NetworkTopologyImpl(new Configuration());\n+    DatanodeDetails nextNode = placementPolicy.chooseNodeBasedOnRackAwareness(\n+        healthyNodes, new ArrayList<>(PIPELINE_PLACEMENT_MAX_NODES_COUNT),\n+        topology, anchor);\n+    // RackAwareness should not be able to choose any node.\n+    Assert.assertNull(nextNode);\n+\n+    // PlacementPolicy should still be able to pick a set of 3 nodes.\n+    int numOfNodes = HddsProtos.ReplicationFactor.THREE.getNumber();\n+    List<DatanodeDetails> results = placementPolicy\n+        .getResultSet(numOfNodes, healthyNodes);\n+    \n+    Assert.assertEquals(numOfNodes, results.size());\n+    // All nodes are on same rack.\n+    Assert.assertEquals(results.get(0).getNetworkLocation(),\n+        results.get(1).getNetworkLocation());\n+    Assert.assertEquals(results.get(0).getNetworkLocation(),\n+        results.get(2).getNetworkLocation());\n+  }\n+\n   private final static Node[] NODES = new NodeImpl[] {\n       new NodeImpl(\"h1\", \"/r1\", NetConstants.NODE_COST_DEFAULT),\n       new NodeImpl(\"h2\", \"/r1\", NetConstants.NODE_COST_DEFAULT),\n"}}, {"oid": "572195da277f70d9db62ec76a4516fd6a7692c6e", "url": "https://github.com/apache/ozone/commit/572195da277f70d9db62ec76a4516fd6a7692c6e", "message": "Add tests for pipeline placement policy when rack awareness is not enaled.", "committedDate": "2020-02-06T08:26:57Z", "type": "commit"}, {"oid": "572195da277f70d9db62ec76a4516fd6a7692c6e", "url": "https://github.com/apache/ozone/commit/572195da277f70d9db62ec76a4516fd6a7692c6e", "message": "Add tests for pipeline placement policy when rack awareness is not enaled.", "committedDate": "2020-02-06T08:26:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MDU3NA==", "url": "https://github.com/apache/ozone/pull/516#discussion_r376760574", "bodyText": "Better to move this if statement into if (nextNode != null).", "author": "ChenSammi", "createdAt": "2020-02-09T07:07:41Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java", "diffHunk": "@@ -220,50 +243,57 @@ boolean meetCriteria(DatanodeDetails datanodeDetails, int nodesRequired) {\n   public List<DatanodeDetails> getResultSet(\n       int nodesRequired, List<DatanodeDetails> healthyNodes)\n       throws SCMException {\n+    if (nodesRequired != HddsProtos.ReplicationFactor.THREE.getNumber()) {\n+      throw new SCMException(\"Nodes required number is not supported: \" +\n+          nodesRequired, SCMException.ResultCodes.INVALID_CAPACITY);\n+    }\n+\n+    // Assume rack awareness is not enabled.\n+    boolean rackAwareness = false;\n     List <DatanodeDetails> results = new ArrayList<>(nodesRequired);\n     // Since nodes are widely distributed, the results should be selected\n     // base on distance in topology, rack awareness and load balancing.\n     List<DatanodeDetails> exclude = new ArrayList<>();\n     // First choose an anchor nodes randomly\n     DatanodeDetails anchor = chooseNode(healthyNodes);\n-    if (anchor == null) {\n-      LOG.warn(\"Unable to find healthy node for anchor(first) node.\" +\n-              \" Required nodes: {}, Found nodes: {}\",\n-          nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n+    if (anchor != null) {\n+      results.add(anchor);\n+      exclude.add(anchor);\n+    } else {\n+      LOG.warn(\"Unable to find healthy node for anchor(first) node.\");\n+      throw new SCMException(\"Unable to find anchor node.\",\n           SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"First node chosen: {}\", anchor);\n     }\n \n-    results.add(anchor);\n-    exclude.add(anchor);\n \n     // Choose the second node on different racks from anchor.\n-    DatanodeDetails nodeOnDifferentRack = chooseNodeBasedOnRackAwareness(\n+    DatanodeDetails nextNode = chooseNodeBasedOnRackAwareness(\n         healthyNodes, exclude,\n         nodeManager.getClusterNetworkTopologyMap(), anchor);\n-    if (nodeOnDifferentRack == null) {\n-      LOG.warn(\"Pipeline Placement: Unable to find 2nd node on different \" +\n-          \"racks that meets the criteria. Required nodes: {}, Found nodes:\" +\n-          \" {}\", nodesRequired, results.size());\n-      throw new SCMException(\"Unable to find required number of nodes.\",\n-          SCMException.ResultCodes.FAILED_TO_FIND_SUITABLE_NODE);\n+    if (nextNode != null) {\n+      // Rack awareness is detected.\n+      rackAwareness = true;\n+      results.add(nextNode);\n+      exclude.add(nextNode);\n+    } else {\n+      LOG.debug(\"Pipeline Placement: Unable to find 2nd node on different \" +\n+          \"rack based on rack awareness.\");\n     }\n     if (LOG.isDebugEnabled()) {", "originalCommit": "572195da277f70d9db62ec76a4516fd6a7692c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc3MDg4OQ==", "url": "https://github.com/apache/ozone/pull/516#discussion_r376770889", "bodyText": "Sure. Updated.", "author": "timmylicheng", "createdAt": "2020-02-09T10:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MDU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "76aefb91aff2ee12e343bd784508a02941746736", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java\nindex 9032c3020b..0f30449c97 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelinePlacementPolicy.java\n\n@@ -278,12 +278,14 @@ DatanodeDetails fallBackPickNodes(\n       rackAwareness = true;\n       results.add(nextNode);\n       exclude.add(nextNode);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Second node chosen: {}\", nextNode);\n+      }\n     } else {\n-      LOG.debug(\"Pipeline Placement: Unable to find 2nd node on different \" +\n-          \"rack based on rack awareness.\");\n-    }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Second node chosen: {}\", nextNode);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Pipeline Placement: Unable to find 2nd node on different \" +\n+            \"rack based on rack awareness.\");\n+      }\n     }\n \n     // Then choose nodes close to anchor based on network topology\n"}}, {"oid": "76aefb91aff2ee12e343bd784508a02941746736", "url": "https://github.com/apache/ozone/commit/76aefb91aff2ee12e343bd784508a02941746736", "message": "Modify debug message.", "committedDate": "2020-02-09T10:10:11Z", "type": "commit"}]}