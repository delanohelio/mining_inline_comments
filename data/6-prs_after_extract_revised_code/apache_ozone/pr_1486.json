{"pr_number": 1486, "pr_title": "HDDS-4296. SCM changes to process Layout Info in heartbeat request/response", "pr_createdAt": "2020-10-09T18:26:25Z", "pr_url": "https://github.com/apache/ozone/pull/1486", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjI4MQ==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502802281", "bodyText": "param not used here.", "author": "linyiqun", "createdAt": "2020-10-10T15:32:26Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java", "diffHunk": "@@ -107,6 +121,10 @@ public void doFinalize(Object param) {\n     }\n   }\n \n+  public void completeFinalize(Object param) {\n+    currentUpgradeState = Finalized;", "originalCommit": "6030f093d5418e59de19a7afd97bfaedc6c413da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NTgwOA==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502985808", "bodyText": "@linyiqun  thanks for the review.\nyup. I would remove it.", "author": "prashantpogde", "createdAt": "2020-10-12T00:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8053652a8927d19585c3c29cb37299451e1b5a3b", "chunk": "diff --git a/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java b/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java\nindex 92bf4bbed0..456cf7fec0 100644\n--- a/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java\n+++ b/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/AbstractLayoutVersionManager.java\n\n@@ -78,58 +77,79 @@ protected void initializeFeatures(LayoutFeature[] lfs) {\n     });\n   }\n \n+  protected void reset() {\n+    metadataLayoutVersion = 0;\n+    softwareLayoutVersion = 0;\n+    featureMap.clear();\n+    features.clear();\n+    isInitialized = false;\n+    currentUpgradeState = ALREADY_FINALIZED;\n+  }\n+\n+  public void finalized(T layoutFeature) {\n+    if (layoutFeature.layoutVersion() == metadataLayoutVersion + 1) {\n+      metadataLayoutVersion = layoutFeature.layoutVersion();\n+    } else {\n+      String msgStart = \"\";\n+      if (layoutFeature.layoutVersion() < metadataLayoutVersion) {\n+        msgStart = \"Finalize attempt on a layoutFeature which has already \"\n+            + \"been finalized.\";\n+      } else {\n+        msgStart = \"Finalize attempt on a layoutFeature that is newer than the\"\n+            + \" next feature to be finalized.\";\n+      }\n+\n+      throw new IllegalArgumentException(\n+          msgStart + \"Software Layout version: \" + softwareLayoutVersion\n+              + \" Feature Layout version: \" + layoutFeature.layoutVersion());\n+    }\n+  }\n+\n+  public void completeFinalization() {\n+    currentUpgradeState = FINALIZATION_DONE;\n+  }\n+\n+  private boolean softwareIsBehindMetaData() {\n+    return metadataLayoutVersion > softwareLayoutVersion;\n+  }\n+\n+  @Override\n   public int getMetadataLayoutVersion() {\n     return metadataLayoutVersion;\n   }\n \n+  @Override\n   public int getSoftwareLayoutVersion() {\n     return softwareLayoutVersion;\n   }\n \n+  @Override\n   public boolean needsFinalization() {\n     return metadataLayoutVersion < softwareLayoutVersion;\n   }\n \n+  @Override\n   public boolean isAllowed(LayoutFeature layoutFeature) {\n     return layoutFeature.layoutVersion() <= metadataLayoutVersion;\n   }\n \n+  @Override\n   public boolean isAllowed(String featureName) {\n     return featureMap.containsKey(featureName) &&\n         isAllowed(featureMap.get(featureName));\n   }\n \n-  public LayoutFeature getFeature(String name) {\n+  @Override\n+  public T getFeature(String name) {\n     return featureMap.get(name);\n   }\n \n-  public void doFinalize(Object param) {\n-    if (needsFinalization()){\n-      currentUpgradeState = Finalizing;\n-      Iterator<Map.Entry<Integer, LayoutFeature>> iterator = features\n-          .tailMap(metadataLayoutVersion + 1).entrySet().iterator();\n-      while (iterator.hasNext()) {\n-        Map.Entry<Integer, LayoutFeature> f = iterator.next();\n-        Optional<? extends LayoutFeature.UpgradeAction> upgradeAction =\n-            f.getValue().onFinalizeAction();\n-        upgradeAction.ifPresent(action -> action.executeAction(param));\n-        // ToDo : Handle shutdown while iterating case (resume from last\n-        //  feature).\n-        metadataLayoutVersion = f.getKey();\n-      }\n-      // ToDo : Persist new MLV.\n-    }\n-  }\n-\n-  public void completeFinalize(Object param) {\n-    currentUpgradeState = Finalized;\n-  }\n-\n-  protected void reset() {\n-    metadataLayoutVersion = 0;\n-    softwareLayoutVersion = 0;\n-    featureMap.clear();\n-    features.clear();\n-    isInitialized = false;\n+  @Override\n+  public Iterable<T> unfinalizedFeatures() {\n+    return features\n+        .tailMap(metadataLayoutVersion + 1)\n+        .values()\n+        .stream()\n+        .collect(Collectors.toList());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjUyNA==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502802524", "bodyText": "Can we use uppercase letter here, like INVALID, PRE_FINALIZE.. FINALIZED.", "author": "linyiqun", "createdAt": "2020-10-10T15:34:54Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/OzoneUpgradeState.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.upgrade;\n+\n+/**\n+ * Generic UpgradeState or Ozone.\n+ */\n+public enum OzoneUpgradeState {\n+\n+  InValid(0, \"Invalid State\"),", "originalCommit": "6030f093d5418e59de19a7afd97bfaedc6c413da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NTkyNQ==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502985925", "bodyText": "yup", "author": "prashantpogde", "createdAt": "2020-10-12T00:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "8053652a8927d19585c3c29cb37299451e1b5a3b", "chunk": "diff --git a/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/OzoneUpgradeState.java b/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/OzoneUpgradeState.java\ndeleted file mode 100644\nindex fe1e345d80..0000000000\n--- a/hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/upgrade/OzoneUpgradeState.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hadoop.ozone.upgrade;\n-\n-/**\n- * Generic UpgradeState or Ozone.\n- */\n-public enum OzoneUpgradeState {\n-\n-  InValid(0, \"Invalid State\"),\n-  PreFinalize(1, \"State if an Upgrade is due i.e. mlv != slv\"),\n-  Finalizing(2, \"State if upgrade is due and finalization has been \" +\n-      \"initiated\"),\n-  Finalized(3, \"State if upgrade is either not needed or is complete\");\n-\n-  private int currentUpgradeState;\n-  private String currentStateDescription;\n-\n-  OzoneUpgradeState(int value, String desc) {\n-    this.currentUpgradeState = value;\n-    this.currentStateDescription = desc;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjYyOA==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502802628", "bodyText": "Wrong log instance name used.", "author": "linyiqun", "createdAt": "2020-10-10T15:35:47Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/LayoutVersionReportHandler.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hdds.scm.node;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher.LayoutReportFromDatanode;\n+import org.apache.hadoop.hdds.server.events.EventHandler;\n+import org.apache.hadoop.hdds.server.events.EventPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles Node Layout Version Reports from DataNode.\n+ */\n+public class LayoutVersionReportHandler implements\n+    EventHandler<LayoutReportFromDatanode> {\n+\n+  private static final Logger LOGGER = LoggerFactory\n+      .getLogger(NodeReportHandler.class);", "originalCommit": "6030f093d5418e59de19a7afd97bfaedc6c413da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NTk4OA==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502985988", "bodyText": "yup.", "author": "prashantpogde", "createdAt": "2020-10-12T00:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "8053652a8927d19585c3c29cb37299451e1b5a3b", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/LayoutVersionReportHandler.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/LayoutVersionReportHandler.java\ndeleted file mode 100644\nindex 4b44d79f68..0000000000\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/LayoutVersionReportHandler.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hadoop.hdds.scm.node;\n-\n-import com.google.common.base.Preconditions;\n-import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n-import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher.LayoutReportFromDatanode;\n-import org.apache.hadoop.hdds.server.events.EventHandler;\n-import org.apache.hadoop.hdds.server.events.EventPublisher;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Handles Node Layout Version Reports from DataNode.\n- */\n-public class LayoutVersionReportHandler implements\n-    EventHandler<LayoutReportFromDatanode> {\n-\n-  private static final Logger LOGGER = LoggerFactory\n-      .getLogger(NodeReportHandler.class);\n-  private final NodeManager nodeManager;\n-\n-  public LayoutVersionReportHandler(NodeManager nodeManager) {\n-    Preconditions.checkNotNull(nodeManager);\n-    this.nodeManager = nodeManager;\n-  }\n-\n-  @Override\n-  public void onMessage(LayoutReportFromDatanode layoutReportFromDatanode,\n-                        EventPublisher publisher) {\n-    Preconditions.checkNotNull(layoutReportFromDatanode);\n-    DatanodeDetails dn = layoutReportFromDatanode.getDatanodeDetails();\n-    Preconditions.checkNotNull(dn, \"Layout Report is \"\n-        + \"missing DatanodeDetails.\");\n-    nodeManager\n-        .processLayoutVersionReport(dn, layoutReportFromDatanode.getReport());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzQ1MA==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502803450", "bodyText": "Here the dnSlv is returned in finalize command, is that right? should be scmSlv/scmMlv?", "author": "linyiqun", "createdAt": "2020-10-10T15:44:23Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      OzoneUpgradeState scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {\n+        LOG.error(\"Rogue data node {} in the cluster. \" +\n+                \"DataNode SoftwareLayoutVersion = {}, SCM \" +\n+                \"SoftwareLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnSlv, scmSlv);\n+      }\n+\n+      // If the datanode slv < scm slv, it can not be allowed to be part of\n+      // any pipeline. However it can be allowed to join the cluster\n+      if (dnMlv < scmMlv) {\n+        LOG.warn(\"Data node {} can not be used in any pipeline in the \" +\n+                \"cluster. \" + \"DataNode MetadataLayoutVersion = {}, SCM \" +\n+                \"MetadataLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnMlv, scmMlv);\n+\n+        // TBD: Add NEED_UPGRADE state and fill out state transitions\n+        // around this state. Fire event to move this data node to\n+        // NEED_UPGRADE state. The DataNode will be considered HEALTHY in\n+        // this state but it can not be made part of any Pipeline.\n+\n+        // Also send Finalize command to the data node. Its OK to\n+        // send Finalize command multiple times.\n+        scmNodeEventPublisher.fireEvent(SCMEvents.DATANODE_COMMAND,\n+            new CommandForDatanode<>(datanodeDetails.getUuid(),\n+                new FinalizeNewLayoutVersionCommand(true,\n+                    LayoutVersionProto.newBuilder()\n+                        .setSoftwareLayoutVersion(dnSlv)\n+                        .setMetadataLayoutVersion(dnSlv).build())));", "originalCommit": "6030f093d5418e59de19a7afd97bfaedc6c413da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjE3Ng==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502986176", "bodyText": "yes, its asking datanode to move to dnSlv because thats the software version datanode is running. Its possible that its lower than the SCM slv but dnSlv is the correct version for that particular datanode,.", "author": "prashantpogde", "createdAt": "2020-10-12T00:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "8053652a8927d19585c3c29cb37299451e1b5a3b", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\nindex 170554eb33..c56878c9b8 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\n\n@@ -427,7 +427,7 @@ public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n     if (layoutVersionReport != null) {\n       int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n       int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n-      OzoneUpgradeState scmUpgradeState =\n+      UpgradeFinalizer.Status scmUpgradeState =\n           scmLayoutVersionManager.getUpgradeState();\n       int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n       int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzc1NQ==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502803755", "bodyText": "Can we put this node into exclude list temporarily?  For the lower version, it can be tolerated by SCM. But for high version, SCM should take some action I think.\nAnother question: SCM uses heartbeat to return finalize command to DNs only during DN rolling upgrade step, right? For the normal case, it actually does nothing.", "author": "linyiqun", "createdAt": "2020-10-10T15:47:17Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      OzoneUpgradeState scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {\n+        LOG.error(\"Rogue data node {} in the cluster. \" +\n+                \"DataNode SoftwareLayoutVersion = {}, SCM \" +\n+                \"SoftwareLayoutVersion = {}\",\n+            datanodeDetails.getHostName(), dnSlv, scmSlv);", "originalCommit": "6030f093d5418e59de19a7afd97bfaedc6c413da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjYyMg==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502986622", "bodyText": "Not sure what the temporary would be. Eventually the plan is that rogue data-node would be highlighted with the Recon as well and admins would be able to take some action on such nodes.\nFor normal cases, Finalize would be a no-op for datanode.", "author": "prashantpogde", "createdAt": "2020-10-12T00:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjY5Mg==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r502986692", "bodyText": "I will upload the changes together with all review comments addressed.", "author": "prashantpogde", "createdAt": "2020-10-12T00:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMzc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8053652a8927d19585c3c29cb37299451e1b5a3b", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\nindex 170554eb33..c56878c9b8 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\n\n@@ -427,7 +427,7 @@ public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n     if (layoutVersionReport != null) {\n       int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n       int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n-      OzoneUpgradeState scmUpgradeState =\n+      UpgradeFinalizer.Status scmUpgradeState =\n           scmLayoutVersionManager.getUpgradeState();\n       int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n       int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n"}}, {"oid": "8053652a8927d19585c3c29cb37299451e1b5a3b", "url": "https://github.com/apache/ozone/commit/8053652a8927d19585c3c29cb37299451e1b5a3b", "message": "HDDS-4296. SCM changes to process Layout Info in heartbeat request/response.", "committedDate": "2020-10-21T22:40:05Z", "type": "commit"}, {"oid": "8053652a8927d19585c3c29cb37299451e1b5a3b", "url": "https://github.com/apache/ozone/commit/8053652a8927d19585c3c29cb37299451e1b5a3b", "message": "HDDS-4296. SCM changes to process Layout Info in heartbeat request/response.", "committedDate": "2020-10-21T22:40:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU0Mw==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r510187543", "bodyText": "Do we also need to add the condition (dnMLV > scmMLV) here (and at register step)?", "author": "avijayanhwx", "createdAt": "2020-10-22T14:02:39Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java", "diffHunk": "@@ -400,6 +405,66 @@ public void processNodeReport(DatanodeDetails datanodeDetails,\n     }\n   }\n \n+  /**\n+   * Process Layout Version report.\n+   *\n+   * @param datanodeDetails\n+   * @param layoutVersionReport\n+   */\n+  @Override\n+  public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n+                                LayoutVersionProto layoutVersionReport) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Processing Layout Version report from [datanode={}]\",\n+          datanodeDetails.getHostName());\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"HB is received from [datanode={}]: <json>{}</json>\",\n+          datanodeDetails.getHostName(),\n+          layoutVersionReport.toString().replaceAll(\"\\n\", \"\\\\\\\\n\"));\n+    }\n+\n+    if (layoutVersionReport != null) {\n+      int scmSlv = scmLayoutVersionManager.getSoftwareLayoutVersion();\n+      int scmMlv = scmLayoutVersionManager.getMetadataLayoutVersion();\n+      UpgradeFinalizer.Status scmUpgradeState =\n+          scmLayoutVersionManager.getUpgradeState();\n+      int dnSlv = layoutVersionReport.getSoftwareLayoutVersion();\n+      int dnMlv = layoutVersionReport.getMetadataLayoutVersion();\n+\n+      // If the data node slv is > scm slv => log error condition\n+      if (dnSlv > scmSlv) {", "originalCommit": "8053652a8927d19585c3c29cb37299451e1b5a3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTEwOA==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r510505108", "bodyText": "yes, we need the additional check here. The nodes that are already registered they will send the heartbeat when they are booted.\nI will add an end to end test case for this once the workflow is complete.", "author": "prashantpogde", "createdAt": "2020-10-22T23:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0MDE0Ng==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r511140146", "bodyText": "@prashantpogde End to End test cases make sense for integration or acceptance tests. Is it possible to add a unit test just for the SCMNodeManager.processLayoutVersion method? Since it has a few condition checks (path flows), it may be a good candidate for a unit test based on mocks.", "author": "avijayanhwx", "createdAt": "2020-10-23T20:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2ODk0MQ==", "url": "https://github.com/apache/ozone/pull/1486#discussion_r512168941", "bodyText": "yup", "author": "prashantpogde", "createdAt": "2020-10-26T18:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "389253fcc55cfe3bc90c8fb6ed312b9953ccfc3b", "chunk": "diff --git a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\nindex c56878c9b8..cd7b2ea620 100644\n--- a/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\n+++ b/hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/node/SCMNodeManager.java\n\n@@ -434,7 +434,7 @@ public void processLayoutVersionReport(DatanodeDetails datanodeDetails,\n \n       // If the data node slv is > scm slv => log error condition\n       if (dnSlv > scmSlv) {\n-        LOG.error(\"Rogue data node {} in the cluster. \" +\n+        LOG.error(\"Rogue data node in the cluster : {}. \" +\n                 \"DataNode SoftwareLayoutVersion = {}, SCM \" +\n                 \"SoftwareLayoutVersion = {}\",\n             datanodeDetails.getHostName(), dnSlv, scmSlv);\n"}}, {"oid": "389253fcc55cfe3bc90c8fb6ed312b9953ccfc3b", "url": "https://github.com/apache/ozone/commit/389253fcc55cfe3bc90c8fb6ed312b9953ccfc3b", "message": "HDDS-4296. Adding UT for processLayoutVersionReport.", "committedDate": "2020-10-29T21:50:07Z", "type": "commit"}, {"oid": "30fc20a5da6f09d05e050a7f1b929c5b5e04432b", "url": "https://github.com/apache/ozone/commit/30fc20a5da6f09d05e050a7f1b929c5b5e04432b", "message": "HDDS-4296. Fixing CI failure.", "committedDate": "2020-10-30T03:57:37Z", "type": "commit"}, {"oid": "8b4f3509cb641a7f8c112c3fdd8f3fac262c89e7", "url": "https://github.com/apache/ozone/commit/8b4f3509cb641a7f8c112c3fdd8f3fac262c89e7", "message": "HDDS-4296. Fixing CI failure part 2.", "committedDate": "2020-10-30T17:05:52Z", "type": "commit"}, {"oid": "691a5d4b7c8414e55bc3d5766946bcaa34d97a1f", "url": "https://github.com/apache/ozone/commit/691a5d4b7c8414e55bc3d5766946bcaa34d97a1f", "message": "HDDS-4296. CI failure fix part 3.", "committedDate": "2020-10-30T17:34:21Z", "type": "commit"}]}