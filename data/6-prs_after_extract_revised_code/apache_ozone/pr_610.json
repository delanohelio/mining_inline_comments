{"pr_number": 610, "pr_title": "HDDS-2929. Implement ofs://: temp directory mount", "pr_createdAt": "2020-02-27T01:37:01Z", "pr_url": "https://github.com/apache/ozone/pull/610", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NDM2Ng==", "url": "https://github.com/apache/ozone/pull/610#discussion_r385064366", "bodyText": "Is it better to have a 'DEFAULT_USER' string to replace a null input?", "author": "timmylicheng", "createdAt": "2020-02-27T11:18:27Z", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java", "diffHunk": "@@ -67,10 +75,9 @@ private void initOFSPath(String pathStr) {\n       // TODO: Compare a keyword list instead for future expansion.\n       if (firstToken.equals(OFS_MOUNT_NAME_TMP)) {\n         mountName = firstToken;\n-        // TODO: Retrieve volume and bucket of the mount from user protobuf.\n-        //  Leave them hard-coded just for now. Will be addressed in HDDS-2929\n-        volumeName = \"tempVolume\";\n-        bucketName = \"tempBucket\";\n+        // Future: retrieve volume and bucket from UserVolumeInfo\n+        volumeName = OFS_MOUNT_TMP_VOLUMENAME;\n+        bucketName = getTempMountBucketName(null);", "originalCommit": "c741140d9920858e9d339d7dbd8c4629b484e11b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyMjk0MA==", "url": "https://github.com/apache/ozone/pull/610#discussion_r385422940", "bodyText": "Thanks for the review and comment.\nYeah good point. null here doesn't have have good readability.\nAdded new function getTempMountBucketNameOfCurrentUser() in 5ed5cfa\nInitially I thought of overriding it but ended up adding a new function with a different name for even better code readability.", "author": "smengcl", "createdAt": "2020-02-27T23:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NDM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "10703f7a39e6bca0ed39f40c489525657c51eecb", "chunk": "diff --git a/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java b/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\nindex 2de51d20f6..732f8be753 100644\n--- a/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\n+++ b/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\n\n@@ -68,6 +70,18 @@\n   }\n \n   private void initOFSPath(String pathStr) {\n+    // pathStr should not have authority\n+    try {\n+      URI uri = new URI(pathStr);\n+      String authority = uri.getAuthority();\n+      if (authority != null && !authority.isEmpty()) {\n+        throw new ParseException(\"Invalid path \" + pathStr +\n+            \". Shouldn't contain authority.\");\n+      }\n+    } catch (URISyntaxException ex) {\n+      throw new ParseException(\"Failed to parse path \" + pathStr + \" as URI.\");\n+    }\n+    // tokenize\n     StringTokenizer token = new StringTokenizer(pathStr, OZONE_URI_DELIMITER);\n     int numToken = token.countTokens();\n     if (numToken > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NDcxMQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r385064711", "bodyText": "Do you mean to comment a TODO here?", "author": "timmylicheng", "createdAt": "2020-02-27T11:19:17Z", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java", "diffHunk": "@@ -67,10 +75,9 @@ private void initOFSPath(String pathStr) {\n       // TODO: Compare a keyword list instead for future expansion.\n       if (firstToken.equals(OFS_MOUNT_NAME_TMP)) {\n         mountName = firstToken;\n-        // TODO: Retrieve volume and bucket of the mount from user protobuf.\n-        //  Leave them hard-coded just for now. Will be addressed in HDDS-2929\n-        volumeName = \"tempVolume\";\n-        bucketName = \"tempBucket\";\n+        // Future: retrieve volume and bucket from UserVolumeInfo", "originalCommit": "c741140d9920858e9d339d7dbd8c4629b484e11b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyMjk3OQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r385422979", "bodyText": "Done in 5ed5cfa", "author": "smengcl", "createdAt": "2020-02-27T23:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NDcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "10703f7a39e6bca0ed39f40c489525657c51eecb", "chunk": "diff --git a/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java b/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\nindex 2de51d20f6..732f8be753 100644\n--- a/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\n+++ b/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\n\n@@ -68,6 +70,18 @@\n   }\n \n   private void initOFSPath(String pathStr) {\n+    // pathStr should not have authority\n+    try {\n+      URI uri = new URI(pathStr);\n+      String authority = uri.getAuthority();\n+      if (authority != null && !authority.isEmpty()) {\n+        throw new ParseException(\"Invalid path \" + pathStr +\n+            \". Shouldn't contain authority.\");\n+      }\n+    } catch (URISyntaxException ex) {\n+      throw new ParseException(\"Failed to parse path \" + pathStr + \" as URI.\");\n+    }\n+    // tokenize\n     StringTokenizer token = new StringTokenizer(pathStr, OZONE_URI_DELIMITER);\n     int numToken = token.countTokens();\n     if (numToken > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NTE0NQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r385065145", "bodyText": "NIT. 'conf' may be a more consistent choice of naming in Ozone repo.", "author": "timmylicheng", "createdAt": "2020-02-27T11:20:17Z", "path": "hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java", "diffHunk": "@@ -113,12 +125,12 @@ public void teardown() {\n \n   @Test\n   public void testOzoneFsServiceLoader() throws IOException {\n-    OzoneConfiguration conf = new OzoneConfiguration();\n+    OzoneConfiguration cfg = new OzoneConfiguration();", "originalCommit": "c741140d9920858e9d339d7dbd8c4629b484e11b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxODMzMw==", "url": "https://github.com/apache/ozone/pull/610#discussion_r385418333", "bodyText": "This is due to I put another conf in global. So IntelliJ is complaining this conf inside shadows the global conf in this function.\nAnyway, will rename it.", "author": "smengcl", "createdAt": "2020-02-27T22:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxODg1NQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r385418855", "bodyText": "Done in 28cedc4", "author": "smengcl", "createdAt": "2020-02-27T22:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NTE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a0416d3c43e3ead38020ac1e8116d4b6c39ba92b", "chunk": "diff --git a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java\nindex a87c759cfb..402999e10a 100644\n--- a/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java\n+++ b/hadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java\n\n@@ -125,12 +128,13 @@ public void teardown() {\n \n   @Test\n   public void testOzoneFsServiceLoader() throws IOException {\n-    OzoneConfiguration cfg = new OzoneConfiguration();\n+    OzoneConfiguration confTestLoader = new OzoneConfiguration();\n     // Note: FileSystem#loadFileSystems won't load OFS class due to META-INF\n     //  hence this workaround.\n-    cfg.set(\"fs.ofs.impl\", \"org.apache.hadoop.fs.ozone.RootedOzoneFileSystem\");\n-    Assert.assertEquals(\n-        FileSystem.getFileSystemClass(OzoneConsts.OZONE_OFS_URI_SCHEME, cfg),\n+    confTestLoader.set(\"fs.ofs.impl\",\n+        \"org.apache.hadoop.fs.ozone.RootedOzoneFileSystem\");\n+    Assert.assertEquals(FileSystem.getFileSystemClass(\n+        OzoneConsts.OZONE_OFS_URI_SCHEME, confTestLoader),\n         RootedOzoneFileSystem.class);\n   }\n \n"}}, {"oid": "10703f7a39e6bca0ed39f40c489525657c51eecb", "url": "https://github.com/apache/ozone/commit/10703f7a39e6bca0ed39f40c489525657c51eecb", "message": "Implement simple client-side only version of temp mount.\n\n1. An admin must create volume \"tmp\" with world access ACL before any user can use /tmp/\n2. When a user is trying to write under /tmp/, a bucket with that user's name will be automatically created under volume \"tmp\"\n\n(cherry picked from commit 53416c52717ad788516000831d2df96e171f4ba0)\n\nConflicts:\nhadoop-ozone/integration-test/src/test/java/org/apache/hadoop/fs/ozone/TestRootedOzoneFileSystem.java\nhadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java", "committedDate": "2020-02-28T21:19:50Z", "type": "commit"}, {"oid": "ae1623a6ce118512dd8644c71488b1c015ca37ff", "url": "https://github.com/apache/ozone/commit/ae1623a6ce118512dd8644c71488b1c015ca37ff", "message": "getBucket: Always create bucket if volumeStr matches \"tmp\". This implies that any operations that reads /tmp/ will also create bucket for that user. Tested in shell:\n\n# Prep\nbash-4.2$ ozone sh volume create tmp\nbash-4.2$ ozone sh volume getacl tmp\n[ {\n  \"type\" : \"USER\",\n  \"name\" : \"hadoop\",\n  \"aclScope\" : \"ACCESS\",\n  \"aclList\" : [ \"ALL\" ]\n}, {\n  \"type\" : \"GROUP\",\n  \"name\" : \"users\",\n  \"aclScope\" : \"ACCESS\",\n  \"aclList\" : [ \"ALL\" ]\n} ]\nbash-4.2$ ozone sh volume setacl tmp -al world::all\nAcl set successfully.\nbash-4.2$ ozone sh volume getacl tmp\n[ {\n  \"type\" : \"WORLD\",\n  \"name\" : \"WORLD\",\n  \"aclScope\" : \"ACCESS\",\n  \"aclList\" : [ \"LIST\", \"ALL\" ]\n} ]\n\n# Commands\nbash-4.2$ HADOOP_USER_NAME=user2 ozone fs -ls ofs://om/tmp/\n2020-02-20 12:02:08,931 [main] INFO rpc.RpcClient: Creating Bucket: tmp/user2\nbash-4.2$ HADOOP_USER_NAME=user1 ozone fs -put README.md ofs://om/tmp/\n2020-02-20 12:02:26,945 [main] INFO rpc.RpcClient: Creating Bucket: tmp/user1\nbash-4.2$ HADOOP_USER_NAME=user1 ozone fs -ls ofs://om/tmp/\nFound 1 items\n-rw-rw-rw-   1 user1 user1       3813 2020-02-20 12:02 ofs://om/tmp/README.md\nbash-4.2$ HADOOP_USER_NAME=user2 ozone fs -ls ofs://om/tmp/\n(empty result, proves that user1 and user2 have separate temp bucket)\n\n(cherry picked from commit dc512dcfad3bbc21f1e6e7119047edc6fd0afaf0)", "committedDate": "2020-02-28T21:19:50Z", "type": "commit"}, {"oid": "26ad79e803a85f5392548bb04acaa12448af10ae", "url": "https://github.com/apache/ozone/commit/26ad79e803a85f5392548bb04acaa12448af10ae", "message": "getTempMountBucketName: Return MD5 hash of username instead to avoid invalid characters in username for a bucket name. e.g. om/om@EXAMPLE.COM\n\n(cherry picked from commit e756323e3d8bf2cb29394bab838a7ca2e4a8118f)\n\nConflicts:\nhadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java", "committedDate": "2020-02-28T21:19:50Z", "type": "commit"}, {"oid": "e9410e763b70689c774457835e3643d74d1c3057", "url": "https://github.com/apache/ozone/commit/e9410e763b70689c774457835e3643d74d1c3057", "message": "Remove unused imports.\n\n(cherry picked from commit e83fdc4d0d663207ad957df1b8fbf7848d73e12c)", "committedDate": "2020-02-28T21:19:50Z", "type": "commit"}, {"oid": "86da4e0cd1d8e6faaa7d984cb553f074ec0787d7", "url": "https://github.com/apache/ozone/commit/86da4e0cd1d8e6faaa7d984cb553f074ec0787d7", "message": "Add OFS impl in ozonesecure docker-config for manual testing and robot tests.\n\n(cherry picked from commit 16eb066d57efd165111ada01c16dee3d25a7e904)", "committedDate": "2020-02-28T21:19:50Z", "type": "commit"}, {"oid": "c117a9875a1ce99c858dad79f28680044fe7bd72", "url": "https://github.com/apache/ozone/commit/c117a9875a1ce99c858dad79f28680044fe7bd72", "message": "Expand test to check file creation/existence.", "committedDate": "2020-02-28T21:20:12Z", "type": "commit"}, {"oid": "a0416d3c43e3ead38020ac1e8116d4b6c39ba92b", "url": "https://github.com/apache/ozone/commit/a0416d3c43e3ead38020ac1e8116d4b6c39ba92b", "message": "Rename cfg to confTestLoader.", "committedDate": "2020-02-28T21:20:12Z", "type": "commit"}, {"oid": "9eb3287314cd1ef2cdf92067bfeb09bb99731adc", "url": "https://github.com/apache/ozone/commit/9eb3287314cd1ef2cdf92067bfeb09bb99731adc", "message": "Add getTempMountBucketNameOfCurrentUser() to improve readability; improve comments.", "committedDate": "2020-02-28T21:20:12Z", "type": "commit"}, {"oid": "e00e2ab742e06cd27a3c92c52b2ea2e6e7f99156", "url": "https://github.com/apache/ozone/commit/e00e2ab742e06cd27a3c92c52b2ea2e6e7f99156", "message": "Improve comment.", "committedDate": "2020-02-28T21:20:12Z", "type": "commit"}, {"oid": "e00e2ab742e06cd27a3c92c52b2ea2e6e7f99156", "url": "https://github.com/apache/ozone/commit/e00e2ab742e06cd27a3c92c52b2ea2e6e7f99156", "message": "Improve comment.", "committedDate": "2020-02-28T21:20:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NTU1Mw==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386685553", "bodyText": "Do we create the tmp bucket even for read operation?", "author": "xiaoyuyao", "createdAt": "2020-03-02T22:19:12Z", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java", "diffHunk": "@@ -213,7 +213,9 @@ private OzoneBucket getBucket(String volumeStr, String bucketStr,\n     try {\n       bucket = proxy.getBucketDetails(volumeStr, bucketStr);\n     } catch (OMException ex) {\n-      if (createIfNotExist) {\n+      // Note: always create bucket if volumeStr matches \"tmp\" so -put works\n+      if (createIfNotExist ||\n+          volumeStr.equals(OFSPath.OFS_MOUNT_TMP_VOLUMENAME)) {", "originalCommit": "e00e2ab742e06cd27a3c92c52b2ea2e6e7f99156", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5MjQzMg==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386692432", "bodyText": "That's correct. This is my implementation decision.\nI initially only create temp bucket for write, as you would expect. Then I found Hadoop FS file write operations calls getFileStatus beforehand.", "author": "smengcl", "createdAt": "2020-03-02T22:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NTU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMjI1OA==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386722258", "bodyText": "After some discussion, we decide to let user create their temp bucket manually upon first use. i.e. ozone fs -mkdir ofs://om/tmp/", "author": "smengcl", "createdAt": "2020-03-02T23:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NTU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMjk0Nw==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386722947", "bodyText": "Addressed in 1d4164b", "author": "smengcl", "createdAt": "2020-03-02T23:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NTU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1d4164b153386c5e476f27df6420512b60894d5d", "chunk": "diff --git a/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java b/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java\nindex 5a4b4fd0a9..64f85813ff 100644\n--- a/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java\n+++ b/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/BasicRootedOzoneClientAdapterImpl.java\n\n@@ -214,8 +214,7 @@ private OzoneBucket getBucket(String volumeStr, String bucketStr,\n       bucket = proxy.getBucketDetails(volumeStr, bucketStr);\n     } catch (OMException ex) {\n       // Note: always create bucket if volumeStr matches \"tmp\" so -put works\n-      if (createIfNotExist ||\n-          volumeStr.equals(OFSPath.OFS_MOUNT_TMP_VOLUMENAME)) {\n+      if (createIfNotExist) {\n         // Note: getBucketDetails always throws BUCKET_NOT_FOUND, even if\n         // the volume doesn't exist.\n         if (ex.getResult().equals(BUCKET_NOT_FOUND)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NjE4OQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386686189", "bodyText": "How do we allow userA to access userB's tmp bucket? This may be needed for the ETL workload where an injest process run as user A and the process process run as user B.", "author": "xiaoyuyao", "createdAt": "2020-03-02T22:20:34Z", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java", "diffHunk": "@@ -44,7 +48,7 @@\n    * /vol1/buc2/dir3/key4  vol1           buc2           (empty)      dir3/key4\n    * /vol1/buc2            vol1           buc2           (empty)      (empty)\n    * /vol1                 vol1           (empty)        (empty)      (empty)\n-   * /tmp/dir3/key4        tempVolume     tempBucket     tmp          dir3/key4\n+   * /tmp/dir3/key4        tmp            <username>     tmp          dir3/key4", "originalCommit": "e00e2ab742e06cd27a3c92c52b2ea2e6e7f99156", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMzQ5Nw==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386723497", "bodyText": "As of now userA can't access userB's temp with ofs:// . Because OFSPath parses ofs://tmp/dir1/dir2 into\nvolume=tmp\nbucketname=<USER_TEMP_BUCKET_NAME>\nkey(in bucket)=dir1/dir2", "author": "smengcl", "createdAt": "2020-03-02T23:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NjE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMzg2OQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386723869", "bodyText": "I'm thinking of adding some .reserved like HDFS did to allow user to bypass the mount or add some options, if there is a need.\nAnyway this may not fit in this jira.", "author": "smengcl", "createdAt": "2020-03-03T00:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NjE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1MzgzMw==", "url": "https://github.com/apache/ozone/pull/610#discussion_r387353833", "bodyText": "agree, can you add the proposal to the design doc in the umbrella JIRA?", "author": "xiaoyuyao", "createdAt": "2020-03-03T23:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NjE4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NzczMA==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386687730", "bodyText": "why do we need to catch the exception here? This should not fail, if it does, the exception can bubble up directly.", "author": "xiaoyuyao", "createdAt": "2020-03-02T22:24:02Z", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java", "diffHunk": "@@ -174,4 +181,32 @@ public boolean isRoot() {\n   public boolean isVolume() {\n     return this.getBucketName().isEmpty() && !this.getVolumeName().isEmpty();\n   }\n+\n+  /**\n+   * Get the bucket name of temp for given username.\n+   * @param username Input user name String. Mustn't be null.\n+   * @return Username MD5 hash in hex digits.\n+   */\n+  @VisibleForTesting\n+  static String getTempMountBucketName(String username) {\n+    Preconditions.checkNotNull(username);\n+    // TODO: Improve this to \"slugify(username)-md5(username)\" for better\n+    //  readability?\n+    return DigestUtils.md5Hex(username);\n+  }\n+\n+  /**\n+   * Get the bucket name of temp for the current user from UserGroupInformation.\n+   * @return Username MD5 hash in hex digits.\n+   */\n+  @VisibleForTesting\n+  static String getTempMountBucketNameOfCurrentUser() {\n+    String username;\n+    try {\n+      username = UserGroupInformation.getCurrentUser().getUserName();\n+    } catch (IOException ex) {", "originalCommit": "e00e2ab742e06cd27a3c92c52b2ea2e6e7f99156", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMzAxNw==", "url": "https://github.com/apache/ozone/pull/610#discussion_r386723017", "bodyText": "Done in 1d4164b", "author": "smengcl", "createdAt": "2020-03-02T23:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NzczMA=="}], "type": "inlineReview", "revised_code": {"commit": "1d4164b153386c5e476f27df6420512b60894d5d", "chunk": "diff --git a/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java b/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\nindex afd9b91dd5..f7d4deddb5 100644\n--- a/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\n+++ b/hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java\n\n@@ -198,15 +202,10 @@ static String getTempMountBucketName(String username) {\n   /**\n    * Get the bucket name of temp for the current user from UserGroupInformation.\n    * @return Username MD5 hash in hex digits.\n+   * @throws IOException When UserGroupInformation.getCurrentUser() fails.\n    */\n-  @VisibleForTesting\n-  static String getTempMountBucketNameOfCurrentUser() {\n-    String username;\n-    try {\n-      username = UserGroupInformation.getCurrentUser().getUserName();\n-    } catch (IOException ex) {\n-      username = \"undefined\"; // TODO: Any better idea?\n-    }\n+  static String getTempMountBucketNameOfCurrentUser() throws IOException {\n+    String username = UserGroupInformation.getCurrentUser().getUserName();\n     return getTempMountBucketName(username);\n   }\n }\n"}}, {"oid": "1d4164b153386c5e476f27df6420512b60894d5d", "url": "https://github.com/apache/ozone/commit/1d4164b153386c5e476f27df6420512b60894d5d", "message": "Don't create temp bucket for read operations; make getTempMountBucketNameOfCurrentUser throw.", "committedDate": "2020-03-02T23:57:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NTU4OQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r389175589", "bodyText": "NIT: should we update the comment to match with the code?", "author": "xiaoyuyao", "createdAt": "2020-03-06T22:31:08Z", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java", "diffHunk": "@@ -44,7 +48,7 @@\n    * /vol1/buc2/dir3/key4  vol1           buc2           (empty)      dir3/key4\n    * /vol1/buc2            vol1           buc2           (empty)      (empty)\n    * /vol1                 vol1           (empty)        (empty)      (empty)\n-   * /tmp/dir3/key4        tempVolume     tempBucket     tmp          dir3/key4\n+   * /tmp/dir3/key4        tmp            <username>     tmp          dir3/key4", "originalCommit": "1d4164b153386c5e476f27df6420512b60894d5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MjMxMQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r389182311", "bodyText": "As discussed, will resolve in a follow up jira.", "author": "smengcl", "createdAt": "2020-03-06T22:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NTU4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NTc2NA==", "url": "https://github.com/apache/ozone/pull/610#discussion_r389175764", "bodyText": "NIT: Can we use the name directly to make it more user friendly? Given it is transparent to the ofs client access, I think it is OK as-is to avoid confliction.", "author": "xiaoyuyao", "createdAt": "2020-03-06T22:31:37Z", "path": "hadoop-ozone/ozonefs/src/main/java/org/apache/hadoop/fs/ozone/OFSPath.java", "diffHunk": "@@ -174,4 +185,27 @@ public boolean isRoot() {\n   public boolean isVolume() {\n     return this.getBucketName().isEmpty() && !this.getVolumeName().isEmpty();\n   }\n+\n+  /**\n+   * Get the bucket name of temp for given username.\n+   * @param username Input user name String. Mustn't be null.\n+   * @return Username MD5 hash in hex digits.\n+   */\n+  @VisibleForTesting\n+  static String getTempMountBucketName(String username) {\n+    Preconditions.checkNotNull(username);\n+    // TODO: Improve this to \"slugify(username)-md5(username)\" for better\n+    //  readability?\n+    return DigestUtils.md5Hex(username);", "originalCommit": "1d4164b153386c5e476f27df6420512b60894d5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4Mzg0OQ==", "url": "https://github.com/apache/ozone/pull/610#discussion_r389183849", "bodyText": "As discussed, since other users' tmp buckets aren't visible to current user via ofs://. This could be addressed when the requirement of accessing other users' temp bucket happen.\nAnd there are several related future improvements. Like:\n\nAllowing users to access all volumes (that they have access to) via a special reserved path (e.g. ofs://om/.volumes/<volume_name>/.. or ofs://om/.reserved/..). Because at the moment, tmp mount is masking the existence of volume tmp in ofs:// because of the parsing logic in OFSPath.\nAlso, admins should be able to list all volumes, not just the ones they own.\nProvide a utility in Ozone Shell to access the users' temp buckets conveniently for admins.", "author": "smengcl", "createdAt": "2020-03-06T22:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NTc2NA=="}], "type": "inlineReview", "revised_code": null}]}