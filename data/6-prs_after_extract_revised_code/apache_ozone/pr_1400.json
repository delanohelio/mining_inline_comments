{"pr_number": 1400, "pr_title": "HDDS-4141. Implement Finalize command in Ozone Manager client.", "pr_createdAt": "2020-09-04T23:03:27Z", "pr_url": "https://github.com/apache/ozone/pull/1400", "timeline": [{"oid": "e78f97ada0d09d79382d404a41da208c3c76044e", "url": "https://github.com/apache/ozone/commit/e78f97ada0d09d79382d404a41da208c3c76044e", "message": "HDDS-4141. Implement Finalize command in Ozone Manager client.\n\nServer side parts are added to be able to test out the client side.\nChanges has to come there under HDDS-4172.", "committedDate": "2020-09-04T22:04:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NTkwNA==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483955904", "bodyText": "INVALID_REQUEST is a coarse-grained result code, why not define more understandable code in OMException#ResultCodes for matching current scenario?", "author": "linyiqun", "createdAt": "2020-09-05T14:26:32Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -310,6 +311,69 @@ OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID,\n \n   ServiceInfoEx getServiceInfo() throws IOException;\n \n+  /**\n+   * Initiate metadata upgrade finalization.\n+   * This method when called, initiates finalization of Ozone Manager metadata\n+   * during an upgrade. The status returned contains the status\n+   * - ALREADY_FINALIZED with empty message list when the software layout\n+   *    version and the metadata layout version are equal\n+   * - STARTING_FINALIZATION with empty message list when the finalization\n+   *    has been started successfully\n+   * - If a finalization is already in progress, then the method throws an\n+   *    {@link OMException} with a result code INVALID_REQUEST\n+   *\n+   *\n+   * The leader Ozone Manager initiates finalization of the followers via\n+   * the Raft protocol in other Ozone Managers, and reports progress to the\n+   * client via the {@link #queryUpgradeFinalizationProgress(String, boolean)}\n+   * call.\n+   *\n+   * The follower Ozone Managers reject this request and directs the client to\n+   * the leader.\n+   *\n+   * @param upgradeClientID String identifier of the upgrade finalizer client\n+   * @return the finalization status.\n+   * @throws IOException\n+   *            when finalization is failed, or this Ozone Manager is not the\n+   *                leader.\n+   * @throws OMException\n+   *            when finalization is already in progress.\n+   */\n+  UpgradeFinalizationStatus finalizeUpgrade(\n+      String upgradeClientID\n+  ) throws IOException;\n+\n+  /**\n+   * Queries the current status of finalization.\n+   * This method when called, returns the status messages from the finalization\n+   * progress, if any. The status returned is\n+   * - FINALIZATION_IN_PROGRESS, and the messages since the last query if the\n+   *    finalization is still running\n+   * - FINALIZATION_DONE with a message list containing the messages since\n+   *    the last query, if the finalization ended but the messages were not\n+   *    yet emitted to the client.\n+   * - ALREADY_FINALIZED with an empty message list otherwise\n+   * - If finalization is not in progress, but software layout version and\n+   *    metadata layout version are different, the method will throw an\n+   *    {@link OMException} with a result code INVALID_REQUEST", "originalCommit": "e78f97ada0d09d79382d404a41da208c3c76044e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNDg3Mg==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484414872", "bodyText": "Yepp, this is an initial choice to use something that is already there, to test out the client, this should be changed with HDDS-4172 when the server side implementation is happening. I thought it is easier to add server side error message together with the real server side logic as there might be multiple values turning out to be required for clear error messages, but I can change this here if needed.", "author": "fapifta", "createdAt": "2020-09-07T12:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NTkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "697366ac5a1c145599e412566639743cac64f5d8", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java\nindex 4a41c928c..718c5c2a8 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java\n\n@@ -371,7 +371,7 @@ UpgradeFinalizationStatus finalizeUpgrade(\n    *            if finalization is needed but not yet started\n    */\n   UpgradeFinalizationStatus queryUpgradeFinalizationProgress(\n-      String upgradeClientID, boolean force\n+      String upgradeClientID, boolean takeover\n   ) throws IOException;\n \n   /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjY2Nw==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956667", "bodyText": "As I commented, FINALIZATION_REQUIRED and INVALID_REQUEST could use a better more understandable name, : ).", "author": "linyiqun", "createdAt": "2020-09-05T14:36:49Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);", "originalCommit": "e78f97ada0d09d79382d404a41da208c3c76044e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNjI3OQ==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484416279", "bodyText": "As written to the previous comments, this part of the code will be changed with the server side logic implemented where we are still experimenting with a few things. But yes error messages has to be better, though states might remain as they are just handled fully as described in the comment for the CientProtocol.proto", "author": "fapifta", "createdAt": "2020-09-07T12:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2ODQwNg==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484468406", "bodyText": "Comments makes sense to me.", "author": "linyiqun", "createdAt": "2020-09-07T14:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjY2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "697366ac5a1c145599e412566639743cac64f5d8", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex edfedc4f5..f9ff3573e 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -2630,7 +2630,7 @@ public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n     UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n         .setStatus(finalizationStatus)\n         .build();\n-    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);\n+    LOG.info(\"FinalizeUpgrade initiated by client: {}.\", upgradeClientID);\n     if (isLeader()) {\n       finalizationMsgs.add(\"Finalization started.\");\n       finalizationStatus =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjgwNg==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956806", "bodyText": "finalizeUpgrade -> FinalizeUpgrade", "author": "linyiqun", "createdAt": "2020-09-05T14:38:46Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);", "originalCommit": "e78f97ada0d09d79382d404a41da208c3c76044e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyMjgxNQ==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484422815", "bodyText": "thank you for spotting this, I am fixing it in the follow up commit I am preparing shortly.", "author": "fapifta", "createdAt": "2020-09-07T13:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NjgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "697366ac5a1c145599e412566639743cac64f5d8", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex edfedc4f5..f9ff3573e 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -2630,7 +2630,7 @@ public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n     UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n         .setStatus(finalizationStatus)\n         .build();\n-    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);\n+    LOG.info(\"FinalizeUpgrade initiated by client: {}.\", upgradeClientID);\n     if (isLeader()) {\n       finalizationMsgs.add(\"Finalization started.\");\n       finalizationStatus =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njk4OQ==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483956989", "bodyText": "force parameter is not actually used here, this parameter is related to the client takeover behavior.", "author": "linyiqun", "createdAt": "2020-09-05T14:41:05Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java", "diffHunk": "@@ -2613,6 +2615,73 @@ public ServiceInfoEx getServiceInfo() throws IOException {\n     return new ServiceInfoEx(getServiceList(), caCertPem);\n   }\n \n+  private final List<String> finalizationMsgs = new ArrayList<>();\n+  private UpgradeFinalizationStatus.Status finalizationStatus =\n+      UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED;\n+\n+  @Override\n+  public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n+      throws IOException {\n+    if (!finalizationStatus\n+        .equals(UpgradeFinalizationStatus.Status.FINALIZATION_REQUIRED)){\n+      throw new OMException(\"Finalization is not needed.\", INVALID_REQUEST);\n+    }\n+    finalizationStatus = UpgradeFinalizationStatus.Status.STARTING_FINALIZATION;\n+    UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n+        .setStatus(finalizationStatus)\n+        .build();\n+    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);\n+    if (isLeader()) {\n+      finalizationMsgs.add(\"Finalization started.\");\n+      finalizationStatus =\n+          UpgradeFinalizationStatus.Status.FINALIZATION_IN_PROGRESS;\n+\n+      new Thread(() -> {\n+        LOG.info(\"Finalization thread started.\");\n+        int i = 0;\n+        Random random = new Random(0xafaf);\n+        while (i < 50) {\n+          int rand = random.nextInt(Math.min(10, 50 - i)) + 1;\n+          synchronized (finalizationMsgs) {\n+            LOG.info(\"Emitting {} messages\", rand);\n+            for (int j = 0; j < rand; j++) {\n+              LOG.info(\"Upgrade MSG: {} - added.\", \"Message \" + i + \".\");\n+              finalizationMsgs.add(\"Message \" + i + \".\");\n+              i++;\n+            }\n+          }\n+          try {\n+            int sleep = random.nextInt(1200);\n+            LOG.info(\"Sleeping {}ms before emit messages again.\", sleep);\n+            Thread.sleep(sleep);\n+          } catch (InterruptedException e) {\n+            LOG.info(\"Finalization thread interrupted.\", e);\n+            return;\n+          }\n+        }\n+        LOG.info(\"Finalization done.\");\n+        finalizationStatus = UpgradeFinalizationStatus.Status.FINALIZATION_DONE;\n+      }, \"Finalization-Thread\").start();\n+    }\n+    return status;\n+  }\n+\n+  @Override\n+  public UpgradeFinalizationStatus queryUpgradeFinalizationProgress(\n+      String upgradeClientID, boolean force", "originalCommit": "e78f97ada0d09d79382d404a41da208c3c76044e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyMjUzNQ==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484422535", "bodyText": "In the PR that is forming for HDDS-4172 (the server side implementation), the parameter should be used to validate if we are getting the progress monitoring request from the same client, and error out if we do not.\nBut in the demo code, I haven't spent time on this part.\nOn the other hand as from the client side this has changed to be the -takeover parameter, I am renaming the parameter name to takeover here and in proto as well.", "author": "fapifta", "createdAt": "2020-09-07T13:08:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2OTI0Nw==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484469247", "bodyText": "I have seen that force has been renamed to -takeover. I will look into server side implementation in HDDS-4172 once you attach the new PR there.", "author": "linyiqun", "createdAt": "2020-09-07T14:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1Njk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "697366ac5a1c145599e412566639743cac64f5d8", "chunk": "diff --git a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\nindex edfedc4f5..f9ff3573e 100644\n--- a/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n+++ b/hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/OzoneManager.java\n\n@@ -2630,7 +2630,7 @@ public UpgradeFinalizationStatus finalizeUpgrade(String upgradeClientID)\n     UpgradeFinalizationStatus status = UpgradeFinalizationStatus.newBuilder()\n         .setStatus(finalizationStatus)\n         .build();\n-    LOG.info(\"finalizeUpgrade initiated by client: {}.\", upgradeClientID);\n+    LOG.info(\"FinalizeUpgrade initiated by client: {}.\", upgradeClientID);\n     if (isLeader()) {\n       finalizationMsgs.add(\"Finalization started.\");\n       finalizationStatus =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzE4NQ==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r483957185", "bodyText": "Sometimes users just want to query immediate upgrade status and don't want to wait and monitor finalization finished. Can we add one additionally option that we can skip monitorAndWaitFinalization?", "author": "linyiqun", "createdAt": "2020-09-05T14:43:56Z", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/FinalizeUpgradeSubCommand.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.admin.om;\n+\n+import org.apache.hadoop.hdds.cli.HddsVersionProvider;\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.apache.hadoop.ozone.om.protocol.OzoneManagerProtocol;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.UpgradeFinalizationStatus;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n+\n+/**\n+ * Handler of ozone admin om finalizeUpgrade command.\n+ */\n+@CommandLine.Command(\n+    name = \"finalizeupgrade\",\n+    description = \"Finalizes Ozone Manager's metadata changes and enables new \"\n+        + \"features after a software upgrade.\\n\"\n+        + \"It is possible to specify the service ID for an HA environment, \"\n+        + \"or the Ozone manager host in a non-HA environment, if none provided \"\n+        + \"the default from configuration is being used if not ambiguous.\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = HddsVersionProvider.class\n+)\n+public class FinalizeUpgradeSubCommand implements Callable<Void> {\n+\n+  @CommandLine.ParentCommand\n+  private OMAdmin parent;\n+\n+  @CommandLine.Option(\n+      names = {\"-id\", \"--service-id\"},\n+      description = \"Ozone Manager Service ID\"\n+  )\n+  private String omServiceId;\n+\n+  @CommandLine.Option(\n+      names = {\"-host\", \"--service-host\"},\n+      description = \"Ozone Manager Host\"\n+  )\n+  private String omHost;\n+\n+  @CommandLine.Option(\n+      names = {\"--takeover\"},\n+      description = \"Forces takeover of monitoring from an other client, if \"\n+          + \"finalization has already been started and did not finished yet.\"\n+  )\n+  private boolean force;\n+\n+  @Override\n+  public Void call() throws Exception {\n+    boolean forceHA = false;\n+    OzoneManagerProtocol client =\n+        parent.createOmClient(omServiceId, omHost, forceHA);\n+    String upgradeClientID = \"Upgrade-Client-\" + UUID.randomUUID().toString();\n+    try {\n+      UpgradeFinalizationStatus status =\n+          client.finalizeUpgrade(upgradeClientID);\n+      if (isFinalized(status)){\n+        System.out.println(\"Upgrade has already been finalized.\");\n+        emitExitMsg();\n+        return null;\n+      } else if (!isStarting(status)){\n+        System.err.println(\"Invalid response from Ozone Manager.\");\n+        System.err.println(\n+            \"Current finalization status is: \" + status.getStatus()\n+        );\n+        throw new IOException(\"Exiting...\");\n+      }\n+    } catch (OMException e) {\n+      handleInvalidRequestAfterInitiatingFinalization(e);\n+    }\n+    monitorAndWaitFinalization(client, upgradeClientID);", "originalCommit": "e78f97ada0d09d79382d404a41da208c3c76044e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxODk0Ng==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484418946", "bodyText": "There is a plan to expose the current status via JMX(HDDS-4142), would that be a sufficient way to provide this functionality?\nIf JMX is not enough to expose a queryable state, this might come in as an improvement for the client side. I am happy to implement it here but I would get back to this after the core logic is working in a separate JIRA if you don't mind, let me know if that works for you, and I will file the JIRA.", "author": "fapifta", "createdAt": "2020-09-07T13:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MDY2NA==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r484470664", "bodyText": "Yes, of course, we can address above suggestion later. That's just an improvement.", "author": "linyiqun", "createdAt": "2020-09-07T14:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NzE4NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "697366ac5a1c145599e412566639743cac64f5d8", "url": "https://github.com/apache/ozone/commit/697366ac5a1c145599e412566639743cac64f5d8", "message": "HDDS-4141. Implement Finalize command in Ozone Manager client.\n\nAddress typo in OM log message.\nIn the client, force option was renamed to takeover instead, this rename\nwas not properly done on the server side, and in the proto layer, adding\na fix for that and rename force to takeover there also.", "committedDate": "2020-09-07T13:19:05Z", "type": "commit"}, {"oid": "8721dfcee1713fcbd0300b9e30cab20310022563", "url": "https://github.com/apache/ozone/commit/8721dfcee1713fcbd0300b9e30cab20310022563", "message": "HDDS-4141. Implement Finalize command in Ozone Manager client.\n\nAdded newlines to the end of the file in package-info.java files.\nRemoved an unnecessary string concatenation from TestCleanupTableInfo.", "committedDate": "2020-09-08T10:50:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMDU3OQ==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485130579", "bodyText": "Can we confirm that this will not have a \"side effect\"? Is there a better way to do this, like passing an empty array and handling it as a special case in test?", "author": "avijayanhwx", "createdAt": "2020-09-08T18:56:05Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/upgrade/OMFinalizeUpgradeProgressResponse.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.response.upgrade;\n+\n+import org.apache.hadoop.hdds.utils.db.BatchOperation;\n+import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.OmMetadataManagerImpl;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Response for finalizeUpgradeProgress request.\n+ */\n+// yepp this will not be a write request, adding a table here to the annotation\n+// just to pass tests related to this annotation.\n+@CleanupTableInfo(cleanupTables = { OmMetadataManagerImpl.USER_TABLE })", "originalCommit": "8721dfcee1713fcbd0300b9e30cab20310022563", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTg0Mg==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485819842", "bodyText": "I already started to work on the server side, one of the first steps is to make this reguest a read request and delete this class, as read requests are handled in an other way. I can push that commit to this PR or it will be addressed in the PR coming for HDDS-4172.", "author": "fapifta", "createdAt": "2020-09-09T18:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMDU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTEyOQ==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485845129", "bodyText": "@fapifta I am Ok with handling this in a follow up patch.", "author": "avijayanhwx", "createdAt": "2020-09-09T19:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMDU3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMTI4Mg==", "url": "https://github.com/apache/ozone/pull/1400#discussion_r485131282", "bodyText": "As discussed offline, this can be a READ request. I am ok with doing it in the next patch (HDDS-4172).", "author": "avijayanhwx", "createdAt": "2020-09-08T18:57:23Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/upgrade/OMFinalizeUpgradeProgressRequest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership.  The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.hadoop.ozone.om.request.upgrade;\n+\n+import org.apache.hadoop.ozone.om.OzoneManager;\n+import org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerDoubleBufferHelper;\n+import org.apache.hadoop.ozone.om.request.OMClientRequest;\n+import org.apache.hadoop.ozone.om.request.util.OmResponseUtil;\n+import org.apache.hadoop.ozone.om.response.OMClientResponse;\n+import org.apache.hadoop.ozone.om.response.upgrade.OMFinalizeUpgradeProgressResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.FinalizeUpgradeProgressRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.FinalizeUpgradeProgressResponse;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;\n+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.UpgradeFinalizationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Handles finalizeUpgradeProgress request that serves to query the status\n+ * of the async finalization progress.\n+ */\n+public class OMFinalizeUpgradeProgressRequest extends OMClientRequest {", "originalCommit": "8721dfcee1713fcbd0300b9e30cab20310022563", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}