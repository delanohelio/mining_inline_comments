{"pr_number": 859, "pr_title": "HDDS-3465. OM Failover retry happens too quickly when new leader suggested and retrying on same OM.", "pr_createdAt": "2020-04-23T01:42:01Z", "pr_url": "https://github.com/apache/ozone/pull/859", "timeline": [{"oid": "2e8aefeea5917dd9e60844c239b8f630947103c0", "url": "https://github.com/apache/ozone/commit/2e8aefeea5917dd9e60844c239b8f630947103c0", "message": "HDDS-3465. OM Failover retry happens too quickly when new leader suggested and retrying on same OM", "committedDate": "2020-04-23T01:34:48Z", "type": "commit"}, {"oid": "0f37a8c73fe26e5fff7978e79968fbcc17be0152", "url": "https://github.com/apache/ozone/commit/0f37a8c73fe26e5fff7978e79968fbcc17be0152", "message": "HDDS-3465. OM Failover retry happens too quickly when new leader suggested and retrying on same OM", "committedDate": "2020-04-23T05:14:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1ODIxMw==", "url": "https://github.com/apache/ozone/pull/859#discussion_r413558213", "bodyText": "This method tests wait time with both same node and other node failover.  I think these should be separate test cases, both for independence and to match test method name.", "author": "adoroszlai", "createdAt": "2020-04-23T06:55:15Z", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.ha;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT;\n+\n+/**\n+ * Test OMFailoverProxyProvider failover behaviour.\n+ */\n+public class TestOMFailoverProxyProvider {\n+  private final static String OM_SERVICE_ID = \"om-service-test1\";\n+  private final static String NODE_ID_BASE_STR = \"omNode-\";\n+  private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n+\n+  /**\n+   * 1. Create FailoverProvider with 3 OMs.\n+   * 2. Try failover to different node: WaitTime should be 0.\n+   * 3. Try failover to same node: wiatTime should increment\n+   * attempts*waitBetweenRetries\n+   */\n+  @Test\n+  public void testWaitTimeWithSameNodeFailover() throws IOException {", "originalCommit": "0f37a8c73fe26e5fff7978e79968fbcc17be0152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2OTE2NA==", "url": "https://github.com/apache/ozone/pull/859#discussion_r414169164", "bodyText": "@adoroszlai , Thank you for reviews. I have refactored tests and added few more cases. Please take a look at it.", "author": "umamaheswararao", "createdAt": "2020-04-23T22:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1ODIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "510f511b12473edf493ac7ff3e5664b53c2c9c2c", "chunk": "diff --git a/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java b/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\nindex 6d9af0b60..6ad2d7402 100644\n--- a/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\n+++ b/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\n\n@@ -19,8 +19,9 @@\n \n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.Before;\n \n-import java.io.IOException;\n+import java.util.StringJoiner;\n \n import org.apache.hadoop.security.UserGroupInformation;\n import org.apache.hadoop.ozone.OmUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1OTA1Mw==", "url": "https://github.com/apache/ozone/pull/859#discussion_r413559053", "bodyText": "Would be nice to avoid duplication by setting up nodes in a loop (and preferably in a helper method).", "author": "adoroszlai", "createdAt": "2020-04-23T06:56:50Z", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.ha;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT;\n+\n+/**\n+ * Test OMFailoverProxyProvider failover behaviour.\n+ */\n+public class TestOMFailoverProxyProvider {\n+  private final static String OM_SERVICE_ID = \"om-service-test1\";\n+  private final static String NODE_ID_BASE_STR = \"omNode-\";\n+  private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n+\n+  /**\n+   * 1. Create FailoverProvider with 3 OMs.\n+   * 2. Try failover to different node: WaitTime should be 0.\n+   * 3. Try failover to same node: wiatTime should increment\n+   * attempts*waitBetweenRetries\n+   */\n+  @Test\n+  public void testWaitTimeWithSameNodeFailover() throws IOException {\n+    String nodeId1 = NODE_ID_BASE_STR + 1;\n+    String nodeId2 = NODE_ID_BASE_STR + 2;\n+    String nodeId3 = NODE_ID_BASE_STR + 3;\n+    OzoneConfiguration config = new OzoneConfiguration();\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_NODES_KEY, OM_SERVICE_ID),\n+        String.join(\",\", nodeId1, nodeId2, nodeId3));\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_ADDRESS_KEY, OM_SERVICE_ID,\n+        nodeId1), DUMMY_NODE_ADDR);\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_ADDRESS_KEY, OM_SERVICE_ID,\n+        nodeId2), DUMMY_NODE_ADDR);\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_ADDRESS_KEY, OM_SERVICE_ID,\n+        nodeId3), DUMMY_NODE_ADDR);", "originalCommit": "0f37a8c73fe26e5fff7978e79968fbcc17be0152", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "510f511b12473edf493ac7ff3e5664b53c2c9c2c", "chunk": "diff --git a/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java b/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\nindex 6d9af0b60..6ad2d7402 100644\n--- a/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\n+++ b/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\n\n@@ -19,8 +19,9 @@\n \n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.Before;\n \n-import java.io.IOException;\n+import java.util.StringJoiner;\n \n import org.apache.hadoop.security.UserGroupInformation;\n import org.apache.hadoop.ozone.OmUtils;\n"}}, {"oid": "510f511b12473edf493ac7ff3e5664b53c2c9c2c", "url": "https://github.com/apache/ozone/commit/510f511b12473edf493ac7ff3e5664b53c2c9c2c", "message": "HDDS-3465. OM Failover retry happens too quickly when new leader suggested and retrying on same OM.: Added few more tests and fixed comments.", "committedDate": "2020-04-23T22:18:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyNzE0MQ==", "url": "https://github.com/apache/ozone/pull/859#discussion_r414327141", "bodyText": "It seems this is basically the same test case as testWaitTimeResetWhenNextNodeFailoverAfterSameNode.  If you agree, I think we can drop this one.", "author": "adoroszlai", "createdAt": "2020-04-24T06:28:50Z", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.ha;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.Before;\n+\n+import java.util.StringJoiner;\n+\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT;\n+\n+/**\n+ * Tests OMFailoverProxyProvider failover behaviour.\n+ */\n+public class TestOMFailoverProxyProvider {\n+  private final static String OM_SERVICE_ID = \"om-service-test1\";\n+  private final static String NODE_ID_BASE_STR = \"omNode-\";\n+  private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n+  private OMFailoverProxyProvider provider;\n+  private long waitBetweenRetries;\n+\n+  @Before\n+  public void init() throws Exception {\n+    OzoneConfiguration config = new OzoneConfiguration();\n+    long numNodes = 3;\n+    waitBetweenRetries = config.getLong(\n+        OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY,\n+        OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT);\n+    StringJoiner allNodeIds = new StringJoiner(\",\");\n+    for (int i = 1; i <= numNodes; i++) {\n+      String nodeId = NODE_ID_BASE_STR + i;\n+      config.set(OmUtils.addKeySuffixes(OZONE_OM_ADDRESS_KEY, OM_SERVICE_ID,\n+          nodeId), DUMMY_NODE_ADDR);\n+      allNodeIds.add(nodeId);\n+    }\n+    config.set(OmUtils.addKeySuffixes(OZONE_OM_NODES_KEY, OM_SERVICE_ID),\n+        allNodeIds.toString());\n+    provider = new OMFailoverProxyProvider(config,\n+        UserGroupInformation.getCurrentUser(), OM_SERVICE_ID);\n+  }\n+\n+  /**\n+   * Tests waitTime when fail over to next node.\n+   */\n+  @Test\n+  public void testWaitTimeWithNextNode() {\n+    failoverToNextNode(2, 0);\n+    // After 3 attempts done, wait time should be waitBetweenRetries.\n+    failoverToNextNode(1, waitBetweenRetries);\n+    // From 4th Attempt waitTime should reset to 0.\n+    failoverToNextNode(2, 0);\n+    // After 2nd round of 3attempts done, wait time should be\n+    // waitBetweenRetries.\n+    failoverToNextNode(1, waitBetweenRetries);\n+  }\n+\n+  /**\n+   * 1. Try failover to same node: wiatTime should increment\n+   * attempts*waitBetweenRetries.\n+   * 2. Try failover to next node: waitTime should be 0.\n+   */\n+  @Test\n+  public void testWaitTimeWithSameNodeFailover() {\n+    // Failover attempt 1 to same OM, waitTime should increase.\n+    failoverToSameNode(4);\n+    // 2 same node failovers, waitTime should be 0.\n+    failoverToNextNode(2, 0);\n+  }", "originalCommit": "510f511b12473edf493ac7ff3e5664b53c2c9c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb61f5501508fd0a593d58e3da08eef70ddd5539", "chunk": "diff --git a/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java b/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\nindex 6ad2d7402..7abe7c0b2 100644\n--- a/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\n+++ b/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\n\n@@ -43,11 +43,11 @@\n   private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n   private OMFailoverProxyProvider provider;\n   private long waitBetweenRetries;\n+  private int numNodes = 3;\n \n   @Before\n   public void init() throws Exception {\n     OzoneConfiguration config = new OzoneConfiguration();\n-    long numNodes = 3;\n     waitBetweenRetries = config.getLong(\n         OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY,\n         OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyOTY3MA==", "url": "https://github.com/apache/ozone/pull/859#discussion_r414329670", "bodyText": "A couple of test cases depend on this value by attempting 2 failovers to next node.  I think it should be a member variable and tests should use failoverToNextNode(numNodes - 1, 0) instead of failoverToNextNode(2, 0).\nNote that failoverToSameNode(2) should be kept as is, since in that case the failover number is arbitrary.", "author": "adoroszlai", "createdAt": "2020-04-24T06:34:43Z", "path": "hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.om.ha;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.Before;\n+\n+import java.util.StringJoiner;\n+\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.hadoop.ozone.OmUtils;\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_ADDRESS_KEY;\n+import static org.apache.hadoop.ozone.om.OMConfigKeys.OZONE_OM_NODES_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY;\n+import static org.apache.hadoop.ozone.OzoneConfigKeys.\n+    OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT;\n+\n+/**\n+ * Tests OMFailoverProxyProvider failover behaviour.\n+ */\n+public class TestOMFailoverProxyProvider {\n+  private final static String OM_SERVICE_ID = \"om-service-test1\";\n+  private final static String NODE_ID_BASE_STR = \"omNode-\";\n+  private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n+  private OMFailoverProxyProvider provider;\n+  private long waitBetweenRetries;\n+\n+  @Before\n+  public void init() throws Exception {\n+    OzoneConfiguration config = new OzoneConfiguration();\n+    long numNodes = 3;", "originalCommit": "510f511b12473edf493ac7ff3e5664b53c2c9c2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5Mjg1Ng==", "url": "https://github.com/apache/ozone/pull/859#discussion_r414392856", "bodyText": "Hay Attila, Thanks for reviews. It make sense to make it member variable. I remember I extracted it for the purpose and lost that. BTW, that variable should be int, not long. Just updated that too.\nTake a look.\nAnd the pr test failures seems unrelated, I had a quick look.", "author": "umamaheswararao", "createdAt": "2020-04-24T08:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyOTY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "cb61f5501508fd0a593d58e3da08eef70ddd5539", "chunk": "diff --git a/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java b/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\nindex 6ad2d7402..7abe7c0b2 100644\n--- a/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\n+++ b/hadoop-ozone/common/src/test/java/org/apache/hadoop/ozone/om/ha/TestOMFailoverProxyProvider.java\n\n@@ -43,11 +43,11 @@\n   private final static String DUMMY_NODE_ADDR = \"0.0.0.0:8080\";\n   private OMFailoverProxyProvider provider;\n   private long waitBetweenRetries;\n+  private int numNodes = 3;\n \n   @Before\n   public void init() throws Exception {\n     OzoneConfiguration config = new OzoneConfiguration();\n-    long numNodes = 3;\n     waitBetweenRetries = config.getLong(\n         OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_KEY,\n         OZONE_CLIENT_WAIT_BETWEEN_RETRIES_MILLIS_DEFAULT);\n"}}, {"oid": "cb61f5501508fd0a593d58e3da08eef70ddd5539", "url": "https://github.com/apache/ozone/commit/cb61f5501508fd0a593d58e3da08eef70ddd5539", "message": "Few test nits", "committedDate": "2020-04-24T08:21:14Z", "type": "commit"}, {"oid": "098094e02aebb7d128c2935c7e70b5a99460b506", "url": "https://github.com/apache/ozone/commit/098094e02aebb7d128c2935c7e70b5a99460b506", "message": "trigger new CI check", "committedDate": "2020-04-24T09:37:12Z", "type": "commit"}, {"oid": "49c370a2f4d09358011dc8af51327de2ac921830", "url": "https://github.com/apache/ozone/commit/49c370a2f4d09358011dc8af51327de2ac921830", "message": "trigger new CI check", "committedDate": "2020-04-24T11:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMTc1OA==", "url": "https://github.com/apache/ozone/pull/859#discussion_r414831758", "bodyText": "We are updating lastAttemptedOM to the new OM which will be tried after failover. The assignment should happen before the currentProxyOMNodeId is updated with newLeaderOMNodeId.", "author": "hanishakoneru", "createdAt": "2020-04-24T20:05:21Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/ha/OMFailoverProxyProvider.java", "diffHunk": "@@ -318,9 +318,12 @@ synchronized boolean updateLeaderOMNodeId(String newLeaderOMNodeId) {\n     if (!currentProxyOMNodeId.equals(newLeaderOMNodeId)) {\n       if (omProxies.containsKey(newLeaderOMNodeId)) {\n         currentProxyOMNodeId = newLeaderOMNodeId;\n+        lastAttemptedOM = currentProxyOMNodeId;", "originalCommit": "49c370a2f4d09358011dc8af51327de2ac921830", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4MDE5NA==", "url": "https://github.com/apache/ozone/pull/859#discussion_r414880194", "bodyText": "@hanishakoneru good catch. I added new test to cover this case too. Please take a look at it.", "author": "umamaheswararao", "createdAt": "2020-04-24T21:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMTc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "e6155028e2ff281809ee5e3f1adadb12e2eac62f", "chunk": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/ha/OMFailoverProxyProvider.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/ha/OMFailoverProxyProvider.java\nindex 29b5a5a89..ec691755e 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/ha/OMFailoverProxyProvider.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/ha/OMFailoverProxyProvider.java\n\n@@ -317,8 +317,8 @@ private synchronized int incrementProxyIndex() {\n   synchronized boolean updateLeaderOMNodeId(String newLeaderOMNodeId) {\n     if (!currentProxyOMNodeId.equals(newLeaderOMNodeId)) {\n       if (omProxies.containsKey(newLeaderOMNodeId)) {\n-        currentProxyOMNodeId = newLeaderOMNodeId;\n         lastAttemptedOM = currentProxyOMNodeId;\n+        currentProxyOMNodeId = newLeaderOMNodeId;\n         currentProxyIndex = omNodeIDList.indexOf(currentProxyOMNodeId);\n         return true;\n       }\n"}}, {"oid": "e6155028e2ff281809ee5e3f1adadb12e2eac62f", "url": "https://github.com/apache/ozone/commit/e6155028e2ff281809ee5e3f1adadb12e2eac62f", "message": "Fixed a comment and added a test case to capture the case.", "committedDate": "2020-04-24T21:34:04Z", "type": "commit"}, {"oid": "356704465858b7184bfad24f62b43779372874a1", "url": "https://github.com/apache/ozone/commit/356704465858b7184bfad24f62b43779372874a1", "message": "Merge branch 'HDDS-3465' of https://github.com/umamaheswararao/hadoop-ozone into HDDS-3465", "committedDate": "2020-04-24T21:36:39Z", "type": "commit"}]}