{"pr_number": 1628, "pr_title": "HDDS-4506. Support query parameter based v4 auth in S3g", "pr_createdAt": "2020-11-25T14:57:16Z", "pr_url": "https://github.com/apache/ozone/pull/1628", "timeline": [{"oid": "edbd68c7e8b1982a0439a75298668bb021a9807f", "url": "https://github.com/apache/ozone/commit/edbd68c7e8b1982a0439a75298668bb021a9807f", "message": "HDDS-4506. Support query parameter based v4 auth in S3g", "committedDate": "2020-11-25T09:36:22Z", "type": "commit"}, {"oid": "675b49abf493ab6ee43a707de0f956469bc469c3", "url": "https://github.com/apache/ozone/commit/675b49abf493ab6ee43a707de0f956469bc469c3", "message": "fix unit tests and v2 parser", "committedDate": "2020-11-25T10:32:08Z", "type": "commit"}, {"oid": "04b230dfae488ac8f592398fe9fa6fe82b461331", "url": "https://github.com/apache/ozone/commit/04b230dfae488ac8f592398fe9fa6fe82b461331", "message": "fix rat and checkstyle problems", "committedDate": "2020-11-25T14:53:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5Njc3OA==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r538896778", "bodyText": "https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\nThis has X-Amz-Expires, we are not considering this param", "author": "bharatviswa504", "createdAt": "2020-12-08T23:49:59Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4QueryParser.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.s3.signature;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.signature.SignatureInfo.Version;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Parser for getting auth info from query parameters.\n+ * <p>\n+ * See: https://docs.aws.amazon\n+ * .com/AmazonS3/latest/API/sigv4-query-string-auth.html\n+ */\n+public class AuthorizationV4QueryParser implements SignatureParser {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AuthorizationV4QueryParser.class);\n+\n+  private final MultivaluedMap<String, String> queryParameters;\n+\n+  public AuthorizationV4QueryParser(\n+      MultivaluedMap<String, String> queryParameters\n+  ) {\n+    this.queryParameters = queryParameters;\n+  }\n+\n+  @Override\n+  public SignatureInfo parseSignature() throws OS3Exception {\n+\n+    if (!queryParameters.containsKey(\"X-Amz-Signature\")) {\n+      return null;\n+    }\n+\n+    Credential credential =\n+        new Credential(queryParameters.getFirst(\"X-Amz-Credential\"));\n+\n+    return new SignatureInfo(\n+        Version.V4,\n+        queryParameters.getFirst(\"X-Amz-Date\"),\n+        credential.getAccessKeyID(),", "originalCommit": "04b230dfae488ac8f592398fe9fa6fe82b461331", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4938f6d977b5408341b2b307bbee85f0a397839", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4QueryParser.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4QueryParser.java\nindex 7106c36d0b..b81d6c0500 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4QueryParser.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4QueryParser.java\n\n@@ -18,10 +18,12 @@\n package org.apache.hadoop.ozone.s3.signature;\n \n import javax.ws.rs.core.MultivaluedMap;\n+import java.time.ZonedDateTime;\n \n import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n import org.apache.hadoop.ozone.s3.signature.SignatureInfo.Version;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5ODM3Mg==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r538898372", "bodyText": "AuthorizationV4HeaderParser.IDENTIFIER=AWS4", "author": "bharatviswa504", "createdAt": "2020-12-08T23:54:02Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4HeaderParser.java", "diffHunk": "@@ -1,86 +1,78 @@\n /**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership.  The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n  * <p>\n  * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n+package org.apache.hadoop.ozone.s3.signature;\n \n-package org.apache.hadoop.ozone.s3.header;\n-\n+import java.time.LocalDate;\n+import java.util.Collection;\n \n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Preconditions;\n-import org.apache.commons.codec.DecoderException;\n-import org.apache.commons.codec.binary.Hex;\n import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n import org.apache.hadoop.ozone.s3.exception.S3ErrorTable;\n+import org.apache.hadoop.ozone.s3.signature.SignatureInfo.Version;\n import org.apache.hadoop.util.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.time.LocalDate;\n-import java.util.Collection;\n \n+import com.google.common.annotations.VisibleForTesting;\n import static java.time.temporal.ChronoUnit.DAYS;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Hex;\n import static org.apache.commons.lang3.StringUtils.isEmpty;\n import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.MALFORMED_HEADER;\n-import static org.apache.hadoop.ozone.s3.AWSSignatureProcessor.AWS4_SIGNING_ALGORITHM;\n-import static org.apache.hadoop.ozone.s3.AWSSignatureProcessor.DATE_FORMATTER;\n+import static org.apache.hadoop.ozone.s3.signature.SignatureProcessor.AWS4_SIGNING_ALGORITHM;\n+import static org.apache.hadoop.ozone.s3.signature.SignatureProcessor.DATE_FORMATTER;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n- * S3 Authorization header.\n- * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using\n- * -authorization-header.html\n+ * Class to parse v4 auth information from header.\n  */\n-public class AuthorizationHeaderV4 {\n+public class AuthorizationV4HeaderParser implements SignatureParser {\n \n-  private final static Logger LOG = LoggerFactory.getLogger(\n-      AuthorizationHeaderV4.class);\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AuthorizationV4HeaderParser.class);\n \n   private final static String CREDENTIAL = \"Credential=\";\n   private final static String SIGNEDHEADERS = \"SignedHeaders=\";\n   private final static String SIGNATURE = \"Signature=\";\n \n   private String authHeader;\n-  private String algorithm;\n-  private String credential;\n-  private String signedHeadersStr;\n-  private String signature;\n-  private Credential credentialObj;\n-  private Collection<String> signedHeaders;\n \n-  /**\n-   * Construct AuthorizationHeader object.\n-   * @param header\n-   */\n-  public AuthorizationHeaderV4(String header) throws OS3Exception {\n-    Preconditions.checkNotNull(header);\n-    this.authHeader = header;\n-    parseAuthHeader();\n+  public AuthorizationV4HeaderParser(String authHeader) {\n+    this.authHeader = authHeader;\n   }\n \n   /**\n    * This method parses authorization header.\n+   * <p>\n+   * Authorization Header sample:\n+   * AWS4-HMAC-SHA256 Credential=AKIAJWFJK62WUTKNFJJA/20181009/us-east-1/s3\n+   * /aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date,\n+   * Signature\n+   * =db81b057718d7c1b3b8dffa29933099551c51d787b3b13b9e0f9ebed45982bf2\n    *\n-   *  Authorization Header sample:\n-   *  AWS4-HMAC-SHA256 Credential=AKIAJWFJK62WUTKNFJJA/20181009/us-east-1/s3\n-   *  /aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date,\n-   * Signature=db81b057718d7c1b3b8dffa29933099551c51d787b3b13b9e0f9ebed45982bf2\n    * @throws OS3Exception\n    */\n   @SuppressWarnings(\"StringSplitter\")\n-  public void parseAuthHeader() throws OS3Exception {\n+  @Override\n+  public SignatureInfo parseSignature() throws OS3Exception {\n+    if (authHeader == null || authHeader\n+        .startsWith(AuthorizationV2HeaderParser.IDENTIFIER + \" \")) {", "originalCommit": "04b230dfae488ac8f592398fe9fa6fe82b461331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5ODYxMw==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r538898613", "bodyText": "V2 starts with AWS, V4 Starts with AWS4", "author": "bharatviswa504", "createdAt": "2020-12-08T23:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5ODM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7dfd70591fb01379584d0801dd2b3a3c66a35a15", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4HeaderParser.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4HeaderParser.java\nindex d644e0535d..577d173624 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4HeaderParser.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AuthorizationV4HeaderParser.java\n\n@@ -69,8 +69,7 @@ public AuthorizationV4HeaderParser(String authHeader) {\n   @SuppressWarnings(\"StringSplitter\")\n   @Override\n   public SignatureInfo parseSignature() throws OS3Exception {\n-    if (authHeader == null || authHeader\n-        .startsWith(AuthorizationV2HeaderParser.IDENTIFIER + \" \")) {\n+    if (authHeader == null || !authHeader.startsWith(\"AWS4 \")) {\n       return null;\n     }\n     int firstSep = authHeader.indexOf(' ');\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwNzkwMg==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r538907902", "bodyText": "Can we combine this method and below.\nAnd also can we call this method like createStringToSign, it is confusing as it says createSignatureBase IMO.", "author": "bharatviswa504", "createdAt": "2020-12-09T00:18:22Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.s3.signature;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.io.UnsupportedEncodingException;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.LocalDate;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.signature.AWSSignatureProcessor.LowerCaseKeyStringMap;\n+import org.apache.hadoop.util.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.S3_AUTHINFO_CREATION_ERROR;\n+import org.apache.kerby.util.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Stateless utility to create stringToSign, the base of the signature.\n+ */\n+public final class StringToSignProducer {\n+\n+  public static final String X_AMZ_CONTENT_SHA256 = \"X-Amz-Content-SHA256\";\n+  public static final String X_AMAZ_DATE = \"X-Amz-Date\";\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StringToSignProducer.class);\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+  private static final String NEWLINE = \"\\n\";\n+  private static final String HOST = \"host\";\n+  private static final String UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\n+  /**\n+   * Seconds in a week, which is the max expiration time Sig-v4 accepts.\n+   */\n+  private static final long PRESIGN_URL_MAX_EXPIRATION_SECONDS =\n+      60 * 60 * 24 * 7;\n+  private static final DateTimeFormatter TIME_FORMATTER =\n+      DateTimeFormatter.ofPattern(\"yyyyMMdd'T'HHmmss'Z'\")\n+          .withZone(ZoneOffset.UTC);\n+\n+  private StringToSignProducer() {\n+  }\n+\n+  public static String createSignatureBase(\n+      SignatureInfo signatureInfo,\n+      ContainerRequestContext context\n+  ) throws Exception {\n+    return createSignatureBase(signatureInfo,", "originalCommit": "04b230dfae488ac8f592398fe9fa6fe82b461331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NDM1OA==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r539174358", "bodyText": "Sure, we can. But I kept them separated to make them more testable with separating the logic to extract information from the logic to create the sign.\nI added the @VisibleForTesting annotation and simplified the test (mocks are removed) to show this concept, but I am open to merge it if you don't like it.\n(See 48676ea0b)", "author": "elek", "createdAt": "2020-12-09T10:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwNzkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "fc481a313b5374d47d16e83a09db95d71abde81e", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\nindex 2ce89f50d3..f982a0aff0 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\n\n@@ -87,12 +87,13 @@ public static String createSignatureBase(\n         context.getUriInfo().getQueryParameters());\n   }\n \n+  @VisibleForTesting\n   public static String createSignatureBase(\n       SignatureInfo signatureInfo,\n       String scheme,\n       String method,\n       String uri,\n-      Map<String, String> headers,\n+      LowerCaseKeyStringMap headers,\n       MultivaluedMap<String, String> queryParams\n   ) throws Exception {\n     StringBuilder strToSign = new StringBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxNTQ0Nw==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r538915447", "bodyText": "Here the debug is removed, do we want to add the same when OS3Exception also?", "author": "bharatviswa504", "createdAt": "2020-12-09T00:38:44Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java", "diffHunk": "@@ -130,14 +139,29 @@ private OzoneClient getClient(OzoneConfiguration config)\n     } catch (Throwable t) {\n       // For any other critical errors during object creation throw Internal\n       // error.\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Error during Client Creation: \", t);\n-      }\n+      //      if (LOG.isDebugEnabled()) {", "originalCommit": "04b230dfae488ac8f592398fe9fa6fe82b461331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NzI0OQ==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r539177249", "bodyText": "Good, question. I am thinking what supposed to be the right error handling.\nAFAIK all of these exceptions are related to the user / input errors. They are not really application errors. User errors are not required to be logged, IMHO a permission denied is part of the normal business.\nI would restore the LOG.isDebugEnabled() here, if you agree...  (8fe1202)", "author": "elek", "createdAt": "2020-12-09T10:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxNTQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8fe1202da1e261ce096f556b76bdcd1787bdacdb", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java\nindex dc9c3e4338..6e3db73004 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java\n\n@@ -139,9 +139,9 @@ private OzoneClient getClient(OzoneConfiguration config)\n     } catch (Throwable t) {\n       // For any other critical errors during object creation throw Internal\n       // error.\n-      //      if (LOG.isDebugEnabled()) {\n-      LOG.error(\"Error during Client Creation: \", t);\n-      //      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.error(\"Error during Client Creation: \", t);\n+      }\n       throw INTERNAL_ERROR;\n     }\n     return ozoneClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMDQ2Ng==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r538920466", "bodyText": "Minor: Move this also inside isDebugEnabled, here it is string, I believe we don't require LOG.isDebugEnabled() right?", "author": "bharatviswa504", "createdAt": "2020-12-09T00:51:44Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.s3.signature;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.io.UnsupportedEncodingException;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.LocalDate;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.signature.AWSSignatureProcessor.LowerCaseKeyStringMap;\n+import org.apache.hadoop.util.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.S3_AUTHINFO_CREATION_ERROR;\n+import org.apache.kerby.util.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Stateless utility to create stringToSign, the base of the signature.\n+ */\n+public final class StringToSignProducer {\n+\n+  public static final String X_AMZ_CONTENT_SHA256 = \"X-Amz-Content-SHA256\";\n+  public static final String X_AMAZ_DATE = \"X-Amz-Date\";\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StringToSignProducer.class);\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+  private static final String NEWLINE = \"\\n\";\n+  private static final String HOST = \"host\";\n+  private static final String UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\n+  /**\n+   * Seconds in a week, which is the max expiration time Sig-v4 accepts.\n+   */\n+  private static final long PRESIGN_URL_MAX_EXPIRATION_SECONDS =\n+      60 * 60 * 24 * 7;\n+  private static final DateTimeFormatter TIME_FORMATTER =\n+      DateTimeFormatter.ofPattern(\"yyyyMMdd'T'HHmmss'Z'\")\n+          .withZone(ZoneOffset.UTC);\n+\n+  private StringToSignProducer() {\n+  }\n+\n+  public static String createSignatureBase(\n+      SignatureInfo signatureInfo,\n+      ContainerRequestContext context\n+  ) throws Exception {\n+    return createSignatureBase(signatureInfo,\n+        context.getUriInfo().getRequestUri().getScheme(),\n+        context.getMethod(),\n+        context.getUriInfo().getRequestUri().getPath(),\n+        LowerCaseKeyStringMap.fromHeaderMap(context.getHeaders()),\n+        context.getUriInfo().getQueryParameters());\n+  }\n+\n+  public static String createSignatureBase(\n+      SignatureInfo signatureInfo,\n+      String scheme,\n+      String method,\n+      String uri,\n+      Map<String, String> headers,\n+      MultivaluedMap<String, String> queryParams\n+  ) throws Exception {\n+    StringBuilder strToSign = new StringBuilder();\n+    // According to AWS sigv4 documentation, authorization header should be\n+    // in following format.\n+    // Authorization: algorithm Credential=access key ID/credential scope,\n+    // SignedHeaders=SignedHeaders, Signature=signature\n+\n+    // Construct String to sign in below format.\n+    // StringToSign =\n+    //    Algorithm + \\n +\n+    //    RequestDateTime + \\n +\n+    //    CredentialScope + \\n +\n+    //    HashedCanonicalRequest\n+    String credentialScope, canonicalRequest;\n+    credentialScope = signatureInfo.getCredentialScope();\n+\n+    // If the absolute path is empty, use a forward slash (/)\n+    uri = (uri.trim().length() > 0) ? uri : \"/\";\n+    // Encode URI and preserve forward slashes\n+    strToSign.append(signatureInfo.getAlgorithm() + NEWLINE);\n+    strToSign.append(headers.get(X_AMAZ_DATE) + NEWLINE);\n+    strToSign.append(credentialScope + NEWLINE);\n+\n+    canonicalRequest = buildCanonicalRequest(\n+        scheme,\n+        method,\n+        uri,\n+        signatureInfo.getSignedHeaders(),\n+        headers,\n+        queryParams);\n+    strToSign.append(hash(canonicalRequest));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"canonicalRequest:[{}]\", canonicalRequest);\n+    }\n+\n+    LOG.debug(\"StringToSign:[{}]\", strToSign);", "originalCommit": "04b230dfae488ac8f592398fe9fa6fe82b461331", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc481a313b5374d47d16e83a09db95d71abde81e", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\nindex 2ce89f50d3..f982a0aff0 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\n\n@@ -87,12 +87,13 @@ public static String createSignatureBase(\n         context.getUriInfo().getQueryParameters());\n   }\n \n+  @VisibleForTesting\n   public static String createSignatureBase(\n       SignatureInfo signatureInfo,\n       String scheme,\n       String method,\n       String uri,\n-      Map<String, String> headers,\n+      LowerCaseKeyStringMap headers,\n       MultivaluedMap<String, String> queryParams\n   ) throws Exception {\n     StringBuilder strToSign = new StringBuilder();\n"}}, {"oid": "fc481a313b5374d47d16e83a09db95d71abde81e", "url": "https://github.com/apache/ozone/commit/fc481a313b5374d47d16e83a09db95d71abde81e", "message": "Simplify test without mockito", "committedDate": "2020-12-09T10:11:42Z", "type": "commit"}, {"oid": "8fe1202da1e261ce096f556b76bdcd1787bdacdb", "url": "https://github.com/apache/ozone/commit/8fe1202da1e261ce096f556b76bdcd1787bdacdb", "message": "restore debug logging", "committedDate": "2020-12-09T10:12:34Z", "type": "commit"}, {"oid": "21f7f571e169a97f6811c3ccbff8fd4d95b206fc", "url": "https://github.com/apache/ozone/commit/21f7f571e169a97f6811c3ccbff8fd4d95b206fc", "message": "optimize debug log", "committedDate": "2020-12-09T10:14:02Z", "type": "commit"}, {"oid": "7dfd70591fb01379584d0801dd2b3a3c66a35a15", "url": "https://github.com/apache/ozone/commit/7dfd70591fb01379584d0801dd2b3a3c66a35a15", "message": "stricter header check for aws v4 header parser", "committedDate": "2020-12-09T10:34:39Z", "type": "commit"}, {"oid": "8ac5026576b70fd266cf82111778e6ac4e079161", "url": "https://github.com/apache/ozone/commit/8ac5026576b70fd266cf82111778e6ac4e079161", "message": "fix header conditions", "committedDate": "2020-12-09T13:53:35Z", "type": "commit"}, {"oid": "b5f8cdd76315727b21c7ccf47b456fcdcecc718c", "url": "https://github.com/apache/ozone/commit/b5f8cdd76315727b21c7ccf47b456fcdcecc718c", "message": "Merge remote-tracking branch 'origin/master' into HDDS-4506", "committedDate": "2021-01-06T15:03:47Z", "type": "commit"}, {"oid": "b4938f6d977b5408341b2b307bbee85f0a397839", "url": "https://github.com/apache/ozone/commit/b4938f6d977b5408341b2b307bbee85f0a397839", "message": "Support X-Amz-Expires header", "committedDate": "2021-02-01T14:58:30Z", "type": "commit"}, {"oid": "8380d7a2d38cd4750ad4d37bb491f915e8de8e76", "url": "https://github.com/apache/ozone/commit/8380d7a2d38cd4750ad4d37bb491f915e8de8e76", "message": "Merge remote-tracking branch 'origin/master' into HDDS-4506", "committedDate": "2021-02-01T15:35:01Z", "type": "commit"}, {"oid": "ae957803458a1c8f59cd77979e869e9136e6bbe8", "url": "https://github.com/apache/ozone/commit/ae957803458a1c8f59cd77979e869e9136e6bbe8", "message": "fixing query based authorization", "committedDate": "2021-02-02T19:47:40Z", "type": "commit"}, {"oid": "56566240b6a01609d3aad977671399b7d7d5038c", "url": "https://github.com/apache/ozone/commit/56566240b6a01609d3aad977671399b7d7d5038c", "message": "Merge remote-tracking branch 'origin/master' into HDDS-4506", "committedDate": "2021-02-08T09:35:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQ1OTIyMQ==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r599459221", "bodyText": "Minor: Unused method.", "author": "bharatviswa504", "createdAt": "2021-03-23T10:48:38Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java", "diffHunk": "@@ -138,6 +146,21 @@ private OzoneClient getClient(OzoneConfiguration config)\n     return ozoneClient;\n   }\n \n+  @NotNull\n+  @VisibleForTesting\n+  OzoneClient createOzoneClient() throws IOException {\n+    if (omServiceID == null) {\n+      return OzoneClientFactory.getRpcClient(ozoneConfiguration);\n+    } else {\n+      // As in HA case, we need to pass om service ID.\n+      return OzoneClientFactory.getRpcClient(omServiceID,\n+          ozoneConfiguration);\n+    }\n+  }\n+\n+  private void getSignatureInfo() {", "originalCommit": "56566240b6a01609d3aad977671399b7d7d5038c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzkwMTMxNw==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603901317", "bodyText": "Thanks, removed.", "author": "elek", "createdAt": "2021-03-30T08:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQ1OTIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "261d282e3701d0b840c2d0e34828433bc022b2e4", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java\nindex f22594e2b3..4264f415a5 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/OzoneClientProducer.java\n\n@@ -158,9 +158,6 @@ OzoneClient createOzoneClient() throws IOException {\n     }\n   }\n \n-  private void getSignatureInfo() {\n-  }\n-\n   // ONLY validate aws access id when needed.\n   private void validateAccessId(String awsAccessId) throws Exception {\n     if (awsAccessId == null || awsAccessId.equals(\"\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQ2MDM3NQ==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r599460375", "bodyText": "Minor: Unnecessary change", "author": "bharatviswa504", "createdAt": "2021-03-23T10:50:20Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java", "diffHunk": "@@ -57,6 +57,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+", "originalCommit": "56566240b6a01609d3aad977671399b7d7d5038c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzkwMTI0NA==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603901244", "bodyText": "Thanks. reverted.", "author": "elek", "createdAt": "2021-03-30T08:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQ2MDM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "261d282e3701d0b840c2d0e34828433bc022b2e4", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\nindex e9d24bb18a..b8bed64cc8 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/endpoint/BucketEndpoint.java\n\n@@ -57,7 +57,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n /**\n  * Bucket level rest endpoints.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQ3MzIyNg==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r599473226", "bodyText": "Question: why do we convert header keys to lowercase?", "author": "bharatviswa504", "createdAt": "2021-03-23T11:09:53Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/AWSSignatureProcessor.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.s3.signature;\n+\n+import javax.enterprise.context.RequestScoped;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.hadoop.ozone.s3.HeaderPreprocessor;\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.signature.SignatureInfo.Version;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Parser to process AWS V2 & V4 auth request. Creates string to sign and auth\n+ * header. For more details refer to AWS documentation https://docs.aws\n+ * .amazon.com/general/latest/gr/sigv4-create-canonical-request.html.\n+ **/\n+@RequestScoped\n+public class AWSSignatureProcessor implements SignatureProcessor {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AWSSignatureProcessor.class);\n+\n+  @Context\n+  private ContainerRequestContext context;\n+\n+  public SignatureInfo parseSignature() throws OS3Exception {\n+\n+    LowerCaseKeyStringMap headers =", "originalCommit": "56566240b6a01609d3aad977671399b7d7d5038c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzg5NTA0Ng==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603895046", "bodyText": "Good question, but I am not sure. As far as I see it's added in #1098 I think I just kept the same logic what we used before...", "author": "elek", "createdAt": "2021-03-30T08:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQ3MzIyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzE5ODQ0Ng==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603198446", "bodyText": "Can we do Log here?\nI see it is already logged when debug enabled. do we want to remove this?", "author": "bharatviswa504", "createdAt": "2021-03-29T10:56:40Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java", "diffHunk": "@@ -125,7 +127,7 @@ public static String createSignatureBase(\n         headers,\n         queryParams,\n         !signatureInfo.isSignPayload());\n-\n+    System.out.println(canonicalRequest);", "originalCommit": "ae957803458a1c8f59cd77979e869e9136e6bbe8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzkwMTExMQ==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603901111", "bodyText": "Yup, thanks. Removed.", "author": "elek", "createdAt": "2021-03-30T08:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzE5ODQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "261d282e3701d0b840c2d0e34828433bc022b2e4", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\nindex 7d8b417056..3202a962d8 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\n\n@@ -127,7 +127,6 @@ public static String createSignatureBase(\n         headers,\n         queryParams,\n         !signatureInfo.isSignPayload());\n-    System.out.println(canonicalRequest);\n     strToSign.append(hash(canonicalRequest));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"canonicalRequest:[{}]\", canonicalRequest);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzIwMzEyMg==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603203122", "bodyText": "Why are we doing this?\nhttps://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\nHere there is an example urlEncode method is given, don't see such replace here?", "author": "bharatviswa504", "createdAt": "2021-03-29T11:05:14Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.s3.signature;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.io.UnsupportedEncodingException;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.LocalDate;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.signature.AWSSignatureProcessor.LowerCaseKeyStringMap;\n+import org.apache.hadoop.util.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.S3_AUTHINFO_CREATION_ERROR;\n+import org.apache.kerby.util.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Stateless utility to create stringToSign, the base of the signature.\n+ */\n+public final class StringToSignProducer {\n+\n+  public static final String X_AMZ_CONTENT_SHA256 = \"X-Amz-Content-SHA256\";\n+  public static final String X_AMAZ_DATE = \"X-Amz-Date\";\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StringToSignProducer.class);\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+  private static final String NEWLINE = \"\\n\";\n+  private static final String HOST = \"host\";\n+  private static final String UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\n+  /**\n+   * Seconds in a week, which is the max expiration time Sig-v4 accepts.\n+   */\n+  private static final long PRESIGN_URL_MAX_EXPIRATION_SECONDS =\n+      60 * 60 * 24 * 7;\n+  public static final DateTimeFormatter TIME_FORMATTER =\n+      DateTimeFormatter.ofPattern(\"yyyyMMdd'T'HHmmss'Z'\")\n+          .withZone(ZoneOffset.UTC);\n+\n+  private StringToSignProducer() {\n+  }\n+\n+  public static String createSignatureBase(\n+      SignatureInfo signatureInfo,\n+      ContainerRequestContext context\n+  ) throws Exception {\n+    return createSignatureBase(signatureInfo,\n+        context.getUriInfo().getRequestUri().getScheme(),\n+        context.getMethod(),\n+        context.getUriInfo().getRequestUri().getPath(),\n+        LowerCaseKeyStringMap.fromHeaderMap(context.getHeaders()),\n+        fromMultiValueToSingleValueMap(\n+            context.getUriInfo().getQueryParameters()));\n+  }\n+\n+  @VisibleForTesting\n+  public static String createSignatureBase(\n+      SignatureInfo signatureInfo,\n+      String scheme,\n+      String method,\n+      String uri,\n+      LowerCaseKeyStringMap headers,\n+      Map<String, String> queryParams\n+  ) throws Exception {\n+    StringBuilder strToSign = new StringBuilder();\n+    // According to AWS sigv4 documentation, authorization header should be\n+    // in following format.\n+    // Authorization: algorithm Credential=access key ID/credential scope,\n+    // SignedHeaders=SignedHeaders, Signature=signature\n+\n+    // Construct String to sign in below format.\n+    // StringToSign =\n+    //    Algorithm + \\n +\n+    //    RequestDateTime + \\n +\n+    //    CredentialScope + \\n +\n+    //    HashedCanonicalRequest\n+    String credentialScope = signatureInfo.getCredentialScope();\n+\n+    // If the absolute path is empty, use a forward slash (/)\n+    uri = (uri.trim().length() > 0) ? uri : \"/\";\n+    // Encode URI and preserve forward slashes\n+    strToSign.append(signatureInfo.getAlgorithm() + NEWLINE);\n+    strToSign.append(signatureInfo.getDateTime() + NEWLINE);\n+    strToSign.append(credentialScope + NEWLINE);\n+\n+    String canonicalRequest = buildCanonicalRequest(\n+        scheme,\n+        method,\n+        uri,\n+        signatureInfo.getSignedHeaders(),\n+        headers,\n+        queryParams,\n+        !signatureInfo.isSignPayload());\n+    System.out.println(canonicalRequest);\n+    strToSign.append(hash(canonicalRequest));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"canonicalRequest:[{}]\", canonicalRequest);\n+      LOG.debug(\"StringToSign:[{}]\", strToSign);\n+    }\n+\n+    return strToSign.toString();\n+  }\n+\n+  public static Map<String, String> fromMultiValueToSingleValueMap(\n+      MultivaluedMap<String, String> queryParameters\n+  ) {\n+    Map<String, String> result = new HashMap<>();\n+    for (String key : queryParameters.keySet()) {\n+      result.put(key, queryParameters.getFirst(key));\n+    }\n+    return result;\n+  }\n+\n+  public static String hash(String payload) throws NoSuchAlgorithmException {\n+    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+    md.update(payload.getBytes(UTF_8));\n+    return Hex.encode(md.digest()).toLowerCase();\n+  }\n+\n+  @VisibleForTesting\n+  public static String buildCanonicalRequest(\n+      String schema,\n+      String method,\n+      String uri,\n+      String signedHeaders,\n+      Map<String, String> headers,\n+      Map<String, String> queryParams,\n+      boolean unsignedPayload\n+  ) throws OS3Exception {\n+\n+    Iterable<String> parts = split(\"/\", uri);\n+    List<String> encParts = new ArrayList<>();\n+    for (String p : parts) {\n+      encParts.add(urlEncode(p));\n+    }\n+    String canonicalUri = join(\"/\", encParts);\n+\n+    String canonicalQueryStr = getQueryParamString(queryParams);\n+\n+    StringBuilder canonicalHeaders = new StringBuilder();\n+\n+    for (String header : StringUtils.getStringCollection(signedHeaders, \";\")) {\n+      canonicalHeaders.append(header.toLowerCase());\n+      canonicalHeaders.append(\":\");\n+      if (headers.containsKey(header)) {\n+        String headerValue = headers.get(header);\n+        canonicalHeaders.append(headerValue);\n+        canonicalHeaders.append(NEWLINE);\n+\n+        // Set for testing purpose only to skip date and host validation.\n+        validateSignedHeader(schema, header, headerValue);\n+\n+      } else {\n+        throw new RuntimeException(\"Header \" + header + \" not present in \" +\n+            \"request but requested to be signed.\");\n+      }\n+    }\n+\n+    String payloadHash;\n+    if (UNSIGNED_PAYLOAD.equals(\n+        headers.get(X_AMZ_CONTENT_SHA256)) || unsignedPayload) {\n+      payloadHash = UNSIGNED_PAYLOAD;\n+    } else {\n+      payloadHash = headers.get(X_AMZ_CONTENT_SHA256);\n+    }\n+    String canonicalRequest = method + NEWLINE\n+        + canonicalUri + NEWLINE\n+        + canonicalQueryStr + NEWLINE\n+        + canonicalHeaders + NEWLINE\n+        + signedHeaders + NEWLINE\n+        + payloadHash;\n+    return canonicalRequest;\n+  }\n+\n+  /**\n+   * String join that also works with empty strings.\n+   *\n+   * @return joined string\n+   */\n+  private static String join(String glue, List<String> parts) {\n+    StringBuilder result = new StringBuilder();\n+    boolean addSeparator = false;\n+    for (String p : parts) {\n+      if (addSeparator) {\n+        result.append(glue);\n+      }\n+      result.append(p);\n+      addSeparator = true;\n+    }\n+    return result.toString();\n+  }\n+\n+  /**\n+   * Returns matching strings.\n+   *\n+   * @param regex Regular expression to split by\n+   * @param whole The string to split\n+   * @return pieces\n+   */\n+  private static Iterable<String> split(String regex, String whole) {\n+    Pattern p = Pattern.compile(regex);\n+    Matcher m = p.matcher(whole);\n+    List<String> result = new ArrayList<>();\n+    int pos = 0;\n+    while (m.find()) {\n+      result.add(whole.substring(pos, m.start()));\n+      pos = m.end();\n+    }\n+    result.add(whole.substring(pos));\n+    return result;\n+  }\n+\n+  private static String urlEncode(String str) {\n+    try {\n+\n+      return URLEncoder.encode(str, UTF_8.name())\n+          .replaceAll(\"\\\\+\", \"%20\")", "originalCommit": "56566240b6a01609d3aad977671399b7d7d5038c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzkwMDQ3Mg==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603900472", "bodyText": "Again, it's a good question, but I don't know exactly. I didn't modify the logic in this patch.\nIt was added by Ajay in apache/hadoop#561. I tried to re-organize the URLEncoder, but tests started to fail so I decided to keep all the existing logic as is.\nWe can try to clean up it, but I would prefer to do it outside of this patch (just to make clear what is related to the simple reorganization and what is related to a logic change...)", "author": "elek", "createdAt": "2021-03-30T08:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzIwMzEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTU1MzY0Mw==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r605553643", "bodyText": "Yes, this is completely old code. I just see one new change.\n\nWe can try to clean up it, but I would prefer to do it outside of this patch (just to make clear what is related to the >simple reorganization and what is related to a logic change...)\n\nAgreed, already this is a big change, no need of further refactor.", "author": "bharatviswa504", "createdAt": "2021-04-01T10:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzIwMzEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "261d282e3701d0b840c2d0e34828433bc022b2e4", "chunk": "diff --git a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\nindex 7d8b417056..3202a962d8 100644\n--- a/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\n+++ b/hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java\n\n@@ -127,7 +127,6 @@ public static String createSignatureBase(\n         headers,\n         queryParams,\n         !signatureInfo.isSignPayload());\n-    System.out.println(canonicalRequest);\n     strToSign.append(hash(canonicalRequest));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"canonicalRequest:[{}]\", canonicalRequest);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzIwNzA2Mg==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603207062", "bodyText": "Not understood here message is String to sign is invalid\nBut signatureBase is matching with signature.\nCould you explain how/what is being tested here and how the value is generated", "author": "bharatviswa504", "createdAt": "2021-03-29T11:12:25Z", "path": "hadoop-ozone/s3gateway/src/test/java/org/apache/hadoop/ozone/s3/signature/TestStringToSignProducer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.s3.signature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.ozone.s3.HeaderPreprocessor;\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.signature.AWSSignatureProcessor.LowerCaseKeyStringMap;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test string2sign creation.\n+ */\n+public class TestStringToSignProducer {\n+\n+  @Test\n+  public void test() throws Exception {\n+\n+    LowerCaseKeyStringMap headers = new LowerCaseKeyStringMap();\n+    headers.put(\"Content-Length\", \"123\");\n+    headers.put(\"Host\", \"0.0.0.0:9878\");\n+    headers.put(\"X-AMZ-Content-Sha256\", \"Content-SHA\");\n+    headers.put(\"X-AMZ-Date\", \"123\");\n+    headers.put(\"Content-Type\", \"ozone/mpu\");\n+    headers.put(HeaderPreprocessor.ORIGINAL_CONTENT_TYPE, \"streaming\");\n+\n+    String authHeader =\n+        \"AWS4-HMAC-SHA256 Credential=AKIAJWFJK62WUTKNFJJA/20181009/us-east-1\"\n+            + \"/s3/aws4_request, \"\n+            + \"SignedHeaders=host;x-amz-content-sha256;x-amz-date;\"\n+            + \"content-type, \"\n+            + \"Signature\"\n+            +\n+            \"=db81b057718d7c1b3b8dffa29933099551c51d787b3b13b9e0f9ebed45982bf2\";\n+\n+    headers.put(\"Authorization\",\n+        authHeader);\n+\n+    Map<String, String> queryParameters = new HashMap<>();\n+\n+    final SignatureInfo signatureInfo =\n+        new AuthorizationV4HeaderParser(authHeader, \"123\") {\n+          @Override\n+          public void validateDateRange(Credential credentialObj)\n+              throws OS3Exception {\n+            //NOOP\n+          }\n+        }.parseSignature();\n+\n+    headers.fixContentType();\n+\n+    final String signatureBase =\n+        StringToSignProducer.createSignatureBase(\n+            signatureInfo,\n+            \"http\",\n+            \"GET\",\n+            \"/buckets\",\n+            headers,\n+            queryParameters);\n+\n+    Assert.assertEquals(\n+        \"String to sign is invalid\",", "originalCommit": "56566240b6a01609d3aad977671399b7d7d5038c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzg5NjkyMQ==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r603896921", "bodyText": "I may misunderstand the question, but the message is printed out when the two values are not equal:\nFrom JUnit javadoc:\n\nAsserts that two objects are equal. If they are not, an {@link AssertionError} is thrown with the given message.", "author": "elek", "createdAt": "2021-03-30T08:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzIwNzA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTU1NDQ3MA==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r605554470", "bodyText": "Sorry for not being clear, my question is how you have got the siggnatureBase computed. I see in other test it is mentioned it is from AWS documentation, is this also from there?", "author": "bharatviswa504", "createdAt": "2021-04-01T10:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzIwNzA2Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "261d282e3701d0b840c2d0e34828433bc022b2e4", "url": "https://github.com/apache/ozone/commit/261d282e3701d0b840c2d0e34828433bc022b2e4", "message": "address review comments", "committedDate": "2021-03-30T08:44:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTU1MjY2Ng==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r605552666", "bodyText": "Question: This check is not there in the old code, newly added. Any reason for this?", "author": "bharatviswa504", "createdAt": "2021-04-01T10:36:29Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/signature/StringToSignProducer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ozone.s3.signature;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.io.UnsupportedEncodingException;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.LocalDate;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.hadoop.ozone.s3.exception.OS3Exception;\n+import org.apache.hadoop.ozone.s3.signature.AWSSignatureProcessor.LowerCaseKeyStringMap;\n+import org.apache.hadoop.util.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.S3_AUTHINFO_CREATION_ERROR;\n+import org.apache.kerby.util.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Stateless utility to create stringToSign, the base of the signature.\n+ */\n+public final class StringToSignProducer {\n+\n+  public static final String X_AMZ_CONTENT_SHA256 = \"X-Amz-Content-SHA256\";\n+  public static final String X_AMAZ_DATE = \"X-Amz-Date\";\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StringToSignProducer.class);\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+  private static final String NEWLINE = \"\\n\";\n+  private static final String HOST = \"host\";\n+  private static final String UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\n+  /**\n+   * Seconds in a week, which is the max expiration time Sig-v4 accepts.\n+   */\n+  private static final long PRESIGN_URL_MAX_EXPIRATION_SECONDS =\n+      60 * 60 * 24 * 7;\n+  public static final DateTimeFormatter TIME_FORMATTER =\n+      DateTimeFormatter.ofPattern(\"yyyyMMdd'T'HHmmss'Z'\")\n+          .withZone(ZoneOffset.UTC);\n+\n+  private StringToSignProducer() {\n+  }\n+\n+  public static String createSignatureBase(\n+      SignatureInfo signatureInfo,\n+      ContainerRequestContext context\n+  ) throws Exception {\n+    return createSignatureBase(signatureInfo,\n+        context.getUriInfo().getRequestUri().getScheme(),\n+        context.getMethod(),\n+        context.getUriInfo().getRequestUri().getPath(),\n+        LowerCaseKeyStringMap.fromHeaderMap(context.getHeaders()),\n+        fromMultiValueToSingleValueMap(\n+            context.getUriInfo().getQueryParameters()));\n+  }\n+\n+  @VisibleForTesting\n+  public static String createSignatureBase(\n+      SignatureInfo signatureInfo,\n+      String scheme,\n+      String method,\n+      String uri,\n+      LowerCaseKeyStringMap headers,\n+      Map<String, String> queryParams\n+  ) throws Exception {\n+    StringBuilder strToSign = new StringBuilder();\n+    // According to AWS sigv4 documentation, authorization header should be\n+    // in following format.\n+    // Authorization: algorithm Credential=access key ID/credential scope,\n+    // SignedHeaders=SignedHeaders, Signature=signature\n+\n+    // Construct String to sign in below format.\n+    // StringToSign =\n+    //    Algorithm + \\n +\n+    //    RequestDateTime + \\n +\n+    //    CredentialScope + \\n +\n+    //    HashedCanonicalRequest\n+    String credentialScope = signatureInfo.getCredentialScope();\n+\n+    // If the absolute path is empty, use a forward slash (/)\n+    uri = (uri.trim().length() > 0) ? uri : \"/\";\n+    // Encode URI and preserve forward slashes\n+    strToSign.append(signatureInfo.getAlgorithm() + NEWLINE);\n+    strToSign.append(signatureInfo.getDateTime() + NEWLINE);\n+    strToSign.append(credentialScope + NEWLINE);\n+\n+    String canonicalRequest = buildCanonicalRequest(\n+        scheme,\n+        method,\n+        uri,\n+        signatureInfo.getSignedHeaders(),\n+        headers,\n+        queryParams,\n+        !signatureInfo.isSignPayload());\n+    strToSign.append(hash(canonicalRequest));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"canonicalRequest:[{}]\", canonicalRequest);\n+      LOG.debug(\"StringToSign:[{}]\", strToSign);\n+    }\n+\n+    return strToSign.toString();\n+  }\n+\n+  public static Map<String, String> fromMultiValueToSingleValueMap(\n+      MultivaluedMap<String, String> queryParameters\n+  ) {\n+    Map<String, String> result = new HashMap<>();\n+    for (String key : queryParameters.keySet()) {\n+      result.put(key, queryParameters.getFirst(key));\n+    }\n+    return result;\n+  }\n+\n+  public static String hash(String payload) throws NoSuchAlgorithmException {\n+    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+    md.update(payload.getBytes(UTF_8));\n+    return Hex.encode(md.digest()).toLowerCase();\n+  }\n+\n+  @VisibleForTesting\n+  public static String buildCanonicalRequest(\n+      String schema,\n+      String method,\n+      String uri,\n+      String signedHeaders,\n+      Map<String, String> headers,\n+      Map<String, String> queryParams,\n+      boolean unsignedPayload\n+  ) throws OS3Exception {\n+\n+    Iterable<String> parts = split(\"/\", uri);\n+    List<String> encParts = new ArrayList<>();\n+    for (String p : parts) {\n+      encParts.add(urlEncode(p));\n+    }\n+    String canonicalUri = join(\"/\", encParts);\n+\n+    String canonicalQueryStr = getQueryParamString(queryParams);\n+\n+    StringBuilder canonicalHeaders = new StringBuilder();\n+\n+    for (String header : StringUtils.getStringCollection(signedHeaders, \";\")) {\n+      canonicalHeaders.append(header.toLowerCase());\n+      canonicalHeaders.append(\":\");\n+      if (headers.containsKey(header)) {\n+        String headerValue = headers.get(header);\n+        canonicalHeaders.append(headerValue);\n+        canonicalHeaders.append(NEWLINE);\n+\n+        // Set for testing purpose only to skip date and host validation.\n+        validateSignedHeader(schema, header, headerValue);\n+\n+      } else {\n+        throw new RuntimeException(\"Header \" + header + \" not present in \" +\n+            \"request but requested to be signed.\");\n+      }\n+    }\n+\n+    String payloadHash;\n+    if (UNSIGNED_PAYLOAD.equals(\n+        headers.get(X_AMZ_CONTENT_SHA256)) || unsignedPayload) {\n+      payloadHash = UNSIGNED_PAYLOAD;\n+    } else {\n+      payloadHash = headers.get(X_AMZ_CONTENT_SHA256);\n+    }\n+    String canonicalRequest = method + NEWLINE\n+        + canonicalUri + NEWLINE\n+        + canonicalQueryStr + NEWLINE\n+        + canonicalHeaders + NEWLINE\n+        + signedHeaders + NEWLINE\n+        + payloadHash;\n+    return canonicalRequest;\n+  }\n+\n+  /**\n+   * String join that also works with empty strings.\n+   *\n+   * @return joined string\n+   */\n+  private static String join(String glue, List<String> parts) {\n+    StringBuilder result = new StringBuilder();\n+    boolean addSeparator = false;\n+    for (String p : parts) {\n+      if (addSeparator) {\n+        result.append(glue);\n+      }\n+      result.append(p);\n+      addSeparator = true;\n+    }\n+    return result.toString();\n+  }\n+\n+  /**\n+   * Returns matching strings.\n+   *\n+   * @param regex Regular expression to split by\n+   * @param whole The string to split\n+   * @return pieces\n+   */\n+  private static Iterable<String> split(String regex, String whole) {\n+    Pattern p = Pattern.compile(regex);\n+    Matcher m = p.matcher(whole);\n+    List<String> result = new ArrayList<>();\n+    int pos = 0;\n+    while (m.find()) {\n+      result.add(whole.substring(pos, m.start()));\n+      pos = m.end();\n+    }\n+    result.add(whole.substring(pos));\n+    return result;\n+  }\n+\n+  private static String urlEncode(String str) {\n+    try {\n+\n+      return URLEncoder.encode(str, UTF_8.name())\n+          .replaceAll(\"\\\\+\", \"%20\")\n+          .replaceAll(\"%7E\", \"~\");\n+    } catch (UnsupportedEncodingException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private static String getQueryParamString(\n+      Map<String, String> queryMap\n+  ) {\n+    List<String> params = new ArrayList<>(queryMap.keySet());\n+\n+    // Sort by name, then by value\n+    Collections.sort(params, (o1, o2) -> o1.equals(o2) ?\n+        queryMap.get(o1).compareTo(queryMap.get(o2)) :\n+        o1.compareTo(o2));\n+\n+    StringBuilder result = new StringBuilder();\n+    for (String p : params) {\n+      if (!p.equals(\"X-Amz-Signature\")) {", "originalCommit": "261d282e3701d0b840c2d0e34828433bc022b2e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY2NDU1NQ==", "url": "https://github.com/apache/ozone/pull/1628#discussion_r605664555", "bodyText": "This is the code which creates the canonical string of the query parameters to sign it later.\nIf the signature itself is added as a query parameter, it should be excluded from the string itself (to have a predictable string to sign).\nTLDR: earlier we didn't support X-Amz-Signature query parameter therefore we ignored this exclusion.", "author": "elek", "createdAt": "2021-04-01T13:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTU1MjY2Ng=="}], "type": "inlineReview", "revised_code": null}]}