{"pr_number": 2495, "pr_title": "CorfuQueue: Capture commit token & fix up Queue for ordering", "pr_createdAt": "2020-03-31T02:13:46Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2495", "timeline": [{"oid": "4a325ac417ba93aef1ead481d394a44f4b24f7df", "url": "https://github.com/CorfuDB/CorfuDB/commit/4a325ac417ba93aef1ead481d394a44f4b24f7df", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.", "committedDate": "2020-03-31T06:24:34Z", "type": "forcePushed"}, {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "url": "https://github.com/CorfuDB/CorfuDB/commit/2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.", "committedDate": "2020-03-31T17:38:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5NzMzMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401097330", "bodyText": "is it possible to get rid of setters?", "author": "xnull", "createdAt": "2020-03-31T17:42:56Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -76,23 +77,21 @@ public int size() {\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n-        private final UUID id;\n-        public CorfuRecordId(long ordering, long uniqueId) {\n-            this.id = new UUID(ordering, uniqueId);\n-        }\n+        @Setter", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzMjA1Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401132056", "bodyText": "no, it breaks SMR if we create a new object - we must modify the exact value that was added to the table's hash map.", "author": "hisundar", "createdAt": "2020-03-31T18:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5NzMzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NTM1Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401275357", "bodyText": "not sure about SMR, but if you are going to change these fields and use them to calculate hashCode then it is very dangerous operation you can break HashMap by that.\nI mean if you change those fields after you add it to any java data structure like HashMap, Queue and so on, you will not be able to find that entry in the data structure", "author": "xnull", "createdAt": "2020-03-31T23:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5NzMzMA=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -97,7 +98,6 @@ public class CorfuQueue<E> {\n         /**\n          * It's NOT ok to compare two objects if their ordering metadata is dissimilar.\n          * @param o object to compare against.\n-         * @throws IllegalArgumentException if the two Ids are not comparable.\n          * @return results of comparison.\n          */\n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMDc1OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401100759", "bodyText": "When you implement equals method you have to implement a hashCode method, if not then functionality will be broken.", "author": "xnull", "createdAt": "2020-03-31T17:48:29Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -123,11 +114,11 @@ public int compareTo(CorfuRecordId o) {\n          * @return\n          */\n         public boolean equals(CorfuRecordId o) {\n-            return id.getLeastSignificantBits() == o.id.getLeastSignificantBits();\n+            return (epoch == o.getEpoch()) && (sequence == o.getSequence()) && entryId == o.getEntryId();", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MDYyNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401140627", "bodyText": "done. thanks!", "author": "hisundar", "createdAt": "2020-03-31T18:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMDc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -109,17 +109,26 @@ public class CorfuQueue<E> {\n         }\n \n         /**\n-         * It is ok to check equality of a CorfuRecordId with ordering data against one without.\n-         * @param o object to compare against.\n+         * It is NOT ok to check equality of a CorfuRecordId with ordering data against one without.\n+         * @param otherObj object to compare against.\n          * @return\n          */\n-        public boolean equals(CorfuRecordId o) {\n+        @Override\n+        public boolean equals(Object otherObj) {\n+            if (this == otherObj) return true;\n+            if (otherObj == null || getClass() != otherObj.getClass()) return false;\n+            CorfuRecordId o = (CorfuRecordId)otherObj;\n             return (epoch == o.getEpoch()) && (sequence == o.getSequence()) && entryId == o.getEntryId();\n         }\n \n         public String toString() {\n             return String.format(\"%s|%s|%s\",epoch, sequence, entryId);\n         }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(getEpoch(), getSequence(), getEntryId());\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMjAxMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401102013", "bodyText": "Also, please add @Owerride", "author": "xnull", "createdAt": "2020-03-31T17:50:32Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -123,11 +114,11 @@ public int compareTo(CorfuRecordId o) {\n          * @return\n          */\n         public boolean equals(CorfuRecordId o) {\n-            return id.getLeastSignificantBits() == o.id.getLeastSignificantBits();\n+            return (epoch == o.getEpoch()) && (sequence == o.getSequence()) && entryId == o.getEntryId();", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzMTU1NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401131555", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T18:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMjAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -109,17 +109,26 @@ public class CorfuQueue<E> {\n         }\n \n         /**\n-         * It is ok to check equality of a CorfuRecordId with ordering data against one without.\n-         * @param o object to compare against.\n+         * It is NOT ok to check equality of a CorfuRecordId with ordering data against one without.\n+         * @param otherObj object to compare against.\n          * @return\n          */\n-        public boolean equals(CorfuRecordId o) {\n+        @Override\n+        public boolean equals(Object otherObj) {\n+            if (this == otherObj) return true;\n+            if (otherObj == null || getClass() != otherObj.getClass()) return false;\n+            CorfuRecordId o = (CorfuRecordId)otherObj;\n             return (epoch == o.getEpoch()) && (sequence == o.getSequence()) && entryId == o.getEntryId();\n         }\n \n         public String toString() {\n             return String.format(\"%s|%s|%s\",epoch, sequence, entryId);\n         }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(getEpoch(), getSequence(), getEntryId());\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNDIzMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401104233", "bodyText": "You must be very careful with setters. They always bring much more complexity to the code, make it fragile, more complicated to analyze and there are always problems with concurrency.", "author": "xnull", "createdAt": "2020-03-31T17:54:02Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -172,6 +180,7 @@ public CorfuRecordId enqueue(E e) {\n          * because if this method is wrapped in a transaction, the order is established only later.\n          */\n         @Getter\n+        @Setter", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzMTQ0MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401131441", "bodyText": "yes unfortunately we do not have access to the commit sequence and epoch until the transaction actually commits, so we cannot go with immutable construct. It has to be set later, creating a new copy would break it away from the SMR version.", "author": "hisundar", "createdAt": "2020-03-31T18:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNDIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MTE4Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401151186", "bodyText": "sad to hear that we can't afford immutability, so, ok", "author": "xnull", "createdAt": "2020-03-31T19:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNDIzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNDY1NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401104655", "bodyText": "why not to pass CorfuRecordId as a parameter?", "author": "xnull", "createdAt": "2020-03-31T17:54:42Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -181,8 +190,8 @@ public String toString() {\n             return String.format(\"%s=>%s\", recordId, entry);\n         }\n \n-        CorfuQueueRecord(long ordering, long entryId, E entry) {\n-            this.recordId = new CorfuRecordId(ordering, entryId);\n+        CorfuQueueRecord(long epoch, long ordering, long entryId, E entry) {", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzMDUzMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401130530", "bodyText": "because these fields need to be accessed and set individually at different times I thought it would be cleaner to separate those two.", "author": "hisundar", "createdAt": "2020-03-31T18:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNDY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MDM5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401150397", "bodyText": "ok", "author": "xnull", "createdAt": "2020-03-31T19:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNDY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -199,6 +208,19 @@ public class CorfuQueue<E> {\n         public int compareTo(CorfuQueueRecord<? extends E> o) {\n             return this.recordId.compareTo(o.getRecordId());\n         }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            CorfuQueueRecord<?> that = (CorfuQueueRecord<?>) o;\n+            return getRecordId().equals(that.getRecordId());\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(getRecordId());\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNjA5MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401106091", "bodyText": "Please don't use TransactionalContext as a prefix. Please add TransactionalContext to imports", "author": "xnull", "createdAt": "2020-03-31T17:57:01Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java", "diffHunk": "@@ -248,6 +250,17 @@ public void syncWithRetryUnsafe(VersionLockedObject vlo,\n      */\n     public abstract void addTransaction(AbstractTransactionalContext tc);\n \n+    /**\n+     * Add an object that needs extra processing right before commit happens\n+     *\n+     * @param preCommitListener The context of the object that needs extra processing\n+     *                         along with its lambda.\n+     */\n+    public abstract void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener);\n+\n+    @Getter\n+    private List<TransactionalContext.PreCommitListener> preCommitListeners = new ArrayList<>();", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyOTYyMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401129622", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T18:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNjA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java b/runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java\nindex 5baca7eae94..2a62dde8227 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java\n\n@@ -256,10 +257,10 @@ public abstract class AbstractTransactionalContext implements\n      * @param preCommitListener The context of the object that needs extra processing\n      *                         along with its lambda.\n      */\n-    public abstract void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener);\n+    public abstract void addPreCommitListener(PreCommitListener preCommitListener);\n \n     @Getter\n-    private List<TransactionalContext.PreCommitListener> preCommitListeners = new ArrayList<>();\n+    private List<PreCommitListener> preCommitListeners = new ArrayList<>();\n \n     /**\n      * Commit the transaction to the log.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNjM0Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401106343", "bodyText": "please add TransactionalContext to imports", "author": "xnull", "createdAt": "2020-03-31T17:57:27Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/SnapshotTransactionalContext.java", "diffHunk": "@@ -85,4 +85,9 @@ public SnapshotTransactionalContext(Transaction transaction) {\n     public void addTransaction(AbstractTransactionalContext tc) {\n         throw new UnsupportedOperationException(\"Can't merge into a readonly txn (yet)\");\n     }\n+\n+    @Override\n+    public void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener) {", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyOTUzOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401129538", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T18:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNjM0Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "url": "https://github.com/CorfuDB/CorfuDB/commit/d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "message": "Add test case for both inorder and our of order between enqueue op and txEnd.", "committedDate": "2020-03-31T18:52:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MjM4Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401152387", "bodyText": "Actually instead of bolierplate code you should use @EqualsAndHashCode annotation from lombok. Can you make that change?", "author": "xnull", "createdAt": "2020-03-31T19:13:57Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -76,58 +78,56 @@ public int size() {\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n-        private final UUID id;\n-        public CorfuRecordId(long ordering, long uniqueId) {\n-            this.id = new UUID(ordering, uniqueId);\n-        }\n+        @Setter\n+        @Getter\n+        private long epoch;\n \n-        /**\n-         * @return Return only the unique part of the id without the ordering\n-         */\n-        public long getEntryId() {\n-            return id.getLeastSignificantBits();\n-        }\n+        @Setter\n+        @Getter\n+        private long sequence;\n \n-        /**\n-         * @return Return only the ordering part of the entry without the id.\n-         */\n-        public long getOrdering() {\n-            return id.getMostSignificantBits();\n+        @Getter\n+        private long entryId;\n+\n+        public CorfuRecordId(long epoch, long sequence, long entryId) {\n+            this.epoch = epoch;\n+            this.sequence = sequence;\n+            this.entryId = entryId;\n         }\n \n         /**\n          * It's NOT ok to compare two objects if their ordering metadata is dissimilar.\n          * @param o object to compare against.\n-         * @throws IllegalArgumentException if the two Ids are not comparable.\n          * @return results of comparison.\n          */\n         @Override\n         public int compareTo(CorfuRecordId o) {\n-            if (this.id.getMostSignificantBits() == 0 && o.id.getMostSignificantBits() != 0) {\n-                throw new IllegalArgumentException(\n-                        \"Incompatible CorfuRecordId comparison: ordering unavailable\");\n-            }\n-            if (this.id.getMostSignificantBits() !=0 && o.id.getMostSignificantBits() == 0) {\n-               throw new IllegalArgumentException(\n-                       \"Incompatible CorfuRecordId comparison: order of compared object unknown\");\n-            }\n-            if (this.id.getLeastSignificantBits() == o.id.getLeastSignificantBits()) {\n-                return 0;\n-            }\n-            return id.compareTo(o.id);\n+            return Comparator.comparing(CorfuRecordId::getEpoch)\n+                    .thenComparing(CorfuRecordId::getSequence)\n+                    .thenComparing(CorfuRecordId::getEntryId)\n+                    .compare(this, o);\n         }\n \n         /**\n-         * It is ok to check equality of a CorfuRecordId with ordering data against one without.\n-         * @param o object to compare against.\n+         * It is NOT ok to check equality of a CorfuRecordId with ordering data against one without.\n+         * @param otherObj object to compare against.\n          * @return\n          */\n-        public boolean equals(CorfuRecordId o) {\n-            return id.getLeastSignificantBits() == o.id.getLeastSignificantBits();\n+        @Override\n+        public boolean equals(Object otherObj) {\n+            if (this == otherObj) return true;", "originalCommit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NTI1Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401195252", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T20:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MjM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5OTUxNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401199514", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T20:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MjM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0f15401bccd5ef01c58fe2e345247aaf2f0f03e7", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..f9670588389 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -95,6 +96,14 @@ public class CorfuQueue<E> {\n             this.entryId = entryId;\n         }\n \n+        final static int BITS_FOR_SEQUENCE = 40;\n+        /**\n+         * @return Pack CorfuRecordId into a 16 byte UUID\n+         */\n+        public UUID asUUID() {\n+            return new UUID(epoch<<BITS_FOR_SEQUENCE | sequence, entryId);\n+        }\n+\n         /**\n          * It's NOT ok to compare two objects if their ordering metadata is dissimilar.\n          * @param o object to compare against.\n"}}, {"oid": "45b6120022507bd7ee1a2133c65de06d4286d7d8", "url": "https://github.com/CorfuDB/CorfuDB/commit/45b6120022507bd7ee1a2133c65de06d4286d7d8", "message": "Add test case for both inorder and our of order between enqueue op and txEnd.", "committedDate": "2020-03-31T19:49:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzg2Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401153862", "bodyText": "Is it better to use invalid epoch and sequence instead of 0 ?", "author": "WenbinZhu", "createdAt": "2020-03-31T19:16:30Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +149,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);", "originalCommit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMDQzOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401200438", "bodyText": "would it matter? keeping it as zero allows these non-transactional entries to go to the first of the queue - might make it easier for testing", "author": "hisundar", "createdAt": "2020-03-31T20:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNzMyMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401207323", "bodyText": "But then if you compare the a non-tranactional entry with a tranactional entry who was committed at epoch 0, sequence 0,  it would be confusing right?", "author": "WenbinZhu", "createdAt": "2020-03-31T20:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMjE2NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401212165", "bodyText": "yes, that isn't supported. ok let me catch that case and assert.", "author": "hisundar", "createdAt": "2020-03-31T21:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -152,20 +145,21 @@ public class CorfuQueue<E> {\n     public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n         CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n-        class QueueEntryAddressGetter implements PreCommitListener {\n-            CorfuQueueRecord<E> queueRecord;\n-            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n-                this.queueRecord = queueRecord;\n-            }\n-            @Override\n-            public void preCommitCallback(TokenResponse tokenResponse) {\n-                queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());\n-                queueRecord.getRecordId().setSequence(tokenResponse.getSequence());\n-            }\n-        }\n+\n         // If we are in a transaction, then we need the commit address of this transaction\n         // to fix up as the ordering\n         if (TransactionalContext.isInTransaction()) {\n+            class QueueEntryAddressGetter implements PreCommitListener {\n+                private CorfuQueueRecord<E> queueRecord;\n+                private QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n+                    this.queueRecord = queueRecord;\n+                }\n+                @Override\n+                public void preCommitCallback(TokenResponse tokenResponse) {\n+                    queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());\n+                    queueRecord.getRecordId().setSequence(tokenResponse.getSequence());\n+                }\n+            }\n             QueueEntryAddressGetter addressGetter = new QueueEntryAddressGetter(queueEntry);\n             TransactionalContext.getRootContext().addPreCommitListener(addressGetter);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NDk3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401154971", "bodyText": "Private", "author": "WenbinZhu", "createdAt": "2020-03-31T19:18:29Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +149,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n+            CorfuQueueRecord<E> queueRecord;", "originalCommit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5OTE0OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401199148", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T20:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NDk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -152,20 +145,21 @@ public class CorfuQueue<E> {\n     public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n         CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n-        class QueueEntryAddressGetter implements PreCommitListener {\n-            CorfuQueueRecord<E> queueRecord;\n-            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n-                this.queueRecord = queueRecord;\n-            }\n-            @Override\n-            public void preCommitCallback(TokenResponse tokenResponse) {\n-                queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());\n-                queueRecord.getRecordId().setSequence(tokenResponse.getSequence());\n-            }\n-        }\n+\n         // If we are in a transaction, then we need the commit address of this transaction\n         // to fix up as the ordering\n         if (TransactionalContext.isInTransaction()) {\n+            class QueueEntryAddressGetter implements PreCommitListener {\n+                private CorfuQueueRecord<E> queueRecord;\n+                private QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n+                    this.queueRecord = queueRecord;\n+                }\n+                @Override\n+                public void preCommitCallback(TokenResponse tokenResponse) {\n+                    queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());\n+                    queueRecord.getRecordId().setSequence(tokenResponse.getSequence());\n+                }\n+            }\n             QueueEntryAddressGetter addressGetter = new QueueEntryAddressGetter(queueEntry);\n             TransactionalContext.getRootContext().addPreCommitListener(addressGetter);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NTMwMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401155302", "bodyText": "Private", "author": "WenbinZhu", "createdAt": "2020-03-31T19:19:03Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +149,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n+            CorfuQueueRecord<E> queueRecord;\n+            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {", "originalCommit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5OTA2MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401199061", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T20:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NTMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -152,20 +145,21 @@ public class CorfuQueue<E> {\n     public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n         CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n-        class QueueEntryAddressGetter implements PreCommitListener {\n-            CorfuQueueRecord<E> queueRecord;\n-            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n-                this.queueRecord = queueRecord;\n-            }\n-            @Override\n-            public void preCommitCallback(TokenResponse tokenResponse) {\n-                queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());\n-                queueRecord.getRecordId().setSequence(tokenResponse.getSequence());\n-            }\n-        }\n+\n         // If we are in a transaction, then we need the commit address of this transaction\n         // to fix up as the ordering\n         if (TransactionalContext.isInTransaction()) {\n+            class QueueEntryAddressGetter implements PreCommitListener {\n+                private CorfuQueueRecord<E> queueRecord;\n+                private QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n+                    this.queueRecord = queueRecord;\n+                }\n+                @Override\n+                public void preCommitCallback(TokenResponse tokenResponse) {\n+                    queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());\n+                    queueRecord.getRecordId().setSequence(tokenResponse.getSequence());\n+                }\n+            }\n             QueueEntryAddressGetter addressGetter = new QueueEntryAddressGetter(queueEntry);\n             TransactionalContext.getRootContext().addPreCommitListener(addressGetter);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Nzg1OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401157859", "bodyText": "ordering -> sequence ?", "author": "WenbinZhu", "createdAt": "2020-03-31T19:23:36Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -181,15 +199,28 @@ public String toString() {\n             return String.format(\"%s=>%s\", recordId, entry);\n         }\n \n-        CorfuQueueRecord(long ordering, long entryId, E entry) {\n-            this.recordId = new CorfuRecordId(ordering, entryId);\n+        CorfuQueueRecord(long epoch, long ordering, long entryId, E entry) {", "originalCommit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NzU3Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401197572", "bodyText": "fixed. thanks", "author": "hisundar", "createdAt": "2020-03-31T20:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Nzg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -223,14 +217,6 @@ public class CorfuQueue<E> {\n         }\n     }\n \n-    /**\n-     * We need to encode 2 pieces of information into an 8 byte long to represent ordering.\n-     * 1. We use 40 bits for CorfuQueue's snapshot version information.\n-     * 2. We use 24 bits for the index within that CorfuQueue's snapshot.\n-     */\n-    final private static int MAX_BITS_FOR_INDEX = 24;\n-    final private static int MAX_INDEX_ENTRIES = (1<<MAX_BITS_FOR_INDEX) - 1;\n-\n     /**\n      * Returns a List of CorfuQueueRecords sorted by the order in which the enqueue materialized.\n      * This is the primary method of consumption of entries enqueued into CorfuQueue.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1OTU2MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401159560", "bodyText": "Fix Indent", "author": "WenbinZhu", "createdAt": "2020-03-31T19:26:25Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -242,41 +253,20 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n             );\n         }\n \n-        // Bind the iteration order to a snapshot of the Queue using a transaction.\n-        long snapshotVersion;\n-        boolean startedNewTransaction = false;\n-        if (TransactionalContext.isInTransaction()) {\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-        } else {\n-            runtime.getObjectsView().TXBuild().type(TransactionType.WRITE_AFTER_WRITE)\n-                    .build()\n-                    .begin();\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-            startedNewTransaction = true;\n-        }\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n+    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->", "originalCommit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -245,19 +231,14 @@ public class CorfuQueue<E> {\n      */\n     public List<CorfuQueueRecord<E>> entryList(CorfuRecordId entriesAfter, int maxEntries) {\n         if (maxEntries <= 0) {\n-            throw new IllegalArgumentException(\"entryList given negative maxEntries\");\n-        }\n-        if (maxEntries > MAX_INDEX_ENTRIES) {\n-            throw new IllegalArgumentException(\n-                    \"entryList can't return more than \"+MAX_INDEX_ENTRIES+\" entries\"\n-            );\n+            throw new IllegalArgumentException(\"entryList can't take zero or negative maxEntries\");\n         }\n \n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n-    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n+        Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n                 r1.getValue().getRecordId().compareTo(r2.getValue().recordId);\n         int index = 0;\n         for (Map.Entry<Long, CorfuQueueRecord<E>> entry : corfuTable.entryStream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NTU4Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401165582", "bodyText": "You can put a .limit(maxEntries) after .filter() to avoid collecting and sorting all entries and ++index. This should be more efficient.", "author": "WenbinZhu", "createdAt": "2020-03-31T19:37:07Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -242,41 +253,20 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n             );\n         }\n \n-        // Bind the iteration order to a snapshot of the Queue using a transaction.\n-        long snapshotVersion;\n-        boolean startedNewTransaction = false;\n-        if (TransactionalContext.isInTransaction()) {\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-        } else {\n-            runtime.getObjectsView().TXBuild().type(TransactionType.WRITE_AFTER_WRITE)\n-                    .build()\n-                    .begin();\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-            startedNewTransaction = true;\n-        }\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n+    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n+                r1.getValue().getRecordId().compareTo(r2.getValue().recordId);\n         int index = 0;\n-        for (Long entryId : corfuTable.keySet().stream()\n-                .filter(e -> e > entriesAfter)\n-                .sorted().collect(Collectors.toList())) {\n+        for (Map.Entry<Long, CorfuQueueRecord<E>> entry : corfuTable.entryStream()\n+                .filter(e -> e.getValue().getRecordId().compareTo(entriesAfter) > 0)\n+                .sorted(recordIdComparator).collect(Collectors.toList())) {\n             if (++index >= maxEntries) {", "originalCommit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMzMwMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401213303", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T21:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NTU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -245,19 +231,14 @@ public class CorfuQueue<E> {\n      */\n     public List<CorfuQueueRecord<E>> entryList(CorfuRecordId entriesAfter, int maxEntries) {\n         if (maxEntries <= 0) {\n-            throw new IllegalArgumentException(\"entryList given negative maxEntries\");\n-        }\n-        if (maxEntries > MAX_INDEX_ENTRIES) {\n-            throw new IllegalArgumentException(\n-                    \"entryList can't return more than \"+MAX_INDEX_ENTRIES+\" entries\"\n-            );\n+            throw new IllegalArgumentException(\"entryList can't take zero or negative maxEntries\");\n         }\n \n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n-    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n+        Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n                 r1.getValue().getRecordId().compareTo(r2.getValue().recordId);\n         int index = 0;\n         for (Map.Entry<Long, CorfuQueueRecord<E>> entry : corfuTable.entryStream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NzAzOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401167039", "bodyText": "Is it better to use invalid epoch and sequence instead of 0 ? Same for the rests", "author": "WenbinZhu", "createdAt": "2020-03-31T19:39:47Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -285,23 +275,23 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n      * @return all the entries in the Queue\n      */\n     public List<CorfuQueueRecord<E>> entryList() {\n-        return this.entryList(0L, MAX_INDEX_ENTRIES);\n+        return this.entryList(new CorfuRecordId(0,0,0), MAX_INDEX_ENTRIES);", "originalCommit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMzM3NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401213375", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T21:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NzAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -275,7 +256,7 @@ public class CorfuQueue<E> {\n      * @return all the entries in the Queue\n      */\n     public List<CorfuQueueRecord<E>> entryList() {\n-        return this.entryList(new CorfuRecordId(0,0,0), MAX_INDEX_ENTRIES);\n+        return this.entryList(new CorfuRecordId(0,0,0), Integer.MAX_VALUE);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDczMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401174733", "bodyText": "I'm wondering if this is correct in case of nested transactions. In that case we would merge the read/write set in the child transaction's context into parent's context, however the preCommitListeners seems not doing this.", "author": "WenbinZhu", "createdAt": "2020-03-31T19:53:42Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java", "diffHunk": "@@ -248,6 +251,17 @@ public void syncWithRetryUnsafe(VersionLockedObject vlo,\n      */\n     public abstract void addTransaction(AbstractTransactionalContext tc);\n \n+    /**\n+     * Add an object that needs extra processing right before commit happens\n+     *\n+     * @param preCommitListener The context of the object that needs extra processing\n+     *                         along with its lambda.\n+     */\n+    public abstract void addPreCommitListener(PreCommitListener preCommitListener);", "originalCommit": "45b6120022507bd7ee1a2133c65de06d4286d7d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNDI0OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401214249", "bodyText": "I thought about this - that is the reason I always pick the RootContext to store these preCommitListeners. As you said nesting transactions will keep merging their writeSets() anyway which is is unnecessary because only the address of the parent transaction matters anyway.", "author": "hisundar", "createdAt": "2020-03-31T21:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDczMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExMjM5MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401112390", "bodyText": "update method java doc, no returned value.", "author": "annym", "createdAt": "2020-03-31T18:07:31Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -142,8 +151,8 @@ public class CorfuQueue<E> {\n      */\n     public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n-        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n             CorfuQueueRecord<E> queueRecord;\n             QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n                 this.queueRecord = queueRecord;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExMzYxNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401113615", "bodyText": "Can we have these two values '0', as statics with suggestive names that ease readability? Also, why do we enforce epoch to be 0? would it be better to have negative which means non-initialized?", "author": "annym", "createdAt": "2020-03-31T18:09:33Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNDQ2Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401214466", "bodyText": "fixed. thanks", "author": "hisundar", "createdAt": "2020-03-31T21:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExMzYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -142,8 +151,8 @@ public class CorfuQueue<E> {\n      */\n     public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n-        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n             CorfuQueueRecord<E> queueRecord;\n             QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n                 this.queueRecord = queueRecord;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMTk0Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401121946", "bodyText": "Add class description?", "author": "annym", "createdAt": "2020-03-31T18:23:45Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNDUwMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401214501", "bodyText": "fixed. thanks", "author": "hisundar", "createdAt": "2020-03-31T21:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMTk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -142,8 +151,8 @@ public class CorfuQueue<E> {\n      */\n     public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n-        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n             CorfuQueueRecord<E> queueRecord;\n             QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n                 this.queueRecord = queueRecord;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMjk2Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401122963", "bodyText": "perhaps add a trace level logging line here?", "author": "annym", "createdAt": "2020-03-31T18:25:26Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+            CorfuQueueRecord<E> queueRecord;\n+            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n+                this.queueRecord = queueRecord;\n+            }\n+            @Override\n+            public void preCommitCallback(TokenResponse tokenResponse) {\n+                queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDIxNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401224216", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T21:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMjk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -142,8 +151,8 @@ public class CorfuQueue<E> {\n      */\n     public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n-        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n             CorfuQueueRecord<E> queueRecord;\n             QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n                 this.queueRecord = queueRecord;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNDk4Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401124982", "bodyText": "Can we add a comment making clear that enqueue's occurring outside the transactional scope will not be guaranteed ordering.", "author": "annym", "createdAt": "2020-03-31T18:28:39Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+            CorfuQueueRecord<E> queueRecord;\n+            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n+                this.queueRecord = queueRecord;\n+            }\n+            @Override\n+            public void preCommitCallback(TokenResponse tokenResponse) {\n+                queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());\n+                queueRecord.getRecordId().setSequence(tokenResponse.getSequence());\n+            }\n+        }\n+        // If we are in a transaction, then we need the commit address of this transaction", "originalCommit": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDQxNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401224414", "bodyText": "not just that, I am enforcing it via an explicit check.", "author": "hisundar", "createdAt": "2020-03-31T21:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNDk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex 4064089cec6..fceeed7e159 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -142,8 +151,8 @@ public class CorfuQueue<E> {\n      */\n     public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n-        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n             CorfuQueueRecord<E> queueRecord;\n             QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n                 this.queueRecord = queueRecord;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTc4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401175788", "bodyText": "If the copy is after the comparison, wouldn't it skip one. For instance maxEntries =1, on the first entry it would immediately break and not add the single entry. Or change to index++", "author": "annym", "createdAt": "2020-03-31T19:55:34Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -242,41 +253,20 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n             );\n         }\n \n-        // Bind the iteration order to a snapshot of the Queue using a transaction.\n-        long snapshotVersion;\n-        boolean startedNewTransaction = false;\n-        if (TransactionalContext.isInTransaction()) {\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-        } else {\n-            runtime.getObjectsView().TXBuild().type(TransactionType.WRITE_AFTER_WRITE)\n-                    .build()\n-                    .begin();\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-            startedNewTransaction = true;\n-        }\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n+    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n+                r1.getValue().getRecordId().compareTo(r2.getValue().recordId);\n         int index = 0;\n-        for (Long entryId : corfuTable.keySet().stream()\n-                .filter(e -> e > entriesAfter)\n-                .sorted().collect(Collectors.toList())) {\n+        for (Map.Entry<Long, CorfuQueueRecord<E>> entry : corfuTable.entryStream()\n+                .filter(e -> e.getValue().getRecordId().compareTo(entriesAfter) > 0)\n+                .sorted(recordIdComparator).collect(Collectors.toList())) {\n             if (++index >= maxEntries) {\n                 break;\n             }\n-            // Note that index is already limited to fit within MAX_BITS_FOR_INDEX\n-            long ordering = (snapshotVersion << MAX_BITS_FOR_INDEX) | index;\n-            CorfuQueueRecord<E> record = new CorfuQueueRecord<>(\n-                    ordering, entryId, corfuTable.get(entryId)\n-            );\n-            copy.add(record);\n-        }\n-        // Given that we are using a WRITE_AFTER_WRITE on a read-only txn, we expect no aborts.\n-        if (startedNewTransaction) {\n-            runtime.getObjectsView().TXEnd();\n+            copy.add(entry.getValue());", "originalCommit": "45b6120022507bd7ee1a2133c65de06d4286d7d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMzkzMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401233933", "bodyText": "I think your comment is on old version of the code - the whole loop is fixed up based on a previous comment, so I guess it can't happen anymore?", "author": "hisundar", "createdAt": "2020-03-31T21:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -245,19 +231,14 @@ public class CorfuQueue<E> {\n      */\n     public List<CorfuQueueRecord<E>> entryList(CorfuRecordId entriesAfter, int maxEntries) {\n         if (maxEntries <= 0) {\n-            throw new IllegalArgumentException(\"entryList given negative maxEntries\");\n-        }\n-        if (maxEntries > MAX_INDEX_ENTRIES) {\n-            throw new IllegalArgumentException(\n-                    \"entryList can't return more than \"+MAX_INDEX_ENTRIES+\" entries\"\n-            );\n+            throw new IllegalArgumentException(\"entryList can't take zero or negative maxEntries\");\n         }\n \n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n-    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n+        Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n                 r1.getValue().getRecordId().compareTo(r2.getValue().recordId);\n         int index = 0;\n         for (Map.Entry<Long, CorfuQueueRecord<E>> entry : corfuTable.entryStream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjU0NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401176544", "bodyText": "can we do the same, declare statics so it is easy to follow this init..", "author": "annym", "createdAt": "2020-03-31T19:56:58Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -285,23 +275,23 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n      * @return all the entries in the Queue\n      */\n     public List<CorfuQueueRecord<E>> entryList() {\n-        return this.entryList(0L, MAX_INDEX_ENTRIES);\n+        return this.entryList(new CorfuRecordId(0,0,0), MAX_INDEX_ENTRIES);", "originalCommit": "45b6120022507bd7ee1a2133c65de06d4286d7d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjQ5OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401236499", "bodyText": "added trace, thanks", "author": "hisundar", "createdAt": "2020-03-31T21:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex fceeed7e159..cf1da8a510d 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -275,7 +256,7 @@ public class CorfuQueue<E> {\n      * @return all the entries in the Queue\n      */\n     public List<CorfuQueueRecord<E>> entryList() {\n-        return this.entryList(new CorfuRecordId(0,0,0), MAX_INDEX_ENTRIES);\n+        return this.entryList(new CorfuRecordId(0,0,0), Integer.MAX_VALUE);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjM3Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401186373", "bodyText": "add trace or debug logging?", "author": "annym", "createdAt": "2020-03-31T20:14:30Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/OptimisticTransactionalContext.java", "diffHunk": "@@ -286,4 +286,9 @@ public long getConflictSetAndCommit(ConflictSetInfo conflictSet) {\n         log.trace(\"Commit[{}] Written to {}\", this, address);\n         return address;\n     }\n+\n+    @Override\n+    public void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener) {\n+        this.getPreCommitListeners().add(preCommitListener);", "originalCommit": "45b6120022507bd7ee1a2133c65de06d4286d7d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjQwNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401236407", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T21:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjM3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MTMzNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401191334", "bodyText": "add some logging?", "author": "annym", "createdAt": "2020-03-31T20:22:56Z", "path": "runtime/src/main/java/org/corfudb/runtime/view/StreamsView.java", "diffHunk": "@@ -168,6 +168,17 @@ public long append(@Nonnull Object object, @Nullable TxResolutionInfo conflictIn\n             }\n \n             try {\n+                if (TransactionalContext.isInTransaction()) {\n+                    // If this transaction has entries that wish to capture the committed address\n+                    // invoke its preCommitCallbacks with the tokenResponse from the sequencer.\n+                    // Note that we might invoke the same method multiple times on retries,\n+                    // which means the preCommitCallback must be idempotent.\n+                    TokenResponse finalTokenResponse = tokenResponse;\n+                    TransactionalContext.getRootContext()\n+                            .getPreCommitListeners()\n+                            .forEach(e -> e.preCommitCallback(finalTokenResponse));", "originalCommit": "45b6120022507bd7ee1a2133c65de06d4286d7d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjkxMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401236910", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-03-31T21:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MTMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "e3990910593367ba839bb9968c170516443a1ff5", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/view/StreamsView.java b/runtime/src/main/java/org/corfudb/runtime/view/StreamsView.java\nindex 0abcc300a86..7ac84944a45 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/view/StreamsView.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/view/StreamsView.java\n\n@@ -174,6 +174,8 @@ public class StreamsView extends AbstractView {\n                     // Note that we might invoke the same method multiple times on retries,\n                     // which means the preCommitCallback must be idempotent.\n                     TokenResponse finalTokenResponse = tokenResponse;\n+                    log.debug(\"append: Invoking {} preCommitListeners\",\n+                            TransactionalContext.getRootContext().getPreCommitListeners().size());\n                     TransactionalContext.getRootContext()\n                             .getPreCommitListeners()\n                             .forEach(e -> e.preCommitCallback(finalTokenResponse));\n"}}, {"oid": "0f15401bccd5ef01c58fe2e345247aaf2f0f03e7", "url": "https://github.com/CorfuDB/CorfuDB/commit/0f15401bccd5ef01c58fe2e345247aaf2f0f03e7", "message": "Add test case for both inorder and our of order between enqueue op and txEnd.", "committedDate": "2020-03-31T20:28:12Z", "type": "forcePushed"}, {"oid": "facf49eaf3e1b3b25531872af891203fa18b6cb9", "url": "https://github.com/CorfuDB/CorfuDB/commit/facf49eaf3e1b3b25531872af891203fa18b6cb9", "message": "Add test case for both inorder and out of order between enqueue op and txEnd.", "committedDate": "2020-03-31T20:31:52Z", "type": "forcePushed"}, {"oid": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "url": "https://github.com/CorfuDB/CorfuDB/commit/60dad7d429b2bee6e3701e8d4e593f713965c1b1", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>", "committedDate": "2020-03-31T20:57:34Z", "type": "forcePushed"}, {"oid": "e3990910593367ba839bb9968c170516443a1ff5", "url": "https://github.com/CorfuDB/CorfuDB/commit/e3990910593367ba839bb9968c170516443a1ff5", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>", "committedDate": "2020-03-31T22:12:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1ODcyMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401258720", "bodyText": "Looks like you are still using 0, 0 for non-transactional entries (the else branch in enqueue) ?", "author": "WenbinZhu", "createdAt": "2020-03-31T22:45:12Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -75,59 +80,55 @@ public int size() {\n      * with their snapshot+index id (also a long) which represents a global comparable ordering.\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n+    @EqualsAndHashCode\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n-        private final UUID id;\n-        public CorfuRecordId(long ordering, long uniqueId) {\n-            this.id = new UUID(ordering, uniqueId);\n-        }\n+        @Setter\n+        @Getter\n+        private long epoch;\n \n-        /**\n-         * @return Return only the unique part of the id without the ordering\n-         */\n-        public long getEntryId() {\n-            return id.getLeastSignificantBits();\n+        @Setter\n+        @Getter\n+        private long sequence;\n+\n+        @Getter\n+        private long entryId;\n+\n+        public CorfuRecordId(long epoch, long sequence, long entryId) {\n+            this.epoch = epoch;\n+            this.sequence = sequence;\n+            this.entryId = entryId;\n         }\n \n         /**\n-         * @return Return only the ordering part of the entry without the id.\n+         * @return Pack CorfuRecordId into a 16 byte UUID\n+         * Q: Is it safe?\n+         * At the rate of 2ms per transaction, sequence will take  69 years to rollover.\n+         * At the rate of 1 cluster reconfig per minute, epoch will take 31 years to rollover.\n          */\n-        public long getOrdering() {\n-            return id.getMostSignificantBits();\n+        public UUID asUUID() {\n+            final int BITS_FOR_SEQUENCE = 40;\n+            return new UUID(epoch<<BITS_FOR_SEQUENCE | sequence, entryId);\n         }\n \n         /**\n          * It's NOT ok to compare two objects if their ordering metadata is dissimilar.\n          * @param o object to compare against.\n-         * @throws IllegalArgumentException if the two Ids are not comparable.\n          * @return results of comparison.\n          */\n         @Override\n         public int compareTo(CorfuRecordId o) {\n-            if (this.id.getMostSignificantBits() == 0 && o.id.getMostSignificantBits() != 0) {\n-                throw new IllegalArgumentException(\n-                        \"Incompatible CorfuRecordId comparison: ordering unavailable\");\n-            }\n-            if (this.id.getMostSignificantBits() !=0 && o.id.getMostSignificantBits() == 0) {\n-               throw new IllegalArgumentException(\n-                       \"Incompatible CorfuRecordId comparison: order of compared object unknown\");\n-            }\n-            if (this.id.getLeastSignificantBits() == o.id.getLeastSignificantBits()) {\n-                return 0;\n+            if ((this.sequence != Address.NON_ADDRESS && o.sequence == Address.NON_ADDRESS) ||\n+                    (this.sequence == Address.NON_ADDRESS && o.sequence != Address.NON_ADDRESS)) {\n+                throw new IllegalStateException(\"CorfuQueue cannot mix transactional and non-transactional types\");", "originalCommit": "e3990910593367ba839bb9968c170516443a1ff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1OTg0NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401259844", "bodyText": "exactly, Queue is still usable if all enqueue() are non-transactional (unit tests only at this point)", "author": "hisundar", "createdAt": "2020-03-31T22:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1ODcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MTIyMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401261223", "bodyText": "I mean if we still use 0, 0 for non-transactional entries, we won't have entries with Address.NON_ADDRESS, so why do we need this check?", "author": "WenbinZhu", "createdAt": "2020-03-31T22:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1ODcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2Nzk1Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401267956", "bodyText": "Sorry good catch", "author": "hisundar", "createdAt": "2020-03-31T23:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1ODcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NTU3Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401345573", "bodyText": "@hisundar Is this fixed?", "author": "WenbinZhu", "createdAt": "2020-04-01T04:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1ODcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5OTE3OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401399179", "bodyText": "yes I removed the check as you suggested.", "author": "hisundar", "createdAt": "2020-04-01T07:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1ODcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "752605354b0c690f74b4f167c8b56dad195f8075", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\nindex bf063bcf84b..79fd0e7d643 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java\n\n@@ -117,10 +117,6 @@ public class CorfuQueue<E> {\n          */\n         @Override\n         public int compareTo(CorfuRecordId o) {\n-            if ((this.sequence != Address.NON_ADDRESS && o.sequence == Address.NON_ADDRESS) ||\n-                    (this.sequence == Address.NON_ADDRESS && o.sequence != Address.NON_ADDRESS)) {\n-                throw new IllegalStateException(\"CorfuQueue cannot mix transactional and non-transactional types\");\n-            }\n             return Comparator.comparing(CorfuRecordId::getEpoch)\n                     .thenComparing(CorfuRecordId::getSequence)\n                     .thenComparing(CorfuRecordId::getEntryId)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NDE4OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401274189", "bodyText": "Please fix\nlog.debug(\"ENQ: {} => {} at {}\", i, queueData, streamOffset);", "author": "xnull", "createdAt": "2020-03-31T23:33:04Z", "path": "test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java", "diffHunk": "@@ -88,11 +93,13 @@ public Record(CorfuRecordId id, String data) {\n                     TXBegin(txnType);\n                     Long coinToss = new Random().nextLong() % numConflictKeys;\n                     conflictMap.put(coinToss, coinToss);\n+                    corfuQueue.enqueue(queueData);\n+                    // Each transaction may or may not sleep to simulate out of order between enQ & commit\n+                    TimeUnit.MILLISECONDS.sleep(coinToss);\n                     lock.lock();\n-                    CorfuRecordId id = corfuQueue.enqueue(queueData);\n                     final long streamOffset = TXEnd();\n-                    validator.add(new Record(id, queueData));\n-                    log.debug(\"ENQ:\" + id + \"=>\" + queueData + \" at \" + streamOffset);\n+                    validator.add(new Record(new CorfuRecordId(0,0,i), queueData));\n+                    log.debug(\"ENQ:\" + i + \"=>\" + queueData + \" at \" + streamOffset);", "originalCommit": "e3990910593367ba839bb9968c170516443a1ff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5MTM3MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401291370", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-04-01T00:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NDE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a4c087241e5eec956d3029ed52ba0234930b8aad", "chunk": "diff --git a/test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java b/test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java\nindex 7e8ccecc318..946342a2bad 100644\n--- a/test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java\n+++ b/test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java\n\n@@ -99,10 +101,10 @@ public class CorfuQueueTxTest extends AbstractTransactionsTest {\n                     lock.lock();\n                     final long streamOffset = TXEnd();\n                     validator.add(new Record(new CorfuRecordId(0,0,i), queueData));\n-                    log.debug(\"ENQ:\" + i + \"=>\" + queueData + \" at \" + streamOffset);\n+                    log.debug(\"ENQ: {} => {} at {}\", i, queueData, streamOffset);\n                     lock.unlock();\n                 } catch (TransactionAbortedException txException) {\n-                    log.debug(queueData + \" ---> Abort!!! \");\n+                    log.debug(\"{} ---> Abort!!! \", queueData);\n                     // Half the transactions are expected to abort\n                     lock.unlock();\n                 }\n"}}, {"oid": "752605354b0c690f74b4f167c8b56dad195f8075", "url": "https://github.com/CorfuDB/CorfuDB/commit/752605354b0c690f74b4f167c8b56dad195f8075", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>", "committedDate": "2020-04-01T00:30:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5ODYxNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401298614", "bodyText": "We should remove the lock and generated some tx abort scenarios. You can define validator as a hashtable instead of an array. I am not clear if tx aborted, if the record will be removed from the queue or not?", "author": "xiaoqin2012", "createdAt": "2020-04-01T00:59:41Z", "path": "test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java", "diffHunk": "@@ -88,11 +93,13 @@ public Record(CorfuRecordId id, String data) {\n                     TXBegin(txnType);\n                     Long coinToss = new Random().nextLong() % numConflictKeys;\n                     conflictMap.put(coinToss, coinToss);\n+                    corfuQueue.enqueue(queueData);\n+                    // Each transaction may or may not sleep to simulate out of order between enQ & commit\n+                    TimeUnit.MILLISECONDS.sleep(coinToss);\n                     lock.lock();", "originalCommit": "752605354b0c690f74b4f167c8b56dad195f8075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzOTk2Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401339966", "bodyText": "Aborts are definitely happening because we conflict on one of two values, for example in a test with 2000 transactions only about 1500 succeed. But I will add an assert to verify this too.", "author": "hisundar", "createdAt": "2020-04-01T03:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5ODYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NDA5Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401344096", "bodyText": "Actually it turns out travis sometimes serializes the runs which means there might not be any aborts due to concurrency. So I can't add an assert or test will become very non-deterministic :(", "author": "hisundar", "createdAt": "2020-04-01T04:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5ODYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "a4c087241e5eec956d3029ed52ba0234930b8aad", "chunk": "diff --git a/test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java b/test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java\nindex f3751c830c9..946342a2bad 100644\n--- a/test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java\n+++ b/test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java\n\n@@ -99,10 +101,10 @@ public class CorfuQueueTxTest extends AbstractTransactionsTest {\n                     lock.lock();\n                     final long streamOffset = TXEnd();\n                     validator.add(new Record(new CorfuRecordId(0,0,i), queueData));\n-                    log.debug(\"ENQ:\" + i + \"=>\" + queueData + \" at \" + streamOffset);\n+                    log.debug(\"ENQ: {} => {} at {}\", i, queueData, streamOffset);\n                     lock.unlock();\n                 } catch (TransactionAbortedException txException) {\n-                    log.debug(queueData + \" ---> Abort!!! \");\n+                    log.debug(\"{} ---> Abort!!! \", queueData);\n                     // Half the transactions are expected to abort\n                     lock.unlock();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjMzNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401306334", "bodyText": "are snapshot transactions considered read-only?", "author": "pankti-m", "createdAt": "2020-04-01T01:30:07Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/SnapshotTransactionalContext.java", "diffHunk": "@@ -85,4 +85,9 @@ public SnapshotTransactionalContext(Transaction transaction) {\n     public void addTransaction(AbstractTransactionalContext tc) {\n         throw new UnsupportedOperationException(\"Can't merge into a readonly txn (yet)\");\n     }\n+\n+    @Override\n+    public void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener) {\n+        throw new UnsupportedOperationException(\"Can't register precommit hooks in readonly txn\");", "originalCommit": "752605354b0c690f74b4f167c8b56dad195f8075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzOTUxNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401339514", "bodyText": "yes, there are similar exceptions for attempting to write in a snapshot transaction", "author": "hisundar", "createdAt": "2020-04-01T03:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjMzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjgwMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401306801", "bodyText": "Shouldnt it be overridden in WriteAfterWriteTransactionalContext as well?", "author": "pankti-m", "createdAt": "2020-04-01T01:32:02Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java", "diffHunk": "@@ -248,6 +251,17 @@ public void syncWithRetryUnsafe(VersionLockedObject vlo,\n      */\n     public abstract void addTransaction(AbstractTransactionalContext tc);\n \n+    /**\n+     * Add an object that needs extra processing right before commit happens\n+     *\n+     * @param preCommitListener The context of the object that needs extra processing\n+     *                         along with its lambda.\n+     */\n+    public abstract void addPreCommitListener(PreCommitListener preCommitListener);", "originalCommit": "752605354b0c690f74b4f167c8b56dad195f8075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzOTQzMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401339433", "bodyText": "WriteAfterWrite inherits from OptimisticTransaction and will end up inheriting this method too.", "author": "hisundar", "createdAt": "2020-04-01T03:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjgwMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a4c087241e5eec956d3029ed52ba0234930b8aad", "url": "https://github.com/CorfuDB/CorfuDB/commit/a4c087241e5eec956d3029ed52ba0234930b8aad", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>", "committedDate": "2020-04-01T04:03:54Z", "type": "commit"}, {"oid": "a4c087241e5eec956d3029ed52ba0234930b8aad", "url": "https://github.com/CorfuDB/CorfuDB/commit/a4c087241e5eec956d3029ed52ba0234930b8aad", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>", "committedDate": "2020-04-01T04:03:54Z", "type": "forcePushed"}]}