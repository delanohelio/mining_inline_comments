{"pr_number": 2824, "pr_title": "CorfuStore: Allow re-entrant Transactions, full Queue over protobuf API support", "pr_createdAt": "2020-11-11T22:36:59Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2824", "timeline": [{"oid": "d116dac822e882ba3c783f28f77c84041ac94533", "url": "https://github.com/CorfuDB/CorfuDB/commit/d116dac822e882ba3c783f28f77c84041ac94533", "message": "TxnContext: Allow nested transactions\n\n+Test case to demonstrate read-committed for the nested level.", "committedDate": "2020-11-14T04:06:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM3NDQ4OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r523374489", "bodyText": "Nit: Can we indent the comment with the parameter?", "author": "chetangudisagar", "createdAt": "2020-11-14T04:31:42Z", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java", "diffHunk": "@@ -494,4 +505,57 @@ public void onCommit(Map<String, List<CorfuStreamEntry>> mutations) {\n         }\n         log.debug(table.getMetrics().toString());\n     }\n+\n+    /**\n+     * Validate that nested transactions do not throw exception if txnWithNesting is used.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void checkNestedTransaction() throws Exception {\n+// Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();", "originalCommit": "d116dac822e882ba3c783f28f77c84041ac94533", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY0MjI2Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r524642263", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-11-16T21:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM3NDQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c91ad9ce62ddb27096321fed7d406b938e3c8fd2", "chunk": "diff --git a/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java b/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\nindex ec732d23f6d..fa32aab551f 100644\n--- a/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\n+++ b/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\n\n@@ -543,12 +543,11 @@ public class CorfuStoreShimTest extends AbstractViewTest {\n                 CorfuStoreEntry<Uuid, ManagedMetadata, ManagedMetadata> entry;\n                 try (TxnContextShim query = shimStore.txnWithNesting(someNamespace)) {\n                     entry = query.getRecord(tableName, key);\n+                    query.commit();\n                 }\n-                // Since the transaction in the parent call has not yet committed,\n-                // this read which does not carry the parent TxnContextShim will NOT see the dirty\n-                // mutation made by the parent transaction.\n-                assertThat(entry.getPayload()).isNull();\n-                assertThat(entry.getMetadata()).isNull();\n+                assertThat(entry.getMetadata().getRevision()).isEqualTo(0);\n+                assertThat(entry.getMetadata().getCreateTime()).isGreaterThan(0);\n+                assertThat(entry.getMetadata().getCreateTime()).isEqualTo(entry.getMetadata().getLastModifiedTime());\n             }\n         }\n         try (TxnContextShim txn = shimStore.txn(someNamespace)) {\n"}}, {"oid": "c91ad9ce62ddb27096321fed7d406b938e3c8fd2", "url": "https://github.com/CorfuDB/CorfuDB/commit/c91ad9ce62ddb27096321fed7d406b938e3c8fd2", "message": "TxnContext: Allow nested transactions\n\nRemove inheritance to support auto-closeable\n+Test case to demonstrate read-committed for the nested level.", "committedDate": "2020-11-18T17:12:02Z", "type": "forcePushed"}, {"oid": "11f90666372c988fccbcd572f5a5b357a424b7ea", "url": "https://github.com/CorfuDB/CorfuDB/commit/11f90666372c988fccbcd572f5a5b357a424b7ea", "message": "TxnContext: Allow nested transactions\n\nRemove inheritance to support auto-closeable\n+Test case to demonstrate read-committed for the nested level.", "committedDate": "2020-11-18T17:13:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0NjQ0MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526346440", "bodyText": "comments need to be updated.", "author": "medhavidhawan", "createdAt": "2020-11-18T19:02:06Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -206,7 +205,8 @@ public TxnContext txn(@Nonnull final String namespace, IsolationLevel isolationL\n                 this.runtime.getObjectsView(),\n                 this.runtime.getTableRegistry(),\n                 namespace,\n-                isolationLevel);\n+                isolationLevel,\n+                false);", "originalCommit": "11f90666372c988fccbcd572f5a5b357a424b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzOTM4NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526539384", "bodyText": "done", "author": "hisundar", "createdAt": "2020-11-19T01:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0NjQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "9bebd40650bda47bb21190ed80a3597886c4263a", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java\nindex b5fa63dfdb2..14ea99b05c7 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java\n\n@@ -205,8 +206,7 @@ public class CorfuStore {\n                 this.runtime.getObjectsView(),\n                 this.runtime.getTableRegistry(),\n                 namespace,\n-                isolationLevel,\n-                false);\n+                isolationLevel);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0NzU3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526347571", "bodyText": "need to add comments as to what it means.", "author": "medhavidhawan", "createdAt": "2020-11-18T19:04:03Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -64,14 +65,15 @@\n     public TxnContext(@Nonnull final ObjectsView objectsView,\n                       @Nonnull final TableRegistry tableRegistry,\n                       @Nonnull final String namespace,\n-                      @Nonnull final IsolationLevel isolationLevel) {\n+                      @Nonnull final IsolationLevel isolationLevel,\n+                      @Nonnull boolean allowNestedTransactions) {", "originalCommit": "11f90666372c988fccbcd572f5a5b357a424b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MzIzMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526473232", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-11-18T22:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0NzU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a086a0bd9cf0e4fd48232a61cf7c7aa4f61a715", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\nindex bc5415c1155..2b884327a54 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n\n@@ -60,13 +62,14 @@ public class TxnContext implements AutoCloseable {\n      * @param tableRegistry Table Registry.\n      * @param namespace     Namespace boundary defined for the transaction.\n      * @param isolationLevel How should this transaction be applied/evaluated.\n+     * @param allowNestedTransactions Is it ok to re-use another transaction context.\n      */\n     @Nonnull\n     public TxnContext(@Nonnull final ObjectsView objectsView,\n                       @Nonnull final TableRegistry tableRegistry,\n                       @Nonnull final String namespace,\n                       @Nonnull final IsolationLevel isolationLevel,\n-                      @Nonnull boolean allowNestedTransactions) {\n+                      boolean allowNestedTransactions) {\n         this.objectsView = objectsView;\n         this.tableRegistry = tableRegistry;\n         this.namespace = namespace;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NDIwNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526364205", "bodyText": "getTxnContext or getThreadLocalTxnContext", "author": "medhavidhawan", "createdAt": "2020-11-18T19:31:19Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -607,6 +633,24 @@ boolean isExists(@Nonnull String tableName, @Nonnull final K key) {\n         return table.scanAndFilterByEntry(record -> true);\n     }\n \n+    /**\n+     * @return The the thread local's TxnContext, null if not in a transaction.\n+     */\n+    public static TxnContext getMyTxnContext() {", "originalCommit": "11f90666372c988fccbcd572f5a5b357a424b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MzM4Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526473383", "bodyText": "done, thanks", "author": "hisundar", "createdAt": "2020-11-18T22:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NDIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c5bfbbb2833355a9795e5a1358b83fff93137cc", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\nindex bc5415c1155..53638496c1e 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n\n@@ -627,10 +671,10 @@ public class TxnContext implements AutoCloseable {\n      * @return Collection of filtered entries.\n      */\n     public <K extends Message, V extends Message, M extends Message>\n-    List<CorfuStoreEntry<K, V, M>> entryList(@Nonnull final Table<K, V, M> table) {\n+    List<Table.CorfuQueueRecord> entryList(@Nonnull final Table<K, V, M> table) {\n         applyWritesForReadOnTable(table);\n-        /***** TODO FIX ME WITH REAL IMPLEMENTATION *******/\n-        return table.scanAndFilterByEntry(record -> true);\n+        table.getMetrics().incNumEntryLists();\n+        return table.entryList();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NTkxOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526365918", "bodyText": "can there be a failure before this is called ? in the run methods ?", "author": "medhavidhawan", "createdAt": "2020-11-18T19:34:10Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -652,10 +710,16 @@ private void txBeginInternal() {\n      * @return - address at which the commit of this transaction occurred.\n      */\n     public long commit() {\n-        if (!TransactionalContext.isInTransaction()) {\n+        if (!isInMyTransaction()) {\n             throw new IllegalStateException(\"commit() called without a transaction!\");\n         }\n+\n+        // Apply any buffered up operations.\n         operations.forEach(Runnable::run);\n+\n+        // Regardless of transaction outcome remove any TxnContext association from ThreadLocal.\n+        TransactionalContext.getRootContext().setTxnContext(null);", "originalCommit": "11f90666372c988fccbcd572f5a5b357a424b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MzY3OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526473679", "bodyText": "yes, then the auto-closeable will catch it and abort the transaction", "author": "hisundar", "createdAt": "2020-11-18T22:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NTkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "0a086a0bd9cf0e4fd48232a61cf7c7aa4f61a715", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\nindex bc5415c1155..2b884327a54 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n\n@@ -720,14 +725,19 @@ public class TxnContext implements AutoCloseable {\n         // Regardless of transaction outcome remove any TxnContext association from ThreadLocal.\n         TransactionalContext.getRootContext().setTxnContext(null);\n \n-        long commitAddress;\n-        try {\n-            commitAddress = this.objectsView.TXEnd();\n-        } catch (Exception ex) {\n-            tablesInTxn.values().forEach(t -> t.getMetrics().incNumTxnAborts());\n-            tablesInTxn.clear();\n-            throw ex;\n+        long commitAddress = Address.NON_ADDRESS;\n+        if (iDidNotStartCorfuTxn) {\n+            log.warn(\"commit() called on an inner transaction not started by CorfuStore\");\n+        } else {\n+            try {\n+                commitAddress = this.objectsView.TXEnd();\n+            } catch (Exception ex) {\n+                tablesInTxn.values().forEach(t -> t.getMetrics().incNumTxnAborts());\n+                tablesInTxn.clear();\n+                throw ex;\n+            }\n         }\n+\n         long timeElapsed = System.nanoTime() - txnStartTime;\n         switch (txnType) {\n             case READ_ONLY:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NzI0Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526367242", "bodyText": "Is this correct ?", "author": "medhavidhawan", "createdAt": "2020-11-18T19:36:08Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -623,13 +667,26 @@ void applyWritesForReadOnTable(Table<K, V, M> tableBeingRead) {\n     }\n \n     /**\n+     * @param allowNestedTransactions - is it ok to re-use thread's corfu transaction?\n      * Start the actual corfu transaction. Ensure there isn't one already in the same thread.\n+     *\n      */\n-    private void txBeginInternal() {\n+    private void txBeginInternal(boolean allowNestedTransactions) {\n         if (TransactionalContext.isInTransaction()) {\n-            log.error(\"Cannot start new transaction in this thread without ending previous one\");\n-            throw new TransactionAlreadyStartedException(TransactionalContext.getRootContext().toString());\n+            TxnContext txnContext = TransactionalContext.getRootContext().getTxnContext();\n+            if (!allowNestedTransactions) {\n+                log.error(\"Current thread already has a transaction started and nested transactions are disabled!\");\n+                throw new TransactionAlreadyStartedException(TransactionalContext.getRootContext().toString());\n+            }\n+            if (txnContext != null) {\n+                log.error(\"Cannot start new transaction in this thread without ending previous one\");\n+                throw new TransactionAlreadyStartedException(TransactionalContext.getRootContext().toString());\n+            }\n+            this.txnStartTime = System.nanoTime();", "originalCommit": "11f90666372c988fccbcd572f5a5b357a424b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MzkxOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526473919", "bodyText": "it's best effort given that we did not actually start the transaction", "author": "hisundar", "createdAt": "2020-11-18T22:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NzI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0a086a0bd9cf0e4fd48232a61cf7c7aa4f61a715", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\nindex bc5415c1155..2b884327a54 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n\n@@ -666,37 +702,6 @@ public class TxnContext implements AutoCloseable {\n         }\n     }\n \n-    /**\n-     * @param allowNestedTransactions - is it ok to re-use thread's corfu transaction?\n-     * Start the actual corfu transaction. Ensure there isn't one already in the same thread.\n-     *\n-     */\n-    private void txBeginInternal(boolean allowNestedTransactions) {\n-        if (TransactionalContext.isInTransaction()) {\n-            TxnContext txnContext = TransactionalContext.getRootContext().getTxnContext();\n-            if (!allowNestedTransactions) {\n-                log.error(\"Current thread already has a transaction started and nested transactions are disabled!\");\n-                throw new TransactionAlreadyStartedException(TransactionalContext.getRootContext().toString());\n-            }\n-            if (txnContext != null) {\n-                log.error(\"Cannot start new transaction in this thread without ending previous one\");\n-                throw new TransactionAlreadyStartedException(TransactionalContext.getRootContext().toString());\n-            }\n-            this.txnStartTime = System.nanoTime();\n-            log.warn(\"Reusing the transactional context created outside this layer!\");\n-            return;\n-        }\n-\n-        this.txnStartTime = System.nanoTime();\n-        Transaction.TransactionBuilder transactionBuilder = this.objectsView\n-                .TXBuild()\n-                .type(TransactionType.WRITE_AFTER_WRITE);\n-        if (isolationLevel.getTimestamp() != Token.UNINITIALIZED) {\n-            transactionBuilder.snapshot(isolationLevel.getTimestamp());\n-        }\n-        transactionBuilder.build().begin();\n-        TransactionalContext.getRootContext().setTxnContext(this);\n-    }\n \n     /**\n      * Commit the transaction.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3MDYxNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526370614", "bodyText": "Isn't this a little ambiguous ? put(key, null) = delete(key)", "author": "medhavidhawan", "createdAt": "2020-11-18T19:41:33Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -164,21 +184,27 @@ void putRecord(@Nonnull Table<K, V, M> table,\n      */\n     public <K extends Message, V extends Message, M extends Message>\n     void merge(@Nonnull Table<K, V, M> table,\n-                     @Nonnull final K key,\n-                     @Nonnull MergeCallback mergeCallback,\n-                     @Nonnull final CorfuRecord<V,M> recordDelta) {\n-        validateTableWrittenIsInNamespace(table);\n+               @Nonnull final K key,\n+               @Nonnull MergeCallback mergeCallback,\n+               @Nonnull final CorfuRecord<V,M> recordDelta) {\n+        validateWrite(table, key);\n         operations.add(() -> {\n-            CorfuRecord<V,M> oldRecord = table.get(key);\n+            CorfuRecord<V, M> oldRecord = table.get(key);\n             CorfuRecord<V, M> mergedRecord;\n             try {\n-                mergedRecord = mergeCallback.doMerge(table, oldRecord, recordDelta);\n+                mergedRecord = mergeCallback.doMerge(table, key, oldRecord, recordDelta);\n             } catch (Exception ex) {\n                 txAbort(); // explicitly abort this transaction and then throw the abort manually\n                 log.error(\"TX Abort merge: {}\", table.getFullyQualifiedTableName(), ex);\n                 throw ex;\n             }\n-            table.put(key, mergedRecord.getPayload(), mergedRecord.getMetadata());\n+            if (mergedRecord == null) {", "originalCommit": "11f90666372c988fccbcd572f5a5b357a424b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3NTA1Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526475056", "bodyText": "this was to actually fix a bug where delete with metadata wasn't being handled. I am open to suggestions though.", "author": "hisundar", "createdAt": "2020-11-18T22:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3MDYxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxODM5Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526418396", "bodyText": "The Shim prefix for the name is not that great. Can we change it to a better name.", "author": "medhavidhawan", "createdAt": "2020-11-18T21:02:48Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java", "diffHunk": "@@ -7,46 +7,59 @@\n import org.corfudb.runtime.exceptions.StaleRevisionUpdateException;\n import org.corfudb.runtime.object.transactions.AbstractTransactionalContext;\n import org.corfudb.runtime.object.transactions.TransactionalContext;\n-import org.corfudb.runtime.view.ObjectsView;\n-import org.corfudb.runtime.view.TableRegistry;\n+import org.corfudb.runtime.view.Address;\n \n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n /**\n- * Thin shim layer around CorfuStore's TxnContext for providing metadata management\n- * capabilities.\n+ * Shim layer around CorfuStore's TxnContext for providing metadata management\n+ * capabilities, nested transaction support and more!\n  *\n  * Created by hisundar on 2020-09-16\n  */\n @Slf4j\n-public class TxnContextShim extends TxnContext implements AutoCloseable {\n+public class TxnContextShim implements AutoCloseable {", "originalCommit": "11f90666372c988fccbcd572f5a5b357a424b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3NDczNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526474734", "bodyText": "ok, changed to ManagedTxnContext", "author": "hisundar", "createdAt": "2020-11-18T22:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxODM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0a086a0bd9cf0e4fd48232a61cf7c7aa4f61a715", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java b/runtime/src/main/java/org/corfudb/runtime/collections/ManagedTxnContext.java\nsimilarity index 98%\nrename from runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java\nrename to runtime/src/main/java/org/corfudb/runtime/collections/ManagedTxnContext.java\nindex c9a5aa87ec4..69460e4ca8c 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/ManagedTxnContext.java\n\n@@ -29,7 +29,7 @@ import java.util.stream.Collectors;\n  * Created by hisundar on 2020-09-16\n  */\n @Slf4j\n-public class TxnContextShim implements AutoCloseable {\n+public class ManagedTxnContext implements AutoCloseable {\n \n     /**\n      * Why can't you just inherit TxnContext instead of copying everything over?!!\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyMDMyMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526420320", "bodyText": "nit:since you use short circuit operator || the faster check could be first.", "author": "medhavidhawan", "createdAt": "2020-11-18T21:06:24Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java", "diffHunk": "@@ -230,6 +608,92 @@ void putRecord(@Nonnull Table<K, V, M> table,\n         }\n     }\n \n+    /**\n+     * Delete the record given the table object and metadata for validation.\n+     *\n+     * @param table Table object to perform the create/update on.\n+     * @param key   Key of the record to be deleted.\n+     * @param metadata Metadata to validate against.\n+     * @param <K>   Type of Key.\n+     * @param <V>   Type of Value.\n+     * @param <M>   Type of Metadata.\n+     */\n+    public <K extends Message, V extends Message, M extends Message>\n+    void deleteRecord(@Nonnull Table<K, V, M> table,\n+                      @Nonnull final K key,\n+                      @Nullable final M metadata) {\n+        if (metadata == null) {\n+            this.txnContext.delete(table, key);\n+            return;\n+        }\n+        MergeCallbackForDeleteImpl mergeCallbackForDelete = new MergeCallbackForDeleteImpl();\n+        this.txnContext.merge(table, key, mergeCallbackForDelete, new CorfuRecord<>(null, metadata));\n+    }\n+\n+    /**\n+     *\n+     * Delete a record given just tableName and the metadata for validation against.\n+     *\n+     * @param tableName - full string representation of the table\n+     * @param key - the key of the record being inserted\n+     * @param metadata - the metadata which will be validated\n+     * @param <K> - type of the key or identifier.\n+     * @param <V> - type of the value or payload\n+     * @param <M> - type of the metadata\n+     */\n+    public <K extends Message, V extends Message, M extends Message>\n+    void deleteRecord(@Nonnull String tableName,\n+                      @Nonnull final K key,\n+                      @Nullable final M metadata) {\n+        deleteRecord(this.getTable(tableName), key, metadata);\n+    }\n+\n+    static class MergeCallbackForDeleteImpl implements TxnContext.MergeCallback {\n+        /**\n+         * Core logic for handling metadata modifications on delete with metadata.\n+         *\n+         * @param table       - The table object on which the merge is being done.\n+         * @param key         - Key of the record on which merge is being done.\n+         * @param oldRecord   - The previous fetched record that exists in the table.\n+         * @param deltaUpdate - Record with only the metadata passed in for validation.\n+         * @param <K>         - type of the key\n+         * @param <V>         - type of the value or payload\n+         * @param <M>         - type of the metadata\n+         * @return null if validation was successful or StaleRevision exception if not.\n+         */\n+        @Override\n+        public <K extends Message, V extends Message, M extends Message>\n+        CorfuRecord<V, M> doMerge(Table<K, V, M> table,\n+                                  K key,\n+                                  CorfuRecord<V, M> oldRecord,\n+                                  CorfuRecord<V, M> deltaUpdate) {\n+            M deltaMetadata = deltaUpdate.getMetadata();\n+            if (deltaUpdate.getPayload() != null) {\n+                throw new IllegalArgumentException(\"Non-null payload sent for delete validation\");\n+            }\n+\n+            final Message.Builder builder = deltaMetadata.toBuilder();\n+            for (Descriptors.FieldDescriptor fieldDescriptor : deltaMetadata.getDescriptorForType().getFields()) {\n+                if (\"revision\".equals(fieldDescriptor.getName())) {\n+                    if (oldRecord == null || oldRecord.getMetadata() == null) {\n+                        return null;\n+                    } else {\n+                        Long prevRevision = (Long) oldRecord.getMetadata().getField(fieldDescriptor);\n+                        Long givenRevision = (Long) deltaMetadata.getField(fieldDescriptor);\n+                        if ((givenRevision > 0 && // Validate revision only if set\n+                                prevRevision.longValue() == givenRevision.longValue())\n+                                || givenRevision == 0) { // Do not validate revision if field isn't set", "originalCommit": "11f90666372c988fccbcd572f5a5b357a424b7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3NDI4MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r526474280", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-11-18T22:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQyMDMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "0a086a0bd9cf0e4fd48232a61cf7c7aa4f61a715", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java b/runtime/src/main/java/org/corfudb/runtime/collections/ManagedTxnContext.java\nsimilarity index 98%\nrename from runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java\nrename to runtime/src/main/java/org/corfudb/runtime/collections/ManagedTxnContext.java\nindex c9a5aa87ec4..69460e4ca8c 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/ManagedTxnContext.java\n\n@@ -680,9 +680,9 @@ public class TxnContextShim implements AutoCloseable {\n                     } else {\n                         Long prevRevision = (Long) oldRecord.getMetadata().getField(fieldDescriptor);\n                         Long givenRevision = (Long) deltaMetadata.getField(fieldDescriptor);\n-                        if ((givenRevision > 0 && // Validate revision only if set\n-                                prevRevision.longValue() == givenRevision.longValue())\n-                                || givenRevision == 0) { // Do not validate revision if field isn't set\n+                        if (givenRevision == 0 || // Do not validate revision if field isn't set\n+                                (givenRevision > 0 && // Validate revision only if set\n+                                prevRevision.longValue() == givenRevision.longValue())) {\n                             return null;\n                         } else {\n                             throw new StaleRevisionUpdateException(prevRevision, givenRevision);\n"}}, {"oid": "0a086a0bd9cf0e4fd48232a61cf7c7aa4f61a715", "url": "https://github.com/CorfuDB/CorfuDB/commit/0a086a0bd9cf0e4fd48232a61cf7c7aa4f61a715", "message": "TxnContext: Allow nested transactions\n\nRemove inheritance to support auto-closeable\n+Test case to demonstrate the 2 types of nesting.", "committedDate": "2020-11-19T17:05:37Z", "type": "forcePushed"}, {"oid": "21f58d2628dbf47a4d6a52e4edcbfec90452c22b", "url": "https://github.com/CorfuDB/CorfuDB/commit/21f58d2628dbf47a4d6a52e4edcbfec90452c22b", "message": "TxnContext: Allow nested transactions\n\nRemove inheritance to support auto-closeable\nAllow commitCallbacks in nested transactions.\n+Test case to demonstrate the 2 types of nesting.", "committedDate": "2020-11-19T19:07:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3NzA2OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r527177069", "bodyText": "Probably should be validateNameSpace and not write. Kind of confusing when invoked for deletes. Also, for writes the Key can never be null, so its not even optional for a map.", "author": "Maithem", "createdAt": "2020-11-19T20:28:12Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -86,13 +87,15 @@ public TxnContext(@Nonnull final ObjectsView objectsView,\n     /**\n      * All write api must be validate to ensure that the table belongs to the namespace.\n      *\n-     * @param table - table being written to\n-     * @param <K> -type of the key\n-     * @param <V> - type of the payload/value\n-     * @param <M> - type of the metadata\n+     * @param table         - table being written to\n+     * @param key           - key used in the transaction to check for null.\n+     * @param validateKey   - should key be validated for null.\n+     * @param <K>           - type of the key\n+     * @param <V>           - type of the payload/value\n+     * @param <M>           - type of the metadata\n      */\n     private <K extends Message, V extends Message, M extends Message>\n-    void validateTableWrittenIsInNamespace(@Nonnull Table<K, V, M> table) {\n+    void validateWrite(@Nonnull Table<K, V, M> table, K key, boolean validateKey) {", "originalCommit": "51b570849d9a3f235077ee8fb9965caf992ba873", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1MzMxNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r527253315", "bodyText": "You'd be surprised then :)\nKey can never be null but the way it fails when the table.put() is invoked with the key being null is not pretty..\nObjectsView 9496 TXEnd[TX[9672]]: Unexpected exception java.lang.NullPointerException: null at org.corfudb.util.serializer.ISerializer.hash(ISerializer.java:123) ~[runtime-3.2.20201109031413.7872.1.jar:?] at org.corfudb.runtime.object.transactions.ConflictSetInfo.generateHashFromObject(ConflictSetInfo.java:28) ~[runtime-3.2.20201109031413.7872.1.jar:?] at org.corfudb.runtime.object.transactions.ConflictSetInfo.lambda$null$1(ConflictSetInfo.java:41) ~[runtime-3.2.20201109031413.7872.1.jar:?] at\nwe do need to validate for deletes as well because sometimes buggy code causes callers to send in null into the key.\nWe need to catch the error much early on for debug-ability.", "author": "hisundar", "createdAt": "2020-11-19T22:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3NzA2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3ODY1OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r527178659", "bodyText": "Seems a little weird to manipulate the bitmask in a validate method.", "author": "Maithem", "createdAt": "2020-11-19T20:31:01Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -102,10 +105,24 @@ void validateTableWrittenIsInNamespace(@Nonnull Table<K, V, M> table) {\n                     \"TxnContext cannot be used after a transaction has ended on \"+\n                     table.getFullyQualifiedTableName());\n         }\n+        if (validateKey && key == null) {\n+            throw new IllegalArgumentException(\"Key cannot be null on \"\n+                    + table.getFullyQualifiedTableName() + \" in transaction on namespace \" + namespace);\n+        }", "originalCommit": "51b570849d9a3f235077ee8fb9965caf992ba873", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1Mzg3Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r527253873", "bodyText": "sure, open to any alternate suggestions for a better name.\nHow about preProcessMutation() ?", "author": "hisundar", "createdAt": "2020-11-19T22:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3ODY1OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "19efe2356c8fad629cb90f4afe113dd252ce4ed7", "url": "https://github.com/CorfuDB/CorfuDB/commit/19efe2356c8fad629cb90f4afe113dd252ce4ed7", "message": "TxnContext: Allow nested transactions\n\nRemove inheritance to support auto-closeable\nAllow commitCallbacks in nested transactions.\n+Test case to demonstrate the 2 types of nesting.", "committedDate": "2020-11-20T05:15:54Z", "type": "forcePushed"}, {"oid": "9a91e5774a928d2154862cf5203b346a870aee2e", "url": "https://github.com/CorfuDB/CorfuDB/commit/9a91e5774a928d2154862cf5203b346a870aee2e", "message": "Debug start of transactions with explicit debug message", "committedDate": "2020-11-21T00:28:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2ODMxMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r529168312", "bodyText": "how about rootContext.setTxnContext(null)?", "author": "Lujie1996", "createdAt": "2020-11-24T02:55:59Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -649,21 +745,35 @@ private void txBeginInternal() {\n      * Otherwise this throws a TransactionAbortedException with a cause.\n      * The cause and the caller's intent of the transaction can determine if this aborted\n      * Transaction can be retried.\n+     * If there are any post-commit callbacks registered, they will be invoked.\n      * @return - address at which the commit of this transaction occurred.\n      */\n     public long commit() {\n-        if (!TransactionalContext.isInTransaction()) {\n+        if (!isInMyTransaction()) {\n             throw new IllegalStateException(\"commit() called without a transaction!\");\n         }\n+\n+        // Apply any buffered up operations.\n         operations.forEach(Runnable::run);\n-        long commitAddress;\n-        try {\n-            commitAddress = this.objectsView.TXEnd();\n-        } catch (Exception ex) {\n-            tablesInTxn.values().forEach(t -> t.getMetrics().incNumTxnAborts());\n-            tablesInTxn.clear();\n-            throw ex;\n+\n+        // CorfuStore should have only one transactional context since nesting is prohibited.\n+        AbstractTransactionalContext rootContext = TransactionalContext.getRootContext();\n+        // Regardless of transaction outcome remove any TxnContext association from ThreadLocal.\n+        TransactionalContext.getRootContext().setTxnContext(null);", "originalCommit": "9a91e5774a928d2154862cf5203b346a870aee2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0NjI3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r529946271", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-11-24T22:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2ODMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "3c5bfbbb2833355a9795e5a1358b83fff93137cc", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\nindex 1da849e7506..53638496c1e 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java\n\n@@ -759,7 +753,7 @@ public class TxnContext implements AutoCloseable {\n         // CorfuStore should have only one transactional context since nesting is prohibited.\n         AbstractTransactionalContext rootContext = TransactionalContext.getRootContext();\n         // Regardless of transaction outcome remove any TxnContext association from ThreadLocal.\n-        TransactionalContext.getRootContext().setTxnContext(null);\n+        rootContext.setTxnContext(null);\n \n         long commitAddress = Address.NON_ADDRESS;\n         if (iDidNotStartCorfuTxn) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3OTA3OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r529179079", "bodyText": "Where is this commitCallback used?", "author": "Lujie1996", "createdAt": "2020-11-24T03:31:03Z", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java", "diffHunk": "@@ -473,25 +482,125 @@ public void onCommit(Map<String, List<CorfuStreamEntry>> mutations) {\n             }\n         }\n \n-        try (TxnContextShim txn = shimStore.txn(someNamespace)) {\n-            txn.delete(tableName, key);\n-            txn.commit((mutations) -> {\n-                 mutations.values().forEach(mutation -> {\n-                     CorfuStreamEntry.OperationType op = mutation.get(0).getOperation();\n-                     assertThat(op).isEqualTo(CorfuStreamEntry.OperationType.DELETE);\n-                 });\n+        CommitCallbackImpl commitCallback = new CommitCallbackImpl();", "originalCommit": "9a91e5774a928d2154862cf5203b346a870aee2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0NTkwNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r529945906", "bodyText": "it is used by verticals to extract the modified metadata. It can also serve as a way to do fast table notifications.", "author": "hisundar", "createdAt": "2020-11-24T22:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3OTA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1Mjc1Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2824#discussion_r529952753", "bodyText": "But I couldn't find the usage of this commitCallback variable in this test. The following txn.addCommitCallback() adds its own callback lambda function right?", "author": "Lujie1996", "createdAt": "2020-11-24T22:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3OTA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5be2242d5282d2d7f66c04c28a61a45c8f8d2f8a", "chunk": "diff --git a/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java b/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\nindex fa01863cb49..636ec68047e 100644\n--- a/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\n+++ b/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\n\n@@ -483,7 +483,7 @@ public class CorfuStoreShimTest extends AbstractViewTest {\n         }\n \n         CommitCallbackImpl commitCallback = new CommitCallbackImpl();\n-        try (ManagedTxnContext txn = shimStore.txn(someNamespace)) {\n+        try (ManagedTxnContext txn = shimStore.tx(someNamespace)) {\n             txn.putRecord(tableName, key, value); // Look no metadata specified!\n             txn.addCommitCallback((mutations) -> {\n                 mutations.values().forEach(mutation -> {\n"}}, {"oid": "5be2242d5282d2d7f66c04c28a61a45c8f8d2f8a", "url": "https://github.com/CorfuDB/CorfuDB/commit/5be2242d5282d2d7f66c04c28a61a45c8f8d2f8a", "message": "TxnContext: Allow re-entrant transactions\n\nRemove inheritance to support auto-closeable\nAllow commitCallbacks in nested transactions.\n+Test case to demonstrate the 2 types of nesting.", "committedDate": "2020-11-24T22:22:55Z", "type": "forcePushed"}, {"oid": "3c5bfbbb2833355a9795e5a1358b83fff93137cc", "url": "https://github.com/CorfuDB/CorfuDB/commit/3c5bfbbb2833355a9795e5a1358b83fff93137cc", "message": "CorfuStore: Full Queue API support\n\nImplements the CorfuQueue over protobufs.\n+ Concurrent & Example tests to demonstrate\ncorrectness and usage.", "committedDate": "2020-11-24T22:36:25Z", "type": "forcePushed"}, {"oid": "9bebd40650bda47bb21190ed80a3597886c4263a", "url": "https://github.com/CorfuDB/CorfuDB/commit/9bebd40650bda47bb21190ed80a3597886c4263a", "message": "CorfuStore: Validate metadata on deletes, key!=null\n\n+test case to validate for code coverage.", "committedDate": "2020-11-25T07:09:21Z", "type": "commit"}, {"oid": "be229d56f76e54dacfe2c5dcbfb4d77a8dd612ce", "url": "https://github.com/CorfuDB/CorfuDB/commit/be229d56f76e54dacfe2c5dcbfb4d77a8dd612ce", "message": "TxnContext: Allow re-entrant transactions\n\nRemove inheritance to support auto-closeable\nAllow commitCallbacks in nested transactions.\n+Test case to demonstrate the 2 types of nesting.", "committedDate": "2020-11-25T07:09:21Z", "type": "commit"}, {"oid": "d9b4e9f6e7fa4f299f46dd8baedbb4e928c4459d", "url": "https://github.com/CorfuDB/CorfuDB/commit/d9b4e9f6e7fa4f299f46dd8baedbb4e928c4459d", "message": "CorfuGuidGenerator: Use CorfuStore for internal txns\n\nA prerequisite for supporting Queue api over CorfuStore\nis to have the internal guid generator move to a protobuf\nbased CorfuStore so that its checkpointing can be take care of.", "committedDate": "2020-11-25T07:09:21Z", "type": "commit"}, {"oid": "80b332f147cfb9fe3992a4c7cbfab515556be6f8", "url": "https://github.com/CorfuDB/CorfuDB/commit/80b332f147cfb9fe3992a4c7cbfab515556be6f8", "message": "CorfuStore: Full Queue API support\n\nImplements the CorfuQueue over protobufs.\n+ Concurrent & Example tests to demonstrate\ncorrectness and usage.", "committedDate": "2020-11-25T07:09:22Z", "type": "commit"}, {"oid": "80b332f147cfb9fe3992a4c7cbfab515556be6f8", "url": "https://github.com/CorfuDB/CorfuDB/commit/80b332f147cfb9fe3992a4c7cbfab515556be6f8", "message": "CorfuStore: Full Queue API support\n\nImplements the CorfuQueue over protobufs.\n+ Concurrent & Example tests to demonstrate\ncorrectness and usage.", "committedDate": "2020-11-25T07:09:22Z", "type": "forcePushed"}]}