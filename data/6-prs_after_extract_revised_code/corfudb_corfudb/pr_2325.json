{"pr_number": 2325, "pr_title": "VersionLockedObject and CorfuTable Deadlock", "pr_createdAt": "2020-01-25T23:37:43Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2325", "timeline": [{"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "url": "https://github.com/CorfuDB/CorfuDB/commit/b0b7c3cdc5dad6a754ca328340622b93a03f002a", "message": "VersionLockedObject and CorfuTable Deadlock\n\nThis patch removes a circular dependency between threads acquiring\nthe VLO lock and threads used for parallel stream operations (i.e\nscanAndFilter).", "committedDate": "2020-01-25T23:38:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDE5NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371550194", "bodyText": "r/away/a way/", "author": "medhavidhawan", "createdAt": "2020-01-28T00:03:22Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\nindex 3146b83ebe9..70280e97970 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n\n@@ -63,21 +63,19 @@ import org.corfudb.runtime.object.ICorfuVersionPolicy;\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n-    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // Accessor/Mutator threads can interleave in a way that create a deadlock because they can create a\n     // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n     // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n     // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n     // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n-    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n-    // look, which creates a circular decadency. In other words, a deadlock.\n-    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n-        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n-        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n-        return worker;\n-    };\n-\n+    // gets block on parallel stream, because the pool is exhausted with threads that are trying to acquire the VLO\n+    // look, which creates a circular dependency. In other words, a deadlock.\n     private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n-            factory, null, true);\n+            pool -> {\n+                final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+                worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+                return worker;\n+            }, null, true);\n \n     // The \"main\" map which contains the primary key-value mappings.\n     private final ContextAwareMap<K,V> mainMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDQ4NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371550485", "bodyText": "r/exhauseted/exhausted", "author": "medhavidhawan", "createdAt": "2020-01-28T00:04:25Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\nindex 3146b83ebe9..70280e97970 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n\n@@ -63,21 +63,19 @@ import org.corfudb.runtime.object.ICorfuVersionPolicy;\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n-    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // Accessor/Mutator threads can interleave in a way that create a deadlock because they can create a\n     // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n     // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n     // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n     // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n-    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n-    // look, which creates a circular decadency. In other words, a deadlock.\n-    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n-        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n-        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n-        return worker;\n-    };\n-\n+    // gets block on parallel stream, because the pool is exhausted with threads that are trying to acquire the VLO\n+    // look, which creates a circular dependency. In other words, a deadlock.\n     private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n-            factory, null, true);\n+            pool -> {\n+                final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+                worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+                return worker;\n+            }, null, true);\n \n     // The \"main\" map which contains the primary key-value mappings.\n     private final ContextAwareMap<K,V> mainMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDYwMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371550601", "bodyText": "r/decadency/dependency", "author": "medhavidhawan", "createdAt": "2020-01-28T00:04:44Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n+    // look, which creates a circular decadency. In other words, a deadlock.", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\nindex 3146b83ebe9..70280e97970 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n\n@@ -63,21 +63,19 @@ import org.corfudb.runtime.object.ICorfuVersionPolicy;\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n-    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // Accessor/Mutator threads can interleave in a way that create a deadlock because they can create a\n     // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n     // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n     // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n     // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n-    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n-    // look, which creates a circular decadency. In other words, a deadlock.\n-    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n-        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n-        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n-        return worker;\n-    };\n-\n+    // gets block on parallel stream, because the pool is exhausted with threads that are trying to acquire the VLO\n+    // look, which creates a circular dependency. In other words, a deadlock.\n     private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n-            factory, null, true);\n+            pool -> {\n+                final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+                worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+                return worker;\n+            }, null, true);\n \n     // The \"main\" map which contains the primary key-value mappings.\n     private final ContextAwareMap<K,V> mainMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTMwMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371551300", "bodyText": "Should this be a parameter ? or is this formula always good.", "author": "medhavidhawan", "createdAt": "2020-01-28T00:07:16Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n+    // look, which creates a circular decadency. In other words, a deadlock.\n+    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n+        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+        return worker;\n+    };\n+\n+    private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3Mjc1Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371572753", "bodyText": "This maintains the current behavior, which uses the common thread pool. The common thread pool uses # of cpus - 1.\nI don't like it, but making this configurable is part of a bigger change to be able to pass a client context to different layers.", "author": "Maithem", "createdAt": "2020-01-28T01:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\nindex 3146b83ebe9..70280e97970 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n\n@@ -63,21 +63,19 @@ import org.corfudb.runtime.object.ICorfuVersionPolicy;\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n-    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // Accessor/Mutator threads can interleave in a way that create a deadlock because they can create a\n     // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n     // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n     // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n     // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n-    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n-    // look, which creates a circular decadency. In other words, a deadlock.\n-    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n-        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n-        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n-        return worker;\n-    };\n-\n+    // gets block on parallel stream, because the pool is exhausted with threads that are trying to acquire the VLO\n+    // look, which creates a circular dependency. In other words, a deadlock.\n     private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n-            factory, null, true);\n+            pool -> {\n+                final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+                worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+                return worker;\n+            }, null, true);\n \n     // The \"main\" map which contains the primary key-value mappings.\n     private final ContextAwareMap<K,V> mainMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTY2NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371551665", "bodyText": "I know i have seen this problem, but is there a way to create a test that will cause this deadlock. I am not holding the review for this but just want to see if something is possible.", "author": "medhavidhawan", "createdAt": "2020-01-28T00:08:39Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +376,19 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()\n                 .map(Entry::getValue).filter(valuePredicate)\n-                .collect(Collectors.toCollection(ArrayList::new));\n+                .collect(Collectors.toCollection(ArrayList::new))).join();\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     @Accessor\n     public Collection<Map.Entry<K, V>> scanAndFilterByEntry(\n             Predicate<? super Map.Entry<K, V>> entryPredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MzE3NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371573174", "bodyText": "Its a timing issue and there isn't a lot of control over how threads access the VLO.\nLet me think about how this can be tested.", "author": "Maithem", "createdAt": "2020-01-28T01:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxODU0NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r372218544", "bodyText": "Without a test case it is hard to be convinced.\nA small test may help such as with a thread pool of 4 and each start with try to hold a common lock, then the successful one will try to do parallel work, this could lead to a possible deadlock.", "author": "xiaoqin2012", "createdAt": "2020-01-29T07:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwNjc1OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373306758", "bodyText": "This race condition is really tricky to reproduce because of timing. I wasn't able to do it with latches.\nApparent, the usage of parallel stream with the common fork-join pool has unspecified behavior\nhttps://stackoverflow.com/a/29272776", "author": "Maithem", "createdAt": "2020-01-31T03:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTY2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MDM2Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r372760366", "bodyText": "Is it cleaner to make the factory an anomymous class instead of a private class field since it's only used here?", "author": "WenbinZhu", "createdAt": "2020-01-30T05:01:25Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n+    // look, which creates a circular decadency. In other words, a deadlock.\n+    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n+        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+        return worker;\n+    };\n+\n+    private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n+            factory, null, true);", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzE0NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373267145", "bodyText": "Done.", "author": "Maithem", "createdAt": "2020-01-31T00:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MDM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\nindex 3146b83ebe9..70280e97970 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n\n@@ -63,21 +63,19 @@ import org.corfudb.runtime.object.ICorfuVersionPolicy;\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n-    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // Accessor/Mutator threads can interleave in a way that create a deadlock because they can create a\n     // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n     // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n     // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n     // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n-    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n-    // look, which creates a circular decadency. In other words, a deadlock.\n-    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n-        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n-        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n-        return worker;\n-    };\n-\n+    // gets block on parallel stream, because the pool is exhausted with threads that are trying to acquire the VLO\n+    // look, which creates a circular dependency. In other words, a deadlock.\n     private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n-            factory, null, true);\n+            pool -> {\n+                final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+                worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+                return worker;\n+            }, null, true);\n \n     // The \"main\" map which contains the primary key-value mappings.\n     private final ContextAwareMap<K,V> mainMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MjgyOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r372762829", "bodyText": "scanAndFilter/scanAndFilterByEntry are not the only functions using entryStream(), which uses parallel stream. Other functions like keySet() are using it as well, why only scanAndFilter/scanAndFilterByEntry are changed in the patch?", "author": "WenbinZhu", "createdAt": "2020-01-30T05:15:19Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +376,19 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzA2MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373267060", "bodyText": "I didn't notice.\nI'm going to change them to use keySet and values instead, because those two methods shouldn't be exposed by PersistedStreamingMap", "author": "Maithem", "createdAt": "2020-01-31T00:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MjgyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTI1OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373131258", "bodyText": "small typo: away -> a way", "author": "lixinchengdu", "createdAt": "2020-01-30T18:55:18Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzM4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373267388", "bodyText": "done", "author": "Maithem", "createdAt": "2020-01-31T00:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\nindex 3146b83ebe9..70280e97970 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n\n@@ -63,21 +63,19 @@ import org.corfudb.runtime.object.ICorfuVersionPolicy;\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n-    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // Accessor/Mutator threads can interleave in a way that create a deadlock because they can create a\n     // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n     // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n     // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n     // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n-    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n-    // look, which creates a circular decadency. In other words, a deadlock.\n-    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n-        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n-        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n-        return worker;\n-    };\n-\n+    // gets block on parallel stream, because the pool is exhausted with threads that are trying to acquire the VLO\n+    // look, which creates a circular dependency. In other words, a deadlock.\n     private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n-            factory, null, true);\n+            pool -> {\n+                final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+                worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+                return worker;\n+            }, null, true);\n \n     // The \"main\" map which contains the primary key-value mappings.\n     private final ContextAwareMap<K,V> mainMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTY3Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373131676", "bodyText": "the can create -> they can create", "author": "lixinchengdu", "createdAt": "2020-01-30T18:56:11Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a", "originalCommit": "b0b7c3cdc5dad6a754ca328340622b93a03f002a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzM1Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373267356", "bodyText": "done", "author": "Maithem", "createdAt": "2020-01-31T00:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTY3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\nindex 3146b83ebe9..70280e97970 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java\n\n@@ -63,21 +63,19 @@ import org.corfudb.runtime.object.ICorfuVersionPolicy;\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n-    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // Accessor/Mutator threads can interleave in a way that create a deadlock because they can create a\n     // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n     // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n     // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n     // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n-    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n-    // look, which creates a circular decadency. In other words, a deadlock.\n-    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n-        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n-        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n-        return worker;\n-    };\n-\n+    // gets block on parallel stream, because the pool is exhausted with threads that are trying to acquire the VLO\n+    // look, which creates a circular dependency. In other words, a deadlock.\n     private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n-            factory, null, true);\n+            pool -> {\n+                final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+                worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+                return worker;\n+            }, null, true);\n \n     // The \"main\" map which contains the primary key-value mappings.\n     private final ContextAwareMap<K,V> mainMap;\n"}}, {"oid": "98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "url": "https://github.com/CorfuDB/CorfuDB/commit/98c06f42b7d41deeed5aa0cbc087ae4b114e7160", "message": "VersionLockedObject and CorfuTable Deadlock\n\nThis patch removes a circular dependency between threads acquiring\nthe VLO lock and threads used for parallel stream operations (i.e\nscanAndFilter).", "committedDate": "2020-01-31T01:01:07Z", "type": "forcePushed"}, {"oid": "ac1d3d0ee33920546fa5988a92c5099b667ec9c3", "url": "https://github.com/CorfuDB/CorfuDB/commit/ac1d3d0ee33920546fa5988a92c5099b667ec9c3", "message": "VersionLockedObject and CorfuTable Deadlock\n\nThis patch removes a circular dependency between threads acquiring\nthe VLO lock and threads used for parallel stream operations (i.e\nscanAndFilter).", "committedDate": "2020-01-31T01:45:02Z", "type": "forcePushed"}, {"oid": "3f367edeaec77bdc3ff2279a97de81e836a86580", "url": "https://github.com/CorfuDB/CorfuDB/commit/3f367edeaec77bdc3ff2279a97de81e836a86580", "message": "VersionLockedObject and CorfuTable Deadlock\n\nThis patch removes a circular dependency between threads acquiring\nthe VLO lock and threads used for parallel stream operations (i.e\nscanAndFilter).", "committedDate": "2020-01-31T17:54:38Z", "type": "commit"}, {"oid": "3f367edeaec77bdc3ff2279a97de81e836a86580", "url": "https://github.com/CorfuDB/CorfuDB/commit/3f367edeaec77bdc3ff2279a97de81e836a86580", "message": "VersionLockedObject and CorfuTable Deadlock\n\nThis patch removes a circular dependency between threads acquiring\nthe VLO lock and threads used for parallel stream operations (i.e\nscanAndFilter).", "committedDate": "2020-01-31T17:54:38Z", "type": "forcePushed"}, {"oid": "222199543a5f6a4cb17044a44a8161d063804fde", "url": "https://github.com/CorfuDB/CorfuDB/commit/222199543a5f6a4cb17044a44a8161d063804fde", "message": "Merge branch 'master' into fjDeadlock", "committedDate": "2020-01-31T21:14:28Z", "type": "commit"}]}