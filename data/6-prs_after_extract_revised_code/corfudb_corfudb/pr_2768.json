{"pr_number": 2768, "pr_title": "Add Test for Single Listener to Multiple Tables in StreamingIT.", "pr_createdAt": "2020-09-10T18:58:57Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2768", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NTg2NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r488295865", "bodyText": "Expand.", "author": "WenbinZhu", "createdAt": "2020-09-14T23:37:11Z", "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -17,9 +17,7 @@\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.*;", "originalCommit": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0Mzg1NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r489043854", "bodyText": "Done", "author": "pankti-m", "createdAt": "2020-09-15T22:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NTg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a19da036cadb65958579c3578843d7fc1117b80d", "chunk": "diff --git a/test/src/test/java/org/corfudb/integration/StreamingIT.java b/test/src/test/java/org/corfudb/integration/StreamingIT.java\nindex 2af549ee1a6..c10f6eac14f 100644\n--- a/test/src/test/java/org/corfudb/integration/StreamingIT.java\n+++ b/test/src/test/java/org/corfudb/integration/StreamingIT.java\n\n@@ -17,7 +17,10 @@ import org.junit.Before;\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n import static org.assertj.core.api.Assertions.assertThat;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzA2OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r488297068", "bodyText": "Why sleeping here? Is the test relying on the sleep to be passed? If not we can remove it, otherwise it's better to make it synchronous instead of sleeping.", "author": "WenbinZhu", "createdAt": "2020-09-14T23:41:25Z", "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -323,4 +321,67 @@ public void testStreamingMultiTableStreams() throws Exception {\n \n         assertThat(shutdownCorfuServer(corfuServer)).isTrue();\n     }\n+\n+    /**\n+     * Streaming Test with 2 different tables and a single streamer\n+     * <p>\n+     * The test creates two tables in the same namespace and makes updates to both in the same transaction.\n+     * A single streamer subscribes to updates from both.\n+     * <p>\n+     * The test verifies that the streamer receives updates from both tables and since the updates were made in\n+     * the same transaction, they are received in one CorfuStreamEntry.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testStreamingMultiTableSingleListener() throws Exception {\n+        // Run a corfu server\n+        Process corfuServer = runSinglePersistentServer(corfuSingleNodeHost, corfuStringNodePort);\n+\n+        // Start a Corfu runtime\n+        runtime = createRuntime(singleNodeEndpoint);\n+\n+        runtime.setTransactionLogging(true);\n+        CorfuStore store = new CorfuStore(runtime);\n+\n+        // Record the initial timestamp.\n+        Timestamp ts1 = store.getTimestamp();\n+\n+        // Create 2 tables in the same namespace\n+        Table<Uuid, Uuid, Uuid> n1t1 = store.openTable(\n+                \"n1\", \"t1\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        Table<Uuid, Uuid, Uuid> n2t1 = store.openTable(\n+                \"n1\", \"t2\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        // Make an update to the tables in a transaction\n+        final int t1_uuid = 5;\n+        final int t2_uuid = 10;\n+        Uuid t1Uuid = Uuid.newBuilder().setMsb(t1_uuid).setLsb(t1_uuid).build();\n+        Uuid t2Uuid = Uuid.newBuilder().setMsb(t2_uuid).setLsb(t2_uuid).build();\n+        TxBuilder txBuilder = store.tx(\"n1\");\n+        txBuilder.update(\"t1\", t1Uuid, t1Uuid, t1Uuid);\n+        txBuilder.update(\"t2\", t2Uuid, t2Uuid, t2Uuid);\n+        txBuilder.commit();\n+\n+        // Subscribe to both tables\n+        List<TableSchema> tablesSubscribed = new ArrayList<>();\n+        tablesSubscribed.add(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class));\n+        tablesSubscribed.add(new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class));\n+        StreamListenerImpl listener = new StreamListenerImpl(\"n1_listener\");\n+        store.subscribe(listener, \"n1\", tablesSubscribed, ts1);\n+\n+        // Verify that both updates come to the subscriber in the same StreamEntry\n+        TimeUnit.SECONDS.sleep(2);", "originalCommit": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3NjQ0Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r489076442", "bodyText": "there is an async thread which delivers the updates every 50ms.  Changing it to be synchronous is a bigger change so keeping the sleep for now.", "author": "pankti-m", "createdAt": "2020-09-15T23:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "a19da036cadb65958579c3578843d7fc1117b80d", "chunk": "diff --git a/test/src/test/java/org/corfudb/integration/StreamingIT.java b/test/src/test/java/org/corfudb/integration/StreamingIT.java\nindex 2af549ee1a6..c10f6eac14f 100644\n--- a/test/src/test/java/org/corfudb/integration/StreamingIT.java\n+++ b/test/src/test/java/org/corfudb/integration/StreamingIT.java\n\n@@ -371,8 +374,10 @@ public class StreamingIT extends AbstractIT {\n \n         // Subscribe to both tables\n         List<TableSchema> tablesSubscribed = new ArrayList<>();\n-        tablesSubscribed.add(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class));\n-        tablesSubscribed.add(new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class));\n+        TableSchema schema1 = new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class);\n+        TableSchema schema2 = new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class);\n+        tablesSubscribed.add(schema1);\n+        tablesSubscribed.add(schema2);\n         StreamListenerImpl listener = new StreamListenerImpl(\"n1_listener\");\n         store.subscribe(listener, \"n1\", tablesSubscribed, ts1);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzMxOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r488297318", "bodyText": "Maybe add a check for the content of the update?", "author": "WenbinZhu", "createdAt": "2020-09-14T23:42:27Z", "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -323,4 +321,67 @@ public void testStreamingMultiTableStreams() throws Exception {\n \n         assertThat(shutdownCorfuServer(corfuServer)).isTrue();\n     }\n+\n+    /**\n+     * Streaming Test with 2 different tables and a single streamer\n+     * <p>\n+     * The test creates two tables in the same namespace and makes updates to both in the same transaction.\n+     * A single streamer subscribes to updates from both.\n+     * <p>\n+     * The test verifies that the streamer receives updates from both tables and since the updates were made in\n+     * the same transaction, they are received in one CorfuStreamEntry.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testStreamingMultiTableSingleListener() throws Exception {\n+        // Run a corfu server\n+        Process corfuServer = runSinglePersistentServer(corfuSingleNodeHost, corfuStringNodePort);\n+\n+        // Start a Corfu runtime\n+        runtime = createRuntime(singleNodeEndpoint);\n+\n+        runtime.setTransactionLogging(true);\n+        CorfuStore store = new CorfuStore(runtime);\n+\n+        // Record the initial timestamp.\n+        Timestamp ts1 = store.getTimestamp();\n+\n+        // Create 2 tables in the same namespace\n+        Table<Uuid, Uuid, Uuid> n1t1 = store.openTable(\n+                \"n1\", \"t1\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        Table<Uuid, Uuid, Uuid> n2t1 = store.openTable(\n+                \"n1\", \"t2\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        // Make an update to the tables in a transaction\n+        final int t1_uuid = 5;\n+        final int t2_uuid = 10;\n+        Uuid t1Uuid = Uuid.newBuilder().setMsb(t1_uuid).setLsb(t1_uuid).build();\n+        Uuid t2Uuid = Uuid.newBuilder().setMsb(t2_uuid).setLsb(t2_uuid).build();\n+        TxBuilder txBuilder = store.tx(\"n1\");\n+        txBuilder.update(\"t1\", t1Uuid, t1Uuid, t1Uuid);\n+        txBuilder.update(\"t2\", t2Uuid, t2Uuid, t2Uuid);\n+        txBuilder.commit();\n+\n+        // Subscribe to both tables\n+        List<TableSchema> tablesSubscribed = new ArrayList<>();\n+        tablesSubscribed.add(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class));\n+        tablesSubscribed.add(new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class));\n+        StreamListenerImpl listener = new StreamListenerImpl(\"n1_listener\");\n+        store.subscribe(listener, \"n1\", tablesSubscribed, ts1);\n+\n+        // Verify that both updates come to the subscriber in the same StreamEntry\n+        TimeUnit.SECONDS.sleep(2);\n+        LinkedList<CorfuStreamEntries> updates = listener.getUpdates();\n+        assertThat(updates.size()).isEqualTo(1);\n+        assertThat(updates.getFirst().getEntries().entrySet().size()).isEqualTo(2);\n+", "originalCommit": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3NjUwMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r489076502", "bodyText": "Done", "author": "pankti-m", "createdAt": "2020-09-15T23:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "a19da036cadb65958579c3578843d7fc1117b80d", "chunk": "diff --git a/test/src/test/java/org/corfudb/integration/StreamingIT.java b/test/src/test/java/org/corfudb/integration/StreamingIT.java\nindex 2af549ee1a6..c10f6eac14f 100644\n--- a/test/src/test/java/org/corfudb/integration/StreamingIT.java\n+++ b/test/src/test/java/org/corfudb/integration/StreamingIT.java\n\n@@ -371,8 +374,10 @@ public class StreamingIT extends AbstractIT {\n \n         // Subscribe to both tables\n         List<TableSchema> tablesSubscribed = new ArrayList<>();\n-        tablesSubscribed.add(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class));\n-        tablesSubscribed.add(new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class));\n+        TableSchema schema1 = new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class);\n+        TableSchema schema2 = new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class);\n+        tablesSubscribed.add(schema1);\n+        tablesSubscribed.add(schema2);\n         StreamListenerImpl listener = new StreamListenerImpl(\"n1_listener\");\n         store.subscribe(listener, \"n1\", tablesSubscribed, ts1);\n \n"}}, {"oid": "a19da036cadb65958579c3578843d7fc1117b80d", "url": "https://github.com/CorfuDB/CorfuDB/commit/a19da036cadb65958579c3578843d7fc1117b80d", "message": "Add Test for Single Listener to Multiple Tables in StreamingIT.\n\nWe do not have a test where a single listener subscribes to multiple tables\nand verifies that updates made to those tables in a single transaction are\nreceived in the same CorfuStreamEntry.", "committedDate": "2020-09-15T23:37:43Z", "type": "commit"}, {"oid": "a19da036cadb65958579c3578843d7fc1117b80d", "url": "https://github.com/CorfuDB/CorfuDB/commit/a19da036cadb65958579c3578843d7fc1117b80d", "message": "Add Test for Single Listener to Multiple Tables in StreamingIT.\n\nWe do not have a test where a single listener subscribes to multiple tables\nand verifies that updates made to those tables in a single transaction are\nreceived in the same CorfuStreamEntry.", "committedDate": "2020-09-15T23:37:43Z", "type": "forcePushed"}, {"oid": "57d07042c6c0d3e6b3082bbac7fc8c69ee4ab154", "url": "https://github.com/CorfuDB/CorfuDB/commit/57d07042c6c0d3e6b3082bbac7fc8c69ee4ab154", "message": "Merge branch 'master' into streaming_unit_test", "committedDate": "2020-09-16T20:07:55Z", "type": "commit"}, {"oid": "130b6ff037d71918423238fd39c7f49f7793eef1", "url": "https://github.com/CorfuDB/CorfuDB/commit/130b6ff037d71918423238fd39c7f49f7793eef1", "message": "Merge branch 'master' into streaming_unit_test", "committedDate": "2020-09-17T00:21:15Z", "type": "commit"}]}