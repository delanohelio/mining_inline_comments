{"pr_number": 2814, "pr_title": "Stop Log Replication if Plugin fails to read the configuration.", "pr_createdAt": "2020-11-05T01:12:37Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2814", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4ODAxMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518288010", "bodyText": "Do we need to catch? cause it's only re-throwing?", "author": "annym", "createdAt": "2020-11-05T18:56:49Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -319,30 +320,34 @@ private void connectToClusterManager() {\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        try {\n+            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n+            LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n \n-        logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n+            logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n                 topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());\n \n-        logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n+            logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n                 logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId());\n-        logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n+            logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n \n-        interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n+            interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n                 logReplicationServerHandler, logReplicationConfig);\n \n-        // Pass server's channel context through the Log Replication Context, for shared objects between the server\n-        // and the client channel (specific requirements of the transport implementation)\n-        replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n+            // Pass server's channel context through the Log Replication Context, for shared objects between the server\n+            // and the client channel (specific requirements of the transport implementation)\n+            replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n                 localCorfuEndpoint, interClusterReplicationService.getRouter().getServerAdapter().getChannelContext());\n \n-        // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n-        serverCallback.complete(interClusterReplicationService);\n+            // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n+            serverCallback.complete(interClusterReplicationService);\n \n-        logReplicationEventListener = new LogReplicationEventListener(this);\n-        logReplicationEventListener.start();\n-        serverStarted = true;\n+            logReplicationEventListener = new LogReplicationEventListener(this);\n+            logReplicationEventListener.start();\n+            serverStarted = true;\n+        } catch (Throwable t) {", "originalCommit": "d43d8c71bde8e533f078bab210f5d2593fb6b993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MzA4Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518393082", "bodyText": "+1 We can let the upper-level function catch it.", "author": "zhangn49", "createdAt": "2020-11-05T21:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4ODAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDg5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518440897", "bodyText": "Done.", "author": "pankti-m", "createdAt": "2020-11-05T23:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4ODAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "836408bd06ca25a8abb8f65d7b89edba281010c2", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java b/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java\nindex 26f07f5dc2a..9a25af354c9 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java\n\n@@ -320,34 +320,31 @@ public class CorfuReplicationDiscoveryService implements Runnable, CorfuReplicat\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        try {\n-            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-            LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        // Through LogReplicationConfigAdapter retrieve system-specific configurations\n+        // such as streams to replicate and version\n+        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n \n-            logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n-                topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());\n+        logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n+            topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());\n \n-            logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n-                logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId());\n-            logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n+        logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n+            logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId());\n+        logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n \n-            interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n-                logReplicationServerHandler, logReplicationConfig);\n+        interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n+            logReplicationServerHandler, logReplicationConfig);\n \n-            // Pass server's channel context through the Log Replication Context, for shared objects between the server\n-            // and the client channel (specific requirements of the transport implementation)\n-            replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n-                localCorfuEndpoint, interClusterReplicationService.getRouter().getServerAdapter().getChannelContext());\n+        // Pass server's channel context through the Log Replication Context, for shared objects between the server\n+        // and the client channel (specific requirements of the transport implementation)\n+        replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n+            localCorfuEndpoint, interClusterReplicationService.getRouter().getServerAdapter().getChannelContext());\n \n-            // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n-            serverCallback.complete(interClusterReplicationService);\n+        // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n+        serverCallback.complete(interClusterReplicationService);\n \n-            logReplicationEventListener = new LogReplicationEventListener(this);\n-            logReplicationEventListener.start();\n-            serverStarted = true;\n-        } catch (Throwable t) {\n-            throw t;\n-        }\n+        logReplicationEventListener = new LogReplicationEventListener(this);\n+        logReplicationEventListener.start();\n+        serverStarted = true;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MzU4Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518393583", "bodyText": "Do we also retrieve the version info through the adapter? If so, let's modify the comment a little bit", "author": "zhangn49", "createdAt": "2020-11-05T21:56:18Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -319,30 +320,34 @@ private void connectToClusterManager() {\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        try {\n+            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)", "originalCommit": "d43d8c71bde8e533f078bab210f5d2593fb6b993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MTI2OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518441269", "bodyText": "Done", "author": "pankti-m", "createdAt": "2020-11-05T23:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MzU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "836408bd06ca25a8abb8f65d7b89edba281010c2", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java b/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java\nindex 26f07f5dc2a..9a25af354c9 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java\n\n@@ -320,34 +320,31 @@ public class CorfuReplicationDiscoveryService implements Runnable, CorfuReplicat\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        try {\n-            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-            LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        // Through LogReplicationConfigAdapter retrieve system-specific configurations\n+        // such as streams to replicate and version\n+        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n \n-            logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n-                topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());\n+        logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n+            topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());\n \n-            logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n-                logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId());\n-            logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n+        logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n+            logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId());\n+        logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n \n-            interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n-                logReplicationServerHandler, logReplicationConfig);\n+        interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n+            logReplicationServerHandler, logReplicationConfig);\n \n-            // Pass server's channel context through the Log Replication Context, for shared objects between the server\n-            // and the client channel (specific requirements of the transport implementation)\n-            replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n-                localCorfuEndpoint, interClusterReplicationService.getRouter().getServerAdapter().getChannelContext());\n+        // Pass server's channel context through the Log Replication Context, for shared objects between the server\n+        // and the client channel (specific requirements of the transport implementation)\n+        replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n+            localCorfuEndpoint, interClusterReplicationService.getRouter().getServerAdapter().getChannelContext());\n \n-            // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n-            serverCallback.complete(interClusterReplicationService);\n+        // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n+        serverCallback.complete(interClusterReplicationService);\n \n-            logReplicationEventListener = new LogReplicationEventListener(this);\n-            logReplicationEventListener.start();\n-            serverStarted = true;\n-        } catch (Throwable t) {\n-            throw t;\n-        }\n+        logReplicationEventListener = new LogReplicationEventListener(this);\n+        logReplicationEventListener.start();\n+        serverStarted = true;\n     }\n \n     /**\n"}}, {"oid": "836408bd06ca25a8abb8f65d7b89edba281010c2", "url": "https://github.com/CorfuDB/CorfuDB/commit/836408bd06ca25a8abb8f65d7b89edba281010c2", "message": "Stop Log Replication if Plugin fails to read the configuration.\n\nLog Replication should stop if the plugin fails to fetch important info\nsuch as streams to replicate and version.", "committedDate": "2020-11-06T00:18:36Z", "type": "forcePushed"}, {"oid": "b434c81e7ad916779fdbe59464919e26bb58cfa0", "url": "https://github.com/CorfuDB/CorfuDB/commit/b434c81e7ad916779fdbe59464919e26bb58cfa0", "message": "Stop Log Replication if Plugin fails to read the configuration.\n\nLog Replication should stop if the plugin fails to fetch important info\nsuch as streams to replicate and version.", "committedDate": "2020-11-06T05:49:13Z", "type": "forcePushed"}, {"oid": "2f4f31801b99fa90563ed8232cff34dcad73e348", "url": "https://github.com/CorfuDB/CorfuDB/commit/2f4f31801b99fa90563ed8232cff34dcad73e348", "message": "Stop Log Replication if Plugin fails to read the configuration.\n\nLog Replication should stop if the plugin fails to fetch important info\nsuch as streams to replicate and version.", "committedDate": "2020-11-07T00:32:18Z", "type": "commit"}, {"oid": "2f4f31801b99fa90563ed8232cff34dcad73e348", "url": "https://github.com/CorfuDB/CorfuDB/commit/2f4f31801b99fa90563ed8232cff34dcad73e348", "message": "Stop Log Replication if Plugin fails to read the configuration.\n\nLog Replication should stop if the plugin fails to fetch important info\nsuch as streams to replicate and version.", "committedDate": "2020-11-07T00:32:18Z", "type": "forcePushed"}, {"oid": "4cdf58e0b528a62a25576decb4ad7cdfae82dcbf", "url": "https://github.com/CorfuDB/CorfuDB/commit/4cdf58e0b528a62a25576decb4ad7cdfae82dcbf", "message": "Merge branch 'master' into lr_exception", "committedDate": "2020-11-09T19:44:49Z", "type": "commit"}]}