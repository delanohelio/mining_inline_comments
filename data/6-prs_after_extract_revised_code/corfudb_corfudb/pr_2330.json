{"pr_number": 2330, "pr_title": "Layout Bootstrap and ClusterId Validation for the Server Message Routing ", "pr_createdAt": "2020-01-29T03:14:11Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2330", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwMzM1Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r373303353", "bodyText": "I dont think this is needed.\nThe root cause of the problem is: the epoch's uninitialized value is a valid value. Therefore, we need to change ServerContext:getServerEpoch to return an invalid value if epoch == null. Instead of returning 0 for null, we should return Layout.INVALID_EPOCH", "author": "Maithem", "createdAt": "2020-01-31T03:34:40Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java", "diffHunk": "@@ -90,6 +89,7 @@ public CorfuServerNode(@Nonnull ServerContext serverContext,\n         this.serverMap = serverMap;\n         router = new NettyServerRouter(new ArrayList<>(serverMap.values()));\n         this.serverContext.setServerRouter(router);\n+        this.serverContext.setServerEpochForSingleNodeLayout(serverContext.getServerEpoch(), router);", "originalCommit": "f1cef3fa9cbc6cd31b1a7006a1a32eb91f0b692b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MTA4Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r375651086", "bodyText": "I tried doing just that but a lot of tests failed, since it's necessary for some servers to have the context server epoch to start at 0.", "author": "PavelZaytsev", "createdAt": "2020-02-06T05:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1NTc4OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r375655789", "bodyText": "It possible to pass -1 to the BatchProcessor on start up, which will probably work, but then the client would see a WrongEpochException(-1), which is misleading, since they write to the log unit with the epoch 0. So I thought the better approach would be to start with None Epoch and then just seal it after the bootstrap. If the node was never bootstrapped, it was never sealed, so all the writes are rejected. If it's bootstrapped, then the log is sealed, so the writes go through.", "author": "PavelZaytsev", "createdAt": "2020-02-06T06:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2MjIwNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r375662205", "bodyText": "I still think the uninitialized epoch value shouldn't have a valid epoch number.\nBut even if that is done, I don't think its a generic way to deal with this issue. If you look at LayoutServer , you'll see that each handler (except bootstrap) will try to check isBootstrapped. Essentially, its the same problem: If a server is not bootstrapped it shouldn't service RPCs. I think the cleanest way to do this is at the message routing level. The NettyServerRouter should reject all messages as long as the server hasn't been bootstrapped.\nAlso, I don;t think its necessary to add a new exception type. NoBootstrapException is exactly what you need.", "author": "Maithem", "createdAt": "2020-02-06T06:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMTAyMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r376121023", "bodyText": "We might also need to check clusterId on BaseServer.", "author": "WenbinZhu", "createdAt": "2020-02-06T22:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNTY4OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r377335689", "bodyText": "@Maithem sounds good.\n@WenbinZhu that sounds good, it will entail adding clusterId as one of the fields of CorfuMsg, some changes with respect to serialization/deserialization and checking of the clusterId from the router. Hopefully, not a lot of work", "author": "PavelZaytsev", "createdAt": "2020-02-10T21:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwMzM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java b/infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java\nindex 4272abc7df7..604d166aa4e 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java\n\n@@ -84,12 +80,17 @@ public class CorfuServerNode implements AutoCloseable {\n      * @param serverMap     Server Map with all components.\n      */\n     public CorfuServerNode(@Nonnull ServerContext serverContext,\n-                           @Nonnull Map<Class, AbstractServer> serverMap) {\n+                           @Nonnull ImmutableMap<Class, AbstractServer> serverMap) {\n         this.serverContext = serverContext;\n         this.serverMap = serverMap;\n-        router = new NettyServerRouter(new ArrayList<>(serverMap.values()));\n+        router = new NettyServerRouter(serverMap.values().asList(), serverContext);\n         this.serverContext.setServerRouter(router);\n-        this.serverContext.setServerEpochForSingleNodeLayout(serverContext.getServerEpoch(), router);\n+        // If the node is started in the single node setup and was bootstrapped,\n+        // set the server epoch as well.\n+        if(serverContext.isSingleNodeSetup() && serverContext.getCurrentLayout() != null){\n+            serverContext.setServerEpoch(serverContext.getCurrentLayout().getEpoch(),\n+                    router);\n+        }\n         this.close = new AtomicBoolean(false);\n     }\n \n"}}, {"oid": "f1cef3fa9cbc6cd31b1a7006a1a32eb91f0b692b", "url": "https://github.com/CorfuDB/CorfuDB/commit/f1cef3fa9cbc6cd31b1a7006a1a32eb91f0b692b", "message": "Seal for a one node setup fix", "committedDate": "2020-01-30T23:59:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MjQ5OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r380882498", "bodyText": "It seems like these changes were based on an older master, undo this file's changes?", "author": "Maithem", "createdAt": "2020-02-18T19:21:08Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java", "diffHunk": "@@ -135,16 +129,16 @@ private void processor() {\n                     currOp.getFutureResult().completeExceptionally(\n                             new QuotaExceededException(\"Quota of \"\n                                     + streamLog.quotaLimitInBytes() + \" bytes\"));\n-                    log.warn(\"batchprocessor: quota exceeded, dropping msg {}\", currOp.getMsg());\n-                } else if (currOp.getType() == Type.SEAL && currOp.getMsg().getEpoch() >= sealEpoch) {\n+                    log.warn(\"batchWriteProcessor: quota exceeded, dropping msg {}\", currOp.getMsg());", "originalCommit": "e0cacc103834662c2883ad8d5c9a49f6d5d391e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java b/infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java\nindex bccff5c23b5..87ee9ad73a8 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/BatchProcessor.java\n\n@@ -129,16 +135,16 @@ public class BatchProcessor implements AutoCloseable {\n                     currOp.getFutureResult().completeExceptionally(\n                             new QuotaExceededException(\"Quota of \"\n                                     + streamLog.quotaLimitInBytes() + \" bytes\"));\n-                    log.warn(\"batchWriteProcessor: quota exceeded, dropping msg {}\", currOp.getMsg());\n-                } else if(currOp.getType() == Type.SEAL && currOp.getMsg().getEpoch() >= sealEpoch){\n+                    log.warn(\"batchprocessor: quota exceeded, dropping msg {}\", currOp.getMsg());\n+                } else if (currOp.getType() == Type.SEAL && currOp.getMsg().getEpoch() >= sealEpoch) {\n                     log.info(\"batchWriteProcessor: updating from {} to {}\", sealEpoch, currOp.getMsg().getEpoch());\n                     sealEpoch = currOp.getMsg().getEpoch();\n                     res.add(currOp);\n                     processed++;\n                     lastOp = currOp;\n                 } else if (currOp.getMsg().getEpoch() != sealEpoch) {\n-                    log.warn(\"batchWriteProcessor: wrong epoch on {} msg, seal epoch is {}, \" +\n-                            \"and msg epoch is {}\",currOp.getType(), sealEpoch, currOp.getMsg().getEpoch());\n+                    log.warn(\"batchWriteProcessor: wrong epoch on {} msg, seal epoch is {}, and msg epoch is {}\",\n+                            currOp.getType(), sealEpoch, currOp.getMsg().getEpoch());\n                     currOp.getFutureResult().completeExceptionally(new WrongEpochException(sealEpoch));\n                     res.add(currOp);\n                     processed++;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODg3Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r380888872", "bodyText": "serverContext.getServerEpoch() can still return 0 if it wasn't initialized. Why not just use an invalid value like -1 ?", "author": "Maithem", "createdAt": "2020-02-18T19:33:11Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java", "diffHunk": "@@ -80,10 +80,10 @@ public CorfuServerNode(@Nonnull ServerContext serverContext) {\n      * @param serverMap     Server Map with all components.\n      */\n     public CorfuServerNode(@Nonnull ServerContext serverContext,\n-                           @Nonnull Map<Class, AbstractServer> serverMap) {\n+                           @Nonnull ImmutableMap<Class, AbstractServer> serverMap) {\n         this.serverContext = serverContext;\n         this.serverMap = serverMap;\n-        router = new NettyServerRouter(new ArrayList<>(serverMap.values()));\n+        router = new NettyServerRouter(serverMap, serverContext.getServerEpoch());", "originalCommit": "e0cacc103834662c2883ad8d5c9a49f6d5d391e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyOTM1Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r382829352", "bodyText": "Since we don't bootstrap a single node layout from a client, but rather do it on startup from the installSingleNodeLayoutIfAbsent method, we set the node's layout, but we never seal it. So we would need to seal both the router and epoch with the singleNodeLayout's epoch before a single node can start.", "author": "PavelZaytsev", "createdAt": "2020-02-21T22:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyODA2Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r383628067", "bodyText": "Fixed", "author": "PavelZaytsev", "createdAt": "2020-02-25T02:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4ODg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java b/infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java\nindex f6acc75c9b6..604d166aa4e 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java\n\n@@ -83,8 +83,14 @@ public class CorfuServerNode implements AutoCloseable {\n                            @Nonnull ImmutableMap<Class, AbstractServer> serverMap) {\n         this.serverContext = serverContext;\n         this.serverMap = serverMap;\n-        router = new NettyServerRouter(serverMap, serverContext.getServerEpoch());\n+        router = new NettyServerRouter(serverMap.values().asList(), serverContext);\n         this.serverContext.setServerRouter(router);\n+        // If the node is started in the single node setup and was bootstrapped,\n+        // set the server epoch as well.\n+        if(serverContext.isSingleNodeSetup() && serverContext.getCurrentLayout() != null){\n+            serverContext.setServerEpoch(serverContext.getCurrentLayout().getEpoch(),\n+                    router);\n+        }\n         this.close = new AtomicBoolean(false);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzQ3OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r380903478", "bodyText": "The router shouldn't depend on the LayoutServer , its cleaner to just use serverContext.", "author": "Maithem", "createdAt": "2020-02-18T20:00:44Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java", "diffHunk": "@@ -90,25 +91,13 @@ public void sendResponse(ChannelHandlerContext ctx, CorfuMsg inMsg, CorfuMsg out\n         log.trace(\"Sent response: {}\", outMsg);\n     }\n \n-    /**\n-     * Validate the epoch of a CorfuMsg, and send a WRONG_EPOCH response if\n-     * the server is in the wrong epoch. Ignored if the message type is reset (which\n-     * is valid in any epoch).\n-     *\n-     * @param msg The incoming message to validate.\n-     * @param ctx The context of the channel handler.\n-     * @return True, if the epoch is correct, but false otherwise.\n-     */\n-    public boolean validateEpoch(CorfuMsg msg, ChannelHandlerContext ctx) {\n-        long serverEpoch = getServerEpoch();\n-        if (!msg.getMsgType().ignoreEpoch && msg.getEpoch() != serverEpoch) {\n-            sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,\n-                    serverEpoch));\n-            log.trace(\"Incoming message with wrong epoch, got {}, expected {}, message was: {}\",\n-                    msg.getEpoch(), serverEpoch, msg);\n-            return false;\n+    @Override\n+    public Optional<Layout> getCurrentLayout() {\n+        if(!serverMap.containsKey(LayoutServer.class)){\n+            throw new IllegalStateException(\"Layout server is not in a server map.\");\n         }\n-        return true;\n+        LayoutServer layoutServer = (LayoutServer) serverMap.get(LayoutServer.class);", "originalCommit": "e0cacc103834662c2883ad8d5c9a49f6d5d391e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMjAwMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r381612000", "bodyText": "That was the first choice that I tried but I have encountered a couple of issues.\nThis will create a circular dependency between a context and a router, and force one more component to depend on it, making it even more of a god object.\nThis will also require more changes to be done to the TestServerRouter and the TestServer, which are messy to implement.\nSince the LayoutServer is the owner of the layout, and the router has access to the servers, I think that it's viable to retrieve a layout from a server.", "author": "PavelZaytsev", "createdAt": "2020-02-19T23:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyODM5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r383628397", "bodyText": "Edit: Although there is a circular dependency, this approach seems to be more consistent with the testing we are doing for the single servers and removes the incorrect approach of ignoring the routing validation.", "author": "PavelZaytsev", "createdAt": "2020-02-25T02:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java b/infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java\nindex 9894486a612..9c719aa9b0d 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java\n\n@@ -93,11 +103,7 @@ public class NettyServerRouter extends ChannelInboundHandlerAdapter implements I\n \n     @Override\n     public Optional<Layout> getCurrentLayout() {\n-        if(!serverMap.containsKey(LayoutServer.class)){\n-            throw new IllegalStateException(\"Layout server is not in a server map.\");\n-        }\n-        LayoutServer layoutServer = (LayoutServer) serverMap.get(LayoutServer.class);\n-        return Optional.ofNullable(layoutServer.getCurrentLayout());\n+        return Optional.ofNullable(serverContext.getCurrentLayout());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNjM1NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r380906355", "bodyText": "Just pass the whole layout instead of passing the epoch and cluster id separately ?", "author": "Maithem", "createdAt": "2020-02-18T20:06:18Z", "path": "runtime/src/main/java/org/corfudb/runtime/view/RuntimeLayout.java", "diffHunk": "@@ -109,8 +110,9 @@ private IClient getClient(final Class<? extends IClient> clientClass,\n             endpointClientMap.computeIfAbsent(endpoint, s -> {\n                 try {\n                     Constructor<? extends IClient> ctor =\n-                            clientClass.getDeclaredConstructor(IClientRouter.class, long.class);\n-                    IClient inst = ctor.newInstance(getRuntime().getRouter(endpoint), layout.getEpoch());\n+                            clientClass.getDeclaredConstructor(IClientRouter.class, long.class, UUID.class);", "originalCommit": "e0cacc103834662c2883ad8d5c9a49f6d5d391e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMzY4NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r382833685", "bodyText": "I feel like for router it is a sufficient enough information", "author": "PavelZaytsev", "createdAt": "2020-02-21T22:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNjM1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNjQ2Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r380906462", "bodyText": "Undo ?", "author": "Maithem", "createdAt": "2020-02-18T20:06:30Z", "path": "test/src/test/java/org/corfudb/infrastructure/AbstractServerTest.java", "diffHunk": "@@ -15,6 +15,8 @@\n import org.corfudb.runtime.clients.TestClientRouter;\n import org.junit.Before;\n \n+import java.util.AbstractMap;", "originalCommit": "e0cacc103834662c2883ad8d5c9a49f6d5d391e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwNzQxNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r381607417", "bodyText": "Done", "author": "PavelZaytsev", "createdAt": "2020-02-19T23:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNjQ2Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzI0OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r380907248", "bodyText": "Why ignore the epoch/cluster id check?", "author": "Maithem", "createdAt": "2020-02-18T20:08:10Z", "path": "test/src/test/java/org/corfudb/infrastructure/LogUnitCacheTest.java", "diffHunk": "@@ -39,6 +39,13 @@ public AbstractServer getDefaultServer() {\n                 .build());\n     }\n \n+    @Override\n+    public void setServer(AbstractServer server) {\n+        router.reset();\n+        router.setIgnoreMessageValidation(true);", "originalCommit": "e0cacc103834662c2883ad8d5c9a49f6d5d391e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxNTE0OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r381615148", "bodyText": "Because for some tests we just test a specific server, and not the stack. It's easier to ignore the validation in the router then to bootstrap a node with a specific layout, since epoch or a presence of a layout or a cluster id is irrelevant in the test.", "author": "PavelZaytsev", "createdAt": "2020-02-19T23:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY2MDEzNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r383660135", "bodyText": "Edit: Was removed because was inconsistent in a couple of places. Now we explicitly bootstrap in the test cases, set cluster Ids and epochs on client and server routers.", "author": "PavelZaytsev", "createdAt": "2020-02-25T05:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/test/src/test/java/org/corfudb/infrastructure/LogUnitCacheTest.java b/test/src/test/java/org/corfudb/infrastructure/LogUnitCacheTest.java\nindex 11b1f23141d..4a141bd9c5b 100644\n--- a/test/src/test/java/org/corfudb/infrastructure/LogUnitCacheTest.java\n+++ b/test/src/test/java/org/corfudb/infrastructure/LogUnitCacheTest.java\n\n@@ -30,19 +30,29 @@ public class LogUnitCacheTest extends AbstractServerTest {\n     private static final double MAX_HEAP_RATIO = 0.9;\n \n     @Override\n-    public AbstractServer getDefaultServer() {\n+    public LogUnitServer getDefaultServer() {\n         String serviceDir = PARAMETERS.TEST_TEMP_DIR;\n \n-        return new LogUnitServer(new ServerContextBuilder()\n+        ServerContext sc = new ServerContextBuilder()\n                 .setLogPath(serviceDir)\n+                .setSingle(true)\n                 .setMemory(false)\n-                .build());\n+                .build();\n+\n+        sc.installSingleNodeLayoutIfAbsent();\n+        sc.setServerRouter(router);\n+        sc.setServerEpoch(sc.getCurrentLayout().getEpoch(), router);\n+\n+        LogUnitServer s1 = new LogUnitServer(sc);\n+\n+        setServer(s1);\n+        setContext(sc);\n+        return s1;\n     }\n \n     @Override\n     public void setServer(AbstractServer server) {\n         router.reset();\n-        router.setIgnoreMessageValidation(true);\n         router.addServer(server);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwODA4Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r380908083", "bodyText": "Just pass the whole Layout?", "author": "Maithem", "createdAt": "2020-02-18T20:09:36Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/management/FailureDetector.java", "diffHunk": "@@ -93,7 +94,7 @@ public PollReport poll(\n \n         // Perform polling of all responsive servers.\n         return pollRound(\n-                layout.getEpoch(), allServers, routerMap, sequencerMetrics,\n+                layout.getEpoch(), layout.getClusterId(), allServers, routerMap, sequencerMetrics,", "originalCommit": "e0cacc103834662c2883ad8d5c9a49f6d5d391e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzNjA0OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r382836049", "bodyText": "I feel like it is sufficient enough for the poll round to perform iterations. I would extract servers, epoch and clusterId in a separate DTO, for example, PollData but it's not worth the effort, since it's used only in two functions.", "author": "PavelZaytsev", "createdAt": "2020-02-21T22:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwODA4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNDMxMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r380914312", "bodyText": "This seems incorrect.\nImagine a fault detector from one cluster trying to seal a node from another cluster. Since a seal message is marked as ignore epoch, the second check won't be executed and thus allowing fault detectors from different cluster to reconfigure each other's nodes.", "author": "Maithem", "createdAt": "2020-02-18T20:22:59Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java", "diffHunk": "@@ -21,14 +32,123 @@\n      */\n     void setServerEpoch(long newEpoch);\n \n+    /**\n+     * Get the currently bootstrapped layout.\n+     */\n+    Optional<Layout> getCurrentLayout();\n+\n     /**\n      * Register a server to route messages to.\n-     * @param server    The server to route messages to\n+     * @param server The server to route messages to\n      */\n     void addServer(AbstractServer server);\n \n     /**\n      * Get a list of registered servers.\n      */\n     List<AbstractServer> getServers();\n+\n+    /**\n+     * Send WRONG_EPOCH message.\n+     *\n+     * @param msg The incoming message.\n+     * @param ctx The context of the channel handler.\n+     */\n+    default void sendWrongEpochMessage(CorfuMsg msg, ChannelHandlerContext ctx) {\n+        sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,\n+                getServerEpoch()));\n+        log.trace(\"Incoming message with wrong epoch, got {}, expected {}, message was: {}\",\n+                msg.getEpoch(), getServerEpoch(), msg);\n+    }\n+\n+    /**\n+     * Send LAYOUT_NOBOOTSTRAP message.\n+     *\n+     * @param msg The incoming message.\n+     * @param ctx The context of the channel handler.\n+     */\n+    default void sendNoBootstrapMessage(CorfuMsg msg, ChannelHandlerContext ctx) {\n+        sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.LAYOUT_NOBOOTSTRAP));\n+        log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+    }\n+\n+    /**\n+     * Send WRONG_CLUSTER_ID message.\n+     *\n+     * @param msg              The incoming message.\n+     * @param ctx              The context of the channel handler.\n+     * @param currentClusterID The current cluster id.\n+     */\n+    default void sendWrongClusterIdMessage(CorfuMsg msg, ChannelHandlerContext ctx, UUID currentClusterID) {\n+        sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_CLUSTER_ID, currentClusterID));\n+        log.warn(\"Incoming message with a wrong cluster ID, got {}, expected {}, message was {}\",\n+                msg.getClusterID(), currentClusterID, msg);\n+    }\n+\n+    /**\n+     * Validate the epoch of a CorfuMsg, and send a WRONG_EPOCH response if\n+     * the server is in the wrong epoch. Ignored if the message type is reset (which\n+     * is valid in any epoch).\n+     *\n+     * @param msg The incoming message to validate.\n+     * @param ctx The context of the channel handler.\n+     * @return True, if the epoch is correct, but false otherwise.\n+     */\n+    default boolean epochIsValid(CorfuMsg msg, ChannelHandlerContext ctx) {\n+        long serverEpoch = getServerEpoch();\n+        if (msg.getEpoch() != serverEpoch) {\n+            sendWrongEpochMessage(msg, ctx);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Validate that the message's cluster ID is equal to the cluster ID of a bootstrapped layout.\n+     *\n+     * @param msg           The incoming message.\n+     * @param ctx           The context of the channel handler.\n+     * @param currentLayout The layout a server was bootstrapped with.\n+     * @return True, if the message's cluster ID is equal to this node's cluster ID, otherwise false.\n+     */\n+    default boolean clusterIdIsValid(CorfuMsg msg, ChannelHandlerContext ctx, Layout currentLayout) {\n+        UUID currentClusterID = currentLayout.getClusterId();\n+\n+        boolean clusterIdsMatch = msg.getClusterID()\n+                .equals(currentClusterID);\n+\n+        if (!clusterIdsMatch) {\n+            sendWrongClusterIdMessage(msg, ctx, currentClusterID);\n+        }\n+        return clusterIdsMatch;\n+    }\n+\n+    /**\n+     * Validate the incoming message. The message is valid if:\n+     * 1) The flag ignoreEpoch is set to true.\n+     * 2) Otherwise,\n+     *      a. The message's epoch is the same as the router's epoch.\n+     *      b. The current layout server should be bootstrapped and\n+     *         the message's cluster ID should be equal to the bootstrapped layout's cluster ID.\n+     *\n+     * @param msg The incoming message.\n+     * @param ctx The context of the channel handler.\n+     * @return True, if it's a valid message, and false otherwise.\n+     */\n+    default boolean messageIsValid(CorfuMsg msg, ChannelHandlerContext ctx) {\n+        if (msg.getMsgType().ignoreEpoch) {\n+            return true;\n+        }\n+\n+        if (!epochIsValid(msg, ctx)) {\n+            return false;\n+        }\n+\n+        return getCurrentLayout()\n+                .map(layout -> clusterIdIsValid(msg, ctx, layout))\n+                .orElseGet(() -> {\n+                    sendNoBootstrapMessage(msg, ctx);\n+                    return false;\n+                });", "originalCommit": "e0cacc103834662c2883ad8d5c9a49f6d5d391e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNzg3MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r383627870", "bodyText": "Resolving for now, as this situation is impossible since a fault detector's management runtime will not start trying to connect to another cluster, failing the clusterId check.", "author": "PavelZaytsev", "createdAt": "2020-02-25T02:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNDMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4ODk4NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r384088985", "bodyText": "Which clusterId check are referring to ? messageIsValid isn't sufficient for RPCs that ignore epoch checks, because ignore epoch is within a context of a cluster, so returning true only based on that flag is incorrect.\nI'm thinking of the following scenario: The management agent has a layout and connected to 3 nodes (A, B and C). Since reset is an ad-hoc call it can happen at any time. Now, some one resets node C, the netty channel will auto reconnect by-passing all checks. Now the failure detector sees that C node doesn't have the latest layout and tries to patch it with LAYOUT_COMMITTED (which will pass messageIsValid because it sets ignoreEpoch=true).\nThis is incorrect because C got re-added to the cluster after being reset. First of all why cant this scenario happen ? and at what point would message validation fail for the next step (i.e. LAYOUT_COMMITTED).\nObviously, this isn't an issue for msgs that don't ignore epochs and its not specific to LAYOUT_COMMITTED, but all messages that choose to ignore epoch checks.", "author": "Maithem", "createdAt": "2020-02-25T19:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNDMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyOTQyMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r384129420", "bodyText": "I see, I did not know that the netty channel reconnects bypassing the clusterId checks. This way, FD can interfere with the workflows that have resets. In that case, the correct behavior would be to ignore the epochIsValid check for the messages that have the ignoreEpoch=True but continue checking the clusterId nonetheless.", "author": "PavelZaytsev", "createdAt": "2020-02-25T21:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNDMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyNjM4MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r384826381", "bodyText": "@Maithem\nI fixed the issue related to checking the layout and clusterId for the ignoreEpoch messages, however it introduced another issue that these checks should actually be ignored for some of the message types. This makes sense because these message types have to deal with pings, cluster discovery, cluster bootstrapping or ADD_NODE workflow related (A cluster should not/might not be bootstrapped, when the server router receives these messages). I also had to fix some of the tests accordingly. Let me know if you got any questions, and please review when you get the chance.", "author": "PavelZaytsev", "createdAt": "2020-02-26T23:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNDMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java b/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\nindex 2a031b21c60..726b980c6e1 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\n\n@@ -48,6 +50,12 @@ public interface IServerRouter {\n      */\n     List<AbstractServer> getServers();\n \n+    /**\n+     * Set a serverContext for this router.\n+     * @param serverContext A current server context.\n+     */\n+    void setServerContext(ServerContext serverContext);\n+\n     /**\n      * Send WRONG_EPOCH message.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyMjMxOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r384022318", "bodyText": "please rename currentClusterId\nnote: never use consecutive capital letters", "author": "xnull", "createdAt": "2020-02-25T17:32:36Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java", "diffHunk": "@@ -21,14 +33,130 @@\n      */\n     void setServerEpoch(long newEpoch);\n \n+    /**\n+     * Get the currently bootstrapped layout.\n+     */\n+    Optional<Layout> getCurrentLayout();\n+\n     /**\n      * Register a server to route messages to.\n-     * @param server    The server to route messages to\n+     * @param server The server to route messages to\n      */\n     void addServer(AbstractServer server);\n \n     /**\n      * Get a list of registered servers.\n      */\n     List<AbstractServer> getServers();\n+\n+    /**\n+     * Set a serverContext for this router.\n+     * @param serverContext A current server context.\n+     */\n+    void setServerContext(ServerContext serverContext);\n+\n+    /**\n+     * Send WRONG_EPOCH message.\n+     *\n+     * @param msg The incoming message.\n+     * @param ctx The context of the channel handler.\n+     */\n+    default void sendWrongEpochMessage(CorfuMsg msg, ChannelHandlerContext ctx) {\n+        sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,\n+                getServerEpoch()));\n+        log.warn(\"Incoming message with wrong epoch, got {}, expected {}, message was: {}\",\n+                msg.getEpoch(), getServerEpoch(), msg);\n+    }\n+\n+    /**\n+     * Send LAYOUT_NOBOOTSTRAP message.\n+     *\n+     * @param msg The incoming message.\n+     * @param ctx The context of the channel handler.\n+     */\n+    default void sendNoBootstrapMessage(CorfuMsg msg, ChannelHandlerContext ctx) {\n+        sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.LAYOUT_NOBOOTSTRAP));\n+        log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+    }\n+\n+    /**\n+     * Send WRONG_CLUSTER_ID message.\n+     *\n+     * @param msg              The incoming message.\n+     * @param ctx              The context of the channel handler.\n+     * @param currentClusterID The current cluster id.\n+     */\n+    default void sendWrongClusterIdMessage(CorfuMsg msg, ChannelHandlerContext ctx, UUID currentClusterID) {\n+        sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_CLUSTER_ID,\n+                new WrongClusterMsg(currentClusterID, msg.getClusterID())));\n+        log.warn(\"Incoming message with a wrong cluster ID, got {}, expected {}, message was {}\",\n+                msg.getClusterID(), currentClusterID, msg);\n+    }\n+\n+    /**\n+     * Validate the epoch of a CorfuMsg, and send a WRONG_EPOCH response if\n+     * the server is in the wrong epoch. Ignored if the message type is reset (which\n+     * is valid in any epoch).\n+     *\n+     * @param msg The incoming message to validate.\n+     * @param ctx The context of the channel handler.\n+     * @return True, if the epoch is correct, but false otherwise.\n+     */\n+    default boolean epochIsValid(CorfuMsg msg, ChannelHandlerContext ctx) {\n+        long serverEpoch = getServerEpoch();\n+        if (msg.getEpoch() != serverEpoch) {\n+            sendWrongEpochMessage(msg, ctx);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Validate that the message's cluster ID is equal to the cluster ID of a bootstrapped layout.\n+     *\n+     * @param msg           The incoming message.\n+     * @param ctx           The context of the channel handler.\n+     * @param currentLayout The layout a server was bootstrapped with.\n+     * @return True, if the message's cluster ID is equal to this node's cluster ID, otherwise false.\n+     */\n+    default boolean clusterIdIsValid(CorfuMsg msg, ChannelHandlerContext ctx, Layout currentLayout) {\n+        UUID currentClusterID = currentLayout.getClusterId();", "originalCommit": "8f3389c2f293ab556871b5335fe3ca87fbe43471", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java b/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\nindex c9c45845af4..726b980c6e1 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\n\n@@ -64,7 +65,7 @@ public interface IServerRouter {\n     default void sendWrongEpochMessage(CorfuMsg msg, ChannelHandlerContext ctx) {\n         sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,\n                 getServerEpoch()));\n-        log.warn(\"Incoming message with wrong epoch, got {}, expected {}, message was: {}\",\n+        log.trace(\"Incoming message with wrong epoch, got {}, expected {}, message was: {}\",\n                 msg.getEpoch(), getServerEpoch(), msg);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyMzAxOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r384023019", "bodyText": "*clusterId", "author": "xnull", "createdAt": "2020-02-25T17:33:52Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/management/FailureDetector.java", "diffHunk": "@@ -126,7 +127,7 @@ PollReport pollRound(\n         List<PollReport> reports = new ArrayList<>();\n         for (int iteration = 0; iteration < failureThreshold; iteration++) {\n             PollReport currReport = pollIteration(\n-                    allServers, router, epoch, sequencerMetrics, layoutUnresponsiveNodes\n+                    allServers, router, epoch, clusterID, sequencerMetrics, layoutUnresponsiveNodes", "originalCommit": "8f3389c2f293ab556871b5335fe3ca87fbe43471", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwMzc1Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385403752", "bodyText": "Can you put this in CorfuMsgType. IgnoreClusterId should be specified in similar way to ignoreEpoch", "author": "Maithem", "createdAt": "2020-02-27T22:17:09Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java", "diffHunk": "@@ -41,20 +45,41 @@\n     volatile long serverEpoch;\n \n     /** The {@link AbstractServer}s this {@link NettyServerRouter} routes messages for. */\n-    final List<AbstractServer> servers;\n+    private final ImmutableList<AbstractServer> servers;\n+\n+    /**\n+     * The set of messages for which the layout and cluster id validations should be ignored.\n+     */\n+    private final Set<CorfuMsgType> ignoreLayoutMsgTypes = ImmutableSet.of(", "originalCommit": "32c550c152ca3351bc253409f94a87e498454e56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NjMxNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385466316", "bodyText": "Fixed", "author": "PavelZaytsev", "createdAt": "2020-02-28T01:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwMzc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java b/infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java\nindex 1af10644b44..9c719aa9b0d 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/NettyServerRouter.java\n\n@@ -47,24 +46,6 @@ public class NettyServerRouter extends ChannelInboundHandlerAdapter implements I\n     /** The {@link AbstractServer}s this {@link NettyServerRouter} routes messages for. */\n     private final ImmutableList<AbstractServer> servers;\n \n-    /**\n-     * The set of messages for which the layout and cluster id validations should be ignored.\n-     */\n-    private final Set<CorfuMsgType> ignoreLayoutMsgTypes = ImmutableSet.of(\n-            // Messages for cluster discovery and cluster creation:\n-            CorfuMsgType.LAYOUT_REQUEST,\n-            CorfuMsgType.LAYOUT_BOOTSTRAP,\n-            // Messages to validate an alive orchestrator:\n-            CorfuMsgType.PING,\n-            // Request for bootstrapping a management server to run Orchestrator workflows:\n-            CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST,\n-            // Orchestrator workflow requests:\n-            CorfuMsgType.ORCHESTRATOR_REQUEST,\n-            // Misc:\n-            CorfuMsgType.VERSION_REQUEST,\n-            CorfuMsgType.KEEP_ALIVE\n-    );\n-\n     /** Construct a new {@link NettyServerRouter}.\n      *\n      * @param servers   A list of {@link AbstractServer}s this router will route\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MzU4Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385453583", "bodyText": "This log line and the the ones in the following methods are trace level in master, why we made it warning level?", "author": "WenbinZhu", "createdAt": "2020-02-28T00:49:49Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java", "diffHunk": "@@ -21,14 +34,128 @@\n      */\n     void setServerEpoch(long newEpoch);\n \n+    /**\n+     * Get the currently bootstrapped layout.\n+     */\n+    Optional<Layout> getCurrentLayout();\n+\n     /**\n      * Register a server to route messages to.\n-     * @param server    The server to route messages to\n+     * @param server The server to route messages to\n      */\n     void addServer(AbstractServer server);\n \n     /**\n      * Get a list of registered servers.\n      */\n     List<AbstractServer> getServers();\n+\n+    /**\n+     * Set a serverContext for this router.\n+     * @param serverContext A current server context.\n+     */\n+    void setServerContext(ServerContext serverContext);\n+\n+    /**\n+     * Send WRONG_EPOCH message.\n+     *\n+     * @param msg The incoming message.\n+     * @param ctx The context of the channel handler.\n+     */\n+    default void sendWrongEpochMessage(CorfuMsg msg, ChannelHandlerContext ctx) {\n+        sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,\n+                getServerEpoch()));\n+        log.warn(\"Incoming message with wrong epoch, got {}, expected {}, message was: {}\",", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2MTk5Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385861992", "bodyText": "I guess I can change it back to trace, since it happens fairly often.", "author": "PavelZaytsev", "createdAt": "2020-02-28T18:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MzU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java b/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\nindex e7dad4dcb48..726b980c6e1 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/IServerRouter.java\n\n@@ -65,7 +65,7 @@ public interface IServerRouter {\n     default void sendWrongEpochMessage(CorfuMsg msg, ChannelHandlerContext ctx) {\n         sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,\n                 getServerEpoch()));\n-        log.warn(\"Incoming message with wrong epoch, got {}, expected {}, message was: {}\",\n+        log.trace(\"Incoming message with wrong epoch, got {}, expected {}, message was: {}\",\n                 msg.getEpoch(), getServerEpoch(), msg);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1ODM2MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385458361", "bodyText": "Is this necessary? Looks like no one use it other than itself.", "author": "WenbinZhu", "createdAt": "2020-02-28T01:06:45Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -81,6 +81,7 @@\n     /**\n      * The server context of the node.\n      */\n+    @Getter", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2NzgwNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385867806", "bodyText": "Removed", "author": "PavelZaytsev", "createdAt": "2020-02-28T19:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1ODM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java b/infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java\nindex e6018af375f..ae0eebb6958 100644\n--- a/infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java\n+++ b/infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java\n\n@@ -81,7 +81,6 @@ public class LogUnitServer extends AbstractServer {\n     /**\n      * The server context of the node.\n      */\n-    @Getter\n     private final ServerContext serverContext;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1OTM5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385459397", "bodyText": "Can you explain the necessity of this block?", "author": "WenbinZhu", "createdAt": "2020-02-28T01:10:54Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/CorfuServerNode.java", "diffHunk": "@@ -80,11 +80,17 @@ public CorfuServerNode(@Nonnull ServerContext serverContext) {\n      * @param serverMap     Server Map with all components.\n      */\n     public CorfuServerNode(@Nonnull ServerContext serverContext,\n-                           @Nonnull Map<Class, AbstractServer> serverMap) {\n+                           @Nonnull ImmutableMap<Class, AbstractServer> serverMap) {\n         this.serverContext = serverContext;\n         this.serverMap = serverMap;\n-        router = new NettyServerRouter(new ArrayList<>(serverMap.values()));\n+        router = new NettyServerRouter(serverMap.values().asList(), serverContext);\n         this.serverContext.setServerRouter(router);\n+        // If the node is started in the single node setup and was bootstrapped,\n+        // set the server epoch as well.\n+        if(serverContext.isSingleNodeSetup() && serverContext.getCurrentLayout() != null){", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3MjE0Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385872146", "bodyText": "ServerContext is now initialized with the invalid epoch. In the normal node to set it to the first epoch (0), we bootstrap it with a layout and seal the epoch from the client. After this happens, the client can start routing messages to the node safely. In the single node, we don't bootstrap it since the node self-bootstraps on a startup from the layout server. This block ensures that we self-seal the node in the single node too after everything has been initialized. Otherwise, in the single node setup the log unit seal epoch would be invalid, and all the messages won't be able to go through.", "author": "PavelZaytsev", "createdAt": "2020-02-28T19:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1OTM5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTcxMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385461712", "bodyText": "NIT: add spaces after if and else", "author": "WenbinZhu", "createdAt": "2020-02-28T01:19:50Z", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/CorfuMsg.java", "diffHunk": "@@ -119,6 +126,15 @@ public void serialize(ByteBuf buffer) {\n             buffer.writeLong(clientID.getMostSignificantBits());\n             buffer.writeLong(clientID.getLeastSignificantBits());\n         }\n+        if(clusterID == null){\n+            buffer.writeLong(0L);\n+            buffer.writeLong(0L);\n+        }\n+        else{\n+            buffer.writeLong(clusterID.getMostSignificantBits());\n+            buffer.writeLong(clusterID.getLeastSignificantBits());\n+        }\n+", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3MjYwNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385872607", "bodyText": "Fixed", "author": "PavelZaytsev", "createdAt": "2020-02-28T19:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/protocols/wireprotocol/CorfuMsg.java b/runtime/src/main/java/org/corfudb/protocols/wireprotocol/CorfuMsg.java\nindex 9b9ad8b7804..f5959f7985d 100644\n--- a/runtime/src/main/java/org/corfudb/protocols/wireprotocol/CorfuMsg.java\n+++ b/runtime/src/main/java/org/corfudb/protocols/wireprotocol/CorfuMsg.java\n\n@@ -126,11 +126,11 @@ public class CorfuMsg {\n             buffer.writeLong(clientID.getMostSignificantBits());\n             buffer.writeLong(clientID.getLeastSignificantBits());\n         }\n-        if(clusterID == null){\n+        if (clusterID == null) {\n             buffer.writeLong(0L);\n             buffer.writeLong(0L);\n         }\n-        else{\n+        else {\n             buffer.writeLong(clusterID.getMostSignificantBits());\n             buffer.writeLong(clusterID.getLeastSignificantBits());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2Njc3Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385466776", "bodyText": "I think for KEEP_ALIVE, it's better not to ignore cluster ID, if a client is from a different cluster, it's unnecessary for the servers in this cluster to keep alive the channel to that client.", "author": "WenbinZhu", "createdAt": "2020-02-28T01:39:02Z", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/CorfuMsgType.java", "diffHunk": "@@ -82,41 +84,42 @@\n     ERROR_VALUE_ADOPTED(59,new TypeToken<CorfuPayloadMsg<ReadResponse>>() {}),\n \n     // EXTRA CODES\n-    LAYOUT_ALREADY_BOOTSTRAP(60, TypeToken.of(CorfuMsg.class), true),\n-    LAYOUT_PREPARE_ACK(61, new TypeToken<CorfuPayloadMsg<LayoutPrepareResponse>>(){}, true),\n-    RESTART(62, TypeToken.of(CorfuMsg.class), true),\n-    KEEP_ALIVE(63, TypeToken.of(CorfuMsg.class), true),\n+    LAYOUT_ALREADY_BOOTSTRAP(60, TypeToken.of(CorfuMsg.class), true, false),\n+    LAYOUT_PREPARE_ACK(61, new TypeToken<CorfuPayloadMsg<LayoutPrepareResponse>>(){}, true, false),\n+    RESTART(62, TypeToken.of(CorfuMsg.class), true, false),\n+    KEEP_ALIVE(63, TypeToken.of(CorfuMsg.class), true, true),", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3Njk3Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385876973", "bodyText": "The reason for keep alive ignoring the clusterId checks is because there is a possibility of sending a keep alive messages after the handshake is completed but before the cluster was formed. Basically this scenario might occur:\n\nHandshake occurs to establish a trust (making sure a client and a server have correct certificates). We are not concerned with cluster level here yet because there is no cluster per se.\nChannel connection is established after a successful handshake.\nChannel is idle, and a client has not bootstrapped a cluster yet. A keep alive message is sent to the server router. If we did not ignore, this would have thrown an exception because of the clusterId check but there was never a cluster in the first place, we just established the connection.", "author": "PavelZaytsev", "createdAt": "2020-02-28T19:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2Njc3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzA4Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385467083", "bodyText": "Add javadoc", "author": "WenbinZhu", "createdAt": "2020-02-28T01:40:28Z", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/WrongClusterMsg.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.corfudb.protocols.wireprotocol;\n+\n+import io.netty.buffer.ByteBuf;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.util.UUID;\n+\n+@Builder\n+@AllArgsConstructor\n+@Getter\n+public class WrongClusterMsg implements ICorfuPayload<WrongClusterMsg> {", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MDA3NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385880074", "bodyText": "Done", "author": "PavelZaytsev", "createdAt": "2020-02-28T19:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/protocols/wireprotocol/WrongClusterMsg.java b/runtime/src/main/java/org/corfudb/protocols/wireprotocol/WrongClusterMsg.java\nindex de252543ad5..ecf3ca49390 100644\n--- a/runtime/src/main/java/org/corfudb/protocols/wireprotocol/WrongClusterMsg.java\n+++ b/runtime/src/main/java/org/corfudb/protocols/wireprotocol/WrongClusterMsg.java\n\n@@ -7,12 +7,23 @@ import lombok.Getter;\n \n import java.util.UUID;\n \n+/**\n+ * A message sent from the server router to the client in response to\n+ * the client sending an original message stamped with a clusterId that is different\n+ * from the server's clusterId.\n+ */\n @Builder\n @AllArgsConstructor\n @Getter\n public class WrongClusterMsg implements ICorfuPayload<WrongClusterMsg> {\n \n+    /**\n+     * Server's expected clusterId.\n+     */\n     private final UUID serverClusterId;\n+    /**\n+     * ClusterId that belongs to the original client's message.\n+     */\n     private final UUID clientClusterId;\n \n     public WrongClusterMsg(ByteBuf buf){\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTc3Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385469772", "bodyText": "The APIs in this file are public APIs consumed by our verticals, you probably need to modify the veritcal codes when you check-in to production code. Is this clusterId field really needed here, can we just use the default?", "author": "WenbinZhu", "createdAt": "2020-02-28T01:50:59Z", "path": "runtime/src/main/java/org/corfudb/runtime/RebootUtil.java", "diffHunk": "@@ -51,13 +61,16 @@ public static void reset(@NonNull String endpoint,\n      * @param corfuRuntimeParameters CorfuRuntimeParameters can specify security parameters.\n      * @param retries                Number of retries to bootstrap each node before giving up.\n      * @param retryDuration          Duration between retries.\n+     * @param clusterId              Optional cluster Id. If None is provided, then the default one\n+     *                               will be used to create a base client.\n      */\n     public static void reset(@NonNull String endpoint,\n                              @NonNull CorfuRuntimeParameters corfuRuntimeParameters,\n                              int retries,\n-                             @NonNull Duration retryDuration) {\n+                             @NonNull Duration retryDuration,\n+                             Optional<UUID> clusterId) {", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMTY2NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385911665", "bodyText": "It's a fair point. Unfortunately, a reset message is the one we should check the layout and id for the reset messages. I checked whether this API is used in the newest release, and it seems like it's not (they just use our internal client code instead). For the previous releases this API is used in a few places in the cluster management code.", "author": "PavelZaytsev", "createdAt": "2020-02-28T20:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTc3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDU5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385470597", "bodyText": "Can we reuse Layout.INVALID_CLUSTER_ID?", "author": "WenbinZhu", "createdAt": "2020-02-28T01:54:12Z", "path": "runtime/src/main/java/org/corfudb/runtime/RebootUtil.java", "diffHunk": "@@ -25,6 +27,11 @@ private RebootUtil() {\n         // prevent instantiation of this class\n     }\n \n+    /**\n+     * A default cluster Id for resets if none are provided by a user.\n+     */\n+    private static final UUID DEFAULT_CLUSTER_ID =", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMjI2Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385912267", "bodyText": "Fixed", "author": "PavelZaytsev", "createdAt": "2020-02-28T20:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/RebootUtil.java b/runtime/src/main/java/org/corfudb/runtime/RebootUtil.java\nindex ee7485e5d1d..2442abdb985 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/RebootUtil.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/RebootUtil.java\n\n@@ -30,8 +30,7 @@ public class RebootUtil {\n     /**\n      * A default cluster Id for resets if none are provided by a user.\n      */\n-    private static final UUID DEFAULT_CLUSTER_ID =\n-            UUID.fromString(\"00000000-0000-0000-0000-000000000000\");\n+    private static final UUID DEFAULT_CLUSTER_ID = Layout.INVALID_CLUSTER_ID;\n     /**\n      * Resets the given server.\n      * Attempts to reset a server finite number of times.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDkzMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385470931", "bodyText": "You can use Layout.INVALID_CLUSTER_ID", "author": "WenbinZhu", "createdAt": "2020-02-28T01:55:40Z", "path": "test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java", "diffHunk": "@@ -34,6 +34,7 @@ public TestLayoutBuilder() {\n         layoutServers = new ArrayList<>();\n         unresponsiveServers = new ArrayList<>();\n         segments = new ArrayList<>();\n+        clusterId = UUID.fromString(\"00000000-0000-0000-0000-000000000000\");", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMjMxNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385912316", "bodyText": "Fixed", "author": "PavelZaytsev", "createdAt": "2020-02-28T20:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java b/test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java\nindex 687d5d76281..45aaf5427ed 100644\n--- a/test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java\n+++ b/test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java\n\n@@ -34,7 +34,7 @@ public class TestLayoutBuilder {\n         layoutServers = new ArrayList<>();\n         unresponsiveServers = new ArrayList<>();\n         segments = new ArrayList<>();\n-        clusterId = UUID.fromString(\"00000000-0000-0000-0000-000000000000\");\n+        clusterId = Layout.INVALID_CLUSTER_ID;\n     }\n \n     static String getEndpoint(int port) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MTAyMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385471020", "bodyText": "You can use Layout.INVALID_CLUSTER_ID, please replace occurences in other test files.", "author": "WenbinZhu", "createdAt": "2020-02-28T01:55:58Z", "path": "test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java", "diffHunk": "@@ -49,7 +50,7 @@ public static Layout single(int port) {\n                 .addLogUnit(port)\n                 .addToSegment()\n                 .addToLayout()\n-                .setClusterId(UUID.randomUUID())\n+                .setClusterId(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"))", "originalCommit": "6e67dd3095b2191d19685db9b894659ad3c83f3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMjM2MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2330#discussion_r385912360", "bodyText": "Fixed", "author": "PavelZaytsev", "createdAt": "2020-02-28T20:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MTAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "chunk": "diff --git a/test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java b/test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java\nindex 687d5d76281..45aaf5427ed 100644\n--- a/test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java\n+++ b/test/src/test/java/org/corfudb/infrastructure/TestLayoutBuilder.java\n\n@@ -50,7 +50,7 @@ public class TestLayoutBuilder {\n                 .addLogUnit(port)\n                 .addToSegment()\n                 .addToLayout()\n-                .setClusterId(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"))\n+                .setClusterId(Layout.INVALID_CLUSTER_ID)\n                 .build();\n     }\n \n"}}, {"oid": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "url": "https://github.com/CorfuDB/CorfuDB/commit/c157f1b7009766bff5bceab76b96e9faf1ab628b", "message": "Introduce server routing msg verifications", "committedDate": "2020-02-29T00:01:11Z", "type": "commit"}, {"oid": "c157f1b7009766bff5bceab76b96e9faf1ab628b", "url": "https://github.com/CorfuDB/CorfuDB/commit/c157f1b7009766bff5bceab76b96e9faf1ab628b", "message": "Introduce server routing msg verifications", "committedDate": "2020-02-29T00:01:11Z", "type": "forcePushed"}, {"oid": "2e9f020a99558f74ba2c5d2bc62714d7f131efb7", "url": "https://github.com/CorfuDB/CorfuDB/commit/2e9f020a99558f74ba2c5d2bc62714d7f131efb7", "message": "Merge with the reset router changes", "committedDate": "2020-03-02T20:57:38Z", "type": "commit"}, {"oid": "5050bfd8853d774e31fe6a1610ef62765f3f4a17", "url": "https://github.com/CorfuDB/CorfuDB/commit/5050bfd8853d774e31fe6a1610ef62765f3f4a17", "message": "Fix client for bootstrap/management bootstrap in cmdlets. Fix clojure dangling parens", "committedDate": "2020-03-03T22:00:47Z", "type": "commit"}, {"oid": "5d8d0d802ac39ce48e6eeb4b17efb3278dd5081c", "url": "https://github.com/CorfuDB/CorfuDB/commit/5d8d0d802ac39ce48e6eeb4b17efb3278dd5081c", "message": "Get a client from the clojure namespace", "committedDate": "2020-03-03T22:31:42Z", "type": "commit"}, {"oid": "3d0250e08505e6235fcf8786312fc895b14847a4", "url": "https://github.com/CorfuDB/CorfuDB/commit/3d0250e08505e6235fcf8786312fc895b14847a4", "message": "Add clusterId verification for the bootstraps", "committedDate": "2020-03-04T02:28:43Z", "type": "commit"}, {"oid": "3ecb4b342c9823b3519df8c170d69828f679d1ef", "url": "https://github.com/CorfuDB/CorfuDB/commit/3ecb4b342c9823b3519df8c170d69828f679d1ef", "message": "Merge branch 'master' into reset-bug", "committedDate": "2020-03-04T21:55:13Z", "type": "commit"}, {"oid": "5fcabd8073b57a5d65a5024f16d6c75149deff5f", "url": "https://github.com/CorfuDB/CorfuDB/commit/5fcabd8073b57a5d65a5024f16d6c75149deff5f", "message": "Merge branch 'master' into reset-bug", "committedDate": "2020-03-04T23:00:37Z", "type": "commit"}]}