{"pr_number": 2837, "pr_title": "UFO nested secondary index", "pr_createdAt": "2020-12-01T04:26:35Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2837", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5OTY2OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r533099669", "bodyText": "So this is meant to go 2 levels right, not N levels? Or am I missing something?\n2 levels is actually fine too!", "author": "hisundar", "createdAt": "2020-12-01T06:27:52Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "diffHunk": "@@ -23,43 +26,136 @@\n         Message>> {\n \n     private final HashMap<String,\n-            Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>>\n+            Index.Spec<Message, CorfuRecord<Message, Message>, ?>>\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n+        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n     }\n \n-    private <T extends Comparable<T>> Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n     getIndex(String indexName, FieldDescriptor fieldDescriptor) {\n-\n         return new Index.Spec<>(\n                 () -> indexName,\n                 (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n                         (key, val) -> ClassUtils.cast(val.getPayload().getField(fieldDescriptor)));\n     }\n \n-    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor) {\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n+    getComplexIndex(String indexName) {\n+        return new Index.Spec<>(\n+                () -> indexName,\n+                (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n+                        (key, val) -> {\n+                            // Get all nested fields, '.' separated\n+                            String[] nestedFields = indexName.split(\"\\\\.\");\n+\n+                            if (nestedFields.length > 0) {\n+                                Message subMessage = val.getPayload();\n+\n+                                for (int i =0; i < nestedFields.length; i++) {\n+                                    try {\n+                                        subMessage = (Message) subMessage.getField(", "originalCommit": "2a84621360a1d319c9759784e99ab943bb7ccfb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMzEzOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r533103139", "bodyText": "It is bounded to nestedFields.length, so it can actually go to N levels. It will return outside of the for loop, unless a cast exception is encountered and it's in the last level.", "author": "annym", "createdAt": "2020-12-01T06:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5OTY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ecfb877f5903ecaff806e7902f039196c5cf185", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java b/runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java\nindex ef5b7bbb5bb..634c5118747 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java\n\n@@ -30,7 +32,7 @@ public class ProtobufIndexer implements Index.Registry<Message, CorfuRecord<Mess\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n+        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n     }\n \n     private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMDI4OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r533100289", "bodyText": "Shouldn't we also handle else if (fieldDescriptor.isRepeated()) { for indexes on collections?", "author": "hisundar", "createdAt": "2020-12-01T06:29:41Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "diffHunk": "@@ -23,43 +26,136 @@\n         Message>> {\n \n     private final HashMap<String,\n-            Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>>\n+            Index.Spec<Message, CorfuRecord<Message, Message>, ?>>\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n+        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n     }\n \n-    private <T extends Comparable<T>> Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n     getIndex(String indexName, FieldDescriptor fieldDescriptor) {\n-\n         return new Index.Spec<>(\n                 () -> indexName,\n                 (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n                         (key, val) -> ClassUtils.cast(val.getPayload().getField(fieldDescriptor)));\n     }\n \n-    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor) {\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n+    getComplexIndex(String indexName) {\n+        return new Index.Spec<>(\n+                () -> indexName,\n+                (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n+                        (key, val) -> {\n+                            // Get all nested fields, '.' separated\n+                            String[] nestedFields = indexName.split(\"\\\\.\");\n+\n+                            if (nestedFields.length > 0) {\n+                                Message subMessage = val.getPayload();\n+\n+                                for (int i =0; i < nestedFields.length; i++) {\n+                                    try {\n+                                        subMessage = (Message) subMessage.getField(\n+                                                subMessage.getDescriptorForType().findFieldByName(nestedFields[i]));\n+                                    } catch (ClassCastException ce) {\n+                                        // Valid cast exception if its the last level (primitive type), but if the '.' separated secondary\n+                                        // key has still remaining levels, it is not well-formed.\n+                                        if (i != (nestedFields.length - 1)) {\n+                                            throw new IllegalArgumentException(\"Malformed secondary key=\" + indexName + \" primitive field :: \" + nestedFields[i]);\n+                                        }\n \n+                                        return ClassUtils.cast(subMessage.getField(\n+                                                subMessage.getDescriptorForType().findFieldByName(nestedFields[i])));\n+                                    }\n+                                }\n+\n+                                return ClassUtils.cast(subMessage);\n+                            }\n+                            return null;\n+                        });\n+    }\n+\n+    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor, Message payloadSchema) {\n         if (fieldDescriptor.getOptions().getExtension(CorfuOptions.schema).getSecondaryKey()) {\n             final String indexName = fieldDescriptor.getName();\n             if (fieldDescriptor.getType() == FieldDescriptor.Type.GROUP) {\n                 throw new IllegalArgumentException(\"group is a deprecated, unsupported type\");\n             }\n             indices.put(indexName, getIndex(indexName, fieldDescriptor));\n+        } else if (fieldDescriptor.getOptions().getExtension(CorfuOptions.schema).hasNestedSecondaryKeys()) {\n+            if (fieldDescriptor.getType() == FieldDescriptor.Type.GROUP) {\n+                throw new IllegalArgumentException(\"group is a deprecated, unsupported type\");\n+            }", "originalCommit": "2a84621360a1d319c9759784e99ab943bb7ccfb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMzQxMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r533103413", "bodyText": "I didn't consider collections, let me work on adding it.", "author": "annym", "createdAt": "2020-12-01T06:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMDI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNjk2OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r534636968", "bodyText": "Done, now it supports collections and nested secondary indexes.", "author": "annym", "createdAt": "2020-12-03T03:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMDI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ecfb877f5903ecaff806e7902f039196c5cf185", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java b/runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java\nindex ef5b7bbb5bb..634c5118747 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java\n\n@@ -30,7 +32,7 @@ public class ProtobufIndexer implements Index.Registry<Message, CorfuRecord<Mess\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n+        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n     }\n \n     private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n"}}, {"oid": "9ecfb877f5903ecaff806e7902f039196c5cf185", "url": "https://github.com/CorfuDB/CorfuDB/commit/9ecfb877f5903ecaff806e7902f039196c5cf185", "message": "UFO Secondary Indexes on nested paths", "committedDate": "2020-12-03T03:04:15Z", "type": "forcePushed"}, {"oid": "623d63d43b69274af166cc9e97f2b5207acba5b6", "url": "https://github.com/CorfuDB/CorfuDB/commit/623d63d43b69274af166cc9e97f2b5207acba5b6", "message": "UFO Secondary Indexes on nested paths", "committedDate": "2020-12-03T03:10:50Z", "type": "forcePushed"}, {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067", "url": "https://github.com/CorfuDB/CorfuDB/commit/5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067", "message": "UFO Secondary Indexes on nested paths", "committedDate": "2020-12-03T21:39:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5MDgzOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535690839", "bodyText": "For 40 Class rooms, right?", "author": "zhangn49", "createdAt": "2020-12-03T22:30:16Z", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java", "diffHunk": "@@ -199,6 +201,701 @@ public void testSecondaryIndexes() throws Exception {\n         log.debug(table.getMetrics().toString());\n     }\n \n+    /**\n+     * Simple example to see how nested secondary indexes work. Please see example_schemas.proto.\n+     *\n+     * @throws Exception exception\n+     */\n+    @Test\n+    public void testNestedSecondaryIndexes() throws Exception {\n+\n+        // Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();\n+\n+        // Creating Corfu Store using a connected corfu client.\n+        CorfuStoreShim shimStore = new CorfuStoreShim(corfuRuntime);\n+\n+        // Define a namespace for the table.\n+        final String someNamespace = \"some-namespace\";\n+        // Define table name.\n+        final String tableName = \"ManagedMetadata\";\n+\n+        // Create & Register the table.\n+        Table<Uuid, ExampleValue, ManagedMetadata> table = shimStore.openTable(\n+                someNamespace,\n+                tableName,\n+                Uuid.class,\n+                ExampleValue.class,\n+                ManagedMetadata.class,\n+                // TableOptions includes option to choose - Memory/Disk based corfu table.\n+                TableOptions.builder().build());\n+\n+        // Create 100 records\n+        final int totalRecords = 100;\n+        final long even = 0L;\n+        final long odd = 1L;\n+        List<Long> evenRecordIndexes = new ArrayList<>();\n+        ManagedMetadata user = ManagedMetadata.newBuilder().setCreateUser(\"user_UT\").build();\n+\n+        for(int i=0; i<totalRecords; i++) {\n+            if(i % 2 == 0) {\n+                evenRecordIndexes.add(Long.valueOf(i));\n+            }\n+\n+            UUID uuid = UUID.randomUUID();\n+            Uuid key = Uuid.newBuilder()\n+                    .setMsb(uuid.getMostSignificantBits()).setLsb(uuid.getLeastSignificantBits())\n+                    .build();\n+\n+            try (ManagedTxnContext txn = shimStore.txn(someNamespace)) {\n+                txn.putRecord(tableName, key,\n+                        ExampleValue.newBuilder()\n+                                .setPayload(\"payload_\" + i)\n+                                .setAnotherKey(System.currentTimeMillis())\n+                                .setEntryIndex(i)\n+                                .setNonPrimitiveFieldLevel0(ExampleSchemas.NonPrimitiveValue.newBuilder()\n+                                .setKey1Level1(i % 2 == 0 ? even : odd)\n+                                .setKey2Level1(ExampleSchemas.NonPrimitiveNestedValue.newBuilder()\n+                                        .setKey1Level2(i < (totalRecords/2) ? \"lower half\" : \"upper half\")\n+                                        .setLevelNumber(2)\n+                                        .build()))\n+                                .build(),\n+                        user);\n+                txn.commit();\n+            }\n+        }\n+\n+        // Get by secondary index, retrieve from database all even entries\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"nonPrimitiveFieldLevel0.key1Level1\", even);\n+            assertThat(entries.size()).isEqualTo(totalRecords/2);\n+            Iterator<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> it = entries.iterator();\n+            while(it.hasNext()) {\n+                CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata> entry = it.next();\n+                assertThat(evenRecordIndexes).contains(entry.getPayload().getEntryIndex());\n+                evenRecordIndexes.remove(entry.getPayload().getEntryIndex());\n+            }\n+\n+            assertThat(evenRecordIndexes).isEmpty();\n+            readWriteTxn.commit();\n+        }\n+\n+        // Get by secondary index from second level (nested), retrieve from database 'upper half'\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"nonPrimitiveFieldLevel0.key2Level1.key1Level2\", \"upper half\");\n+            assertThat(entries.size()).isEqualTo(totalRecords/2);\n+            long sum = 0;\n+            Iterator<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> it = entries.iterator();\n+            while(it.hasNext()) {\n+                sum = sum + it.next().getPayload().getEntryIndex();\n+            }\n+\n+            // Assert sum of consecutive numbers of \"upper half\" match the expected value\n+            assertThat(sum).isEqualTo(((totalRecords/2) / 2)*((totalRecords/2) + (totalRecords-1)));\n+            readWriteTxn.commit();\n+        }\n+\n+        log.debug(table.getMetrics().toString());\n+    }\n+\n+    /**\n+     * Simple example to see how nested secondary indexes work on repeated fields. Please see example_schemas.proto.\n+     *\n+     * @throws Exception exception\n+     */\n+    @Test\n+    public void testNestedSecondaryIndexesRepeatedField() throws Exception {\n+\n+        // Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();\n+\n+        // Creating Corfu Store using a connected corfu client.\n+        CorfuStoreShim shimStore = new CorfuStoreShim(corfuRuntime);\n+\n+        // Define a namespace for the table.\n+        final String someNamespace = \"some-namespace\";\n+        // Define table name.\n+        final String tableName = \"ManagedMetadata\";\n+\n+        // Create & Register the table.\n+        Table<Uuid, ExampleSchemas.ClassRoom, ManagedMetadata> table = shimStore.openTable(\n+                someNamespace,\n+                tableName,\n+                Uuid.class,\n+                ExampleSchemas.ClassRoom.class,\n+                ManagedMetadata.class,\n+                // TableOptions includes option to choose - Memory/Disk based corfu table.\n+                TableOptions.builder().build());\n+\n+        // Create records for 40 students", "originalCommit": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f786a0f8b1a940a9bef99b3028e9259ddc9471", "chunk": "diff --git a/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java b/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\nindex e8c4744dc1f..9a4103d3478 100644\n--- a/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\n+++ b/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\n\n@@ -227,7 +227,6 @@ public class CorfuStoreShimTest extends AbstractViewTest {\n                 Uuid.class,\n                 ExampleValue.class,\n                 ManagedMetadata.class,\n-                // TableOptions includes option to choose - Memory/Disk based corfu table.\n                 TableOptions.builder().build());\n \n         // Create 100 records\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5MTE1Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535691153", "bodyText": "totalRooms/2", "author": "zhangn49", "createdAt": "2020-12-03T22:30:48Z", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java", "diffHunk": "@@ -199,6 +201,701 @@ public void testSecondaryIndexes() throws Exception {\n         log.debug(table.getMetrics().toString());\n     }\n \n+    /**\n+     * Simple example to see how nested secondary indexes work. Please see example_schemas.proto.\n+     *\n+     * @throws Exception exception\n+     */\n+    @Test\n+    public void testNestedSecondaryIndexes() throws Exception {\n+\n+        // Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();\n+\n+        // Creating Corfu Store using a connected corfu client.\n+        CorfuStoreShim shimStore = new CorfuStoreShim(corfuRuntime);\n+\n+        // Define a namespace for the table.\n+        final String someNamespace = \"some-namespace\";\n+        // Define table name.\n+        final String tableName = \"ManagedMetadata\";\n+\n+        // Create & Register the table.\n+        Table<Uuid, ExampleValue, ManagedMetadata> table = shimStore.openTable(\n+                someNamespace,\n+                tableName,\n+                Uuid.class,\n+                ExampleValue.class,\n+                ManagedMetadata.class,\n+                // TableOptions includes option to choose - Memory/Disk based corfu table.\n+                TableOptions.builder().build());\n+\n+        // Create 100 records\n+        final int totalRecords = 100;\n+        final long even = 0L;\n+        final long odd = 1L;\n+        List<Long> evenRecordIndexes = new ArrayList<>();\n+        ManagedMetadata user = ManagedMetadata.newBuilder().setCreateUser(\"user_UT\").build();\n+\n+        for(int i=0; i<totalRecords; i++) {\n+            if(i % 2 == 0) {\n+                evenRecordIndexes.add(Long.valueOf(i));\n+            }\n+\n+            UUID uuid = UUID.randomUUID();\n+            Uuid key = Uuid.newBuilder()\n+                    .setMsb(uuid.getMostSignificantBits()).setLsb(uuid.getLeastSignificantBits())\n+                    .build();\n+\n+            try (ManagedTxnContext txn = shimStore.txn(someNamespace)) {\n+                txn.putRecord(tableName, key,\n+                        ExampleValue.newBuilder()\n+                                .setPayload(\"payload_\" + i)\n+                                .setAnotherKey(System.currentTimeMillis())\n+                                .setEntryIndex(i)\n+                                .setNonPrimitiveFieldLevel0(ExampleSchemas.NonPrimitiveValue.newBuilder()\n+                                .setKey1Level1(i % 2 == 0 ? even : odd)\n+                                .setKey2Level1(ExampleSchemas.NonPrimitiveNestedValue.newBuilder()\n+                                        .setKey1Level2(i < (totalRecords/2) ? \"lower half\" : \"upper half\")\n+                                        .setLevelNumber(2)\n+                                        .build()))\n+                                .build(),\n+                        user);\n+                txn.commit();\n+            }\n+        }\n+\n+        // Get by secondary index, retrieve from database all even entries\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"nonPrimitiveFieldLevel0.key1Level1\", even);\n+            assertThat(entries.size()).isEqualTo(totalRecords/2);\n+            Iterator<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> it = entries.iterator();\n+            while(it.hasNext()) {\n+                CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata> entry = it.next();\n+                assertThat(evenRecordIndexes).contains(entry.getPayload().getEntryIndex());\n+                evenRecordIndexes.remove(entry.getPayload().getEntryIndex());\n+            }\n+\n+            assertThat(evenRecordIndexes).isEmpty();\n+            readWriteTxn.commit();\n+        }\n+\n+        // Get by secondary index from second level (nested), retrieve from database 'upper half'\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"nonPrimitiveFieldLevel0.key2Level1.key1Level2\", \"upper half\");\n+            assertThat(entries.size()).isEqualTo(totalRecords/2);\n+            long sum = 0;\n+            Iterator<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> it = entries.iterator();\n+            while(it.hasNext()) {\n+                sum = sum + it.next().getPayload().getEntryIndex();\n+            }\n+\n+            // Assert sum of consecutive numbers of \"upper half\" match the expected value\n+            assertThat(sum).isEqualTo(((totalRecords/2) / 2)*((totalRecords/2) + (totalRecords-1)));\n+            readWriteTxn.commit();\n+        }\n+\n+        log.debug(table.getMetrics().toString());\n+    }\n+\n+    /**\n+     * Simple example to see how nested secondary indexes work on repeated fields. Please see example_schemas.proto.\n+     *\n+     * @throws Exception exception\n+     */\n+    @Test\n+    public void testNestedSecondaryIndexesRepeatedField() throws Exception {\n+\n+        // Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();\n+\n+        // Creating Corfu Store using a connected corfu client.\n+        CorfuStoreShim shimStore = new CorfuStoreShim(corfuRuntime);\n+\n+        // Define a namespace for the table.\n+        final String someNamespace = \"some-namespace\";\n+        // Define table name.\n+        final String tableName = \"ManagedMetadata\";\n+\n+        // Create & Register the table.\n+        Table<Uuid, ExampleSchemas.ClassRoom, ManagedMetadata> table = shimStore.openTable(\n+                someNamespace,\n+                tableName,\n+                Uuid.class,\n+                ExampleSchemas.ClassRoom.class,\n+                ManagedMetadata.class,\n+                // TableOptions includes option to choose - Memory/Disk based corfu table.\n+                TableOptions.builder().build());\n+\n+        // Create records for 40 students\n+        final int totalStudents = 40;\n+        final long youngStudent = 15L;\n+        final long olderStudent = 25L;\n+        ManagedMetadata user = ManagedMetadata.newBuilder().setCreateUser(\"user_UT\").build();\n+\n+        for(int i=0; i<totalStudents; i++) {\n+            UUID uuid = UUID.randomUUID();\n+            Uuid key = Uuid.newBuilder()\n+                    .setMsb(uuid.getMostSignificantBits()).setLsb(uuid.getLeastSignificantBits())\n+                    .build();\n+\n+            try (ManagedTxnContext txn = shimStore.txn(someNamespace)) {\n+                txn.putRecord(tableName, key,\n+                        ExampleSchemas.ClassRoom.newBuilder().addStudents(ExampleSchemas.Student.newBuilder()\n+                                .setName(\"MaleStudent_\" + i)\n+                                .setAge(i % 2 == 0 ? youngStudent : olderStudent).build())\n+                                .addStudents(ExampleSchemas.Student.newBuilder()\n+                                        .setName(\"FemaleStudent_\" + i)\n+                                        .setAge(i % 2 == 0 ? youngStudent : olderStudent).build())\n+                                .build(),\n+                        user);\n+                txn.commit();\n+            }\n+        }\n+\n+        // Get by secondary index, retrieve from database all even entries\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleSchemas.ClassRoom, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"students.age\", youngStudent);\n+            assertThat(entries.size()).isEqualTo(totalStudents/2);", "originalCommit": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f786a0f8b1a940a9bef99b3028e9259ddc9471", "chunk": "diff --git a/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java b/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\nindex e8c4744dc1f..9a4103d3478 100644\n--- a/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\n+++ b/test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java\n\n@@ -227,7 +227,6 @@ public class CorfuStoreShimTest extends AbstractViewTest {\n                 Uuid.class,\n                 ExampleValue.class,\n                 ManagedMetadata.class,\n-                // TableOptions includes option to choose - Memory/Disk based corfu table.\n                 TableOptions.builder().build());\n \n         // Create 100 records\n"}}, {"oid": "99f786a0f8b1a940a9bef99b3028e9259ddc9471", "url": "https://github.com/CorfuDB/CorfuDB/commit/99f786a0f8b1a940a9bef99b3028e9259ddc9471", "message": "UFO Secondary Indexes on nested paths", "committedDate": "2020-12-03T22:43:07Z", "type": "forcePushed"}, {"oid": "0baf1dfffdc8b3d1b9c9d77fdf1459d326f92fd1", "url": "https://github.com/CorfuDB/CorfuDB/commit/0baf1dfffdc8b3d1b9c9d77fdf1459d326f92fd1", "message": "UFO Secondary Indexes on nested paths", "committedDate": "2020-12-04T00:24:19Z", "type": "forcePushed"}, {"oid": "fa22ea6bc2a5d6df523f89f09cb699e0ddf967bd", "url": "https://github.com/CorfuDB/CorfuDB/commit/fa22ea6bc2a5d6df523f89f09cb699e0ddf967bd", "message": "UFO Secondary Indexes on nested paths", "committedDate": "2020-12-04T03:25:34Z", "type": "commit"}, {"oid": "fa22ea6bc2a5d6df523f89f09cb699e0ddf967bd", "url": "https://github.com/CorfuDB/CorfuDB/commit/fa22ea6bc2a5d6df523f89f09cb699e0ddf967bd", "message": "UFO Secondary Indexes on nested paths", "committedDate": "2020-12-04T03:25:34Z", "type": "forcePushed"}, {"oid": "ff498e709fc523f2ab1a16700f295771068173df", "url": "https://github.com/CorfuDB/CorfuDB/commit/ff498e709fc523f2ab1a16700f295771068173df", "message": "Merge branch 'master' into nested-secondary-index", "committedDate": "2020-12-04T18:55:30Z", "type": "commit"}]}