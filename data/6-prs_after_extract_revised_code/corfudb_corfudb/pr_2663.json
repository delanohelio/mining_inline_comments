{"pr_number": 2663, "pr_title": "Fix FSM Unit Test and Snapshot Plugin Condition", "pr_createdAt": "2020-07-27T21:57:22Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2663", "timeline": [{"oid": "d8615d79fd8f9a6ff77b49c85f0be5c3ceebec4f", "url": "https://github.com/CorfuDB/CorfuDB/commit/d8615d79fd8f9a6ff77b49c85f0be5c3ceebec4f", "message": "Fix FSM Unit Test and Snapshot Plugin Condition\n\n- Fix Intermittent Failure on FSM Unit Test\n- Fix onSnapshotEnd condition to check for an ack SNAPSHOT_END instead of SNAPSHOT_REPLICATED (intermediate acks)", "committedDate": "2020-07-27T21:59:16Z", "type": "commit"}, {"oid": "d8615d79fd8f9a6ff77b49c85f0be5c3ceebec4f", "url": "https://github.com/CorfuDB/CorfuDB/commit/d8615d79fd8f9a6ff77b49c85f0be5c3ceebec4f", "message": "Fix FSM Unit Test and Snapshot Plugin Condition\n\n- Fix Intermittent Failure on FSM Unit Test\n- Fix onSnapshotEnd condition to check for an ack SNAPSHOT_END instead of SNAPSHOT_REPLICATED (intermediate acks)", "committedDate": "2020-07-27T21:59:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3ODU3Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2663#discussion_r461278576", "bodyText": "nit - probably we should rename this to setter of something.. because it is only setting the metadata.", "author": "pankti-m", "createdAt": "2020-07-28T02:24:02Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/TestDataSender.java", "diffHunk": "@@ -34,7 +36,18 @@ public TestDataSender() {\n         }\n \n         CompletableFuture<LogReplicationEntry> cf = new CompletableFuture<>();\n-        LogReplicationEntry ack = LogReplicationEntry.generateAck(message.getMetadata());", "originalCommit": "d8615d79fd8f9a6ff77b49c85f0be5c3ceebec4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1ODYzOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2663#discussion_r461758638", "bodyText": "Yes, I had this comment on another PR and that PR is addressing it, so I'm not going to touch this here to not conflict.", "author": "annym", "createdAt": "2020-07-28T17:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3ODU3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4MTcyNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2663#discussion_r461281724", "bodyText": "index is never getting updated.  will it ever reach the condition index<baseSnapshot?", "author": "pankti-m", "createdAt": "2020-07-28T02:35:35Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/TestSnapshotReader.java", "diffHunk": "@@ -40,23 +40,24 @@ public SnapshotReadMessage read(UUID snapshotRequestId) {\n         // Connect to endpoint\n         List<LogReplicationEntry> messages = new ArrayList<>();\n \n+        int index = globalIndex;\n+\n+        // Limit to read as max as BatchSize and until the maximum baseSnapshot\n+        for (int i=index; (i<(index+config.getBatchSize()) && index<baseSnapshot) ; i++) {", "originalCommit": "d8615d79fd8f9a6ff77b49c85f0be5c3ceebec4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1ODg5Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2663#discussion_r461758893", "bodyText": "it is in line 43", "author": "annym", "createdAt": "2020-07-28T17:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4MTcyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDc0Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2663#discussion_r461284747", "bodyText": "apply has not been done yet, right?  Only transfer has completed?", "author": "pankti-m", "createdAt": "2020-07-28T02:46:08Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -272,26 +272,33 @@ private LogReplicationEntry processReceivedMessage(LogReplicationEntry message)\n             return logEntrySinkBufferManager.processMsgAndBuffer(message);\n         } else {\n             LogReplicationEntry ack = snapshotSinkBufferManager.processMsgAndBuffer(message);\n-            // Check to the one persisted...\n-            if (ack.getMetadata().getMessageMetadataType() == MessageType.SNAPSHOT_REPLICATED) {\n-                long lastAppliedBaseSnapshotTimestamp = logReplicationMetadataManager.getLastAppliedBaseSnapshotTimestamp();\n-                long latestSnapshotSyncCycleId = logReplicationMetadataManager.getCurrentSnapshotSyncCycleId();\n-                long ackSnapshotSyncCycleId = ack.getMetadata().getSyncRequestId().getMostSignificantBits() & Long.MAX_VALUE;\n-                // Verify this snapshot ACK corresponds to the last initialized/valid snapshot sync\n-                // as a previous one could have been canceled but still processed due to messages being out of order\n-                if ((ackSnapshotSyncCycleId == latestSnapshotSyncCycleId) &&\n-                        (ack.getMetadata().getSnapshotTimestamp() == lastAppliedBaseSnapshotTimestamp)) {\n-                    // Notify end of snapshot sync. This is a blocking call.\n-                    snapshotSyncPlugin.onSnapshotSyncEnd(runtime);\n-                } else {\n-                    log.warn(\"SNAPSHOT_SYNC has completed for {}, but new ongoing SNAPSHOT_SYNC is {}\",\n-                            ack.getMetadata().getSnapshotTimestamp(), lastAppliedBaseSnapshotTimestamp);\n-                }\n+            // If the snapshot sync apply has completed (determined by the end marker) notify\n+            // plugin the completion, so checkpoint/trim process is resumed.\n+            if (ack.getMetadata().getMessageMetadataType() == SNAPSHOT_END) {\n+                processSnapshotSyncApplied(ack);\n             }\n             return ack;\n         }\n     }\n \n+    private void processSnapshotSyncApplied(LogReplicationEntry ack) {", "originalCommit": "d8615d79fd8f9a6ff77b49c85f0be5c3ceebec4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1OTY2NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2663#discussion_r461759665", "bodyText": "It has been applied already.", "author": "annym", "createdAt": "2020-07-28T17:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDc0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NTI3NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2663#discussion_r461285275", "bodyText": "default value will be false which can change the behavior.. is it intentional?", "author": "pankti-m", "createdAt": "2020-07-28T02:48:19Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/SenderBufferManager.java", "diffHunk": "@@ -53,8 +52,7 @@\n     /*\n      * If there is a timeout for a message, should generate an error or not\n      */\n-    private boolean errorOnMsgTimeout = true;\n-\n+    private boolean errorOnMsgTimeout;", "originalCommit": "d8615d79fd8f9a6ff77b49c85f0be5c3ceebec4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1OTM0Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2663#discussion_r461759346", "bodyText": "the static code analysis asks to remove this redundant. It is initialized in the constructor.", "author": "annym", "createdAt": "2020-07-28T17:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NTI3NQ=="}], "type": "inlineReview", "revised_code": null}]}