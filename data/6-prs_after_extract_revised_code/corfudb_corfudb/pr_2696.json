{"pr_number": 2696, "pr_title": "Measure Serialize/Deserialize/VLO_SYNC latency", "pr_createdAt": "2020-08-10T22:15:04Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2696", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NDI5OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468254298", "bodyText": "If you move this string concatenation outside, you don't have to do it on each access.", "author": "Maithem", "createdAt": "2020-08-11T00:14:44Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -672,25 +674,32 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        stream.streamUpTo(syncTo)\n-                .forEachOrdered(entry -> {\n-                    try {\n-                        Object res = applyUpdateUnsafe(entry, timestamp);\n-                        if (timestamp == Address.OPTIMISTIC) {\n+        Timer timer = VloMetricsHelper.metrics.timer(VloMetricsHelper.VLO_SYNC_STREAM + stream.getID());\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(VloMetricsHelper.VLO_SYNC_COUNT + stream.getID());\n+        AtomicLong counter = new AtomicLong();", "originalCommit": "09758920eda129b1766e81c288d6d87cd5769a41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1OTY2Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468259666", "bodyText": "VLO is protected under a lock, so you don't need to use an atomic counter.", "author": "Maithem", "createdAt": "2020-08-11T00:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NDI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4NjI4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468286288", "bodyText": "Moved string concatenation to the class constructor. Replaced atomic counter by a size 1 array.", "author": "zhangn49", "createdAt": "2020-08-11T02:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NDI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5MTI5NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468891294", "bodyText": "Oh, I see the motivation. I believe using an array worse idea that using Atomic.\nIf you don't like to use atomics for this, just create a class\nstatic class Counter {\n    int counter;\n}\n\nFor the sake of the clean code, this should work for you\nOr you can add that to a common module or util package, up to you", "author": "xnull", "createdAt": "2020-08-11T22:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NDI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "f1be6e38bd1afe9a1a4c5be20e16df3a083754f1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java b/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\nindex 96c8e2957c1..646271e2f79 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\n\n@@ -674,14 +679,14 @@ public class VersionLockedObject<T extends ICorfuSMR<T>> {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        Timer timer = VloMetricsHelper.metrics.timer(VloMetricsHelper.VLO_SYNC_STREAM + stream.getID());\n-        Histogram histogram = VloMetricsHelper.metrics.histogram(VloMetricsHelper.VLO_SYNC_COUNT + stream.getID());\n-        AtomicLong counter = new AtomicLong();\n-        try (Timer.Context context = MetricsUtils.getConditionalContext(timer)) {\n+\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n+        final long[] counter = new long[1];\n+        try (Timer.Context context = getVloStreamSyncContext(timestamp, syncStreamTimer)) {\n             stream.streamUpTo(syncTo)\n                     .forEachOrdered(entry -> {\n                         try {\n-                            counter.getAndIncrement();\n+                            counter[0]++;\n                             Object res = applyUpdateUnsafe(entry, timestamp);\n                             if (timestamp == Address.OPTIMISTIC) {\n                                 entry.setUpcallResult(res);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1OTQ3Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468259476", "bodyText": "This might produce a bimodal distribution. Since the optimistic sync is much faster (or should be) than the materialized stream sync.\nIs it necessary to split them?", "author": "Maithem", "createdAt": "2020-08-11T00:33:14Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -672,25 +674,32 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        stream.streamUpTo(syncTo)\n-                .forEachOrdered(entry -> {\n-                    try {\n-                        Object res = applyUpdateUnsafe(entry, timestamp);\n-                        if (timestamp == Address.OPTIMISTIC) {\n+        Timer timer = VloMetricsHelper.metrics.timer(VloMetricsHelper.VLO_SYNC_STREAM + stream.getID());\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(VloMetricsHelper.VLO_SYNC_COUNT + stream.getID());\n+        AtomicLong counter = new AtomicLong();\n+        try (Timer.Context context = MetricsUtils.getConditionalContext(timer)) {\n+            stream.streamUpTo(syncTo)\n+                    .forEachOrdered(entry -> {\n+                        try {\n+                            counter.getAndIncrement();\n+                            Object res = applyUpdateUnsafe(entry, timestamp);\n+                            if (timestamp == Address.OPTIMISTIC) {\n+                                entry.setUpcallResult(res);\n+                            } else if (pendingUpcalls.contains(entry.getGlobalAddress())) {\n+                                log.debug(\"Sync[{}] Upcall Result {}\",\n+                                        this, entry.getGlobalAddress());\n+                                upcallResults.put(entry.getGlobalAddress(), res == null\n+                                        ? NullValue.NULL_VALUE : res);\n+                                pendingUpcalls.remove(entry.getGlobalAddress());\n+                            }\n                             entry.setUpcallResult(res);\n-                        } else if (pendingUpcalls.contains(entry.getGlobalAddress())) {\n-                            log.debug(\"Sync[{}] Upcall Result {}\",\n-                                    this, entry.getGlobalAddress());\n-                            upcallResults.put(entry.getGlobalAddress(), res == null\n-                                    ? NullValue.NULL_VALUE : res);\n-                            pendingUpcalls.remove(entry.getGlobalAddress());\n+                        } catch (Exception e) {\n+                            log.error(\"Sync[{}] Error: Couldn't execute upcall due to {}\", this, e);\n+                            throw new UnrecoverableCorfuError(e);\n                         }\n-                        entry.setUpcallResult(res);\n-                    } catch (Exception e) {\n-                        log.error(\"Sync[{}] Error: Couldn't execute upcall due to {}\", this, e);\n-                        throw new UnrecoverableCorfuError(e);\n-                    }\n-                });\n+                    });\n+        }\n+        histogram.update(counter.longValue());", "originalCommit": "09758920eda129b1766e81c288d6d87cd5769a41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4NjU1NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468286554", "bodyText": "Only measure the regular stream now.", "author": "zhangn49", "createdAt": "2020-08-11T02:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1OTQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f1be6e38bd1afe9a1a4c5be20e16df3a083754f1", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java b/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\nindex 96c8e2957c1..646271e2f79 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\n\n@@ -674,14 +679,14 @@ public class VersionLockedObject<T extends ICorfuSMR<T>> {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        Timer timer = VloMetricsHelper.metrics.timer(VloMetricsHelper.VLO_SYNC_STREAM + stream.getID());\n-        Histogram histogram = VloMetricsHelper.metrics.histogram(VloMetricsHelper.VLO_SYNC_COUNT + stream.getID());\n-        AtomicLong counter = new AtomicLong();\n-        try (Timer.Context context = MetricsUtils.getConditionalContext(timer)) {\n+\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n+        final long[] counter = new long[1];\n+        try (Timer.Context context = getVloStreamSyncContext(timestamp, syncStreamTimer)) {\n             stream.streamUpTo(syncTo)\n                     .forEachOrdered(entry -> {\n                         try {\n-                            counter.getAndIncrement();\n+                            counter[0]++;\n                             Object res = applyUpdateUnsafe(entry, timestamp);\n                             if (timestamp == Address.OPTIMISTIC) {\n                                 entry.setUpcallResult(res);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MDI4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468260288", "bodyText": "Shouldn't this include the VLO sync latency? Why is it necessary to have another latency histogram inside the VLO ?", "author": "Maithem", "createdAt": "2020-08-11T00:36:08Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -164,7 +166,9 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n     public <R> R access(ICorfuSMRAccess<R, T> accessMethod,\n                         Object[] conflictObject) {\n         try (Timer.Context context = MetricsUtils.getConditionalContext(timerAccess)) {\n-            return accessInner(accessMethod, conflictObject);\n+            try (Timer.Context streamContext = MetricsUtils.getConditionalContext(timerAccessPerStream)) {\n+                return accessInner(accessMethod, conflictObject);\n+            }", "originalCommit": "09758920eda129b1766e81c288d6d87cd5769a41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f1be6e38bd1afe9a1a4c5be20e16df3a083754f1", "url": "https://github.com/CorfuDB/CorfuDB/commit/f1be6e38bd1afe9a1a4c5be20e16df3a083754f1", "message": "Address comments", "committedDate": "2020-08-11T02:12:16Z", "type": "forcePushed"}, {"oid": "97a90bb68493580bb8dcbdbd50ab6962e867ed5c", "url": "https://github.com/CorfuDB/CorfuDB/commit/97a90bb68493580bb8dcbdbd50ab6962e867ed5c", "message": "Address comments", "committedDate": "2020-08-11T02:21:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4MTQxOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468881418", "bodyText": "why we need an array here?\nIt seems that we need AtomicLong, or (I prefer) just use a plain old 'for' cycle with a long variable", "author": "xnull", "createdAt": "2020-08-11T21:42:27Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -672,25 +678,34 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        stream.streamUpTo(syncTo)\n-                .forEachOrdered(entry -> {\n-                    try {\n-                        Object res = applyUpdateUnsafe(entry, timestamp);\n-                        if (timestamp == Address.OPTIMISTIC) {\n+\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n+        final long[] counter = new long[1];", "originalCommit": "f444e14123b55f82127a301c27fdd45cfad8fbcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMzMxMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468903312", "bodyText": "If I use a plain for, I have to do stream.streamUpTo(syncTo).collect(Collectors.toList()).\nWill it bring extra copy?", "author": "zhangn49", "createdAt": "2020-08-11T22:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4MTQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwNzQ0OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468907449", "bodyText": "yep, looks like, so please take a look at my comment about the counter, would be nice if you agree", "author": "xnull", "createdAt": "2020-08-11T22:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4MTQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTEzMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468911131", "bodyText": "Yeah, I am using it right now.", "author": "zhangn49", "createdAt": "2020-08-11T23:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4MTQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java b/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\nindex bb294fb7b63..115fbba2631 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\n\n@@ -680,12 +680,12 @@ public class VersionLockedObject<T extends ICorfuSMR<T>> {\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n \n         Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n-        final long[] counter = new long[1];\n+        Counter counter = new Counter();\n         try (Timer.Context context = getVloStreamSyncContext(timestamp, syncStreamTimer)) {\n             stream.streamUpTo(syncTo)\n                     .forEachOrdered(entry -> {\n                         try {\n-                            counter[0]++;\n+                            counter.count++;\n                             Object res = applyUpdateUnsafe(entry, timestamp);\n                             if (timestamp == Address.OPTIMISTIC) {\n                                 entry.setUpcallResult(res);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4MzUzMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468883530", "bodyText": "BTW, can't we just use this:\nval stream = stream.streamUpTo(syncTo);\nval counter = stream.size();\n...\n\n?\nUPD: Oh I see, it is a stream, you can't do that", "author": "xnull", "createdAt": "2020-08-11T21:47:18Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -672,25 +678,34 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        stream.streamUpTo(syncTo)\n-                .forEachOrdered(entry -> {\n-                    try {\n-                        Object res = applyUpdateUnsafe(entry, timestamp);\n-                        if (timestamp == Address.OPTIMISTIC) {\n+\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n+        final long[] counter = new long[1];\n+        try (Timer.Context context = getVloStreamSyncContext(timestamp, syncStreamTimer)) {\n+            stream.streamUpTo(syncTo)", "originalCommit": "f444e14123b55f82127a301c27fdd45cfad8fbcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4ODQ4MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468888481", "bodyText": "yes, I can't do that.", "author": "zhangn49", "createdAt": "2020-08-11T21:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4MzUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "chunk": "diff --git a/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java b/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\nindex bb294fb7b63..115fbba2631 100644\n--- a/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\n+++ b/runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java\n\n@@ -680,12 +680,12 @@ public class VersionLockedObject<T extends ICorfuSMR<T>> {\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n \n         Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n-        final long[] counter = new long[1];\n+        Counter counter = new Counter();\n         try (Timer.Context context = getVloStreamSyncContext(timestamp, syncStreamTimer)) {\n             stream.streamUpTo(syncTo)\n                     .forEachOrdered(entry -> {\n                         try {\n-                            counter[0]++;\n+                            counter.count++;\n                             Object res = applyUpdateUnsafe(entry, timestamp);\n                             if (timestamp == Address.OPTIMISTIC) {\n                                 entry.setUpcallResult(res);\n"}}, {"oid": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "url": "https://github.com/CorfuDB/CorfuDB/commit/7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "message": "Measure Serialize/Deserialize/VLO_SYNC latency", "committedDate": "2020-08-11T22:50:14Z", "type": "commit"}, {"oid": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "url": "https://github.com/CorfuDB/CorfuDB/commit/7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "message": "Measure Serialize/Deserialize/VLO_SYNC latency", "committedDate": "2020-08-11T22:50:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MDgwNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r469550804", "bodyText": "do you need to catch the exception and log it?", "author": "pankti-m", "createdAt": "2020-08-12T21:14:18Z", "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/MultiObjectSMREntry.java", "diffHunk": "@@ -87,34 +95,53 @@ public void mergeInto(MultiObjectSMREntry other) {\n      */\n     @Override\n     public void deserializeBuffer(ByteBuf b, CorfuRuntime rt) {\n-        super.deserializeBuffer(b, rt);\n-        int numStreams = b.readInt();\n-        for (int i = 0; i < numStreams; i++) {\n-            UUID streamId = new UUID(b.readLong(), b.readLong());\n-\n-            // The MultiObjectSMREntry payload is structure as follows:\n-            // LogEntry Type | number of MultiSMREntry entries | MultiSMREntry id | serialized MultiSMREntry | ...\n-            // Therefore we need to unpack the MultiSMREntry entries one-by-one\n-            int start = b.readerIndex();\n-            MultiSMREntry.seekToEnd(b);\n-            int multiSMRLen = b.readerIndex() - start;\n-            b.readerIndex(start);\n-            byte[] streamUpdates = new byte[multiSMRLen];\n-            b.readBytes(streamUpdates);\n-            streamBuffers.put(streamId, streamUpdates);\n+        Timer deserializeTimer = metricRegistry.timer(METRIC_PREFIX + \"deserialize\");\n+        try (Timer.Context context = MetricsUtils.getConditionalContext(deserializeTimer)) {\n+            super.deserializeBuffer(b, rt);\n+            int numStreams = b.readInt();\n+            for (int i = 0; i < numStreams; i++) {\n+                UUID streamId = new UUID(b.readLong(), b.readLong());\n+\n+                Timer streamDeserializeTimer = metricRegistry.timer(\n+                        METRIC_PREFIX + \"deserialize-\" + streamId);\n+                // The MultiObjectSMREntry payload is structure as follows:\n+                // LogEntry Type | number of MultiSMREntry entries | MultiSMREntry id | serialized MultiSMREntry | ...\n+                // Therefore we need to unpack the MultiSMREntry entries one-by-one\n+                try (Timer.Context streamContext = MetricsUtils.getConditionalContext(streamDeserializeTimer)) {\n+                    int start = b.readerIndex();\n+                    MultiSMREntry.seekToEnd(b);\n+                    int multiSMRLen = b.readerIndex() - start;\n+                    b.readerIndex(start);\n+                    byte[] streamUpdates = new byte[multiSMRLen];\n+                    b.readBytes(streamUpdates);\n+                    streamBuffers.put(streamId, streamUpdates);\n+                }\n+            }", "originalCommit": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3MzUwMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r469573502", "bodyText": "No, this try block utilizes try-with-resources\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html\nSo we don't need to close this timer explicitly and it does not affect original exception workflow.", "author": "zhangn49", "createdAt": "2020-08-12T22:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MDgwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MjY4MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r469552681", "bodyText": "catch required?", "author": "pankti-m", "createdAt": "2020-08-12T21:18:19Z", "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/MultiObjectSMREntry.java", "diffHunk": "@@ -87,34 +95,53 @@ public void mergeInto(MultiObjectSMREntry other) {\n      */\n     @Override\n     public void deserializeBuffer(ByteBuf b, CorfuRuntime rt) {\n-        super.deserializeBuffer(b, rt);\n-        int numStreams = b.readInt();\n-        for (int i = 0; i < numStreams; i++) {\n-            UUID streamId = new UUID(b.readLong(), b.readLong());\n-\n-            // The MultiObjectSMREntry payload is structure as follows:\n-            // LogEntry Type | number of MultiSMREntry entries | MultiSMREntry id | serialized MultiSMREntry | ...\n-            // Therefore we need to unpack the MultiSMREntry entries one-by-one\n-            int start = b.readerIndex();\n-            MultiSMREntry.seekToEnd(b);\n-            int multiSMRLen = b.readerIndex() - start;\n-            b.readerIndex(start);\n-            byte[] streamUpdates = new byte[multiSMRLen];\n-            b.readBytes(streamUpdates);\n-            streamBuffers.put(streamId, streamUpdates);\n+        Timer deserializeTimer = metricRegistry.timer(METRIC_PREFIX + \"deserialize\");\n+        try (Timer.Context context = MetricsUtils.getConditionalContext(deserializeTimer)) {\n+            super.deserializeBuffer(b, rt);\n+            int numStreams = b.readInt();\n+            for (int i = 0; i < numStreams; i++) {\n+                UUID streamId = new UUID(b.readLong(), b.readLong());\n+\n+                Timer streamDeserializeTimer = metricRegistry.timer(\n+                        METRIC_PREFIX + \"deserialize-\" + streamId);\n+                // The MultiObjectSMREntry payload is structure as follows:\n+                // LogEntry Type | number of MultiSMREntry entries | MultiSMREntry id | serialized MultiSMREntry | ...\n+                // Therefore we need to unpack the MultiSMREntry entries one-by-one\n+                try (Timer.Context streamContext = MetricsUtils.getConditionalContext(streamDeserializeTimer)) {\n+                    int start = b.readerIndex();\n+                    MultiSMREntry.seekToEnd(b);\n+                    int multiSMRLen = b.readerIndex() - start;\n+                    b.readerIndex(start);\n+                    byte[] streamUpdates = new byte[multiSMRLen];\n+                    b.readBytes(streamUpdates);\n+                    streamBuffers.put(streamId, streamUpdates);\n+                }\n+            }\n         }\n     }\n \n     @Override\n     public void serialize(ByteBuf b) {\n-        super.serialize(b);\n-        b.writeInt(streamUpdates.size());\n-        streamUpdates.entrySet().stream()\n-                .forEach(x -> {\n-                    b.writeLong(x.getKey().getMostSignificantBits());\n-                    b.writeLong(x.getKey().getLeastSignificantBits());\n-                    Serializers.CORFU.serialize(x.getValue(), b);\n-                });\n+        Timer serializeTimer = metricRegistry.timer(METRIC_PREFIX + \"serialize\");\n+        Histogram sizeHistogram = metricRegistry.histogram(METRIC_PREFIX + \"serialize-size\");\n+        int startIdx = b.writerIndex();\n+        try (Timer.Context context = MetricsUtils.getConditionalContext(serializeTimer)) {\n+            super.serialize(b);\n+            b.writeInt(streamUpdates.size());\n+            streamUpdates.entrySet().stream()\n+                    .forEach(x -> {\n+                        Timer streamSerializeTimer = metricRegistry.timer(METRIC_PREFIX + \"serialize-\" + x.getKey());\n+                        Histogram streamSizeHistogram = metricRegistry.histogram(METRIC_PREFIX + \"serialize-size-\" + x.getKey());\n+                        int streamStart = b.writerIndex();\n+                        try (Timer.Context streamContext = MetricsUtils.getConditionalContext(streamSerializeTimer)) {\n+                            b.writeLong(x.getKey().getMostSignificantBits());\n+                            b.writeLong(x.getKey().getLeastSignificantBits());\n+                            Serializers.CORFU.serialize(x.getValue(), b);\n+                        }\n+                        streamSizeHistogram.update(b.writerIndex() - streamStart);\n+                    });\n+        }\n+        sizeHistogram.update(b.writerIndex() - startIdx);", "originalCommit": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "127de4f497aee9f61f01766b7f6a971b9b2ff311", "url": "https://github.com/CorfuDB/CorfuDB/commit/127de4f497aee9f61f01766b7f6a971b9b2ff311", "message": "Merge branch 'master' into gm_queue_metrics", "committedDate": "2020-08-13T18:24:51Z", "type": "commit"}, {"oid": "596557b48fc3fbdca1574233685c787e2dc2dde7", "url": "https://github.com/CorfuDB/CorfuDB/commit/596557b48fc3fbdca1574233685c787e2dc2dde7", "message": "Merge branch 'master' into gm_queue_metrics", "committedDate": "2020-08-13T19:29:47Z", "type": "commit"}, {"oid": "1171f04920508d520be3b69fb46adc10cc1295cb", "url": "https://github.com/CorfuDB/CorfuDB/commit/1171f04920508d520be3b69fb46adc10cc1295cb", "message": "Merge branch 'master' into gm_queue_metrics", "committedDate": "2020-08-14T07:29:07Z", "type": "commit"}, {"oid": "0729c317ebc1385e16a8f04ce2806a27393bef97", "url": "https://github.com/CorfuDB/CorfuDB/commit/0729c317ebc1385e16a8f04ce2806a27393bef97", "message": "Merge branch 'master' into gm_queue_metrics", "committedDate": "2020-08-14T21:40:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3OTM1OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r470879359", "bodyText": "Codacy found an issue: Use explicit scoping instead of the default package private level", "author": "corfudb-bot", "createdAt": "2020-08-14T21:48:00Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -724,6 +739,15 @@ public ISMRStream getSmrStream() {\n         return smrStream;\n     }\n \n+    private static Timer.Context getVloStreamSyncContext(long timestamp, String syncStreamTimer) {\n+        Timer timer = VloMetricsHelper.metrics.timer(syncStreamTimer);\n+        return timestamp == Address.OPTIMISTIC ? null : MetricsUtils.getConditionalContext(timer);\n+    }\n+\n+    private static class Counter {\n+        long count;", "originalCommit": "0729c317ebc1385e16a8f04ce2806a27393bef97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}