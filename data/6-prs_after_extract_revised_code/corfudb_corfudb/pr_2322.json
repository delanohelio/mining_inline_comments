{"pr_number": 2322, "pr_title": "CorfuStore: Record if table is opened as disk based", "pr_createdAt": "2020-01-23T02:27:00Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2322", "timeline": [{"oid": "cf0b4c0dfd01c6998d0c8d2ed4601101ce761587", "url": "https://github.com/CorfuDB/CorfuDB/commit/cf0b4c0dfd01c6998d0c8d2ed4601101ce761587", "message": "CorfuStore: Record if table is opened as disk based\n\nThis is needed for the checkpointer to make sure that\na disk based table is opened as a disk based table and\nnot an in-memory table.", "committedDate": "2020-01-24T01:51:33Z", "type": "forcePushed"}, {"oid": "3aef40b07d4c3524fea95f5a72fde0cbc8311a32", "url": "https://github.com/CorfuDB/CorfuDB/commit/3aef40b07d4c3524fea95f5a72fde0cbc8311a32", "message": "CorfuStore: Record if table is opened as disk based\n\nThis is needed for the checkpointer to make sure that\na disk based table is opened as a disk based table and\nnot an in-memory table.", "committedDate": "2020-01-27T23:45:20Z", "type": "forcePushed"}, {"oid": "f5ebad053575ab72fe9fd8eff76cb52bd96ba2c4", "url": "https://github.com/CorfuDB/CorfuDB/commit/f5ebad053575ab72fe9fd8eff76cb52bd96ba2c4", "message": "CorfuStore: Add test to checkpoint & Trim disk based CorfuStore table", "committedDate": "2020-02-04T01:17:26Z", "type": "forcePushed"}, {"oid": "c65ee77870dad55d02b35fedbda59c4c173304ab", "url": "https://github.com/CorfuDB/CorfuDB/commit/c65ee77870dad55d02b35fedbda59c4c173304ab", "message": "CorfuBrowser: Add support for disk tables", "committedDate": "2020-02-05T02:47:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4NjE5NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2322#discussion_r376586195", "bodyText": "I know you are just using the provided API, but we really need to clean this interface. Creating a disk back CorfuTable should be as easy as creating an in-memory table.", "author": "Maithem", "createdAt": "2020-02-07T20:13:47Z", "path": "test/src/test/java/org/corfudb/integration/CorfuStoreIT.java", "diffHunk": "@@ -232,4 +244,122 @@ public void readDataWithDynamicMessages() throws Exception {\n \n         assertThat(shutdownCorfuServer(corfuServer)).isTrue();\n     }\n+\n+    public Token checkpointAndTrimCorfuStore(CorfuRuntime runtimeC, boolean skipTrim, String tempDiskPath) {\n+\n+        TableRegistry tableRegistry = runtimeC.getTableRegistry();\n+        CorfuTable<CorfuStoreMetadata.TableName,\n+                CorfuRecord<CorfuStoreMetadata.TableDescriptors,\n+                        CorfuStoreMetadata.TableMetadata>>\n+                        tableRegistryCT = tableRegistry.getRegistryTable();\n+\n+        // Save the regular serializer first..\n+        ISerializer protobufSerializer = Serializers.getSerializer(ProtobufSerializer.PROTOBUF_SERIALIZER_CODE);\n+\n+        // Must register dynamicProtobufSerializer *AFTER* the getTableRegistry() call to ensure that\n+        // the serializer does not go back to the regular ProtobufSerializer\n+        ISerializer dynamicProtobufSerializer = new DynamicProtobufSerializer(runtimeC);\n+        Serializers.registerSerializer(dynamicProtobufSerializer);\n+\n+        // First checkpoint the TableRegistry system table\n+        MultiCheckpointWriter<CorfuTable> mcw = new MultiCheckpointWriter<>();\n+\n+        Token trimToken = new Token(Token.UNINITIALIZED.getEpoch(), Token.UNINITIALIZED.getSequence());\n+        for (CorfuStoreMetadata.TableName tableName : tableRegistry.listTables(null)) {\n+            String fullTableName = TableRegistry.getFullyQualifiedTableName(\n+                    tableName.getNamespace(), tableName.getTableName()\n+                    );\n+            SMRObject.Builder<CorfuTable<CorfuDynamicKey, CorfuDynamicRecord>> corfuTableBuilder = runtimeC.getObjectsView().build()\n+                    .setTypeToken(new TypeToken<CorfuTable<CorfuDynamicKey, CorfuDynamicRecord>>() {})\n+                    .setStreamName(fullTableName)\n+                    .setSerializer(dynamicProtobufSerializer);\n+\n+            // Find out if a table needs to be backed up by disk path to even checkpoint\n+            boolean diskBased = tableRegistryCT.get(tableName).getMetadata().getDiskBased();\n+            if (diskBased) {\n+                final Path persistedCacheLocation = Paths.get(tempDiskPath + tableName.getTableName());\n+                final Options options = new Options().setCreateIfMissing(true);\n+                final Supplier<StreamingMap<CorfuDynamicKey, CorfuDynamicRecord>> mapSupplier = () -> new PersistedStreamingMap<>(\n+                        persistedCacheLocation, options,\n+                        dynamicProtobufSerializer, runtimeC);\n+                corfuTableBuilder.setArguments(mapSupplier, ICorfuVersionPolicy.MONOTONIC);\n+            }\n+", "originalCommit": "c65ee77870dad55d02b35fedbda59c4c173304ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNjcxNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2322#discussion_r379606717", "bodyText": "I completely agree. The api is super messy right now.", "author": "hisundar", "createdAt": "2020-02-14T19:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4NjE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf5da3b9d6b1c3eecbfae55b3bf23fff6fcc1ff9", "chunk": "diff --git a/test/src/test/java/org/corfudb/integration/CorfuStoreIT.java b/test/src/test/java/org/corfudb/integration/CorfuStoreIT.java\nindex 66130a16828..e3fdd564d14 100644\n--- a/test/src/test/java/org/corfudb/integration/CorfuStoreIT.java\n+++ b/test/src/test/java/org/corfudb/integration/CorfuStoreIT.java\n\n@@ -342,6 +346,10 @@ public class CorfuStoreIT extends AbstractIT {\n                     .update(tableName, uuidKey, uuidVal, metadata)\n                     .commit();\n         }\n+        final int TEN = 10;\n+        Set<Uuid> keys = store.query(namespace).keySet(tableName, null);\n+        Iterables.partition(keys, TEN);\n+\n         runtime.shutdown();\n \n         // PHASE 2 - compact it with another runtime like the compactor would!\n"}}, {"oid": "cf5da3b9d6b1c3eecbfae55b3bf23fff6fcc1ff9", "url": "https://github.com/CorfuDB/CorfuDB/commit/cf5da3b9d6b1c3eecbfae55b3bf23fff6fcc1ff9", "message": "CorfuStore: Record if table is opened as disk based\n\nThis is needed for checkpointer so it can do the same.\n\nCorfuBrowser: Add support for disk tables\nWithout it browser can't open large tables.\n\nCorfuStore: Add test to checkpoint & Trim disk based CorfuStore table\nWithout this bugs are only discovered when deployed in scale setups.", "committedDate": "2020-02-13T22:37:14Z", "type": "forcePushed"}, {"oid": "bd54f95249fc0ad4e3e5f4797be083515b3a6253", "url": "https://github.com/CorfuDB/CorfuDB/commit/bd54f95249fc0ad4e3e5f4797be083515b3a6253", "message": "CorfuBrowser: add support for diskPath to open large tables\n\nIf a table is too large to fit in memory then user can\npass a --diskPath and let that table be opened\nas an in-memory table.", "committedDate": "2020-02-14T04:01:29Z", "type": "forcePushed"}, {"oid": "ae123965e512acfc540bb1e7f35f3803b958553d", "url": "https://github.com/CorfuDB/CorfuDB/commit/ae123965e512acfc540bb1e7f35f3803b958553d", "message": "CorfuStore: Record if table is opened as disk based\n\nThis is needed for checkpointer so it can do the same.\n\nCorfuBrowser: Add support for disk tables\nWithout it browser can't open large tables.\nIf a table is too large to fit in memory then user can\npass a --diskPath and let that table be\nopened as an in-memory table.\n\nCorfuStore: Add test to checkpoint & Trim disk based\nCorfuStore table Without this bugs are only\ndiscovered when deployed in scale setups.", "committedDate": "2020-02-21T19:44:31Z", "type": "forcePushed"}, {"oid": "530d9c07e2c9ec8ad944789842357b81824441a7", "url": "https://github.com/CorfuDB/CorfuDB/commit/530d9c07e2c9ec8ad944789842357b81824441a7", "message": "CorfuStore: Record if table is opened as disk based\n\nThis is needed for checkpointer so it can do the same.\n\nCorfuBrowser: Add support for disk tables\nWithout it browser can't open large tables.\nIf a table is too large to fit in memory then user can\npass a --diskPath and let that table be\nopened as an in-memory table.\n\nCorfuStore: Add test to checkpoint & Trim disk based\nCorfuStore table Without this bugs are only\ndiscovered when deployed in scale setups.", "committedDate": "2020-02-21T21:13:44Z", "type": "commit"}, {"oid": "530d9c07e2c9ec8ad944789842357b81824441a7", "url": "https://github.com/CorfuDB/CorfuDB/commit/530d9c07e2c9ec8ad944789842357b81824441a7", "message": "CorfuStore: Record if table is opened as disk based\n\nThis is needed for checkpointer so it can do the same.\n\nCorfuBrowser: Add support for disk tables\nWithout it browser can't open large tables.\nIf a table is too large to fit in memory then user can\npass a --diskPath and let that table be\nopened as an in-memory table.\n\nCorfuStore: Add test to checkpoint & Trim disk based\nCorfuStore table Without this bugs are only\ndiscovered when deployed in scale setups.", "committedDate": "2020-02-21T21:13:44Z", "type": "forcePushed"}]}