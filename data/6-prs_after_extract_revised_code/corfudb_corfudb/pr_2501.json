{"pr_number": 2501, "pr_title": "CorfuQueue: Don't use epoch for ordering", "pr_createdAt": "2020-04-03T20:21:55Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2501", "timeline": [{"oid": "07d5cfadf63c214289170db060a7c512eabfa894", "url": "https://github.com/CorfuDB/CorfuDB/commit/07d5cfadf63c214289170db060a7c512eabfa894", "message": "CorfuQueue: Don't use epoch for ordering\n\nOrdering is whatever corfu transaction layer considers as ordering.\nSince epoch doesn't feature there, remove epoch from Queue.\nThis way if we epoch+sequence order ever diverges from sequence only\norder, the causality will be consistent with stream's causality.\n\nCorfuRecordId -> byte[] and back for opaque serialization.", "committedDate": "2020-04-04T01:06:02Z", "type": "forcePushed"}, {"oid": "52c1207236b2b16bbb4989f8258dd38d7a0acd6e", "url": "https://github.com/CorfuDB/CorfuDB/commit/52c1207236b2b16bbb4989f8258dd38d7a0acd6e", "message": "CorfuQueue: Don't use epoch for ordering\n\nOrdering is whatever corfu transaction layer considers as ordering.\nSince epoch doesn't feature there, remove epoch from Queue.\nThis way if we epoch+sequence order ever diverges from sequence only\norder, the causality will be consistent with stream's causality.\n\nRemove UUID since that limits ability to pack larger structs in\nthe future.\nCorfuRecordId -> byte[] and back for opaque serialization.\nNote that comparator must still live within CorfuRecordId.", "committedDate": "2020-04-06T17:12:59Z", "type": "commit"}, {"oid": "52c1207236b2b16bbb4989f8258dd38d7a0acd6e", "url": "https://github.com/CorfuDB/CorfuDB/commit/52c1207236b2b16bbb4989f8258dd38d7a0acd6e", "message": "CorfuQueue: Don't use epoch for ordering\n\nOrdering is whatever corfu transaction layer considers as ordering.\nSince epoch doesn't feature there, remove epoch from Queue.\nThis way if we epoch+sequence order ever diverges from sequence only\norder, the causality will be consistent with stream's causality.\n\nRemove UUID since that limits ability to pack larger structs in\nthe future.\nCorfuRecordId -> byte[] and back for opaque serialization.\nNote that comparator must still live within CorfuRecordId.", "committedDate": "2020-04-06T17:12:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNzkyNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2501#discussion_r404437925", "bodyText": "Complete Javadoc", "author": "WenbinZhu", "createdAt": "2020-04-06T22:58:46Z", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -77,60 +77,58 @@ public int size() {\n     /**\n      * Each entry in the Queue is tagged with a unique Id. Internally this Id is a long.\n      * However, once we get all the entries out via entryList() api, these Ids are prefixed\n-     * with their snapshot+index id (also a long) which represents a global comparable ordering.\n+     * with their transactional sequence numbers which represents order if enqueue()\n+     * were in wrapped a corfu transaction.\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n     @EqualsAndHashCode\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n         @Setter\n         @Getter\n-        private long epoch;\n-\n-        @Setter\n-        @Getter\n-        private long sequence;\n+        private long txSequence;\n \n         @Getter\n         private long entryId;\n \n-        public CorfuRecordId(long epoch, long sequence, long entryId) {\n-            this.epoch = epoch;\n-            this.sequence = sequence;\n+        public CorfuRecordId(long txSequence, long entryId) {\n+            this.txSequence = txSequence;\n             this.entryId = entryId;\n         }\n \n-        final static int BITS_FOR_SEQUENCE = 40;\n-        public CorfuRecordId(UUID from) {\n-            this.epoch = from.getMostSignificantBits()>>BITS_FOR_SEQUENCE;\n-            this.sequence = from.getMostSignificantBits()&((1L<<BITS_FOR_SEQUENCE) - 1);\n-            this.entryId = from.getLeastSignificantBits();\n+        /**", "originalCommit": "52c1207236b2b16bbb4989f8258dd38d7a0acd6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1ODg5Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2501#discussion_r404558893", "bodyText": "done. thanks", "author": "hisundar", "createdAt": "2020-04-07T06:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNzkyNQ=="}], "type": "inlineReview", "revised_code": null}]}