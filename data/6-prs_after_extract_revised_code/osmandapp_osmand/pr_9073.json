{"pr_number": 9073, "pr_title": "Quick Action redesign", "pr_createdAt": "2020-05-25T10:13:33Z", "pr_url": "https://github.com/osmandapp/OsmAnd/pull/9073", "timeline": [{"oid": "49d23b63b344e9f5e1d3daa88d17101e63c9173f", "url": "https://github.com/osmandapp/OsmAnd/commit/49d23b63b344e9f5e1d3daa88d17101e63c9173f", "message": "Quick Action redesign", "committedDate": "2020-05-25T10:11:57Z", "type": "commit"}, {"oid": "f8e4bc86071cea71308eb8d96406d9d99155090d", "url": "https://github.com/osmandapp/OsmAnd/commit/f8e4bc86071cea71308eb8d96406d9d99155090d", "message": "Quick Action redesign p.2", "committedDate": "2020-05-28T07:12:03Z", "type": "commit"}, {"oid": "00cebdba080ba9ddb3cf72efe97d34fd92c235ef", "url": "https://github.com/osmandapp/OsmAnd/commit/00cebdba080ba9ddb3cf72efe97d34fd92c235ef", "message": "Quick Action redesign p.3 replace \"Add action\" AlertDialog with BottomSheet", "committedDate": "2020-05-28T07:13:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyMjUzMw==", "url": "https://github.com/osmandapp/OsmAnd/pull/9073#discussion_r432822533", "bodyText": "SCREEN_TYPE_REORDER", "author": "max-klaus", "createdAt": "2020-05-30T08:25:27Z", "path": "OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java", "diffHunk": "@@ -32,121 +39,350 @@\n import net.osmand.plus.UiUtilities;\n import net.osmand.plus.activities.MapActivity;\n import net.osmand.plus.base.BaseOsmAndFragment;\n+import net.osmand.plus.settings.backend.ApplicationMode;\n+import net.osmand.plus.views.MapQuickActionLayer;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback.OnItemMoveCallback;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback.UnmovableItem;\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n \n-import static net.osmand.AndroidUtils.dpToPx;\n+import static net.osmand.plus.UiUtilities.CompoundButtonType.TOOLBAR;\n \n /**\n  * Created by okorsun on 20.12.16.\n  */\n \n-public class QuickActionListFragment extends BaseOsmAndFragment implements QuickActionRegistry.QuickActionUpdatesListener {\n+public class QuickActionListFragment extends BaseOsmAndFragment\n+        implements QuickActionRegistry.QuickActionUpdatesListener,\n+        ConfirmationBottomSheet.OnConfirmButtonClickListener {\n \n     public static final String TAG = QuickActionListFragment.class.getSimpleName();\n \n     public static final String FROM_DASHBOARD_KEY = \"from_dashboard\";\n+    public static final String ACTIONS_TO_DELETE_KEY = \"actions_to_delete\";\n+    public static final String SCREEN_TYPE_KEY = \"screen_type\";\n \n-    private RecyclerView quickActionRV;\n+    private static final int REORDER_SCREEN_TYPE = 0;", "originalCommit": "00cebdba080ba9ddb3cf72efe97d34fd92c235ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6105257562aa25829a42e606fb679cc68c736cb7", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java b/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\nindex f755f359ce..f049a5d7c6 100644\n--- a/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\n\n@@ -66,8 +66,8 @@ public class QuickActionListFragment extends BaseOsmAndFragment\n     public static final String ACTIONS_TO_DELETE_KEY = \"actions_to_delete\";\n     public static final String SCREEN_TYPE_KEY = \"screen_type\";\n \n-    private static final int REORDER_SCREEN_TYPE = 0;\n-    private static final int DELETING_SCREEN_TYPE = 1;\n+    private static final int SCREEN_TYPE_REORDER = 0;\n+    private static final int SCREEN_TYPE_DELETE = 1;\n \n     private static final int ITEMS_IN_GROUP = 6;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyMjU2MA==", "url": "https://github.com/osmandapp/OsmAnd/pull/9073#discussion_r432822560", "bodyText": "SCREEN_TYPE_DELETE", "author": "max-klaus", "createdAt": "2020-05-30T08:25:48Z", "path": "OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java", "diffHunk": "@@ -32,121 +39,350 @@\n import net.osmand.plus.UiUtilities;\n import net.osmand.plus.activities.MapActivity;\n import net.osmand.plus.base.BaseOsmAndFragment;\n+import net.osmand.plus.settings.backend.ApplicationMode;\n+import net.osmand.plus.views.MapQuickActionLayer;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback.OnItemMoveCallback;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback.UnmovableItem;\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n \n-import static net.osmand.AndroidUtils.dpToPx;\n+import static net.osmand.plus.UiUtilities.CompoundButtonType.TOOLBAR;\n \n /**\n  * Created by okorsun on 20.12.16.\n  */\n \n-public class QuickActionListFragment extends BaseOsmAndFragment implements QuickActionRegistry.QuickActionUpdatesListener {\n+public class QuickActionListFragment extends BaseOsmAndFragment\n+        implements QuickActionRegistry.QuickActionUpdatesListener,\n+        ConfirmationBottomSheet.OnConfirmButtonClickListener {\n \n     public static final String TAG = QuickActionListFragment.class.getSimpleName();\n \n     public static final String FROM_DASHBOARD_KEY = \"from_dashboard\";\n+    public static final String ACTIONS_TO_DELETE_KEY = \"actions_to_delete\";\n+    public static final String SCREEN_TYPE_KEY = \"screen_type\";\n \n-    private RecyclerView quickActionRV;\n+    private static final int REORDER_SCREEN_TYPE = 0;\n+    private static final int DELETING_SCREEN_TYPE = 1;", "originalCommit": "00cebdba080ba9ddb3cf72efe97d34fd92c235ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6105257562aa25829a42e606fb679cc68c736cb7", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java b/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\nindex f755f359ce..f049a5d7c6 100644\n--- a/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\n\n@@ -66,8 +66,8 @@ public class QuickActionListFragment extends BaseOsmAndFragment\n     public static final String ACTIONS_TO_DELETE_KEY = \"actions_to_delete\";\n     public static final String SCREEN_TYPE_KEY = \"screen_type\";\n \n-    private static final int REORDER_SCREEN_TYPE = 0;\n-    private static final int DELETING_SCREEN_TYPE = 1;\n+    private static final int SCREEN_TYPE_REORDER = 0;\n+    private static final int SCREEN_TYPE_DELETE = 1;\n \n     private static final int ITEMS_IN_GROUP = 6;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyNDAzMQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/9073#discussion_r432824031", "bodyText": "Bad method. Should be changeScreenType(int screenType)", "author": "max-klaus", "createdAt": "2020-05-30T08:48:24Z", "path": "OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java", "diffHunk": "@@ -32,121 +39,350 @@\n import net.osmand.plus.UiUtilities;\n import net.osmand.plus.activities.MapActivity;\n import net.osmand.plus.base.BaseOsmAndFragment;\n+import net.osmand.plus.settings.backend.ApplicationMode;\n+import net.osmand.plus.views.MapQuickActionLayer;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback.OnItemMoveCallback;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback.UnmovableItem;\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n \n-import static net.osmand.AndroidUtils.dpToPx;\n+import static net.osmand.plus.UiUtilities.CompoundButtonType.TOOLBAR;\n \n /**\n  * Created by okorsun on 20.12.16.\n  */\n \n-public class QuickActionListFragment extends BaseOsmAndFragment implements QuickActionRegistry.QuickActionUpdatesListener {\n+public class QuickActionListFragment extends BaseOsmAndFragment\n+        implements QuickActionRegistry.QuickActionUpdatesListener,\n+        ConfirmationBottomSheet.OnConfirmButtonClickListener {\n \n     public static final String TAG = QuickActionListFragment.class.getSimpleName();\n \n     public static final String FROM_DASHBOARD_KEY = \"from_dashboard\";\n+    public static final String ACTIONS_TO_DELETE_KEY = \"actions_to_delete\";\n+    public static final String SCREEN_TYPE_KEY = \"screen_type\";\n \n-    private RecyclerView quickActionRV;\n+    private static final int REORDER_SCREEN_TYPE = 0;\n+    private static final int DELETING_SCREEN_TYPE = 1;\n+\n+    private static final int ITEMS_IN_GROUP = 6;\n+\n+    private RecyclerView rv;\n     private FloatingActionButton fab;\n+    private View bottomPanel;\n+    private Toolbar toolbar;\n+    private View toolbarSwitchContainer;\n+    private ImageView navigationIcon;\n+    private View deleteIconContainer;\n \n     private QuickActionAdapter adapter;\n     private ItemTouchHelper touchHelper;\n     private QuickActionRegistry quickActionRegistry;\n+    private ArrayList<Long> actionsToDelete = new ArrayList<>();\n+    private int screenType = REORDER_SCREEN_TYPE;\n \n     private boolean fromDashboard;\n-    private boolean isLightContent;\n+    private boolean nightMode;\n \n     @Override\n     public void onCreate(@Nullable Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         if (savedInstanceState != null) {\n             fromDashboard = savedInstanceState.getBoolean(FROM_DASHBOARD_KEY, false);\n+            long[] array = savedInstanceState.getLongArray(ACTIONS_TO_DELETE_KEY);\n+            if (array != null) {\n+                for (long id : array) {\n+                    actionsToDelete.add(id);\n+                }\n+            }\n+            screenType = savedInstanceState.getInt(SCREEN_TYPE_KEY, REORDER_SCREEN_TYPE);\n         }\n     }\n \n     @Nullable\n     @Override\n-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        isLightContent = getMyApplication().getSettings().isLightContent();\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,\n+                             @Nullable Bundle savedInstanceState) {\n+        OsmandApplication app = requireMyApplication();\n+        nightMode = !app.getSettings().isLightContent();\n \n-        View view = UiUtilities.getInflater(getContext(), !isLightContent).inflate(R.layout.quick_action_list, container, false);\n+        View view = UiUtilities.getInflater(getContext(), nightMode)\n+                .inflate(R.layout.quick_action_list, container, false);\n \n-        quickActionRV = (RecyclerView) view.findViewById(R.id.recycler_view);\n+        rv = (RecyclerView) view.findViewById(R.id.recycler_view);\n         fab = (FloatingActionButton) view.findViewById(R.id.fabButton);\n \n         fab.setOnClickListener(new View.OnClickListener() {\n             @Override\n             public void onClick(View v) {\n-                AddQuickActionDialog dialog = new AddQuickActionDialog();\n-                dialog.show(getFragmentManager(), AddQuickActionDialog.TAG);\n+                showAddQuickActionDialog();\n             }\n         });\n \n         if (Build.VERSION.SDK_INT >= 21) {\n             AndroidUtils.addStatusBarPadding21v(getContext(), view);\n         }\n \n-        return view;\n-    }\n+        bottomPanel = view.findViewById(R.id.bottom_panel);\n+        View btnSelectAll = bottomPanel.findViewById(R.id.select_all);\n+        View btnDelete = bottomPanel.findViewById(R.id.delete);\n \n-    @Override\n-    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n+        btnSelectAll.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View view) {\n+                actionsToDelete.clear();\n+                for (QuickAction action : adapter.getQuickActions()) {\n+                    actionsToDelete.add(action.id);\n+                }\n+                updateListItems();\n+                updateToolbarTitle();\n+            }\n+        });\n+\n+        btnDelete.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View view) {\n+                showConfirmDeleteActionsBottomSheet(getMapActivity());\n+            }\n+        });\n+        UiUtilities.setupDialogButton(nightMode, btnDelete,\n+                UiUtilities.DialogButtonType.SECONDARY, R.string.shared_string_delete);\n \n-        quickActionRegistry = getMyApplication().getQuickActionRegistry();\n+        quickActionRegistry = requireMyApplication().getQuickActionRegistry();\n \n-        setUpToolbar(view);\n-        setUpQuickActionRV();\n-    }\n+        toolbar = (Toolbar) view.findViewById(R.id.toolbar);\n+        navigationIcon = toolbar.findViewById(R.id.close_button);\n+        deleteIconContainer = toolbar.findViewById(R.id.action_button);\n+        toolbarSwitchContainer = toolbar.findViewById(R.id.toolbar_switch_container);\n+        setUpToolbar();\n \n-    private void setUpQuickActionRV() {\n         adapter = new QuickActionAdapter(new OnStartDragListener() {\n             @Override\n             public void onStartDrag(RecyclerView.ViewHolder viewHolder) {\n                 touchHelper.startDrag(viewHolder);\n             }\n         });\n-        quickActionRV.setAdapter(adapter);\n-        quickActionRV.setLayoutManager(new LinearLayoutManager(getContext()));\n+        rv.setAdapter(adapter);\n+        rv.setLayoutManager(new LinearLayoutManager(getContext()));\n \n         ItemTouchHelper.Callback touchHelperCallback = new ReorderItemTouchHelperCallback(adapter);\n         touchHelper = new ItemTouchHelper(touchHelperCallback);\n-        touchHelper.attachToRecyclerView(quickActionRV);\n-        adapter.addItems(quickActionRegistry.getFilteredQuickActions());\n+        touchHelper.attachToRecyclerView(rv);\n \n-        quickActionRV.addOnScrollListener(new RecyclerView.OnScrollListener() {\n+        rv.addOnScrollListener(new RecyclerView.OnScrollListener() {\n             @Override\n             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n-                if (dy > 0 && fab.getVisibility() == View.VISIBLE)\n-                    fab.hide();\n-                else if (dy < 0 && fab.getVisibility() != View.VISIBLE)\n-                    fab.show();\n+                if (screenType == REORDER_SCREEN_TYPE) {\n+                    if (dy > 0 && fab.getVisibility() == View.VISIBLE)\n+                        fab.hide();\n+                    else if (dy < 0 && fab.getVisibility() != View.VISIBLE)\n+                        fab.show();\n+                }\n             }\n         });\n+        updateListItems();\n+        updateVisibility();\n+        return view;\n     }\n \n-    private void setUpToolbar(View view) {\n-        Toolbar toolbar = (Toolbar) view.findViewById(R.id.custom_toolbar);\n+    private void setUpToolbar() {\n+        final OsmandApplication app = requireMyApplication();\n+        TextView tvTitle = toolbar.findViewById(R.id.toolbar_title);\n+        tvTitle.setTextColor(ContextCompat.getColor(app,\n+                nightMode ? R.color.text_color_primary_dark : R.color.color_white));\n+        boolean isWidgetVisibleOnMap = app.getQuickActionRegistry().isQuickActionOn();\n+        updateToolbarTitle();\n+        updateToolbarNavigationIcon();\n+        updateToolbarActionButton();\n+        updateToolbarSwitch(isWidgetVisibleOnMap);\n+    }\n+\n+    private void updateToolbarNavigationIcon() {\n         OsmandApplication app = requireMyApplication();\n-        Drawable icBack = app.getUIUtilities().getIcon(AndroidUtils.getNavigationIconResId(app),\n-                isLightContent ? R.color.active_buttons_and_links_text_light : R.color.active_buttons_and_links_text_dark);\n-        toolbar.setNavigationIcon(icBack);\n-        toolbar.setNavigationContentDescription(R.string.access_shared_string_navigate_up);\n-        toolbar.setNavigationOnClickListener(new View.OnClickListener() {\n+\n+        int activeButtonsColorResId = nightMode ?\n+                R.color.active_buttons_and_links_text_dark :\n+                R.color.active_buttons_and_links_text_light;\n+\n+        if (screenType == REORDER_SCREEN_TYPE) {\n+            Drawable icBack = app.getUIUtilities().getIcon(\n+                    AndroidUtils.getNavigationIconResId(app),\n+                    activeButtonsColorResId);\n+            navigationIcon.setImageDrawable(icBack);\n+            navigationIcon.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View view) {\n+                    FragmentActivity activity = getActivity();\n+                    if (activity != null) {\n+                        activity.onBackPressed();\n+                    }\n+                }\n+            });\n+        } else {\n+            Drawable icClose = getIcon(R.drawable.ic_action_close, activeButtonsColorResId);\n+            navigationIcon.setImageDrawable(icClose);\n+            navigationIcon.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View view) {\n+                    changeScreen();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void updateListItems() {\n+        final MapActivity ma = getMapActivity();\n+        final OsmandApplication app = ma.getMyApplication();\n+        final List<QuickAction> actions = quickActionRegistry.getFilteredQuickActions();\n+\n+        updateToolbarActionButton();\n+        List<ListItem> items = new ArrayList<>();\n+        if (actions.size() > 0) {\n+            items.add(new ListItem(ItemType.LIST_DIVIDER));\n+            int screen = 0;\n+            for (int i = 0; i < actions.size(); i++) {\n+                if (i % ITEMS_IN_GROUP == 0) {\n+                    items.add(new ListItem(ItemType.HEADER, ++screen));\n+                }\n+                items.add(new ListItem(ItemType.ACTION, actions.get(i)));\n+            }\n+        }\n+        if (screenType == REORDER_SCREEN_TYPE) {\n+            items.add(new ListItem(ItemType.LIST_DIVIDER));\n+            String promo = app.getString(R.string.export_import_quick_actions_with_profiles_promo);\n+            items.add(new ListItem(ItemType.DESCRIPTION, promo));\n+            items.add(new ListItem(ItemType.BUTTON,\n+                    new ControlButton(getString(R.string.quick_action_new_action),\n+                            R.drawable.ic_action_plus,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View view) {\n+                                    showAddQuickActionDialog();\n+                                }\n+                            })));\n+            items.add(new ListItem(ItemType.BUTTON,\n+                    new ControlButton(getString(R.string.shared_string_delete_all),\n+                            R.drawable.ic_action_delete_dark,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View view) {\n+                                    actionsToDelete.clear();\n+                                    for (ListItem item : adapter.items) {\n+                                        if (item.type == ItemType.ACTION) {\n+                                            QuickAction action = (QuickAction) item.value;\n+                                            actionsToDelete.add(action.id);\n+                                        }\n+                                    }\n+                                    showConfirmDeleteActionsBottomSheet(ma);\n+                                }\n+                            })));\n+        }\n+        items.add(new ListItem(ItemType.BOTTOM_SHADOW));\n+        adapter.setItems(items);\n+    }\n+\n+    private void updateVisibility() {\n+        if (screenType == REORDER_SCREEN_TYPE) {\n+            fab.setVisibility(View.VISIBLE);\n+            bottomPanel.setVisibility(View.GONE);\n+            toolbarSwitchContainer.setVisibility(View.VISIBLE);\n+            deleteIconContainer.setVisibility(View.VISIBLE);\n+        } else {\n+            fab.setVisibility(View.GONE);\n+            bottomPanel.setVisibility(View.VISIBLE);\n+            toolbarSwitchContainer.setVisibility(View.GONE);\n+            deleteIconContainer.setVisibility(View.GONE);\n+        }\n+    }\n+\n+    private void changeScreen() {", "originalCommit": "00cebdba080ba9ddb3cf72efe97d34fd92c235ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6105257562aa25829a42e606fb679cc68c736cb7", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java b/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\nindex f755f359ce..f049a5d7c6 100644\n--- a/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\n\n@@ -66,8 +66,8 @@ public class QuickActionListFragment extends BaseOsmAndFragment\n     public static final String ACTIONS_TO_DELETE_KEY = \"actions_to_delete\";\n     public static final String SCREEN_TYPE_KEY = \"screen_type\";\n \n-    private static final int REORDER_SCREEN_TYPE = 0;\n-    private static final int DELETING_SCREEN_TYPE = 1;\n+    private static final int SCREEN_TYPE_REORDER = 0;\n+    private static final int SCREEN_TYPE_DELETE = 1;\n \n     private static final int ITEMS_IN_GROUP = 6;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyNDM2Mg==", "url": "https://github.com/osmandapp/OsmAnd/pull/9073#discussion_r432824362", "bodyText": "all such else blocks should contain screenType == SCREEN_TYPE_", "author": "max-klaus", "createdAt": "2020-05-30T08:54:19Z", "path": "OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java", "diffHunk": "@@ -32,121 +39,350 @@\n import net.osmand.plus.UiUtilities;\n import net.osmand.plus.activities.MapActivity;\n import net.osmand.plus.base.BaseOsmAndFragment;\n+import net.osmand.plus.settings.backend.ApplicationMode;\n+import net.osmand.plus.views.MapQuickActionLayer;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback.OnItemMoveCallback;\n import net.osmand.plus.views.controls.ReorderItemTouchHelperCallback.UnmovableItem;\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n \n-import static net.osmand.AndroidUtils.dpToPx;\n+import static net.osmand.plus.UiUtilities.CompoundButtonType.TOOLBAR;\n \n /**\n  * Created by okorsun on 20.12.16.\n  */\n \n-public class QuickActionListFragment extends BaseOsmAndFragment implements QuickActionRegistry.QuickActionUpdatesListener {\n+public class QuickActionListFragment extends BaseOsmAndFragment\n+        implements QuickActionRegistry.QuickActionUpdatesListener,\n+        ConfirmationBottomSheet.OnConfirmButtonClickListener {\n \n     public static final String TAG = QuickActionListFragment.class.getSimpleName();\n \n     public static final String FROM_DASHBOARD_KEY = \"from_dashboard\";\n+    public static final String ACTIONS_TO_DELETE_KEY = \"actions_to_delete\";\n+    public static final String SCREEN_TYPE_KEY = \"screen_type\";\n \n-    private RecyclerView quickActionRV;\n+    private static final int REORDER_SCREEN_TYPE = 0;\n+    private static final int DELETING_SCREEN_TYPE = 1;\n+\n+    private static final int ITEMS_IN_GROUP = 6;\n+\n+    private RecyclerView rv;\n     private FloatingActionButton fab;\n+    private View bottomPanel;\n+    private Toolbar toolbar;\n+    private View toolbarSwitchContainer;\n+    private ImageView navigationIcon;\n+    private View deleteIconContainer;\n \n     private QuickActionAdapter adapter;\n     private ItemTouchHelper touchHelper;\n     private QuickActionRegistry quickActionRegistry;\n+    private ArrayList<Long> actionsToDelete = new ArrayList<>();\n+    private int screenType = REORDER_SCREEN_TYPE;\n \n     private boolean fromDashboard;\n-    private boolean isLightContent;\n+    private boolean nightMode;\n \n     @Override\n     public void onCreate(@Nullable Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         if (savedInstanceState != null) {\n             fromDashboard = savedInstanceState.getBoolean(FROM_DASHBOARD_KEY, false);\n+            long[] array = savedInstanceState.getLongArray(ACTIONS_TO_DELETE_KEY);\n+            if (array != null) {\n+                for (long id : array) {\n+                    actionsToDelete.add(id);\n+                }\n+            }\n+            screenType = savedInstanceState.getInt(SCREEN_TYPE_KEY, REORDER_SCREEN_TYPE);\n         }\n     }\n \n     @Nullable\n     @Override\n-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        isLightContent = getMyApplication().getSettings().isLightContent();\n+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,\n+                             @Nullable Bundle savedInstanceState) {\n+        OsmandApplication app = requireMyApplication();\n+        nightMode = !app.getSettings().isLightContent();\n \n-        View view = UiUtilities.getInflater(getContext(), !isLightContent).inflate(R.layout.quick_action_list, container, false);\n+        View view = UiUtilities.getInflater(getContext(), nightMode)\n+                .inflate(R.layout.quick_action_list, container, false);\n \n-        quickActionRV = (RecyclerView) view.findViewById(R.id.recycler_view);\n+        rv = (RecyclerView) view.findViewById(R.id.recycler_view);\n         fab = (FloatingActionButton) view.findViewById(R.id.fabButton);\n \n         fab.setOnClickListener(new View.OnClickListener() {\n             @Override\n             public void onClick(View v) {\n-                AddQuickActionDialog dialog = new AddQuickActionDialog();\n-                dialog.show(getFragmentManager(), AddQuickActionDialog.TAG);\n+                showAddQuickActionDialog();\n             }\n         });\n \n         if (Build.VERSION.SDK_INT >= 21) {\n             AndroidUtils.addStatusBarPadding21v(getContext(), view);\n         }\n \n-        return view;\n-    }\n+        bottomPanel = view.findViewById(R.id.bottom_panel);\n+        View btnSelectAll = bottomPanel.findViewById(R.id.select_all);\n+        View btnDelete = bottomPanel.findViewById(R.id.delete);\n \n-    @Override\n-    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n+        btnSelectAll.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View view) {\n+                actionsToDelete.clear();\n+                for (QuickAction action : adapter.getQuickActions()) {\n+                    actionsToDelete.add(action.id);\n+                }\n+                updateListItems();\n+                updateToolbarTitle();\n+            }\n+        });\n+\n+        btnDelete.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View view) {\n+                showConfirmDeleteActionsBottomSheet(getMapActivity());\n+            }\n+        });\n+        UiUtilities.setupDialogButton(nightMode, btnDelete,\n+                UiUtilities.DialogButtonType.SECONDARY, R.string.shared_string_delete);\n \n-        quickActionRegistry = getMyApplication().getQuickActionRegistry();\n+        quickActionRegistry = requireMyApplication().getQuickActionRegistry();\n \n-        setUpToolbar(view);\n-        setUpQuickActionRV();\n-    }\n+        toolbar = (Toolbar) view.findViewById(R.id.toolbar);\n+        navigationIcon = toolbar.findViewById(R.id.close_button);\n+        deleteIconContainer = toolbar.findViewById(R.id.action_button);\n+        toolbarSwitchContainer = toolbar.findViewById(R.id.toolbar_switch_container);\n+        setUpToolbar();\n \n-    private void setUpQuickActionRV() {\n         adapter = new QuickActionAdapter(new OnStartDragListener() {\n             @Override\n             public void onStartDrag(RecyclerView.ViewHolder viewHolder) {\n                 touchHelper.startDrag(viewHolder);\n             }\n         });\n-        quickActionRV.setAdapter(adapter);\n-        quickActionRV.setLayoutManager(new LinearLayoutManager(getContext()));\n+        rv.setAdapter(adapter);\n+        rv.setLayoutManager(new LinearLayoutManager(getContext()));\n \n         ItemTouchHelper.Callback touchHelperCallback = new ReorderItemTouchHelperCallback(adapter);\n         touchHelper = new ItemTouchHelper(touchHelperCallback);\n-        touchHelper.attachToRecyclerView(quickActionRV);\n-        adapter.addItems(quickActionRegistry.getFilteredQuickActions());\n+        touchHelper.attachToRecyclerView(rv);\n \n-        quickActionRV.addOnScrollListener(new RecyclerView.OnScrollListener() {\n+        rv.addOnScrollListener(new RecyclerView.OnScrollListener() {\n             @Override\n             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n-                if (dy > 0 && fab.getVisibility() == View.VISIBLE)\n-                    fab.hide();\n-                else if (dy < 0 && fab.getVisibility() != View.VISIBLE)\n-                    fab.show();\n+                if (screenType == REORDER_SCREEN_TYPE) {\n+                    if (dy > 0 && fab.getVisibility() == View.VISIBLE)\n+                        fab.hide();\n+                    else if (dy < 0 && fab.getVisibility() != View.VISIBLE)\n+                        fab.show();\n+                }\n             }\n         });\n+        updateListItems();\n+        updateVisibility();\n+        return view;\n     }\n \n-    private void setUpToolbar(View view) {\n-        Toolbar toolbar = (Toolbar) view.findViewById(R.id.custom_toolbar);\n+    private void setUpToolbar() {\n+        final OsmandApplication app = requireMyApplication();\n+        TextView tvTitle = toolbar.findViewById(R.id.toolbar_title);\n+        tvTitle.setTextColor(ContextCompat.getColor(app,\n+                nightMode ? R.color.text_color_primary_dark : R.color.color_white));\n+        boolean isWidgetVisibleOnMap = app.getQuickActionRegistry().isQuickActionOn();\n+        updateToolbarTitle();\n+        updateToolbarNavigationIcon();\n+        updateToolbarActionButton();\n+        updateToolbarSwitch(isWidgetVisibleOnMap);\n+    }\n+\n+    private void updateToolbarNavigationIcon() {\n         OsmandApplication app = requireMyApplication();\n-        Drawable icBack = app.getUIUtilities().getIcon(AndroidUtils.getNavigationIconResId(app),\n-                isLightContent ? R.color.active_buttons_and_links_text_light : R.color.active_buttons_and_links_text_dark);\n-        toolbar.setNavigationIcon(icBack);\n-        toolbar.setNavigationContentDescription(R.string.access_shared_string_navigate_up);\n-        toolbar.setNavigationOnClickListener(new View.OnClickListener() {\n+\n+        int activeButtonsColorResId = nightMode ?\n+                R.color.active_buttons_and_links_text_dark :\n+                R.color.active_buttons_and_links_text_light;\n+\n+        if (screenType == REORDER_SCREEN_TYPE) {\n+            Drawable icBack = app.getUIUtilities().getIcon(\n+                    AndroidUtils.getNavigationIconResId(app),\n+                    activeButtonsColorResId);\n+            navigationIcon.setImageDrawable(icBack);\n+            navigationIcon.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View view) {\n+                    FragmentActivity activity = getActivity();\n+                    if (activity != null) {\n+                        activity.onBackPressed();\n+                    }\n+                }\n+            });\n+        } else {\n+            Drawable icClose = getIcon(R.drawable.ic_action_close, activeButtonsColorResId);\n+            navigationIcon.setImageDrawable(icClose);\n+            navigationIcon.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View view) {\n+                    changeScreen();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void updateListItems() {\n+        final MapActivity ma = getMapActivity();\n+        final OsmandApplication app = ma.getMyApplication();\n+        final List<QuickAction> actions = quickActionRegistry.getFilteredQuickActions();\n+\n+        updateToolbarActionButton();\n+        List<ListItem> items = new ArrayList<>();\n+        if (actions.size() > 0) {\n+            items.add(new ListItem(ItemType.LIST_DIVIDER));\n+            int screen = 0;\n+            for (int i = 0; i < actions.size(); i++) {\n+                if (i % ITEMS_IN_GROUP == 0) {\n+                    items.add(new ListItem(ItemType.HEADER, ++screen));\n+                }\n+                items.add(new ListItem(ItemType.ACTION, actions.get(i)));\n+            }\n+        }\n+        if (screenType == REORDER_SCREEN_TYPE) {\n+            items.add(new ListItem(ItemType.LIST_DIVIDER));\n+            String promo = app.getString(R.string.export_import_quick_actions_with_profiles_promo);\n+            items.add(new ListItem(ItemType.DESCRIPTION, promo));\n+            items.add(new ListItem(ItemType.BUTTON,\n+                    new ControlButton(getString(R.string.quick_action_new_action),\n+                            R.drawable.ic_action_plus,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View view) {\n+                                    showAddQuickActionDialog();\n+                                }\n+                            })));\n+            items.add(new ListItem(ItemType.BUTTON,\n+                    new ControlButton(getString(R.string.shared_string_delete_all),\n+                            R.drawable.ic_action_delete_dark,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View view) {\n+                                    actionsToDelete.clear();\n+                                    for (ListItem item : adapter.items) {\n+                                        if (item.type == ItemType.ACTION) {\n+                                            QuickAction action = (QuickAction) item.value;\n+                                            actionsToDelete.add(action.id);\n+                                        }\n+                                    }\n+                                    showConfirmDeleteActionsBottomSheet(ma);\n+                                }\n+                            })));\n+        }\n+        items.add(new ListItem(ItemType.BOTTOM_SHADOW));\n+        adapter.setItems(items);\n+    }\n+\n+    private void updateVisibility() {\n+        if (screenType == REORDER_SCREEN_TYPE) {\n+            fab.setVisibility(View.VISIBLE);\n+            bottomPanel.setVisibility(View.GONE);\n+            toolbarSwitchContainer.setVisibility(View.VISIBLE);\n+            deleteIconContainer.setVisibility(View.VISIBLE);\n+        } else {\n+            fab.setVisibility(View.GONE);\n+            bottomPanel.setVisibility(View.VISIBLE);\n+            toolbarSwitchContainer.setVisibility(View.GONE);\n+            deleteIconContainer.setVisibility(View.GONE);\n+        }\n+    }\n+\n+    private void changeScreen() {\n+        actionsToDelete.clear();\n+        screenType = screenType == REORDER_SCREEN_TYPE ?\n+                DELETING_SCREEN_TYPE : REORDER_SCREEN_TYPE;\n+        updateToolbarTitle();\n+        updateToolbarNavigationIcon();\n+        updateListItems();\n+        updateVisibility();\n+    }\n+\n+    private void updateToolbarActionButton() {\n+        OsmandApplication app = requireMyApplication();\n+        View deleteIconContainer = toolbar.findViewById(R.id.action_button);\n+        ImageView deletingModeIcon = toolbar.findViewById(R.id.action_button_icon);\n+        int activeButtonsColorResId = nightMode ?\n+                R.color.active_buttons_and_links_text_dark :\n+                R.color.active_buttons_and_links_text_light;\n+        boolean hasActiveQuickActions = quickActionRegistry.getQuickActions().size() > 0;\n+        int activeColor = ContextCompat.getColor(app, activeButtonsColorResId);\n+        int deleteIconColor = hasActiveQuickActions ? activeColor :\n+                UiUtilities.getColorWithAlpha(activeColor, 0.25f);\n+        Drawable deleteIcon = getPaintedContentIcon(\n+                R.drawable.ic_action_delete_dark, deleteIconColor);\n+        deletingModeIcon.setImageDrawable(deleteIcon);\n+        deleteIconContainer.setOnClickListener(new View.OnClickListener() {\n             @Override\n-            public void onClick(View v) {\n-                getActivity().onBackPressed();\n+            public void onClick(View view) {\n+                changeScreen();\n             }\n         });\n-        toolbar.setTitle(R.string.configure_screen_quick_action);\n-        toolbar.setTitleTextColor(ContextCompat.getColor(getContext(),\n-                isLightContent ? R.color.color_white : R.color.text_color_primary_dark));\n+        deleteIconContainer.setEnabled(hasActiveQuickActions);\n+    }\n+\n+    private void updateToolbarTitle() {\n+        if (toolbar != null) {\n+            TextView tvTitle = toolbar.findViewById(R.id.toolbar_title);\n+            if (screenType == REORDER_SCREEN_TYPE) {\n+                tvTitle.setText(getString(R.string.configure_screen_quick_action));\n+            } else {", "originalCommit": "00cebdba080ba9ddb3cf72efe97d34fd92c235ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6105257562aa25829a42e606fb679cc68c736cb7", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java b/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\nindex f755f359ce..f049a5d7c6 100644\n--- a/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/quickaction/QuickActionListFragment.java\n\n@@ -66,8 +66,8 @@ public class QuickActionListFragment extends BaseOsmAndFragment\n     public static final String ACTIONS_TO_DELETE_KEY = \"actions_to_delete\";\n     public static final String SCREEN_TYPE_KEY = \"screen_type\";\n \n-    private static final int REORDER_SCREEN_TYPE = 0;\n-    private static final int DELETING_SCREEN_TYPE = 1;\n+    private static final int SCREEN_TYPE_REORDER = 0;\n+    private static final int SCREEN_TYPE_DELETE = 1;\n \n     private static final int ITEMS_IN_GROUP = 6;\n \n"}}, {"oid": "6105257562aa25829a42e606fb679cc68c736cb7", "url": "https://github.com/osmandapp/OsmAnd/commit/6105257562aa25829a42e606fb679cc68c736cb7", "message": "name fixes and small refactoring", "committedDate": "2020-06-01T10:08:24Z", "type": "commit"}, {"oid": "31367b9fec6a09647162b8b7aa27e2e75ee8882c", "url": "https://github.com/osmandapp/OsmAnd/commit/31367b9fec6a09647162b8b7aa27e2e75ee8882c", "message": "small ui fixes", "committedDate": "2020-06-01T10:30:51Z", "type": "commit"}, {"oid": "39bb6337ec12bea798df4917c28070f1371ea80f", "url": "https://github.com/osmandapp/OsmAnd/commit/39bb6337ec12bea798df4917c28070f1371ea80f", "message": "Merge branch 'master' into QuickActionRedesign", "committedDate": "2020-06-01T10:47:45Z", "type": "commit"}]}