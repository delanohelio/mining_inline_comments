{"pr_number": 8918, "pr_title": "custom poi types cache db", "pr_createdAt": "2020-05-08T08:29:11Z", "pr_url": "https://github.com/osmandapp/OsmAnd/pull/8918", "timeline": [{"oid": "c02a7820fa41f1d5cc30f0e52015cd33be9a41ba", "url": "https://github.com/osmandapp/OsmAnd/commit/c02a7820fa41f1d5cc30f0e52015cd33be9a41ba", "message": "custom poi types cache db", "committedDate": "2020-05-08T08:29:36Z", "type": "commit"}, {"oid": "bb6980ff2db59b24dde5795532292b1cd57b6ae7", "url": "https://github.com/osmandapp/OsmAnd/commit/bb6980ff2db59b24dde5795532292b1cd57b6ae7", "message": "corrections", "committedDate": "2020-05-12T13:16:43Z", "type": "commit"}, {"oid": "165d1430e3e081d8b76c6a34bab6428647836861", "url": "https://github.com/osmandapp/OsmAnd/commit/165d1430e3e081d8b76c6a34bab6428647836861", "message": "refactor PoiHelper", "committedDate": "2020-05-12T14:39:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMTU4NA==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425001584", "bodyText": "Bad class naming, couldn't be part of PoiFiltersDBHelper and same db?", "author": "vshcherb", "createdAt": "2020-05-14T09:33:43Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n\n@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMjQ0NQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425002445", "bodyText": "Bad link, Helpers/Serice connected to OsmAndApplication shouldn't use LocalIndexInfo/LocalIndexHelper which are UI classes at all. Static methods are also bad", "author": "vshcherb", "createdAt": "2020-05-14T09:35:15Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n\n@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMzA2MQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425003061", "bodyText": "Shouldn't be async cause initialization of all maps is already async and it should be part of map initialization processes", "author": "vshcherb", "createdAt": "2020-05-14T09:36:12Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n\n@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMzc4NA==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425003784", "bodyText": "BinaryMapIndexReader shouldn't use at all MapPoiTypes, looks like it was bad design from previous request.", "author": "vshcherb", "createdAt": "2020-05-14T09:37:29Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {\n+\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n+\t\tfiles.clear();\n+\t\thelper.deleteFilesTable();\n+\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\tFile f = new File(info.getPathToData());\n+\t\t\thelper.addFile(f);\n+\t\t\tfiles.put(f.getName(), f.lastModified());\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate void initCategoriesFromFiles() {\n+\t\tapp.getPoiTypes().clearCreatedCategories();\n+\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n+\t\tfor (BinaryMapIndexReader r : currentFile) {\n+\t\t\ttry {\n+\t\t\t\tr.initCategories();", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n\n@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNDc2Mg==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425004762", "bodyText": "Bad naming - createdCategories?", "author": "vshcherb", "createdAt": "2020-05-14T09:39:11Z", "path": "OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java", "diffHunk": "@@ -33,6 +33,7 @@\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n+\tprivate List<PoiCategory> createdCategories = new ArrayList<PoiCategory>();", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNzg5OQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425007899", "bodyText": "This is not used at all, only temporarily to build new categories.", "author": "vshcherb", "createdAt": "2020-05-14T09:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNDc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\nindex ef2e05d851..00f254c816 100644\n--- a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n+++ b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n\n@@ -33,7 +33,6 @@ public class MapPoiTypes {\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n-\tprivate List<PoiCategory> createdCategories = new ArrayList<PoiCategory>();\n \tprivate PoiCategory otherCategory;\n \tprivate PoiCategory otherMapCategory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNjI3NQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425006275", "bodyText": "Wrong table design", "author": "vshcherb", "createdAt": "2020-05-14T09:41:30Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {\n+\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n+\t\tfiles.clear();\n+\t\thelper.deleteFilesTable();\n+\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\tFile f = new File(info.getPathToData());\n+\t\t\thelper.addFile(f);\n+\t\t\tfiles.put(f.getName(), f.lastModified());\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate void initCategoriesFromFiles() {\n+\t\tapp.getPoiTypes().clearCreatedCategories();\n+\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n+\t\tfor (BinaryMapIndexReader r : currentFile) {\n+\t\t\ttry {\n+\t\t\t\tr.initCategories();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n+\t\t\t}\n+\t\t}\n+\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n+\t}\n+\n+\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n+\t\tcategories.clear();\n+\t\thelper.deletePoiTypesTable();\n+\t\tfor (PoiCategory category : poiCategories) {\n+\t\t\thelper.addCategory(category);\n+\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n+\t\tList<String> filters = new ArrayList<>();\n+\t\tfor (PoiType poiType : poiTypeList) {\n+\t\t\tfilters.add(poiType.getKeyName());\n+\t\t}\n+\t\treturn filters;\n+\t}\n+\n+\tpublic class PoiDbHelper {\n+\n+\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n+\t\tprivate static final int DATABASE_VERSION = 1;\n+\n+\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n+\t\tprivate static final String FILE_NAME = \"name\";\n+\t\tprivate static final String FILE_DATE = \"date\";\n+\n+\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n+\t\t\t\tFILES_TABLE_NAME + \" (\" +", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n\n@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNzU3OQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425007579", "bodyText": "Probably this is not needed at all.", "author": "vshcherb", "createdAt": "2020-05-14T09:43:32Z", "path": "OsmAnd/src/net/osmand/plus/AppInitializer.java", "diffHunk": "@@ -550,6 +539,7 @@ public void onCreateApplication() {\n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n+\t\tapp.poiHelper = startupInit(new PoiHelper(app), PoiHelper.class);", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex b4e108db79..379e2e7486 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n\n@@ -539,7 +546,6 @@ public class AppInitializer implements IProgress {\n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n-\t\tapp.poiHelper = startupInit(new PoiHelper(app), PoiHelper.class);\n \n \n \t\tinitOpeningHoursParser();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMTM1Mw==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425011353", "bodyText": "List.contains ?", "author": "vshcherb", "createdAt": "2020-05-14T09:49:38Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n\n@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMTY2MQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425011661", "bodyText": "First create, then check?", "author": "vshcherb", "createdAt": "2020-05-14T09:50:07Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n\n@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI0OQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425012249", "bodyText": "Should it be method part of POICategory to check?", "author": "vshcherb", "createdAt": "2020-05-14T09:50:57Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI5OA==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425012298", "bodyText": "getPoiTypeByKeyName?", "author": "vshcherb", "createdAt": "2020-05-14T09:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n\n@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDA1Mw==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425020053", "bodyText": "UI ?", "author": "vshcherb", "createdAt": "2020-05-14T10:03:30Z", "path": "OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java", "diffHunk": "@@ -632,6 +632,7 @@ protected void onPostExecute(String result) {\n \t\t\t} else {\n \t\t\t\ta.newDownloadIndexes();\n \t\t\t}\n+\t\t\tgetMyApplication().getPoiHelper().readPoiTypesFromMapAsync();", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex d76ca7dc12..bbb0f694e9 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n\n@@ -632,7 +632,6 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \t\t\t} else {\n \t\t\t\ta.newDownloadIndexes();\n \t\t\t}\n-\t\t\tgetMyApplication().getPoiHelper().readPoiTypesFromMapAsync();\n \t\t}\n \t}\n \n"}}, {"oid": "ccc98d8c8786f074fd9f7aaef05636384338fbd0", "url": "https://github.com/osmandapp/OsmAnd/commit/ccc98d8c8786f074fd9f7aaef05636384338fbd0", "message": "Merge branches 'create_custom_poi' and 'master' of https://github.com/osmandapp/Osmand into create_custom_poi", "committedDate": "2020-05-15T09:42:46Z", "type": "commit"}, {"oid": "3a800d252053003f3f408d8b60319194fe31788a", "url": "https://github.com/osmandapp/OsmAnd/commit/3a800d252053003f3f408d8b60319194fe31788a", "message": "refactor poi cache db", "committedDate": "2020-05-18T08:24:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjIwNA==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r426612204", "bodyText": "?\nIterate in the loop over and check each subtype, it should be faster", "author": "vshcherb", "createdAt": "2020-05-18T13:08:03Z", "path": "OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java", "diffHunk": "@@ -9,27 +10,79 @@\n import net.osmand.binary.BinaryMapIndexReader.MapIndex;\n import net.osmand.binary.BinaryMapIndexReader.SearchPoiTypeFilter;\n import net.osmand.binary.BinaryMapIndexReader.SearchRequest;\n+import net.osmand.binary.BinaryMapPoiReaderAdapter;\n import net.osmand.data.Amenity;\n+import net.osmand.osm.MapPoiTypes;\n import net.osmand.osm.PoiCategory;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.poi.PoiFiltersHelper;\n import net.osmand.plus.resources.ResourceManager.BinaryMapReaderResource;\n import net.osmand.plus.resources.ResourceManager.BinaryMapReaderResourceType;\n import net.osmand.util.MapUtils;\n \n import org.apache.commons.logging.Log;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n public class AmenityIndexRepositoryBinary implements AmenityIndexRepository {\n \n \tprivate final static Log log = PlatformUtil.getLog(AmenityIndexRepositoryBinary.class);\n \tprivate BinaryMapReaderResource resource;\n+\tprivate MapPoiTypes poiTypes;\n+\tprivate Map<String, List<String>> poiCategories = new HashMap<>();\n \n-\tpublic AmenityIndexRepositoryBinary(BinaryMapReaderResource resource) {\n+\tpublic AmenityIndexRepositoryBinary(BinaryMapReaderResource resource, OsmandApplication app) {\n \t\tthis.resource = resource;\n+\t\tpoiTypes = app.getPoiTypes();\n+\t\tcheckCachedCategories(app.getPoiFilters());\n+\t}\n+\n+\tpublic Map<String, List<String>> getPoiCategories() {\n+\t\treturn poiCategories;\n+\t}\n+\n+\tprivate void checkCachedCategories(PoiFiltersHelper poiFiltersHelper) {\n+\t\tString fileName = resource.getFileName();\n+\t\tlong lastModified = resource.getFileLastModified();\n+\t\tPair<Long, Map<String, List<String>>> cache = poiFiltersHelper.getCacheByResourceName(fileName);\n+\t\tif (cache == null || cache.first != null && cache.first != lastModified) {\n+\t\t\ttry {\n+\t\t\t\tBinaryMapIndexReader reader = getOpenFile();\n+\t\t\t\tif (reader != null) {\n+\t\t\t\t\treader.initCategories();\n+\t\t\t\t\tList<BinaryMapPoiReaderAdapter.PoiRegion> regions = reader.getPoiIndexes();\n+\t\t\t\t\tfor (BinaryMapPoiReaderAdapter.PoiRegion region : regions) {\n+\t\t\t\t\t\tList<String> categories = region.getCategories();\n+\t\t\t\t\t\tList<List<String>> subCategories = region.getSubcategories();\n+\t\t\t\t\t\tfor (int i = 0; i < categories.size(); i++) {\n+\t\t\t\t\t\t\tPoiCategory poiCategory = poiTypes.getPoiCategoryByName(categories.get(i));\n+\t\t\t\t\t\t\tSet<String> filters = new HashSet<>(subCategories.get(i));", "originalCommit": "3a800d252053003f3f408d8b60319194fe31788a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c906fcab5b28e7c000ad4bc0308f9e34e8d741b1", "chunk": "diff --git a/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java b/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\nindex 59d60a5872..930012f998 100644\n--- a/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\n+++ b/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\n\n@@ -26,17 +26,15 @@ import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n public class AmenityIndexRepositoryBinary implements AmenityIndexRepository {\n \n \tprivate final static Log log = PlatformUtil.getLog(AmenityIndexRepositoryBinary.class);\n \tprivate BinaryMapReaderResource resource;\n \tprivate MapPoiTypes poiTypes;\n-\tprivate Map<String, List<String>> poiCategories = new HashMap<>();\n+\tprivate Map<String, List<String>> deltaPoiCategories = new HashMap<>();\n \n \tpublic AmenityIndexRepositoryBinary(BinaryMapReaderResource resource, OsmandApplication app) {\n \t\tthis.resource = resource;\n"}}, {"oid": "c906fcab5b28e7c000ad4bc0308f9e34e8d741b1", "url": "https://github.com/osmandapp/OsmAnd/commit/c906fcab5b28e7c000ad4bc0308f9e34e8d741b1", "message": "Small refactoring", "committedDate": "2020-05-18T13:20:30Z", "type": "commit"}]}