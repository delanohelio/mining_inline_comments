{"pr_number": 4324, "pr_title": "[RW-5899] [risk=low] dataset and dataset_cohort join table", "pr_createdAt": "2020-11-20T20:01:13Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4324", "timeline": [{"oid": "87f95f56da694d1c106865760c6d34d1765b8170", "url": "https://github.com/all-of-us/workbench/commit/87f95f56da694d1c106865760c6d34d1765b8170", "message": "dataset and datasetcohort support", "committedDate": "2020-11-21T23:05:06Z", "type": "forcePushed"}, {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "url": "https://github.com/all-of-us/workbench/commit/3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "message": "dataset and dataset_cohort tables", "committedDate": "2020-11-21T23:41:02Z", "type": "forcePushed"}, {"oid": "4e7a2f923bea16103fabbcd2decacc38efce4eeb", "url": "https://github.com/all-of-us/workbench/commit/4e7a2f923bea16103fabbcd2decacc38efce4eeb", "message": "reporting tables for datasets and dataset-cohort join table", "committedDate": "2020-11-22T00:08:13Z", "type": "forcePushed"}, {"oid": "ceca24ecffa1a57e61a8c4117a23ef8e9c169ed6", "url": "https://github.com/all-of-us/workbench/commit/ceca24ecffa1a57e61a8c4117a23ef8e9c169ed6", "message": "dataset and dataset_cohort reporting tables", "committedDate": "2020-11-22T00:19:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODExMw==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258113", "bodyText": "Note that this method uses native queries, so no fiddling with the Entity definition's conventions is required.", "author": "jaycarlton", "createdAt": "2020-11-21T23:51:57Z", "path": "api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import java.util.List;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingNativeQueryServiceImpl implements ReportingNativeQueryService {\n+\n+  private final JdbcTemplate jdbcTemplate;\n+  private static final String FULL_TABLE_QUERY =", "originalCommit": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceImpl.java\nindex b52736e1a..32115cfcd 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceImpl.java\n\n@@ -2,29 +2,54 @@ package org.pmiops.workbench.db.jdbc;\n \n import java.util.List;\n import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.pmiops.workbench.model.ReportingDatasetConceptSet;\n+import org.pmiops.workbench.model.ReportingDatasetDomainIdValue;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.jdbc.core.RowMapper;\n import org.springframework.stereotype.Service;\n \n @Service\n public class ReportingNativeQueryServiceImpl implements ReportingNativeQueryService {\n \n   private final JdbcTemplate jdbcTemplate;\n-  private static final String FULL_TABLE_QUERY =\n-      \"SELECT data_set_id, cohort_id\\n\"\n-          + \"FROM data_set_cohort\\n\"\n-          + \"ORDER BY data_set_id, cohort_id\";\n \n-  RowMapper<ReportingDatasetCohort> rowMapper;\n-\n-  public ReportingNativeQueryServiceImpl(\n-      JdbcTemplate jdbcTemplate, RowMapper<ReportingDatasetCohort> rowMapper) {\n+  public ReportingNativeQueryServiceImpl(JdbcTemplate jdbcTemplate) {\n     this.jdbcTemplate = jdbcTemplate;\n-    this.rowMapper = rowMapper;\n   }\n \n   @Override\n   public List<ReportingDatasetCohort> getReportingDatasetCohorts() {\n-    return jdbcTemplate.query(FULL_TABLE_QUERY, rowMapper);\n+    return jdbcTemplate.query(\n+        \"SELECT data_set_id, cohort_id\\n\"\n+            + \"FROM data_set_cohort\\n\"\n+            + \"ORDER BY data_set_id, cohort_id;\",\n+        (rs, unused) ->\n+            new ReportingDatasetCohort()\n+                .cohortId(rs.getLong(\"cohort_id\"))\n+                .datasetId(rs.getLong(\"data_set_id\")));\n+  }\n+\n+  @Override\n+  public List<ReportingDatasetConceptSet> getReportingDatasetConceptSets() {\n+    return jdbcTemplate.query(\n+        \"SELECT data_set_id, concept_set_id\\n\"\n+            + \"FROM data_set_concept_set\\n\"\n+            + \"ORDER BY data_set_id, concept_set_id;\",\n+        (rs, unused) ->\n+            new ReportingDatasetConceptSet()\n+                .datasetId(rs.getLong(\"data_set_id\"))\n+                .conceptSetId(rs.getLong(\"concept_set_id\")));\n+  }\n+\n+  @Override\n+  public List<ReportingDatasetDomainIdValue> getReportingDatasetDomainIdValues() {\n+    return jdbcTemplate.query(\n+        \"SELECT data_set_id, domain_id, value\\n\"\n+            + \"FROM data_set_values\\n\"\n+            + \"ORDER BY data_set_id, domain_id;\",\n+        (rs, unused) ->\n+            new ReportingDatasetDomainIdValue()\n+                .datasetId(rs.getLong(\"data_set_id\"))\n+                .domainId(rs.getString(\"domain_id\"))\n+                .value(rs.getString(\"value\")));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODE2OQ==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258169", "bodyText": "this may need to be a separate fix", "author": "jaycarlton", "createdAt": "2020-11-21T23:52:31Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java", "diffHunk": "@@ -188,7 +190,7 @@ public void setCohortIds(List<Long> cohortIds) {\n \n   @ElementCollection\n   @CollectionTable(name = \"data_set_values\", joinColumns = @JoinColumn(name = \"data_set_id\"))\n-  @Column(name = \"values\")\n+  @Column(name = \"value\")", "originalCommit": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b535251ca286932a68f21aff03156f65d77e8af", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java b/api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java\nindex f92d254fa..ddbd3b2d7 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java\n\n@@ -190,7 +190,7 @@ public class DbDataset {\n \n   @ElementCollection\n   @CollectionTable(name = \"data_set_values\", joinColumns = @JoinColumn(name = \"data_set_id\"))\n-  @Column(name = \"value\")\n+  @Column(name = \"values\")\n   public List<DbDatasetValue> getValues() {\n     return values;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODI2OQ==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258269", "bodyText": "No MapStruct call required for the join table \ud83d\udcaf .", "author": "jaycarlton", "createdAt": "2020-11-21T23:53:43Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -39,11 +41,17 @@\n \n   List<ReportingCohort> toReportingCohortList(Collection<ProjectedReportingCohort> cohorts);\n \n+  ReportingDataset toReportingDataset(ProjectedReportingDataset projectedReportingDataset);\n+\n+  List<ReportingDataset> toReportingDatasetList(Collection<ProjectedReportingDataset> datasets);\n+\n   default ReportingSnapshot toReportingSnapshot(\n       QueryResultBundle queryResultBundle, long snapshotTimestamp) {\n     return new ReportingSnapshot()\n         .captureTimestamp(snapshotTimestamp)\n         .cohorts(toReportingCohortList(queryResultBundle.getCohorts()))\n+        .datasets(toReportingDatasetList(queryResultBundle.getDatasets()))\n+        .datasetCohorts(queryResultBundle.getDatasetCohorts())", "originalCommit": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ceca24ecffa1a57e61a8c4117a23ef8e9c169ed6", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java b/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\nindex e099d0654..d64b653d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\n\n@@ -41,6 +42,7 @@ public interface ReportingMapper {\n \n   List<ReportingCohort> toReportingCohortList(Collection<ProjectedReportingCohort> cohorts);\n \n+  @Mapping(source = \"dataSetId\", target = \"datasetId\")\n   ReportingDataset toReportingDataset(ProjectedReportingDataset projectedReportingDataset);\n \n   List<ReportingDataset> toReportingDatasetList(Collection<ProjectedReportingDataset> datasets);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODQ3Ng==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258476", "bodyText": "This is still an itch: I don't know how to attach a static method to a bunch of enum classes. You can't have static interface methods in Java, so it's on the honor system for every one of these extractor classes to expose TABLE_NAME. I could do it on all of the enum values, but then you have to do CohortColumnValueExtractor.values[0].getTableName(), which is just gross.", "author": "jaycarlton", "createdAt": "2020-11-21T23:55:57Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "diffHunk": "@@ -119,32 +126,45 @@ private TableResult executeWithTimeout(QueryJobConfiguration job) {\n     final QueryParameterValue snapshotTimestamp = getTimestampValue(reportingSnapshot);\n     final ImmutableList.Builder<JobInfo> resultBuilder = new Builder<>();\n \n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            CohortColumnValueExtractor.TABLE_NAME,\n-            cohortJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getCohorts()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            InstitutionColumnValueExtractor.TABLE_NAME,\n-            institutionJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getInstitutions()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            UserColumnValueExtractor.TABLE_NAME,\n-            userJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getUsers()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            WorkspaceColumnValueExtractor.TABLE_NAME,\n-            workspaceJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getWorkspaces()));\n-\n-    final List<JobInfo> result = resultBuilder.build();\n+    final List<JobInfo> result =\n+        resultBuilder\n+            .addAll(\n+                getJobsForDTOs(\n+                    CohortColumnValueExtractor.TABLE_NAME,", "originalCommit": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java b/api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java\nindex 6530ca2f3..90ba6783e 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java\n\n@@ -130,37 +132,37 @@ public class ReportingUploadServiceInsertQueryImpl implements ReportingUploadSer\n         resultBuilder\n             .addAll(\n                 getJobsForDTOs(\n-                    CohortColumnValueExtractor.TABLE_NAME,\n+                    getBigQueryTableName(CohortColumnValueExtractor.class),\n                     CohortColumnValueExtractor::values,\n                     snapshotTimestamp,\n                     reportingSnapshot.getCohorts()))\n             .addAll(\n                 getJobsForDTOs(\n-                    DatasetColumnValueExtractor.TABLE_NAME,\n+                    getBigQueryTableName(DatasetCohortColumnValueExtractor.class),\n                     DatasetColumnValueExtractor::values,\n                     snapshotTimestamp,\n                     reportingSnapshot.getDatasets()))\n             .addAll(\n                 getJobsForDTOs(\n-                    DatasetCohortColumnValueExtractor.TABLE_NAME,\n+                    getBigQueryTableName(DatasetCohortColumnValueExtractor.class),\n                     DatasetCohortColumnValueExtractor::values,\n                     snapshotTimestamp,\n                     reportingSnapshot.getDatasetCohorts()))\n             .addAll(\n                 getJobsForDTOs(\n-                    InstitutionColumnValueExtractor.TABLE_NAME,\n+                    getBigQueryTableName(InstitutionColumnValueExtractor.class),\n                     InstitutionColumnValueExtractor::values,\n                     snapshotTimestamp,\n                     reportingSnapshot.getInstitutions()))\n             .addAll(\n                 getJobsForDTOs(\n-                    UserColumnValueExtractor.TABLE_NAME,\n+                    getBigQueryTableName(UserColumnValueExtractor.class),\n                     UserColumnValueExtractor::values,\n                     snapshotTimestamp,\n                     reportingSnapshot.getUsers()))\n             .addAll(\n                 getJobsForDTOs(\n-                    WorkspaceColumnValueExtractor.TABLE_NAME,\n+                    getBigQueryTableName(WorkspaceColumnValueExtractor.class),\n                     WorkspaceColumnValueExtractor::values,\n                     snapshotTimestamp,\n                     reportingSnapshot.getWorkspaces()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODk0OQ==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258949", "bodyText": "I shied away from pulling all the test fixture code out of ReportingTestUtils for this branch, but there's support in the works on the Ruby side to make this much cleaner.", "author": "jaycarlton", "createdAt": "2020-11-22T00:00:51Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/CohortDaoTest.java", "diffHunk": "@@ -43,7 +54,7 @@ public void setUp() {\n     dbWorkspace.setLastModifiedTime(timestamp);\n     workspaceDao.save(dbWorkspace);\n \n-    dbUser = userDao.save(ReportingTestUtils.createDbUser());\n+    dbUser = userDao.save(userFixture.createEntity());", "originalCommit": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1OTEyMA==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528259120", "bodyText": "We could almost pull all of these machinations into a reporting config class, since we'll need to set up similar things for other joint tables. To start with, I think it's fine to overload this test class with dependencies, as join tables always require extra test data to test.", "author": "jaycarlton", "createdAt": "2020-11-22T00:03:09Z", "path": "api/src/test/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.dao.CdrVersionDao;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingUser;\n+import org.pmiops.workbench.db.dao.rowmappers.ReportingDatasetCohortRowMapperImpl;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.testconfig.ReportingTestUtils;\n+import org.pmiops.workbench.testconfig.fixtures.ReportingTestFixture;\n+import org.pmiops.workbench.testconfig.fixtures.ReportingUserFixture;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Test the unique ReportingNativeQueryService, which bypasses Spring in favor of low-level JDBC\n+ * queries. This means we need real DAOs.\n+ */\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class ReportingNativeQueryServiceTest {\n+\n+  @Autowired private ReportingNativeQueryService reportingNativeQueryService;\n+\n+  // It's necessary to bring in several Dao classes, since we aim to populate join tables\n+  // that have neither entities of their own nor stand-alone DAOs.\n+  @Autowired private CdrVersionDao cCdrVersionDao;", "originalCommit": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceTest.java b/api/src/test/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceTest.java\nindex b5437838a..ce93f6434 100644\n--- a/api/src/test/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceTest.java\n\n@@ -15,7 +15,6 @@ import org.pmiops.workbench.db.dao.DataSetDao;\n import org.pmiops.workbench.db.dao.UserDao;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.dao.projection.ProjectedReportingUser;\n-import org.pmiops.workbench.db.dao.rowmappers.ReportingDatasetCohortRowMapperImpl;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbCohort;\n import org.pmiops.workbench.db.model.DbDataset;\n"}}, {"oid": "e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "url": "https://github.com/all-of-us/workbench/commit/e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "message": "report join tables and datasets", "committedDate": "2020-11-25T16:33:46Z", "type": "forcePushed"}, {"oid": "744660268c10824c9d24ee3745708fbe203f4fb3", "url": "https://github.com/all-of-us/workbench/commit/744660268c10824c9d24ee3745708fbe203f4fb3", "message": "report join tables and datasets", "committedDate": "2020-11-25T16:35:50Z", "type": "forcePushed"}, {"oid": "c5187313d0773ad91dfd5912bfff3c5265000dcb", "url": "https://github.com/all-of-us/workbench/commit/c5187313d0773ad91dfd5912bfff3c5265000dcb", "message": "re-squash", "committedDate": "2020-11-25T16:36:36Z", "type": "forcePushed"}, {"oid": "87a18d7d4acf152d2ace00dd3e7d845530e71747", "url": "https://github.com/all-of-us/workbench/commit/87a18d7d4acf152d2ace00dd3e7d845530e71747", "message": "dataset table and join table support", "committedDate": "2020-11-28T10:54:16Z", "type": "forcePushed"}, {"oid": "7b9cd870ae7dd207bc05f5c41a302a103dc76d17", "url": "https://github.com/all-of-us/workbench/commit/7b9cd870ae7dd207bc05f5c41a302a103dc76d17", "message": "dataset tables", "committedDate": "2020-12-01T21:03:45Z", "type": "forcePushed"}, {"oid": "08f13fdba3cdfc79d37444b6cfb154c2d840283b", "url": "https://github.com/all-of-us/workbench/commit/08f13fdba3cdfc79d37444b6cfb154c2d840283b", "message": "dataset tables", "committedDate": "2020-12-02T22:20:20Z", "type": "commit"}, {"oid": "1b535251ca286932a68f21aff03156f65d77e8af", "url": "https://github.com/all-of-us/workbench/commit/1b535251ca286932a68f21aff03156f65d77e8af", "message": "restore unrelated changes", "committedDate": "2020-12-02T22:20:20Z", "type": "commit"}, {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "url": "https://github.com/all-of-us/workbench/commit/f14cf437b8a58e9180f94e9098419a7e67fbd6db", "message": "spotless", "committedDate": "2020-12-02T22:23:26Z", "type": "commit"}, {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "url": "https://github.com/all-of-us/workbench/commit/f14cf437b8a58e9180f94e9098419a7e67fbd6db", "message": "spotless", "committedDate": "2020-12-02T22:23:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNDQ5NQ==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535314495", "bodyText": "Is the intention here to set the copy's version to INITIAL_VERSION?  the Impl is not doing that.", "author": "jmthibault79", "createdAt": "2020-12-03T15:08:50Z", "path": "api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java", "diffHunk": "@@ -135,4 +136,7 @@ default DomainValuePair createDomainValuePair(DbDatasetValue dbDatasetValue) {\n \n   @Mapping(target = \"cdrVersionId\", source = \"dbModel.cdrVersion.cdrVersionId\")\n   DataDictionaryEntry dbModelToClient(DbDataDictionaryEntry dbModel);\n+\n+  @ValueMapping(source = \"DbDataset.INITIAL_VERSION\", target = \"version\")", "originalCommit": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyMTEyNg==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535521126", "bodyText": "Yes, but I meant to pull this change out. It was ultimately a tangent that I needed to avoid.", "author": "jaycarlton", "createdAt": "2020-12-03T19:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNDQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb3f3964c08530a1bc37312a40366ebfdd305143", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java\nindex 7bfb7dc79..56969b2ea 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java\n\n@@ -136,7 +135,4 @@ public interface DataSetMapper {\n \n   @Mapping(target = \"cdrVersionId\", source = \"dbModel.cdrVersion.cdrVersionId\")\n   DataDictionaryEntry dbModelToClient(DbDataDictionaryEntry dbModel);\n-\n-  @ValueMapping(source = \"DbDataset.INITIAL_VERSION\", target = \"version\")\n-  DbDataset copy(DbDataset source);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNjcxNQ==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535316715", "bodyText": "Reminder to remove this if you can convince MapStruct to init the version", "author": "jmthibault79", "createdAt": "2020-12-03T15:11:28Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java", "diffHunk": "@@ -61,12 +61,14 @@ public DbDataset(\n     this.invalid = invalid;\n   }\n \n+  //   TODO(jaycarlton): use MapStruct to generate a copy ctor for us\n   public DbDataset(DbDataset dataSet) {", "originalCommit": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyODU2MQ==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535328561", "bodyText": "Please make this a const", "author": "jmthibault79", "createdAt": "2020-12-03T15:25:48Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "diffHunk": "@@ -29,12 +30,12 @@\n \n @Service(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")", "originalCommit": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyNzI3MA==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535527270", "bodyText": "I changed this and then backed it out. Since the annotation is outside the class's scope, so it has to point to a public static method, which means at the injection site you wind up with a reference to the actual class being injected, which is supposed to be abstracted away from you. The string doesn't really belong to the class, but is an external identifier.\nI suppose you could make a file with all the qualifiers, but that wouldn't be very legible.", "author": "jaycarlton", "createdAt": "2020-12-03T19:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyODU2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzMDQyMQ==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535330421", "bodyText": "const", "author": "jmthibault79", "createdAt": "2020-12-03T15:27:52Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceStreamingImpl.java", "diffHunk": "@@ -28,17 +39,24 @@\n \n @Service(\"REPORTING_UPLOAD_SERVICE_STREAMING_IMPL\")", "originalCommit": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzNjYwMA==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535336600", "bodyText": "return TABLE_NAME here (and also make TABLE_NAME private)", "author": "jmthibault79", "createdAt": "2020-12-03T15:33:29Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/CohortColumnValueExtractor.java", "diffHunk": "@@ -41,6 +41,11 @@\n     this.parameterValueFunction = parameterValueFunction;\n   }\n \n+  @Override\n+  public String getBigQueryTableName() {\n+    return \"cohort\";", "originalCommit": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb0827832f15eba7d76a4f73eb42a541d0d67e5f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/insertion/CohortColumnValueExtractor.java b/api/src/main/java/org/pmiops/workbench/reporting/insertion/CohortColumnValueExtractor.java\nindex c3441b0a2..30f4670a5 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/insertion/CohortColumnValueExtractor.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/insertion/CohortColumnValueExtractor.java\n\n@@ -43,7 +43,7 @@ public enum CohortColumnValueExtractor implements ColumnValueExtractor<Reporting\n \n   @Override\n   public String getBigQueryTableName() {\n-    return \"cohort\";\n+    return TABLE_NAME;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM0MjAyMA==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535342020", "bodyText": "oh nice.  thanks.", "author": "jmthibault79", "createdAt": "2020-12-03T15:38:29Z", "path": "api/src/test/java/org/pmiops/workbench/api/WorkspacesControllerTest.java", "diffHunk": "@@ -398,14 +398,9 @@ WorkbenchConfig workbenchConfig() {\n \n   @Before\n   public void setUp() {\n-    workbenchConfig = new WorkbenchConfig();\n-    workbenchConfig.featureFlags = new WorkbenchConfig.FeatureFlagsConfig();", "originalCommit": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MjA1Mw==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535372053", "bodyText": "spelling", "author": "jmthibault79", "createdAt": "2020-12-03T16:11:24Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java", "diffHunk": "@@ -59,10 +62,48 @@ private DbDataset insertDatasetForGauge(boolean isInvalid, long workspaceId) {\n   }\n \n   @Test\n-  public void test() {\n+  public void testGague() {", "originalCommit": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb0827832f15eba7d76a4f73eb42a541d0d67e5f", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java b/api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java\nindex 1186d1f03..63dcd758e 100644\n--- a/api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java\n\n@@ -62,7 +62,7 @@ public class DataSetDaoTest {\n   }\n \n   @Test\n-  public void testGague() {\n+  public void testGauge() {\n     insertDatasetForGauge(true, workspace.getWorkspaceId());\n     insertDatasetForGauge(true, workspace.getWorkspaceId());\n     insertDatasetForGauge(false, workspace.getWorkspaceId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MzQ5NQ==", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535373495", "bodyText": "Please add the other dataset elements.  ConceptSets and DomainIds ?", "author": "jmthibault79", "createdAt": "2020-12-03T16:13:15Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java", "diffHunk": "@@ -59,10 +62,48 @@ private DbDataset insertDatasetForGauge(boolean isInvalid, long workspaceId) {\n   }\n \n   @Test\n-  public void test() {\n+  public void testGague() {\n+    insertDatasetForGauge(true, workspace.getWorkspaceId());\n+    insertDatasetForGauge(true, workspace.getWorkspaceId());\n+    insertDatasetForGauge(false, workspace.getWorkspaceId());\n+\n     final Map<Boolean, Long> map = dataSetDao.getInvalidToCountMap();\n     assertThat(map).hasSize(Booleans.VALUE_STRINGS.size());\n     assertThat(map.get(true)).isEqualTo(2L);\n     assertThat(map.get(false)).isEqualTo(1L);\n   }\n+\n+  @Test\n+  public void testGetReportingDatasets() {", "originalCommit": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb0827832f15eba7d76a4f73eb42a541d0d67e5f", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java b/api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java\nindex 1186d1f03..63dcd758e 100644\n--- a/api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java\n\n@@ -62,7 +62,7 @@ public class DataSetDaoTest {\n   }\n \n   @Test\n-  public void testGague() {\n+  public void testGauge() {\n     insertDatasetForGauge(true, workspace.getWorkspaceId());\n     insertDatasetForGauge(true, workspace.getWorkspaceId());\n     insertDatasetForGauge(false, workspace.getWorkspaceId());\n"}}, {"oid": "eb3f3964c08530a1bc37312a40366ebfdd305143", "url": "https://github.com/all-of-us/workbench/commit/eb3f3964c08530a1bc37312a40366ebfdd305143", "message": "restore the maper", "committedDate": "2020-12-03T19:35:45Z", "type": "commit"}, {"oid": "cb0827832f15eba7d76a4f73eb42a541d0d67e5f", "url": "https://github.com/all-of-us/workbench/commit/cb0827832f15eba7d76a4f73eb42a541d0d67e5f", "message": "fixes & use new lambda", "committedDate": "2020-12-03T23:10:22Z", "type": "commit"}]}