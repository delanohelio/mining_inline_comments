{"pr_number": 3620, "pr_title": "[RW-4825][risk=no] Misc. tweaks & small refactors split from main story branch", "pr_createdAt": "2020-05-28T18:43:29Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3620", "timeline": [{"oid": "5546bbe4e82c577ff5f3c66a52aed00d616012ad", "url": "https://github.com/all-of-us/workbench/commit/5546bbe4e82c577ff5f3c66a52aed00d616012ad", "message": "add a new kitchen sink type", "committedDate": "2020-05-28T18:10:15Z", "type": "commit"}, {"oid": "1a0bf3ae3d4f0783c13576ba34d679d98ccde750", "url": "https://github.com/all-of-us/workbench/commit/1a0bf3ae3d4f0783c13576ba34d679d98ccde750", "message": "rebase master", "committedDate": "2020-05-28T18:11:19Z", "type": "commit"}, {"oid": "80ae7d84618646111b429587f4efc6fa5011b714", "url": "https://github.com/all-of-us/workbench/commit/80ae7d84618646111b429587f4efc6fa5011b714", "message": "fixp manual constructors", "committedDate": "2020-05-28T18:19:12Z", "type": "commit"}, {"oid": "e345da4f92f3ffeec4060c796d24cc14b752de33", "url": "https://github.com/all-of-us/workbench/commit/e345da4f92f3ffeec4060c796d24cc14b752de33", "message": "add qualifier", "committedDate": "2020-05-28T18:19:12Z", "type": "commit"}, {"oid": "ddad49e55eef950313e85306a3e6096e124d0816", "url": "https://github.com/all-of-us/workbench/commit/ddad49e55eef950313e85306a3e6096e124d0816", "message": "backend changes", "committedDate": "2020-05-28T18:20:54Z", "type": "commit"}, {"oid": "db0380a946b7e4a2983ca217eef53c72e2c60012", "url": "https://github.com/all-of-us/workbench/commit/db0380a946b7e4a2983ca217eef53c72e2c60012", "message": "more fiddling", "committedDate": "2020-05-28T18:20:57Z", "type": "commit"}, {"oid": "e43f83b6621b23210415a4f5124c53088ad85c50", "url": "https://github.com/all-of-us/workbench/commit/e43f83b6621b23210415a4f5124c53088ad85c50", "message": "fix test", "committedDate": "2020-05-28T18:20:57Z", "type": "commit"}, {"oid": "d540d55566662fba7494b2974d4008e10271efb5", "url": "https://github.com/all-of-us/workbench/commit/d540d55566662fba7494b2974d4008e10271efb5", "message": "spotless", "committedDate": "2020-05-28T18:20:58Z", "type": "commit"}, {"oid": "939790076eda2db11c968e39057db88ba092cf27", "url": "https://github.com/all-of-us/workbench/commit/939790076eda2db11c968e39057db88ba092cf27", "message": "progress for later", "committedDate": "2020-05-28T18:20:58Z", "type": "commit"}, {"oid": "b56e8dd114bb3c15cd5135d5e5ee0701506cb716", "url": "https://github.com/all-of-us/workbench/commit/b56e8dd114bb3c15cd5135d5e5ee0701506cb716", "message": "tweaks", "committedDate": "2020-05-28T18:22:43Z", "type": "commit"}, {"oid": "98ff4b687e24cccf228115d5bcab77719823ad2d", "url": "https://github.com/all-of-us/workbench/commit/98ff4b687e24cccf228115d5bcab77719823ad2d", "message": "kill broken method [skip ci]", "committedDate": "2020-05-28T18:22:45Z", "type": "commit"}, {"oid": "0f2ec9229255e4577babb8ce8100b4b49cab1077", "url": "https://github.com/all-of-us/workbench/commit/0f2ec9229255e4577babb8ce8100b4b49cab1077", "message": "fake commit [skip ci]", "committedDate": "2020-05-28T18:28:54Z", "type": "commit"}, {"oid": "b715457b90235677e6937014e8074262441d5c04", "url": "https://github.com/all-of-us/workbench/commit/b715457b90235677e6937014e8074262441d5c04", "message": "move WorkspaceMapper", "committedDate": "2020-05-28T18:48:20Z", "type": "commit"}, {"oid": "e4e1ab08641b7a3afc72ad1ba3db64cb3939fef9", "url": "https://github.com/all-of-us/workbench/commit/e4e1ab08641b7a3afc72ad1ba3db64cb3939fef9", "message": "don't need on this branch", "committedDate": "2020-05-28T18:49:38Z", "type": "commit"}, {"oid": "245db23ad3953f40e3a31b932bc5d736af87b0de", "url": "https://github.com/all-of-us/workbench/commit/245db23ad3953f40e3a31b932bc5d736af87b0de", "message": "fix paths", "committedDate": "2020-05-28T20:47:30Z", "type": "commit"}, {"oid": "338da636d9955c1c0f183162d855556007fdfc83", "url": "https://github.com/all-of-us/workbench/commit/338da636d9955c1c0f183162d855556007fdfc83", "message": "merge", "committedDate": "2020-06-02T19:54:12Z", "type": "commit"}, {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de", "url": "https://github.com/all-of-us/workbench/commit/36d4dfde5187234608c18d9b06f70338bcb965de", "message": "fix tests", "committedDate": "2020-06-03T15:00:16Z", "type": "commit"}, {"oid": "a52f86eca9534ee05dbef71c3578f3303ee7cca5", "url": "https://github.com/all-of-us/workbench/commit/a52f86eca9534ee05dbef71c3578f3303ee7cca5", "message": "cleanup", "committedDate": "2020-06-03T16:10:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNjM5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434636391", "bodyText": "By injecting this random value, we no longer have to use a spy() around the DataSetService.", "author": "jaycarlton", "createdAt": "2020-06-03T15:02:52Z", "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -261,7 +265,7 @@ private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n \n   @VisibleForTesting\n   public String generateRandomEightCharacterQualifier() {\n-    return RandomStringUtils.randomNumeric(8);\n+    return prefixProvider.get();", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NjM2MA==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r435896360", "bodyText": "this is 00000000 above ?", "author": "NehaBroad", "createdAt": "2020-06-05T12:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNjM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NjY1OA==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436776658", "bodyText": "yes", "author": "jaycarlton", "createdAt": "2020-06-08T15:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNjM5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzE0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434637145", "bodyText": "This is actually leftover from the other (future) branch. I can remove from this PR if necessary, but it's pretty small.", "author": "jaycarlton", "createdAt": "2020-06-03T15:03:58Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -950,4 +950,9 @@ public DbUser syncTwoFactorAuthStatus(DbUser targetUser, Agent agent) {\n                     .build())\n         .collect(ImmutableList.toImmutableList());\n   }\n+\n+  @Override\n+  public Optional<DbUser> getByUsername(String username) {", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5ODU4Ng==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r435898586", "bodyText": "Should send DbUser from here? Whats the convention for Optional objects from DB, service will handle ifPresent or controller?", "author": "NehaBroad", "createdAt": "2020-06-05T12:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NzEwNw==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436777107", "bodyText": "Yes, or you can use .orElseThrow(() -> new NotFoundException())", "author": "jaycarlton", "createdAt": "2020-06-08T15:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzE0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzk1OA==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434637958", "bodyText": "Public static methods on used classes are fair game for the mapper.", "author": "jaycarlton", "createdAt": "2020-06-03T15:05:01Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -17,6 +15,7 @@\n     uses = {\n       AddressMapper.class,\n       CommonMappers.class,\n+      DbStorageEnums.class,", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzODg0NA==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434638844", "bodyText": "FWIW, I'm not sure \"common\" is much of an abstraction. I kinda feel like breaking this down further so the uses directives are more granular.", "author": "jaycarlton", "createdAt": "2020-06-03T15:06:04Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -7,15 +7,8 @@\n import org.pmiops.workbench.api.Etags;\n import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n-import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceResponse;\n-import org.pmiops.workbench.model.AnnotationType;\n import org.pmiops.workbench.model.BillingStatus;\n-import org.pmiops.workbench.model.DataAccessLevel;\n-import org.pmiops.workbench.model.WorkspaceAccessLevel;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.stereotype.Service;\n \n @Service", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzOTIzNQ==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434639235", "bodyText": "One could argue for merging this with the ProfileMapper...", "author": "jaycarlton", "createdAt": "2020-06-03T15:06:36Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/UserMapper.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.pmiops.workbench.utils.mappers;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.User;\n+import org.pmiops.workbench.model.UserRole;\n+\n+@Mapper(componentModel = \"spring\", uses = FirecloudMapper.class)\n+public interface UserMapper {", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzOTY3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434639679", "bodyText": "This class's only advantage is its no-arg constructor. It's used in a tool Spring configuration below.", "author": "jaycarlton", "createdAt": "2020-06-03T15:07:13Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceFakeImpl.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.pmiops.workbench.workspaces;\n+\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.ForbiddenException;\n+import org.pmiops.workbench.exceptions.NotFoundException;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceACLUpdate;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResponse;\n+\n+public class WorkspaceServiceFakeImpl implements WorkspaceService {", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTUyMw==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434645523", "bodyText": "Lots of heavy services were initialized inline in the @Before method, greatly inflating the number of test class members.", "author": "jaycarlton", "createdAt": "2020-06-03T15:15:15Z", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -187,95 +174,76 @@\n \n   private static final Instant NOW = Instant.now();\n   private static final FakeClock CLOCK = new FakeClock(NOW, ZoneId.systemDefault());\n+  private static final BasicFormatterImpl BASIC_FORMATTER = new BasicFormatterImpl();\n+  private static final String PREFIX = \"00000000\";\n+  private static final String FULL_PREFIX = String.format(\"dataset_%s_condition_\", PREFIX);\n+\n   private static DbUser currentUser;\n \n-  private String cohortCriteria;\n-  private SearchRequest searchRequest;\n-  private TestMockFactory testMockFactory;\n   private Workspace workspace;\n \n-  @Autowired BillingProjectBufferService billingProjectBufferService;\n-  @Autowired BigQueryService bigQueryService;\n-  @Autowired CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n-  @Autowired WorkspaceResourcesService workspaceResourcesService;\n-  @Autowired CdrVersionDao cdrVersionDao;\n-  @Autowired CdrVersionService cdrVersionService;\n-  @Autowired CloudStorageService cloudStorageService;\n-  @Autowired Provider<Cloudbilling> cloudBillingProvider;\n-  @Autowired CohortDao cohortDao;\n-  @Autowired CohortFactory cohortFactory;\n-  @Autowired CohortMapper cohortMapper;\n-  @Autowired CohortMaterializationService cohortMaterializationService;\n-  @Autowired CohortReviewDao cohortReviewDao;\n-  @Autowired CohortReviewMapper cohortReviewMapper;\n-  @Autowired CohortReviewService cohortReviewService;\n-  @Autowired ConceptBigQueryService conceptBigQueryService;\n-  @Autowired ConceptDao conceptDao;\n-  @Autowired ConceptService conceptService;\n-  @Autowired ConceptSetService conceptSetService;\n-  @Autowired ConceptSetDao conceptSetDao;\n-  @Autowired DataDictionaryEntryDao dataDictionaryEntryDao;\n-  @Autowired DataSetDao dataSetDao;\n-  @Mock DataSetMapper dataSetMapper;\n-  @Autowired ConceptSetMapper conceptSetMapper;\n-  @Autowired DataSetService dataSetService;\n-  @Autowired FireCloudService fireCloudService;\n-  @Autowired FreeTierBillingService freeTierBillingService;\n-  @Autowired CohortQueryBuilder cohortQueryBuilder;\n-  @Autowired TestBigQueryCdrSchemaConfig testBigQueryCdrSchemaConfig;\n-  @Autowired UserDao userDao;\n-  @Mock Provider<DbUser> userProvider;\n-  @Autowired Provider<WorkbenchConfig> workbenchConfigProvider;\n-  @Autowired NotebooksService notebooksService;\n-  @Autowired UserRecentResourceService userRecentResourceService;\n-  @Autowired UserService userService;\n-  @Autowired WorkspaceDao workspaceDao;\n-  @Autowired WorkspaceService workspaceService;\n-  @Autowired WorkspaceAuditor workspaceAuditor;\n-  @Autowired WorkspaceMapper workspaceMapper;\n-  @Autowired LogsBasedMetricService logsBasedMetricService;\n-  @MockBean MonitoringService mockMonitoringService;\n+  @Autowired private BillingProjectBufferService billingProjectBufferService;", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a52f86eca9534ee05dbef71c3578f3303ee7cca5", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\nindex 3d6ae26bb..5d291bb18 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\n\n@@ -179,26 +177,22 @@ public class DataSetControllerTest {\n   private static final String FULL_PREFIX = String.format(\"dataset_%s_condition_\", PREFIX);\n \n   private static DbUser currentUser;\n-\n   private Workspace workspace;\n \n-  @Autowired private BillingProjectBufferService billingProjectBufferService;\n-  @Autowired private CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n   @Autowired private CdrVersionDao cdrVersionDao;\n   @Autowired private CohortsController cohortsController;\n-  @Autowired private CohortQueryBuilder cohortQueryBuilder;\n   @Autowired private ConceptSetsController conceptSetsController;\n   @Autowired private DataSetController dataSetController;\n-  @Autowired private DataSetService dataSetService;\n-  @Autowired private FireCloudService fireCloudService;\n-  @Autowired private NotebooksService notebooksService;\n   @Autowired private UserDao userDao;\n   @Autowired private WorkspaceDao workspaceDao;\n   @Autowired private WorkspacesController workspacesController;\n \n+  @MockBean private CdrBigQuerySchemaConfigService mockCdrBigQuerySchemaConfigService;\n+  @MockBean private BillingProjectBufferService mockBillingProjectBufferService;\n   @MockBean private BigQueryService mockBigQueryService;\n-\n-  //  @Mock Provider<DbUser> userProvider;\n+  @MockBean private CohortQueryBuilder mockCohortQueryBuilder;\n+  @MockBean private FireCloudService fireCloudService;\n+  @MockBean private NotebooksService mockNotebooksService;\n \n   @TestConfiguration\n   @Import({\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NzE1MA==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434647150", "bodyText": "One could argue for a new DatasetConfig to host this. I don't have strong feelings at the moment.", "author": "jaycarlton", "createdAt": "2020-06-03T15:17:23Z", "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -25,4 +31,11 @@ Clock clock() {\n   Random random() {\n     return new SecureRandom();\n   }\n+\n+  @Bean", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NzM3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r435897373", "bodyText": "yeah this should be in dataSetConfig code. And just for curiosity whats the argument for this being here?", "author": "NehaBroad", "createdAt": "2020-06-05T12:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NzE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxMDk3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436810973", "bodyText": "Just saw this.\nDatasetConfig does not yet exist, but I reckon I can conjure it into being...", "author": "jaycarlton", "createdAt": "2020-06-08T15:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NzE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "3eb6c3a81e154348f981a40a2de060bdcbc64db2", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/config/CommonConfig.java b/api/src/main/java/org/pmiops/workbench/config/CommonConfig.java\nindex a83cd3b5e..28127b605 100644\n--- a/api/src/main/java/org/pmiops/workbench/config/CommonConfig.java\n+++ b/api/src/main/java/org/pmiops/workbench/config/CommonConfig.java\n\n@@ -31,11 +28,4 @@ public class CommonConfig {\n   Random random() {\n     return new SecureRandom();\n   }\n-\n-  @Bean\n-  @Qualifier(DATASET_PREFIX_CODE)\n-  @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-  String randomCharacters() {\n-    return RandomStringUtils.randomNumeric(8);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NjE1MA==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434656150", "bodyText": "Using the @MockBean annotation directly on the members is cleaner than putting it here and using @Autowire. I keep this list around for those mocks that don't need to have named instances.", "author": "jaycarlton", "createdAt": "2020-06-03T15:29:25Z", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -187,95 +174,76 @@\n \n   private static final Instant NOW = Instant.now();\n   private static final FakeClock CLOCK = new FakeClock(NOW, ZoneId.systemDefault());\n+  private static final BasicFormatterImpl BASIC_FORMATTER = new BasicFormatterImpl();\n+  private static final String PREFIX = \"00000000\";\n+  private static final String FULL_PREFIX = String.format(\"dataset_%s_condition_\", PREFIX);\n+\n   private static DbUser currentUser;\n \n-  private String cohortCriteria;\n-  private SearchRequest searchRequest;\n-  private TestMockFactory testMockFactory;\n   private Workspace workspace;\n \n-  @Autowired BillingProjectBufferService billingProjectBufferService;\n-  @Autowired BigQueryService bigQueryService;\n-  @Autowired CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n-  @Autowired WorkspaceResourcesService workspaceResourcesService;\n-  @Autowired CdrVersionDao cdrVersionDao;\n-  @Autowired CdrVersionService cdrVersionService;\n-  @Autowired CloudStorageService cloudStorageService;\n-  @Autowired Provider<Cloudbilling> cloudBillingProvider;\n-  @Autowired CohortDao cohortDao;\n-  @Autowired CohortFactory cohortFactory;\n-  @Autowired CohortMapper cohortMapper;\n-  @Autowired CohortMaterializationService cohortMaterializationService;\n-  @Autowired CohortReviewDao cohortReviewDao;\n-  @Autowired CohortReviewMapper cohortReviewMapper;\n-  @Autowired CohortReviewService cohortReviewService;\n-  @Autowired ConceptBigQueryService conceptBigQueryService;\n-  @Autowired ConceptDao conceptDao;\n-  @Autowired ConceptService conceptService;\n-  @Autowired ConceptSetService conceptSetService;\n-  @Autowired ConceptSetDao conceptSetDao;\n-  @Autowired DataDictionaryEntryDao dataDictionaryEntryDao;\n-  @Autowired DataSetDao dataSetDao;\n-  @Mock DataSetMapper dataSetMapper;\n-  @Autowired ConceptSetMapper conceptSetMapper;\n-  @Autowired DataSetService dataSetService;\n-  @Autowired FireCloudService fireCloudService;\n-  @Autowired FreeTierBillingService freeTierBillingService;\n-  @Autowired CohortQueryBuilder cohortQueryBuilder;\n-  @Autowired TestBigQueryCdrSchemaConfig testBigQueryCdrSchemaConfig;\n-  @Autowired UserDao userDao;\n-  @Mock Provider<DbUser> userProvider;\n-  @Autowired Provider<WorkbenchConfig> workbenchConfigProvider;\n-  @Autowired NotebooksService notebooksService;\n-  @Autowired UserRecentResourceService userRecentResourceService;\n-  @Autowired UserService userService;\n-  @Autowired WorkspaceDao workspaceDao;\n-  @Autowired WorkspaceService workspaceService;\n-  @Autowired WorkspaceAuditor workspaceAuditor;\n-  @Autowired WorkspaceMapper workspaceMapper;\n-  @Autowired LogsBasedMetricService logsBasedMetricService;\n-  @MockBean MonitoringService mockMonitoringService;\n+  @Autowired private BillingProjectBufferService billingProjectBufferService;\n+  @Autowired private CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n+  @Autowired private CdrVersionDao cdrVersionDao;\n+  @Autowired private CohortsController cohortsController;\n+  @Autowired private CohortQueryBuilder cohortQueryBuilder;\n+  @Autowired private ConceptSetsController conceptSetsController;\n+  @Autowired private DataSetController dataSetController;\n+  @Autowired private DataSetService dataSetService;\n+  @Autowired private FireCloudService fireCloudService;\n+  @Autowired private NotebooksService notebooksService;\n+  @Autowired private UserDao userDao;\n+  @Autowired private WorkspaceDao workspaceDao;\n+  @Autowired private WorkspacesController workspacesController;\n+\n+  @MockBean private BigQueryService mockBigQueryService;\n+\n+  //  @Mock Provider<DbUser> userProvider;\n \n   @TestConfiguration\n   @Import({\n-    WorkspaceResourcesServiceImpl.class,\n     CohortFactoryImpl.class,\n     CohortMapperImpl.class,\n     CohortReviewMapperImpl.class,\n     CohortReviewServiceImpl.class,\n+    CohortsController.class,\n+    CommonMappers.class,\n     ConceptService.class,\n     ConceptSetMapperImpl.class,\n+    ConceptSetsController.class,\n     ConceptSetService.class,\n+    DataSetController.class,\n     DataSetServiceImpl.class,\n-    TestBigQueryCdrSchemaConfig.class,\n-    WorkspacesController.class,\n-    WorkspaceServiceImpl.class,\n-    WorkspaceMapperImpl.class,\n-    CommonMappers.class,\n+    FirecloudMapperImpl.class,\n     LogsBasedMetricServiceFakeImpl.class,\n+    TestBigQueryCdrSchemaConfig.class,\n+    UserMapperImpl.class,\n     UserServiceTestConfiguration.class,\n+    WorkspaceMapperImpl.class,\n+    WorkspaceResourcesServiceImpl.class,\n+    WorkspaceResourcesServiceImpl.class,\n+    WorkspacesController.class,\n+    WorkspaceServiceImpl.class\n   })\n   @MockBean({", "originalCommit": "36d4dfde5187234608c18d9b06f70338bcb965de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a52f86eca9534ee05dbef71c3578f3303ee7cca5", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\nindex 3d6ae26bb..5d291bb18 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\n\n@@ -179,26 +177,22 @@ public class DataSetControllerTest {\n   private static final String FULL_PREFIX = String.format(\"dataset_%s_condition_\", PREFIX);\n \n   private static DbUser currentUser;\n-\n   private Workspace workspace;\n \n-  @Autowired private BillingProjectBufferService billingProjectBufferService;\n-  @Autowired private CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n   @Autowired private CdrVersionDao cdrVersionDao;\n   @Autowired private CohortsController cohortsController;\n-  @Autowired private CohortQueryBuilder cohortQueryBuilder;\n   @Autowired private ConceptSetsController conceptSetsController;\n   @Autowired private DataSetController dataSetController;\n-  @Autowired private DataSetService dataSetService;\n-  @Autowired private FireCloudService fireCloudService;\n-  @Autowired private NotebooksService notebooksService;\n   @Autowired private UserDao userDao;\n   @Autowired private WorkspaceDao workspaceDao;\n   @Autowired private WorkspacesController workspacesController;\n \n+  @MockBean private CdrBigQuerySchemaConfigService mockCdrBigQuerySchemaConfigService;\n+  @MockBean private BillingProjectBufferService mockBillingProjectBufferService;\n   @MockBean private BigQueryService mockBigQueryService;\n-\n-  //  @Mock Provider<DbUser> userProvider;\n+  @MockBean private CohortQueryBuilder mockCohortQueryBuilder;\n+  @MockBean private FireCloudService fireCloudService;\n+  @MockBean private NotebooksService mockNotebooksService;\n \n   @TestConfiguration\n   @Import({\n"}}, {"oid": "5dcee486cc1caacea922d9d65efcbc1f6828b62e", "url": "https://github.com/all-of-us/workbench/commit/5dcee486cc1caacea922d9d65efcbc1f6828b62e", "message": "merge", "committedDate": "2020-06-03T21:11:12Z", "type": "commit"}, {"oid": "4c630214b27bb9b470a73100a554ca7368453fb4", "url": "https://github.com/all-of-us/workbench/commit/4c630214b27bb9b470a73100a554ca7368453fb4", "message": "remove mismerged code", "committedDate": "2020-06-03T21:17:29Z", "type": "commit"}, {"oid": "68b3a4b731ea8fa19123cdf7d13ce3a269c571a9", "url": "https://github.com/all-of-us/workbench/commit/68b3a4b731ea8fa19123cdf7d13ce3a269c571a9", "message": "fix test", "committedDate": "2020-06-03T21:42:37Z", "type": "commit"}, {"oid": "8cf18a51fa1c211d1d89b129ff45f1d6ca79ce15", "url": "https://github.com/all-of-us/workbench/commit/8cf18a51fa1c211d1d89b129ff45f1d6ca79ce15", "message": "test fixes", "committedDate": "2020-06-04T15:53:21Z", "type": "commit"}, {"oid": "53e90d72df33a9a4d59df61391299a2ef7205a58", "url": "https://github.com/all-of-us/workbench/commit/53e90d72df33a9a4d59df61391299a2ef7205a58", "message": "add import & alphabetize", "committedDate": "2020-06-04T16:07:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NTQwMA==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r435895400", "bodyText": "Whats this used for?", "author": "NehaBroad", "createdAt": "2020-06-05T12:43:01Z", "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java", "diffHunk": "@@ -128,13 +136,20 @@\n     FreeTierBillingService.class,\n     NotebooksServiceImpl.class,\n     Provider.class,\n+    UserMapper.class,\n     WorkspaceMapperImpl.class\n   })\n   static class Configuration {\n     @Bean\n     public Clock clock() {\n       return CLOCK;\n     }\n+\n+    @Bean\n+    @Qualifier(CommonConfig.DATASET_PREFIX_CODE)\n+    String prefixCode() {\n+      return \"00000000\";", "originalCommit": "53e90d72df33a9a4d59df61391299a2ef7205a58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NzczOQ==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436777739", "bodyText": "it's a dataset identifier that's usually random. The test was previously spying on the (real) controller and overriding the value with all zeroes as if it were a mock.", "author": "jaycarlton", "createdAt": "2020-06-08T15:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NTQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "fdeddded288ad3cba8c545f8ce32e561105aae04", "chunk": "diff --git a/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java b/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java\nindex ac3a429a7..ea58e97cd 100644\n--- a/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java\n+++ b/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java\n\n@@ -146,7 +146,7 @@ public class DataSetControllerBQTest extends BigQueryBaseTest {\n     }\n \n     @Bean\n-    @Qualifier(CommonConfig.DATASET_PREFIX_CODE)\n+    @Qualifier(DatasetConfig.DATASET_PREFIX_CODE)\n     String prefixCode() {\n       return \"00000000\";\n     }\n"}}, {"oid": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36", "url": "https://github.com/all-of-us/workbench/commit/b06c4f0dcf111f33c6e125892ef92e6ca566cd36", "message": "dependency", "committedDate": "2020-06-08T15:27:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxMDY2Mw==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436810663", "bodyText": "\ud83d\udc4d", "author": "NehaBroad", "createdAt": "2020-06-08T15:49:50Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -97,8 +97,7 @@\n   // Importing the real one requires importing a large subtree of dependencies\n   @Bean\n   public WorkspaceService workspaceService() {\n-    return new WorkspaceServiceImpl(\n-        null, null, null, null, null, null, null, null, null, null, null, null, null, null);\n+    return new WorkspaceServiceFakeImpl();", "originalCommit": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNjEyNw==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436816127", "bodyText": "Question: Why did you use new ArrayList here?", "author": "NehaBroad", "createdAt": "2020-06-08T15:57:31Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java", "diffHunk": "@@ -272,4 +293,62 @@ public void testCapitalizeFirstCharacterOnly_emoji() {\n     assertThat((DataSetServiceImpl.capitalizeFirstCharacterOnly(\"\u30de\u30ea\u30aa\u306b\u611f\u8b1d\u3057\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306e\u738b\u5973\u306f\u5225\u306e\u57ce\u306b\u3044\u307e\u3059\")))\n         .isEqualTo(\"\u30de\u30ea\u30aa\u306b\u611f\u8b1d\u3057\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306e\u738b\u5973\u306f\u5225\u306e\u57ce\u306b\u3044\u307e\u3059\");\n   }\n+\n+  @Test\n+  public void testDomainToBigQueryConfig() {\n+    mockLinkingTableQuery(ImmutableList.of(\"FROM `\" + TEST_CDR_TABLE + \".person` person\"));\n+    final DataSetRequest dataSetRequest =\n+        new DataSetRequest()\n+            .conceptSetIds(Collections.emptyList())\n+            .cohortIds(new ArrayList<>())", "originalCommit": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMzAxOA==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436823018", "bodyText": "It's just moved from DataSetControllerTest.", "author": "jaycarlton", "createdAt": "2020-06-08T16:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNjEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyMzg4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436923883", "bodyText": "Updated to use Collections.emptyList() everywhere in this test.", "author": "jaycarlton", "createdAt": "2020-06-08T18:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNjEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "3eb6c3a81e154348f981a40a2de060bdcbc64db2", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java b/api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java\nindex 48e72f5c8..ec657aa9e 100644\n--- a/api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java\n\n@@ -300,8 +300,8 @@ public class DataSetServiceTest {\n     final DataSetRequest dataSetRequest =\n         new DataSetRequest()\n             .conceptSetIds(Collections.emptyList())\n-            .cohortIds(new ArrayList<>())\n-            .domainValuePairs(new ArrayList<>())\n+            .cohortIds(Collections.emptyList())\n+            .domainValuePairs(Collections.emptyList())\n             .name(\"blah\")\n             .prePackagedConceptSet(PrePackagedConceptSetEnum.NONE)\n             .cohortIds(COHORT_IDS)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxODk5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436818996", "bodyText": "Why did you decide to send null rather than Empty Object?", "author": "NehaBroad", "createdAt": "2020-06-08T16:01:38Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceFakeImpl.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.pmiops.workbench.workspaces;\n+\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.ForbiddenException;\n+import org.pmiops.workbench.exceptions.NotFoundException;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceACLUpdate;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResponse;\n+\n+public class WorkspaceServiceFakeImpl implements WorkspaceService {\n+\n+  @Override\n+  public WorkspaceDao getDao() {\n+    return null;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> findActiveByWorkspaceId(long workspaceId) {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public FireCloudService getFireCloudService() {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace get(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> getByNamespace(String workspaceNamespace) {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getWorkspacesAndPublicWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return null;\n+  }\n+\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace, String workspaceId) {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getPublishedWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace getRequired(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace getRequiredWithCohorts(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace saveWithLastModified(DbWorkspace workspace) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void deleteWorkspace(DbWorkspace dbWorkspace) {}\n+\n+  @Override\n+  public void updateWorkspaceBillingAccount(DbWorkspace workspace, String newBillingAccountName) {}\n+\n+  @Override\n+  public void validateActiveBilling(String workspaceNamespace, String workspaceId)\n+      throws ForbiddenException {}\n+\n+  @Override\n+  public List<DbWorkspace> findForReview() {\n+    return null;", "originalCommit": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMjIwMw==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436822203", "bodyText": "Oh i see because it was used as new WorkspaceService(null,null...)", "author": "NehaBroad", "createdAt": "2020-06-08T16:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxODk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMjUxMg==", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436822512", "bodyText": "This is just default codegen in IntelliJ. These should never be called.", "author": "jaycarlton", "createdAt": "2020-06-08T16:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxODk5Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3eb6c3a81e154348f981a40a2de060bdcbc64db2", "url": "https://github.com/all-of-us/workbench/commit/3eb6c3a81e154348f981a40a2de060bdcbc64db2", "message": "tweaks", "committedDate": "2020-06-08T17:45:45Z", "type": "commit"}, {"oid": "7d232dad727e24374230a3ca6ff078abe9085a35", "url": "https://github.com/all-of-us/workbench/commit/7d232dad727e24374230a3ca6ff078abe9085a35", "message": "spotless", "committedDate": "2020-06-08T18:18:37Z", "type": "commit"}, {"oid": "fdeddded288ad3cba8c545f8ce32e561105aae04", "url": "https://github.com/all-of-us/workbench/commit/fdeddded288ad3cba8c545f8ce32e561105aae04", "message": "fix moved ref", "committedDate": "2020-06-08T18:27:38Z", "type": "commit"}, {"oid": "b087ac0f504bf84da58cc046b10ec87adc36bf1b", "url": "https://github.com/all-of-us/workbench/commit/b087ac0f504bf84da58cc046b10ec87adc36bf1b", "message": "Merge branch 'master' into jaycarlton/mapperTweaks", "committedDate": "2020-06-09T13:55:09Z", "type": "commit"}]}