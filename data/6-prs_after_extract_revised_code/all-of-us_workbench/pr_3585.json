{"pr_number": 3585, "pr_title": "[RW-4952] Modify LoadInstitutions to enable updates", "pr_createdAt": "2020-05-15T13:38:40Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3585", "timeline": [{"oid": "fdf6c2b080ec76b066ac65f5cf34fb5385b09886", "url": "https://github.com/all-of-us/workbench/commit/fdf6c2b080ec76b066ac65f5cf34fb5385b09886", "message": "Update LoadInstitutions to update as well", "committedDate": "2020-05-14T23:19:08Z", "type": "commit"}, {"oid": "5af81bb915e8256aa93052e8d2082dbbd1bb6007", "url": "https://github.com/all-of-us/workbench/commit/5af81bb915e8256aa93052e8d2082dbbd1bb6007", "message": "Incoming email addresses and domains can be null", "committedDate": "2020-05-14T23:19:14Z", "type": "commit"}, {"oid": "066cfebbb87dc9fbf5d1e7e938a5d53ad2b002dc", "url": "https://github.com/all-of-us/workbench/commit/066cfebbb87dc9fbf5d1e7e938a5d53ad2b002dc", "message": "this magic trick brought to you by CH", "committedDate": "2020-05-14T23:19:14Z", "type": "commit"}, {"oid": "674a0e6e0317561f495afcb54e273a157e22abe3", "url": "https://github.com/all-of-us/workbench/commit/674a0e6e0317561f495afcb54e273a157e22abe3", "message": "Transactional hack text", "committedDate": "2020-05-15T13:34:15Z", "type": "commit"}, {"oid": "bb311b0a1600a0e988257959517ac73201fbb7e4", "url": "https://github.com/all-of-us/workbench/commit/bb311b0a1600a0e988257959517ac73201fbb7e4", "message": "Not sure I trust the claim of NotNull", "committedDate": "2020-05-15T13:50:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNTg0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3585#discussion_r425815846", "bodyText": "Removed the claim of NotNull - this is safer", "author": "jmthibault79", "createdAt": "2020-05-15T13:51:16Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitution.java", "diffHunk": "@@ -110,10 +112,11 @@ public DbInstitution setOrganizationTypeOtherText(String organizationTypeOtherTe\n    *\n    * @param emailDomains the new collection of domains for this Institution\n    */\n-  public DbInstitution setEmailDomains(\n-      @NotNull final Collection<DbInstitutionEmailDomain> emailDomains) {\n+  public DbInstitution setEmailDomains(final Collection<DbInstitutionEmailDomain> emailDomains) {\n     final Set<DbInstitutionEmailDomain> attachedDomains =\n-        emailDomains.stream()\n+        Optional.ofNullable(emailDomains)", "originalCommit": "bb311b0a1600a0e988257959517ac73201fbb7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNjE2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3585#discussion_r425816167", "bodyText": "part of the @Transactional hack", "author": "jmthibault79", "createdAt": "2020-05-15T13:51:48Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java", "diffHunk": "@@ -28,6 +28,7 @@\n   InstitutionUserInstructionsMapperImpl.class,\n   PublicInstitutionDetailsMapperImpl.class,\n })\n+@EnableTransactionManagement", "originalCommit": "bb311b0a1600a0e988257959517ac73201fbb7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49573a0232942d38b7412939e78940ebfab0db6b", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java b/api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java\nindex de93cf470..d08ff7940 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java\n\n@@ -32,58 +32,48 @@ import org.springframework.transaction.annotation.EnableTransactionManagement;\n public class LoadInstitutions {\n \n   private static final Logger log = Logger.getLogger(LoadInstitutions.class.getName());\n+  private static final ObjectMapper mapper = new ObjectMapper();\n \n-  private static Option importFilename =\n+  private static final Option importFilename =\n       Option.builder()\n           .longOpt(\"import-filename\")\n           .desc(\"File containing JSON for institutions to save\")\n           .required()\n           .hasArg()\n           .build();\n-  private static Option dryRunOpt =\n+  private static final Option dryRunOpt =\n       Option.builder()\n           .longOpt(\"dry-run\")\n           .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n           .build();\n \n-  private static Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+  private static final Options options =\n+      new Options().addOption(importFilename).addOption(dryRunOpt);\n \n   @Bean\n   public CommandLineRunner run(InstitutionService institutionService) {\n     return (args) -> {\n-      CommandLine opts = new DefaultParser().parse(options, args);\n+      final CommandLine opts = new DefaultParser().parse(options, args);\n       boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n \n-      try (BufferedReader reader =\n-          new BufferedReader(new FileReader(opts.getOptionValue(importFilename.getLongOpt())))) {\n-        ObjectMapper mapper = new ObjectMapper();\n-        Institution[] institutions = mapper.readValue(reader, Institution[].class);\n-\n-        for (Institution institution : institutions) {\n-          Optional<Institution> fetchedInstitutionMaybe =\n-              institutionService.getInstitution(institution.getShortName());\n-          if (fetchedInstitutionMaybe.isPresent()) {\n-            if (fetchedInstitutionMaybe.get().equals(institution)) {\n-              log.info(\"Skipping... Entry already exists for \" + institution.getShortName());\n-            } else {\n-              if (!dryRun) {\n-                institutionService.updateInstitution(institution.getShortName(), institution);\n-              }\n-              dryLog(dryRun, \"Updated \" + institution.toString());\n-            }\n-\n-            continue;\n-          }\n-\n-          if (!dryRun) {\n-            institutionService.createInstitution(institution);\n-          }\n-          dryLog(dryRun, \"Saved \" + institution.toString());\n+      for (final Institution institution : read(opts.getOptionValue(importFilename.getLongOpt()))) {\n+        if (!dryRun) {\n+          institutionService\n+              .updateInstitution(institution.getShortName(), institution)\n+              // here I mean \"ifNotPresent()\"\n+              .orElseGet(() -> institutionService.createInstitution(institution));\n         }\n+        dryLog(dryRun, \"Updated or Created \" + institution.toString());\n       }\n     };\n   }\n \n+  private static Institution[] read(final String filename) throws IOException {\n+    try (final BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n+      return mapper.readValue(reader, Institution[].class);\n+    }\n+  }\n+\n   private static void dryLog(boolean dryRun, String msg) {\n     String prefix = \"\";\n     if (dryRun) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNzE2Mw==", "url": "https://github.com/all-of-us/workbench/pull/3585#discussion_r425817163", "bodyText": "No longer necessary after #3567", "author": "jmthibault79", "createdAt": "2020-05-15T13:53:11Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java", "diffHunk": "@@ -59,22 +60,18 @@ public CommandLineRunner run(InstitutionService institutionService) {\n         Institution[] institutions = mapper.readValue(reader, Institution[].class);\n \n         for (Institution institution : institutions) {\n-          Optional<Institution> institutionMaybe =\n+          Optional<Institution> fetchedInstitutionMaybe =\n               institutionService.getInstitution(institution.getShortName());\n-          if (institutionMaybe.isPresent()) {\n-            log.info(\"Skipping... Entry already exists for \" + institution.getShortName());\n-            Institution fetchedInstitution = institutionMaybe.get();\n-            fetchedInstitution.getEmailDomains().sort(Comparator.naturalOrder());", "originalCommit": "bb311b0a1600a0e988257959517ac73201fbb7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49573a0232942d38b7412939e78940ebfab0db6b", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java b/api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java\nindex de93cf470..d08ff7940 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java\n\n@@ -32,58 +32,48 @@ import org.springframework.transaction.annotation.EnableTransactionManagement;\n public class LoadInstitutions {\n \n   private static final Logger log = Logger.getLogger(LoadInstitutions.class.getName());\n+  private static final ObjectMapper mapper = new ObjectMapper();\n \n-  private static Option importFilename =\n+  private static final Option importFilename =\n       Option.builder()\n           .longOpt(\"import-filename\")\n           .desc(\"File containing JSON for institutions to save\")\n           .required()\n           .hasArg()\n           .build();\n-  private static Option dryRunOpt =\n+  private static final Option dryRunOpt =\n       Option.builder()\n           .longOpt(\"dry-run\")\n           .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n           .build();\n \n-  private static Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+  private static final Options options =\n+      new Options().addOption(importFilename).addOption(dryRunOpt);\n \n   @Bean\n   public CommandLineRunner run(InstitutionService institutionService) {\n     return (args) -> {\n-      CommandLine opts = new DefaultParser().parse(options, args);\n+      final CommandLine opts = new DefaultParser().parse(options, args);\n       boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n \n-      try (BufferedReader reader =\n-          new BufferedReader(new FileReader(opts.getOptionValue(importFilename.getLongOpt())))) {\n-        ObjectMapper mapper = new ObjectMapper();\n-        Institution[] institutions = mapper.readValue(reader, Institution[].class);\n-\n-        for (Institution institution : institutions) {\n-          Optional<Institution> fetchedInstitutionMaybe =\n-              institutionService.getInstitution(institution.getShortName());\n-          if (fetchedInstitutionMaybe.isPresent()) {\n-            if (fetchedInstitutionMaybe.get().equals(institution)) {\n-              log.info(\"Skipping... Entry already exists for \" + institution.getShortName());\n-            } else {\n-              if (!dryRun) {\n-                institutionService.updateInstitution(institution.getShortName(), institution);\n-              }\n-              dryLog(dryRun, \"Updated \" + institution.toString());\n-            }\n-\n-            continue;\n-          }\n-\n-          if (!dryRun) {\n-            institutionService.createInstitution(institution);\n-          }\n-          dryLog(dryRun, \"Saved \" + institution.toString());\n+      for (final Institution institution : read(opts.getOptionValue(importFilename.getLongOpt()))) {\n+        if (!dryRun) {\n+          institutionService\n+              .updateInstitution(institution.getShortName(), institution)\n+              // here I mean \"ifNotPresent()\"\n+              .orElseGet(() -> institutionService.createInstitution(institution));\n         }\n+        dryLog(dryRun, \"Updated or Created \" + institution.toString());\n       }\n     };\n   }\n \n+  private static Institution[] read(final String filename) throws IOException {\n+    try (final BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n+      return mapper.readValue(reader, Institution[].class);\n+    }\n+  }\n+\n   private static void dryLog(boolean dryRun, String msg) {\n     String prefix = \"\";\n     if (dryRun) {\n"}}, {"oid": "49573a0232942d38b7412939e78940ebfab0db6b", "url": "https://github.com/all-of-us/workbench/commit/49573a0232942d38b7412939e78940ebfab0db6b", "message": "refactoring", "committedDate": "2020-05-15T15:42:51Z", "type": "commit"}]}