{"pr_number": 2978, "pr_title": "[RW-4226][RISK=no] Use descriptive, unique-per-instance MonitoredResource specification", "pr_createdAt": "2020-01-07T21:20:07Z", "pr_url": "https://github.com/all-of-us/workbench/pull/2978", "timeline": [{"oid": "9f872e9cdbf17062928e485c68fccd065100749a", "url": "https://github.com/all-of-us/workbench/commit/9f872e9cdbf17062928e485c68fccd065100749a", "message": "initial progress", "committedDate": "2020-01-06T23:16:22Z", "type": "commit"}, {"oid": "5c7de5386fb260d7b2cdd715bff536efab7aa14d", "url": "https://github.com/all-of-us/workbench/commit/5c7de5386fb260d7b2cdd715bff536efab7aa14d", "message": "Merge branch 'master' into jaycarlton/RW-4226", "committedDate": "2020-01-07T18:49:41Z", "type": "commit"}, {"oid": "d50cf46a5ef3c4857e7631ca095b1c878c573cc3", "url": "https://github.com/all-of-us/workbench/commit/d50cf46a5ef3c4857e7631ca095b1c878c573cc3", "message": "working locally", "committedDate": "2020-01-07T20:58:49Z", "type": "commit"}, {"oid": "cb6ce1700833856523f3e22032574e578e39f9d6", "url": "https://github.com/all-of-us/workbench/commit/cb6ce1700833856523f3e22032574e578e39f9d6", "message": "location id for all envs", "committedDate": "2020-01-07T21:11:46Z", "type": "commit"}, {"oid": "d4adef652b8eefd9a5ccaaf31e15d79d5254ba20", "url": "https://github.com/all-of-us/workbench/commit/d4adef652b8eefd9a5ccaaf31e15d79d5254ba20", "message": "tests", "committedDate": "2020-01-07T22:52:04Z", "type": "commit"}, {"oid": "409ce2a09b89b2fd6e066582d4d49cecd1c6a996", "url": "https://github.com/all-of-us/workbench/commit/409ce2a09b89b2fd6e066582d4d49cecd1c6a996", "message": "spotless", "committedDate": "2020-01-08T13:45:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NTE5Ng==", "url": "https://github.com/all-of-us/workbench/pull/2978#discussion_r364445196", "bodyText": "Is there a plan to have this return the actual location in the future?  Please add a comment.", "author": "jmthibault79", "createdAt": "2020-01-08T21:12:09Z", "path": "api/src/main/java/org/pmiops/workbench/monitoring/StackdriverStatsExporterService.java", "diffHunk": "@@ -34,23 +49,68 @@ public StackdriverStatsExporterService(Provider<WorkbenchConfig> workbenchConfig\n   public void createAndRegister() {\n     if (!initialized) {\n       try {\n-        final StackdriverStatsConfiguration configuration =\n-            StackdriverStatsConfiguration.builder()\n-                .setMetricNamePrefix(buildMetricNamePrefix())\n-                .setProjectId(workbenchConfigProvider.get().server.projectId)\n-                .build();\n+        final StackdriverStatsConfiguration configuration = makeStackdriverStatsConfiguration();\n         StackdriverStatsExporter.createAndRegister(configuration);\n+        logger.info(\n+            String.format(\n+                \"Configured StackDriver exports with configuration:\\n%s\",\n+                configuration.toString()));\n         initialized = true;\n       } catch (IOException e) {\n         logger.log(Level.WARNING, \"Failed to initialize global StackdriverStatsExporter.\", e);\n       }\n     }\n   }\n \n+  @VisibleForTesting\n+  public StackdriverStatsConfiguration makeStackdriverStatsConfiguration() {\n+    return StackdriverStatsConfiguration.builder()\n+        .setMetricNamePrefix(buildMetricNamePrefix())\n+        .setProjectId(getProjectId())\n+        .setMonitoredResource(makeMonitoredResource())\n+        .build();\n+  }\n+\n+  private MonitoredResource makeMonitoredResource() {\n+    final MonitoredResource.Builder resultBuilder =\n+        MonitoredResource.newBuilder()\n+            .setType(MONITORED_RESOURCE_TYPE)\n+            .putLabels(PROJECT_ID_LABEL, getProjectId())\n+            .putLabels(LOCATION_LABEL, getLocation())\n+            .putLabels(NAMESPACE_LABEL, getEnvironmentShortName())\n+            .putLabels(NODE_ID_LABEL, getNodeId());\n+\n+    return resultBuilder.build();\n+  }\n+\n+  private String getProjectId() {\n+    return workbenchConfigProvider.get().server.projectId;\n+  }\n+\n+  private String getLocation() {\n+    return workbenchConfigProvider.get().server.appEngineLocationId;", "originalCommit": "409ce2a09b89b2fd6e066582d4d49cecd1c6a996", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxNTU5Ng==", "url": "https://github.com/all-of-us/workbench/pull/2978#discussion_r364915596", "bodyText": "Plan would be to have this set in the config at deploy time based on a gcloud command. It's app-wide.\nCan't add comments to the JSON file tho.", "author": "jaycarlton", "createdAt": "2020-01-09T19:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyMDYyMw==", "url": "https://github.com/all-of-us/workbench/pull/2978#discussion_r364920623", "bodyText": "OK", "author": "jmthibault79", "createdAt": "2020-01-09T19:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NTE5Ng=="}], "type": "inlineReview", "revised_code": null}]}