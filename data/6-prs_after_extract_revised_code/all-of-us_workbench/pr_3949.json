{"pr_number": 3949, "pr_title": "[RW-5268, RW-5267] Schema updates and data  pipeline for MVP delivery", "pr_createdAt": "2020-09-01T17:02:53Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3949", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzNTcwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r486535709", "bodyText": "TODO: generate the mocks and assertions for the projections and DTOs.", "author": "jaycarlton", "createdAt": "2020-09-10T18:06:54Z", "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceTest.java", "diffHunk": "@@ -127,29 +128,28 @@ public void testGetSnapshot_someEntries() {\n     final ReportingWorkspace workspace1 = snapshot.getWorkspaces().get(0);\n     assertThat(workspace1.getWorkspaceId()).isEqualTo(101L);\n     assertThat(workspace1.getName()).isEqualTo(\"A Tale of Two Cities\");\n-    assertThat(workspace1.getFakeSize()).isEqualTo(100L);\n     assertThat(workspace1.getCreatorId()).isNull(); // not stubbed\n   }\n \n   private void mockUsers() {\n-    final List<DbUser> users =\n+    final List<PrjReportingUser> users =\n         ImmutableList.of(\n-            createFakeUser(USER_GIVEN_NAME_1, USER_DISABLED_1, USER_ID_1),\n-            createFakeUser(\"Homer\", false, 102L));\n-    doReturn(users).when(mockUserService).getAllUsers();\n+            mockUserProjection(USER_GIVEN_NAME_1, USER_DISABLED_1, USER_ID_1),\n+            mockUserProjection(\"Homer\", false, 102L));\n+    doReturn(users).when(mockUserService).getRepotingUsers();\n   }\n \n-  private DbUser createFakeUser(String givenName, boolean disabled, long userId) {\n-    DbUser user = new DbUser();\n-    user.setUserId(userId);\n-    user.setGivenName(givenName);\n-    user.setFamilyName(FAMILY_NAME);\n-    user.setUsername(PRIMARY_EMAIL);\n-    user.setContactEmail(CONTACT_EMAIL);\n-    user.setOrganization(ORGANIZATION);\n-    user.setCurrentPosition(CURRENT_POSITION);\n-    user.setAreaOfResearch(RESEARCH_PURPOSE);\n-    user.setDisabled(disabled);\n+  private PrjReportingUser mockUserProjection(String givenName, boolean disabled, long userId) {\n+    final PrjReportingUser user = mock(PrjReportingUser.class);", "originalCommit": "235a771e1b1f3ced9a228b7b0e552d131f77fd55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a55490889d0741363394bf2e1ffea68f922c04b8", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceTest.java b/api/src/test/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceTest.java\nindex 150490a7a..f59ef8e1b 100644\n--- a/api/src/test/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceTest.java\n\n@@ -128,28 +127,29 @@ public class ReportingSnapshotServiceTest {\n     final ReportingWorkspace workspace1 = snapshot.getWorkspaces().get(0);\n     assertThat(workspace1.getWorkspaceId()).isEqualTo(101L);\n     assertThat(workspace1.getName()).isEqualTo(\"A Tale of Two Cities\");\n+    assertThat(workspace1.getFakeSize()).isEqualTo(100L);\n     assertThat(workspace1.getCreatorId()).isNull(); // not stubbed\n   }\n \n   private void mockUsers() {\n-    final List<PrjReportingUser> users =\n+    final List<DbUser> users =\n         ImmutableList.of(\n-            mockUserProjection(USER_GIVEN_NAME_1, USER_DISABLED_1, USER_ID_1),\n-            mockUserProjection(\"Homer\", false, 102L));\n-    doReturn(users).when(mockUserService).getRepotingUsers();\n+            createFakeUser(USER_GIVEN_NAME_1, USER_DISABLED_1, USER_ID_1),\n+            createFakeUser(\"Homer\", false, 102L));\n+    doReturn(users).when(mockUserService).getAllUsers();\n   }\n \n-  private PrjReportingUser mockUserProjection(String givenName, boolean disabled, long userId) {\n-    final PrjReportingUser user = mock(PrjReportingUser.class);\n-    doReturn(userId).when(user).getUserId();\n-    doReturn(givenName).when(user).getGivenName();\n-    doReturn(FAMILY_NAME).when(user).getFamilyName();\n-    doReturn(PRIMARY_EMAIL).when(user).getUsername();\n-    doReturn(CONTACT_EMAIL).when(user).getContactEmail();\n-    doReturn(ORGANIZATION).when(user).getOrganization();\n-    doReturn(CURRENT_POSITION).when(user).getCurrentPosition();\n-    doReturn(RESEARCH_PURPOSE).when(user).getAreaOfResearch();\n-    doReturn(disabled).when(user).getDisabled();\n+  private DbUser createFakeUser(String givenName, boolean disabled, long userId) {\n+    DbUser user = new DbUser();\n+    user.setUserId(userId);\n+    user.setGivenName(givenName);\n+    user.setFamilyName(FAMILY_NAME);\n+    user.setUsername(PRIMARY_EMAIL);\n+    user.setContactEmail(CONTACT_EMAIL);\n+    user.setOrganization(ORGANIZATION);\n+    user.setCurrentPosition(CURRENT_POSITION);\n+    user.setAreaOfResearch(RESEARCH_PURPOSE);\n+    user.setDisabled(disabled);\n     return user;\n   }\n \n"}}, {"oid": "a55490889d0741363394bf2e1ffea68f922c04b8", "url": "https://github.com/all-of-us/workbench/commit/a55490889d0741363394bf2e1ffea68f922c04b8", "message": "rebased", "committedDate": "2020-09-10T18:13:07Z", "type": "commit"}, {"oid": "71e921c6c7390eee4639fc7d7fbe6e66c2a189eb", "url": "https://github.com/all-of-us/workbench/commit/71e921c6c7390eee4639fc7d7fbe6e66c2a189eb", "message": "rebased to get tooling", "committedDate": "2020-09-10T18:15:09Z", "type": "forcePushed"}, {"oid": "6fad502fc7ec6f2b9735c9062cdaa1e7447b2030", "url": "https://github.com/all-of-us/workbench/commit/6fad502fc7ec6f2b9735c9062cdaa1e7447b2030", "message": "alphabetize columns and print output from subprorcess", "committedDate": "2020-09-10T18:33:29Z", "type": "commit"}, {"oid": "bf7327da516c8bed19c634bd5e9846866ff82c2d", "url": "https://github.com/all-of-us/workbench/commit/bf7327da516c8bed19c634bd5e9846866ff82c2d", "message": "fixup exclude processing", "committedDate": "2020-09-10T18:39:47Z", "type": "commit"}, {"oid": "1ff4b81feac7cf58005dfc391bad623e425fdd14", "url": "https://github.com/all-of-us/workbench/commit/1ff4b81feac7cf58005dfc391bad623e425fdd14", "message": "cleanup output, indent yaml, and make interface public", "committedDate": "2020-09-10T21:37:42Z", "type": "commit"}, {"oid": "23b9f7394a33cf2c888ca22666f9307b43e31bf0", "url": "https://github.com/all-of-us/workbench/commit/23b9f7394a33cf2c888ca22666f9307b43e31bf0", "message": "email -> username at source & use BqDto prefix", "committedDate": "2020-09-10T21:41:26Z", "type": "commit"}, {"oid": "e29dc6686493e0332b83903e26ea47ce5675e1b1", "url": "https://github.com/all-of-us/workbench/commit/e29dc6686493e0332b83903e26ea47ce5675e1b1", "message": "remove comment", "committedDate": "2020-09-10T21:45:13Z", "type": "forcePushed"}, {"oid": "67330d68aeb791423abaeb912b1dd441c6de880b", "url": "https://github.com/all-of-us/workbench/commit/67330d68aeb791423abaeb912b1dd441c6de880b", "message": "fix newlines in queries and add projection fucntion decl", "committedDate": "2020-09-10T22:30:07Z", "type": "commit"}, {"oid": "27b20c516b4d37722344cf788806fffe72c9c0eb", "url": "https://github.com/all-of-us/workbench/commit/27b20c516b4d37722344cf788806fffe72c9c0eb", "message": "integrrate more of the new types", "committedDate": "2020-09-10T22:30:57Z", "type": "forcePushed"}, {"oid": "ffef953e334f4967bd7040820d39f80f81548415", "url": "https://github.com/all-of-us/workbench/commit/ffef953e334f4967bd7040820d39f80f81548415", "message": "patch for research purpose entity naming convention", "committedDate": "2020-09-11T15:50:22Z", "type": "commit"}, {"oid": "6ba36379bf720f3e7132c3098c63eb0351e11f60", "url": "https://github.com/all-of-us/workbench/commit/6ba36379bf720f3e7132c3098c63eb0351e11f60", "message": "fixes", "committedDate": "2020-09-11T18:47:27Z", "type": "commit"}, {"oid": "6791e38b83661e2cb42bffd3fb977bfb5f09c8be", "url": "https://github.com/all-of-us/workbench/commit/6791e38b83661e2cb42bffd3fb977bfb5f09c8be", "message": "PR comments", "committedDate": "2020-09-11T19:22:12Z", "type": "commit"}, {"oid": "14ca852747d563fdc3ed733643ad0507ab490de7", "url": "https://github.com/all-of-us/workbench/commit/14ca852747d563fdc3ed733643ad0507ab490de7", "message": "rebased to get tooling", "committedDate": "2020-09-11T19:24:35Z", "type": "commit"}, {"oid": "364956bb5c0652cb0dcfdc70d7c77ae9f78d514b", "url": "https://github.com/all-of-us/workbench/commit/364956bb5c0652cb0dcfdc70d7c77ae9f78d514b", "message": "remove comment", "committedDate": "2020-09-11T19:24:35Z", "type": "commit"}, {"oid": "80d78a7ced0d963e10deef01abe298aa051ad26e", "url": "https://github.com/all-of-us/workbench/commit/80d78a7ced0d963e10deef01abe298aa051ad26e", "message": "starting to merge the generated stuff", "committedDate": "2020-09-11T19:24:35Z", "type": "commit"}, {"oid": "2d71c07d8d13b8a903460d996b07b334f9bab83e", "url": "https://github.com/all-of-us/workbench/commit/2d71c07d8d13b8a903460d996b07b334f9bab83e", "message": "remove comment", "committedDate": "2020-09-11T19:24:35Z", "type": "commit"}, {"oid": "2dcded35a425dbd1bd31585eb217cb69c1b89bcc", "url": "https://github.com/all-of-us/workbench/commit/2dcded35a425dbd1bd31585eb217cb69c1b89bcc", "message": "integrrate more of the new types", "committedDate": "2020-09-11T19:24:35Z", "type": "commit"}, {"oid": "5d9a96b86929208f47a6d97ff7209302b31a086f", "url": "https://github.com/all-of-us/workbench/commit/5d9a96b86929208f47a6d97ff7209302b31a086f", "message": "fixes", "committedDate": "2020-09-11T19:24:36Z", "type": "commit"}, {"oid": "12e5c66a6a8c2aab98b72c66582ba6fa602d2aa4", "url": "https://github.com/all-of-us/workbench/commit/12e5c66a6a8c2aab98b72c66582ba6fa602d2aa4", "message": "more fixes", "committedDate": "2020-09-11T19:24:36Z", "type": "commit"}, {"oid": "91713a59b7c854b4ed99e40b13e950a8f13b4c51", "url": "https://github.com/all-of-us/workbench/commit/91713a59b7c854b4ed99e40b13e950a8f13b4c51", "message": "updated", "committedDate": "2020-09-11T19:24:36Z", "type": "commit"}, {"oid": "8aa7af28360219041ed59516c34e3670ed4c06a5", "url": "https://github.com/all-of-us/workbench/commit/8aa7af28360219041ed59516c34e3670ed4c06a5", "message": "compiles & runs test now", "committedDate": "2020-09-11T19:43:56Z", "type": "commit"}, {"oid": "c9a32063ac848f20cb4188b5cc2edae3022ff8f9", "url": "https://github.com/all-of-us/workbench/commit/c9a32063ac848f20cb4188b5cc2edae3022ff8f9", "message": "integrating unit test", "committedDate": "2020-09-11T21:53:09Z", "type": "commit"}, {"oid": "c9a32063ac848f20cb4188b5cc2edae3022ff8f9", "url": "https://github.com/all-of-us/workbench/commit/c9a32063ac848f20cb4188b5cc2edae3022ff8f9", "message": "integrating unit test", "committedDate": "2020-09-11T21:53:09Z", "type": "forcePushed"}, {"oid": "7f61354bbbb32bfbe1054f643090822d1f2eff3f", "url": "https://github.com/all-of-us/workbench/commit/7f61354bbbb32bfbe1054f643090822d1f2eff3f", "message": "merge master", "committedDate": "2020-09-11T22:10:01Z", "type": "commit"}, {"oid": "846aacd2d102e024bccd06b8c192376ec92b9865", "url": "https://github.com/all-of-us/workbench/commit/846aacd2d102e024bccd06b8c192376ec92b9865", "message": "user test case", "committedDate": "2020-09-12T22:45:52Z", "type": "commit"}, {"oid": "a54c82584fa540571f04ef6b8aa8f13c3fa6d25a", "url": "https://github.com/all-of-us/workbench/commit/a54c82584fa540571f04ef6b8aa8f13c3fa6d25a", "message": "timestamp fixes and unique values for all constants", "committedDate": "2020-09-14T15:13:12Z", "type": "commit"}, {"oid": "1e0a104e4b25bf6b9d182b2e456a4adcca26f1c7", "url": "https://github.com/all-of-us/workbench/commit/1e0a104e4b25bf6b9d182b2e456a4adcca26f1c7", "message": "spotless", "committedDate": "2020-09-14T15:30:35Z", "type": "commit"}, {"oid": "968e2dbabce6b031f36c38d3a28050edc1aed692", "url": "https://github.com/all-of-us/workbench/commit/968e2dbabce6b031f36c38d3a28050edc1aed692", "message": "integrate query parameter column entries adn fixup tests", "committedDate": "2020-09-14T20:26:17Z", "type": "commit"}, {"oid": "054b9ec97f73070be8a6cd478403598ccbc92c17", "url": "https://github.com/all-of-us/workbench/commit/054b9ec97f73070be8a6cd478403598ccbc92c17", "message": "manage things a bit better", "committedDate": "2020-09-14T21:21:57Z", "type": "commit"}, {"oid": "9740201eff4ba053b1dd7cb99d03456241b3aba2", "url": "https://github.com/all-of-us/workbench/commit/9740201eff4ba053b1dd7cb99d03456241b3aba2", "message": "stub the DTO too", "committedDate": "2020-09-14T21:45:27Z", "type": "commit"}, {"oid": "42aa8019c20769f8dfb19cc2255bfd2852033cf5", "url": "https://github.com/all-of-us/workbench/commit/42aa8019c20769f8dfb19cc2255bfd2852033cf5", "message": "rename method", "committedDate": "2020-09-14T21:47:58Z", "type": "commit"}, {"oid": "c28c7b3832f03111656e0f8fe0e133c137fb0679", "url": "https://github.com/all-of-us/workbench/commit/c28c7b3832f03111656e0f8fe0e133c137fb0679", "message": "start fixing up the time strings", "committedDate": "2020-09-15T00:40:09Z", "type": "commit"}, {"oid": "211a5fe466a7f07f4e83d1c1cc24c255817e46c5", "url": "https://github.com/all-of-us/workbench/commit/211a5fe466a7f07f4e83d1c1cc24c255817e46c5", "message": "complete updates to parameter enums", "committedDate": "2020-09-15T14:18:40Z", "type": "commit"}, {"oid": "cf82bcea877f10e7462742dfeb7338b8233c5625", "url": "https://github.com/all-of-us/workbench/commit/cf82bcea877f10e7462742dfeb7338b8233c5625", "message": "use LocalDateTiem to parse, then add zone later", "committedDate": "2020-09-15T14:33:46Z", "type": "commit"}, {"oid": "c24ba2ede63a8db3127c6a0df13b3ef559f0ea5d", "url": "https://github.com/all-of-us/workbench/commit/c24ba2ede63a8db3127c6a0df13b3ef559f0ea5d", "message": "update schemas", "committedDate": "2020-09-15T15:09:34Z", "type": "commit"}, {"oid": "a992889b782a691ba5d03927d9b628fc71e6b6d6", "url": "https://github.com/all-of-us/workbench/commit/a992889b782a691ba5d03927d9b628fc71e6b6d6", "message": "restore cron script", "committedDate": "2020-09-15T15:33:27Z", "type": "commit"}, {"oid": "6212d96a394199d49838f03f24fed87d55258809", "url": "https://github.com/all-of-us/workbench/commit/6212d96a394199d49838f03f24fed87d55258809", "message": "Merge branch 'master' into jaycarlton/projectionTest2", "committedDate": "2020-09-15T15:33:31Z", "type": "commit"}, {"oid": "1987b532e9b3606d1ecd6f6b52b34539674717b2", "url": "https://github.com/all-of-us/workbench/commit/1987b532e9b3606d1ecd6f6b52b34539674717b2", "message": "more fixes for types like Short", "committedDate": "2020-09-16T17:38:38Z", "type": "commit"}, {"oid": "a7eb77cc193af075050653a8e066a2dd042f7457", "url": "https://github.com/all-of-us/workbench/commit/a7eb77cc193af075050653a8e066a2dd042f7457", "message": "test stuff", "committedDate": "2020-09-16T20:49:13Z", "type": "commit"}, {"oid": "3e4f149b79e2c88752ac2493b7fc451d98e2834f", "url": "https://github.com/all-of-us/workbench/commit/3e4f149b79e2c88752ac2493b7fc451d98e2834f", "message": "Merge branch 'master' into jaycarlton/projectionTest2", "committedDate": "2020-09-16T21:17:35Z", "type": "commit"}, {"oid": "06f09fbad6b4a417a646dc456055a8f72cf3500c", "url": "https://github.com/all-of-us/workbench/commit/06f09fbad6b4a417a646dc456055a8f72cf3500c", "message": "start using enum columns", "committedDate": "2020-09-16T23:10:04Z", "type": "commit"}, {"oid": "397ee33665f1a8a3e696e25a09afbcad261ed3d6", "url": "https://github.com/all-of-us/workbench/commit/397ee33665f1a8a3e696e25a09afbcad261ed3d6", "message": "workspace dao test works", "committedDate": "2020-09-16T23:23:40Z", "type": "commit"}, {"oid": "3fbc4d12b4a32e265af4d5c750e3127dbe4c27c9", "url": "https://github.com/all-of-us/workbench/commit/3fbc4d12b4a32e265af4d5c750e3127dbe4c27c9", "message": "fixes for enums", "committedDate": "2020-09-17T14:29:06Z", "type": "commit"}, {"oid": "3da11436ead5ae3dbf820ee1f113e38a794d52e6", "url": "https://github.com/all-of-us/workbench/commit/3da11436ead5ae3dbf820ee1f113e38a794d52e6", "message": "fixed up more idiosyncracies and tests pass now", "committedDate": "2020-09-17T18:42:00Z", "type": "commit"}, {"oid": "21c5e815ef6ccd7e4dc7fdebb2b4e53ac74c042c", "url": "https://github.com/all-of-us/workbench/commit/21c5e815ef6ccd7e4dc7fdebb2b4e53ac74c042c", "message": "fix", "committedDate": "2020-09-17T19:36:35Z", "type": "commit"}, {"oid": "8a6fa04fdd7e9d813e95662d96063e77ad70a4d6", "url": "https://github.com/all-of-us/workbench/commit/8a6fa04fdd7e9d813e95662d96063e77ad70a4d6", "message": "progress", "committedDate": "2020-09-17T22:42:40Z", "type": "commit"}, {"oid": "0dc903d3146f5bb21a3cc31fb0d7134c5b7656c3", "url": "https://github.com/all-of-us/workbench/commit/0dc903d3146f5bb21a3cc31fb0d7134c5b7656c3", "message": "fill in test cases", "committedDate": "2020-09-18T13:21:39Z", "type": "commit"}, {"oid": "a7a264c0b37f3f81d73fa6c21b5ed5a31b319175", "url": "https://github.com/all-of-us/workbench/commit/a7a264c0b37f3f81d73fa6c21b5ed5a31b319175", "message": "spotless & test fixes", "committedDate": "2020-09-18T14:42:42Z", "type": "commit"}, {"oid": "f3c601bc40ca0d31fcd3e64de0b7578a2d7be776", "url": "https://github.com/all-of-us/workbench/commit/f3c601bc40ca0d31fcd3e64de0b7578a2d7be776", "message": "dont include null columns in RowToInsert content map", "committedDate": "2020-09-18T15:43:58Z", "type": "commit"}, {"oid": "ec47fee4d52015d68f2a516d96f00f6a58b201e2", "url": "https://github.com/all-of-us/workbench/commit/ec47fee4d52015d68f2a516d96f00f6a58b201e2", "message": "enum string fix", "committedDate": "2020-09-18T17:29:49Z", "type": "commit"}, {"oid": "c7e740b9f0ef28faa4e9897b3ea79598bb84ab0f", "url": "https://github.com/all-of-us/workbench/commit/c7e740b9f0ef28faa4e9897b3ea79598bb84ab0f", "message": "more fixes", "committedDate": "2020-09-18T20:21:32Z", "type": "commit"}, {"oid": "afc36a3f4cf4961ce3d66041567c791a598ecdaf", "url": "https://github.com/all-of-us/workbench/commit/afc36a3f4cf4961ce3d66041567c791a598ecdaf", "message": "simplified", "committedDate": "2020-09-21T00:42:01Z", "type": "commit"}, {"oid": "7ea1d4335d817765ca2ce9997d55c32ca09ec6d3", "url": "https://github.com/all-of-us/workbench/commit/7ea1d4335d817765ca2ce9997d55c32ca09ec6d3", "message": "fixed stuff I broke Saturday", "committedDate": "2020-09-21T13:07:32Z", "type": "commit"}, {"oid": "628d769bea61356b98a0291ffa5803317b27af39", "url": "https://github.com/all-of-us/workbench/commit/628d769bea61356b98a0291ffa5803317b27af39", "message": "use Short for projection, enum for DTO", "committedDate": "2020-09-21T13:27:48Z", "type": "commit"}, {"oid": "ee8ab076d0da10e1360cda8e52f2f5f051ac581a", "url": "https://github.com/all-of-us/workbench/commit/ee8ab076d0da10e1360cda8e52f2f5f051ac581a", "message": "more fixes", "committedDate": "2020-09-21T15:07:50Z", "type": "commit"}, {"oid": "bb22bd8c66706e03a506db910bba06825757f200", "url": "https://github.com/all-of-us/workbench/commit/bb22bd8c66706e03a506db910bba06825757f200", "message": "test fixes", "committedDate": "2020-09-21T16:37:00Z", "type": "commit"}, {"oid": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "url": "https://github.com/all-of-us/workbench/commit/41864b64e330baa307c8e3dfb4a72886821b5ca1", "message": "spotless", "committedDate": "2020-09-21T17:45:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NTkzNw==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492255937", "bodyText": "Note that apparently the zone argument here merely controls output, but doesn't appear to supply that zone during parsing.", "author": "jaycarlton", "createdAt": "2020-09-21T18:16:01Z", "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java", "diffHunk": "@@ -4,58 +4,96 @@\n import com.google.cloud.bigquery.QueryParameterValue;\n import com.google.cloud.bigquery.StandardSQLTypeName;\n import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Optional;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.hibernate.engine.jdbc.internal.BasicFormatterImpl;\n+import org.jetbrains.annotations.NotNull;\n import org.pmiops.workbench.utils.Matchers;\n \n public final class QueryParameterValues {\n   private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n \n   // For creating a Timestamp QueryParameterValue, use this formatter.\n   // example error when using the RowToInsert version (below): \"Invalid format:\n-  // \"1989-02-17 00:00:00.000000\" is too short\".\n+  // \"1989-02-17 00:00:00.000000\" is too short\". See https://stackoverflow.com/a/55155067/611672\n+  // for a nice walkthrough of the machinations involved.\n   public static final DateTimeFormatter QPV_TIMESTAMP_FORMATTER =\n-      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSSZZ\").withZone(ZoneOffset.UTC);\n+      DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm:ss.SSSSSSxxx\");\n+\n   // For inserting a Timestamp in a RowToInsert map for an InsertAllRequest, use this format\n   public static final DateTimeFormatter ROW_TO_INSERT_TIMESTAMP_FORMATTER =\n-      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\").withZone(ZoneOffset.UTC);\n+      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\")\n+          .withZone(ZoneOffset.UTC)", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4479d1057193149186641cbccf4ae35965b2aac", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\nindex 2792622aa..382e04609 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n\n@@ -64,17 +64,16 @@ public final class QueryParameterValues {\n         .map(ZonedDateTime::toInstant);\n   }\n \n-  public static Optional<Instant> timestampQpvToInstant(@Nullable QueryParameterValue qpv) {\n+  public static Optional<Instant> timestampQpvToInstant(@NotNull QueryParameterValue qpv) {\n     verifyQpvType(qpv, StandardSQLTypeName.TIMESTAMP);\n-    return Optional.ofNullable(qpv)\n-        .map(QueryParameterValue::getValue)\n+    return Optional.ofNullable(qpv.getValue())\n         .map(s -> ZonedDateTime.parse(s, QPV_TIMESTAMP_FORMATTER))\n         .map(ZonedDateTime::toInstant);\n   }\n \n   public static void verifyQpvType(\n-      @NotNull QueryParameterValue queryParameterValue, StandardSQLTypeName expectedType) {\n-    if (!matchesQpvType(queryParameterValue, expectedType)) {\n+      @Nullable QueryParameterValue queryParameterValue, StandardSQLTypeName expectedType) {\n+    if (queryParameterValue != null && !matchesQpvType(queryParameterValue, expectedType)) {\n       throw new IllegalArgumentException(\n           String.format(\n               \"QueryParameterValue %s is not a timestamp\", queryParameterValue.getValue()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NjM3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492256375", "bodyText": "Since this class has two or three different nullity contracts, I tried to be explicit with @NotNull and @Nulllable. I'm not necessarily advocating we do that everywhere.", "author": "jaycarlton", "createdAt": "2020-09-21T18:16:50Z", "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java", "diffHunk": "@@ -4,58 +4,96 @@\n import com.google.cloud.bigquery.QueryParameterValue;\n import com.google.cloud.bigquery.StandardSQLTypeName;\n import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Optional;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.hibernate.engine.jdbc.internal.BasicFormatterImpl;\n+import org.jetbrains.annotations.NotNull;\n import org.pmiops.workbench.utils.Matchers;\n \n public final class QueryParameterValues {\n   private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n \n   // For creating a Timestamp QueryParameterValue, use this formatter.\n   // example error when using the RowToInsert version (below): \"Invalid format:\n-  // \"1989-02-17 00:00:00.000000\" is too short\".\n+  // \"1989-02-17 00:00:00.000000\" is too short\". See https://stackoverflow.com/a/55155067/611672\n+  // for a nice walkthrough of the machinations involved.\n   public static final DateTimeFormatter QPV_TIMESTAMP_FORMATTER =\n-      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSSZZ\").withZone(ZoneOffset.UTC);\n+      DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm:ss.SSSSSSxxx\");\n+\n   // For inserting a Timestamp in a RowToInsert map for an InsertAllRequest, use this format\n   public static final DateTimeFormatter ROW_TO_INSERT_TIMESTAMP_FORMATTER =\n-      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\").withZone(ZoneOffset.UTC);\n+      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\")\n+          .withZone(ZoneOffset.UTC)\n+          .withLocale(Locale.US);\n \n   /** Generate a unique parameter name and add it to the parameter map provided. */\n+  @NotNull", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4479d1057193149186641cbccf4ae35965b2aac", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\nindex 2792622aa..382e04609 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n\n@@ -64,17 +64,16 @@ public final class QueryParameterValues {\n         .map(ZonedDateTime::toInstant);\n   }\n \n-  public static Optional<Instant> timestampQpvToInstant(@Nullable QueryParameterValue qpv) {\n+  public static Optional<Instant> timestampQpvToInstant(@NotNull QueryParameterValue qpv) {\n     verifyQpvType(qpv, StandardSQLTypeName.TIMESTAMP);\n-    return Optional.ofNullable(qpv)\n-        .map(QueryParameterValue::getValue)\n+    return Optional.ofNullable(qpv.getValue())\n         .map(s -> ZonedDateTime.parse(s, QPV_TIMESTAMP_FORMATTER))\n         .map(ZonedDateTime::toInstant);\n   }\n \n   public static void verifyQpvType(\n-      @NotNull QueryParameterValue queryParameterValue, StandardSQLTypeName expectedType) {\n-    if (!matchesQpvType(queryParameterValue, expectedType)) {\n+      @Nullable QueryParameterValue queryParameterValue, StandardSQLTypeName expectedType) {\n+    if (queryParameterValue != null && !matchesQpvType(queryParameterValue, expectedType)) {\n       throw new IllegalArgumentException(\n           String.format(\n               \"QueryParameterValue %s is not a timestamp\", queryParameterValue.getValue()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NzQ5MA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492257490", "bodyText": "Remember, QPVs in BQ expect _micro_seconds.", "author": "jaycarlton", "createdAt": "2020-09-21T18:18:48Z", "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java", "diffHunk": "@@ -4,58 +4,96 @@\n import com.google.cloud.bigquery.QueryParameterValue;\n import com.google.cloud.bigquery.StandardSQLTypeName;\n import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Optional;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.hibernate.engine.jdbc.internal.BasicFormatterImpl;\n+import org.jetbrains.annotations.NotNull;\n import org.pmiops.workbench.utils.Matchers;\n \n public final class QueryParameterValues {\n   private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n \n   // For creating a Timestamp QueryParameterValue, use this formatter.\n   // example error when using the RowToInsert version (below): \"Invalid format:\n-  // \"1989-02-17 00:00:00.000000\" is too short\".\n+  // \"1989-02-17 00:00:00.000000\" is too short\". See https://stackoverflow.com/a/55155067/611672\n+  // for a nice walkthrough of the machinations involved.\n   public static final DateTimeFormatter QPV_TIMESTAMP_FORMATTER =\n-      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSSZZ\").withZone(ZoneOffset.UTC);\n+      DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm:ss.SSSSSSxxx\");\n+\n   // For inserting a Timestamp in a RowToInsert map for an InsertAllRequest, use this format\n   public static final DateTimeFormatter ROW_TO_INSERT_TIMESTAMP_FORMATTER =\n-      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\").withZone(ZoneOffset.UTC);\n+      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\")\n+          .withZone(ZoneOffset.UTC)\n+          .withLocale(Locale.US);\n \n   /** Generate a unique parameter name and add it to the parameter map provided. */\n+  @NotNull\n   public static String buildParameter(\n-      Map<String, QueryParameterValue> queryParameterValueMap,\n-      QueryParameterValue queryParameterValue) {\n+      @NotNull Map<String, QueryParameterValue> queryParameterValueMap,\n+      @NotNull QueryParameterValue queryParameterValue) {\n     String parameterName = \"p\" + queryParameterValueMap.size();\n     queryParameterValueMap.put(parameterName, queryParameterValue);\n     return decorateParameterName(parameterName);\n   }\n \n-  public static QueryParameterValue instantToQPValue(Instant instant) {\n-    return QueryParameterValue.timestamp(instant.toEpochMilli() * MICROSECONDS_IN_MILLISECOND);\n+  // QueryParameterValue can have a null value, so no need to return an Optional.\n+  @NotNull\n+  public static QueryParameterValue instantToQPValue(@Nullable Instant instant) {", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4479d1057193149186641cbccf4ae35965b2aac", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\nindex 2792622aa..382e04609 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n\n@@ -64,17 +64,16 @@ public final class QueryParameterValues {\n         .map(ZonedDateTime::toInstant);\n   }\n \n-  public static Optional<Instant> timestampQpvToInstant(@Nullable QueryParameterValue qpv) {\n+  public static Optional<Instant> timestampQpvToInstant(@NotNull QueryParameterValue qpv) {\n     verifyQpvType(qpv, StandardSQLTypeName.TIMESTAMP);\n-    return Optional.ofNullable(qpv)\n-        .map(QueryParameterValue::getValue)\n+    return Optional.ofNullable(qpv.getValue())\n         .map(s -> ZonedDateTime.parse(s, QPV_TIMESTAMP_FORMATTER))\n         .map(ZonedDateTime::toInstant);\n   }\n \n   public static void verifyQpvType(\n-      @NotNull QueryParameterValue queryParameterValue, StandardSQLTypeName expectedType) {\n-    if (!matchesQpvType(queryParameterValue, expectedType)) {\n+      @Nullable QueryParameterValue queryParameterValue, StandardSQLTypeName expectedType) {\n+    if (queryParameterValue != null && !matchesQpvType(queryParameterValue, expectedType)) {\n       throw new IllegalArgumentException(\n           String.format(\n               \"QueryParameterValue %s is not a timestamp\", queryParameterValue.getValue()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1Nzg3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492257875", "bodyText": "Methods whose outputs are not piped directly into BigQuery in some form are Optional\n.", "author": "jaycarlton", "createdAt": "2020-09-21T18:19:29Z", "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java", "diffHunk": "@@ -4,58 +4,96 @@\n import com.google.cloud.bigquery.QueryParameterValue;\n import com.google.cloud.bigquery.StandardSQLTypeName;\n import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Optional;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.hibernate.engine.jdbc.internal.BasicFormatterImpl;\n+import org.jetbrains.annotations.NotNull;\n import org.pmiops.workbench.utils.Matchers;\n \n public final class QueryParameterValues {\n   private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n \n   // For creating a Timestamp QueryParameterValue, use this formatter.\n   // example error when using the RowToInsert version (below): \"Invalid format:\n-  // \"1989-02-17 00:00:00.000000\" is too short\".\n+  // \"1989-02-17 00:00:00.000000\" is too short\". See https://stackoverflow.com/a/55155067/611672\n+  // for a nice walkthrough of the machinations involved.\n   public static final DateTimeFormatter QPV_TIMESTAMP_FORMATTER =\n-      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSSZZ\").withZone(ZoneOffset.UTC);\n+      DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm:ss.SSSSSSxxx\");\n+\n   // For inserting a Timestamp in a RowToInsert map for an InsertAllRequest, use this format\n   public static final DateTimeFormatter ROW_TO_INSERT_TIMESTAMP_FORMATTER =\n-      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\").withZone(ZoneOffset.UTC);\n+      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\")\n+          .withZone(ZoneOffset.UTC)\n+          .withLocale(Locale.US);\n \n   /** Generate a unique parameter name and add it to the parameter map provided. */\n+  @NotNull\n   public static String buildParameter(\n-      Map<String, QueryParameterValue> queryParameterValueMap,\n-      QueryParameterValue queryParameterValue) {\n+      @NotNull Map<String, QueryParameterValue> queryParameterValueMap,\n+      @NotNull QueryParameterValue queryParameterValue) {\n     String parameterName = \"p\" + queryParameterValueMap.size();\n     queryParameterValueMap.put(parameterName, queryParameterValue);\n     return decorateParameterName(parameterName);\n   }\n \n-  public static QueryParameterValue instantToQPValue(Instant instant) {\n-    return QueryParameterValue.timestamp(instant.toEpochMilli() * MICROSECONDS_IN_MILLISECOND);\n+  // QueryParameterValue can have a null value, so no need to return an Optional.\n+  @NotNull\n+  public static QueryParameterValue instantToQPValue(@Nullable Instant instant) {\n+    final Long epochMicros =\n+        Optional.ofNullable(instant)\n+            .map(Instant::toEpochMilli)\n+            .map(milli -> milli * MICROSECONDS_IN_MILLISECOND)\n+            .orElse(null);\n+    return QueryParameterValue.timestamp(epochMicros);\n+  }\n+\n+  // Will return an empty Optional for null input, but parse errors will still throw\n+  // DateTimeParseException.\n+  public static Optional<Instant> timestampStringToInstant(@Nullable String timestamp) {", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4479d1057193149186641cbccf4ae35965b2aac", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\nindex 2792622aa..382e04609 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n\n@@ -64,17 +64,16 @@ public final class QueryParameterValues {\n         .map(ZonedDateTime::toInstant);\n   }\n \n-  public static Optional<Instant> timestampQpvToInstant(@Nullable QueryParameterValue qpv) {\n+  public static Optional<Instant> timestampQpvToInstant(@NotNull QueryParameterValue qpv) {\n     verifyQpvType(qpv, StandardSQLTypeName.TIMESTAMP);\n-    return Optional.ofNullable(qpv)\n-        .map(QueryParameterValue::getValue)\n+    return Optional.ofNullable(qpv.getValue())\n         .map(s -> ZonedDateTime.parse(s, QPV_TIMESTAMP_FORMATTER))\n         .map(ZonedDateTime::toInstant);\n   }\n \n   public static void verifyQpvType(\n-      @NotNull QueryParameterValue queryParameterValue, StandardSQLTypeName expectedType) {\n-    if (!matchesQpvType(queryParameterValue, expectedType)) {\n+      @Nullable QueryParameterValue queryParameterValue, StandardSQLTypeName expectedType) {\n+    if (queryParameterValue != null && !matchesQpvType(queryParameterValue, expectedType)) {\n       throw new IllegalArgumentException(\n           String.format(\n               \"QueryParameterValue %s is not a timestamp\", queryParameterValue.getValue()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1OTYzNg==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492259636", "bodyText": "The other way to operate would have been to convert to string when writing the DTO, but I felt like that was losing type safety too early in the process.", "author": "jaycarlton", "createdAt": "2020-09-21T18:22:36Z", "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java", "diffHunk": "@@ -65,35 +103,83 @@ public static String replaceNamedParameters(QueryJobConfiguration queryJobConfig\n     return Matchers.replaceAllInMap(patternToReplacement, result);\n   }\n \n-  public static String formatQuery(String query) {\n+  @NotNull\n+  public static String formatQuery(@NotNull String query) {\n     return new BasicFormatterImpl().format(query);\n   }\n \n   // use lookbehind for non-word character, since \"'\"(@\" or \" @\" don't represent left-side word\n   // boundaries.\n-  private static Pattern buildParameterRegex(String parameterName) {\n+  @NotNull\n+  private static Pattern buildParameterRegex(@NotNull String parameterName) {\n     return Pattern.compile(String.format(\"(?<=\\\\W)%s\\\\b\", decorateParameterName(parameterName)));\n   }\n \n-  public static String decorateParameterName(String parameterName) {\n+  @NotNull\n+  public static String decorateParameterName(@NotNull String parameterName) {\n     return \"@\" + parameterName;\n   }\n \n-  private static String getReplacementString(QueryParameterValue parameterValue) {\n+  @Nullable\n+  public static QueryParameterValue toTimestampQpv(@Nullable OffsetDateTime offsetDateTime) {\n+    final String arg =\n+        Optional.ofNullable(offsetDateTime).map(QPV_TIMESTAMP_FORMATTER::format).orElse(null);\n+    return QueryParameterValue.timestamp(arg);\n+  }\n+\n+  // Return null instead of Optional.empty() so the return value can go directly into\n+  // the content map of an InsertAllRequest.RowToInsert.\n+  @Nullable\n+  public static String toInsertRowString(@Nullable OffsetDateTime offsetDateTime) {\n+    return Optional.ofNullable(offsetDateTime)\n+        .map(ROW_TO_INSERT_TIMESTAMP_FORMATTER::format)\n+        .orElse(null);\n+  }\n+\n+  // BigQuery TIMESTAMP types don't include a zone or offset, but are always UTC.\n+  public static Optional<OffsetDateTime> rowToInsertStringToOffsetTimestamp(\n+      @Nullable String bqTimeString) {\n+    return Optional.ofNullable(bqTimeString)\n+        .filter(s -> s.length() > 0)\n+        .map(ROW_TO_INSERT_TIMESTAMP_FORMATTER::parse)\n+        .map(LocalDateTime::from)\n+        .map(ldt -> OffsetDateTime.of(ldt, ZoneOffset.UTC));\n+  }\n+\n+  @NotNull", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19f58ba9062671c182cfa09290db6058eea237dd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\nindex 2792622aa..8d3467938 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n\n@@ -175,10 +175,8 @@ public final class QueryParameterValues {\n   }\n \n   // return false if teh parameterValue is non-null does not match the expected type.\n-  private static boolean matchesQpvType(\n-      @Nullable QueryParameterValue parameterValue, @Nullable StandardSQLTypeName expectedType) {\n-    return Optional.ofNullable(parameterValue)\n-        .map(QueryParameterValue::getType)\n+  private static boolean matchesQpvType(QueryParameterValue parameterValue, StandardSQLTypeName expectedType) {\n+    return Optional.ofNullable(parameterValue.getType())\n         .map(t -> t == expectedType)\n         .orElse(true);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MDQwNw==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492260407", "bodyText": "This join is easy to forget. We agreed to export information on active workspaces only, as inactive workspaces aren't a fully-defined, user-facing feature.", "author": "jaycarlton", "createdAt": "2020-09-21T18:24:01Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -71,4 +70,55 @@\n \n     Long getUserCount();\n   }\n+\n+  @Query(\n+      \"SELECT\\n\"\n+          + \"  u.aboutYou,\\n\"\n+          + \"  u.areaOfResearch,\\n\"\n+          + \"  u.betaAccessBypassTime,\\n\"\n+          + \"  u.betaAccessRequestTime,\\n\"\n+          + \"  u.complianceTrainingBypassTime,\\n\"\n+          + \"  u.complianceTrainingCompletionTime,\\n\"\n+          + \"  u.complianceTrainingExpirationTime,\\n\"\n+          + \"  u.contactEmail,\\n\"\n+          + \"  u.creationTime,\\n\"\n+          + \"  u.currentPosition,\\n\"\n+          + \"  u.dataAccessLevel,\\n\"\n+          + \"  u.dataUseAgreementBypassTime,\\n\"\n+          + \"  u.dataUseAgreementCompletionTime,\\n\"\n+          + \"  u.dataUseAgreementSignedVersion,\\n\"\n+          + \"  u.demographicSurveyCompletionTime,\\n\"\n+          + \"  u.disabled,\\n\"\n+          + \"  u.emailVerificationBypassTime,\\n\"\n+          + \"  u.emailVerificationCompletionTime,\\n\"\n+          + \"  u.emailVerificationStatus,\\n\"\n+          + \"  u.eraCommonsBypassTime,\\n\"\n+          + \"  u.eraCommonsCompletionTime,\\n\"\n+          + \"  u.eraCommonsLinkExpireTime,\\n\"\n+          + \"  u.familyName,\\n\"\n+          + \"  u.firstRegistrationCompletionTime,\\n\"\n+          + \"  u.firstSignInTime,\\n\"\n+          + \"  u.freeTierCreditsLimitDaysOverride,\\n\"\n+          + \"  u.freeTierCreditsLimitDollarsOverride,\\n\"\n+          + \"  u.givenName,\\n\"\n+          + \"  u.idVerificationBypassTime,\\n\"\n+          + \"  u.idVerificationCompletionTime,\\n\"\n+          + \"  u.lastModifiedTime,\\n\"\n+          + \"  u.organization,\\n\"\n+          + \"  u.phoneNumber,\\n\"\n+          + \"  u.professionalUrl,\\n\"\n+          + \"  u.twoFactorAuthBypassTime,\\n\"\n+          + \"  u.twoFactorAuthCompletionTime,\\n\"\n+          + \"  u.userId,\\n\"\n+          + \"  u.username,\\n\"\n+          + \"  a.city,\\n\"\n+          + \"  a.country,\\n\"\n+          + \"  a.state,\\n\"\n+          + \"  a.streetAddress1,\\n\"\n+          + \"  a.streetAddress2,\\n\"\n+          + \"  a.zipCode\\n\"\n+          + \"FROM DbUser u\\n\"\n+          + \"  LEFT OUTER JOIN DbAddress AS a ON u.userId = a.user.userId\\n\"", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\nindex d020cf644..84772c6f5 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\n\n@@ -75,8 +75,6 @@ public interface UserDao extends CrudRepository<DbUser, Long> {\n       \"SELECT\\n\"\n           + \"  u.aboutYou,\\n\"\n           + \"  u.areaOfResearch,\\n\"\n-          + \"  u.betaAccessBypassTime,\\n\"\n-          + \"  u.betaAccessRequestTime,\\n\"\n           + \"  u.complianceTrainingBypassTime,\\n\"\n           + \"  u.complianceTrainingCompletionTime,\\n\"\n           + \"  u.complianceTrainingExpirationTime,\\n\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MTA2NA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492261064", "bodyText": "The projection, BigQuery, and DTO column names always agree with the MySql column name. Frequently that doesn't agree with the property exposed on the entity object so we have these as conversions.", "author": "jaycarlton", "createdAt": "2020-09-21T18:25:09Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java", "diffHunk": "@@ -85,4 +86,44 @@ default void updateBillingStatus(long workspaceId, BillingStatus status) {\n \n     Long getWorkspaceCount();\n   }\n+\n+  @Query(\n+      \"SELECT\\n\"\n+          + \"  w.billingAccountType,\\n\"\n+          + \"  w.billingStatus,\\n\"\n+          + \"  w.cdrVersion.cdrVersionId AS cdrVersionId,\\n\"\n+          + \"  w.creationTime,\\n\"\n+          + \"  w.creator.userId AS creatorId,\\n\"\n+          + \"  w.disseminateResearchOther,\\n\"\n+          + \"  w.lastAccessedTime,\\n\"\n+          + \"  w.lastModifiedTime,\\n\"\n+          + \"  w.name,\\n\"\n+          + \"  w.needsResearchPurposeReviewPrompt AS needsRpReviewPrompt,\\n\"", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java b/api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java\nindex 4ef0a8d0e..bf93661c2 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java\n\n@@ -125,5 +125,5 @@ public interface WorkspaceDao extends CrudRepository<DbWorkspace, Long> {\n           + \"  w.workspaceId\\n\"\n           + \"FROM DbWorkspace w\\n\"\n           + \"WHERE w.activeStatus = 0\")\n-  List<PrjWorkspace> getReportingWorkspaces();\n+  List<ProjectedReportingWorkspace> getReportingWorkspaces();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MjMxOA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492262318", "bodyText": "Institution membership and a couple of other things are going to be denormalized into this BQ table soon.", "author": "jaycarlton", "createdAt": "2020-09-21T18:27:26Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.db.dao.projection;\n+\n+import java.sql.Timestamp;\n+\n+public interface PrjUser {\n+  /*\n+   * User columns\n+   */\n+  String getAboutYou();\n+\n+  String getAreaOfResearch();\n+\n+  Timestamp getBetaAccessBypassTime();\n+\n+  Timestamp getBetaAccessRequestTime();\n+\n+  Timestamp getComplianceTrainingBypassTime();\n+\n+  Timestamp getComplianceTrainingCompletionTime();\n+\n+  Timestamp getComplianceTrainingExpirationTime();\n+\n+  String getContactEmail();\n+\n+  Timestamp getCreationTime();\n+\n+  String getCurrentPosition();\n+\n+  Short getDataAccessLevel(); // manual type override\n+\n+  Timestamp getDataUseAgreementBypassTime();\n+\n+  Timestamp getDataUseAgreementCompletionTime();\n+\n+  Integer getDataUseAgreementSignedVersion();\n+\n+  Timestamp getDemographicSurveyCompletionTime();\n+\n+  Boolean getDisabled();\n+\n+  Timestamp getEmailVerificationBypassTime();\n+\n+  Timestamp getEmailVerificationCompletionTime();\n+\n+  Short getEmailVerificationStatus(); // manual type override\n+\n+  Timestamp getEraCommonsBypassTime();\n+\n+  Timestamp getEraCommonsCompletionTime();\n+\n+  Timestamp getEraCommonsLinkExpireTime();\n+\n+  String getFamilyName();\n+\n+  Timestamp getFirstRegistrationCompletionTime();\n+\n+  Timestamp getFirstSignInTime();\n+\n+  Short getFreeTierCreditsLimitDaysOverride();\n+\n+  Double getFreeTierCreditsLimitDollarsOverride();\n+\n+  String getGivenName();\n+\n+  Timestamp getIdVerificationBypassTime();\n+\n+  Timestamp getIdVerificationCompletionTime();\n+\n+  Timestamp getLastModifiedTime();\n+\n+  String getOrganization();\n+\n+  String getPhoneNumber();\n+\n+  String getProfessionalUrl();\n+\n+  Timestamp getTwoFactorAuthBypassTime();\n+\n+  Timestamp getTwoFactorAuthCompletionTime();\n+\n+  Long getUserId();\n+\n+  String getUsername();\n+  /*\n+   * Address columns\n+   */\n+  String getCity();\n+\n+  String getCountry();\n+\n+  String getState();\n+\n+  String getStreetAddress1();\n+\n+  String getStreetAddress2();\n+\n+  String getZipCode();\n+}", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java b/api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\nsimilarity index 72%\nrename from api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java\nrename to api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\nindex 61b4abd27..6dd011e6c 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\n\n@@ -1,8 +1,9 @@\n package org.pmiops.workbench.db.dao.projection;\n \n import java.sql.Timestamp;\n+import org.pmiops.workbench.model.DataAccessLevel;\n \n-public interface PrjUser {\n+public interface ProjectedReportingUser {\n   /*\n    * User columns\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MzM2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492263369", "bodyText": "Some of the enum columns \"just work\", but others (like data_access_level) don't. I believe it had to do with which attribute on the entity class was annotated with the column name.\nI wound up leaving DataAccessLevel out as it was one of those stubborn columns and the representation is slated to change in the multiple tiers project.", "author": "jaycarlton", "createdAt": "2020-09-21T18:29:20Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjWorkspace.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.db.dao.projection;\n+\n+import java.sql.Timestamp;\n+import org.pmiops.workbench.model.BillingAccountType;\n+import org.pmiops.workbench.model.BillingStatus;\n+\n+public interface PrjWorkspace {\n+  BillingAccountType getBillingAccountType();", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjWorkspace.java b/api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingWorkspace.java\nsimilarity index 96%\nrename from api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjWorkspace.java\nrename to api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingWorkspace.java\nindex 12a1e4d1e..4338e7576 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjWorkspace.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingWorkspace.java\n\n@@ -4,7 +4,7 @@ import java.sql.Timestamp;\n import org.pmiops.workbench.model.BillingAccountType;\n import org.pmiops.workbench.model.BillingStatus;\n \n-public interface PrjWorkspace {\n+public interface ProjectedReportingWorkspace {\n   BillingAccountType getBillingAccountType();\n \n   BillingStatus getBillingStatus();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NTg2NA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492265864", "bodyText": "Renamed researcher table to user.", "author": "jaycarlton", "createdAt": "2020-09-21T18:33:45Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -3,28 +3,23 @@\n import java.util.Collection;\n import java.util.List;\n import org.mapstruct.Mapper;\n-import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.db.model.DbWorkspace;\n-import org.pmiops.workbench.model.ReportingResearcher;\n-import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.pmiops.workbench.db.dao.projection.PrjUser;\n+import org.pmiops.workbench.db.dao.projection.PrjWorkspace;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.BqDtoUser;\n+import org.pmiops.workbench.model.BqDtoWorkspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n import org.pmiops.workbench.utils.mappers.MapStructConfig;\n \n @Mapper(\n     config = MapStructConfig.class,\n-    uses = {CommonMappers.class})\n+    uses = {CommonMappers.class, DbStorageEnums.class})\n public interface ReportingMapper {\n-  @Mapping(source = \"givenName\", target = \"firstName\")\n-  @Mapping(source = \"userId\", target = \"researcherId\")\n-  @Mapping(source = \"disabled\", target = \"isDisabled\")\n-  ReportingResearcher toModel(DbUser dbUser);\n+  BqDtoUser toDto(PrjUser prjUser);\n \n-  List<ReportingResearcher> toReportingResearcherList(Collection<DbUser> dbUsers);\n+  List<BqDtoUser> toReportingUserList(Collection<PrjUser> users);", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc3NDAxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492774011", "bodyText": "@calbach thoughts on a better naming convention here? I think technically a data transfer object would be an aggregate of the whole payload, rather than an individual row. Just going back to ReportingUser for now.", "author": "jaycarlton", "createdAt": "2020-09-22T14:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NjQ2MA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492946460", "bodyText": "Reporting seems clear to me", "author": "calbach", "createdAt": "2020-09-22T18:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NTg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java b/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\nindex 831d85d38..b5c2bd890 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\n\n@@ -3,11 +3,11 @@ package org.pmiops.workbench.reporting;\n import java.util.Collection;\n import java.util.List;\n import org.mapstruct.Mapper;\n-import org.pmiops.workbench.db.dao.projection.PrjUser;\n-import org.pmiops.workbench.db.dao.projection.PrjWorkspace;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingUser;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingWorkspace;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n-import org.pmiops.workbench.model.BqDtoUser;\n-import org.pmiops.workbench.model.BqDtoWorkspace;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n import org.pmiops.workbench.utils.mappers.MapStructConfig;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NjA5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492266091", "bodyText": "Static methods are fair game for MapStruct, so all I have to do to get enum maps is include DbStorageEnums", "author": "jaycarlton", "createdAt": "2020-09-21T18:34:13Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -3,28 +3,23 @@\n import java.util.Collection;\n import java.util.List;\n import org.mapstruct.Mapper;\n-import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.db.model.DbWorkspace;\n-import org.pmiops.workbench.model.ReportingResearcher;\n-import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.pmiops.workbench.db.dao.projection.PrjUser;\n+import org.pmiops.workbench.db.dao.projection.PrjWorkspace;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.BqDtoUser;\n+import org.pmiops.workbench.model.BqDtoWorkspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n import org.pmiops.workbench.utils.mappers.MapStructConfig;\n \n @Mapper(\n     config = MapStructConfig.class,\n-    uses = {CommonMappers.class})\n+    uses = {CommonMappers.class, DbStorageEnums.class})", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java b/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\nindex 831d85d38..b5c2bd890 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java\n\n@@ -3,11 +3,11 @@ package org.pmiops.workbench.reporting;\n import java.util.Collection;\n import java.util.List;\n import org.mapstruct.Mapper;\n-import org.pmiops.workbench.db.dao.projection.PrjUser;\n-import org.pmiops.workbench.db.dao.projection.PrjWorkspace;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingUser;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingWorkspace;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n-import org.pmiops.workbench.model.BqDtoUser;\n-import org.pmiops.workbench.model.BqDtoWorkspace;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n import org.pmiops.workbench.utils.mappers.MapStructConfig;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2Nzc0NA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492267744", "bodyText": "This was bundled into one function primarily to support timing.", "author": "jaycarlton", "createdAt": "2020-09-21T18:37:08Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java", "diffHunk": "@@ -67,37 +62,27 @@ public ReportingSnapshotServiceImpl(\n   @Transactional(readOnly = true)\n   @Override\n   public ReportingSnapshot takeSnapshot() {\n-    final EntityBundle entityBundle = getApplicationDbData();\n+    final QueryResultBundle queryResultBundle = getApplicationDbData();\n     final Stopwatch stopwatch = stopwatchProvider.get().start();\n \n-    final List<ReportingWorkspace> workspaces =\n-        reportingMapper.toReportingWorkspaceList(entityBundle.getWorkspaces());\n-    for (ReportingWorkspace model : workspaces) {\n-      model.setFakeSize(\n-          getFakeSize()); // TODO(jaycarlton): remove after initial query & view testing\n-    }\n-\n     final ReportingSnapshot result =\n         new ReportingSnapshot()\n             .captureTimestamp(clock.millis())\n-            .researchers(reportingMapper.toReportingResearcherList(entityBundle.getUsers()))\n-            .workspaces(workspaces);\n+            .users(reportingMapper.toReportingUserList(queryResultBundle.getUsers()))\n+            .workspaces(\n+                reportingMapper.toReportingWorkspaceList(queryResultBundle.getWorkspaces()));\n     stopwatch.stop();\n     log.info(LogFormatters.duration(\"Conversion to ReportingSnapshot\", stopwatch.elapsed()));\n     return result;\n   }\n \n-  private EntityBundle getApplicationDbData() {\n+  private QueryResultBundle getApplicationDbData() {", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6f0d5014024efbdc31219201948f994399d9833", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java b/api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java\nindex f7c77e28d..222c28ed1 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java\n\n@@ -78,9 +78,9 @@ public class ReportingSnapshotServiceImpl implements ReportingSnapshotService {\n \n   private QueryResultBundle getApplicationDbData() {\n     final Stopwatch stopwatch = stopwatchProvider.get().start();\n-    final List<PrjUser> users = userService.getRepotingUsers();\n-    final List<PrjWorkspace> workspaces = workspaceService.getReportingWorkspaces();\n-    final QueryResultBundle result = new QueryResultBundle(users, workspaces);\n+    final QueryResultBundle result =\n+        new QueryResultBundle(\n+            userService.getRepotingUsers(), workspaceService.getReportingWorkspaces());\n     stopwatch.stop();\n     log.info(LogFormatters.duration(\"Application DB Queries\", stopwatch.elapsed()));\n     return result;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2ODY3MQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492268671", "bodyText": "We need an instance of the DmlInsertJobBuilder for each table. There's no constructor, but this line overrides the single remaining abstract method, providing all the enum instances.\nJava is the only language where I'd have to do this. It does not appear possible to express that a class should be both an enum type and extend a generic interface.", "author": "jaycarlton", "createdAt": "2020-09-21T18:38:58Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceDmlImpl.java", "diffHunk": "@@ -15,28 +15,28 @@\n import javax.inject.Provider;\n import org.pmiops.workbench.api.BigQueryService;\n import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.model.ReportingResearcher;\n+import org.pmiops.workbench.model.BqDtoUser;\n+import org.pmiops.workbench.model.BqDtoWorkspace;\n import org.pmiops.workbench.model.ReportingSnapshot;\n-import org.pmiops.workbench.model.ReportingWorkspace;\n import org.pmiops.workbench.reporting.insertion.DmlInsertJobBuilder;\n-import org.pmiops.workbench.reporting.insertion.ResearcherParameter;\n-import org.pmiops.workbench.reporting.insertion.WorkspaceParameter;\n+import org.pmiops.workbench.reporting.insertion.UserParameterColumn;\n+import org.pmiops.workbench.reporting.insertion.WorkspaceParameterColumn;\n import org.springframework.context.annotation.Primary;\n import org.springframework.stereotype.Service;\n \n @Service(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")\n @Primary\n public class ReportingUploadServiceDmlImpl implements ReportingUploadService {\n+\n   private static final Logger logger = Logger.getLogger(\"ReportingUploadServiceInsertQueryImpl\");\n   private static final long MAX_WAIT_TIME = Duration.ofSeconds(60).toMillis();\n \n   private final BigQueryService bigQueryService;\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n-  private static final DmlInsertJobBuilder<ReportingResearcher> researcherJobBuilder =\n-      ResearcherParameter::values;\n-  private static final DmlInsertJobBuilder<ReportingWorkspace> workspaceJobBuilder =\n-      WorkspaceParameter::values;\n+  private static final DmlInsertJobBuilder<BqDtoUser> userJobBuilder = UserParameterColumn::values;", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceDmlImpl.java b/api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceDmlImpl.java\nindex b92adcb9d..2ed82ae45 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceDmlImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceDmlImpl.java\n\n@@ -15,9 +15,9 @@ import java.util.logging.Logger;\n import javax.inject.Provider;\n import org.pmiops.workbench.api.BigQueryService;\n import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.model.BqDtoUser;\n-import org.pmiops.workbench.model.BqDtoWorkspace;\n import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n import org.pmiops.workbench.reporting.insertion.DmlInsertJobBuilder;\n import org.pmiops.workbench.reporting.insertion.UserParameterColumn;\n import org.pmiops.workbench.reporting.insertion.WorkspaceParameterColumn;\n"}}, {"oid": "e6f0d5014024efbdc31219201948f994399d9833", "url": "https://github.com/all-of-us/workbench/commit/e6f0d5014024efbdc31219201948f994399d9833", "message": "review fixes", "committedDate": "2020-09-21T19:15:14Z", "type": "commit"}, {"oid": "ab663267e77cba832cf0846d3cfc9754aed9d483", "url": "https://github.com/all-of-us/workbench/commit/ab663267e77cba832cf0846d3cfc9754aed9d483", "message": "fix import and turn off sql debug", "committedDate": "2020-09-21T22:20:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3MTE2Mw==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492271163", "bodyText": "I wasn't happy with the random class living here statically. It means I can't inject it because this is just an interface.", "author": "jaycarlton", "createdAt": "2020-09-21T18:43:37Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilder.java", "diffHunk": "@@ -4,42 +4,49 @@\n import com.google.cloud.bigquery.InsertAllRequest.RowToInsert;\n import com.google.cloud.bigquery.TableId;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Maps;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.AbstractMap;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import org.pmiops.workbench.utils.RandomUtils;\n \n public interface InsertAllRequestBuilder<T> extends ColumnDrivenBuilder<T> {\n   String INSERT_ID_CHARS = \"abcdefghijklmnopqrstuvwxyz\";\n+  int INSERT_ID_LENGTH = 16;\n \n   default InsertAllRequest build(TableId tableId, List<T> models, Map<String, Object> fixedValues) {\n     return InsertAllRequest.newBuilder(tableId)\n         .setIgnoreUnknownValues(true)\n-        .setRows(modelsToRows(models, fixedValues))\n+        .setRows(dtosToRowsToInsert(models, fixedValues))\n         .build();\n   }\n \n-  default List<RowToInsert> modelsToRows(Collection<T> models, Map<String, Object> fixedValues) {\n+  default List<RowToInsert> dtosToRowsToInsert(\n+      Collection<T> models, Map<String, Object> fixedValues) {\n     return models.stream()\n-        .map(m -> modelToRow(m, fixedValues))\n+        .map(m -> dtoToRowToInsert(m, fixedValues))\n         .collect(ImmutableList.toImmutableList());\n   }\n \n-  default RowToInsert modelToRow(T model, Map<String, Object> fixedValues) {\n-    // First N columns are same for all rows (e.g. a partition key column)\n-    final Map<String, Object> rowMap = Maps.newHashMap(fixedValues);\n-\n-    // can't stream/collect here because that uses HashMap.merge() which surprisingly does not\n-    // allow null values although they are valid for HashMap.  We do use null values.\n-    for (QueryParameterColumn<T> qpc : getQueryParameterColumns()) {\n-      rowMap.put(qpc.getParameterName(), qpc.getRowToInsertValue(model));\n-    }\n-\n-    return RowToInsert.of(generateInsertId(), rowMap);\n+  // Null values are supposed to be omitted from the map (or have @Value or @NullValue annotations).\n+  default RowToInsert dtoToRowToInsert(T model, Map<String, Object> fixedValues) {\n+    final ImmutableMap.Builder<String, Object> columnToValueBuilder = ImmutableMap.builder();\n+    columnToValueBuilder.putAll(fixedValues);\n+    Arrays.stream(getQueryParameterColumns())\n+        .map(\n+            col ->\n+                new AbstractMap.SimpleImmutableEntry<>(\n+                    col.getParameterName(), col.getRowToInsertValue(model)))\n+        .filter(e -> Objects.nonNull(e.getValue()))\n+        .forEach(columnToValueBuilder::put);\n+\n+    return RowToInsert.of(generateInsertId(), columnToValueBuilder.build());\n   }\n \n   default String generateInsertId() {\n-    return RandomUtils.generateRandomChars(INSERT_ID_CHARS, 16);\n+    return RandomUtils.generateRandomChars(INSERT_ID_CHARS, INSERT_ID_LENGTH);", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8142c31a3aac84212974351a576c71f4da628f04", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilder.java b/api/src/main/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilder.java\ndeleted file mode 100644\nindex eb6ff69f6..000000000\n--- a/api/src/main/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilder.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-package org.pmiops.workbench.reporting.insertion;\n-\n-import com.google.cloud.bigquery.InsertAllRequest;\n-import com.google.cloud.bigquery.InsertAllRequest.RowToInsert;\n-import com.google.cloud.bigquery.TableId;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n-import java.util.AbstractMap;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import org.pmiops.workbench.utils.RandomUtils;\n-\n-public interface InsertAllRequestBuilder<T> extends ColumnDrivenBuilder<T> {\n-  String INSERT_ID_CHARS = \"abcdefghijklmnopqrstuvwxyz\";\n-  int INSERT_ID_LENGTH = 16;\n-\n-  default InsertAllRequest build(TableId tableId, List<T> models, Map<String, Object> fixedValues) {\n-    return InsertAllRequest.newBuilder(tableId)\n-        .setIgnoreUnknownValues(true)\n-        .setRows(dtosToRowsToInsert(models, fixedValues))\n-        .build();\n-  }\n-\n-  default List<RowToInsert> dtosToRowsToInsert(\n-      Collection<T> models, Map<String, Object> fixedValues) {\n-    return models.stream()\n-        .map(m -> dtoToRowToInsert(m, fixedValues))\n-        .collect(ImmutableList.toImmutableList());\n-  }\n-\n-  // Null values are supposed to be omitted from the map (or have @Value or @NullValue annotations).\n-  default RowToInsert dtoToRowToInsert(T model, Map<String, Object> fixedValues) {\n-    final ImmutableMap.Builder<String, Object> columnToValueBuilder = ImmutableMap.builder();\n-    columnToValueBuilder.putAll(fixedValues);\n-    Arrays.stream(getQueryParameterColumns())\n-        .map(\n-            col ->\n-                new AbstractMap.SimpleImmutableEntry<>(\n-                    col.getParameterName(), col.getRowToInsertValue(model)))\n-        .filter(e -> Objects.nonNull(e.getValue()))\n-        .forEach(columnToValueBuilder::put);\n-\n-    return RowToInsert.of(generateInsertId(), columnToValueBuilder.build());\n-  }\n-\n-  default String generateInsertId() {\n-    return RandomUtils.generateRandomChars(INSERT_ID_CHARS, INSERT_ID_LENGTH);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3MTgzOA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492271838", "bodyText": "This (generated/scaffolded) enum knows how to extract column names, object values, and QueryParameterValue instances from a DTO model. It must be kept in sync with the project and the DTO.\nThis feels a bit like overkill, and if I had done the codegen bit first, it might have been rolled into that, with each column having a class that exposes getObject() and getQpv(), for example. But then you'd need a fixed, static list of instances of those, and you're back at an enum.", "author": "jaycarlton", "createdAt": "2020-09-21T18:44:51Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/UserParameterColumn.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.pmiops.workbench.reporting.insertion;\n+\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.enumToQpv;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.enumToString;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.toInsertRowString;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.toTimestampQpv;\n+\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import java.util.function.Function;\n+import org.pmiops.workbench.model.BqDtoUser;\n+\n+public enum UserParameterColumn implements QueryParameterColumn<BqDtoUser> {", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/insertion/UserParameterColumn.java b/api/src/main/java/org/pmiops/workbench/reporting/insertion/UserParameterColumn.java\nindex 2e183973d..67eed48df 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/insertion/UserParameterColumn.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/insertion/UserParameterColumn.java\n\n@@ -7,22 +7,15 @@ import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.toTim\n \n import com.google.cloud.bigquery.QueryParameterValue;\n import java.util.function.Function;\n-import org.pmiops.workbench.model.BqDtoUser;\n+import org.pmiops.workbench.model.ReportingUser;\n \n-public enum UserParameterColumn implements QueryParameterColumn<BqDtoUser> {\n-  ABOUT_YOU(\"about_you\", BqDtoUser::getAboutYou, u -> QueryParameterValue.string(u.getAboutYou())),\n+public enum UserParameterColumn implements QueryParameterColumn<ReportingUser> {\n+  ABOUT_YOU(\n+      \"about_you\", ReportingUser::getAboutYou, u -> QueryParameterValue.string(u.getAboutYou())),\n   AREA_OF_RESEARCH(\n       \"area_of_research\",\n-      BqDtoUser::getAreaOfResearch,\n+      ReportingUser::getAreaOfResearch,\n       u -> QueryParameterValue.string(u.getAreaOfResearch())),\n-  BETA_ACCESS_BYPASS_TIME(\n-      \"beta_access_bypass_time\",\n-      u -> toInsertRowString(u.getBetaAccessBypassTime()),\n-      u -> toTimestampQpv(u.getBetaAccessBypassTime())),\n-  BETA_ACCESS_REQUEST_TIME(\n-      \"beta_access_request_time\",\n-      u -> toInsertRowString(u.getBetaAccessRequestTime()),\n-      u -> toTimestampQpv(u.getBetaAccessRequestTime())),\n   COMPLIANCE_TRAINING_BYPASS_TIME(\n       \"compliance_training_bypass_time\",\n       u -> toInsertRowString(u.getComplianceTrainingBypassTime()),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4MzU4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492283587", "bodyText": "Everything here is generated in Ruby and pasted in place. If I ever want to do anything else with the generator, I need to switch to a template-based solution that generates things at build time. It's really tedious to copy and paste to ten different files if something changes.", "author": "jaycarlton", "createdAt": "2020-09-21T19:06:27Z", "path": "api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java", "diffHunk": "@@ -0,0 +1,526 @@\n+package org.pmiops.workbench.testconfig;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.pmiops.workbench.utils.TimeAssertions.assertTimeApprox;\n+import static org.pmiops.workbench.utils.mappers.CommonMappers.offsetDateTimeUtc;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import org.pmiops.workbench.db.dao.projection.PrjUser;\n+import org.pmiops.workbench.db.dao.projection.PrjWorkspace;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.BillingAccountType;\n+import org.pmiops.workbench.model.BillingStatus;\n+import org.pmiops.workbench.model.BqDtoUser;\n+import org.pmiops.workbench.model.BqDtoWorkspace;\n+import org.pmiops.workbench.model.DataAccessLevel;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+\n+public class ReportingTestUtils {", "originalCommit": "41864b64e330baa307c8e3dfb4a72886821b5ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java b/api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java\nindex 0c5231ec3..ea0ec5259 100644\n--- a/api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java\n+++ b/api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java\n\n@@ -8,18 +8,16 @@ import static org.pmiops.workbench.utils.mappers.CommonMappers.offsetDateTimeUtc\n \n import java.sql.Timestamp;\n import java.time.Instant;\n-import org.pmiops.workbench.db.dao.projection.PrjUser;\n-import org.pmiops.workbench.db.dao.projection.PrjWorkspace;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingUser;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingWorkspace;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.model.BillingAccountType;\n import org.pmiops.workbench.model.BillingStatus;\n-import org.pmiops.workbench.model.BqDtoUser;\n-import org.pmiops.workbench.model.BqDtoWorkspace;\n import org.pmiops.workbench.model.DataAccessLevel;\n-import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n \n public class ReportingTestUtils {\n   // The code generator should ensure that no  values repeat\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NDg0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492374849", "bodyText": "I had the query string as a constant in the projection class. That approach is certainly tidier, but you lose IntelliJ's highlighting that understands this SQL.", "author": "jaycarlton", "createdAt": "2020-09-21T22:11:15Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -71,4 +70,55 @@\n \n     Long getUserCount();\n   }\n+\n+  @Query(\n+      \"SELECT\\n\"", "originalCommit": "e6f0d5014024efbdc31219201948f994399d9833", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\nindex d020cf644..84772c6f5 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\n\n@@ -75,8 +75,6 @@ public interface UserDao extends CrudRepository<DbUser, Long> {\n       \"SELECT\\n\"\n           + \"  u.aboutYou,\\n\"\n           + \"  u.areaOfResearch,\\n\"\n-          + \"  u.betaAccessBypassTime,\\n\"\n-          + \"  u.betaAccessRequestTime,\\n\"\n           + \"  u.complianceTrainingBypassTime,\\n\"\n           + \"  u.complianceTrainingCompletionTime,\\n\"\n           + \"  u.complianceTrainingExpirationTime,\\n\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NTMxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492375315", "bodyText": "The Prj prefix is unfortunate, but luckily we only need to refer to these classes from a couple of places.", "author": "jaycarlton", "createdAt": "2020-09-21T22:12:17Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.db.dao.projection;\n+\n+import java.sql.Timestamp;\n+\n+public interface PrjUser {", "originalCommit": "e6f0d5014024efbdc31219201948f994399d9833", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTMzNA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492421334", "bodyText": "Is there a reason to make it short like this? e.g. instead of ProjectedUser", "author": "calbach", "createdAt": "2020-09-22T00:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NTMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTU4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492715587", "bodyText": "We have like 4 types now.\n\ndb\nprojection\ndto\napi model\n\nI figure DbUser has a short prefix so maybe I should follow that pattern. In prractice, we could have several different projection interfaces pointing to DbUser with more or fewer fields, so we might need ProjectedReportingUser or something.", "author": "jaycarlton", "createdAt": "2020-09-22T13:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NTMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java b/api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\nsimilarity index 72%\nrename from api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java\nrename to api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\nindex 61b4abd27..6dd011e6c 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\n\n@@ -1,8 +1,9 @@\n package org.pmiops.workbench.db.dao.projection;\n \n import java.sql.Timestamp;\n+import org.pmiops.workbench.model.DataAccessLevel;\n \n-public interface PrjUser {\n+public interface ProjectedReportingUser {\n   /*\n    * User columns\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzY5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492377696", "bodyText": "for tests running the actual DAOs, we need real, dynamic IDs.", "author": "jaycarlton", "createdAt": "2020-09-21T22:18:10Z", "path": "api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java", "diffHunk": "@@ -0,0 +1,526 @@\n+package org.pmiops.workbench.testconfig;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.pmiops.workbench.utils.TimeAssertions.assertTimeApprox;\n+import static org.pmiops.workbench.utils.mappers.CommonMappers.offsetDateTimeUtc;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import org.pmiops.workbench.db.dao.projection.PrjUser;\n+import org.pmiops.workbench.db.dao.projection.PrjWorkspace;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.BillingAccountType;\n+import org.pmiops.workbench.model.BillingStatus;\n+import org.pmiops.workbench.model.BqDtoUser;\n+import org.pmiops.workbench.model.BqDtoWorkspace;\n+import org.pmiops.workbench.model.DataAccessLevel;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+\n+public class ReportingTestUtils {\n+  // The code generator should ensure that no  values repeat\n+  // across columns. This was done to ensure nothing goes wrong\n+  // with the projection interface or mapper, since all nulls look\n+  // alike.\n+  public static final String USER__ABOUT_YOU = \"foo_0\";\n+  public static final String USER__AREA_OF_RESEARCH = \"foo_1\";\n+  public static final Timestamp USER__BETA_ACCESS_BYPASS_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-07T00:00:00.00Z\"));\n+  public static final Timestamp USER__BETA_ACCESS_REQUEST_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-08T00:00:00.00Z\"));\n+  public static final Timestamp USER__COMPLIANCE_TRAINING_BYPASS_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-09T00:00:00.00Z\"));\n+  public static final Timestamp USER__COMPLIANCE_TRAINING_COMPLETION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-10T00:00:00.00Z\"));\n+  public static final Timestamp USER__COMPLIANCE_TRAINING_EXPIRATION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-11T00:00:00.00Z\"));\n+  public static final String USER__CONTACT_EMAIL = \"foo_7\";\n+  public static final Timestamp USER__CREATION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-13T00:00:00.00Z\"));\n+  public static final String USER__CURRENT_POSITION = \"foo_9\";\n+  public static final Short USER__DATA_ACCESS_LEVEL =\n+      DbStorageEnums.dataAccessLevelToStorage(DataAccessLevel.REGISTERED);\n+  public static final Timestamp USER__DATA_USE_AGREEMENT_BYPASS_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-16T00:00:00.00Z\"));\n+  public static final Timestamp USER__DATA_USE_AGREEMENT_COMPLETION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-17T00:00:00.00Z\"));\n+  public static final Integer USER__DATA_USE_AGREEMENT_SIGNED_VERSION = 13;\n+  public static final Timestamp USER__DEMOGRAPHIC_SURVEY_COMPLETION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-19T00:00:00.00Z\"));\n+  public static final Boolean USER__DISABLED = false;\n+  public static final Timestamp USER__EMAIL_VERIFICATION_BYPASS_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-21T00:00:00.00Z\"));\n+  public static final Timestamp USER__EMAIL_VERIFICATION_COMPLETION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-22T00:00:00.00Z\"));\n+  public static final EmailVerificationStatus USER__EMAIL_VERIFICATION_STATUS =\n+      EmailVerificationStatus.SUBSCRIBED;\n+  public static final Timestamp USER__ERA_COMMONS_BYPASS_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-24T00:00:00.00Z\"));\n+  public static final Timestamp USER__ERA_COMMONS_COMPLETION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-25T00:00:00.00Z\"));\n+  public static final Timestamp USER__ERA_COMMONS_LINK_EXPIRE_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-26T00:00:00.00Z\"));\n+  public static final String USER__FAMILY_NAME = \"foo_22\";\n+  public static final Timestamp USER__FIRST_REGISTRATION_COMPLETION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-28T00:00:00.00Z\"));\n+  public static final Timestamp USER__FIRST_SIGN_IN_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-29T00:00:00.00Z\"));\n+  public static final Short USER__FREE_TIER_CREDITS_LIMIT_DAYS_OVERRIDE = 25;\n+  public static final Double USER__FREE_TIER_CREDITS_LIMIT_DOLLARS_OVERRIDE = 26.500000;\n+  public static final String USER__GIVEN_NAME = \"foo_27\";\n+  public static final Timestamp USER__ID_VERIFICATION_BYPASS_TIME =\n+      Timestamp.from(Instant.parse(\"2015-06-02T00:00:00.00Z\"));\n+  public static final Timestamp USER__ID_VERIFICATION_COMPLETION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-06-03T00:00:00.00Z\"));\n+  public static final Timestamp USER__LAST_MODIFIED_TIME =\n+      Timestamp.from(Instant.parse(\"2015-06-04T00:00:00.00Z\"));\n+  public static final String USER__ORGANIZATION = \"foo_31\";\n+  public static final String USER__PHONE_NUMBER = \"foo_32\";\n+  public static final String USER__PROFESSIONAL_URL = \"foo_33\";\n+  public static final Timestamp USER__TWO_FACTOR_AUTH_BYPASS_TIME =\n+      Timestamp.from(Instant.parse(\"2015-06-08T00:00:00.00Z\"));\n+  public static final Timestamp USER__TWO_FACTOR_AUTH_COMPLETION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-06-09T00:00:00.00Z\"));\n+  public static final Long USER__USER_ID = 36L;\n+  public static final String USER__USERNAME = \"foo_37\";\n+  public static final String USER__CITY = \"foo_0\";\n+  public static final String USER__COUNTRY = \"foo_1\";\n+  public static final String USER__STATE = \"foo_2\";\n+  public static final String USER__STREET_ADDRESS_1 = \"foo_3\";\n+  public static final String USER__STREET_ADDRESS_2 = \"foo_4\";\n+  public static final String USER__ZIP_CODE = \"foo_5\";\n+\n+  public static final BillingAccountType WORKSPACE__BILLING_ACCOUNT_TYPE =\n+      BillingAccountType.FREE_TIER;\n+  public static final BillingStatus WORKSPACE__BILLING_STATUS = BillingStatus.ACTIVE;\n+  public static final Long WORKSPACE__CDR_VERSION_ID = 2L;\n+  public static final Timestamp WORKSPACE__CREATION_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-08T00:00:00.00Z\"));\n+  public static final Long WORKSPACE__CREATOR_ID = 4L;\n+  public static final String WORKSPACE__DISSEMINATE_RESEARCH_OTHER = \"foo_6\";\n+  public static final Timestamp WORKSPACE__LAST_ACCESSED_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-12T00:00:00.00Z\"));\n+  public static final Timestamp WORKSPACE__LAST_MODIFIED_TIME =\n+      Timestamp.from(Instant.parse(\"2015-05-13T00:00:00.00Z\"));\n+  public static final String WORKSPACE__NAME = \"foo_9\";\n+  public static final Short WORKSPACE__NEEDS_RP_REVIEW_PROMPT = 10;\n+  public static final Boolean WORKSPACE__PUBLISHED = false;\n+  public static final String WORKSPACE__RP_ADDITIONAL_NOTES = \"foo_12\";\n+  public static final Boolean WORKSPACE__RP_ANCESTRY = false;\n+  public static final String WORKSPACE__RP_ANTICIPATED_FINDINGS = \"foo_14\";\n+  public static final Boolean WORKSPACE__RP_APPROVED = false;\n+  public static final Boolean WORKSPACE__RP_COMMERCIAL_PURPOSE = true;\n+  public static final Boolean WORKSPACE__RP_CONTROL_SET = false;\n+  public static final Boolean WORKSPACE__RP_DISEASE_FOCUSED_RESEARCH = true;\n+  public static final String WORKSPACE__RP_DISEASE_OF_FOCUS = \"foo_19\";\n+  public static final Boolean WORKSPACE__RP_DRUG_DEVELOPMENT = true;\n+  public static final Boolean WORKSPACE__RP_EDUCATIONAL = false;\n+  public static final Boolean WORKSPACE__RP_ETHICS = true;\n+  public static final String WORKSPACE__RP_INTENDED_STUDY = \"foo_23\";\n+  public static final Boolean WORKSPACE__RP_METHODS_DEVELOPMENT = true;\n+  public static final String WORKSPACE__RP_OTHER_POPULATION_DETAILS = \"foo_25\";\n+  public static final Boolean WORKSPACE__RP_OTHER_PURPOSE = true;\n+  public static final String WORKSPACE__RP_OTHER_PURPOSE_DETAILS = \"foo_27\";\n+  public static final Boolean WORKSPACE__RP_POPULATION_HEALTH = true;\n+  public static final String WORKSPACE__RP_REASON_FOR_ALL_OF_US = \"foo_29\";\n+  public static final Boolean WORKSPACE__RP_REVIEW_REQUESTED = true;\n+  public static final String WORKSPACE__RP_SCIENTIFIC_APPROACH = \"foo_31\";\n+  public static final Boolean WORKSPACE__RP_SOCIAL_BEHAVIORAL = true;\n+  public static final Timestamp WORKSPACE__RP_TIME_REQUESTED =\n+      Timestamp.from(Instant.parse(\"2015-06-07T00:00:00.00Z\"));\n+  public static final Long WORKSPACE__WORKSPACE_ID = 34L;\n+\n+  public static void assertDtoUserFields(BqDtoUser user) {\n+    assertThat(user.getAboutYou()).isEqualTo(USER__ABOUT_YOU);\n+    assertThat(user.getAreaOfResearch()).isEqualTo(USER__AREA_OF_RESEARCH);\n+    assertTimeApprox(user.getBetaAccessBypassTime(), USER__BETA_ACCESS_BYPASS_TIME);\n+    assertTimeApprox(user.getBetaAccessRequestTime(), USER__BETA_ACCESS_REQUEST_TIME);\n+    assertTimeApprox(user.getComplianceTrainingBypassTime(), USER__COMPLIANCE_TRAINING_BYPASS_TIME);\n+    assertTimeApprox(\n+        user.getComplianceTrainingCompletionTime(), USER__COMPLIANCE_TRAINING_COMPLETION_TIME);\n+    assertTimeApprox(\n+        user.getComplianceTrainingExpirationTime(), USER__COMPLIANCE_TRAINING_EXPIRATION_TIME);\n+    assertThat(user.getContactEmail()).isEqualTo(USER__CONTACT_EMAIL);\n+    assertTimeApprox(user.getCreationTime(), USER__CREATION_TIME);\n+    assertThat(user.getCurrentPosition()).isEqualTo(USER__CURRENT_POSITION);\n+    assertThat(user.getDataAccessLevel())\n+        .isEqualTo(DbStorageEnums.dataAccessLevelFromStorage(USER__DATA_ACCESS_LEVEL));\n+    assertTimeApprox(user.getDataUseAgreementBypassTime(), USER__DATA_USE_AGREEMENT_BYPASS_TIME);\n+    assertTimeApprox(\n+        user.getDataUseAgreementCompletionTime(), USER__DATA_USE_AGREEMENT_COMPLETION_TIME);\n+    assertThat(user.getDataUseAgreementSignedVersion())\n+        .isEqualTo(USER__DATA_USE_AGREEMENT_SIGNED_VERSION);\n+    assertTimeApprox(\n+        user.getDemographicSurveyCompletionTime(), USER__DEMOGRAPHIC_SURVEY_COMPLETION_TIME);\n+    assertThat(user.getDisabled()).isEqualTo(USER__DISABLED);\n+    assertTimeApprox(user.getEmailVerificationBypassTime(), USER__EMAIL_VERIFICATION_BYPASS_TIME);\n+    assertTimeApprox(\n+        user.getEmailVerificationCompletionTime(), USER__EMAIL_VERIFICATION_COMPLETION_TIME);\n+    assertThat(user.getEmailVerificationStatus()).isEqualTo(USER__EMAIL_VERIFICATION_STATUS);\n+    assertTimeApprox(user.getEraCommonsBypassTime(), USER__ERA_COMMONS_BYPASS_TIME);\n+    assertTimeApprox(user.getEraCommonsCompletionTime(), USER__ERA_COMMONS_COMPLETION_TIME);\n+    assertTimeApprox(user.getEraCommonsLinkExpireTime(), USER__ERA_COMMONS_LINK_EXPIRE_TIME);\n+    assertThat(user.getFamilyName()).isEqualTo(USER__FAMILY_NAME);\n+    assertTimeApprox(\n+        user.getFirstRegistrationCompletionTime(), USER__FIRST_REGISTRATION_COMPLETION_TIME);\n+    assertTimeApprox(user.getFirstSignInTime(), USER__FIRST_SIGN_IN_TIME);\n+    assertThat(user.getFreeTierCreditsLimitDaysOverride())\n+        .isEqualTo(USER__FREE_TIER_CREDITS_LIMIT_DAYS_OVERRIDE);\n+    assertThat(user.getFreeTierCreditsLimitDollarsOverride())\n+        .isEqualTo(USER__FREE_TIER_CREDITS_LIMIT_DOLLARS_OVERRIDE);\n+    assertThat(user.getGivenName()).isEqualTo(USER__GIVEN_NAME);\n+    assertTimeApprox(user.getIdVerificationBypassTime(), USER__ID_VERIFICATION_BYPASS_TIME);\n+    assertTimeApprox(user.getLastModifiedTime(), USER__LAST_MODIFIED_TIME);\n+    assertThat(user.getOrganization()).isEqualTo(USER__ORGANIZATION);\n+    assertThat(user.getPhoneNumber()).isEqualTo(USER__PHONE_NUMBER);\n+    assertThat(user.getProfessionalUrl()).isEqualTo(USER__PROFESSIONAL_URL);\n+    assertTimeApprox(user.getTwoFactorAuthBypassTime(), USER__TWO_FACTOR_AUTH_BYPASS_TIME);\n+    assertTimeApprox(user.getTwoFactorAuthCompletionTime(), USER__TWO_FACTOR_AUTH_COMPLETION_TIME);\n+    assertThat(user.getUserId()).isEqualTo(USER__USER_ID);\n+    assertThat(user.getUsername()).isEqualTo(USER__USERNAME);\n+  }\n+\n+  public static void assertDtoWorkspaceFields(\n+      BqDtoWorkspace workspace,\n+      long expectedWorkspaceId,", "originalCommit": "e6f0d5014024efbdc31219201948f994399d9833", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java b/api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java\nindex 0c5231ec3..ea0ec5259 100644\n--- a/api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java\n+++ b/api/src/test/java/org/pmiops/workbench/testconfig/ReportingTestUtils.java\n\n@@ -8,18 +8,16 @@ import static org.pmiops.workbench.utils.mappers.CommonMappers.offsetDateTimeUtc\n \n import java.sql.Timestamp;\n import java.time.Instant;\n-import org.pmiops.workbench.db.dao.projection.PrjUser;\n-import org.pmiops.workbench.db.dao.projection.PrjWorkspace;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingUser;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingWorkspace;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.model.BillingAccountType;\n import org.pmiops.workbench.model.BillingStatus;\n-import org.pmiops.workbench.model.BqDtoUser;\n-import org.pmiops.workbench.model.BqDtoWorkspace;\n import org.pmiops.workbench.model.DataAccessLevel;\n-import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n \n public class ReportingTestUtils {\n   // The code generator should ensure that no  values repeat\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3ODA2NA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492378064", "bodyText": "This one is a little special, but somewhere I had a whole bunch of assertions that needed this combination of arguments.", "author": "jaycarlton", "createdAt": "2020-09-21T22:19:14Z", "path": "api/src/test/java/org/pmiops/workbench/utils/TimeAssertions.java", "diffHunk": "@@ -14,29 +16,51 @@\n \n   public static final Duration DEFAULT_TOLERANCE = Duration.ofMillis(100);\n \n-  public static void assertTimeWithinTolerance(OffsetDateTime actual, OffsetDateTime expected) {\n-    assertTimeWithinTolerance(actual.toInstant(), expected.toInstant(), DEFAULT_TOLERANCE);\n+  public static void assertTimeApprox(OffsetDateTime actual, OffsetDateTime expected) {\n+    assertTimeApprox(actual.toInstant(), expected.toInstant(), DEFAULT_TOLERANCE);\n   }\n \n-  public static void assertTimeWithinTolerance(\n+  public static void assertTimeApprox(\n       OffsetDateTime actual, OffsetDateTime expected, Duration tolerance) {\n-    assertTimeWithinTolerance(actual.toInstant(), expected.toInstant(), tolerance);\n+    assertTimeApprox(actual.toInstant(), expected.toInstant(), tolerance);\n   }\n \n-  public static void assertTimeWithinTolerance(Instant actual, Instant expected) {\n-    assertTimeWithinTolerance(actual, expected, DEFAULT_TOLERANCE);\n+  public static void assertTimeApprox(Timestamp actual, Timestamp expected) {\n+    assertTimeApprox(actual.toInstant(), expected.toInstant());\n   }\n \n-  public static void assertTimeWithinTolerance(\n-      Instant actual, Instant expected, Duration tolerance) {\n-    assertTimeWithinTolerance(actual.toEpochMilli(), expected.toEpochMilli(), tolerance.toMillis());\n+  public static void assertTimeApprox(Timestamp actual, Timestamp expected, Duration tolerance) {\n+    assertTimeApprox(actual.toInstant(), expected.toInstant(), tolerance);\n   }\n \n-  public static void assertTimeWithinTolerance(long actualEpochMillis, long expectedEpochMillis) {\n-    assertTimeWithinTolerance(actualEpochMillis, expectedEpochMillis, DEFAULT_TOLERANCE.toMillis());\n+  public static void assertTimeApprox(OffsetDateTime actual, Timestamp expected) {\n+    // TODO: move to TimeMappers class after merging that\n+    assertTimeApprox(actual, OffsetDateTime.ofInstant(expected.toInstant(), ZoneOffset.UTC));\n   }\n \n-  public static void assertTimeWithinTolerance(\n+  public static void assertTimeApprox(", "originalCommit": "e6f0d5014024efbdc31219201948f994399d9833", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTE3MA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492421170", "bodyText": "based on your codegen, I suspect this SQL is generated. If so, how is one meant to update this to match changes in the codegen inputs? Also, should there be some kind of autogenerated comment that comes with it to indicate that this should not be modified manually?", "author": "calbach", "createdAt": "2020-09-22T00:42:42Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java", "diffHunk": "@@ -85,4 +86,44 @@ default void updateBillingStatus(long workspaceId, BillingStatus status) {\n \n     Long getWorkspaceCount();\n   }\n+\n+  @Query(\n+      \"SELECT\\n\"\n+          + \"  w.billingAccountType,\\n\"\n+          + \"  w.billingStatus,\\n\"\n+          + \"  w.cdrVersion.cdrVersionId AS cdrVersionId,\\n\"\n+          + \"  w.creationTime,\\n\"\n+          + \"  w.creator.userId AS creatorId,\\n\"\n+          + \"  w.disseminateResearchOther,\\n\"\n+          + \"  w.lastAccessedTime,\\n\"\n+          + \"  w.lastModifiedTime,\\n\"\n+          + \"  w.name,\\n\"\n+          + \"  w.needsResearchPurposeReviewPrompt AS needsRpReviewPrompt,\\n\"\n+          + \"  w.published,\\n\"\n+          + \"  w.additionalNotes AS rpAdditionalNotes,\\n\"", "originalCommit": "ab663267e77cba832cf0846d3cfc9754aed9d483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5NDQ3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492694477", "bodyText": "I should've called it a wizard and not a codegen tool, but you're right. It was on my list to do something like that, but I was worried I'd follow that rabbit too far and end up restructuring the whole thing.\nIn practice, using a graphical merge tool like Beyond Compare worked for me for now.", "author": "jaycarlton", "createdAt": "2020-09-22T12:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5NzE2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492797162", "bodyText": "Standardizing column naming practices will help here, as well as best practices for entity classes.", "author": "jaycarlton", "createdAt": "2020-09-22T14:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java b/api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java\nindex 4ef0a8d0e..bf93661c2 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java\n\n@@ -125,5 +125,5 @@ public interface WorkspaceDao extends CrudRepository<DbWorkspace, Long> {\n           + \"  w.workspaceId\\n\"\n           + \"FROM DbWorkspace w\\n\"\n           + \"WHERE w.activeStatus = 0\")\n-  List<PrjWorkspace> getReportingWorkspaces();\n+  List<ProjectedReportingWorkspace> getReportingWorkspaces();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTQ0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492421449", "bodyText": "If this code is generate, please add a generated comment with provenance", "author": "calbach", "createdAt": "2020-09-22T00:44:01Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.db.dao.projection;", "originalCommit": "ab663267e77cba832cf0846d3cfc9754aed9d483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5NjYxMg==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492696612", "bodyText": "Good idea.\nWith respect to the name PrjUser above, I was trying to draw a parallel with DbUser, but I like ProjectedUser better than UserProjection.", "author": "jaycarlton", "createdAt": "2020-09-22T12:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMTQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java b/api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\nsimilarity index 72%\nrename from api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java\nrename to api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\nindex 61b4abd27..6dd011e6c 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/projection/PrjUser.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingUser.java\n\n@@ -1,8 +1,9 @@\n package org.pmiops.workbench.db.dao.projection;\n \n import java.sql.Timestamp;\n+import org.pmiops.workbench.model.DataAccessLevel;\n \n-public interface PrjUser {\n+public interface ProjectedReportingUser {\n   /*\n    * User columns\n    */\n"}}, {"oid": "d83c6413f72160e6b68fd240097d6a47b3d532ac", "url": "https://github.com/all-of-us/workbench/commit/d83c6413f72160e6b68fd240097d6a47b3d532ac", "message": "restore cron", "committedDate": "2020-09-22T13:18:27Z", "type": "commit"}, {"oid": "596780805a75c479784a08e0f48a047952ea35fd", "url": "https://github.com/all-of-us/workbench/commit/596780805a75c479784a08e0f48a047952ea35fd", "message": "Merge branch 'master' into jaycarlton/projectionTest2", "committedDate": "2020-09-22T13:18:33Z", "type": "commit"}, {"oid": "9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "url": "https://github.com/all-of-us/workbench/commit/9e54e6abb023dc580ab1f37fadaf4d62c40eecfd", "message": "remove unneeded fields and start adding provenance comments", "committedDate": "2020-09-22T15:19:00Z", "type": "commit"}, {"oid": "dfd2a6644fd2fb09f434144184a2164542a802e0", "url": "https://github.com/all-of-us/workbench/commit/dfd2a6644fd2fb09f434144184a2164542a802e0", "message": "start commenting on things", "committedDate": "2020-09-22T17:23:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NTYwMg==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492945602", "bodyText": "Why is expectedType nullable?", "author": "calbach", "createdAt": "2020-09-22T18:25:38Z", "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java", "diffHunk": "@@ -65,35 +103,83 @@ public static String replaceNamedParameters(QueryJobConfiguration queryJobConfig\n     return Matchers.replaceAllInMap(patternToReplacement, result);\n   }\n \n-  public static String formatQuery(String query) {\n+  @NotNull\n+  public static String formatQuery(@NotNull String query) {\n     return new BasicFormatterImpl().format(query);\n   }\n \n   // use lookbehind for non-word character, since \"'\"(@\" or \" @\" don't represent left-side word\n   // boundaries.\n-  private static Pattern buildParameterRegex(String parameterName) {\n+  @NotNull\n+  private static Pattern buildParameterRegex(@NotNull String parameterName) {\n     return Pattern.compile(String.format(\"(?<=\\\\W)%s\\\\b\", decorateParameterName(parameterName)));\n   }\n \n-  public static String decorateParameterName(String parameterName) {\n+  @NotNull\n+  public static String decorateParameterName(@NotNull String parameterName) {\n     return \"@\" + parameterName;\n   }\n \n-  private static String getReplacementString(QueryParameterValue parameterValue) {\n+  @Nullable\n+  public static QueryParameterValue toTimestampQpv(@Nullable OffsetDateTime offsetDateTime) {\n+    final String arg =\n+        Optional.ofNullable(offsetDateTime).map(QPV_TIMESTAMP_FORMATTER::format).orElse(null);\n+    return QueryParameterValue.timestamp(arg);\n+  }\n+\n+  // Return null instead of Optional.empty() so the return value can go directly into\n+  // the content map of an InsertAllRequest.RowToInsert.\n+  @Nullable\n+  public static String toInsertRowString(@Nullable OffsetDateTime offsetDateTime) {\n+    return Optional.ofNullable(offsetDateTime)\n+        .map(ROW_TO_INSERT_TIMESTAMP_FORMATTER::format)\n+        .orElse(null);\n+  }\n+\n+  // BigQuery TIMESTAMP types don't include a zone or offset, but are always UTC.\n+  public static Optional<OffsetDateTime> rowToInsertStringToOffsetTimestamp(\n+      @Nullable String bqTimeString) {\n+    return Optional.ofNullable(bqTimeString)\n+        .filter(s -> s.length() > 0)\n+        .map(ROW_TO_INSERT_TIMESTAMP_FORMATTER::parse)\n+        .map(LocalDateTime::from)\n+        .map(ldt -> OffsetDateTime.of(ldt, ZoneOffset.UTC));\n+  }\n+\n+  @NotNull\n+  public static <T extends Enum<T>> QueryParameterValue enumToQpv(@Nullable T enumValue) {\n+    return QueryParameterValue.string(enumToString(enumValue));\n+  }\n+\n+  // RowToInsert enum string or null (to be omitted)\n+  @Nullable\n+  public static <T extends Enum<T>> String enumToString(@Nullable T enumValue) {\n+    return Optional.ofNullable(enumValue).map(T::toString).orElse(null);\n+  }\n+\n+  @NotNull\n+  private static String getReplacementString(@Nullable QueryParameterValue parameterValue) {\n     final String value =\n         Optional.ofNullable(parameterValue).map(QueryParameterValue::getValue).orElse(\"NULL\");\n \n-    if (isTimestampQpv(parameterValue)) {\n+    if (isQpvTimestamp(parameterValue)) {\n       return String.format(\"TIMESTAMP '%s'\", value);\n     } else {\n       return value;\n     }\n   }\n \n-  private static boolean isTimestampQpv(QueryParameterValue parameterValue) {\n+  @NotNull\n+  private static boolean isQpvTimestamp(@Nullable QueryParameterValue parameterValue) {\n+    return matchesQpvType(parameterValue, StandardSQLTypeName.TIMESTAMP);\n+  }\n+\n+  // return false if teh parameterValue is non-null does not match the expected type.\n+  private static boolean matchesQpvType(\n+      @Nullable QueryParameterValue parameterValue, @Nullable StandardSQLTypeName expectedType) {", "originalCommit": "ab663267e77cba832cf0846d3cfc9754aed9d483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1ODc4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r493758789", "bodyText": "Good catch; neither of these should be nullable.", "author": "jaycarlton", "createdAt": "2020-09-23T17:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "19f58ba9062671c182cfa09290db6058eea237dd", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\nindex 2792622aa..8d3467938 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java\n\n@@ -175,10 +175,8 @@ public final class QueryParameterValues {\n   }\n \n   // return false if teh parameterValue is non-null does not match the expected type.\n-  private static boolean matchesQpvType(\n-      @Nullable QueryParameterValue parameterValue, @Nullable StandardSQLTypeName expectedType) {\n-    return Optional.ofNullable(parameterValue)\n-        .map(QueryParameterValue::getType)\n+  private static boolean matchesQpvType(QueryParameterValue parameterValue, StandardSQLTypeName expectedType) {\n+    return Optional.ofNullable(parameterValue.getType())\n         .map(t -> t == expectedType)\n         .orElse(true);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1MjE2MA==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r492952160", "bodyText": "reporting", "author": "calbach", "createdAt": "2020-09-22T18:36:18Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -1029,4 +1030,9 @@ public boolean hasAuthority(long userId, Authority required) {\n   public Set<DbUser> findAllUsersWithAuthoritiesAndPageVisits() {\n     return userDao.findAllUsersWithAuthoritiesAndPageVisits();\n   }\n+\n+  @Override\n+  public List<PrjUser> getRepotingUsers() {", "originalCommit": "ab663267e77cba832cf0846d3cfc9754aed9d483", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8142c31a3aac84212974351a576c71f4da628f04", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\nindex 4bbcf414b..a32188a01 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n\n@@ -1032,7 +1032,7 @@ public class UserServiceImpl implements UserService, GaugeDataCollector {\n   }\n \n   @Override\n-  public List<PrjUser> getRepotingUsers() {\n+  public List<ProjectedReportingUser> getRepotingUsers() {\n     return userDao.getReportingUsers();\n   }\n }\n"}}, {"oid": "8142c31a3aac84212974351a576c71f4da628f04", "url": "https://github.com/all-of-us/workbench/commit/8142c31a3aac84212974351a576c71f4da628f04", "message": "more fixes", "committedDate": "2020-09-22T22:27:53Z", "type": "commit"}, {"oid": "18054785d8e9b303fe4822bb981df09ae851e0e7", "url": "https://github.com/all-of-us/workbench/commit/18054785d8e9b303fe4822bb981df09ae851e0e7", "message": "test update", "committedDate": "2020-09-23T00:08:52Z", "type": "commit"}, {"oid": "b8ee4ffd1dab96ba084b6ba816c683bc31f17644", "url": "https://github.com/all-of-us/workbench/commit/b8ee4ffd1dab96ba084b6ba816c683bc31f17644", "message": "doc improvements", "committedDate": "2020-09-23T17:42:46Z", "type": "commit"}, {"oid": "19f58ba9062671c182cfa09290db6058eea237dd", "url": "https://github.com/all-of-us/workbench/commit/19f58ba9062671c182cfa09290db6058eea237dd", "message": "fixes & cleanup on  wizard, especially around enum handling", "committedDate": "2020-09-23T19:00:00Z", "type": "commit"}, {"oid": "e4479d1057193149186641cbccf4ae35965b2aac", "url": "https://github.com/all-of-us/workbench/commit/e4479d1057193149186641cbccf4ae35965b2aac", "message": "type fixes and comment improvements", "committedDate": "2020-09-23T21:17:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MjcxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r493942711", "bodyText": "opt: Having a long generic type name like this looks a bit unusual to me. We don't have an official style ruling on this, but FWIW Oracle's guides recommend a single character here.", "author": "calbach", "createdAt": "2020-09-23T23:05:09Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/BigQueryInsertionPayloadTransformer.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.pmiops.workbench.reporting.insertion;\n+\n+/*\n+ * Base interface for BigQuery payload builders. Parameterized class is a payload model type,\n+ * and the intent is to pair each implementation with an enum type inheriting from\n+ * QueryParameterColumn<T>.\n+ *\n+ * Builder interfaces for separate BigQuery upload paths are possible.\n+ */\n+public interface BigQueryInsertionPayloadTransformer<MODEL_TYPE> {", "originalCommit": "e4479d1057193149186641cbccf4ae35965b2aac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwODU4Ng==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r494308586", "bodyText": "Regarding this one, yes single-character names have been standard forever. I thought it would make things easier to follow particularly in places where there are multiple type parameters). How about MODEL_T? Or is that worse?", "author": "jaycarlton", "createdAt": "2020-09-24T13:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MjcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "713b9059127ced52e89bfba66b954b907def3c47", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/insertion/BigQueryInsertionPayloadTransformer.java b/api/src/main/java/org/pmiops/workbench/reporting/insertion/BigQueryInsertionPayloadTransformer.java\nindex 7b546b4c5..7d650de6b 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/insertion/BigQueryInsertionPayloadTransformer.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/insertion/BigQueryInsertionPayloadTransformer.java\n\n@@ -7,8 +7,8 @@ package org.pmiops.workbench.reporting.insertion;\n  *\n  * Builder interfaces for separate BigQuery upload paths are possible.\n  */\n-public interface BigQueryInsertionPayloadTransformer<MODEL_TYPE> {\n+public interface BigQueryInsertionPayloadTransformer<MODEL_T> {\n   // Extending classes need only provide an  array of QueryParameterColumns, such\n   // as an enum class's values() array.\n-  ColumnValueExtractor<MODEL_TYPE>[] getQueryParameterColumns();\n+  ColumnValueExtractor<MODEL_T>[] getQueryParameterColumns();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNTcwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3949#discussion_r493905709", "bodyText": "The enum entries are all generated, but it would be easy enough to generate the constructor and accessors, too.", "author": "jaycarlton", "createdAt": "2020-09-23T21:28:07Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/WorkspaceColumnValueExtractor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.pmiops.workbench.reporting.insertion;\n+\n+import static com.google.cloud.bigquery.QueryParameterValue.bool;\n+import static com.google.cloud.bigquery.QueryParameterValue.int64;\n+import static com.google.cloud.bigquery.QueryParameterValue.string;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.enumToQpv;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.enumToString;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.toInsertRowString;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.toTimestampQpv;\n+\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import java.util.function.Function;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n+\n+public enum WorkspaceColumnValueExtractor implements ColumnValueExtractor<ReportingWorkspace> {\n+  BILLING_ACCOUNT_TYPE(\n+      \"billing_account_type\",\n+      w -> enumToString(w.getBillingAccountType()),\n+      w -> enumToQpv(w.getBillingAccountType())),\n+  BILLING_STATUS(\n+      \"billing_status\",\n+      w -> enumToString(w.getBillingStatus()),\n+      w -> enumToQpv(w.getBillingStatus())),\n+  CDR_VERSION_ID(\n+      \"cdr_version_id\", ReportingWorkspace::getCdrVersionId, w -> int64(w.getCdrVersionId())),\n+  CREATION_TIME(\n+      \"creation_time\",\n+      w -> toInsertRowString(w.getCreationTime()),\n+      w -> toTimestampQpv(w.getCreationTime())),\n+  CREATOR_ID(\"creator_id\", ReportingWorkspace::getCreatorId, w -> int64(w.getCreatorId())),\n+  DISSEMINATE_RESEARCH_OTHER(\n+      \"disseminate_research_other\",\n+      ReportingWorkspace::getDisseminateResearchOther,\n+      w -> string(w.getDisseminateResearchOther())),\n+  LAST_ACCESSED_TIME(\n+      \"last_accessed_time\",\n+      w -> toInsertRowString(w.getLastAccessedTime()),\n+      w -> toTimestampQpv(w.getLastAccessedTime())),\n+  LAST_MODIFIED_TIME(\n+      \"last_modified_time\",\n+      w -> toInsertRowString(w.getLastModifiedTime()),\n+      w -> toTimestampQpv(w.getLastModifiedTime())),\n+  NAME(\"name\", ReportingWorkspace::getName, w -> string(w.getName())),\n+  NEEDS_RP_REVIEW_PROMPT(\n+      \"needs_rp_review_prompt\",\n+      ReportingWorkspace::getNeedsRpReviewPrompt,\n+      w -> int64(w.getNeedsRpReviewPrompt())),\n+  PUBLISHED(\"published\", ReportingWorkspace::getPublished, w -> bool(w.getPublished())),\n+  RP_ADDITIONAL_NOTES(\n+      \"rp_additional_notes\",\n+      ReportingWorkspace::getRpAdditionalNotes,\n+      w -> string(w.getRpAdditionalNotes())),\n+  RP_ANCESTRY(\"rp_ancestry\", ReportingWorkspace::getRpAncestry, w -> bool(w.getRpAncestry())),\n+  RP_ANTICIPATED_FINDINGS(\n+      \"rp_anticipated_findings\",\n+      ReportingWorkspace::getRpAnticipatedFindings,\n+      w -> string(w.getRpAnticipatedFindings())),\n+  RP_APPROVED(\"rp_approved\", ReportingWorkspace::getRpApproved, w -> bool(w.getRpApproved())),\n+  RP_COMMERCIAL_PURPOSE(\n+      \"rp_commercial_purpose\",\n+      ReportingWorkspace::getRpCommercialPurpose,\n+      w -> bool(w.getRpCommercialPurpose())),\n+  RP_CONTROL_SET(\n+      \"rp_control_set\", ReportingWorkspace::getRpControlSet, w -> bool(w.getRpControlSet())),\n+  RP_DISEASE_FOCUSED_RESEARCH(\n+      \"rp_disease_focused_research\",\n+      ReportingWorkspace::getRpDiseaseFocusedResearch,\n+      w -> bool(w.getRpDiseaseFocusedResearch())),\n+  RP_DISEASE_OF_FOCUS(\n+      \"rp_disease_of_focus\",\n+      ReportingWorkspace::getRpDiseaseOfFocus,\n+      w -> string(w.getRpDiseaseOfFocus())),\n+  RP_DRUG_DEVELOPMENT(\n+      \"rp_drug_development\",\n+      ReportingWorkspace::getRpDrugDevelopment,\n+      w -> bool(w.getRpDrugDevelopment())),\n+  RP_EDUCATIONAL(\n+      \"rp_educational\", ReportingWorkspace::getRpEducational, w -> bool(w.getRpEducational())),\n+  RP_ETHICS(\"rp_ethics\", ReportingWorkspace::getRpEthics, w -> bool(w.getRpEthics())),\n+  RP_INTENDED_STUDY(\n+      \"rp_intended_study\",\n+      ReportingWorkspace::getRpIntendedStudy,\n+      w -> string(w.getRpIntendedStudy())),\n+  RP_METHODS_DEVELOPMENT(\n+      \"rp_methods_development\",\n+      ReportingWorkspace::getRpMethodsDevelopment,\n+      w -> bool(w.getRpMethodsDevelopment())),\n+  RP_OTHER_POPULATION_DETAILS(\n+      \"rp_other_population_details\",\n+      ReportingWorkspace::getRpOtherPopulationDetails,\n+      w -> string(w.getRpOtherPopulationDetails())),\n+  RP_OTHER_PURPOSE(\n+      \"rp_other_purpose\", ReportingWorkspace::getRpOtherPurpose, w -> bool(w.getRpOtherPurpose())),\n+  RP_OTHER_PURPOSE_DETAILS(\n+      \"rp_other_purpose_details\",\n+      ReportingWorkspace::getRpOtherPurposeDetails,\n+      w -> string(w.getRpOtherPurposeDetails())),\n+  RP_POPULATION_HEALTH(\n+      \"rp_population_health\",\n+      ReportingWorkspace::getRpPopulationHealth,\n+      w -> bool(w.getRpPopulationHealth())),\n+  RP_REASON_FOR_ALL_OF_US(\n+      \"rp_reason_for_all_of_us\",\n+      ReportingWorkspace::getRpReasonForAllOfUs,\n+      w -> string(w.getRpReasonForAllOfUs())),\n+  RP_REVIEW_REQUESTED(\n+      \"rp_review_requested\",\n+      ReportingWorkspace::getRpReviewRequested,\n+      w -> bool(w.getRpReviewRequested())),\n+  RP_SCIENTIFIC_APPROACH(\n+      \"rp_scientific_approach\",\n+      ReportingWorkspace::getRpScientificApproach,\n+      w -> string(w.getRpScientificApproach())),\n+  RP_SOCIAL_BEHAVIORAL(\n+      \"rp_social_behavioral\",\n+      ReportingWorkspace::getRpSocialBehavioral,\n+      w -> bool(w.getRpSocialBehavioral())),\n+  RP_TIME_REQUESTED(\n+      \"rp_time_requested\",\n+      w -> toInsertRowString(w.getRpTimeRequested()),\n+      w -> toTimestampQpv(w.getRpTimeRequested())),\n+  WORKSPACE_ID(\"workspace_id\", ReportingWorkspace::getWorkspaceId, w -> int64(w.getWorkspaceId()));\n+\n+  public static final String TABLE_NAME = \"workspace\";", "originalCommit": "18054785d8e9b303fe4822bb981df09ae851e0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "713b9059127ced52e89bfba66b954b907def3c47", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/reporting/insertion/WorkspaceColumnValueExtractor.java b/api/src/main/java/org/pmiops/workbench/reporting/insertion/WorkspaceColumnValueExtractor.java\nindex d06bab96a..136123b65 100644\n--- a/api/src/main/java/org/pmiops/workbench/reporting/insertion/WorkspaceColumnValueExtractor.java\n+++ b/api/src/main/java/org/pmiops/workbench/reporting/insertion/WorkspaceColumnValueExtractor.java\n\n@@ -12,6 +12,9 @@ import com.google.cloud.bigquery.QueryParameterValue;\n import java.util.function.Function;\n import org.pmiops.workbench.model.ReportingWorkspace;\n \n+/*\n+ * Column data and metadata convertors for BigQuery workspace table in reporting dataset.\n+ */\n public enum WorkspaceColumnValueExtractor implements ColumnValueExtractor<ReportingWorkspace> {\n   BILLING_ACCOUNT_TYPE(\n       \"billing_account_type\",\n"}}, {"oid": "713b9059127ced52e89bfba66b954b907def3c47", "url": "https://github.com/all-of-us/workbench/commit/713b9059127ced52e89bfba66b954b907def3c47", "message": "pr fixes", "committedDate": "2020-09-24T13:23:05Z", "type": "commit"}]}