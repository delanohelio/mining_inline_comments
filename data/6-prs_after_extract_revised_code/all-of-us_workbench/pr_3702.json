{"pr_number": 3702, "pr_title": "[RW-5056][Risk=low] DataSetController - use DataSetServiceImpl instead of dataSetDao, conceptSetDao and cohortDao", "pr_createdAt": "2020-06-23T06:00:36Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3702", "timeline": [{"oid": "0e2597ef43f4b66469821a0d48445b89d05ee94b", "url": "https://github.com/all-of-us/workbench/commit/0e2597ef43f4b66469821a0d48445b89d05ee94b", "message": "Use service rather than Dao in dataSetController", "committedDate": "2020-06-23T05:56:25Z", "type": "commit"}, {"oid": "02c0e5107d78cf182a9061ccefa355c84063913f", "url": "https://github.com/all-of-us/workbench/commit/02c0e5107d78cf182a9061ccefa355c84063913f", "message": "Cohort and Concept set service", "committedDate": "2020-06-23T06:37:06Z", "type": "commit"}, {"oid": "142dc75ff1347e60bcd11863d64a945addaa2fb4", "url": "https://github.com/all-of-us/workbench/commit/142dc75ff1347e60bcd11863d64a945addaa2fb4", "message": "FIX Api Test", "committedDate": "2020-06-23T18:35:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MDE3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3702#discussion_r444460179", "bodyText": "I'd add a method to WorkspaceService that returns Optional so you know to handle the case where it's not found separately.", "author": "jaycarlton", "createdAt": "2020-06-23T19:34:43Z", "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -525,47 +520,33 @@ private void formatTimestampValues(List<DataSetPreviewValueList> valuePreviewLis\n       String workspaceNamespace, String workspaceId, MarkDataSetRequest markDataSetRequest) {\n     workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n         workspaceNamespace, workspaceId, WorkspaceAccessLevel.WRITER);\n-    List<DbDataset> dbDataSetList = new ArrayList<>();\n-    if (ResourceType.COHORT.equals(markDataSetRequest.getResourceType())) {\n-      dbDataSetList = dataSetDao.findDataSetsByCohortIds(markDataSetRequest.getId());\n-    } else if (ResourceType.CONCEPT_SET.equals(markDataSetRequest.getResourceType())) {\n-      dbDataSetList = dataSetDao.findDataSetsByConceptSetIds(markDataSetRequest.getId());\n-    }\n-    dbDataSetList =\n-        dbDataSetList.stream()\n-            .map(\n-                dataSet -> {\n-                  dataSet.setInvalid(true);\n-                  return dataSet;\n-                })\n-            .collect(Collectors.toList());\n-    try {\n-      dataSetDao.save(dbDataSetList);\n-    } catch (OptimisticLockException e) {\n-      throw new ConflictException(\"Failed due to concurrent data set modification\");\n-    }\n-\n+    dataSetService.markDirty(markDataSetRequest.getResourceType(), markDataSetRequest.getId());\n     return ResponseEntity.ok(true);\n   }\n \n   @Override\n   public ResponseEntity<EmptyResponse> deleteDataSet(\n       String workspaceNamespace, String workspaceId, Long dataSetId) {\n-    DbDataset dataSet =\n-        getDbDataSet(workspaceNamespace, workspaceId, dataSetId, WorkspaceAccessLevel.WRITER);\n-    dataSetDao.delete(dataSet.getDataSetId());\n+    DbWorkspace workspace =\n+        workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(", "originalCommit": "142dc75ff1347e60bcd11863d64a945addaa2fb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc79f2f5f7c0e0c91605d17a982bc5d56edf3aee", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/DataSetController.java b/api/src/main/java/org/pmiops/workbench/api/DataSetController.java\nindex 8cb35def6..e06313342 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/DataSetController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/DataSetController.java\n\n@@ -545,8 +545,9 @@ public class DataSetController implements DataSetApiDelegate {\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.WRITER);\n \n+    DbDataset dbDataSet = dataSetService.getDbDataSet(workspace, dataSetId).get();\n+\n     int version = Etags.toVersion(request.getEtag());\n-    DbDataset dbDataSet = dataSetService.getDbDataSet(workspace, dataSetId);\n     if (dbDataSet.getVersion() != version) {\n       throw new ConflictException(\"Attempted to modify outdated data set version\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MDk2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3702#discussion_r444460967", "bodyText": "Yeah, I'd make this one return Optional.", "author": "jaycarlton", "createdAt": "2020-06-23T19:36:23Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetService.java", "diffHunk": "@@ -46,4 +49,14 @@ DbDataset cloneDataSetToWorkspace(\n   List<DbConceptSet> getConceptSetsForDataset(DbDataset dataSet);\n \n   List<DbCohort> getCohortsForDataset(DbDataset dataSet);\n+\n+  List<DbDataset> getDataSets(ResourceType resourceType, long resourceId);\n+\n+  List<DbDataset> getInvalidDataSetsByWorkspace(DbWorkspace dbWorkspace);\n+\n+  void deleteDataSet(DbWorkspace dbWorkspace, Long dataSetId);\n+\n+  DbDataset getDbDataSet(DbWorkspace dbWorkspace, Long dataSetId);", "originalCommit": "142dc75ff1347e60bcd11863d64a945addaa2fb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc79f2f5f7c0e0c91605d17a982bc5d56edf3aee", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/DataSetService.java b/api/src/main/java/org/pmiops/workbench/db/dao/DataSetService.java\nindex 463bac1c0..cb9f13a92 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/DataSetService.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/DataSetService.java\n\n@@ -56,7 +57,7 @@ public interface DataSetService {\n \n   void deleteDataSet(DbWorkspace dbWorkspace, Long dataSetId);\n \n-  DbDataset getDbDataSet(DbWorkspace dbWorkspace, Long dataSetId);\n+  Optional<DbDataset> getDbDataSet(DbWorkspace dbWorkspace, Long dataSetId);\n \n   void markDirty(ResourceType resourceType, long resourceId);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MTI4NA==", "url": "https://github.com/all-of-us/workbench/pull/3702#discussion_r444461284", "bodyText": "nit: prefer switch statements on enum values.", "author": "jaycarlton", "createdAt": "2020-06-23T19:37:05Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -676,6 +684,59 @@ public DbDataset cloneDataSetToWorkspace(\n     return cohortDao.findAllByCohortIdIn(dataSetDao.findOne(dataSet.getDataSetId()).getCohortIds());\n   }\n \n+  @Override\n+  public List<DbDataset> getDataSets(ResourceType resourceType, long resourceId) {\n+    List<DbDataset> dbDataSets = new ArrayList<>();\n+    if (ResourceType.COHORT.equals(resourceType)) {", "originalCommit": "142dc75ff1347e60bcd11863d64a945addaa2fb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc79f2f5f7c0e0c91605d17a982bc5d56edf3aee", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java\nindex 81c24623e..c35242618 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java\n\n@@ -687,10 +687,13 @@ public class DataSetServiceImpl implements DataSetService, GaugeDataCollector {\n   @Override\n   public List<DbDataset> getDataSets(ResourceType resourceType, long resourceId) {\n     List<DbDataset> dbDataSets = new ArrayList<>();\n-    if (ResourceType.COHORT.equals(resourceType)) {\n-      dbDataSets = dataSetDao.findDataSetsByCohortIds(resourceId);\n-    } else if (ResourceType.CONCEPT_SET.equals(resourceType)) {\n-      dbDataSets = dataSetDao.findDataSetsByConceptSetIds(resourceId);\n+    switch (resourceType) {\n+      case COHORT:\n+        dbDataSets = dataSetDao.findDataSetsByCohortIds(resourceId);\n+        break;\n+      case CONCEPT_SET:\n+        dbDataSets = dataSetDao.findDataSetsByConceptSetIds(resourceId);\n+        break;\n     }\n     return dbDataSets;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MzM1NA==", "url": "https://github.com/all-of-us/workbench/pull/3702#discussion_r444463354", "bodyText": "If you can, it's better to avoid overwriting variables. I'd probably give the original set a different name, or just inline it so yo have\ngetDataSets(resourceType, resourceId).stream()\n            .map(\n                dataSet -> {\n                  dataSet.setInvalid(true);\n                  return dataSet;\n                })\n            .collect(Collectors.toList());\n\nBut really I think you can just do dbDataSetList.stream().forEach(ds -> ds.setInvalid(true)); to change them in place.", "author": "jaycarlton", "createdAt": "2020-06-23T19:41:13Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -676,6 +684,59 @@ public DbDataset cloneDataSetToWorkspace(\n     return cohortDao.findAllByCohortIdIn(dataSetDao.findOne(dataSet.getDataSetId()).getCohortIds());\n   }\n \n+  @Override\n+  public List<DbDataset> getDataSets(ResourceType resourceType, long resourceId) {\n+    List<DbDataset> dbDataSets = new ArrayList<>();\n+    if (ResourceType.COHORT.equals(resourceType)) {\n+      dbDataSets = dataSetDao.findDataSetsByCohortIds(resourceId);\n+    } else if (ResourceType.CONCEPT_SET.equals(resourceType)) {\n+      dbDataSets = dataSetDao.findDataSetsByConceptSetIds(resourceId);\n+    }\n+    return dbDataSets;\n+  }\n+\n+  @Override\n+  public List<DbDataset> getInvalidDataSetsByWorkspace(DbWorkspace dbWorkspace) {\n+\n+    return dataSetDao.findByWorkspaceIdAndInvalid(dbWorkspace.getWorkspaceId(), false);\n+  }\n+\n+  @Override\n+  public void deleteDataSet(DbWorkspace dbWorkspace, Long dataSetId) {\n+    DbDataset dataSet = getDbDataSet(dbWorkspace, dataSetId);\n+    dataSetDao.delete(dataSet.getDataSetId());\n+  }\n+\n+  @Override\n+  public DbDataset getDbDataSet(DbWorkspace dbWorkspace, Long dataSetId) {\n+\n+    DbDataset dataSet = dataSetDao.findOne(dataSetId);\n+    if (dataSet == null || dbWorkspace.getWorkspaceId() != dataSet.getWorkspaceId()) {\n+      throw new NotFoundException(\n+          String.format(\n+              \"No data set with ID %s in workspace %s.\", dataSet, dbWorkspace.getFirecloudName()));\n+    }\n+    return dataSet;\n+  }\n+\n+  @Override\n+  public void markDirty(ResourceType resourceType, long resourceId) {\n+    List<DbDataset> dbDataSetList = getDataSets(resourceType, resourceId);\n+    dbDataSetList =", "originalCommit": "142dc75ff1347e60bcd11863d64a945addaa2fb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc79f2f5f7c0e0c91605d17a982bc5d56edf3aee", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java\nindex 81c24623e..c35242618 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java\n\n@@ -687,10 +687,13 @@ public class DataSetServiceImpl implements DataSetService, GaugeDataCollector {\n   @Override\n   public List<DbDataset> getDataSets(ResourceType resourceType, long resourceId) {\n     List<DbDataset> dbDataSets = new ArrayList<>();\n-    if (ResourceType.COHORT.equals(resourceType)) {\n-      dbDataSets = dataSetDao.findDataSetsByCohortIds(resourceId);\n-    } else if (ResourceType.CONCEPT_SET.equals(resourceType)) {\n-      dbDataSets = dataSetDao.findDataSetsByConceptSetIds(resourceId);\n+    switch (resourceType) {\n+      case COHORT:\n+        dbDataSets = dataSetDao.findDataSetsByCohortIds(resourceId);\n+        break;\n+      case CONCEPT_SET:\n+        dbDataSets = dataSetDao.findDataSetsByConceptSetIds(resourceId);\n+        break;\n     }\n     return dbDataSets;\n   }\n"}}, {"oid": "bc79f2f5f7c0e0c91605d17a982bc5d56edf3aee", "url": "https://github.com/all-of-us/workbench/commit/bc79f2f5f7c0e0c91605d17a982bc5d56edf3aee", "message": "PR Comments", "committedDate": "2020-06-24T16:14:49Z", "type": "commit"}, {"oid": "b46eb2ae301c7b63e8e6bf9110599e78a0e26a30", "url": "https://github.com/all-of-us/workbench/commit/b46eb2ae301c7b63e8e6bf9110599e78a0e26a30", "message": "fixing test case.", "committedDate": "2020-06-24T18:15:15Z", "type": "commit"}, {"oid": "4214588eda06b517be546f89aa76786beb43e014", "url": "https://github.com/all-of-us/workbench/commit/4214588eda06b517be546f89aa76786beb43e014", "message": "Fix Test", "committedDate": "2020-06-24T18:42:47Z", "type": "commit"}, {"oid": "3b55376cff6436d2ce15d9fee848f0e0e7ea9db2", "url": "https://github.com/all-of-us/workbench/commit/3b55376cff6436d2ce15d9fee848f0e0e7ea9db2", "message": "Merge branch 'master' into nsaxena/dataSetService", "committedDate": "2020-06-24T18:47:31Z", "type": "commit"}, {"oid": "e726f0eb4da4c8bed5e82cf82f766b3b5be6ec92", "url": "https://github.com/all-of-us/workbench/commit/e726f0eb4da4c8bed5e82cf82f766b3b5be6ec92", "message": "Spotless", "committedDate": "2020-06-24T18:56:12Z", "type": "commit"}]}