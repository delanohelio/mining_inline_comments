{"pr_number": 3170, "pr_title": "[RW-4418][risk=low] Add project.rb tool to delete workspaces", "pr_createdAt": "2020-02-20T22:15:23Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3170", "timeline": [{"oid": "1f0f28c881cfe32b0a713d62cdcae894995952c4", "url": "https://github.com/all-of-us/workbench/commit/1f0f28c881cfe32b0a713d62cdcae894995952c4", "message": "fix fetch fc user profile tool", "committedDate": "2020-02-20T19:50:01Z", "type": "commit"}, {"oid": "fdab1002a6321625d75df9569559b34beb87230a", "url": "https://github.com/all-of-us/workbench/commit/fdab1002a6321625d75df9569559b34beb87230a", "message": "add script to delete workspaces", "committedDate": "2020-02-20T22:03:39Z", "type": "commit"}, {"oid": "fbe6549a15d9fe70fe66337bea4aae38f9feadd5", "url": "https://github.com/all-of-us/workbench/commit/fbe6549a15d9fe70fe66337bea4aae38f9feadd5", "message": "remove dead code and add exception handler", "committedDate": "2020-02-20T22:08:45Z", "type": "commit"}, {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "url": "https://github.com/all-of-us/workbench/commit/cf4bca3abd2164dbb3c078e250bb48738031e9cc", "message": "spotless", "committedDate": "2020-02-20T22:09:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDc0NA==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382740744", "bodyText": "If it's not too tricky, I'd probably return some kind of status for whether the workspace was successfully deleted, wasn't there in the first place, or was otherwise not deletable. Might want to capture this on both our side and the firecloud side.", "author": "jaycarlton", "createdAt": "2020-02-21T18:36:40Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -45,6 +45,8 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void deleteWorkspace(DbWorkspace dbWorkspace);", "originalCommit": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2ODE4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383368182", "bodyText": "my preference is to handle failures through exceptions", "author": "ericsong", "createdAt": "2020-02-24T16:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjk5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383412993", "bodyText": "But if you're deleting 1000 workspaces and 3 of them fail, an exception at the outer level isn't that helpful. Since we're in an eventually-consistent-ish system, I think you have to consider partial success cases (especially if it's not all in one transaction).", "author": "jaycarlton", "createdAt": "2020-02-24T17:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDc0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MjM0NA==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382742344", "bodyText": "BTW, most of these are coming out soon in favor of the interceptor approach. I'm keeping them in place for a week or so since they're one release ahead and I need to get automation working on the logs-based stuff.", "author": "jaycarlton", "createdAt": "2020-02-21T18:40:14Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -369,24 +369,15 @@ private void setDbWorkspaceFields(\n   public ResponseEntity<EmptyResponse> deleteWorkspace(\n       String workspaceNamespace, String workspaceId) {\n     recordOperationTime(\n-        () -> deleteWorkspaceImpl(workspaceNamespace, workspaceId), \"deleteWorkspace\");\n+        () -> {", "originalCommit": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0Mjg3NA==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382742874", "bodyText": "If you want, you could also inject the auditor into the service and fire from there. This is the only controller that has one I think, and that was due to how it was structured at the time. It's fine here though.", "author": "jaycarlton", "createdAt": "2020-02-21T18:41:30Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -369,24 +369,15 @@ private void setDbWorkspaceFields(\n   public ResponseEntity<EmptyResponse> deleteWorkspace(\n       String workspaceNamespace, String workspaceId) {\n     recordOperationTime(\n-        () -> deleteWorkspaceImpl(workspaceNamespace, workspaceId), \"deleteWorkspace\");\n+        () -> {\n+          DbWorkspace dbWorkspace = workspaceService.getRequired(workspaceNamespace, workspaceId);\n+          workspaceService.deleteWorkspace(dbWorkspace);\n+          workspaceAuditor.fireDeleteAction(dbWorkspace);", "originalCommit": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3MTU1MQ==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383371551", "bodyText": "I left it in the controller because it seemed like that was the level where all of the audit actions were being fired and it made sense to me if the intent is to track user actions", "author": "ericsong", "createdAt": "2020-02-24T16:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0Mjg3NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MzM0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382743349", "bodyText": "Was this easier than simply implementing a batch delete API endpoint? I'd rather have swagger boilerplate than have to hack the service injection like this.", "author": "jaycarlton", "createdAt": "2020-02-21T18:42:27Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean", "originalCommit": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3NDQxNA==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383374414", "bodyText": "For me, yes. Adding it as an admin endpoint would involve adding a one-off to our API, adding a new authority role, and writing some front end to fire the endpoint. Writing the calls in ruby/node isn't trivial either since we don't have API client packages for either and we'd have to figure out an authentication workflow to fire them.", "author": "ericsong", "createdAt": "2020-02-24T16:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MzM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNDcwMw==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383414703", "bodyText": "I know it feels heavy, but some of these are one-time things that will pay off.\nFor example, if we don't already have an administrative/devops authority, that's something I'll be wanting. If you want to use Ruby, I've already got a ticket to start generating a client library for that at https://precisionmedicineinitiative.atlassian.net/browse/RW-4499. But really, couldn't you just use curl for this?\nThe other consideration is that we already have testing patterns for this kind of thing, but with the tools, it's less clear how we make sure they keep working if they're infrequently used.", "author": "jaycarlton", "createdAt": "2020-02-24T17:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MzM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f75325bb18115257d658d23bf10a7a03c9cbdb70", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\nindex 67ed871f6..836d1e032 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\n\n@@ -50,8 +50,13 @@ public class DeleteWorkspaces {\n           .required()\n           .hasArg()\n           .build();\n+  private static Option dryRunOpt =\n+      Option.builder()\n+          .longOpt(\"dry-run\")\n+          .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+          .build();\n \n-  private static Options options = new Options().addOption(deleteListFilename);\n+  private static Options options = new Options().addOption(deleteListFilename).addOption(dryRunOpt);\n \n   @Bean\n   public WorkspaceService workspaceService(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NDA4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382744085", "bodyText": "future: if we determine a useful core of the workspaceService we could break that into its own service and inject the whole thing.", "author": "jaycarlton", "createdAt": "2020-02-21T18:43:58Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean\n+  public WorkspaceService workspaceService(\n+      FireCloudService fireCloudService,\n+      Clock clock,\n+      WorkspaceDao workspaceDao,\n+      UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<DbUser> dbUserProvider) {\n+    return new WorkspaceServiceImpl(", "originalCommit": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f75325bb18115257d658d23bf10a7a03c9cbdb70", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\nindex 67ed871f6..836d1e032 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\n\n@@ -50,8 +50,13 @@ public class DeleteWorkspaces {\n           .required()\n           .hasArg()\n           .build();\n+  private static Option dryRunOpt =\n+      Option.builder()\n+          .longOpt(\"dry-run\")\n+          .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+          .build();\n \n-  private static Options options = new Options().addOption(deleteListFilename);\n+  private static Options options = new Options().addOption(deleteListFilename).addOption(dryRunOpt);\n \n   @Bean\n   public WorkspaceService workspaceService(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NDk0OA==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382744948", "bodyText": "This user will actually show up in the audit logs. @calbach and I have been discussing several angles to this problem (i.e. attributing the agent correctly with an anonymous user), and we considered but ultimately shied away from a placeholder user.\nHow would you feel about providing the username of the devops person running the tool on the command line and looking them up so that we have an actual, helpful user ID & email address in the log?", "author": "jaycarlton", "createdAt": "2020-02-21T18:46:02Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean\n+  public WorkspaceService workspaceService(\n+      FireCloudService fireCloudService,\n+      Clock clock,\n+      WorkspaceDao workspaceDao,\n+      UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<DbUser> dbUserProvider) {\n+    return new WorkspaceServiceImpl(\n+        null,\n+        null,\n+        clock,\n+        null,\n+        null,\n+        null,\n+        fireCloudService,\n+        null,\n+        dbUserProvider,\n+        userRecentWorkspaceDao,\n+        null,\n+        workspaceDao,\n+        null,\n+        null);\n+  }\n+\n+  static DbUser currentImpersonatedUser;\n+\n+  @Bean\n+  @Primary\n+  @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+  DbUser user() {", "originalCommit": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3NzI3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383377276", "bodyText": "I don't think we're logging the delete action ATM.", "author": "ericsong", "createdAt": "2020-02-24T16:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NDk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "f75325bb18115257d658d23bf10a7a03c9cbdb70", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\nindex 67ed871f6..836d1e032 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java\n\n@@ -50,8 +50,13 @@ public class DeleteWorkspaces {\n           .required()\n           .hasArg()\n           .build();\n+  private static Option dryRunOpt =\n+      Option.builder()\n+          .longOpt(\"dry-run\")\n+          .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+          .build();\n \n-  private static Options options = new Options().addOption(deleteListFilename);\n+  private static Options options = new Options().addOption(deleteListFilename).addOption(dryRunOpt);\n \n   @Bean\n   public WorkspaceService workspaceService(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NjgyMA==", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382746820", "bodyText": "\ud83d\udc4f  ComponentScan assumes a lot about our package management discipline.", "author": "jaycarlton", "createdAt": "2020-02-21T18:50:04Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchFireCloudUserProfile.java", "diffHunk": "@@ -23,7 +25,7 @@\n  * domain-wide delegation to make FireCloud API calls impersonating other users.\n  */\n @Configuration\n-@ComponentScan(\"org.pmiops.workbench.firecloud\")\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})", "originalCommit": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f75325bb18115257d658d23bf10a7a03c9cbdb70", "url": "https://github.com/all-of-us/workbench/commit/f75325bb18115257d658d23bf10a7a03c9cbdb70", "message": "add dry run", "committedDate": "2020-02-24T17:44:56Z", "type": "commit"}, {"oid": "ac599563eb89d3f2d0f8740f912ff9c6bbc94ad2", "url": "https://github.com/all-of-us/workbench/commit/ac599563eb89d3f2d0f8740f912ff9c6bbc94ad2", "message": "spotles", "committedDate": "2020-02-25T21:19:27Z", "type": "commit"}]}