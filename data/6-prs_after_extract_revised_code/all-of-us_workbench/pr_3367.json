{"pr_number": 3367, "pr_title": "[RW-4500][RISK=MODERATE] Institution affiliation: distinguish between two institution agreement types", "pr_createdAt": "2020-04-08T06:33:38Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3367", "timeline": [{"oid": "c868f03e1d1876fd04141fa3820c52b87155a7a0", "url": "https://github.com/all-of-us/workbench/commit/c868f03e1d1876fd04141fa3820c52b87155a7a0", "message": "Add validation for institution verification before google create user", "committedDate": "2020-04-08T06:29:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxOTYxMA==", "url": "https://github.com/all-of-us/workbench/pull/3367#discussion_r405619610", "bodyText": "This is very nicely compartmentalized.  (spelling tho)", "author": "jmthibault79", "createdAt": "2020-04-08T15:37:48Z", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -344,6 +345,10 @@ private DbUser initializeUserIfNeeded() {\n       verifyInvitationKey(request.getInvitationKey());\n     }\n \n+    if (workbenchConfigProvider.get().featureFlags.requireInstitutionalVerification) {\n+      verifyInsitutionAffilation(request.getProfile());", "originalCommit": "c868f03e1d1876fd04141fa3820c52b87155a7a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "516205b6623006c4bcd3e561fba367886d2c302b", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ProfileController.java b/api/src/main/java/org/pmiops/workbench/api/ProfileController.java\nindex 505ceb76c..907add480 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ProfileController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ProfileController.java\n\n@@ -346,7 +346,7 @@ public class ProfileController implements ProfileApiDelegate {\n     }\n \n     if (workbenchConfigProvider.get().featureFlags.requireInstitutionalVerification) {\n-      verifyInsitutionAffilation(request.getProfile());\n+      verifyInstitutionalAffiliation(request.getProfile());\n     }\n \n     final Profile profile = request.getProfile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2NTcxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3367#discussion_r405665715", "bodyText": "please make this line use CONTACT_EMAIL and change the domain to a different domain", "author": "jmthibault79", "createdAt": "2020-04-08T16:45:32Z", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -291,6 +290,147 @@ public void testInvitationKeyVerification_invitationKeyMismatch() {\n     profileController.invitationKeyVerification(invitationVerificationRequest);\n   }\n \n+  @Test(expected = BadRequestException.class)\n+  public void testCreateAccount_MismatchEmailAddress() {\n+    createUser();\n+    config.featureFlags.requireInstitutionalVerification = true;\n+    final Institution broad =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(Collections.singletonList(CONTACT_EMAIL))\n+            .emailDomains(Collections.singletonList(\"example.com\"))\n+            .duaTypeEnum(DuaType.RESTRICTED);\n+    institutionService.createInstitution(broad);\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionalRoleEnum(InstitutionalRole.STUDENT);\n+    createAccountRequest\n+        .getProfile()\n+        .verifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation)\n+        .contactEmail(\"notBob@example.com\");\n+    profileController.createAccount(createAccountRequest);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void testCreateAccount_MismatchEmailDomain() {\n+    createUser();\n+    config.featureFlags.requireInstitutionalVerification = true;\n+    final Institution broad =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(Collections.singletonList(CONTACT_EMAIL))\n+            .emailDomains(Collections.singletonList(\"example.com\"))\n+            .duaTypeEnum(DuaType.MASTER);\n+    institutionService.createInstitution(broad);\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionalRoleEnum(InstitutionalRole.STUDENT);\n+    createAccountRequest\n+        .getProfile()\n+        .verifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation)\n+        .contactEmail(\"bob@broad.com\");\n+    profileController.createAccount(createAccountRequest);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void testCreateAccount_MismatchEmailDomainNullDUA() {\n+    createUser();\n+    config.featureFlags.requireInstitutionalVerification = true;\n+    final Institution broad =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(Collections.singletonList(CONTACT_EMAIL))\n+            .emailDomains(Collections.singletonList(\"example.com\"));\n+    institutionService.createInstitution(broad);\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionalRoleEnum(InstitutionalRole.STUDENT);\n+    createAccountRequest\n+        .getProfile()\n+        .verifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation)\n+        .contactEmail(\"bob@broadInstitute.com\");\n+    profileController.createAccount(createAccountRequest);\n+  }\n+\n+  @Test\n+  public void testCreateAccount_Success_RESTRICTEDDUA() {\n+    createUser();\n+    config.featureFlags.requireInstitutionalVerification = true;\n+    final Institution broad =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(Collections.singletonList(\"bob@example.com\"))", "originalCommit": "c868f03e1d1876fd04141fa3820c52b87155a7a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8267cf514afdcdda3c93d0b2cf6c073d785cad92", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java\nindex 3b28e4db1..0ec25cc3e 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java\n\n@@ -369,7 +369,7 @@ public class ProfileControllerTest extends BaseControllerTest {\n         new Institution()\n             .shortName(\"Broad\")\n             .displayName(\"The Broad Institute\")\n-            .emailAddresses(Collections.singletonList(\"bob@example.com\"))\n+            .emailAddresses(Collections.singletonList(CONTACT_EMAIL))\n             .emailDomains(Collections.singletonList(\"example.com\"))\n             .duaTypeEnum(DuaType.RESTRICTED);\n     institutionService.createInstitution(broad);\n"}}, {"oid": "8267cf514afdcdda3c93d0b2cf6c073d785cad92", "url": "https://github.com/all-of-us/workbench/commit/8267cf514afdcdda3c93d0b2cf6c073d785cad92", "message": "PR Comments : Use CONTACT_EMAIL and remove institutionService from UserServiceImpl", "committedDate": "2020-04-08T19:21:33Z", "type": "commit"}, {"oid": "516205b6623006c4bcd3e561fba367886d2c302b", "url": "https://github.com/all-of-us/workbench/commit/516205b6623006c4bcd3e561fba367886d2c302b", "message": "correct spelling", "committedDate": "2020-04-08T19:32:32Z", "type": "commit"}]}