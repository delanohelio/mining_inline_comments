{"pr_number": 3231, "pr_title": "[RW-4549][risk=no] Create ProfileMapper", "pr_createdAt": "2020-03-09T16:20:19Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3231", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMDg5NA==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389830894", "bodyText": "The newly added mappings appear to duplicate those defined here: https://github.com/all-of-us/workbench/blob/bb8aec8d448abeece258d3b53d0d925ede1d5473/api/src/main/java/org/pmiops/workbench/db/model/DemographicSurveyEnum.java", "author": "calbach", "createdAt": "2020-03-09T17:05:52Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java", "diffHunk": "@@ -14,12 +14,18 @@\n import org.pmiops.workbench.model.Degree;\n import org.pmiops.workbench.model.DisseminateResearchEnum;\n import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.Education;", "originalCommit": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3MjIyNw==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389972227", "bodyText": "This doesn't seem to have been addressed", "author": "calbach", "createdAt": "2020-03-09T21:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMDg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MjY5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390382691", "bodyText": "arghhhh", "author": "als364", "createdAt": "2020-03-10T15:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMDg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "6c69ce5fccc676c3d911bc99f7fee886a06b644f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java b/api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java\nindex c3054484e..538724c1d 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java\n\n@@ -14,18 +14,12 @@ import org.pmiops.workbench.model.DataAccessLevel;\n import org.pmiops.workbench.model.Degree;\n import org.pmiops.workbench.model.DisseminateResearchEnum;\n import org.pmiops.workbench.model.Domain;\n-import org.pmiops.workbench.model.Education;\n import org.pmiops.workbench.model.EmailVerificationStatus;\n-import org.pmiops.workbench.model.Ethnicity;\n-import org.pmiops.workbench.model.GenderIdentity;\n import org.pmiops.workbench.model.InstitutionalRole;\n-import org.pmiops.workbench.model.NonAcademicAffiliation;\n import org.pmiops.workbench.model.OrganizationType;\n import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n-import org.pmiops.workbench.model.Race;\n import org.pmiops.workbench.model.ResearchOutcomeEnum;\n import org.pmiops.workbench.model.ReviewStatus;\n-import org.pmiops.workbench.model.SexAtBirth;\n import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.Surveys;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMTc0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389831745", "bodyText": "Looks like this got dropped:\n    profile.setFreeTierUsage(freeTierBillingService.getUserCachedFreeTierUsage(user));\n    profile.setFreeTierDollarQuota(freeTierBillingService.getUserFreeTierDollarLimit(user));", "author": "calbach", "createdAt": "2020-03-09T17:07:16Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.pmiops.workbench.profile;\n+\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserTermsOfServiceDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbUserTermsOfService;\n+import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Profile;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ProfileService {\n+  private final ProfileMapper profileMapper;\n+  private final UserDao userDao;\n+  private final UserTermsOfServiceDao userTermsOfServiceDao;\n+  private final VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao;\n+  private final VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n+\n+  @Autowired\n+  public ProfileService(\n+      ProfileMapper profileMapper,\n+      UserDao userDao,\n+      UserTermsOfServiceDao userTermsOfServiceDao,\n+      VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao,\n+      VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper) {\n+    this.profileMapper = profileMapper;\n+    this.userDao = userDao;\n+    this.userTermsOfServiceDao = userTermsOfServiceDao;\n+    this.verifiedInstitutionalAffiliationDao = verifiedInstitutionalAffiliationDao;\n+    this.verifiedInstitutionalAffiliationMapper = verifiedInstitutionalAffiliationMapper;\n+  }\n+\n+  public Profile getProfile(DbUser user) {\n+    // Fetch the user's authorities, since they aren't loaded during normal request interception.\n+    DbUser userWithAuthoritiesAndPageVisits =\n+        userDao.findUserWithAuthoritiesAndPageVisits(user.getUserId());\n+    if (userWithAuthoritiesAndPageVisits != null) {\n+      // If the user is already written to the database, use it and whatever authorities and page\n+      // visits are there.\n+      user = userWithAuthoritiesAndPageVisits;\n+    }\n+\n+    Profile profile = profileMapper.dbUserToProfile(user);", "originalCommit": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MzUwMg==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389853502", "bodyText": "good catch, I'll make a test case for that", "author": "als364", "createdAt": "2020-03-09T17:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMTc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6c69ce5fccc676c3d911bc99f7fee886a06b644f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/profile/ProfileService.java b/api/src/main/java/org/pmiops/workbench/profile/ProfileService.java\ndeleted file mode 100644\nindex 85eff2ead..000000000\n--- a/api/src/main/java/org/pmiops/workbench/profile/ProfileService.java\n+++ /dev/null\n\n@@ -1,66 +0,0 @@\n-package org.pmiops.workbench.profile;\n-\n-import java.util.Optional;\n-import org.pmiops.workbench.db.dao.UserDao;\n-import org.pmiops.workbench.db.dao.UserTermsOfServiceDao;\n-import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.db.model.DbUserTermsOfService;\n-import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapper;\n-import org.pmiops.workbench.model.Profile;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-@Service\n-public class ProfileService {\n-  private final ProfileMapper profileMapper;\n-  private final UserDao userDao;\n-  private final UserTermsOfServiceDao userTermsOfServiceDao;\n-  private final VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao;\n-  private final VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n-\n-  @Autowired\n-  public ProfileService(\n-      ProfileMapper profileMapper,\n-      UserDao userDao,\n-      UserTermsOfServiceDao userTermsOfServiceDao,\n-      VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao,\n-      VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper) {\n-    this.profileMapper = profileMapper;\n-    this.userDao = userDao;\n-    this.userTermsOfServiceDao = userTermsOfServiceDao;\n-    this.verifiedInstitutionalAffiliationDao = verifiedInstitutionalAffiliationDao;\n-    this.verifiedInstitutionalAffiliationMapper = verifiedInstitutionalAffiliationMapper;\n-  }\n-\n-  public Profile getProfile(DbUser user) {\n-    // Fetch the user's authorities, since they aren't loaded during normal request interception.\n-    DbUser userWithAuthoritiesAndPageVisits =\n-        userDao.findUserWithAuthoritiesAndPageVisits(user.getUserId());\n-    if (userWithAuthoritiesAndPageVisits != null) {\n-      // If the user is already written to the database, use it and whatever authorities and page\n-      // visits are there.\n-      user = userWithAuthoritiesAndPageVisits;\n-    }\n-\n-    Profile profile = profileMapper.dbUserToProfile(user);\n-\n-    verifiedInstitutionalAffiliationDao\n-        .findFirstByUser(user)\n-        .ifPresent(\n-            verifiedInstitutionalAffiliation ->\n-                profile.setVerifiedInstitutionalAffiliation(\n-                    verifiedInstitutionalAffiliationMapper.dbToModel(\n-                        verifiedInstitutionalAffiliation)));\n-\n-    Optional<DbUserTermsOfService> latestTermsOfServiceMaybe =\n-        userTermsOfServiceDao.findFirstByUserIdOrderByTosVersionDesc(user.getUserId());\n-    if (latestTermsOfServiceMaybe.isPresent()) {\n-      profile.setLatestTermsOfServiceVersion(latestTermsOfServiceMaybe.get().getTosVersion());\n-      profile.setLatestTermsOfServiceTime(\n-          latestTermsOfServiceMaybe.get().getAgreementTime().getTime());\n-    }\n-\n-    return profile;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTEzOA==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389835138", "bodyText": "optional: Most of these are not really shared across models. Would it make more sense to just define them in the relevant mappers as needed instead? e.g. moving this into ProfileMapper. Or maybe just leave the truly shared \"common\" enums here (maybe DataAccessLevel).", "author": "calbach", "createdAt": "2020-03-09T17:12:39Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -53,4 +74,92 @@ public static String cdrVersionToEtag(int cdrVersion) {\n   public static int etagToCdrVersion(String etag) {\n     return Etags.toVersion(etag);\n   }\n+\n+  /////////////////////////////////////////////////////////////////////////////\n+  //                                  ENUMS                                  //\n+  /////////////////////////////////////////////////////////////////////////////\n+\n+  public static Authority authorityFromStorage(Short authority) {", "originalCommit": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c69ce5fccc676c3d911bc99f7fee886a06b644f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java b/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\nindex 3449b275e..00a34e585 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\n\n@@ -74,92 +54,4 @@ public class CommonMappers {\n   public static int etagToCdrVersion(String etag) {\n     return Etags.toVersion(etag);\n   }\n-\n-  /////////////////////////////////////////////////////////////////////////////\n-  //                                  ENUMS                                  //\n-  /////////////////////////////////////////////////////////////////////////////\n-\n-  public static Authority authorityFromStorage(Short authority) {\n-    return DbStorageEnums.authorityFromStorage(authority);\n-  }\n-\n-  public static Short authorityToStorage(Authority authority) {\n-    return DbStorageEnums.authorityToStorage(authority);\n-  }\n-\n-  public static DataAccessLevel dataAccessLevelFromStorage(Short dataAccessLevel) {\n-    return DbStorageEnums.dataAccessLevelFromStorage(dataAccessLevel);\n-  }\n-\n-  public static Short dataAccessLevelToStorage(DataAccessLevel dataAccessLevel) {\n-    return DbStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n-  }\n-\n-  public static Degree degreeFromStorage(Short degree) {\n-    return DbStorageEnums.degreeFromStorage(degree);\n-  }\n-\n-  public static Short degreeToStorage(Degree degree) {\n-    return DbStorageEnums.degreeToStorage(degree);\n-  }\n-\n-  public static Education educationFromStorage(Short education) {\n-    return DbStorageEnums.educationFromStorage(education);\n-  }\n-\n-  public static Short educationToStorage(Education education) {\n-    return DbStorageEnums.educationToStorage(education);\n-  }\n-\n-  public static Ethnicity ethnicityFromStorage(Short ethnicity) {\n-    return DbStorageEnums.ethnicityFromStorage(ethnicity);\n-  }\n-\n-  public static Short ethnicityToStorage(Ethnicity ethnicity) {\n-    return DbStorageEnums.ethnicityToStorage(ethnicity);\n-  }\n-\n-  public static EmailVerificationStatus emailVerificationStatusFromStorage(\n-      Short emailVerificationStatus) {\n-    return DbStorageEnums.emailVerificationStatusFromStorage(emailVerificationStatus);\n-  }\n-\n-  public static Short emailVerificationStatusToStorage(\n-      EmailVerificationStatus emailVerificationStatus) {\n-    return DbStorageEnums.emailVerificationStatusToStorage(emailVerificationStatus);\n-  }\n-\n-  public static GenderIdentity genderIdentityFromStorage(Short genderIdentity) {\n-    return DbStorageEnums.genderIdentityFromStorage(genderIdentity);\n-  }\n-\n-  public static Short genderIdentityToStorage(GenderIdentity genderIdentity) {\n-    return DbStorageEnums.genderIdentityToStorage(genderIdentity);\n-  }\n-\n-  public static NonAcademicAffiliation nonAcademicAffiliationFromStorage(\n-      Short nonAcademicAffiliation) {\n-    return DbStorageEnums.nonAcademicAffiliationFromStorage(nonAcademicAffiliation);\n-  }\n-\n-  public static Short nonAcademicAffiliationToStorage(\n-      NonAcademicAffiliation nonAcademicAffiliation) {\n-    return DbStorageEnums.nonAcademicAffiliationToStorage(nonAcademicAffiliation);\n-  }\n-\n-  public static Race raceFromStorage(Short race) {\n-    return DbStorageEnums.raceFromStorage(race);\n-  }\n-\n-  public static Short raceToStorage(Race race) {\n-    return DbStorageEnums.raceToStorage(race);\n-  }\n-\n-  public static SexAtBirth sexAtBirthFromStorage(Short sexAtBirth) {\n-    return DbStorageEnums.sexAtBirthFromStorage(sexAtBirth);\n-  }\n-\n-  public static Short sexAtBirthToStorage(SexAtBirth sexAtBirth) {\n-    return DbStorageEnums.sexAtBirthToStorage(sexAtBirth);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzOTM1Nw==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390639357", "bodyText": "Probably worth having a cleanup ticket here. From a spot check of the fields you've commented here, I agree they should all be  removed at this point.", "author": "calbach", "createdAt": "2020-03-10T22:08:05Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.profile;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.Profile;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {\n+      AddressMapper.class,\n+      CommonMappers.class,\n+      DemographicSurveyMapper.class,\n+      InstitutionalAffiliationMapper.class,\n+      PageVisitMapper.class\n+    })\n+public interface ProfileMapper {\n+  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this", "originalCommit": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMzMyNg==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r391103326", "bodyText": "https://precisionmedicineinitiative.atlassian.net/browse/RW-4598", "author": "als364", "createdAt": "2020-03-11T16:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzOTM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6c69ce5fccc676c3d911bc99f7fee886a06b644f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java b/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java\ndeleted file mode 100644\nindex fd6bd7d45..000000000\n--- a/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-package org.pmiops.workbench.profile;\n-\n-import org.mapstruct.Mapper;\n-import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n-import org.pmiops.workbench.model.Authority;\n-import org.pmiops.workbench.model.Degree;\n-import org.pmiops.workbench.model.EmailVerificationStatus;\n-import org.pmiops.workbench.model.Profile;\n-import org.pmiops.workbench.utils.mappers.CommonMappers;\n-\n-@Mapper(\n-    componentModel = \"spring\",\n-    uses = {\n-      AddressMapper.class,\n-      CommonMappers.class,\n-      DemographicSurveyMapper.class,\n-      InstitutionalAffiliationMapper.class,\n-      PageVisitMapper.class\n-    })\n-public interface ProfileMapper {\n-  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this\n-  @Mapping(target = \"freeTierDollarQuota\", ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(target = \"freeTierUsage\", ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"latestTermsOfServiceTime\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"latestTermsOfServiceVersion\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"verifiedInstitutionalAffiliation\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  Profile dbUserToProfile(DbUser dbUser);\n-\n-  @Mapping(target = \"authoritiesEnum\", ignore = true) // derived property\n-  @Mapping(target = \"billingProjectRetries\", ignore = true) // I don't think we actually use this\n-  @Mapping(\n-      target = \"clusterConfigDefault\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"clusterConfigDefaultRaw\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"clusterCreateRetries\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"complianceTrainingExpirationTime\",\n-      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n-  @Mapping(target = \"creationTime\", ignore = true) // handled by ProfileController.createProfile\n-  @Mapping(target = \"dataAccessLevelEnum\", ignore = true) // derived property\n-  @Mapping(target = \"degreesEnum\", ignore = true) // derived property\n-  @Mapping(target = \"emailVerificationStatusEnum\", ignore = true) // derived property\n-  @Mapping(\n-      target = \"firstRegistrationCompletionTime\",\n-      ignore = true) // used only in UserService.updateDataAccessLevel\n-  @Mapping(target = \"freeTierCreditsLimitDaysOverride\", ignore = true) // unused\n-  @Mapping(\n-      target = \"freeTierCreditsLimitDollarsOverride\",\n-      ignore = true) // handled by FreeTierBillingService.getUserFreeTierDollarLimit\n-  @Mapping(target = \"idVerificationIsValid\", ignore = true) // I don't think we actually use this\n-  @Mapping(target = \"lastFreeTierCreditsTimeCheck\", ignore = true) // used only by cron\n-  @Mapping(target = \"lastModifiedTime\", ignore = true) // handled by ProfileController.updateProfile\n-  @Mapping(\n-      target = \"moodleId\",\n-      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n-  @Mapping(target = \"version\", ignore = true)\n-  DbUser profileToDbUser(Profile profile);\n-\n-  static Authority authorityFromStorage(Short authority) {\n-    return DbStorageEnums.authorityFromStorage(authority);\n-  }\n-\n-  static Short authorityToStorage(Authority authority) {\n-    return DbStorageEnums.authorityToStorage(authority);\n-  }\n-\n-  static Degree degreeFromStorage(Short degree) {\n-    return DbStorageEnums.degreeFromStorage(degree);\n-  }\n-\n-  static Short degreeToStorage(Degree degree) {\n-    return DbStorageEnums.degreeToStorage(degree);\n-  }\n-\n-  static EmailVerificationStatus emailVerificationStatusFromStorage(Short emailVerificationStatus) {\n-    return DbStorageEnums.emailVerificationStatusFromStorage(emailVerificationStatus);\n-  }\n-\n-  static Short emailVerificationStatusToStorage(EmailVerificationStatus emailVerificationStatus) {\n-    return DbStorageEnums.emailVerificationStatusToStorage(emailVerificationStatus);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0MDYwNw==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390640607", "bodyText": "FYI: This should probably also be killed eventually. Might be a bigger job", "author": "calbach", "createdAt": "2020-03-10T22:10:28Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.profile;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.Profile;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {\n+      AddressMapper.class,\n+      CommonMappers.class,\n+      DemographicSurveyMapper.class,\n+      InstitutionalAffiliationMapper.class,\n+      PageVisitMapper.class\n+    })\n+public interface ProfileMapper {\n+  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this\n+  @Mapping(target = \"freeTierDollarQuota\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(target = \"freeTierUsage\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceTime\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceVersion\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"verifiedInstitutionalAffiliation\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  Profile dbUserToProfile(DbUser dbUser);\n+\n+  @Mapping(target = \"authoritiesEnum\", ignore = true) // derived property\n+  @Mapping(target = \"billingProjectRetries\", ignore = true) // I don't think we actually use this\n+  @Mapping(\n+      target = \"clusterConfigDefault\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterConfigDefaultRaw\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterCreateRetries\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"complianceTrainingExpirationTime\",\n+      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n+  @Mapping(target = \"creationTime\", ignore = true) // handled by ProfileController.createProfile\n+  @Mapping(target = \"dataAccessLevelEnum\", ignore = true) // derived property\n+  @Mapping(target = \"degreesEnum\", ignore = true) // derived property\n+  @Mapping(target = \"emailVerificationStatusEnum\", ignore = true) // derived property", "originalCommit": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTg2Mw==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r391099863", "bodyText": "I'll roll it in with the cleanup ticket", "author": "als364", "createdAt": "2020-03-11T16:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0MDYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "6c69ce5fccc676c3d911bc99f7fee886a06b644f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java b/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java\ndeleted file mode 100644\nindex fd6bd7d45..000000000\n--- a/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-package org.pmiops.workbench.profile;\n-\n-import org.mapstruct.Mapper;\n-import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n-import org.pmiops.workbench.model.Authority;\n-import org.pmiops.workbench.model.Degree;\n-import org.pmiops.workbench.model.EmailVerificationStatus;\n-import org.pmiops.workbench.model.Profile;\n-import org.pmiops.workbench.utils.mappers.CommonMappers;\n-\n-@Mapper(\n-    componentModel = \"spring\",\n-    uses = {\n-      AddressMapper.class,\n-      CommonMappers.class,\n-      DemographicSurveyMapper.class,\n-      InstitutionalAffiliationMapper.class,\n-      PageVisitMapper.class\n-    })\n-public interface ProfileMapper {\n-  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this\n-  @Mapping(target = \"freeTierDollarQuota\", ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(target = \"freeTierUsage\", ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"latestTermsOfServiceTime\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"latestTermsOfServiceVersion\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"verifiedInstitutionalAffiliation\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  Profile dbUserToProfile(DbUser dbUser);\n-\n-  @Mapping(target = \"authoritiesEnum\", ignore = true) // derived property\n-  @Mapping(target = \"billingProjectRetries\", ignore = true) // I don't think we actually use this\n-  @Mapping(\n-      target = \"clusterConfigDefault\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"clusterConfigDefaultRaw\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"clusterCreateRetries\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"complianceTrainingExpirationTime\",\n-      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n-  @Mapping(target = \"creationTime\", ignore = true) // handled by ProfileController.createProfile\n-  @Mapping(target = \"dataAccessLevelEnum\", ignore = true) // derived property\n-  @Mapping(target = \"degreesEnum\", ignore = true) // derived property\n-  @Mapping(target = \"emailVerificationStatusEnum\", ignore = true) // derived property\n-  @Mapping(\n-      target = \"firstRegistrationCompletionTime\",\n-      ignore = true) // used only in UserService.updateDataAccessLevel\n-  @Mapping(target = \"freeTierCreditsLimitDaysOverride\", ignore = true) // unused\n-  @Mapping(\n-      target = \"freeTierCreditsLimitDollarsOverride\",\n-      ignore = true) // handled by FreeTierBillingService.getUserFreeTierDollarLimit\n-  @Mapping(target = \"idVerificationIsValid\", ignore = true) // I don't think we actually use this\n-  @Mapping(target = \"lastFreeTierCreditsTimeCheck\", ignore = true) // used only by cron\n-  @Mapping(target = \"lastModifiedTime\", ignore = true) // handled by ProfileController.updateProfile\n-  @Mapping(\n-      target = \"moodleId\",\n-      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n-  @Mapping(target = \"version\", ignore = true)\n-  DbUser profileToDbUser(Profile profile);\n-\n-  static Authority authorityFromStorage(Short authority) {\n-    return DbStorageEnums.authorityFromStorage(authority);\n-  }\n-\n-  static Short authorityToStorage(Authority authority) {\n-    return DbStorageEnums.authorityToStorage(authority);\n-  }\n-\n-  static Degree degreeFromStorage(Short degree) {\n-    return DbStorageEnums.degreeFromStorage(degree);\n-  }\n-\n-  static Short degreeToStorage(Degree degree) {\n-    return DbStorageEnums.degreeToStorage(degree);\n-  }\n-\n-  static EmailVerificationStatus emailVerificationStatusFromStorage(Short emailVerificationStatus) {\n-    return DbStorageEnums.emailVerificationStatusFromStorage(emailVerificationStatus);\n-  }\n-\n-  static Short emailVerificationStatusToStorage(EmailVerificationStatus emailVerificationStatus) {\n-    return DbStorageEnums.emailVerificationStatusToStorage(emailVerificationStatus);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0MzU3NA==", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390643574", "bodyText": "nit: ProfileController.createAccount? But more accurately for most of this properties it might suffice to just say they are used only internally by the server (i.e. have no manifestation in the client model)", "author": "calbach", "createdAt": "2020-03-10T22:16:42Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.profile;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.Profile;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {\n+      AddressMapper.class,\n+      CommonMappers.class,\n+      DemographicSurveyMapper.class,\n+      InstitutionalAffiliationMapper.class,\n+      PageVisitMapper.class\n+    })\n+public interface ProfileMapper {\n+  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this\n+  @Mapping(target = \"freeTierDollarQuota\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(target = \"freeTierUsage\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceTime\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceVersion\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"verifiedInstitutionalAffiliation\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  Profile dbUserToProfile(DbUser dbUser);\n+\n+  @Mapping(target = \"authoritiesEnum\", ignore = true) // derived property\n+  @Mapping(target = \"billingProjectRetries\", ignore = true) // I don't think we actually use this\n+  @Mapping(\n+      target = \"clusterConfigDefault\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterConfigDefaultRaw\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterCreateRetries\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"complianceTrainingExpirationTime\",\n+      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n+  @Mapping(target = \"creationTime\", ignore = true) // handled by ProfileController.createProfile", "originalCommit": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c69ce5fccc676c3d911bc99f7fee886a06b644f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java b/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java\ndeleted file mode 100644\nindex fd6bd7d45..000000000\n--- a/api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-package org.pmiops.workbench.profile;\n-\n-import org.mapstruct.Mapper;\n-import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n-import org.pmiops.workbench.model.Authority;\n-import org.pmiops.workbench.model.Degree;\n-import org.pmiops.workbench.model.EmailVerificationStatus;\n-import org.pmiops.workbench.model.Profile;\n-import org.pmiops.workbench.utils.mappers.CommonMappers;\n-\n-@Mapper(\n-    componentModel = \"spring\",\n-    uses = {\n-      AddressMapper.class,\n-      CommonMappers.class,\n-      DemographicSurveyMapper.class,\n-      InstitutionalAffiliationMapper.class,\n-      PageVisitMapper.class\n-    })\n-public interface ProfileMapper {\n-  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this\n-  @Mapping(target = \"freeTierDollarQuota\", ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(target = \"freeTierUsage\", ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"latestTermsOfServiceTime\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"latestTermsOfServiceVersion\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  @Mapping(\n-      target = \"verifiedInstitutionalAffiliation\",\n-      ignore = true) // handled by ProfileService.getProfile\n-  Profile dbUserToProfile(DbUser dbUser);\n-\n-  @Mapping(target = \"authoritiesEnum\", ignore = true) // derived property\n-  @Mapping(target = \"billingProjectRetries\", ignore = true) // I don't think we actually use this\n-  @Mapping(\n-      target = \"clusterConfigDefault\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"clusterConfigDefaultRaw\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"clusterCreateRetries\",\n-      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n-  @Mapping(\n-      target = \"complianceTrainingExpirationTime\",\n-      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n-  @Mapping(target = \"creationTime\", ignore = true) // handled by ProfileController.createProfile\n-  @Mapping(target = \"dataAccessLevelEnum\", ignore = true) // derived property\n-  @Mapping(target = \"degreesEnum\", ignore = true) // derived property\n-  @Mapping(target = \"emailVerificationStatusEnum\", ignore = true) // derived property\n-  @Mapping(\n-      target = \"firstRegistrationCompletionTime\",\n-      ignore = true) // used only in UserService.updateDataAccessLevel\n-  @Mapping(target = \"freeTierCreditsLimitDaysOverride\", ignore = true) // unused\n-  @Mapping(\n-      target = \"freeTierCreditsLimitDollarsOverride\",\n-      ignore = true) // handled by FreeTierBillingService.getUserFreeTierDollarLimit\n-  @Mapping(target = \"idVerificationIsValid\", ignore = true) // I don't think we actually use this\n-  @Mapping(target = \"lastFreeTierCreditsTimeCheck\", ignore = true) // used only by cron\n-  @Mapping(target = \"lastModifiedTime\", ignore = true) // handled by ProfileController.updateProfile\n-  @Mapping(\n-      target = \"moodleId\",\n-      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n-  @Mapping(target = \"version\", ignore = true)\n-  DbUser profileToDbUser(Profile profile);\n-\n-  static Authority authorityFromStorage(Short authority) {\n-    return DbStorageEnums.authorityFromStorage(authority);\n-  }\n-\n-  static Short authorityToStorage(Authority authority) {\n-    return DbStorageEnums.authorityToStorage(authority);\n-  }\n-\n-  static Degree degreeFromStorage(Short degree) {\n-    return DbStorageEnums.degreeFromStorage(degree);\n-  }\n-\n-  static Short degreeToStorage(Degree degree) {\n-    return DbStorageEnums.degreeToStorage(degree);\n-  }\n-\n-  static EmailVerificationStatus emailVerificationStatusFromStorage(Short emailVerificationStatus) {\n-    return DbStorageEnums.emailVerificationStatusFromStorage(emailVerificationStatus);\n-  }\n-\n-  static Short emailVerificationStatusToStorage(EmailVerificationStatus emailVerificationStatus) {\n-    return DbStorageEnums.emailVerificationStatusToStorage(emailVerificationStatus);\n-  }\n-}\n"}}, {"oid": "6c69ce5fccc676c3d911bc99f7fee886a06b644f", "url": "https://github.com/all-of-us/workbench/commit/6c69ce5fccc676c3d911bc99f7fee886a06b644f", "message": "nuke from orbit", "committedDate": "2020-03-11T17:26:05Z", "type": "commit"}, {"oid": "effc0d9aad789ea73b7e1c4babe4e36d4e86e4b7", "url": "https://github.com/all-of-us/workbench/commit/effc0d9aad789ea73b7e1c4babe4e36d4e86e4b7", "message": "spotless", "committedDate": "2020-03-11T17:26:05Z", "type": "commit"}, {"oid": "24850fc5cb013aa64a2adfd69edd73906e4c28c1", "url": "https://github.com/all-of-us/workbench/commit/24850fc5cb013aa64a2adfd69edd73906e4c28c1", "message": "shelving", "committedDate": "2020-03-11T17:26:05Z", "type": "commit"}, {"oid": "c6ede69c905abeb257f8452719f760d461dce484", "url": "https://github.com/all-of-us/workbench/commit/c6ede69c905abeb257f8452719f760d461dce484", "message": "IT WORKS", "committedDate": "2020-03-11T17:26:05Z", "type": "commit"}, {"oid": "7daa6945e3df087013da66db8a2377905427944f", "url": "https://github.com/all-of-us/workbench/commit/7daa6945e3df087013da66db8a2377905427944f", "message": "remove unused things", "committedDate": "2020-03-11T17:26:05Z", "type": "commit"}, {"oid": "8746332a8cab3d65bbffbe27d16bc32867f69757", "url": "https://github.com/all-of-us/workbench/commit/8746332a8cab3d65bbffbe27d16bc32867f69757", "message": "spotless", "committedDate": "2020-03-11T17:26:05Z", "type": "commit"}, {"oid": "7ab297fbcedb038bd8463d9fdc8da5052f888bfe", "url": "https://github.com/all-of-us/workbench/commit/7ab297fbcedb038bd8463d9fdc8da5052f888bfe", "message": "pr feedback", "committedDate": "2020-03-11T17:26:06Z", "type": "commit"}, {"oid": "9bf6d4e6084f14c64a00ebfa35d547685c781c26", "url": "https://github.com/all-of-us/workbench/commit/9bf6d4e6084f14c64a00ebfa35d547685c781c26", "message": "spotless again", "committedDate": "2020-03-11T17:26:06Z", "type": "commit"}, {"oid": "b7e4cc0bf503d3bef57d4841291206db9db34db0", "url": "https://github.com/all-of-us/workbench/commit/b7e4cc0bf503d3bef57d4841291206db9db34db0", "message": "added a lot more stuff", "committedDate": "2020-03-11T17:26:06Z", "type": "commit"}, {"oid": "cf1de476546426ae7a9713cf7119f0ea78fab314", "url": "https://github.com/all-of-us/workbench/commit/cf1de476546426ae7a9713cf7119f0ea78fab314", "message": "spotless", "committedDate": "2020-03-11T17:26:06Z", "type": "commit"}, {"oid": "863f46bacf4a8d2d83716539f94ded46b1d13472", "url": "https://github.com/all-of-us/workbench/commit/863f46bacf4a8d2d83716539f94ded46b1d13472", "message": "revert gradle-wrapper", "committedDate": "2020-03-11T17:26:06Z", "type": "commit"}, {"oid": "863f46bacf4a8d2d83716539f94ded46b1d13472", "url": "https://github.com/all-of-us/workbench/commit/863f46bacf4a8d2d83716539f94ded46b1d13472", "message": "revert gradle-wrapper", "committedDate": "2020-03-11T17:26:06Z", "type": "forcePushed"}]}