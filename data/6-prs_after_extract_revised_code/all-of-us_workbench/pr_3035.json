{"pr_number": 3035, "pr_title": "[RW-3175][risk=low] User provided billing accounts", "pr_createdAt": "2020-01-23T22:24:34Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3035", "timeline": [{"oid": "4e778c7da7349d6860de912375d47333daa86f31", "url": "https://github.com/all-of-us/workbench/commit/4e778c7da7349d6860de912375d47333daa86f31", "message": "WIP: can make billing list call", "committedDate": "2020-01-13T19:53:33Z", "type": "commit"}, {"oid": "0fdf233bc4475e01fed6b79fd7c30ff05408631f", "url": "https://github.com/all-of-us/workbench/commit/0fdf233bc4475e01fed6b79fd7c30ff05408631f", "message": "WIP: add dropdown and text", "committedDate": "2020-01-14T21:34:12Z", "type": "commit"}, {"oid": "39660aec7e8e7c37dd9ebbffecb4761f867938ff", "url": "https://github.com/all-of-us/workbench/commit/39660aec7e8e7c37dd9ebbffecb4761f867938ff", "message": "WIP - dynamically load billing accounts in dropdown", "committedDate": "2020-01-14T22:27:09Z", "type": "commit"}, {"oid": "56a37d1dd3201a86e9a87b8837cae1bbb9d025b9", "url": "https://github.com/all-of-us/workbench/commit/56a37d1dd3201a86e9a87b8837cae1bbb9d025b9", "message": "Merge branch 'master' of github.com:all-of-us/workbench into songe/RW-3175", "committedDate": "2020-01-15T17:18:22Z", "type": "commit"}, {"oid": "6a8217338f17dce46a36d3b6f5caa7b986613a5f", "url": "https://github.com/all-of-us/workbench/commit/6a8217338f17dce46a36d3b6f5caa7b986613a5f", "message": "fix compilation", "committedDate": "2020-01-15T20:10:04Z", "type": "commit"}, {"oid": "653bed1a58bdfb713c6dedaf16967b8f45622f1a", "url": "https://github.com/all-of-us/workbench/commit/653bed1a58bdfb713c6dedaf16967b8f45622f1a", "message": "make list billing accounts call from backend", "committedDate": "2020-01-16T19:37:14Z", "type": "commit"}, {"oid": "b9e5ba9448bb7cef069fee6ff375b2a514c686d6", "url": "https://github.com/all-of-us/workbench/commit/b9e5ba9448bb7cef069fee6ff375b2a514c686d6", "message": "add billingAccount to WS api", "committedDate": "2020-01-16T19:44:46Z", "type": "commit"}, {"oid": "7e7bf93bf11313ba7b5277b02b0997d1e365ea3c", "url": "https://github.com/all-of-us/workbench/commit/7e7bf93bf11313ba7b5277b02b0997d1e365ea3c", "message": "Merge branch 'master' of github.com:all-of-us/workbench into songe/RW-3175", "committedDate": "2020-01-16T19:51:05Z", "type": "commit"}, {"oid": "a563de70458e0b3ccd7ddfa01a0fb46b439307c1", "url": "https://github.com/all-of-us/workbench/commit/a563de70458e0b3ccd7ddfa01a0fb46b439307c1", "message": "add field for billing account name to workspace. drop billing account type in favor of account name comparison", "committedDate": "2020-01-16T23:23:09Z", "type": "commit"}, {"oid": "43362f362a5fc89b75a77045ed3ec3dd8eda25bc", "url": "https://github.com/all-of-us/workbench/commit/43362f362a5fc89b75a77045ed3ec3dd8eda25bc", "message": "send billing account to front end and pick correct one in dropdown", "committedDate": "2020-01-16T23:44:21Z", "type": "commit"}, {"oid": "ee2bc4ea34d11959af6f4dfdc60a914c6efec366", "url": "https://github.com/all-of-us/workbench/commit/ee2bc4ea34d11959af6f4dfdc60a914c6efec366", "message": "can select billing account in UI", "committedDate": "2020-01-17T17:56:16Z", "type": "commit"}, {"oid": "3444331744ffe2c9a7866c09ff2ec8350ccf2085", "url": "https://github.com/all-of-us/workbench/commit/3444331744ffe2c9a7866c09ff2ec8350ccf2085", "message": "add front end validation for billing account", "committedDate": "2020-01-17T18:17:06Z", "type": "commit"}, {"oid": "0575c9194b2749e09b58c76d4cda8a05ed7d8e36", "url": "https://github.com/all-of-us/workbench/commit/0575c9194b2749e09b58c76d4cda8a05ed7d8e36", "message": "grant ownership to user on billing project", "committedDate": "2020-01-17T23:01:13Z", "type": "commit"}, {"oid": "7d96a92106467bf59305b4e36507e7f13cb2ccba", "url": "https://github.com/all-of-us/workbench/commit/7d96a92106467bf59305b4e36507e7f13cb2ccba", "message": "merging - WIP", "committedDate": "2020-01-22T18:21:21Z", "type": "commit"}, {"oid": "b715a2263985280c7539b71b2b14f5c376a29f15", "url": "https://github.com/all-of-us/workbench/commit/b715a2263985280c7539b71b2b14f5c376a29f15", "message": "WIP", "committedDate": "2020-01-23T01:11:28Z", "type": "commit"}, {"oid": "eab84bb8334be6d7700344e7fb7d579eba8c3001", "url": "https://github.com/all-of-us/workbench/commit/eab84bb8334be6d7700344e7fb7d579eba8c3001", "message": "fix tests", "committedDate": "2020-01-23T05:14:35Z", "type": "commit"}, {"oid": "c2587e5ad3f3b78740c7ea870af9c3b2b316c63b", "url": "https://github.com/all-of-us/workbench/commit/c2587e5ad3f3b78740c7ea870af9c3b2b316c63b", "message": "super cool spy test", "committedDate": "2020-01-23T06:19:15Z", "type": "commit"}, {"oid": "c332e05615c7fd771c120d1fbfc05a6c9cfac3cb", "url": "https://github.com/all-of-us/workbench/commit/c332e05615c7fd771c120d1fbfc05a6c9cfac3cb", "message": "add remaining tests", "committedDate": "2020-01-23T06:53:18Z", "type": "commit"}, {"oid": "3910cfdb967f889bbbfd82667abe5f4ccdc8630a", "url": "https://github.com/all-of-us/workbench/commit/3910cfdb967f889bbbfd82667abe5f4ccdc8630a", "message": "Merge branch 'master' of github.com:all-of-us/workbench into songe/RW-3175", "committedDate": "2020-01-23T15:55:46Z", "type": "commit"}, {"oid": "5e80365d8ce3d1098adbf61342e5a15a0378470c", "url": "https://github.com/all-of-us/workbench/commit/5e80365d8ce3d1098adbf61342e5a15a0378470c", "message": "restore billing account name code", "committedDate": "2020-01-23T16:11:42Z", "type": "commit"}, {"oid": "b391b9b7c8345dce04463f275a498f439d34c574", "url": "https://github.com/all-of-us/workbench/commit/b391b9b7c8345dce04463f275a498f439d34c574", "message": "actually execute update call. works manually", "committedDate": "2020-01-23T16:36:48Z", "type": "commit"}, {"oid": "6dfdf81829745ba862240220b01a4620c0f539b6", "url": "https://github.com/all-of-us/workbench/commit/6dfdf81829745ba862240220b01a4620c0f539b6", "message": "grab billing info on workspace edit", "committedDate": "2020-01-23T18:54:52Z", "type": "commit"}, {"oid": "70c0c086df427750ec753025f57dd1791af12552", "url": "https://github.com/all-of-us/workbench/commit/70c0c086df427750ec753025f57dd1791af12552", "message": "fix changelog", "committedDate": "2020-01-23T18:58:49Z", "type": "commit"}, {"oid": "ec1e0379fe0302f83ec370fbda5cd21a81501d1a", "url": "https://github.com/all-of-us/workbench/commit/ec1e0379fe0302f83ec370fbda5cd21a81501d1a", "message": "fix tests", "committedDate": "2020-01-23T20:06:05Z", "type": "commit"}, {"oid": "c1b20fd06b9f92cf76b44d4b39a1f9910c3dd505", "url": "https://github.com/all-of-us/workbench/commit/c1b20fd06b9f92cf76b44d4b39a1f9910c3dd505", "message": "fix UI tests", "committedDate": "2020-01-23T20:48:30Z", "type": "commit"}, {"oid": "8843dfe70d7eba04ef7f8c6914f2803c01ef81d8", "url": "https://github.com/all-of-us/workbench/commit/8843dfe70d7eba04ef7f8c6914f2803c01ef81d8", "message": "add feature flag gating", "committedDate": "2020-01-23T22:10:15Z", "type": "commit"}, {"oid": "fbd0076675d2bf7537d19ddf07fb61b587237622", "url": "https://github.com/all-of-us/workbench/commit/fbd0076675d2bf7537d19ddf07fb61b587237622", "message": "spotless", "committedDate": "2020-01-23T22:12:18Z", "type": "commit"}, {"oid": "ba8bdcbd48aaf4ef94a3d1c3c51bce34ce6e0076", "url": "https://github.com/all-of-us/workbench/commit/ba8bdcbd48aaf4ef94a3d1c3c51bce34ce6e0076", "message": "ui lint", "committedDate": "2020-01-23T22:15:04Z", "type": "commit"}, {"oid": "da5eef924a76605fe19c8e6164e0b79107a73849", "url": "https://github.com/all-of-us/workbench/commit/da5eef924a76605fe19c8e6164e0b79107a73849", "message": "fix cloud api bug", "committedDate": "2020-01-23T22:42:01Z", "type": "commit"}, {"oid": "f2fea88084d43f33c7cd8e2259b0819985d91f58", "url": "https://github.com/all-of-us/workbench/commit/f2fea88084d43f33c7cd8e2259b0819985d91f58", "message": "prefix free tier back fill with billingAccounts/", "committedDate": "2020-01-23T22:42:20Z", "type": "commit"}, {"oid": "837ed2b37dacebfcdbaa6f38b67bd9df07d2db8b", "url": "https://github.com/all-of-us/workbench/commit/837ed2b37dacebfcdbaa6f38b67bd9df07d2db8b", "message": "fix prefix bug", "committedDate": "2020-01-23T23:30:44Z", "type": "commit"}, {"oid": "33d3adfbe6b096f1fce685a61708bc84f193c648", "url": "https://github.com/all-of-us/workbench/commit/33d3adfbe6b096f1fce685a61708bc84f193c648", "message": "fix api tests", "committedDate": "2020-01-23T23:42:19Z", "type": "commit"}, {"oid": "5cb2af41abfed0cac03ce02e03ad780548f3c40d", "url": "https://github.com/all-of-us/workbench/commit/5cb2af41abfed0cac03ce02e03ad780548f3c40d", "message": "fix UI tests", "committedDate": "2020-01-23T23:59:13Z", "type": "commit"}, {"oid": "2f5017fb481a7d45ccebf79f5098b4cc4648ce1f", "url": "https://github.com/all-of-us/workbench/commit/2f5017fb481a7d45ccebf79f5098b4cc4648ce1f", "message": "add retryer", "committedDate": "2020-01-24T00:20:58Z", "type": "commit"}, {"oid": "2fa89be9613c68f122e39e246458262a46ee9eff", "url": "https://github.com/all-of-us/workbench/commit/2fa89be9613c68f122e39e246458262a46ee9eff", "message": "comment", "committedDate": "2020-01-24T00:25:09Z", "type": "commit"}, {"oid": "1c9b03b3234059dcbbeace44d1ee59ba561c312b", "url": "https://github.com/all-of-us/workbench/commit/1c9b03b3234059dcbbeace44d1ee59ba561c312b", "message": "spotless", "committedDate": "2020-01-24T00:25:41Z", "type": "commit"}, {"oid": "22bf17fde17485df992c4066f2028a3ac9850db7", "url": "https://github.com/all-of-us/workbench/commit/22bf17fde17485df992c4066f2028a3ac9850db7", "message": "ui touch ups", "committedDate": "2020-01-24T05:06:12Z", "type": "commit"}, {"oid": "bcb09156164e0a8fa4adc098e4f3e07a4249c878", "url": "https://github.com/all-of-us/workbench/commit/bcb09156164e0a8fa4adc098e4f3e07a4249c878", "message": "reset config local", "committedDate": "2020-01-24T05:37:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5ODM5OA==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r370898398", "bodyText": "Can a bean provider not just throw an exception? i.e. add throws to the method signature for this? That seems more natural than rethrowing a runtime exception.\nIf you can't do this for some reason, then please at least include the exception here, as it stands the original exception is swallowed here", "author": "calbach", "createdAt": "2020-01-25T00:45:29Z", "path": "api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.pmiops.workbench.billing;\n+\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.services.cloudbilling.Cloudbilling;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.Collections;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.auth.UserAuthentication;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.web.context.annotation.RequestScope;\n+\n+@Configuration\n+public class GoogleApisConfig {\n+\n+  @Bean\n+  @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n+  public Cloudbilling googleCloudBillingApi(\n+      UserAuthentication userAuthentication,\n+      JsonFactory jsonFactory,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    GoogleCredential credential =\n+        new GoogleCredential()\n+            .setAccessToken(userAuthentication.getCredentials())\n+            .createScoped(\n+                Collections.singletonList(\"https://www.googleapis.com/auth/cloud-platform\"));\n+\n+    try {\n+      return new Cloudbilling.Builder(\n+              GoogleNetHttpTransport.newTrustedTransport(), jsonFactory, credential)\n+          .setApplicationName(workbenchConfigProvider.get().server.projectId)\n+          .build();\n+    } catch (GeneralSecurityException | IOException e) {\n+      throw new RuntimeException(\"Could not construct Cloudbilling API client\");", "originalCommit": "bcb09156164e0a8fa4adc098e4f3e07a4249c878", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934a6ee3abe8da8e549b68299a5f3d19e17fa094", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java b/api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java\nindex 89332e224..88f2d079d 100644\n--- a/api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java\n+++ b/api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java\n\n@@ -23,20 +23,17 @@ public class GoogleApisConfig {\n   public Cloudbilling googleCloudBillingApi(\n       UserAuthentication userAuthentication,\n       JsonFactory jsonFactory,\n-      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+      Provider<WorkbenchConfig> workbenchConfigProvider)\n+      throws GeneralSecurityException, IOException {\n     GoogleCredential credential =\n         new GoogleCredential()\n             .setAccessToken(userAuthentication.getCredentials())\n             .createScoped(\n                 Collections.singletonList(\"https://www.googleapis.com/auth/cloud-platform\"));\n \n-    try {\n-      return new Cloudbilling.Builder(\n-              GoogleNetHttpTransport.newTrustedTransport(), jsonFactory, credential)\n-          .setApplicationName(workbenchConfigProvider.get().server.projectId)\n-          .build();\n-    } catch (GeneralSecurityException | IOException e) {\n-      throw new RuntimeException(\"Could not construct Cloudbilling API client\");\n-    }\n+    return new Cloudbilling.Builder(\n+            GoogleNetHttpTransport.newTrustedTransport(), jsonFactory, credential)\n+        .setApplicationName(workbenchConfigProvider.get().server.projectId)\n+        .build();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5ODY3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r370898677", "bodyText": "I would add a log.severe() here; we will want to pay attention if this happens, since this call might fail as well.", "author": "calbach", "createdAt": "2020-01-25T00:47:14Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -244,12 +252,76 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n+\n+    try {\n+      dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    } catch (Exception e) {\n+      // Tell Google to set the billing account back to the free tier if the workspace creation\n+      // fails\n+      updateWorkspaceBillingAccount(dbWorkspace, workbenchConfigProvider.get().billing.accountId);", "originalCommit": "bcb09156164e0a8fa4adc098e4f3e07a4249c878", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934a6ee3abe8da8e549b68299a5f3d19e17fa094", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex df9add3dd..92d594029 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -253,12 +253,13 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n     updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n-\n     try {\n       dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n     } catch (Exception e) {\n       // Tell Google to set the billing account back to the free tier if the workspace creation\n       // fails\n+      log.severe(\"Could not save new workspace to database. Calling Google Cloud billing to update the failed billing project's billing account back to the free tier.\");\n+      log.severe(e.getMessage());\n       updateWorkspaceBillingAccount(dbWorkspace, workbenchConfigProvider.get().billing.accountId);\n       throw e;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5ODg4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r370898887", "bodyText": "Perhaps instead just update the billing account after you save the workspace. that way it is already on free tier if either step fails", "author": "calbach", "createdAt": "2020-01-25T00:48:41Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -244,12 +252,76 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n+\n+    try {\n+      dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    } catch (Exception e) {\n+      // Tell Google to set the billing account back to the free tier if the workspace creation", "originalCommit": "bcb09156164e0a8fa4adc098e4f3e07a4249c878", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MDczNw==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r371350737", "bodyText": "If I am saving the workspace with the updates billing account, I believe I still need to make a try/catch call to update the db if the Google call fails.\nProposed\n\nsave db w/ new billing account (succeeds)\ncall google (fails)\nsave db w/ old billing account to keep state in sync OR delete the workspace b/c the create call didn't fully complete successfully.\n\nCurrent\n\ncall google w/ new billing account (succeeds)\nsave db (fails)\ncall google w/ old billing account to keep state in sync\n\nMy reasoning for going with the current workflow was that I felt like a db save call is less likely to fail than an API call. There's also the effect of having a partially successful workspace entry in our database. I could see a case for not failing the entire call if the updateBillingInfo call fails since the entire call is quite expensive but I view that more of a feature add on that we can talk to product about.", "author": "ericsong", "createdAt": "2020-01-27T16:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5ODg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "934a6ee3abe8da8e549b68299a5f3d19e17fa094", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex df9add3dd..92d594029 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -253,12 +253,13 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n     updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n-\n     try {\n       dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n     } catch (Exception e) {\n       // Tell Google to set the billing account back to the free tier if the workspace creation\n       // fails\n+      log.severe(\"Could not save new workspace to database. Calling Google Cloud billing to update the failed billing project's billing account back to the free tier.\");\n+      log.severe(e.getMessage());\n       updateWorkspaceBillingAccount(dbWorkspace, workbenchConfigProvider.get().billing.accountId);\n       throw e;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5OTIxMg==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r370899212", "bodyText": "Please use something with jitter and/or backoff, fixed wait is not very graceful.", "author": "calbach", "createdAt": "2020-01-25T00:50:58Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -244,12 +252,76 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n+\n+    try {\n+      dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    } catch (Exception e) {\n+      // Tell Google to set the billing account back to the free tier if the workspace creation\n+      // fails\n+      updateWorkspaceBillingAccount(dbWorkspace, workbenchConfigProvider.get().billing.accountId);\n+      throw e;\n+    }\n+\n     Workspace createdWorkspace = WorkspaceConversionUtils.toApiWorkspace(dbWorkspace, fcWorkspace);\n     workspaceAuditor.fireCreateAction(createdWorkspace, dbWorkspace.getWorkspaceId());\n     return ResponseEntity.ok(createdWorkspace);\n   }\n \n+  private Retryer<ProjectBillingInfo> cloudBillingRetryer =\n+      RetryerBuilder.<ProjectBillingInfo>newBuilder()\n+          .retryIfException(\n+              e ->\n+                  e instanceof GoogleJsonResponseException\n+                      && ((GoogleJsonResponseException) e).getStatusCode() == 403)\n+          .withWaitStrategy(WaitStrategies.fixedWait(5, TimeUnit.SECONDS))", "originalCommit": "bcb09156164e0a8fa4adc098e4f3e07a4249c878", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934a6ee3abe8da8e549b68299a5f3d19e17fa094", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex df9add3dd..92d594029 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -253,12 +253,13 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n     updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n-\n     try {\n       dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n     } catch (Exception e) {\n       // Tell Google to set the billing account back to the free tier if the workspace creation\n       // fails\n+      log.severe(\"Could not save new workspace to database. Calling Google Cloud billing to update the failed billing project's billing account back to the free tier.\");\n+      log.severe(e.getMessage());\n       updateWorkspaceBillingAccount(dbWorkspace, workbenchConfigProvider.get().billing.accountId);\n       throw e;\n     }\n"}}, {"oid": "934a6ee3abe8da8e549b68299a5f3d19e17fa094", "url": "https://github.com/all-of-us/workbench/commit/934a6ee3abe8da8e549b68299a5f3d19e17fa094", "message": "graceful retry", "committedDate": "2020-01-27T17:29:05Z", "type": "commit"}, {"oid": "8eb3ace35ed296c59eba4465dd566addf22dad76", "url": "https://github.com/all-of-us/workbench/commit/8eb3ace35ed296c59eba4465dd566addf22dad76", "message": "dynamic free tier limit in description. return larger json object", "committedDate": "2020-01-27T17:29:32Z", "type": "commit"}, {"oid": "f93dcb8d90c6ea23e582d9c9dc7e0b77057443d5", "url": "https://github.com/all-of-us/workbench/commit/f93dcb8d90c6ea23e582d9c9dc7e0b77057443d5", "message": "handle reader/writer case", "committedDate": "2020-01-27T19:23:27Z", "type": "commit"}, {"oid": "08aca38d590ef474fb85c2baffe70982707d7edb", "url": "https://github.com/all-of-us/workbench/commit/08aca38d590ef474fb85c2baffe70982707d7edb", "message": "lint", "committedDate": "2020-01-27T19:28:15Z", "type": "commit"}, {"oid": "6555c350215a9ee0544103e53380b9b5f47fe10c", "url": "https://github.com/all-of-us/workbench/commit/6555c350215a9ee0544103e53380b9b5f47fe10c", "message": "spotless", "committedDate": "2020-01-27T19:28:53Z", "type": "commit"}, {"oid": "6d72bbf1159be2496eb401496b522f165a8e52f5", "url": "https://github.com/all-of-us/workbench/commit/6d72bbf1159be2496eb401496b522f165a8e52f5", "message": "add logging", "committedDate": "2020-01-27T19:36:06Z", "type": "commit"}, {"oid": "81292378acdc7b9851d40c1dbe714703df2c0692", "url": "https://github.com/all-of-us/workbench/commit/81292378acdc7b9851d40c1dbe714703df2c0692", "message": "lint", "committedDate": "2020-01-27T19:36:47Z", "type": "commit"}, {"oid": "e21e64dfc8ccae06b61f997c10ed7a5788ad1825", "url": "https://github.com/all-of-us/workbench/commit/e21e64dfc8ccae06b61f997c10ed7a5788ad1825", "message": "merge master", "committedDate": "2020-01-27T19:45:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0ODI3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r371448273", "bodyText": "nit: combine this with the exception log.log(Level.SEVERE, \"Could not...\", e)", "author": "calbach", "createdAt": "2020-01-27T19:51:12Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -244,12 +252,78 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n+    try {\n+      dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    } catch (Exception e) {\n+      // Tell Google to set the billing account back to the free tier if the workspace creation\n+      // fails\n+      log.severe(", "originalCommit": "e21e64dfc8ccae06b61f997c10ed7a5788ad1825", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e12241c0fe35ee1b137c40a36190b80811ee30eb", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 9766bdd76..601995b10 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -258,9 +258,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     } catch (Exception e) {\n       // Tell Google to set the billing account back to the free tier if the workspace creation\n       // fails\n-      log.severe(\n-          \"Could not save new workspace to database. Calling Google Cloud billing to update the failed billing project's billing account back to the free tier.\");\n-      log.severe(e.getMessage());\n+      log.log(Level.SEVERE,\n+          \"Could not save new workspace to database. Calling Google Cloud billing to update the failed billing project's billing account back to the free tier.\",\n+          e);\n+\n       updateWorkspaceBillingAccount(dbWorkspace, workbenchConfigProvider.get().billing.accountId);\n       throw e;\n     }\n"}}, {"oid": "e12241c0fe35ee1b137c40a36190b80811ee30eb", "url": "https://github.com/all-of-us/workbench/commit/e12241c0fe35ee1b137c40a36190b80811ee30eb", "message": "code review", "committedDate": "2020-01-27T21:01:57Z", "type": "commit"}, {"oid": "9dc4886ffc68932720e7ff051ea4f24a32b25404", "url": "https://github.com/all-of-us/workbench/commit/9dc4886ffc68932720e7ff051ea4f24a32b25404", "message": "lint", "committedDate": "2020-01-27T21:03:37Z", "type": "commit"}, {"oid": "a2aa51fac7006785ef3f9d2abe79d680a4f4c226", "url": "https://github.com/all-of-us/workbench/commit/a2aa51fac7006785ef3f9d2abe79d680a4f4c226", "message": "fix tests and workspace state bug", "committedDate": "2020-01-27T21:31:22Z", "type": "commit"}, {"oid": "84290cfd8a5a60f83e7638410c98c2510e018055", "url": "https://github.com/all-of-us/workbench/commit/84290cfd8a5a60f83e7638410c98c2510e018055", "message": "spotless", "committedDate": "2020-01-27T21:32:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMDI2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r371500266", "bodyText": "GoogleCredential is deprecated.  Can this be rewritten with GoogleCredentials ?", "author": "jmthibault79", "createdAt": "2020-01-27T21:46:24Z", "path": "api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.pmiops.workbench.billing;\n+\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.services.cloudbilling.Cloudbilling;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.Collections;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.auth.UserAuthentication;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.web.context.annotation.RequestScope;\n+\n+@Configuration\n+public class GoogleApisConfig {\n+\n+  @Bean\n+  @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n+  public Cloudbilling googleCloudBillingApi(\n+      UserAuthentication userAuthentication,\n+      JsonFactory jsonFactory,\n+      Provider<WorkbenchConfig> workbenchConfigProvider)\n+      throws GeneralSecurityException, IOException {\n+    GoogleCredential credential =", "originalCommit": "84290cfd8a5a60f83e7638410c98c2510e018055", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd6d7542823190ce1b1e7a567794dc6cac3e2e0e", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java b/api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java\nindex 88f2d079d..d82fc8db3 100644\n--- a/api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java\n+++ b/api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java\n\n@@ -1,12 +1,13 @@\n package org.pmiops.workbench.billing;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.JsonFactory;\n import com.google.api.services.cloudbilling.Cloudbilling;\n+import com.google.auth.http.HttpCredentialsAdapter;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.security.GeneralSecurityException;\n-import java.util.Collections;\n import javax.inject.Provider;\n import org.pmiops.workbench.auth.UserAuthentication;\n import org.pmiops.workbench.config.WorkbenchConfig;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMDYyMA==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r371500620", "bodyText": "can be .call(request::execute) instead", "author": "jmthibault79", "createdAt": "2020-01-27T21:47:07Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -244,12 +252,80 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n+    try {\n+      dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n+    } catch (Exception e) {\n+      // Tell Google to set the billing account back to the free tier if the workspace creation\n+      // fails\n+      log.log(\n+          Level.SEVERE,\n+          \"Could not save new workspace to database. Calling Google Cloud billing to update the failed billing project's billing account back to the free tier.\",\n+          e);\n+\n+      updateWorkspaceBillingAccount(dbWorkspace, workbenchConfigProvider.get().billing.accountId);\n+      throw e;\n+    }\n+\n     Workspace createdWorkspace = WorkspaceConversionUtils.toApiWorkspace(dbWorkspace, fcWorkspace);\n     workspaceAuditor.fireCreateAction(createdWorkspace, dbWorkspace.getWorkspaceId());\n     return ResponseEntity.ok(createdWorkspace);\n   }\n \n+  private Retryer<ProjectBillingInfo> cloudBillingRetryer =\n+      RetryerBuilder.<ProjectBillingInfo>newBuilder()\n+          .retryIfException(\n+              e ->\n+                  e instanceof GoogleJsonResponseException\n+                      && ((GoogleJsonResponseException) e).getStatusCode() == 403)\n+          .withWaitStrategy(WaitStrategies.exponentialWait())\n+          .withStopStrategy(StopStrategies.stopAfterDelay(60, TimeUnit.SECONDS))\n+          .build();\n+\n+  private void updateWorkspaceBillingAccount(DbWorkspace workspace, String newBillingAccountName) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      // If billing lockout / upgrade is not enabled, ignore the normal logic\n+      // and set the billing account to the free tier\n+      workspace.setBillingAccountName(\n+          \"billingAccounts/\" + workbenchConfigProvider.get().billing.accountId);\n+      return;\n+    }\n+\n+    if (newBillingAccountName.equals(workspace.getBillingAccountName())) {\n+      return;\n+    }\n+\n+    try {\n+      UpdateBillingInfo request =\n+          cloudbillingProvider\n+              .get()\n+              .projects()\n+              .updateBillingInfo(\n+                  \"projects/\" + workspace.getWorkspaceNamespace(),\n+                  new ProjectBillingInfo().setBillingAccountName(newBillingAccountName));\n+\n+      ProjectBillingInfo response;\n+\n+      try {\n+        // this is necessary because the grant ownership call in create/clone\n+        // may not have propagated. Adding a few retries drastically reduces\n+        // the likely of failing due to slow propagation\n+        response = cloudBillingRetryer.call(() -> request.execute());", "originalCommit": "84290cfd8a5a60f83e7638410c98c2510e018055", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd6d7542823190ce1b1e7a567794dc6cac3e2e0e", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 59ea899ec..ebb5eced5 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -310,7 +310,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         // this is necessary because the grant ownership call in create/clone\n         // may not have propagated. Adding a few retries drastically reduces\n         // the likely of failing due to slow propagation\n-        response = cloudBillingRetryer.call(() -> request.execute());\n+        response = cloudBillingRetryer.call(request::execute);\n       } catch (RetryException | ExecutionException e) {\n         throw new ServerErrorException(\"Google Cloud updateBillingInfo call failed\", e);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMDc2MA==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r371500760", "bodyText": "Could you go into more detail here?", "author": "jmthibault79", "createdAt": "2020-01-27T21:47:26Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -460,9 +545,18 @@ private void setDbWorkspaceFields(\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    DbWorkspace savedDbWorkspace =\n-        workspaceService.saveAndCloneCohortsConceptSetsAndDataSets(fromWorkspace, dbWorkspace);\n+    updateWorkspaceBillingAccount(dbWorkspace, body.getWorkspace().getBillingAccountName());\n+\n+    try {\n+      dbWorkspace =\n+          workspaceService.saveAndCloneCohortsConceptSetsAndDataSets(fromWorkspace, dbWorkspace);\n+    } catch (Exception e) {\n+      // Tell Google to set the billing account back to the free tier if our clone fails\n+      updateWorkspaceBillingAccount(dbWorkspace, workbenchConfigProvider.get().billing.accountId);\n+      throw e;\n+    }\n \n+    // TODO: File a bug about this. Can create a workspace", "originalCommit": "84290cfd8a5a60f83e7638410c98c2510e018055", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNzQxMg==", "url": "https://github.com/all-of-us/workbench/pull/3035#discussion_r371507412", "bodyText": "oops. Yeah, I expanded my comment. I'm not quite sure if it warrants a ticket so I think I'm going to leave it at that", "author": "ericsong", "createdAt": "2020-01-27T22:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMDc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "bd6d7542823190ce1b1e7a567794dc6cac3e2e0e", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 59ea899ec..ebb5eced5 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -556,7 +556,9 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n       throw e;\n     }\n \n-    // TODO: File a bug about this. Can create a workspace\n+    // Note: It is possible for a workspace to be (partially) created and return\n+    // a 500 to the user if this block of code fails since the workspace is already\n+    // committed to the database in an earlier call\n     if (Optional.ofNullable(body.getIncludeUserRoles()).orElse(false)) {\n       Map<String, FirecloudWorkspaceAccessEntry> fromAclsMap =\n           workspaceService.getFirecloudWorkspaceAcls(\n"}}, {"oid": "bd6d7542823190ce1b1e7a567794dc6cac3e2e0e", "url": "https://github.com/all-of-us/workbench/commit/bd6d7542823190ce1b1e7a567794dc6cac3e2e0e", "message": "various cleanup and fixes. use non deprecated google credentials library", "committedDate": "2020-01-27T22:18:42Z", "type": "commit"}, {"oid": "2a690e486dc2fc195b1464503d17357f31e04ba2", "url": "https://github.com/all-of-us/workbench/commit/2a690e486dc2fc195b1464503d17357f31e04ba2", "message": "remove test code", "committedDate": "2020-01-28T16:31:43Z", "type": "commit"}, {"oid": "0a323978743405d3cc40eb319ab02f2f1a64cc69", "url": "https://github.com/all-of-us/workbench/commit/0a323978743405d3cc40eb319ab02f2f1a64cc69", "message": "remove test code", "committedDate": "2020-01-28T16:32:08Z", "type": "commit"}]}