{"pr_number": 3197, "pr_title": "[RW-4246][RISK=LOW] Captcha requirement at the time of Registration", "pr_createdAt": "2020-02-27T19:23:46Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3197", "timeline": [{"oid": "2f6df28a3e729d87c0b5aa492238303e18c31f58", "url": "https://github.com/all-of-us/workbench/commit/2f6df28a3e729d87c0b5aa492238303e18c31f58", "message": "Add captcha Demographic Survey page", "committedDate": "2020-02-27T19:20:39Z", "type": "commit"}, {"oid": "347617fba4ce0949e6e6d070884eed057c457027", "url": "https://github.com/all-of-us/workbench/commit/347617fba4ce0949e6e6d070884eed057c457027", "message": "Captcha conflict", "committedDate": "2020-02-27T19:55:52Z", "type": "commit"}, {"oid": "3030c8215c3834fc9de9cdf933471c27c654134c", "url": "https://github.com/all-of-us/workbench/commit/3030c8215c3834fc9de9cdf933471c27c654134c", "message": "Set captcha only if its enabled", "committedDate": "2020-02-27T19:59:59Z", "type": "commit"}, {"oid": "c146418e197a36ad7c0af67606fa3a2baae66581", "url": "https://github.com/all-of-us/workbench/commit/c146418e197a36ad7c0af67606fa3a2baae66581", "message": "fix test add comments", "committedDate": "2020-02-27T20:15:26Z", "type": "commit"}, {"oid": "d666ff5e16c7def1755501edaf2a3d4aa477a205", "url": "https://github.com/all-of-us/workbench/commit/d666ff5e16c7def1755501edaf2a3d4aa477a205", "message": "yarn lock", "committedDate": "2020-02-27T20:18:59Z", "type": "commit"}, {"oid": "e6913393a8ccb8b3f115f6ef62a9d43faa21cc22", "url": "https://github.com/all-of-us/workbench/commit/e6913393a8ccb8b3f115f6ef62a9d43faa21cc22", "message": "blank captcha key if captcha is not enabled", "committedDate": "2020-02-27T20:20:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0NzIyMg==", "url": "https://github.com/all-of-us/workbench/pull/3197#discussion_r385347222", "bodyText": "Nit: Please use specific imports as opposed to * imports.", "author": "s-rubenstein", "createdAt": "2020-02-27T20:14:07Z", "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaServerVerificationResponse.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.pmiops.workbench.captcha;\n+\n+import com.fasterxml.jackson.annotation.*;", "originalCommit": "3030c8215c3834fc9de9cdf933471c27c654134c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "703045182875144b04cac17b485b5a37bf547ab1", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/captcha/CaptchaServerVerificationResponse.java b/api/src/main/java/org/pmiops/workbench/captcha/CaptchaServerVerificationResponse.java\ndeleted file mode 100644\nindex ba9cc3662..000000000\n--- a/api/src/main/java/org/pmiops/workbench/captcha/CaptchaServerVerificationResponse.java\n+++ /dev/null\n\n@@ -1,93 +0,0 @@\n-package org.pmiops.workbench.captcha;\n-\n-import com.fasterxml.jackson.annotation.*;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonIgnoreProperties(ignoreUnknown = true)\n-@JsonPropertyOrder({\"success\", \"challenge_ts\", \"hostname\", \"error-codes\"})\n-public class CaptchaServerVerificationResponse {\n-\n-  @JsonProperty(\"success\")\n-  private boolean success;\n-\n-  @JsonProperty(\"challenge_ts\")\n-  private Date challengeTs;\n-\n-  @JsonProperty(\"hostname\")\n-  private String hostname;\n-\n-  @JsonProperty(\"error-codes\")\n-  private ErrorCode[] errorCodes;\n-\n-  @JsonIgnore\n-  public boolean hasClientError() {\n-    ErrorCode[] errors = getErrorCodes();\n-    if (errors == null) {\n-      return false;\n-    }\n-    for (ErrorCode error : errors) {\n-      switch (error) {\n-        case InvalidResponse:\n-        case MissingResponse:\n-          return true;\n-      }\n-    }\n-    return false;\n-  }\n-\n-  static enum ErrorCode {\n-    MissingSecret,\n-    InvalidSecret,\n-    MissingResponse,\n-    InvalidResponse;\n-\n-    private static Map<String, ErrorCode> errorsMap = new HashMap<>(4);\n-\n-    static {\n-      errorsMap.put(\"missing-input-secret\", MissingSecret);\n-      errorsMap.put(\"invalid-input-secret\", InvalidSecret);\n-      errorsMap.put(\"missing-input-response\", MissingResponse);\n-      errorsMap.put(\"invalid-input-response\", InvalidResponse);\n-    }\n-\n-    @JsonCreator\n-    public static ErrorCode forValue(String value) {\n-      return errorsMap.get(value.toLowerCase());\n-    }\n-  }\n-\n-  public boolean isSuccess() {\n-    return success;\n-  }\n-\n-  public void setSuccess(boolean success) {\n-    this.success = success;\n-  }\n-\n-  public Date getChallengeTs() {\n-    return challengeTs;\n-  }\n-\n-  public void setChallengeTs(Date challengeTs) {\n-    this.challengeTs = challengeTs;\n-  }\n-\n-  public String getHostname() {\n-    return hostname;\n-  }\n-\n-  public void setHostname(String hostname) {\n-    this.hostname = hostname;\n-  }\n-\n-  public ErrorCode[] getErrorCodes() {\n-    return errorCodes;\n-  }\n-\n-  public void setErrorCodes(ErrorCode[] errorCodes) {\n-    this.errorCodes = errorCodes;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MDYzMg==", "url": "https://github.com/all-of-us/workbench/pull/3197#discussion_r385350632", "bodyText": "Opt: Could either of these files be generated with Swagger? Assuming I understand and this is an api response object and a caller to the captcha API?\nThis is opt because this is a small number of methods and is unlikely to change, but may be worth considering.", "author": "s-rubenstein", "createdAt": "2020-02-27T20:21:36Z", "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaServerVerificationResponse.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.pmiops.workbench.captcha;", "originalCommit": "c146418e197a36ad7c0af67606fa3a2baae66581", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NDgxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3197#discussion_r385394819", "bodyText": "I started with the swagger approach that did not work for me hence i used this.", "author": "NehaBroad", "createdAt": "2020-02-27T21:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MDYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNjAwMw==", "url": "https://github.com/all-of-us/workbench/pull/3197#discussion_r385506003", "bodyText": "Apparently i need to borrow Greg's shame cube, the reason why this was not working in swagger was spelling mistake and security Definitions (we do not need it here)", "author": "NehaBroad", "createdAt": "2020-02-28T04:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MDYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "703045182875144b04cac17b485b5a37bf547ab1", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/captcha/CaptchaServerVerificationResponse.java b/api/src/main/java/org/pmiops/workbench/captcha/CaptchaServerVerificationResponse.java\ndeleted file mode 100644\nindex ba9cc3662..000000000\n--- a/api/src/main/java/org/pmiops/workbench/captcha/CaptchaServerVerificationResponse.java\n+++ /dev/null\n\n@@ -1,93 +0,0 @@\n-package org.pmiops.workbench.captcha;\n-\n-import com.fasterxml.jackson.annotation.*;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonIgnoreProperties(ignoreUnknown = true)\n-@JsonPropertyOrder({\"success\", \"challenge_ts\", \"hostname\", \"error-codes\"})\n-public class CaptchaServerVerificationResponse {\n-\n-  @JsonProperty(\"success\")\n-  private boolean success;\n-\n-  @JsonProperty(\"challenge_ts\")\n-  private Date challengeTs;\n-\n-  @JsonProperty(\"hostname\")\n-  private String hostname;\n-\n-  @JsonProperty(\"error-codes\")\n-  private ErrorCode[] errorCodes;\n-\n-  @JsonIgnore\n-  public boolean hasClientError() {\n-    ErrorCode[] errors = getErrorCodes();\n-    if (errors == null) {\n-      return false;\n-    }\n-    for (ErrorCode error : errors) {\n-      switch (error) {\n-        case InvalidResponse:\n-        case MissingResponse:\n-          return true;\n-      }\n-    }\n-    return false;\n-  }\n-\n-  static enum ErrorCode {\n-    MissingSecret,\n-    InvalidSecret,\n-    MissingResponse,\n-    InvalidResponse;\n-\n-    private static Map<String, ErrorCode> errorsMap = new HashMap<>(4);\n-\n-    static {\n-      errorsMap.put(\"missing-input-secret\", MissingSecret);\n-      errorsMap.put(\"invalid-input-secret\", InvalidSecret);\n-      errorsMap.put(\"missing-input-response\", MissingResponse);\n-      errorsMap.put(\"invalid-input-response\", InvalidResponse);\n-    }\n-\n-    @JsonCreator\n-    public static ErrorCode forValue(String value) {\n-      return errorsMap.get(value.toLowerCase());\n-    }\n-  }\n-\n-  public boolean isSuccess() {\n-    return success;\n-  }\n-\n-  public void setSuccess(boolean success) {\n-    this.success = success;\n-  }\n-\n-  public Date getChallengeTs() {\n-    return challengeTs;\n-  }\n-\n-  public void setChallengeTs(Date challengeTs) {\n-    this.challengeTs = challengeTs;\n-  }\n-\n-  public String getHostname() {\n-    return hostname;\n-  }\n-\n-  public void setHostname(String hostname) {\n-    this.hostname = hostname;\n-  }\n-\n-  public ErrorCode[] getErrorCodes() {\n-    return errorCodes;\n-  }\n-\n-  public void setErrorCodes(ErrorCode[] errorCodes) {\n-    this.errorCodes = errorCodes;\n-  }\n-}\n"}}, {"oid": "6d482772b69b8c70bfef72d50ca975f3a3d2752f", "url": "https://github.com/all-of-us/workbench/commit/6d482772b69b8c70bfef72d50ca975f3a3d2752f", "message": "swagger for captcha", "committedDate": "2020-02-28T04:46:02Z", "type": "commit"}, {"oid": "56cc939d7f4215804b5f50e2d677eaaa82245146", "url": "https://github.com/all-of-us/workbench/commit/56cc939d7f4215804b5f50e2d677eaaa82245146", "message": "fix test", "committedDate": "2020-02-28T05:09:08Z", "type": "commit"}, {"oid": "703045182875144b04cac17b485b5a37bf547ab1", "url": "https://github.com/all-of-us/workbench/commit/703045182875144b04cac17b485b5a37bf547ab1", "message": "remove CaptchaServerVerificationResponse", "committedDate": "2020-02-28T05:11:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwOTYyMg==", "url": "https://github.com/all-of-us/workbench/pull/3197#discussion_r385909622", "bodyText": "This looks more like a ServiceImpl than a service - please pull out the Service interface.", "author": "als364", "createdAt": "2020-02-28T20:34:16Z", "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.captcha;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.captcha.api.CaptchaApi;\n+import org.pmiops.workbench.captcha.model.CaptchaVerificationResponse;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+/** Service to verify Captcha */\n+@Service\n+public class CaptchaVerificationService {", "originalCommit": "703045182875144b04cac17b485b5a37bf547ab1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2943ca86b9d7e4834d7b2c055ef130cdbbb6362", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationService.java b/api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationService.java\nindex 034344e9f..56af64f16 100644\n--- a/api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationService.java\n+++ b/api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationService.java\n\n@@ -1,72 +1,9 @@\n package org.pmiops.workbench.captcha;\n \n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import java.util.stream.Collectors;\n-import javax.inject.Provider;\n-import org.pmiops.workbench.captcha.api.CaptchaApi;\n-import org.pmiops.workbench.captcha.model.CaptchaVerificationResponse;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.google.CloudStorageService;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-/** Service to verify Captcha */\n-@Service\n-public class CaptchaVerificationService {\n+public interface CaptchaVerificationService {\n \n-  final String urlPattern = \"https://%s/login\";\n+  boolean verifyCaptcha(String responseToken) throws ApiException;\n \n-  final String localHostUrlPattern = \"http://%s:4200/login\";\n-\n-  private CloudStorageService cloudStorageService;\n-  final Provider<WorkbenchConfig> configProvider;\n-  private Provider<CaptchaApi> captchaApiProvider;\n-\n-  private static final Logger log = Logger.getLogger(CaptchaVerificationService.class.getName());\n-\n-  @Autowired\n-  public CaptchaVerificationService(\n-      CloudStorageService cloudStorageService,\n-      javax.inject.Provider<WorkbenchConfig> configProvider,\n-      javax.inject.Provider<CaptchaApi> captchaApiProvider) {\n-    this.cloudStorageService = cloudStorageService;\n-    this.configProvider = configProvider;\n-    this.captchaApiProvider = captchaApiProvider;\n-  }\n-\n-  /**\n-   * Calls google api to verify Captcha Response by sending the captcha Server key associated with\n-   * host and the token generated by the user response on front end. Returns true if valid else\n-   * false\n-   *\n-   * @param responseToken\n-   * @return if Captcha is valid\n-   */\n-  public boolean verifyCaptcha(String responseToken) throws ApiException {\n-    CaptchaVerificationResponse response =\n-        captchaApiProvider.get().verify(cloudStorageService.getCaptchaServerKey(), responseToken);\n-    if (!response.getSuccess()) {\n-      log.log(\n-          Level.WARNING,\n-          String.format(\n-              \"Exception while verifying captcha%s\",\n-              response.getErrorCodes().stream()\n-                  .map(errorCodes -> errorCodes.getValue())\n-                  .collect(Collectors.joining(\",\"))));\n-      return false;\n-    }\n-    String captchaHostname = response.getHostname();\n-    String uiUrl = configProvider.get().admin.loginUrl;\n-\n-    // check if the UI URL has the host as send by Captcha Response\n-    boolean captchaHostNameMatchUI =\n-        String.format(urlPattern, captchaHostname).equals(uiUrl)\n-            || String.format(localHostUrlPattern, captchaHostname).equals(uiUrl);\n-    if (!captchaHostNameMatchUI) {\n-      log.log(\n-          Level.SEVERE, String.format(\"Captcha Host Name %s does not match UI\", captchaHostname));\n-    }\n-    return response.getSuccess() && captchaHostNameMatchUI;\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMDAwMA==", "url": "https://github.com/all-of-us/workbench/pull/3197#discussion_r385910000", "bodyText": "nit: either camelcase this or make it all lowercase", "author": "als364", "createdAt": "2020-02-28T20:35:17Z", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -94,6 +96,8 @@\n   private static final String FAMILY_NAME = \"Bobberson\";\n   private static final String CONTACT_EMAIL = \"bob@example.com\";\n   private static final String INVITATION_KEY = \"secretpassword\";\n+  private static final String CAPTCHA_TOKEN = \"captchaToken\";\n+  private static final String WRONG_CAPTCHA_TOKEN = \"WrongcaptchaToken\";", "originalCommit": "703045182875144b04cac17b485b5a37bf547ab1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2943ca86b9d7e4834d7b2c055ef130cdbbb6362", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java\nindex c75007bc6..766938f99 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java\n\n@@ -97,7 +97,7 @@ public class ProfileControllerTest extends BaseControllerTest {\n   private static final String CONTACT_EMAIL = \"bob@example.com\";\n   private static final String INVITATION_KEY = \"secretpassword\";\n   private static final String CAPTCHA_TOKEN = \"captchaToken\";\n-  private static final String WRONG_CAPTCHA_TOKEN = \"WrongcaptchaToken\";\n+  private static final String WRONG_CAPTCHA_TOKEN = \"WrongCaptchaToken\";\n   private static final String PRIMARY_EMAIL = \"bob@researchallofus.org\";\n   private static final String ORGANIZATION = \"Test\";\n   private static final String CURRENT_POSITION = \"Tester\";\n"}}, {"oid": "a2943ca86b9d7e4834d7b2c055ef130cdbbb6362", "url": "https://github.com/all-of-us/workbench/commit/a2943ca86b9d7e4834d7b2c055ef130cdbbb6362", "message": "PR Comments Add serviceImpl remove filename from config", "committedDate": "2020-03-05T16:28:30Z", "type": "commit"}, {"oid": "d06f6d5b84f1a8aac3f11f668fc4292098cc8edc", "url": "https://github.com/all-of-us/workbench/commit/d06f6d5b84f1a8aac3f11f668fc4292098cc8edc", "message": "resolve file conflicts", "committedDate": "2020-03-05T16:35:26Z", "type": "commit"}, {"oid": "ddf9cf60a94aa9c136a1a88f3f74f3b5656d42e4", "url": "https://github.com/all-of-us/workbench/commit/ddf9cf60a94aa9c136a1a88f3f74f3b5656d42e4", "message": "spotless", "committedDate": "2020-03-05T16:58:29Z", "type": "commit"}]}