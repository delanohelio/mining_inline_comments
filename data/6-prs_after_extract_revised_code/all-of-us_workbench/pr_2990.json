{"pr_number": 2990, "pr_title": "[RW-2840][risk=no] Use AppIdentityService to generate service-backed credentials", "pr_createdAt": "2020-01-09T18:25:42Z", "pr_url": "https://github.com/all-of-us/workbench/pull/2990", "timeline": [{"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780", "url": "https://github.com/all-of-us/workbench/commit/eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780", "message": "Use AppIdentityService to generate service-backed credentials.", "committedDate": "2020-01-09T18:24:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMzc3Ng==", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364903776", "bodyText": "comment is no longer accurate", "author": "jmthibault79", "createdAt": "2020-01-09T18:49:31Z", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -13,14 +17,46 @@\n   private static final String SIGN_JWT_URL_FORMAT =\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n+  /**\n+   * Returns an appropriate set of service credentials based on the current operating environment.\n+   *\n+   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   *\n+   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n+   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * within an App Engine environment, the returned credentials will be an instance of\n+   * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n+   * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n+   * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n+   *\n+   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n+   * be a common pain point for users of the com.google.auth.oauth2 library.\n+   *\n+   * @param scopes\n+   * @return\n+   * @throws IOException\n+   */\n+  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+      throws IOException {\n+    if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {\n+      return GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+    } else {\n+      AppIdentityService appIdentityService = AppIdentityServiceFactory.getAppIdentityService();\n+      return AppEngineCredentials.newBuilder()\n+          .setScopes(scopes)\n+          .setAppIdentityService(appIdentityService)\n+          .build();\n+    }\n+  }\n+\n   /**\n    * Retrieves an access token with the specified set of scopes derived from a given set of Google", "originalCommit": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxMzgzMA==", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364913830", "bodyText": "Thanks \u2013\u00a0updated.", "author": "gjuggler", "createdAt": "2020-01-09T19:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMzc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "13b8446eeda2ae2d6662989934fdb4a76c1a34f0", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java b/api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java\nindex 3aa2819bc..e6ac0259b 100644\n--- a/api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java\n+++ b/api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java\n\n@@ -18,18 +18,18 @@ public class ServiceAccounts {\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n-   * Returns an appropriate set of service credentials based on the current operating environment.\n+   * Returns an appropriate set of backend service credentials with the given set of scopes.\n    *\n-   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   * This method uses AppIdentityService to return an instance of scoped AppEngineCredentials when\n+   * running in an App Engine environment.\n    *\n-   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n-   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n    * within an App Engine environment, the returned credentials will be an instance of\n    * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n    * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n    * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n    *\n-   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * See https://github.com/googleapis/google-auth-library-java/issues/272 and\n    * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n    * be a common pain point for users of the com.google.auth.oauth2 library.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwNTIzMQ==", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364905231", "bodyText": "Could use the just-removed WorkbenchEnvironment here if it still existed.  Would it make sense to bring it back?", "author": "jmthibault79", "createdAt": "2020-01-09T18:52:53Z", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -13,14 +17,46 @@\n   private static final String SIGN_JWT_URL_FORMAT =\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n+  /**\n+   * Returns an appropriate set of service credentials based on the current operating environment.\n+   *\n+   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   *\n+   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n+   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * within an App Engine environment, the returned credentials will be an instance of\n+   * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n+   * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n+   * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n+   *\n+   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n+   * be a common pain point for users of the com.google.auth.oauth2 library.\n+   *\n+   * @param scopes\n+   * @return\n+   * @throws IOException\n+   */\n+  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+      throws IOException {\n+    if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {", "originalCommit": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk4NzU2Ng==", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364987566", "bodyText": "Yeah, I thought about that... I'm not convinced that a separate dependency-injected class is worth it for the single usage instance here. If there's no other obvious advantage that I'm missing, I'm inclined to keep the \"am I in dev\" check local here.\n[Update] as a last-ditch effort, I tried seeing if the AppIdentityService branch would work correctly even when running locally. I tested this out locally and it does work fine (I suspect that somewhere under the hood there is a fallback call to GoogleCredentials.getApplicationDefault), but I'm not confident enough to push out that change. I'd rather leave as-is for now and possibly follow-up later with that simplification.", "author": "gjuggler", "createdAt": "2020-01-09T22:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwNTIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "13b8446eeda2ae2d6662989934fdb4a76c1a34f0", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java b/api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java\nindex 3aa2819bc..e6ac0259b 100644\n--- a/api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java\n+++ b/api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java\n\n@@ -18,18 +18,18 @@ public class ServiceAccounts {\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n-   * Returns an appropriate set of service credentials based on the current operating environment.\n+   * Returns an appropriate set of backend service credentials with the given set of scopes.\n    *\n-   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   * This method uses AppIdentityService to return an instance of scoped AppEngineCredentials when\n+   * running in an App Engine environment.\n    *\n-   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n-   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n    * within an App Engine environment, the returned credentials will be an instance of\n    * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n    * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n    * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n    *\n-   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * See https://github.com/googleapis/google-auth-library-java/issues/272 and\n    * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n    * be a common pain point for users of the com.google.auth.oauth2 library.\n    *\n"}}, {"oid": "13b8446eeda2ae2d6662989934fdb4a76c1a34f0", "url": "https://github.com/all-of-us/workbench/commit/13b8446eeda2ae2d6662989934fdb4a76c1a34f0", "message": "PR feedback.", "committedDate": "2020-01-09T22:20:34Z", "type": "commit"}, {"oid": "b321dda915d2b315b51344c0f399dc3b40ddd61e", "url": "https://github.com/all-of-us/workbench/commit/b321dda915d2b315b51344c0f399dc3b40ddd61e", "message": "Spotless format fix.", "committedDate": "2020-01-09T22:24:07Z", "type": "commit"}]}