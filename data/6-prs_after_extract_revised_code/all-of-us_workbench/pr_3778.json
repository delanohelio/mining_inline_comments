{"pr_number": 3778, "pr_title": "[risk=no] Deprecate userService.logAdminUserAction/logAdminWorkspaceAction", "pr_createdAt": "2020-07-13T19:14:01Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3778", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MzMzMA==", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453873330", "bodyText": "logged immediately above", "author": "jmthibault79", "createdAt": "2020-07-13T19:14:38Z", "path": "api/src/main/java/org/pmiops/workbench/api/AuthDomainController.java", "diffHunk": "@@ -56,10 +56,5 @@ private void auditAdminActions(\n       UpdateUserDisabledRequest request, Boolean previousDisabled, DbUser updatedTargetUser) {\n     authDomainAuditAdapter.fireSetAccountDisabledStatus(\n         updatedTargetUser.getUserId(), request.getDisabled(), previousDisabled);\n-    userService.logAdminUserAction(", "originalCommit": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3NDI3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453874275", "bodyText": "logged in UserServiceImpl.setBypasstimeWithRetries() which is called by each of the setXYZBypassTime()", "author": "jmthibault79", "createdAt": "2020-07-13T19:16:20Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -961,54 +961,40 @@ public DbUser getByUsernameOrThrow(String username) {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    final DbUser user =\n-        getByDatabaseId(userDatabaseId)\n-            .orElseThrow(\n-                () ->\n-                    new NotFoundException(\n-                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    getByDatabaseId(userDatabaseId)\n+        .orElseThrow(\n+            () ->\n+                new NotFoundException(\n+                    String.format(\"User with database ID %d not found\", userDatabaseId)));\n \n     final Timestamp newBypassTime;\n-    final Timestamp previousBypassTime;\n \n     final Boolean isBypassed = accessBypassRequest.getIsBypassed();\n     if (isBypassed) {\n       newBypassTime = new Timestamp(clock.instant().toEpochMilli());\n     } else {\n       newBypassTime = null;\n     }\n+\n     switch (accessBypassRequest.getModuleName()) {\n       case DATA_USE_AGREEMENT:\n-        previousBypassTime = user.getDataUseAgreementBypassTime();\n         setDataUseAgreementBypassTime(userDatabaseId, newBypassTime);\n         break;\n       case COMPLIANCE_TRAINING:\n-        previousBypassTime = user.getComplianceTrainingBypassTime();\n         setComplianceTrainingBypassTime(userDatabaseId, newBypassTime);\n         break;\n       case BETA_ACCESS:\n-        previousBypassTime = user.getBetaAccessBypassTime();\n         setBetaAccessBypassTime(userDatabaseId, newBypassTime);\n         break;\n       case ERA_COMMONS:\n-        previousBypassTime = user.getEraCommonsBypassTime();\n         setEraCommonsBypassTime(userDatabaseId, newBypassTime);\n         break;\n       case TWO_FACTOR_AUTH:\n-        previousBypassTime = user.getTwoFactorAuthBypassTime();\n         setTwoFactorAuthBypassTime(userDatabaseId, newBypassTime);\n         break;\n       default:\n         throw new BadRequestException(\n             \"There is no access module named: \" + accessBypassRequest.getModuleName().toString());\n     }\n-    logAdminUserAction(", "originalCommit": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\nindex 33e575a79..5d451a0bc 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n\n@@ -961,13 +976,15 @@ public class UserServiceImpl implements UserService, GaugeDataCollector {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    getByDatabaseId(userDatabaseId)\n-        .orElseThrow(\n-            () ->\n-                new NotFoundException(\n-                    String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    final DbUser user =\n+        getByDatabaseId(userDatabaseId)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n \n     final Timestamp newBypassTime;\n+    final Timestamp previousBypassTime;\n \n     final Boolean isBypassed = accessBypassRequest.getIsBypassed();\n     if (isBypassed) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjAxNg==", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453882016", "bodyText": "Could remove this check entirely?  I decided not to change existing behavior", "author": "jmthibault79", "createdAt": "2020-07-13T19:30:09Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -961,54 +961,40 @@ public DbUser getByUsernameOrThrow(String username) {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    final DbUser user =\n-        getByDatabaseId(userDatabaseId)\n-            .orElseThrow(\n-                () ->\n-                    new NotFoundException(\n-                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    getByDatabaseId(userDatabaseId)", "originalCommit": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwMTg2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453901865", "bodyText": "Yeah, if this user isn't found, we'll probably get an NPE (or worse) in setBypassTimeWithRetries. That would be good to verify in the debugger.", "author": "jaycarlton", "createdAt": "2020-07-13T20:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\nindex 33e575a79..5d451a0bc 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n\n@@ -961,13 +976,15 @@ public class UserServiceImpl implements UserService, GaugeDataCollector {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    getByDatabaseId(userDatabaseId)\n-        .orElseThrow(\n-            () ->\n-                new NotFoundException(\n-                    String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    final DbUser user =\n+        getByDatabaseId(userDatabaseId)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n \n     final Timestamp newBypassTime;\n+    final Timestamp previousBypassTime;\n \n     final Boolean isBypassed = accessBypassRequest.getIsBypassed();\n     if (isBypassed) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwMzY0NA==", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453903644", "bodyText": "I missed the previous value in my original implementation. Let's keep these and one of us can pass the previous time as an additional Optional arg to fireAdministrativeBypassTime(). You can just do a TODO or go ahead and pipe that in if you don't mind.", "author": "jaycarlton", "createdAt": "2020-07-13T20:11:55Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -961,54 +961,40 @@ public DbUser getByUsernameOrThrow(String username) {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    final DbUser user =\n-        getByDatabaseId(userDatabaseId)\n-            .orElseThrow(\n-                () ->\n-                    new NotFoundException(\n-                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    getByDatabaseId(userDatabaseId)\n+        .orElseThrow(\n+            () ->\n+                new NotFoundException(\n+                    String.format(\"User with database ID %d not found\", userDatabaseId)));\n \n     final Timestamp newBypassTime;\n-    final Timestamp previousBypassTime;\n \n     final Boolean isBypassed = accessBypassRequest.getIsBypassed();\n     if (isBypassed) {\n       newBypassTime = new Timestamp(clock.instant().toEpochMilli());\n     } else {\n       newBypassTime = null;\n     }\n+\n     switch (accessBypassRequest.getModuleName()) {\n       case DATA_USE_AGREEMENT:", "originalCommit": "9dc317edb31c0cc427e2677d93a181c5fb279897", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk3NzU1OQ==", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453977559", "bodyText": "OK, added it", "author": "jmthibault79", "createdAt": "2020-07-13T22:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwMzY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\nindex 33e575a79..5d451a0bc 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n\n@@ -961,13 +976,15 @@ public class UserServiceImpl implements UserService, GaugeDataCollector {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    getByDatabaseId(userDatabaseId)\n-        .orElseThrow(\n-            () ->\n-                new NotFoundException(\n-                    String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    final DbUser user =\n+        getByDatabaseId(userDatabaseId)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n \n     final Timestamp newBypassTime;\n+    final Timestamp previousBypassTime;\n \n     final Boolean isBypassed = accessBypassRequest.getIsBypassed();\n     if (isBypassed) {\n"}}, {"oid": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "url": "https://github.com/all-of-us/workbench/commit/1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "message": "Add previousBypassTime to set bypass calls", "committedDate": "2020-07-13T21:34:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDM2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r454340369", "bodyText": "Can you please make sure the order matches other auditor functions? I believe it's usually previous then new. IJ has a Change Signature refactoring for that. Also please rename bypassTime to newBypassTime to make it foolproof.", "author": "jaycarlton", "createdAt": "2020-07-14T13:04:40Z", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditor.java", "diffHunk": "@@ -15,7 +15,10 @@ void fireUpdateDataAccessAction(\n       Agent agent);\n \n   void fireAdministrativeBypassTime(\n-      long userId, BypassTimeTargetProperty bypassTimeTargetProperty, Optional<Instant> bypassTime);\n+      long userId,\n+      BypassTimeTargetProperty bypassTimeTargetProperty,\n+      Optional<Instant> bypassTime,", "originalCommit": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1MjAxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r454352015", "bodyText": "ok", "author": "jmthibault79", "createdAt": "2020-07-14T13:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "54be91d5c59165ed5fd4ca27c873863b03caa8a0", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditor.java b/api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditor.java\nindex 35fc4ab1a..00e598a8e 100644\n--- a/api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditor.java\n+++ b/api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditor.java\n\n@@ -15,10 +15,7 @@ public interface UserServiceAuditor {\n       Agent agent);\n \n   void fireAdministrativeBypassTime(\n-      long userId,\n-      BypassTimeTargetProperty bypassTimeTargetProperty,\n-      Optional<Instant> bypassTime,\n-      Optional<Instant> previousBypassTime);\n+      long userId, BypassTimeTargetProperty bypassTimeTargetProperty, Optional<Instant> bypassTime);\n \n   void fireAcknowledgeTermsOfService(DbUser targetUser, Integer termsOfServiceVersion);\n }\n"}}, {"oid": "54be91d5c59165ed5fd4ca27c873863b03caa8a0", "url": "https://github.com/all-of-us/workbench/commit/54be91d5c59165ed5fd4ca27c873863b03caa8a0", "message": "Deprecate userService.logAdminUserAction/logAdminWorkspaceAction\n- remove two calls where they have replacements\n\nDeprecate DB and DAO themselves", "committedDate": "2020-07-14T13:47:14Z", "type": "commit"}, {"oid": "001dd8b67bd960ef1bc0d8fe2cb5681ae04430ed", "url": "https://github.com/all-of-us/workbench/commit/001dd8b67bd960ef1bc0d8fe2cb5681ae04430ed", "message": "Add previousBypassTime to set bypass calls", "committedDate": "2020-07-14T13:47:14Z", "type": "commit"}, {"oid": "19037f012bd4f8b3723b52b1bf814823b0bb4578", "url": "https://github.com/all-of-us/workbench/commit/19037f012bd4f8b3723b52b1bf814823b0bb4578", "message": "rearrange: previous value first", "committedDate": "2020-07-14T13:47:15Z", "type": "commit"}, {"oid": "242b235b9aeafbe61b7d717b90e461caada4456a", "url": "https://github.com/all-of-us/workbench/commit/242b235b9aeafbe61b7d717b90e461caada4456a", "message": "lint", "committedDate": "2020-07-14T13:47:15Z", "type": "commit"}, {"oid": "242b235b9aeafbe61b7d717b90e461caada4456a", "url": "https://github.com/all-of-us/workbench/commit/242b235b9aeafbe61b7d717b90e461caada4456a", "message": "lint", "committedDate": "2020-07-14T13:47:15Z", "type": "forcePushed"}]}