{"pr_number": 4176, "pr_title": "[noTicket][risk=low] Task to delete workspace from Rdr export", "pr_createdAt": "2020-10-16T01:35:18Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4176", "timeline": [{"oid": "0d752828d4197e482a77bb1e3bf321874b880d76", "url": "https://github.com/all-of-us/workbench/commit/0d752828d4197e482a77bb1e3bf321874b880d76", "message": "Task to delete workspace fromrdr export", "committedDate": "2020-10-16T01:30:21Z", "type": "commit"}, {"oid": "d7961c96edc7dc4e6041124e70d49b0f18c1ed36", "url": "https://github.com/all-of-us/workbench/commit/d7961c96edc7dc4e6041124e70d49b0f18c1ed36", "message": "Spotless", "committedDate": "2020-10-16T01:36:19Z", "type": "commit"}, {"oid": "798bfe3d28d9c6d12593af6542cf2258f2abf801", "url": "https://github.com/all-of-us/workbench/commit/798bfe3d28d9c6d12593af6542cf2258f2abf801", "message": "Use Test env if not specified", "committedDate": "2020-10-16T01:42:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNzk1NQ==", "url": "https://github.com/all-of-us/workbench/pull/4176#discussion_r506537955", "bodyText": "Could you add \"entry\" here?  I suspect that some day in the future the words \"deleting workspace X\" may be scary.", "author": "jmthibault79", "createdAt": "2020-10-16T15:20:39Z", "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -341,6 +341,25 @@ public void updateDbRdrExport(RdrEntity entity, List<Long> idList) {\n     rdrExportDao.save(exportList);\n   }\n \n+  /**\n+   * Delete the workspace entries from rdr_export Table to make them eligible for next export cron\n+   * job\n+   *\n+   * @param workspaceIds\n+   */\n+  @Override\n+  public void deleteWorkspaceExportEntries(List<Long> workspaceIds) {\n+    workspaceIds.forEach(\n+        workspaceId -> {\n+          try {\n+            rdrExportDao.deleteDbRdrExportsByEntityTypeAndEntityId(\n+                RdrEntityEnums.entityToStorage(RdrEntity.WORKSPACE), workspaceId);\n+          } catch (Exception ex) {\n+            log.severe(String.format(\"Error while trying to delete workspace %s\", workspaceId));", "originalCommit": "798bfe3d28d9c6d12593af6542cf2258f2abf801", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bbf6ba8833d73e9a1bacee1569fc40769befb51", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java b/api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java\nindex 2d24aece3..46c581f25 100644\n--- a/api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java\n\n@@ -355,7 +355,10 @@ public class RdrExportServiceImpl implements RdrExportService {\n             rdrExportDao.deleteDbRdrExportsByEntityTypeAndEntityId(\n                 RdrEntityEnums.entityToStorage(RdrEntity.WORKSPACE), workspaceId);\n           } catch (Exception ex) {\n-            log.severe(String.format(\"Error while trying to delete workspace %s\", workspaceId));\n+            log.severe(\n+                String.format(\n+                    \"Error while trying to delete workspace entry from rdr_export %s\",\n+                    workspaceId));\n           }\n         });\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MTMzNw==", "url": "https://github.com/all-of-us/workbench/pull/4176#discussion_r506541337", "bodyText": "If you have a file like\nid1\nid2\nid3\nid4\n\nThis will delete each workspace entry individually.  Is that desirable?  We may want to collect all the workspace IDs in the file first.", "author": "jmthibault79", "createdAt": "2020-10-16T15:24:06Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.time.Clock;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.RdrExportDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.rdr.RdrExportService;\n+import org.pmiops.workbench.rdr.RdrExportServiceImpl;\n+import org.pmiops.workbench.rdr.api.RdrApi;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+public class DeleteFromRdrExport {\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option workspaceListFilename =\n+      Option.builder()\n+          .longOpt(\"workspace-list-filename\")\n+          .desc(\"File containing list of workspaces Ids\")\n+          .required()\n+          .hasArg()\n+          .build();\n+  private static Option dryRunOpt =\n+      Option.builder()\n+          .longOpt(\"dry-run\")\n+          .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+          .build();\n+\n+  private static Options options =\n+      new Options().addOption(workspaceListFilename).addOption(dryRunOpt);\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(DeleteFromRdrExport.class, args);\n+  }\n+\n+  @Bean\n+  public RdrExportService rdrExportService(\n+      Clock clock,\n+      Provider<RdrApi> rdrApiProvider,\n+      RdrExportDao rdrExportDao,\n+      WorkspaceDao workspaceDao,\n+      UserDao userDao,\n+      VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao) {\n+    return new RdrExportServiceImpl(\n+        clock,\n+        rdrApiProvider,\n+        rdrExportDao,\n+        null,\n+        workspaceDao,\n+        null,\n+        null,\n+        userDao,\n+        verifiedInstitutionalAffiliationDao);\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(RdrExportService rdrExportService) {\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+      try (BufferedReader reader =\n+          new BufferedReader(\n+              new FileReader(opts.getOptionValue(workspaceListFilename.getLongOpt())))) {\n+        reader\n+            .lines()\n+            .forEach(\n+                line -> {\n+                  List<Long> workspaceIds =", "originalCommit": "798bfe3d28d9c6d12593af6542cf2258f2abf801", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMjAyMg==", "url": "https://github.com/all-of-us/workbench/pull/4176#discussion_r507812022", "bodyText": "Good point, I think it will be better to collect it and then call delete function with group of 20 ids each. Rather than sending all together as the numbers could be high (In my case its about 500)", "author": "NehaBroad", "createdAt": "2020-10-19T14:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MTMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "0bbf6ba8833d73e9a1bacee1569fc40769befb51", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java\nindex 89af4e57a..1e9637b9d 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java\n\n@@ -3,7 +3,10 @@ package org.pmiops.workbench.tools;\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.logging.Logger;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU5MjE4OQ==", "url": "https://github.com/all-of-us/workbench/pull/4176#discussion_r506592189", "bodyText": "Please add a log line after this one similar to the dry run", "author": "jmthibault79", "createdAt": "2020-10-16T16:37:01Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.time.Clock;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.RdrExportDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.rdr.RdrExportService;\n+import org.pmiops.workbench.rdr.RdrExportServiceImpl;\n+import org.pmiops.workbench.rdr.api.RdrApi;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+public class DeleteFromRdrExport {\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option workspaceListFilename =\n+      Option.builder()\n+          .longOpt(\"workspace-list-filename\")\n+          .desc(\"File containing list of workspaces Ids\")\n+          .required()\n+          .hasArg()\n+          .build();\n+  private static Option dryRunOpt =\n+      Option.builder()\n+          .longOpt(\"dry-run\")\n+          .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+          .build();\n+\n+  private static Options options =\n+      new Options().addOption(workspaceListFilename).addOption(dryRunOpt);\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(DeleteFromRdrExport.class, args);\n+  }\n+\n+  @Bean\n+  public RdrExportService rdrExportService(\n+      Clock clock,\n+      Provider<RdrApi> rdrApiProvider,\n+      RdrExportDao rdrExportDao,\n+      WorkspaceDao workspaceDao,\n+      UserDao userDao,\n+      VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao) {\n+    return new RdrExportServiceImpl(\n+        clock,\n+        rdrApiProvider,\n+        rdrExportDao,\n+        null,\n+        workspaceDao,\n+        null,\n+        null,\n+        userDao,\n+        verifiedInstitutionalAffiliationDao);\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(RdrExportService rdrExportService) {\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+      try (BufferedReader reader =\n+          new BufferedReader(\n+              new FileReader(opts.getOptionValue(workspaceListFilename.getLongOpt())))) {\n+        reader\n+            .lines()\n+            .forEach(\n+                line -> {\n+                  List<Long> workspaceIds =\n+                      Stream.of(line.split(\",\")).map(Long::parseLong).collect(Collectors.toList());\n+                  if (!dryRun) {\n+                    rdrExportService.deleteWorkspaceExportEntries(workspaceIds);", "originalCommit": "798bfe3d28d9c6d12593af6542cf2258f2abf801", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bbf6ba8833d73e9a1bacee1569fc40769befb51", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java\nindex 89af4e57a..1e9637b9d 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/DeleteFromRdrExport.java\n\n@@ -3,7 +3,10 @@ package org.pmiops.workbench.tools;\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.logging.Logger;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n"}}, {"oid": "0bbf6ba8833d73e9a1bacee1569fc40769befb51", "url": "https://github.com/all-of-us/workbench/commit/0bbf6ba8833d73e9a1bacee1569fc40769befb51", "message": "PR Comments", "committedDate": "2020-10-19T15:19:58Z", "type": "commit"}, {"oid": "390e08622d5b3046eef8e3ce942f81e8ff853590", "url": "https://github.com/all-of-us/workbench/commit/390e08622d5b3046eef8e3ce942f81e8ff853590", "message": "Add comment DeleteFromRdrExport class", "committedDate": "2020-10-19T15:58:22Z", "type": "commit"}]}