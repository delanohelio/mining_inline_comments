{"pr_number": 3607, "pr_title": "[risk=no][RW-4911] PopulateUserAffiliation tool", "pr_createdAt": "2020-05-20T15:45:47Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3607", "timeline": [{"oid": "435c98c214b2edbfb1e28c290793da08fc39f76d", "url": "https://github.com/all-of-us/workbench/commit/435c98c214b2edbfb1e28c290793da08fc39f76d", "message": "Add new institutions package under tools\n- move OpsUser into its own file", "committedDate": "2020-05-20T15:08:56Z", "type": "commit"}, {"oid": "a24790779b0c8b419c617e4a40217ab0b8da9def", "url": "https://github.com/all-of-us/workbench/commit/a24790779b0c8b419c617e4a40217ab0b8da9def", "message": "generify PopulateOpsUserAffiliations and OpsUser", "committedDate": "2020-05-20T15:08:56Z", "type": "commit"}, {"oid": "1cd79924ebc16b5572ce9cfa0755ad514aeb1cc1", "url": "https://github.com/all-of-us/workbench/commit/1cd79924ebc16b5572ce9cfa0755ad514aeb1cc1", "message": "add REDCap Complete column for Researcher", "committedDate": "2020-05-20T15:08:57Z", "type": "commit"}, {"oid": "102e280e6dab2ddf5a662e94569c4804ce7df67d", "url": "https://github.com/all-of-us/workbench/commit/102e280e6dab2ddf5a662e94569c4804ce7df67d", "message": "PopulateUserAffiliations: don't error if affiliation exists and is equal", "committedDate": "2020-05-20T15:08:58Z", "type": "commit"}, {"oid": "0d21b7d338c63b4fd36f8a2e428342217f1a08a8", "url": "https://github.com/all-of-us/workbench/commit/0d21b7d338c63b4fd36f8a2e428342217f1a08a8", "message": "Be more lenient with Researcher parsing", "committedDate": "2020-05-20T15:08:58Z", "type": "commit"}, {"oid": "51cd4c372de38685c14f570620fa0b0b5e42c0b1", "url": "https://github.com/all-of-us/workbench/commit/51cd4c372de38685c14f570620fa0b0b5e42c0b1", "message": "Add a toString for DbVerifiedInstitutionalAffiliation", "committedDate": "2020-05-20T15:08:59Z", "type": "commit"}, {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7", "url": "https://github.com/all-of-us/workbench/commit/dbd4c1981da8b8786114543280410d0d559a31c7", "message": "Don't use DbVerifiedInstitutionalAffiliation.equals()", "committedDate": "2020-05-20T15:35:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTg4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428121882", "bodyText": "Split the existing OpsUser into this and User", "author": "jmthibault79", "createdAt": "2020-05-20T15:51:36Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/OpsUser.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser extends User {", "originalCommit": "dbd4c1981da8b8786114543280410d0d559a31c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a560911b33bdc08848d9e1361984609d261790", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/OpsUser.java b/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/OpsUser.java\nindex b127edeac..16988f650 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/OpsUser.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/OpsUser.java\n\n@@ -16,6 +16,7 @@ import org.pmiops.workbench.model.InstitutionalRole;\n  * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n  */\n class OpsUser extends User {\n+  // common fields from User: firstName, lastName, contactEmail, userName\n   final String operationalRole;\n   final String action;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMzUzNw==", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428123537", "bodyText": "Originally PopulateOpsUserAffiliations - moved, renamed, and refactored", "author": "jmthibault79", "createdAt": "2020-05-20T15:53:57Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/PopulateUserAffiliations.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.tools.CommandLineToolConfig;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for users listed in a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --user-type OPS \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateUserAffiliations {", "originalCommit": "dbd4c1981da8b8786114543280410d0d559a31c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "260efd8a9c4137718bb4aad9d9e38c95f21b1331", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/PopulateUserAffiliations.java b/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/PopulateUserAffiliations.java\nindex cf3e6d023..eb686cce8 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/PopulateUserAffiliations.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/PopulateUserAffiliations.java\n\n@@ -32,6 +32,17 @@ import org.springframework.context.annotation.Bean;\n public class PopulateUserAffiliations {\n \n   private static final Logger log = Logger.getLogger(PopulateUserAffiliations.class.getName());\n+  \n+  private List<User> parseUsers(final String filename, final String userTypes) throws IOException {\n+    if (userTypes.equals(\"OPS\")) {\n+      return OpsUser.parseInput(filename);\n+    } else if (userTypes.equals(\"RESEARCHERS\")) {\n+      return Researcher.parseInput(filename);\n+    } else {\n+      throw new RuntimeException(\n+              \"Cannot populate affiliations: only valid user types are 'OPS' and 'RESEARCHERS'\");\n+    }\n+  }\n \n   @Bean\n   public CommandLineRunner run(\n"}}, {"oid": "260efd8a9c4137718bb4aad9d9e38c95f21b1331", "url": "https://github.com/all-of-us/workbench/commit/260efd8a9c4137718bb4aad9d9e38c95f21b1331", "message": "mv parseUsers up", "committedDate": "2020-05-20T15:56:13Z", "type": "commit"}, {"oid": "c5a560911b33bdc08848d9e1361984609d261790", "url": "https://github.com/all-of-us/workbench/commit/c5a560911b33bdc08848d9e1361984609d261790", "message": "comments", "committedDate": "2020-05-20T15:58:23Z", "type": "commit"}, {"oid": "0ba823d58ee1fd6bf8a3091f383bb67c416d010f", "url": "https://github.com/all-of-us/workbench/commit/0ba823d58ee1fd6bf8a3091f383bb67c416d010f", "message": "txt", "committedDate": "2020-05-20T15:59:59Z", "type": "commit"}, {"oid": "8187d49ed75854bf218816f6ac8898a46e6349d7", "url": "https://github.com/all-of-us/workbench/commit/8187d49ed75854bf218816f6ac8898a46e6349d7", "message": "comments and formatting", "committedDate": "2020-05-20T16:07:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNTcyNg==", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428135726", "bodyText": "Tearing my hair out over this one.  If I return to this, it will be here: #3601", "author": "jmthibault79", "createdAt": "2020-05-20T16:11:34Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/User.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+\n+public abstract class User {\n+  private static final Logger log = Logger.getLogger(User.class.getName());\n+\n+  String firstName;\n+  String lastName;\n+  String contactEmail;\n+  String userName;\n+\n+  // check data prerequisites which don't involve DB comparisons\n+  abstract void preCheck();\n+\n+  abstract DbVerifiedInstitutionalAffiliation toAffiliation(\n+      final DbUser dbUser, final InstitutionDao institutionDao);\n+\n+  static List<String[]> readFile(final String filename, final int columnLength) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != columnLength) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", columnLength, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false).collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(\n+          String.format(\n+              \"CSV and DB values do not match for user '%s', field '%s'. CSV = %s, DB = %s\",\n+              userName, fieldName, csvValue, dbValue));\n+    }\n+  }\n+\n+  private DbUser dbCheck(final UserDao userDao) {\n+    final DbUser dbUser = userDao.findUserByUsername(userName);\n+\n+    // fatal errors: something is quite wrong and we need to recheck our assumptions!\n+\n+    if (dbUser == null) {\n+      throw new RuntimeException(String.format(\"User %s was not found in the DB\", userName));\n+    }\n+\n+    // many near-matches in the imput exist: warn only, don't stop\n+    // example: \"Dan\" instead of \"Daniel\"\n+    // example: \"\"Beth,\"\" instead of \"Beth\"\n+\n+    checkField(dbUser.getGivenName(), firstName, \"First Name\");\n+    checkField(dbUser.getFamilyName(), lastName, \"Last Name\");\n+    checkField(dbUser.getContactEmail(), contactEmail, \"Contact Email\");\n+\n+    return dbUser;\n+  }\n+\n+  void populateAffiliation(\n+      final boolean dryRun,\n+      final UserDao userDao,\n+      final InstitutionDao institutionDao,\n+      final VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    preCheck();\n+\n+    final DbUser dbUser = dbCheck(userDao);\n+    final DbVerifiedInstitutionalAffiliation newAffiliation = toAffiliation(dbUser, institutionDao);\n+    final Optional<DbVerifiedInstitutionalAffiliation> existingAffil =\n+        affiliationDao.findFirstByUser(dbUser);\n+\n+    if (!existingAffil.isPresent()) {\n+      if (!dryRun) {\n+        affiliationDao.save(newAffiliation);\n+      }\n+\n+      dryLog(\n+          dryRun,\n+          String.format(\n+              \"Saved Affiliation for '%s' with Institution '%s'\",\n+              newAffiliation.getUser().getUsername(),\n+              newAffiliation.getInstitution().getDisplayName()));\n+    } else {\n+      // will always execute since we checked it above\n+      existingAffil.ifPresent(\n+          existingAffiliation -> {\n+            if (equivalent(existingAffiliation, newAffiliation)) {\n+              log.info(\"No action taken.  Affiliation exists: \" + existingAffiliation);\n+            } else {\n+              throw new RuntimeException(\n+                  String.format(\n+                      \"New affiliation differs from affiliation in DB for user '%s':\\n\"\n+                          + \"New affiliation = %s\\nDB affiliation= %s\",\n+                      userName, newAffiliation, existingAffiliation));\n+            }\n+          });\n+    }\n+  }\n+\n+  // Are these two DbVerifiedInstitutionalAffiliation objects equivalent?\n+  // TODO: investigate why we can't use DbVerifiedInstitutionalAffiliation.equals() here.", "originalCommit": "8187d49ed75854bf218816f6ac8898a46e6349d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fc3d8d057ced865ef0c3f3893ae2b525ab8be82", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/User.java b/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/User.java\nindex 7087507a5..34167d557 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/User.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/User.java\n\n@@ -16,7 +16,7 @@ import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n \n public abstract class User {\n-  private static final Logger log = Logger.getLogger(User.class.getName());\n+  private static final Logger LOGGER = Logger.getLogger(User.class.getName());\n \n   String firstName;\n   String lastName;\n"}}, {"oid": "64b617f72ac740f45ff6e2e3c664a9923eadd930", "url": "https://github.com/all-of-us/workbench/commit/64b617f72ac740f45ff6e2e3c664a9923eadd930", "message": "lint", "committedDate": "2020-05-20T17:26:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNjU3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428406575", "bodyText": "Super nitpick, but maybe these final static constants should be uppercased? I'm not sure if we have a clear style rule around this \u2013\u00a0Google's Java style says constants should be uppercase, and I do like the clarity that provides.", "author": "gjuggler", "createdAt": "2020-05-21T02:09:46Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/Researcher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+\n+/**\n+ * Structure researcher user data according to the format of the source CSV:\n+ *\n+ * <p>First Name, Last Name, Institutional Email, WB User Name, Role, Institution, \"Institutional\n+ * DUA Signed?\", \"REDCap Complete?\"\n+ */\n+class Researcher extends User {\n+  // common fields from User: firstName, lastName, contactEmail, userName\n+  final InstitutionalRole institutionalRole;\n+  final String institutionDisplayName;\n+  final String duaSigned;\n+  final String redCapComplete;\n+\n+  private static final int columnLength = 8;", "originalCommit": "8187d49ed75854bf218816f6ac8898a46e6349d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fc3d8d057ced865ef0c3f3893ae2b525ab8be82", "chunk": "diff --git a/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/Researcher.java b/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/Researcher.java\nindex 646f1bc71..ca8bc21e6 100644\n--- a/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/Researcher.java\n+++ b/api/tools/src/main/java/org/pmiops/workbench/tools/institutions/Researcher.java\n\n@@ -24,8 +24,8 @@ class Researcher extends User {\n   final String duaSigned;\n   final String redCapComplete;\n \n-  private static final int columnLength = 8;\n-  private static final String affirmative = \"Yes\";\n+  private static final int COLUMN_LENGTH = 8;\n+  private static final String AFFIRMATIVE = \"Yes\";\n \n   // this mapping is only stored in the UI so we copy it here\n   // (see institutionalRoleOptions in account-creation-options.tsx)\n"}}, {"oid": "0fc3d8d057ced865ef0c3f3893ae2b525ab8be82", "url": "https://github.com/all-of-us/workbench/commit/0fc3d8d057ced865ef0c3f3893ae2b525ab8be82", "message": "ALL_CAPS the private static finals", "committedDate": "2020-05-21T12:58:59Z", "type": "commit"}, {"oid": "709f8284a5e791496ed65dc8aab71fd35cbbf788", "url": "https://github.com/all-of-us/workbench/commit/709f8284a5e791496ed65dc8aab71fd35cbbf788", "message": "better gradle arg parsing", "committedDate": "2020-05-21T13:00:55Z", "type": "commit"}]}