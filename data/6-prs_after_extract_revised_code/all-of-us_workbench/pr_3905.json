{"pr_number": 3905, "pr_title": "[risk=no][RW-5437] Allow reporting null values", "pr_createdAt": "2020-08-21T19:55:57Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3905", "timeline": [{"oid": "7350fe9b14b32d86bd70d91d61e4b0c24b8a0382", "url": "https://github.com/all-of-us/workbench/commit/7350fe9b14b32d86bd70d91d61e4b0c24b8a0382", "message": "be the null-toleration you want to see in the world", "committedDate": "2020-08-21T19:49:29Z", "type": "commit"}, {"oid": "5d0e6b0c4cf12c172a1af58e2e12ea65870bf88b", "url": "https://github.com/all-of-us/workbench/commit/5d0e6b0c4cf12c172a1af58e2e12ea65870bf88b", "message": "fixes", "committedDate": "2020-08-21T19:53:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxNTM0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474915345", "bodyText": "stream/foreach also works fine, if you prefer", "author": "jmthibault79", "createdAt": "2020-08-21T19:56:46Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilder.java", "diffHunk": "@@ -28,15 +27,16 @@ default InsertAllRequest build(TableId tableId, List<T> models, Map<String, Obje\n   }\n \n   default RowToInsert modelToRow(T model, Map<String, Object> fixedValues) {\n-    final ImmutableMap.Builder<String, Object> builder = new ImmutableMap.Builder<>();\n     // First N columns are same for all rows (e.g. a partition key column)\n-    builder.putAll(fixedValues);\n-    builder.putAll(\n-        Arrays.stream(getQueryParameterColumns())\n-            .collect(\n-                ImmutableMap.toImmutableMap(\n-                    QueryParameterColumn::getParameterName, c -> c.getRowToInsertValue(model))));\n-    return RowToInsert.of(generateInsertId(), builder.build());\n+    final Map<String, Object> rowMap = Maps.newHashMap(fixedValues);\n+\n+    // can't stream/collect here because that uses HashMap.merge() which surprisingly does not\n+    // allow null values although they are valid for HashMap.  We do use null values.\n+    for (QueryParameterColumn<T> qpc : getQueryParameterColumns()) {", "originalCommit": "5d0e6b0c4cf12c172a1af58e2e12ea65870bf88b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0NzkzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r475847939", "bodyText": "FWIW It occurred to me over the weekend that maybe we could have just left the null values out of the row maps and kept the old structure. Just .filter(Objects::nonNull). No need to change it now.", "author": "jaycarlton", "createdAt": "2020-08-24T19:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxNTM0NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7509ff65d6e06d878b50e5e80d47355b75e12a70", "url": "https://github.com/all-of-us/workbench/commit/7509ff65d6e06d878b50e5e80d47355b75e12a70", "message": "add comment", "committedDate": "2020-08-21T19:57:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxODk5OA==", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474918998", "bodyText": "Please use a fixed instant (e.g. with Instant.parse(\"\")) so we don't have changing behavior between runs.", "author": "jaycarlton", "createdAt": "2020-08-21T20:01:11Z", "path": "api/src/test/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilderTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.pmiops.workbench.reporting.insertion;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.bigquery.InsertAllRequest;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.ReportingResearcher;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class InsertAllRequestBuilderTest {\n+  final InsertAllRequestBuilder<ReportingResearcher> researcherRequestBuilder =\n+      ResearcherParameter::values;\n+\n+  final Map<String, Object> fixedValues =\n+      ImmutableMap.of(\"snapshot_timestamp\", Instant.now().toEpochMilli());", "originalCommit": "7509ff65d6e06d878b50e5e80d47355b75e12a70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc444d9cdb57f64a6ebb6023bf0f3160adff8ae1", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilderTest.java b/api/src/test/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilderTest.java\nindex 464ae79ff..1720edba4 100644\n--- a/api/src/test/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilderTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilderTest.java\n\n@@ -23,8 +23,9 @@ public class InsertAllRequestBuilderTest {\n   final InsertAllRequestBuilder<ReportingResearcher> researcherRequestBuilder =\n       ResearcherParameter::values;\n \n+  final Instant princePartyTime = Instant.parse(\"1999-12-31T23:59:59.99Z\");\n   final Map<String, Object> fixedValues =\n-      ImmutableMap.of(\"snapshot_timestamp\", Instant.now().toEpochMilli());\n+      ImmutableMap.of(\"snapshot_timestamp\", princePartyTime.toEpochMilli());\n \n   final List<ReportingResearcher> researchers =\n       ImmutableList.of(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxOTkzNg==", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474919936", "bodyText": "FWIW I will probably eventually make the snapshot timestamp and individual wannabe PK columns required in BQ, but this is fine for now.", "author": "jaycarlton", "createdAt": "2020-08-21T20:02:24Z", "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -142,6 +143,47 @@ public void setup() {\n                         .fakeSize(4444L)\n                         .creatorId(202L)));\n \n+    snapshotWithNulls =\n+        new ReportingSnapshot()\n+            .captureTimestamp(NOW.toEpochMilli())\n+            .researchers(\n+                ImmutableList.of(\n+                    new ReportingResearcher()\n+                        .username(null)\n+                        .firstName(\"Nullson\")\n+                        .isDisabled(false)\n+                        .researcherId(101L),\n+                    new ReportingResearcher()\n+                        .username(\"america@usa.gov\")\n+                        .firstName(null)\n+                        .isDisabled(false)\n+                        .researcherId(202L),\n+                    new ReportingResearcher()\n+                        .username(null)\n+                        .firstName(null)\n+                        .isDisabled(true)\n+                        .researcherId(303L)))\n+            .workspaces(\n+                ImmutableList.of(\n+                    new ReportingWorkspace()\n+                        .workspaceId(201L)", "originalCommit": "7509ff65d6e06d878b50e5e80d47355b75e12a70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc444d9cdb57f64a6ebb6023bf0f3160adff8ae1", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java b/api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java\nindex 6cd6ec4e5..3cec62e63 100644\n--- a/api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java\n\n@@ -184,6 +186,12 @@ public class ReportingUploadServiceTest {\n                         .fakeSize(4444L)\n                         .creatorId(202L)));\n \n+    emptySnapshot =\n+        new ReportingSnapshot()\n+            .captureTimestamp(NOW.toEpochMilli())\n+            .researchers(Collections.emptyList())\n+            .workspaces(Collections.emptyList());\n+\n     final TableResult mockTableResult = mock(TableResult.class);\n     doReturn(99L).when(mockTableResult).getTotalRows();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyMTIwMQ==", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474921201", "bodyText": "slightly out of scope, but it would be good to test both upload methods with a completely empty snapshot or snapshot with one table empty. We can either throw an IllegalArgumentException or treat it as valid (e.g. for brand-new environments).", "author": "jaycarlton", "createdAt": "2020-08-21T20:03:57Z", "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -224,14 +275,22 @@ public void testUploadSnapshot_dmlBatchInserts() {\n \n   @Test\n   public void testUploadSnapshot_streaming() {\n+    testUploadSnapshot_streaming(reportingSnapshot);\n+  }\n+\n+  @Test\n+  public void testUploadSnapshot_streaming_with_nulls() {\n+    testUploadSnapshot_streaming(snapshotWithNulls);\n+  }\n+", "originalCommit": "7509ff65d6e06d878b50e5e80d47355b75e12a70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk2Njk3OA==", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474966978", "bodyText": "added empty tests", "author": "jmthibault79", "createdAt": "2020-08-21T20:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyMTIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc444d9cdb57f64a6ebb6023bf0f3160adff8ae1", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java b/api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java\nindex 6cd6ec4e5..3cec62e63 100644\n--- a/api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java\n\n@@ -283,6 +297,12 @@ public class ReportingUploadServiceTest {\n     testUploadSnapshot_streaming(snapshotWithNulls);\n   }\n \n+  @Test\n+  public void testUploadSnapshot_streaming_empty() {\n+    reportingUploadServiceStreamingImpl.uploadSnapshot(emptySnapshot);\n+    verify(mockBigQueryService, never()).insertAll(any());\n+  }\n+\n   private void testUploadSnapshot_streaming(ReportingSnapshot snapshot) {\n     final InsertAllResponse mockInsertAllResponse = mock(InsertAllResponse.class);\n     doReturn(Collections.emptyMap()).when(mockInsertAllResponse).getInsertErrors();\n"}}, {"oid": "dc444d9cdb57f64a6ebb6023bf0f3160adff8ae1", "url": "https://github.com/all-of-us/workbench/commit/dc444d9cdb57f64a6ebb6023bf0f3160adff8ae1", "message": "fixed snapshot time and empty snapshot tests", "committedDate": "2020-08-21T20:57:42Z", "type": "commit"}]}