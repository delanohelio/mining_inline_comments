{"pr_number": 4106, "pr_title": "[RW-3389] [RW-4125] [risk=no] Speed up user admin table load time & refresh the UI", "pr_createdAt": "2020-10-02T12:50:18Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4106", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxOTEzNw==", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r498819137", "bodyText": "I tend to prefer method  references  where possible, i.e. profileMapper::adminViewToModel. additionally,  you can  declare List<AdminTableUser> adminViewsToModels(Collection<DbUser> dbUsers); in the mapper and use that. The code isn't as pretty, but it uses a pre-allocated list for the result.", "author": "jaycarlton", "createdAt": "2020-10-02T13:25:08Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -459,51 +455,9 @@ public void validateNewProfile(Profile profile) throws BadRequestException {\n     validateProfileForCorrectness(dummyProfile, profile);\n   }\n \n-  // Get all the profiles. Best we can do without surgery on the entity classes is to do one query\n-  // per table and join them in code.\n-  public List<Profile> listAllProfiles() {\n-    final Set<DbUser> usersHeavy = userService.findAllUsersWithAuthoritiesAndPageVisits();\n-    final Map<Long, VerifiedInstitutionalAffiliation> userIdToAffiliationModel =\n-        StreamSupport.stream(verifiedInstitutionalAffiliationDao.findAll().spliterator(), false)\n-            .collect(\n-                ImmutableMap.toImmutableMap(\n-                    (DbVerifiedInstitutionalAffiliation a) -> a.getUser().getUserId(),\n-                    verifiedInstitutionalAffiliationMapper::dbToModel));\n-\n-    // A user may have signed the TOS many times. Pick only the latest.\n-    final Multimap<Long, DbUserTermsOfService> userIdToTosRecords =\n-        Multimaps.index(userTermsOfServiceDao.findAll(), DbUserTermsOfService::getUserId);\n-\n-    final Map<Long, DbUserTermsOfService> userIdToMostRecentTos =\n-        userIdToTosRecords.asMap().entrySet().stream()\n-            .collect(\n-                ImmutableMap.toImmutableMap(\n-                    Entry::getKey,\n-                    e ->\n-                        e.getValue().stream()\n-                            .max(Comparator.comparing(DbUserTermsOfService::getAgreementTime))\n-                            .orElse(\n-                                null))); // not reachable since  Multimaps.index() will always give\n-    // a non-empty value set\n-\n-    // The cached free tier usage aka total cost for each user, by ID\n-    final Map<Long, Double> userIdToFreeTierUsage = freeTierBillingService.getUserIdToTotalCost();\n-\n-    final Map<Long, Double> userIdToQuota =\n-        usersHeavy.stream()\n-            .collect(\n-                ImmutableMap.toImmutableMap(\n-                    DbUser::getUserId, freeTierBillingService::getUserFreeTierDollarLimit));\n-\n-    return usersHeavy.stream()\n-        .map(\n-            dbUser ->\n-                profileMapper.toModel(\n-                    dbUser,\n-                    userIdToAffiliationModel.get(dbUser.getUserId()),\n-                    userIdToMostRecentTos.get(dbUser.getUserId()),\n-                    userIdToFreeTierUsage.get(dbUser.getUserId()),\n-                    userIdToQuota.get(dbUser.getUserId())))\n+  public List<AdminTableUser> listAllProfiles() {\n+    return userDao.getAdminTableUsers().stream()\n+        .map(dbUser -> profileMapper.adminViewToModel(dbUser))", "originalCommit": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a33ea77c6ab82566ad99f2962fdb69e9b3a26197", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/profile/ProfileService.java b/api/src/main/java/org/pmiops/workbench/profile/ProfileService.java\nindex 6b74abd75..9a30be2f9 100644\n--- a/api/src/main/java/org/pmiops/workbench/profile/ProfileService.java\n+++ b/api/src/main/java/org/pmiops/workbench/profile/ProfileService.java\n\n@@ -455,7 +455,7 @@ public class ProfileService {\n     validateProfileForCorrectness(dummyProfile, profile);\n   }\n \n-  public List<AdminTableUser> listAllProfiles() {\n+  public List<AdminTableUser> getAdminTableUsers() {\n     return userDao.getAdminTableUsers().stream()\n         .map(dbUser -> profileMapper.adminViewToModel(dbUser))\n         .collect(ImmutableList.toImmutableList());\n"}}, {"oid": "1c9f1da6cddc20d443ea588dd5c0de3156ad2c46", "url": "https://github.com/all-of-us/workbench/commit/1c9f1da6cddc20d443ea588dd5c0de3156ad2c46", "message": "Small tweaks", "committedDate": "2021-01-18T21:32:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI4ODIwNg==", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560288206", "bodyText": "Oh interesting!  I didn't know you could set fields using this approach.\n\ud83d\udc4d to projection interface generally.", "author": "jmthibault79", "createdAt": "2021-01-19T16:00:37Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -72,4 +73,75 @@\n \n     Long getUserCount();\n   }\n+\n+  // Note: setter methods are included only where necessary for testing. See ProfileServiceTest.", "originalCommit": "23fe00bbed35eb8a670ec1a8a1c27b59cdf9b83b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIyNzY3MA==", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r561227670", "bodyText": "Yeah, I learned this when I realized I needed to create some mock data for testing. Adding setters to the interface and using Spring's SpelAwareProxyProjectionFactory was a convenient way to do this.", "author": "gjuggler", "createdAt": "2021-01-20T19:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI4ODIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "f02e5b60785018768097638f0ce5efe37df93b7b", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\nindex 92de21cc9..02ea8186d 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java\n\n@@ -74,27 +74,22 @@ public interface UserDao extends CrudRepository<DbUser, Long> {\n     Long getUserCount();\n   }\n \n-  // Note: setter methods are included only where necessary for testing. See ProfileServiceTest.\n   interface DbAdminTableUser {\n     Long getUserId();\n-    void setUserId(Long userId);\n \n     String getUsername();\n \n     Short getDataAccessLevel();\n \n     Boolean getDisabled();\n-    void setDisabled(Boolean disabled);\n \n     String getGivenName();\n \n     String getFamilyName();\n \n     String getContactEmail();\n-    void setContactEmail(String contactEmail);\n \n     String getInstitutionName();\n-    void setInstitutionName(String institutionName);\n \n     Timestamp getFirstRegistrationCompletionTime();\n \n"}}, {"oid": "f02e5b60785018768097638f0ce5efe37df93b7b", "url": "https://github.com/all-of-us/workbench/commit/f02e5b60785018768097638f0ce5efe37df93b7b", "message": "Add a projection for the admin user table and refresh the UI.", "committedDate": "2021-02-10T20:10:37Z", "type": "commit"}, {"oid": "cdcf99f662e6b6c24b2aeb8db8fa008b634c571b", "url": "https://github.com/all-of-us/workbench/commit/cdcf99f662e6b6c24b2aeb8db8fa008b634c571b", "message": "UI tweaks.", "committedDate": "2021-02-10T20:10:38Z", "type": "commit"}, {"oid": "3bb4a99819cc2cb08945dd40eaf02751c9d158e0", "url": "https://github.com/all-of-us/workbench/commit/3bb4a99819cc2cb08945dd40eaf02751c9d158e0", "message": "Add debounce to filter update.", "committedDate": "2021-02-10T20:10:38Z", "type": "commit"}, {"oid": "1263d71e0b83dabf084f9f975a7b48282cd3a13a", "url": "https://github.com/all-of-us/workbench/commit/1263d71e0b83dabf084f9f975a7b48282cd3a13a", "message": "Small tweaks", "committedDate": "2021-02-10T20:10:38Z", "type": "commit"}, {"oid": "7867149735976a205df2db39ad216a23d0bf07be", "url": "https://github.com/all-of-us/workbench/commit/7867149735976a205df2db39ad216a23d0bf07be", "message": "Fix user bypass bug and address some comments", "committedDate": "2021-02-10T20:10:39Z", "type": "commit"}, {"oid": "a33ea77c6ab82566ad99f2962fdb69e9b3a26197", "url": "https://github.com/all-of-us/workbench/commit/a33ea77c6ab82566ad99f2962fdb69e9b3a26197", "message": "Fix tests", "committedDate": "2021-02-10T20:10:39Z", "type": "commit"}, {"oid": "a4466dee0a0c10ff50a4940150b4af17cae74c14", "url": "https://github.com/all-of-us/workbench/commit/a4466dee0a0c10ff50a4940150b4af17cae74c14", "message": "SpyBean fix.", "committedDate": "2021-02-10T20:10:39Z", "type": "commit"}, {"oid": "4bbe48e13d2c5f8272873a866bf6fa39111fedb9", "url": "https://github.com/all-of-us/workbench/commit/4bbe48e13d2c5f8272873a866bf6fa39111fedb9", "message": "Java spotless fixes", "committedDate": "2021-02-10T20:10:39Z", "type": "commit"}, {"oid": "15dae856789f2375b0dca1f143eb698e75a2ee02", "url": "https://github.com/all-of-us/workbench/commit/15dae856789f2375b0dca1f143eb698e75a2ee02", "message": "Fix bypass bugs and add loading spinner.", "committedDate": "2021-02-10T20:10:40Z", "type": "commit"}, {"oid": "9e74070c4b6f405806ff60ea7ff603b142bf8934", "url": "https://github.com/all-of-us/workbench/commit/9e74070c4b6f405806ff60ea7ff603b142bf8934", "message": "Typo fix", "committedDate": "2021-02-10T20:11:35Z", "type": "commit"}, {"oid": "9e74070c4b6f405806ff60ea7ff603b142bf8934", "url": "https://github.com/all-of-us/workbench/commit/9e74070c4b6f405806ff60ea7ff603b142bf8934", "message": "Typo fix", "committedDate": "2021-02-10T20:11:35Z", "type": "forcePushed"}]}