{"pr_number": 3131, "pr_title": "[risk=no] A grab bag of small refactorings while doing other work", "pr_createdAt": "2020-02-14T14:31:18Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3131", "timeline": [{"oid": "cbeb270f5fccb6aefad18269d24416e85b20b27a", "url": "https://github.com/all-of-us/workbench/commit/cbeb270f5fccb6aefad18269d24416e85b20b27a", "message": "Constrain AuthInterceptor's special userService.createUser() to what it actually uses and rename to username", "committedDate": "2020-02-14T14:27:34Z", "type": "commit"}, {"oid": "68d334fe53c65316706a363df49686c565048461", "url": "https://github.com/all-of-us/workbench/commit/68d334fe53c65316706a363df49686c565048461", "message": "Split this off into its own function", "committedDate": "2020-02-14T14:27:56Z", "type": "commit"}, {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "url": "https://github.com/all-of-us/workbench/commit/c629fb07582664af8dd0f3d2a165f301aed93ab7", "message": "Fix a gap in CommonStorageEnumsTest", "committedDate": "2020-02-14T14:28:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MzgyMA==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379463820", "bodyText": "we must have missed this while standardizing on the new name", "author": "jmthibault79", "createdAt": "2020-02-14T14:38:14Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -17,19 +17,13 @@\n \n   DbUser createServiceAccountUser(String email);\n \n-  DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String email,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch);\n+  // minimal version used by AuthInterceptor\n+  DbUser createUser(String givenName, String familyName, String userName);\n \n   DbUser createUser(\n       String givenName,\n       String familyName,\n-      String email,\n+      String userName,", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MTE2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379491161", "bodyText": "Yes. Sometimes the refactoring is smart enough to do what you want with these, but if one of the names is a substring of other identifiers, all heck breaks loose. Safer to risk leaving some local identifiers behind like this.", "author": "jaycarlton", "createdAt": "2020-02-14T15:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MzgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c7b8bfe006ed266f9877eec33c12b137167f657c", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserService.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserService.java\nindex 07162237a..7cd6295b0 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserService.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserService.java\n\n@@ -17,8 +18,8 @@ public interface UserService {\n \n   DbUser createServiceAccountUser(String email);\n \n-  // minimal version used by AuthInterceptor\n-  DbUser createUser(String givenName, String familyName, String userName);\n+  // version used by AuthInterceptor\n+  DbUser createUser(Userinfoplus oAuth2Userinfo);\n \n   DbUser createUser(\n       String givenName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NDMxMg==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379464312", "bodyText": "The last 3 were always null", "author": "jmthibault79", "createdAt": "2020-02-14T14:39:15Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -290,27 +290,9 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String userName,\n-      String contactEmail,\n-      String currentPosition,", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7b8bfe006ed266f9877eec33c12b137167f657c", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\nindex a1c830be1..6d2f2d9bb 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n\n@@ -290,9 +291,20 @@ public class UserServiceImpl implements UserService, GaugeDataCollector {\n   }\n \n   @Override\n-  public DbUser createUser(String givenName, String familyName, String userName) {\n+  public DbUser createUser(final Userinfoplus oAuth2Userinfo) {\n     return createUser(\n-        givenName, familyName, userName, null, null, null, null, null, null, null, null, null);\n+        oAuth2Userinfo.getGivenName(),\n+        oAuth2Userinfo.getFamilyName(),\n+        oAuth2Userinfo.getEmail(),\n+        null,\n+        null,\n+        null,\n+        null,\n+        null,\n+        null,\n+        null,\n+        null,\n+        null);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NTg0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379465842", "bodyText": "userInfo is a Google OAuth2 Userinfoplus object so \"email\" is correct from that perspective, though it's a \"userName\" to Workbench.", "author": "jmthibault79", "createdAt": "2020-02-14T14:42:07Z", "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,18 +155,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n       // TODO(danrodney): start populating contact email in Google account, use it here.\n       user =\n           userService.createUser(\n-              userInfo.getGivenName(),\n-              userInfo.getFamilyName(),\n-              userInfo.getEmail(),", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDA4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379494089", "bodyText": "Can you put that comment in the code and replace userInfo with something like googleOAuth2id?", "author": "jaycarlton", "createdAt": "2020-02-14T15:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NTg0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMzU3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379523575", "bodyText": "done", "author": "jmthibault79", "createdAt": "2020-02-14T16:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NTg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c7b8bfe006ed266f9877eec33c12b137167f657c", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java b/api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java\nindex bf91189d6..3e09617f2 100644\n--- a/api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java\n+++ b/api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java\n\n@@ -109,53 +109,56 @@ public class AuthInterceptor extends HandlerInterceptorAdapter {\n       return false;\n     }\n \n-    String token = authorizationHeader.substring(\"Bearer\".length()).trim();\n-    Userinfoplus userInfo = userInfoService.getUserInfo(token);\n+    final String token = authorizationHeader.substring(\"Bearer\".length()).trim();\n+    final Userinfoplus OAuth2Userinfo = userInfoService.getUserInfo(token);\n+\n+    // The Workbench user's userName is the AoU-generated email address, so it's an email from an\n+    // OAUth2 perspective\n+    // Don't confuse this with the user's Contact Email, which is entirely separate from this\n+    // process\n+    String userName = OAuth2Userinfo.getEmail();\n \n     // TODO: check Google group membership to ensure user is in registered user group\n \n-    String userEmail = userInfo.getEmail();\n     WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n-    if (workbenchConfig.auth.serviceAccountApiUsers.contains(userEmail)) {\n+    if (workbenchConfig.auth.serviceAccountApiUsers.contains(userName)) {\n       // Whitelisted service accounts are able to make API calls, too.\n       // TODO: stop treating service accounts as normal users, have a separate table for them,\n       // administrators.\n-      DbUser user = userDao.findUserByUsername(userEmail);\n+      DbUser user = userDao.findUserByUsername(userName);\n       if (user == null) {\n-        user = userService.createServiceAccountUser(userEmail);\n+        user = userService.createServiceAccountUser(userName);\n       }\n       SecurityContextHolder.getContext()\n           .setAuthentication(\n-              new UserAuthentication(user, userInfo, token, UserType.SERVICE_ACCOUNT));\n-      log.log(Level.INFO, \"{0} service account in use\", userInfo.getEmail());\n+              new UserAuthentication(user, OAuth2Userinfo, token, UserType.SERVICE_ACCOUNT));\n+      log.log(Level.INFO, \"{0} service account in use\", userName);\n       return true;\n     }\n     String gsuiteDomainSuffix = \"@\" + workbenchConfig.googleDirectoryService.gSuiteDomain;\n-    if (!userEmail.endsWith(gsuiteDomainSuffix)) {\n+    if (!userName.endsWith(gsuiteDomainSuffix)) {\n       // Temporarily set the authentication with no user, so we can look up what user this\n       // corresponds to in FireCloud.\n       SecurityContextHolder.getContext()\n           .setAuthentication(\n-              new UserAuthentication(null, userInfo, token, UserType.SERVICE_ACCOUNT));\n+              new UserAuthentication(null, OAuth2Userinfo, token, UserType.SERVICE_ACCOUNT));\n       // If the email isn't in our GSuite domain, try FireCloud; we could be dealing with a\n       // pet service account. In both AofU and FireCloud, the pet SA is treated as if it were\n       // the user it was created for.\n-      userEmail = fireCloudService.getMe().getUserInfo().getUserEmail();\n-      if (!userEmail.endsWith(gsuiteDomainSuffix)) {\n+      userName = fireCloudService.getMe().getUserInfo().getUserEmail();\n+      if (!userName.endsWith(gsuiteDomainSuffix)) {\n         log.log(\n             Level.INFO,\n             \"User {0} isn't in domain {1}, can't access the workbench\",\n-            new Object[] {userEmail, gsuiteDomainSuffix});\n+            new Object[] {userName, gsuiteDomainSuffix});\n         response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n         return false;\n       }\n     }\n-    DbUser user = userDao.findUserByUsername(userEmail);\n+    DbUser user = userDao.findUserByUsername(userName);\n     if (user == null) {\n       // TODO(danrodney): start populating contact email in Google account, use it here.\n-      user =\n-          userService.createUser(\n-              userInfo.getGivenName(), userInfo.getFamilyName(), userInfo.getEmail());\n+      user = userService.createUser(OAuth2Userinfo);\n     } else {\n       if (user.getDisabled()) {\n         throw new ForbiddenException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjAxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379466015", "bodyText": "These are not used", "author": "jmthibault79", "createdAt": "2020-02-14T14:42:27Z", "path": "common-api/src/main/java/org/pmiops/workbench/db/model/CommonStorageEnums.java", "diffHunk": "@@ -108,14 +108,6 @@ public static Short surveysToStorage(Surveys survey) {\n     return CLIENT_TO_STORAGE_SURVEY.get(survey);\n   }\n \n-  public static String surveyToSurveyId(Surveys survey) {", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379466907", "bodyText": "Is there a more elegant way?  I want to be sure to exclude only this one, for future-proofing", "author": "jmthibault79", "createdAt": "2020-02-14T14:43:57Z", "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3OTQ2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379479462", "bodyText": "Not worth spending much time on.", "author": "jmthibault79", "createdAt": "2020-02-14T15:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjExMQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379496111", "bodyText": "This looks like a fun exercise, but it's way too abstract/reflexive for test code (or application code). Plus, I want to kill dbStorageEnums soon in favor of Lebowski Enums.\nCan we shelve this for another day? I'm happy to pair on the enum stuff. It's a bit funny looking at first, but I think you'll like it.", "author": "jaycarlton", "createdAt": "2020-02-14T15:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTIyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379635225", "bodyText": "Some more English comments on what each chunk is doing would help. Most of us don't use these kinds of functions every day.", "author": "jaycarlton", "createdAt": "2020-02-14T20:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0ODQ5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379648495", "bodyText": "I'll do that but in a follow up along with some other issues I've found", "author": "jmthibault79", "createdAt": "2020-02-14T21:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NzI3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r381597279", "bodyText": "Comments and fix are at #3159", "author": "jmthibault79", "createdAt": "2020-02-19T23:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTczNA==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379489734", "bodyText": "Do we have a name for the old affiliations? Or did we give the new ones a different name?", "author": "jaycarlton", "createdAt": "2020-02-14T15:24:38Z", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMDM2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379520366", "bodyText": "New ones are Verified Institutional Affiliations", "author": "jmthibault79", "createdAt": "2020-02-14T16:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzE5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379633193", "bodyText": "\ud83d\udc4d", "author": "jaycarlton", "createdAt": "2020-02-14T20:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTczNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379490243", "bodyText": "Can you comment on the semantics/lifecycle keeping these in sync, and why we don't need to here?", "author": "jaycarlton", "createdAt": "2020-02-14T15:25:30Z", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+\n+    // This does not update the name in Google.", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMDE2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379520166", "bodyText": "I know nothing about this.  I just moved it.", "author": "jmthibault79", "createdAt": "2020-02-14T16:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzc2NA==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379633764", "bodyText": "We need to be careful moving the audit stuff like fireUpdateAction(). This looks right though. Can you please verify we still get the events written to the audit stream?", "author": "jaycarlton", "createdAt": "2020-02-14T20:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzOTQwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379639405", "bodyText": "What I moved was the updateInstitutionalAffiliations() block into its own method.  Everything else remained in the same location.", "author": "jmthibault79", "createdAt": "2020-02-14T20:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MjAxMA==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379492010", "bodyText": "I'm declaring shenanigans on this constructor. We need a builder.\nThere's no reason in Java 8+ I should ever have to see the word null, let alone 9 in a row. But that may be another ticket.\nIf you don't want a builder, then your shorter constructors need to call the longer ones with default methods.\nUser createUser(A a) {\n  return createUser(a, defaultB);\n}\n\nUser createUser(A a, B b) {\n  return createUser(a, b, defaultC);\n}\n// etc \n\nBut a builder is still much preferred.", "author": "jaycarlton", "createdAt": "2020-02-14T15:28:28Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -290,27 +290,9 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String userName,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch) {\n+  public DbUser createUser(String givenName, String familyName, String userName) {\n     return createUser(", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMzQwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379523405", "bodyText": "This is a good idea, but a larger refactoring than I am comfortable doing right now", "author": "jmthibault79", "createdAt": "2020-02-14T16:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "c7b8bfe006ed266f9877eec33c12b137167f657c", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\nindex a1c830be1..6d2f2d9bb 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java\n\n@@ -290,9 +291,20 @@ public class UserServiceImpl implements UserService, GaugeDataCollector {\n   }\n \n   @Override\n-  public DbUser createUser(String givenName, String familyName, String userName) {\n+  public DbUser createUser(final Userinfoplus oAuth2Userinfo) {\n     return createUser(\n-        givenName, familyName, userName, null, null, null, null, null, null, null, null, null);\n+        oAuth2Userinfo.getGivenName(),\n+        oAuth2Userinfo.getFamilyName(),\n+        oAuth2Userinfo.getEmail(),\n+        null,\n+        null,\n+        null,\n+        null,\n+        null,\n+        null,\n+        null,\n+        null,\n+        null);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDg5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379494893", "bodyText": "CommonStorageEnums should throw IllegalArgumentException if it's not matched IMO. This assertion seems redundant; such checking is that method's job.", "author": "jaycarlton", "createdAt": "2020-02-14T15:33:23Z", "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyOTIwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379529209", "bodyText": "I don't believe this is fixable without a wholesale rewrite of our enum system.\nWhich would be a good idea!  Just not in this tiny drive-by PR", "author": "jmthibault79", "createdAt": "2020-02-14T16:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDg5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379496392", "bodyText": "You're just testing BiMap at this point I think.", "author": "jaycarlton", "createdAt": "2020-02-14T15:36:04Z", "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "originalCommit": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzMDc4OA==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379530788", "bodyText": "This actually does catch bugs!  Its StorageEnumsTest counterpart caught one of mine today - that's what prompted me to do this.  Remove an entry from one of the BiMaps to observe this.", "author": "jmthibault79", "createdAt": "2020-02-14T16:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU0NzA4MA==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379547080", "bodyText": "No, I get what it's doing, and it's awesome that it catches bugs.\nIs there a reason you have to copy this instead of making a generic utility function to use in both enum classes?", "author": "jaycarlton", "createdAt": "2020-02-14T17:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2NTY1OA==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379565658", "bodyText": "We have a one-way dependency from /api -> /common-api so any common code would have to live in /common-api.  I don't want to add any new /common-api dependencies.  We'll be removing /common-api entirely, soon after Dover.", "author": "jmthibault79", "createdAt": "2020-02-14T17:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTM3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379635373", "bodyText": "But why did your new enum maps need to go in common at all?", "author": "jaycarlton", "createdAt": "2020-02-14T20:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzODM0OA==", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379638348", "bodyText": "They did not.  I saw that the /api test saved my butt and was curious if the /common-api would have as well.  It would not have, so I fixed that here.", "author": "jmthibault79", "createdAt": "2020-02-14T20:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c7b8bfe006ed266f9877eec33c12b137167f657c", "url": "https://github.com/all-of-us/workbench/commit/c7b8bfe006ed266f9877eec33c12b137167f657c", "message": "clarify the Userinfoplus OAUth2 situation", "committedDate": "2020-02-14T16:17:56Z", "type": "commit"}, {"oid": "c6341b923fdfa1ecef6053d2c3816d4217d972d2", "url": "https://github.com/all-of-us/workbench/commit/c6341b923fdfa1ecef6053d2c3816d4217d972d2", "message": "./project.rb connect-to-db now starts local DB if necessary", "committedDate": "2020-02-14T16:21:01Z", "type": "commit"}, {"oid": "6b66d338162d95c97cbd8dee235afb2036d7cbe0", "url": "https://github.com/all-of-us/workbench/commit/6b66d338162d95c97cbd8dee235afb2036d7cbe0", "message": "forgot the test", "committedDate": "2020-02-14T16:28:34Z", "type": "commit"}, {"oid": "11fbb814414c49c985e48ca1718b80660413e546", "url": "https://github.com/all-of-us/workbench/commit/11fbb814414c49c985e48ca1718b80660413e546", "message": "comments", "committedDate": "2020-02-14T16:32:22Z", "type": "commit"}]}