{"pr_number": 3525, "pr_title": "[risk=low][RW-4857] Always display billing account dropdown in Create/Edit Workspace, and other logic changes", "pr_createdAt": "2020-05-01T18:29:15Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3525", "timeline": [{"oid": "064b4b168b998522c99c5d47baf7bd9f81dd60d7", "url": "https://github.com/all-of-us/workbench/commit/064b4b168b998522c99c5d47baf7bd9f81dd60d7", "message": "Update listBillingAccounts() logic and test", "committedDate": "2020-05-01T18:26:15Z", "type": "commit"}, {"oid": "bf971a25811e85f5a70ed593dc45d9edb0d8f58e", "url": "https://github.com/all-of-us/workbench/commit/bf971a25811e85f5a70ed593dc45d9edb0d8f58e", "message": "Can always view Free Credits balance, even when expired", "committedDate": "2020-05-01T18:26:15Z", "type": "commit"}, {"oid": "0a7084d104449aaf1a16aea82933250604f91b64", "url": "https://github.com/all-of-us/workbench/commit/0a7084d104449aaf1a16aea82933250604f91b64", "message": "Only show Create Billing Account when billing upgrade is true\nAlways fetch billing accounts\nAlways show account dropdown\nOnly select free tier account when present\nDisable dropdown when billing upgrade is false and free tier is expired", "committedDate": "2020-05-01T18:27:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTA2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418675067", "bodyText": "I would really like to move listBillingAccounts() and these 2 dependencies to a new BillingAccountService, but I found that doing so obscured the intent of these changes.  I'll probably file a followup PR for that.", "author": "jmthibault79", "createdAt": "2020-05-01T18:31:09Z", "path": "api/src/main/java/org/pmiops/workbench/api/UserController.java", "diffHunk": "@@ -60,11 +62,13 @@ public UserController(\n       Provider<WorkbenchConfig> configProvider,\n       FireCloudService fireCloudService,\n       UserService userService,\n-      @Qualifier(END_USER_CLOUD_BILLING) Provider<Cloudbilling> cloudBillingProvider) {\n+      @Qualifier(END_USER_CLOUD_BILLING) Provider<Cloudbilling> cloudBillingProvider,", "originalCommit": "0a7084d104449aaf1a16aea82933250604f91b64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTcyMw==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418675723", "bodyText": "This logic is unchanged.", "author": "jmthibault79", "createdAt": "2020-05-01T18:32:34Z", "path": "api/src/main/java/org/pmiops/workbench/api/UserController.java", "diffHunk": "@@ -157,24 +188,15 @@ private BillingAccount freeTierBillingAccount() {\n       throw new ServerErrorException(\"Could not retrieve billing accounts list from Google Cloud\");\n     }\n \n-    List<BillingAccount> billingAccounts =\n-        Stream.concat(\n-                Stream.of(freeTierBillingAccount()),\n-                Optional.ofNullable(response.getBillingAccounts()).orElse(Collections.emptyList())\n-                    .stream()\n-                    .map(\n-                        googleBillingAccount ->\n-                            new BillingAccount()\n-                                .isFreeTier(false)\n-                                .displayName(googleBillingAccount.getDisplayName())\n-                                .name(googleBillingAccount.getName())\n-                                .isOpen(\n-                                    Optional.ofNullable(googleBillingAccount.getOpen())\n-                                        .orElse(false))))\n-            .collect(Collectors.toList());\n-\n-    return ResponseEntity.ok(\n-        new WorkbenchListBillingAccountsResponse().billingAccounts(billingAccounts));\n+    return Optional.ofNullable(response.getBillingAccounts()).orElse(Collections.emptyList())", "originalCommit": "0a7084d104449aaf1a16aea82933250604f91b64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjgxOA==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418676818", "bodyText": "Yeah, yeah, I know.  However:\n\nthe logic is obtuse enough that we should be explicit here\nhalf of these will go away after enableBillingUpgrade is permanently set to true\n\nIf I follow up on the BillingAccountService idea, these would move to a new BillingAccountServiceTest", "author": "jmthibault79", "createdAt": "2020-05-01T18:35:08Z", "path": "api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java", "diffHunk": "@@ -252,93 +262,214 @@ public void testUserSort() {\n     assertThat(robinsonsAsc.getUsers()).containsAllIn(newAscending).inOrder();\n   }\n \n+  // Combinatorial tests for listBillingAccounts:", "originalCommit": "0a7084d104449aaf1a16aea82933250604f91b64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MDAxMw==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418690013", "bodyText": "Note: This is an ideal scenario for a @Parameterized test case. We don't have the pattern established in the codebase though and the first usage will probably be a substantial undertaking, so not for this PR.", "author": "calbach", "createdAt": "2020-05-01T19:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "35a5d1f851925539b27c24a194b4115b6d73a8e1", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\nindex a8fbfa5b6..97038f1c7 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\n\n@@ -263,9 +263,9 @@ public class UserControllerTest {\n   }\n \n   // Combinatorial tests for listBillingAccounts:\n+  // enableBillingUpgrade feature flag on/off\n   // free tier available vs. expired\n   // cloud accounts available vs. none\n-  // enableBillingUpgrade feature flag on/off\n \n   final BillingAccount freeTierBillingAccount =\n       new BillingAccount()\n"}}, {"oid": "35a5d1f851925539b27c24a194b4115b6d73a8e1", "url": "https://github.com/all-of-us/workbench/commit/35a5d1f851925539b27c24a194b4115b6d73a8e1", "message": "test corrections and reordering", "committedDate": "2020-05-01T18:46:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NDI3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418694277", "bodyText": "nit: I'd probably go for ImmutableList.copyOf(Iterables.concat(...)) since there's precedence: https://github.com/all-of-us/workbench/search?q=iterables.concat&unscoped_q=iterables.concat\nor new ARrayList(freeTier).addAll(cloudBillingAccounts)\nWe don't currently use collections4 anywhere else (were collections1-3 already taken?)", "author": "calbach", "createdAt": "2020-05-01T19:15:14Z", "path": "api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java", "diffHunk": "@@ -252,91 +262,212 @@ public void testUserSort() {\n     assertThat(robinsonsAsc.getUsers()).containsAllIn(newAscending).inOrder();\n   }\n \n+  // Combinatorial tests for listBillingAccounts:\n+  // enableBillingUpgrade feature flag on/off\n+  // free tier available vs. expired\n+  // cloud accounts available vs. none\n+\n+  final BillingAccount freeTierBillingAccount =\n+      new BillingAccount()\n+          .isFreeTier(true)\n+          .displayName(\"Use All of Us free credits\")\n+          .name(\"billingAccounts/free-tier\")\n+          .isOpen(true);\n+\n+  final List<com.google.api.services.cloudbilling.model.BillingAccount> cloudbillingAccounts =\n+      Lists.newArrayList(\n+          new com.google.api.services.cloudbilling.model.BillingAccount()\n+              .setName(\"googlebucks\")\n+              .setDisplayName(\"Paid using your credit card\"),\n+          new com.google.api.services.cloudbilling.model.BillingAccount()\n+              .setName(\"a2\")\n+              .setDisplayName(\"Account 2 - Open\")\n+              .setOpen(true));\n+\n+  final List<BillingAccount> cloudbillingAccountsInWorkbench =\n+      Lists.newArrayList(\n+          new BillingAccount()\n+              .name(\"googlebucks\")\n+              .displayName(\"Paid using your credit card\")\n+              .isFreeTier(false)\n+              .isOpen(false),\n+          new BillingAccount()\n+              .name(\"a2\")\n+              .displayName(\"Account 2 - Open\")\n+              .isFreeTier(false)\n+              .isOpen(true));\n+\n+  // billing upgrade is true, free tier is available, cloud accounts exist\n+\n   @Test\n-  public void listBillingAccounts() throws IOException {\n+  public void listBillingAccounts_upgradeYES_freeYES_cloudYES() throws IOException {\n     config.billing = new BillingConfig();\n     config.billing.accountId = \"free-tier\";\n     config.featureFlags.enableBillingUpgrade = true;\n \n-    final com.google.api.services.cloudbilling.model.BillingAccount cloudbillingAccount1 =\n-        new com.google.api.services.cloudbilling.model.BillingAccount()\n-            .setName(\"googlebucks\")\n-            .setDisplayName(\"Paid using your credit card\");\n+    when(testFreeTierBillingService.userHasRemainingFreeTierCredits(any())).thenReturn(true);\n \n-    final com.google.api.services.cloudbilling.model.BillingAccount cloudbillingAccount2 =\n-        new com.google.api.services.cloudbilling.model.BillingAccount()\n-            .setName(\"a2\")\n-            .setDisplayName(\"Account 2 - Open\")\n-            .setOpen(true);\n+    when(testCloudbilling.billingAccounts().list().execute())\n+        .thenReturn(new ListBillingAccountsResponse().setBillingAccounts(cloudbillingAccounts));\n \n-    final List<com.google.api.services.cloudbilling.model.BillingAccount> cloudbillingAccounts =\n-        Lists.newArrayList(cloudbillingAccount1, cloudbillingAccount2);\n+    final List<BillingAccount> expectedWorkbenchBillingAccounts =\n+        ListUtils.union(", "originalCommit": "35a5d1f851925539b27c24a194b4115b6d73a8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5159a20e51d5f487d14fa0485b8fe29213ba905", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\nindex 97038f1c7..c90eec5bf 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\n\n@@ -330,13 +330,13 @@ public class UserControllerTest {\n     when(testFreeTierBillingService.userHasRemainingFreeTierCredits(any())).thenReturn(true);\n \n     when(testCloudbilling.billingAccounts().list().execute())\n-            .thenReturn(new ListBillingAccountsResponse().setBillingAccounts(null));\n+        .thenReturn(new ListBillingAccountsResponse().setBillingAccounts(null));\n \n     final List<BillingAccount> expectedWorkbenchBillingAccounts =\n-            Lists.newArrayList(freeTierBillingAccount);\n+        Lists.newArrayList(freeTierBillingAccount);\n \n     final WorkbenchListBillingAccountsResponse response =\n-            userController.listBillingAccounts().getBody();\n+        userController.listBillingAccounts().getBody();\n     assertThat(response.getBillingAccounts()).isEqualTo(expectedWorkbenchBillingAccounts);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NTQxNg==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418695416", "bodyText": "nit: existing pattern in this file would be to add this in @MockBean, then @autowire it in below. Ideally this is named mockFreeTierBillingService.\nALl good candidates for a style document. Happy to write this one", "author": "calbach", "createdAt": "2020-05-01T19:18:06Z", "path": "api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java", "diffHunk": "@@ -64,6 +67,8 @@\n   private static long incrementedUserId = 1;\n   private static final Cloudbilling testCloudbilling = TestMockFactory.createMockedCloudbilling();\n \n+  @Mock private static FreeTierBillingService testFreeTierBillingService;", "originalCommit": "35a5d1f851925539b27c24a194b4115b6d73a8e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyMzk0NA==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418723944", "bodyText": "Thanks - I would appreciate that.  I get lost in the many ways we can mock things.", "author": "jmthibault79", "createdAt": "2020-05-01T20:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NTQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "4e3d62b68b4412d940c5eb2ff3b0903cb7c56702", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\nindex 97038f1c7..ca4d4161e 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\n\n@@ -67,8 +66,6 @@ public class UserControllerTest {\n   private static long incrementedUserId = 1;\n   private static final Cloudbilling testCloudbilling = TestMockFactory.createMockedCloudbilling();\n \n-  @Mock private static FreeTierBillingService testFreeTierBillingService;\n-\n   @TestConfiguration\n   @Import({\n     UserController.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NTcxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418695711", "bodyText": "nit: should these not be static?", "author": "calbach", "createdAt": "2020-05-01T19:18:52Z", "path": "api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java", "diffHunk": "@@ -252,91 +262,212 @@ public void testUserSort() {\n     assertThat(robinsonsAsc.getUsers()).containsAllIn(newAscending).inOrder();\n   }\n \n+  // Combinatorial tests for listBillingAccounts:\n+  // enableBillingUpgrade feature flag on/off\n+  // free tier available vs. expired\n+  // cloud accounts available vs. none\n+\n+  final BillingAccount freeTierBillingAccount =", "originalCommit": "35a5d1f851925539b27c24a194b4115b6d73a8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5159a20e51d5f487d14fa0485b8fe29213ba905", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\nindex 97038f1c7..c90eec5bf 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/UserControllerTest.java\n\n@@ -330,13 +330,13 @@ public class UserControllerTest {\n     when(testFreeTierBillingService.userHasRemainingFreeTierCredits(any())).thenReturn(true);\n \n     when(testCloudbilling.billingAccounts().list().execute())\n-            .thenReturn(new ListBillingAccountsResponse().setBillingAccounts(null));\n+        .thenReturn(new ListBillingAccountsResponse().setBillingAccounts(null));\n \n     final List<BillingAccount> expectedWorkbenchBillingAccounts =\n-            Lists.newArrayList(freeTierBillingAccount);\n+        Lists.newArrayList(freeTierBillingAccount);\n \n     final WorkbenchListBillingAccountsResponse response =\n-            userController.listBillingAccounts().getBody();\n+        userController.listBillingAccounts().getBody();\n     assertThat(response.getBillingAccounts()).isEqualTo(expectedWorkbenchBillingAccounts);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5Njc2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3525#discussion_r418696766", "bodyText": "Note: This is for another day, but there's an argument to always return it, but just have the option be disabled in the dropdown if credits are expired. Driving business logic here based on the caller's free credits is dubious per prior discussions (even if we're disallowing certain interactions client-side or with validation in other methods).", "author": "calbach", "createdAt": "2020-05-01T19:21:26Z", "path": "api/src/main/java/org/pmiops/workbench/api/UserController.java", "diffHunk": "@@ -135,19 +139,46 @@ public UserController(\n     return ResponseEntity.ok(response);\n   }\n \n-  private BillingAccount freeTierBillingAccount() {\n-    return new BillingAccount()\n-        .isFreeTier(true)\n-        .displayName(\"Use All of Us free credits\")\n-        .name(configProvider.get().billing.freeTierBillingAccountName())\n-        .isOpen(true);\n-  }\n-\n   @Override\n   public ResponseEntity<WorkbenchListBillingAccountsResponse> listBillingAccounts() {\n-    // this check should be redundant: the UI only calls this endpoint when the flag is active\n+    List<BillingAccount> billingAccounts =\n+        Stream.concat(maybeFreeTierBillingAccount(), maybeCloudBillingAccounts())\n+            .collect(Collectors.toList());\n+\n+    return ResponseEntity.ok(\n+        new WorkbenchListBillingAccountsResponse().billingAccounts(billingAccounts));\n+  }\n+\n+  /**\n+   * The logic here is a little weird. See RW-4857.\n+   *\n+   * <p>When Billing Upgrade is true: return the Free Tier account only when the user has remaining", "originalCommit": "35a5d1f851925539b27c24a194b4115b6d73a8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f5159a20e51d5f487d14fa0485b8fe29213ba905", "url": "https://github.com/all-of-us/workbench/commit/f5159a20e51d5f487d14fa0485b8fe29213ba905", "message": "I thought I had linted this already", "committedDate": "2020-05-01T19:33:56Z", "type": "commit"}, {"oid": "d7df0353bded6d14f1556c3e81fc4ef02829203d", "url": "https://github.com/all-of-us/workbench/commit/d7df0353bded6d14f1556c3e81fc4ef02829203d", "message": "fix parens", "committedDate": "2020-05-01T20:39:22Z", "type": "commit"}, {"oid": "4e3d62b68b4412d940c5eb2ff3b0903cb7c56702", "url": "https://github.com/all-of-us/workbench/commit/4e3d62b68b4412d940c5eb2ff3b0903cb7c56702", "message": "MockBean + Autowired", "committedDate": "2020-05-01T20:39:22Z", "type": "commit"}, {"oid": "abd2df8e41f5d6ccc0fba7c1c1bc3bd83232ea2b", "url": "https://github.com/all-of-us/workbench/commit/abd2df8e41f5d6ccc0fba7c1c1bc3bd83232ea2b", "message": "static test vars", "committedDate": "2020-05-01T20:39:23Z", "type": "commit"}, {"oid": "dc0e1420534fb761f88fb7e097111217e1ed5a86", "url": "https://github.com/all-of-us/workbench/commit/dc0e1420534fb761f88fb7e097111217e1ed5a86", "message": "lint", "committedDate": "2020-05-01T20:39:23Z", "type": "commit"}, {"oid": "dc0e1420534fb761f88fb7e097111217e1ed5a86", "url": "https://github.com/all-of-us/workbench/commit/dc0e1420534fb761f88fb7e097111217e1ed5a86", "message": "lint", "committedDate": "2020-05-01T20:39:23Z", "type": "forcePushed"}]}