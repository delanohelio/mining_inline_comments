{"pr_number": 3135, "pr_title": "[RW-2704][risk=low] Split up listCluster API and move initialization logic to the client-side.", "pr_createdAt": "2020-02-14T22:18:05Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3135", "timeline": [{"oid": "67ab8fb211b1b76440cff340343c7a107903a87b", "url": "https://github.com/all-of-us/workbench/commit/67ab8fb211b1b76440cff340343c7a107903a87b", "message": "Fix ng lint error", "committedDate": "2020-02-21T15:27:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NzEyOA==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382647128", "bodyText": "nit: can the body of this function be pushed into the WorkspaceService, and have it return Optional<Cluster>?", "author": "jaycarlton", "createdAt": "2020-02-21T15:33:37Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMTM1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383321355", "bodyText": "IMO it wouldn't be worth it. This controller is <10 lines (including wrapping!) which is way shorter than before, and very much in the spirit of https://github.com/all-of-us/workbench/blob/master/api/doc/code-structure.md#controllers.\n(And, upon reading that section again, I would probably disagree that 'controllers should contain no actual logic'. IMO, having some calls to well-factored access enforcement and validity checking service methods is more reasonably the scope of a controller than of a service.)", "author": "gjuggler", "createdAt": "2020-02-24T15:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3NTUxMw==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r384575513", "bodyText": "I can go along with that. I just haven't see much of a clean example of how to draw the line. If we're not really MVC, then I don't know what the \"C\" means.", "author": "jaycarlton", "createdAt": "2020-02-26T15:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NzEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NzE3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382647175", "bodyText": "Nice. This is a good example of my preferred exception pattern: the service returns optional and the controller cries (optionally).", "author": "jaycarlton", "createdAt": "2020-02-21T15:33:42Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1MjI0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382652243", "bodyText": "note to self: rename generated files in this package too so you don't have to do this.", "author": "jaycarlton", "createdAt": "2020-02-21T15:42:15Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1MjY4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382652682", "bodyText": "This logic could also live in WorkspaceService I think.", "author": "jaycarlton", "createdAt": "2020-02-21T15:42:54Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.getCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()));\n \n-    String clusterName = clusterNameForUser(user);\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n+  }\n \n-    org.pmiops.workbench.notebooks.model.Cluster fcCluster;\n-    try {\n-      fcCluster = this.leonardoNotebooksClient.getCluster(billingProjectId, clusterName);\n-    } catch (NotFoundException e) {\n-      fcCluster =\n-          this.leonardoNotebooksClient.createCluster(\n-              billingProjectId, clusterName, workspaceFirecloudName);\n-    }\n+  @Override\n+  public ResponseEntity<Cluster> createCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMTk4MQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383321981", "bodyText": "It could, but I don't think it would provide any meaningful benefit to readability or maintenance.", "author": "gjuggler", "createdAt": "2020-02-24T15:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1MjY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1Mjk1MA==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382652950", "bodyText": "nit: drop the this..", "author": "jaycarlton", "createdAt": "2020-02-21T15:43:17Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.getCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()));\n \n-    String clusterName = clusterNameForUser(user);\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n+  }\n \n-    org.pmiops.workbench.notebooks.model.Cluster fcCluster;\n-    try {\n-      fcCluster = this.leonardoNotebooksClient.getCluster(billingProjectId, clusterName);\n-    } catch (NotFoundException e) {\n-      fcCluster =\n-          this.leonardoNotebooksClient.createCluster(\n-              billingProjectId, clusterName, workspaceFirecloudName);\n-    }\n+  @Override\n+  public ResponseEntity<Cluster> createCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    int retries = Optional.ofNullable(user.getClusterCreateRetries()).orElse(0);\n-    if (org.pmiops.workbench.notebooks.model.ClusterStatus.ERROR.equals(fcCluster.getStatus())) {\n-      if (retries <= 2) {\n-        this.userService.setClusterRetryCount(retries + 1);\n-        log.warning(\"Cluster has errored with logs: \");\n-        if (fcCluster.getErrors() != null) {\n-          for (ClusterError e : fcCluster.getErrors()) {\n-            log.warning(e.getErrorMessage());\n-          }\n-        }\n-        log.warning(\"Retrying cluster creation.\");\n-\n-        this.leonardoNotebooksClient.deleteCluster(billingProjectId, clusterName);\n-      }\n-    } else if (org.pmiops.workbench.notebooks.model.ClusterStatus.RUNNING.equals(\n-            fcCluster.getStatus())\n-        && retries != 0) {\n-      this.userService.setClusterRetryCount(0);\n-    }\n-    DefaultClusterResponse resp = new DefaultClusterResponse();\n-    resp.setDefaultCluster(TO_ALL_OF_US_CLUSTER.apply(fcCluster));\n-    return ResponseEntity.ok(resp);\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.createCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()), firecloudWorkspaceName);\n+\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n   }\n \n   @Override\n-  public ResponseEntity<EmptyResponse> deleteCluster(String projectName, String clusterName) {\n-    this.userService.setClusterRetryCount(0);\n-    this.leonardoNotebooksClient.deleteCluster(projectName, clusterName);\n+  public ResponseEntity<EmptyResponse> deleteCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+\n+    this.leonardoNotebooksClient.deleteCluster(", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMjI2OA==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383322268", "bodyText": "Oops. It gets hard switching between Typescript and Java sometimes...", "author": "gjuggler", "createdAt": "2020-02-24T15:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1Mjk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY1NjEzNQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382656135", "bodyText": "It would be nice to simply add the firecloud cluster name to the DbUser as a transient/derived property, since it depends only on the user's id.", "author": "jaycarlton", "createdAt": "2020-02-21T15:48:43Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.getCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()));\n \n-    String clusterName = clusterNameForUser(user);\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n+  }\n \n-    org.pmiops.workbench.notebooks.model.Cluster fcCluster;\n-    try {\n-      fcCluster = this.leonardoNotebooksClient.getCluster(billingProjectId, clusterName);\n-    } catch (NotFoundException e) {\n-      fcCluster =\n-          this.leonardoNotebooksClient.createCluster(\n-              billingProjectId, clusterName, workspaceFirecloudName);\n-    }\n+  @Override\n+  public ResponseEntity<Cluster> createCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    int retries = Optional.ofNullable(user.getClusterCreateRetries()).orElse(0);\n-    if (org.pmiops.workbench.notebooks.model.ClusterStatus.ERROR.equals(fcCluster.getStatus())) {\n-      if (retries <= 2) {\n-        this.userService.setClusterRetryCount(retries + 1);\n-        log.warning(\"Cluster has errored with logs: \");\n-        if (fcCluster.getErrors() != null) {\n-          for (ClusterError e : fcCluster.getErrors()) {\n-            log.warning(e.getErrorMessage());\n-          }\n-        }\n-        log.warning(\"Retrying cluster creation.\");\n-\n-        this.leonardoNotebooksClient.deleteCluster(billingProjectId, clusterName);\n-      }\n-    } else if (org.pmiops.workbench.notebooks.model.ClusterStatus.RUNNING.equals(\n-            fcCluster.getStatus())\n-        && retries != 0) {\n-      this.userService.setClusterRetryCount(0);\n-    }\n-    DefaultClusterResponse resp = new DefaultClusterResponse();\n-    resp.setDefaultCluster(TO_ALL_OF_US_CLUSTER.apply(fcCluster));\n-    return ResponseEntity.ok(resp);\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.createCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()), firecloudWorkspaceName);", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2NjkzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382666939", "bodyText": "I'd make this final so the complier assures it's initialized exactly once.", "author": "jaycarlton", "createdAt": "2020-02-21T16:07:03Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.getCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()));\n \n-    String clusterName = clusterNameForUser(user);\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n+  }\n \n-    org.pmiops.workbench.notebooks.model.Cluster fcCluster;\n-    try {\n-      fcCluster = this.leonardoNotebooksClient.getCluster(billingProjectId, clusterName);\n-    } catch (NotFoundException e) {\n-      fcCluster =\n-          this.leonardoNotebooksClient.createCluster(\n-              billingProjectId, clusterName, workspaceFirecloudName);\n-    }\n+  @Override\n+  public ResponseEntity<Cluster> createCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    int retries = Optional.ofNullable(user.getClusterCreateRetries()).orElse(0);\n-    if (org.pmiops.workbench.notebooks.model.ClusterStatus.ERROR.equals(fcCluster.getStatus())) {\n-      if (retries <= 2) {\n-        this.userService.setClusterRetryCount(retries + 1);\n-        log.warning(\"Cluster has errored with logs: \");\n-        if (fcCluster.getErrors() != null) {\n-          for (ClusterError e : fcCluster.getErrors()) {\n-            log.warning(e.getErrorMessage());\n-          }\n-        }\n-        log.warning(\"Retrying cluster creation.\");\n-\n-        this.leonardoNotebooksClient.deleteCluster(billingProjectId, clusterName);\n-      }\n-    } else if (org.pmiops.workbench.notebooks.model.ClusterStatus.RUNNING.equals(\n-            fcCluster.getStatus())\n-        && retries != 0) {\n-      this.userService.setClusterRetryCount(0);\n-    }\n-    DefaultClusterResponse resp = new DefaultClusterResponse();\n-    resp.setDefaultCluster(TO_ALL_OF_US_CLUSTER.apply(fcCluster));\n-    return ResponseEntity.ok(resp);\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.createCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()), firecloudWorkspaceName);\n+\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n   }\n \n   @Override\n-  public ResponseEntity<EmptyResponse> deleteCluster(String projectName, String clusterName) {\n-    this.userService.setClusterRetryCount(0);\n-    this.leonardoNotebooksClient.deleteCluster(projectName, clusterName);\n+  public ResponseEntity<EmptyResponse> deleteCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+\n+    this.leonardoNotebooksClient.deleteCluster(\n+        workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<ClusterLocalizeResponse> localize(\n-      String projectName, String clusterName, ClusterLocalizeRequest body) {\n+      String workspaceNamespace, ClusterLocalizeRequest body) {\n+    DbWorkspace dbWorkspace = lookupWorkspace(workspaceNamespace);\n     workspaceService.enforceWorkspaceAccessLevel(\n-        body.getWorkspaceNamespace(), body.getWorkspaceId(), WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(body.getWorkspaceNamespace(), body.getWorkspaceId());\n+        dbWorkspace.getWorkspaceNamespace(),\n+        dbWorkspace.getFirecloudName(),\n+        WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(\n+        dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n \n-    FirecloudWorkspace fcWorkspace;\n+    FirecloudWorkspace firecloudWorkspace;", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMzc3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383323775", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-02-24T15:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2NjkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2ODEwMw==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382668103", "bodyText": "I'd make a helper method or service method for this bucket path determination. (If FirecloudWorkspace weren't generated, I'd put it there.)", "author": "jaycarlton", "createdAt": "2020-02-21T16:09:09Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.getCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()));\n \n-    String clusterName = clusterNameForUser(user);\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n+  }\n \n-    org.pmiops.workbench.notebooks.model.Cluster fcCluster;\n-    try {\n-      fcCluster = this.leonardoNotebooksClient.getCluster(billingProjectId, clusterName);\n-    } catch (NotFoundException e) {\n-      fcCluster =\n-          this.leonardoNotebooksClient.createCluster(\n-              billingProjectId, clusterName, workspaceFirecloudName);\n-    }\n+  @Override\n+  public ResponseEntity<Cluster> createCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    int retries = Optional.ofNullable(user.getClusterCreateRetries()).orElse(0);\n-    if (org.pmiops.workbench.notebooks.model.ClusterStatus.ERROR.equals(fcCluster.getStatus())) {\n-      if (retries <= 2) {\n-        this.userService.setClusterRetryCount(retries + 1);\n-        log.warning(\"Cluster has errored with logs: \");\n-        if (fcCluster.getErrors() != null) {\n-          for (ClusterError e : fcCluster.getErrors()) {\n-            log.warning(e.getErrorMessage());\n-          }\n-        }\n-        log.warning(\"Retrying cluster creation.\");\n-\n-        this.leonardoNotebooksClient.deleteCluster(billingProjectId, clusterName);\n-      }\n-    } else if (org.pmiops.workbench.notebooks.model.ClusterStatus.RUNNING.equals(\n-            fcCluster.getStatus())\n-        && retries != 0) {\n-      this.userService.setClusterRetryCount(0);\n-    }\n-    DefaultClusterResponse resp = new DefaultClusterResponse();\n-    resp.setDefaultCluster(TO_ALL_OF_US_CLUSTER.apply(fcCluster));\n-    return ResponseEntity.ok(resp);\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.createCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()), firecloudWorkspaceName);\n+\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n   }\n \n   @Override\n-  public ResponseEntity<EmptyResponse> deleteCluster(String projectName, String clusterName) {\n-    this.userService.setClusterRetryCount(0);\n-    this.leonardoNotebooksClient.deleteCluster(projectName, clusterName);\n+  public ResponseEntity<EmptyResponse> deleteCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+\n+    this.leonardoNotebooksClient.deleteCluster(\n+        workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<ClusterLocalizeResponse> localize(\n-      String projectName, String clusterName, ClusterLocalizeRequest body) {\n+      String workspaceNamespace, ClusterLocalizeRequest body) {\n+    DbWorkspace dbWorkspace = lookupWorkspace(workspaceNamespace);\n     workspaceService.enforceWorkspaceAccessLevel(\n-        body.getWorkspaceNamespace(), body.getWorkspaceId(), WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(body.getWorkspaceNamespace(), body.getWorkspaceId());\n+        dbWorkspace.getWorkspaceNamespace(),\n+        dbWorkspace.getFirecloudName(),\n+        WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(\n+        dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n \n-    FirecloudWorkspace fcWorkspace;\n+    FirecloudWorkspace firecloudWorkspace;\n     try {\n-      fcWorkspace =\n+      firecloudWorkspace =\n           fireCloudService\n-              .getWorkspace(body.getWorkspaceNamespace(), body.getWorkspaceId())\n+              .getWorkspace(dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName())\n               .getWorkspace();\n     } catch (NotFoundException e) {\n       throw new NotFoundException(\n           String.format(\n               \"workspace %s/%s not found or not accessible\",\n-              body.getWorkspaceNamespace(), body.getWorkspaceId()));\n+              dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName()));\n     }\n-    DbCdrVersion cdrVersion =\n-        workspaceService\n-            .getRequired(body.getWorkspaceNamespace(), body.getWorkspaceId())\n-            .getCdrVersion();\n+    DbCdrVersion cdrVersion = dbWorkspace.getCdrVersion();\n \n     // For the common case where the notebook cluster matches the workspace\n     // namespace, simply name the directory as the workspace ID; else we\n     // include the namespace in the directory name to avoid possible conflicts\n     // in workspace IDs.\n-    String gcsNotebooksDir = \"gs://\" + fcWorkspace.getBucketName() + \"/notebooks\";\n-    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n-    long workspaceId =\n-        workspaceService\n-            .getRequired(body.getWorkspaceNamespace(), body.getWorkspaceId())\n-            .getWorkspaceId();\n+    String gcsNotebooksDir = \"gs://\" + firecloudWorkspace.getBucketName() + \"/notebooks\";", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNDQyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383324429", "bodyText": "Not sure it's worthwhile here.", "author": "gjuggler", "createdAt": "2020-02-24T15:15:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2ODEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2OTk4NA==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382669984", "bodyText": "on ln 263, I was confused that notebook was the variable but it was appended to a string. notebookName might be better.\nAlso, it would be nice to have  userRecentResourceService expose a batch method for this, so you don't have to loop here. It's a bit odd to see a service getting called in a loop.", "author": "jaycarlton", "createdAt": "2020-02-21T16:12:35Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.getCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()));\n \n-    String clusterName = clusterNameForUser(user);\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n+  }\n \n-    org.pmiops.workbench.notebooks.model.Cluster fcCluster;\n-    try {\n-      fcCluster = this.leonardoNotebooksClient.getCluster(billingProjectId, clusterName);\n-    } catch (NotFoundException e) {\n-      fcCluster =\n-          this.leonardoNotebooksClient.createCluster(\n-              billingProjectId, clusterName, workspaceFirecloudName);\n-    }\n+  @Override\n+  public ResponseEntity<Cluster> createCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    int retries = Optional.ofNullable(user.getClusterCreateRetries()).orElse(0);\n-    if (org.pmiops.workbench.notebooks.model.ClusterStatus.ERROR.equals(fcCluster.getStatus())) {\n-      if (retries <= 2) {\n-        this.userService.setClusterRetryCount(retries + 1);\n-        log.warning(\"Cluster has errored with logs: \");\n-        if (fcCluster.getErrors() != null) {\n-          for (ClusterError e : fcCluster.getErrors()) {\n-            log.warning(e.getErrorMessage());\n-          }\n-        }\n-        log.warning(\"Retrying cluster creation.\");\n-\n-        this.leonardoNotebooksClient.deleteCluster(billingProjectId, clusterName);\n-      }\n-    } else if (org.pmiops.workbench.notebooks.model.ClusterStatus.RUNNING.equals(\n-            fcCluster.getStatus())\n-        && retries != 0) {\n-      this.userService.setClusterRetryCount(0);\n-    }\n-    DefaultClusterResponse resp = new DefaultClusterResponse();\n-    resp.setDefaultCluster(TO_ALL_OF_US_CLUSTER.apply(fcCluster));\n-    return ResponseEntity.ok(resp);\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.createCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()), firecloudWorkspaceName);\n+\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n   }\n \n   @Override\n-  public ResponseEntity<EmptyResponse> deleteCluster(String projectName, String clusterName) {\n-    this.userService.setClusterRetryCount(0);\n-    this.leonardoNotebooksClient.deleteCluster(projectName, clusterName);\n+  public ResponseEntity<EmptyResponse> deleteCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+\n+    this.leonardoNotebooksClient.deleteCluster(\n+        workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<ClusterLocalizeResponse> localize(\n-      String projectName, String clusterName, ClusterLocalizeRequest body) {\n+      String workspaceNamespace, ClusterLocalizeRequest body) {\n+    DbWorkspace dbWorkspace = lookupWorkspace(workspaceNamespace);\n     workspaceService.enforceWorkspaceAccessLevel(\n-        body.getWorkspaceNamespace(), body.getWorkspaceId(), WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(body.getWorkspaceNamespace(), body.getWorkspaceId());\n+        dbWorkspace.getWorkspaceNamespace(),\n+        dbWorkspace.getFirecloudName(),\n+        WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(\n+        dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n \n-    FirecloudWorkspace fcWorkspace;\n+    FirecloudWorkspace firecloudWorkspace;\n     try {\n-      fcWorkspace =\n+      firecloudWorkspace =\n           fireCloudService\n-              .getWorkspace(body.getWorkspaceNamespace(), body.getWorkspaceId())\n+              .getWorkspace(dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName())\n               .getWorkspace();\n     } catch (NotFoundException e) {\n       throw new NotFoundException(\n           String.format(\n               \"workspace %s/%s not found or not accessible\",\n-              body.getWorkspaceNamespace(), body.getWorkspaceId()));\n+              dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName()));\n     }\n-    DbCdrVersion cdrVersion =\n-        workspaceService\n-            .getRequired(body.getWorkspaceNamespace(), body.getWorkspaceId())\n-            .getCdrVersion();\n+    DbCdrVersion cdrVersion = dbWorkspace.getCdrVersion();\n \n     // For the common case where the notebook cluster matches the workspace\n     // namespace, simply name the directory as the workspace ID; else we\n     // include the namespace in the directory name to avoid possible conflicts\n     // in workspace IDs.\n-    String gcsNotebooksDir = \"gs://\" + fcWorkspace.getBucketName() + \"/notebooks\";\n-    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n-    long workspaceId =\n-        workspaceService\n-            .getRequired(body.getWorkspaceNamespace(), body.getWorkspaceId())\n-            .getWorkspaceId();\n+    String gcsNotebooksDir = \"gs://\" + firecloudWorkspace.getBucketName() + \"/notebooks\";\n+    long workspaceId = dbWorkspace.getWorkspaceId();\n \n     body.getNotebookNames()\n         .forEach(\n             notebook ->\n                 userRecentResourceService.updateNotebookEntry(\n                     workspaceId, userProvider.get().getUserId(), gcsNotebooksDir + \"/\" + notebook));\n-    String workspacePath = body.getWorkspaceId();\n-    if (!projectName.equals(body.getWorkspaceNamespace())) {\n-      workspacePath =\n-          body.getWorkspaceNamespace()\n-              + FireCloudService.WORKSPACE_DELIMITER\n-              + body.getWorkspaceId();\n-    }\n \n+    String workspacePath = dbWorkspace.getFirecloudName();", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNDk0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383324945", "bodyText": "Updated lambda var name.", "author": "gjuggler", "createdAt": "2020-02-24T15:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2OTk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MTMyNg==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382671326", "bodyText": "I don't really know what localize means in this context, but I can see this method does a large number of things that are all important (although transaction management between service calls is potentially sloppy). It would be helpful for readability and testability to have a high-level comment and also break down the body into helper methods and service methods. (Can certainly come later)", "author": "jaycarlton", "createdAt": "2020-02-21T16:15:09Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.getCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()));\n \n-    String clusterName = clusterNameForUser(user);\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n+  }\n \n-    org.pmiops.workbench.notebooks.model.Cluster fcCluster;\n-    try {\n-      fcCluster = this.leonardoNotebooksClient.getCluster(billingProjectId, clusterName);\n-    } catch (NotFoundException e) {\n-      fcCluster =\n-          this.leonardoNotebooksClient.createCluster(\n-              billingProjectId, clusterName, workspaceFirecloudName);\n-    }\n+  @Override\n+  public ResponseEntity<Cluster> createCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    int retries = Optional.ofNullable(user.getClusterCreateRetries()).orElse(0);\n-    if (org.pmiops.workbench.notebooks.model.ClusterStatus.ERROR.equals(fcCluster.getStatus())) {\n-      if (retries <= 2) {\n-        this.userService.setClusterRetryCount(retries + 1);\n-        log.warning(\"Cluster has errored with logs: \");\n-        if (fcCluster.getErrors() != null) {\n-          for (ClusterError e : fcCluster.getErrors()) {\n-            log.warning(e.getErrorMessage());\n-          }\n-        }\n-        log.warning(\"Retrying cluster creation.\");\n-\n-        this.leonardoNotebooksClient.deleteCluster(billingProjectId, clusterName);\n-      }\n-    } else if (org.pmiops.workbench.notebooks.model.ClusterStatus.RUNNING.equals(\n-            fcCluster.getStatus())\n-        && retries != 0) {\n-      this.userService.setClusterRetryCount(0);\n-    }\n-    DefaultClusterResponse resp = new DefaultClusterResponse();\n-    resp.setDefaultCluster(TO_ALL_OF_US_CLUSTER.apply(fcCluster));\n-    return ResponseEntity.ok(resp);\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.createCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()), firecloudWorkspaceName);\n+\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n   }\n \n   @Override\n-  public ResponseEntity<EmptyResponse> deleteCluster(String projectName, String clusterName) {\n-    this.userService.setClusterRetryCount(0);\n-    this.leonardoNotebooksClient.deleteCluster(projectName, clusterName);\n+  public ResponseEntity<EmptyResponse> deleteCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+\n+    this.leonardoNotebooksClient.deleteCluster(\n+        workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<ClusterLocalizeResponse> localize(\n-      String projectName, String clusterName, ClusterLocalizeRequest body) {\n+      String workspaceNamespace, ClusterLocalizeRequest body) {", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMzYxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383323615", "bodyText": "Reasonable critique, but I only really dug into this controller method to clean up the API surface, so I'll punt on this to avoid scope creep.", "author": "gjuggler", "createdAt": "2020-02-24T15:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MTMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NDM2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382674362", "bodyText": "Above @ line 284, I think we can have a better name than localizeMap, e.g. bucketPathToNotebookPath if I'm reading things right.", "author": "jaycarlton", "createdAt": "2020-02-21T16:20:35Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -306,7 +285,7 @@\n \n     // The Welder extension offers direct links to/from playground mode; write the AoU config file\n     // to both locations so notebooks will work in either directory.\n-    String aouConfigUri = aouConfigDataUri(fcWorkspace, cdrVersion, projectName);\n+    String aouConfigUri = aouConfigDataUri(firecloudWorkspace, cdrVersion, workspaceNamespace);", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NTY1OQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382675659", "bodyText": "Can we rename targetDir to notebookLocalDir? Also, collecting lines 269-272 into a helper method would be nice.", "author": "jaycarlton", "createdAt": "2020-02-21T16:22:49Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -186,115 +183,97 @@\n     return ResponseEntity.ok(clustersInProjectAffected);\n   }\n \n+  private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return workspaceService\n+        .getByNamespace(workspaceNamespace)\n+        .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+  }\n+\n   @Override\n-  public ResponseEntity<DefaultClusterResponse> listClusters(\n-      String billingProjectId, String workspaceFirecloudName) {\n-    if (billingProjectId == null) {\n-      throw new BadRequestException(\"Must specify billing project\");\n-    }\n+  public ResponseEntity<Cluster> getCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n     workspaceService.enforceWorkspaceAccessLevel(\n-        billingProjectId, workspaceFirecloudName, WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(billingProjectId, workspaceFirecloudName);\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    DbUser user = this.userProvider.get();\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.getCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()));\n \n-    String clusterName = clusterNameForUser(user);\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n+  }\n \n-    org.pmiops.workbench.notebooks.model.Cluster fcCluster;\n-    try {\n-      fcCluster = this.leonardoNotebooksClient.getCluster(billingProjectId, clusterName);\n-    } catch (NotFoundException e) {\n-      fcCluster =\n-          this.leonardoNotebooksClient.createCluster(\n-              billingProjectId, clusterName, workspaceFirecloudName);\n-    }\n+  @Override\n+  public ResponseEntity<Cluster> createCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    int retries = Optional.ofNullable(user.getClusterCreateRetries()).orElse(0);\n-    if (org.pmiops.workbench.notebooks.model.ClusterStatus.ERROR.equals(fcCluster.getStatus())) {\n-      if (retries <= 2) {\n-        this.userService.setClusterRetryCount(retries + 1);\n-        log.warning(\"Cluster has errored with logs: \");\n-        if (fcCluster.getErrors() != null) {\n-          for (ClusterError e : fcCluster.getErrors()) {\n-            log.warning(e.getErrorMessage());\n-          }\n-        }\n-        log.warning(\"Retrying cluster creation.\");\n-\n-        this.leonardoNotebooksClient.deleteCluster(billingProjectId, clusterName);\n-      }\n-    } else if (org.pmiops.workbench.notebooks.model.ClusterStatus.RUNNING.equals(\n-            fcCluster.getStatus())\n-        && retries != 0) {\n-      this.userService.setClusterRetryCount(0);\n-    }\n-    DefaultClusterResponse resp = new DefaultClusterResponse();\n-    resp.setDefaultCluster(TO_ALL_OF_US_CLUSTER.apply(fcCluster));\n-    return ResponseEntity.ok(resp);\n+    org.pmiops.workbench.notebooks.model.Cluster firecloudCluster =\n+        leonardoNotebooksClient.createCluster(\n+            workspaceNamespace, clusterNameForUser(userProvider.get()), firecloudWorkspaceName);\n+\n+    return ResponseEntity.ok(TO_ALL_OF_US_CLUSTER.apply(firecloudCluster));\n   }\n \n   @Override\n-  public ResponseEntity<EmptyResponse> deleteCluster(String projectName, String clusterName) {\n-    this.userService.setClusterRetryCount(0);\n-    this.leonardoNotebooksClient.deleteCluster(projectName, clusterName);\n+  public ResponseEntity<EmptyResponse> deleteCluster(String workspaceNamespace) {\n+    String firecloudWorkspaceName = lookupWorkspace(workspaceNamespace).getFirecloudName();\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n+\n+    this.leonardoNotebooksClient.deleteCluster(\n+        workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<ClusterLocalizeResponse> localize(\n-      String projectName, String clusterName, ClusterLocalizeRequest body) {\n+      String workspaceNamespace, ClusterLocalizeRequest body) {\n+    DbWorkspace dbWorkspace = lookupWorkspace(workspaceNamespace);\n     workspaceService.enforceWorkspaceAccessLevel(\n-        body.getWorkspaceNamespace(), body.getWorkspaceId(), WorkspaceAccessLevel.READER);\n-    workspaceService.validateActiveBilling(body.getWorkspaceNamespace(), body.getWorkspaceId());\n+        dbWorkspace.getWorkspaceNamespace(),\n+        dbWorkspace.getFirecloudName(),\n+        WorkspaceAccessLevel.WRITER);\n+    workspaceService.validateActiveBilling(\n+        dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n \n-    FirecloudWorkspace fcWorkspace;\n+    FirecloudWorkspace firecloudWorkspace;\n     try {\n-      fcWorkspace =\n+      firecloudWorkspace =\n           fireCloudService\n-              .getWorkspace(body.getWorkspaceNamespace(), body.getWorkspaceId())\n+              .getWorkspace(dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName())\n               .getWorkspace();\n     } catch (NotFoundException e) {\n       throw new NotFoundException(\n           String.format(\n               \"workspace %s/%s not found or not accessible\",\n-              body.getWorkspaceNamespace(), body.getWorkspaceId()));\n+              dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName()));\n     }\n-    DbCdrVersion cdrVersion =\n-        workspaceService\n-            .getRequired(body.getWorkspaceNamespace(), body.getWorkspaceId())\n-            .getCdrVersion();\n+    DbCdrVersion cdrVersion = dbWorkspace.getCdrVersion();\n \n     // For the common case where the notebook cluster matches the workspace\n     // namespace, simply name the directory as the workspace ID; else we\n     // include the namespace in the directory name to avoid possible conflicts\n     // in workspace IDs.\n-    String gcsNotebooksDir = \"gs://\" + fcWorkspace.getBucketName() + \"/notebooks\";\n-    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n-    long workspaceId =\n-        workspaceService\n-            .getRequired(body.getWorkspaceNamespace(), body.getWorkspaceId())\n-            .getWorkspaceId();\n+    String gcsNotebooksDir = \"gs://\" + firecloudWorkspace.getBucketName() + \"/notebooks\";\n+    long workspaceId = dbWorkspace.getWorkspaceId();\n \n     body.getNotebookNames()\n         .forEach(\n             notebook ->\n                 userRecentResourceService.updateNotebookEntry(\n                     workspaceId, userProvider.get().getUserId(), gcsNotebooksDir + \"/\" + notebook));\n-    String workspacePath = body.getWorkspaceId();\n-    if (!projectName.equals(body.getWorkspaceNamespace())) {\n-      workspacePath =\n-          body.getWorkspaceNamespace()\n-              + FireCloudService.WORKSPACE_DELIMITER\n-              + body.getWorkspaceId();\n-    }\n \n+    String workspacePath = dbWorkspace.getFirecloudName();\n     String editDir = \"workspaces/\" + workspacePath;\n     String playgroundDir = \"workspaces_playground/\" + workspacePath;\n     String targetDir = body.getPlaygroundMode() ? playgroundDir : editDir;\n \n     leonardoNotebooksClient.createStorageLink(\n-        projectName,\n-        clusterName,\n+        workspaceNamespace,", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNTYxOA==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383325618", "bodyText": "I'll defer to future work. No functional changes were made to localize, so I'd like to avoid doing too much bike-shedding here.", "author": "gjuggler", "createdAt": "2020-02-24T15:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NTY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 66599b505..f12739ad4 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -223,7 +224,7 @@ public class ClusterController implements ClusterApiDelegate {\n     workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n \n-    this.leonardoNotebooksClient.deleteCluster(\n+    leonardoNotebooksClient.deleteCluster(\n         workspaceNamespace, clusterNameForUser(userProvider.get()));\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzM0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382677346", "bodyText": "nit: maybe rename lambda variable to unusedContext. You can drop the parenthesis for single-arg lambdas FWIW.", "author": "jaycarlton", "createdAt": "2020-02-21T16:25:41Z", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -169,7 +171,12 @@ public void deleteCluster(String googleProject, String clusterName) {\n   @Override\n   public Cluster getCluster(String googleProject, String clusterName) {\n     ClusterApi clusterApi = clusterApiProvider.get();\n-    return retryHandler.run((context) -> clusterApi.getCluster(googleProject, clusterName));\n+    try {\n+      return retryHandler.runAndThrowChecked(\n+          (context) -> clusterApi.getCluster(googleProject, clusterName));", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNjE4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383326189", "bodyText": "I'll prefer consistency with the rest of this file, leaving as-is.", "author": "gjuggler", "createdAt": "2020-02-24T15:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cf112c33a516c89764e860451bc56e4e4b5c93d6", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java b/api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java\nindex e11efe8b1..ae9165f56 100644\n--- a/api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java\n\n@@ -175,7 +176,7 @@ public class LeonardoNotebooksClientImpl implements LeonardoNotebooksClient {\n       return retryHandler.runAndThrowChecked(\n           (context) -> clusterApi.getCluster(googleProject, clusterName));\n     } catch (ApiException e) {\n-      throw convertNotebookException(e);\n+      throw ExceptionUtils.convertNotebookException(e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3OTA5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382679097", "bodyText": "What do you think about either naming this getWorkspaceOrThrow() and/or adding a throws NotFoundException to the signature. @ericsong and I came to the compromise that doing this on service methods is a net win, even though you ordinarily don't declare runtime exceptions.", "author": "jaycarlton", "createdAt": "2020-02-21T16:28:45Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -33,6 +33,8 @@\n \n   List<WorkspaceResponse> getWorkspacesAndPublicWorkspaces();\n \n+  WorkspaceResponse getWorkspace(String workspaceNamespace);", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNzY5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383327695", "bodyText": "Seems like a reasonable compromise. To canonize this convention, please make a PR to add this to code-structure.md and start linking to that section in code reviews.", "author": "gjuggler", "createdAt": "2020-02-24T15:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3OTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java\nindex 63293385a..c5405010e 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java\n\n@@ -33,7 +34,7 @@ public interface WorkspaceService {\n \n   List<WorkspaceResponse> getWorkspacesAndPublicWorkspaces();\n \n-  WorkspaceResponse getWorkspace(String workspaceNamespace);\n+  WorkspaceResponse getWorkspace(String workspaceNamespace) throws NotFoundException;\n \n   WorkspaceResponse getWorkspace(String workspaceNamespace, String workspaceId);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MTA4MQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382681081", "bodyText": "at line 241 below, I'm surprised to see us throwing a WorkbenchException exception from the service level; in principle code that's not running in a REST stack at all should be able to call this method.", "author": "jaycarlton", "createdAt": "2020-02-21T16:32:17Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -204,18 +204,32 @@ public DbWorkspace get(String ns, String firecloudName) {\n         .collect(Collectors.toList());\n   }\n \n+  @Transactional\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace) {\n+    DbWorkspace dbWorkspace =\n+        getByNamespace(workspaceNamespace)\n+            .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n+    return getWorkspaceImpl(dbWorkspace);\n+  }\n+\n   @Transactional\n   @Override\n   public WorkspaceResponse getWorkspace(String workspaceNamespace, String workspaceId) {\n     DbWorkspace dbWorkspace = getRequired(workspaceNamespace, workspaceId);\n+    return getWorkspaceImpl(dbWorkspace);\n+  }\n \n+  private WorkspaceResponse getWorkspaceImpl(DbWorkspace dbWorkspace) {\n     FirecloudWorkspaceResponse fcResponse;\n     FirecloudWorkspace fcWorkspace;\n \n     WorkspaceResponse workspaceResponse = new WorkspaceResponse();\n \n     // This enforces access controls.\n-    fcResponse = fireCloudService.getWorkspace(workspaceNamespace, workspaceId);\n+    fcResponse =\n+        fireCloudService.getWorkspace(\n+            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMDA1OQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383330059", "bodyText": "Is there anything in WorkbenchException that requires REST? My conceptual model is that WorkbenchExcxeption contains typed exceptions that can be thrown at the service level, and then we use @ResponseStatus annotations to allow our controller / web layer to appropriately map these exceptions to response codes.", "author": "gjuggler", "createdAt": "2020-02-24T15:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3ODI5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r384578291", "bodyText": "I was thinking @ericsong was leading the charge to get these out of the service level. Maybe I misunderstood.", "author": "jaycarlton", "createdAt": "2020-02-26T15:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MTA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java\nindex c16db4fa4..0b728d4fa 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java\n\n@@ -206,7 +206,7 @@ public class WorkspaceServiceImpl implements WorkspaceService, GaugeDataCollecto\n \n   @Transactional\n   @Override\n-  public WorkspaceResponse getWorkspace(String workspaceNamespace) {\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace) throws NotFoundException {\n     DbWorkspace dbWorkspace =\n         getByNamespace(workspaceNamespace)\n             .orElseThrow(() -> new NotFoundException(\"Workspace not found: \" + workspaceNamespace));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NTk0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382685941", "bodyText": "This comment would be very useful in the code as well.", "author": "jaycarlton", "createdAt": "2020-02-21T16:41:19Z", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -83,12 +84,17 @@\n @Transactional(propagation = Propagation.NOT_SUPPORTED)\n public class ClusterControllerTest {\n \n-  private static final String BILLING_PROJECT_ID = \"proj\";\n-  private static final String BILLING_PROJECT_ID_2 = \"proj2\";\n+  private static final String BILLING_PROJECT_ID = \"aou-rw-1234\";\n+  private static final String BILLING_PROJECT_ID_2 = \"aou-rw-5678\";\n   // a workspace's namespace is always its billing project ID\n   private static final String WORKSPACE_NS = BILLING_PROJECT_ID;\n-  private static final String WORKSPACE_ID = \"wsid\";\n-  private static final String WORKSPACE_NAME = \"wsn\";\n+  // Workspace ID is also known as firecloud_name. This identifier is generated by", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMjc1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383332752", "bodyText": "I added it to the workbench.yaml parameters definition description, which feels like the most centralized place where this lives. Maybe it could go on the DB model class as well, but we tend to not have as much comment type stuff over there.", "author": "gjuggler", "createdAt": "2020-02-24T15:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NTk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a26dd3385a17a0789b2a5787619730d24a46b3b", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\nindex 06d99daa5..5b8ac8efe 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n\n@@ -84,17 +84,12 @@ import org.springframework.transaction.annotation.Transactional;\n @Transactional(propagation = Propagation.NOT_SUPPORTED)\n public class ClusterControllerTest {\n \n-  private static final String BILLING_PROJECT_ID = \"aou-rw-1234\";\n-  private static final String BILLING_PROJECT_ID_2 = \"aou-rw-5678\";\n+  private static final String BILLING_PROJECT_ID = \"proj\";\n+  private static final String BILLING_PROJECT_ID_2 = \"proj2\";\n   // a workspace's namespace is always its billing project ID\n   private static final String WORKSPACE_NS = BILLING_PROJECT_ID;\n-  // Workspace ID is also known as firecloud_name. This identifier is generated by\n-  // Firecloud, based on the name of the workspace upon first creation. Firecloud\n-  // tends to remove whitespace and punctuation, lowercase everything, and concatenate\n-  // it together. Note that when a workspace name changes, the Firecloud name stays\n-  // the same.\n-  private static final String WORKSPACE_ID = \"myfirstworkspace\";\n-  private static final String WORKSPACE_NAME = \"My First Workspace\";\n+  private static final String WORKSPACE_ID = \"wsid\";\n+  private static final String WORKSPACE_NAME = \"wsn\";\n   private static final String LOGGED_IN_USER_EMAIL = \"bob@gmail.com\";\n   private static final String OTHER_USER_EMAIL = \"alice@gmail.com\";\n   private static final String BUCKET_NAME = \"workspace-bucket\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NjM2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382686361", "bodyText": "nit: I like to name mocked members with a mock prefix, especially for large test classes.", "author": "jaycarlton", "createdAt": "2020-02-21T16:42:02Z", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -148,14 +144,19 @@ Random random() {\n \n   @Captor private ArgumentCaptor<Map<String, String>> mapCaptor;\n \n-  @Autowired ClusterAuditor clusterAuditor;\n-  @Autowired LeonardoNotebooksClient notebookService;\n-  @Autowired FireCloudService fireCloudService;\n+  @MockBean AdminActionHistoryDao adminActionHistoryDao;", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMzA2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383333066", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-02-24T15:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NjM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\nindex 06d99daa5..e66f44524 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n\n@@ -144,15 +144,15 @@ public class ClusterControllerTest {\n \n   @Captor private ArgumentCaptor<Map<String, String>> mapCaptor;\n \n-  @MockBean AdminActionHistoryDao adminActionHistoryDao;\n-  @MockBean ClusterAuditor clusterAuditor;\n-  @MockBean ComplianceService complianceService;\n-  @MockBean DirectoryService directoryService;\n-  @MockBean FireCloudService fireCloudService;\n-  @MockBean LeonardoNotebooksClient notebookService;\n-  @MockBean UserRecentResourceService userRecentResourceService;\n-  @MockBean UserServiceAuditor userServiceAuditor;\n-  @MockBean WorkspaceService workspaceService;\n+  @MockBean AdminActionHistoryDao mockAdminActionHistoryDao;\n+  @MockBean ClusterAuditor mockClusterAuditor;\n+  @MockBean ComplianceService mockComplianceService;\n+  @MockBean DirectoryService mockDirectoryService;\n+  @MockBean FireCloudService mockFireCloudService;\n+  @MockBean LeonardoNotebooksClient mockLeoNotebooksClient;\n+  @MockBean UserRecentResourceService mockUserRecentResourceService;\n+  @MockBean UserServiceAuditor mockUserServiceAuditor;\n+  @MockBean WorkspaceService mockWorkspaceService;\n \n   @Autowired UserDao userDao;\n   @Autowired WorkspaceMapper workspaceMapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NjgwNA==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382686804", "bodyText": "Is this name intentional? Looks like there's a separate org.pmiops.workbench.notebooks.NotebooksService.", "author": "jaycarlton", "createdAt": "2020-02-21T16:42:49Z", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -148,14 +144,19 @@ Random random() {\n \n   @Captor private ArgumentCaptor<Map<String, String>> mapCaptor;\n \n-  @Autowired ClusterAuditor clusterAuditor;\n-  @Autowired LeonardoNotebooksClient notebookService;\n-  @Autowired FireCloudService fireCloudService;\n+  @MockBean AdminActionHistoryDao adminActionHistoryDao;\n+  @MockBean ClusterAuditor clusterAuditor;\n+  @MockBean ComplianceService complianceService;\n+  @MockBean DirectoryService directoryService;\n+  @MockBean FireCloudService fireCloudService;\n+  @MockBean LeonardoNotebooksClient notebookService;", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMzg5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383333896", "bodyText": "Changed.", "author": "gjuggler", "createdAt": "2020-02-24T15:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NjgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\nindex 06d99daa5..e66f44524 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n\n@@ -144,15 +144,15 @@ public class ClusterControllerTest {\n \n   @Captor private ArgumentCaptor<Map<String, String>> mapCaptor;\n \n-  @MockBean AdminActionHistoryDao adminActionHistoryDao;\n-  @MockBean ClusterAuditor clusterAuditor;\n-  @MockBean ComplianceService complianceService;\n-  @MockBean DirectoryService directoryService;\n-  @MockBean FireCloudService fireCloudService;\n-  @MockBean LeonardoNotebooksClient notebookService;\n-  @MockBean UserRecentResourceService userRecentResourceService;\n-  @MockBean UserServiceAuditor userServiceAuditor;\n-  @MockBean WorkspaceService workspaceService;\n+  @MockBean AdminActionHistoryDao mockAdminActionHistoryDao;\n+  @MockBean ClusterAuditor mockClusterAuditor;\n+  @MockBean ComplianceService mockComplianceService;\n+  @MockBean DirectoryService mockDirectoryService;\n+  @MockBean FireCloudService mockFireCloudService;\n+  @MockBean LeonardoNotebooksClient mockLeoNotebooksClient;\n+  @MockBean UserRecentResourceService mockUserRecentResourceService;\n+  @MockBean UserServiceAuditor mockUserServiceAuditor;\n+  @MockBean WorkspaceService mockWorkspaceService;\n \n   @Autowired UserDao userDao;\n   @Autowired WorkspaceMapper workspaceMapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MDk2OA==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r382690968", "bodyText": "Do we still need the first doThrow if we're going to verify that the method that does the throwing isn't called? Here and below.", "author": "jaycarlton", "createdAt": "2020-02-21T16:50:22Z", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -505,96 +490,89 @@ public void testLocalize() {\n   public void testLocalize_playgroundMode() {\n     ClusterLocalizeRequest req =\n         new ClusterLocalizeRequest()\n-            .workspaceNamespace(WORKSPACE_NS)\n-            .workspaceId(WORKSPACE_ID)\n             .notebookNames(ImmutableList.of(\"foo.ipynb\"))\n             .playgroundMode(true);\n     stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, LOGGED_IN_USER_EMAIL);\n-    ClusterLocalizeResponse resp =\n-        clusterController.localize(BILLING_PROJECT_ID, \"cluster\", req).getBody();\n-    assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces_playground/wsid\");\n-    verify(notebookService).localize(eq(BILLING_PROJECT_ID), eq(\"cluster\"), mapCaptor.capture());\n+    ClusterLocalizeResponse resp = clusterController.localize(BILLING_PROJECT_ID, req).getBody();\n+    assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces_playground/myfirstworkspace\");\n+    verify(notebookService)\n+        .localize(eq(BILLING_PROJECT_ID), eq(getClusterName()), mapCaptor.capture());\n     Map<String, String> localizeMap = mapCaptor.getValue();\n     assertThat(localizeMap.keySet())\n         .containsExactly(\n-            \"workspaces_playground/wsid/foo.ipynb\",\n-            \"workspaces_playground/wsid/.all_of_us_config.json\",\n-            \"workspaces/wsid/.all_of_us_config.json\");\n+            \"workspaces_playground/myfirstworkspace/foo.ipynb\",\n+            \"workspaces_playground/myfirstworkspace/.all_of_us_config.json\",\n+            \"workspaces/myfirstworkspace/.all_of_us_config.json\");\n     assertThat(localizeMap)\n         .containsEntry(\n-            \"workspaces_playground/wsid/foo.ipynb\", \"gs://workspace-bucket/notebooks/foo.ipynb\");\n+            \"workspaces_playground/myfirstworkspace/foo.ipynb\",\n+            \"gs://workspace-bucket/notebooks/foo.ipynb\");\n   }\n \n   @Test\n   public void testLocalize_differentNamespace() {\n     ClusterLocalizeRequest req =\n         new ClusterLocalizeRequest()\n-            .workspaceNamespace(WORKSPACE_NS)\n-            .workspaceId(WORKSPACE_ID)\n             .notebookNames(ImmutableList.of(\"foo.ipynb\"))\n             .playgroundMode(false);\n     stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, LOGGED_IN_USER_EMAIL);\n-    ClusterLocalizeResponse resp =\n-        clusterController.localize(\"other-proj\", \"cluster\", req).getBody();\n-    verify(notebookService).localize(eq(\"other-proj\"), eq(\"cluster\"), mapCaptor.capture());\n+    stubGetWorkspace(\"other-proj\", \"myotherworkspace\", LOGGED_IN_USER_EMAIL);\n+    ClusterLocalizeResponse resp = clusterController.localize(\"other-proj\", req).getBody();\n+    verify(notebookService).localize(eq(\"other-proj\"), eq(getClusterName()), mapCaptor.capture());\n \n     Map<String, String> localizeMap = mapCaptor.getValue();\n     assertThat(localizeMap.keySet())\n         .containsExactly(\n-            \"workspaces/proj__wsid/foo.ipynb\",\n-            \"workspaces/proj__wsid/.all_of_us_config.json\",\n-            \"workspaces_playground/proj__wsid/.all_of_us_config.json\");\n+            \"workspaces/myotherworkspace/foo.ipynb\",\n+            \"workspaces/myotherworkspace/.all_of_us_config.json\",\n+            \"workspaces_playground/myotherworkspace/.all_of_us_config.json\");\n     assertThat(localizeMap)\n         .containsEntry(\n-            \"workspaces/proj__wsid/foo.ipynb\", \"gs://workspace-bucket/notebooks/foo.ipynb\");\n-    assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/proj__wsid\");\n+            \"workspaces/myotherworkspace/foo.ipynb\", \"gs://workspace-bucket/notebooks/foo.ipynb\");\n+    assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/myotherworkspace\");\n     JSONObject aouJson =\n-        dataUriToJson(localizeMap.get(\"workspaces/proj__wsid/.all_of_us_config.json\"));\n+        dataUriToJson(localizeMap.get(\"workspaces/myotherworkspace/.all_of_us_config.json\"));\n     assertThat(aouJson.getString(\"BILLING_CLOUD_PROJECT\")).isEqualTo(\"other-proj\");\n   }\n \n   @Test\n   public void testLocalize_noNotebooks() {\n     ClusterLocalizeRequest req = new ClusterLocalizeRequest();\n-    req.setWorkspaceNamespace(WORKSPACE_NS);\n-    req.setWorkspaceId(WORKSPACE_ID);\n     req.setPlaygroundMode(false);\n     stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, LOGGED_IN_USER_EMAIL);\n-    ClusterLocalizeResponse resp =\n-        clusterController.localize(BILLING_PROJECT_ID, \"cluster\", req).getBody();\n-    verify(notebookService).localize(eq(BILLING_PROJECT_ID), eq(\"cluster\"), mapCaptor.capture());\n+    ClusterLocalizeResponse resp = clusterController.localize(BILLING_PROJECT_ID, req).getBody();\n+    verify(notebookService)\n+        .localize(eq(BILLING_PROJECT_ID), eq(getClusterName()), mapCaptor.capture());\n \n     // Config files only.\n     Map<String, String> localizeMap = mapCaptor.getValue();\n     assertThat(localizeMap.keySet())\n         .containsExactly(\n-            \"workspaces_playground/wsid/.all_of_us_config.json\",\n-            \"workspaces/wsid/.all_of_us_config.json\");\n-    assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n+            \"workspaces_playground/myfirstworkspace/.all_of_us_config.json\",\n+            \"workspaces/myfirstworkspace/.all_of_us_config.json\");\n+    assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/myfirstworkspace\");\n   }\n \n   @Test\n-  public void listCluster_validateActiveBilling() {\n+  public void GetCluster_validateActiveBilling() {\n     doThrow(ForbiddenException.class)\n         .when(workspaceService)\n         .validateActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n \n-    assertThrows(\n-        ForbiddenException.class, () -> clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID));\n+    assertThrows(ForbiddenException.class, () -> clusterController.getCluster(WORKSPACE_NS));\n   }\n \n   @Test\n-  public void listCluster_validateActiveBilling_checkAccessFirst() {\n+  public void getCluster_validateActiveBilling_checkAccessFirst() {\n     doThrow(ForbiddenException.class)\n         .when(workspaceService)\n         .validateActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n \n     doThrow(ForbiddenException.class)\n         .when(workspaceService)\n-        .enforceWorkspaceAccessLevel(WORKSPACE_NS, WORKSPACE_ID, WorkspaceAccessLevel.READER);\n+        .enforceWorkspaceAccessLevel(WORKSPACE_NS, WORKSPACE_ID, WorkspaceAccessLevel.WRITER);\n \n-    assertThrows(\n-        ForbiddenException.class, () -> clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID));\n+    assertThrows(ForbiddenException.class, () -> clusterController.getCluster(WORKSPACE_NS));\n     verify(workspaceService, never()).validateActiveBilling(anyString(), anyString());", "originalCommit": "67ab8fb211b1b76440cff340343c7a107903a87b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MzU2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r383343562", "bodyText": "Good catch \u2013\u00a0fixed.", "author": "gjuggler", "createdAt": "2020-02-24T15:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MDk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "103042c8e06f54110dedea5a6bfcdf00a9581244", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\nindex 06d99daa5..e66f44524 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n\n@@ -482,7 +482,7 @@ public class ClusterControllerTest {\n     assertThat(aouJson.getString(\"WORKSPACE_ID\")).isEqualTo(WORKSPACE_ID);\n     assertThat(aouJson.getString(\"BILLING_CLOUD_PROJECT\")).isEqualTo(BILLING_PROJECT_ID);\n     assertThat(aouJson.getString(\"API_HOST\")).isEqualTo(API_HOST);\n-    verify(userRecentResourceService, times(1))\n+    verify(mockUserRecentResourceService, times(1))\n         .updateNotebookEntry(anyLong(), anyLong(), anyString());\n   }\n \n"}}, {"oid": "103042c8e06f54110dedea5a6bfcdf00a9581244", "url": "https://github.com/all-of-us/workbench/commit/103042c8e06f54110dedea5a6bfcdf00a9581244", "message": "Spotless formatting and test fix.", "committedDate": "2020-02-25T00:54:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4OTIyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r384689221", "bodyText": "nit: Ignore if this has already been discussed to death elsewhere, but not a big fan of this static import. In general I don't love them outside of tests and in this case it's not saving much space below", "author": "calbach", "createdAt": "2020-02-26T18:44:07Z", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -1,5 +1,7 @@\n package org.pmiops.workbench.notebooks;\n \n+import static org.pmiops.workbench.exceptions.ExceptionUtils.convertNotebookException;", "originalCommit": "14fa860ca82691244feed76bd673637fde97f834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MDY3NA==", "url": "https://github.com/all-of-us/workbench/pull/3135#discussion_r385350674", "bodyText": "Hah \u2013\u00a0I'm a blind slave to IntelliJ, and they put the \"import static...\" option above the \"quality usage of...\" so I chose the first one. Fixed!", "author": "gjuggler", "createdAt": "2020-02-27T20:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4OTIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf112c33a516c89764e860451bc56e4e4b5c93d6", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java b/api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java\nindex e11efe8b1..ae9165f56 100644\n--- a/api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java\n\n@@ -1,7 +1,5 @@\n package org.pmiops.workbench.notebooks;\n \n-import static org.pmiops.workbench.exceptions.ExceptionUtils.convertNotebookException;\n-\n import com.google.common.collect.ImmutableMap;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"oid": "6a26dd3385a17a0789b2a5787619730d24a46b3b", "url": "https://github.com/all-of-us/workbench/commit/6a26dd3385a17a0789b2a5787619730d24a46b3b", "message": "Work in progress on API refactor and unified client-side polling / init flow.", "committedDate": "2020-02-27T21:42:15Z", "type": "commit"}, {"oid": "2bf95e8e8167997a64b03013de5a05e7a2fec55b", "url": "https://github.com/all-of-us/workbench/commit/2bf95e8e8167997a64b03013de5a05e7a2fec55b", "message": "WIP fleshing out cluster retry loop.", "committedDate": "2020-02-27T21:42:15Z", "type": "commit"}, {"oid": "62b03f76c31daeeb8813946b027b9f640d825531", "url": "https://github.com/all-of-us/workbench/commit/62b03f76c31daeeb8813946b027b9f640d825531", "message": "Add and fix unit & controller tests.", "committedDate": "2020-02-27T21:45:44Z", "type": "commit"}, {"oid": "9d3001eb19cc33c064a30c2e631b87dfaf4172c2", "url": "https://github.com/all-of-us/workbench/commit/9d3001eb19cc33c064a30c2e631b87dfaf4172c2", "message": "A few more text fixes.", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "0587b2a25033549a79f9f3c3b27333696c9dd48d", "url": "https://github.com/all-of-us/workbench/commit/0587b2a25033549a79f9f3c3b27333696c9dd48d", "message": "Incorporate initializer into reset-cluster-button, use jest.fakeTimers, add more tests.", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "0fa7a7ace873ebda6e8e0c3b1c7af4d701b22953", "url": "https://github.com/all-of-us/workbench/commit/0fa7a7ace873ebda6e8e0c3b1c7af4d701b22953", "message": "Fix API tests.", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "87439e193b8fc63633d093c578a133035a85b008", "url": "https://github.com/all-of-us/workbench/commit/87439e193b8fc63633d093c578a133035a85b008", "message": "Add some class comments.", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "e84ca222bb9d8addeb3f0a5044adc0cda94d26fe", "url": "https://github.com/all-of-us/workbench/commit/e84ca222bb9d8addeb3f0a5044adc0cda94d26fe", "message": "Fix ng lint error", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "3bc2e4be30a4e8b941de45252aab07c9d3a4e3d5", "url": "https://github.com/all-of-us/workbench/commit/3bc2e4be30a4e8b941de45252aab07c9d3a4e3d5", "message": "PR feedback.", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "4b21497759abbd113bcdf7138238658eb1cc9c8d", "url": "https://github.com/all-of-us/workbench/commit/4b21497759abbd113bcdf7138238658eb1cc9c8d", "message": "Spotless formatting and test fix.", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "560306b75cc0d0b7454c416e4b9c74a9e6fb78dd", "url": "https://github.com/all-of-us/workbench/commit/560306b75cc0d0b7454c416e4b9c74a9e6fb78dd", "message": "Fix ts lint", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "59a604b90d0ea938cdaebdda0eae7ea9cce8790e", "url": "https://github.com/all-of-us/workbench/commit/59a604b90d0ea938cdaebdda0eae7ea9cce8790e", "message": "Revert unintentional change to DataSetController (bad rebase).", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "cf112c33a516c89764e860451bc56e4e4b5c93d6", "url": "https://github.com/all-of-us/workbench/commit/cf112c33a516c89764e860451bc56e4e4b5c93d6", "message": "Final PR feedback.", "committedDate": "2020-02-27T21:45:45Z", "type": "commit"}, {"oid": "cf112c33a516c89764e860451bc56e4e4b5c93d6", "url": "https://github.com/all-of-us/workbench/commit/cf112c33a516c89764e860451bc56e4e4b5c93d6", "message": "Final PR feedback.", "committedDate": "2020-02-27T21:45:45Z", "type": "forcePushed"}]}