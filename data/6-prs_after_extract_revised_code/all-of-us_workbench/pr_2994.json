{"pr_number": 2994, "pr_title": "Add admin delete clusters in project endpoint", "pr_createdAt": "2020-01-10T19:29:00Z", "pr_url": "https://github.com/all-of-us/workbench/pull/2994", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwMjIxMQ==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365902211", "bodyText": "Nitpick: I'm not sure the \"admin\" prefix is too helpful here. We have a pretty strong pattern of calling this member variable \"userProvider\". I see that locally within this package AuthDomainAuditorImpl also calls it \"adminDbUserProvider\" (which is probably where this naming came from), but I'd argue both usages are inconsistent with a pretty global pattern across our codebase. It crease more confusion than it resolves IMO, since the \"user\" is still the \"user from the current request context\" in all cases.", "author": "gjuggler", "createdAt": "2020-01-13T16:33:57Z", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.TargetType;\n+import org.pmiops.workbench.actionaudit.targetproperties.AccountTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.values.AccountDisabledStatus;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Provider;\n+import java.time.Clock;\n+\n+@Service\n+public class ClusterAuditorImpl implements ClusterAuditor {\n+  private ActionAuditService actionAuditService;\n+  private Clock clock;\n+  private Provider<DbUser> adminDbUserProvider;\n+\n+  @Autowired\n+  public ClusterAuditorImpl(\n+      ActionAuditService actionAuditService,\n+      Clock clock,\n+      Provider<DbUser> adminDbUserProvider) {", "originalCommit": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb104832c9ea9b6b374571e28a34a4465d4cef5e", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorImpl.java b/api/src/main/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorImpl.java\ndeleted file mode 100644\nindex 5cffe7b16..000000000\n--- a/api/src/main/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorImpl.java\n+++ /dev/null\n\n@@ -1,47 +0,0 @@\n-package org.pmiops.workbench.actionaudit.auditors;\n-\n-import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n-import org.pmiops.workbench.actionaudit.ActionAuditService;\n-import org.pmiops.workbench.actionaudit.ActionType;\n-import org.pmiops.workbench.actionaudit.AgentType;\n-import org.pmiops.workbench.actionaudit.TargetType;\n-import org.pmiops.workbench.actionaudit.targetproperties.AccountTargetProperty;\n-import org.pmiops.workbench.actionaudit.targetproperties.values.AccountDisabledStatus;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.stereotype.Service;\n-\n-import javax.inject.Provider;\n-import java.time.Clock;\n-\n-@Service\n-public class ClusterAuditorImpl implements ClusterAuditor {\n-  private ActionAuditService actionAuditService;\n-  private Clock clock;\n-  private Provider<DbUser> adminDbUserProvider;\n-\n-  @Autowired\n-  public ClusterAuditorImpl(\n-      ActionAuditService actionAuditService,\n-      Clock clock,\n-      Provider<DbUser> adminDbUserProvider) {\n-    this.actionAuditService = actionAuditService;\n-    this.clock = clock;\n-    this.adminDbUserProvider = adminDbUserProvider;\n-  }\n-\n-  @Override\n-  public void fireDeleteClustersInProject(String projectId) {\n-    actionAuditService.send(\n-        ActionAuditEvent.builder()\n-            .timestamp(clock.millis())\n-            .agentType(AgentType.ADMINISTRATOR)\n-            .agentId(adminDbUserProvider.get().getUserId())\n-            .agentEmailMaybe(adminDbUserProvider.get().getUsername())\n-            .actionType(ActionType.DELETE)\n-            .targetType(TargetType.NOTEBOOK_SERVER)\n-            .targetPropertyMaybe(projectId)\n-            .build());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwMzYxMQ==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365903611", "bodyText": "I'd be inclined to move this towards the bottom of this method, so the audit log is only sent after the Firecloud interactions are completed. Just checking how Jay set this up for other controllers, there seems to be a pretty clear pattern of \"do the work first, then fire an audit log\".", "author": "gjuggler", "createdAt": "2020-01-13T16:36:27Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -116,7 +123,51 @@\n   }\n \n   @Override\n-  public ResponseEntity<ClusterListResponse> listClusters(\n+  @AuthorityRequired(Authority.SECURITY_ADMIN)\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(String billingProjectId) {\n+    if (billingProjectId == null) {\n+      throw new BadRequestException(\"Must specify billing project\");\n+    }\n+    clusterAuditor.fireDeleteClustersInProject(billingProjectId);", "originalCommit": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb104832c9ea9b6b374571e28a34a4465d4cef5e", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 22446816c..94262ca4c 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -128,7 +125,6 @@ public class ClusterController implements ClusterApiDelegate {\n     if (billingProjectId == null) {\n       throw new BadRequestException(\"Must specify billing project\");\n     }\n-    clusterAuditor.fireDeleteClustersInProject(billingProjectId);\n \n     leonardoNotebooksClient\n         .listClustersByProjectAsAdmin(billingProjectId)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNzg4Mg==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365907882", "bodyText": "The testing pattern here is a bit awkward. What I might have expected to see in a controller-level test would be to make sure all inbound parameters are correctly mapped to the service-level call, e.g.\n\nSet up any required mocks, e.g. when(notebookService).listClustersByProjectAsAdmin(...)\nCall the controller method.\nVerify that notebookService.deleteClusterAsAdmin was called with BILLING_PROJECT_ID\nVerify that clusterAuditor.fireDeleteClustersInProject is called with BILLING_PROJECT_ID", "author": "gjuggler", "createdAt": "2020-01-13T16:44:23Z", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -234,6 +249,27 @@ public void testListClusters() throws Exception {\n         .isEqualTo(testCluster);\n   }\n \n+  @Test\n+  public void testDeleteClustersInProject() throws Exception {", "originalCommit": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4OTgyMw==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366389823", "bodyText": "Its kinda tricky because all the notebookService stuff is calling to Leo. I will update though.", "author": "s-rubenstein", "createdAt": "2020-01-14T15:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNzg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0OTQ1Nw==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366449457", "bodyText": "I would also like to see these test cases:\n\nclusterNamesToDelete.getClustersToDelete() is null\nclusterNamesToDelete.getClustersToDelete() is an empty list\ndelete some but not all clusters\nrequest to delete cluster(s) which exist but are in a different project\nreturned cluster status is DELETED (I think there's a bug here)\nreturned cluster status is in a non-acceptable state", "author": "jmthibault79", "createdAt": "2020-01-14T16:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNzg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjAyNg==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366512026", "bodyText": "Talked offline, we are not adding the last two of these test cases because:\n\nWith DELETED, we don't want to receive those clusters, because we reuse names, and thus there could be many clusters with the same name in deleted.\nWe could do the non-acceptable state, but it is just testing logging, and is going to be incredibly messy to maintain that test. (And is sorta testing 'what happens if Leo fails to follow contract')", "author": "s-rubenstein", "createdAt": "2020-01-14T18:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNzg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0dfe25c6c7c393787e7cd0775e157c38722f7036", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\nindex edaf18298..d99e02ec7 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n\n@@ -253,21 +260,25 @@ public class ClusterControllerTest {\n   public void testDeleteClustersInProject() throws Exception {\n     when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n         .thenReturn(ImmutableList.of(testFcClusterListResponse));\n-    Mockito.doAnswer(new Answer<Void>() {\n-      public Void answer(InvocationOnMock invocation) {\n-        testFcClusterListResponse.setStatus(org.pmiops.workbench.notebooks.model.ClusterStatus.DELETING);\n-        return null;\n-      }\n-    }).when(notebookService).deleteClusterAsAdmin(BILLING_PROJECT_ID, getClusterName());\n-\n-    assertThat(\n-        clusterController\n-            .deleteClustersInProject(BILLING_PROJECT_ID)\n-            .getBody())\n-        .isEqualTo(ImmutableList.of(new ListClusterResponse()\n-            .clusterName(testCluster.getClusterName())\n-            .createdDate(testCluster.getCreatedDate())\n-            .status(ClusterStatus.DELETING).googleProject(testCluster.getClusterNamespace())));\n+    Mockito.doAnswer(\n+            new Answer<Void>() {\n+              public Void answer(InvocationOnMock invocation) {\n+                testFcClusterListResponse.setStatus(\n+                    org.pmiops.workbench.notebooks.model.ClusterStatus.DELETING);\n+                return null;\n+              }\n+            })\n+        .when(notebookService)\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, getClusterName());\n+\n+    assertThat(clusterController.deleteClustersInProject(BILLING_PROJECT_ID).getBody())\n+        .isEqualTo(\n+            ImmutableList.of(\n+                new ListClusterResponse()\n+                    .clusterName(testCluster.getClusterName())\n+                    .createdDate(testCluster.getCreatedDate())\n+                    .status(ClusterStatus.DELETING)\n+                    .googleProject(testCluster.getClusterNamespace())));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwNzc0Mg==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366407742", "bodyText": "wrong import", "author": "jmthibault79", "createdAt": "2020-01-14T15:35:18Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -1,12 +1,14 @@\n package org.pmiops.workbench.api;\n \n+import com.google.appengine.repackaged.com.google.common.collect.ImmutableList;", "originalCommit": "fee3de204e004115159014af8a3f873fc66a9242", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwODU2MA==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366408560", "bodyText": "Might want to blacklist com.google.appengine.repackaged a la https://blog.jetbrains.com/idea/2009/03/excluding-classes-from-auto-import/", "author": "jmthibault79", "createdAt": "2020-01-14T15:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwNzc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8fb920190539866721ec8352953d95d153ecfa6e", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 1f46d61ea..d03bd9483 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -1,6 +1,6 @@\n package org.pmiops.workbench.api;\n \n-import com.google.appengine.repackaged.com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableList;\n import com.google.gson.Gson;\n import java.net.MalformedURLException;\n import java.net.URL;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMTE0MA==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366421140", "bodyText": "This call will skip deleted clusters - see LeonardoNotebooksClientImpl line 155", "author": "jmthibault79", "createdAt": "2020-01-14T15:56:35Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -116,7 +124,65 @@\n   }\n \n   @Override\n-  public ResponseEntity<ClusterListResponse> listClusters(\n+  @AuthorityRequired(Authority.SECURITY_ADMIN)\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(\n+      String billingProjectId, ListClusterDeleteRequest clusterNamesToDelete) {\n+    if (billingProjectId == null) {\n+      throw new BadRequestException(\"Must specify billing project\");\n+    }\n+    List<org.pmiops.workbench.notebooks.model.ListClusterResponse> clustersToDelete =\n+        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n+            .filter(\n+                cluster ->\n+                    clusterNamesToDelete.getClustersToDelete() == null\n+                        || clusterNamesToDelete\n+                            .getClustersToDelete()\n+                            .contains(cluster.getClusterName()))\n+            .collect(Collectors.toList());\n+\n+    clustersToDelete.forEach(\n+        cluster ->\n+            leonardoNotebooksClient.deleteClusterAsAdmin(\n+                cluster.getGoogleProject(), cluster.getClusterName()));\n+    List<ListClusterResponse> clustersInProjectAffected =\n+        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()", "originalCommit": "fee3de204e004115159014af8a3f873fc66a9242", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5NDkwOQ==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366494909", "bodyText": "Hmmm... I don't think we want to list all deleted clusters though, because we reuse names. We may be okay with this, because clusters probably don't delete that quickly? It will affect return value if they do delete quickly, but won't affect auditing.", "author": "s-rubenstein", "createdAt": "2020-01-14T18:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzY0NA==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366533644", "bodyText": "agreed offline - we do not want to list deleted", "author": "jmthibault79", "createdAt": "2020-01-14T19:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMTE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "cb104832c9ea9b6b374571e28a34a4465d4cef5e", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 1f46d61ea..94262ca4c 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -125,26 +121,18 @@ public class ClusterController implements ClusterApiDelegate {\n \n   @Override\n   @AuthorityRequired(Authority.SECURITY_ADMIN)\n-  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(\n-      String billingProjectId, ListClusterDeleteRequest clusterNamesToDelete) {\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(String billingProjectId) {\n     if (billingProjectId == null) {\n       throw new BadRequestException(\"Must specify billing project\");\n     }\n-    List<org.pmiops.workbench.notebooks.model.ListClusterResponse> clustersToDelete =\n-        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n-            .filter(\n-                cluster ->\n-                    clusterNamesToDelete.getClustersToDelete() == null\n-                        || clusterNamesToDelete\n-                            .getClustersToDelete()\n-                            .contains(cluster.getClusterName()))\n-            .collect(Collectors.toList());\n \n-    clustersToDelete.forEach(\n-        cluster ->\n-            leonardoNotebooksClient.deleteClusterAsAdmin(\n-                cluster.getGoogleProject(), cluster.getClusterName()));\n-    List<ListClusterResponse> clustersInProjectAffected =\n+    leonardoNotebooksClient\n+        .listClustersByProjectAsAdmin(billingProjectId)\n+        .forEach(\n+            cluster ->\n+                leonardoNotebooksClient.deleteClusterAsAdmin(\n+                    cluster.getGoogleProject(), cluster.getClusterName()));\n+    List<ListClusterResponse> clustersInProject =\n         leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n             .map(\n                 leoCluster ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNjAxNw==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366426017", "bodyText": "This filter block is repeated below, so we can extract it as a small function", "author": "jmthibault79", "createdAt": "2020-01-14T16:04:36Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -116,7 +124,65 @@\n   }\n \n   @Override\n-  public ResponseEntity<ClusterListResponse> listClusters(\n+  @AuthorityRequired(Authority.SECURITY_ADMIN)\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(\n+      String billingProjectId, ListClusterDeleteRequest clusterNamesToDelete) {\n+    if (billingProjectId == null) {\n+      throw new BadRequestException(\"Must specify billing project\");\n+    }\n+    List<org.pmiops.workbench.notebooks.model.ListClusterResponse> clustersToDelete =\n+        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n+            .filter(", "originalCommit": "fee3de204e004115159014af8a3f873fc66a9242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb104832c9ea9b6b374571e28a34a4465d4cef5e", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\nindex 1f46d61ea..94262ca4c 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ClusterController.java\n\n@@ -125,26 +121,18 @@ public class ClusterController implements ClusterApiDelegate {\n \n   @Override\n   @AuthorityRequired(Authority.SECURITY_ADMIN)\n-  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(\n-      String billingProjectId, ListClusterDeleteRequest clusterNamesToDelete) {\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(String billingProjectId) {\n     if (billingProjectId == null) {\n       throw new BadRequestException(\"Must specify billing project\");\n     }\n-    List<org.pmiops.workbench.notebooks.model.ListClusterResponse> clustersToDelete =\n-        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n-            .filter(\n-                cluster ->\n-                    clusterNamesToDelete.getClustersToDelete() == null\n-                        || clusterNamesToDelete\n-                            .getClustersToDelete()\n-                            .contains(cluster.getClusterName()))\n-            .collect(Collectors.toList());\n \n-    clustersToDelete.forEach(\n-        cluster ->\n-            leonardoNotebooksClient.deleteClusterAsAdmin(\n-                cluster.getGoogleProject(), cluster.getClusterName()));\n-    List<ListClusterResponse> clustersInProjectAffected =\n+    leonardoNotebooksClient\n+        .listClustersByProjectAsAdmin(billingProjectId)\n+        .forEach(\n+            cluster ->\n+                leonardoNotebooksClient.deleteClusterAsAdmin(\n+                    cluster.getGoogleProject(), cluster.getClusterName()));\n+    List<ListClusterResponse> clustersInProject =\n         leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n             .map(\n                 leoCluster ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMDczMA==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366430730", "bodyText": "does not throw Exception - this can actually be removed from every method in this class", "author": "jmthibault79", "createdAt": "2020-01-14T16:12:42Z", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -234,6 +249,26 @@ public void testListClusters() throws Exception {\n         .isEqualTo(testCluster);\n   }\n \n+  @Test\n+  public void testDeleteClustersInProject() throws Exception {", "originalCommit": "fee3de204e004115159014af8a3f873fc66a9242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb104832c9ea9b6b374571e28a34a4465d4cef5e", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\nindex ab8878b60..249d8adc4 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java\n\n@@ -251,22 +263,23 @@ public class ClusterControllerTest {\n \n   @Test\n   public void testDeleteClustersInProject() throws Exception {\n-    List<ListClusterResponse> listClusterResponseList = ImmutableList.of(testFcClusterListResponse);\n     when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n-        .thenReturn(listClusterResponseList);\n-\n-    clusterController.deleteClustersInProject(\n-        BILLING_PROJECT_ID,\n-        new ListClusterDeleteRequest()\n-            .clustersToDelete(ImmutableList.of(testFcCluster.getClusterName())));\n-    verify(notebookService)\n-        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n-    verify(clusterAuditor)\n-        .fireDeleteClustersInProject(\n-            BILLING_PROJECT_ID,\n-            listClusterResponseList.stream()\n-                .map(ListClusterResponse::getClusterName)\n-                .collect(Collectors.toList()));\n+        .thenReturn(ImmutableList.of(testFcClusterListResponse));\n+    Mockito.doAnswer(new Answer<Void>() {\n+      public Void answer(InvocationOnMock invocation) {\n+        testFcClusterListResponse.setStatus(org.pmiops.workbench.notebooks.model.ClusterStatus.DELETING);\n+        return null;\n+      }\n+    }).when(notebookService).deleteClusterAsAdmin(BILLING_PROJECT_ID, getClusterName());\n+\n+    assertThat(\n+        clusterController\n+            .deleteClustersInProject(BILLING_PROJECT_ID)\n+            .getBody())\n+        .isEqualTo(ImmutableList.of(new ListClusterResponse()\n+            .clusterName(testCluster.getClusterName())\n+            .createdDate(testCluster.getCreatedDate())\n+            .status(ClusterStatus.DELETING).googleProject(testCluster.getClusterNamespace())));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMzk1Mg==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366433952", "bodyText": "changing this to CLUSTER_NAMES.length() would make it explicit", "author": "jmthibault79", "createdAt": "2020-01-14T16:17:59Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Provider;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class ClusterAuditorTest {\n+  private DbUser user1;\n+  private static final long Y2K_EPOCH_MILLIS =\n+      Instant.parse(\"2000-01-01T00:00:00.00Z\").toEpochMilli();\n+  private static final String ACTION_ID = \"58cbae08-447f-499f-95b9-7bdedc955f4d\";\n+  private static final String BILLING_PROJECT_ID = \"all-of-us-yjty\";\n+  private static final List<String> CLUSTER_NAMES =\n+      ImmutableList.of(\"all-of-us-1\", \"all-of-us-2\", \"all-of-us-3\");\n+\n+  private ClusterAuditor clusterAuditor;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventCollectionCaptor;\n+\n+  @Mock private Provider<String> mockActionIdProvider;\n+  @Mock private ActionAuditService mockActionAuditService;\n+  @Mock private Clock mockClock;\n+  @Mock private Provider<DbUser> mockUserProvider;\n+\n+  @TestConfiguration\n+  @MockBean(value = {ActionAuditService.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    user1 = new DbUser();\n+    user1.setUserId(101L);\n+    user1.setUsername(\"fflinstone@slate.com\");\n+    user1.setGivenName(\"Fred\");\n+    user1.setFamilyName(\"Flintstone\");\n+    doReturn(user1).when(mockUserProvider).get();\n+    clusterAuditor =\n+        new ClusterAuditorImpl(\n+            mockActionIdProvider, mockActionAuditService, mockClock, mockUserProvider);\n+\n+    doReturn(Y2K_EPOCH_MILLIS).when(mockClock).millis();\n+    doReturn(ACTION_ID).when(mockActionIdProvider).get();\n+  }\n+\n+  @Test\n+  public void testFireDeleteClustersInProject() {\n+    clusterAuditor.fireDeleteClustersInProject(BILLING_PROJECT_ID, CLUSTER_NAMES);\n+    verify(mockActionAuditService).send(eventCollectionCaptor.capture());\n+    Collection<ActionAuditEvent> eventsSent = eventCollectionCaptor.getValue();\n+    assertThat(eventsSent).hasSize(3);", "originalCommit": "fee3de204e004115159014af8a3f873fc66a9242", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb104832c9ea9b6b374571e28a34a4465d4cef5e", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorTest.java b/api/src/test/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorTest.java\ndeleted file mode 100644\nindex c1cc1d61f..000000000\n--- a/api/src/test/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorTest.java\n+++ /dev/null\n\n@@ -1,89 +0,0 @@\n-package org.pmiops.workbench.actionaudit.auditors;\n-\n-import static com.google.common.truth.Truth.assertThat;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.verify;\n-\n-import com.google.common.collect.ImmutableList;\n-import java.time.Clock;\n-import java.time.Instant;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-import javax.inject.Provider;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n-import org.pmiops.workbench.actionaudit.ActionAuditService;\n-import org.pmiops.workbench.actionaudit.ActionType;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.springframework.boot.test.context.TestConfiguration;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n-import org.springframework.test.context.junit4.SpringRunner;\n-\n-@RunWith(SpringRunner.class)\n-public class ClusterAuditorTest {\n-  private DbUser user1;\n-  private static final long Y2K_EPOCH_MILLIS =\n-      Instant.parse(\"2000-01-01T00:00:00.00Z\").toEpochMilli();\n-  private static final String ACTION_ID = \"58cbae08-447f-499f-95b9-7bdedc955f4d\";\n-  private static final String BILLING_PROJECT_ID = \"all-of-us-yjty\";\n-  private static final List<String> CLUSTER_NAMES =\n-      ImmutableList.of(\"all-of-us-1\", \"all-of-us-2\", \"all-of-us-3\");\n-\n-  private ClusterAuditor clusterAuditor;\n-\n-  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventCollectionCaptor;\n-\n-  @Mock private Provider<String> mockActionIdProvider;\n-  @Mock private ActionAuditService mockActionAuditService;\n-  @Mock private Clock mockClock;\n-  @Mock private Provider<DbUser> mockUserProvider;\n-\n-  @TestConfiguration\n-  @MockBean(value = {ActionAuditService.class})\n-  static class Configuration {}\n-\n-  @Before\n-  public void setUp() {\n-    user1 = new DbUser();\n-    user1.setUserId(101L);\n-    user1.setUsername(\"fflinstone@slate.com\");\n-    user1.setGivenName(\"Fred\");\n-    user1.setFamilyName(\"Flintstone\");\n-    doReturn(user1).when(mockUserProvider).get();\n-    clusterAuditor =\n-        new ClusterAuditorImpl(\n-            mockActionIdProvider, mockActionAuditService, mockClock, mockUserProvider);\n-\n-    doReturn(Y2K_EPOCH_MILLIS).when(mockClock).millis();\n-    doReturn(ACTION_ID).when(mockActionIdProvider).get();\n-  }\n-\n-  @Test\n-  public void testFireDeleteClustersInProject() {\n-    clusterAuditor.fireDeleteClustersInProject(BILLING_PROJECT_ID, CLUSTER_NAMES);\n-    verify(mockActionAuditService).send(eventCollectionCaptor.capture());\n-    Collection<ActionAuditEvent> eventsSent = eventCollectionCaptor.getValue();\n-    assertThat(eventsSent).hasSize(3);\n-    Optional<ActionAuditEvent> firstEvent = eventsSent.stream().findFirst();\n-    assertThat(firstEvent.isPresent()).isTrue();\n-    assertThat(firstEvent.map(ActionAuditEvent::getActionType).orElse(null))\n-        .isEqualTo(ActionType.DELETE);\n-    assertThat(firstEvent.map(ActionAuditEvent::getTargetPropertyMaybe).orElse(null))\n-        .isEqualTo(BILLING_PROJECT_ID);\n-    assertThat(firstEvent.map(ActionAuditEvent::getNewValueMaybe).orElse(null))\n-        .isEqualTo(CLUSTER_NAMES.get(0));\n-    assertThat(\n-            eventsSent.stream()\n-                .map(ActionAuditEvent::getActionType)\n-                .collect(Collectors.toSet())\n-                .size())\n-        .isEqualTo(1);\n-  }\n-}\n"}}, {"oid": "cb104832c9ea9b6b374571e28a34a4465d4cef5e", "url": "https://github.com/all-of-us/workbench/commit/cb104832c9ea9b6b374571e28a34a4465d4cef5e", "message": "Add admin delete clusters in project endpoint", "committedDate": "2020-01-14T18:55:27Z", "type": "commit"}, {"oid": "4c2482043b12f998d2a32fc9b773ea398196b511", "url": "https://github.com/all-of-us/workbench/commit/4c2482043b12f998d2a32fc9b773ea398196b511", "message": "Add auditing?", "committedDate": "2020-01-14T18:55:27Z", "type": "commit"}, {"oid": "0dfe25c6c7c393787e7cd0775e157c38722f7036", "url": "https://github.com/all-of-us/workbench/commit/0dfe25c6c7c393787e7cd0775e157c38722f7036", "message": "Make list of all clusters", "committedDate": "2020-01-14T18:55:28Z", "type": "commit"}, {"oid": "0e1bf7747622af9d2f84fc34e8fda99e571a8ab9", "url": "https://github.com/all-of-us/workbench/commit/0e1bf7747622af9d2f84fc34e8fda99e571a8ab9", "message": "Update auditing", "committedDate": "2020-01-14T18:55:28Z", "type": "commit"}, {"oid": "b9789c96dde71e140be3e82f6b4bfc35d3e8fc0f", "url": "https://github.com/all-of-us/workbench/commit/b9789c96dde71e140be3e82f6b4bfc35d3e8fc0f", "message": "fix tests", "committedDate": "2020-01-14T18:55:28Z", "type": "commit"}, {"oid": "7615a305577402f96c5dbd71c1de438884248236", "url": "https://github.com/all-of-us/workbench/commit/7615a305577402f96c5dbd71c1de438884248236", "message": "Fix linting", "committedDate": "2020-01-14T18:55:28Z", "type": "commit"}, {"oid": "8d849ce52d12c53b1511978191d767c5392b5738", "url": "https://github.com/all-of-us/workbench/commit/8d849ce52d12c53b1511978191d767c5392b5738", "message": "Add cluster auditor tests", "committedDate": "2020-01-14T18:55:28Z", "type": "commit"}, {"oid": "b476ddaa115ebfb6c5ac64cb16a9accdd523c457", "url": "https://github.com/all-of-us/workbench/commit/b476ddaa115ebfb6c5ac64cb16a9accdd523c457", "message": "Update test", "committedDate": "2020-01-14T18:55:28Z", "type": "commit"}, {"oid": "8fb920190539866721ec8352953d95d153ecfa6e", "url": "https://github.com/all-of-us/workbench/commit/8fb920190539866721ec8352953d95d153ecfa6e", "message": "PR feedback", "committedDate": "2020-01-14T18:57:33Z", "type": "commit"}, {"oid": "8fb920190539866721ec8352953d95d153ecfa6e", "url": "https://github.com/all-of-us/workbench/commit/8fb920190539866721ec8352953d95d153ecfa6e", "message": "PR feedback", "committedDate": "2020-01-14T18:57:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTMwMg==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366531302", "bodyText": "nit, optional: there's a verifyZeroCalls() (or similar) that can be used instead", "author": "jmthibault79", "createdAt": "2020-01-14T19:31:47Z", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -242,7 +294,96 @@ public void testListClusters() throws Exception {\n   }\n \n   @Test\n-  public void testListClustersUnknownStatus() throws Exception {\n+  public void testDeleteClustersInProject() {\n+    List<ListClusterResponse> listClusterResponseList = ImmutableList.of(testFcClusterListResponse);\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID,\n+        new ListClusterDeleteRequest()\n+            .clustersToDelete(ImmutableList.of(testFcCluster.getClusterName())));\n+    verify(notebookService)\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor)\n+        .fireDeleteClustersInProject(\n+            BILLING_PROJECT_ID,\n+            listClusterResponseList.stream()\n+                .map(ListClusterResponse::getClusterName)\n+                .collect(Collectors.toList()));\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectDeleteSome() {\n+    List<ListClusterResponse> listClusterResponseList =\n+        ImmutableList.of(testFcClusterListResponse, testFcClusterListResponse2);\n+    List<String> clustersToDelete = ImmutableList.of(testFcCluster.getClusterName());\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID, new ListClusterDeleteRequest().clustersToDelete(clustersToDelete));\n+    verify(notebookService, times(clustersToDelete.size()))\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor, times(1))\n+        .fireDeleteClustersInProject(BILLING_PROJECT_ID, clustersToDelete);\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectDeleteDoesNotAffectOtherProjects() {\n+    List<ListClusterResponse> listClusterResponseList =\n+        ImmutableList.of(testFcClusterListResponse, testFcClusterListResponse2);\n+    List<String> clustersToDelete =\n+        ImmutableList.of(testFcClusterDifferentProject.getClusterName());\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID, new ListClusterDeleteRequest().clustersToDelete(clustersToDelete));\n+    verify(notebookService, times(0))", "originalCommit": "8fb920190539866721ec8352953d95d153ecfa6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzNzU5MQ==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366537591", "bodyText": "verifyZeroInteractions() is a mock level method, rather than a method level method (from what I could tell. Sticking with this.", "author": "s-rubenstein", "createdAt": "2020-01-14T19:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTMwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzA3OQ==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366533079", "bodyText": "This is something I was curious about: do we want a missing param (null) to have different semantics from an empty-list param?  We should be explicit about this in the swagger, if so.", "author": "jmthibault79", "createdAt": "2020-01-14T19:35:34Z", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -242,7 +294,96 @@ public void testListClusters() throws Exception {\n   }\n \n   @Test\n-  public void testListClustersUnknownStatus() throws Exception {\n+  public void testDeleteClustersInProject() {\n+    List<ListClusterResponse> listClusterResponseList = ImmutableList.of(testFcClusterListResponse);\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID,\n+        new ListClusterDeleteRequest()\n+            .clustersToDelete(ImmutableList.of(testFcCluster.getClusterName())));\n+    verify(notebookService)\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor)\n+        .fireDeleteClustersInProject(\n+            BILLING_PROJECT_ID,\n+            listClusterResponseList.stream()\n+                .map(ListClusterResponse::getClusterName)\n+                .collect(Collectors.toList()));\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectDeleteSome() {\n+    List<ListClusterResponse> listClusterResponseList =\n+        ImmutableList.of(testFcClusterListResponse, testFcClusterListResponse2);\n+    List<String> clustersToDelete = ImmutableList.of(testFcCluster.getClusterName());\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID, new ListClusterDeleteRequest().clustersToDelete(clustersToDelete));\n+    verify(notebookService, times(clustersToDelete.size()))\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor, times(1))\n+        .fireDeleteClustersInProject(BILLING_PROJECT_ID, clustersToDelete);\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectDeleteDoesNotAffectOtherProjects() {\n+    List<ListClusterResponse> listClusterResponseList =\n+        ImmutableList.of(testFcClusterListResponse, testFcClusterListResponse2);\n+    List<String> clustersToDelete =\n+        ImmutableList.of(testFcClusterDifferentProject.getClusterName());\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID, new ListClusterDeleteRequest().clustersToDelete(clustersToDelete));\n+    verify(notebookService, times(0))\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor, times(0))\n+        .fireDeleteClustersInProject(BILLING_PROJECT_ID, clustersToDelete);\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectNoClusters() {", "originalCommit": "8fb920190539866721ec8352953d95d153ecfa6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzNjY4MQ==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366536681", "bodyText": "I think we do, because I think not providing a list should give all, but an empty list should behave the same way as any list. I can be more explicit in swagger.", "author": "s-rubenstein", "createdAt": "2020-01-14T19:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0MDIwOA==", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366540208", "bodyText": "Basically I think there should be some default that says include all clusters, and the body parameter can't be null. We could also do this with a bool on the object that says 'deleteAll' or something, but that seems like extra that we don't need.", "author": "s-rubenstein", "createdAt": "2020-01-14T19:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzA3OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3d0c96c36ad58859871f45bc4560fc5e722dc88e", "url": "https://github.com/all-of-us/workbench/commit/3d0c96c36ad58859871f45bc4560fc5e722dc88e", "message": "Update swagger", "committedDate": "2020-01-14T19:46:44Z", "type": "commit"}, {"oid": "3d7aad4d43e54669e34234e2b5adfbe0db095486", "url": "https://github.com/all-of-us/workbench/commit/3d7aad4d43e54669e34234e2b5adfbe0db095486", "message": "update swagger", "committedDate": "2020-01-14T20:29:38Z", "type": "commit"}]}