{"pr_number": 3845, "pr_title": "[no ticket][risk=no] Make randomize fast", "pr_createdAt": "2020-08-03T19:25:13Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3845", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2MzE3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3845#discussion_r464663177", "bodyText": "nit: maybe add a prefix to indicate that its an int? I thought it was a list while reading through", "author": "ericsong", "createdAt": "2020-08-03T21:08:39Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -50,9 +51,9 @@ public RandomizeVcf() {\n   }\n \n   @VisibleForTesting\n-  protected RandomizeVcf(String sampleNameSuffix, Random random) {\n+  protected RandomizeVcf(int samples, Random random) {\n     super();\n-    this.sampleNameSuffix = sampleNameSuffix;", "originalCommit": "9592791844c7d3ad8e3de97dae6ecf071f719e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2ODQzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3845#discussion_r464668439", "bodyText": "How about numberOfSamples?", "author": "als364", "createdAt": "2020-08-03T21:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2MzE3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NTQ5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3845#discussion_r464665491", "bodyText": "are these NO_CALLs fixing a different issue?", "author": "ericsong", "createdAt": "2020-08-03T21:13:59Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -142,6 +141,8 @@ protected Genotype randomizeGenotype(VariantContext variantContext, Genotype gen\n     double genotypeTypeIndex = random.nextDouble();\n     if (genotypeTypeIndex < .0145) {\n       // double no-call\n+      alleles.add(Allele.NO_CALL);", "originalCommit": "9592791844c7d3ad8e3de97dae6ecf071f719e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2OTE4MQ==", "url": "https://github.com/all-of-us/workbench/pull/3845#discussion_r464669181", "bodyText": "Yes - VcfWriter gets unhappy when some samples have no alleles when there are samples that do have alleles.", "author": "als364", "createdAt": "2020-08-03T21:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NTQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbea0986eeb57b1f038018356282c44cf2b2e7bd", "chunk": "diff --git a/api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java b/api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java\nindex 341267d94..6a2cbc4d2 100644\n--- a/api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java\n+++ b/api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java\n\n@@ -139,40 +138,56 @@ public class RandomizeVcf extends VariantWalker {\n      */\n     List<Allele> alleles = new ArrayList<>();\n     double genotypeTypeIndex = random.nextDouble();\n-    if (genotypeTypeIndex < .0145) {\n-      // double no-call\n-      alleles.add(Allele.NO_CALL);\n-      alleles.add(Allele.NO_CALL);\n-      return alleles;\n-    } else if (genotypeTypeIndex < .8095) {\n-      // homref\n-      alleles.add(variantContext.getReference());\n-      alleles.add(variantContext.getReference());\n-    } else if (genotypeTypeIndex < .8654) {\n-      // 0/1 het\n-      alleles.add(variantContext.getReference());\n-      alleles.add(variantContext.getAlternateAllele(0));\n-    } else if (genotypeTypeIndex < .9268) {\n-      // 1/0 het\n-      alleles.add(variantContext.getAlternateAllele(0));\n-      alleles.add(variantContext.getReference());\n-    } else if (genotypeTypeIndex < .9994\n-        || (genotypeTypeIndex >= .9994 && variantContext.getAlternateAlleles().size() == 1)) {\n-      // homvar\n-      alleles.add(variantContext.getAlternateAllele(0));\n-      alleles.add(variantContext.getAlternateAllele(0));\n+    if (variantContext.getAlternateAlleles().size() == 2) {\n+      // sum of probabilities of bi-allelic no-call / homref\n+      if (genotypeTypeIndex < .8240) {\n+        // double no-call (or ref, if we're at a tri-allelic site, but we don't differentiate)\n+        alleles.add(Allele.NO_CALL);\n+        alleles.add(Allele.NO_CALL);\n+        return alleles;\n+      } else if (genotypeTypeIndex < .8654) {\n+        // 1/2 het\n+        alleles.add(variantContext.getAlternateAllele(0));\n+        alleles.add(variantContext.getAlternateAllele(1));\n+      } else if (genotypeTypeIndex < .9268) {\n+        // 2/1 het\n+        alleles.add(variantContext.getAlternateAllele(1));\n+        alleles.add(variantContext.getAlternateAllele(0));\n+      } else {\n+        // homvar, but the rarer alt\n+        alleles.add(variantContext.getAlternateAllele(1));\n+        alleles.add(variantContext.getAlternateAllele(1));\n+      }\n     } else {\n-      // homvar, but the rarer alt\n-      alleles.add(variantContext.getAlternateAllele(1));\n-      alleles.add(variantContext.getAlternateAllele(1));\n+      if (genotypeTypeIndex < .0145) {\n+        // double no-call\n+        alleles.add(Allele.NO_CALL);\n+        alleles.add(Allele.NO_CALL);\n+        return alleles;\n+      } else if (genotypeTypeIndex < .8095) {\n+        // homref\n+        alleles.add(variantContext.getReference());\n+        alleles.add(variantContext.getReference());\n+      } else if (genotypeTypeIndex < .8654) {\n+        // 0/1 het\n+        alleles.add(variantContext.getReference());\n+        alleles.add(variantContext.getAlternateAllele(0));\n+      } else if (genotypeTypeIndex < .9268) {\n+        // 1/0 het\n+        alleles.add(variantContext.getAlternateAllele(0));\n+        alleles.add(variantContext.getReference());\n+      } else {\n+        // homvar\n+        alleles.add(variantContext.getAlternateAllele(0));\n+        alleles.add(variantContext.getAlternateAllele(0));\n+      }\n     }\n     return alleles;\n   }\n \n   private List<String> generateNSampleNames(String sampleName) {\n     List<String> sampleNames = new ArrayList<>();\n-    IntStream.rangeClosed(1, this.samples)\n-        .forEach(i -> sampleNames.add(appendSuffixToSampleName(sampleName, i)));\n+    IntStream.rangeClosed(1, this.samples).forEach(i -> sampleNames.add(appendSuffixToSampleName(sampleName, i)));\n     return sampleNames;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NzQ1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3845#discussion_r464667455", "bodyText": "I don't understand a lot of the GATK models but I thought this part seemed a little suspicious since we're only ever grabbing the first genotype out of the variant. Is that ok?", "author": "ericsong", "createdAt": "2020-08-03T21:18:17Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -93,8 +92,8 @@ protected VariantContext randomizeVariant(VariantContext variant) {\n     variantContextBuilder.alleles(variant.getAlleles());\n \n     List<Genotype> randomizedGenotypes =\n-        variant.getGenotypes().stream()\n-            .map(genotype -> randomizeGenotype(variant, genotype))\n+        IntStream.rangeClosed(1, this.samples)\n+            .mapToObj(i -> randomizeGenotype(variant, variant.getGenotype(0), i))", "originalCommit": "9592791844c7d3ad8e3de97dae6ecf071f719e4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2ODk5OA==", "url": "https://github.com/all-of-us/workbench/pull/3845#discussion_r464668998", "bodyText": "Yes. All we want to randomize is the alleles. We're starting from a single-sample vcf anyways so there will only ever be one genotype in the variant. I can specify that in the comments for the invocation and add a comment here, if you think that would help.", "author": "als364", "createdAt": "2020-08-03T21:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NzQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbea0986eeb57b1f038018356282c44cf2b2e7bd", "chunk": "diff --git a/api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java b/api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java\nindex 341267d94..6a2cbc4d2 100644\n--- a/api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java\n+++ b/api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java\n\n@@ -91,10 +92,9 @@ public class RandomizeVcf extends VariantWalker {\n     VariantContextBuilder variantContextBuilder = new VariantContextBuilder(variant);\n     variantContextBuilder.alleles(variant.getAlleles());\n \n-    List<Genotype> randomizedGenotypes =\n-        IntStream.rangeClosed(1, this.samples)\n-            .mapToObj(i -> randomizeGenotype(variant, variant.getGenotype(0), i))\n-            .collect(Collectors.toList());\n+    List<Genotype> randomizedGenotypes = IntStream.rangeClosed(1, this.samples)\n+        .mapToObj(i -> randomizeGenotype(variant, variant.getGenotype(0), i))\n+        .collect(Collectors.toList());\n     GenotypesContext randomizedGenotypesContext =\n         GenotypesContext.create(new ArrayList<>(randomizedGenotypes));\n \n"}}, {"oid": "fbea0986eeb57b1f038018356282c44cf2b2e7bd", "url": "https://github.com/all-of-us/workbench/commit/fbea0986eeb57b1f038018356282c44cf2b2e7bd", "message": "make randomize fast", "committedDate": "2020-08-06T14:00:26Z", "type": "commit"}, {"oid": "fe7ac61bda11c510ac1d947d02dfaa234bc239a0", "url": "https://github.com/all-of-us/workbench/commit/fe7ac61bda11c510ac1d947d02dfaa234bc239a0", "message": "spotless", "committedDate": "2020-08-06T14:00:27Z", "type": "commit"}, {"oid": "dbdfe05aacb8e07fda9137ab7a7e877f8f5e5fd1", "url": "https://github.com/all-of-us/workbench/commit/dbdfe05aacb8e07fda9137ab7a7e877f8f5e5fd1", "message": "update readme", "committedDate": "2020-08-06T14:00:27Z", "type": "commit"}, {"oid": "e4636a5adcbe6c3fb751fdb083b8fe207e5f26f4", "url": "https://github.com/all-of-us/workbench/commit/e4636a5adcbe6c3fb751fdb083b8fe207e5f26f4", "message": "output path", "committedDate": "2020-08-06T14:00:27Z", "type": "commit"}, {"oid": "e4636a5adcbe6c3fb751fdb083b8fe207e5f26f4", "url": "https://github.com/all-of-us/workbench/commit/e4636a5adcbe6c3fb751fdb083b8fe207e5f26f4", "message": "output path", "committedDate": "2020-08-06T14:00:27Z", "type": "forcePushed"}]}