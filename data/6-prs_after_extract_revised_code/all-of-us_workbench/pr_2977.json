{"pr_number": 2977, "pr_title": "[RW-4163][Risk=low] Add new fields to demographics survey", "pr_createdAt": "2020-01-07T15:39:11Z", "pr_url": "https://github.com/all-of-us/workbench/pull/2977", "timeline": [{"oid": "fcf8d66b50efebadef93f7c1ab9e747ea58a01b5", "url": "https://github.com/all-of-us/workbench/commit/fcf8d66b50efebadef93f7c1ab9e747ea58a01b5", "message": "Add new fields to demographics survey", "committedDate": "2020-01-07T15:31:24Z", "type": "commit"}, {"oid": "de2f463e66d4041595e38972ea962a90a7e1e5f7", "url": "https://github.com/all-of-us/workbench/commit/de2f463e66d4041595e38972ea962a90a7e1e5f7", "message": "Fix some stylistic things", "committedDate": "2020-01-07T15:36:02Z", "type": "commit"}, {"oid": "abeee3097a91fd7bf626f921e058c2396a6921b6", "url": "https://github.com/all-of-us/workbench/commit/abeee3097a91fd7bf626f921e058c2396a6921b6", "message": "Fix test compilation", "committedDate": "2020-01-07T15:41:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODcxMQ==", "url": "https://github.com/all-of-us/workbench/pull/2977#discussion_r364358711", "bodyText": "why reorder these?  I would expect the order to match the accessors below", "author": "jmthibault79", "createdAt": "2020-01-08T17:44:26Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java", "diffHunk": "@@ -19,18 +19,22 @@\n import org.pmiops.workbench.model.Ethnicity;\n import org.pmiops.workbench.model.Gender;\n import org.pmiops.workbench.model.Race;\n+import org.pmiops.workbench.model.SexAtBirth;\n+import org.pmiops.workbench.model.SexualOrientation;\n \n @Entity\n @Table(name = \"demographic_survey\")\n public class DbDemographicSurvey {\n-  private long id;\n-  private List<Short> race;\n+  private Short disability;", "originalCommit": "abeee3097a91fd7bf626f921e058c2396a6921b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwMjcyMg==", "url": "https://github.com/all-of-us/workbench/pull/2977#discussion_r364402722", "bodyText": "I made them alphabetical. I can update the accessors to follow, but I think that will make things easier to find.", "author": "s-rubenstein", "createdAt": "2020-01-08T19:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc2c78ee790899523a643c277cb1c9aa7e1e3f19", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java b/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\nindex 19e85aae5..305f4bbca 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\n\n@@ -31,139 +31,71 @@ public class DbDemographicSurvey {\n   private List<Short> gender;\n   private long id;\n   private DbUser user;\n+  private List<Short> race;\n   private List<Short> sexAtBirth;\n   private List<Short> sexualOrientation;\n-  private List<Short> race;\n   private int year_of_birth;\n \n   public DbDemographicSurvey() {}\n \n   public DbDemographicSurvey(org.pmiops.workbench.model.DemographicSurvey demographicSurvey) {\n-    this.race =\n-        demographicSurvey.getRace().stream()\n-            .map((race) -> DemographicSurveyEnum.raceToStorage(race))\n-            .collect(Collectors.toList());\n+    this.disability = DemographicSurveyEnum.disabilityToStorage(demographicSurvey.getDisability());\n+    this.education = DemographicSurveyEnum.educationToStorage(demographicSurvey.getEducation());\n     this.ethnicity = DemographicSurveyEnum.ethnicityToStorage(demographicSurvey.getEthnicity());\n     this.gender =\n         demographicSurvey.getGender().stream()\n-            .map((gender) -> DemographicSurveyEnum.genderToStorage(gender))\n+            .map(DemographicSurveyEnum::genderToStorage)\n             .collect(Collectors.toList());\n-    this.year_of_birth = demographicSurvey.getYearOfBirth().intValue();\n-    this.education = DemographicSurveyEnum.educationToStorage(demographicSurvey.getEducation());\n-    this.disability = DemographicSurveyEnum.disabilityToStorage(demographicSurvey.getDisability());\n-  }\n-\n-  @Id\n-  @GeneratedValue(strategy = GenerationType.IDENTITY)\n-  @Column(name = \"demographic_survey_id\")\n-  public long getId() {\n-    return id;\n-  }\n-\n-  public void setId(long demographic_survey_id) {\n-    this.id = demographic_survey_id;\n-  }\n-\n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_race\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"race\")\n-  public List<Short> getRace() {\n-    return race;\n-  }\n-\n-  public void setRace(List<Short> race) {\n-    this.race = race;\n-  }\n-\n-  @Transient\n-  public List<Race> getRaceEnum() {\n-    if (race == null) return null;\n-    return this.race.stream()\n-        .map(\n-            (raceObject) -> {\n-              return DemographicSurveyEnum.raceFromStorage(raceObject);\n-            })\n-        .collect(Collectors.toList());\n-  }\n-\n-  public void setRaceEnum(List<Race> raceList) {\n     this.race =\n-        raceList.stream()\n-            .map(\n-                (race) -> {\n-                  return DemographicSurveyEnum.raceToStorage(race);\n-                })\n+        demographicSurvey.getRace().stream()\n+            .map(DemographicSurveyEnum::raceToStorage)\n+            .collect(Collectors.toList());\n+    this.sexAtBirth =\n+        demographicSurvey.getSexAtBirth().stream()\n+            .map(DemographicSurveyEnum::sexAtBirthToStorage)\n             .collect(Collectors.toList());\n+    this.sexualOrientation =\n+        demographicSurvey.getSexualOrientation().stream()\n+            .map(DemographicSurveyEnum::sexualOrientationToStorage)\n+            .collect(Collectors.toList());\n+    this.year_of_birth = demographicSurvey.getYearOfBirth().intValue();\n   }\n \n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_sexual_orientation\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"sexual_orientation\")\n-  public List<Short> getSexualOrientation() {\n-    return sexualOrientation;\n+  @Column(name = \"disability\")\n+  public Short getDisability() {\n+    return disability;\n   }\n \n-  public void setSexualOrientation(List<Short> sexualOrientation) {\n-    this.sexualOrientation = sexualOrientation;\n+  public void setDisability(Short disability) {\n+    this.disability = disability;\n   }\n \n   @Transient\n-  public List<SexualOrientation> getSexualOrientationEnum() {\n-    if (sexualOrientation == null) return null;\n-    return this.sexualOrientation.stream()\n-        .map(\n-            (sexualOrientationObject) -> {\n-              return DemographicSurveyEnum.sexualOrientationFromStorage(sexualOrientationObject);\n-            })\n-        .collect(Collectors.toList());\n+  public Disability getDisabilityEnum() {\n+    return DemographicSurveyEnum.disabilityFromStorage(disability);\n   }\n \n-  public void setSexualOrientationEnum(List<SexualOrientation> sexualOrientationList) {\n-    this.sexualOrientation =\n-        sexualOrientationList.stream()\n-            .map(\n-                (sexualOrientation) -> {\n-                  return DemographicSurveyEnum.sexualOrientationToStorage(sexualOrientation);\n-                })\n-            .collect(Collectors.toList());\n+  public void setDisabilityEnum(Disability disability) {\n+    this.disability = DemographicSurveyEnum.disabilityToStorage(disability);\n   }\n \n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_sex_at_birth\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"sex_at_birth\")\n-  public List<Short> getSexAtBirth() {\n-    return sexAtBirth;\n+  @Column(name = \"education\")\n+  public Short getEducation() {\n+    return education;\n   }\n \n-  public void setSexAtBirth(List<Short> sexAtBirth) {\n-    this.sexAtBirth = sexAtBirth;\n+  public void setEducation(Short education) {\n+    this.education = education;\n   }\n \n   @Transient\n-  public List<SexAtBirth> getSexAtBirthEnum() {\n-    if (sexAtBirth == null) return null;\n-    return this.sexAtBirth.stream()\n-        .map(\n-            (sexAtBirthObject) -> {\n-              return DemographicSurveyEnum.sexAtBirthFromStorage(sexAtBirthObject);\n-            })\n-        .collect(Collectors.toList());\n+  public Education getEducationEnum() {\n+    if (education == null) return null;\n+    return DemographicSurveyEnum.educationFromStorage(education);\n   }\n \n-  public void setSexAtBirthEnum(List<SexAtBirth> sexAtBirthList) {\n-    this.sexAtBirth =\n-        sexAtBirthList.stream()\n-            .map(\n-                (sexAtBirth) -> {\n-                  return DemographicSurveyEnum.sexAtBirthToStorage(sexAtBirth);\n-                })\n-            .collect(Collectors.toList());\n+  public void setEducationEnum(Education education) {\n+    this.education = DemographicSurveyEnum.educationToStorage(education);\n   }\n \n   @Column(name = \"ethnicity\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1OTExMg==", "url": "https://github.com/all-of-us/workbench/pull/2977#discussion_r364359112", "bodyText": "Can replace with .map(DemographicSurveyEnum::sexualOrientationFromStorage)", "author": "jmthibault79", "createdAt": "2020-01-08T17:45:23Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java", "diffHunk": "@@ -94,6 +98,74 @@ public void setRaceEnum(List<Race> raceList) {\n             .collect(Collectors.toList());\n   }\n \n+  @ElementCollection(fetch = FetchType.LAZY)\n+  @CollectionTable(\n+      name = \"demographic_survey_sexual_orientation\",\n+      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n+  @Column(name = \"sexual_orientation\")\n+  public List<Short> getSexualOrientation() {\n+    return sexualOrientation;\n+  }\n+\n+  public void setSexualOrientation(List<Short> sexualOrientation) {\n+    this.sexualOrientation = sexualOrientation;\n+  }\n+\n+  @Transient\n+  public List<SexualOrientation> getSexualOrientationEnum() {\n+    if (sexualOrientation == null) return null;\n+    return this.sexualOrientation.stream()\n+        .map(", "originalCommit": "abeee3097a91fd7bf626f921e058c2396a6921b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM2MjEwNg==", "url": "https://github.com/all-of-us/workbench/pull/2977#discussion_r364362106", "bodyText": "same comments for sexAtBirth", "author": "jmthibault79", "createdAt": "2020-01-08T17:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1OTExMg=="}], "type": "inlineReview", "revised_code": {"commit": "cc2c78ee790899523a643c277cb1c9aa7e1e3f19", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java b/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\nindex 19e85aae5..305f4bbca 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\n\n@@ -31,139 +31,71 @@ public class DbDemographicSurvey {\n   private List<Short> gender;\n   private long id;\n   private DbUser user;\n+  private List<Short> race;\n   private List<Short> sexAtBirth;\n   private List<Short> sexualOrientation;\n-  private List<Short> race;\n   private int year_of_birth;\n \n   public DbDemographicSurvey() {}\n \n   public DbDemographicSurvey(org.pmiops.workbench.model.DemographicSurvey demographicSurvey) {\n-    this.race =\n-        demographicSurvey.getRace().stream()\n-            .map((race) -> DemographicSurveyEnum.raceToStorage(race))\n-            .collect(Collectors.toList());\n+    this.disability = DemographicSurveyEnum.disabilityToStorage(demographicSurvey.getDisability());\n+    this.education = DemographicSurveyEnum.educationToStorage(demographicSurvey.getEducation());\n     this.ethnicity = DemographicSurveyEnum.ethnicityToStorage(demographicSurvey.getEthnicity());\n     this.gender =\n         demographicSurvey.getGender().stream()\n-            .map((gender) -> DemographicSurveyEnum.genderToStorage(gender))\n+            .map(DemographicSurveyEnum::genderToStorage)\n             .collect(Collectors.toList());\n-    this.year_of_birth = demographicSurvey.getYearOfBirth().intValue();\n-    this.education = DemographicSurveyEnum.educationToStorage(demographicSurvey.getEducation());\n-    this.disability = DemographicSurveyEnum.disabilityToStorage(demographicSurvey.getDisability());\n-  }\n-\n-  @Id\n-  @GeneratedValue(strategy = GenerationType.IDENTITY)\n-  @Column(name = \"demographic_survey_id\")\n-  public long getId() {\n-    return id;\n-  }\n-\n-  public void setId(long demographic_survey_id) {\n-    this.id = demographic_survey_id;\n-  }\n-\n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_race\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"race\")\n-  public List<Short> getRace() {\n-    return race;\n-  }\n-\n-  public void setRace(List<Short> race) {\n-    this.race = race;\n-  }\n-\n-  @Transient\n-  public List<Race> getRaceEnum() {\n-    if (race == null) return null;\n-    return this.race.stream()\n-        .map(\n-            (raceObject) -> {\n-              return DemographicSurveyEnum.raceFromStorage(raceObject);\n-            })\n-        .collect(Collectors.toList());\n-  }\n-\n-  public void setRaceEnum(List<Race> raceList) {\n     this.race =\n-        raceList.stream()\n-            .map(\n-                (race) -> {\n-                  return DemographicSurveyEnum.raceToStorage(race);\n-                })\n+        demographicSurvey.getRace().stream()\n+            .map(DemographicSurveyEnum::raceToStorage)\n+            .collect(Collectors.toList());\n+    this.sexAtBirth =\n+        demographicSurvey.getSexAtBirth().stream()\n+            .map(DemographicSurveyEnum::sexAtBirthToStorage)\n             .collect(Collectors.toList());\n+    this.sexualOrientation =\n+        demographicSurvey.getSexualOrientation().stream()\n+            .map(DemographicSurveyEnum::sexualOrientationToStorage)\n+            .collect(Collectors.toList());\n+    this.year_of_birth = demographicSurvey.getYearOfBirth().intValue();\n   }\n \n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_sexual_orientation\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"sexual_orientation\")\n-  public List<Short> getSexualOrientation() {\n-    return sexualOrientation;\n+  @Column(name = \"disability\")\n+  public Short getDisability() {\n+    return disability;\n   }\n \n-  public void setSexualOrientation(List<Short> sexualOrientation) {\n-    this.sexualOrientation = sexualOrientation;\n+  public void setDisability(Short disability) {\n+    this.disability = disability;\n   }\n \n   @Transient\n-  public List<SexualOrientation> getSexualOrientationEnum() {\n-    if (sexualOrientation == null) return null;\n-    return this.sexualOrientation.stream()\n-        .map(\n-            (sexualOrientationObject) -> {\n-              return DemographicSurveyEnum.sexualOrientationFromStorage(sexualOrientationObject);\n-            })\n-        .collect(Collectors.toList());\n+  public Disability getDisabilityEnum() {\n+    return DemographicSurveyEnum.disabilityFromStorage(disability);\n   }\n \n-  public void setSexualOrientationEnum(List<SexualOrientation> sexualOrientationList) {\n-    this.sexualOrientation =\n-        sexualOrientationList.stream()\n-            .map(\n-                (sexualOrientation) -> {\n-                  return DemographicSurveyEnum.sexualOrientationToStorage(sexualOrientation);\n-                })\n-            .collect(Collectors.toList());\n+  public void setDisabilityEnum(Disability disability) {\n+    this.disability = DemographicSurveyEnum.disabilityToStorage(disability);\n   }\n \n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_sex_at_birth\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"sex_at_birth\")\n-  public List<Short> getSexAtBirth() {\n-    return sexAtBirth;\n+  @Column(name = \"education\")\n+  public Short getEducation() {\n+    return education;\n   }\n \n-  public void setSexAtBirth(List<Short> sexAtBirth) {\n-    this.sexAtBirth = sexAtBirth;\n+  public void setEducation(Short education) {\n+    this.education = education;\n   }\n \n   @Transient\n-  public List<SexAtBirth> getSexAtBirthEnum() {\n-    if (sexAtBirth == null) return null;\n-    return this.sexAtBirth.stream()\n-        .map(\n-            (sexAtBirthObject) -> {\n-              return DemographicSurveyEnum.sexAtBirthFromStorage(sexAtBirthObject);\n-            })\n-        .collect(Collectors.toList());\n+  public Education getEducationEnum() {\n+    if (education == null) return null;\n+    return DemographicSurveyEnum.educationFromStorage(education);\n   }\n \n-  public void setSexAtBirthEnum(List<SexAtBirth> sexAtBirthList) {\n-    this.sexAtBirth =\n-        sexAtBirthList.stream()\n-            .map(\n-                (sexAtBirth) -> {\n-                  return DemographicSurveyEnum.sexAtBirthToStorage(sexAtBirth);\n-                })\n-            .collect(Collectors.toList());\n+  public void setEducationEnum(Education education) {\n+    this.education = DemographicSurveyEnum.educationToStorage(education);\n   }\n \n   @Column(name = \"ethnicity\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1OTI2Mg==", "url": "https://github.com/all-of-us/workbench/pull/2977#discussion_r364359262", "bodyText": "Can replace with .map(DemographicSurveyEnum::sexualOrientationToStorage)", "author": "jmthibault79", "createdAt": "2020-01-08T17:45:41Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java", "diffHunk": "@@ -94,6 +98,74 @@ public void setRaceEnum(List<Race> raceList) {\n             .collect(Collectors.toList());\n   }\n \n+  @ElementCollection(fetch = FetchType.LAZY)\n+  @CollectionTable(\n+      name = \"demographic_survey_sexual_orientation\",\n+      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n+  @Column(name = \"sexual_orientation\")\n+  public List<Short> getSexualOrientation() {\n+    return sexualOrientation;\n+  }\n+\n+  public void setSexualOrientation(List<Short> sexualOrientation) {\n+    this.sexualOrientation = sexualOrientation;\n+  }\n+\n+  @Transient\n+  public List<SexualOrientation> getSexualOrientationEnum() {\n+    if (sexualOrientation == null) return null;\n+    return this.sexualOrientation.stream()\n+        .map(\n+            (sexualOrientationObject) -> {\n+              return DemographicSurveyEnum.sexualOrientationFromStorage(sexualOrientationObject);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  public void setSexualOrientationEnum(List<SexualOrientation> sexualOrientationList) {\n+    this.sexualOrientation =\n+        sexualOrientationList.stream()\n+            .map(", "originalCommit": "abeee3097a91fd7bf626f921e058c2396a6921b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc2c78ee790899523a643c277cb1c9aa7e1e3f19", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java b/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\nindex 19e85aae5..305f4bbca 100644\n--- a/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\n+++ b/api/src/main/java/org/pmiops/workbench/db/model/DbDemographicSurvey.java\n\n@@ -31,139 +31,71 @@ public class DbDemographicSurvey {\n   private List<Short> gender;\n   private long id;\n   private DbUser user;\n+  private List<Short> race;\n   private List<Short> sexAtBirth;\n   private List<Short> sexualOrientation;\n-  private List<Short> race;\n   private int year_of_birth;\n \n   public DbDemographicSurvey() {}\n \n   public DbDemographicSurvey(org.pmiops.workbench.model.DemographicSurvey demographicSurvey) {\n-    this.race =\n-        demographicSurvey.getRace().stream()\n-            .map((race) -> DemographicSurveyEnum.raceToStorage(race))\n-            .collect(Collectors.toList());\n+    this.disability = DemographicSurveyEnum.disabilityToStorage(demographicSurvey.getDisability());\n+    this.education = DemographicSurveyEnum.educationToStorage(demographicSurvey.getEducation());\n     this.ethnicity = DemographicSurveyEnum.ethnicityToStorage(demographicSurvey.getEthnicity());\n     this.gender =\n         demographicSurvey.getGender().stream()\n-            .map((gender) -> DemographicSurveyEnum.genderToStorage(gender))\n+            .map(DemographicSurveyEnum::genderToStorage)\n             .collect(Collectors.toList());\n-    this.year_of_birth = demographicSurvey.getYearOfBirth().intValue();\n-    this.education = DemographicSurveyEnum.educationToStorage(demographicSurvey.getEducation());\n-    this.disability = DemographicSurveyEnum.disabilityToStorage(demographicSurvey.getDisability());\n-  }\n-\n-  @Id\n-  @GeneratedValue(strategy = GenerationType.IDENTITY)\n-  @Column(name = \"demographic_survey_id\")\n-  public long getId() {\n-    return id;\n-  }\n-\n-  public void setId(long demographic_survey_id) {\n-    this.id = demographic_survey_id;\n-  }\n-\n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_race\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"race\")\n-  public List<Short> getRace() {\n-    return race;\n-  }\n-\n-  public void setRace(List<Short> race) {\n-    this.race = race;\n-  }\n-\n-  @Transient\n-  public List<Race> getRaceEnum() {\n-    if (race == null) return null;\n-    return this.race.stream()\n-        .map(\n-            (raceObject) -> {\n-              return DemographicSurveyEnum.raceFromStorage(raceObject);\n-            })\n-        .collect(Collectors.toList());\n-  }\n-\n-  public void setRaceEnum(List<Race> raceList) {\n     this.race =\n-        raceList.stream()\n-            .map(\n-                (race) -> {\n-                  return DemographicSurveyEnum.raceToStorage(race);\n-                })\n+        demographicSurvey.getRace().stream()\n+            .map(DemographicSurveyEnum::raceToStorage)\n+            .collect(Collectors.toList());\n+    this.sexAtBirth =\n+        demographicSurvey.getSexAtBirth().stream()\n+            .map(DemographicSurveyEnum::sexAtBirthToStorage)\n             .collect(Collectors.toList());\n+    this.sexualOrientation =\n+        demographicSurvey.getSexualOrientation().stream()\n+            .map(DemographicSurveyEnum::sexualOrientationToStorage)\n+            .collect(Collectors.toList());\n+    this.year_of_birth = demographicSurvey.getYearOfBirth().intValue();\n   }\n \n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_sexual_orientation\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"sexual_orientation\")\n-  public List<Short> getSexualOrientation() {\n-    return sexualOrientation;\n+  @Column(name = \"disability\")\n+  public Short getDisability() {\n+    return disability;\n   }\n \n-  public void setSexualOrientation(List<Short> sexualOrientation) {\n-    this.sexualOrientation = sexualOrientation;\n+  public void setDisability(Short disability) {\n+    this.disability = disability;\n   }\n \n   @Transient\n-  public List<SexualOrientation> getSexualOrientationEnum() {\n-    if (sexualOrientation == null) return null;\n-    return this.sexualOrientation.stream()\n-        .map(\n-            (sexualOrientationObject) -> {\n-              return DemographicSurveyEnum.sexualOrientationFromStorage(sexualOrientationObject);\n-            })\n-        .collect(Collectors.toList());\n+  public Disability getDisabilityEnum() {\n+    return DemographicSurveyEnum.disabilityFromStorage(disability);\n   }\n \n-  public void setSexualOrientationEnum(List<SexualOrientation> sexualOrientationList) {\n-    this.sexualOrientation =\n-        sexualOrientationList.stream()\n-            .map(\n-                (sexualOrientation) -> {\n-                  return DemographicSurveyEnum.sexualOrientationToStorage(sexualOrientation);\n-                })\n-            .collect(Collectors.toList());\n+  public void setDisabilityEnum(Disability disability) {\n+    this.disability = DemographicSurveyEnum.disabilityToStorage(disability);\n   }\n \n-  @ElementCollection(fetch = FetchType.LAZY)\n-  @CollectionTable(\n-      name = \"demographic_survey_sex_at_birth\",\n-      joinColumns = @JoinColumn(name = \"demographic_survey_id\"))\n-  @Column(name = \"sex_at_birth\")\n-  public List<Short> getSexAtBirth() {\n-    return sexAtBirth;\n+  @Column(name = \"education\")\n+  public Short getEducation() {\n+    return education;\n   }\n \n-  public void setSexAtBirth(List<Short> sexAtBirth) {\n-    this.sexAtBirth = sexAtBirth;\n+  public void setEducation(Short education) {\n+    this.education = education;\n   }\n \n   @Transient\n-  public List<SexAtBirth> getSexAtBirthEnum() {\n-    if (sexAtBirth == null) return null;\n-    return this.sexAtBirth.stream()\n-        .map(\n-            (sexAtBirthObject) -> {\n-              return DemographicSurveyEnum.sexAtBirthFromStorage(sexAtBirthObject);\n-            })\n-        .collect(Collectors.toList());\n+  public Education getEducationEnum() {\n+    if (education == null) return null;\n+    return DemographicSurveyEnum.educationFromStorage(education);\n   }\n \n-  public void setSexAtBirthEnum(List<SexAtBirth> sexAtBirthList) {\n-    this.sexAtBirth =\n-        sexAtBirthList.stream()\n-            .map(\n-                (sexAtBirth) -> {\n-                  return DemographicSurveyEnum.sexAtBirthToStorage(sexAtBirth);\n-                })\n-            .collect(Collectors.toList());\n+  public void setEducationEnum(Education education) {\n+    this.education = DemographicSurveyEnum.educationToStorage(education);\n   }\n \n   @Column(name = \"ethnicity\")\n"}}, {"oid": "cc2c78ee790899523a643c277cb1c9aa7e1e3f19", "url": "https://github.com/all-of-us/workbench/commit/cc2c78ee790899523a643c277cb1c9aa7e1e3f19", "message": "PR feedback", "committedDate": "2020-01-08T22:33:53Z", "type": "commit"}, {"oid": "ea659c5759b8563f0660df0d744c282833cca3f2", "url": "https://github.com/all-of-us/workbench/commit/ea659c5759b8563f0660df0d744c282833cca3f2", "message": "Fix linting", "committedDate": "2020-01-09T16:11:33Z", "type": "commit"}]}