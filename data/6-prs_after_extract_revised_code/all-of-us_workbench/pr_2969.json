{"pr_number": 2969, "pr_title": "[RW-4235][risk=no] Log when a user observes a held notebook lock", "pr_createdAt": "2020-01-04T00:44:03Z", "pr_url": "https://github.com/all-of-us/workbench/pull/2969", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2NDkzOA==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r363364938", "bodyText": "If it's useful, we can either fire an event metric for this to StackDriver, or add a log-based metric.", "author": "jaycarlton", "createdAt": "2020-01-06T16:17:31Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -703,6 +703,20 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       }\n     }\n \n+    // If a lock is held by another user, log this to establish a rough estimate of how often\n+    // locked notebooks are encountered. Note that this only covers locks encountered from the\n+    // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n+    if (response.getLockExpirationTime() != null && response.getLastLockedBy() != null) {\n+      String currentUsername = userProvider.get().getUsername();\n+      if (clock.millis() < response.getLockExpirationTime()\n+          && !response.getLastLockedBy().equals(currentUsername)) {\n+        log.info(", "originalCommit": "35e9244876a9d63045471fc9d08d6257834f255d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNzA1OQ==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r363427059", "bodyText": "Nice suggestion, added - PTAL", "author": "calbach", "createdAt": "2020-01-06T18:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2NDkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 8414f163b..178f9574c 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -706,16 +713,23 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     // If a lock is held by another user, log this to establish a rough estimate of how often\n     // locked notebooks are encountered. Note that this only covers locks encountered from the\n     // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n-    if (response.getLockExpirationTime() != null && response.getLastLockedBy() != null) {\n-      String currentUsername = userProvider.get().getUsername();\n-      if (clock.millis() < response.getLockExpirationTime()\n-          && !response.getLastLockedBy().equals(currentUsername)) {\n-        log.info(\n-            String.format(\n-                \"user '%s' observed notebook locked by '%s'\",\n-                currentUsername, response.getLastLockedBy()));\n-      }\n-    }\n+    String currentUsername = userProvider.get().getUsername();\n+    boolean notebookAvailable =\n+        response.getLockExpirationTime() == null\n+            || response.getLastLockedBy() == null\n+            || response.getLockExpirationTime() < clock.millis()\n+            || response.getLastLockedBy().equals(currentUsername);\n+    if (notebookAvailable) {\n+      log.info(\n+          String.format(\n+              \"user '%s' observed notebook locked by '%s'\",\n+              currentUsername, response.getLastLockedBy()));\n+    }\n+    monitoringService.recordBundle(\n+        MeasurementBundle.builder()\n+            .addEvent(GaugeMetric.NOTEBOOK_LOCK_CHECK)\n+            .addTag(MetricLabel.NOTEBOOK_AVAILABLE_TO_USER, Boolean.toString(notebookAvailable))\n+            .build());\n \n     return ResponseEntity.ok(response);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MDc2NA==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364740764", "bodyText": "Looks good as of this writing. Thanks for being the first guinea pig.\nIn terms of timing, I might hold off and use a single metric that has attachments after #2934 is in. The paradigm there is a metric like NOTEBOOK_CHECK_BY_LOCK_STATUS and then a key like AttachmentKey.NOTEBOOK_LOCK_STATUS with values locked and unlocked. (This would be an EventMetric instead of a GaugeMetric in the new scheme.)\nNo harm in leaving this in place in the meantime and adding rather than replacing these, especially since I can't yet guarantee the above functionality is in the next build. And of course, now that you've gone through the process here, any comments on the other PR are doubly appreciated.", "author": "jaycarlton", "createdAt": "2020-01-09T13:37:00Z", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/MonitoringViews.java", "diffHunk": "@@ -29,6 +29,11 @@\n   NOTEBOOK_SAVE(\"notebook_save\", \"Save (or create) a notebook\"),\n   NOTEBOOK_CLONE(\"notebook_clone\", \"Clone (duplicate) a notebook\"),\n   NOTEBOOK_DELETE(\"notebook_delete\", \"Delete a notebook\"),\n+  NOTEBOOK_CHECK_LOCKED(", "originalCommit": "f5b26c9eb2767fcfc0ca915af61ebd4821e2bb00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MzE2Mg==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364953162", "bodyText": "I saw that go by - sure, that would be preferred, I will wait for it since this isn't particularly urgent.", "author": "calbach", "createdAt": "2020-01-09T20:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MDc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/monitoring/views/MonitoringViews.java b/api/src/main/java/org/pmiops/workbench/monitoring/views/MonitoringViews.java\ndeleted file mode 100644\nindex 4e9127ef9..000000000\n--- a/api/src/main/java/org/pmiops/workbench/monitoring/views/MonitoringViews.java\n+++ /dev/null\n\n@@ -1,105 +0,0 @@\n-package org.pmiops.workbench.monitoring.views;\n-\n-import io.opencensus.stats.Aggregation;\n-import io.opencensus.stats.Measure.MeasureDouble;\n-import io.opencensus.stats.Measure.MeasureLong;\n-import io.opencensus.tags.TagKey;\n-import java.util.Collections;\n-import java.util.List;\n-\n-public enum MonitoringViews implements OpenCensusStatsViewInfo {\n-  BILLING_BUFFER_SIZE(\n-      \"billing_project_buffer_entries\", \"The number of billing project buffer entries.\"),\n-  BILLING_BUFFER_AVAILABLE_PROJECT_COUNT(\n-      \"billing_project_buffer_available_project_count\",\n-      \"Current number of billing projects with available status.\"),\n-  BILLING_BUFFER_ASSIGNING_PROJECT_COUNT(\n-      \"billing_project_buffer_assigning_project_count\",\n-      \"Current number of billing projects with assigning status.\"),\n-  BILLING_BUFFER_CREATING_PROJECT_COUNT(\n-      \"billing_project_buffer_creating_project_count\",\n-      \"Current number of billing projects with creating status.\"),\n-  DEBUG_MILLISECONDS_SINCE_EPOCH(\"debug_epoch_millis\", \"Number of milliseconds since epoch\"),\n-  DEBUG_RANDOM_DOUBLE(\n-      \"debug_random_double\",\n-      \"Double value for debugging\",\n-      \"MHz\",\n-      MeasureDouble.class,\n-      Aggregation.Sum.create()),\n-  NOTEBOOK_SAVE(\"notebook_save\", \"Save (or create) a notebook\"),\n-  NOTEBOOK_CLONE(\"notebook_clone\", \"Clone (duplicate) a notebook\"),\n-  NOTEBOOK_DELETE(\"notebook_delete\", \"Delete a notebook\"),\n-  NOTEBOOK_CHECK_LOCKED(\n-      \"notebook_check_locked\", \"A user checks a notebook which is actively locked by another user\"),\n-  NOTEBOOK_CHECK_AVAILABLE(\n-      \"notebook_check_available\",\n-      \"A user checks a notebook which is unlocked or for which they hold the lock\"),\n-  WORKSPACE_TOTAL_COUNT(\"workspace_total_count\", \"Count of all workspaces (including inactive)\"),\n-  DATASET_COUNT(\"dataset_count\", \"Count of all datasets in existence\"),\n-  COHORT_COUNT(\"cohort_count\", \"Count of all cohorts in existence\");\n-\n-  private final String name;\n-  private final String description;\n-  private final String unit;\n-  private final Aggregation aggregation;\n-  private List<TagKey> columns;\n-  private final Class measureClass;\n-\n-  MonitoringViews(String name, String description) {\n-    this(name, description, OpenCensusStatsViewInfo.UNITLESS_UNIT, MeasureLong.class);\n-  }\n-\n-  MonitoringViews(String name, String description, String unit, Class measureClass) {\n-    this(name, description, unit, measureClass, Aggregation.LastValue.create());\n-  }\n-\n-  MonitoringViews(\n-      String name, String description, String unit, Class measureClass, Aggregation aggregation) {\n-    this(name, description, unit, measureClass, aggregation, Collections.emptyList());\n-  }\n-\n-  MonitoringViews(\n-      String name,\n-      String description,\n-      String unit,\n-      Class measureClass,\n-      Aggregation aggregation,\n-      List<TagKey> columns) {\n-    this.name = name;\n-    this.description = description;\n-    this.unit = unit;\n-    this.measureClass = measureClass;\n-    this.aggregation = aggregation;\n-    this.columns = columns;\n-  }\n-\n-  @Override\n-  public String getName() {\n-    return name;\n-  }\n-\n-  @Override\n-  public String getDescription() {\n-    return description;\n-  }\n-\n-  @Override\n-  public String getUnit() {\n-    return unit;\n-  }\n-\n-  @Override\n-  public Class getMeasureClass() {\n-    return measureClass;\n-  }\n-\n-  @Override\n-  public Aggregation getAggregation() {\n-    return aggregation;\n-  }\n-\n-  @Override\n-  public List<TagKey> getColumns() {\n-    return columns;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MTgyOA==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364741828", "bodyText": "style nit/trick: if you just have a line that just says final MonitoringViews lockMetric;, the compiler will keep you honest that it's initialized exactly once, taking all branches into account. That way if someone adds another branch later, they won't forget to assign it as appropriate.", "author": "jaycarlton", "createdAt": "2020-01-09T13:39:07Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -703,6 +708,23 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       }\n     }\n \n+    // If a lock is held by another user, log this to establish a rough estimate of how often\n+    // locked notebooks are encountered. Note that this only covers locks encountered from the\n+    // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n+    MonitoringViews lockMetric = MonitoringViews.NOTEBOOK_CHECK_AVAILABLE;", "originalCommit": "f5b26c9eb2767fcfc0ca915af61ebd4821e2bb00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MjY4Nw==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364952687", "bodyText": "I expected you would leave a final-related comment here. I'm aware that Java supports doing it the way you describe, but my preference is to initialize to a happy-path default value, and then override in exceptional cases.", "author": "calbach", "createdAt": "2020-01-09T20:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MTgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 79b38e9b7..178f9574c 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -711,19 +713,23 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     // If a lock is held by another user, log this to establish a rough estimate of how often\n     // locked notebooks are encountered. Note that this only covers locks encountered from the\n     // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n-    MonitoringViews lockMetric = MonitoringViews.NOTEBOOK_CHECK_AVAILABLE;\n-    if (response.getLockExpirationTime() != null && response.getLastLockedBy() != null) {\n-      String currentUsername = userProvider.get().getUsername();\n-      if (clock.millis() < response.getLockExpirationTime()\n-          && !response.getLastLockedBy().equals(currentUsername)) {\n-        log.info(\n-            String.format(\n-                \"user '%s' observed notebook locked by '%s'\",\n-                currentUsername, response.getLastLockedBy()));\n-        lockMetric = MonitoringViews.NOTEBOOK_CHECK_LOCKED;\n-      }\n-    }\n-    monitoringService.recordIncrement(lockMetric);\n+    String currentUsername = userProvider.get().getUsername();\n+    boolean notebookAvailable =\n+        response.getLockExpirationTime() == null\n+            || response.getLastLockedBy() == null\n+            || response.getLockExpirationTime() < clock.millis()\n+            || response.getLastLockedBy().equals(currentUsername);\n+    if (notebookAvailable) {\n+      log.info(\n+          String.format(\n+              \"user '%s' observed notebook locked by '%s'\",\n+              currentUsername, response.getLastLockedBy()));\n+    }\n+    monitoringService.recordBundle(\n+        MeasurementBundle.builder()\n+            .addEvent(GaugeMetric.NOTEBOOK_LOCK_CHECK)\n+            .addTag(MetricLabel.NOTEBOOK_AVAILABLE_TO_USER, Boolean.toString(notebookAvailable))\n+            .build());\n \n     return ResponseEntity.ok(response);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MjA2MA==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364742060", "bodyText": "Thanks for the test updates.", "author": "jaycarlton", "createdAt": "2020-01-09T13:39:37Z", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -2622,6 +2628,7 @@ public void testNotebookLockingNullMetadata() {\n \n     final NotebookLockingMetadataResponse expectedResponse = new NotebookLockingMetadataResponse();\n     assertNotebookLockingMetadata(gcsMetadata, expectedResponse, fcWorkspaceAcl);\n+    verify(mockMonitoringService).recordIncrement(MonitoringViews.NOTEBOOK_CHECK_AVAILABLE);", "originalCommit": "f5b26c9eb2767fcfc0ca915af61ebd4821e2bb00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\nindex 8bd19b1dc..b3096c7bf 100644\n--- a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n\n@@ -2628,7 +2640,7 @@ public class WorkspacesControllerTest {\n \n     final NotebookLockingMetadataResponse expectedResponse = new NotebookLockingMetadataResponse();\n     assertNotebookLockingMetadata(gcsMetadata, expectedResponse, fcWorkspaceAcl);\n-    verify(mockMonitoringService).recordIncrement(MonitoringViews.NOTEBOOK_CHECK_AVAILABLE);\n+    verify(mockMonitoringService).recordBundle(createNotebookMeasurementBundle(true));\n   }\n \n   @Test\n"}}, {"oid": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d", "url": "https://github.com/all-of-us/workbench/commit/57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d", "message": "Refactor to use attachment", "committedDate": "2020-01-17T01:59:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NTU1Ng==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r368165556", "bodyText": "Looks good.", "author": "jaycarlton", "createdAt": "2020-01-17T22:39:54Z", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/GaugeMetric.java", "diffHunk": "@@ -19,6 +19,10 @@\n       \"dataset_count_2\",\n       \"Count of all datasets in existence\",\n       ImmutableList.of(MetricLabel.DATASET_INVALID)),\n+  NOTEBOOK_LOCK_CHECK(\n+      \"notebook_lock_check\",\n+      \"Counts of notebook availability due to locking, as observed by the caller\",", "originalCommit": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f34b92bea887bfc78e23cf97a904ccff616eb9b", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/monitoring/views/GaugeMetric.java b/api/src/main/java/org/pmiops/workbench/monitoring/views/GaugeMetric.java\nindex 7bb15c7eb..3a820fbfd 100644\n--- a/api/src/main/java/org/pmiops/workbench/monitoring/views/GaugeMetric.java\n+++ b/api/src/main/java/org/pmiops/workbench/monitoring/views/GaugeMetric.java\n\n@@ -19,10 +19,6 @@ public enum GaugeMetric implements Metric {\n       \"dataset_count_2\",\n       \"Count of all datasets in existence\",\n       ImmutableList.of(MetricLabel.DATASET_INVALID)),\n-  NOTEBOOK_LOCK_CHECK(\n-      \"notebook_lock_check\",\n-      \"Counts of notebook availability due to locking, as observed by the caller\",\n-      ImmutableList.of(MetricLabel.NOTEBOOK_AVAILABLE_TO_USER)),\n   USER_COUNT(\n       \"user_count_2\",\n       \"total number of users\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NjI4MA==", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r368166280", "bodyText": "Just a heads up: I'm about 75% sure that Stackdriver considers the Labels (tags) list to be part of the metric descriptor, so if you want to add another tag in the future, we have to either drop this one and replace it, or add a new one. I'll put this in the docs.", "author": "jaycarlton", "createdAt": "2020-01-17T22:42:43Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -703,6 +710,27 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       }\n     }\n \n+    // If a lock is held by another user, log this to establish a rough estimate of how often\n+    // locked notebooks are encountered. Note that this only covers locks encountered from the\n+    // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n+    String currentUsername = userProvider.get().getUsername();\n+    boolean notebookAvailable =\n+        response.getLockExpirationTime() == null\n+            || response.getLastLockedBy() == null\n+            || response.getLockExpirationTime() < clock.millis()\n+            || response.getLastLockedBy().equals(currentUsername);\n+    if (notebookAvailable) {\n+      log.info(\n+          String.format(\n+              \"user '%s' observed notebook locked by '%s'\",\n+              currentUsername, response.getLastLockedBy()));\n+    }\n+    monitoringService.recordBundle(\n+        MeasurementBundle.builder()\n+            .addEvent(GaugeMetric.NOTEBOOK_LOCK_CHECK)\n+            .addTag(MetricLabel.NOTEBOOK_AVAILABLE_TO_USER, Boolean.toString(notebookAvailable))", "originalCommit": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f34b92bea887bfc78e23cf97a904ccff616eb9b", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 178f9574c..86a92872c 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n\n@@ -714,22 +707,17 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     // locked notebooks are encountered. Note that this only covers locks encountered from the\n     // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n     String currentUsername = userProvider.get().getUsername();\n-    boolean notebookAvailable =\n-        response.getLockExpirationTime() == null\n-            || response.getLastLockedBy() == null\n-            || response.getLockExpirationTime() < clock.millis()\n-            || response.getLastLockedBy().equals(currentUsername);\n-    if (notebookAvailable) {\n+    if (response.getLockExpirationTime() == null\n+        || response.getLastLockedBy() == null\n+        || response.getLockExpirationTime() < clock.millis()\n+        || response.getLastLockedBy().equals(currentUsername)) {\n+      log.info(String.format(\"user '%s' observed notebook available for editing\", currentUsername));\n+    } else {\n       log.info(\n           String.format(\n               \"user '%s' observed notebook locked by '%s'\",\n               currentUsername, response.getLastLockedBy()));\n     }\n-    monitoringService.recordBundle(\n-        MeasurementBundle.builder()\n-            .addEvent(GaugeMetric.NOTEBOOK_LOCK_CHECK)\n-            .addTag(MetricLabel.NOTEBOOK_AVAILABLE_TO_USER, Boolean.toString(notebookAvailable))\n-            .build());\n \n     return ResponseEntity.ok(response);\n   }\n"}}, {"oid": "3f34b92bea887bfc78e23cf97a904ccff616eb9b", "url": "https://github.com/all-of-us/workbench/commit/3f34b92bea887bfc78e23cf97a904ccff616eb9b", "message": "Log lock status", "committedDate": "2020-01-22T04:38:27Z", "type": "commit"}, {"oid": "3f34b92bea887bfc78e23cf97a904ccff616eb9b", "url": "https://github.com/all-of-us/workbench/commit/3f34b92bea887bfc78e23cf97a904ccff616eb9b", "message": "Log lock status", "committedDate": "2020-01-22T04:38:27Z", "type": "forcePushed"}]}