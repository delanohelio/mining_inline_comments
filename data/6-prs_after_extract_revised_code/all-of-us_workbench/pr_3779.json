{"pr_number": 3779, "pr_title": "[RW-5028][RISK=NO] use partition time to scan many fewer partitions", "pr_createdAt": "2020-07-13T21:06:32Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3779", "timeline": [{"oid": "688550b1fb93010cfa95906948f1aa7ead39d2cb", "url": "https://github.com/all-of-us/workbench/commit/688550b1fb93010cfa95906948f1aa7ead39d2cb", "message": "use partition time to scan many fewer partitions", "committedDate": "2020-07-13T21:02:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzUxNw==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r454657517", "bodyText": "Will @after always be equal to a day boundary?  If not, this query will miss 23:59:59 worth of events in the worst case.  Choosing (@after - 1 day <= partition) is safer, and only scans 1 extraneous partition in the worst case.\nActually... are we guaranteed to have a partition daily?  Maybe increase that safety buffer.\nThe @before check looks fine.", "author": "jmthibault79", "createdAt": "2020-07-14T21:31:01Z", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -38,11 +38,13 @@\n           + \"  jsonPayload.prev_value AS prev_value,\\n\"\n           + \"  jsonPayload.new_value AS new_value\\n\"\n           + \"FROM %s\\n\"\n-          + \"WHERE %s AND\\n\"\n-          + \"  @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) AND\\n\"\n-          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"WHERE %s\\n\"\n+          + \"  AND @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64))\\n\"\n+          + \"  AND TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"  AND @after <= _PARTITIONTIME\\n\"", "originalCommit": "688550b1fb93010cfa95906948f1aa7ead39d2cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3OTQ5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r454679499", "bodyText": "You're right. I missed the boundary condition there.", "author": "jaycarlton", "createdAt": "2020-07-14T22:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MDY3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r454680676", "bodyText": "Additionally, the event timestamps in the JSON payload predate (hopefully!) the BQ ingestion timestamps (which are the basis for partition determination) by delays in logging and sinking to BQ. Maybe a buffer of 1 day on either side is prudent.", "author": "jaycarlton", "createdAt": "2020-07-14T22:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "d0cb0a5ed07faf24a7a8c983cc3ec37580582846", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java b/api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java\nindex e9ea1ed55..25709b480 100644\n--- a/api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java\n\n@@ -41,14 +44,15 @@ public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n           + \"WHERE %s\\n\"\n           + \"  AND @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64))\\n\"\n           + \"  AND TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n-          + \"  AND @after <= _PARTITIONTIME\\n\"\n-          + \"  AND _PARTITIONTIME < @before\\n\"\n+          + \"  AND @after_partition_time <= _PARTITIONTIME\\n\"\n+          + \"  AND _PARTITIONTIME < @before_partition_time\\n\"\n           + \"ORDER BY event_time, agent_id, action_id\\n\"\n           + \"LIMIT @limit;\";\n \n   private final AuditLogEntryMapper auditLogEntryMapper;\n   private final BigQueryService bigQueryService;\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final Duration PARTITION_BUFFER = Duration.ofDays(1);\n \n   public ActionAuditQueryServiceImpl(\n       AuditLogEntryMapper auditLogEntryMapper,\n"}}, {"oid": "9a96bff26828002d0a69979aad4d9ebb3c1687ed", "url": "https://github.com/all-of-us/workbench/commit/9a96bff26828002d0a69979aad4d9ebb3c1687ed", "message": "Merge branch 'master' into jaycarlton/RW-5078", "committedDate": "2020-07-15T13:43:00Z", "type": "commit"}, {"oid": "d0cb0a5ed07faf24a7a8c983cc3ec37580582846", "url": "https://github.com/all-of-us/workbench/commit/d0cb0a5ed07faf24a7a8c983cc3ec37580582846", "message": "fix partition times, remove joda-time, and make query replacement method work with substrings of parameter names", "committedDate": "2020-07-15T20:55:20Z", "type": "commit"}, {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb", "url": "https://github.com/all-of-us/workbench/commit/c681e9032247570aab4673d99a0516f70fe8cbdb", "message": "move utility methods to shared util class", "committedDate": "2020-07-15T21:10:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3MDM0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455870347", "bodyText": "It just now occurred to me that I can use regex Patterns with word boundaries to solve this issue, and avoid re-sorting the whole list and lots of this code. All in favor of less code in this function?", "author": "jaycarlton", "createdAt": "2020-07-16T15:22:48Z", "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/BQParameterUtil.java", "diffHunk": "@@ -1,16 +1,78 @@\n package org.pmiops.workbench.cohortbuilder.util;\n \n+import com.google.cloud.bigquery.QueryJobConfiguration;\n import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.StandardSQLTypeName;\n+import java.time.Instant;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n \n public final class BQParameterUtil {\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n \n   /** Generate a unique parameter name and add it to the parameter map provided. */\n   public static String buildParameter(\n       Map<String, QueryParameterValue> queryParameterValueMap,\n       QueryParameterValue queryParameterValue) {\n     String parameterName = \"p\" + queryParameterValueMap.size();\n     queryParameterValueMap.put(parameterName, queryParameterValue);\n+    return decorateParameterName(parameterName);\n+  }\n+\n+  public static QueryParameterValue instantToQPValue(Instant instant) {\n+    return QueryParameterValue.timestamp(instant.toEpochMilli() * MICROSECONDS_IN_MILLISECOND);\n+  }\n+\n+  // Since BigQuery doesn't expose the literal query string built from a QueryJobConfiguration,\n+  // this method does the next best thing. Useful for diagnostics, logging, testing, etc.\n+  public static String getReplacedQueryText(QueryJobConfiguration queryJobConfiguration) {\n+    String result = \"-- reconstructed query text\\n\" + queryJobConfiguration.getQuery();\n+    final Map<String, QueryParameterValue> keyToNamedParameter =\n+        queryJobConfiguration.getNamedParameters().entrySet().stream()\n+            .collect(Collectors.toMap(e -> decorateParameterName(e.getKey()), Entry::getValue));\n+\n+    // Sort in reverse lenght order so we don't partially replace any parameter names (e.g. replace\n+    // \"@foo\" before \"@foo_bar\").\n+    final List<String> keysByLengthDesc =", "originalCommit": "c681e9032247570aab4673d99a0516f70fe8cbdb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2f526c776b32dedb9b8ac95177edeee5386b266", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/BQParameterUtil.java b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/BQParameterUtil.java\nindex c14fbbeed..435bbeaab 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/BQParameterUtil.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortbuilder/util/BQParameterUtil.java\n\n@@ -4,11 +4,12 @@ import com.google.cloud.bigquery.QueryJobConfiguration;\n import com.google.cloud.bigquery.QueryParameterValue;\n import com.google.cloud.bigquery.StandardSQLTypeName;\n import java.time.Instant;\n-import java.util.List;\n+import java.util.Arrays;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Optional;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import org.pmiops.workbench.utils.Matchers;\n \n public final class BQParameterUtil {\n   private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455890089", "bodyText": "not sure this is needed but it doesn't cost us much", "author": "jmthibault79", "createdAt": "2020-07-16T15:50:43Z", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -117,38 +118,20 @@ public UserAuditLogQueryResponse queryEventsForUser(\n     return new UserAuditLogQueryResponse()\n         .actions(auditLogEntryMapper.logEntriesToActions(logEntries))\n         .logEntries(logEntries)\n-        .query(getReplacedQueryText(queryJobConfiguration))\n+        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration))\n         .userDatabaseId(userDatabaseId);\n   }\n \n   private ImmutableMap.Builder<String, QueryParameterValue> getNamedParameterMapBuilder(\n-      long limit, DateTime after, DateTime before) {\n+      long limit, Instant after, Instant before) {\n+    final Instant afterPartitionTime = after.minus(PARTITION_BUFFER);\n+    final Instant beforePartitionTime = before.plus(PARTITION_BUFFER);", "originalCommit": "c681e9032247570aab4673d99a0516f70fe8cbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NzkzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r456587939", "bodyText": "I like to use immutable types whenever possible as return values.", "author": "jaycarlton", "createdAt": "2020-07-17T17:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MzAyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r456653021", "bodyText": "I mean that I don't think adding one day to \"before\" is necessary.", "author": "jmthibault79", "createdAt": "2020-07-17T20:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3MTMzMQ==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r456671331", "bodyText": "Oh, the timestamp I send to StackDriver is generally earlier than the ingestion time (which is what counts). So if I have an event at 23:59:30, it might have an ingestion timestamp of 00:00:30 on the next day. But you're right that that's fixable by moving before to the right.", "author": "jaycarlton", "createdAt": "2020-07-17T20:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxMjc1NA==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457412754", "bodyText": "OK - safer to keep this then.  thanks!", "author": "jmthibault79", "createdAt": "2020-07-20T14:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d2f526c776b32dedb9b8ac95177edeee5386b266", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java b/api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java\nindex e2c0673dd..552f01b11 100644\n--- a/api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java\n\n@@ -114,11 +118,14 @@ public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n     final TableResult tableResult = bigQueryService.executeQuery(queryJobConfiguration);\n \n     final List<AuditLogEntry> logEntries = auditLogEntryMapper.tableResultToLogEntries(tableResult);\n-\n+    final String queryHeader =\n+        String.format(\n+            \"Audit trail for user DB ID %d, after %s and before %s\",\n+            userDatabaseId, after.toString(), before.toString());\n     return new UserAuditLogQueryResponse()\n         .actions(auditLogEntryMapper.logEntriesToActions(logEntries))\n         .logEntries(logEntries)\n-        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration))\n+        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration, queryHeader))\n         .userDatabaseId(userDatabaseId);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjcyNg==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455892726", "bodyText": "these look right but could you swap the order?", "author": "jmthibault79", "createdAt": "2020-07-16T15:54:18Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -176,9 +168,27 @@ public void testQueryUserEvents() {\n \n     final UserAuditLogQueryResponse response =\n         actionAuditQueryService.queryEventsForUser(\n-            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER_INCLUSIVE, DEFAULT_BEFORE_EXCLUSIVE);\n+            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER, DEFAULT_BEFORE);\n     assertThat(response.getLogEntries()).isEmpty();\n     assertThat(response.getUserDatabaseId()).isEqualTo(USER_DB_ID);\n     assertThat(response.getQuery()).contains(\"SELECT\");\n   }\n+\n+  @Test\n+  public void testPartitionTimeBuffer() {\n+    doReturn(EMPTY_RESULT).when(mockBigQueryService).executeQuery(any(QueryJobConfiguration.class));\n+    final Instant after = Instant.parse(\"2020-03-10T09:30:00.00Z\");\n+    final Instant before = after.plus(Duration.ofDays(5));\n+\n+    final UserAuditLogQueryResponse response =\n+        actionAuditQueryService.queryEventsForUser(USER_DB_ID, DEFAULT_LIMIT, after, before);\n+\n+    final String query = response.getQuery();\n+    assertThat(query)", "originalCommit": "c681e9032247570aab4673d99a0516f70fe8cbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3MTU4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r456671582", "bodyText": "I swapped it, but we're not asserting about the relative order of clauses in the query. That should be able to change without breaking the test.", "author": "jaycarlton", "createdAt": "2020-07-17T20:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxMzE1MQ==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457413151", "bodyText": "Yes - I meant this only for reading", "author": "jmthibault79", "createdAt": "2020-07-20T14:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "c50a928a6491aecfe0ce1e30e93e12a9ff413b14", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java b/api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java\nindex 7d30ff783..ec9b48ddf 100644\n--- a/api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java\n\n@@ -186,9 +186,9 @@ public class ActionAuditQueryServiceTest {\n     final String query = response.getQuery();\n     assertThat(query)\n         .containsMatch(\n-            \"AND\\\\s+_PARTITIONTIME\\\\s+<\\\\s+TIMESTAMP\\\\s+'2020-03-16 09:30:00\\\\.\\\\d{6}\\\\+00:00'\");\n+            \"TIMESTAMP\\\\s+'2020-03-09 09:30:00\\\\.\\\\d{6}\\\\+00:00'\\\\s+<=\\\\s+_PARTITIONTIME\");\n     assertThat(query)\n         .containsMatch(\n-            \"TIMESTAMP\\\\s+'2020-03-09 09:30:00\\\\.\\\\d{6}\\\\+00:00'\\\\s+<=\\\\s+_PARTITIONTIME\");\n+            \"AND\\\\s+_PARTITIONTIME\\\\s+<\\\\s+TIMESTAMP\\\\s+'2020-03-16 09:30:00\\\\.\\\\d{6}\\\\+00:00'\");\n   }\n }\n"}}, {"oid": "d2f526c776b32dedb9b8ac95177edeee5386b266", "url": "https://github.com/all-of-us/workbench/commit/d2f526c776b32dedb9b8ac95177edeee5386b266", "message": "fixes", "committedDate": "2020-07-16T18:48:13Z", "type": "commit"}, {"oid": "ab3807782d0fd7d977094e60919256403310d73f", "url": "https://github.com/all-of-us/workbench/commit/ab3807782d0fd7d977094e60919256403310d73f", "message": "format query", "committedDate": "2020-07-16T20:12:53Z", "type": "commit"}, {"oid": "b717a2e05884da075191e1723ee91dfeffb58835", "url": "https://github.com/all-of-us/workbench/commit/b717a2e05884da075191e1723ee91dfeffb58835", "message": "Merge branch 'master' into jaycarlton/RW-5078", "committedDate": "2020-07-16T20:36:08Z", "type": "commit"}, {"oid": "c50a928a6491aecfe0ce1e30e93e12a9ff413b14", "url": "https://github.com/all-of-us/workbench/commit/c50a928a6491aecfe0ce1e30e93e12a9ff413b14", "message": "spotless", "committedDate": "2020-07-17T18:24:44Z", "type": "commit"}, {"oid": "bbce6d1ff1a91a7fd697fb97693b35da04d892f3", "url": "https://github.com/all-of-us/workbench/commit/bbce6d1ff1a91a7fd697fb97693b35da04d892f3", "message": "fixes", "committedDate": "2020-07-17T18:40:36Z", "type": "commit"}, {"oid": "aa73858d031ce662c6f7c9ec5dc371ffc1357bcf", "url": "https://github.com/all-of-us/workbench/commit/aa73858d031ce662c6f7c9ec5dc371ffc1357bcf", "message": "back out the header comment; was having issues in formatting and serialization", "committedDate": "2020-07-17T18:58:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDQzOA==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457434438", "bodyText": "Should this be .02Z like the others?", "author": "jmthibault79", "createdAt": "2020-07-20T14:24:52Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -56,8 +57,8 @@\n   private static final long AGENT_ID = 202L;\n   private static final String ACTION_ID_1 = \"abfcb9ed-fa65-4e98-acb2-08b0d8b30000\";\n   private static final String USERNAME = \"jay@unit-test-aou.org\";\n-  private static final DateTime EVENT_DATETIME = DateTime.parse(\"2010-06-30T01:20+02:00\");\n-  public static final long EVENT_TIME_SECONDS = EVENT_DATETIME.getMillis() / 1000;\n+  private static final Instant EVENT_INSTANT = Instant.parse(\"2010-06-30T01:20:00.00Z\");", "originalCommit": "aa73858d031ce662c6f7c9ec5dc371ffc1357bcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNjQ5MA==", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457436490", "bodyText": "No, the event time doesn't need to know what my after/before times are.", "author": "jaycarlton", "createdAt": "2020-07-20T14:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDQzOA=="}], "type": "inlineReview", "revised_code": null}]}