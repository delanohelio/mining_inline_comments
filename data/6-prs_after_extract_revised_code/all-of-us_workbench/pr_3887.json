{"pr_number": 3887, "pr_title": "[RW-5323][risk=no] API - Move ConceptSetController#fromClientConceptSet into a method in ConceptSetMapper", "pr_createdAt": "2020-08-17T03:58:58Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3887", "timeline": [{"oid": "04a7a7e7ed73cb0f2f8066b93f32c7859b99c7e3", "url": "https://github.com/all-of-us/workbench/commit/04a7a7e7ed73cb0f2f8066b93f32c7859b99c7e3", "message": "Concept Set use Mapper", "committedDate": "2020-08-17T03:57:35Z", "type": "commit"}, {"oid": "517e847b35b5505f27029b0751814151ce096a9f", "url": "https://github.com/all-of-us/workbench/commit/517e847b35b5505f27029b0751814151ce096a9f", "message": "remove commented out code", "committedDate": "2020-08-17T04:04:27Z", "type": "commit"}, {"oid": "d98fc094053defaf5a1f36c599f90de4f83a9a6b", "url": "https://github.com/all-of-us/workbench/commit/d98fc094053defaf5a1f36c599f90de4f83a9a6b", "message": "Fix Tests", "committedDate": "2020-08-17T04:25:24Z", "type": "commit"}, {"oid": "1171408a487597312fe95d6fa5259056fa26ff7a", "url": "https://github.com/all-of-us/workbench/commit/1171408a487597312fe95d6fa5259056fa26ff7a", "message": "Fix Test", "committedDate": "2020-08-17T04:52:00Z", "type": "commit"}, {"oid": "7440b5787ba9109703321999caa7dfcf60066a87", "url": "https://github.com/all-of-us/workbench/commit/7440b5787ba9109703321999caa7dfcf60066a87", "message": "Fix Big Query Test", "committedDate": "2020-08-17T04:58:10Z", "type": "commit"}, {"oid": "b8ae759b513a73bba61d112bf9c742beef93eb4b", "url": "https://github.com/all-of-us/workbench/commit/b8ae759b513a73bba61d112bf9c742beef93eb4b", "message": "rebase", "committedDate": "2020-08-17T05:11:00Z", "type": "commit"}, {"oid": "064cd9b74c64973aa6169133e59b3a4ef0f35336", "url": "https://github.com/all-of-us/workbench/commit/064cd9b74c64973aa6169133e59b3a4ef0f35336", "message": "Clean up and fix test", "committedDate": "2020-08-17T05:34:29Z", "type": "commit"}, {"oid": "d7a5a8f1e7218bdf41fe3a3fb9cbb8a3ea5d7267", "url": "https://github.com/all-of-us/workbench/commit/d7a5a8f1e7218bdf41fe3a3fb9cbb8a3ea5d7267", "message": "Revert clean up", "committedDate": "2020-08-17T05:56:29Z", "type": "commit"}, {"oid": "0793c911eb6bf1ac8135d8ae541b109b71f0e4ce", "url": "https://github.com/all-of-us/workbench/commit/0793c911eb6bf1ac8135d8ae541b109b71f0e4ce", "message": "Add Dependency class", "committedDate": "2020-08-17T06:06:52Z", "type": "commit"}, {"oid": "4f10baed985f927664e17d85e540f9bfb141f2e3", "url": "https://github.com/all-of-us/workbench/commit/4f10baed985f927664e17d85e540f9bfb141f2e3", "message": "Spotless", "committedDate": "2020-08-17T06:17:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUwNTU2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r471505567", "bodyText": "Mock would imply that we're mimicking behavior. Not sure it applies here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private DbConceptSet createMockConceptSet(Domain domain, long workspaceId) {\n          \n          \n            \n              private DbConceptSet createConceptSet(Domain domain, long workspaceId) {", "author": "freemabd", "createdAt": "2020-08-17T14:10:44Z", "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java", "diffHunk": "@@ -231,6 +220,14 @@ public void setUp() {\n     when(controller.generateRandomEightCharacterQualifier()).thenReturn(\"00000000\");\n   }\n \n+  private DbConceptSet createMockConceptSet(Domain domain, long workspaceId) {", "originalCommit": "4f10baed985f927664e17d85e540f9bfb141f2e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5fb32713005ec187271958f94114d592b993f", "chunk": "diff --git a/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java b/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java\nindex 225348852..8e5c163e1 100644\n--- a/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java\n+++ b/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java\n\n@@ -220,12 +220,12 @@ public class DataSetControllerBQTest extends BigQueryBaseTest {\n     when(controller.generateRandomEightCharacterQualifier()).thenReturn(\"00000000\");\n   }\n \n-  private DbConceptSet createMockConceptSet(Domain domain, long workspaceId) {\n-    DbConceptSet mockConceptSet = new DbConceptSet();\n-    mockConceptSet.setDomain(DbStorageEnums.domainToStorage(domain));\n-    mockConceptSet.setConceptIds(new HashSet<>(Collections.singletonList(1L)));\n-    mockConceptSet.setWorkspaceId(workspaceId);\n-    return mockConceptSet;\n+  private DbConceptSet createConceptSet(Domain domain, long workspaceId) {\n+    DbConceptSet dbConceptSet = new DbConceptSet();\n+    dbConceptSet.setDomain(DbStorageEnums.domainToStorage(domain));\n+    dbConceptSet.setConceptIds(new HashSet<>(Collections.singletonList(1L)));\n+    dbConceptSet.setWorkspaceId(workspaceId);\n+    return dbConceptSet;\n   }\n \n   @After\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxMjA3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r471512077", "bodyText": "nit: can we name the test method to match the mapper method\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void clientToDb() {\n          \n          \n            \n              public void clientToDbModel() {", "author": "freemabd", "createdAt": "2020-08-17T14:20:21Z", "path": "api/src/test/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapperTest.java", "diffHunk": "@@ -69,4 +77,28 @@ public void dbModelToClient() {\n     assertThat(clientConceptSet.getCreator()).isEqualTo(dbConceptSet.getCreator().getUsername());\n     assertThat(clientConceptSet.getConcepts()).isNull();\n   }\n+\n+  @Test\n+  public void clientToDb() {", "originalCommit": "4f10baed985f927664e17d85e540f9bfb141f2e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5fb32713005ec187271958f94114d592b993f", "chunk": "diff --git a/api/src/test/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapperTest.java b/api/src/test/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapperTest.java\nindex f98ed6788..26e60c2b7 100644\n--- a/api/src/test/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapperTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapperTest.java\n\n@@ -79,7 +79,7 @@ public class ConceptSetMapperTest {\n   }\n \n   @Test\n-  public void clientToDb() {\n+  public void clientToDbModel() {\n     ConceptSet clientConceptSet = conceptSetMapper.dbModelToClient(dbConceptSet);\n     CreateConceptSetRequest conceptSetRequest = new CreateConceptSetRequest();\n     conceptSetRequest.setConceptSet(clientConceptSet);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUyMTQ3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r471521473", "bodyText": "We should probably move this line into the createConceptSet method. It's not good practice to change object state in a validation method.", "author": "freemabd", "createdAt": "2020-08-17T14:33:57Z", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -369,35 +375,11 @@ public ConceptSet toHydratedConceptSet(DbConceptSet dbConceptSet) {\n         conceptService.findAll(dbConceptSet.getConceptIds(), CONCEPT_NAME_ORDERING));\n   }\n \n-  private DbConceptSet fromClientConceptSet(CreateConceptSetRequest request, long workspaceId) {\n-    ConceptSet conceptSet = request.getConceptSet();\n-    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n-    DbConceptSet dbConceptSet = new DbConceptSet();\n-    dbConceptSet.setDomainEnum(conceptSet.getDomain());\n-    if (conceptSet.getSurvey() != null) {\n-      dbConceptSet.setSurveysEnum(conceptSet.getSurvey());\n-    }\n-    if (dbConceptSet.getDomainEnum() == null) {\n-      throw new BadRequestException(\n-          \"Domain \" + conceptSet.getDomain() + \" is not allowed for concept sets\");\n-    }\n-    Optional.ofNullable(conceptSet.getEtag())\n-        .ifPresent(etag -> dbConceptSet.setVersion(Etags.toVersion(etag)));\n-    dbConceptSet.setDescription(conceptSet.getDescription());\n-    dbConceptSet.setName(conceptSet.getName());\n-    dbConceptSet.setCreator(userProvider.get());\n-    dbConceptSet.setWorkspaceId(workspaceId);\n-    dbConceptSet.setCreationTime(now);\n-    dbConceptSet.setLastModifiedTime(now);\n-    dbConceptSet.setVersion(INITIAL_VERSION);\n-    addConceptsToSet(dbConceptSet, request.getAddedIds());\n-    if (dbConceptSet.getConceptIds().size() > maxConceptsPerSet) {\n+  private DbConceptSet validateConceptSize(DbConceptSet requestDbConceptSet) {\n+    requestDbConceptSet.setVersion(INITIAL_VERSION);", "originalCommit": "4f10baed985f927664e17d85e540f9bfb141f2e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5fb32713005ec187271958f94114d592b993f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java b/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\nindex 8315f55e2..731e1a701 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n\n@@ -375,11 +321,103 @@ public class ConceptSetsController implements ConceptSetsApiDelegate {\n         conceptService.findAll(dbConceptSet.getConceptIds(), CONCEPT_NAME_ORDERING));\n   }\n \n-  private DbConceptSet validateConceptSize(DbConceptSet requestDbConceptSet) {\n-    requestDbConceptSet.setVersion(INITIAL_VERSION);\n-    if (requestDbConceptSet.getConceptIds().size() > maxConceptsPerSet) {\n-      throw new BadRequestException(\"Exceeded \" + maxConceptsPerSet + \" in concept set\");\n+  private void validateUpdateConceptSet(DbConceptSet dbConceptSet, ConceptSet conceptSet) {\n+    if (Strings.isNullOrEmpty(conceptSet.getEtag())) {\n+      throw new BadRequestException(\"missing required update field 'etag'\");\n+    }\n+    int version = Etags.toVersion(conceptSet.getEtag());\n+    if (dbConceptSet.getVersion() != version) {\n+      throw new ConflictException(\"Attempted to modify outdated concept set version\");\n+    }\n+    if (conceptSet.getName() != null) {\n+      dbConceptSet.setName(conceptSet.getName());\n+    }\n+    if (conceptSet.getDescription() != null) {\n+      dbConceptSet.setDescription(conceptSet.getDescription());\n+    }\n+    if (conceptSet.getDomain() != null && conceptSet.getDomain() != dbConceptSet.getDomainEnum()) {\n+      throw new BadRequestException(\"Cannot modify the domain of an existing concept set\");\n+    }\n+    validateConceptSet(\n+        dbConceptSet,\n+        conceptSet.getConcepts().stream()\n+            .map(concept -> concept.getConceptId())\n+            .collect(Collectors.toList()));\n+  }\n+\n+  private void validateUpdateConceptSetConcepts(\n+      DbConceptSet dbConceptSet, UpdateConceptSetRequest request) {\n+    Set<Long> allConceptSetIds = dbConceptSet.getConceptIds();\n+    if (request.getAddedIds() != null) {\n+      allConceptSetIds.addAll(request.getAddedIds());\n+    }\n+    int sizeOfAllConceptSetIds = allConceptSetIds.stream().collect(Collectors.toSet()).size();\n+    if (request.getRemovedIds() != null\n+        && request.getRemovedIds().size() == sizeOfAllConceptSetIds) {\n+      throw new BadRequestException(\"Concept Set must have at least one concept\");\n+    }\n+\n+    if (Strings.isNullOrEmpty(request.getEtag())) {\n+      throw new BadRequestException(\"missing required update field 'etag'\");\n+    }\n+    int version = Etags.toVersion(request.getEtag());\n+    if (dbConceptSet.getVersion() != version) {\n+      throw new ConflictException(\"Attempted to modify outdated concept set version\");\n+    }\n+\n+    if (request.getAddedIds() != null) {\n+      addConceptsToSet(dbConceptSet, request.getAddedIds());\n+    }\n+    if (request.getRemovedIds() != null) {\n+      dbConceptSet.getConceptIds().removeAll(request.getRemovedIds());\n+    }\n+    if (dbConceptSet.getConceptIds().isEmpty()) {\n+      dbConceptSet.setParticipantCount(0);\n+    } else {\n+      String omopTable = BigQueryTableInfo.getTableName(dbConceptSet.getDomainEnum());\n+      dbConceptSet.setParticipantCount(\n+          conceptBigQueryService.getParticipantCountForConcepts(\n+              dbConceptSet.getDomainEnum(), omopTable, dbConceptSet.getConceptIds()));\n+    }\n+    validateConceptSet(\n+        dbConceptSet,\n+        dbConceptSet.getConceptIds().stream().map(concept -> concept).collect(Collectors.toList()));\n+  }\n+\n+  private void validateConceptSet(DbConceptSet dbConceptSet, List<Long> addedIds) {\n+    Domain domainEnum = dbConceptSet.getDomainEnum();\n+    if (domainEnum == null) {\n+      throw new BadRequestException(\"Domain is not allowed for concept sets\");\n+    }\n+    if (addedIds == null || addedIds.size() == 0) {\n+      throw new BadRequestException(\"Cannot create a concept set with no concepts\");\n+    }\n+\n+    Iterable<DbConcept> concepts = conceptService.findAll(addedIds);\n+    if (dbConceptSet.getConceptIds().size() > MAX_CONCEPTS_PER_SET) {\n+      throw new BadRequestException(\"Exceeded \" + MAX_CONCEPTS_PER_SET + \" in concept set\");\n+    }\n+    List<DbConcept> mismatchedConcepts =\n+        ImmutableList.copyOf(concepts).stream()\n+            .filter(concept -> !concept.getConceptClassId().equals(\"Question\"))\n+            .filter(\n+                concept -> {\n+                  Domain domain =\n+                      Domain.PHYSICALMEASUREMENT.equals(domainEnum)\n+                          ? Domain.PHYSICALMEASUREMENT\n+                          : DbStorageEnums.domainIdToDomain(concept.getDomainId());\n+                  return !domainEnum.equals(domain);\n+                })\n+            .collect(Collectors.toList());\n+    if (!mismatchedConcepts.isEmpty()) {\n+      String mismatchedConceptIds =\n+          Joiner.on(\", \")\n+              .join(\n+                  mismatchedConcepts.stream()\n+                      .map(DbConcept::getConceptId)\n+                      .collect(Collectors.toList()));\n+      throw new BadRequestException(\n+          String.format(\"Concepts [%s] are not in domain %s\", mismatchedConceptIds, domainEnum));\n     }\n-    return requestDbConceptSet;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzMDI5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r471530297", "bodyText": "The validate method should really be validating the request object -> CreateConceptSetRequest#getAddedIds.  If the size check fails we fail fast instead of doing all the processing to convert it to a db object.", "author": "freemabd", "createdAt": "2020-08-17T14:47:02Z", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -97,7 +96,14 @@\n     if (request.getAddedIds() == null || request.getAddedIds().size() == 0) {\n       throw new BadRequestException(\"Cannot create a concept set with no concepts\");\n     }\n-    DbConceptSet dbConceptSet = fromClientConceptSet(request, workspace.getWorkspaceId());\n+    DbConceptSet dbConceptSet =\n+        validateConceptSize(", "originalCommit": "4f10baed985f927664e17d85e540f9bfb141f2e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5fb32713005ec187271958f94114d592b993f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java b/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\nindex 8315f55e2..731e1a701 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n\n@@ -93,19 +93,16 @@ public class ConceptSetsController implements ConceptSetsApiDelegate {\n     DbWorkspace workspace =\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.WRITER);\n-    if (request.getAddedIds() == null || request.getAddedIds().size() == 0) {\n-      throw new BadRequestException(\"Cannot create a concept set with no concepts\");\n-    }\n     DbConceptSet dbConceptSet =\n-        validateConceptSize(\n-            conceptSetMapper.clientToDbModel(\n-                request,\n-                workspace.getWorkspaceId(),\n-                userProvider.get(),\n-                conceptService,\n-                conceptBigQueryService));\n+        conceptSetMapper.clientToDbModel(\n+            request,\n+            workspace.getWorkspaceId(),\n+            userProvider.get(),\n+            conceptService,\n+            conceptBigQueryService);\n \n     try {\n+      validateConceptSet(dbConceptSet, request.getAddedIds());\n       dbConceptSet = conceptSetService.save(dbConceptSet);\n       userRecentResourceService.updateConceptSetEntry(\n           workspace.getWorkspaceId(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzMTg4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r471531885", "bodyText": "This can be removed. This is already happening in the ConceptSetController: \n  \n    \n      workbench/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n    \n    \n         Line 100\n      in\n      4f10bae\n    \n    \n    \n    \n\n        \n          \n           validateConceptSize(", "author": "freemabd", "createdAt": "2020-08-17T14:49:24Z", "path": "api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java", "diffHunk": "@@ -18,4 +34,80 @@\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n   @Mapping(target = \"concepts\", ignore = true)\n   ConceptSet dbModelToClient(DbConceptSet source);\n+\n+  @Mapping(target = \"conceptSetId\", source = \"conceptSet.id\")\n+  @Mapping(target = \"domainEnum\", source = \"conceptSet.domain\")\n+  @Mapping(target = \"name\", source = \"conceptSet.name\")\n+  @Mapping(target = \"description\", source = \"conceptSet.description\")\n+  @Mapping(\n+      target = \"creationTime\",\n+      source = \"conceptSet.creationTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(\n+      target = \"lastModifiedTime\",\n+      source = \"conceptSet.lastModifiedTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(target = \"participantCount\", source = \"conceptSet.participantCount\")\n+  @Mapping(target = \"domain\", ignore = true)\n+  @Mapping(target = \"survey\", ignore = true)\n+  @Mapping(target = \"creator\", ignore = true)\n+  @Mapping(target = \"surveysEnum\", source = \"conceptSet.survey\")\n+  @Mapping(target = \"version\", source = \"conceptSet.etag\", qualifiedByName = \"etagToCdrVersion\")\n+  @Mapping(target = \"workspaceId\", ignore = true)\n+  @Mapping(target = \"conceptIds\", ignore = true)\n+  DbConceptSet clientToDbModel(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @Context ConceptService conceptService,\n+      @Context ConceptBigQueryService conceptBigQueryService);\n+\n+  @AfterMapping\n+  default void addConceptIdsToSet(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @MappingTarget DbConceptSet dbConceptSet,\n+      @Context ConceptService conceptService,\n+      @Context ConceptBigQueryService conceptBigQueryService) {\n+    dbConceptSet.setWorkspaceId(workspaceId);\n+    dbConceptSet.setCreator(creator);\n+    Domain domainEnum = dbConceptSet.getDomainEnum();\n+    if (domainEnum == null) {\n+      throw new BadRequestException(\n+          \"Domain \" + source.getConceptSet().getDomain() + \" is not allowed for concept sets\");\n+    }\n+    Iterable<DbConcept> concepts = conceptService.findAll(source.getAddedIds());\n+    if (dbConceptSet.getConceptIds().size() > 1000) {", "originalCommit": "4f10baed985f927664e17d85e540f9bfb141f2e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5fb32713005ec187271958f94114d592b993f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\nindex 13e044370..edceedb1c 100644\n--- a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n\n@@ -63,7 +55,7 @@ public interface ConceptSetMapper {\n       @Context ConceptBigQueryService conceptBigQueryService);\n \n   @AfterMapping\n-  default void addConceptIdsToSet(\n+  default void updateConceptSetFields(\n       CreateConceptSetRequest source,\n       @Context Long workspaceId,\n       @Context DbUser creator,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzNDIxMg==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r471534212", "bodyText": "Can we rename this to something more descriptive. It's doing more than just adding adding concept ids. It's setting the workspaceId, domain as well as the participantCount", "author": "freemabd", "createdAt": "2020-08-17T14:52:53Z", "path": "api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java", "diffHunk": "@@ -18,4 +34,80 @@\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n   @Mapping(target = \"concepts\", ignore = true)\n   ConceptSet dbModelToClient(DbConceptSet source);\n+\n+  @Mapping(target = \"conceptSetId\", source = \"conceptSet.id\")\n+  @Mapping(target = \"domainEnum\", source = \"conceptSet.domain\")\n+  @Mapping(target = \"name\", source = \"conceptSet.name\")\n+  @Mapping(target = \"description\", source = \"conceptSet.description\")\n+  @Mapping(\n+      target = \"creationTime\",\n+      source = \"conceptSet.creationTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(\n+      target = \"lastModifiedTime\",\n+      source = \"conceptSet.lastModifiedTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(target = \"participantCount\", source = \"conceptSet.participantCount\")\n+  @Mapping(target = \"domain\", ignore = true)\n+  @Mapping(target = \"survey\", ignore = true)\n+  @Mapping(target = \"creator\", ignore = true)\n+  @Mapping(target = \"surveysEnum\", source = \"conceptSet.survey\")\n+  @Mapping(target = \"version\", source = \"conceptSet.etag\", qualifiedByName = \"etagToCdrVersion\")\n+  @Mapping(target = \"workspaceId\", ignore = true)\n+  @Mapping(target = \"conceptIds\", ignore = true)\n+  DbConceptSet clientToDbModel(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @Context ConceptService conceptService,\n+      @Context ConceptBigQueryService conceptBigQueryService);\n+\n+  @AfterMapping\n+  default void addConceptIdsToSet(", "originalCommit": "4f10baed985f927664e17d85e540f9bfb141f2e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5fb32713005ec187271958f94114d592b993f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\nindex 13e044370..edceedb1c 100644\n--- a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n\n@@ -63,7 +55,7 @@ public interface ConceptSetMapper {\n       @Context ConceptBigQueryService conceptBigQueryService);\n \n   @AfterMapping\n-  default void addConceptIdsToSet(\n+  default void updateConceptSetFields(\n       CreateConceptSetRequest source,\n       @Context Long workspaceId,\n       @Context DbUser creator,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzNzY1OQ==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r471537659", "bodyText": "This should happen in the validate method in the ConceptSetController when validating the request object. We should not be throwing BadRequestExceptions from a mapper.", "author": "freemabd", "createdAt": "2020-08-17T14:58:00Z", "path": "api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java", "diffHunk": "@@ -18,4 +34,80 @@\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n   @Mapping(target = \"concepts\", ignore = true)\n   ConceptSet dbModelToClient(DbConceptSet source);\n+\n+  @Mapping(target = \"conceptSetId\", source = \"conceptSet.id\")\n+  @Mapping(target = \"domainEnum\", source = \"conceptSet.domain\")\n+  @Mapping(target = \"name\", source = \"conceptSet.name\")\n+  @Mapping(target = \"description\", source = \"conceptSet.description\")\n+  @Mapping(\n+      target = \"creationTime\",\n+      source = \"conceptSet.creationTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(\n+      target = \"lastModifiedTime\",\n+      source = \"conceptSet.lastModifiedTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(target = \"participantCount\", source = \"conceptSet.participantCount\")\n+  @Mapping(target = \"domain\", ignore = true)\n+  @Mapping(target = \"survey\", ignore = true)\n+  @Mapping(target = \"creator\", ignore = true)\n+  @Mapping(target = \"surveysEnum\", source = \"conceptSet.survey\")\n+  @Mapping(target = \"version\", source = \"conceptSet.etag\", qualifiedByName = \"etagToCdrVersion\")\n+  @Mapping(target = \"workspaceId\", ignore = true)\n+  @Mapping(target = \"conceptIds\", ignore = true)\n+  DbConceptSet clientToDbModel(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @Context ConceptService conceptService,\n+      @Context ConceptBigQueryService conceptBigQueryService);\n+\n+  @AfterMapping\n+  default void addConceptIdsToSet(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @MappingTarget DbConceptSet dbConceptSet,\n+      @Context ConceptService conceptService,\n+      @Context ConceptBigQueryService conceptBigQueryService) {\n+    dbConceptSet.setWorkspaceId(workspaceId);\n+    dbConceptSet.setCreator(creator);\n+    Domain domainEnum = dbConceptSet.getDomainEnum();\n+    if (domainEnum == null) {\n+      throw new BadRequestException(\n+          \"Domain \" + source.getConceptSet().getDomain() + \" is not allowed for concept sets\");\n+    }", "originalCommit": "4f10baed985f927664e17d85e540f9bfb141f2e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5fb32713005ec187271958f94114d592b993f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\nindex 13e044370..edceedb1c 100644\n--- a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n\n@@ -63,7 +55,7 @@ public interface ConceptSetMapper {\n       @Context ConceptBigQueryService conceptBigQueryService);\n \n   @AfterMapping\n-  default void addConceptIdsToSet(\n+  default void updateConceptSetFields(\n       CreateConceptSetRequest source,\n       @Context Long workspaceId,\n       @Context DbUser creator,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0MzM3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r471543376", "bodyText": "Not sure any of this code is necessary. A CreateConceptSetRequest has a ConceptSet which can have only 1 domain. If we really feel like we need to validate that the concept ids all belong in the same domain, then we should check this in the controller. Also, there is a much easier way to validate this, just query the concept table for domain count.", "author": "freemabd", "createdAt": "2020-08-17T15:06:35Z", "path": "api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java", "diffHunk": "@@ -18,4 +34,80 @@\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n   @Mapping(target = \"concepts\", ignore = true)\n   ConceptSet dbModelToClient(DbConceptSet source);\n+\n+  @Mapping(target = \"conceptSetId\", source = \"conceptSet.id\")\n+  @Mapping(target = \"domainEnum\", source = \"conceptSet.domain\")\n+  @Mapping(target = \"name\", source = \"conceptSet.name\")\n+  @Mapping(target = \"description\", source = \"conceptSet.description\")\n+  @Mapping(\n+      target = \"creationTime\",\n+      source = \"conceptSet.creationTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(\n+      target = \"lastModifiedTime\",\n+      source = \"conceptSet.lastModifiedTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(target = \"participantCount\", source = \"conceptSet.participantCount\")\n+  @Mapping(target = \"domain\", ignore = true)\n+  @Mapping(target = \"survey\", ignore = true)\n+  @Mapping(target = \"creator\", ignore = true)\n+  @Mapping(target = \"surveysEnum\", source = \"conceptSet.survey\")\n+  @Mapping(target = \"version\", source = \"conceptSet.etag\", qualifiedByName = \"etagToCdrVersion\")\n+  @Mapping(target = \"workspaceId\", ignore = true)\n+  @Mapping(target = \"conceptIds\", ignore = true)\n+  DbConceptSet clientToDbModel(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @Context ConceptService conceptService,\n+      @Context ConceptBigQueryService conceptBigQueryService);\n+\n+  @AfterMapping\n+  default void addConceptIdsToSet(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @MappingTarget DbConceptSet dbConceptSet,\n+      @Context ConceptService conceptService,\n+      @Context ConceptBigQueryService conceptBigQueryService) {\n+    dbConceptSet.setWorkspaceId(workspaceId);\n+    dbConceptSet.setCreator(creator);\n+    Domain domainEnum = dbConceptSet.getDomainEnum();\n+    if (domainEnum == null) {\n+      throw new BadRequestException(\n+          \"Domain \" + source.getConceptSet().getDomain() + \" is not allowed for concept sets\");\n+    }\n+    Iterable<DbConcept> concepts = conceptService.findAll(source.getAddedIds());\n+    if (dbConceptSet.getConceptIds().size() > 1000) {\n+      throw new BadRequestException(\"Exceeded 1000 in concept set\");\n+    }\n+    List<DbConcept> mismatchedConcepts =\n+        ImmutableList.copyOf(concepts).stream()\n+            .filter(concept -> !concept.getConceptClassId().equals(\"Question\"))\n+            .filter(\n+                concept -> {\n+                  Domain domain =\n+                      Domain.PHYSICALMEASUREMENT.equals(domainEnum)\n+                          ? Domain.PHYSICALMEASUREMENT\n+                          : DbStorageEnums.domainIdToDomain(concept.getDomainId());\n+                  return !domainEnum.equals(domain);\n+                })\n+            .collect(Collectors.toList());\n+    if (!mismatchedConcepts.isEmpty()) {\n+      String mismatchedConceptIds =\n+          Joiner.on(\", \")\n+              .join(\n+                  mismatchedConcepts.stream()\n+                      .map(DbConcept::getConceptId)\n+                      .collect(Collectors.toList()));\n+      throw new BadRequestException(\n+          String.format(\"Concepts [%s] are not in domain %s\", mismatchedConceptIds, domainEnum));\n+    }", "originalCommit": "4f10baed985f927664e17d85e540f9bfb141f2e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5fb32713005ec187271958f94114d592b993f", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\nindex 13e044370..edceedb1c 100644\n--- a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n\n@@ -63,7 +55,7 @@ public interface ConceptSetMapper {\n       @Context ConceptBigQueryService conceptBigQueryService);\n \n   @AfterMapping\n-  default void addConceptIdsToSet(\n+  default void updateConceptSetFields(\n       CreateConceptSetRequest source,\n       @Context Long workspaceId,\n       @Context DbUser creator,\n"}}, {"oid": "b2f5fb32713005ec187271958f94114d592b993f", "url": "https://github.com/all-of-us/workbench/commit/b2f5fb32713005ec187271958f94114d592b993f", "message": "Addressing PR Comments: Moving validate method in controller", "committedDate": "2020-08-20T17:26:27Z", "type": "commit"}, {"oid": "c147fa4e3061db91c0575534444f9a7d3d5db49a", "url": "https://github.com/all-of-us/workbench/commit/c147fa4e3061db91c0575534444f9a7d3d5db49a", "message": "Remove concept Service from Mapper", "committedDate": "2020-08-20T17:32:40Z", "type": "commit"}, {"oid": "494de773ec6a8e54063c046dbd5605cc1e006627", "url": "https://github.com/all-of-us/workbench/commit/494de773ec6a8e54063c046dbd5605cc1e006627", "message": "Merge branch 'master' into nsaxena/RW-5323", "committedDate": "2020-08-20T17:33:48Z", "type": "commit"}, {"oid": "fa4c4fbd025d08dae6436dd05ad0ee0bc69b6e8c", "url": "https://github.com/all-of-us/workbench/commit/fa4c4fbd025d08dae6436dd05ad0ee0bc69b6e8c", "message": "Removing Check for different domains", "committedDate": "2020-08-20T18:01:05Z", "type": "commit"}, {"oid": "3ed2efcac3c414eda830e6d27c9f71966a70b479", "url": "https://github.com/all-of-us/workbench/commit/3ed2efcac3c414eda830e6d27c9f71966a70b479", "message": "Fix test", "committedDate": "2020-08-20T18:51:29Z", "type": "commit"}, {"oid": "d99025ec45956fbad639f0c2f78c7c628f53751c", "url": "https://github.com/all-of-us/workbench/commit/d99025ec45956fbad639f0c2f78c7c628f53751c", "message": "Fix ParticipantCohortAnnotationMapperTest", "committedDate": "2020-08-21T02:51:31Z", "type": "commit"}, {"oid": "2f688acb42af44fe7cda92c8a8c15b57644ce15e", "url": "https://github.com/all-of-us/workbench/commit/2f688acb42af44fe7cda92c8a8c15b57644ce15e", "message": "Fix Test : Concept Set with 0 Concepts cannot be saved/update", "committedDate": "2020-08-21T03:57:55Z", "type": "commit"}, {"oid": "ac16d5ac5cfbf2c085e22f8c5ed3e19303d68c14", "url": "https://github.com/all-of-us/workbench/commit/ac16d5ac5cfbf2c085e22f8c5ed3e19303d68c14", "message": "Fix Test", "committedDate": "2020-08-21T14:37:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NzEzMw==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r475657133", "bodyText": "Please remove duplicate line of code\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                dbConceptSet.getConceptIds().addAll(source.getAddedIds());\n          \n          \n            \n                String omopTable = BigQueryTableInfo.getTableName(source.getConceptSet().getDomain());\n          \n          \n            \n                dbConceptSet.setParticipantCount(\n          \n          \n            \n                    conceptBigQueryService.getParticipantCountForConcepts(\n          \n          \n            \n                        dbConceptSet.getDomainEnum(), omopTable, dbConceptSet.getConceptIds()));\n          \n          \n            \n                dbConceptSet.getConceptIds().addAll(source.getAddedIds());\n          \n          \n            \n                dbConceptSet.getConceptIds().addAll(source.getAddedIds());\n          \n          \n            \n                String omopTable = BigQueryTableInfo.getTableName(source.getConceptSet().getDomain());\n          \n          \n            \n                dbConceptSet.setParticipantCount(\n          \n          \n            \n                    conceptBigQueryService.getParticipantCountForConcepts(\n          \n          \n            \n                        dbConceptSet.getDomainEnum(), omopTable, dbConceptSet.getConceptIds()));", "author": "freemabd", "createdAt": "2020-08-24T14:33:39Z", "path": "api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java", "diffHunk": "@@ -18,4 +25,47 @@\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n   @Mapping(target = \"concepts\", ignore = true)\n   ConceptSet dbModelToClient(DbConceptSet source);\n+\n+  @Mapping(target = \"conceptSetId\", source = \"conceptSet.id\")\n+  @Mapping(target = \"domainEnum\", source = \"conceptSet.domain\")\n+  @Mapping(target = \"name\", source = \"conceptSet.name\")\n+  @Mapping(target = \"description\", source = \"conceptSet.description\")\n+  @Mapping(\n+      target = \"creationTime\",\n+      source = \"conceptSet.creationTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(\n+      target = \"lastModifiedTime\",\n+      source = \"conceptSet.lastModifiedTime\",\n+      qualifiedByName = \"toTimestampCurrentIfNull\")\n+  @Mapping(target = \"participantCount\", source = \"conceptSet.participantCount\")\n+  @Mapping(target = \"domain\", ignore = true)\n+  @Mapping(target = \"survey\", ignore = true)\n+  @Mapping(target = \"creator\", ignore = true)\n+  @Mapping(target = \"surveysEnum\", source = \"conceptSet.survey\")\n+  @Mapping(target = \"version\", source = \"conceptSet.etag\", qualifiedByName = \"etagToCdrVersion\")\n+  @Mapping(target = \"workspaceId\", ignore = true)\n+  @Mapping(target = \"conceptIds\", ignore = true)\n+  DbConceptSet clientToDbModel(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @Context ConceptBigQueryService conceptBigQueryService);\n+\n+  @AfterMapping\n+  default void updateConceptSetFields(\n+      CreateConceptSetRequest source,\n+      @Context Long workspaceId,\n+      @Context DbUser creator,\n+      @MappingTarget DbConceptSet dbConceptSet,\n+      @Context ConceptBigQueryService conceptBigQueryService) {\n+    dbConceptSet.setWorkspaceId(workspaceId);\n+    dbConceptSet.setCreator(creator);\n+    dbConceptSet.getConceptIds().addAll(source.getAddedIds());\n+    String omopTable = BigQueryTableInfo.getTableName(source.getConceptSet().getDomain());\n+    dbConceptSet.setParticipantCount(\n+        conceptBigQueryService.getParticipantCountForConcepts(\n+            dbConceptSet.getDomainEnum(), omopTable, dbConceptSet.getConceptIds()));\n+    dbConceptSet.getConceptIds().addAll(source.getAddedIds());", "originalCommit": "ac16d5ac5cfbf2c085e22f8c5ed3e19303d68c14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d6b056625a9cf2ab7e4444816e349a0f74332da", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\nindex cd5f7f5bc..0c075a5c3 100644\n--- a/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/conceptset/mapper/ConceptSetMapper.java\n\n@@ -66,6 +66,5 @@ public interface ConceptSetMapper {\n     dbConceptSet.setParticipantCount(\n         conceptBigQueryService.getParticipantCountForConcepts(\n             dbConceptSet.getDomainEnum(), omopTable, dbConceptSet.getConceptIds()));\n-    dbConceptSet.getConceptIds().addAll(source.getAddedIds());\n   }\n }\n"}}, {"oid": "3d6b056625a9cf2ab7e4444816e349a0f74332da", "url": "https://github.com/all-of-us/workbench/commit/3d6b056625a9cf2ab7e4444816e349a0f74332da", "message": "Remove Duplicate Line", "committedDate": "2020-08-24T14:40:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY4ODYzNg==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r475688636", "bodyText": "When renaming a concept set it calls this method and conceptSet.getConcepts throws a null pointer exception. Please wrap this in a null/empty check\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                validateConceptSet(\n          \n          \n            \n                    dbConceptSet,\n          \n          \n            \n                    conceptSet.getConcepts().stream()\n          \n          \n            \n                        .map(concept -> concept.getConceptId())\n          \n          \n            \n                        .collect(Collectors.toList()));\n          \n          \n            \n               if (!CollectionUtils.isEmpty(conceptSet.getConcepts())) {\n          \n          \n            \n                  validateConceptSet(\n          \n          \n            \n                      dbConceptSet,\n          \n          \n            \n                      conceptSet.getConcepts().stream()\n          \n          \n            \n                          .map(concept -> concept.getConceptId())\n          \n          \n            \n                          .collect(Collectors.toList()));\n          \n          \n            \n                }", "author": "freemabd", "createdAt": "2020-08-24T15:11:32Z", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -369,35 +317,79 @@ public ConceptSet toHydratedConceptSet(DbConceptSet dbConceptSet) {\n         conceptService.findAll(dbConceptSet.getConceptIds(), CONCEPT_NAME_ORDERING));\n   }\n \n-  private DbConceptSet fromClientConceptSet(CreateConceptSetRequest request, long workspaceId) {\n-    ConceptSet conceptSet = request.getConceptSet();\n-    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n-    DbConceptSet dbConceptSet = new DbConceptSet();\n-    dbConceptSet.setDomainEnum(conceptSet.getDomain());\n-    if (conceptSet.getSurvey() != null) {\n-      dbConceptSet.setSurveysEnum(conceptSet.getSurvey());\n+  private void validateAndUpdateDbConceptSet(DbConceptSet dbConceptSet, ConceptSet conceptSet) {\n+    if (Strings.isNullOrEmpty(conceptSet.getEtag())) {\n+      throw new BadRequestException(\"missing required update field 'etag'\");\n     }\n-    if (dbConceptSet.getDomainEnum() == null) {\n-      throw new BadRequestException(\n-          \"Domain \" + conceptSet.getDomain() + \" is not allowed for concept sets\");\n+    int version = Etags.toVersion(conceptSet.getEtag());\n+    if (dbConceptSet.getVersion() != version) {\n+      throw new ConflictException(\"Attempted to modify outdated concept set version\");\n     }\n-    Optional.ofNullable(conceptSet.getEtag())\n-        .ifPresent(etag -> dbConceptSet.setVersion(Etags.toVersion(etag)));\n-    dbConceptSet.setDescription(conceptSet.getDescription());\n-    dbConceptSet.setName(conceptSet.getName());\n-    dbConceptSet.setCreator(userProvider.get());\n-    dbConceptSet.setWorkspaceId(workspaceId);\n-    dbConceptSet.setCreationTime(now);\n-    dbConceptSet.setLastModifiedTime(now);\n-    dbConceptSet.setVersion(INITIAL_VERSION);\n-    addConceptsToSet(dbConceptSet, request.getAddedIds());\n+    if (conceptSet.getName() != null) {\n+      dbConceptSet.setName(conceptSet.getName());\n+    }\n+    if (conceptSet.getDescription() != null) {\n+      dbConceptSet.setDescription(conceptSet.getDescription());\n+    }\n+    if (conceptSet.getDomain() != null && conceptSet.getDomain() != dbConceptSet.getDomainEnum()) {\n+      throw new BadRequestException(\"Cannot modify the domain of an existing concept set\");\n+    }\n+    validateConceptSet(\n+        dbConceptSet,\n+        conceptSet.getConcepts().stream()\n+            .map(concept -> concept.getConceptId())\n+            .collect(Collectors.toList()));", "originalCommit": "ac16d5ac5cfbf2c085e22f8c5ed3e19303d68c14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5aac657c4eda1c2ea3523558f9d5523b7e70ed9", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java b/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\nindex 1ba8c9847..d71aa35a0 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n\n@@ -334,11 +334,14 @@ public class ConceptSetsController implements ConceptSetsApiDelegate {\n     if (conceptSet.getDomain() != null && conceptSet.getDomain() != dbConceptSet.getDomainEnum()) {\n       throw new BadRequestException(\"Cannot modify the domain of an existing concept set\");\n     }\n-    validateConceptSet(\n-        dbConceptSet,\n-        conceptSet.getConcepts().stream()\n-            .map(concept -> concept.getConceptId())\n-            .collect(Collectors.toList()));\n+    // In case of rename ConceptDet does not have concepts\n+    if (conceptSet.getConcepts() != null) {\n+      validateConceptSet(\n+          dbConceptSet,\n+          conceptSet.getConcepts().stream()\n+              .map(concept -> concept.getConceptId())\n+              .collect(Collectors.toList()));\n+    }\n   }\n \n   private void validateAndUpdateDbConceptSetConcept(\n"}}, {"oid": "f5aac657c4eda1c2ea3523558f9d5523b7e70ed9", "url": "https://github.com/all-of-us/workbench/commit/f5aac657c4eda1c2ea3523558f9d5523b7e70ed9", "message": "Fix Rename null pointer", "committedDate": "2020-08-24T15:28:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNTY2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3887#discussion_r475705665", "bodyText": "Think we should use CollectionUtils.isEmpty here. It does a null and empty check. If the code changes and we passed an empty list during the rename we would still throw a BadRequestException in that case and rename would fail\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (conceptSet.getConcepts() != null) {\n          \n          \n            \n                if (!CollectionUtils.isEmpty(conceptSet.getConcepts())) {", "author": "freemabd", "createdAt": "2020-08-24T15:35:49Z", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -369,35 +317,82 @@ public ConceptSet toHydratedConceptSet(DbConceptSet dbConceptSet) {\n         conceptService.findAll(dbConceptSet.getConceptIds(), CONCEPT_NAME_ORDERING));\n   }\n \n-  private DbConceptSet fromClientConceptSet(CreateConceptSetRequest request, long workspaceId) {\n-    ConceptSet conceptSet = request.getConceptSet();\n-    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n-    DbConceptSet dbConceptSet = new DbConceptSet();\n-    dbConceptSet.setDomainEnum(conceptSet.getDomain());\n-    if (conceptSet.getSurvey() != null) {\n-      dbConceptSet.setSurveysEnum(conceptSet.getSurvey());\n+  private void validateAndUpdateDbConceptSet(DbConceptSet dbConceptSet, ConceptSet conceptSet) {\n+    if (Strings.isNullOrEmpty(conceptSet.getEtag())) {\n+      throw new BadRequestException(\"missing required update field 'etag'\");\n     }\n-    if (dbConceptSet.getDomainEnum() == null) {\n-      throw new BadRequestException(\n-          \"Domain \" + conceptSet.getDomain() + \" is not allowed for concept sets\");\n+    int version = Etags.toVersion(conceptSet.getEtag());\n+    if (dbConceptSet.getVersion() != version) {\n+      throw new ConflictException(\"Attempted to modify outdated concept set version\");\n     }\n-    Optional.ofNullable(conceptSet.getEtag())\n-        .ifPresent(etag -> dbConceptSet.setVersion(Etags.toVersion(etag)));\n-    dbConceptSet.setDescription(conceptSet.getDescription());\n-    dbConceptSet.setName(conceptSet.getName());\n-    dbConceptSet.setCreator(userProvider.get());\n-    dbConceptSet.setWorkspaceId(workspaceId);\n-    dbConceptSet.setCreationTime(now);\n-    dbConceptSet.setLastModifiedTime(now);\n-    dbConceptSet.setVersion(INITIAL_VERSION);\n-    addConceptsToSet(dbConceptSet, request.getAddedIds());\n+    if (conceptSet.getName() != null) {\n+      dbConceptSet.setName(conceptSet.getName());\n+    }\n+    if (conceptSet.getDescription() != null) {\n+      dbConceptSet.setDescription(conceptSet.getDescription());\n+    }\n+    if (conceptSet.getDomain() != null && conceptSet.getDomain() != dbConceptSet.getDomainEnum()) {\n+      throw new BadRequestException(\"Cannot modify the domain of an existing concept set\");\n+    }\n+    // In case of rename ConceptDet does not have concepts\n+    if (conceptSet.getConcepts() != null) {", "originalCommit": "f5aac657c4eda1c2ea3523558f9d5523b7e70ed9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab6c958b9bbe2add49ee523fd75478718a0e5ff", "chunk": "diff --git a/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java b/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\nindex d71aa35a0..b5e9dacd1 100644\n--- a/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n+++ b/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java\n\n@@ -335,7 +336,7 @@ public class ConceptSetsController implements ConceptSetsApiDelegate {\n       throw new BadRequestException(\"Cannot modify the domain of an existing concept set\");\n     }\n     // In case of rename ConceptDet does not have concepts\n-    if (conceptSet.getConcepts() != null) {\n+    if (!CollectionUtils.isEmpty(conceptSet.getConcepts())) {\n       validateConceptSet(\n           dbConceptSet,\n           conceptSet.getConcepts().stream()\n"}}, {"oid": "8ab6c958b9bbe2add49ee523fd75478718a0e5ff", "url": "https://github.com/all-of-us/workbench/commit/8ab6c958b9bbe2add49ee523fd75478718a0e5ff", "message": "PR Comments", "committedDate": "2020-08-24T15:43:33Z", "type": "commit"}]}