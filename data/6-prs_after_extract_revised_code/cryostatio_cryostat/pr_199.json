{"pr_number": 199, "pr_title": "Custom Templates", "pr_createdAt": "2020-07-02T15:47:20Z", "pr_url": "https://github.com/cryostatio/cryostat/pull/199", "timeline": [{"oid": "81b998cd7a32e8ce0497e69533031ef8139f3191", "url": "https://github.com/cryostatio/cryostat/commit/81b998cd7a32e8ce0497e69533031ef8139f3191", "message": "Implement GET and POST for templates\n\nGET /api/v1/targets/:targetId/templates/:templateName handler will be\nused by clients to download template XML definitions.\n\nPOST /api/v1/templates will be used by clients to upload custom template\nXML definitions to ContainerJFR local storage..", "committedDate": "2020-07-02T18:31:55Z", "type": "commit"}, {"oid": "3caac5c92de3189db3b8f3b63305c89d20ae93a5", "url": "https://github.com/cryostatio/cryostat/commit/3caac5c92de3189db3b8f3b63305c89d20ae93a5", "message": "Implement DELETE for templates\n\nDELETE /api/v1/templates/:templateName will be used by clients to delete\ntheir custom templates from the ContainerJFR backend", "committedDate": "2020-07-02T18:31:55Z", "type": "commit"}, {"oid": "3caac5c92de3189db3b8f3b63305c89d20ae93a5", "url": "https://github.com/cryostatio/cryostat/commit/3caac5c92de3189db3b8f3b63305c89d20ae93a5", "message": "Implement DELETE for templates\n\nDELETE /api/v1/templates/:templateName will be used by clients to delete\ntheir custom templates from the ContainerJFR backend", "committedDate": "2020-07-02T18:31:55Z", "type": "forcePushed"}, {"oid": "01683cf55fd0b8562330becd880dfb3e1f2a0628", "url": "https://github.com/cryostatio/cryostat/commit/01683cf55fd0b8562330becd880dfb3e1f2a0628", "message": "Handle TemplateType property", "committedDate": "2020-07-02T21:09:34Z", "type": "commit"}, {"oid": "881cda22361ecd7041554da37d6bef125affa39b", "url": "https://github.com/cryostatio/cryostat/commit/881cda22361ecd7041554da37d6bef125affa39b", "message": "Allow DELETE requests", "committedDate": "2020-07-02T21:09:45Z", "type": "commit"}, {"oid": "8617b6005a4605129033d194f9926ebc5f351475", "url": "https://github.com/cryostatio/cryostat/commit/8617b6005a4605129033d194f9926ebc5f351475", "message": "Include relevant exception cause message in HTTP error response", "committedDate": "2020-07-06T20:08:54Z", "type": "commit"}, {"oid": "a236ac229167a5072553f0a4f265c1e1787f7c8c", "url": "https://github.com/cryostatio/cryostat/commit/a236ac229167a5072553f0a4f265c1e1787f7c8c", "message": "GET template must include type param to resolve name overlaps", "committedDate": "2020-07-07T18:49:15Z", "type": "commit"}, {"oid": "77d2eaaf9eb98d7896c529b8e9c6618c4dce4c33", "url": "https://github.com/cryostatio/cryostat/commit/77d2eaaf9eb98d7896c529b8e9c6618c4dce4c33", "message": "When creating a recording from template, try custom first, then target template", "committedDate": "2020-07-07T20:14:39Z", "type": "commit"}, {"oid": "af66402267e417829223b85315de61e17236824c", "url": "https://github.com/cryostatio/cryostat/commit/af66402267e417829223b85315de61e17236824c", "message": "Add configuration for template path in tmpfs", "committedDate": "2020-07-08T18:12:01Z", "type": "commit"}, {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5", "url": "https://github.com/cryostatio/cryostat/commit/a91c5df2242178e0713c448048ca0bd0a1ad17b5", "message": "Add README note about (custom) templates", "committedDate": "2020-07-08T18:43:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw==", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452455347", "bodyText": "I guess a side-effect here to keep in mind for the c-jfr-web UI listing of profiles is if a custom profile has the same name as a JVM one, it will make the JVM one no longer accessible with this API.", "author": "jiekang", "createdAt": "2020-07-09T19:55:50Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "originalCommit": "a91c5df2242178e0713c448048ca0bd0a1ad17b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NzczOA==", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452457738", "bodyText": "Oh wait... this is the command while the TargetTemplateGetHandler supports specification of template type. Would it make sense to support that here too?", "author": "jiekang", "createdAt": "2020-07-09T20:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NzQwMQ==", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452467401", "bodyText": "Yea, that's something I had in mind to figure out. I don't know how I want to change the template=Foo syntax, though. Any suggestions for how to specify custom vs remote template?", "author": "andrewazores", "createdAt": "2020-07-09T20:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3NTY3MQ==", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452475671", "bodyText": "Looking at the event syntax, comma delimited would be fine.\ntemplate=X,type=Y.\nOr if you want to be more concise, though I guess disallowing commas in the name:\ntemplate=X,Y\nEither seems fine to me. And for ease of use maybe the existing code can be kept for the case where users don't supply a template type.", "author": "jiekang", "createdAt": "2020-07-09T20:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjQ5NA==", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452486494", "bodyText": "I'll implement the template=X,type=Y format. I'll take the shortcut for now and require the keys to be in that order so I can just extend the existing validation regex, but maybe this should use a CSV parser instead... ?\nThe template=Name,Type format looks to me like a list of templates to enable, as if they would be unioned. Similar to the per-event syntax of jdk.Foo:option=val,app.Bar:something=other. That's also an interesting feature idea though.", "author": "andrewazores", "createdAt": "2020-07-09T20:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NTQwOA==", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r454395408", "bodyText": "Okay, sounds fine. I think restricting order and using regex for now is okay. Re. list of templates, that's a good point. I'm not sure we'd ever want to bother with multiple template input; I don't think JFR/JMC does that with the jfc stuff, does it? But it could be a neat feature. Anyways heh", "author": "jiekang", "createdAt": "2020-07-14T14:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNTU1Mg==", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r454405552", "bodyText": "Yea I don't think the unioned template thing is done in JMC, but I could be wrong. Although the union A U B U C ... U Z does implicitly happen if you simultaneously create recordings from each template A...Z and then retrieve the contents of those recordings, doesn't it? But then you have a bunch of redundant recordings for no good reason.", "author": "andrewazores", "createdAt": "2020-07-14T14:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNjgzOQ==", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r454426839", "bodyText": "Ah true, I forgot about that. Recordings each have a single jfc but the event configuration in JFR is a union of all the recording event configs, which is in the end a union of the jfc files, heh.", "author": "jiekang", "createdAt": "2020-07-14T15:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9ec1c9cf4091079bd56bb7b6a18d98858343a660", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java b/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java\nindex 57788e36..061b055a 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java\n\n@@ -91,11 +92,23 @@ public abstract class AbstractRecordingCommand extends AbstractConnectedCommand\n             Matcher m = TEMPLATE_PATTERN.matcher(events);\n             m.find();\n             String templateName = m.group(1);\n+            String typeName = m.group(2);\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            // if a template name is specified, try to find a Custom template by that name. If none,\n-            // fall back on finding a target built-in template by that name. If not, throw an\n+            if (typeName != null) {\n+                return connection\n+                        .getTemplateService()\n+                        .getEvents(templateName, TemplateType.valueOf(typeName))\n+                        .orElseThrow(\n+                                () ->\n+                                        new IllegalArgumentException(\n+                                                String.format(\n+                                                        \"No template \\\"%s\\\" found with type %s\",\n+                                                        templateName, typeName)));\n+            }\n+            // if template type not specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a Target built-in template by the name. If not, throw an\n             // exception and bail out.\n             return connection\n                     .getTemplateService()\n"}}, {"oid": "261ff0c519929ed8510fd05c8aaec238c0b15614", "url": "https://github.com/cryostatio/cryostat/commit/261ff0c519929ed8510fd05c8aaec238c0b15614", "message": "More concise templates description", "committedDate": "2020-07-09T20:18:46Z", "type": "commit"}, {"oid": "a67c86173c0323e7bb4ba18ab819d0ff5902fe99", "url": "https://github.com/cryostatio/cryostat/commit/a67c86173c0323e7bb4ba18ab819d0ff5902fe99", "message": "Remove extra whitespace", "committedDate": "2020-07-09T20:19:16Z", "type": "commit"}, {"oid": "9ec1c9cf4091079bd56bb7b6a18d98858343a660", "url": "https://github.com/cryostatio/cryostat/commit/9ec1c9cf4091079bd56bb7b6a18d98858343a660", "message": "Add syntax for specifying event template type", "committedDate": "2020-07-09T21:27:04Z", "type": "commit"}, {"oid": "840695e73a3050c9d69ed92d9dfa4c267e14007d", "url": "https://github.com/cryostatio/cryostat/commit/840695e73a3050c9d69ed92d9dfa4c267e14007d", "message": "Bump required container-jfr-core version", "committedDate": "2020-07-14T20:53:39Z", "type": "commit"}, {"oid": "7ae00e533c889008c59d0097f4d588405c365e0f", "url": "https://github.com/cryostatio/cryostat/commit/7ae00e533c889008c59d0097f4d588405c365e0f", "message": "Move JSoup dependency from test scope to compile\n\nRequired for -core local template service, which exposes the JSoup Document type as a return type", "committedDate": "2020-07-14T20:54:11Z", "type": "commit"}]}