{"pr_number": 187, "pr_title": "list-saved enhancements", "pr_createdAt": "2020-06-22T14:18:58Z", "pr_url": "https://github.com/cryostatio/cryostat/pull/187", "timeline": [{"oid": "dbee0276771e445f9aef351d811711c42e7348bd", "url": "https://github.com/cryostatio/cryostat/commit/dbee0276771e445f9aef351d811711c42e7348bd", "message": "Modify list-saved to print name and URLs for each file", "committedDate": "2020-06-19T21:11:16Z", "type": "commit"}, {"oid": "7522018b2218a0b1993f97c25c660d4a7139802b", "url": "https://github.com/cryostatio/cryostat/commit/7522018b2218a0b1993f97c25c660d4a7139802b", "message": "Change list-saved test to reflect new functionality", "committedDate": "2020-06-22T14:10:59Z", "type": "commit"}, {"oid": "28a5210ee176c54363894e7cd273b89178162362", "url": "https://github.com/cryostatio/cryostat/commit/28a5210ee176c54363894e7cd273b89178162362", "message": "add test to verify URLs are printed correctly", "committedDate": "2020-06-22T15:56:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDY5Ng==", "url": "https://github.com/cryostatio/cryostat/pull/187#discussion_r443710696", "bodyText": "There's an extra whitespace after the when on this line. Have you done a mvn spotless:apply to auto-format the code?", "author": "andrewazores", "createdAt": "2020-06-22T17:17:13Z", "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListSavedRecordingsCommandTest.java", "diffHunk": "@@ -137,8 +137,46 @@ void shouldExecuteAndPrintSavedRecordings() throws Exception {\n \n         InOrder inOrder = inOrder(cw);\n         inOrder.verify(cw).println(\"Saved recordings:\");\n-        inOrder.verify(cw).println(\"\\tfoo\");\n-        inOrder.verify(cw).println(\"\\tbar\");\n+        inOrder.verify(cw).println(Mockito.contains(\"getName\\t\\tfoo\"));\n+        inOrder.verify(cw).println(Mockito.contains(\"getName\\t\\tbar\"));\n+    }\n+\n+    @Test\n+    void shouldPrintURLs() throws Exception {\n+        when(fs.listDirectoryChildren(recordingsPath)).thenReturn(Arrays.asList(\"foo\", \"bar\"));\n+        when(exporter.getArchivedDownloadURL(Mockito.anyString())).thenAnswer(\n+            new Answer<String>() {\n+                @Override\n+                public String answer(InvocationOnMock invocation) throws Throwable {\n+                    return String.format(\n+                            \"http://example.com:1234/api/v1/recordings/%s\",\n+                            invocation.getArguments()[0]);\n+                }\n+            });\n+        when (exporter.getArchivedReportURL(Mockito.anyString())).thenAnswer(", "originalCommit": "28a5210ee176c54363894e7cd273b89178162362", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNjM5NA==", "url": "https://github.com/cryostatio/cryostat/pull/187#discussion_r443826394", "bodyText": "Fixed!", "author": "Alexjsenn", "createdAt": "2020-06-22T21:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "43418da11e59e6dc0c363d61fd20ad4542bf4b96", "chunk": "diff --git a/src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListSavedRecordingsCommandTest.java b/src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListSavedRecordingsCommandTest.java\nindex 4815d721..fed2790b 100644\n--- a/src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListSavedRecordingsCommandTest.java\n+++ b/src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListSavedRecordingsCommandTest.java\n\n@@ -144,39 +144,41 @@ class ListSavedRecordingsCommandTest {\n     @Test\n     void shouldPrintURLs() throws Exception {\n         when(fs.listDirectoryChildren(recordingsPath)).thenReturn(Arrays.asList(\"foo\", \"bar\"));\n-        when(exporter.getArchivedDownloadURL(Mockito.anyString())).thenAnswer(\n-            new Answer<String>() {\n-                @Override\n-                public String answer(InvocationOnMock invocation) throws Throwable {\n-                    return String.format(\n-                            \"http://example.com:1234/api/v1/recordings/%s\",\n-                            invocation.getArguments()[0]);\n-                }\n-            });\n-        when (exporter.getArchivedReportURL(Mockito.anyString())).thenAnswer(\n-            new Answer<String>() {\n-                @Override\n-                public String answer(InvocationOnMock invocation) throws Throwable {\n-                    return String.format(\n-                            \"http://example.com:1234/api/v1/reports/%s\",\n-                            invocation.getArguments()[0]);\n-                }\n-            });\n+        when(exporter.getArchivedDownloadURL(Mockito.anyString()))\n+                .thenAnswer(\n+                        new Answer<String>() {\n+                            @Override\n+                            public String answer(InvocationOnMock invocation) throws Throwable {\n+                                return String.format(\n+                                        \"http://example.com:1234/api/v1/recordings/%s\",\n+                                        invocation.getArguments()[0]);\n+                            }\n+                        });\n+        when(exporter.getArchivedReportURL(Mockito.anyString()))\n+                .thenAnswer(\n+                        new Answer<String>() {\n+                            @Override\n+                            public String answer(InvocationOnMock invocation) throws Throwable {\n+                                return String.format(\n+                                        \"http://example.com:1234/api/v1/reports/%s\",\n+                                        invocation.getArguments()[0]);\n+                            }\n+                        });\n \n         command.execute(new String[0]);\n \n         InOrder inOrder = inOrder(cw);\n         inOrder.verify(cw).println(\"Saved recordings:\");\n         inOrder.verify(cw)\n-            .println(\n-                Mockito.contains(\n-                        \"\\tgetDownloadUrl\\t\\thttp://example.com:1234/api/v1/recordings/foo\\n\"\n-                                + \"\\tgetReportUrl\\t\\thttp://example.com:1234/api/v1/reports/foo\"));\n+                .println(\n+                        Mockito.contains(\n+                                \"\\tgetDownloadUrl\\t\\thttp://example.com:1234/api/v1/recordings/foo\\n\"\n+                                        + \"\\tgetReportUrl\\t\\thttp://example.com:1234/api/v1/reports/foo\"));\n         inOrder.verify(cw)\n-            .println(\n-                Mockito.contains(\n-                        \"\\tgetDownloadUrl\\t\\thttp://example.com:1234/api/v1/recordings/bar\\n\"\n-                                + \"\\tgetReportUrl\\t\\thttp://example.com:1234/api/v1/reports/bar\"));\n+                .println(\n+                        Mockito.contains(\n+                                \"\\tgetDownloadUrl\\t\\thttp://example.com:1234/api/v1/recordings/bar\\n\"\n+                                        + \"\\tgetReportUrl\\t\\thttp://example.com:1234/api/v1/reports/bar\"));\n     }\n \n     @Test\n"}}, {"oid": "43418da11e59e6dc0c363d61fd20ad4542bf4b96", "url": "https://github.com/cryostatio/cryostat/commit/43418da11e59e6dc0c363d61fd20ad4542bf4b96", "message": "Apply mvn spotless to ListSavedRecordingsCommandTest", "committedDate": "2020-06-22T20:55:21Z", "type": "commit"}]}