{"pr_number": 222, "pr_title": "HTTP REST API feature parity", "pr_createdAt": "2020-07-29T00:09:14Z", "pr_url": "https://github.com/cryostatio/cryostat/pull/222", "timeline": [{"oid": "3b804c42fe2f9227806377f56035b0dedc07e42c", "url": "https://github.com/cryostatio/cryostat/commit/3b804c42fe2f9227806377f56035b0dedc07e42c", "message": "Pass ConnectionDescriptor through to reports service", "committedDate": "2020-07-29T23:17:57Z", "type": "forcePushed"}, {"oid": "d5610a43d5ae2b6d62584f728fac00c54d70e142", "url": "https://github.com/cryostatio/cryostat/commit/d5610a43d5ae2b6d62584f728fac00c54d70e142", "message": "Pass ConnectionDescriptor through to reports service", "committedDate": "2020-07-29T23:21:57Z", "type": "forcePushed"}, {"oid": "36e3884fc52b09a8ecde375fd66b1ed315054a0b", "url": "https://github.com/cryostatio/cryostat/commit/36e3884fc52b09a8ecde375fd66b1ed315054a0b", "message": "Correctly end archived recording deletion request", "committedDate": "2020-07-31T13:57:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNDE1Ng==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r463814156", "bodyText": "Does this comment also apply to EventOptionsBuilder?", "author": "jiekang", "createdAt": "2020-07-31T20:13:37Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java", "diffHunk": "@@ -45,7 +45,9 @@\n import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n \n-interface RecordingOptionsBuilderFactory {\n+// FIXME this should be in a more general package, not commands/internal. This is also used in", "originalCommit": "583fbe5b4494c92bcfefd032a2173810273c3670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTI2MQ==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r463815261", "bodyText": "Yea, it does. Since essentially all of the commands are now deprecated, I figured it would make sense to wait until they can be fully removed and then the RecordingOptionsBuilderFactory and EventOptionsBuilder can be moved somewhere close to the HTTP Handlers.", "author": "andrewazores", "createdAt": "2020-07-31T20:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNDE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MjQyNw==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r465182427", "bodyText": "Ah gotcha. Makes sense. Thanks", "author": "jiekang", "createdAt": "2020-08-04T16:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNDE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e5cc8d0453d6bdb76b2748e90c2cd9ffb8b386e1", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java b/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java\nindex 16219508..97b862d3 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java\n\n@@ -45,9 +45,7 @@ import org.openjdk.jmc.common.unit.QuantityConversionException;\n import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n \n-// FIXME this should be in a more general package, not commands/internal. This is also used in\n-// net/web/handlers, for example\n-public interface RecordingOptionsBuilderFactory {\n+interface RecordingOptionsBuilderFactory {\n     RecordingOptionsBuilder create(IFlightRecorderService service)\n             throws QuantityConversionException;\n }\n"}}, {"oid": "e5cc8d0453d6bdb76b2748e90c2cd9ffb8b386e1", "url": "https://github.com/cryostatio/cryostat/commit/e5cc8d0453d6bdb76b2748e90c2cd9ffb8b386e1", "message": "Implement handler for saving recordings", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "dba63b6747b3193bb094cc5ccc34f0c71c4a0c12", "url": "https://github.com/cryostatio/cryostat/commit/dba63b6747b3193bb094cc5ccc34f0c71c4a0c12", "message": "Implement handler for stopping recordings", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "96515d42825e05c2b8f01845dfb6135864187ccc", "url": "https://github.com/cryostatio/cryostat/commit/96515d42825e05c2b8f01845dfb6135864187ccc", "message": "Clean up and add tests for recording PATCH meta-handler", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "6e34c9e68a451f8c111fd24056ddf2ed1a2984de", "url": "https://github.com/cryostatio/cryostat/commit/6e34c9e68a451f8c111fd24056ddf2ed1a2984de", "message": "Implement handler for creating new recordings\n\nAlso some related refactoring/cleanup", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "84374f8321eea829d844e13fb3e4aa8704d8035b", "url": "https://github.com/cryostatio/cryostat/commit/84374f8321eea829d844e13fb3e4aa8704d8035b", "message": "Implement handler for deleting recordings", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "e34aeaeb14f1460abf0a4b733ace2ee8dd1aee92", "url": "https://github.com/cryostatio/cryostat/commit/e34aeaeb14f1460abf0a4b733ace2ee8dd1aee92", "message": "Initial merged implementation of recording upload handler", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "1b2f990647ad77953580c0ff4f9b854ca9e8c8a0", "url": "https://github.com/cryostatio/cryostat/commit/1b2f990647ad77953580c0ff4f9b854ca9e8c8a0", "message": "Split recording upload handler implementation", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "fa5add862bba305618bc3abf3b7bdaa33b208724", "url": "https://github.com/cryostatio/cryostat/commit/fa5add862bba305618bc3abf3b7bdaa33b208724", "message": "Rebase and fixup", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "8d1ca58c861aa8af5879c3f5c394f358c831acc6", "url": "https://github.com/cryostatio/cryostat/commit/8d1ca58c861aa8af5879c3f5c394f358c831acc6", "message": "Add TargetRecordingUploadPostHandlerTest", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "4796acb958d333be1b057d405ec46dd8550348e0", "url": "https://github.com/cryostatio/cryostat/commit/4796acb958d333be1b057d405ec46dd8550348e0", "message": "Exception handling cleanup", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "d468a79fcc8f9a2da53d64a691f157d3761d780b", "url": "https://github.com/cryostatio/cryostat/commit/d468a79fcc8f9a2da53d64a691f157d3761d780b", "message": "Implement handler for deleting saved recordings", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "d7c710bc972069e062af4e6fda09832be8dde836", "url": "https://github.com/cryostatio/cryostat/commit/d7c710bc972069e062af4e6fda09832be8dde836", "message": "Implement handler for creating snapshot recordings", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "73ada7c583f13620ef76e6bdc510d9fb04bceebb", "url": "https://github.com/cryostatio/cryostat/commit/73ada7c583f13620ef76e6bdc510d9fb04bceebb", "message": "Mark commands as deprecated", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "13f0ff3a44371a32a4d4fcc6eef32aa1b0c3992b", "url": "https://github.com/cryostatio/cryostat/commit/13f0ff3a44371a32a4d4fcc6eef32aa1b0c3992b", "message": "Log warning when deprecated command requests are received", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "69a44bbfadd3497f3e54217bd96b2bc573e5d832", "url": "https://github.com/cryostatio/cryostat/commit/69a44bbfadd3497f3e54217bd96b2bc573e5d832", "message": "Pass ConnectionDescriptor through to reports service", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "6d9c4248efeff1b035084c6d2d7318e4a2c65357", "url": "https://github.com/cryostatio/cryostat/commit/6d9c4248efeff1b035084c6d2d7318e4a2c65357", "message": "Use ConnectionDescriptor, not just its targetId, as cache key", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "000abf9d68da154b32e2a279ecf11bc87bf7389c", "url": "https://github.com/cryostatio/cryostat/commit/000abf9d68da154b32e2a279ecf11bc87bf7389c", "message": "Snapshot creation should not be tied to a recording name", "committedDate": "2020-08-05T19:52:19Z", "type": "commit"}, {"oid": "db158c728988239195320112fe60e76a81c51653", "url": "https://github.com/cryostatio/cryostat/commit/db158c728988239195320112fe60e76a81c51653", "message": "Include report/download URLs in archived recordings response\n\nFormat as JSON array of objects, rather than simple array of strings", "committedDate": "2020-08-05T19:53:02Z", "type": "commit"}, {"oid": "ee7938a0e2517642700819672b85137a9c514d53", "url": "https://github.com/cryostatio/cryostat/commit/ee7938a0e2517642700819672b85137a9c514d53", "message": "Add missing binding for archived recording deletion handler", "committedDate": "2020-08-05T19:53:03Z", "type": "commit"}, {"oid": "3c544879fc91e313c1f6067a7e9f5fc1866050c9", "url": "https://github.com/cryostatio/cryostat/commit/3c544879fc91e313c1f6067a7e9f5fc1866050c9", "message": "Correctly end archived recording deletion request", "committedDate": "2020-08-05T19:53:03Z", "type": "commit"}, {"oid": "18ec644c366861e47114faf810dcdbcbfb6e1563", "url": "https://github.com/cryostatio/cryostat/commit/18ec644c366861e47114faf810dcdbcbfb6e1563", "message": "Correct reversed order of parameters in exception message", "committedDate": "2020-08-05T19:53:03Z", "type": "commit"}, {"oid": "25306ec0e0d9d6cd0a68152ff75a532ece991a2d", "url": "https://github.com/cryostatio/cryostat/commit/25306ec0e0d9d6cd0a68152ff75a532ece991a2d", "message": "Use more appropriate status code when archives are unavailable", "committedDate": "2020-08-05T19:53:03Z", "type": "commit"}, {"oid": "25306ec0e0d9d6cd0a68152ff75a532ece991a2d", "url": "https://github.com/cryostatio/cryostat/commit/25306ec0e0d9d6cd0a68152ff75a532ece991a2d", "message": "Use more appropriate status code when archives are unavailable", "committedDate": "2020-08-05T19:53:03Z", "type": "forcePushed"}, {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe", "url": "https://github.com/cryostatio/cryostat/commit/ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe", "message": "Correct rebased test", "committedDate": "2020-08-05T22:00:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466665234", "bodyText": "Would the check for this be running mvn spotbugs:check ?", "author": "jiekang", "createdAt": "2020-08-06T20:23:32Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow", "originalCommit": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTM4MQ==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466665381", "bodyText": "Er, with the suppression removed :P", "author": "jiekang", "createdAt": "2020-08-06T20:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODQwOA==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466668408", "bodyText": "Yea that should do it", "author": "andrewazores", "createdAt": "2020-08-06T20:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2OTMxNA==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466669314", "bodyText": "Dang, guess our projects really do differ in some critical way. I've removed the suppression and see green for my runs of spotbugs:check", "author": "jiekang", "createdAt": "2020-08-06T20:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2OTYxMw==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466669613", "bodyText": "s/project/systems I suppose", "author": "jiekang", "createdAt": "2020-08-06T20:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NzA0NA==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466677044", "bodyText": "I don't get the Spotbugs warning anymore either - maybe I had come back around at some point and refactored this in a way that avoids the previous problem. I'll remove the annotation.", "author": "andrewazores", "createdAt": "2020-08-06T20:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NzU5Nw==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466677597", "bodyText": "I can see why it would have this warning since there are calls that would NPE if their input was null and the values submitted aren't checked before being used as input. However it looks like the values are currently never not null and I guess it would have trouble analyzing that? Anyways; weird that I don't see the warning on my runs...", "author": "jiekang", "createdAt": "2020-08-06T20:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "98c6fe094e4565bb9f8768fe509eb384b608d8fb", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java b/src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java\nindex 22f195ee..f8572e29 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java\n\n@@ -56,7 +56,6 @@ import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n import com.redhat.rhjmc.containerjfr.net.AuthManager;\n import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n \n-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.HttpMethod;\n import io.vertx.ext.web.RoutingContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjE2OA==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466676168", "bodyText": "resolve can throw an InvalidPathException. If this happens, it will throw through handleAuthenticated as it only catches MalformedURLException. Would it make sense to handle it within instead to respond that the input was invalid? Or does it do that somewhere higher up?\nI see test class for TargetRecordingUploadPostHandler but not for this one. Is that intended?", "author": "jiekang", "createdAt": "2020-08-06T20:45:30Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow\n+    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")\n+    private ResponseMessage doPost(String recordingName, URL uploadUrl) throws Exception {\n+        Path recordingPath =\n+                getRecordingPath(recordingName)\n+                        .orElseThrow(() -> new HttpStatusException(404, recordingName));\n+\n+        MultipartForm form =\n+                MultipartForm.create()\n+                        .binaryFileUpload(\n+                                \"file\",\n+                                recordingName,\n+                                recordingPath.toString(),\n+                                HttpMimeType.OCTET_STREAM.toString());\n+\n+        CompletableFuture<ResponseMessage> future = new CompletableFuture<>();\n+        webClient\n+                .postAbs(uploadUrl.toURI().resolve(\"/load\").normalize().toString())\n+                .timeout(30_000L)\n+                .sendMultipartForm(\n+                        form,\n+                        uploadHandler -> {\n+                            if (uploadHandler.failed()) {\n+                                future.completeExceptionally(uploadHandler.cause());\n+                                return;\n+                            }\n+                            HttpResponse<Buffer> response = uploadHandler.result();\n+                            future.complete(\n+                                    new ResponseMessage(\n+                                            response.statusCode(),\n+                                            response.statusMessage(),\n+                                            response.bodyAsString()));\n+                        });\n+        return future.get();\n+    }\n+\n+    Optional<Path> getRecordingPath(String recordingName) throws Exception {\n+        Path archivedRecording = savedRecordingsPath.resolve(recordingName);", "originalCommit": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTQ2NA==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466679464", "bodyText": "handleAuthenticated is called in AbstractAuthenticatedRequestHandler.handle(), which will catch any exception thrown by handleAuthenticated and handle it appropriately. For an InvalidPathException or any other generally unexpected exception, it will be wrapped in an HttpStatusException with status code 500, which will later on be caught by the WebServer and turned into a failure response on the wire.\nIt probably does make sense to catch the InvalidPathException and wrap it into an HttpStatusException with a 4xx response status though, since that's most likely due to the client making a bad request for a recording name that doesn't make sense.", "author": "andrewazores", "createdAt": "2020-08-06T20:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTgyNA==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466679824", "bodyText": "re: missing test - nope, not intended, looks like I forgot to write one. Good catch :-) I'll add one now.", "author": "andrewazores", "createdAt": "2020-08-06T20:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4ODk1Ng==", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466688956", "bodyText": "Okay. I agree, I think it can be caught in this class and handled as a 4xx.", "author": "jiekang", "createdAt": "2020-08-06T21:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "98c6fe094e4565bb9f8768fe509eb384b608d8fb", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java b/src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java\nindex 22f195ee..f8572e29 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java\n\n@@ -56,7 +56,6 @@ import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n import com.redhat.rhjmc.containerjfr.net.AuthManager;\n import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n \n-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.HttpMethod;\n import io.vertx.ext.web.RoutingContext;\n"}}, {"oid": "98c6fe094e4565bb9f8768fe509eb384b608d8fb", "url": "https://github.com/cryostatio/cryostat/commit/98c6fe094e4565bb9f8768fe509eb384b608d8fb", "message": "Remove spotbugs suppression annotation", "committedDate": "2020-08-06T20:58:53Z", "type": "commit"}, {"oid": "7e3bbd811d106f379e47a04339d98c78db07f944", "url": "https://github.com/cryostatio/cryostat/commit/7e3bbd811d106f379e47a04339d98c78db07f944", "message": "Respond 400 if client provides invalid recording name (path)", "committedDate": "2020-08-06T20:58:53Z", "type": "commit"}, {"oid": "7e3bbd811d106f379e47a04339d98c78db07f944", "url": "https://github.com/cryostatio/cryostat/commit/7e3bbd811d106f379e47a04339d98c78db07f944", "message": "Respond 400 if client provides invalid recording name (path)", "committedDate": "2020-08-06T20:58:53Z", "type": "forcePushed"}, {"oid": "84604b38492f1edefa7c8d3fa088975e82fba79d", "url": "https://github.com/cryostatio/cryostat/commit/84604b38492f1edefa7c8d3fa088975e82fba79d", "message": "Respond 404 when recording not found", "committedDate": "2020-08-06T21:19:44Z", "type": "commit"}, {"oid": "a559e299bd4dd82638c3072b0b842adccdddb097", "url": "https://github.com/cryostatio/cryostat/commit/a559e299bd4dd82638c3072b0b842adccdddb097", "message": "Add RecordingUploadPostHandlerTest", "committedDate": "2020-08-06T21:21:41Z", "type": "commit"}, {"oid": "a559e299bd4dd82638c3072b0b842adccdddb097", "url": "https://github.com/cryostatio/cryostat/commit/a559e299bd4dd82638c3072b0b842adccdddb097", "message": "Add RecordingUploadPostHandlerTest", "committedDate": "2020-08-06T21:21:41Z", "type": "forcePushed"}]}