{"pr_number": 115, "pr_title": "Better WebSocket concurrency handling", "pr_createdAt": "2020-01-31T17:06:39Z", "pr_url": "https://github.com/cryostatio/cryostat/pull/115", "timeline": [{"oid": "28f7383494e33987e5cba4ba2dc54e47604e21ed", "url": "https://github.com/cryostatio/cryostat/commit/28f7383494e33987e5cba4ba2dc54e47604e21ed", "message": "Better WebSocket concurrency handling\n\nRewrite MessagingServer handling of concurrent WebSocket connections to\nreduce latency, avoid polling, and fix a concurrent modification\nexception bug. This also adds logic for limiting the maximum number of\nWebSocket connections that can be simultaneously open, which is\nconfigurable.\n\nFixes #114", "committedDate": "2020-01-31T17:05:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0NzQ4Nw==", "url": "https://github.com/cryostatio/cryostat/pull/115#discussion_r373647487", "bodyText": "Do we need synchronized access for connections here too?", "author": "ebaron", "createdAt": "2020-01-31T19:30:01Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java", "diffHunk": "@@ -43,6 +57,14 @@ void start() throws SocketException, UnknownHostException {\n                         return;\n                     }\n                     String remoteAddress = sws.remoteAddress().toString();\n+                    if (connections.size() >= maxConnections) {\n+                        logger.info(\n+                                String.format(\n+                                        \"Dropping remote client %s due to too many concurrent connections\",\n+                                        remoteAddress));\n+                        sws.reject();\n+                        return;\n+                    }", "originalCommit": "28f7383494e33987e5cba4ba2dc54e47604e21ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0239665c18b947e466c1a5c20c50a4b8d7334874", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java b/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java\nindex bec5b7c8..70209a94 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java\n\n@@ -57,56 +57,59 @@ class MessagingServer {\n                         return;\n                     }\n                     String remoteAddress = sws.remoteAddress().toString();\n-                    if (connections.size() >= maxConnections) {\n-                        logger.info(\n-                                String.format(\n-                                        \"Dropping remote client %s due to too many concurrent connections\",\n-                                        remoteAddress));\n-                        sws.reject();\n-                        return;\n-                    }\n-                    logger.info(String.format(\"Connected remote client %s\", remoteAddress));\n-\n-                    WsClientReaderWriter crw =\n-                            new WsClientReaderWriter(this.logger, this.gson, sws);\n-                    sws.closeHandler(\n-                            (unused) -> {\n-                                logger.info(\n-                                        String.format(\n-                                                \"Disconnected remote client %s\", remoteAddress));\n-                                removeConnection(crw);\n-                            });\n-                    sws.textMessageHandler(\n-                            msg -> {\n-                                try {\n-                                    String proto = sws.subProtocol();\n-                                    authManager\n-                                            .doAuthenticated(\n-                                                    () -> proto,\n-                                                    authManager::validateWebSocketSubProtocol)\n-                                            .onSuccess(() -> crw.handle(msg))\n-                                            // 1002: WebSocket \"Protocol Error\" close reason\n-                                            .onFailure(\n-                                                    () ->\n-                                                            sws.close(\n-                                                                    (short) 1002,\n-                                                                    String.format(\n-                                                                            \"Invalid subprotocol \\\"%s\\\"\",\n-                                                                            proto)))\n-                                            .execute();\n-                                } catch (InterruptedException\n-                                        | ExecutionException\n-                                        | TimeoutException e) {\n-                                    logger.info(e);\n-                                    // 1011: WebSocket \"Internal Error\" close reason\n-                                    sws.close(\n-                                            (short) 1011,\n+                    synchronized (connections) {\n+                        if (connections.size() >= maxConnections) {\n+                            logger.info(\n+                                    String.format(\n+                                            \"Dropping remote client %s due to too many concurrent connections\",\n+                                            remoteAddress));\n+                            sws.reject();\n+                            return;\n+                        }\n+                        logger.info(String.format(\"Connected remote client %s\", remoteAddress));\n+\n+                        WsClientReaderWriter crw =\n+                                new WsClientReaderWriter(this.logger, this.gson, sws);\n+                        sws.closeHandler(\n+                                (unused) -> {\n+                                    logger.info(\n                                             String.format(\n-                                                    \"Internal error: \\\"%s\\\"\", e.getMessage()));\n-                                }\n-                            });\n-                    addConnection(crw);\n-                    sws.accept();\n+                                                    \"Disconnected remote client %s\",\n+                                                    remoteAddress));\n+                                    removeConnection(crw);\n+                                });\n+                        sws.textMessageHandler(\n+                                msg -> {\n+                                    try {\n+                                        String proto = sws.subProtocol();\n+                                        authManager\n+                                                .doAuthenticated(\n+                                                        () -> proto,\n+                                                        authManager::validateWebSocketSubProtocol)\n+                                                .onSuccess(() -> crw.handle(msg))\n+                                                // 1002: WebSocket \"Protocol Error\" close reason\n+                                                .onFailure(\n+                                                        () ->\n+                                                                sws.close(\n+                                                                        (short) 1002,\n+                                                                        String.format(\n+                                                                                \"Invalid subprotocol \\\"%s\\\"\",\n+                                                                                proto)))\n+                                                .execute();\n+                                    } catch (InterruptedException\n+                                            | ExecutionException\n+                                            | TimeoutException e) {\n+                                        logger.info(e);\n+                                        // 1011: WebSocket \"Internal Error\" close reason\n+                                        sws.close(\n+                                                (short) 1011,\n+                                                String.format(\n+                                                        \"Internal error: \\\"%s\\\"\", e.getMessage()));\n+                                    }\n+                                });\n+                        addConnection(crw);\n+                        sws.accept();\n+                    }\n                 });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMDE3Nw==", "url": "https://github.com/cryostatio/cryostat/pull/115#discussion_r373720177", "bodyText": "Maybe need some synchronization here if readingThread becomes null after the check, but this might be overkill for now.", "author": "ebaron", "createdAt": "2020-01-31T22:52:18Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/WsClientReaderWriter.java", "diffHunk": "@@ -35,11 +34,10 @@ public void handle(String msg) {\n \n     @Override\n     public void close() {\n-        if (running && readingThread != null) {\n-            inQ.clear();\n+        inQ.clear();\n+        if (readingThread != null) {\n             readingThread.interrupt();\n         }", "originalCommit": "28f7383494e33987e5cba4ba2dc54e47604e21ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzM5MA==", "url": "https://github.com/cryostatio/cryostat/pull/115#discussion_r374133390", "bodyText": "It's possible. The expected flow here is that this interrupt is what causes readingThread to become null, but something else could interrupt the thread too.", "author": "andrewazores", "createdAt": "2020-02-03T14:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMDE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "97c7dc7f3d75035dcc51d2366253a1acfe088923", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/WsClientReaderWriter.java b/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/WsClientReaderWriter.java\nindex 4cce879b..cba1db07 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/WsClientReaderWriter.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/WsClientReaderWriter.java\n\n@@ -35,8 +36,10 @@ class WsClientReaderWriter implements ClientReader, ClientWriter, Handler<String\n     @Override\n     public void close() {\n         inQ.clear();\n-        if (readingThread != null) {\n-            readingThread.interrupt();\n+        synchronized(threadLock) {\n+            if (readingThread != null) {\n+                readingThread.interrupt();\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMTM0NQ==", "url": "https://github.com/cryostatio/cryostat/pull/115#discussion_r373721345", "bodyText": "What do you think about logging a warning here, so the user knows their argument is invalid and will be ignored?", "author": "ebaron", "createdAt": "2020-01-31T22:56:19Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java", "diffHunk": "@@ -161,4 +183,21 @@ public void println(Exception e) {\n             }\n         };\n     }\n+\n+    private int determineMaximumWsConnections(Environment env) {\n+        try {\n+            int maxConn =\n+                    Integer.parseInt(\n+                            env.getEnv(\n+                                    MAX_CONNECTIONS_ENV_VAR,\n+                                    String.valueOf(DEFAULT_MAX_CONNECTIONS)));\n+            if (maxConn > 64 || maxConn < 1) {\n+                return DEFAULT_MAX_CONNECTIONS;", "originalCommit": "28f7383494e33987e5cba4ba2dc54e47604e21ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aae80959b2039e6f03082f16a1c99ec730327380", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java b/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java\nindex bec5b7c8..5ba08bed 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/tui/ws/MessagingServer.java\n\n@@ -191,8 +196,19 @@ class MessagingServer {\n                             env.getEnv(\n                                     MAX_CONNECTIONS_ENV_VAR,\n                                     String.valueOf(DEFAULT_MAX_CONNECTIONS)));\n-            if (maxConn > 64 || maxConn < 1) {\n-                return DEFAULT_MAX_CONNECTIONS;\n+            if (maxConn > MAX_CONNECTIONS) {\n+                logger.info(\n+                        String.format(\n+                                \"Requested maximum WebSocket connections %d is too large.\",\n+                                maxConn));\n+                return MAX_CONNECTIONS;\n+            }\n+            if (maxConn < MIN_CONNECTIONS) {\n+                logger.info(\n+                        String.format(\n+                                \"Requested minimum WebSocket connections %d is too small.\",\n+                                maxConn));\n+                return MIN_CONNECTIONS;\n             }\n             return maxConn;\n         } catch (NumberFormatException nfe) {\n"}}, {"oid": "0239665c18b947e466c1a5c20c50a4b8d7334874", "url": "https://github.com/cryostatio/cryostat/commit/0239665c18b947e466c1a5c20c50a4b8d7334874", "message": "Ensure thread safety while accepting new connection", "committedDate": "2020-02-03T14:29:46Z", "type": "commit"}, {"oid": "97c7dc7f3d75035dcc51d2366253a1acfe088923", "url": "https://github.com/cryostatio/cryostat/commit/97c7dc7f3d75035dcc51d2366253a1acfe088923", "message": "Add locking to ensure thread does not become null while interrupting", "committedDate": "2020-02-03T15:34:28Z", "type": "commit"}, {"oid": "aae80959b2039e6f03082f16a1c99ec730327380", "url": "https://github.com/cryostatio/cryostat/commit/aae80959b2039e6f03082f16a1c99ec730327380", "message": "Better enforcement and logging of min/max WS connections", "committedDate": "2020-02-03T15:43:36Z", "type": "forcePushed"}, {"oid": "1716a52ce953b36d9e3a250e8c9b184a15c29e6d", "url": "https://github.com/cryostatio/cryostat/commit/1716a52ce953b36d9e3a250e8c9b184a15c29e6d", "message": "Better enforcement and logging of min/max WS connections", "committedDate": "2020-02-03T15:44:10Z", "type": "commit"}, {"oid": "1716a52ce953b36d9e3a250e8c9b184a15c29e6d", "url": "https://github.com/cryostatio/cryostat/commit/1716a52ce953b36d9e3a250e8c9b184a15c29e6d", "message": "Better enforcement and logging of min/max WS connections", "committedDate": "2020-02-03T15:44:10Z", "type": "forcePushed"}]}