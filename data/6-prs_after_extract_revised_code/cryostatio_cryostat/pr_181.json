{"pr_number": 181, "pr_title": "Fix `upload-recording` Command", "pr_createdAt": "2020-06-10T20:01:56Z", "pr_url": "https://github.com/cryostatio/cryostat/pull/181", "timeline": [{"oid": "737f7f744b3381189b2cbed6033f5a7ef87b0e09", "url": "https://github.com/cryostatio/cryostat/commit/737f7f744b3381189b2cbed6033f5a7ef87b0e09", "message": "Fix `upload-recording` command", "committedDate": "2020-06-10T19:22:25Z", "type": "commit"}, {"oid": "494cee3b00d9f5234acaab8762aaf43d54e58946", "url": "https://github.com/cryostatio/cryostat/commit/494cee3b00d9f5234acaab8762aaf43d54e58946", "message": "Change tests to match new implementation", "committedDate": "2020-06-10T19:22:25Z", "type": "commit"}, {"oid": "3ef5b9eb83e68d454b2f4d091f567a1dd90b8a53", "url": "https://github.com/cryostatio/cryostat/commit/3ef5b9eb83e68d454b2f4d091f567a1dd90b8a53", "message": "Remove duplicate test", "committedDate": "2020-06-10T19:22:25Z", "type": "commit"}, {"oid": "f4f4be6397123d1230265e3d98610bca74ff149a", "url": "https://github.com/cryostatio/cryostat/commit/f4f4be6397123d1230265e3d98610bca74ff149a", "message": "Fix formatting", "committedDate": "2020-06-10T19:22:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MDAzNw==", "url": "https://github.com/cryostatio/cryostat/pull/181#discussion_r438380037", "bodyText": "Just a minor style nitpick - generally the convention would be private final.", "author": "andrewazores", "createdAt": "2020-06-10T20:09:44Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java", "diffHunk": "@@ -175,25 +178,43 @@ public boolean validate(String[] args) {\n \n     // returned stream should be cleaned up by HttpClient\n     @SuppressFBWarnings(\"OBL_UNSATISFIED_OBLIGATION\")\n-    Optional<InputStream> getBestRecordingForName(String targetId, String recordingName)\n+    RecordingConnection getBestRecordingForName(String targetId, String recordingName)\n             throws Exception {\n         Optional<IRecordingDescriptor> currentRecording =\n                 getDescriptorByName(targetId, recordingName);\n         if (currentRecording.isPresent()) {\n-            return targetConnectionManager.executeConnectedTask(\n-                    targetId,\n-                    connection -> {\n-                        return Optional.of(\n-                                connection.getService().openStream(currentRecording.get(), false));\n-                    });\n+            JFRConnection connection = targetConnectionManager.connect(targetId);\n+            return new RecordingConnection(\n+                    Optional.of(connection.getService().openStream(currentRecording.get(), false)),\n+                    Optional.of(connection));\n         }\n \n         Path archivedRecording = recordingsPath.resolve(recordingName);\n         if (fs.isRegularFile(archivedRecording) && fs.isReadable(archivedRecording)) {\n-            return Optional.of(new BufferedInputStream(fs.newInputStream(archivedRecording)));\n+            return new RecordingConnection(\n+                    Optional.of(new BufferedInputStream(fs.newInputStream(archivedRecording))),\n+                    Optional.empty());\n         }\n \n-        return Optional.empty();\n+        return new RecordingConnection(Optional.empty(), Optional.empty());\n+    }\n+\n+    static class RecordingConnection {\n+        final private Optional<InputStream> stream;\n+        final private Optional<JFRConnection> connection;", "originalCommit": "737f7f744b3381189b2cbed6033f5a7ef87b0e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e90acba6d7405b0d0e69f4ca62ad0f056d6a5e7", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java b/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java\nindex 71ba0195..97bb37ce 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java\n\n@@ -200,19 +200,20 @@ class UploadRecordingCommand extends AbstractConnectedCommand implements Seriali\n     }\n \n     static class RecordingConnection {\n-        final private Optional<InputStream> stream;\n-        final private Optional<JFRConnection> connection;\n+        private final Optional<InputStream> stream;\n+        private final Optional<JFRConnection> connection;\n \n-        public RecordingConnection(Optional<InputStream> stream, Optional<JFRConnection> connection) {\n+        RecordingConnection(\n+                Optional<InputStream> stream, Optional<JFRConnection> connection) {\n             this.stream = stream;\n             this.connection = connection;\n         }\n \n-        public Optional<InputStream> getStream() {\n+        Optional<InputStream> getStream() {\n             return stream;\n         }\n \n-        public Optional<JFRConnection> getConnection() {\n+        Optional<JFRConnection> getConnection() {\n             return connection;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MDQ5Mg==", "url": "https://github.com/cryostatio/cryostat/pull/181#discussion_r438380492", "bodyText": "And also a minor nitpick, but this constructor and the instance methods below it probably don't need to be public if the class itself is default visibility (package-private).", "author": "andrewazores", "createdAt": "2020-06-10T20:10:39Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java", "diffHunk": "@@ -175,25 +178,43 @@ public boolean validate(String[] args) {\n \n     // returned stream should be cleaned up by HttpClient\n     @SuppressFBWarnings(\"OBL_UNSATISFIED_OBLIGATION\")\n-    Optional<InputStream> getBestRecordingForName(String targetId, String recordingName)\n+    RecordingConnection getBestRecordingForName(String targetId, String recordingName)\n             throws Exception {\n         Optional<IRecordingDescriptor> currentRecording =\n                 getDescriptorByName(targetId, recordingName);\n         if (currentRecording.isPresent()) {\n-            return targetConnectionManager.executeConnectedTask(\n-                    targetId,\n-                    connection -> {\n-                        return Optional.of(\n-                                connection.getService().openStream(currentRecording.get(), false));\n-                    });\n+            JFRConnection connection = targetConnectionManager.connect(targetId);\n+            return new RecordingConnection(\n+                    Optional.of(connection.getService().openStream(currentRecording.get(), false)),\n+                    Optional.of(connection));\n         }\n \n         Path archivedRecording = recordingsPath.resolve(recordingName);\n         if (fs.isRegularFile(archivedRecording) && fs.isReadable(archivedRecording)) {\n-            return Optional.of(new BufferedInputStream(fs.newInputStream(archivedRecording)));\n+            return new RecordingConnection(\n+                    Optional.of(new BufferedInputStream(fs.newInputStream(archivedRecording))),\n+                    Optional.empty());\n         }\n \n-        return Optional.empty();\n+        return new RecordingConnection(Optional.empty(), Optional.empty());\n+    }\n+\n+    static class RecordingConnection {\n+        final private Optional<InputStream> stream;\n+        final private Optional<JFRConnection> connection;\n+\n+        public RecordingConnection(Optional<InputStream> stream, Optional<JFRConnection> connection) {", "originalCommit": "737f7f744b3381189b2cbed6033f5a7ef87b0e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e90acba6d7405b0d0e69f4ca62ad0f056d6a5e7", "chunk": "diff --git a/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java b/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java\nindex 71ba0195..97bb37ce 100644\n--- a/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java\n+++ b/src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java\n\n@@ -200,19 +200,20 @@ class UploadRecordingCommand extends AbstractConnectedCommand implements Seriali\n     }\n \n     static class RecordingConnection {\n-        final private Optional<InputStream> stream;\n-        final private Optional<JFRConnection> connection;\n+        private final Optional<InputStream> stream;\n+        private final Optional<JFRConnection> connection;\n \n-        public RecordingConnection(Optional<InputStream> stream, Optional<JFRConnection> connection) {\n+        RecordingConnection(\n+                Optional<InputStream> stream, Optional<JFRConnection> connection) {\n             this.stream = stream;\n             this.connection = connection;\n         }\n \n-        public Optional<InputStream> getStream() {\n+        Optional<InputStream> getStream() {\n             return stream;\n         }\n \n-        public Optional<JFRConnection> getConnection() {\n+        Optional<JFRConnection> getConnection() {\n             return connection;\n         }\n     }\n"}}, {"oid": "8e90acba6d7405b0d0e69f4ca62ad0f056d6a5e7", "url": "https://github.com/cryostatio/cryostat/commit/8e90acba6d7405b0d0e69f4ca62ad0f056d6a5e7", "message": "Remove public modifier for RecordingConnection methods", "committedDate": "2020-06-10T20:30:27Z", "type": "commit"}]}