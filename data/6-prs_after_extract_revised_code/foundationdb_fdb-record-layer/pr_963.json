{"pr_number": 963, "pr_title": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "pr_createdAt": "2020-06-12T22:04:21Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/963", "timeline": [{"oid": "b17187a65e5f701cf837e87a8b02bf3401bdec45", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/b17187a65e5f701cf837e87a8b02bf3401bdec45", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-12T22:22:25Z", "type": "forcePushed"}, {"oid": "a008dfd0835f1e08749d774ac7cb55a8eb91ef33", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/a008dfd0835f1e08749d774ac7cb55a8eb91ef33", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-12T22:26:55Z", "type": "forcePushed"}, {"oid": "b418a63ffda588a5ee8442d891ca456d1cea4c07", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/b418a63ffda588a5ee8442d891ca456d1cea4c07", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-12T22:30:28Z", "type": "forcePushed"}, {"oid": "72b85dadd12d899208aec6c9f1753076f756dbb4", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/72b85dadd12d899208aec6c9f1753076f756dbb4", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-12T22:36:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTA3Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695077", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** MappedPool Class Attempts to reuse objects organized by keys.\n          \n          \n            \n            /**\n          \n          \n            \n              * MappedPool Class Attempts to reuse objects organized by keys.", "author": "alecgrieser", "createdAt": "2020-06-13T01:12:07Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk1NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695955", "bodyText": "It's also not entirely obvious to me what the contract of this class is. By usage, it appears to be that you might want to reuse an object, but you might have internal state that makes it unable to be used in a thread safe manner, so the contract is: (1) get one of these instances using poll then (2) use it until you're done and (3) offer it back. So there's only one owner of the object any given time (thus preventing thread safety problems on the object), but you get re-use. That seems like a good change, but it would be nice to say that that's the intended use here.", "author": "alecgrieser", "createdAt": "2020-06-13T01:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex 86cb254d..ced789e4 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -20,14 +20,18 @@\n \n package com.apple.foundationdb.record.provider.common;\n \n+import com.apple.foundationdb.annotation.API;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.function.Function;\n \n-/** MappedPool Class Attempts to reuse objects organized by keys.\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n  *\n  *  Examples include Ciphers and Compressors\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTM5Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695397", "bodyText": "I think we want to mark the API level of this class as API.Status.INTERNAL (using the stability annotations: @API(API.Status.INTERNAL)). Or, actually, package-private (for now) would probably work, though I could see us wanting to use it in more places in the future, at which point we might want to make it public but INTERNAL.", "author": "alecgrieser", "createdAt": "2020-06-13T01:15:18Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMDMyMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440310322", "bodyText": "In full transparency, I want this class to also be used by another library for pooling Compression levels.  @alecgrieser what API level should I place on it based on those aspirations?", "author": "jleach4", "createdAt": "2020-06-15T16:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMTI2OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440321269", "bodyText": "You can use API.Status.EXPERIMENTAL.  This basically reserves the right to change it at any time until we deem that it is really a solid solution and won't ever change.", "author": "scgray", "createdAt": "2020-06-15T17:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMzQwNw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440403407", "bodyText": "Changed...", "author": "jleach4", "createdAt": "2020-06-15T19:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex 86cb254d..ced789e4 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -20,14 +20,18 @@\n \n package com.apple.foundationdb.record.provider.common;\n \n+import com.apple.foundationdb.annotation.API;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.function.Function;\n \n-/** MappedPool Class Attempts to reuse objects organized by keys.\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n  *\n  *  Examples include Ciphers and Compressors\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTUwMw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695503", "bodyText": "Because this is a concurrent hash map instead of, say, a Guava Cache, I think this can potentially grow without bound (and therefore lead to memory leaks). I suppose that may not matter in the case of encryptors if there's only a small number of plausible algorithms in most use cases, so maybe it doesn't really matter.", "author": "alecgrieser", "createdAt": "2020-06-13T01:16:14Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNzc0Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441137746", "bodyText": "Any opinion on this?", "author": "alecgrieser", "createdAt": "2020-06-16T20:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MzcwNA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441743704", "bodyText": "Guava Cache is a bit slow for SerDe but I am flexible.  @alecgrieser let me know what you think is appropriate...", "author": "jleach4", "createdAt": "2020-06-17T18:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2OTU5MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441769591", "bodyText": "Hm, I see. I'm also willing to be flexible here, though I'm still a little concerned on a memory leak if there's a bug or something that results in too many keys being created. But if it makes a big difference on a hot path, that's fine, too.", "author": "alecgrieser", "createdAt": "2020-06-17T19:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex 86cb254d..ced789e4 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -20,14 +20,18 @@\n \n package com.apple.foundationdb.record.provider.common;\n \n+import com.apple.foundationdb.annotation.API;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.function.Function;\n \n-/** MappedPool Class Attempts to reuse objects organized by keys.\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n  *\n  *  Examples include Ciphers and Compressors\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk4Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439695983", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *", "author": "alecgrieser", "createdAt": "2020-06-13T01:21:17Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;\n+    private final MappedPoolProvider<K,V,E> mappedPoolProvider;\n+\n+    public MappedPool(MappedPoolProvider<K,V,E> mappedPoolProvider) {\n+        pool = new ConcurrentHashMap<>();\n+        this.mappedPoolProvider = mappedPoolProvider;\n+    }\n+\n+    public V poll(K key) throws E {\n+        Queue<V> queue = pool.computeIfAbsent(key, createQueue);\n+        V next = queue.poll();\n+        return next == null ? mappedPoolProvider.get(key) : next;\n+    }\n+\n+    public boolean offer(K key, V value) {\n+        Queue<V> queue = pool.get(key);\n+        if (queue != null) {\n+            return queue.offer(value);\n+        }\n+        return false;\n+    }\n+\n+    public List<K> getKeys() {\n+        return Collections.list(pool.keys());\n+    }\n+\n+    /**\n+     *\n+     * Warning, not a constant time operation.\n+     *\n+     * @param key key\n+     * @return size of pool\n+     */\n+    public int getPoolSize(K key) {\n+        Queue<V> queue = pool.get(key);\n+        return queue == null ? 0 : queue.size();\n+    }\n+\n+    /**\n+     *", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex 86cb254d..ced789e4 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -20,14 +20,18 @@\n \n package com.apple.foundationdb.record.provider.common;\n \n+import com.apple.foundationdb.annotation.API;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.function.Function;\n \n-/** MappedPool Class Attempts to reuse objects organized by keys.\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n  *\n  *  Examples include Ciphers and Compressors\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjQ0MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439696441", "bodyText": "Would it be preferable to use an ArrayBlockingQueue to avoid the garbage from objects created to maintain the linked list?", "author": "alecgrieser", "createdAt": "2020-06-13T01:26:33Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MDUyMw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440370523", "bodyText": "Sure..", "author": "jleach4", "createdAt": "2020-06-15T18:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex 86cb254d..ced789e4 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -20,14 +20,18 @@\n \n package com.apple.foundationdb.record.provider.common;\n \n+import com.apple.foundationdb.annotation.API;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.function.Function;\n \n-/** MappedPool Class Attempts to reuse objects organized by keys.\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n  *\n  *  Examples include Ciphers and Compressors\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjYxNA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439696614", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Tests of the MappedPool.\n          \n          \n            \n            /**\n          \n          \n            \n             * Tests of the {@link MappedPool}.", "author": "alecgrieser", "createdAt": "2020-06-13T01:28:23Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2ODQ5OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441768499", "bodyText": "Looks like this is still outstanding.", "author": "alecgrieser", "createdAt": "2020-06-17T19:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMzUyMA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r442403520", "bodyText": "Okay, looks like this just still needs to be cleaned up.", "author": "alecgrieser", "createdAt": "2020-06-18T17:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 2f384c86..830da18a 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -38,8 +38,13 @@ public class MappedPoolTest {\n \n     @Test\n     public void testCipherPool() throws Exception {\n-        for (int i = 0; i < 100000; i++) {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n             Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n             assertNotNull(cipher);\n             assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjY1Mg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439696652", "bodyText": "Ideally, these references to 64 would reference a constant, I suppose", "author": "alecgrieser", "createdAt": "2020-06-13T01:29:01Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        for (int i = 0; i < 100000; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);\n+        assertTrue(MAPPED_POOL.getKeys().contains(CIPHER));\n+    }\n+\n+    @Test\n+    public void testMaxPoolSize() throws Exception {\n+        Cipher[] ciphers = new Cipher[1000];\n+        for (int i = 0; i < 1000; i++) {\n+            ciphers[i] = MAPPED_POOL.poll(CIPHER);\n+        }\n+        for (int i = 0; i < 64; i++) {", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 2f384c86..830da18a 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -38,8 +38,13 @@ public class MappedPoolTest {\n \n     @Test\n     public void testCipherPool() throws Exception {\n-        for (int i = 0; i < 100000; i++) {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n             Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n             assertNotNull(cipher);\n             assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjY4MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439696681", "bodyText": "Is this not a constant-time operation because LinkedBlockingQueue::size is O(n)?", "author": "alecgrieser", "createdAt": "2020-06-13T01:29:23Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;\n+    private final MappedPoolProvider<K,V,E> mappedPoolProvider;\n+\n+    public MappedPool(MappedPoolProvider<K,V,E> mappedPoolProvider) {\n+        pool = new ConcurrentHashMap<>();\n+        this.mappedPoolProvider = mappedPoolProvider;\n+    }\n+\n+    public V poll(K key) throws E {\n+        Queue<V> queue = pool.computeIfAbsent(key, createQueue);\n+        V next = queue.poll();\n+        return next == null ? mappedPoolProvider.get(key) : next;\n+    }\n+\n+    public boolean offer(K key, V value) {\n+        Queue<V> queue = pool.get(key);\n+        if (queue != null) {\n+            return queue.offer(value);\n+        }\n+        return false;\n+    }\n+\n+    public List<K> getKeys() {\n+        return Collections.list(pool.keys());\n+    }\n+\n+    /**\n+     *\n+     * Warning, not a constant time operation.", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MjAyNA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440372024", "bodyText": "That was based on a concurrent queue before.  Changing.", "author": "jleach4", "createdAt": "2020-06-15T18:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex 86cb254d..ced789e4 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -20,14 +20,18 @@\n \n package com.apple.foundationdb.record.provider.common;\n \n+import com.apple.foundationdb.annotation.API;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.function.Function;\n \n-/** MappedPool Class Attempts to reuse objects organized by keys.\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n  *\n  *  Examples include Ciphers and Compressors\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzAyMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439747022", "bodyText": "I think we saw problems from this computeIfAbsent locking bug (fixed in Java 9): https://bugs.openjdk.java.net/browse/JDK-8161372\nGiven that 2.9 requires a Java 11 runtime and we want to encourage people to switch to Java 11, it's possible this doesn't matter, but there was also a recent effort to remove some computeIfAbsent calls for now.", "author": "alecgrieser", "createdAt": "2020-06-13T15:26:21Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);\n+    protected final ConcurrentHashMap<K, Queue<V>> pool;\n+    private final MappedPoolProvider<K,V,E> mappedPoolProvider;\n+\n+    public MappedPool(MappedPoolProvider<K,V,E> mappedPoolProvider) {\n+        pool = new ConcurrentHashMap<>();\n+        this.mappedPoolProvider = mappedPoolProvider;\n+    }\n+\n+    public V poll(K key) throws E {\n+        Queue<V> queue = pool.computeIfAbsent(key, createQueue);", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMDA4OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440320089", "bodyText": "I recently added MapUtil.computeIfAbsent() to help with this problem.", "author": "scgray", "createdAt": "2020-06-15T17:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4Mzk0NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440983944", "bodyText": "Fixing..", "author": "jleach4", "createdAt": "2020-06-16T16:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex 86cb254d..ced789e4 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -20,14 +20,18 @@\n \n package com.apple.foundationdb.record.provider.common;\n \n+import com.apple.foundationdb.annotation.API;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.function.Function;\n \n-/** MappedPool Class Attempts to reuse objects organized by keys.\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n  *\n  *  Examples include Ciphers and Compressors\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzE5OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439747199", "bodyText": "Is there some weird pessimal case here where this actually makes things worse? In particular, I'm trying to think if there are some use cases where this, like, turns an average object from something that generally lives in the \"short lived\" JVM memory to something that graduates to the older generation before being dereferenced. Maybe something where, like, there are \"bursts\" of activity to the thing being cached? I'm not sure, though.", "author": "alecgrieser", "createdAt": "2020-06-13T15:29:21Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.function.Function;\n+\n+/** MappedPool Class Attempts to reuse objects organized by keys.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new LinkedBlockingQueue<>(DEFAULT_POOL_SIZE);", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex 86cb254d..ced789e4 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -20,14 +20,18 @@\n \n package com.apple.foundationdb.record.provider.common;\n \n+import com.apple.foundationdb.annotation.API;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.function.Function;\n \n-/** MappedPool Class Attempts to reuse objects organized by keys.\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n  *\n  *  Examples include Ciphers and Compressors\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzUwMw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439747503", "bodyText": "I'm not sure I see the utility here, in this test, of performing the operation 100000 times", "author": "alecgrieser", "createdAt": "2020-06-13T15:34:26Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        for (int i = 0; i < 100000; i++) {", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 2f384c86..830da18a 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -38,8 +38,13 @@ public class MappedPoolTest {\n \n     @Test\n     public void testCipherPool() throws Exception {\n-        for (int i = 0; i < 100000; i++) {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n             Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n             assertNotNull(cipher);\n             assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzUzNg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r439747536", "bodyText": "It seems like this test (or another) should test that the returned cipher is the same (i.e., pointer equal) to one previously offered (using the assertSame assertion).", "author": "alecgrieser", "createdAt": "2020-06-13T15:35:04Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        for (int i = 0; i < 100000; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));", "originalCommit": "72b85dadd12d899208aec6c9f1753076f756dbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMDIzMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440430232", "bodyText": "I think the change to have it check the lastCipher was aiming to do that, so it's possible that this is resolved (or almost resolved).", "author": "alecgrieser", "createdAt": "2020-06-15T20:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 2f384c86..830da18a 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -38,8 +38,13 @@ public class MappedPoolTest {\n \n     @Test\n     public void testCipherPool() throws Exception {\n-        for (int i = 0; i < 100000; i++) {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n             Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n             assertNotNull(cipher);\n             assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n         }\n"}}, {"oid": "deb6a32683f907b55a210a0f4440e8357e4405ee", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/deb6a32683f907b55a210a0f4440e8357e4405ee", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-15T18:46:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzM3MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440427371", "bodyText": "Is there some weird pessimal case here where this actually makes things worse? In particular, I'm trying to think if there are some use cases where this, like, turns an average object from something that generally lives in the \"short lived\" JVM memory to something that graduates to the older generation before being dereferenced. Maybe something where, like, there are \"bursts\" of activity to the thing being cached? I'm not sure, though.\n(This was commented on an earlier version of the code, but I'm copying it here to avoid having the comment linger on outdated code.)", "author": "alecgrieser", "createdAt": "2020-06-15T20:27:19Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * MappedPool.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import com.apple.foundationdb.annotation.API;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * MappedPool Class Attempts to reuse objects organized by keys.\n+ * This class can be used for objects that require thread safety but our expensive to create.\n+ *\n+ *  Examples include Ciphers and Compressors\n+ *\n+ * @param <K> key\n+ * @param <V> value type to be pooled\n+ * @param <E> exception that can be throw, must extend Exception\n+ */\n+@API(API.Status.EXPERIMENTAL)\n+public class MappedPool<K, V, E extends Exception> {\n+    protected static final int DEFAULT_POOL_SIZE = 64;\n+    protected final Function<K, Queue<V>> createQueue = k -> new ArrayBlockingQueue<>(DEFAULT_POOL_SIZE);", "originalCommit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4OTI3MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440989270", "bodyText": "There are definitely pessimistic cases where this structure is not beneficial (cheap objects, cache coherency).  I do think this is a structure that is good to have in the toolkit for non-thread safe objects that are expensive to repetitively create.", "author": "jleach4", "createdAt": "2020-06-16T16:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MzM0Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440993347", "bodyText": "I was more trying to think if even for the more expensive objects that this is designed for, if certain use patterns wind up causing objects to live longer and therefore make garbage collection more expensive (even if the total number of object creations go down). I...think there are contrived use cases where that can be the case, but I'm not sure exactly how contrived (or if I'm right that those exist in general).", "author": "alecgrieser", "createdAt": "2020-06-16T16:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MjUwMA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441082500", "bodyText": "@alecgrieser What is the ask?", "author": "jleach4", "createdAt": "2020-06-16T19:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNzg2Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441107867", "bodyText": "I'm not sure there's a concrete ask, here, so much as I just wanted to make sure that we've considered all the implications here of this change. Do you agree/disagree with my analysis? Or maybe does this need to be configurable (either queue size or usage in the serializer) if it may (but also may not) cause problems?", "author": "alecgrieser", "createdAt": "2020-06-16T20:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTM2Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441119363", "bodyText": "@alecgrieser I understand G1 collection mechanisms and your analysis based on these concerns.  Since the Cypher sits in the Serde mechanism and the read your writes model hammers that portion (save and load record), I have considered your point.  I went ahead and added a constructor where you can supply the queue size.  I am less excited about a turn off or on configuration model (simply put, I would rather just reject the commit due to garbage collection \"concerns\").", "author": "jleach4", "createdAt": "2020-06-16T20:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNTA1MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441135051", "bodyText": "Okay, I see. That sounds fine, and I guess tweaking/tuning this is perhaps something we can look more into in the future. I don't think garbage collection concerns (to the extent that they are real and that this doesn't just make object creation better) aren't enough to reject the commit.", "author": "alecgrieser", "createdAt": "2020-06-16T20:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6dbe9dc502f0aa52442a504952a3d9e417e7746e", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\nindex ced789e4..dcf38589 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/common/MappedPool.java\n\n@@ -21,6 +21,7 @@\n package com.apple.foundationdb.record.provider.common;\n \n import com.apple.foundationdb.annotation.API;\n+import com.apple.foundationdb.record.util.MapUtils;\n \n import java.util.Collections;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzkwMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440427902", "bodyText": "This should either use assertEquals or assertSame.", "author": "alecgrieser", "createdAt": "2020-06-15T20:28:18Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));", "originalCommit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dbe9dc502f0aa52442a504952a3d9e417e7746e", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 830da18a..0020678c 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -24,10 +24,14 @@ import org.junit.jupiter.api.Test;\n import javax.crypto.Cipher;\n import java.security.GeneralSecurityException;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+\n /** Tests of the MappedPool.\n  *\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyODAzMQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440428031", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);\n          \n          \n            \n                    assertEquals(1, MAPPED_POOL.getPoolSize(CIPHER));\n          \n      \n    \n    \n  \n\n(This will also need to import assertEquals, so this change itself won't compile.)", "author": "alecgrieser", "createdAt": "2020-06-15T20:28:32Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);", "originalCommit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dbe9dc502f0aa52442a504952a3d9e417e7746e", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 830da18a..0020678c 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -24,10 +24,14 @@ import org.junit.jupiter.api.Test;\n import javax.crypto.Cipher;\n import java.security.GeneralSecurityException;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+\n /** Tests of the MappedPool.\n  *\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyOTY3Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440429673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(MAPPED_POOL.getKeys().contains(CIPHER));\n          \n          \n            \n                    assertThat(MAPPED_POOL.getKeys(), hasItem(CIPHER));\n          \n      \n    \n    \n  \n\nThis will need to import assertThat and Matchers.hasItem", "author": "alecgrieser", "createdAt": "2020-06-15T20:31:47Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);\n+        assertTrue(MAPPED_POOL.getKeys().contains(CIPHER));", "originalCommit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dbe9dc502f0aa52442a504952a3d9e417e7746e", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 830da18a..0020678c 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -24,10 +24,14 @@ import org.junit.jupiter.api.Test;\n import javax.crypto.Cipher;\n import java.security.GeneralSecurityException;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+\n /** Tests of the MappedPool.\n  *\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyOTg0Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r440429847", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 64);\n          \n          \n            \n                    assertEquals(64, MAPPED_POOL.getPoolSize(CIPHER));", "author": "alecgrieser", "createdAt": "2020-06-15T20:32:08Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertTrue(cipher.equals(lastCipher));\n+                lastCipher = cipher;\n+            }\n+            assertNotNull(cipher);\n+            assertTrue(MAPPED_POOL.offer(CIPHER, cipher));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 1);\n+        assertTrue(MAPPED_POOL.getKeys().contains(CIPHER));\n+    }\n+\n+    @Test\n+    public void testMaxPoolSize() throws Exception {\n+        Cipher[] ciphers = new Cipher[1000];\n+        for (int i = 0; i < 1000; i++) {\n+            ciphers[i] = MAPPED_POOL.poll(CIPHER);\n+        }\n+        for (int i = 0; i < 64; i++) {\n+            assertTrue(MAPPED_POOL.offer(CIPHER, ciphers[i]));\n+        }\n+        for (int i = 64; i < 1000; i++) {\n+            assertFalse(MAPPED_POOL.offer(CIPHER, ciphers[i]));\n+        }\n+        assertTrue(MAPPED_POOL.getPoolSize(CIPHER) == 64);", "originalCommit": "deb6a32683f907b55a210a0f4440e8357e4405ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dbe9dc502f0aa52442a504952a3d9e417e7746e", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 830da18a..0020678c 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -24,10 +24,14 @@ import org.junit.jupiter.api.Test;\n import javax.crypto.Cipher;\n import java.security.GeneralSecurityException;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+\n /** Tests of the MappedPool.\n  *\n  */\n"}}, {"oid": "6dbe9dc502f0aa52442a504952a3d9e417e7746e", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/6dbe9dc502f0aa52442a504952a3d9e417e7746e", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-16T16:49:23Z", "type": "forcePushed"}, {"oid": "df14c33a8e77c00d5f519761a7713401f63062aa", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/df14c33a8e77c00d5f519761a7713401f63062aa", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-16T20:15:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzODA4OA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/963#discussion_r441138088", "bodyText": "This feels more like assertSame to me than assertEquals, but it's possible those are the same on Ciphers.", "author": "alecgrieser", "createdAt": "2020-06-16T20:58:28Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * MappedPoolTests.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.provider.common;\n+\n+import org.junit.jupiter.api.Test;\n+import javax.crypto.Cipher;\n+import java.security.GeneralSecurityException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/** Tests of the MappedPool.\n+ *\n+ */\n+public class MappedPoolTest {\n+\n+    public static String CIPHER = \"DES/ECB/PKCS5Padding\";\n+    public static MappedPool<String, Cipher, GeneralSecurityException> MAPPED_POOL = new MappedPool<>(Cipher::getInstance);\n+\n+    @Test\n+    public void testCipherPool() throws Exception {\n+        Cipher lastCipher = null;\n+        for (int i = 0; i < 100; i++) {\n+            Cipher cipher = MAPPED_POOL.poll(CIPHER);\n+            if (lastCipher != null) {\n+                assertEquals(cipher, lastCipher);", "originalCommit": "df14c33a8e77c00d5f519761a7713401f63062aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8768c99bf79adc299bc1335809c82979b040df0a", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\nindex 0020678c..8b878a1c 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\n@@ -29,6 +29,7 @@ import static org.hamcrest.Matchers.hasItem;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n \n"}}, {"oid": "8768c99bf79adc299bc1335809c82979b040df0a", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/8768c99bf79adc299bc1335809c82979b040df0a", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-17T18:31:33Z", "type": "forcePushed"}, {"oid": "ad28e6b93e115a79e40732ba3095bef46e5a11e6", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/ad28e6b93e115a79e40732ba3095bef46e5a11e6", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-17T20:00:25Z", "type": "forcePushed"}, {"oid": "f6b71ad44659424b1e6db13f2e2638b6c12f527d", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/f6b71ad44659424b1e6db13f2e2638b6c12f527d", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-17T20:06:37Z", "type": "forcePushed"}, {"oid": "ad28e6b93e115a79e40732ba3095bef46e5a11e6", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/ad28e6b93e115a79e40732ba3095bef46e5a11e6", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-17T20:00:25Z", "type": "forcePushed"}, {"oid": "3be139d26a7782cf672677097450f5187199790a", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/3be139d26a7782cf672677097450f5187199790a", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-18T17:20:36Z", "type": "commit"}, {"oid": "3be139d26a7782cf672677097450f5187199790a", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/3be139d26a7782cf672677097450f5187199790a", "message": "Fixes #962: Reuse Ciphers vs. creating them new each time...", "committedDate": "2020-06-18T17:20:36Z", "type": "forcePushed"}, {"oid": "52084f31973d5feb061b4664cc069d4f40a4ac73", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/52084f31973d5feb061b4664cc069d4f40a4ac73", "message": "Update fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/common/MappedPoolTest.java\n\nCo-authored-by: Alec Grieser <alloc@apple.com>", "committedDate": "2020-06-18T21:06:57Z", "type": "commit"}]}