{"pr_number": 1001, "pr_title": "Resolves #1000: Some filters can be performed with covering index \u2026", "pr_createdAt": "2020-07-22T21:47:49Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/1001", "timeline": [{"oid": "22d596cb7fdcdefe5c2134399fc1272067392626", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/22d596cb7fdcdefe5c2134399fc1272067392626", "message": "Adjust QueryToKeyMatcher to handle QueryableKeyExpression", "committedDate": "2020-07-23T16:24:54Z", "type": "forcePushed"}, {"oid": "8e60f90992ba53a73264c7d99660cf04f7931e56", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/8e60f90992ba53a73264c7d99660cf04f7931e56", "message": "Adjust QueryToKeyMatcher to handle QueryableKeyExpression", "committedDate": "2020-07-23T16:46:39Z", "type": "forcePushed"}, {"oid": "922fe9a0db691901824a81016af42ee9649a73c7", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/922fe9a0db691901824a81016af42ee9649a73c7", "message": "Adjust QueryToKeyMatcher to handle QueryableKeyExpression", "committedDate": "2020-07-23T17:08:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwOTYwNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1001#discussion_r459609605", "bodyText": "A text index, in particular, does not have the actual indexed text in the entry.", "author": "MMcM", "createdAt": "2020-07-23T17:24:48Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -1351,27 +1355,44 @@ private QueryComponent normalizeAndOrForInAsOr(@Nonnull QueryComponent component\n     }\n \n     @Nonnull\n+    @SuppressWarnings(\"PMD.CompareObjectsWithEquals\")\n     private RecordQueryPlan tryToConvertToCoveringPlan(@Nonnull PlanContext planContext, @Nonnull RecordQueryPlan chosenPlan) {\n         if (chosenPlan instanceof RecordQueryPlanWithIndex) {\n             // Check if the index scan covers, then convert it to a covering plan.\n-            return tryToConvertToCoveringPlan(planContext, (RecordQueryPlanWithIndex) chosenPlan);\n+            return tryToConvertToCoveringPlan(planContext, (RecordQueryPlanWithIndex) chosenPlan, null);\n         } else if (chosenPlan instanceof RecordQueryUnorderedPrimaryKeyDistinctPlan) {\n             // If possible, push down the covering index transformation so that\n             // it happens before checking for distinct primary keys\n             final RecordQueryUnorderedPrimaryKeyDistinctPlan distinctPlan = (RecordQueryUnorderedPrimaryKeyDistinctPlan) chosenPlan;\n             if (distinctPlan.getChild() instanceof RecordQueryPlanWithIndex) {\n-                final RecordQueryPlan newChildPlan = tryToConvertToCoveringPlan(planContext, (RecordQueryPlanWithIndex) distinctPlan.getChild());\n+                final RecordQueryPlan newChildPlan = tryToConvertToCoveringPlan(planContext, (RecordQueryPlanWithIndex) distinctPlan.getChild(), null);\n                 if (newChildPlan != distinctPlan.getChild()) {\n                     return new RecordQueryUnorderedPrimaryKeyDistinctPlan(newChildPlan);\n                 }\n             }\n+        } else if (chosenPlan instanceof RecordQueryFilterPlan) {\n+            final RecordQueryFilterPlan filterPlan = (RecordQueryFilterPlan)chosenPlan;\n+            if (filterPlan.getChild() instanceof RecordQueryPlanWithIndex) {\n+                final RecordQueryPlanWithIndex filteredIndexPlan = (RecordQueryPlanWithIndex) filterPlan.getChild();\n+                final Index index = metaData.getIndex(filteredIndexPlan.getIndexName());\n+                if (indexTypes.getValueTypes().contains(index.getType())) {", "originalCommit": "922fe9a0db691901824a81016af42ee9649a73c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NjI5Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1001#discussion_r462646297", "bodyText": "This is a great point. I think it's worth adding it as a comment here in case someone forgets this in the future.", "author": "nschiefer", "createdAt": "2020-07-29T23:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwOTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NDUyOA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1001#discussion_r462654528", "bodyText": "Added there.", "author": "MMcM", "createdAt": "2020-07-29T23:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwOTYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "05fe8770a5d0a7d9d766f5787268f7775865f3eb", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java\nindex e2d8e406..29e9b5e0 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java\n\n@@ -1355,44 +1349,27 @@ public class RecordQueryPlanner implements QueryPlanner {\n     }\n \n     @Nonnull\n-    @SuppressWarnings(\"PMD.CompareObjectsWithEquals\")\n     private RecordQueryPlan tryToConvertToCoveringPlan(@Nonnull PlanContext planContext, @Nonnull RecordQueryPlan chosenPlan) {\n         if (chosenPlan instanceof RecordQueryPlanWithIndex) {\n             // Check if the index scan covers, then convert it to a covering plan.\n-            return tryToConvertToCoveringPlan(planContext, (RecordQueryPlanWithIndex) chosenPlan, null);\n+            return tryToConvertToCoveringPlan(planContext, (RecordQueryPlanWithIndex) chosenPlan);\n         } else if (chosenPlan instanceof RecordQueryUnorderedPrimaryKeyDistinctPlan) {\n             // If possible, push down the covering index transformation so that\n             // it happens before checking for distinct primary keys\n             final RecordQueryUnorderedPrimaryKeyDistinctPlan distinctPlan = (RecordQueryUnorderedPrimaryKeyDistinctPlan) chosenPlan;\n             if (distinctPlan.getChild() instanceof RecordQueryPlanWithIndex) {\n-                final RecordQueryPlan newChildPlan = tryToConvertToCoveringPlan(planContext, (RecordQueryPlanWithIndex) distinctPlan.getChild(), null);\n+                final RecordQueryPlan newChildPlan = tryToConvertToCoveringPlan(planContext, (RecordQueryPlanWithIndex) distinctPlan.getChild());\n                 if (newChildPlan != distinctPlan.getChild()) {\n                     return new RecordQueryUnorderedPrimaryKeyDistinctPlan(newChildPlan);\n                 }\n             }\n-        } else if (chosenPlan instanceof RecordQueryFilterPlan) {\n-            final RecordQueryFilterPlan filterPlan = (RecordQueryFilterPlan)chosenPlan;\n-            if (filterPlan.getChild() instanceof RecordQueryPlanWithIndex) {\n-                final RecordQueryPlanWithIndex filteredIndexPlan = (RecordQueryPlanWithIndex) filterPlan.getChild();\n-                final Index index = metaData.getIndex(filteredIndexPlan.getIndexName());\n-                if (indexTypes.getValueTypes().contains(index.getType())) {\n-                    final QueryComponent filter = filterPlan.getFilter();\n-                    final Set<KeyExpression> filterFields = new HashSet<>();\n-                    if (findFilterCoveredFields(filter, filterFields)) {\n-                        final RecordQueryPlan newChildPlan = tryToConvertToCoveringPlan(planContext, filteredIndexPlan, filterFields);\n-                        if (newChildPlan != filteredIndexPlan) {\n-                            return new RecordQueryFilterPlan(newChildPlan, filter);\n-                        }\n-                    }\n-                }\n-            }\n         }\n         // No valid transformations could be applied. Just return the original plan.\n         return chosenPlan;\n     }\n \n     @Nonnull\n-    private RecordQueryPlan tryToConvertToCoveringPlan(@Nonnull PlanContext context, @Nonnull RecordQueryPlanWithIndex chosenPlan, @Nullable Set<KeyExpression> filterFields) {\n+    private RecordQueryPlan tryToConvertToCoveringPlan(@Nonnull PlanContext context, @Nonnull RecordQueryPlanWithIndex chosenPlan) {\n         if (context.query.getRequiredResults() == null) {\n             // This should already be true when calling, but as a safety precaution, check here anyway.\n             return chosenPlan;\n"}}, {"oid": "53e2a09be9c53b368f4fa991936cc93053628a21", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/53e2a09be9c53b368f4fa991936cc93053628a21", "message": "Adjust QueryToKeyMatcher to handle QueryableKeyExpression", "committedDate": "2020-07-28T21:59:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0ODU0OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1001#discussion_r462648549", "bodyText": "I think that this part here only works because findFilterCoveredFields() ignored nested repeated fields entirely. That's fine with me, but I think it needs a comment to that effect or someone might mess this up later.", "author": "nschiefer", "createdAt": "2020-07-29T23:34:02Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -1384,6 +1405,11 @@ private RecordQueryPlan tryToConvertToCoveringPlan(@Nonnull PlanContext context,\n         for (KeyExpression resultField : context.query.getRequiredResults()) {\n             resultFields.addAll(resultField.normalizeKeyForPositions());\n         }\n+        if (filterFields != null) {\n+            for (KeyExpression filterField : filterFields) {\n+                resultFields.addAll(filterField.normalizeKeyForPositions());", "originalCommit": "53e2a09be9c53b368f4fa991936cc93053628a21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NDQ4NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1001#discussion_r462654485", "bodyText": "I put the comment on findFilterCoveredFields; I think I captured the essence of the tricky cases.", "author": "MMcM", "createdAt": "2020-07-29T23:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0ODU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "05fe8770a5d0a7d9d766f5787268f7775865f3eb", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java\nindex eac1f09a..29e9b5e0 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java\n\n@@ -1405,11 +1384,6 @@ public class RecordQueryPlanner implements QueryPlanner {\n         for (KeyExpression resultField : context.query.getRequiredResults()) {\n             resultFields.addAll(resultField.normalizeKeyForPositions());\n         }\n-        if (filterFields != null) {\n-            for (KeyExpression filterField : filterFields) {\n-                resultFields.addAll(filterField.normalizeKeyForPositions());\n-            }\n-        }\n         final KeyExpression rootExpression = index.getRootExpression();\n         final List<KeyExpression> normalizedKeys = rootExpression.normalizeKeyForPositions();\n         final List<KeyExpression> keyFields;\n"}}, {"oid": "05fe8770a5d0a7d9d766f5787268f7775865f3eb", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/05fe8770a5d0a7d9d766f5787268f7775865f3eb", "message": "Allow FunctionKeyExpression Builder to be in any package", "committedDate": "2020-07-29T23:41:26Z", "type": "commit"}, {"oid": "c965e6c87271aef8c351430f1127a9d1e85645b2", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/c965e6c87271aef8c351430f1127a9d1e85645b2", "message": "Resolves #1000: Some filters can be performed with covering index scan's partial record.\nAttempt to match the key expressions corresponding to the filter component to the index entry.", "committedDate": "2020-07-29T23:41:26Z", "type": "commit"}, {"oid": "8fe7e570b9d6c56db7600472ff334de278f86b87", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/8fe7e570b9d6c56db7600472ff334de278f86b87", "message": "Adjust QueryToKeyMatcher to handle QueryableKeyExpression", "committedDate": "2020-07-29T23:41:26Z", "type": "commit"}, {"oid": "9f81fb9b2b862e582f5c1c35b924d2bbbfaebc23", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/9f81fb9b2b862e582f5c1c35b924d2bbbfaebc23", "message": "Some comments about delicate aspects of these transformations", "committedDate": "2020-07-29T23:52:27Z", "type": "commit"}, {"oid": "9f81fb9b2b862e582f5c1c35b924d2bbbfaebc23", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/9f81fb9b2b862e582f5c1c35b924d2bbbfaebc23", "message": "Some comments about delicate aspects of these transformations", "committedDate": "2020-07-29T23:52:27Z", "type": "forcePushed"}]}