{"pr_number": 865, "pr_title": "Resolves #864: KeySpacePath resolution should re-use the initiating transaction's read version", "pr_createdAt": "2020-03-24T01:29:17Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/865", "timeline": [{"oid": "58a729ad568a1d7591fd922149095578b15eb56d", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/58a729ad568a1d7591fd922149095578b15eb56d", "message": "Resolves #864: KeySpacePath resolution should re-use the initiating transaction's read version\n\nThis adds overloads to `LocatableResolver::resolve` that allow a transaction to be passed, and then the resolver uses that transaction's read version when performing reads from the directory layer. In the \"usual case\" (which should be when a new entry does not need to be created), this transaction won't be committed anyway, so the only loss in efficiency over using the transaction itself is some extra memory (and no extra network requests).\n\nIt would probably still be a good idea to do #853 (if we can figure out what we want to do about caching), but this is easier and gets us 99% of the benefit. That being said, there is more cognitive load needed to understand this API, which is perhaps a smell.", "committedDate": "2020-03-24T01:28:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NDU2NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/865#discussion_r396854565", "bodyText": "If we wanted to also set the max attempts, we could do that here", "author": "alecgrieser", "createdAt": "2020-03-24T01:31:24Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/LocatableResolver.java", "diffHunk": "@@ -113,71 +116,194 @@ public FDBDatabase getDatabase() {\n         );\n     }\n \n+    @Nonnull\n+    private <T> CompletableFuture<T> runAsyncBorrowingReadVersion(@Nonnull FDBRecordContext parentContext, @Nonnull Function<FDBRecordContext, CompletableFuture<T>> retriable) {\n+        final FDBDatabaseRunner runner = parentContext.newRunner();", "originalCommit": "58a729ad568a1d7591fd922149095578b15eb56d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "823271ffd37b93ca3a710f49bd2af5a95b2ca273", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/LocatableResolver.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/LocatableResolver.java\nindex 3ddaaa36..2705c0cc 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/LocatableResolver.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/LocatableResolver.java\n\n@@ -150,6 +150,23 @@ public abstract class LocatableResolver {\n         }\n     }\n \n+    /**\n+     * Map the String <code>name</code> to a Long within the scope of the path that this object was constructed with.\n+     * Will return the value that's persisted in FDB or create it if it does not exist.\n+     *\n+     * <p>\n+     * For an instrumented version of this method, see {@link #resolve(FDBStoreTimer, String)}.\n+     * </p>\n+     *\n+     * @param name the value to resolve\n+     * @return a future for the resolved Long value\n+     * @see #resolve(FDBStoreTimer, String)\n+     */\n+    @Nonnull\n+    public CompletableFuture<Long> resolve(@Nonnull String name) {\n+        return resolve((FDBStoreTimer)null, name, ResolverCreateHooks.getDefault());\n+    }\n+\n     /**\n      * Map the String <code>name</code> to a Long within the scope of the path that this object was constructed with.\n      * Will return the value that's persisted in FDB or create it if it does not exist.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NTM0Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/865#discussion_r397465346", "bodyText": "Perhaps these tests could be improved by yet another overload that only took the key and did the null itself.", "author": "MMcM", "createdAt": "2020-03-24T21:14:50Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/ExtendedDirectoryLayerTest.java", "diffHunk": "@@ -99,12 +99,12 @@ private static void testReadCompatible(LocatableResolver writer, LocatableResolv\n         Map<String, Long> allocations = new HashMap<>();\n         for (int i = 0; i < 50; i++) {\n             String key = \"key-\" + i;\n-            Long value = writer.resolve(null, key).join();\n+            Long value = writer.resolve((FDBStoreTimer)null, key).join();", "originalCommit": "58a729ad568a1d7591fd922149095578b15eb56d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjIxMw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/865#discussion_r398232213", "bodyText": "Yeah, though it's a little weird that the optional parameter is the first (rather than the last).", "author": "alecgrieser", "createdAt": "2020-03-25T23:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NTM0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjg0MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/865#discussion_r398232841", "bodyText": "I added this as a separate commit with this PR, for size", "author": "alecgrieser", "createdAt": "2020-03-25T23:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NTM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "823271ffd37b93ca3a710f49bd2af5a95b2ca273", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/ExtendedDirectoryLayerTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/ExtendedDirectoryLayerTest.java\nindex fedb82ff..8b16b995 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/ExtendedDirectoryLayerTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/keyspace/ExtendedDirectoryLayerTest.java\n\n@@ -99,12 +99,12 @@ class ExtendedDirectoryLayerTest extends LocatableResolverTest {\n         Map<String, Long> allocations = new HashMap<>();\n         for (int i = 0; i < 50; i++) {\n             String key = \"key-\" + i;\n-            Long value = writer.resolve((FDBStoreTimer)null, key).join();\n+            Long value = writer.resolve(key).join();\n             allocations.put(key, value);\n         }\n \n         for (Map.Entry<String, Long> entry : allocations.entrySet()) {\n-            Long value = reader.resolve((FDBStoreTimer)null, entry.getKey()).join();\n+            Long value = reader.resolve(entry.getKey()).join();\n             String reverseLookup = reader.reverseLookup(null, entry.getValue()).join();\n             assertEquals(value, entry.getValue());\n             assertEquals(reverseLookup, entry.getKey());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NDQyOA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/865#discussion_r397884428", "bodyText": "Since the @VisibleForTesting doesn't really help when, say, your favorite IDE is autocompleting potential methods, maybe it would be a good idea to also name this method waitUntilReadyForTesting (unless we can restrict the use of methods tagged with this automatically?).", "author": "scgray", "createdAt": "2020-03-25T14:11:45Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBReverseDirectoryCache.java", "diffHunk": "@@ -371,6 +371,15 @@ public void rebuild(LocatableResolver scope) {\n         }\n     }\n \n+    /**\n+     * Wait for any asynchronous work started at object creation time to complete. This should only be\n+     * used for tests in order to avoid spurious conflicts.\n+     */\n+    @VisibleForTesting\n+    public void waitUntilReady() {", "originalCommit": "58a729ad568a1d7591fd922149095578b15eb56d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyMTI5Mg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/865#discussion_r398221292", "bodyText": "Done. It does seem, given that @VisibleForTesting is defined in guava, and that library is popular enough, that an IDE plugin that keeps you from using it outside of test packages could conceivably exist, though I'm not aware of one off hand.", "author": "alecgrieser", "createdAt": "2020-03-25T22:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NDQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "f205ca2a94971578dc98e1a5c74848467efd2d19", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBReverseDirectoryCache.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBReverseDirectoryCache.java\nindex 43fd9b3b..8887b710 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBReverseDirectoryCache.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBReverseDirectoryCache.java\n\n@@ -376,7 +376,7 @@ public class FDBReverseDirectoryCache {\n      * used for tests in order to avoid spurious conflicts.\n      */\n     @VisibleForTesting\n-    public void waitUntilReady() {\n+    public void waitUntilReadyForTesting() {\n         reverseDirectoryCacheEntry.join();\n     }\n \n"}}, {"oid": "f205ca2a94971578dc98e1a5c74848467efd2d19", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/f205ca2a94971578dc98e1a5c74848467efd2d19", "message": "rename a method to make it more obvious it is for testing", "committedDate": "2020-03-25T22:51:18Z", "type": "commit"}, {"oid": "823271ffd37b93ca3a710f49bd2af5a95b2ca273", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/823271ffd37b93ca3a710f49bd2af5a95b2ca273", "message": "add overloads for resolve that take neither a timer nor a context", "committedDate": "2020-03-25T23:26:31Z", "type": "commit"}]}