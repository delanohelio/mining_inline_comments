{"pr_number": 836, "pr_title": "Resolve #835: Expose bytes/records scanned through ExecuteState", "pr_createdAt": "2020-02-26T22:51:39Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/836", "timeline": [{"oid": "adfcd9f0727d68ffd060d4af56059cdca84e10ec", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/adfcd9f0727d68ffd060d4af56059cdca84e10ec", "message": "Resolve #835: Expose bytes/records scanned through ExecuteState\n\nThis includes some efforts to still allow for the use of the\n`NO_LIMITS` constant in fashion that should have little overhead\non execution performance.", "committedDate": "2020-03-02T18:58:37Z", "type": "forcePushed"}, {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/521abd354d421ea2a9dc9e39209494a6c75e19bf", "message": "Resolve #835: Expose bytes/records scanned through ExecuteState\n\nThis includes some efforts to still allow for the use of the\n`NO_LIMITS` constant in fashion that should have little overhead\non execution performance.", "committedDate": "2020-03-02T20:28:49Z", "type": "commit"}, {"oid": "521abd354d421ea2a9dc9e39209494a6c75e19bf", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/521abd354d421ea2a9dc9e39209494a6c75e19bf", "message": "Resolve #835: Expose bytes/records scanned through ExecuteState\n\nThis includes some efforts to still allow for the use of the\n`NO_LIMITS` constant in fashion that should have little overhead\non execution performance.", "committedDate": "2020-03-02T20:28:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MTY4NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387341684", "bodyText": "Is there a reason (other than backwards compatibility) to have Untracked extend ByteScanLimiter, rather than making ByteScanLimiter an interface with two implementations? I guess it saves us a virtual dispatch?", "author": "nschiefer", "createdAt": "2020-03-03T22:48:16Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java", "diffHunk": "@@ -76,8 +91,54 @@ public long getLimit() {\n         return originalLimit;\n     }\n \n+    /**\n+     * Returns the number of bytes that have been scanned thus far.\n+     *\n+     * @return the number of bytes that have been scanned\n+     */\n+    public long getBytesScanned() {\n+        return originalLimit - bytesRemaining.get();\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"ByteScanLimiter(%d limit, %d left)\", originalLimit, bytesRemaining.get());\n     }\n+\n+    /**\n+     * A non-tracking, non-enforcing limiter.\n+     */\n+    protected static class Untracked extends ByteScanLimiter {", "originalCommit": "521abd354d421ea2a9dc9e39209494a6c75e19bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1MTI3Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387751276", "bodyText": "There was.  it was mainly that the RecordScanLimiter was a public class that was marked as MAINTAINED so changing it to an interface is kind of a breaking change.  However, I have still gone ahead and done this change such that there are three distinct versions of the limiters (enforcing, tracking, and untracked) and that they are now produced from a factory.   I think this is safe because, despite having been marked as public and MAINTAINED, there was really no practical use for the RecordScanLimiter (that I could find) outside of the internals of record layer.", "author": "scgray", "createdAt": "2020-03-04T15:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MTY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3MjcwMA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387772700", "bodyText": "Because I was curious, I did some digging: https://stackoverflow.com/questions/23948009/whats-the-size-cost-of-java-inheritance.  If the interweebs are to be believed, then there is little to no cost overhead for method dispatch through an inheritance tree.", "author": "scgray", "createdAt": "2020-03-04T16:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MTY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "441d93643eeb80ff6eac99e0b733ab94764ef984", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java\nindex 1919f3c8..601e6f7a 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ByteScanLimiter.java\n\n@@ -87,58 +64,12 @@ public class ByteScanLimiter {\n      *\n      * @return the byte scan limit being enforced\n      */\n-    public long getLimit() {\n-        return originalLimit;\n-    }\n+    long getLimit();\n \n     /**\n      * Returns the number of bytes that have been scanned thus far.\n      *\n      * @return the number of bytes that have been scanned\n      */\n-    public long getBytesScanned() {\n-        return originalLimit - bytesRemaining.get();\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"ByteScanLimiter(%d limit, %d left)\", originalLimit, bytesRemaining.get());\n-    }\n-\n-    /**\n-     * A non-tracking, non-enforcing limiter.\n-     */\n-    protected static class Untracked extends ByteScanLimiter {\n-        public static final Untracked INSTANCE = new Untracked();\n-\n-        private Untracked() {\n-            super(UNLIMITED);\n-        }\n-\n-        @Nonnull\n-        @Override\n-        public ByteScanLimiter reset() {\n-            return this;\n-        }\n-\n-        @Override\n-        public boolean hasBytesRemaining() {\n-            return true;\n-        }\n-\n-        @Override\n-        public void registerScannedBytes(long bytes) {\n-            // IGNORED\n-        }\n-\n-        @Override\n-        public long getLimit() {\n-            return UNLIMITED;\n-        }\n-\n-        @Override\n-        public long getBytesScanned() {\n-            return 0L;\n-        }\n-    }\n+    long getBytesScanned();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjA3Mg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387342072", "bodyText": "We should deprecate this method and create a new one with Nonnull arguments.", "author": "nschiefer", "createdAt": "2020-03-03T22:49:13Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java", "diffHunk": "@@ -35,27 +35,35 @@\n  */\n @API(API.Status.MAINTAINED)\n public class ExecuteState {\n+\n     /**\n-     * An empty execute state with no record scan limit.\n-     * @deprecated in favor of NO_LIMITS when the byte scan limit was added\n+     * An execute state with no scan limits.\n      */\n-    @API(API.Status.DEPRECATED)\n-    @Deprecated\n-    public static final ExecuteState NO_SCANNED_RECORDS_LIMIT = new ExecuteState();\n+    public static final ExecuteState NO_LIMITS = new ExecuteState(RecordScanLimiter.Untracked.INSTANCE, ByteScanLimiter.Untracked.INSTANCE);\n \n     /**\n-     * An empty execute state with no record scan limit.\n+     * An empty execute state with no scan limits.\n+     * @deprecated in favor of NO_LIMITS when the byte scan limit was added\n      */\n-    public static final ExecuteState NO_LIMITS = new ExecuteState();\n+    @API(API.Status.DEPRECATED)\n+    @Deprecated\n+    public static final ExecuteState NO_SCANNED_RECORDS_LIMIT = NO_LIMITS;\n \n-    @Nullable\n+    @Nonnull\n     private final RecordScanLimiter recordScanLimiter;\n-    @Nullable\n+    @Nonnull\n     private final ByteScanLimiter byteScanLimiter;\n \n+    /**\n+     * Creates an execute state with a supplied set of resource limiters.\n+     * @param recordScanLimiter a record scan limiter or {@code null} to indicate an unlimited\n+     *     number of records may be scanned\n+     * @param byteScanLimiter a byte scan limiter or {@code null} to indicate an unlimited\n+     *     number of bytes may be scanned\n+     */\n     public ExecuteState(@Nullable RecordScanLimiter recordScanLimiter, @Nullable ByteScanLimiter byteScanLimiter) {", "originalCommit": "521abd354d421ea2a9dc9e39209494a6c75e19bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1MzY4MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387753681", "bodyText": "I can't really find an elegant want of doing this as the non-deprecated version would have the same signature :(", "author": "scgray", "createdAt": "2020-03-04T15:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NzA0Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387887046", "bodyText": "Oh no! Perhaps we should just change the API then? Or at least create an issue to do so in Record Layer 3?", "author": "nschiefer", "createdAt": "2020-03-04T19:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "441d93643eeb80ff6eac99e0b733ab94764ef984", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java\nindex 95457d4d..62e9ea1e 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ExecuteState.java\n\n@@ -39,7 +39,7 @@ public class ExecuteState {\n     /**\n      * An execute state with no scan limits.\n      */\n-    public static final ExecuteState NO_LIMITS = new ExecuteState(RecordScanLimiter.Untracked.INSTANCE, ByteScanLimiter.Untracked.INSTANCE);\n+    public static final ExecuteState NO_LIMITS = new ExecuteState(RecordScanLimiterFactory.untracked(), ByteScanLimiterFactory.untracked());\n \n     /**\n      * An empty execute state with no scan limits.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjI5MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387342291", "bodyText": "Same comments apply here.", "author": "nschiefer", "createdAt": "2020-03-03T22:49:48Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/RecordScanLimiter.java", "diffHunk": "@@ -67,9 +85,45 @@ public int getLimit() {\n         return originalLimit;\n     }\n \n+    /**\n+     * Returns the number of records that have been scanned thus far.\n+     *\n+     * @return the number of records that have been scanned\n+     */\n+    public int getRecordsScanned() {\n+        return originalLimit - allowedRecordScansRemaining.get();\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"RecordScanLimiter(%d limit, %d left)\", originalLimit, allowedRecordScansRemaining.get());\n     }\n+\n+    /**\n+     * A non-tracking, non-enforcing limiter.\n+     */\n+    protected static class Untracked extends RecordScanLimiter {", "originalCommit": "521abd354d421ea2a9dc9e39209494a6c75e19bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1Mzg0Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387753847", "bodyText": "Yep.", "author": "scgray", "createdAt": "2020-03-04T15:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "441d93643eeb80ff6eac99e0b733ab94764ef984", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/RecordScanLimiter.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/RecordScanLimiter.java\nindex c73b625c..5514b9f6 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/RecordScanLimiter.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/RecordScanLimiter.java\n\n@@ -81,49 +57,13 @@ public class RecordScanLimiter {\n      *\n      * @return the record scan limit being enforced\n      */\n-    public int getLimit() {\n-        return originalLimit;\n-    }\n+    int getLimit();\n \n     /**\n      * Returns the number of records that have been scanned thus far.\n      *\n      * @return the number of records that have been scanned\n      */\n-    public int getRecordsScanned() {\n-        return originalLimit - allowedRecordScansRemaining.get();\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"RecordScanLimiter(%d limit, %d left)\", originalLimit, allowedRecordScansRemaining.get());\n-    }\n-\n-    /**\n-     * A non-tracking, non-enforcing limiter.\n-     */\n-    protected static class Untracked extends RecordScanLimiter {\n-        public static final Untracked INSTANCE = new Untracked();\n-\n-        private Untracked() {\n-            super(UNLIMITED);\n-        }\n-\n-        @Nonnull\n-        @Override\n-        public RecordScanLimiter reset() {\n-            return this;\n-        }\n-\n-        @Override\n-        public boolean tryRecordScan() {\n-            return true;\n-        }\n-\n-        @Override\n-        public int getRecordsScanned() {\n-            return 0;\n-        }\n-    }\n+    int getRecordsScanned();\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjYxMw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387342613", "bodyText": "Perhaps these tests can make assertions about the # of bytes/records scanned to test the Unlimited limiters?", "author": "nschiefer", "createdAt": "2020-03-03T22:50:32Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/ExecutePropertiesTest.java", "diffHunk": "@@ -82,9 +81,9 @@ public void testSetLimitsFrom() {\n     public void testGetNoLimits() {\n         assertEquals(ExecuteProperties.UNLIMITED_TIME, ExecuteProperties.SERIAL_EXECUTE.getTimeLimit());\n         assertEquals(Integer.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getScannedRecordsLimit());\n-        assertNull(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter());\n+        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter().isUnlimited());\n         assertEquals(Long.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getScannedBytesLimit());\n-        assertNull(ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter());\n+        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter().isUnlimited());", "originalCommit": "521abd354d421ea2a9dc9e39209494a6c75e19bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NDM2MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/836#discussion_r387754360", "bodyText": "Excellent point. Added (and found a bug). Thanks!", "author": "scgray", "createdAt": "2020-03-04T15:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "441d93643eeb80ff6eac99e0b733ab94764ef984", "chunk": "diff --git a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/ExecutePropertiesTest.java b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/ExecutePropertiesTest.java\nindex 693b92d1..bacd696d 100644\n--- a/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/ExecutePropertiesTest.java\n+++ b/fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/ExecutePropertiesTest.java\n\n@@ -81,11 +81,18 @@ public class ExecutePropertiesTest {\n     public void testGetNoLimits() {\n         assertEquals(ExecuteProperties.UNLIMITED_TIME, ExecuteProperties.SERIAL_EXECUTE.getTimeLimit());\n         assertEquals(Integer.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getScannedRecordsLimit());\n-        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter().isUnlimited());\n+        assertFalse(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter().isEnforcing());\n         assertEquals(Long.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getScannedBytesLimit());\n-        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter().isUnlimited());\n+        assertFalse(ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter().isEnforcing());\n         assertEquals(Transaction.ROW_LIMIT_UNLIMITED, ExecuteProperties.SERIAL_EXECUTE.getReturnedRowLimit());\n         assertEquals(Integer.MAX_VALUE, ExecuteProperties.SERIAL_EXECUTE.getReturnedRowLimitOrMax());\n+\n+        // Ensure that these these constant ExecuteProperties do not do any scan tracking (this would be\n+        // confusing to do as they may be shared across many requests).\n+        assertTrue(ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter().tryRecordScan());\n+        assertEquals(0, ExecuteProperties.SERIAL_EXECUTE.getState().getRecordScanLimiter().getRecordsScanned());\n+        ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter().registerScannedBytes(100L);\n+        assertEquals(0, ExecuteProperties.SERIAL_EXECUTE.getState().getByteScanLimiter().getBytesScanned());\n     }\n \n     /**\n"}}, {"oid": "441d93643eeb80ff6eac99e0b733ab94764ef984", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/441d93643eeb80ff6eac99e0b733ab94764ef984", "message": "Respond to comments from Nicholas", "committedDate": "2020-03-04T16:05:58Z", "type": "forcePushed"}, {"oid": "9c754f05a4493e01f311621509c35c1de54f035e", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/9c754f05a4493e01f311621509c35c1de54f035e", "message": "Respond to comments from Nicholas", "committedDate": "2020-03-04T16:43:02Z", "type": "commit"}, {"oid": "9c754f05a4493e01f311621509c35c1de54f035e", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/9c754f05a4493e01f311621509c35c1de54f035e", "message": "Respond to comments from Nicholas", "committedDate": "2020-03-04T16:43:02Z", "type": "forcePushed"}, {"oid": "54d49dcb23ca98ed86b00e6d34df1dc717036f32", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/54d49dcb23ca98ed86b00e6d34df1dc717036f32", "message": "Update docs/ReleaseNotes.md\n\nCo-Authored-By: Nicholas Schiefer <nicholasschiefer@gmail.com>", "committedDate": "2020-03-04T21:06:47Z", "type": "commit"}]}