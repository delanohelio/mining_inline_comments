{"pr_number": 880, "pr_title": "Fixes #876: TextIndex does not instrument BunchedMap reads and writes", "pr_createdAt": "2020-04-01T00:49:14Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/880", "timeline": [{"oid": "72a041af16bd751a0a1ec58a85927a793ae4ec9a", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/72a041af16bd751a0a1ec58a85927a793ae4ec9a", "message": "Fixes #876: TextIndex does not instrument BunchedMap reads and writes\n\nThe problem here was that the reading and writing of keys from FDB happened far enough away from the store timer logic, etc., that the previous logic was not even trying to look within the BunchedMap. However, quite a few reads and writes could happen as a result of text indexing, so getting the right numbers is fairly important. Note that once #866 is in, this may matter less (as the total reads and writes for the transaction will be more accurate), but doing it this way allows it as well allows it to (1) include the sizes of deleted values and (2) correctly correlate those operations to index updates. For that reason, I think this has value even after that other issue is addressed.", "committedDate": "2020-04-01T15:40:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NjI1OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r401796259", "bodyText": "This should probably return a CompletableFuture<List<KeyValue>> as timer.instrument returns a future.", "author": "scgray", "createdAt": "2020-04-01T17:44:32Z", "path": "fdb-extensions/src/main/java/com/apple/foundationdb/map/BunchedMap.java", "diffHunk": "@@ -140,6 +152,44 @@ public BunchedMap(@Nonnull BunchedSerializer<K,V> serializer, @Nonnull Comparato\n         }\n     }\n \n+    /**\n+     * Instrument a range read. The base implementation does nothing, but extenders are encouraged to\n+     * override this method with their own implementations that, for example, records the total numbers\n+     * of keys read and their sizes.\n+     *\n+     * @param readFuture a future that will complete to a list of keys and values\n+     */\n+    protected void instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {", "originalCommit": "72a041af16bd751a0a1ec58a85927a793ae4ec9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTE1NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r401989154", "bodyText": "Done", "author": "alecgrieser", "createdAt": "2020-04-02T00:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NjI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "15b6a5a6d6ab281eb35eb628924d29b899522b26", "chunk": "diff --git a/fdb-extensions/src/main/java/com/apple/foundationdb/map/BunchedMap.java b/fdb-extensions/src/main/java/com/apple/foundationdb/map/BunchedMap.java\nindex 5a7dc160..4fc2ebf8 100644\n--- a/fdb-extensions/src/main/java/com/apple/foundationdb/map/BunchedMap.java\n+++ b/fdb-extensions/src/main/java/com/apple/foundationdb/map/BunchedMap.java\n\n@@ -153,14 +153,16 @@ public class BunchedMap<K,V> {\n     }\n \n     /**\n-     * Instrument a range read. The base implementation does nothing, but extenders are encouraged to\n-     * override this method with their own implementations that, for example, records the total numbers\n+     * Instrument a range read. The base implementation only returns the original future, but extenders are encouraged\n+     * to override this method with their own implementations that, for example, records the total numbers\n      * of keys read and their sizes.\n      *\n      * @param readFuture a future that will complete to a list of keys and values\n+     * @return an instrumented future that returns the same values as the original future\n      */\n-    protected void instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {\n-\n+    @Nonnull\n+    protected CompletableFuture<List<KeyValue>> instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {\n+        return readFuture;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NzEwMA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r401797100", "bodyText": "timer.instrument returns the instrumented future, so I think it probably needs to be returned here.", "author": "scgray", "createdAt": "2020-04-01T17:46:01Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexMaintainer.java", "diffHunk": "@@ -552,4 +559,54 @@ public boolean canDeleteWhere(@Nonnull QueryToKeyMatcher matcher, @Nonnull Key.E\n         }\n         return cursor;\n     }\n+\n+    private static class InstrumentedBunchedMap<K, V> extends BunchedMap<K, V> {\n+        @Nonnull\n+        private final FDBStoreTimer timer;\n+        @Nonnull\n+        private final Executor executor;\n+\n+        public InstrumentedBunchedMap(@Nonnull BunchedMap<K, V> model, @Nonnull FDBStoreTimer timer, @Nonnull Executor executor) {\n+            super(model);\n+            this.timer = timer;\n+            this.executor = executor;\n+        }\n+\n+        @Override\n+        protected void instrumentDelete(@Nonnull byte[] key, @Nullable byte[] oldValue) {\n+            timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_KEY);\n+            timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_KEY_BYTES, key.length);\n+            if (oldValue != null) {\n+                timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_VALUE_BYTES, oldValue.length);\n+            }\n+        }\n+\n+        @Override\n+        protected void instrumentWrite(@Nonnull byte[] key, @Nonnull byte[] value, @Nullable byte[] oldValue) {\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_KEY);\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_KEY_BYTES, key.length);\n+            timer.increment(FDBStoreTimer.Counts.SAVE_INDEX_VALUE_BYTES, value.length);\n+            if (oldValue != null) {\n+                // Or should this ignore the value altogether?\n+                timer.increment(FDBStoreTimer.Counts.DELETE_INDEX_VALUE_BYTES, oldValue.length);\n+            }\n+        }\n+\n+        @Override\n+        protected void instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {\n+            timer.instrument(FDBStoreTimer.Events.SCAN_INDEX_KEYS, readFuture, executor).whenComplete((list, err) -> {", "originalCommit": "72a041af16bd751a0a1ec58a85927a793ae4ec9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTE4Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/880#discussion_r401989186", "bodyText": "Sure.", "author": "alecgrieser", "createdAt": "2020-04-02T00:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NzEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "15b6a5a6d6ab281eb35eb628924d29b899522b26", "chunk": "diff --git a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexMaintainer.java b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexMaintainer.java\nindex 82aaa913..1db45a0c 100644\n--- a/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexMaintainer.java\n+++ b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexMaintainer.java\n\n@@ -593,8 +593,9 @@ public class TextIndexMaintainer extends StandardIndexMaintainer {\n         }\n \n         @Override\n-        protected void instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {\n-            timer.instrument(FDBStoreTimer.Events.SCAN_INDEX_KEYS, readFuture, executor).whenComplete((list, err) -> {\n+        @Nonnull\n+        protected CompletableFuture<List<KeyValue>> instrumentRangeRead(@Nonnull CompletableFuture<List<KeyValue>> readFuture) {\n+            return timer.instrument(FDBStoreTimer.Events.SCAN_INDEX_KEYS, readFuture, executor).whenComplete((list, err) -> {\n                 if (list != null && !list.isEmpty()) {\n                     int keyBytes = 0;\n                     int valueBytes = 0;\n"}}, {"oid": "784b396b498aff675df16494286e1ed215773daf", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/784b396b498aff675df16494286e1ed215773daf", "message": "Fixes #876: TextIndex does not instrument BunchedMap reads and writes\n\nThe problem here was that the reading and writing of keys from FDB happened far enough away from the store timer logic, etc., that the previous logic was not even trying to look within the BunchedMap. However, quite a few reads and writes could happen as a result of text indexing, so getting the right numbers is fairly important. Note that once #866 is in, this may matter less (as the total reads and writes for the transaction will be more accurate), but doing it this way allows it as well allows it to (1) include the sizes of deleted values and (2) correctly correlate those operations to index updates. For that reason, I think this has value even after that other issue is addressed.", "committedDate": "2020-04-02T00:36:57Z", "type": "commit"}, {"oid": "15b6a5a6d6ab281eb35eb628924d29b899522b26", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/15b6a5a6d6ab281eb35eb628924d29b899522b26", "message": "BunchedMap::instrumentRangeRead now returns an instrumented future instead of void", "committedDate": "2020-04-02T00:36:57Z", "type": "commit"}, {"oid": "15b6a5a6d6ab281eb35eb628924d29b899522b26", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/15b6a5a6d6ab281eb35eb628924d29b899522b26", "message": "BunchedMap::instrumentRangeRead now returns an instrumented future instead of void", "committedDate": "2020-04-02T00:36:57Z", "type": "forcePushed"}, {"oid": "30b876dc4c9693ae0d882933a927a638099ea47b", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/30b876dc4c9693ae0d882933a927a638099ea47b", "message": "update release notes for resolution for #876", "committedDate": "2020-04-02T00:38:10Z", "type": "commit"}]}