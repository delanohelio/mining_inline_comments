{"pr_number": 4827, "pr_title": "fix: avoid duplicate column name errors from auto-generated aliases", "pr_createdAt": "2020-03-19T15:52:48Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4827", "timeline": [{"oid": "928afa1d2ccb4215167ff24f1a7e940281f6a3a4", "url": "https://github.com/confluentinc/ksql/commit/928afa1d2ccb4215167ff24f1a7e940281f6a3a4", "message": "fix: avoid duplicate column name errors from auto-generated aliases\n\nIf a source has column names in the form `KSQL_COL_x`, e.g. like those created is a select expression isn't a column reference and isn't aliased, then the existing code can result in an error about duplicate column names if a downstream query also relies on auto-generated column names. For example,\n\n```sql\n-- schema: ID -> NAME\nCREATE STREAM S1 (ID INT KEY, NAME STRING) WITH (kafka_topic='input', value_format='JSON');\n\n-- schema: ID -> KSQL_COL_0, NAME\nCREATE STREAM S2 AS SELECT LEN(STRING), NAME FROM S1;\n\n-- both of the following result in a duplicate column error as two columns end up being called KSQL_COL_0:\nSELECT UCASE(NAME), * FROM S2;\nSELECT UCASE(NAME), KSQL_COL_0 FROM S2;\n```\n\nThe issue is that the generation of aliases does not take into account any existing columns in the source(s).\n\nThis commit resolves this issue. Queries now start their generated alias index as one-more-than the maximum of any generated alias in any of the sources.\n\nWith this change the above queries work:\n\n```sql\n-- schema: KSQL_COL_1, KSQL_COL_0, NAME\nSELECT UCASE(NAME), * FROM S2;\n\n-- schema: KSQL_COL_1, KSQL_COL_1\nSELECT UCASE(NAME), KSQL_COL_0 FROM S2;\n```\n\nBREAKING CHANGE:\n* Any existing persistent queries, e.g. those created with `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT` or `INSERT INTO`, will be unaffected: their column names will not change.\n* Pull queries will be unaffected.\n* Push queries, which rely on auto-generated column names, may see a change in column names.", "committedDate": "2020-03-19T15:49:26Z", "type": "commit"}, {"oid": "fadc4d423c3a600858598fc4ec733c748ae51a91", "url": "https://github.com/confluentinc/ksql/commit/fadc4d423c3a600858598fc4ec733c748ae51a91", "message": "chore: test updates\n\nTests that needed updating to pass with the new column names.", "committedDate": "2020-03-19T15:50:16Z", "type": "commit"}, {"oid": "8624110338c40d17cd102be2649290f39cce7d6c", "url": "https://github.com/confluentinc/ksql/commit/8624110338c40d17cd102be2649290f39cce7d6c", "message": "chore: historic plans", "committedDate": "2020-03-19T17:39:37Z", "type": "commit"}, {"oid": "d11810336b9b6aa30f0ad16898bdd4442186a8de", "url": "https://github.com/confluentinc/ksql/commit/d11810336b9b6aa30f0ad16898bdd4442186a8de", "message": "chore: merge from master\n\nConflicting files\nksqldb-common/src/main/java/io/confluent/ksql/name/ColumnNames.java\nksqldb-common/src/test/java/io/confluent/ksql/name/ColumnNamesTest.java", "committedDate": "2020-03-20T18:09:24Z", "type": "commit"}, {"oid": "de871ea01d4adfc2275633e8ae2c5e86636fdac6", "url": "https://github.com/confluentinc/ksql/commit/de871ea01d4adfc2275633e8ae2c5e86636fdac6", "message": "Merge branch 'master' into ksql_col_clashes", "committedDate": "2020-03-23T18:31:53Z", "type": "commit"}, {"oid": "53de5fe06f63c08776acc110fcb00ddaa5d3f6f2", "url": "https://github.com/confluentinc/ksql/commit/53de5fe06f63c08776acc110fcb00ddaa5d3f6f2", "message": "chore: merge from master", "committedDate": "2020-03-23T18:51:04Z", "type": "commit"}, {"oid": "b72da696c7408a077af3648873402f6d5b832131", "url": "https://github.com/confluentinc/ksql/commit/b72da696c7408a077af3648873402f6d5b832131", "message": "Merge branch 'master' into ksql_col_clashes", "committedDate": "2020-03-23T18:51:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3MzAwOQ==", "url": "https://github.com/confluentinc/ksql/pull/4827#discussion_r396773009", "bodyText": "Is this a Stream here to handle joins where we will have multiple source schemas?", "author": "vpapavas", "createdAt": "2020-03-23T21:39:39Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/name/ColumnNames.java", "diffHunk": "@@ -71,41 +93,52 @@ public static boolean isAggregate(final ColumnName name) {\n     return name.text().startsWith(AGGREGATE_COLUMN_PREFIX);\n   }\n \n-  /**\n-   * Determines the next unique column alias.\n-   *\n-   * <p>Finds any existing {@code KSQL_COL_x} column names in the supplied {@code sourceSchema} to\n-   * ensure the returned generated column name is unique.\n-   *\n-   * @param sourceSchema the source schema.\n-   * @return a column name in the form {@code KSQL_COL_x} which does not clash with source schema.\n-   */\n-  public static ColumnName nextGeneratedColumnAlias(final LogicalSchema sourceSchema) {\n-    final int maxExistingIdx = maxGeneratedAliasIndex(sourceSchema);\n-    return generatedColumnAlias(maxExistingIdx + 1);\n+  private static OptionalInt extractGeneratedAliasIndex(final ColumnName columnName) {\n+    final Matcher matcher = GENERATED_ALIAS_PATTERN.matcher(columnName.text());\n+    return matcher.matches()\n+        ? OptionalInt.of(Integer.parseInt(matcher.group(1)))\n+        : OptionalInt.empty();\n   }\n \n-  /**\n-   * Determines the highest index of generated column names like {@code KSQL_COL_x} in the supplied\n-   * {@code sourceSchema}.\n-   *\n-   * @param sourceSchema the schema.\n-   * @return the highest index or {@code -1}\n-   */\n-  private static int maxGeneratedAliasIndex(final LogicalSchema sourceSchema) {\n-    return sourceSchema.columns().stream()\n+  private static IntStream generatedAliasIndexes(final Stream<LogicalSchema> sourceSchema) {", "originalCommit": "b72da696c7408a077af3648873402f6d5b832131", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxMDc2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4827#discussion_r397010761", "bodyText": "Correct. Joins can have multiple sources...", "author": "big-andy-coates", "createdAt": "2020-03-24T09:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3MzAwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxOTg1NA==", "url": "https://github.com/confluentinc/ksql/pull/4827#discussion_r396919854", "bodyText": "nit: if we pass 1 here we should get names more consistent with what we had before (start at offset 1), and a smaller test diff.", "author": "rodesai", "createdAt": "2020-03-24T06:07:45Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/name/ColumnNames.java", "diffHunk": "@@ -41,11 +50,24 @@ public static ColumnName aggregateColumn(final int idx) {\n   }\n \n   /**\n-   * Where the user hasn't specified an alias for an expression in a SELECT we generate them using\n-   * this method. This value is exposed to the user in the output schema\n+   * Create a generator that will build column aliases in the form {@code KSQL_COL_x}.\n+   *\n+   * <p>Names are guaranteed not to clash with any existing columns in the {@code sourceSchemas}.\n+   *\n+   * <p>Used where the user hasn't specified an alias for an expression in a SELECT. This generated\n+   * column names are exposed to the user in the output schema.\n+   *\n+   * @param sourceSchemas the stream of source schemas.\n+   * @return a generator of unique column names.\n    */\n-  public static ColumnName generatedColumnAlias(final int idx) {\n-    return ColumnName.of(GENERATED_ALIAS_PREFIX + idx);\n+  public static Supplier<ColumnName> columnAliasGenerator(\n+      final Stream<LogicalSchema> sourceSchemas\n+  ) {\n+    final Set<Integer> used = generatedAliasIndexes(sourceSchemas)\n+        .boxed()\n+        .collect(Collectors.toSet());\n+\n+    return new AliasGenerator(0, used)::next;", "originalCommit": "b72da696c7408a077af3648873402f6d5b832131", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxNTE5NQ==", "url": "https://github.com/confluentinc/ksql/pull/4827#discussion_r397015195", "bodyText": "I thought that too and tried it. However, the old code started at zero too.  If we switch this to 1 we just get a different set of tests to change.\n private int selectItemIndex = 0;\nThe changes are because the name is no longer controlled by the index of the select expresssion.", "author": "big-andy-coates", "createdAt": "2020-03-24T09:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxOTg1NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4d987a77a3a50a1043fc4652ba695f933625900f", "url": "https://github.com/confluentinc/ksql/commit/4d987a77a3a50a1043fc4652ba695f933625900f", "message": "chore: fix pull query tests", "committedDate": "2020-03-24T10:35:35Z", "type": "commit"}, {"oid": "9aa4e58b17b9ddf7705eb73291eee71f81860fb7", "url": "https://github.com/confluentinc/ksql/commit/9aa4e58b17b9ddf7705eb73291eee71f81860fb7", "message": "Merge branch 'master' into ksql_col_clashes", "committedDate": "2020-03-24T11:47:50Z", "type": "commit"}, {"oid": "181215373e724c239e806d7be01958f087eaf52f", "url": "https://github.com/confluentinc/ksql/commit/181215373e724c239e806d7be01958f087eaf52f", "message": "chore: historical plans", "committedDate": "2020-03-24T11:56:57Z", "type": "commit"}]}