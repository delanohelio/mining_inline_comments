{"pr_number": 6173, "pr_title": "feat: Support IF NOT EXISTS on CREATE TYPE", "pr_createdAt": "2020-09-10T00:47:37Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6173", "timeline": [{"oid": "2165391aa84c0ddfa1ee77d2ffb611d19e0057d1", "url": "https://github.com/confluentinc/ksql/commit/2165391aa84c0ddfa1ee77d2ffb611d19e0057d1", "message": "feat: Support IF NOT EXISTS on CREATE TYPE", "committedDate": "2020-09-10T00:40:52Z", "type": "commit"}, {"oid": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "url": "https://github.com/confluentinc/ksql/commit/b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "message": "chore: fix indentation", "committedDate": "2020-09-10T00:47:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxODM3MQ==", "url": "https://github.com/confluentinc/ksql/pull/6173#discussion_r486418371", "bodyText": "Could you add this.metaStore = requireNonNull(metastore, \"metaStore\");.", "author": "spena", "createdAt": "2020-09-10T15:06:10Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/RegisterTypeFactory.java", "diffHunk": "@@ -16,16 +16,30 @@\n package io.confluent.ksql.ddl.commands;\n \n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n \n public final class RegisterTypeFactory {\n-  RegisterTypeFactory() {\n+  private final MetaStore metaStore;\n+\n+  RegisterTypeFactory(final MetaStore metaStore) {\n+    this.metaStore = metaStore;", "originalCommit": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50b91a1609bfceb36c436d391434ed6d033d557a", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/RegisterTypeFactory.java b/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/RegisterTypeFactory.java\nindex c3d7222496..8887f84100 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/RegisterTypeFactory.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/RegisterTypeFactory.java\n\n@@ -15,6 +15,8 @@\n \n package io.confluent.ksql.ddl.commands;\n \n+import static java.util.Objects.requireNonNull;\n+\n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMDUxNw==", "url": "https://github.com/confluentinc/ksql/pull/6173#discussion_r486430517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldNotThrowError() {\n          \n          \n            \n              public void shouldNotThrowOnRegisterExistingTypeWhenIfNotExistsSet() {", "author": "spena", "createdAt": "2020-09-10T15:22:12Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java", "diffHunk": "@@ -17,33 +17,99 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n import io.confluent.ksql.execution.expression.tree.Type;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n import io.confluent.ksql.schema.ksql.types.SqlPrimitiveType;\n import io.confluent.ksql.schema.ksql.types.SqlStruct;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n import java.util.Optional;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class RegisterTypeFactoryTest {\n-  private final RegisterTypeFactory factory = new RegisterTypeFactory();\n+  private static final String EXISTING_TYPE = \"existing_type\";\n+  private static final String NOT_EXISTING_TYPE = \"not_existing_type\";\n+  private RegisterTypeFactory factory;\n \n-  @Test\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(EXISTING_TYPE)).thenReturn(Optional.of(customType));\n+    factory = new RegisterTypeFactory(metaStore);\n+  }\n+\n+    @Test\n   public void shouldCreateCommandForRegisterType() {\n     // Given:\n     final RegisterType ddlStatement = new RegisterType(\n         Optional.empty(),\n-        \"alias\",\n-        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build())\n+        NOT_EXISTING_TYPE,\n+        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build()),\n+        true\n+    );\n+\n+    // When:\n+    final RegisterTypeCommand result = factory.create(ddlStatement);\n+\n+    // Then:\n+    assertThat(result.getType(), equalTo(ddlStatement.getType().getSqlType()));\n+    assertThat(result.getTypeName(), equalTo(NOT_EXISTING_TYPE));\n+  }\n+\n+  @Test\n+  public void shouldNotThrowError() {", "originalCommit": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50b91a1609bfceb36c436d391434ed6d033d557a", "chunk": "diff --git a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\nindex 9ef59f4a84..0afaff3019 100644\n--- a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\n+++ b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\n\n@@ -53,8 +53,8 @@ public class RegisterTypeFactoryTest {\n     factory = new RegisterTypeFactory(metaStore);\n   }\n \n-    @Test\n-  public void shouldCreateCommandForRegisterType() {\n+  @Test\n+  public void shouldCreateCommandForRegisterTypeWhenIfNotExitsSet() {\n     // Given:\n     final RegisterType ddlStatement = new RegisterType(\n         Optional.empty(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMDcyNw==", "url": "https://github.com/confluentinc/ksql/pull/6173#discussion_r486430727", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldThrowError() {\n          \n          \n            \n              public void shouldThrowOnRegisterExistingTypeWhenIfNotExistsNotSet() {", "author": "spena", "createdAt": "2020-09-10T15:22:34Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java", "diffHunk": "@@ -17,33 +17,99 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n import io.confluent.ksql.execution.expression.tree.Type;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n import io.confluent.ksql.schema.ksql.types.SqlPrimitiveType;\n import io.confluent.ksql.schema.ksql.types.SqlStruct;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n import java.util.Optional;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class RegisterTypeFactoryTest {\n-  private final RegisterTypeFactory factory = new RegisterTypeFactory();\n+  private static final String EXISTING_TYPE = \"existing_type\";\n+  private static final String NOT_EXISTING_TYPE = \"not_existing_type\";\n+  private RegisterTypeFactory factory;\n \n-  @Test\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(EXISTING_TYPE)).thenReturn(Optional.of(customType));\n+    factory = new RegisterTypeFactory(metaStore);\n+  }\n+\n+    @Test\n   public void shouldCreateCommandForRegisterType() {\n     // Given:\n     final RegisterType ddlStatement = new RegisterType(\n         Optional.empty(),\n-        \"alias\",\n-        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build())\n+        NOT_EXISTING_TYPE,\n+        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build()),\n+        true\n+    );\n+\n+    // When:\n+    final RegisterTypeCommand result = factory.create(ddlStatement);\n+\n+    // Then:\n+    assertThat(result.getType(), equalTo(ddlStatement.getType().getSqlType()));\n+    assertThat(result.getTypeName(), equalTo(NOT_EXISTING_TYPE));\n+  }\n+\n+  @Test\n+  public void shouldNotThrowError() {\n+    // Given:\n+    final RegisterType ddlStatement = new RegisterType(\n+        Optional.empty(),\n+        EXISTING_TYPE,\n+        new Type(SqlStruct.builder().field(\"foo\", SqlPrimitiveType.of(SqlBaseType.STRING)).build()),\n+        true\n     );\n \n     // When:\n     final RegisterTypeCommand result = factory.create(ddlStatement);\n \n     // Then:\n     assertThat(result.getType(), equalTo(ddlStatement.getType().getSqlType()));\n-    assertThat(result.getTypeName(), equalTo(\"alias\"));\n+    assertThat(result.getTypeName(), equalTo(EXISTING_TYPE));\n+  }\n+\n+  @Test\n+  public void shouldThrowError() {", "originalCommit": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50b91a1609bfceb36c436d391434ed6d033d557a", "chunk": "diff --git a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\nindex 9ef59f4a84..0afaff3019 100644\n--- a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\n+++ b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\n\n@@ -53,8 +53,8 @@ public class RegisterTypeFactoryTest {\n     factory = new RegisterTypeFactory(metaStore);\n   }\n \n-    @Test\n-  public void shouldCreateCommandForRegisterType() {\n+  @Test\n+  public void shouldCreateCommandForRegisterTypeWhenIfNotExitsSet() {\n     // Given:\n     final RegisterType ddlStatement = new RegisterType(\n         Optional.empty(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMTkyMQ==", "url": "https://github.com/confluentinc/ksql/pull/6173#discussion_r486431921", "bodyText": "Add another test case to create a non-existing type when ifNotExists is not set. This should be used to validate we won't get errors in such scenario.", "author": "spena", "createdAt": "2020-09-10T15:24:15Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java", "diffHunk": "@@ -17,33 +17,99 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.RegisterTypeCommand;\n import io.confluent.ksql.execution.expression.tree.Type;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.tree.RegisterType;\n import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n import io.confluent.ksql.schema.ksql.types.SqlPrimitiveType;\n import io.confluent.ksql.schema.ksql.types.SqlStruct;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n import java.util.Optional;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class RegisterTypeFactoryTest {\n-  private final RegisterTypeFactory factory = new RegisterTypeFactory();\n+  private static final String EXISTING_TYPE = \"existing_type\";\n+  private static final String NOT_EXISTING_TYPE = \"not_existing_type\";\n+  private RegisterTypeFactory factory;\n \n-  @Test\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(EXISTING_TYPE)).thenReturn(Optional.of(customType));\n+    factory = new RegisterTypeFactory(metaStore);\n+  }\n+\n+    @Test\n   public void shouldCreateCommandForRegisterType() {", "originalCommit": "b424389fbf6abd68610a5ef3deb9b7f9fd334a61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50b91a1609bfceb36c436d391434ed6d033d557a", "chunk": "diff --git a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\nindex 9ef59f4a84..0afaff3019 100644\n--- a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\n+++ b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/RegisterTypeFactoryTest.java\n\n@@ -53,8 +53,8 @@ public class RegisterTypeFactoryTest {\n     factory = new RegisterTypeFactory(metaStore);\n   }\n \n-    @Test\n-  public void shouldCreateCommandForRegisterType() {\n+  @Test\n+  public void shouldCreateCommandForRegisterTypeWhenIfNotExitsSet() {\n     // Given:\n     final RegisterType ddlStatement = new RegisterType(\n         Optional.empty(),\n"}}, {"oid": "50b91a1609bfceb36c436d391434ed6d033d557a", "url": "https://github.com/confluentinc/ksql/commit/50b91a1609bfceb36c436d391434ed6d033d557a", "message": "fix: address review comments", "committedDate": "2020-09-10T17:44:57Z", "type": "commit"}]}