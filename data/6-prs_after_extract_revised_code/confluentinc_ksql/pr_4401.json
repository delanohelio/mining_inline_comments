{"pr_number": 4401, "pr_title": "fix: partial push & persistent query support for window bounds columns", "pr_createdAt": "2020-01-29T11:25:28Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4401", "timeline": [{"oid": "d9d4b3901c55df2968221d7793c492d9ae507bc1", "url": "https://github.com/confluentinc/ksql/commit/d9d4b3901c55df2968221d7793c492d9ae507bc1", "message": "chore: support window bounds columns in persistent and pull queries\n\nfixes: https://github.com/confluentinc/ksql/issues/3871\n\nIs needed to fix:\n- https://github.com/confluentinc/ksql/issues/3633\n- https://github.com/confluentinc/ksql/issues/4015\n\nBefore this change the version of `ROWKEY` copied to the value schema during processing of data in the Streams topology was always of type `STRING` regardless of the actual key type. This is because windowed keys had a `ROWKEY` in the format `<actual key> : Window{start=<windowStart>, end=<windowEnd>}`. While `ROWKEY` in the value schema was a `STRING`, `ROWKEY` in the key schema was the actual type, e.g. `INT`.  This is confusing and will lead to bugs.  Also, the formated string isn't very friendly for users.\n\nThis change looks to introduce the `WINDOWSTART` and `WINDOWEND` columns that were reserved in https://github.com/confluentinc/ksql/pull/4388. The obvious approach would be to add `WINDOWSTART` and `WINDOWEND` as columns in the key schema. Unfortunately, this would be a much bigger change as many parts of the code currently rely on there being only a single key column. The planned structured key work will resolve this.\n\nFor now, we only add the windows bounds columns when we `LogicalSchema.withMetaAndKeyColsInValue(true)`. This is a bit of a temporary hack, but gets us where we need to be. This will be cleaned up as part of the structured key work.\n\nWith this change `ROWKEY` for windowed sources no longer has the format `<actual key> : Window{start=<windowStart>, end=<windowEnd>}`: `ROWKEY` is now only the _actual_ key and the window bounds can be accessed by `WINDOWSTART` and `WINDOWEND`. These two window bounds columns are included in a pull `SELECT *` query. Likewise a join will include the window bounds columns from both sides in the join result if the join is `SELECT *`.\n\n## Examples:\n\n### Push queries\n\n* A select * on a windowed source will not include `WINDOWSTART` and `WINDOWEND`. `ROWKEY` will be the actual key, not a formatted string.\n\n```\nksql> SELECT * FROM windowedSource emit changes\n\n-- old output\n+---------------+------------------------------------------------------+--------+---------+------+\n| ROWTIME       | ROWKEY                                               | USERID | PAGEID  | TOTAL|\n+---------------+------------------------------------------------------+--------+---------+------+\n| 1557183929488 | User_9|+|Page_39 : Window{start=1557183900000 end=-} | User_9 | Page_39 | 1    |\n| 1557183930211 | User_1|+|Page_79 : Window{start=1557183900000 end=-} | User_1 | Page_79 | 1    |\n\n-- new output\n+---------------+---------------+---------------+------------------+--------+---------+------+\n| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n+---------------+---------------+---------------+------------------+--------+---------+------+\n| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n```\n\n* `WINDOWSTART` and `WINDOWEND` are available in the SELECT, GROUPBY, WHERE, HAVING clauses etc.\n\nFor example:\n\n```sql\nSELECT TIMESTAMPTOSTRING(WINDOWSTART,'yyyy-MM-dd HH:mm:ss Z') FROM windowedSource emit changes;\n```\n\nHowever, don't get too excited just yet as there is a known limitation that drastically reduces the availability of this syntax:\n\n**KNOWN LIMITATION**\nWhere a query builds a windowed source from a non-windowed source the window bounds columns are not available.  For example:\n\n```\n-- won't yet work:\nSELECT WINDOWSTART FROM FROM someSource WINDOW TUMBLING (SIZE 1 SECOND) group by ROWKEY;\n```\n\nThis issue is tracked by: https://github.com/confluentinc/ksql/issues/4397\n\n* Joins of windowed sources include the `WINDOWSTART` and `WINDOWEND` columns from both sides.\n\n### Pull queries\n\n**KNOWN LIMITATION**\nPull queries have not been updated yet. This will be done in a follow up PR https://github.com/confluentinc/ksql/issues/3633. This is mainly to keep this PR manageable.\n\n### Persistent queries\n\nPersistent C*AS queries work similar to push queries and have the same known limitation.\n\nBREAKING CHANGE: Any query of a windowed source that uses `ROWKEY` in the SELECT projection will see the contents of `ROWKEY` change from a formatted `STRING` containing the underlying key and the window bounds, to just the underlying key.  Queries can access the window bounds using `WINDOWSTART` and `WINDOWEND`.\n\nBREAKING CHANGE: Joins on windowed sources now include `WINDOWSTART` and `WINDOWEND` columns from both sides on a `SELECT *`.", "committedDate": "2020-01-29T11:24:27Z", "type": "commit"}, {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d", "url": "https://github.com/confluentinc/ksql/commit/acd9f27000a7fa80024d5dc5dfee12a28db6784d", "message": "chore: must of been tripping\n\nKSQL does support `<` operator for strings... revert doc change & add test", "committedDate": "2020-01-29T12:03:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0ODYyNA==", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372348624", "bodyText": "Bit of a hack - but gets us across the finish line and will be cleaned up with structured key work.", "author": "big-andy-coates", "createdAt": "2020-01-29T12:15:15Z", "path": "ksql-common/src/main/java/io/confluent/ksql/schema/ksql/LogicalSchema.java", "diffHunk": "@@ -244,16 +243,27 @@ private LogicalSchema rebuild(\n         builder.add(Column.of(c.name(), c.type(), Namespace.VALUE, valueIndex++));\n       }\n \n+      if (windowedKey) {\n+        builder.add(\n+            Column.of(SchemaUtil.WINDOWSTART_NAME, SqlTypes.BIGINT, Namespace.VALUE, valueIndex++));\n+        builder.add(\n+            Column.of(SchemaUtil.WINDOWEND_NAME, SqlTypes.BIGINT, Namespace.VALUE, valueIndex++));\n+      }", "originalCommit": "acd9f27000a7fa80024d5dc5dfee12a28db6784d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0ODkwNQ==", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372348905", "bodyText": "Need to do this to ensure the Analyser has access to window bounds columns.  (Again, yes, this is a bit hacky).", "author": "big-andy-coates", "createdAt": "2020-01-29T12:15:59Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java", "diffHunk": "@@ -230,6 +230,14 @@ void addTableFunction(final FunctionCall functionCall) {\n     return tableFunctions;\n   }\n \n+  private static LogicalSchema buildStreamsSchema(final AliasedDataSource s) {\n+    // Include metadata & key columns in the value schema to match the schema the streams\n+    // topology will use.\n+    return s.getDataSource()\n+        .getSchema()\n+        .withMetaAndKeyColsInValue(s.getDataSource().getKsqlTopic().getKeyFormat().isWindowed());\n+  }", "originalCommit": "acd9f27000a7fa80024d5dc5dfee12a28db6784d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTIwMw==", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372349203", "bodyText": "We can now remove old special handling of window bounds columns for pull queries.", "author": "big-andy-coates", "createdAt": "2020-01-29T12:16:41Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -313,26 +313,19 @@ private void throwOnUnknownColumnReference() {\n           new ExpressionAnalyzer(analysis.getFromSourceSchemas());\n \n       for (final SelectExpression selectExpression : analysis.getSelectExpressions()) {\n-        expressionAnalyzer.analyzeExpression(selectExpression.getExpression(), false);\n+        expressionAnalyzer.analyzeExpression(selectExpression.getExpression());\n       }\n \n       analysis.getWhereExpression().ifPresent(where -> {\n-        final boolean allowWindowMetaFields = pullQuery\n-            && analysis.getFromDataSources().get(0)\n-            .getDataSource()\n-            .getKsqlTopic()\n-            .getKeyFormat()\n-            .isWindowed();", "originalCommit": "acd9f27000a7fa80024d5dc5dfee12a28db6784d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTM2NQ==", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372349365", "bodyText": "Again, a bit hacky, but ensures window bounds columns are available.", "author": "big-andy-coates", "createdAt": "2020-01-29T12:17:09Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -587,13 +578,14 @@ private void visitSelectStar(final AllColumns allColumns) {\n             : \"\";\n \n         final LogicalSchema schema = source.getDataSource().getSchema();\n+        final boolean windowed = source.getDataSource().getKsqlTopic().getKeyFormat().isWindowed();\n \n         // Non-join persistent queries only require value columns on SELECT *\n         // where as joins and transient queries require all columns in the select:\n         // See https://github.com/confluentinc/ksql/issues/3731 for more info\n         final List<Column> valueColumns = persistent && !analysis.isJoin()\n             ? schema.value()\n-            : schema.columns();\n+            : schema.withMetaAndKeyColsInValue(windowed).value();", "originalCommit": "acd9f27000a7fa80024d5dc5dfee12a28db6784d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTQ4OA==", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372349488", "bodyText": "Removal of previous hacks :)", "author": "big-andy-coates", "createdAt": "2020-01-29T12:17:29Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -90,13 +82,7 @@ public Void visitQualifiedColumnReference(\n         final ColumnRef name\n     ) {\n       final Set<SourceName> sourcesWithField = sourceSchemas.sourcesWithField(sourceName, name);\n-\n       if (sourcesWithField.isEmpty()) {\n-        if (allowWindowMetaFields && name.name().equals(SchemaUtil.WINDOWSTART_NAME)) {\n-          // window start doesn't have a source as its a special hacky column\n-          return Optional.empty();\n-        }", "originalCommit": "acd9f27000a7fa80024d5dc5dfee12a28db6784d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e074f506840c627e543f825acffe17348b8d12ae", "url": "https://github.com/confluentinc/ksql/commit/e074f506840c627e543f825acffe17348b8d12ae", "message": "Update docs-md/developer-guide/create-a-stream.md\n\nCo-Authored-By: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-01-29T21:35:57Z", "type": "commit"}, {"oid": "ff48f49310ace5bb9d617be599b0e39d47434a5b", "url": "https://github.com/confluentinc/ksql/commit/ff48f49310ace5bb9d617be599b0e39d47434a5b", "message": "Update docs-md/developer-guide/create-a-table.md\n\nCo-Authored-By: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-01-29T21:36:20Z", "type": "commit"}, {"oid": "4420c750867d9a542bc6ed3d6a0be29aaff479db", "url": "https://github.com/confluentinc/ksql/commit/4420c750867d9a542bc6ed3d6a0be29aaff479db", "message": "Update docs-md/developer-guide/create-a-stream.md\n\nCo-Authored-By: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-01-29T21:36:30Z", "type": "commit"}]}