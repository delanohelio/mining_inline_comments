{"pr_number": 6708, "pr_title": "feat: support table joins on key format mismatch", "pr_createdAt": "2020-12-02T19:22:28Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6708", "timeline": [{"oid": "720caeea709281faa22b97fc902facbc81bad41a", "url": "https://github.com/confluentinc/ksql/commit/720caeea709281faa22b97fc902facbc81bad41a", "message": "test: some more tests", "committedDate": "2020-12-02T19:49:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3NTEwOQ==", "url": "https://github.com/confluentinc/ksql/pull/6708#discussion_r535475109", "bodyText": "The PR description says\n\nThis still doesn't fully address what #6017 (klip-33) outlines because it prefers the left instead of the right source to maintain some compatibility with previous code. It would be backwards compatible to change this as this is done at logical plan and not the physical plan.\n\nbut this javadoc seems to describe exactly what's in KLIP 33. From the changes in this PR, it looks like the PR description is out of date and needs to be updated?", "author": "vcrfxia", "createdAt": "2020-12-03T18:21:36Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java", "diffHunk": "@@ -112,48 +112,18 @@ public JoinNode(\n   /**\n    * Determines the key format of the join.\n    *\n-   * <p>Avoids repartitioning tables for now. Instead choosing to repartition the stream side.\n-   * This is different to what is proposed in KLIP-33. Issue #6229 will look to implement\n-   * repartitioning tables.\n-   *\n-   * <p>For now, the left key format is the preferred join key format unless either:\n-   * <ul>\n-   *   <li>The right source is not already being repartitioned and the left source is.</li>\n-   *   <li>The right source is a table.</li>\n-   * </ul>\n-   * In which case, the right key format it used.\n-   *\n-   * <p>An exception is currently thrown if both sides are tables and their key formats differ.\n+   * <p>For now, the left key format is the preferred join key format unless the\n+   * right source is not already being repartitioned and the left source is.", "originalCommit": "720caeea709281faa22b97fc902facbc81bad41a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NDM1NA==", "url": "https://github.com/confluentinc/ksql/pull/6708#discussion_r535744354", "bodyText": "From KLIP-33:\n\nWhere one side must be repartitioned to correct the key format, choosing which side to repartition\ncan not be driven by the size of the data, as in a traditional database system, as the size of\nthe data is unknown, likely infinite. Ideally, for a streaming system it is the rate of change of\nthe data, i.e. the throughput, that would drive the choice. Unfortunately, this too can not be\nknown upfront.  For this reason, we propose repartitioning based on the order of sources within\nthe query, with the source on the right being repartitioned.\n\nI'm still choosing to repartition the left source, not the right.", "author": "agavra", "createdAt": "2020-12-04T00:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3NTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NjM1OA==", "url": "https://github.com/confluentinc/ksql/pull/6708#discussion_r535776358", "bodyText": "The changes in this PR choose the preferred format from the left source, which means the right source is being repartitioned. The QTTs support this as well. Have I missed something?", "author": "vcrfxia", "createdAt": "2020-12-04T01:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3NTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTE3OQ==", "url": "https://github.com/confluentinc/ksql/pull/6708#discussion_r536219179", "bodyText": "\ud83d\ude2c yes... you are right!", "author": "agavra", "createdAt": "2020-12-04T16:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3NTEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2c3edbd030581d197a6ab6598404d3f4334195cb", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java b/ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java\nindex 2a262cf8c6..b3bcf56bd1 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java\n\n@@ -112,18 +112,48 @@ public class JoinNode extends PlanNode implements JoiningNode {\n   /**\n    * Determines the key format of the join.\n    *\n-   * <p>For now, the left key format is the preferred join key format unless the\n-   * right source is not already being repartitioned and the left source is.\n+   * <p>Avoids repartitioning tables for now. Instead choosing to repartition the stream side.\n+   * This is different to what is proposed in KLIP-33. Issue #6229 will look to implement\n+   * repartitioning tables.\n+   *\n+   * <p>For now, the left key format is the preferred join key format unless either:\n+   * <ul>\n+   *   <li>The right source is not already being repartitioned and the left source is.</li>\n+   *   <li>The right source is a table.</li>\n+   * </ul>\n+   * In which case, the right key format it used.\n+   *\n+   * <p>An exception is currently thrown if both sides are tables and their key formats differ.\n    *\n    * @see <a href=\"https://github.com/confluentinc/ksql/blob/master/design-proposals/klip-33-key-format.md\">KLIP-33</a>\n+   * @see <a href=\"https://github.com/confluentinc/ksql/issues/6229\">Issue #6229</a>\n    */\n   public void resolveKeyFormats() {\n-    final FormatInfo joinKeyFormat = getPreferredKeyFormat()\n-        .orElseGet(this::getDefaultSourceKeyFormat);\n+    final FormatInfo joinKeyFormat = getRequiredKeyFormat()\n+        .map(RequiredFormat::format)\n+        .orElseGet(() -> getPreferredKeyFormat()\n+            .orElseGet(this::getDefaultSourceKeyFormat));\n \n     setKeyFormat(joinKeyFormat);\n   }\n \n+  @Override\n+  public Optional<RequiredFormat> getRequiredKeyFormat() {\n+    final Optional<RequiredFormat> leftRequired = leftJoining.getRequiredKeyFormat();\n+    final Optional<RequiredFormat> rightRequired = rightJoining.getRequiredKeyFormat();\n+\n+    if (!leftRequired.isPresent() && !rightRequired.isPresent()) {\n+      return Optional.empty();\n+    }\n+\n+    // At least one table:\n+    final RequiredFormat requiredFormat = leftRequired.isPresent() && rightRequired.isPresent()\n+        ? leftRequired.get().merge(rightRequired.get())\n+        : leftRequired.orElseGet(rightRequired::get);\n+\n+    return Optional.of(requiredFormat);\n+  }\n+\n   @Override\n   public Optional<FormatInfo> getPreferredKeyFormat() {\n     final Optional<FormatInfo> leftPreferred = leftJoining.getPreferredKeyFormat();\n"}}, {"oid": "2c3edbd030581d197a6ab6598404d3f4334195cb", "url": "https://github.com/confluentinc/ksql/commit/2c3edbd030581d197a6ab6598404d3f4334195cb", "message": "chore: set key schema name to avoid conflicts", "committedDate": "2020-12-04T16:56:43Z", "type": "commit"}, {"oid": "bd17e9870be6da4a221a960bc1e5cffe8397783a", "url": "https://github.com/confluentinc/ksql/commit/bd17e9870be6da4a221a960bc1e5cffe8397783a", "message": "temp commit", "committedDate": "2020-12-04T16:57:25Z", "type": "commit"}, {"oid": "92b8f46cff5adf998aa578f11ac4fa19a611acb7", "url": "https://github.com/confluentinc/ksql/commit/92b8f46cff5adf998aa578f11ac4fa19a611acb7", "message": "feat: support table joins on key format mismatch", "committedDate": "2020-12-04T16:59:37Z", "type": "commit"}, {"oid": "b5e61037c8b0b4561fb27a7de5cf9daf79d7b431", "url": "https://github.com/confluentinc/ksql/commit/b5e61037c8b0b4561fb27a7de5cf9daf79d7b431", "message": "chore: historical tests", "committedDate": "2020-12-04T16:59:42Z", "type": "commit"}, {"oid": "53eb7c96d9b23634b332c156bfcef990a6396d65", "url": "https://github.com/confluentinc/ksql/commit/53eb7c96d9b23634b332c156bfcef990a6396d65", "message": "test: some more tests", "committedDate": "2020-12-04T16:59:42Z", "type": "commit"}, {"oid": "4f7a963e0743946963be38a95180f853d2b89c28", "url": "https://github.com/confluentinc/ksql/commit/4f7a963e0743946963be38a95180f853d2b89c28", "message": "chore: rebase", "committedDate": "2020-12-04T18:25:45Z", "type": "commit"}, {"oid": "4f7a963e0743946963be38a95180f853d2b89c28", "url": "https://github.com/confluentinc/ksql/commit/4f7a963e0743946963be38a95180f853d2b89c28", "message": "chore: rebase", "committedDate": "2020-12-04T18:25:45Z", "type": "forcePushed"}, {"oid": "856cebe0f43295bd5366969f7831cb780d4ceeb2", "url": "https://github.com/confluentinc/ksql/commit/856cebe0f43295bd5366969f7831cb780d4ceeb2", "message": "chore: historical tests", "committedDate": "2020-12-04T20:01:07Z", "type": "commit"}, {"oid": "942bc66d124dfbdbb3f2c896077d15fcaa0f24b8", "url": "https://github.com/confluentinc/ksql/commit/942bc66d124dfbdbb3f2c896077d15fcaa0f24b8", "message": "test: improve CLI test pull query", "committedDate": "2020-12-04T20:52:17Z", "type": "commit"}, {"oid": "942bc66d124dfbdbb3f2c896077d15fcaa0f24b8", "url": "https://github.com/confluentinc/ksql/commit/942bc66d124dfbdbb3f2c896077d15fcaa0f24b8", "message": "test: improve CLI test pull query", "committedDate": "2020-12-04T20:52:17Z", "type": "forcePushed"}]}