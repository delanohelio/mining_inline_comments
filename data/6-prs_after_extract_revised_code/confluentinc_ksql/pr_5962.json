{"pr_number": 5962, "pr_title": "feat: Support [IF EXISTS] on DROP TYPE command", "pr_createdAt": "2020-08-06T20:24:11Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5962", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTMwMQ==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467089301", "bodyText": "nit: not visible for testing only. Used by production code,, right?", "author": "big-andy-coates", "createdAt": "2020-08-07T14:49:43Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java", "diffHunk": "@@ -15,14 +15,32 @@\n \n package io.confluent.ksql.ddl.commands;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.DropType;\n+import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Objects;\n \n public class DropTypeFactory {\n-  DropTypeFactory() {\n+  private final MetaStore metaStore;\n+\n+  @VisibleForTesting", "originalCommit": "ad5961d5dfe6477421e6c3f796273720bc131cfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNDA3NQ==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467134075", "bodyText": "Right, removed.", "author": "spena", "createdAt": "2020-08-07T16:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f388903782754e7f3b3418f6c50326adc9226c57", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java b/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java\nindex 82960137b0..ebf941eaf3 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java\n\n@@ -15,7 +15,6 @@\n \n package io.confluent.ksql.ddl.commands;\n \n-import com.google.common.annotations.VisibleForTesting;\n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.DropType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MDc4NA==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467090784", "bodyText": "No need to search the metastore when ifExists is true.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!metaStore.resolveType(typeName).isPresent()) {\n          \n          \n            \n                  if (!ifExists) {\n          \n          \n            \n                    throw new KsqlException(\"Type \" + typeName + \" does not exist.\");\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                if (!ifExists && !metaStore.resolveType(typeName).isPresent()) {\n          \n          \n            \n                  throw new KsqlException(\"Type \" + typeName + \" does not exist.\");\n          \n          \n            \n                }", "author": "big-andy-coates", "createdAt": "2020-08-07T14:51:59Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java", "diffHunk": "@@ -15,14 +15,32 @@\n \n package io.confluent.ksql.ddl.commands;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.DropType;\n+import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Objects;\n \n public class DropTypeFactory {\n-  DropTypeFactory() {\n+  private final MetaStore metaStore;\n+\n+  @VisibleForTesting\n+  DropTypeFactory(final MetaStore metaStore) {\n+    this.metaStore = Objects.requireNonNull(metaStore, \"metaStore\");\n   }\n \n   public DropTypeCommand create(final DropType statement) {\n-    return new DropTypeCommand(statement.getTypeName());\n+    final String typeName = statement.getTypeName();\n+    final boolean ifExists = statement.getIfExists();\n+\n+    if (!metaStore.resolveType(typeName).isPresent()) {\n+      if (!ifExists) {\n+        throw new KsqlException(\"Type \" + typeName + \" does not exist.\");\n+      }\n+    }", "originalCommit": "ad5961d5dfe6477421e6c3f796273720bc131cfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNDE0OA==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467134148", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-07T16:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MDc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "f388903782754e7f3b3418f6c50326adc9226c57", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java b/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java\nindex 82960137b0..ebf941eaf3 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java\n\n@@ -15,7 +15,6 @@\n \n package io.confluent.ksql.ddl.commands;\n \n-import com.google.common.annotations.VisibleForTesting;\n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.DropType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MzE5Ng==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467093196", "bodyText": "I'm a little confused by the name of this test.   What's the OnMissingName mean?\nIt looks to test that the function returns a cmd when ifExists is true and the type does exist.  That being the case, maybe call it shouldCreateDropTypeForExistingTypeAndIfExistsSet or similar?", "author": "big-andy-coates", "createdAt": "2020-08-07T14:56:03Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java", "diffHunk": "@@ -16,27 +16,79 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n+\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class DropTypeFactoryTest {\n   private static final String SOME_TYPE_NAME = \"some_type\";\n \n-  private final DropTypeFactory factory = new DropTypeFactory();\n+  private DropTypeFactory factory;\n+\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(SOME_TYPE_NAME)).thenReturn(Optional.of(customType));\n+\n+    factory = new DropTypeFactory(metaStore);\n+  }\n \n   @Test\n   public void shouldCreateDropType() {\n     // Given:\n-    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME);\n+    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME, false);\n \n     // When:\n     final DropTypeCommand cmd = factory.create(dropType);\n \n     // Then:\n     assertThat(cmd.getTypeName(), equalTo(SOME_TYPE_NAME));\n   }\n+\n+  @Test\n+  public void shouldCreateTypeOnMissingNameWithIfExists() {", "originalCommit": "ad5961d5dfe6477421e6c3f796273720bc131cfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNDQyMA==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467134420", "bodyText": "Done.", "author": "spena", "createdAt": "2020-08-07T16:09:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MzE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f388903782754e7f3b3418f6c50326adc9226c57", "chunk": "diff --git a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\nindex e6cfbd7f67..bd908a96cb 100644\n--- a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\n+++ b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\n\n@@ -16,14 +16,12 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.assertThrows;\n import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n import io.confluent.ksql.metastore.MetaStore;\n-import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MzQxNg==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467093416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldFailCreateTypeOnMissingName() {\n          \n          \n            \n              public void shouldFailCreateTypeIfTypeDoesNotExist) {", "author": "big-andy-coates", "createdAt": "2020-08-07T14:56:26Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java", "diffHunk": "@@ -16,27 +16,79 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n+\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class DropTypeFactoryTest {\n   private static final String SOME_TYPE_NAME = \"some_type\";\n \n-  private final DropTypeFactory factory = new DropTypeFactory();\n+  private DropTypeFactory factory;\n+\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(SOME_TYPE_NAME)).thenReturn(Optional.of(customType));\n+\n+    factory = new DropTypeFactory(metaStore);\n+  }\n \n   @Test\n   public void shouldCreateDropType() {\n     // Given:\n-    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME);\n+    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME, false);\n \n     // When:\n     final DropTypeCommand cmd = factory.create(dropType);\n \n     // Then:\n     assertThat(cmd.getTypeName(), equalTo(SOME_TYPE_NAME));\n   }\n+\n+  @Test\n+  public void shouldCreateTypeOnMissingNameWithIfExists() {\n+    // Given:\n+    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME, true);\n+\n+    // When:\n+    final DropTypeCommand cmd = factory.create(dropType);\n+\n+    // Then:\n+    assertThat(cmd.getTypeName(), equalTo(SOME_TYPE_NAME));\n+  }\n+\n+  @Test\n+  public void shouldFailCreateTypeOnMissingName() {", "originalCommit": "ad5961d5dfe6477421e6c3f796273720bc131cfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNDI1MQ==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467134251", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-07T16:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MzQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "f388903782754e7f3b3418f6c50326adc9226c57", "chunk": "diff --git a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\nindex e6cfbd7f67..bd908a96cb 100644\n--- a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\n+++ b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\n\n@@ -16,14 +16,12 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.assertThrows;\n import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n import io.confluent.ksql.metastore.MetaStore;\n-import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5Mzc4Mg==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467093782", "bodyText": "You're missing a test to ensure it doesn't throw when the type doesn't exist and ifExists is false.", "author": "big-andy-coates", "createdAt": "2020-08-07T14:57:00Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java", "diffHunk": "@@ -16,27 +16,79 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n+\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class DropTypeFactoryTest {\n   private static final String SOME_TYPE_NAME = \"some_type\";\n \n-  private final DropTypeFactory factory = new DropTypeFactory();\n+  private DropTypeFactory factory;\n+\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(SOME_TYPE_NAME)).thenReturn(Optional.of(customType));\n+\n+    factory = new DropTypeFactory(metaStore);\n+  }\n \n   @Test\n   public void shouldCreateDropType() {\n     // Given:\n-    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME);\n+    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME, false);\n \n     // When:\n     final DropTypeCommand cmd = factory.create(dropType);\n \n     // Then:\n     assertThat(cmd.getTypeName(), equalTo(SOME_TYPE_NAME));\n   }\n+\n+  @Test\n+  public void shouldCreateTypeOnMissingNameWithIfExists() {", "originalCommit": "ad5961d5dfe6477421e6c3f796273720bc131cfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNDMyMA==", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467134320", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-07T16:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5Mzc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f388903782754e7f3b3418f6c50326adc9226c57", "chunk": "diff --git a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\nindex e6cfbd7f67..bd908a96cb 100644\n--- a/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\n+++ b/ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java\n\n@@ -16,14 +16,12 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.assertThrows;\n import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n import io.confluent.ksql.metastore.MetaStore;\n-import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n \n"}}, {"oid": "e0ae0eb5eafd9b8b5da180717d084294abbfc938", "url": "https://github.com/confluentinc/ksql/commit/e0ae0eb5eafd9b8b5da180717d084294abbfc938", "message": "feat: Support [IF EXISTS] on DROP TYPE command", "committedDate": "2020-08-07T16:08:13Z", "type": "commit"}, {"oid": "f388903782754e7f3b3418f6c50326adc9226c57", "url": "https://github.com/confluentinc/ksql/commit/f388903782754e7f3b3418f6c50326adc9226c57", "message": "test: add and update unit tests", "committedDate": "2020-08-07T16:08:13Z", "type": "commit"}, {"oid": "f388903782754e7f3b3418f6c50326adc9226c57", "url": "https://github.com/confluentinc/ksql/commit/f388903782754e7f3b3418f6c50326adc9226c57", "message": "test: add and update unit tests", "committedDate": "2020-08-07T16:08:13Z", "type": "forcePushed"}]}