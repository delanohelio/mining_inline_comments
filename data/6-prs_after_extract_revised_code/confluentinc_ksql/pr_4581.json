{"pr_number": 4581, "pr_title": "feat: Provide upper limit on number of push queries", "pr_createdAt": "2020-02-18T09:40:30Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4581", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MzkxNQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380843915", "bodyText": "I'd say 100 is way too high!  Though, of course, it depends on what queries they're running.\n@rodesai did some work investigating this, so he may have some more thoughts on what's a good limit.\nPersonally, I'd be starting with more like 10.", "author": "big-andy-coates", "createdAt": "2020-02-18T18:06:55Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,28 +37,51 @@\n           + \" as there are cores you want to use, as each instance is single threaded.\";\n \n   public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n   public static final String LISTEN_HOST_DOC =\n       \"The hostname to listen on\";\n \n   public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final int DEFAULT_LISTEN_PORT = 8088;\n   public static final String LISTEN_PORT_DOC =\n       \"The port to listen on\";\n \n-  public static final String KEY_PATH = propertyName(\"key.path\");\n-  public static final String KEY_PATH_DOC =\n-      \"Path to key file\";\n+  public static final String TLS_ENABLED = propertyName(\"tls.enabled\");\n+  public static final boolean DEFAULT_TLS_ENABLED = false;\n+  public static final String TLS_ENABLED_DOC =\n+      \"Is TLS enabled?\";\n \n-  public static final String CERT_PATH = propertyName(\"cert.path\");\n-  public static final String CERT_PATH_DOC =\n-      \"Path to cert file\";\n+  public static final String TLS_KEY_STORE_PATH = propertyName(\"tls.keystore.path\");\n+  public static final String TLS_KEY_STORE_PATH_DOC =\n+      \"Path to server key store\";\n+\n+  public static final String TLS_KEY_STORE_PASSWORD = propertyName(\"tls.keystore.password\");\n+  public static final String TLS_KEY_STORE_PASSWORD_DOC =\n+      \"Password for server key store\";\n+\n+  public static final String TLS_TRUST_STORE_PATH = propertyName(\"tls.truststore.path\");\n+  public static final String TLS_TRUST_STORE_PATH_DOC =\n+      \"Path to client trust store\";\n+\n+  public static final String TLS_TRUST_STORE_PASSWORD = propertyName(\"tls.truststore.password\");\n+  public static final String TLS_TRUST_STORE_PASSWORD_DOC =\n+      \"Password for client trust store\";\n+\n+  public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n+  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n+      \"Is client auth required?\";\n \n   public static final String WORKER_POOL_SIZE = propertyName(\"worker.pool.size\");\n   public static final String WORKER_POOL_DOC =\n       \"Max number of worker threads for executing blocking code\";\n   public static final int DEFAULT_WORKER_POOL_SIZE = 100;\n \n+  public static final String MAX_PUSH_QUERIES = propertyName(\"max.push.queries\");\n+  public static final int DEFAULT_MAX_PUSH_QUERIES = 100;", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MDM0MQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380880341", "bodyText": "+1 - when we benchmarked, we saw performance start to drop off around 30 queries (presumably due to overhead from all the threads added by each new streams app - streams threads, kafka client threads))", "author": "rodesai", "createdAt": "2020-02-18T19:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5NjIzMg==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380896232", "bodyText": "I haven't tuned anything yet, so this is just a placeholder.", "author": "purplefox", "createdAt": "2020-02-18T19:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNTc3Nw==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380905777", "bodyText": "FWIW - we were talking to someone who ran 415 (albeit super simple) queries on one node (we should verify), so might be better to just let the users tune this and start with something somewhat aggressive", "author": "agavra", "createdAt": "2020-02-18T20:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMjU3NQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381422575", "bodyText": "Erm.... I think it being a config allows the user to tune it @agavra :p lol.", "author": "big-andy-coates", "createdAt": "2020-02-19T17:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMzI5MA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381423290", "bodyText": "-___-", "author": "agavra", "createdAt": "2020-02-19T17:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MzkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0283690b3b20d929266c4671f827d4c3bcbe566b", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\nindex 38a195b0ac..fa0885d6a0 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n\n@@ -68,9 +71,9 @@ public class ApiServerConfig extends AbstractConfig {\n       \"Password for client trust store\";\n \n   public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n-  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String DEFAULT_TLS_CLIENT_AUTH_REQUIRED = \"none\";\n   public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n-      \"Is client auth required?\";\n+      \"Is client auth required? One of none, request or required\";\n \n   public static final String WORKER_POOL_SIZE = propertyName(\"worker.pool.size\");\n   public static final String WORKER_POOL_DOC =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTU5Mg==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380845592", "bodyText": "Add validator to ensure its not set to zero / negative.\nSame for WORKER_POOL_SIZE", "author": "big-andy-coates", "createdAt": "2020-02-18T18:10:07Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -84,34 +106,56 @@ private static String propertyName(final String name) {\n           Importance.MEDIUM,\n           LISTEN_PORT_DOC)\n       .define(\n-          KEY_PATH,\n+          TLS_ENABLED,\n+          Type.BOOLEAN,\n+          DEFAULT_TLS_ENABLED,\n+          Importance.MEDIUM,\n+          TLS_ENABLED_DOC)\n+      .define(\n+          TLS_KEY_STORE_PATH,\n+          Type.STRING,\n+          \"\",\n+          Importance.MEDIUM,\n+          TLS_KEY_STORE_PATH_DOC)\n+      .define(\n+          TLS_KEY_STORE_PASSWORD,\n           Type.STRING,\n-          null,\n+          \"\",\n           Importance.MEDIUM,\n-          KEY_PATH_DOC)\n+          TLS_KEY_STORE_PASSWORD_DOC)\n       .define(\n-          CERT_PATH,\n+          TLS_TRUST_STORE_PATH,\n           Type.STRING,\n-          null,\n+          \"\",\n           Importance.MEDIUM,\n-          CERT_PATH_DOC)\n+          TLS_TRUST_STORE_PATH_DOC)\n+      .define(\n+          TLS_TRUST_STORE_PASSWORD,\n+          Type.STRING,\n+          \"\",\n+          Importance.MEDIUM,\n+          TLS_TRUST_STORE_PASSWORD_DOC)\n+      .define(\n+          TLS_CLIENT_AUTH_REQUIRED,\n+          Type.BOOLEAN,\n+          DEFAULT_TLS_CLIENT_AUTH_REQUIRED,\n+          Importance.MEDIUM,\n+          TLS_CLIENT_AUTH_REQUIRED_DOC)\n       .define(\n           WORKER_POOL_SIZE,\n           Type.INT,\n           DEFAULT_WORKER_POOL_SIZE,\n           Importance.MEDIUM,\n-          WORKER_POOL_DOC);\n+          WORKER_POOL_DOC)\n+      .define(\n+          MAX_PUSH_QUERIES,\n+          Type.INT,\n+          DEFAULT_MAX_PUSH_QUERIES,\n+          Importance.MEDIUM,\n+          MAX_PUSH_QUERIES_DOC);", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNTg5NA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380925894", "bodyText": "Do you have an example of using a validator? I couldn't see one in KsqlConfig.", "author": "purplefox", "createdAt": "2020-02-18T20:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2NTU0Mg==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380965542", "bodyText": "nvm, found an example, and added some.", "author": "purplefox", "createdAt": "2020-02-18T22:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTU5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\nindex 38a195b0ac..754e68259f 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n\n@@ -103,6 +108,7 @@ public class ApiServerConfig extends AbstractConfig {\n           LISTEN_PORT,\n           Type.INT,\n           DEFAULT_LISTEN_PORT,\n+          zeroOrPositive(),\n           Importance.MEDIUM,\n           LISTEN_PORT_DOC)\n       .define(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NzI2OQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380847269", "bodyText": "Can we please not have methods taking and returning null. If it's optional, make it Optional!  Jackson knows how to deal with Optional.\nOr just use an empty string for pull query ids and mark QueryResponseMetadata  with @JsonInclude(NON_EMPTY), which will mean it doesn't include a queryId field in the response if the id is empty.", "author": "big-andy-coates", "createdAt": "2020-02-18T18:13:14Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java", "diffHunk": "@@ -80,10 +79,11 @@ public void handle(final RoutingContext routingContext) {\n     createQueryPublisherAsync(queryStreamArgs.get().sql, queryStreamArgs.get().properties, context)\n         .thenAccept(queryPublisher -> {\n \n-          final PushQueryHolder query = connectionQueryManager\n-              .createApiQuery(queryPublisher, routingContext.request());\n+          final PushQueryHolder query = queryPublisher.isPullQuery() ? null :\n+              connectionQueryManager.createApiQuery(queryPublisher, routingContext.request());\n \n-          final QueryResponseMetadata metadata = new QueryResponseMetadata(query.getId().toString(),\n+          final QueryResponseMetadata metadata = new QueryResponseMetadata(\n+              query == null ? null : query.getId().toString(),", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMDcwNA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380930704", "bodyText": "Well, according to Brian Goetz, Optional was not designed to be used in method args (and IntelliJ will, by default, warn you if you do this) ;)\nSo this is very much a matter of personal style, there is no objective \"right\" way to do this.\nWe could argue about this until the cows come home, but imho it's of little importance and we have more important things to spend our time on :)", "author": "purplefox", "createdAt": "2020-02-18T20:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NzI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMjUzNQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381422535", "bodyText": "What is your objection to using an empty string?\nBy using null anyone using this type must null check the Id everytime be for accessing it and do something if its null.   This has a tendency to produce NPEs and hence bugs.\nWhy not just an empty string?\nThe issue with nulls is that all callers need to null check and if they forget we end up with an NPE.  Using Optional encodes the optionality into the type system so callers know it is optional, without having to check the implementation of the code.  Using a default value, e.g. empty string, may mean calls can just use the value without caring.  Of course a default value many not be the correct approach if callers need to do different things for the two difference cases.", "author": "big-andy-coates", "createdAt": "2020-02-19T17:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NzI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0OTMxMA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381449310", "bodyText": "Empty string seems hacky to me. The query has no id, the correct way to represent that inside an object is as a null field (Optionals weren't designed for this case).", "author": "purplefox", "createdAt": "2020-02-19T18:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NzI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzMDc4MA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381530780", "bodyText": "I have fixed this in a simple way which avoids nulls but doesn't require any new types. I hope you agree this is preferable.", "author": "purplefox", "createdAt": "2020-02-19T20:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NzI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0283690b3b20d929266c4671f827d4c3bcbe566b", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\nindex 149a86d5bb..f2a4a97015 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\n\n@@ -79,13 +79,24 @@ public class QueryStreamHandler implements Handler<RoutingContext> {\n     createQueryPublisherAsync(queryStreamArgs.get().sql, queryStreamArgs.get().properties, context)\n         .thenAccept(queryPublisher -> {\n \n-          final PushQueryHolder query = queryPublisher.isPullQuery() ? null :\n-              connectionQueryManager.createApiQuery(queryPublisher, routingContext.request());\n+          final QueryResponseMetadata metadata;\n \n-          final QueryResponseMetadata metadata = new QueryResponseMetadata(\n-              query == null ? null : query.getId().toString(),\n-              queryPublisher.getColumnNames(),\n-              queryPublisher.getColumnTypes());\n+          if (queryPublisher.isPullQuery()) {\n+            metadata = new QueryResponseMetadata(\n+                queryPublisher.getColumnNames(),\n+                queryPublisher.getColumnTypes());\n+          } else {\n+            final PushQueryHolder query = connectionQueryManager\n+                .createApiQuery(queryPublisher, routingContext.request());\n+\n+            metadata = new QueryResponseMetadata(\n+                query.getId().toString(),\n+                queryPublisher.getColumnNames(),\n+                queryPublisher.getColumnTypes());\n+\n+            // When response is complete, publisher should be closed and query unregistered\n+            routingContext.response().endHandler(v -> query.close());\n+          }\n \n           queryStreamResponseWriter.writeMetadata(metadata);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0OTQyMw==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380849423", "bodyText": "Rather than having null here, why not introduce a QueryHolder interface with the getId and close methods. Then connectionQueryManager.createApiQuery can return a PushQueryHolder for push queries and a PullQueryHolder for pull. The Pull version would have a no-op close method.\nThis uses the power of polymorphism to avoids all the null checking and ifs.", "author": "big-andy-coates", "createdAt": "2020-02-18T18:17:34Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java", "diffHunk": "@@ -80,10 +79,11 @@ public void handle(final RoutingContext routingContext) {\n     createQueryPublisherAsync(queryStreamArgs.get().sql, queryStreamArgs.get().properties, context)\n         .thenAccept(queryPublisher -> {\n \n-          final PushQueryHolder query = connectionQueryManager\n-              .createApiQuery(queryPublisher, routingContext.request());\n+          final PushQueryHolder query = queryPublisher.isPullQuery() ? null :\n+              connectionQueryManager.createApiQuery(queryPublisher, routingContext.request());", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNjYxOQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380906619", "bodyText": "+1 this would avoid (at a minimum) the two if checks below and at best future NPEs from less detailed oriented coders (like me)", "author": "agavra", "createdAt": "2020-02-18T20:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0OTQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNzQ5OQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380927499", "bodyText": "I think this is a matter of personal style. I think the current code is simple and straight to the point. Adding new types here seems overkill imho.", "author": "purplefox", "createdAt": "2020-02-18T20:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0OTQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMjQ5MQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381422491", "bodyText": "This is not a matter of style. Style is about where you put your brackets or tabs vs spaces.  This is about good programming patterns and OO principles.  In this case its leveraging polymorphism to avoid conditionals.", "author": "big-andy-coates", "createdAt": "2020-02-19T17:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0OTQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MDQ5MQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381450491", "bodyText": "I'd consider trading a single succint line of code for a new interface, probably 20+ lines of new code and changes, as overengineering it.", "author": "purplefox", "createdAt": "2020-02-19T18:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0OTQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "0283690b3b20d929266c4671f827d4c3bcbe566b", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\nindex 149a86d5bb..f2a4a97015 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\n\n@@ -79,13 +79,24 @@ public class QueryStreamHandler implements Handler<RoutingContext> {\n     createQueryPublisherAsync(queryStreamArgs.get().sql, queryStreamArgs.get().properties, context)\n         .thenAccept(queryPublisher -> {\n \n-          final PushQueryHolder query = queryPublisher.isPullQuery() ? null :\n-              connectionQueryManager.createApiQuery(queryPublisher, routingContext.request());\n+          final QueryResponseMetadata metadata;\n \n-          final QueryResponseMetadata metadata = new QueryResponseMetadata(\n-              query == null ? null : query.getId().toString(),\n-              queryPublisher.getColumnNames(),\n-              queryPublisher.getColumnTypes());\n+          if (queryPublisher.isPullQuery()) {\n+            metadata = new QueryResponseMetadata(\n+                queryPublisher.getColumnNames(),\n+                queryPublisher.getColumnTypes());\n+          } else {\n+            final PushQueryHolder query = connectionQueryManager\n+                .createApiQuery(queryPublisher, routingContext.request());\n+\n+            metadata = new QueryResponseMetadata(\n+                query.getId().toString(),\n+                queryPublisher.getColumnNames(),\n+                queryPublisher.getColumnTypes());\n+\n+            // When response is complete, publisher should be closed and query unregistered\n+            routingContext.response().endHandler(v -> query.close());\n+          }\n \n           queryStreamResponseWriter.writeMetadata(metadata);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MDc3Mw==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380850773", "bodyText": "Isn't client auth normally off, requested or required rather than simply on-off?", "author": "big-andy-coates", "createdAt": "2020-02-18T18:20:18Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,28 +37,51 @@\n           + \" as there are cores you want to use, as each instance is single threaded.\";\n \n   public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n   public static final String LISTEN_HOST_DOC =\n       \"The hostname to listen on\";\n \n   public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final int DEFAULT_LISTEN_PORT = 8088;\n   public static final String LISTEN_PORT_DOC =\n       \"The port to listen on\";\n \n-  public static final String KEY_PATH = propertyName(\"key.path\");\n-  public static final String KEY_PATH_DOC =\n-      \"Path to key file\";\n+  public static final String TLS_ENABLED = propertyName(\"tls.enabled\");\n+  public static final boolean DEFAULT_TLS_ENABLED = false;\n+  public static final String TLS_ENABLED_DOC =\n+      \"Is TLS enabled?\";\n \n-  public static final String CERT_PATH = propertyName(\"cert.path\");\n-  public static final String CERT_PATH_DOC =\n-      \"Path to cert file\";\n+  public static final String TLS_KEY_STORE_PATH = propertyName(\"tls.keystore.path\");\n+  public static final String TLS_KEY_STORE_PATH_DOC =\n+      \"Path to server key store\";\n+\n+  public static final String TLS_KEY_STORE_PASSWORD = propertyName(\"tls.keystore.password\");\n+  public static final String TLS_KEY_STORE_PASSWORD_DOC =\n+      \"Password for server key store\";\n+\n+  public static final String TLS_TRUST_STORE_PATH = propertyName(\"tls.truststore.path\");\n+  public static final String TLS_TRUST_STORE_PATH_DOC =\n+      \"Path to client trust store\";\n+\n+  public static final String TLS_TRUST_STORE_PASSWORD = propertyName(\"tls.truststore.password\");\n+  public static final String TLS_TRUST_STORE_PASSWORD_DOC =\n+      \"Password for client trust store\";\n+\n+  public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n+  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n+      \"Is client auth required?\";", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5ODQ5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380898496", "bodyText": "Yes, but I looked at these docs which are linked to from the KSQL docs and it appears to be binary for KSQL currently: https://docs.confluent.io/current/kafka-rest/config.html#kafka-rest-https-config which is why I have also made it binary here", "author": "purplefox", "createdAt": "2020-02-18T19:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MDc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMjY4Nw==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381422687", "bodyText": "Problem is, we can't extend this later as its a boolean. If you want binary, then I'd go with making this a string property that must be either  off or required. We can then add requested later if we want without having to add a new config type and deprecating this one.\nAlternatively, just add the three now.", "author": "big-andy-coates", "createdAt": "2020-02-19T17:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MDc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MDc1MA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381450750", "bodyText": "I've been trying to keep the configs as compatible with the current ksql as possible. If that's not. requirement then fine.", "author": "purplefox", "createdAt": "2020-02-19T18:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MDc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0283690b3b20d929266c4671f827d4c3bcbe566b", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\nindex 38a195b0ac..fa0885d6a0 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n\n@@ -68,9 +71,9 @@ public class ApiServerConfig extends AbstractConfig {\n       \"Password for client trust store\";\n \n   public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n-  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String DEFAULT_TLS_CLIENT_AUTH_REQUIRED = \"none\";\n   public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n-      \"Is client auth required?\";\n+      \"Is client auth required? One of none, request or required\";\n \n   public static final String WORKER_POOL_SIZE = propertyName(\"worker.pool.size\");\n   public static final String WORKER_POOL_DOC =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MTE2Nw==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380851167", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-02-18T18:21:01Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -40,16 +39,14 @@\n   private final Endpoints endpoints;\n   private final HttpServerOptions httpServerOptions;\n   private final Server server;\n-  private final WorkerExecutor workerExecutor;\n   private ConnectionQueryManager connectionQueryManager;\n   private HttpServer httpServer;\n \n   public ServerVerticle(final Endpoints endpoints, final HttpServerOptions httpServerOptions,\n-      final Server server, final WorkerExecutor workerExecutor) {\n+      final Server server) {", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMTIzOA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380931238", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-02-18T20:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MTE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex 5f9ccbbff0..a05565219d 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -44,9 +45,9 @@ public class ServerVerticle extends AbstractVerticle {\n \n   public ServerVerticle(final Endpoints endpoints, final HttpServerOptions httpServerOptions,\n       final Server server) {\n-    this.endpoints = endpoints;\n-    this.httpServerOptions = httpServerOptions;\n-    this.server = server;\n+    this.endpoints = Objects.requireNonNull(endpoints);\n+    this.httpServerOptions = Objects.requireNonNull(httpServerOptions);\n+    this.server = Objects.requireNonNull(server);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MjEzMQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380852131", "bodyText": "Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<String, Object> origs = config.originalsWithPrefix(\"\");\n          \n          \n            \n                Map<String, Object> origs = config.originals();", "author": "big-andy-coates", "createdAt": "2020-02-18T18:22:55Z", "path": "ksql-api/src/test/java/io/confluent/ksql/api/MaxQueriesTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static io.confluent.ksql.api.server.ErrorCodes.ERROR_MAX_PUSH_QUERIES_EXCEEDED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.PushQueryId;\n+import io.confluent.ksql.api.utils.QueryResponse;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.ext.web.client.HttpResponse;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+public class MaxQueriesTest extends BaseApiTest {\n+\n+  private static final int MAX_QUERIES = 10;\n+\n+  @Test\n+  public void shouldNotCreateMoreThanMaxQueries() throws Exception {\n+\n+    for (int i = 0; i < MAX_QUERIES + 4; i++) {\n+\n+      if (i >= MAX_QUERIES) {\n+        HttpResponse<Buffer> response = sendRequest(\"/query-stream\",\n+            DEFAULT_PUSH_QUERY_REQUEST_BODY.toBuffer());\n+        assertThat(response.statusCode(), is(400));\n+        QueryResponse queryResponse = new QueryResponse(response.bodyAsString());\n+        validateError(ERROR_MAX_PUSH_QUERIES_EXCEEDED, \"Maximum number of push queries exceeded\",\n+            queryResponse.responseObject);\n+      } else {\n+        // When:\n+        QueryResponse queryResponse = executePushQueryAndWaitForRows(\n+            DEFAULT_PUSH_QUERY_REQUEST_BODY);\n+        String queryId = queryResponse.responseObject.getString(\"queryId\");\n+\n+        // Then:\n+        assertThat(queryId, is(notNullValue()));\n+        assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n+      }\n+    }\n+\n+    assertThat(server.getQueryIDs(), hasSize(MAX_QUERIES));\n+  }\n+\n+  @Override\n+  protected ApiServerConfig createServerConfig() {\n+    ApiServerConfig config = super.createServerConfig();\n+    Map<String, Object> origs = config.originalsWithPrefix(\"\");", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5OTI3Nw==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380899277", "bodyText": "That's the first thing I looked for, but there doesn't seem to be any such method.", "author": "purplefox", "createdAt": "2020-02-18T19:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MjEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMzM2Ng==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381423366", "bodyText": "There really is!", "author": "big-andy-coates", "createdAt": "2020-02-19T17:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MjEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MTc0MQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381451741", "bodyText": "It seems there are two AbstractConfig classes - one in common and one in Kafka, don't know why!", "author": "purplefox", "createdAt": "2020-02-19T18:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MjEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0283690b3b20d929266c4671f827d4c3bcbe566b", "chunk": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/MaxQueriesTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/MaxQueriesTest.java\nindex c79ed5b573..c6d7d56452 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/MaxQueriesTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/MaxQueriesTest.java\n\n@@ -63,7 +63,7 @@ public class MaxQueriesTest extends BaseApiTest {\n   @Override\n   protected ApiServerConfig createServerConfig() {\n     ApiServerConfig config = super.createServerConfig();\n-    Map<String, Object> origs = config.originalsWithPrefix(\"\");\n+    Map<String, Object> origs = config.originals();\n     origs.put(ApiServerConfig.MAX_PUSH_QUERIES, MAX_QUERIES);\n     return new ApiServerConfig(origs);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzMyOA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380853328", "bodyText": "It's preferable to create a test fixture, rather than use base classes in tests.  You can have any number of test fixtures in a class, but you can only have one base classs!\nTake a look at TestKsqlRestApp or EmbeddedSingleNodeKafkaCluster for examples.", "author": "big-andy-coates", "createdAt": "2020-02-18T18:25:15Z", "path": "ksql-api/src/test/java/io/confluent/ksql/api/BaseApiTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static io.confluent.ksql.test.util.AssertEventually.assertThatEventually;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.api.impl.VertxCompletableFuture;\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.api.utils.ListRowGenerator;\n+import io.confluent.ksql.api.utils.QueryResponse;\n+import io.confluent.ksql.api.utils.ReceiveStream;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpVersion;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.ext.web.codec.BodyCodec;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BaseApiTest {", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NjM5OQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380956399", "bodyText": "I like the pattern of base classes for tests, we want to run the same tests for different config and that seems the simplest way to do it. I don't really see how a test fixture would help or add here.", "author": "purplefox", "createdAt": "2020-02-18T21:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNzk3Mg==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381427972", "bodyText": "There aren't any tests that I can see in BaseApiTest, so this doesn't seem to be about running a common set of tests with multiple configs.\nBaseApiTest looks to be more a setUp method, a overrideaable set of config and some helper methods.  The pattern we use for such is a unit TestResource as this allows composition of different test resources, where as a base class only allows one.\nPlease take a look at TestKsqlRestApp as a good example of how to knock up a simple junit TestResouce.  It really is a better pattern than a base class.", "author": "big-andy-coates", "createdAt": "2020-02-19T17:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NDQyNw==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381454427", "bodyText": "If it's not broke don't fix it. The base class abstraction works fine for now. I've been using this pattern for around 20 years and so far haven't come across a situation where I've had a requirement to inherit from multiple base classes. I suggest the most efficient thing to do would be to wait until that requirement happens and refactor it to.a fixture then, rather than expend unnecessary effort doing it now.", "author": "purplefox", "createdAt": "2020-02-19T18:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "0283690b3b20d929266c4671f827d4c3bcbe566b", "chunk": "diff --git a/ksql-api/src/test/java/io/confluent/ksql/api/BaseApiTest.java b/ksql-api/src/test/java/io/confluent/ksql/api/BaseApiTest.java\nindex f04586d5f6..6334a0fc41 100644\n--- a/ksql-api/src/test/java/io/confluent/ksql/api/BaseApiTest.java\n+++ b/ksql-api/src/test/java/io/confluent/ksql/api/BaseApiTest.java\n\n@@ -88,6 +88,9 @@ public class BaseApiTest {\n     if (server != null) {\n       server.stop();\n     }\n+    if (vertx != null) {\n+      vertx.close();\n+    }\n   }\n \n   protected ApiServerConfig createServerConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTM2Ng==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380855366", "bodyText": "Not sure how this change is related to the subject of this PR.  Should this be in this PR?", "author": "big-andy-coates", "createdAt": "2020-02-18T18:29:04Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/impl/Utils.java", "diffHunk": "@@ -49,53 +48,19 @@ private Utils() {\n   }\n \n   public static void checkIsWorker() {\n-    checkThread(true);\n-  }\n-\n-  public static void checkIsNotWorker() {\n-    checkThread(false);\n-  }\n-\n-  public static boolean isEventLoopThread() {\n-    return isWorkerThread(false);\n-  }\n-\n-  public static boolean isWorkerThread() {\n-    return isWorkerThread(true);\n-  }\n-\n-  private static boolean isWorkerThread(final boolean worker) {\n-    final Thread thread = Thread.currentThread();\n-    if (!(thread instanceof VertxThread)) {\n-      throw new IllegalStateException(\"Not a Vert.x thread \" + thread);\n-    }\n-    final VertxThread vertxThread = (VertxThread) thread;\n-    return vertxThread.isWorker() == worker;\n-  }\n-\n-  private static void checkThread(final boolean worker) {\n-    if (!isWorkerThread(worker)) {\n-      throw new IllegalStateException(\"Not a \" + (worker ? \"worker\" : \"event loop\") + \" thread\");", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5OTUyNQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380899525", "bodyText": "It's from the previously stacked PR.", "author": "purplefox", "createdAt": "2020-02-18T19:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTM2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTUxNA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380855514", "bodyText": "Not sure how this change is related to the subject of this PR.  Should this be in this PR?", "author": "big-andy-coates", "createdAt": "2020-02-18T18:29:25Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,28 +37,51 @@\n           + \" as there are cores you want to use, as each instance is single threaded.\";\n \n   public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n   public static final String LISTEN_HOST_DOC =\n       \"The hostname to listen on\";\n \n   public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final int DEFAULT_LISTEN_PORT = 8088;\n   public static final String LISTEN_PORT_DOC =\n       \"The port to listen on\";\n \n-  public static final String KEY_PATH = propertyName(\"key.path\");\n-  public static final String KEY_PATH_DOC =\n-      \"Path to key file\";\n+  public static final String TLS_ENABLED = propertyName(\"tls.enabled\");\n+  public static final boolean DEFAULT_TLS_ENABLED = false;\n+  public static final String TLS_ENABLED_DOC =\n+      \"Is TLS enabled?\";\n \n-  public static final String CERT_PATH = propertyName(\"cert.path\");\n-  public static final String CERT_PATH_DOC =\n-      \"Path to cert file\";\n+  public static final String TLS_KEY_STORE_PATH = propertyName(\"tls.keystore.path\");\n+  public static final String TLS_KEY_STORE_PATH_DOC =\n+      \"Path to server key store\";\n+\n+  public static final String TLS_KEY_STORE_PASSWORD = propertyName(\"tls.keystore.password\");\n+  public static final String TLS_KEY_STORE_PASSWORD_DOC =\n+      \"Password for server key store\";\n+\n+  public static final String TLS_TRUST_STORE_PATH = propertyName(\"tls.truststore.path\");\n+  public static final String TLS_TRUST_STORE_PATH_DOC =\n+      \"Path to client trust store\";\n+\n+  public static final String TLS_TRUST_STORE_PASSWORD = propertyName(\"tls.truststore.password\");\n+  public static final String TLS_TRUST_STORE_PASSWORD_DOC =\n+      \"Password for client trust store\";\n+\n+  public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n+  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg5OTY2Ng==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380899666", "bodyText": "From previously stacked PR", "author": "purplefox", "createdAt": "2020-02-18T19:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyODIzMA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381428230", "bodyText": "Yeah, worked it out eventually - can you call this out in the description next time please?", "author": "big-andy-coates", "createdAt": "2020-02-19T17:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "0283690b3b20d929266c4671f827d4c3bcbe566b", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\nindex 38a195b0ac..fa0885d6a0 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n\n@@ -68,9 +71,9 @@ public class ApiServerConfig extends AbstractConfig {\n       \"Password for client trust store\";\n \n   public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n-  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String DEFAULT_TLS_CLIENT_AUTH_REQUIRED = \"none\";\n   public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n-      \"Is client auth required?\";\n+      \"Is client auth required? One of none, request or required\";\n \n   public static final String WORKER_POOL_SIZE = propertyName(\"worker.pool.size\");\n   public static final String WORKER_POOL_DOC =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTIyNA==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380881224", "bodyText": "We have a similar config for limiting the number of persistent push queries: \n  \n    \n      ksql/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n    \n    \n         Line 118\n      in\n      f21823f\n    \n    \n    \n    \n\n        \n          \n           \"ksql.query.persistent.active.limit\"; \n        \n    \n  \n\n\nIf this limit is for transient push queries, we should look to use consistent naming. If its for all push queries, we should try to consolidate the configs.", "author": "rodesai", "createdAt": "2020-02-18T19:18:46Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,28 +37,51 @@\n           + \" as there are cores you want to use, as each instance is single threaded.\";\n \n   public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n   public static final String LISTEN_HOST_DOC =\n       \"The hostname to listen on\";\n \n   public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final int DEFAULT_LISTEN_PORT = 8088;\n   public static final String LISTEN_PORT_DOC =\n       \"The port to listen on\";\n \n-  public static final String KEY_PATH = propertyName(\"key.path\");\n-  public static final String KEY_PATH_DOC =\n-      \"Path to key file\";\n+  public static final String TLS_ENABLED = propertyName(\"tls.enabled\");\n+  public static final boolean DEFAULT_TLS_ENABLED = false;\n+  public static final String TLS_ENABLED_DOC =\n+      \"Is TLS enabled?\";\n \n-  public static final String CERT_PATH = propertyName(\"cert.path\");\n-  public static final String CERT_PATH_DOC =\n-      \"Path to cert file\";\n+  public static final String TLS_KEY_STORE_PATH = propertyName(\"tls.keystore.path\");\n+  public static final String TLS_KEY_STORE_PATH_DOC =\n+      \"Path to server key store\";\n+\n+  public static final String TLS_KEY_STORE_PASSWORD = propertyName(\"tls.keystore.password\");\n+  public static final String TLS_KEY_STORE_PASSWORD_DOC =\n+      \"Password for server key store\";\n+\n+  public static final String TLS_TRUST_STORE_PATH = propertyName(\"tls.truststore.path\");\n+  public static final String TLS_TRUST_STORE_PATH_DOC =\n+      \"Path to client trust store\";\n+\n+  public static final String TLS_TRUST_STORE_PASSWORD = propertyName(\"tls.truststore.password\");\n+  public static final String TLS_TRUST_STORE_PASSWORD_DOC =\n+      \"Password for client trust store\";\n+\n+  public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n+  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n+      \"Is client auth required?\";\n \n   public static final String WORKER_POOL_SIZE = propertyName(\"worker.pool.size\");\n   public static final String WORKER_POOL_DOC =\n       \"Max number of worker threads for executing blocking code\";\n   public static final int DEFAULT_WORKER_POOL_SIZE = 100;\n \n+  public static final String MAX_PUSH_QUERIES = propertyName(\"max.push.queries\");", "originalCommit": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNDkyNg==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380924926", "bodyText": "As a general thing, right now, all the new api config are prefixed with \"ksql.api\" - they need to have some common prefix as that's what the CommonConfig class expects. Once we've migrated all the old API stuff we can consolidate things.", "author": "purplefox", "createdAt": "2020-02-18T20:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "0283690b3b20d929266c4671f827d4c3bcbe566b", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\nindex 38a195b0ac..fa0885d6a0 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n\n@@ -68,9 +71,9 @@ public class ApiServerConfig extends AbstractConfig {\n       \"Password for client trust store\";\n \n   public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n-  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String DEFAULT_TLS_CLIENT_AUTH_REQUIRED = \"none\";\n   public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n-      \"Is client auth required?\";\n+      \"Is client auth required? One of none, request or required\";\n \n   public static final String WORKER_POOL_SIZE = propertyName(\"worker.pool.size\");\n   public static final String WORKER_POOL_DOC =\n"}}, {"oid": "6064c1b1a6d56091e09a0b495d5beca73a366b08", "url": "https://github.com/confluentinc/ksql/commit/6064c1b1a6d56091e09a0b495d5beca73a366b08", "message": "query limits", "committedDate": "2020-02-18T20:39:42Z", "type": "forcePushed"}, {"oid": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "url": "https://github.com/confluentinc/ksql/commit/66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "message": "Added some config validators", "committedDate": "2020-02-18T22:40:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNTI5OQ==", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381425299", "bodyText": "Can .you move this to ConfigValidators please?\nEven better,  change the existing zeroOrPositive to be more flexible, e.g. to become equalToOrGreaterThan(0),  equalToOrGreaterThan(1), etc.", "author": "big-andy-coates", "createdAt": "2020-02-19T17:22:50Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -140,11 +151,35 @@ private static String propertyName(final String name) {\n           WORKER_POOL_SIZE,\n           Type.INT,\n           DEFAULT_WORKER_POOL_SIZE,\n+          zeroOrPositive(),\n           Importance.MEDIUM,\n-          WORKER_POOL_DOC);\n+          WORKER_POOL_DOC)\n+      .define(\n+          MAX_PUSH_QUERIES,\n+          Type.INT,\n+          DEFAULT_MAX_PUSH_QUERIES,\n+          zeroOrPositive(),\n+          Importance.MEDIUM,\n+          MAX_PUSH_QUERIES_DOC);\n \n   public ApiServerConfig(final Map<?, ?> map) {\n     super(CONFIG_DEF, map);\n   }\n \n+  private static Validator oneOrMore() {\n+    return (name, val) -> {\n+      if (val instanceof Long) {\n+        if (((Long) val) < 1) {\n+          throw new ConfigException(name, val, \"Not >= 1\");\n+        }\n+      } else if (val instanceof Integer) {\n+        if (((Integer) val) < 1) {\n+          throw new ConfigException(name, val, \"Not >= 1\");\n+        }\n+      } else {\n+        throw new IllegalArgumentException(\"validator should only be used with int, long\");\n+      }\n+    };\n+  }", "originalCommit": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "635b4b41661710d03b40d44412a50910ff8f2cfe", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\nindex 754e68259f..38a195b0ac 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java\n\n@@ -151,14 +145,12 @@ public class ApiServerConfig extends AbstractConfig {\n           WORKER_POOL_SIZE,\n           Type.INT,\n           DEFAULT_WORKER_POOL_SIZE,\n-          zeroOrPositive(),\n           Importance.MEDIUM,\n           WORKER_POOL_DOC)\n       .define(\n           MAX_PUSH_QUERIES,\n           Type.INT,\n           DEFAULT_MAX_PUSH_QUERIES,\n-          zeroOrPositive(),\n           Importance.MEDIUM,\n           MAX_PUSH_QUERIES_DOC);\n \n"}}, {"oid": "635b4b41661710d03b40d44412a50910ff8f2cfe", "url": "https://github.com/confluentinc/ksql/commit/635b4b41661710d03b40d44412a50910ff8f2cfe", "message": "query limits", "committedDate": "2020-02-19T20:44:31Z", "type": "commit"}, {"oid": "581a7d5f8edfd98adbdfaac01df76e6a37e6cf88", "url": "https://github.com/confluentinc/ksql/commit/581a7d5f8edfd98adbdfaac01df76e6a37e6cf88", "message": "review tweak", "committedDate": "2020-02-19T20:44:31Z", "type": "commit"}, {"oid": "63fd5bca9e8c42f09d8326c7163ac2d64d3a21e4", "url": "https://github.com/confluentinc/ksql/commit/63fd5bca9e8c42f09d8326c7163ac2d64d3a21e4", "message": "tweak", "committedDate": "2020-02-19T20:44:31Z", "type": "commit"}, {"oid": "143debbb855230596db0adb3ee5c9228643e28c2", "url": "https://github.com/confluentinc/ksql/commit/143debbb855230596db0adb3ee5c9228643e28c2", "message": "Added some config validators", "committedDate": "2020-02-19T20:44:31Z", "type": "commit"}, {"oid": "0283690b3b20d929266c4671f827d4c3bcbe566b", "url": "https://github.com/confluentinc/ksql/commit/0283690b3b20d929266c4671f827d4c3bcbe566b", "message": "review changes", "committedDate": "2020-02-19T20:44:32Z", "type": "commit"}, {"oid": "0283690b3b20d929266c4671f827d4c3bcbe566b", "url": "https://github.com/confluentinc/ksql/commit/0283690b3b20d929266c4671f827d4c3bcbe566b", "message": "review changes", "committedDate": "2020-02-19T20:44:32Z", "type": "forcePushed"}]}