{"pr_number": 5542, "pr_title": "feat: support TIMESTAMP being a key column", "pr_createdAt": "2020-06-03T14:59:47Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5542", "timeline": [{"oid": "3525b3697e697ee75f7cfeb578eb121fc4d3768e", "url": "https://github.com/confluentinc/ksql/commit/3525b3697e697ee75f7cfeb578eb121fc4d3768e", "message": "feat: support TIMESTAMP being a key column\n\nfixes: https://github.com/confluentinc/ksql/issues/5538\n\nThe `TIMESTAMP` property that can be specified in the `WITH` clause can now reference key columns.\n\nFixes confusing error message if the user does reference a key column as their Timestamp column:\n\n```sql\nCREATE TABLE FOO (K BIGINT PRIMARY KEY, NAME STRING)\n    WITH (TIMESTAMP='K', ...);\n\n -- error: The TIMESTAMP column set in the WITH clause does not exist in the schema: K\n ```\n\n When clearly `K` is part of the schema!", "committedDate": "2020-06-03T14:58:42Z", "type": "commit"}, {"oid": "b387156899b00baeeee9fd7f78b3dab512352842", "url": "https://github.com/confluentinc/ksql/commit/b387156899b00baeeee9fd7f78b3dab512352842", "message": "test: historical plans", "committedDate": "2020-06-03T16:06:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMjIzMA==", "url": "https://github.com/confluentinc/ksql/pull/5542#discussion_r434732230", "bodyText": "nit: I don't think we need these safeX do we? string concatenation should handle it", "author": "agavra", "createdAt": "2020-06-03T17:22:29Z", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -71,11 +70,15 @@ TimestampExtractor getDelegate() {\n     return delegate;\n   }\n \n-  private long handleFailure(final Object value, final RuntimeException e) {\n+  private long handleFailure(final Object key, final Object value, final RuntimeException e) {\n+    final Object safeKey = ObjectUtils.defaultIfNull(key, \"null\");\n     final Object safeValue = ObjectUtils.defaultIfNull(value, \"null\");", "originalCommit": "3525b3697e697ee75f7cfeb578eb121fc4d3768e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDE5NA==", "url": "https://github.com/confluentinc/ksql/pull/5542#discussion_r434750194", "bodyText": "Good point - was blindingly cutting and pasting.", "author": "big-andy-coates", "createdAt": "2020-06-03T17:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMjIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "3e5d0eaa3fa8cc125df162d8547ccdac48fd7651", "chunk": "diff --git a/ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java b/ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java\nindex e8d42e2431..3250757348 100644\n--- a/ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java\n+++ b/ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java\n\n@@ -71,13 +70,10 @@ public class LoggingTimestampExtractor implements KsqlTimestampExtractor {\n   }\n \n   private long handleFailure(final Object key, final Object value, final RuntimeException e) {\n-    final Object safeKey = ObjectUtils.defaultIfNull(key, \"null\");\n-    final Object safeValue = ObjectUtils.defaultIfNull(value, \"null\");\n-\n     logger.error(RecordProcessingError.recordProcessingError(\n         \"Failed to extract timestamp from row\",\n         e,\n-        () -> \"key:\" + safeKey + \", value:\" + safeValue\n+        () -> \"key:\" + key + \", value:\" + value\n     ));\n \n     if (failOnError) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczODQ2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5542#discussion_r434738461", "bodyText": "what happens if the value of the key is null? do we properly handle that? (Lots of cloud errors come from having timestamp extractors that have null values)", "author": "agavra", "createdAt": "2020-06-03T17:33:01Z", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/TimestampColumnExtractors.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import com.google.common.base.Preconditions;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.Windowed;\n+\n+/**\n+ * Extracts a column from the ConsumerRecord\n+ */\n+final class TimestampColumnExtractors {\n+\n+  private TimestampColumnExtractors() {\n+  }\n+\n+  static ColumnExtractor create(final Column column) {\n+    final int index = column.index();\n+    Preconditions.checkArgument(index >= 0, \"negative index: \" + index);\n+\n+    return column.namespace() == Namespace.KEY\n+        ? new KeyColumnExtractor(index)\n+        : new ValueColumnExtractor(index);\n+  }\n+\n+  private static class KeyColumnExtractor implements ColumnExtractor {\n+\n+    private final int index;\n+\n+    KeyColumnExtractor(final int index) {\n+      this.index = index;\n+    }\n+\n+    @Override\n+    public Object extract(final Object key, final GenericRow value) {\n+      final Struct struct = getStruct(key);\n+      final Field field = struct.schema().fields().get(index);\n+      return struct.get(field);", "originalCommit": "3525b3697e697ee75f7cfeb578eb121fc4d3768e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0OTcxNA==", "url": "https://github.com/confluentinc/ksql/pull/5542#discussion_r434749714", "bodyText": "It should throw in the same way a null value would fail.  The higher level extractor then decides if this is fatal or not.", "author": "big-andy-coates", "createdAt": "2020-06-03T17:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczODQ2MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3e5d0eaa3fa8cc125df162d8547ccdac48fd7651", "url": "https://github.com/confluentinc/ksql/commit/3e5d0eaa3fa8cc125df162d8547ccdac48fd7651", "message": "chore: requested changes", "committedDate": "2020-06-03T17:56:54Z", "type": "commit"}, {"oid": "48dd76d1dcf72a8a2479f3ebc7d131d6ddd75d07", "url": "https://github.com/confluentinc/ksql/commit/48dd76d1dcf72a8a2479f3ebc7d131d6ddd75d07", "message": "chore: fix tests", "committedDate": "2020-06-03T18:27:46Z", "type": "commit"}, {"oid": "a51c5b2cb69eb54fd8fdf6c9046f2ab378e3b99b", "url": "https://github.com/confluentinc/ksql/commit/a51c5b2cb69eb54fd8fdf6c9046f2ab378e3b99b", "message": "test: historical plans", "committedDate": "2020-06-03T19:20:36Z", "type": "commit"}]}