{"pr_number": 4297, "pr_title": "fix: deadlock when closing transient push query", "pr_createdAt": "2020-01-13T17:26:26Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4297", "timeline": [{"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950", "url": "https://github.com/confluentinc/ksql/commit/9cfcbd1590712267f39aec7a21529f64b24bb950", "message": "fix: deadlock when closing transient push query\n\nfixes: https://github.com/confluentinc/ksql/issues/4296\n\nThe produce side not calls `offer` in a loop, with a short timeout, to try and put the row into the blocking queue. When the consume side closes the query, e.g. on an `EOFException` if the user has closed the connection, the query first closes the queue; setting a flag the producers are checking on each loop; causing any producers to exit the loop. Then it can safely close the KS topology.", "committedDate": "2020-01-13T17:25:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1MzY0NA==", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365953644", "bodyText": "nit: the name makes it sound like a it's a queue of queries, not a blocking queue for a query. thoughts on BlockingEventQueue or BlockingRowQueue (a queue that fills up with events/rows)?", "author": "agavra", "createdAt": "2020-01-13T18:18:50Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {", "originalCommit": "9cfcbd1590712267f39aec7a21529f64b24bb950", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI1OTk1Mg==", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r366259952", "bodyText": "sure.", "author": "big-andy-coates", "createdAt": "2020-01-14T10:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1MzY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c600ce5b2a7ccc17e5e7d5d1976711c815fa1b06", "chunk": "diff --git a/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java b/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\nsimilarity index 80%\nrename from ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java\nrename to ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\nindex ebdae3c0a0..6512ec9e15 100644\n--- a/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java\n+++ b/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\n\n@@ -17,6 +17,7 @@ package io.confluent.ksql.query;\n \n import io.confluent.ksql.GenericRow;\n import java.util.Collection;\n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.TimeUnit;\n import org.apache.kafka.streams.KeyValue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1Mzk3OQ==", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365953979", "bodyText": "would be nice to also document this (or add documentation to LimitHandler) to describe when exactly the limit is considered reached", "author": "agavra", "createdAt": "2020-01-13T18:19:34Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {\n+\n+  void setLimitHandler(LimitHandler limitHandler);", "originalCommit": "9cfcbd1590712267f39aec7a21529f64b24bb950", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI2MDA3OQ==", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r366260079", "bodyText": "sure", "author": "big-andy-coates", "createdAt": "2020-01-14T10:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1Mzk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c600ce5b2a7ccc17e5e7d5d1976711c815fa1b06", "chunk": "diff --git a/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java b/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\nsimilarity index 80%\nrename from ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java\nrename to ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\nindex ebdae3c0a0..6512ec9e15 100644\n--- a/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java\n+++ b/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\n\n@@ -17,6 +17,7 @@ package io.confluent.ksql.query;\n \n import io.confluent.ksql.GenericRow;\n import java.util.Collection;\n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.TimeUnit;\n import org.apache.kafka.streams.KeyValue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NDE5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365954196", "bodyText": "self-referential javadoc?", "author": "agavra", "createdAt": "2020-01-13T18:19:58Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {\n+\n+  void setLimitHandler(LimitHandler limitHandler);\n+\n+  /**\n+   * Poll the queue for a single row\n+   *\n+   * @see BlockingQueryQueue#poll(long, TimeUnit)\n+   */\n+  KeyValue<String, GenericRow> poll(long timeout, TimeUnit unit)\n+      throws InterruptedException;\n+\n+  /**\n+   * Drain the queue to the supplied {@code collection}.\n+   *\n+   * @see BlockingQueryQueue#drainTo(Collection)", "originalCommit": "9cfcbd1590712267f39aec7a21529f64b24bb950", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI2MDE2Nw==", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r366260167", "bodyText": "oops", "author": "big-andy-coates", "createdAt": "2020-01-14T10:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NDE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c600ce5b2a7ccc17e5e7d5d1976711c815fa1b06", "chunk": "diff --git a/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java b/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\nsimilarity index 80%\nrename from ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java\nrename to ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\nindex ebdae3c0a0..6512ec9e15 100644\n--- a/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java\n+++ b/ksql-engine/src/main/java/io/confluent/ksql/query/BlockingRowQueue.java\n\n@@ -17,6 +17,7 @@ package io.confluent.ksql.query;\n \n import io.confluent.ksql.GenericRow;\n import java.util.Collection;\n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.TimeUnit;\n import org.apache.kafka.streams.KeyValue;\n \n"}}, {"oid": "c30385e68401fbc2599e74f5ca8d009c865704ee", "url": "https://github.com/confluentinc/ksql/commit/c30385e68401fbc2599e74f5ca8d009c865704ee", "message": "fix: spotbugs", "committedDate": "2020-01-14T10:35:27Z", "type": "commit"}, {"oid": "c600ce5b2a7ccc17e5e7d5d1976711c815fa1b06", "url": "https://github.com/confluentinc/ksql/commit/c600ce5b2a7ccc17e5e7d5d1976711c815fa1b06", "message": "chore: make Almog's requested changes", "committedDate": "2020-01-14T10:39:01Z", "type": "commit"}]}