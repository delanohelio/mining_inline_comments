{"pr_number": 5877, "pr_title": "feat: New ksql.properties.overrides.denylist to deny clients configs overrides", "pr_createdAt": "2020-07-24T17:19:16Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5877", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyMDc4Nw==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r461720787", "bodyText": "I feel like this user experience is a little weird. The error message should be more descriptive, like: \"A property override was set locally for a property that the server prohibits overrides for: {}\"", "author": "agavra", "createdAt": "2020-07-28T16:39:43Z", "path": "ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertThrows;\n+\n+public class DenyListPropertyValidatorTest {\n+  private DenyListPropertyValidator validator;\n+\n+  @Before\n+  public void setUp() {\n+    validator = new DenyListPropertyValidator(Arrays.asList(\n+        \"immutable-property\"\n+    ));\n+  }\n+\n+  @Test\n+  public void shouldThrowOnDenyListedProperty() {\n+    // When:\n+    final KsqlException e = assertThrows(\n+        KsqlException.class,\n+        () -> validator.validateAll(ImmutableMap.of(\n+            \"immutable-property\", \"v1\",\n+            \"anything\", \"v2\"\n+        ))\n+    );\n+\n+    // Then:\n+    assertThat(e.getMessage(), containsString(\n+        \"Cannot override property 'immutable-property'\"", "originalCommit": "2a6e624bf05cfbb2837b32bba61f3af3a3b1cfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4MTc0Mg==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r463781742", "bodyText": "Done. I added your recommendation,", "author": "spena", "createdAt": "2020-07-31T19:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyMDc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "chunk": "diff --git a/ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java b/ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java\nindex 243e45ffa8..f8cf8171d5 100644\n--- a/ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java\n+++ b/ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java\n\n@@ -48,8 +48,10 @@ public class DenyListPropertyValidatorTest {\n \n     // Then:\n     assertThat(e.getMessage(), containsString(\n-        \"Cannot override property 'immutable-property'\"\n+        \"A property override was set locally for a property that the server prohibits \"\n+            + \"overrides for: 'immutable-property'\"\n     ));\n+\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNTYyMw==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r461725623", "bodyText": "it seems weird to need to do this validation at each endpoint, what if we add another one in the future? is there a place in the engine we can do this validation in one place that would work for all endpoints?", "author": "agavra", "createdAt": "2020-07-28T16:47:28Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -214,15 +219,21 @@ private EndpointResponse handleStatement(\n               statement.getStatement())\n       );\n \n+      final Map<String, Object> requestProperties = request.getRequestProperties();", "originalCommit": "2a6e624bf05cfbb2837b32bba61f3af3a3b1cfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NTM4Ng==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r463785386", "bodyText": "It's hard to find a good place for this. I initially wanted the validation to happen inside the getRequestProperties, but I need a KsqlConfig inside the request which is created by the Vert.x endpoint code. Will require some refactoring just to pass the KsqlConfig.\nI looked doing it in the engine.execute(), but it's risky too if the request properties are obtained before calling the execute. See the below code as an example:\nfinal KsqlEntityList entities = handler.execute(\n          securityContext,\n          statements,\n          new SessionProperties(\n              configProperties,\n              localHost,\n              localUrl,\n              requestConfig.getBoolean(KsqlRequestConfig.KSQL_REQUEST_INTERNAL_REQUEST)\n          )\n      );\n\nThe requestConfig.getBoolean(KsqlRequestConfig.KSQL_REQUEST_INTERNAL_REQUEST) won't be validated if we do the properties validation inside the Engine. If we encapsulate it in the Engine, then developers won't know there is some validation done inside. Here at least, if someone looks at the endpoint to add another endpoint, they could see there is some validation to do in the properties.", "author": "spena", "createdAt": "2020-07-31T19:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNTYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3OTQ3NQ==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464579475", "bodyText": "The engine is littered with code that passes the KsqlConfig ksqlConfig and Map<String, ?> overrides pair around.  I think the overrides is now mostly being correctly applied before the config is used... but... it's pretty ugly and unclear if the config you've got has overrides or not.\nI've thought for a while that it would be much cleaner to have:\n\nKsqlConfig which is always the server config.\nSessionConfig which wraps a KsqlConfig and a map of overrides.\n\nHeadless mode just has a single session, where as each user request can build its own SessionConfig and pass this around, rather than the two params.\nIdeally, the engine would take SessionConfig, not KsqlConfig.  SessionConfig can have a very similar / same interface as KsqlConfig.\nThe SessionConfig constructor, which takes the server's KsqlConfig and the map of overrides can then validate the overrides, i.e. only one place for override validation.\nThe SessionConfig would allow access to the serverConfig, then overrides and then 'mergedConfig`.  Different parts of the code need each of these,  if memory serves me right.\nOf course, this is a much bigger change. Simple, but wide ranging.  However, I wonder if this PR could start us down this road (Assuming we agree it's a good idea).  For example, this PR could add the SessionConfig class, and pass this around in the rest-server model, before converting to a KsqlConfig that's passed to the engine.  If you want to also switch the engine to use SessionConfig, then awesome - but maybe in follow up PR.", "author": "big-andy-coates", "createdAt": "2020-08-03T18:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNTYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTY2NA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465361664", "bodyText": "I addressed the rest of the feedback except this. I found there is an existing SessionProperties that is passed to the KsqlEngine to execute the request and we could use it. I will create a Builder for it that accepts the DenyListPropertyValidator on its constructor, and then build the SessionProperties on every request. The build will fail if the request contains overrides that are prohibited.\nI will added in a another commit.", "author": "spena", "createdAt": "2020-08-04T22:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNTYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3NjE2Nw==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465776167", "bodyText": "@big-andy-coates I'd like to do this change in a follow-up PR to close this deny list task. The SessionProperties is only supported in the KsqlResource, and I need changes in the StreamedQueryResource and WSQueryEndpoint and other internal methods, so better doing it as a different patch.\nIf you're good with this current PR, could you approve it?", "author": "spena", "createdAt": "2020-08-05T14:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNTYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\nindex bcb893bca3..42bcad345b 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n\n@@ -219,9 +221,6 @@ public class StreamedQueryResource implements KsqlConfigurable {\n               statement.getStatement())\n       );\n \n-      final Map<String, Object> requestProperties = request.getRequestProperties();\n-      denyListPropertyValidator.validateAll(requestProperties);\n-\n       final Map<String, Object> configProperties = request.getConfigOverrides();\n       denyListPropertyValidator.validateAll(configProperties);\n \n"}}, {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "url": "https://github.com/confluentinc/ksql/commit/d4e555d935837d87f3918cf8cf0215efec1ea0ee", "message": "fix: Address 1st round of reviews\n\n- change error message for a more descriptive error", "committedDate": "2020-07-31T19:04:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MTcyNQ==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464571725", "bodyText": "Could throw an exception with ALL the immutable properties, for a better UX.", "author": "big-andy-coates", "createdAt": "2020-08-03T17:54:10Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/properties/DenyListPropertyValidator.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Class that validates if a property, or list of properties, is part of a list of denied\n+ * properties.\n+ */\n+public class DenyListPropertyValidator {\n+  private final Set<String> immutableProps;\n+\n+  public DenyListPropertyValidator(final Collection<String> immutableProps) {\n+    this.immutableProps = ImmutableSet.copyOf(\n+        Objects.requireNonNull(immutableProps, \"immutableProps\"));\n+  }\n+\n+  /**\n+   * Validates if a list of properties are part of the list of denied properties.\n+   * @throws if a property is part of the denied list.\n+   */\n+  public void validateAll(final Map<String, Object> properties) {\n+    properties.forEach((name ,v) -> {\n+      if (immutableProps.contains(name)) {\n+        throw new KsqlException(String.format(\"A property override was set locally for a \"\n+            + \"property that the server prohibits overrides for: '%s'\", name));\n+      }\n+    });", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MDA5NA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465360094", "bodyText": "Done. It now throws:\nOne or more properties overrides set locally are prohibited by the KSQL server (use UNSET to reset their default value): {prop1, prop2, prop3, ...}", "author": "spena", "createdAt": "2020-08-04T22:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MTcyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-common/src/main/java/io/confluent/ksql/properties/DenyListPropertyValidator.java b/ksqldb-common/src/main/java/io/confluent/ksql/properties/DenyListPropertyValidator.java\nindex 9a2b75cf41..5d6dde7f50 100644\n--- a/ksqldb-common/src/main/java/io/confluent/ksql/properties/DenyListPropertyValidator.java\n+++ b/ksqldb-common/src/main/java/io/confluent/ksql/properties/DenyListPropertyValidator.java\n\n@@ -16,6 +16,7 @@\n package io.confluent.ksql.properties;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n import io.confluent.ksql.util.KsqlException;\n \n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjE1Ng==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464572156", "bodyText": "nit: this can be inlined. It isn't referenced from else where.", "author": "big-andy-coates", "createdAt": "2020-08-03T17:54:55Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -316,6 +316,12 @@\n       .put(KSQL_STREAMS_PREFIX + StreamsConfig.MAX_TASK_IDLE_MS_CONFIG, 500L)\n       .build();\n \n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST =\n+      \"ksql.properties.overrides.denylist\";\n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DEFAULT = \"\";", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1OTY4MA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465359680", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-04T22:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex f359470fdd..c75c6441e4 100644\n--- a/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -316,10 +316,26 @@ public class KsqlConfig extends AbstractConfig {\n       .put(KSQL_STREAMS_PREFIX + StreamsConfig.MAX_TASK_IDLE_MS_CONFIG, 500L)\n       .build();\n \n+  public static final String KSQL_QUERY_RETRY_BACKOFF_INITIAL_MS\n+      = \"ksql.query.retry.backoff.initial.ms\";\n+  public static final Long KSQL_QUERY_RETRY_BACKOFF_INITIAL_MS_DEFAULT = 15000L;\n+  public static final String KSQL_QUERY_RETRY_BACKOFF_INITIAL_MS_DOC = \"The initial amount of time \"\n+      + \"to wait before attempting to retry a persistent query in ERROR state.\";\n+\n+  public static final String KSQL_QUERY_RETRY_BACKOFF_MAX_MS = \"ksql.query.retry.backoff.max.ms\";\n+  public static final Long KSQL_QUERY_RETRY_BACKOFF_MAX_MS_DEFAULT = 900000L;\n+  public static final String KSQL_QUERY_RETRY_BACKOFF_MAX_MS_DOC = \"The maximum amount of time \"\n+      + \"to wait before attempting to retry a persistent query in ERROR state.\";\n+\n+  public static final String KSQL_QUERY_ERROR_MAX_QUEUE_SIZE = \"ksql.query.error.max.queue.size\";\n+  public static final Integer KSQL_QUERY_ERROR_MAX_QUEUE_SIZE_DEFAULT = 10;\n+  public static final String KSQL_QUERY_ERROR_MAX_QUEUE_SIZE_DOC = \"The maximum number of \"\n+      + \"error messages (per query) to hold in the internal query errors queue and display\"\n+      + \"in the query description when executing the `EXPLAIN <query>` command.\";\n+\n   public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST =\n       \"ksql.properties.overrides.denylist\";\n-  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DEFAULT = \"\";\n-  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DOC = \"Comma-separated list of \"\n+  private static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DOC = \"Comma-separated list of \"\n       + \"properties that KSQL users cannot override.\";\n \n   private enum ConfigGeneration {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjMzNA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464572334", "bodyText": "nit: this can be private.  It isn't referenced from elsewhere.", "author": "big-andy-coates", "createdAt": "2020-08-03T17:55:16Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -316,6 +316,12 @@\n       .put(KSQL_STREAMS_PREFIX + StreamsConfig.MAX_TASK_IDLE_MS_CONFIG, 500L)\n       .build();\n \n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST =\n+      \"ksql.properties.overrides.denylist\";\n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DEFAULT = \"\";\n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DOC = \"Comma-separated list of \"", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1OTYyOA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465359628", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-04T22:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex f359470fdd..c75c6441e4 100644\n--- a/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -316,10 +316,26 @@ public class KsqlConfig extends AbstractConfig {\n       .put(KSQL_STREAMS_PREFIX + StreamsConfig.MAX_TASK_IDLE_MS_CONFIG, 500L)\n       .build();\n \n+  public static final String KSQL_QUERY_RETRY_BACKOFF_INITIAL_MS\n+      = \"ksql.query.retry.backoff.initial.ms\";\n+  public static final Long KSQL_QUERY_RETRY_BACKOFF_INITIAL_MS_DEFAULT = 15000L;\n+  public static final String KSQL_QUERY_RETRY_BACKOFF_INITIAL_MS_DOC = \"The initial amount of time \"\n+      + \"to wait before attempting to retry a persistent query in ERROR state.\";\n+\n+  public static final String KSQL_QUERY_RETRY_BACKOFF_MAX_MS = \"ksql.query.retry.backoff.max.ms\";\n+  public static final Long KSQL_QUERY_RETRY_BACKOFF_MAX_MS_DEFAULT = 900000L;\n+  public static final String KSQL_QUERY_RETRY_BACKOFF_MAX_MS_DOC = \"The maximum amount of time \"\n+      + \"to wait before attempting to retry a persistent query in ERROR state.\";\n+\n+  public static final String KSQL_QUERY_ERROR_MAX_QUEUE_SIZE = \"ksql.query.error.max.queue.size\";\n+  public static final Integer KSQL_QUERY_ERROR_MAX_QUEUE_SIZE_DEFAULT = 10;\n+  public static final String KSQL_QUERY_ERROR_MAX_QUEUE_SIZE_DOC = \"The maximum number of \"\n+      + \"error messages (per query) to hold in the internal query errors queue and display\"\n+      + \"in the query description when executing the `EXPLAIN <query>` command.\";\n+\n   public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST =\n       \"ksql.properties.overrides.denylist\";\n-  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DEFAULT = \"\";\n-  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DOC = \"Comma-separated list of \"\n+  private static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DOC = \"Comma-separated list of \"\n       + \"properties that KSQL users cannot override.\";\n \n   private enum ConfigGeneration {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3Mjg0Mw==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464572843", "bodyText": "ConfigurableProp?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldNotThrowOnConfigurableProp() {\n          \n          \n            \n              public void shouldNotThrowOnAllowedProp() {", "author": "big-andy-coates", "createdAt": "2020-08-03T17:56:22Z", "path": "ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertThrows;\n+\n+public class DenyListPropertyValidatorTest {\n+  private DenyListPropertyValidator validator;\n+\n+  @Before\n+  public void setUp() {\n+    validator = new DenyListPropertyValidator(Arrays.asList(\n+        \"immutable-property\"\n+    ));\n+  }\n+\n+  @Test\n+  public void shouldThrowOnDenyListedProperty() {\n+    // When:\n+    final KsqlException e = assertThrows(\n+        KsqlException.class,\n+        () -> validator.validateAll(ImmutableMap.of(\n+            \"immutable-property\", \"v1\",\n+            \"anything\", \"v2\"\n+        ))\n+    );\n+\n+    // Then:\n+    assertThat(e.getMessage(), containsString(\n+        \"A property override was set locally for a property that the server prohibits \"\n+            + \"overrides for: 'immutable-property'\"\n+    ));\n+\n+  }\n+\n+  @Test\n+  public void shouldNotThrowOnConfigurableProp() {", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1OTU2Ng==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465359566", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-04T22:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3Mjg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java b/ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java\nindex f8cf8171d5..9a2b32cde9 100644\n--- a/ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java\n+++ b/ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java\n\n@@ -31,7 +31,8 @@ public class DenyListPropertyValidatorTest {\n   @Before\n   public void setUp() {\n     validator = new DenyListPropertyValidator(Arrays.asList(\n-        \"immutable-property\"\n+        \"immutable-property-1\",\n+        \"immutable-property-2\"\n     ));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzMxNw==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464573317", "bodyText": "Probably better injecting this, than creating it.", "author": "big-andy-coates", "createdAt": "2020-08-03T17:57:17Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -187,6 +190,9 @@ public void configure(final KsqlConfig config) {\n             distributedCmdResponseTimeout\n         )\n     );\n+\n+    this.denyListPropertyValidator = new DenyListPropertyValidator(", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1OTQ5NQ==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465359495", "bodyText": "Done. I injected the DenyListPropertyValidator.", "author": "spena", "createdAt": "2020-08-04T22:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\nindex 1697ec24a5..df8ca7c70b 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\n\n@@ -190,9 +195,6 @@ public class KsqlResource implements KsqlConfigurable {\n             distributedCmdResponseTimeout\n         )\n     );\n-\n-    this.denyListPropertyValidator = new DenyListPropertyValidator(\n-        config.getList(KsqlConfig.KSQL_PROPERTIES_OVERRIDES_DENYLIST));\n   }\n \n   public EndpointResponse terminateCluster(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzM3MQ==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464573371", "bodyText": "Probably better injecting this, than creating it.", "author": "big-andy-coates", "createdAt": "2020-08-03T17:57:22Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -150,6 +152,9 @@ public void configure(final KsqlConfig config) {\n         ksqlEngine.getServiceId(),\n         ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n         : empty();\n+\n+    this.denyListPropertyValidator = new DenyListPropertyValidator(", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3MzY0NA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465773644", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-05T14:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\nindex bcb893bca3..42bcad345b 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n\n@@ -152,9 +157,6 @@ public class StreamedQueryResource implements KsqlConfigurable {\n         ksqlEngine.getServiceId(),\n         ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n         : empty();\n-\n-    this.denyListPropertyValidator = new DenyListPropertyValidator(\n-        config.getList(KsqlConfig.KSQL_PROPERTIES_OVERRIDES_DENYLIST));\n   }\n \n   public EndpointResponse streamQuery(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzUyMg==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464573522", "bodyText": "Probably better injecting this, than creating it.", "author": "big-andy-coates", "createdAt": "2020-08-03T17:57:39Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "diffHunk": "@@ -135,6 +137,9 @@ public WSQueryEndpoint(\n         Objects.requireNonNull(authorizationValidator, \"authorizationValidator\");\n     this.errorHandler = Objects.requireNonNull(errorHandler, \"errorHandler\");\n     this.pullQueryExecutor = Objects.requireNonNull(pullQueryExecutor, \"pullQueryExecutor\");\n+\n+    this.denyListPropertyValidator = new DenyListPropertyValidator(", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3MzYxMA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465773610", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-05T14:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java\nindex 8ddc408681..65c525e7b6 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java\n\n@@ -137,9 +140,8 @@ public class WSQueryEndpoint {\n         Objects.requireNonNull(authorizationValidator, \"authorizationValidator\");\n     this.errorHandler = Objects.requireNonNull(errorHandler, \"errorHandler\");\n     this.pullQueryExecutor = Objects.requireNonNull(pullQueryExecutor, \"pullQueryExecutor\");\n-\n-    this.denyListPropertyValidator = new DenyListPropertyValidator(\n-        ksqlConfig.getList(KsqlConfig.KSQL_PROPERTIES_OVERRIDES_DENYLIST));\n+    this.denyListPropertyValidator =\n+        Objects.requireNonNull(denyListPropertyValidator, \"denyListPropertyValidator\");\n   }\n \n   public void executeStreamQuery(final ServerWebSocket webSocket, final MultiMap requestParams,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NTg1MA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464575850", "bodyText": "I don't think it makes sense to validate request properties.  I think this may just break stuff.  @vpapavas thoughts?", "author": "big-andy-coates", "createdAt": "2020-08-03T18:02:15Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -232,14 +241,20 @@ public EndpointResponse handleKsqlStatements(\n           request,\n           distributedCmdResponseTimeout);\n \n-      final KsqlRequestConfig requestConfig =\n-          new KsqlRequestConfig(request.getRequestProperties());\n+      final Map<String, Object> requestProperties = request.getRequestProperties();\n+      denyListPropertyValidator.validateAll(requestProperties);", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3MzU2MA==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465773560", "bodyText": "Removed this validation. I asked @vpapavas and she said we shouldn't do it.", "author": "spena", "createdAt": "2020-08-05T14:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NTg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\nindex 1697ec24a5..df8ca7c70b 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\n\n@@ -241,13 +243,11 @@ public class KsqlResource implements KsqlConfigurable {\n           request,\n           distributedCmdResponseTimeout);\n \n-      final Map<String, Object> requestProperties = request.getRequestProperties();\n-      denyListPropertyValidator.validateAll(requestProperties);\n-\n       final Map<String, Object> configProperties = request.getConfigOverrides();\n       denyListPropertyValidator.validateAll(configProperties);\n \n-      final KsqlRequestConfig requestConfig = new KsqlRequestConfig(requestProperties);\n+      final KsqlRequestConfig requestConfig =\n+          new KsqlRequestConfig(request.getRequestProperties());\n       final List<ParsedStatement> statements = ksqlEngine.parse(request.getKsql());\n \n       validator.validate(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MjYxNw==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464582617", "bodyText": "Would be much easier to test if you inject it. Then all you need to do is verify its being called with the right params, i.e. one simple test.", "author": "big-andy-coates", "createdAt": "2020-08-03T18:15:44Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/KsqlResourceTest.java", "diffHunk": "@@ -2180,6 +2180,82 @@ private void setUpKsqlResource() {\n     ksqlResource.configure(ksqlConfig);\n   }\n \n+  @Test\n+  public void shouldThrowOnDenyListedStreamProperty() {\n+    // Given:\n+    ksqlResource = new KsqlResource(\n+        ksqlEngine,\n+        commandStore,\n+        DISTRIBUTED_COMMAND_RESPONSE_TIMEOUT,\n+        activenessRegistrar,\n+        (ec, sc) -> InjectorChain.of(\n+            schemaInjectorFactory.apply(sc),\n+            topicInjectorFactory.apply(ec),\n+            new TopicDeleteInjector(ec, sc)),\n+        Optional.of(authorizationValidator),\n+        errorsHandler\n+    );\n+    final Map<String, Object> props = new HashMap<>(ksqlRestConfig.getKsqlConfigProperties());\n+    props.put(KsqlConfig.KSQL_PROPERTIES_OVERRIDES_DENYLIST,\n+        StreamsConfig.NUM_STREAM_THREADS_CONFIG);\n+    ksqlResource.configure(new KsqlConfig(props));\n+\n+    // When:\n+    final EndpointResponse response = ksqlResource.handleKsqlStatements(\n+        securityContext,\n+        new KsqlRequest(\n+            \"query\",\n+            ImmutableMap.of(StreamsConfig.NUM_STREAM_THREADS_CONFIG, \"1\"), // stream properties\n+            emptyMap(), // config properties\n+            null\n+        )\n+    );\n+\n+    // Then:\n+    assertThat(response.getStatus(), CoreMatchers.is(BAD_REQUEST.code()));\n+    assertThat(((KsqlErrorMessage) response.getEntity()).getMessage(),\n+        is(\"A property override was set locally for a property that the server prohibits \"\n+            + \"overrides for: '\" + StreamsConfig.NUM_STREAM_THREADS_CONFIG + \"'\"));\n+  }\n+\n+  @Test\n+  public void shouldThrowOnDenyListedConfigProperty() {\n+    // Given:\n+    ksqlResource = new KsqlResource(\n+        ksqlEngine,\n+        commandStore,\n+        DISTRIBUTED_COMMAND_RESPONSE_TIMEOUT,\n+        activenessRegistrar,\n+        (ec, sc) -> InjectorChain.of(\n+            schemaInjectorFactory.apply(sc),\n+            topicInjectorFactory.apply(ec),\n+            new TopicDeleteInjector(ec, sc)),", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1OTQxMQ==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465359411", "bodyText": "Done. I injected the DenyListPropertyValidator.", "author": "spena", "createdAt": "2020-08-04T22:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MjYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/KsqlResourceTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/KsqlResourceTest.java\nindex bff57af6d0..794dccb3b7 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/KsqlResourceTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/KsqlResourceTest.java\n\n@@ -2174,7 +2179,8 @@ public class KsqlResourceTest {\n             topicInjectorFactory.apply(ec),\n             new TopicDeleteInjector(ec, sc)),\n         Optional.of(authorizationValidator),\n-        errorsHandler\n+        errorsHandler,\n+        denyListPropertyValidator\n     );\n \n     ksqlResource.configure(ksqlConfig);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Mjg4Ng==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464582886", "bodyText": "missing a unit test.", "author": "big-andy-coates", "createdAt": "2020-08-03T18:16:17Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "diffHunk": "@@ -228,7 +233,7 @@ private KsqlRequest parseRequest(final MultiMap requestParams) {\n         throw new IllegalArgumentException(\"\\\"ksql\\\" field of \\\"request\\\" must be populated\");\n       }\n       // To validate props:\n-      request.getConfigOverrides();\n+      denyListPropertyValidator.validateAll(request.getConfigOverrides());", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1ODc2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465358761", "bodyText": "Done.", "author": "spena", "createdAt": "2020-08-04T22:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Mjg4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Mjk2Mg==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464582962", "bodyText": "missing a unit test.", "author": "big-andy-coates", "createdAt": "2020-08-03T18:16:25Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "diffHunk": "@@ -245,6 +250,7 @@ private KsqlRequest parseRequest(final MultiMap requestParams) {\n \n   private void handleQuery(final RequestContext info, final Query query) {\n     final Map<String, Object> clientLocalProperties = info.request.getConfigOverrides();\n+    denyListPropertyValidator.validateAll(clientLocalProperties);", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1OTEyMg==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465359122", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-04T22:12:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Mjk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "27d264376c278633c010d02467c5e8284cb656f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java\nindex 8ddc408681..65c525e7b6 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java\n\n@@ -250,7 +252,6 @@ public class WSQueryEndpoint {\n \n   private void handleQuery(final RequestContext info, final Query query) {\n     final Map<String, Object> clientLocalProperties = info.request.getConfigOverrides();\n-    denyListPropertyValidator.validateAll(clientLocalProperties);\n \n     final WebSocketSubscriber<StreamedRow> streamSubscriber =\n         new WebSocketSubscriber<>(info.websocket);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MzQ1Mg==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464583452", "bodyText": "missing a unit test", "author": "big-andy-coates", "createdAt": "2020-08-03T18:17:26Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -199,11 +205,14 @@ public EndpointResponse terminateCluster(\n \n     ensureValidPatterns(request.getDeleteTopicList());\n     try {\n+      final Map<String, Object> streamsProperties = request.getStreamsProperties();\n+      denyListPropertyValidator.validateAll(streamsProperties);", "originalCommit": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3MzIxMg==", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r465773212", "bodyText": "Done", "author": "spena", "createdAt": "2020-08-05T14:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MzQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c432e4336e4586a1209f20d20c12412b121b40c7", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\nindex 1697ec24a5..888c0c42ec 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java\n\n@@ -212,7 +212,7 @@ public class KsqlResource implements KsqlConfigurable {\n           securityContext,\n           TERMINATE_CLUSTER,\n           new SessionProperties(\n-              streamsProperties,\n+              request.getStreamsProperties(),\n               localHost,\n               localUrl,\n               false\n"}}, {"oid": "27d264376c278633c010d02467c5e8284cb656f9", "url": "https://github.com/confluentinc/ksql/commit/27d264376c278633c010d02467c5e8284cb656f9", "message": "fix: address Andy's comments\n\n- inject DenyListPropertyValidator to Resource classes\n- add unit tests for WSQueryEndpoint\n- validate only streamProperties (no requestProperties)\n- minor fixes", "committedDate": "2020-08-04T21:13:09Z", "type": "forcePushed"}, {"oid": "c432e4336e4586a1209f20d20c12412b121b40c7", "url": "https://github.com/confluentinc/ksql/commit/c432e4336e4586a1209f20d20c12412b121b40c7", "message": "feat: Add ksql.client.properties.denylist to deny clients configs overrides", "committedDate": "2020-08-05T14:34:29Z", "type": "commit"}, {"oid": "71bbe6fa21e410441810315f5dbad8d5876103ef", "url": "https://github.com/confluentinc/ksql/commit/71bbe6fa21e410441810315f5dbad8d5876103ef", "message": "fix: Address 1st round of reviews\n\n- change error message for a more descriptive error", "committedDate": "2020-08-05T14:34:29Z", "type": "commit"}, {"oid": "978c79ad2fa4b451c1022bb11fbf82d638e7635e", "url": "https://github.com/confluentinc/ksql/commit/978c79ad2fa4b451c1022bb11fbf82d638e7635e", "message": "fix: address Andy's comments\n\n- inject DenyListPropertyValidator to Resource classes\n- add unit tests for WSQueryEndpoint\n- validate only streamProperties (no requestProperties)\n- minor fixes", "committedDate": "2020-08-05T14:34:29Z", "type": "commit"}, {"oid": "978c79ad2fa4b451c1022bb11fbf82d638e7635e", "url": "https://github.com/confluentinc/ksql/commit/978c79ad2fa4b451c1022bb11fbf82d638e7635e", "message": "fix: address Andy's comments\n\n- inject DenyListPropertyValidator to Resource classes\n- add unit tests for WSQueryEndpoint\n- validate only streamProperties (no requestProperties)\n- minor fixes", "committedDate": "2020-08-05T14:34:29Z", "type": "forcePushed"}]}