{"pr_number": 4851, "pr_title": "feat: Migrate /ksql and /ksql/terminate endpoints", "pr_createdAt": "2020-03-20T15:46:03Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4851", "timeline": [{"oid": "3d0ce10a7d63b87d951f63338dde966123e6e2ac", "url": "https://github.com/confluentinc/ksql/commit/3d0ce10a7d63b87d951f63338dde966123e6e2ac", "message": "deliberately break to check muckrake is working", "committedDate": "2020-03-21T06:36:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3OTI4Mw==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397079283", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:23:31Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.ErrorCodes;\n+import io.confluent.ksql.api.server.KsqlApiException;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.security.Principal;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that calls any authentication plugin\n+ */\n+public class AuthenticationPluginHandler implements Handler<RoutingContext> {\n+\n+  private final Server server;\n+  private final AuthenticationPlugin securityHandlerPlugin;\n+\n+  public AuthenticationPluginHandler(final Server server,\n+      final AuthenticationPlugin securityHandlerPlugin) {\n+    this.server = server;\n+    this.securityHandlerPlugin = securityHandlerPlugin;", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNzUzNg==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397717536", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3OTI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\nindex 1a56a5e824..0a40493be8 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\n\n@@ -15,6 +15,7 @@\n \n package io.confluent.ksql.api.auth;\n \n+import io.confluent.ksql.api.server.ApiServerConfig;\n import io.confluent.ksql.api.server.ErrorCodes;\n import io.confluent.ksql.api.server.KsqlApiException;\n import io.confluent.ksql.api.server.Server;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3OTY0Mw==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397079643", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:24:09Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.ErrorCodes;\n+import io.confluent.ksql.api.server.KsqlApiException;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.security.Principal;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that calls any authentication plugin\n+ */\n+public class AuthenticationPluginHandler implements Handler<RoutingContext> {\n+\n+  private final Server server;\n+  private final AuthenticationPlugin securityHandlerPlugin;\n+\n+  public AuthenticationPluginHandler(final Server server,\n+      final AuthenticationPlugin securityHandlerPlugin) {\n+    this.server = server;\n+    this.securityHandlerPlugin = securityHandlerPlugin;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final CompletableFuture<Principal> cf = securityHandlerPlugin\n+        .handleAuth(routingContext, server.getWorkerExecutor());\n+    cf.thenAccept(principal -> {\n+      if (principal == null) {\n+        // Not authenticated\n+        routingContext.fail(401, new KsqlApiException(\"Failed authentication\",\n+            ErrorCodes.ERROR_FAILED_AUTHENTICATION));\n+      } else {\n+        routingContext.setUser(new AuthPluginUser(principal));\n+        routingContext.next();\n+      }\n+    }).exceptionally(t -> {\n+      // An internal error occurred\n+      routingContext.fail(t);\n+      return null;\n+    });\n+  }\n+\n+  private static class AuthPluginUser implements ApiUser {\n+\n+    private final Principal principal;\n+\n+    AuthPluginUser(final Principal principal) {\n+      this.principal = principal;", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNzU3NQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397717575", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3OTY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\nindex 1a56a5e824..0a40493be8 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\n\n@@ -15,6 +15,7 @@\n \n package io.confluent.ksql.api.auth;\n \n+import io.confluent.ksql.api.server.ApiServerConfig;\n import io.confluent.ksql.api.server.ErrorCodes;\n import io.confluent.ksql.api.server.KsqlApiException;\n import io.confluent.ksql.api.server.Server;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MDIyMw==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397080223", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:25:14Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasPrincipal.java", "diffHunk": "@@ -17,11 +17,14 @@\n \n import java.security.Principal;\n \n-class ApiPrincipal implements Principal {\n+/**\n+ * Principal implementation created when authenticating with the JaasAuthProvider\n+ */\n+class JaasPrincipal implements Principal {\n \n   private final String name;\n \n-  ApiPrincipal(final String name) {\n+  JaasPrincipal(final String name) {", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNzYyNA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397717624", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MDIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasPrincipal.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasPrincipal.java\nindex d11c1c79e4..49e58e5570 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasPrincipal.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasPrincipal.java\n\n@@ -16,6 +16,7 @@\n package io.confluent.ksql.api.auth;\n \n import java.security.Principal;\n+import java.util.Objects;\n \n /**\n  * Principal implementation created when authenticating with the JaasAuthProvider\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MDYwMA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397080600", "bodyText": "We generally avoid reference to RBAC / CP in the OSS ksqlDB code base.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:25:52Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "diffHunk": "@@ -23,9 +23,12 @@\n import io.vertx.core.WorkerExecutor;\n import io.vertx.ext.auth.User;\n import io.vertx.ext.web.RoutingContext;\n-import java.security.Principal;\n import java.util.Set;\n \n+/**\n+ * Handler that calls a KsqlAuthorizationProvider plugin that can be used for custom authorization\n+ * (e.g. RBAC in Confluent platform)", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNzY5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397717696", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MDYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java\nindex da2e8a2d14..1241f0327a 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java\n\n@@ -24,14 +24,14 @@ import io.vertx.core.WorkerExecutor;\n import io.vertx.ext.auth.User;\n import io.vertx.ext.web.RoutingContext;\n import java.util.Set;\n+import org.apache.http.HttpStatus;\n \n /**\n  * Handler that calls a KsqlAuthorizationProvider plugin that can be used for custom authorization\n- * (e.g. RBAC in Confluent platform)\n  */\n public class KsqlAuthorizationProviderHandler implements Handler<RoutingContext> {\n \n-  private static final Set<String> PATHS_WITHOUT_AUTHORIZATION = ImmutableSet\n+  public static final Set<String> PATHS_WITHOUT_AUTHORIZATION = ImmutableSet\n       .of(\"/v1/metadata\", \"/healthcheck\");\n \n   private final WorkerExecutor workerExecutor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTAxNw==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081017", "bodyText": "nit: no need to null check ksqlResource here - that should be the responsibility of the KsqlStatementsEndpoint constructor...", "author": "big-andy-coates", "createdAt": "2020-03-24T11:26:36Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java", "diffHunk": "@@ -42,17 +46,22 @@\n   private final PullQueryExecutor pullQueryExecutor;\n   private final ReservedInternalTopics reservedInternalTopics;\n   private final KsqlSecurityContextProvider ksqlSecurityContextProvider;\n+  private final KsqlStatementsEndpoint ksqlStatementsEndpoint;\n+  private final TerminateEndpoint terminateEndpoint;\n \n   public KsqlServerEndpoints(\n       final KsqlEngine ksqlEngine,\n       final KsqlConfig ksqlConfig,\n       final PullQueryExecutor pullQueryExecutor,\n-      final KsqlSecurityContextProvider ksqlSecurityContextProvider) {\n+      final KsqlSecurityContextProvider ksqlSecurityContextProvider,\n+      final KsqlResource ksqlResource) {\n     this.ksqlEngine = Objects.requireNonNull(ksqlEngine);\n     this.ksqlConfig = Objects.requireNonNull(ksqlConfig);\n     this.pullQueryExecutor = Objects.requireNonNull(pullQueryExecutor);\n     this.reservedInternalTopics = new ReservedInternalTopics(ksqlConfig);\n     this.ksqlSecurityContextProvider = Objects.requireNonNull(ksqlSecurityContextProvider);\n+    this.ksqlStatementsEndpoint = new KsqlStatementsEndpoint(Objects.requireNonNull(ksqlResource));", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNzc1MQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397717751", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java\nindex ffc6f567e2..92efbf4c52 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java\n\n@@ -60,7 +60,7 @@ public class KsqlServerEndpoints implements Endpoints {\n     this.pullQueryExecutor = Objects.requireNonNull(pullQueryExecutor);\n     this.reservedInternalTopics = new ReservedInternalTopics(ksqlConfig);\n     this.ksqlSecurityContextProvider = Objects.requireNonNull(ksqlSecurityContextProvider);\n-    this.ksqlStatementsEndpoint = new KsqlStatementsEndpoint(Objects.requireNonNull(ksqlResource));\n+    this.ksqlStatementsEndpoint = new KsqlStatementsEndpoint(ksqlResource);\n     this.terminateEndpoint = new TerminateEndpoint(ksqlResource);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTEzMQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081131", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:26:51Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlStatementsEndpoint.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.endpoints;\n+\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.rest.entity.KsqlRequest;\n+import io.confluent.ksql.rest.server.resources.KsqlResource;\n+import io.confluent.ksql.security.KsqlSecurityContext;\n+import io.confluent.ksql.util.VertxUtils;\n+import javax.ws.rs.core.Response;\n+\n+public class KsqlStatementsEndpoint {\n+\n+  private final KsqlResource ksqlResource;\n+\n+  public KsqlStatementsEndpoint(final KsqlResource ksqlResource) {\n+    this.ksqlResource = ksqlResource;", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNzgwOA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397717808", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:36:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlStatementsEndpoint.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlStatementsEndpoint.java\nindex 0aa2150ff1..f7fa1c82f9 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlStatementsEndpoint.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlStatementsEndpoint.java\n\n@@ -20,6 +20,7 @@ import io.confluent.ksql.rest.entity.KsqlRequest;\n import io.confluent.ksql.rest.server.resources.KsqlResource;\n import io.confluent.ksql.security.KsqlSecurityContext;\n import io.confluent.ksql.util.VertxUtils;\n+import java.util.Objects;\n import javax.ws.rs.core.Response;\n \n public class KsqlStatementsEndpoint {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTIzMA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081230", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:27:01Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/TerminateEndpoint.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.endpoints;\n+\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n+import io.confluent.ksql.rest.server.resources.KsqlResource;\n+import io.confluent.ksql.security.KsqlSecurityContext;\n+import io.confluent.ksql.util.VertxUtils;\n+import javax.ws.rs.core.Response;\n+\n+public class TerminateEndpoint {\n+\n+  private final KsqlResource ksqlResource;\n+\n+  public TerminateEndpoint(final KsqlResource ksqlResource) {\n+    this.ksqlResource = ksqlResource;", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNzg2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397717861", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/TerminateEndpoint.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/TerminateEndpoint.java\nindex 4a0f1f9fd4..400ad0b630 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/TerminateEndpoint.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/TerminateEndpoint.java\n\n@@ -20,6 +20,7 @@ import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n import io.confluent.ksql.rest.server.resources.KsqlResource;\n import io.confluent.ksql.security.KsqlSecurityContext;\n import io.confluent.ksql.util.VertxUtils;\n+import java.util.Objects;\n import javax.ws.rs.core.Response;\n \n public class TerminateEndpoint {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTcwNQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081705", "bodyText": "Can we use one of the enums for more descriptive status codes please, e.g. HttpStatusCode.SERVER_ERROR rather than 500.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:27:56Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java", "diffHunk": "@@ -157,9 +157,10 @@ private Void handleInsertSubscriberException(final Throwable t,\n       }\n       log.error(\"Failed to execute inserts\", toLog);\n       // We don't expose internal error message via public API\n-      ServerUtils.handleError(routingContext.response(), 500, ErrorCodes.ERROR_CODE_INTERNAL_ERROR,\n-          \"The server encountered an internal error when processing inserts.\"\n-              + \" Please consult the server logs for more information.\");\n+      routingContext.fail(500,", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzMwMg==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397713302", "bodyText": "Imho, I prefer explicit error codes rather than indirecting through yet another 3rd party dependency. Constants files are great for constants that might change in the future, but HTTP status codes are never going to change.\nBut.. in the interests of an easy life, I don't mind changing it.\nWe can't use the Jetty error code constants as Jetty is going away.\nI guess we could org.apache.HttpStatus which is currently being dragged in anyway.", "author": "purplefox", "createdAt": "2020-03-25T09:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java\nindex 5c52e87173..704cf91c05 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java\n\n@@ -157,7 +158,7 @@ public class InsertsStreamHandler implements Handler<RoutingContext> {\n       }\n       log.error(\"Failed to execute inserts\", toLog);\n       // We don't expose internal error message via public API\n-      routingContext.fail(500,\n+      routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR,\n           new KsqlApiException(\"The server encountered an internal error when processing inserts.\"\n               + \" Please consult the server logs for more information.\",\n               ErrorCodes.ERROR_CODE_INTERNAL_ERROR));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTgxNA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081814", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:28:09Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.Errors.toErrorCode;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.api.auth.ApiSecurityContext;\n+import io.confluent.ksql.api.auth.DefaultApiSecurityContext;\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.json.JsonMapper;\n+import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n+import io.confluent.ksql.rest.entity.KsqlErrorMessage;\n+import io.confluent.ksql.rest.entity.KsqlRequest;\n+import io.confluent.ksql.rest.entity.Versions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+import javax.ws.rs.core.MediaType;\n+\n+public class PortedEndpoints {\n+\n+  private static final Set<String> PORTED_ENDPOINTS = ImmutableSet.of(\"/ksql\");\n+\n+  private final Endpoints endpoints;\n+  private final Server server;\n+\n+  public PortedEndpoints(final Endpoints endpoints, final Server server) {\n+    this.endpoints = endpoints;\n+    this.server = server;", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxODAzMA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397718030", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\nindex b66ec50d15..2c4c9ae509 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\n\n@@ -39,6 +39,7 @@ import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n import java.util.function.BiFunction;\n import javax.ws.rs.core.MediaType;\n+import org.apache.http.HttpStatus;\n \n public class PortedEndpoints {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjQxNg==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397082416", "bodyText": "ditto on the enum vs 400.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:29:16Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java", "diffHunk": "@@ -114,19 +113,19 @@ private Void handleQueryPublisherException(final Throwable t,\n     if (t instanceof CompletionException) {\n       final Throwable actual = t.getCause();\n       if (actual instanceof KsqlStatementException) {\n-        ServerUtils.handleError(routingContext.response(), 400, ErrorCodes.ERROR_CODE_INVALID_QUERY,\n-            actual.getMessage());\n+        routingContext.fail(400,", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxODE1Nw==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397718157", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\nindex 595f1b3bdd..1fdf20251d 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\n\n@@ -113,16 +114,16 @@ public class QueryStreamHandler implements Handler<RoutingContext> {\n     if (t instanceof CompletionException) {\n       final Throwable actual = t.getCause();\n       if (actual instanceof KsqlStatementException) {\n-        routingContext.fail(400,\n+        routingContext.fail(HttpStatus.SC_BAD_REQUEST,\n             new KsqlApiException(actual.getMessage(), ErrorCodes.ERROR_CODE_INVALID_QUERY));\n         return null;\n       } else if (actual instanceof KsqlApiException) {\n-        routingContext.fail(400, actual);\n+        routingContext.fail(HttpStatus.SC_BAD_REQUEST, actual);\n         return null;\n       }\n     }\n     // We don't expose internal error message via public API\n-    routingContext.fail(500, new KsqlApiException(\n+    routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR, new KsqlApiException(\n         \"The server encountered an internal error when processing the query.\"\n             + \" Please consult the server logs for more information.\",\n         ErrorCodes.ERROR_CODE_INTERNAL_ERROR));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjUyMg==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397082522", "bodyText": "ditto on the enum vs 500", "author": "big-andy-coates", "createdAt": "2020-03-24T11:29:29Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java", "diffHunk": "@@ -114,19 +113,19 @@ private Void handleQueryPublisherException(final Throwable t,\n     if (t instanceof CompletionException) {\n       final Throwable actual = t.getCause();\n       if (actual instanceof KsqlStatementException) {\n-        ServerUtils.handleError(routingContext.response(), 400, ErrorCodes.ERROR_CODE_INVALID_QUERY,\n-            actual.getMessage());\n+        routingContext.fail(400,\n+            new KsqlApiException(actual.getMessage(), ErrorCodes.ERROR_CODE_INVALID_QUERY));\n         return null;\n       } else if (actual instanceof KsqlApiException) {\n-        ServerUtils\n-            .handleError(routingContext.response(), 400, ((KsqlApiException) actual).getErrorCode(),\n-                actual.getMessage());\n+        routingContext.fail(400, actual);\n+        return null;\n       }\n     }\n     // We don't expose internal error message via public API\n-    ServerUtils.handleError(routingContext.response(), 500, ErrorCodes.ERROR_CODE_INTERNAL_ERROR,\n+    routingContext.fail(500, new KsqlApiException(", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxODIxNw==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397718217", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\nindex 595f1b3bdd..1fdf20251d 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java\n\n@@ -113,16 +114,16 @@ public class QueryStreamHandler implements Handler<RoutingContext> {\n     if (t instanceof CompletionException) {\n       final Throwable actual = t.getCause();\n       if (actual instanceof KsqlStatementException) {\n-        routingContext.fail(400,\n+        routingContext.fail(HttpStatus.SC_BAD_REQUEST,\n             new KsqlApiException(actual.getMessage(), ErrorCodes.ERROR_CODE_INVALID_QUERY));\n         return null;\n       } else if (actual instanceof KsqlApiException) {\n-        routingContext.fail(400, actual);\n+        routingContext.fail(HttpStatus.SC_BAD_REQUEST, actual);\n         return null;\n       }\n     }\n     // We don't expose internal error message via public API\n-    routingContext.fail(500, new KsqlApiException(\n+    routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR, new KsqlApiException(\n         \"The server encountered an internal error when processing the query.\"\n             + \" Please consult the server logs for more information.\",\n         ErrorCodes.ERROR_CODE_INTERNAL_ERROR));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjcwOQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397082709", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:29:47Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -34,47 +35,36 @@\n   private ServerUtils() {\n   }\n \n-  public static void handleError(final HttpServerResponse response, final int statusCode,\n-      final int errorCode, final String errMsg) {\n-    final ErrorResponse errorResponse = new ErrorResponse(errorCode, errMsg);\n-    final Buffer buffer = errorResponse.toBuffer();\n-    response.setStatusCode(statusCode).end(buffer);\n-  }\n-\n-  public static void unhandledExceptionHandler(final Throwable t) {\n-    log.error(\"Unhandled exception\", t);\n-  }\n-\n   public static <T> Optional<T> deserialiseObject(final Buffer buffer,\n-      final HttpServerResponse response,\n+      final RoutingContext routingContext,\n       final Class<T> clazz) {\n-    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(response), clazz);\n+    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(routingContext), clazz);\n   }\n \n   private static class HttpResponseErrorHandler implements PojoDeserializerErrorHandler {\n \n-    private final HttpServerResponse response;\n+    private final RoutingContext routingContext;\n \n-    HttpResponseErrorHandler(final HttpServerResponse response) {\n-      this.response = response;\n+    HttpResponseErrorHandler(final RoutingContext routingContext) {\n+      this.routingContext = routingContext;", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxOTYzMg==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397719632", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\nindex 0cd361edb3..8366413222 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\n\n@@ -46,25 +48,28 @@ public final class ServerUtils {\n     private final RoutingContext routingContext;\n \n     HttpResponseErrorHandler(final RoutingContext routingContext) {\n-      this.routingContext = routingContext;\n+      this.routingContext = Objects.requireNonNull(routingContext);\n     }\n \n     @Override\n     public void onMissingParam(final String paramName) {\n-      routingContext.fail(400, new KsqlApiException(\"No \" + paramName + \" in arguments\",\n-          ERROR_CODE_MISSING_PARAM));\n+      routingContext\n+          .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"No \" + paramName + \" in arguments\",\n+              ERROR_CODE_MISSING_PARAM));\n     }\n \n     @Override\n     public void onExtraParam(final String paramName) {\n-      routingContext.fail(400, new KsqlApiException(\"Unknown arg \" + paramName,\n-          ErrorCodes.ERROR_CODE_UNKNOWN_PARAM));\n+      routingContext\n+          .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"Unknown arg \" + paramName,\n+              ErrorCodes.ERROR_CODE_UNKNOWN_PARAM));\n     }\n \n     @Override\n     public void onInvalidJson() {\n-      routingContext.fail(400, new KsqlApiException(\"Malformed JSON in request\",\n-          ErrorCodes.ERROR_CODE_MALFORMED_REQUEST));\n+      routingContext\n+          .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"Malformed JSON in request\",\n+              ErrorCodes.ERROR_CODE_MALFORMED_REQUEST));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MzI4OA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397083288", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-24T11:30:52Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/spi/EndpointResponse.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.spi;\n+\n+public interface EndpointResponse {\n+\n+  int getStatusCode();\n+\n+  String getStatusMessage();\n+\n+  Object getResponseBody();\n+\n+  static EndpointResponse create(final int errorCode, final String statusMessage,\n+      final Object responseBody) {", "originalCommit": "6668d50b61f5456de1d9c287eb2d4b813897b51d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxOTY3OQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397719679", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-03-25T09:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MzI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/spi/EndpointResponse.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/spi/EndpointResponse.java\nindex b77fc3a06f..99380f9aee 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/spi/EndpointResponse.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/spi/EndpointResponse.java\n\n@@ -15,6 +15,8 @@\n \n package io.confluent.ksql.api.spi;\n \n+import java.util.Objects;\n+\n public interface EndpointResponse {\n \n   int getStatusCode();\n"}}, {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "url": "https://github.com/confluentinc/ksql/commit/cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "message": "Implement unauthed paths for authentication plugin", "committedDate": "2020-03-26T17:44:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NjU2Mg==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399056562", "bodyText": "Why is the plugin handler failing the context? This seems to contradict the expectation that implementations of AuthenticationPlugin should end the response if the user fails to authenticate.", "author": "vcrfxia", "createdAt": "2020-03-27T06:21:58Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.ErrorCodes;\n+import io.confluent.ksql.api.server.KsqlApiException;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.security.Principal;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.http.HttpStatus;\n+\n+/**\n+ * Handler that calls any authentication plugin\n+ */\n+public class AuthenticationPluginHandler implements Handler<RoutingContext> {\n+\n+  private final Server server;\n+  private final AuthenticationPlugin securityHandlerPlugin;\n+  private final Set<String> unauthenticatedPaths = new HashSet<>();\n+\n+  public AuthenticationPluginHandler(final Server server,\n+      final AuthenticationPlugin securityHandlerPlugin) {\n+    this.server = Objects.requireNonNull(server);\n+    this.securityHandlerPlugin = Objects.requireNonNull(securityHandlerPlugin);\n+    // We add in all the paths that don't require authorization from KsqlAuthorizationProviderHandler\n+    unauthenticatedPaths.addAll(KsqlAuthorizationProviderHandler.PATHS_WITHOUT_AUTHORIZATION);\n+    // And then we add anything from the property authentication.skip.paths\n+    // This preserves the behaviour from the previous Jetty based implementation\n+    final List<String> unauthed = server.getConfig()\n+        .getList(ApiServerConfig.AUTHENTICATION_SKIP_PATHS_CONFIG);\n+    unauthenticatedPaths.addAll(unauthed);\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    if (unauthenticatedPaths.contains(routingContext.normalisedPath())) {\n+      routingContext.next();\n+      return;\n+    }\n+    final CompletableFuture<Principal> cf = securityHandlerPlugin\n+        .handleAuth(routingContext, server.getWorkerExecutor());\n+    cf.thenAccept(principal -> {\n+      if (principal == null) {\n+        // Not authenticated\n+        routingContext\n+            .fail(HttpStatus.SC_UNAUTHORIZED, new KsqlApiException(\"Failed authentication\",", "originalCommit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNzkzNA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399217934", "bodyText": "Previously the plugin was ending the response, which seemed wrong to me (as per our previous discussion) so I changed the contract, so now it's Vert.x that does this.", "author": "purplefox", "createdAt": "2020-03-27T12:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NjU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5NTIzMA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399395230", "bodyText": "Can we update the Java docs in AuthenticationPlugin and the test implementation (in this repo) to reflect that? The fact that the two were incongruous threw me off.", "author": "vcrfxia", "createdAt": "2020-03-27T16:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NjU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6b190ec39b690cb3005ff899a56deec0424b8813", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\nindex 0a40493be8..4cbc3957d4 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java\n\n@@ -46,7 +46,8 @@ public class AuthenticationPluginHandler implements Handler<RoutingContext> {\n       final AuthenticationPlugin securityHandlerPlugin) {\n     this.server = Objects.requireNonNull(server);\n     this.securityHandlerPlugin = Objects.requireNonNull(securityHandlerPlugin);\n-    // We add in all the paths that don't require authorization from KsqlAuthorizationProviderHandler\n+    // We add in all the paths that don't require authorization from\n+    // KsqlAuthorizationProviderHandler\n     unauthenticatedPaths.addAll(KsqlAuthorizationProviderHandler.PATHS_WITHOUT_AUTHORIZATION);\n     // And then we add anything from the property authentication.skip.paths\n     // This preserves the behaviour from the previous Jetty based implementation\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzIyOA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399057228", "bodyText": "Before this refactor, handleError() was populating the status code and providing a message when ending the response, but the new code that previously called this method does not. Was this a conscious decision? I think it's nice to populate the response because otherwise failures appear silent from curl (and probably other tools as well?).", "author": "vcrfxia", "createdAt": "2020-03-27T06:24:11Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -34,47 +37,39 @@\n   private ServerUtils() {\n   }\n \n-  public static void handleError(final HttpServerResponse response, final int statusCode,\n-      final int errorCode, final String errMsg) {\n-    final ErrorResponse errorResponse = new ErrorResponse(errorCode, errMsg);\n-    final Buffer buffer = errorResponse.toBuffer();\n-    response.setStatusCode(statusCode).end(buffer);", "originalCommit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMDI1NQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399220255", "bodyText": "Not sure I follow.. could you elaborate a bit?", "author": "purplefox", "createdAt": "2020-03-27T12:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5NzUwNA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399397504", "bodyText": "The old code (the line I've commented on here) did:\nresponse.setStatusCode(statusCode).end(buffer);\n\nwhereas the new code does:\nroutingContext.fail(statusCode, exception);\n\nThe latter doesn't populate the response status code and message (buffer), right? As a result, failed curl requests come up blank. I remember being really confused by this when doing manual testing.", "author": "vcrfxia", "createdAt": "2020-03-27T16:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMzYyMA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399413620", "bodyText": "Could you point me to the routingContext.fail() line you are referring to? There are probably a few places in the code that call that :)\nRoutingContext fail will cause the failureHandler to be called, and the failure handler should send back the correct error response (depending on the kind of failure).", "author": "purplefox", "createdAt": "2020-03-27T17:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzgzNw==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399427837", "bodyText": "Ah I see, and both the regular failure handler (in ServerVerticle) and the old API failure handler (in PortedEndpoints) set the status code and message, so we should be good. Thanks for clarifying!", "author": "vcrfxia", "createdAt": "2020-03-27T17:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0OTEyOQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399449129", "bodyText": "Right, the change here basically centralises all the failure handling in one place so we don't end responses with failure from multiple places any more, which makes it a bit simpler to manage.", "author": "purplefox", "createdAt": "2020-03-27T18:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "6b190ec39b690cb3005ff899a56deec0424b8813", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\nindex 8366413222..5cf4f1e6d3 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\n\n@@ -62,14 +64,14 @@ public final class ServerUtils {\n     public void onExtraParam(final String paramName) {\n       routingContext\n           .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"Unknown arg \" + paramName,\n-              ErrorCodes.ERROR_CODE_UNKNOWN_PARAM));\n+              ERROR_CODE_UNKNOWN_PARAM));\n     }\n \n     @Override\n     public void onInvalidJson() {\n       routingContext\n           .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"Malformed JSON in request\",\n-              ErrorCodes.ERROR_CODE_MALFORMED_REQUEST));\n+              ERROR_CODE_MALFORMED_REQUEST));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzQwMg==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399057402", "bodyText": "Why is this public?", "author": "vcrfxia", "createdAt": "2020-03-27T06:24:48Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.Errors.toErrorCode;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.api.auth.ApiSecurityContext;\n+import io.confluent.ksql.api.auth.DefaultApiSecurityContext;\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.json.JsonMapper;\n+import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n+import io.confluent.ksql.rest.entity.KsqlErrorMessage;\n+import io.confluent.ksql.rest.entity.KsqlRequest;\n+import io.confluent.ksql.rest.entity.Versions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.http.HttpStatus;\n+\n+public class PortedEndpoints {", "originalCommit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMDY5Nw==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399220697", "bodyText": "No particular reason, I'm usually make classes public by default unless there's a very good reason not to.", "author": "purplefox", "createdAt": "2020-03-27T12:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "6b190ec39b690cb3005ff899a56deec0424b8813", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\nindex 2c4c9ae509..5261279c3d 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\n\n@@ -41,14 +41,14 @@ import java.util.function.BiFunction;\n import javax.ws.rs.core.MediaType;\n import org.apache.http.HttpStatus;\n \n-public class PortedEndpoints {\n+class PortedEndpoints {\n \n   private static final Set<String> PORTED_ENDPOINTS = ImmutableSet.of(\"/ksql\");\n \n   private final Endpoints endpoints;\n   private final Server server;\n \n-  public PortedEndpoints(final Endpoints endpoints, final Server server) {\n+  PortedEndpoints(final Endpoints endpoints, final Server server) {\n     this.endpoints = endpoints;\n     this.server = server;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzQ3MA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399057470", "bodyText": "Why is this public?", "author": "vcrfxia", "createdAt": "2020-03-27T06:25:06Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.Errors.toErrorCode;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.api.auth.ApiSecurityContext;\n+import io.confluent.ksql.api.auth.DefaultApiSecurityContext;\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.json.JsonMapper;\n+import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n+import io.confluent.ksql.rest.entity.KsqlErrorMessage;\n+import io.confluent.ksql.rest.entity.KsqlRequest;\n+import io.confluent.ksql.rest.entity.Versions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.http.HttpStatus;\n+\n+public class PortedEndpoints {\n+\n+  private static final Set<String> PORTED_ENDPOINTS = ImmutableSet.of(\"/ksql\");\n+\n+  private final Endpoints endpoints;\n+  private final Server server;\n+\n+  public PortedEndpoints(final Endpoints endpoints, final Server server) {\n+    this.endpoints = endpoints;\n+    this.server = server;\n+  }\n+\n+  static void setupEndpoints(final Endpoints endpoints, final Server server,\n+      final Router router) {\n+    router.route(HttpMethod.POST, \"/ksql\")\n+        .handler(BodyHandler.create())\n+        .produces(Versions.KSQL_V1_JSON)\n+        .produces(MediaType.APPLICATION_JSON)\n+        .handler(new PortedEndpoints(endpoints, server)::handleKsqlRequest);\n+    router.route(HttpMethod.POST, \"/ksql/terminate\")\n+        .handler(BodyHandler.create())\n+        .produces(Versions.KSQL_V1_JSON)\n+        .produces(MediaType.APPLICATION_JSON)\n+        .handler(new PortedEndpoints(endpoints, server)::handleTerminateRequest);\n+  }\n+\n+  static void setupFailureHandler(final Router router) {\n+    for (String path : PORTED_ENDPOINTS) {\n+      router.route(path).failureHandler(PortedEndpoints::oldApiFailureHandler);\n+    }\n+  }\n+\n+  void handleKsqlRequest(final RoutingContext routingContext) {\n+    handlePortedOldApiRequest(routingContext, KsqlRequest.class,\n+        (ksqlRequest, apiSecurityContext) ->\n+            endpoints\n+                .executeKsqlRequest(ksqlRequest, server.getWorkerExecutor(),\n+                    DefaultApiSecurityContext.create(routingContext))\n+    );\n+  }\n+\n+  void handleTerminateRequest(final RoutingContext routingContext) {\n+    handlePortedOldApiRequest(routingContext, ClusterTerminateRequest.class,\n+        (request, apiSecurityContext) ->\n+            endpoints\n+                .executeTerminate(request, server.getWorkerExecutor(),\n+                    DefaultApiSecurityContext.create(routingContext))\n+    );\n+  }\n+\n+  private static <T> void handlePortedOldApiRequest(final RoutingContext routingContext,\n+      final Class<T> requestClass,\n+      final BiFunction<T, ApiSecurityContext, CompletableFuture<EndpointResponse>> requestor) {\n+    final HttpServerResponse response = routingContext.response();\n+    final ObjectMapper objectMapper = JsonMapper.INSTANCE.mapper;\n+    final T requestObject;\n+    try {\n+      requestObject = objectMapper.readValue(routingContext.getBody().getBytes(), requestClass);\n+    } catch (Exception e) {\n+      routingContext.fail(HttpStatus.SC_BAD_REQUEST,\n+          new KsqlApiException(\"Malformed JSON\", ErrorCodes.ERROR_CODE_MALFORMED_REQUEST));\n+      return;\n+    }\n+    final CompletableFuture<EndpointResponse> completableFuture = requestor\n+        .apply(requestObject, DefaultApiSecurityContext.create(routingContext));\n+    completableFuture.thenAccept(endpointResponse -> {\n+\n+      final Buffer responseBody;\n+      try {\n+        final byte[] bytes = objectMapper.writeValueAsBytes(endpointResponse.getResponseBody());\n+        responseBody = Buffer.buffer(bytes);\n+      } catch (JsonProcessingException e) {\n+        // This is an internal error as it's a bug in the server\n+        routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR, e);\n+        return;\n+      }\n+\n+      response.setStatusCode(endpointResponse.getStatusCode())\n+          .setStatusMessage(endpointResponse.getStatusMessage())\n+          .end(responseBody);\n+\n+    }).exceptionally(t -> {\n+      routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR, t);\n+      return null;\n+    });\n+  }\n+\n+  public static void oldApiFailureHandler(final RoutingContext routingContext) {", "originalCommit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMDc4Ng==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399220786", "bodyText": "As above", "author": "purplefox", "createdAt": "2020-03-27T12:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "6b190ec39b690cb3005ff899a56deec0424b8813", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\nindex 2c4c9ae509..5261279c3d 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java\n\n@@ -41,14 +41,14 @@ import java.util.function.BiFunction;\n import javax.ws.rs.core.MediaType;\n import org.apache.http.HttpStatus;\n \n-public class PortedEndpoints {\n+class PortedEndpoints {\n \n   private static final Set<String> PORTED_ENDPOINTS = ImmutableSet.of(\"/ksql\");\n \n   private final Endpoints endpoints;\n   private final Server server;\n \n-  public PortedEndpoints(final Endpoints endpoints, final Server server) {\n+  PortedEndpoints(final Endpoints endpoints, final Server server) {\n     this.endpoints = endpoints;\n     this.server = server;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1ODMzOQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399058339", "bodyText": "nit: inconsistent static imports. ERROR_CODE_MISSING_PARAM above is a static import but this error code (and the one below) aren't.", "author": "vcrfxia", "createdAt": "2020-03-27T06:28:16Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -34,47 +37,39 @@\n   private ServerUtils() {\n   }\n \n-  public static void handleError(final HttpServerResponse response, final int statusCode,\n-      final int errorCode, final String errMsg) {\n-    final ErrorResponse errorResponse = new ErrorResponse(errorCode, errMsg);\n-    final Buffer buffer = errorResponse.toBuffer();\n-    response.setStatusCode(statusCode).end(buffer);\n-  }\n-\n-  public static void unhandledExceptionHandler(final Throwable t) {\n-    log.error(\"Unhandled exception\", t);\n-  }\n-\n   public static <T> Optional<T> deserialiseObject(final Buffer buffer,\n-      final HttpServerResponse response,\n+      final RoutingContext routingContext,\n       final Class<T> clazz) {\n-    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(response), clazz);\n+    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(routingContext), clazz);\n   }\n \n   private static class HttpResponseErrorHandler implements PojoDeserializerErrorHandler {\n \n-    private final HttpServerResponse response;\n+    private final RoutingContext routingContext;\n \n-    HttpResponseErrorHandler(final HttpServerResponse response) {\n-      this.response = response;\n+    HttpResponseErrorHandler(final RoutingContext routingContext) {\n+      this.routingContext = Objects.requireNonNull(routingContext);\n     }\n \n     @Override\n     public void onMissingParam(final String paramName) {\n-      handleError(response, 400, ErrorCodes.ERROR_CODE_MISSING_PARAM,\n-          \"No \" + paramName + \" in arguments\");\n+      routingContext\n+          .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"No \" + paramName + \" in arguments\",\n+              ERROR_CODE_MISSING_PARAM));\n     }\n \n     @Override\n     public void onExtraParam(final String paramName) {\n-      handleError(response, 400, ErrorCodes.ERROR_CODE_UNKNOWN_PARAM,\n-          \"Unknown arg \" + paramName);\n+      routingContext\n+          .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"Unknown arg \" + paramName,\n+              ErrorCodes.ERROR_CODE_UNKNOWN_PARAM));", "originalCommit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b190ec39b690cb3005ff899a56deec0424b8813", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\nindex 8366413222..5cf4f1e6d3 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java\n\n@@ -62,14 +64,14 @@ public final class ServerUtils {\n     public void onExtraParam(final String paramName) {\n       routingContext\n           .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"Unknown arg \" + paramName,\n-              ErrorCodes.ERROR_CODE_UNKNOWN_PARAM));\n+              ERROR_CODE_UNKNOWN_PARAM));\n     }\n \n     @Override\n     public void onInvalidJson() {\n       routingContext\n           .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"Malformed JSON in request\",\n-              ErrorCodes.ERROR_CODE_MALFORMED_REQUEST));\n+              ERROR_CODE_MALFORMED_REQUEST));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1ODg0Mg==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399058842", "bodyText": "Thanks for including this. Hopefully we won't need it but it's reassuring to know we can easily undo this change if something comes up.", "author": "vcrfxia", "createdAt": "2020-03-27T06:29:57Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -52,8 +54,11 @@\n   // CHECKSTYLE_RULES.ON: ClassDataAbstractionCoupling\n   private static final Logger log = LoggerFactory.getLogger(ServerVerticle.class);\n \n-  private static final Set<String> NEW_API_ENDPOINTS = ImmutableSet\n-      .of(\"/query-stream\", \"/inserts-stream\", \"/close-query\");\n+  private static final Set<String> NON_PROXIED_ENDPOINTS = ImmutableSet\n+      .of(\"/query-stream\", \"/inserts-stream\", \"/close-query\", \"/ksql\");\n+\n+  // Quick switch so we can easily revert to not serving ported endpoints directly\n+  private static final boolean SERVE_PORTED_ENDPOINTS = true;", "originalCommit": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eeff0cd96c69a374610eba770190b80e0f3546f5", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex 6a00b833e0..9a206962d5 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -54,11 +66,10 @@ public class ServerVerticle extends AbstractVerticle {\n   // CHECKSTYLE_RULES.ON: ClassDataAbstractionCoupling\n   private static final Logger log = LoggerFactory.getLogger(ServerVerticle.class);\n \n-  private static final Set<String> NON_PROXIED_ENDPOINTS = ImmutableSet\n-      .of(\"/query-stream\", \"/inserts-stream\", \"/close-query\", \"/ksql\");\n+  private static final Set<String> NEW_API_ENDPOINTS = ImmutableSet\n+      .of(\"/query-stream\", \"/inserts-stream\", \"/close-query\");\n \n-  // Quick switch so we can easily revert to not serving ported endpoints directly\n-  private static final boolean SERVE_PORTED_ENDPOINTS = true;\n+  private static final Set<String> OLD_API_ENDPOINTS = ImmutableSet.of(\"/ksql\");\n \n   private final Endpoints endpoints;\n   private final HttpServerOptions httpServerOptions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMDE0MA==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399330140", "bodyText": "Seems this is set only if keyStoreLocation is not null/empty. Why is that?", "author": "spena", "createdAt": "2020-03-27T15:03:14Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -234,6 +236,10 @@ public static KsqlRestConfig convertToApiServerConfig(final KsqlRestConfig confi\n           origs.put(ApiServerConfig.TLS_CLIENT_AUTH_REQUIRED, \"required\");\n         }\n       }\n+      final List<String> unauthedPaths = config.getList(RestConfig.AUTHENTICATION_SKIP_PATHS);\n+      if (unauthedPaths != null) {\n+        origs.put(ApiServerConfig.AUTHENTICATION_SKIP_PATHS_CONFIG, unauthedPaths);\n+      }", "originalCommit": "0c66060c7e115a45571b36668716046fb121cd56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NjY2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399356661", "bodyText": "Doh!", "author": "purplefox", "createdAt": "2020-03-27T15:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMDE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "6b190ec39b690cb3005ff899a56deec0424b8813", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\nindex 360784ed7c..2c91e4ba7d 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n\n@@ -236,10 +238,6 @@ public final class KsqlRestApplication extends ExecutableApplication<KsqlRestCon\n           origs.put(ApiServerConfig.TLS_CLIENT_AUTH_REQUIRED, \"required\");\n         }\n       }\n-      final List<String> unauthedPaths = config.getList(RestConfig.AUTHENTICATION_SKIP_PATHS);\n-      if (unauthedPaths != null) {\n-        origs.put(ApiServerConfig.AUTHENTICATION_SKIP_PATHS_CONFIG, unauthedPaths);\n-      }\n     }\n \n     final String authMethod = config.getString(\"authentication.method\");\n"}}, {"oid": "6b190ec39b690cb3005ff899a56deec0424b8813", "url": "https://github.com/confluentinc/ksql/commit/6b190ec39b690cb3005ff899a56deec0424b8813", "message": "Updated docs on AuthenticationPlugin", "committedDate": "2020-04-01T12:18:22Z", "type": "forcePushed"}, {"oid": "eeff0cd96c69a374610eba770190b80e0f3546f5", "url": "https://github.com/confluentinc/ksql/commit/eeff0cd96c69a374610eba770190b80e0f3546f5", "message": "migrate ksql endpoint", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "da031831f4491ff16a68a978a412675ebcb57479", "url": "https://github.com/confluentinc/ksql/commit/da031831f4491ff16a68a978a412675ebcb57479", "message": "Consolidate the error handling", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "694e8f790f58dcf82c56ca61832bff4fc394c72d", "url": "https://github.com/confluentinc/ksql/commit/694e8f790f58dcf82c56ca61832bff4fc394c72d", "message": "migrate /terminate and some refactoring", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "ae7f4a93d4d1a17bd87b9fe205cb601bd66e2d04", "url": "https://github.com/confluentinc/ksql/commit/ae7f4a93d4d1a17bd87b9fe205cb601bd66e2d04", "message": "remove jx-ws annotations from KsqlResource", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "3bbff3c56091ddf9aa8065f55117aa932ae520e2", "url": "https://github.com/confluentinc/ksql/commit/3bbff3c56091ddf9aa8065f55117aa932ae520e2", "message": "further auth fixes to get the plugins working", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "74c33674b1e09b012704596af7d097b00df3c6b5", "url": "https://github.com/confluentinc/ksql/commit/74c33674b1e09b012704596af7d097b00df3c6b5", "message": "remove dead code", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "035c0f36132102ea2172e6d0691453833f25bc00", "url": "https://github.com/confluentinc/ksql/commit/035c0f36132102ea2172e6d0691453833f25bc00", "message": "rename", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "240ad857674cf62f9e0ff4d63a4aac6b2509f31c", "url": "https://github.com/confluentinc/ksql/commit/240ad857674cf62f9e0ff4d63a4aac6b2509f31c", "message": "Added switch to be able to revert back to old endpoints serving quickly", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "9b936c4d12da32c99afa82b89318e0e5faa20423", "url": "https://github.com/confluentinc/ksql/commit/9b936c4d12da32c99afa82b89318e0e5faa20423", "message": "disabled serving of ported endpoints", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "757c1800835448e2bdb8a119454352734bef62e3", "url": "https://github.com/confluentinc/ksql/commit/757c1800835448e2bdb8a119454352734bef62e3", "message": "remove println", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "7c52ba8fcca51610ac59e17b060e7d8183c7489a", "url": "https://github.com/confluentinc/ksql/commit/7c52ba8fcca51610ac59e17b060e7d8183c7489a", "message": "enable ksql endpoint", "committedDate": "2020-04-08T13:43:09Z", "type": "commit"}, {"oid": "b4e34944c203d693c8b535ef8ac584b313d3a2c5", "url": "https://github.com/confluentinc/ksql/commit/b4e34944c203d693c8b535ef8ac584b313d3a2c5", "message": "fixed tests", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "62e617799c5bbf35d37fefeaf6996f80ec638723", "url": "https://github.com/confluentinc/ksql/commit/62e617799c5bbf35d37fefeaf6996f80ec638723", "message": "deliberately break to check muckrake is working", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "829cad4016b23857f253572a3fec6d85adcb817f", "url": "https://github.com/confluentinc/ksql/commit/829cad4016b23857f253572a3fec6d85adcb817f", "message": "unbreak auth", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "9b02e976748495d572fffd9e59b072c083f603df", "url": "https://github.com/confluentinc/ksql/commit/9b02e976748495d572fffd9e59b072c083f603df", "message": "Move ApiServerConfig", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "de1786642d390bc4c8df166247a46317d229899a", "url": "https://github.com/confluentinc/ksql/commit/de1786642d390bc4c8df166247a46317d229899a", "message": "Review updates", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "2c9cd050adf414a31d550cb0d9562c1d959a833a", "url": "https://github.com/confluentinc/ksql/commit/2c9cd050adf414a31d550cb0d9562c1d959a833a", "message": "more review updates", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "ac1637c621da1feb21f2ce88596633150f357422", "url": "https://github.com/confluentinc/ksql/commit/ac1637c621da1feb21f2ce88596633150f357422", "message": "Implement unauthed paths for authentication plugin", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "1f6a55b2b4c78011009d9fdad057265c382b6d11", "url": "https://github.com/confluentinc/ksql/commit/1f6a55b2b4c78011009d9fdad057265c382b6d11", "message": "further updates from review comments and checkstyle", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "51f10ebf4afbdef20e0bd12c71793f4ead62ea12", "url": "https://github.com/confluentinc/ksql/commit/51f10ebf4afbdef20e0bd12c71793f4ead62ea12", "message": "Fix location of unauthedpaths population", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "95fdd161642f40c443438cb791a323b1dde42054", "url": "https://github.com/confluentinc/ksql/commit/95fdd161642f40c443438cb791a323b1dde42054", "message": "Added sanity check to ensure both vert.x and jetty plugin classes are specified together", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "d3af2d3429bb17f7f00c28c1fcd81c5172882ee3", "url": "https://github.com/confluentinc/ksql/commit/d3af2d3429bb17f7f00c28c1fcd81c5172882ee3", "message": "Updated docs on AuthenticationPlugin", "committedDate": "2020-04-08T13:43:10Z", "type": "commit"}, {"oid": "91942e973aab814ce01974b627cdb9561a7de4ab", "url": "https://github.com/confluentinc/ksql/commit/91942e973aab814ce01974b627cdb9561a7de4ab", "message": "fixed test", "committedDate": "2020-04-08T13:44:31Z", "type": "commit"}, {"oid": "91942e973aab814ce01974b627cdb9561a7de4ab", "url": "https://github.com/confluentinc/ksql/commit/91942e973aab814ce01974b627cdb9561a7de4ab", "message": "fixed test", "committedDate": "2020-04-08T13:44:31Z", "type": "forcePushed"}]}