{"pr_number": 5591, "pr_title": "fix: make stream and column names case-insensitive in /inserts-stream", "pr_createdAt": "2020-06-10T07:57:59Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5591", "timeline": [{"oid": "d433e373127497b7d4faab8ac146024043227e2d", "url": "https://github.com/confluentinc/ksql/commit/d433e373127497b7d4faab8ac146024043227e2d", "message": "fix: make stream and column names case-insensitive in /inserts-stream", "committedDate": "2020-06-10T00:56:26Z", "type": "commit"}, {"oid": "2588878fc316ba7b6e29d64a5ddbc06a514f2db6", "url": "https://github.com/confluentinc/ksql/commit/2588878fc316ba7b6e29d64a5ddbc06a514f2db6", "message": "test: add test for case insensitive insert", "committedDate": "2020-06-10T01:04:37Z", "type": "commit"}, {"oid": "b9943e422da8645546cbb9dab6caf2aed26ce2e2", "url": "https://github.com/confluentinc/ksql/commit/b9943e422da8645546cbb9dab6caf2aed26ce2e2", "message": "test: tests for case sensitivity when quoted", "committedDate": "2020-06-10T01:26:11Z", "type": "commit"}, {"oid": "905359f44a9378a30d45623453e56c93c431c468", "url": "https://github.com/confluentinc/ksql/commit/905359f44a9378a30d45623453e56c93c431c468", "message": "test: verify case-insensitivity in client", "committedDate": "2020-06-10T07:23:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMzg5Nw==", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r437933897", "bodyText": "It's not great that this logic is repeated here and also in the method of the same name in ParserUtil.java. I couldn't think of a way to combine them, though, since the ParserUtil method is specific to the AST.", "author": "vcrfxia", "createdAt": "2020-06-10T07:59:55Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -97,6 +97,20 @@ public static String convertCommaSeparatedWilcardsToRegex(final String csv) {\n     return out.toString();\n   }\n \n+  // See ParserUtil#getIdentifierText()\n+  public static String getIdentifierText(final String text) {", "originalCommit": "905359f44a9378a30d45623453e56c93c431c468", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3NzkzMA==", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r437977930", "bodyText": "Instead of iterating through the entries again in here and having an extra method, it would be simpler to call ServerUtils.getIdentifierText in the existing extractValues method.", "author": "purplefox", "createdAt": "2020-06-10T09:11:04Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/KeyValueExtractor.java", "diffHunk": "@@ -69,6 +71,28 @@ public static GenericRow extractValues(final JsonObject values, final LogicalSch\n     return GenericRow.fromList(vals);\n   }\n \n+  static JsonObject convertColumnNameCase(final JsonObject jsonObjectWithCaseInsensitiveFields) {", "originalCommit": "905359f44a9378a30d45623453e56c93c431c468", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNDc3MA==", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r438314770", "bodyText": "Then we'd also have to do the conversion in extractKey() too, right? I think it's better to do it once upfront, rather than making both extractValues() and extractKey() responsible for converting.\nI'm going to merge this for now; can open a follow-up with the requested changes if I've misunderstood.", "author": "vcrfxia", "createdAt": "2020-06-10T18:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3NzkzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3ODIzNA==", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r437978234", "bodyText": "Do we really also support double quotes for escaping? Thought it was just backtick.", "author": "purplefox", "createdAt": "2020-06-10T09:11:36Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -97,6 +97,20 @@ public static String convertCommaSeparatedWilcardsToRegex(final String csv) {\n     return out.toString();\n   }\n \n+  // See ParserUtil#getIdentifierText()\n+  public static String getIdentifierText(final String text) {\n+    if (text.isEmpty()) {\n+      return \"\";\n+    }\n+\n+    final char firstChar = text.charAt(0);\n+    if (firstChar == '`' || firstChar == '\"') {", "originalCommit": "905359f44a9378a30d45623453e56c93c431c468", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNDcyNA==", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r438314724", "bodyText": "We also support double quotes. Here's the relevant code: \n  \n    \n      ksql/ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java\n    \n    \n        Lines 74 to 77\n      in\n      8427426\n    \n    \n    \n    \n\n        \n          \n           if (context instanceof SqlBaseParser.QuotedIdentifierAlternativeContext) { \n        \n\n        \n          \n             return unquote(context.getText(), \"\\\"\"); \n        \n\n        \n          \n           } else if (context instanceof SqlBaseParser.BackQuotedIdentifierContext) { \n        \n\n        \n          \n             return unquote(context.getText(), \"`\"); \n        \n    \n  \n\n\nI also sanity checked manually.", "author": "vcrfxia", "createdAt": "2020-06-10T18:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3ODIzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3OTM4OQ==", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r437979389", "bodyText": "What about backtick?", "author": "purplefox", "createdAt": "2020-06-10T09:13:38Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/ApiIntegrationTest.java", "diffHunk": "@@ -416,6 +417,50 @@ public void shouldInsertWithMissingValueField() {\n     shouldInsert(row);\n   }\n \n+  @Test\n+  public void shouldInsertWithCaseInsensitivity() {\n+\n+    // Given: lowercase fields names and stream name\n+    String target = TEST_STREAM.toLowerCase();\n+    JsonObject row = new JsonObject()\n+        .put(\"str\", \"HELLO\")\n+        .put(\"dec\", 12.21) // JsonObject does not accept BigDecimal\n+        .put(\"array\", new JsonArray().add(\"a\").add(\"b\"))\n+        .put(\"map\", new JsonObject().put(\"k1\", \"v1\").put(\"k2\", \"v2\"));\n+\n+    // Then:\n+    shouldInsert(target, row);\n+  }\n+\n+  @Test\n+  public void shouldTreatInsertTargetAsCaseSensitiveIfQuoted() {\n+    // Given:\n+    String target = \"`\" + TEST_STREAM.toLowerCase() + \"`\";\n+    JsonObject row = new JsonObject()\n+        .put(\"STR\", \"HELLO\")\n+        .put(\"LONG\", 1000L)\n+        .put(\"DEC\", 12.21) // JsonObject does not accept BigDecimal\n+        .put(\"ARRAY\", new JsonArray().add(\"a\").add(\"b\"))\n+        .put(\"MAP\", new JsonObject().put(\"k1\", \"v1\").put(\"k2\", \"v2\"));\n+\n+    // Then: request fails because stream name is invalid\n+    shouldRejectInsertRequest(target, row, \"Cannot insert values into an unknown stream: \" + target);\n+  }\n+\n+  @Test\n+  public void shouldTreatInsertColumnNamesAsCaseSensitiveIfQuoted() {\n+    // Given:\n+    JsonObject row = new JsonObject()\n+        .put(\"\\\"str\\\"\", \"HELLO\")", "originalCommit": "905359f44a9378a30d45623453e56c93c431c468", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNDc0Nw==", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r438314747", "bodyText": "Added.", "author": "vcrfxia", "createdAt": "2020-06-10T18:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3OTM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e88b870d6057753794a2b3e4c9df15aae2a0dc1", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/ApiIntegrationTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/ApiIntegrationTest.java\nindex 0036948a6e..9c1987f53c 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/ApiIntegrationTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/ApiIntegrationTest.java\n\n@@ -433,7 +433,7 @@ public class ApiIntegrationTest {\n   }\n \n   @Test\n-  public void shouldTreatInsertTargetAsCaseSensitiveIfQuoted() {\n+  public void shouldTreatInsertTargetAsCaseSensitiveIfQuotedWithBackticks() {\n     // Given:\n     String target = \"`\" + TEST_STREAM.toLowerCase() + \"`\";\n     JsonObject row = new JsonObject()\n"}}, {"oid": "9e88b870d6057753794a2b3e4c9df15aae2a0dc1", "url": "https://github.com/confluentinc/ksql/commit/9e88b870d6057753794a2b3e4c9df15aae2a0dc1", "message": "test: test case sensitivity with backticks and double quotes", "committedDate": "2020-06-10T17:33:42Z", "type": "commit"}, {"oid": "d695e130ece40f22690481226ee266539b8ccef4", "url": "https://github.com/confluentinc/ksql/commit/d695e130ece40f22690481226ee266539b8ccef4", "message": "test: fix flake", "committedDate": "2020-06-10T17:42:32Z", "type": "commit"}, {"oid": "dafab7f4d463ba02c39e650f26cad408e9a8c1c4", "url": "https://github.com/confluentinc/ksql/commit/dafab7f4d463ba02c39e650f26cad408e9a8c1c4", "message": "Merge branch '6.0.x' into inserts-stream-case", "committedDate": "2020-06-10T18:21:38Z", "type": "commit"}]}