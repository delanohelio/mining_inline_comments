{"pr_number": 4390, "pr_title": "Correctly validate joins between windowed and non-windowed sources", "pr_createdAt": "2020-01-27T19:26:04Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4390", "timeline": [{"oid": "76e6499b272cc32bd908c990aa0ec4de49a5ebf5", "url": "https://github.com/confluentinc/ksql/commit/76e6499b272cc32bd908c990aa0ec4de49a5ebf5", "message": "chore: fail on joins with incompatible window/non-windowed keys\n\nPreviously, KSQL did nothing to validate a join between two sources had keys with compatible windowing.\n\n* it did not check that both sources were either windowed or non-windowed.  Joining a non-windowed source to a windowed source will never result in any output as the binary keys can never match.\n* it did not check that both sources had compatible window types. Session windows include both window start and end times in the serialized key, where as hopping and tumbling windows only serialize the window start. For this reason, session windowed sources can only be joined with other session windowed sources. Hopping and tumbling windowed sources can only be joined with other hopping and tumbling windowed sources.\n\nThis commit adds these checks and suitable QTT tests to prove them.", "committedDate": "2020-01-27T19:23:54Z", "type": "commit"}, {"oid": "234f733119979865d7328c85625bdc76ca798f1a", "url": "https://github.com/confluentinc/ksql/commit/234f733119979865d7328c85625bdc76ca798f1a", "message": "chore: fix test", "committedDate": "2020-01-27T19:25:01Z", "type": "commit"}, {"oid": "d27fcafb3926ffb97f400e6921caa064306c72d8", "url": "https://github.com/confluentinc/ksql/commit/d27fcafb3926ffb97f400e6921caa064306c72d8", "message": "Merge branch 'master' into windowed_joins", "committedDate": "2020-01-27T22:50:48Z", "type": "commit"}, {"oid": "fb129a6e54f599bb000ea71dfb75feb93207c49f", "url": "https://github.com/confluentinc/ksql/commit/fb129a6e54f599bb000ea71dfb75feb93207c49f", "message": "Merge branch 'master' into windowed_joins", "committedDate": "2020-01-28T12:03:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTk3Mw==", "url": "https://github.com/confluentinc/ksql/pull/4390#discussion_r372091973", "bodyText": "This checks if the left and right alias are the same? Might want to consolidate it under the self join check. The current name is a bit misleading", "author": "vpapavas", "createdAt": "2020-01-28T22:21:54Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -397,14 +387,95 @@ protected AstNode visitJoin(final Join node, final Void context) {\n       return null;\n     }\n \n-    private boolean validJoin(\n-        final SourceName leftName,\n-        final SourceName rightName,\n+    private void throwOnSelfJoin(final AliasedDataSource left, final AliasedDataSource right) {\n+      if (left.getDataSource().getName().equals(right.getDataSource().getName())) {\n+        throw new KsqlException(\n+            \"Can not join '\" + left.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"' to '\" + right.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"': self joins are not yet supported.\"\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompleteJoinCriteria(", "originalCommit": "fb129a6e54f599bb000ea71dfb75feb93207c49f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyMTMyMA==", "url": "https://github.com/confluentinc/ksql/pull/4390#discussion_r372321320", "bodyText": "No, this checks the the two sides of the join criteria reference both sources, e.g. it rejects a join like:\n... FROM A JOIN B ON B.COL1 = B.COL2;\n\nNote: source A is not included in the join criteria.", "author": "big-andy-coates", "createdAt": "2020-01-29T11:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTk3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMjY1NQ==", "url": "https://github.com/confluentinc/ksql/pull/4390#discussion_r372132655", "bodyText": "Just to make sure: Session can only join with session whereas hopping and tumbling can join with each other interchangeably?", "author": "vpapavas", "createdAt": "2020-01-29T00:25:39Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -397,14 +387,95 @@ protected AstNode visitJoin(final Join node, final Void context) {\n       return null;\n     }\n \n-    private boolean validJoin(\n-        final SourceName leftName,\n-        final SourceName rightName,\n+    private void throwOnSelfJoin(final AliasedDataSource left, final AliasedDataSource right) {\n+      if (left.getDataSource().getName().equals(right.getDataSource().getName())) {\n+        throw new KsqlException(\n+            \"Can not join '\" + left.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"' to '\" + right.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"': self joins are not yet supported.\"\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompleteJoinCriteria(\n+        final AliasedDataSource left,\n+        final AliasedDataSource right,\n         final SourceName leftExpressionSource,\n         final SourceName rightExpressionSource\n     ) {\n-      return ImmutableSet.of(leftExpressionSource, rightExpressionSource)\n-          .containsAll(ImmutableList.of(leftName, rightName));\n+      final boolean valid = ImmutableSet.of(leftExpressionSource, rightExpressionSource)\n+          .containsAll(ImmutableList.of(left.getAlias(), right.getAlias()));\n+\n+      if (!valid) {\n+        throw new KsqlException(\n+            \"Each side of the join must reference exactly one source and not the same source. \"\n+                + \"Left side references \" + leftExpressionSource\n+                + \" and right references \" + rightExpressionSource\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompatibleSourceWindowing(\n+        final AliasedDataSource left,\n+        final AliasedDataSource right\n+    ) {\n+      final Optional<WindowType> leftWindowType = left.getDataSource()\n+          .getKsqlTopic()\n+          .getKeyFormat()\n+          .getWindowInfo()\n+          .map(WindowInfo::getType);\n+\n+      final Optional<WindowType> rightWindowType = right.getDataSource()\n+          .getKsqlTopic()\n+          .getKeyFormat()\n+          .getWindowInfo()\n+          .map(WindowInfo::getType);\n+\n+      if (leftWindowType.isPresent() != rightWindowType.isPresent()) {\n+        throw windowedNonWindowedJoinException(left, right, leftWindowType, rightWindowType);\n+      }\n+\n+      if (!leftWindowType.isPresent()) {\n+        return;\n+      }\n+\n+      final WindowType leftWt = leftWindowType.get();", "originalCommit": "fb129a6e54f599bb000ea71dfb75feb93207c49f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMzYyMw==", "url": "https://github.com/confluentinc/ksql/pull/4390#discussion_r372133623", "bodyText": "Nevermind, tests are self-explanatory :)", "author": "vpapavas", "createdAt": "2020-01-29T00:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMjY1NQ=="}], "type": "inlineReview", "revised_code": null}]}