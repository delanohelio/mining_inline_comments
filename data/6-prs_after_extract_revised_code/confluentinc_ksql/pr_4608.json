{"pr_number": 4608, "pr_title": "feat: Add metrics for pull queries endpoint", "pr_createdAt": "2020-02-22T02:26:00Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4608", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMzYyNA==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384813624", "bodyText": "can you please file an issue for refactoring this method if one does not exist..", "author": "vinothchandar", "createdAt": "2020-02-26T22:45:08Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -579,6 +580,7 @@ static KsqlRestApplication buildApplication(\n             new KsqlSecurityContextBinder(config, securityExtension, schemaRegistryClientFactory));\n   }\n \n+  @SuppressWarnings(\"checkstyle:MethodLength\")", "originalCommit": "a9fe9d995084f91affa01bf80ee26baa11e599a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MTEzMw==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r385351133", "bodyText": "Tracked here #4660", "author": "vpapavas", "createdAt": "2020-02-27T20:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMzYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "1765fc22deca2508c8338ee73d415486c036fddf", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\nindex 0305a30c26..c7c65c5c5a 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n\n@@ -577,7 +605,11 @@ public final class KsqlRestApplication extends ExecutableApplication<KsqlRestCon\n         Integer.MAX_VALUE,\n         serviceContext,\n         (config, securityExtension) ->\n-            new KsqlSecurityContextBinder(config, securityExtension, schemaRegistryClientFactory));\n+            new KsqlSecurityContextBinder(config, securityExtension, schemaRegistryClientFactory),\n+        ksqlSecurityExtension -> new DefaultKsqlSecurityContextProvider(ksqlSecurityExtension,\n+            RestServiceContextFactory::create,\n+            RestServiceContextFactory::create, ksqlConfig, schemaRegistryClientFactory)\n+    );\n   }\n \n   @SuppressWarnings(\"checkstyle:MethodLength\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMzkwMQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384813901", "bodyText": "naming: ksql.pull.query.metrics.enabled?", "author": "vinothchandar", "createdAt": "2020-02-26T22:45:48Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -158,6 +158,11 @@\n   private static final String KSQL_LAG_REPORTING_SEND_INTERVAL_MS_DOC =\n       \"Interval at which lag reports are broadcasted to servers.\";\n \n+  public static final String KSQL_COLLECT_PULL_QUERY_METRICS_CONFIG =", "originalCommit": "a9fe9d995084f91affa01bf80ee26baa11e599a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNDEyOQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384814129", "bodyText": "Also would n't this be a server level config? i.e place in KsqlConfig?", "author": "vinothchandar", "createdAt": "2020-02-26T22:46:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMzkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "003f593f77bb8ea1a370b0f93b74d0474c36c8e6", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\nindex c0f8f40a8b..dcb0dec09a 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n\n@@ -158,11 +158,6 @@ public class KsqlRestConfig extends RestConfig {\n   private static final String KSQL_LAG_REPORTING_SEND_INTERVAL_MS_DOC =\n       \"Interval at which lag reports are broadcasted to servers.\";\n \n-  public static final String KSQL_COLLECT_PULL_QUERY_METRICS_CONFIG =\n-      \"ksql.pull.query.collect.metrics\";\n-  public static final String KSQL_COLLECT_PULL_QUERY_METRICS_DOC =\n-      \"Whether collecting JMX metrics is enabled or not.\";\n-\n   private static final ConfigDef CONFIG_DEF;\n \n   static {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMzYwMw==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384833603", "bodyText": "so, I think we should construct this internally within PullQueryExecutor and not pass this from outside.. The goal is to keep the metrics contained to this part of the code, the rest should not have to know about this?", "author": "vinothchandar", "createdAt": "2020-02-26T23:40:41Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -126,18 +126,21 @@\n       VALID_WINDOW_BOUNDS_TYPES.toString();\n \n   private final KsqlExecutionContext executionContext;\n-  private final Optional<HeartbeatAgent> heartbeatAgent;\n   private final RoutingFilterFactory routingFilterFactory;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics;\n+  private final Time time;\n \n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n-      final Optional<HeartbeatAgent> heartbeatAgent,\n-      final RoutingFilterFactory routingFilterFactory\n+      final RoutingFilterFactory routingFilterFactory,\n+      final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics", "originalCommit": "a9fe9d995084f91affa01bf80ee26baa11e599a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "003f593f77bb8ea1a370b0f93b74d0474c36c8e6", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex 32515ee0d1..dffe27d96e 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -133,13 +135,17 @@ public final class PullQueryExecutor {\n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n-      final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics\n+      final KsqlConfig ksqlConfig\n   ) {\n     this.executionContext = Objects.requireNonNull(executionContext, \"executionContext\");\n     this.routingFilterFactory =\n         Objects.requireNonNull(routingFilterFactory, \"routingFilterFactory\");\n-    this.pullQueryExecutorMetrics = Objects.requireNonNull(\n-        pullQueryExecutorMetrics, \"pullQueryExecutorMetrics\");\n+    final Boolean collectMetrics = ksqlConfig.getBoolean(\n+        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n+    final Optional<PullQueryExecutorMetrics> metrics = collectMetrics\n+        ? Optional.of(new PullQueryExecutorMetrics())\n+        : empty();\n+    this.pullQueryExecutorMetrics = metrics;\n     this.time = Time.SYSTEM;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMzg4NQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384833885", "bodyText": "we don't need this anymore?", "author": "vinothchandar", "createdAt": "2020-02-26T23:41:18Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -126,18 +126,21 @@\n       VALID_WINDOW_BOUNDS_TYPES.toString();\n \n   private final KsqlExecutionContext executionContext;\n-  private final Optional<HeartbeatAgent> heartbeatAgent;", "originalCommit": "a9fe9d995084f91affa01bf80ee26baa11e599a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "003f593f77bb8ea1a370b0f93b74d0474c36c8e6", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex 32515ee0d1..dffe27d96e 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -133,13 +135,17 @@ public final class PullQueryExecutor {\n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n-      final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics\n+      final KsqlConfig ksqlConfig\n   ) {\n     this.executionContext = Objects.requireNonNull(executionContext, \"executionContext\");\n     this.routingFilterFactory =\n         Objects.requireNonNull(routingFilterFactory, \"routingFilterFactory\");\n-    this.pullQueryExecutorMetrics = Objects.requireNonNull(\n-        pullQueryExecutorMetrics, \"pullQueryExecutorMetrics\");\n+    final Boolean collectMetrics = ksqlConfig.getBoolean(\n+        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n+    final Optional<PullQueryExecutorMetrics> metrics = collectMetrics\n+        ? Optional.of(new PullQueryExecutorMetrics())\n+        : empty();\n+    this.pullQueryExecutorMetrics = metrics;\n     this.time = Time.SYSTEM;\n   }\n \n"}}, {"oid": "003f593f77bb8ea1a370b0f93b74d0474c36c8e6", "url": "https://github.com/confluentinc/ksql/commit/003f593f77bb8ea1a370b0f93b74d0474c36c8e6", "message": "addressed vinoth's comments, added percentiles", "committedDate": "2020-02-28T21:54:07Z", "type": "forcePushed"}, {"oid": "1765fc22deca2508c8338ee73d415486c036fddf", "url": "https://github.com/confluentinc/ksql/commit/1765fc22deca2508c8338ee73d415486c036fddf", "message": "tested error rate", "committedDate": "2020-03-12T00:13:49Z", "type": "forcePushed"}, {"oid": "f212f8781a399d47e12eb56ec56e59800680f6f3", "url": "https://github.com/confluentinc/ksql/commit/f212f8781a399d47e12eb56ec56e59800680f6f3", "message": "added metrics for pull query resource\n\nadded metrics for pull query resource\n\nremove whitespace", "committedDate": "2020-03-13T23:36:53Z", "type": "commit"}, {"oid": "c7824e0db505937c303a5328cbdf06bbc487d2f0", "url": "https://github.com/confluentinc/ksql/commit/c7824e0db505937c303a5328cbdf06bbc487d2f0", "message": "addressed vinoth's comments, added percentiles\n\nchange to nanoseconds\n\nchange to microseconds\n\nadded error rate, measure latency end-to-end\n\nerror rate", "committedDate": "2020-03-13T23:37:27Z", "type": "commit"}, {"oid": "069ed1920eea61ee7853ddbae95b3a13049ee85a", "url": "https://github.com/confluentinc/ksql/commit/069ed1920eea61ee7853ddbae95b3a13049ee85a", "message": "tested error rate", "committedDate": "2020-03-13T23:37:33Z", "type": "commit"}, {"oid": "cb0cdea59ae460b47201f7ce2229cb9ccf452ca3", "url": "https://github.com/confluentinc/ksql/commit/cb0cdea59ae460b47201f7ce2229cb9ccf452ca3", "message": "remove wrongly added file", "committedDate": "2020-03-13T23:40:13Z", "type": "commit"}, {"oid": "cb0cdea59ae460b47201f7ce2229cb9ccf452ca3", "url": "https://github.com/confluentinc/ksql/commit/cb0cdea59ae460b47201f7ce2229cb9ccf452ca3", "message": "remove wrongly added file", "committedDate": "2020-03-13T23:40:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDc2Mw==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r392530763", "bodyText": "I think it'd be good to add the KSQL service ID into these metrics, in case someone is running multiple KSQL deployments so they can distinguish which deployment the metric refers to. For engine metrics we pre-prend the service ID to the group name (\n  \n    \n      ksql/ksqldb-engine/src/main/java/io/confluent/ksql/internal/KsqlEngineMetrics.java\n    \n    \n         Line 307\n      in\n      7bf5c12\n    \n    \n    \n    \n\n        \n          \n           ksqlServiceId + metricGroupName, \n        \n    \n  \n\n) though later discussion agreed it makes more sense as a metric tag (#1941 (comment)).", "author": "vcrfxia", "createdAt": "2020-03-13T23:49:11Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+\n+  public PullQueryExecutorMetrics() {\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\"\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\"\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-rate\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Rate of pull query requests\"\n+        ),\n+        new Rate()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureErrorRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-error-rate\");\n+    sensor.add(\n+        metrics.metricName(", "originalCommit": "cb0cdea59ae460b47201f7ce2229cb9ccf452ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecf3f722660b2f3b702a695c02dae14c03704dfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex cefdb1bd6b..b6a0f9d323 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -16,9 +16,12 @@\n package io.confluent.ksql.rest.server.execution;\n \n import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n import java.io.Closeable;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n import org.apache.kafka.common.metrics.Metrics;\n import org.apache.kafka.common.metrics.Sensor;\n import org.apache.kafka.common.metrics.stats.Avg;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTI2NA==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r392531264", "bodyText": "It'd be great if we can also add the user-specified custom metric tags (\n  \n    \n      ksql/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n    \n    \n         Line 128\n      in\n      7bf5c12\n    \n    \n    \n    \n\n        \n          \n           public static final String KSQL_CUSTOM_METRICS_TAGS = \"ksql.metrics.tags.custom\"; \n        \n    \n  \n\n) to these metrics, similar to how we do for engine metrics (\n  \n    \n      ksql/ksqldb-engine/src/main/java/io/confluent/ksql/internal/KsqlEngineMetrics.java\n    \n    \n         Line 309\n      in\n      7bf5c12\n    \n    \n    \n    \n\n        \n          \n           customMetricsTags), \n        \n    \n  \n\n)", "author": "vcrfxia", "createdAt": "2020-03-13T23:51:45Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+\n+  public PullQueryExecutorMetrics() {\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\"\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\"\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-rate\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Rate of pull query requests\"\n+        ),\n+        new Rate()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureErrorRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-error-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-error-rate\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Rate of erroneous pull query requests\"", "originalCommit": "cb0cdea59ae460b47201f7ce2229cb9ccf452ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecf3f722660b2f3b702a695c02dae14c03704dfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex cefdb1bd6b..b6a0f9d323 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -16,9 +16,12 @@\n package io.confluent.ksql.rest.server.execution;\n \n import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n import java.io.Closeable;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n import org.apache.kafka.common.metrics.Metrics;\n import org.apache.kafka.common.metrics.Sensor;\n import org.apache.kafka.common.metrics.stats.Avg;\n"}}, {"oid": "ecf3f722660b2f3b702a695c02dae14c03704dfa", "url": "https://github.com/confluentinc/ksql/commit/ecf3f722660b2f3b702a695c02dae14c03704dfa", "message": "addressed victorias comments", "committedDate": "2020-03-14T00:47:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MDcwMg==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r392540702", "bodyText": "Since only the custom metrics tags are needed, here we can replace this with simply\nksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)\n\nrather than worrying about creating ServiceInfo in order to get the metrics tags.", "author": "vcrfxia", "createdAt": "2020-03-14T00:51:14Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -152,7 +153,9 @@ public void configure(final KsqlConfig config) {\n     final Boolean collectMetrics = ksqlConfig.getBoolean(\n         KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n     this.pullQueryExecutorMetrics = collectMetrics\n-        ? Optional.of(new PullQueryExecutorMetrics())\n+        ? Optional.of(new PullQueryExecutorMetrics(\n+            ksqlEngine.getServiceId(),\n+            ServiceInfo.create(ksqlConfig, \"\").customMetricsTags()))", "originalCommit": "ecf3f722660b2f3b702a695c02dae14c03704dfa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\nindex d5df882173..094c3ffde8 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n\n@@ -155,7 +154,7 @@ public class StreamedQueryResource implements KsqlConfigurable {\n     this.pullQueryExecutorMetrics = collectMetrics\n         ? Optional.of(new PullQueryExecutorMetrics(\n             ksqlEngine.getServiceId(),\n-            ServiceInfo.create(ksqlConfig, \"\").customMetricsTags()))\n+            ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n         : empty();\n   }\n \n"}}, {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb", "url": "https://github.com/confluentinc/ksql/commit/21ce409341ee2452ef312318686d34f7b8a74dfb", "message": "minor", "committedDate": "2020-03-14T02:01:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MTM0OQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393141349", "bodyText": "can we place this with the other pull query metrics", "author": "vinothchandar", "createdAt": "2020-03-16T16:13:01Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -260,6 +260,11 @@\n \n   public static final String KSQL_ANY_KEY_NAME_ENABLED = \"ksql.any.key.name.enabled\";\n \n+  public static final String KSQL_QUERY_PULL_METRICS_ENABLED =", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "651621c0d44683866f20589a0b9d5c54d787aa67", "chunk": "diff --git a/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex e0d8ee2e23..31d2ac1bfd 100644\n--- a/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -260,11 +265,6 @@ public class KsqlConfig extends AbstractConfig {\n \n   public static final String KSQL_ANY_KEY_NAME_ENABLED = \"ksql.any.key.name.enabled\";\n \n-  public static final String KSQL_QUERY_PULL_METRICS_ENABLED =\n-      \"ksql.query.pull.metrics.enabled\";\n-  public static final String KSQL_QUERY_PULL_METRICS_ENABLED_DOC =\n-      \"Config to enable/disable collecting JMX metrics for pull queries.\";\n-\n   private enum ConfigGeneration {\n     LEGACY,\n     CURRENT\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDUxNQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393144515", "bodyText": "nit: pull query metrics", "author": "vinothchandar", "createdAt": "2020-03-16T16:17:45Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -417,8 +417,14 @@ private void initialize(final KsqlConfig configWithApplicationServer) {\n     serverState.setReady();\n   }\n \n+  @SuppressWarnings(\"checkstyle:NPathComplexity\")\n   @Override\n   public void triggerShutdown() {\n+    try {\n+      streamedQueryResource.closeMetrics();\n+    } catch (final Exception e) {\n+      log.error(\"Exception while waiting for Pull queries metrics to close\", e);", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "651621c0d44683866f20589a0b9d5c54d787aa67", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\nindex c7c65c5c5a..e2989f2620 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n\n@@ -423,7 +423,7 @@ public final class KsqlRestApplication extends ExecutableApplication<KsqlRestCon\n     try {\n       streamedQueryResource.closeMetrics();\n     } catch (final Exception e) {\n-      log.error(\"Exception while waiting for Pull queries metrics to close\", e);\n+      log.error(\"Exception while waiting for pull query metrics to close\", e);\n     }\n     try {\n       ksqlEngine.close();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDgyNg==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393144826", "bodyText": "can we do something about these warnings in this same PR?", "author": "vinothchandar", "createdAt": "2020-03-16T16:18:12Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -606,6 +612,7 @@ static KsqlRestApplication buildApplication(\n     );\n   }\n \n+  @SuppressWarnings(\"checkstyle:MethodLength\")", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NjMwNQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393256305", "bodyText": "This needs a separate PR and there is an issue tracking it", "author": "vpapavas", "createdAt": "2020-03-16T19:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDgyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzI2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393187261", "bodyText": "how are the other executors created? are we departing from any pattern..", "author": "vinothchandar", "createdAt": "2020-03-16T17:17:51Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -273,12 +274,11 @@ public static KsqlRestConfig convertToApiServerConfig(final KsqlRestConfig confi\n     this.configurables = requireNonNull(configurables, \"configurables\");\n     this.rocksDBConfigSetterHandler =\n         requireNonNull(rocksDBConfigSetterHandler, \"rocksDBConfigSetterHandler\");\n+    this.pullQueryExecutor = requireNonNull(pullQueryExecutor, \"pullQueryExecutor\");", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1Njg2Mg==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393256862", "bodyText": "Other executors follow a different pattern since they don't have constructors", "author": "vpapavas", "createdAt": "2020-03-16T19:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzI2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzUzNg==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393187536", "bodyText": "just metrics?", "author": "vinothchandar", "createdAt": "2020-03-16T17:18:20Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -152,7 +153,8 @@ public static void validate(\n \n   public TableRowsEntity execute(\n       final ConfiguredStatement<Query> statement,\n-      final ServiceContext serviceContext\n+      final ServiceContext serviceContext,\n+      final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "651621c0d44683866f20589a0b9d5c54d787aa67", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex f46b6a02e8..229f494248 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -154,7 +154,7 @@ public final class PullQueryExecutor {\n   public TableRowsEntity execute(\n       final ConfiguredStatement<Query> statement,\n       final ServiceContext serviceContext,\n-      final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics\n+      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n   ) {\n     if (!statement.getStatement().isPullQuery()) {\n       throw new IllegalArgumentException(\"Executor can only handle pull queries\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDU5MQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393190591", "bodyText": "do we need a count and a rate? is n't rate sufficient?  (same question for request rate and request count?)..", "author": "vinothchandar", "createdAt": "2020-03-16T17:23:36Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureErrorRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-error-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-error-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of erroneous pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-error-total\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Total number of erroneous pull query requests\",", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1ODc4Ng==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393258786", "bodyText": "I think its more informative to have a total count and rate. wrk reports both as well", "author": "vpapavas", "createdAt": "2020-03-16T19:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "651621c0d44683866f20589a0b9d5c54d787aa67", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex b6a0f9d323..e46271e6ba 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -102,6 +102,15 @@ public class PullQueryExecutorMetrics implements Closeable {\n         ),\n         new WindowedCount()\n     );\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n     sensors.add(sensor);\n     return sensor;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MTMwNw==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393191307", "bodyText": "just pullQueryMetrics?", "author": "vinothchandar", "createdAt": "2020-03-16T17:24:49Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -82,6 +86,8 @@\n   private final Errors errorHandler;\n   private KsqlConfig ksqlConfig;\n   private final PullQueryExecutor pullQueryExecutor;\n+  private Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics;", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "651621c0d44683866f20589a0b9d5c54d787aa67", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\nindex 094c3ffde8..409b223dfb 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n\n@@ -86,7 +86,7 @@ public class StreamedQueryResource implements KsqlConfigurable {\n   private final Errors errorHandler;\n   private KsqlConfig ksqlConfig;\n   private final PullQueryExecutor pullQueryExecutor;\n-  private Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics;\n+  private Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n   private final Time time;\n \n   public StreamedQueryResource(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MjUwMg==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393192502", "bodyText": "this will include latency for errored requests as well.. which is fine..  We can to know whether or not we are quickly failing", "author": "vinothchandar", "createdAt": "2020-03-16T17:26:50Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -198,12 +218,19 @@ private Response handleStatement(\n         final PreparedStatement<Query> queryStmt = (PreparedStatement<Query>) statement;\n \n         if (queryStmt.getStatement().isPullQuery()) {\n-          return handlePullQuery(\n+          final Response response =  handlePullQuery(\n               securityContext.getServiceContext(),\n               queryStmt,\n               request.getConfigOverrides(),\n               request.getRequestProperties()\n           );\n+          if (pullQueryExecutorMetrics.isPresent()) {", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "651621c0d44683866f20589a0b9d5c54d787aa67", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\nindex 094c3ffde8..409b223dfb 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java\n\n@@ -219,16 +219,16 @@ public class StreamedQueryResource implements KsqlConfigurable {\n \n         if (queryStmt.getStatement().isPullQuery()) {\n           final Response response =  handlePullQuery(\n-              securityContext.getServiceContext(),\n+                securityContext.getServiceContext(),\n               queryStmt,\n               request.getConfigOverrides(),\n               request.getRequestProperties()\n           );\n-          if (pullQueryExecutorMetrics.isPresent()) {\n+          if (pullQueryMetrics.isPresent()) {\n             //Record latency at microsecond scale\n             final double latency = (time.nanoseconds() - startTime) / 1000f ;\n-            pullQueryExecutorMetrics.get().recordLatency(latency);\n-            pullQueryExecutorMetrics.get().recordRate(1);\n+            pullQueryMetrics.get().recordLatency(latency);\n+            pullQueryMetrics.get().recordRate(1);\n           }\n           return response;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzkyOQ==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393193929", "bodyText": "should this be a rate?", "author": "vinothchandar", "createdAt": "2020-03-16T17:29:21Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MDYwNA==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393260604", "bodyText": "Added rate in addition to total", "author": "vpapavas", "createdAt": "2020-03-16T19:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "651621c0d44683866f20589a0b9d5c54d787aa67", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex b6a0f9d323..e46271e6ba 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -102,6 +102,15 @@ public class PullQueryExecutorMetrics implements Closeable {\n         ),\n         new WindowedCount()\n     );\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n     sensors.add(sensor);\n     return sensor;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NDA1MA==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393194050", "bodyText": "same here.. rate instead?", "author": "vinothchandar", "createdAt": "2020-03-16T17:29:33Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\",", "originalCommit": "21ce409341ee2452ef312318686d34f7b8a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MDYzNg==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393260636", "bodyText": "Added rate in addition to total", "author": "vpapavas", "createdAt": "2020-03-16T19:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NDA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "651621c0d44683866f20589a0b9d5c54d787aa67", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex b6a0f9d323..e46271e6ba 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -102,6 +102,15 @@ public class PullQueryExecutorMetrics implements Closeable {\n         ),\n         new WindowedCount()\n     );\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n     sensors.add(sensor);\n     return sensor;\n   }\n"}}, {"oid": "651621c0d44683866f20589a0b9d5c54d787aa67", "url": "https://github.com/confluentinc/ksql/commit/651621c0d44683866f20589a0b9d5c54d787aa67", "message": "addressed vinoth's comments", "committedDate": "2020-03-16T19:24:59Z", "type": "commit"}, {"oid": "64a2a4ee88ce9b62c3fd78c2169ad49076ffbf7e", "url": "https://github.com/confluentinc/ksql/commit/64a2a4ee88ce9b62c3fd78c2169ad49076ffbf7e", "message": "nit rename", "committedDate": "2020-03-16T19:28:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MDkzNg==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r402080936", "bodyText": "There needs to be a null check here as pulQueryMetrics can be null and this will cause a NPE on shutdown if it wasn't configured. (I have seen this NPE in real life)", "author": "purplefox", "createdAt": "2020-04-02T06:34:31Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -158,7 +173,11 @@ public Response streamQuery(\n     CommandStoreUtil.httpWaitForCommandSequenceNumber(\n         commandQueue, request, commandQueueCatchupTimeout);\n \n-    return handleStatement(securityContext, request, statement);\n+    return handleStatement(securityContext, request, statement, startTime);\n+  }\n+\n+  public void closeMetrics() {\n+    pullQueryMetrics.ifPresent(PullQueryExecutorMetrics::close);", "originalCommit": "64a2a4ee88ce9b62c3fd78c2169ad49076ffbf7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MzQxNg==", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r402083416", "bodyText": "pullQueryMetrics is a non final field - can we be sure that the configure method is called on the same thread that created the resource, and nothing else has seen the resource by that point, or is there some existing memory barrier being created?\nIf not, this is not thread safe, and another thread might see a null value of pullQueryMetrics after it has been set in wall clock time.\nA solution would be to get/set pullQueryMetrics via a synchronized getter/setter or make it volatile.\nIf the same pattern is being used elsewhere would also need to be addressed.", "author": "purplefox", "createdAt": "2020-04-02T06:40:58Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -142,13 +149,21 @@ public void configure(final KsqlConfig config) {\n     }\n \n     ksqlConfig = config;\n+    final Boolean collectMetrics = ksqlConfig.getBoolean(\n+        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n+    this.pullQueryMetrics = collectMetrics", "originalCommit": "64a2a4ee88ce9b62c3fd78c2169ad49076ffbf7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}