{"pr_number": 5327, "pr_title": "refactor(client): add ColumnType, KsqlObject, KsqlArray, BatchedQueryResult", "pr_createdAt": "2020-05-11T04:02:13Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5327", "timeline": [{"oid": "b8fa0776ab503d058cbf56b5da94966c64e3a7c8", "url": "https://github.com/confluentinc/ksql/commit/b8fa0776ab503d058cbf56b5da94966c64e3a7c8", "message": "chore: introduce ColumnType", "committedDate": "2020-05-09T21:35:20Z", "type": "commit"}, {"oid": "ecd2bb834dc04566f8a8ecfd4b6708657eadd7ef", "url": "https://github.com/confluentinc/ksql/commit/ecd2bb834dc04566f8a8ecfd4b6708657eadd7ef", "message": "chore: introduce KsqlObject and KsqlArray", "committedDate": "2020-05-09T21:35:21Z", "type": "commit"}, {"oid": "99ab24956b5f229e25d2c95923fbf4d6d0c28bf6", "url": "https://github.com/confluentinc/ksql/commit/99ab24956b5f229e25d2c95923fbf4d6d0c28bf6", "message": "refactor: rename Row#getObject() to Row#getValue()", "committedDate": "2020-05-09T21:35:43Z", "type": "commit"}, {"oid": "d4ed9555661fb350d9ddce43cdd3974b5a7202db", "url": "https://github.com/confluentinc/ksql/commit/d4ed9555661fb350d9ddce43cdd3974b5a7202db", "message": "refactor: rename QueryResult to StreamedQueryResult", "committedDate": "2020-05-09T21:49:11Z", "type": "commit"}, {"oid": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "url": "https://github.com/confluentinc/ksql/commit/c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "message": "chore: add BatchedQueryResult", "committedDate": "2020-05-09T22:01:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwOTk5NQ==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422909995", "bodyText": "I would also add a method to convert to a JSON string (just delegate to the underlying method), this would be super useful.", "author": "purplefox", "createdAt": "2020-05-11T09:32:22Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import io.vertx.core.json.JsonArray;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class KsqlArray {\n+\n+  private final JsonArray delegate;\n+\n+  public KsqlArray() {\n+    delegate = new JsonArray();\n+  }\n+\n+  public KsqlArray(final List<?> list) {\n+    delegate = new JsonArray(list);\n+  }\n+\n+  KsqlArray(final JsonArray jsonArray) {\n+    delegate = Objects.requireNonNull(jsonArray);\n+  }\n+\n+  public boolean contains(final Object value) {\n+    return delegate.contains(value);\n+  }\n+\n+  public int size() {\n+    return delegate.size();\n+  }\n+\n+  public boolean isEmpty() {\n+    return delegate.isEmpty();\n+  }\n+\n+  public List<?> getList() {\n+    return delegate.getList();\n+  }\n+\n+  public Iterator<Object> iterator() {\n+    return delegate.iterator();\n+  }\n+\n+  public java.util.stream.Stream<Object> stream() {\n+    return delegate.stream();\n+  }\n+\n+  public Object getValue(final int pos) {\n+    return delegate.getValue(pos);\n+  }\n+\n+  public String getString(final int pos) {\n+    return delegate.getString(pos);\n+  }\n+\n+  public Integer getInteger(final int pos) {\n+    return delegate.getInteger(pos);\n+  }\n+\n+  public Long getLong(final int pos) {\n+    return delegate.getLong(pos);\n+  }\n+\n+  public Double getDouble(final int pos) {\n+    return delegate.getDouble(pos);\n+  }\n+\n+  public Boolean getBoolean(final int pos) {\n+    return delegate.getBoolean(pos);\n+  }\n+\n+  public KsqlArray getKsqlArray(final int pos) {\n+    return new KsqlArray(delegate.getJsonArray(pos));\n+  }\n+\n+  public KsqlObject getKsqlObject(final int pos) {\n+    return new KsqlObject(delegate.getJsonObject(pos));\n+  }\n+\n+  public Object remove(final int pos) {\n+    return delegate.remove(pos);\n+  }\n+\n+  public Object remove(final Object value) {\n+    return delegate.remove(value);\n+  }\n+\n+  public KsqlArray add(final String value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Integer value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Long value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Double value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Boolean value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final KsqlArray value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final KsqlObject value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Object value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray addNull() {\n+    delegate.addNull();\n+    return this;\n+  }\n+\n+  public KsqlArray addAll(final KsqlArray array) {\n+    delegate.addAll(toJsonArray(array));\n+    return this;\n+  }\n+\n+  public KsqlArray copy() {\n+    return new KsqlArray(delegate.copy());\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    final KsqlArray that = (KsqlArray) o;\n+    return delegate.equals(that.delegate);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(delegate);\n+  }\n+\n+  private static JsonArray toJsonArray(final KsqlArray ksqlArray) {\n+    return new JsonArray(ksqlArray.getList());\n+  }\n+}", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNzkwNA==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r423327904", "bodyText": "Done. I've added both toJsonString() and toString() (with the same implementation) in order to be explicit but I can remove toJsonString() if you think it's unncessary.", "author": "vcrfxia", "createdAt": "2020-05-11T21:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwOTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "chunk": "diff --git a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\nindex 4eab98749b..ec240d135d 100644\n--- a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\n+++ b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\n\n@@ -154,6 +154,15 @@ public class KsqlArray {\n     return new KsqlArray(delegate.copy());\n   }\n \n+  public String toJsonString() {\n+    return delegate.toString();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toJsonString();\n+  }\n+\n   @Override\n   public boolean equals(final Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMDkwMg==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422910902", "bodyText": "This object is only intended to be used a return value from the API not as a general purpose JsonArray object so I'd keep the constructor hidden", "author": "purplefox", "createdAt": "2020-05-11T09:33:53Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import io.vertx.core.json.JsonArray;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class KsqlArray {\n+\n+  private final JsonArray delegate;\n+\n+  public KsqlArray() {", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjAxMQ==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r423322011", "bodyText": "I'm planning to have the inserts APIs be\nCompletableFuture<Void> insertInto(String streamName, KsqlObject row);\n\nPublisher<InsertAck> streamInserts(String streamName, Publisher<KsqlObject> insertsPublisher);\n\nin which case users will need access to the constructor. Did you have something different in mind?", "author": "vcrfxia", "createdAt": "2020-05-11T21:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMDkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "chunk": "diff --git a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\nindex 4eab98749b..ec240d135d 100644\n--- a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\n+++ b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\n\n@@ -154,6 +154,15 @@ public class KsqlArray {\n     return new KsqlArray(delegate.copy());\n   }\n \n+  public String toJsonString() {\n+    return delegate.toString();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toJsonString();\n+  }\n+\n   @Override\n   public boolean equals(final Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMTA4OA==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422911088", "bodyText": "As above about hiding constructor", "author": "purplefox", "createdAt": "2020-05-11T09:34:13Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import io.vertx.core.json.JsonObject;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class KsqlObject {\n+\n+  private final JsonObject delegate;\n+\n+  public KsqlObject() {", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNzk2Mg==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r423327962", "bodyText": "As above.", "author": "vcrfxia", "createdAt": "2020-05-11T21:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMTA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "chunk": "diff --git a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\nindex f63593f700..51da4956ed 100644\n--- a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\n+++ b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\n\n@@ -156,6 +156,15 @@ public class KsqlObject {\n     return new KsqlObject(delegate.copy());\n   }\n \n+  public String toJsonString() {\n+    return delegate.toString();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toJsonString();\n+  }\n+\n   @Override\n   public boolean equals(final Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMTc2Mw==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422911763", "bodyText": "No need to use Objects.hashCode as delegate is never null, can just use delegate.hashCode()", "author": "purplefox", "createdAt": "2020-05-11T09:35:22Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import io.vertx.core.json.JsonObject;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class KsqlObject {\n+\n+  private final JsonObject delegate;\n+\n+  public KsqlObject() {\n+    delegate = new JsonObject();\n+  }\n+\n+  public KsqlObject(final Map<String, Object> map) {\n+    delegate = new JsonObject(map);\n+  }\n+\n+  KsqlObject(final JsonObject jsonObject) {\n+    delegate = Objects.requireNonNull(jsonObject);\n+  }\n+\n+  public boolean containsKey(final String key) {\n+    return delegate.containsKey(key);\n+  }\n+\n+  public Set<String> fieldNames() {\n+    return delegate.fieldNames();\n+  }\n+\n+  public int size() {\n+    return delegate.size();\n+  }\n+\n+  public boolean isEmpty() {\n+    return delegate.isEmpty();\n+  }\n+\n+  public Map<String, Object> getMap() {\n+    return delegate.getMap();\n+  }\n+\n+  public Iterator<Entry<String,Object>> iterator() {\n+    return delegate.iterator();\n+  }\n+\n+  public java.util.stream.Stream<Map.Entry<String,Object>> stream() {\n+    return delegate.stream();\n+  }\n+\n+  public Object getValue(final String key) {\n+    return delegate.getValue(key);\n+  }\n+\n+  public String getString(final String key) {\n+    return delegate.getString(key);\n+  }\n+\n+  public Integer getInteger(final String key) {\n+    return delegate.getInteger(key);\n+  }\n+\n+  public Long getLong(final String key) {\n+    return delegate.getLong(key);\n+  }\n+\n+  public Double getDouble(final String key) {\n+    return delegate.getDouble(key);\n+  }\n+\n+  public Boolean getBoolean(final String key) {\n+    return delegate.getBoolean(key);\n+  }\n+\n+  public KsqlArray getKsqlArray(final String key) {\n+    return new KsqlArray(delegate.getJsonArray(key));\n+  }\n+\n+  public KsqlObject getKsqlObject(final String key) {\n+    return new KsqlObject(delegate.getJsonObject(key));\n+  }\n+\n+  public Object remove(final String key) {\n+    return delegate.remove(key);\n+  }\n+\n+  public KsqlObject put(final String key, final Integer value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final Long value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final String value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final Double value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final Boolean value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final KsqlArray value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final KsqlObject value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final Object value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject putNull(final String key) {\n+    delegate.putNull(key);\n+    return this;\n+  }\n+\n+  public KsqlObject mergeIn(final KsqlObject other) {\n+    delegate.mergeIn(toJsonObject(other));\n+    return this;\n+  }\n+\n+  public KsqlObject copy() {\n+    return new KsqlObject(delegate.copy());\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    final KsqlObject that = (KsqlObject) o;\n+    return delegate.equals(that.delegate);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(delegate);", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "chunk": "diff --git a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\nindex f63593f700..51da4956ed 100644\n--- a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\n+++ b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\n\n@@ -156,6 +156,15 @@ public class KsqlObject {\n     return new KsqlObject(delegate.copy());\n   }\n \n+  public String toJsonString() {\n+    return delegate.toString();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toJsonString();\n+  }\n+\n   @Override\n   public boolean equals(final Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMjA1MA==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422912050", "bodyText": "No need to use Objects.hashCode as delegate is never null, can just use delegate.hashCode()", "author": "purplefox", "createdAt": "2020-05-11T09:35:52Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import io.vertx.core.json.JsonArray;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class KsqlArray {\n+\n+  private final JsonArray delegate;\n+\n+  public KsqlArray() {\n+    delegate = new JsonArray();\n+  }\n+\n+  public KsqlArray(final List<?> list) {\n+    delegate = new JsonArray(list);\n+  }\n+\n+  KsqlArray(final JsonArray jsonArray) {\n+    delegate = Objects.requireNonNull(jsonArray);\n+  }\n+\n+  public boolean contains(final Object value) {\n+    return delegate.contains(value);\n+  }\n+\n+  public int size() {\n+    return delegate.size();\n+  }\n+\n+  public boolean isEmpty() {\n+    return delegate.isEmpty();\n+  }\n+\n+  public List<?> getList() {\n+    return delegate.getList();\n+  }\n+\n+  public Iterator<Object> iterator() {\n+    return delegate.iterator();\n+  }\n+\n+  public java.util.stream.Stream<Object> stream() {\n+    return delegate.stream();\n+  }\n+\n+  public Object getValue(final int pos) {\n+    return delegate.getValue(pos);\n+  }\n+\n+  public String getString(final int pos) {\n+    return delegate.getString(pos);\n+  }\n+\n+  public Integer getInteger(final int pos) {\n+    return delegate.getInteger(pos);\n+  }\n+\n+  public Long getLong(final int pos) {\n+    return delegate.getLong(pos);\n+  }\n+\n+  public Double getDouble(final int pos) {\n+    return delegate.getDouble(pos);\n+  }\n+\n+  public Boolean getBoolean(final int pos) {\n+    return delegate.getBoolean(pos);\n+  }\n+\n+  public KsqlArray getKsqlArray(final int pos) {\n+    return new KsqlArray(delegate.getJsonArray(pos));\n+  }\n+\n+  public KsqlObject getKsqlObject(final int pos) {\n+    return new KsqlObject(delegate.getJsonObject(pos));\n+  }\n+\n+  public Object remove(final int pos) {\n+    return delegate.remove(pos);\n+  }\n+\n+  public Object remove(final Object value) {\n+    return delegate.remove(value);\n+  }\n+\n+  public KsqlArray add(final String value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Integer value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Long value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Double value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Boolean value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final KsqlArray value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final KsqlObject value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray add(final Object value) {\n+    delegate.add(value);\n+    return this;\n+  }\n+\n+  public KsqlArray addNull() {\n+    delegate.addNull();\n+    return this;\n+  }\n+\n+  public KsqlArray addAll(final KsqlArray array) {\n+    delegate.addAll(toJsonArray(array));\n+    return this;\n+  }\n+\n+  public KsqlArray copy() {\n+    return new KsqlArray(delegate.copy());\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    final KsqlArray that = (KsqlArray) o;\n+    return delegate.equals(that.delegate);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(delegate);", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "chunk": "diff --git a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\nindex 4eab98749b..ec240d135d 100644\n--- a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\n+++ b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java\n\n@@ -154,6 +154,15 @@ public class KsqlArray {\n     return new KsqlArray(delegate.copy());\n   }\n \n+  public String toJsonString() {\n+    return delegate.toString();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toJsonString();\n+  }\n+\n   @Override\n   public boolean equals(final Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMjMzNQ==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422912335", "bodyText": "Would be nice to have method that gets Json string, as above.", "author": "purplefox", "createdAt": "2020-05-11T09:36:19Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import io.vertx.core.json.JsonObject;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class KsqlObject {\n+\n+  private final JsonObject delegate;\n+\n+  public KsqlObject() {\n+    delegate = new JsonObject();\n+  }\n+\n+  public KsqlObject(final Map<String, Object> map) {\n+    delegate = new JsonObject(map);\n+  }\n+\n+  KsqlObject(final JsonObject jsonObject) {\n+    delegate = Objects.requireNonNull(jsonObject);\n+  }\n+\n+  public boolean containsKey(final String key) {\n+    return delegate.containsKey(key);\n+  }\n+\n+  public Set<String> fieldNames() {\n+    return delegate.fieldNames();\n+  }\n+\n+  public int size() {\n+    return delegate.size();\n+  }\n+\n+  public boolean isEmpty() {\n+    return delegate.isEmpty();\n+  }\n+\n+  public Map<String, Object> getMap() {\n+    return delegate.getMap();\n+  }\n+\n+  public Iterator<Entry<String,Object>> iterator() {\n+    return delegate.iterator();\n+  }\n+\n+  public java.util.stream.Stream<Map.Entry<String,Object>> stream() {\n+    return delegate.stream();\n+  }\n+\n+  public Object getValue(final String key) {\n+    return delegate.getValue(key);\n+  }\n+\n+  public String getString(final String key) {\n+    return delegate.getString(key);\n+  }\n+\n+  public Integer getInteger(final String key) {\n+    return delegate.getInteger(key);\n+  }\n+\n+  public Long getLong(final String key) {\n+    return delegate.getLong(key);\n+  }\n+\n+  public Double getDouble(final String key) {\n+    return delegate.getDouble(key);\n+  }\n+\n+  public Boolean getBoolean(final String key) {\n+    return delegate.getBoolean(key);\n+  }\n+\n+  public KsqlArray getKsqlArray(final String key) {\n+    return new KsqlArray(delegate.getJsonArray(key));\n+  }\n+\n+  public KsqlObject getKsqlObject(final String key) {\n+    return new KsqlObject(delegate.getJsonObject(key));\n+  }\n+\n+  public Object remove(final String key) {\n+    return delegate.remove(key);\n+  }\n+\n+  public KsqlObject put(final String key, final Integer value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final Long value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final String value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final Double value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final Boolean value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final KsqlArray value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final KsqlObject value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject put(final String key, final Object value) {\n+    delegate.put(key, value);\n+    return this;\n+  }\n+\n+  public KsqlObject putNull(final String key) {\n+    delegate.putNull(key);\n+    return this;\n+  }\n+\n+  public KsqlObject mergeIn(final KsqlObject other) {\n+    delegate.mergeIn(toJsonObject(other));\n+    return this;\n+  }\n+\n+  public KsqlObject copy() {\n+    return new KsqlObject(delegate.copy());\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    final KsqlObject that = (KsqlObject) o;\n+    return delegate.equals(that.delegate);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(delegate);\n+  }\n+\n+  private static JsonObject toJsonObject(final KsqlObject ksqlObject) {\n+    return new JsonObject(ksqlObject.getMap());\n+  }", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyODA1Mg==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r423328052", "bodyText": "As above.", "author": "vcrfxia", "createdAt": "2020-05-11T21:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMjMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "chunk": "diff --git a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\nindex f63593f700..51da4956ed 100644\n--- a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\n+++ b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlObject.java\n\n@@ -156,6 +156,15 @@ public class KsqlObject {\n     return new KsqlObject(delegate.copy());\n   }\n \n+  public String toJsonString() {\n+    return delegate.toString();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toJsonString();\n+  }\n+\n   @Override\n   public boolean equals(final Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMzg4OQ==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422913889", "bodyText": "final?", "author": "purplefox", "createdAt": "2020-05-11T09:39:00Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ColumnTypeImpl.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client.impl;\n+\n+import io.confluent.ksql.api.client.ColumnType;\n+import java.util.Objects;\n+\n+public class ColumnTypeImpl implements ColumnType {\n+\n+  private Type type;", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyODMwNg==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r423328306", "bodyText": "Good catch. Not sure why checkstyle didn't complain... Fixed.", "author": "vcrfxia", "createdAt": "2020-05-11T21:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMzg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "chunk": "diff --git a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ColumnTypeImpl.java b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ColumnTypeImpl.java\nindex 3cf2ba2346..01ebd2cdb2 100644\n--- a/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ColumnTypeImpl.java\n+++ b/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ColumnTypeImpl.java\n\n@@ -20,7 +20,7 @@ import java.util.Objects;\n \n public class ColumnTypeImpl implements ColumnType {\n \n-  private Type type;\n+  private final Type type;\n \n   public ColumnTypeImpl(final String type) {\n     this(Type.valueOf(type));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNTQyNg==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422915426", "bodyText": "StreamedQueryResponseHandler?", "author": "purplefox", "createdAt": "2020-05-11T09:41:42Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/StreamQueryResponseHandler.java", "diffHunk": "@@ -27,22 +27,22 @@\n import java.util.Map;\n import java.util.concurrent.CompletableFuture;\n \n-public class StreamQueryResponseHandler extends QueryResponseHandler<QueryResult> {\n+public class StreamQueryResponseHandler extends QueryResponseHandler<StreamedQueryResult> {", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyOTYwNg==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r423329606", "bodyText": "The current names StreamQueryResponseHandler and ExecuteQueryResponseHandler parallel the client methods streamQuery() and executeQuery(), in contrast to the return types StreamedQueryResult and BatchedQueryResult. If the discrepancy is confusing we can rename to either StreamQueryResult/ExecuteQueryResult or StreamedQueryResponseHandler/BatchedQueryResponseHandler but I don't think we should have a mix with StreamedQueryResponseHandler and ExecuteQueryResponseHandler. Do you have a preference?", "author": "vcrfxia", "createdAt": "2020-05-11T21:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNTQyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjcwNQ==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r422952705", "bodyText": "Perhaps push this into the ColumnType class?\nstatic ColumnType of(String typeString) {\n}", "author": "purplefox", "createdAt": "2020-05-11T10:48:27Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/util/RowUtil.java", "diffHunk": "@@ -32,4 +35,14 @@ private RowUtil() {\n     }\n     return valueToIndex;\n   }\n+\n+  public static List<ColumnType> columnTypesFromStrings(final List<String> columnTypes) {\n+    return columnTypes.stream().map(RowUtil::columnTypeFromString).collect(Collectors.toList());\n+  }\n+\n+  private static ColumnType columnTypeFromString(final String columnType) {", "originalCommit": "c0331e3c56ad856cd3c0e7e3f47c8576c59758a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0NTA3OA==", "url": "https://github.com/confluentinc/ksql/pull/5327#discussion_r423345078", "bodyText": "You mean the ColumnType interface or the implementation class ColumnTypeImpl? The sort of string manipulation in this method feels odd in the interface. If we put it in the implementation, would it make more sense to instead update the constructor to perform the trimming, rather than having a static method for it? (Either's fine with me, just want to clarify what you had in mind.)", "author": "vcrfxia", "createdAt": "2020-05-11T22:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MjcwNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "url": "https://github.com/confluentinc/ksql/commit/5613ffb7313d37d0ad12f70c363ddebf5ad0133f", "message": "chore: feedback", "committedDate": "2020-05-11T22:01:35Z", "type": "commit"}]}