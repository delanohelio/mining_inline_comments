{"pr_number": 4701, "pr_title": "Partial support for arbitrary key column names.", "pr_createdAt": "2020-03-04T13:44:29Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4701", "timeline": [{"oid": "635aad75036f42d7a64007641aa514980af4372a", "url": "https://github.com/confluentinc/ksql/commit/635aad75036f42d7a64007641aa514980af4372a", "message": "chore: partial support for arbitrarily named key columns\n\nPartial fix for: #3536\n\nFirst part of supporting key column names other than `ROWKEY`.\n\nWith this initial pass you can now name your key columns anything you want in your `CREATE TABLE` and `CREATE STREAM` statements, e.g.\n\n```sql\nCREATE STREAM S (ID INT KEY, NAME STRING) WITH (...);\n```\n\nAny GROUP BY, PARTITION BY or JOIN on the key column results any created data source having a key column with a matching name, e.g.\n\n```sql\n-- schema of T: ID INT KEY, COUNT BIGINT\nCREATE TABLE T AS SELECT COUNT() AS COUNT FROM S GROUP BY ID;\n```\n\nPull and push queries work as expected and quoted identifiers work too.\n\nHowever, this functionality is not complete yet.\nHence it is guarded by the `ksql.any.key.name.enabled` feature flag, which defaults to off.\nThe following big ticket items are remaining:\n\n* PARTITION BY a single value column should result in a stream with the key column that matches the value column name.\n* GROUP BY a single value column should result in a table with the key column that matches the value column name.\n* JOIN on a single value column should  result in a stream/table with the key column that matches the value column name.\n\nThis additional work will be tracked under the same ticket, e.g. #3536", "committedDate": "2020-03-04T13:40:02Z", "type": "commit"}, {"oid": "6c6b03af5e7792f9890256e71ed15b52fdcdf224", "url": "https://github.com/confluentinc/ksql/commit/6c6b03af5e7792f9890256e71ed15b52fdcdf224", "message": "chore: commit test files", "committedDate": "2020-03-04T13:41:11Z", "type": "commit"}, {"oid": "e3cae9c406742390c00e253dc0921d5f9f076ab3", "url": "https://github.com/confluentinc/ksql/commit/e3cae9c406742390c00e253dc0921d5f9f076ab3", "message": "chore: commit historical plans", "committedDate": "2020-03-04T13:42:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODkyOQ==", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r387828929", "bodyText": "making sure that I understand correctly, this is partially implemented? shouldn't be able to set the rowkey name here to the column name either way?", "author": "agavra", "createdAt": "2020-03-04T17:45:00Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -409,26 +411,36 @@ private LogicalSchema buildAggregateSchema(\n       final PlanNode sourcePlanNode,\n       final List<Expression> groupByExps\n   ) {\n+    final LogicalSchema sourceSchema = sourcePlanNode.getSchema();\n+\n+    final ColumnName keyName;\n     final SqlType keyType;\n     if (groupByExps.size() != 1) {\n+      keyName = SchemaUtil.ROWKEY_NAME;\n       keyType = SqlTypes.STRING;\n     } else {\n+      final Expression expression = groupByExps.get(0);\n+\n+      keyName = exactlyMatchesKeyColumns(expression, sourceSchema)\n+          ? ((ColumnReferenceExp) expression).getColumnName()\n+          : SchemaUtil.ROWKEY_NAME;", "originalCommit": "635aad75036f42d7a64007641aa514980af4372a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMDg5Mg==", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r388230892", "bodyText": "Yep. This is called out in the description.  This is WIP...", "author": "big-andy-coates", "createdAt": "2020-03-05T11:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4ODA2OA==", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r388388068", "bodyText": "just making sure :)", "author": "agavra", "createdAt": "2020-03-05T15:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODkyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMjU2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r387832561", "bodyText": "if we have this, do we need #4697?", "author": "agavra", "createdAt": "2020-03-04T17:51:31Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "diffHunk": "@@ -123,4 +129,19 @@ public KeyField getKeyField() {\n         getTimestampColumn()\n     );\n   }\n+\n+  private void validate() {", "originalCommit": "635aad75036f42d7a64007641aa514980af4372a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTI2MA==", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r388231260", "bodyText": "Maybe not. But #4697 makes things explicit.  I'm not 100% convinced its an improvement or just noise though...", "author": "big-andy-coates", "createdAt": "2020-03-05T11:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMjU2MQ=="}], "type": "inlineReview", "revised_code": null}]}