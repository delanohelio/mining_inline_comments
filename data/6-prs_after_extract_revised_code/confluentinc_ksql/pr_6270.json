{"pr_number": 6270, "pr_title": "refactor: Format interface", "pr_createdAt": "2020-09-22T15:49:33Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6270", "timeline": [{"oid": "397a2a5ffd6d1999f690748ece39332e5d033a7d", "url": "https://github.com/confluentinc/ksql/commit/397a2a5ffd6d1999f690748ece39332e5d033a7d", "message": "refactor: format interface\n\nIn prep for user-defined-formats and just to tidy up the interface and fix some bugs...\n\n## Refactor\n\nRefactored the `Format` interface so that the functions used during schema inference, i.e. `toParsedSchema` and `toColumns`, are moved onto a new interface `SchemaTranslator`. The `SchemaTranslator` is obtained from the `Format` by calling `getSchemaTranslator`, passing in the format properties.\n\nThis removes the strange requirement of having to pass a `FormatInfo`, which contains the name of the format, to the `toParsedSchema` method.\n\nAnd ensures consistent properties are used for both `toParsedSchema` and `toColumns`. (Though at the moment properties are only needed in `toParsedSchema`, that may not be the case once user-definfed-formats are supported.\n\n## Fixes / Enhancements\nFixed a bug / ux issue, where a C* statement that was using schema inference would not report any issues if the supplied `VALUE_FORMAT` did not match the type of the schema in the schema registry. For example, if `VALUE_FORMAT` was `AVRO`, but the schema returned by the Schema Registry was `JsonSchema`, then the statement would succeed... and would later generate lots of deserialisation errors if used. The statement will now fail.", "committedDate": "2020-09-22T15:24:12Z", "type": "commit"}, {"oid": "47a082f0e512abb4202d2c1befce0a2fb32118e6", "url": "https://github.com/confluentinc/ksql/commit/47a082f0e512abb4202d2c1befce0a2fb32118e6", "message": "chore: move Avro specific constants into Avro package", "committedDate": "2020-09-22T15:28:31Z", "type": "commit"}, {"oid": "7ac2f7d958a0bc201533a3fa1c36521e26a9a8e6", "url": "https://github.com/confluentinc/ksql/commit/7ac2f7d958a0bc201533a3fa1c36521e26a9a8e6", "message": "chore: switch schema inference to a SerdeFeature", "committedDate": "2020-09-22T15:46:32Z", "type": "commit"}, {"oid": "8c5c49e28651148f37bc648072a36907363f6514", "url": "https://github.com/confluentinc/ksql/commit/8c5c49e28651148f37bc648072a36907363f6514", "message": "chore: fix test", "committedDate": "2020-09-22T16:12:30Z", "type": "commit"}, {"oid": "7347c0066a4e4ac7c84f58bb8889eddf0331f60f", "url": "https://github.com/confluentinc/ksql/commit/7347c0066a4e4ac7c84f58bb8889eddf0331f60f", "message": "chore: merge from master\n\nConflicting files\nksqldb-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\nksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/SchemaRegisterInjector.java\nksqldb-engine/src/main/java/io/confluent/ksql/topic/TopicDeleteInjector.java\nksqldb-engine/src/main/java/io/confluent/ksql/util/AvroUtil.java\nksqldb-engine/src/test/java/io/confluent/ksql/integration/IntegrationTestHarness.java\nksqldb-engine/src/test/java/io/confluent/ksql/util/AvroUtilTest.java\nksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestCaseBuilderUtil.java\nksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutorUtil.java\nksqldb-rest-app/src/main/java/io/confluent/ksql/rest/util/ClusterTerminator.java\nksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/KsqlResourceFunctionalTest.java\nksqldb-serde/src/test/java/io/confluent/ksql/serde/avro/AvroFormatTest.java\nksqldb-serde/src/test/java/io/confluent/ksql/serde/connect/ConnectFormatTest.java", "committedDate": "2020-09-29T16:05:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MjMwNA==", "url": "https://github.com/confluentinc/ksql/pull/6270#discussion_r497162304", "bodyText": "\ud83d\udcaf", "author": "agavra", "createdAt": "2020-09-30T00:03:47Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/serde/SerdeFeature.java", "diffHunk": "@@ -24,6 +24,15 @@\n  */\n public enum SerdeFeature {\n \n+  /**\n+   * The format supports interaction with the Confluent Schema Registry.\n+   *\n+   * <p>Indicates whether or not a format can support CREATE statements that\n+   * omit the table elements and instead determine the schema from a Confluent Schema Registry\n+   * query.\n+   */\n+  SCHEMA_INFERENCE,", "originalCommit": "7347c0066a4e4ac7c84f58bb8889eddf0331f60f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0Mjg2MA==", "url": "https://github.com/confluentinc/ksql/pull/6270#discussion_r497342860", "bodyText": "We could even use this to get rid of JSON_SR, or the very least the JsonSchemaFormat class.\nWe could choose to get rid of JSON_SR by adding a WITH property that can be used with the JSON format that indicates it should use the SR, e.g.\nCREATE STREAM FOO WITH (format='json', use_schema_registry=true);\nEven if we don't do that, we can internally translate any use of JSON_SR through to using the JsonFormat class with the SCHEMA_INFERENCE feature set.\nThoughts?", "author": "big-andy-coates", "createdAt": "2020-09-30T08:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MjMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5MTU4Ng==", "url": "https://github.com/confluentinc/ksql/pull/6270#discussion_r497591586", "bodyText": "We had discussed something like that with @derekjn and @MichaelDrogalis and decided that it would be the lesser of two evils (w.r.t. user confusion) if we just kept them as two separate formats to make it extra \"clear\" what the difference is. I'm always happy reducing the code overhead though if we can use it to get rid of JsonSchemaFormat class", "author": "agavra", "createdAt": "2020-09-30T15:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MjMwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2ODA2OA==", "url": "https://github.com/confluentinc/ksql/pull/6270#discussion_r497168068", "bodyText": "nit: comment needs to be updated getSupportedProperties() is no longer a method call here", "author": "agavra", "createdAt": "2020-09-30T00:12:12Z", "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/FormatProperties.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Sets.SetView;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Util class for handling format properties\n+ */\n+public final class FormatProperties {\n+\n+  private FormatProperties() {\n+  }\n+\n+  public static void validateProperties(\n+      final String formatName,\n+      final Map<String, String> properties,\n+      final Set<String> supportedProperties\n+  ) {\n+    // by default, this method ensures that there are no property names\n+    // (case-insensitive) that are not in the getSupportedProperties()", "originalCommit": "7347c0066a4e4ac7c84f58bb8889eddf0331f60f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0MTA5OQ==", "url": "https://github.com/confluentinc/ksql/pull/6270#discussion_r497341099", "bodyText": "updated.", "author": "big-andy-coates", "createdAt": "2020-09-30T08:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2ODA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "5540f1d85bff6844d912c8c4e0dedff9387ea8a3", "chunk": "diff --git a/ksqldb-serde/src/main/java/io/confluent/ksql/serde/FormatProperties.java b/ksqldb-serde/src/main/java/io/confluent/ksql/serde/FormatProperties.java\nindex 717f9c388e..1b1b2285a7 100644\n--- a/ksqldb-serde/src/main/java/io/confluent/ksql/serde/FormatProperties.java\n+++ b/ksqldb-serde/src/main/java/io/confluent/ksql/serde/FormatProperties.java\n\n@@ -29,14 +29,20 @@ public final class FormatProperties {\n   private FormatProperties() {\n   }\n \n+  /**\n+   * Helper to validate the supplied {@code properties} against a {@link\n+   * Format#getSupportedProperties() format's supported properties}.\n+   *\n+   * @param formatName the name of the format - only used in error messages\n+   * @param properties the properties the user supplied\n+   * @param supportedProperties the formats supported properties\n+   * @throws KsqlException on unknown keys or empty values.\n+   */\n   public static void validateProperties(\n       final String formatName,\n       final Map<String, String> properties,\n       final Set<String> supportedProperties\n   ) {\n-    // by default, this method ensures that there are no property names\n-    // (case-insensitive) that are not in the getSupportedProperties()\n-    // and that none of the values are empty\n     final SetView<String> diff = Sets.difference(properties.keySet(), supportedProperties);\n     if (!diff.isEmpty()) {\n       throw new KsqlException(formatName + \" does not support the following configs: \" + diff);\n"}}, {"oid": "e7cf2c32daa566525a92944db2135349763f00ba", "url": "https://github.com/confluentinc/ksql/commit/e7cf2c32daa566525a92944db2135349763f00ba", "message": "Merge branch 'master' into format_refac", "committedDate": "2020-09-30T08:36:09Z", "type": "commit"}, {"oid": "5540f1d85bff6844d912c8c4e0dedff9387ea8a3", "url": "https://github.com/confluentinc/ksql/commit/5540f1d85bff6844d912c8c4e0dedff9387ea8a3", "message": "chore: review comments and stuff", "committedDate": "2020-09-30T08:49:08Z", "type": "commit"}]}