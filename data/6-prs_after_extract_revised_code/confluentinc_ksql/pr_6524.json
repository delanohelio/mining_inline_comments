{"pr_number": 6524, "pr_title": "feat: update ksql restore command to skip incompatible commands if flag set", "pr_createdAt": "2020-10-26T21:39:22Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6524", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NjA2Mg==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r512286062", "bodyText": "We should be returning the record even if it isn't backed up. The CommandRunner has logic to detect when the command topic and backup are out of sync/the command is incompatible.", "author": "stevenpyzhang", "createdAt": "2020-10-26T21:40:44Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -90,7 +90,6 @@ public void start() {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return records;", "originalCommit": "3a63a3b7f7323aa059387239625a5dfe0d1313cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMTkyMA==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513201920", "bodyText": "this check detects the case where the backup and the command topic are inconsistent (have different contents). in that case we shouldn't return the command here, otherwise the command runner will try to execute it.", "author": "rodesai", "createdAt": "2020-10-28T06:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NjA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjQ3Ng==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513622476", "bodyText": "We should still return the record in some cases. For example, the command topic backup will fail to back up incompatible commands (it tries to deserialize the command before backing it up) Currently the throwOnInvalidRecords in the CommandTopicBackupImpl doesn't count as corruption so the incompatible commands don't actually cause the server to enter degraded state if backups are enabled. I think these incompatible commands should still be returned so the CommandRunner can attempt to deserialize it and enter degraded state properly", "author": "stevenpyzhang", "createdAt": "2020-10-28T17:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NjA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3MTgyNQ==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r516971825", "bodyText": "@rodesai I changed it so that we still return the command in the case of a KsqlException since this is thrown by the backup when there's an issue deserializing either the commandId or command. The command isn't returned if it's a KsqlServerException since that means the corruption check has triggered.", "author": "stevenpyzhang", "createdAt": "2020-11-03T21:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NjA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9da539955e73d75fd308bd8c4e86fa7fedf3d582", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\nindex 17f471dacc..a2a5ac7390 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\n\n@@ -86,10 +89,13 @@ public class CommandTopic {\n       for (ConsumerRecord<byte[], byte[]> record : iterable) {\n         try {\n           backupRecord(record);\n-        } catch (final Exception e) {\n+        } catch (final KsqlException e) {\n+          log.warn(\"Error encountered while backing up command.\", e);\n+        } catch (final KsqlServerException e) {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n+          return records;\n         }\n         records.add(record);\n       }\n"}}, {"oid": "64a2ccc1b8cbc5e1e2eb7cac8a70b14056b3b3c9", "url": "https://github.com/confluentinc/ksql/commit/64a2ccc1b8cbc5e1e2eb7cac8a70b14056b3b3c9", "message": "feat: update ksql restore command to skip incompatible commands if flag set", "committedDate": "2020-10-26T21:41:34Z", "type": "forcePushed"}, {"oid": "6c54d4a913c312ba17892f10ccdd245b4f76d181", "url": "https://github.com/confluentinc/ksql/commit/6c54d4a913c312ba17892f10ccdd245b4f76d181", "message": "feat: update ksql restore command to skip incompatible commands if flag set", "committedDate": "2020-10-26T21:47:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNzQ0Mg==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r512707442", "bodyText": "Doesn't this need the @SuppressWarnings(\"unused\") // Accessed via reflection too?", "author": "spena", "createdAt": "2020-10-27T13:50:02Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/RestoreOptions.java", "diffHunk": "@@ -42,8 +42,16 @@\n \n   @SuppressWarnings(\"unused\") // Accessed via reflection\n   @Option(\n-      name = {\"--yes\", \"-y\"},\n-      description = \"Automatic \\\"yes\\\" as answer to prompt and run non-interactively.\")\n+      name = {\"--skip-incompatible-commands\", \"-s\"},\n+      description = \"This restore command can restore command topic commands that \"\n+          + \"are of version (\" + io.confluent.ksql.rest.server.computation.Command.VERSION + \") \"\n+          + \"or lower. If true, the restore command will skip all incompatible commands.\"\n+          + \"If false, the restore command will restore the backup file as is.\")\n+  private boolean skipIncompatibleCommands = false;\n+\n+  @Option(", "originalCommit": "6c54d4a913c312ba17892f10ccdd245b4f76d181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3Mzk0MA==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513173940", "bodyText": "I removed the header", "author": "stevenpyzhang", "createdAt": "2020-10-28T04:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNzQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ce2a9b59ff2969eae089529d399140fe8e11d309", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/RestoreOptions.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/RestoreOptions.java\nindex 4929f3f5f3..cb663c48e2 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/RestoreOptions.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/RestoreOptions.java\n\n@@ -40,18 +40,18 @@ public class RestoreOptions {\n           + \"documentation for a list of available configs.\")\n   private String configFile;\n \n-  @SuppressWarnings(\"unused\") // Accessed via reflection\n   @Option(\n       name = {\"--skip-incompatible-commands\", \"-s\"},\n       description = \"This restore command can restore command topic commands that \"\n           + \"are of version (\" + io.confluent.ksql.rest.server.computation.Command.VERSION + \") \"\n           + \"or lower. If true, the restore command will skip all incompatible commands.\"\n-          + \"If false, the restore command will restore the backup file as is.\")\n+          + \"If false, the restore command will throw an \"\n+          + \"exception when it encounters an incompatible command.\")\n   private boolean skipIncompatibleCommands = false;\n \n   @Option(\n-          name = {\"--yes\", \"-y\"},\n-          description = \"Automatic \\\"yes\\\" as answer to prompt and run non-interactively.\")\n+      name = {\"--yes\", \"-y\"},\n+      description = \"Automatic \\\"yes\\\" as answer to prompt and run non-interactively.\")\n   private boolean automaticYes = false;\n \n   @SuppressWarnings(\"unused\") // Accessed via reflection\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMTI4Mg==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r512711282", "bodyText": "should we call throwOnInvalidRecords when skip is false? That way the restore will fail if a command is invalid, thus avoiding re-creating the command topic and writing partial commands.", "author": "spena", "createdAt": "2020-10-27T13:54:41Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "diffHunk": "@@ -67,17 +70,26 @@ private static KsqlConfig loadServerConfig(final File configFile) {\n     return new KsqlConfig(serverProps);\n   }\n \n-  public static List<Pair<byte[], byte[]>> loadBackup(final File file) throws IOException {\n+  public static List<Pair<byte[], byte[]>> loadBackup(\n+      final File file,\n+      final RestoreOptions options\n+  ) throws IOException {\n     final BackupReplayFile commandTopicBackupFile = BackupReplayFile.readOnly(file);\n+    List<Pair<byte[], byte[]>> records = commandTopicBackupFile.readRecords();\n \n-    final List<Pair<byte[], byte[]>> records = commandTopicBackupFile.readRecords();\n-    throwOnInvalidRecords(records);\n+    if (options.isSkipIncompatibleCommands()) {\n+      records = removeIncompatibleCommands(records);\n+    }", "originalCommit": "6c54d4a913c312ba17892f10ccdd245b4f76d181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NDcyNg==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513174726", "bodyText": "Ok I changed it so that we always check that the commands are valid. The only different with the skip option is that if it's set to true, instead of throwing an exception and exiting the program when failing to deserialize the command due to a SerializationException/IncomaptibleKsqlCommandVersionException (which indicates an incompatible command) the method continues by skipping the command.", "author": "stevenpyzhang", "createdAt": "2020-10-28T04:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMTI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ce2a9b59ff2969eae089529d399140fe8e11d309", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java\nindex e3ef6903d3..2342b47a44 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java\n\n@@ -77,15 +77,14 @@ public class KsqlRestoreCommandTopic {\n     final BackupReplayFile commandTopicBackupFile = BackupReplayFile.readOnly(file);\n     List<Pair<byte[], byte[]>> records = commandTopicBackupFile.readRecords();\n \n-    if (options.isSkipIncompatibleCommands()) {\n-      records = removeIncompatibleCommands(records);\n-    }\n+    records = removeIncompatibleCommands(records, options.isSkipIncompatibleCommands());\n \n     return records;\n   }\n \n   private static List<Pair<byte[], byte[]>> removeIncompatibleCommands(\n-      final List<Pair<byte[], byte[]>> records\n+      final List<Pair<byte[], byte[]>> records,\n+      final boolean skipIncompatibleCommands\n   ) {\n     int n = 0;\n     int numFilteredCommands = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNjM3MQ==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r512716371", "bodyText": "This looks like what the BackupReplayFile does. Can it be reused?\n // Just create another write() that accept the key and value instead of a consumer\nBackupReplayFile.writable(backupFileLocation.toFile())\n    .write(commandIdInBytes, commandInBytes);", "author": "spena", "createdAt": "2020-10-27T14:00:33Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/RestoreCommandTopicIntegrationTest.java", "diffHunk": "@@ -173,4 +256,27 @@ private boolean isDegradedState() {\n   private List<KsqlEntity> makeKsqlRequest(final String sql) {\n     return RestIntegrationTestUtil.makeKsqlRequest(REST_APP, sql);\n   }\n+\n+  public static void writeToBackupFile(\n+      final CommandId commandId,\n+      final Command command,\n+      final Path backUpFileLocation\n+  ) throws IOException {\n+    FileOutputStream writer;\n+    try {\n+      writer = new FileOutputStream(new File(String.valueOf(backUpFileLocation)), true);\n+    } catch (final FileNotFoundException e) {\n+      throw new KsqlException(\n+          String.format(\"Failed to open backup file: %s\", backUpFileLocation), e);\n+    }\n+\n+    final byte[] keyValueSeparator = \":\".getBytes(StandardCharsets.UTF_8);\n+    final byte[] newLine = \"/n\".getBytes(StandardCharsets.UTF_8);\n+\n+    writer.write(InternalTopicSerdes.serializer().serialize(\"\", commandId));\n+    writer.write(keyValueSeparator);\n+    writer.write(InternalTopicSerdes.serializer().serialize(\"\", command));\n+    writer.write(newLine);\n+    writer.flush();", "originalCommit": "6c54d4a913c312ba17892f10ccdd245b4f76d181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzkxMA==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513173910", "bodyText": "I reused it now", "author": "stevenpyzhang", "createdAt": "2020-10-28T04:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNjM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ce2a9b59ff2969eae089529d399140fe8e11d309", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/RestoreCommandTopicIntegrationTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/RestoreCommandTopicIntegrationTest.java\nindex aff179f5bc..e71dd76bba 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/RestoreCommandTopicIntegrationTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/RestoreCommandTopicIntegrationTest.java\n\n@@ -257,26 +238,18 @@ public class RestoreCommandTopicIntegrationTest {\n     return RestIntegrationTestUtil.makeKsqlRequest(REST_APP, sql);\n   }\n \n-  public static void writeToBackupFile(\n+  private static void writeToBackupFile(\n       final CommandId commandId,\n       final Command command,\n       final Path backUpFileLocation\n   ) throws IOException {\n-    FileOutputStream writer;\n-    try {\n-      writer = new FileOutputStream(new File(String.valueOf(backUpFileLocation)), true);\n-    } catch (final FileNotFoundException e) {\n-      throw new KsqlException(\n-          String.format(\"Failed to open backup file: %s\", backUpFileLocation), e);\n-    }\n-\n-    final byte[] keyValueSeparator = \":\".getBytes(StandardCharsets.UTF_8);\n-    final byte[] newLine = \"/n\".getBytes(StandardCharsets.UTF_8);\n-\n-    writer.write(InternalTopicSerdes.serializer().serialize(\"\", commandId));\n-    writer.write(keyValueSeparator);\n-    writer.write(InternalTopicSerdes.serializer().serialize(\"\", command));\n-    writer.write(newLine);\n-    writer.flush();\n+    BackupReplayFile.writable(new File(String.valueOf(backUpFileLocation)))\n+        .write(new ConsumerRecord<byte[], byte[]>(\n+            \"\",\n+            0,\n+            0L,\n+            InternalTopicSerdes.serializer().serialize(\"\", commandId),\n+            InternalTopicSerdes.serializer().serialize(\"\", command))\n+        );\n   }\n }\n"}}, {"oid": "ce2a9b59ff2969eae089529d399140fe8e11d309", "url": "https://github.com/confluentinc/ksql/commit/ce2a9b59ff2969eae089529d399140fe8e11d309", "message": "comments", "committedDate": "2020-10-28T04:30:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMDE2MA==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513200160", "bodyText": "We need to make the above exception more specific. We shouldn't just ignore any exception. Ditto for the other place this is used. I know this isn't part of your patch, but might as well do this now.", "author": "rodesai", "createdAt": "2020-10-28T06:06:53Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -117,7 +116,6 @@ public void start() {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return restoreCommands;", "originalCommit": "ce2a9b59ff2969eae089529d399140fe8e11d309", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3MDA5Mg==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r516970092", "bodyText": "I changed it to only catch a KsqlException or KsqlServerException", "author": "stevenpyzhang", "createdAt": "2020-11-03T21:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMDE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "9da539955e73d75fd308bd8c4e86fa7fedf3d582", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\nindex 17f471dacc..a2a5ac7390 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\n\n@@ -112,10 +118,13 @@ public class CommandTopic {\n       for (final ConsumerRecord<byte[], byte[]> record : records) {\n         try {\n           backupRecord(record);\n-        } catch (final Exception e) {\n+        } catch (final KsqlException e) {\n+          log.warn(\"Error encountered while backing up command.\", e);\n+        } catch (final KsqlServerException e) {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n+          return restoreCommands;\n         }\n \n         if (record.value() == null) {\n"}}, {"oid": "9da539955e73d75fd308bd8c4e86fa7fedf3d582", "url": "https://github.com/confluentinc/ksql/commit/9da539955e73d75fd308bd8c4e86fa7fedf3d582", "message": "cleanup streams internal topics and state store", "committedDate": "2020-11-02T23:54:26Z", "type": "forcePushed"}, {"oid": "c5d2249bd4c1e93ec6792a8d44570d4d29c0cda8", "url": "https://github.com/confluentinc/ksql/commit/c5d2249bd4c1e93ec6792a8d44570d4d29c0cda8", "message": "cleanup streams internal topics and state store", "committedDate": "2020-11-03T00:06:17Z", "type": "forcePushed"}, {"oid": "5205813d94cb183793dfe5a1a0b324731b8cbf00", "url": "https://github.com/confluentinc/ksql/commit/5205813d94cb183793dfe5a1a0b324731b8cbf00", "message": "cleanup streams internal topics and state store", "committedDate": "2020-11-03T06:01:33Z", "type": "forcePushed"}, {"oid": "ab3b4970e01e9a09af4be52fa63adb18ccd8f69a", "url": "https://github.com/confluentinc/ksql/commit/ab3b4970e01e9a09af4be52fa63adb18ccd8f69a", "message": "cleanup streams internal topics and state store", "committedDate": "2020-11-03T20:22:08Z", "type": "forcePushed"}, {"oid": "29202f2d3301dbc54bf939cf7a788a74942d24c0", "url": "https://github.com/confluentinc/ksql/commit/29202f2d3301dbc54bf939cf7a788a74942d24c0", "message": "cleanup streams internal topics and state store", "committedDate": "2020-11-03T22:59:02Z", "type": "forcePushed"}, {"oid": "507fe96761258996e2d51a4e7458e77080796e41", "url": "https://github.com/confluentinc/ksql/commit/507fe96761258996e2d51a4e7458e77080796e41", "message": "cleanup streams internal topics and state store", "committedDate": "2020-11-04T19:15:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzODAwMQ==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r517838001", "bodyText": "we should define a new exception type for this case. this is a very specific error condition, and it should have its own exception class.", "author": "rodesai", "createdAt": "2020-11-05T07:24:08Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -86,7 +89,9 @@ public void start() {\n       for (ConsumerRecord<byte[], byte[]> record : iterable) {\n         try {\n           backupRecord(record);\n-        } catch (final Exception e) {\n+        } catch (final KsqlException e) {\n+          log.warn(\"Error encountered while backing up command.\", e);\n+        } catch (final KsqlServerException e) {", "originalCommit": "507fe96761258996e2d51a4e7458e77080796e41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edd76ebf8d89f65faa1de0191e5d9116afd45ed6", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\nindex a2a5ac7390..17f471dacc 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\n\n@@ -89,13 +86,10 @@ public class CommandTopic {\n       for (ConsumerRecord<byte[], byte[]> record : iterable) {\n         try {\n           backupRecord(record);\n-        } catch (final KsqlException e) {\n-          log.warn(\"Error encountered while backing up command.\", e);\n-        } catch (final KsqlServerException e) {\n+        } catch (final Exception e) {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return records;\n         }\n         records.add(record);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDU5Mw==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r517840593", "bodyText": "again - this should be a very specific exception indicating a deserialization error. Also, why are we even trying to deserialize the command from the backup logic (cc @spena)? It doesn't look like we're using any of the fields.", "author": "rodesai", "createdAt": "2020-11-05T07:30:29Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -86,7 +89,9 @@ public void start() {\n       for (ConsumerRecord<byte[], byte[]> record : iterable) {\n         try {\n           backupRecord(record);\n-        } catch (final Exception e) {\n+        } catch (final KsqlException e) {", "originalCommit": "507fe96761258996e2d51a4e7458e77080796e41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1OTgyNw==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r518259827", "bodyText": "Ok after talking it over with @spena , we don't need this deserialization logic in the backup impl, it should just backup whatever is found in the command topic, deserialization should be handled after it's backed up. So I'll get rid of this catch block and we'll only have the KsqlServerException one.", "author": "stevenpyzhang", "createdAt": "2020-11-05T18:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "edd76ebf8d89f65faa1de0191e5d9116afd45ed6", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\nindex a2a5ac7390..17f471dacc 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java\n\n@@ -89,13 +86,10 @@ public class CommandTopic {\n       for (ConsumerRecord<byte[], byte[]> record : iterable) {\n         try {\n           backupRecord(record);\n-        } catch (final KsqlException e) {\n-          log.warn(\"Error encountered while backing up command.\", e);\n-        } catch (final KsqlServerException e) {\n+        } catch (final Exception e) {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return records;\n         }\n         records.add(record);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MTYxNQ==", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r517841615", "bodyText": "nit: try and use the same variable name for the same thing everywhere (so either options or restoreOptions", "author": "rodesai", "createdAt": "2020-11-05T07:33:05Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "diffHunk": "@@ -65,17 +79,42 @@ private static KsqlConfig loadServerConfig(final File configFile) {\n     return new KsqlConfig(serverProps);\n   }\n \n-  public static List<Pair<byte[], byte[]>> loadBackup(final File file) throws IOException {\n+  public static List<Pair<byte[], byte[]>> loadBackup(\n+      final File file,\n+      final RestoreOptions options,", "originalCommit": "507fe96761258996e2d51a4e7458e77080796e41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edd76ebf8d89f65faa1de0191e5d9116afd45ed6", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java\nindex bbd3e528b4..9092497ac6 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java\n\n@@ -81,40 +70,24 @@ public class KsqlRestoreCommandTopic {\n \n   public static List<Pair<byte[], byte[]>> loadBackup(\n       final File file,\n-      final RestoreOptions options,\n-      final KsqlConfig ksqlConfig\n+      final RestoreOptions options\n   ) throws IOException {\n     final BackupReplayFile commandTopicBackupFile = BackupReplayFile.readOnly(file);\n     List<Pair<byte[], byte[]>> records = commandTopicBackupFile.readRecords();\n \n-    records = checkValidCommands(\n-        records,\n-        options.isSkipIncompatibleCommands(),\n-        ksqlConfig);\n+    if (options.isSkipIncompatibleCommands()) {\n+      records = removeIncompatibleCommands(records);\n+    }\n \n     return records;\n   }\n \n-  /**\n-   * Checks all CommandId and Command pairs to see if they're compatible with the current\n-   * server version. If skipIncompatibleCommands is true, skip the command and try to clean up \n-   * streams state stores and internal topics if the command being skipped is a query.\n-   * If false, throw an exception when an incomptaible command is detected.\n-   *\n-   * @param records a list of CommandId and Command pairs\n-   * @param skipIncompatibleCommands whether or not to throw an exception on incompatible commands\n-   * @param ksqlConfig the {@link KsqlConfig} used by the program\n-   * @return a list of compatible CommandId and Command pairs\n-   */\n-  private static List<Pair<byte[], byte[]>> checkValidCommands(\n-      final List<Pair<byte[], byte[]>> records,\n-      final boolean skipIncompatibleCommands,\n-      final KsqlConfig ksqlConfig\n+  private static List<Pair<byte[], byte[]>> removeIncompatibleCommands(\n+      final List<Pair<byte[], byte[]>> records\n   ) {\n     int n = 0;\n     int numFilteredCommands = 0;\n     final List<Pair<byte[], byte[]>> filteredRecords = new ArrayList<>();\n-    final List<byte[]> incompatibleCommands = new ArrayList<>();\n \n     for (final Pair<byte[], byte[]> record : records) {\n       n++;\n"}}, {"oid": "edd76ebf8d89f65faa1de0191e5d9116afd45ed6", "url": "https://github.com/confluentinc/ksql/commit/edd76ebf8d89f65faa1de0191e5d9116afd45ed6", "message": "feat: update ksql restore command to skip incompatible commands if flag set", "committedDate": "2020-11-06T20:33:19Z", "type": "commit"}, {"oid": "3d954970641ad6c5bd99c90965adf8bfc4fce0d6", "url": "https://github.com/confluentinc/ksql/commit/3d954970641ad6c5bd99c90965adf8bfc4fce0d6", "message": "comments", "committedDate": "2020-11-06T20:33:19Z", "type": "commit"}, {"oid": "f4fcf11c116599688c9f4a85ae41f141ec3a3dd5", "url": "https://github.com/confluentinc/ksql/commit/f4fcf11c116599688c9f4a85ae41f141ec3a3dd5", "message": "cleanup streams internal topics and state store", "committedDate": "2020-11-06T20:33:19Z", "type": "commit"}, {"oid": "7e7f4ae94a2b73468daa96d0ef52676160cbd51f", "url": "https://github.com/confluentinc/ksql/commit/7e7f4ae94a2b73468daa96d0ef52676160cbd51f", "message": "remove deserialization from backup", "committedDate": "2020-11-06T20:33:19Z", "type": "commit"}, {"oid": "d0a5d16096a993a0fa58f2df05203f6df724535e", "url": "https://github.com/confluentinc/ksql/commit/d0a5d16096a993a0fa58f2df05203f6df724535e", "message": "add specific exception for corruption, also fixed a typo", "committedDate": "2020-11-06T20:33:20Z", "type": "commit"}, {"oid": "d0a5d16096a993a0fa58f2df05203f6df724535e", "url": "https://github.com/confluentinc/ksql/commit/d0a5d16096a993a0fa58f2df05203f6df724535e", "message": "add specific exception for corruption, also fixed a typo", "committedDate": "2020-11-06T20:33:20Z", "type": "forcePushed"}]}