{"pr_number": 5413, "pr_title": "chore: ensure physical plan has correct key column name ", "pr_createdAt": "2020-05-19T18:04:45Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5413", "timeline": [{"oid": "51f0b44b9ce4a994ea169712dba30c4a09e7627e", "url": "https://github.com/confluentinc/ksql/commit/51f0b44b9ce4a994ea169712dba30c4a09e7627e", "message": "chore: ensure physical plan has correct key column name\n\nNoticed that when a key column is aliased in the projection of a persistent query, the physical plan has the old name for the key column.\n\nThis change fixes that by including the names of the key columns in the `StreamSelect` / `TableSelect` physical plan step types.  It's sufficient to track just the column names as they key data can not be changed in a projection, only the column names.\n\nCurrently, only a single key column is possible. However, the select step pojos take a list of column names in prep for multiple key columns.", "committedDate": "2020-05-19T18:00:44Z", "type": "commit"}, {"oid": "bd8408c7778a45cdbb4f37e254d866ffd8dd4bf1", "url": "https://github.com/confluentinc/ksql/commit/bd8408c7778a45cdbb4f37e254d866ffd8dd4bf1", "message": "test: test changes", "committedDate": "2020-05-19T18:01:19Z", "type": "commit"}, {"oid": "de2418c808ca64254bcbd3892d8c75cf33491cc4", "url": "https://github.com/confluentinc/ksql/commit/de2418c808ca64254bcbd3892d8c75cf33491cc4", "message": "test: historical plans", "committedDate": "2020-05-19T18:02:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzk0OQ==", "url": "https://github.com/confluentinc/ksql/pull/5413#discussion_r427523949", "bodyText": "github issue?", "author": "agavra", "createdAt": "2020-05-19T18:47:36Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSelect.java", "diffHunk": "@@ -16,30 +16,49 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.collect.ImmutableList;\n import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.name.ColumnName;\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n @Immutable\n public class StreamSelect<K> implements ExecutionStep<KStreamHolder<K>> {\n \n   private final ExecutionStepPropertiesV1 properties;\n   private final ExecutionStep<KStreamHolder<K>> source;\n+  private final ImmutableList<ColumnName> keyColumnNames;\n   private final ImmutableList<SelectExpression> selectExpressions;\n \n   public StreamSelect(\n+      final ExecutionStepPropertiesV1 props,\n+      final ExecutionStep<KStreamHolder<K>> source,\n+      final List<ColumnName> keyColumnNames,\n+      final List<SelectExpression> selectExpressions\n+  ) {\n+    this.properties = requireNonNull(props, \"props\");\n+    this.source = requireNonNull(source, \"source\");\n+    this.keyColumnNames = ImmutableList.copyOf(keyColumnNames);\n+    this.selectExpressions = ImmutableList.copyOf(selectExpressions);\n+  }\n+\n+  @SuppressWarnings(\"unused\") // Invoked via reflection by Jackson\n+  @JsonCreator\n+  private StreamSelect(\n       @JsonProperty(value = \"properties\", required = true) final ExecutionStepPropertiesV1 props,\n       @JsonProperty(value = \"source\", required = true) final ExecutionStep<KStreamHolder<K>> source,\n+      // keyColumnNames introduced in 0.10.0.\n+      // Can be mandatory once 0.9.0 query plans are unsupported.", "originalCommit": "51f0b44b9ce4a994ea169712dba30c4a09e7627e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0NjE1OA==", "url": "https://github.com/confluentinc/ksql/pull/5413#discussion_r427846158", "bodyText": "#5420", "author": "big-andy-coates", "createdAt": "2020-05-20T08:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "aa29f7f157852f3bd85c8d7b677779890b190a06", "chunk": "diff --git a/ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSelect.java b/ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSelect.java\nindex 6d990498c7..9d989ea552 100644\n--- a/ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSelect.java\n+++ b/ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSelect.java\n\n@@ -47,13 +47,21 @@ public class StreamSelect<K> implements ExecutionStep<KStreamHolder<K>> {\n     this.selectExpressions = ImmutableList.copyOf(selectExpressions);\n   }\n \n+  /**\n+   * This constructor is required while {@code keyColumnNames} are not mandatory.\n+   *\n+   * <p>{@code keyColumnNames} was introduced in 0.10.0 and can be mandatory once 0.9.0 query plans\n+   * are no longer supported.\n+   *\n+   * @see <a href=\"https://github.com/confluentinc/ksql/issues/5420\">Tracking issue</a>\n+   * @deprecated use the public constructor.\n+   */\n   @SuppressWarnings(\"unused\") // Invoked via reflection by Jackson\n   @JsonCreator\n+  @Deprecated\n   private StreamSelect(\n       @JsonProperty(value = \"properties\", required = true) final ExecutionStepPropertiesV1 props,\n       @JsonProperty(value = \"source\", required = true) final ExecutionStep<KStreamHolder<K>> source,\n-      // keyColumnNames introduced in 0.10.0.\n-      // Can be mandatory once 0.9.0 query plans are unsupported.\n       @JsonProperty(value = \"keyColumnNames\") final Optional<List<ColumnName>> keyColumnNames,\n       @JsonProperty(value = \"selectExpressions\", required = true) final\n       List<SelectExpression> selectExpressions\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NDY3MQ==", "url": "https://github.com/confluentinc/ksql/pull/5413#discussion_r427574671", "bodyText": "derp... did this test never do anything? \ud83d\ude02", "author": "agavra", "createdAt": "2020-05-19T20:18:57Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/QueryPlanTest.java", "diffHunk": "@@ -62,6 +63,7 @@ public void shouldImplementEquals() {\n         .addEqualityGroup(new QueryPlan(sources2, sink1, plan1, id1))\n         .addEqualityGroup(new QueryPlan(sources1, sink2, plan1, id1))\n         .addEqualityGroup(new QueryPlan(sources1, sink1, plan2, id1))\n-        .addEqualityGroup(new QueryPlan(sources1, sink1, plan1, id2));\n+        .addEqualityGroup(new QueryPlan(sources1, sink1, plan1, id2))\n+        .testEquals();", "originalCommit": "bd8408c7778a45cdbb4f37e254d866ffd8dd4bf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0MDA5NQ==", "url": "https://github.com/confluentinc/ksql/pull/5413#discussion_r427840095", "bodyText": "Nope, a whole set of these were missing this rather important call.  Only found two classes that had bad impls.", "author": "big-andy-coates", "createdAt": "2020-05-20T08:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NDY3MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "aa29f7f157852f3bd85c8d7b677779890b190a06", "url": "https://github.com/confluentinc/ksql/commit/aa29f7f157852f3bd85c8d7b677779890b190a06", "message": "chore: changes requested by Almog", "committedDate": "2020-05-20T09:00:33Z", "type": "commit"}]}