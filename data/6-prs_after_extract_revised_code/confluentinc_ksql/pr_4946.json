{"pr_number": 4946, "pr_title": "chore: Make sure basic auth handler is called when plugin is configured", "pr_createdAt": "2020-03-31T10:23:39Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4946", "timeline": [{"oid": "66c23f1766189ccd98ae630104e9d65be3297e50", "url": "https://github.com/confluentinc/ksql/commit/66c23f1766189ccd98ae630104e9d65be3297e50", "message": "Make sure basic auth handler if configured is called when auth plugin is configured", "committedDate": "2020-03-31T12:11:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTA5MQ==", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401295091", "bodyText": "What happens if neither of these handlers is called (i.e., the jaasAuthHandler is present but an invalid auth header was provided, and no pluginHandler is present)? Do we appropriately fail the request in this case?", "author": "vcrfxia", "createdAt": "2020-04-01T00:46:50Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -221,7 +196,46 @@ private static void unhandledExceptionHandler(final Throwable t) {\n     log.error(\"Unhandled exception\", t);\n   }\n \n-  private static Optional<AuthHandler> getAuthHandler(final Server server) {\n+  private void setupAuthHandlers(final Router router) {\n+    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n+    final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n+    final Optional<Handler<RoutingContext>> pluginHandler =\n+        authenticationPlugin.map(plugin -> new AuthenticationPluginHandler(server, plugin));\n+\n+    if (jaasAuthHandler.isPresent() || authenticationPlugin.isPresent()) {\n+      routeToNonProxiedEndpoints(router, ServerVerticle::pauseHandler);\n+\n+      routeToNonProxiedEndpoints(router,\n+          rc -> wrappedAuthHandler(rc, jaasAuthHandler, pluginHandler));\n+\n+      // For authorization use auth provider configured via security extension (if any)\n+      securityExtension.getAuthorizationProvider()\n+          .ifPresent(ksqlAuthorizationProvider -> routeToNonProxiedEndpoints(router,\n+              new KsqlAuthorizationProviderHandler(server.getWorkerExecutor(),\n+                  ksqlAuthorizationProvider)));\n+\n+      routeToNonProxiedEndpoints(router, ServerVerticle::resumeHandler);\n+    }\n+  }\n+\n+  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+  // with that\n+  private static void wrappedAuthHandler(final RoutingContext routingContext,\n+      final Optional<Handler<RoutingContext>> jaasAuthHandler,\n+      final Optional<Handler<RoutingContext>> pluginHandler) {\n+    if (jaasAuthHandler.isPresent()) {\n+      final String authHeader = routingContext.request().getHeader(\"Authorization\");\n+      if (authHeader == null || authHeader.toLowerCase().startsWith(\"basic \")) {\n+        jaasAuthHandler.get().handle(routingContext);\n+        return;\n+      }\n+    }\n+    pluginHandler\n+        .ifPresent(routingContextHandler -> routingContextHandler.handle(routingContext));\n+  }", "originalCommit": "66c23f1766189ccd98ae630104e9d65be3297e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwNDIxMw==", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401604213", "bodyText": "Oops! Good catch", "author": "purplefox", "createdAt": "2020-04-01T13:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5ceb7d77948680302532b0ff09c3f808e0392de0", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex 2dc1f13cfc..ff62ae0439 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -197,7 +197,7 @@ public class ServerVerticle extends AbstractVerticle {\n   }\n \n   private void setupAuthHandlers(final Router router) {\n-    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final Optional<AuthHandler> jaasAuthHandler = getJaasAuthHandler(server);\n     final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n     final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n     final Optional<Handler<RoutingContext>> pluginHandler =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTI4Nw==", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401295287", "bodyText": "Why do we always route to the jaasAuthHandler if no auth header is provided? Is it true that all pluginHandlers require the auth header to be set?", "author": "vcrfxia", "createdAt": "2020-04-01T00:47:35Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -221,7 +196,46 @@ private static void unhandledExceptionHandler(final Throwable t) {\n     log.error(\"Unhandled exception\", t);\n   }\n \n-  private static Optional<AuthHandler> getAuthHandler(final Server server) {\n+  private void setupAuthHandlers(final Router router) {\n+    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n+    final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n+    final Optional<Handler<RoutingContext>> pluginHandler =\n+        authenticationPlugin.map(plugin -> new AuthenticationPluginHandler(server, plugin));\n+\n+    if (jaasAuthHandler.isPresent() || authenticationPlugin.isPresent()) {\n+      routeToNonProxiedEndpoints(router, ServerVerticle::pauseHandler);\n+\n+      routeToNonProxiedEndpoints(router,\n+          rc -> wrappedAuthHandler(rc, jaasAuthHandler, pluginHandler));\n+\n+      // For authorization use auth provider configured via security extension (if any)\n+      securityExtension.getAuthorizationProvider()\n+          .ifPresent(ksqlAuthorizationProvider -> routeToNonProxiedEndpoints(router,\n+              new KsqlAuthorizationProviderHandler(server.getWorkerExecutor(),\n+                  ksqlAuthorizationProvider)));\n+\n+      routeToNonProxiedEndpoints(router, ServerVerticle::resumeHandler);\n+    }\n+  }\n+\n+  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+  // with that\n+  private static void wrappedAuthHandler(final RoutingContext routingContext,\n+      final Optional<Handler<RoutingContext>> jaasAuthHandler,\n+      final Optional<Handler<RoutingContext>> pluginHandler) {\n+    if (jaasAuthHandler.isPresent()) {\n+      final String authHeader = routingContext.request().getHeader(\"Authorization\");\n+      if (authHeader == null || authHeader.toLowerCase().startsWith(\"basic \")) {", "originalCommit": "66c23f1766189ccd98ae630104e9d65be3297e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwNTUzNw==", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401605537", "bodyText": "This was to catch the case where no auth header was provided but we still want request to be rejected, but the fix in above changes this anyway.", "author": "purplefox", "createdAt": "2020-04-01T13:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5ceb7d77948680302532b0ff09c3f808e0392de0", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex 2dc1f13cfc..ff62ae0439 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -197,7 +197,7 @@ public class ServerVerticle extends AbstractVerticle {\n   }\n \n   private void setupAuthHandlers(final Router router) {\n-    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final Optional<AuthHandler> jaasAuthHandler = getJaasAuthHandler(server);\n     final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n     final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n     final Optional<Handler<RoutingContext>> pluginHandler =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTQ3Mw==", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401295473", "bodyText": "Should we change this to a more specific type, since the method only works if this first auth handler is for basic authentication?", "author": "vcrfxia", "createdAt": "2020-04-01T00:48:14Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -221,7 +196,46 @@ private static void unhandledExceptionHandler(final Throwable t) {\n     log.error(\"Unhandled exception\", t);\n   }\n \n-  private static Optional<AuthHandler> getAuthHandler(final Server server) {\n+  private void setupAuthHandlers(final Router router) {\n+    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n+    final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n+    final Optional<Handler<RoutingContext>> pluginHandler =\n+        authenticationPlugin.map(plugin -> new AuthenticationPluginHandler(server, plugin));\n+\n+    if (jaasAuthHandler.isPresent() || authenticationPlugin.isPresent()) {\n+      routeToNonProxiedEndpoints(router, ServerVerticle::pauseHandler);\n+\n+      routeToNonProxiedEndpoints(router,\n+          rc -> wrappedAuthHandler(rc, jaasAuthHandler, pluginHandler));\n+\n+      // For authorization use auth provider configured via security extension (if any)\n+      securityExtension.getAuthorizationProvider()\n+          .ifPresent(ksqlAuthorizationProvider -> routeToNonProxiedEndpoints(router,\n+              new KsqlAuthorizationProviderHandler(server.getWorkerExecutor(),\n+                  ksqlAuthorizationProvider)));\n+\n+      routeToNonProxiedEndpoints(router, ServerVerticle::resumeHandler);\n+    }\n+  }\n+\n+  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+  // with that\n+  private static void wrappedAuthHandler(final RoutingContext routingContext,\n+      final Optional<Handler<RoutingContext>> jaasAuthHandler,", "originalCommit": "66c23f1766189ccd98ae630104e9d65be3297e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNDI2MA==", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401614260", "bodyText": "I don't have a strong opinion on this one.", "author": "purplefox", "createdAt": "2020-04-01T13:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5ceb7d77948680302532b0ff09c3f808e0392de0", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex 2dc1f13cfc..ff62ae0439 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -197,7 +197,7 @@ public class ServerVerticle extends AbstractVerticle {\n   }\n \n   private void setupAuthHandlers(final Router router) {\n-    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final Optional<AuthHandler> jaasAuthHandler = getJaasAuthHandler(server);\n     final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n     final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n     final Optional<Handler<RoutingContext>> pluginHandler =\n"}}, {"oid": "5ceb7d77948680302532b0ff09c3f808e0392de0", "url": "https://github.com/confluentinc/ksql/commit/5ceb7d77948680302532b0ff09c3f808e0392de0", "message": "Review updates", "committedDate": "2020-04-01T13:27:38Z", "type": "forcePushed"}, {"oid": "0da577786dfa3e5bf5b7e5306d3c1eb750d1022a", "url": "https://github.com/confluentinc/ksql/commit/0da577786dfa3e5bf5b7e5306d3c1eb750d1022a", "message": "Review updates", "committedDate": "2020-04-08T13:50:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5OTQyOQ==", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r406599429", "bodyText": "To confirm my understanding - this is what would handle authenticating/authorizing alternative credentials? (e.g. a bearer token like ccloud supports)", "author": "rodesai", "createdAt": "2020-04-10T04:42:28Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -219,23 +219,31 @@ private void setupAuthHandlers(final Router router) {\n     }\n   }\n \n-  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n-  // with that\n   private static void wrappedAuthHandler(final RoutingContext routingContext,\n-      final Optional<Handler<RoutingContext>> jaasAuthHandler,\n+      final Optional<AuthHandler> jaasAuthHandler,\n       final Optional<Handler<RoutingContext>> pluginHandler) {\n     if (jaasAuthHandler.isPresent()) {\n+      // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+      // with that\n       final String authHeader = routingContext.request().getHeader(\"Authorization\");\n-      if (authHeader == null || authHeader.toLowerCase().startsWith(\"basic \")) {\n+      if (authHeader != null && authHeader.toLowerCase().startsWith(\"basic \")) {\n         jaasAuthHandler.get().handle(routingContext);\n         return;\n       }\n     }\n-    pluginHandler\n-        .ifPresent(routingContextHandler -> routingContextHandler.handle(routingContext));\n+    // Fall through to authing with any authentication plugin\n+    if (pluginHandler.isPresent()) {\n+      pluginHandler.get().handle(routingContext);", "originalCommit": "0da577786dfa3e5bf5b7e5306d3c1eb750d1022a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0MjYxOQ==", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r406642619", "bodyText": "Yes", "author": "purplefox", "createdAt": "2020-04-10T07:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5OTQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb4098c7fafac9ab7e1ad1e630eb59b074baaca2", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex ff62ae0439..60ba0a21fc 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -219,31 +219,23 @@ public class ServerVerticle extends AbstractVerticle {\n     }\n   }\n \n+  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+  // with that\n   private static void wrappedAuthHandler(final RoutingContext routingContext,\n-      final Optional<AuthHandler> jaasAuthHandler,\n+      final Optional<Handler<RoutingContext>> jaasAuthHandler,\n       final Optional<Handler<RoutingContext>> pluginHandler) {\n     if (jaasAuthHandler.isPresent()) {\n-      // If we have a Jaas handler configured and we have Basic credentials then we should auth\n-      // with that\n       final String authHeader = routingContext.request().getHeader(\"Authorization\");\n-      if (authHeader != null && authHeader.toLowerCase().startsWith(\"basic \")) {\n+      if (authHeader == null || authHeader.toLowerCase().startsWith(\"basic \")) {\n         jaasAuthHandler.get().handle(routingContext);\n         return;\n       }\n     }\n-    // Fall through to authing with any authentication plugin\n-    if (pluginHandler.isPresent()) {\n-      pluginHandler.get().handle(routingContext);\n-    } else {\n-      // Fail the request as unauthorized - this will occur if no auth plugin but Jaas handler\n-      // is configured, but auth header is not basic auth\n-      routingContext\n-          .fail(HttpStatus.SC_UNAUTHORIZED,\n-              new KsqlApiException(\"Unauthorized\", ErrorCodes.ERROR_FAILED_AUTHENTICATION));\n-    }\n+    pluginHandler\n+        .ifPresent(routingContextHandler -> routingContextHandler.handle(routingContext));\n   }\n \n-  private static Optional<AuthHandler> getJaasAuthHandler(final Server server) {\n+  private static Optional<Handler<RoutingContext>> getJaasAuthHandler(final Server server) {\n     final String authMethod = server.getConfig()\n         .getString(ApiServerConfig.AUTHENTICATION_METHOD_CONFIG);\n     switch (authMethod) {\n"}}, {"oid": "eb4098c7fafac9ab7e1ad1e630eb59b074baaca2", "url": "https://github.com/confluentinc/ksql/commit/eb4098c7fafac9ab7e1ad1e630eb59b074baaca2", "message": "Make sure basic auth handler if configured is called when auth plugin is configured", "committedDate": "2020-04-15T07:35:27Z", "type": "commit"}, {"oid": "8acc340cf8edeb50a73e54aa4fe933eeb0bc06e7", "url": "https://github.com/confluentinc/ksql/commit/8acc340cf8edeb50a73e54aa4fe933eeb0bc06e7", "message": "Review updates", "committedDate": "2020-04-15T07:35:27Z", "type": "commit"}, {"oid": "8acc340cf8edeb50a73e54aa4fe933eeb0bc06e7", "url": "https://github.com/confluentinc/ksql/commit/8acc340cf8edeb50a73e54aa4fe933eeb0bc06e7", "message": "Review updates", "committedDate": "2020-04-15T07:35:27Z", "type": "forcePushed"}]}