{"pr_number": 6556, "pr_title": "chore: fix findbugs errors", "pr_createdAt": "2020-11-02T17:01:47Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6556", "timeline": [{"oid": "21d2eb5b64ce5f753a411460e81f91a6554cd262", "url": "https://github.com/confluentinc/ksql/commit/21d2eb5b64ce5f753a411460e81f91a6554cd262", "message": "chore: fix spotbugs errors", "committedDate": "2020-11-02T16:58:36Z", "type": "commit"}, {"oid": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "url": "https://github.com/confluentinc/ksql/commit/c12aee6504452b7b71273bcae3eee4a57acd8d0a", "message": "chore: fix spotbugs errors", "committedDate": "2020-11-02T17:00:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDA5OA==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120098", "bodyText": "No need to use Ticker here.\na) Ticker is marked as unstable\nb) Ticker.read()'s java docs say it returns nanoseconds, not milliseconds as this impl does\nc) A simple Supplier<Long> does what is needed.", "author": "big-andy-coates", "createdAt": "2020-11-02T17:03:17Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -46,18 +46,13 @@\n  * complete backup of the command_topic is created.\n  */\n public class CommandTopicBackupImpl implements CommandTopicBackup {\n+\n   private static final Logger LOG = LoggerFactory.getLogger(CommandTopicBackupImpl.class);\n-  private static final Ticker CURRENT_MILLIS_TICKER = new Ticker() {\n-    @Override\n-    public long read() {\n-      return System.currentTimeMillis();\n-    }\n-  };", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDM1Ng==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120356", "bodyText": "Findbugs error no 1.", "author": "big-andy-coates", "createdAt": "2020-11-02T17:03:40Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -133,23 +129,22 @@ private boolean isRecordInLatestReplay(final ConsumerRecord<byte[], byte[]> reco\n     return false;\n   }\n \n-  private void throwIfInvalidRecord(final ConsumerRecord<byte[], byte[]> record) {\n+  private static void throwIfInvalidRecord(final ConsumerRecord<byte[], byte[]> record) {\n     try {\n       InternalTopicSerdes.deserializer(CommandId.class).deserialize(record.topic(), record.key());\n     } catch (final Exception e) {\n       throw new KsqlException(String.format(\n           \"Failed to backup record because it cannot deserialize key: %s\",\n-          new String(record.key(), StandardCharsets.UTF_8), e\n-      ));\n+          new String(record.key(), StandardCharsets.UTF_8)), e);", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDQ0Mg==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120442", "bodyText": "Findbugs error no 2.", "author": "big-andy-coates", "createdAt": "2020-11-02T17:03:48Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -133,23 +129,22 @@ private boolean isRecordInLatestReplay(final ConsumerRecord<byte[], byte[]> reco\n     return false;\n   }\n \n-  private void throwIfInvalidRecord(final ConsumerRecord<byte[], byte[]> record) {\n+  private static void throwIfInvalidRecord(final ConsumerRecord<byte[], byte[]> record) {\n     try {\n       InternalTopicSerdes.deserializer(CommandId.class).deserialize(record.topic(), record.key());\n     } catch (final Exception e) {\n       throw new KsqlException(String.format(\n           \"Failed to backup record because it cannot deserialize key: %s\",\n-          new String(record.key(), StandardCharsets.UTF_8), e\n-      ));\n+          new String(record.key(), StandardCharsets.UTF_8)), e);\n     }\n \n     try {\n       InternalTopicSerdes.deserializer(Command.class).deserialize(record.topic(), record.value());\n     } catch (final Exception e) {\n       throw new KsqlException(String.format(\n           \"Failed to backup record because it cannot deserialize value: %s\",\n-          new String(record.value(), StandardCharsets.UTF_8), e\n-      ));\n+          new String(record.value(), StandardCharsets.UTF_8)), e\n+      );", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDUxOQ==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120519", "bodyText": "simplified", "author": "big-andy-coates", "createdAt": "2020-11-02T17:03:56Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -193,18 +188,14 @@ public boolean commandTopicCorruption() {\n \n   @VisibleForTesting\n   BackupReplayFile openOrCreateReplayFile() {\n-    final Optional<BackupReplayFile> latestFile = latestReplayFile();\n-    if (latestFile.isPresent()) {\n-      return latestFile.get();\n-    }\n-\n-    return newReplayFile();\n+    return latestReplayFile()\n+        .orElseGet(this::newReplayFile);", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDYyOA==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120628", "bodyText": "warning fixed", "author": "big-andy-coates", "createdAt": "2020-11-02T17:04:06Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -216,12 +207,11 @@ private BackupReplayFile newReplayFile() {\n     File latestBakFile = null;\n     if (files != null) {\n       long latestTs = 0;\n-      for (int i = 0; i < files.length; i++) {\n-        final File bakFile = files[i];\n+      for (final File bakFile : files) {\n         final String bakTimestamp = bakFile.getName().substring(prefixFilename.length());\n \n         try {\n-          final Long ts = Long.valueOf(bakTimestamp);\n+          final long ts = Long.parseLong(bakTimestamp);", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDY3NQ==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120675", "bodyText": "warning fixed", "author": "big-andy-coates", "createdAt": "2020-11-02T17:04:11Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -216,12 +207,11 @@ private BackupReplayFile newReplayFile() {\n     File latestBakFile = null;\n     if (files != null) {\n       long latestTs = 0;\n-      for (int i = 0; i < files.length; i++) {\n-        final File bakFile = files[i];\n+      for (final File bakFile : files) {", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDc2MA==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120760", "bodyText": "simpified", "author": "big-andy-coates", "createdAt": "2020-11-02T17:04:17Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -230,17 +220,15 @@ private BackupReplayFile newReplayFile() {\n           LOG.warn(\n               \"Invalid timestamp '{}' found in backup replay file (file ignored): {}\",\n               bakTimestamp, bakFile.getName());\n-          continue;\n         }\n       }\n     }\n \n-    return (latestBakFile != null)\n-        ? Optional.of(BackupReplayFile.writable(latestBakFile))\n-        : Optional.empty();\n+    return Optional.ofNullable(latestBakFile)\n+        .map(BackupReplayFile::writable);", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDkyMQ==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120921", "bodyText": "Findbugs error no 3.", "author": "big-andy-coates", "createdAt": "2020-11-02T17:04:29Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "diffHunk": "@@ -88,8 +86,9 @@ private static void throwOnInvalidRecords(final List<Pair<byte[], byte[]>> recor\n       } catch (final Exception e) {\n         throw new KsqlException(String.format(\n             \"Invalid CommandId string (line %d): %s\",\n-            n, new String(record.getLeft(), StandardCharsets.UTF_8), e\n-        ));\n+            n, new String(record.getLeft(), StandardCharsets.UTF_8)),\n+            e", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDk4Ng==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516120986", "bodyText": "Findbugs error no 4.", "author": "big-andy-coates", "createdAt": "2020-11-02T17:04:36Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "diffHunk": "@@ -98,8 +97,9 @@ private static void throwOnInvalidRecords(final List<Pair<byte[], byte[]>> recor\n       } catch (final Exception e) {\n         throw new KsqlException(String.format(\n             \"Invalid Command string (line %d): %s\",\n-            n, new String(record.getRight(), StandardCharsets.UTF_8), e\n-        ));\n+            n, new String(record.getRight(), StandardCharsets.UTF_8)),\n+            e", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMTAzOQ==", "url": "https://github.com/confluentinc/ksql/pull/6556#discussion_r516121039", "bodyText": "simplified", "author": "big-andy-coates", "createdAt": "2020-11-02T17:04:42Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "diffHunk": "@@ -135,12 +135,7 @@ private static boolean promptQuestion() {\n     final Console console = System.console();\n     final String decision = console.readLine();\n \n-    switch (decision.toLowerCase()) {\n-      case \"yes\":\n-        return true;\n-      default:\n-        return false;\n-    }\n+    return \"yes\".equals(decision.toLowerCase());", "originalCommit": "c12aee6504452b7b71273bcae3eee4a57acd8d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}