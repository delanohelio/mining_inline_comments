{"pr_number": 6036, "pr_title": "feat: Support for IF EXISTS on CREATE CONNECTOR", "pr_createdAt": "2020-08-17T18:58:35Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6036", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNDg4OQ==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472034889", "bodyText": "Needs adding to hashCode, equals and toString.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:13:07Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateConnector.java", "diffHunk": "@@ -34,32 +34,41 @@\n   private final String name;\n   private final ImmutableMap<String, Literal> config;\n   private final Type type;\n+  private final boolean notExists;", "originalCommit": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyNzk1NQ==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472127955", "bodyText": "Fixed this", "author": "hemantgs", "createdAt": "2020-08-18T12:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNDg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "11e664dde6f943fd7f2f41210a28027923c3f74b", "chunk": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateConnector.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateConnector.java\nindex 76155330de..6a33f83f8d 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateConnector.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateConnector.java\n\n@@ -65,7 +65,7 @@ public class CreateConnector extends Statement {\n     return name;\n   }\n \n-  public boolean isNotExists() {\n+  public boolean ifNotExists() {\n     return notExists;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNTc2OA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472035768", "bodyText": "Please add test case on the end:\n.addEqualityGroup(\n   new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n)\nThis would have found the bug of not having this new field in hashCode and equals :D", "author": "big-andy-coates", "createdAt": "2020-08-18T09:14:31Z", "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "diffHunk": "@@ -39,18 +39,18 @@\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n+            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK)\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK,false)", "originalCommit": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyODU0MA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472128540", "bodyText": "Indeed yes , :) I was under the impression object equality here should not depend on ifNotExists,\nbut I see the rationale now .. added the test case", "author": "hemantgs", "createdAt": "2020-08-18T12:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNTc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "chunk": "diff --git a/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java b/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\nindex 45ad7cbcc0..48c45a2657 100644\n--- a/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\n+++ b/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\n\n@@ -39,18 +39,24 @@ public class CreateConnectorTest {\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n+            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE,false)\n+            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK,false)\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, false)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)\n         )\n         .testEquals();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNTk3MA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472035970", "bodyText": "nit: code style: need space after ,:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n          \n          \n            \n                        new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n          \n      \n    \n    \n  \n\nSame for others below.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:14:51Z", "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "diffHunk": "@@ -39,18 +39,18 @@\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),", "originalCommit": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "chunk": "diff --git a/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java b/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\nindex 45ad7cbcc0..48c45a2657 100644\n--- a/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\n+++ b/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\n\n@@ -39,18 +39,24 @@ public class CreateConnectorTest {\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n+            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE,false)\n+            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK,false)\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, false)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)\n         )\n         .testEquals();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472038546", "bodyText": "bug: doesn't this need to be reversed?   This returns true if the user included IF NOT EXIST in the statement.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (createConnector.isNotExists()) {\n          \n          \n            \n                if (!createConnector.isNotExists()) {", "author": "big-andy-coates", "createdAt": "2020-08-18T09:19:13Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {", "originalCommit": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzMDIzNg==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472130236", "bodyText": "It would be right to proceed with checking if the supplied connector exists only if  IF NOT EXISTS is in the query right ? else we could just avoid the check , meaning\nif `IF NOT EXISTS`\n   checkDuplicate\nelse\n   continue", "author": "hemantgs", "createdAt": "2020-08-18T12:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxODYwOQ==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r473218609", "bodyText": "If the IF NOT EXISTS is set, then it should not cause an error if the connector already exists. Btw, I found out the CREATE STREAM|TABLE IF NOT EXISTS does not work as expected either (#6050).", "author": "spena", "createdAt": "2020-08-19T17:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5NDQyMA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474594420", "bodyText": "The default functionality, without IF NOT EXISTS would be to fail if a connector with the same name already exists.  (I'm assuming the Connect API would return some kind of 'already exists' error). Adding the IF NOT EXISTS syntax should mean it does NOT fail if the connector exists, instead it should be a no-op.  Hence the logic should be:\nvoid create(...) {\n\n   if (stmt.ifNotExists() && connectorExists(stmt.connectorName()) {\n      // Connector exists already:\n      return;\n   }\n\n   addConnector(stmt);\n}\nOf course, this would suffer from a race condition: the connector could be added by another system between the connectorExists check and the addConnector call.  So really, we also need the addConnector call to gracefully handle the already exists error we get back from the Connect client, and if we're handling than, is there really any point in the connectExists call?   Hence the code could just be:\nvoid create(...) {\n   final ConnectResponse<ConnectorInfo> response = client.create(...);\n   if (response.datum().isPresent()) {\n      return success(...);\n   }\n\n   if (stmt.ifNotExists()) {\n      // somehow determine if the error was because the connector already existed with that name\n      // hopefully this is possible by looking at the http status code, maybe its 409. Not sure.\n      // Otherwise, we'd have to search the error message, which is brittle and we'd need an integration\n      // test to ensure changes to Connect error message don't break this: \n      if (isAlreadyExisttsError(response)) {\n         return alreadyExists(...);\n      }\n   }\n\n   return response.error() \n        .map(err -> new ErrorEntity(statement.getStatementText(), err));\t        .map(err -> new ErrorEntity(statement.getStatementText(), err));\nNote, that's just pseudo code. I've no idea what the client does if the connector already exists.\nNote2:it might help if the method isNotExists was renamed to onlyIfNotExists or ifNotExists or reversed and named ignoreIfExists, as isNotExists is .... confusing... at least to me.", "author": "big-andy-coates", "createdAt": "2020-08-21T09:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3OTY5NQ==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474779695", "bodyText": "Ahh , this makes it very clear :)\nI suppose I should wait for #6067 to be merged , once that is merged , it would make sense to return a WarningEntity with an appropriate message from ConnectExecutor when IF NOT EXISTS is set and the connector exists , instead of returning an error", "author": "hemantgs", "createdAt": "2020-08-21T15:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxODYxNg==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r475918616", "bodyText": "@hemantgs, #6067 has been merged!", "author": "jzaralim", "createdAt": "2020-08-24T22:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MjYyOQ==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476562629", "bodyText": "Fixed this , as per suggestions\na query with IF NOT EXISTS will return\nMessage                               \n---------------------------------------\n Connector CALLS_READER already exists \n---------------------------------------\n\nif connector exists", "author": "hemantgs", "createdAt": "2020-08-25T16:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\nindex 06edc15d76..14bab30b22 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n\n@@ -69,10 +69,24 @@ public final class ConnectExecutor {\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n \n-  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n-      final ConnectClient client) {\n+  private static void throwIfConnectorIsDuplicate(\n+      final CreateConnector createConnector,\n+      final ConnectClient client,\n+      final ConfiguredStatement<CreateConnector> statement\n+  ) {\n     if (createConnector.isNotExists()) {\n-      checkConnectorExists(client, createConnector)\n+\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+\n+      connectorsResponse.error().ifPresent(err -> {\n+        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());\n+      });\n+\n+      connectorsResponse.datum()\n+          .get()\n+          .stream()\n+          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+          .findAny()\n           .ifPresent(connector -> {\n             throw new KsqlException(String.format(\n                 \"Cannot add connector '%s': A connector with the same name already exists\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTgzNg==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472039836", "bodyText": "The Optional<String> return value of this is not needed. A simple boolean would suffice.  Also, it looks like you're ignoring any connect error.  If the response returns an error we probably want to bubble that up, right?   The code handles errors by doing this:\nreturn response.error()\n        .map(err -> new ErrorEntity(statement.getStatementText(), err));\nYou'll need to do something similar if the connectors call fails.  You could do this by throwing an exception that holds the ErrorEntity, or by combining checkConnectorExists and throwIfConnectorIsDuplicate together and have throwIfConnectorIsDuplicate return an Optional<ErrorEntity>. Either works.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:21:22Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {\n+      checkConnectorExists(client, createConnector)\n+          .ifPresent(connector -> {\n+            throw new KsqlException(String.format(\n+                \"Cannot add connector '%s': A connector with the same name already exists\",\n+                connector));\n+          });\n+    }\n+  }\n+\n+  private static Optional<String> checkConnectorExists(final ConnectClient client,\n+      final CreateConnector createConnector) {\n+    final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+    if (connectorsResponse.datum().isPresent()) {\n+      return connectorsResponse.datum()\n+          .get()\n+          .stream()\n+          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+          .findAny();\n+    }\n+    return Optional.empty();\n+  }", "originalCommit": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzMDcxNg==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472130716", "bodyText": "Fixed this to throw the ErrorEntity if there occurs an error with connects()", "author": "hemantgs", "createdAt": "2020-08-18T12:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\nindex 06edc15d76..14bab30b22 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n\n@@ -69,10 +69,24 @@ public final class ConnectExecutor {\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n \n-  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n-      final ConnectClient client) {\n+  private static void throwIfConnectorIsDuplicate(\n+      final CreateConnector createConnector,\n+      final ConnectClient client,\n+      final ConfiguredStatement<CreateConnector> statement\n+  ) {\n     if (createConnector.isNotExists()) {\n-      checkConnectorExists(client, createConnector)\n+\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+\n+      connectorsResponse.error().ifPresent(err -> {\n+        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());\n+      });\n+\n+      connectorsResponse.datum()\n+          .get()\n+          .stream()\n+          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+          .findAny()\n           .ifPresent(connector -> {\n             throw new KsqlException(String.format(\n                 \"Cannot add connector '%s': A connector with the same name already exists\",\n"}}, {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "url": "https://github.com/confluentinc/ksql/commit/131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "message": "feat: Support for IF NOT EXISTS on CREATE CONNECTOR\n\nAdded doc changes\n\nReworked error handling", "committedDate": "2020-08-18T12:01:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5NjEzNQ==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474596135", "bodyText": "nit: only need one new equality group.  Each equality group should change one param only, compared to the first equality group.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .addEqualityGroup(\n          \n          \n            \n                        new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n          \n          \n            \n                    )\n          \n          \n            \n                    .addEqualityGroup(\n          \n          \n            \n                        new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)\n          \n          \n            \n                    .addEqualityGroup(\n          \n          \n            \n                        new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)", "author": "big-andy-coates", "createdAt": "2020-08-21T09:52:22Z", "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "diffHunk": "@@ -39,18 +39,24 @@\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK)\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, false)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)", "originalCommit": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MzA2NA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476563064", "bodyText": "Removed the redundant equality group", "author": "hemantgs", "createdAt": "2020-08-25T16:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5NjEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "11e664dde6f943fd7f2f41210a28027923c3f74b", "chunk": "diff --git a/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java b/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\nindex 48c45a2657..e7d1076b4b 100644\n--- a/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\n+++ b/ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java\n\n@@ -52,9 +52,6 @@ public class CreateConnectorTest {\n         .addEqualityGroup(\n             new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, false)\n         )\n-        .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n-        )\n         .addEqualityGroup(\n             new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)\n         )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMTUxNA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474601514", "bodyText": "I'm not sure we want to throw an exception here. I think we need to return an ErrorEntity from the execute method - as the existing code does on an error.", "author": "big-andy-coates", "createdAt": "2020-08-21T10:02:23Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(\n+      final CreateConnector createConnector,\n+      final ConnectClient client,\n+      final ConfiguredStatement<CreateConnector> statement\n+  ) {\n+    if (createConnector.isNotExists()) {\n+\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+\n+      connectorsResponse.error().ifPresent(err -> {\n+        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());", "originalCommit": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MzEzNg==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476563136", "bodyText": "Removed this", "author": "hemantgs", "createdAt": "2020-08-25T16:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMTUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "11e664dde6f943fd7f2f41210a28027923c3f74b", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\nindex 14bab30b22..d6ddf3ca00 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n\n@@ -65,33 +62,12 @@ public final class ConnectExecutor {\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n+      return Optional.of(new WarningEntity(statement.getStatementText(),\n+          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    }\n+\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n-\n-  private static void throwIfConnectorIsDuplicate(\n-      final CreateConnector createConnector,\n-      final ConnectClient client,\n-      final ConfiguredStatement<CreateConnector> statement\n-  ) {\n-    if (createConnector.isNotExists()) {\n-\n-      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n-\n-      connectorsResponse.error().ifPresent(err -> {\n-        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());\n-      });\n-\n-      connectorsResponse.datum()\n-          .get()\n-          .stream()\n-          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n-          .findAny()\n-          .ifPresent(connector -> {\n-            throw new KsqlException(String.format(\n-                \"Cannot add connector '%s': A connector with the same name already exists\",\n-                connector));\n-          });\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMTU1NA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474601554", "bodyText": "as above, I'm not sure we want to throw an exception here. I think we need to return an ErrorEntity from the execute method - as the existing code does on an error.", "author": "big-andy-coates", "createdAt": "2020-08-21T10:02:29Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(\n+      final CreateConnector createConnector,\n+      final ConnectClient client,\n+      final ConfiguredStatement<CreateConnector> statement\n+  ) {\n+    if (createConnector.isNotExists()) {\n+\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+\n+      connectorsResponse.error().ifPresent(err -> {\n+        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());\n+      });\n+\n+      connectorsResponse.datum()\n+          .get()\n+          .stream()\n+          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+          .findAny()\n+          .ifPresent(connector -> {\n+            throw new KsqlException(String.format(\n+                \"Cannot add connector '%s': A connector with the same name already exists\",\n+                connector));\n+          });", "originalCommit": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MzIyNw==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476563227", "bodyText": "Removed this too", "author": "hemantgs", "createdAt": "2020-08-25T16:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "11e664dde6f943fd7f2f41210a28027923c3f74b", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\nindex 14bab30b22..d6ddf3ca00 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n\n@@ -65,33 +62,12 @@ public final class ConnectExecutor {\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n+      return Optional.of(new WarningEntity(statement.getStatementText(),\n+          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    }\n+\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n-\n-  private static void throwIfConnectorIsDuplicate(\n-      final CreateConnector createConnector,\n-      final ConnectClient client,\n-      final ConfiguredStatement<CreateConnector> statement\n-  ) {\n-    if (createConnector.isNotExists()) {\n-\n-      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n-\n-      connectorsResponse.error().ifPresent(err -> {\n-        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());\n-      });\n-\n-      connectorsResponse.datum()\n-          .get()\n-          .stream()\n-          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n-          .findAny()\n-          .ifPresent(connector -> {\n-            throw new KsqlException(String.format(\n-                \"Cannot add connector '%s': A connector with the same name already exists\",\n-                connector));\n-          });\n-    }\n-  }\n }\n"}}, {"oid": "11e664dde6f943fd7f2f41210a28027923c3f74b", "url": "https://github.com/confluentinc/ksql/commit/11e664dde6f943fd7f2f41210a28027923c3f74b", "message": "feat: Support for IF NOT EXISTS on CREATE CONNECTOR\n\nAdded doc changes\n\nReworked error handling\n\nFixed review comments", "committedDate": "2020-08-25T15:56:49Z", "type": "forcePushed"}, {"oid": "87a57929f92fc93ee2993126fa7a54495fa3b7d4", "url": "https://github.com/confluentinc/ksql/commit/87a57929f92fc93ee2993126fa7a54495fa3b7d4", "message": "feat: Support for IF NOT EXISTS on CREATE CONNECTOR\n\nAdded doc changes\n\nReworked error handling\n\nFixed review comments\n\nTypo fixed", "committedDate": "2020-08-25T15:58:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5OTk0Nw==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476599947", "bodyText": "I think we should check if the connector exists before attempting to call the client.create, and only if ifNotExists is true. I noticed the client.create() code retries up to 3 times in the following cases:\n.retryIfResult(\n              result -> result == null\n                  || result.httpCode() >= HttpStatus.SC_INTERNAL_SERVER_ERROR\n                  || result.httpCode() == HttpStatus.SC_CONFLICT)\n\nThere's no need to retry if the connector exists, right? Better just check if it exists to keep this command faster, then return the WarningEntity, otherwise try the create.", "author": "spena", "createdAt": "2020-08-25T17:00:57Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,6 +62,11 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {", "originalCommit": "87a57929f92fc93ee2993126fa7a54495fa3b7d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMTY4OA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476611688", "bodyText": "@big-andy-coates  above had suggested inconsistencies might creep in\n\nOf course, this would suffer from a race condition: the connector could be added by another system between the connectorExists check and the addConnector call. So really, we also need the addConnector call to gracefully handle the already exists\n\nWould it rather be better to remove result.httpCode() == HttpStatus.SC_CONFLICT) from retryIfResult() since we will be handling HttpStatus.SC_CONFLICT with a WarningEntity ,\nMeaning does it make sense to even retry when we know the connector exists", "author": "hemantgs", "createdAt": "2020-08-25T17:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5OTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMDYwNg==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476620606", "bodyText": "Sadly we can't. The SC_CONFLICT may also happen if the worker group is in a rebalancing process.\nPOST /connectors\nCreate a new connector, returning the current connector info if successful. Return 409 (Conflict) if rebalance is in process\n\nWhat do you think of adding the check before attempting to create the connector just to avoid the retries, and also leave the current check you have in this PR in case a race-condition happens? As mentioned by Andy we also need the addConnector call to gracefully handle the already exists", "author": "spena", "createdAt": "2020-08-25T17:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5OTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2ODY3Ng==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476668676", "bodyText": "SC_CONFLICT may also happen if the worker group is in a rebalancing process.\n\nAh ! I did not know that ,\nso yeah I feel that would be the better option .\nI have updated the PR ..\nLots of conditionals to handle all cases \ud83d\ude04", "author": "hemantgs", "createdAt": "2020-08-25T18:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5OTk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c2b023cc6e463f6423fa5f80e10ea2450de0813d", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\nindex d6ddf3ca00..6a9008f8d0 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n\n@@ -70,4 +79,35 @@ public final class ConnectExecutor {\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static Optional<KsqlEntity> handleIfNotExists(\n+      final ConfiguredStatement<CreateConnector> statement,\n+      final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.ifNotExists()) {\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+      if (connectorsResponse.error().isPresent()) {\n+        return connectorsResponse.error()\n+            .map(err -> new ErrorEntity(statement.getStatementText(), err));\n+      }\n+\n+      if (checkIfConnectorExists(createConnector, connectorsResponse)) {\n+        return Optional.of(new WarningEntity(statement.getStatementText(),\n+            String.format(\"Connector %s already exists\", createConnector.getName())));\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private static boolean checkIfConnectorExists(\n+      final CreateConnector createConnector,\n+      final ConnectResponse<List<String>> connectorsResponse\n+  ) {\n+    return connectorsResponse.datum()\n+        .get()\n+        .stream()\n+        .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+        .findAny()\n+        .isPresent();\n+  }\n }\n"}}, {"oid": "c2b023cc6e463f6423fa5f80e10ea2450de0813d", "url": "https://github.com/confluentinc/ksql/commit/c2b023cc6e463f6423fa5f80e10ea2450de0813d", "message": "feat: Support for IF NOT EXISTS on CREATE CONNECTOR\n\nAdded doc changes\n\nReworked error handling\n\nFixed review comments\n\nTypo fixed\n\nreview comments fixed", "committedDate": "2020-08-25T18:52:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNjkwOA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r481226908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return null;\n          \n          \n            \n                return Optional.empty();", "author": "big-andy-coates", "createdAt": "2020-09-01T15:22:14Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,7 +71,43 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n+      return Optional.of(new WarningEntity(statement.getStatementText(),\n+          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    }\n+\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static Optional<KsqlEntity> handleIfNotExists(\n+      final ConfiguredStatement<CreateConnector> statement,\n+      final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.ifNotExists()) {\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+      if (connectorsResponse.error().isPresent()) {\n+        return connectorsResponse.error()\n+            .map(err -> new ErrorEntity(statement.getStatementText(), err));\n+      }\n+\n+      if (checkIfConnectorExists(createConnector, connectorsResponse)) {\n+        return Optional.of(new WarningEntity(statement.getStatementText(),\n+            String.format(\"Connector %s already exists\", createConnector.getName())));\n+      }\n+    }\n+    return null;", "originalCommit": "c2b023cc6e463f6423fa5f80e10ea2450de0813d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2Mzg0Mg==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r482163842", "bodyText": "Changed this", "author": "hemantgs", "createdAt": "2020-09-02T15:29:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNjkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "d9ff4150ca118ee0c2717f21721cde2ffa817904", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\nindex 6a9008f8d0..97f2daa83e 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n\n@@ -71,9 +69,12 @@ public final class ConnectExecutor {\n       );\n     }\n \n-    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n-      return Optional.of(new WarningEntity(statement.getStatementText(),\n-          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    if (createConnector.ifNotExists()) {\n+      final Optional<KsqlEntity> connectors = handleIfNotExists(statement, createConnector, client);\n+\n+      if (connectors.isPresent()) {\n+        return connectors;\n+      }\n     }\n \n     return response.error()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNzEzMA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r481227130", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (connectorsResponse != null) {\n          \n          \n            \n                if (connectorsResponse.isPresent()) {", "author": "big-andy-coates", "createdAt": "2020-09-01T15:22:35Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -43,6 +49,12 @@ private ConnectExecutor() { }\n     final CreateConnector createConnector = statement.getStatement();\n     final ConnectClient client = serviceContext.getConnectClient();\n \n+    final Optional<KsqlEntity> connectorsResponse = handleIfNotExists(\n+        statement, createConnector, client);\n+    if (connectorsResponse != null) {", "originalCommit": "c2b023cc6e463f6423fa5f80e10ea2450de0813d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2Mzk0Ng==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r482163946", "bodyText": "changed this", "author": "hemantgs", "createdAt": "2020-09-02T15:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNzEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "d9ff4150ca118ee0c2717f21721cde2ffa817904", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\nindex 6a9008f8d0..97f2daa83e 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n\n@@ -51,7 +49,7 @@ public final class ConnectExecutor {\n \n     final Optional<KsqlEntity> connectorsResponse = handleIfNotExists(\n         statement, createConnector, client);\n-    if (connectorsResponse != null) {\n+    if (connectorsResponse.isPresent()) {\n       return connectorsResponse;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTQwNQ==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r481229405", "bodyText": "Should be sufficient to check if the connector now exists, e.g .\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n          \n          \n            \n                  return Optional.of(new WarningEntity(statement.getStatementText(),\n          \n          \n            \n                      String.format(\"Connector %s already exists\", createConnector.getName())));\n          \n          \n            \n                }\n          \n          \n            \n                if (createConnector.ifNotExists()) {\n          \n          \n            \n                  // Check again to see if above call failed because someone else created the same connector:\n          \n          \n            \n                  final Optional<KsqlEntity> connectorsResponse = handleIfNotExists(statement, createConnector, client);\n          \n          \n            \n                  if (connectorsResponse.isPresent()) {\n          \n          \n            \n                     return connectorsResponse.get();\n          \n          \n            \n                  }\n          \n          \n            \n                }", "author": "big-andy-coates", "createdAt": "2020-09-01T15:25:53Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,7 +71,43 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n+      return Optional.of(new WarningEntity(statement.getStatementText(),\n+          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    }", "originalCommit": "c2b023cc6e463f6423fa5f80e10ea2450de0813d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2NDQ2NA==", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r482164464", "bodyText": "Yeah , have changed this to check if failure was because of connector being created again", "author": "hemantgs", "createdAt": "2020-09-02T15:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9ff4150ca118ee0c2717f21721cde2ffa817904", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\nindex 6a9008f8d0..97f2daa83e 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java\n\n@@ -71,9 +69,12 @@ public final class ConnectExecutor {\n       );\n     }\n \n-    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n-      return Optional.of(new WarningEntity(statement.getStatementText(),\n-          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    if (createConnector.ifNotExists()) {\n+      final Optional<KsqlEntity> connectors = handleIfNotExists(statement, createConnector, client);\n+\n+      if (connectors.isPresent()) {\n+        return connectors;\n+      }\n     }\n \n     return response.error()\n"}}, {"oid": "d9ff4150ca118ee0c2717f21721cde2ffa817904", "url": "https://github.com/confluentinc/ksql/commit/d9ff4150ca118ee0c2717f21721cde2ffa817904", "message": "feat: Support for IF NOT EXISTS on CREATE CONNECTOR\n\nAdded doc changes\n\nReworked error handling\n\nFixed review comments\n\nTypo fixed\n\nreview comments fixed\n\nAdded integration tests", "committedDate": "2020-09-02T15:28:32Z", "type": "commit"}, {"oid": "d9ff4150ca118ee0c2717f21721cde2ffa817904", "url": "https://github.com/confluentinc/ksql/commit/d9ff4150ca118ee0c2717f21721cde2ffa817904", "message": "feat: Support for IF NOT EXISTS on CREATE CONNECTOR\n\nAdded doc changes\n\nReworked error handling\n\nFixed review comments\n\nTypo fixed\n\nreview comments fixed\n\nAdded integration tests", "committedDate": "2020-09-02T15:28:32Z", "type": "forcePushed"}]}