{"pr_number": 4778, "pr_title": "feat: Security plumbing", "pr_createdAt": "2020-03-14T09:43:34Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4778", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNDU4Ng==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392804586", "bodyText": "Is this behavior (that authentication.method is ignored if a custom auth plugin is specified) consistent with the existing Jetty-based implementation ? It seems sensible that only one form of auth should be configured at a time, just want to double check that the usage of these configs matches that of the current implementation.", "author": "vcrfxia", "createdAt": "2020-03-16T06:35:25Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -96,19 +108,31 @@ int actualPort() {\n   private Router setupRouter() {\n     final Router router = Router.router(vertx);\n \n-    router.route().failureHandler(ServerVerticle::handleFailure);\n+    // We only want to apply failure handler and auth handlers to routes that are not proxied\n+    // as Jetty will do it's own auth and failure handler\n+    routeFailureToNewApi(router, ServerVerticle::handleFailure);\n+\n+    final Optional<AuthHandler> authHandler = getAuthHandler(server);\n+    final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n+    final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n \n-    getAuthHandler(server).ifPresent(authHandler -> {\n-      router.route().handler(ServerVerticle::pauseHandler);\n-      router.route().handler(authHandler);\n-      server\n-          .getSecurityExtension()\n-          .getAuthorizationProvider()\n-          .ifPresent(ksqlAuthorizationProvider -> router.route()\n-              .handler(new KsqlAuthorizationFilter(server.getWorkerExecutor(),\n+    if (authHandler.isPresent() || authenticationPlugin.isPresent()) {\n+      routeToNewApi(router, ServerVerticle::pauseHandler);\n+      if (authenticationPlugin.isPresent()) {\n+        // Authentication plugin has precedence", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODM2Ng==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392858366", "bodyText": "I am assuming it's the same otherwise, on cloud with current KSQL a user could override the cloud based oauth authentication by providing setting a an auth method in their app config?", "author": "purplefox", "createdAt": "2020-03-16T08:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNDU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d88a50cbd9a6d15dc225ebca0bcccb6bf1a3a16e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex dc09baf19b..945b8f250f 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -119,17 +119,13 @@ public class ServerVerticle extends AbstractVerticle {\n     if (authHandler.isPresent() || authenticationPlugin.isPresent()) {\n       routeToNewApi(router, ServerVerticle::pauseHandler);\n       if (authenticationPlugin.isPresent()) {\n-        // Authentication plugin has precedence\n         routeToNewApi(router, createAuthenticationPluginHandler(authenticationPlugin.get()));\n       } else {\n-        // Otherwise use user configured JAAS auth handler\n         routeToNewApi(router, authHandler.get());\n       }\n-      // For authorization use auth provider configured via security extension (if any)\n       securityExtension.getAuthorizationProvider()\n           .ifPresent(ksqlAuthorizationProvider -> routeToNewApi(router,\n-              new KsqlAuthorizationProviderHandler(server.getWorkerExecutor(),\n-                  ksqlAuthorizationProvider)));\n+              new AuthorizationPlugin(server.getWorkerExecutor(), ksqlAuthorizationProvider)));\n \n       routeToNewApi(router, ServerVerticle::resumeHandler);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNTU2NA==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392805564", "bodyText": "Can we clarify in the Java docs for the AuthenticationPlugin interface that the expected behavior of the plugin is to:\n\nend the response and return null for the principal, if the user fails to authenticate\nreturn the principal, if the user successfully authenticates\n\nNot sure whether this is standard practice, but I was surprised to see that the expectation is for the plugin to end the response if the user fails to authenticate.", "author": "vcrfxia", "createdAt": "2020-03-16T06:38:52Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -130,12 +154,32 @@ private Router setupRouter() {\n     return router;\n   }\n \n+  private Handler<RoutingContext> createAuthenticationPluginHandler(\n+      final AuthenticationPlugin securityHandlerPlugin) {\n+    return routingContext -> {\n+      final CompletableFuture<Principal> cf = securityHandlerPlugin\n+          .handleAuth(routingContext, server.getWorkerExecutor());\n+      cf.thenAccept(principal -> {\n+        if (principal == null) {\n+          // Not authenticated\n+          // Do nothing, response is already ended by the plugin", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTIzOQ==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392859239", "bodyText": "Ack. I was surprised to see this behaviour too (I wouldn't have designed it this way myself), but ending the response on failure does seem to be the behaviour of the existing plugins used in cloud and CP.", "author": "purplefox", "createdAt": "2020-03-16T08:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNTU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "d88a50cbd9a6d15dc225ebca0bcccb6bf1a3a16e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex dc09baf19b..945b8f250f 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -178,9 +174,15 @@ public class ServerVerticle extends AbstractVerticle {\n       log.error(String.format(\"Failed to handle request %d %s\", routingContext.statusCode(),\n           routingContext.request().path()),\n           routingContext.failure());\n+      ServerUtils.handleError(\n+          routingContext.response(),\n+          routingContext.statusCode(),\n+          routingContext.statusCode(),\n+          routingContext.failure().getMessage()\n+      );\n+    } else {\n+      routingContext.response().setStatusCode(routingContext.statusCode()).end();\n     }\n-\n-    routingContext.response().setStatusCode(routingContext.statusCode()).end();\n   }\n \n   private static Optional<AuthHandler> getAuthHandler(final Server server) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNjc5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392806796", "bodyText": "As discussed offline, authMethod will never be null because the config has a default value (of NONE, meaning no authentication). This means that if a user specifies ksql.apiserver.authentication.method without setting authentication.method, then the value for ksql.apiserver.authentication.method will be overwritten with the default of no authentication which is not great but perhaps OK if we make it clear that during this transition from the old server to the new server, the old security configs are the ones that should be used. Could you add a note into the description for the new API server security configs making this explicit? I know it's just temporary but I'm worried others looking at the code may be surprised / confused. Perhaps we can also add a quick comment into this piece of code here too?\nSame concern with the other auth configs (auth role and realm) below.", "author": "vcrfxia", "createdAt": "2020-03-16T06:43:17Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -220,6 +224,24 @@ public static KsqlRestConfig convertToApiServerConfig(final KsqlRestConfig confi\n       }\n     }\n \n+    final String authMethod = config.getString(\"authentication.method\");\n+    if (authMethod != null) {", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MTQ2OA==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392861468", "bodyText": "Ack. I'll add a note.", "author": "purplefox", "createdAt": "2020-03-16T08:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNjc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "81933890e200f23bfac29473f90f610297b2e1c8", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\nindex d6f558ce69..f426f7510d 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n\n@@ -230,12 +234,11 @@ public final class KsqlRestApplication extends ExecutableApplication<KsqlRestCon\n     }\n     final List<String> authRoles = config.getList(\"authentication.roles\");\n     if (authRoles != null) {\n-      if (authRoles.size() == 1 && authRoles.get(0).equals(\"**\")) {\n-        // \"**\" in old config means \"*\" in new config\n-        origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, ImmutableList.of(\"*\"));\n-      } else {\n-        origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, authRoles);\n-      }\n+      final List<String> authRolesUpdated = authRoles.stream()\n+          .filter(role -> !\"*\".equals(role)) // remove \"*\"\n+          .map(role -> \"**\".equals(role) ? \"*\" : role) // Change \"**\" to \"*\"\n+          .collect(Collectors.toList());\n+      origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, authRolesUpdated);\n     }\n     final String authRealm = config.getString(\"authentication.realm\");\n     if (authRealm != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNzA5OQ==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392807099", "bodyText": "It'd be more reliable to check if any of the authRoles is **, rather than checking that there is only a single auth role and it has value **.", "author": "vcrfxia", "createdAt": "2020-03-16T06:44:21Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -220,6 +224,24 @@ public static KsqlRestConfig convertToApiServerConfig(final KsqlRestConfig confi\n       }\n     }\n \n+    final String authMethod = config.getString(\"authentication.method\");\n+    if (authMethod != null) {\n+      origs.put(ApiServerConfig.AUTHENTICATION_METHOD_CONFIG, authMethod);\n+    }\n+    final List<String> authRoles = config.getList(\"authentication.roles\");\n+    if (authRoles != null) {\n+      if (authRoles.size() == 1 && authRoles.get(0).equals(\"**\")) {", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MjE5NQ==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392862195", "bodyText": "Ack... on this subject I am curious why we have changed the meaning of */ here. Any reason we can't keep the original meaning?", "author": "purplefox", "createdAt": "2020-03-16T08:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNzA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "81933890e200f23bfac29473f90f610297b2e1c8", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\nindex d6f558ce69..f426f7510d 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n\n@@ -230,12 +234,11 @@ public final class KsqlRestApplication extends ExecutableApplication<KsqlRestCon\n     }\n     final List<String> authRoles = config.getList(\"authentication.roles\");\n     if (authRoles != null) {\n-      if (authRoles.size() == 1 && authRoles.get(0).equals(\"**\")) {\n-        // \"**\" in old config means \"*\" in new config\n-        origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, ImmutableList.of(\"*\"));\n-      } else {\n-        origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, authRoles);\n-      }\n+      final List<String> authRolesUpdated = authRoles.stream()\n+          .filter(role -> !\"*\".equals(role)) // remove \"*\"\n+          .map(role -> \"**\".equals(role) ? \"*\" : role) // Change \"**\" to \"*\"\n+          .collect(Collectors.toList());\n+      origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, authRolesUpdated);\n     }\n     final String authRealm = config.getString(\"authentication.realm\");\n     if (authRealm != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNzg3NQ==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392807875", "bodyText": "We should also add a check for * in the old config and remove it, since * in the old config meant to look at the web.xml file for roles, which AFAIC means no access since KSQL doesn't have a web.xml.\nWithout this, the default value of * for the old auth roles config will get propagated to the new config, which interprets * to mean all roles have access, which is the opposite meaning of the original default -- yikes!", "author": "vcrfxia", "createdAt": "2020-03-16T06:46:50Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -220,6 +224,24 @@ public static KsqlRestConfig convertToApiServerConfig(final KsqlRestConfig confi\n       }\n     }\n \n+    final String authMethod = config.getString(\"authentication.method\");\n+    if (authMethod != null) {\n+      origs.put(ApiServerConfig.AUTHENTICATION_METHOD_CONFIG, authMethod);\n+    }\n+    final List<String> authRoles = config.getList(\"authentication.roles\");\n+    if (authRoles != null) {\n+      if (authRoles.size() == 1 && authRoles.get(0).equals(\"**\")) {\n+        // \"**\" in old config means \"*\" in new config", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxMDA4MQ==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392810081", "bodyText": "As discussed offline, we've got a test gap in our current integration tests in that we start directly from the ApiServerConfig and bypass this translation from old configs to new configs, which means we miss bugs in translation logic such as this one. We should plug this testing gap.", "author": "vcrfxia", "createdAt": "2020-03-16T06:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2ODQ5MA==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392868490", "bodyText": "I can see that we do call the conversion function in TestKsqlRestApp, or perhaps you are referring to somewhere else?", "author": "purplefox", "createdAt": "2020-03-16T09:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwNzg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "81933890e200f23bfac29473f90f610297b2e1c8", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\nindex d6f558ce69..f426f7510d 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n\n@@ -230,12 +234,11 @@ public final class KsqlRestApplication extends ExecutableApplication<KsqlRestCon\n     }\n     final List<String> authRoles = config.getList(\"authentication.roles\");\n     if (authRoles != null) {\n-      if (authRoles.size() == 1 && authRoles.get(0).equals(\"**\")) {\n-        // \"**\" in old config means \"*\" in new config\n-        origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, ImmutableList.of(\"*\"));\n-      } else {\n-        origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, authRoles);\n-      }\n+      final List<String> authRolesUpdated = authRoles.stream()\n+          .filter(role -> !\"*\".equals(role)) // remove \"*\"\n+          .map(role -> \"**\".equals(role) ? \"*\" : role) // Change \"**\" to \"*\"\n+          .collect(Collectors.toList());\n+      origs.put(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG, authRolesUpdated);\n     }\n     final String authRealm = config.getString(\"authentication.realm\");\n     if (authRealm != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxMTYxMw==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392811613", "bodyText": "nit: can we rename this to shouldNotAllowQueryWithSecurityPluginIfAuthenticationFails or something similar? I find it confusing that there are two tests named shouldAllowQueryWithSecurityPlugin and shouldNotAllowQueryWithSecurityPlugin. Similarly for the other tests below.", "author": "vcrfxia", "createdAt": "2020-03-16T06:52:55Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -214,22 +221,57 @@ public void shouldAllowCloseQueryWithPermissionCheck() throws Exception {\n   @Test\n   public void shouldNotAllowQueryIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD));\n+        () -> shouldFailQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n   }\n \n   @Test\n   public void shouldNotAllowInsertsIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailInsertRequest(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD));\n+        () -> shouldFailInsertRequest(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n   }\n \n   @Test\n   public void shouldNotAllowCloseQueryIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailCloseQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD));\n+        () -> shouldFailCloseQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n   }\n \n-  private void shouldFailQuery(final String username, final String password) throws Exception {\n+  @Test\n+  public void shouldAllowQueryWithSecurityPlugin() throws Exception {\n+    shouldAuthenticateWithSecurityPlugin(USER_WITHOUT_ACCESS, super::shouldExecutePullQuery, true);\n+  }\n+\n+  @Test\n+  public void shouldNotAllowQueryWithSecurityPlugin() throws Exception {", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MDM0NA==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392870344", "bodyText": "Not sure I follow...", "author": "purplefox", "createdAt": "2020-03-16T09:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxMTYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "e7360afae0e778781b13af9c8dafb68ae0672023", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\nindex 1901e96659..2487221615 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n\n@@ -221,19 +225,19 @@ public class AuthTest extends ApiTest {\n   @Test\n   public void shouldNotAllowQueryIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n+        () -> shouldFailQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403, \"Forbidden\"));\n   }\n \n   @Test\n   public void shouldNotAllowInsertsIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailInsertRequest(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n+        () -> shouldFailInsertRequest(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403, \"Forbidden\"));\n   }\n \n   @Test\n   public void shouldNotAllowCloseQueryIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailCloseQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n+        () -> shouldFailCloseQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403, \"Forbidden\"));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxMzA4MA==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392813080", "bodyText": "This test is confusing on first read since it tests a user's ability to successfully access an endpoint, yet the user in the test is USER_WITHOUT_ACCESS. Can we update this to USER_WITH_ACCESS? And similarly for the other tests.", "author": "vcrfxia", "createdAt": "2020-03-16T06:55:33Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -214,22 +221,57 @@ public void shouldAllowCloseQueryWithPermissionCheck() throws Exception {\n   @Test\n   public void shouldNotAllowQueryIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD));\n+        () -> shouldFailQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n   }\n \n   @Test\n   public void shouldNotAllowInsertsIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailInsertRequest(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD));\n+        () -> shouldFailInsertRequest(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n   }\n \n   @Test\n   public void shouldNotAllowCloseQueryIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailCloseQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD));\n+        () -> shouldFailCloseQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n   }\n \n-  private void shouldFailQuery(final String username, final String password) throws Exception {\n+  @Test\n+  public void shouldAllowQueryWithSecurityPlugin() throws Exception {\n+    shouldAuthenticateWithSecurityPlugin(USER_WITHOUT_ACCESS, super::shouldExecutePullQuery, true);", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MTA1Ng==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392871056", "bodyText": "This is deliberately USER_WITHOUT_ACCESS as it's validating that, even if the user has access (via JAAS) then the security plugin will take precedence and override that.", "author": "purplefox", "createdAt": "2020-03-16T09:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxMzA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "e7360afae0e778781b13af9c8dafb68ae0672023", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\nindex 1901e96659..2487221615 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n\n@@ -221,19 +225,19 @@ public class AuthTest extends ApiTest {\n   @Test\n   public void shouldNotAllowQueryIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n+        () -> shouldFailQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403, \"Forbidden\"));\n   }\n \n   @Test\n   public void shouldNotAllowInsertsIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailInsertRequest(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n+        () -> shouldFailInsertRequest(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403, \"Forbidden\"));\n   }\n \n   @Test\n   public void shouldNotAllowCloseQueryIfPermissionCheckThrowsException() throws Exception {\n     shouldNotAllowAccessIfPermissionCheckThrowsException(\n-        () -> shouldFailCloseQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403));\n+        () -> shouldFailCloseQuery(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, 403, \"Forbidden\"));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxMzk4Mw==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392813983", "bodyText": "Do we need to pass expectedUser into this method? I don't see any verification for it. If its only usage is in  creating the StringPrincipal we can probably just remove the parameter and put in a dummy value.", "author": "vcrfxia", "createdAt": "2020-03-16T06:56:52Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -315,6 +356,37 @@ private void assertAuthorisedSecurityContext(String username) {\n         is(username));\n   }\n \n+  private void shouldAuthenticateWithSecurityPlugin(final String expectedUser,", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MjAyMA==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392872020", "bodyText": "We only currently pass in same value, that is true. But this could change so I don't see any harm in keeping it.", "author": "purplefox", "createdAt": "2020-03-16T09:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxMzk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d88a50cbd9a6d15dc225ebca0bcccb6bf1a3a16e", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\nindex 1901e96659..1629b83989 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n\n@@ -366,6 +380,7 @@ public class AuthTest extends ApiTest {\n     this.securityHandlerPlugin = new AuthenticationPlugin() {\n       @Override\n       public void configure(final Map<String, ?> map) {\n+\n       }\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxNTM1Ng==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392815356", "bodyText": "I see this PR moves the async handling for creating QueryPublishers and InsertStreamSubscribers from those classes into KsqlServerEndpoints. Why is this preferred? (Trying to learn guidelines for determining where it makes sense for async handling to take place.)", "author": "vcrfxia", "createdAt": "2020-03-16T06:58:58Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java", "diffHunk": "@@ -52,28 +56,36 @@ public KsqlServerEndpoints(\n   }\n \n   @Override\n-  public QueryPublisher createQueryPublisher(final String sql, final JsonObject properties,\n+  public CompletableFuture<QueryPublisher> createQueryPublisher(final String sql,\n+      final JsonObject properties,\n       final Context context,\n       final WorkerExecutor workerExecutor,\n       final ApiSecurityContext apiSecurityContext) {\n-    return new QueryStreamEndpoint(ksqlEngine, ksqlConfig, pullQueryExecutor)\n-        .createQueryPublisher(sql, properties, context, workerExecutor,\n-            createServiceContext(apiSecurityContext));\n+    return executeOnWorker(", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MzU2Nw==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392873567", "bodyText": "In the future we will probably implement some endpoints in a non blocking way. So, I don't think it is desirable for the endpoints implementation to be always called on a worker.", "author": "purplefox", "createdAt": "2020-03-16T09:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxNTM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "81933890e200f23bfac29473f90f610297b2e1c8", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java\nindex d1a4f057bb..940eda802f 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java\n\n@@ -84,7 +84,7 @@ public class KsqlServerEndpoints implements Endpoints {\n   private <R> CompletableFuture<R> executeOnWorker(final Supplier<R> supplier,\n       final WorkerExecutor workerExecutor) {\n     final VertxCompletableFuture<R> vcf = new VertxCompletableFuture<>();\n-    workerExecutor.executeBlocking(promise -> promise.complete(supplier.get()), vcf);\n+    workerExecutor.executeBlocking(promise -> promise.complete(supplier.get()), false, vcf);\n     return vcf;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxNjI2Mg==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392816262", "bodyText": "As part of moving the async handling for creating InsertsStreamSubsribers to KsqlServerEndpoints, this optimization for non-serial blocking code execution was lost. I assume that's no big deal, but wanted to call it out in case the optimization was significant.", "author": "vcrfxia", "createdAt": "2020-03-16T07:00:30Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java", "diffHunk": "@@ -216,20 +213,4 @@ private void handleResponseEnd() {\n \n   }\n \n-  private CompletableFuture<InsertsStreamSubscriber> createInsertsSubscriberAsync(\n-      final String target,\n-      final JsonObject properties, final Subscriber<InsertResult> acksSubscriber,\n-      final Context context,\n-      final ApiSecurityContext apiSecurityContext) {\n-    final VertxCompletableFuture<InsertsStreamSubscriber> vcf = new VertxCompletableFuture<>();\n-    workerExecutor.executeBlocking(\n-        p -> p.complete(\n-            endpoints.createInsertsSubscriber(target, properties, acksSubscriber, context,\n-                workerExecutor, apiSecurityContext)),\n-        false,", "originalCommit": "d7432c6524831146e3a5f8533ff5440adb7fa57e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NTE0Mw==", "url": "https://github.com/confluentinc/ksql/pull/4778#discussion_r392875143", "bodyText": "Good catch! That's a bug.", "author": "purplefox", "createdAt": "2020-03-16T09:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxNjI2Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d88a50cbd9a6d15dc225ebca0bcccb6bf1a3a16e", "url": "https://github.com/confluentinc/ksql/commit/d88a50cbd9a6d15dc225ebca0bcccb6bf1a3a16e", "message": "Security plumbing", "committedDate": "2020-03-16T09:18:47Z", "type": "commit"}, {"oid": "d9c4843a283b466b67d79e4c3ff035fe5b871d6e", "url": "https://github.com/confluentinc/ksql/commit/d9c4843a283b466b67d79e4c3ff035fe5b871d6e", "message": "Some updates", "committedDate": "2020-03-16T09:18:51Z", "type": "commit"}, {"oid": "3e030b4fb9cc87b05a0833ad0b925de729f99813", "url": "https://github.com/confluentinc/ksql/commit/3e030b4fb9cc87b05a0833ad0b925de729f99813", "message": "Updated JaasAuthProviderTest", "committedDate": "2020-03-16T09:18:51Z", "type": "commit"}, {"oid": "81933890e200f23bfac29473f90f610297b2e1c8", "url": "https://github.com/confluentinc/ksql/commit/81933890e200f23bfac29473f90f610297b2e1c8", "message": "Review updates", "committedDate": "2020-03-16T09:18:51Z", "type": "commit"}, {"oid": "e7360afae0e778781b13af9c8dafb68ae0672023", "url": "https://github.com/confluentinc/ksql/commit/e7360afae0e778781b13af9c8dafb68ae0672023", "message": "Fixed test after merge", "committedDate": "2020-03-16T09:58:32Z", "type": "commit"}, {"oid": "e7360afae0e778781b13af9c8dafb68ae0672023", "url": "https://github.com/confluentinc/ksql/commit/e7360afae0e778781b13af9c8dafb68ae0672023", "message": "Fixed test after merge", "committedDate": "2020-03-16T09:58:32Z", "type": "forcePushed"}]}