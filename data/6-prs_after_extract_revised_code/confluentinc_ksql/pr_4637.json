{"pr_number": 4637, "pr_title": "chore: remove Connect schema from Format interface", "pr_createdAt": "2020-02-26T13:22:35Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4637", "timeline": [{"oid": "6cbd8c557315b20694efbcc51f6db12cb42c22fa", "url": "https://github.com/confluentinc/ksql/commit/6cbd8c557315b20694efbcc51f6db12cb42c22fa", "message": "chore: remove Connect schema from Format interface\n\nAs this interface is moving towards being a pluggable public interface.\n\nNow, the `Format` interface deals with converting SchemaRegistry `ParsedSchema`s into the list of `SimpleColumn` ksql should use. Each `SimpleColumn` defines the name and type of the column.\n\nConversion between connect and ksql types is now handled by the `ConnectFormat` base class.  This base class currently converts all field names to uppercase. However, it is now possible for a format to return any-case names and those names will be respected.", "committedDate": "2020-02-26T13:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NzkwNQ==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r384767905", "bodyText": "let's javadoc this? hypothetically it could be useful in the future for pluggable schemas to leverage this class", "author": "agavra", "createdAt": "2020-02-26T21:11:50Z", "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.connect;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.kafka.schemaregistry.ParsedSchema;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SimpleColumn;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.serde.Format;\n+import io.confluent.ksql.util.DecimalUtil;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+\n+public abstract class ConnectFormat implements Format {", "originalCommit": "6cbd8c557315b20694efbcc51f6db12cb42c22fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MTc1OA==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r385061758", "bodyText": "added", "author": "big-andy-coates", "createdAt": "2020-02-27T11:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NzkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c27ff1d443c1ba3ff58f7e22c475acf937513464", "chunk": "diff --git a/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java b/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\nindex 2eee1f9e5c..f0dd611283 100644\n--- a/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\n+++ b/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\n\n@@ -62,7 +62,7 @@ public abstract class ConnectFormat implements Format {\n   public ParsedSchema toParsedSchema(final List<SimpleColumn> columns) {\n     final SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n     columns.forEach(col -> schemaBuilder.field(\n-        col.ref().name(),\n+        col.name().text(),\n         SchemaConverters.sqlToConnectConverter().toConnectSchema(col.type()))\n     );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2OTAyNw==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r384769027", "bodyText": "nit: @Override here and below", "author": "agavra", "createdAt": "2020-02-26T21:14:15Z", "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonFormat.java", "diffHunk": "@@ -18,43 +18,32 @@\n import io.confluent.connect.json.JsonSchemaData;\n import io.confluent.kafka.schemaregistry.ParsedSchema;\n import io.confluent.kafka.schemaregistry.json.JsonSchema;\n-import io.confluent.ksql.serde.Format;\n import io.confluent.ksql.serde.FormatInfo;\n import io.confluent.ksql.serde.KsqlSerdeFactory;\n+import io.confluent.ksql.serde.connect.ConnectFormat;\n import org.apache.kafka.connect.data.Schema;\n \n-public class JsonFormat implements Format {\n+public class JsonFormat extends ConnectFormat {\n \n   public static final String NAME = JsonSchema.TYPE;\n \n-  private JsonSchemaData jsonData;\n-\n-  public JsonFormat() {\n-    this.jsonData = new JsonSchemaData();\n-  }\n+  private final JsonSchemaData jsonData = new JsonSchemaData();\n \n   @Override\n   public String name() {\n     return NAME;\n   }\n \n   @Override\n-  public boolean supportsSchemaInference() {\n-    return true;\n+  public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n+    return new KsqlJsonSerdeFactory();\n   }\n \n-  @Override\n-  public Schema toConnectSchema(final ParsedSchema schema) {\n+  protected Schema toConnectSchema(final ParsedSchema schema) {", "originalCommit": "6cbd8c557315b20694efbcc51f6db12cb42c22fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MjEwMg==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r385062102", "bodyText": "added", "author": "big-andy-coates", "createdAt": "2020-02-27T11:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2OTAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "c27ff1d443c1ba3ff58f7e22c475acf937513464", "chunk": "diff --git a/ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonFormat.java b/ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonFormat.java\nindex 5c128e9167..5287043238 100644\n--- a/ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonFormat.java\n+++ b/ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonFormat.java\n\n@@ -36,7 +36,7 @@ public class JsonFormat extends ConnectFormat {\n \n   @Override\n   public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-    return new KsqlJsonSerdeFactory();\n+    return new KsqlJsonSerdeFactory(false);\n   }\n \n   protected Schema toConnectSchema(final ParsedSchema schema) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2OTY3OA==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r384769678", "bodyText": "this seems like it doesn't belong in prod code?", "author": "agavra", "createdAt": "2020-02-26T21:15:15Z", "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.connect;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.kafka.schemaregistry.ParsedSchema;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SimpleColumn;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.serde.Format;\n+import io.confluent.ksql.util.DecimalUtil;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+\n+public abstract class ConnectFormat implements Format {\n+\n+  private final Function<Schema, Schema> toKsqlTransformer;\n+\n+  public ConnectFormat() {\n+    this(new ConnectSchemaTranslator()::toKsqlSchema);\n+  }\n+\n+  @VisibleForTesting\n+  ConnectFormat(final Function<Schema, Schema> toKsqlTransformer) {\n+    this.toKsqlTransformer = Objects.requireNonNull(toKsqlTransformer, \"toKsqlTransformer\");\n+  }\n+\n+  @Override\n+  public boolean supportsSchemaInference() {\n+    return true;\n+  }\n+\n+  @Override\n+  public List<SimpleColumn> toColumns(final ParsedSchema schema) {\n+    final Schema connectSchema = toKsqlTransformer.apply(toConnectSchema(schema));\n+\n+    return connectSchema.fields().stream()\n+        .map(ConnectFormat::toColumn)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public ParsedSchema toParsedSchema(final List<SimpleColumn> columns) {\n+    final SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n+    columns.forEach(col -> schemaBuilder.field(\n+        col.ref().name(),\n+        SchemaConverters.sqlToConnectConverter().toConnectSchema(col.type()))\n+    );\n+\n+    final Schema connectSchema = ensureNamed(schemaBuilder.build());\n+    return fromConnectSchema(connectSchema);\n+  }\n+\n+  protected abstract Schema toConnectSchema(ParsedSchema schema);\n+\n+  protected abstract ParsedSchema fromConnectSchema(Schema schema);\n+\n+  private static SimpleColumn toColumn(final Field field) {\n+    final ColumnName name = ColumnName.of(field.name());\n+    final SqlType type = SchemaConverters.connectToSqlConverter().toSqlType(field.schema());\n+    return new ConnectColumn(name, type);\n+  }\n+\n+  private static Schema ensureNamed(final Schema schema) {\n+    final SchemaBuilder builder;\n+    switch (schema.type()) {\n+      case BYTES:\n+        DecimalUtil.requireDecimal(schema);\n+        builder = DecimalUtil.builder(schema);\n+        break;\n+      case ARRAY:\n+        builder = SchemaBuilder.array(ensureNamed(schema.valueSchema()));\n+        break;\n+      case MAP:\n+        builder = SchemaBuilder.map(\n+            Schema.STRING_SCHEMA,\n+            ensureNamed(schema.valueSchema())\n+        );\n+        break;\n+      case STRUCT:\n+        builder = SchemaBuilder.struct();\n+        if (schema.name() == null) {\n+          builder.name(\"TestSchema\" + UUID.randomUUID().toString().replace(\"-\", \"\"));", "originalCommit": "6cbd8c557315b20694efbcc51f6db12cb42c22fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MzY1NQ==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r385063655", "bodyText": "I agree. However, I've not added it, only moved it.  It was in TestCaseBuilderUtil.addNames().\nIt's a bit of a pain, because KSQL types don't support naming, only Connect Schemas do. However, some formats, (PB & Avro), require structs to be named.\nThis method is only called by the testing framework. Admittedly, moving this here was a bit lazy of me. Let me take a look into doing it a better way.", "author": "big-andy-coates", "createdAt": "2020-02-27T11:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2OTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNTE5Mg==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r385115192", "bodyText": "Found a way to remove this.", "author": "big-andy-coates", "createdAt": "2020-02-27T13:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2OTY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c27ff1d443c1ba3ff58f7e22c475acf937513464", "chunk": "diff --git a/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java b/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\nindex 2eee1f9e5c..f0dd611283 100644\n--- a/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\n+++ b/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\n\n@@ -62,7 +62,7 @@ public abstract class ConnectFormat implements Format {\n   public ParsedSchema toParsedSchema(final List<SimpleColumn> columns) {\n     final SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n     columns.forEach(col -> schemaBuilder.field(\n-        col.ref().name(),\n+        col.name().text(),\n         SchemaConverters.sqlToConnectConverter().toConnectSchema(col.type()))\n     );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MDY4NA==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r384770684", "bodyText": "previously we weren't doing this, why do we need to do it here?", "author": "agavra", "createdAt": "2020-02-26T21:16:50Z", "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.connect;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.kafka.schemaregistry.ParsedSchema;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SimpleColumn;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.serde.Format;\n+import io.confluent.ksql.util.DecimalUtil;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+\n+public abstract class ConnectFormat implements Format {\n+\n+  private final Function<Schema, Schema> toKsqlTransformer;\n+\n+  public ConnectFormat() {\n+    this(new ConnectSchemaTranslator()::toKsqlSchema);\n+  }\n+\n+  @VisibleForTesting\n+  ConnectFormat(final Function<Schema, Schema> toKsqlTransformer) {\n+    this.toKsqlTransformer = Objects.requireNonNull(toKsqlTransformer, \"toKsqlTransformer\");\n+  }\n+\n+  @Override\n+  public boolean supportsSchemaInference() {\n+    return true;\n+  }\n+\n+  @Override\n+  public List<SimpleColumn> toColumns(final ParsedSchema schema) {\n+    final Schema connectSchema = toKsqlTransformer.apply(toConnectSchema(schema));\n+\n+    return connectSchema.fields().stream()\n+        .map(ConnectFormat::toColumn)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public ParsedSchema toParsedSchema(final List<SimpleColumn> columns) {\n+    final SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n+    columns.forEach(col -> schemaBuilder.field(\n+        col.ref().name(),\n+        SchemaConverters.sqlToConnectConverter().toConnectSchema(col.type()))\n+    );\n+\n+    final Schema connectSchema = ensureNamed(schemaBuilder.build());\n+    return fromConnectSchema(connectSchema);\n+  }\n+\n+  protected abstract Schema toConnectSchema(ParsedSchema schema);\n+\n+  protected abstract ParsedSchema fromConnectSchema(Schema schema);\n+\n+  private static SimpleColumn toColumn(final Field field) {\n+    final ColumnName name = ColumnName.of(field.name());\n+    final SqlType type = SchemaConverters.connectToSqlConverter().toSqlType(field.schema());\n+    return new ConnectColumn(name, type);\n+  }\n+\n+  private static Schema ensureNamed(final Schema schema) {", "originalCommit": "6cbd8c557315b20694efbcc51f6db12cb42c22fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NDE4OQ==", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r385064189", "bodyText": "We were. This was a cut&paste from TestCaseBuilderUtil.addNames()", "author": "big-andy-coates", "createdAt": "2020-02-27T11:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MDY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "c27ff1d443c1ba3ff58f7e22c475acf937513464", "chunk": "diff --git a/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java b/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\nindex 2eee1f9e5c..f0dd611283 100644\n--- a/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\n+++ b/ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java\n\n@@ -62,7 +62,7 @@ public abstract class ConnectFormat implements Format {\n   public ParsedSchema toParsedSchema(final List<SimpleColumn> columns) {\n     final SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n     columns.forEach(col -> schemaBuilder.field(\n-        col.ref().name(),\n+        col.name().text(),\n         SchemaConverters.sqlToConnectConverter().toConnectSchema(col.type()))\n     );\n \n"}}, {"oid": "c27ff1d443c1ba3ff58f7e22c475acf937513464", "url": "https://github.com/confluentinc/ksql/commit/c27ff1d443c1ba3ff58f7e22c475acf937513464", "message": "chore: merge from master\n\nConflicting files\nksql-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestCaseBuilderUtil.java\nksql-functional-tests/src/main/java/io/confluent/ksql/test/utils/SerdeUtil.java\nksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonFormat.java", "committedDate": "2020-02-27T11:07:37Z", "type": "commit"}, {"oid": "d747928400e9e29a2ada7a8faad8a35bff64dabf", "url": "https://github.com/confluentinc/ksql/commit/d747928400e9e29a2ada7a8faad8a35bff64dabf", "message": "chore: requested changes", "committedDate": "2020-02-27T13:09:24Z", "type": "commit"}]}