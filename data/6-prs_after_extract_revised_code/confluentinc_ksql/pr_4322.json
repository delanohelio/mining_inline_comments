{"pr_number": 4322, "pr_title": "feat: hide internal/system topics from SHOW TOPICS", "pr_createdAt": "2020-01-15T16:18:00Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4322", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MDUyMg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r366970522", "bodyText": "The processing log topic is not hidden from users. This topic is considered a non-internal, that's why the processing log topic default_ksql_processing_log does not have the prefix for an internal topic.", "author": "spena", "createdAt": "2020-01-15T16:19:41Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.util.Set;\n+\n+public final class ReservedInternalTopics {\n+  private static final Set<String> ALL_INTERNAL_TOPICS_PREFIXES = ImmutableSet.of(\n+      // Confluent\n+      \"_confluent\",\n+      \"__confluent\"\n+  );", "originalCommit": "dab9bd646fb4ded44715e70721363507d832a109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDU4MA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367360580", "bodyText": "We probably want the processing log included, so users don't inject badly formatted messages.  I'm not sure there is a way to do this across different KSQL clusters, i.e. stop one cluster writing into the processing log of another cluster, but we can stop it in the same cluster, i.e. KSQL knows the name of its processing log and could include this in the list.", "author": "big-andy-coates", "createdAt": "2020-01-16T11:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MDUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2Mjc1Nw==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368062757", "bodyText": "Done. I did not include the processing in the list of topics to hide because users are intentionally meant to read from this topic and should know what name it is. I did add a check to avoid writing to it, though.", "author": "spena", "createdAt": "2020-01-17T17:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MDUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 73c8800808..8c754b536f 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,53 +15,115 @@\n \n package io.confluent.ksql.util;\n \n-import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+import java.util.List;\n import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n public final class ReservedInternalTopics {\n-  private static final Set<String> ALL_INTERNAL_TOPICS_PREFIXES = ImmutableSet.of(\n-      // Confluent\n-      \"_confluent\",\n-      \"__confluent\"\n-  );\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n \n-  private static final Set<String> ALL_INTERNAL_TOPICS_LITERALS = ImmutableSet.of(\n-      // Security\n-      \"_secrets\",\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n \n-      // Kafka\n-      \"__consumer_offsets\",\n-      \"__transaction_state\",\n-\n-      // Replicator\n-      \"__consumer_timestamps\",\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n \n-      // Schema Registry\n-      \"_schemas\",\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n \n-      // Connect\n-      \"connect-configs\",\n-      \"connect-offsets\",\n-      \"connect-status\",\n-      \"connect-statuses\"\n-  );\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n \n-  public static boolean isInternalTopic(final String topicName) {\n-    return isLiteral(topicName) || isPrefix(topicName);\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n   }\n \n-  private static boolean isPrefix(final String topicName) {\n-    return ALL_INTERNAL_TOPICS_PREFIXES.stream()\n-        .filter(topicName::startsWith)\n-        .findAny()\n-        .isPresent();\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n+          .stream()\n+          .map(Pattern::compile)\n+          .collect(Collectors.toList());\n+    } catch (final Exception e) {\n+      final String message = \"Cannot get a list of system internal topics due to an invalid \" +\n+          \"configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());\n+      throw new KsqlException(message, e);\n+    }\n   }\n \n-  private static boolean isLiteral(final String topicName) {\n-    return ALL_INTERNAL_TOPICS_LITERALS.contains(topicName);\n+  public Set<String> filterInternalTopics(final Set<String> topicNames) {\n+    return topicNames.stream()\n+        .filter(t -> !isInternalTopic(t))\n+        .collect(Collectors.toSet());\n   }\n \n-  private ReservedInternalTopics() {\n+  public boolean isInternalTopic(final String topicName) {\n+    return topicName.startsWith(KSQL_INTERNAL_TOPIC_PREFIX) || systemInternalTopics.stream()\n+        .filter(p -> p.matcher(topicName).matches())\n+        .findAny()\n+        .isPresent();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTM0MA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367361340", "bodyText": "IMHO we should be avoiding hard-coded lists.  A config, with a default value, would be better. A config that's a list of regexes would be the most flexible.  We could then add known KSQL specific patterns to this list, e.g. KSQL_INTERNAL_TOPIC_PREFIX.\nThe connect-xxxx topics could be in the default list, as KSQL integrates with Connect. However, users should be able to override this. (Maybe they want to process these in a KSQL cluster!).  Same for _schemas. However, _secrets and __consumer_timestamps seem to have little to do with KSQL OSS product.  Maybe they should be in something specific to CP deployment if we have a way of doing this, not a big thing just so long as its customisable.", "author": "big-andy-coates", "createdAt": "2020-01-16T11:13:52Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.util.Set;\n+\n+public final class ReservedInternalTopics {\n+  private static final Set<String> ALL_INTERNAL_TOPICS_PREFIXES = ImmutableSet.of(\n+      // Confluent\n+      \"_confluent\",\n+      \"__confluent\"\n+  );\n+\n+  private static final Set<String> ALL_INTERNAL_TOPICS_LITERALS = ImmutableSet.of(\n+      // Security\n+      \"_secrets\",\n+\n+      // Kafka\n+      \"__consumer_offsets\",\n+      \"__transaction_state\",\n+\n+      // Replicator\n+      \"__consumer_timestamps\",\n+\n+      // Schema Registry\n+      \"_schemas\",\n+\n+      // Connect\n+      \"connect-configs\",\n+      \"connect-offsets\",\n+      \"connect-status\",\n+      \"connect-statuses\"\n+  );", "originalCommit": "dab9bd646fb4ded44715e70721363507d832a109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3MjQyNQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367372425", "bodyText": "This you need to configs topic in here too.", "author": "big-andy-coates", "createdAt": "2020-01-16T11:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MzI0MQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368063241", "bodyText": "Done. I added a configuration system.internal.topics to allow users to set any topics they consider as internal. I did not use ksql.system.. because I wanted to differentiate between ksql internal topics and other system topics such as connect,sr,kafka,confluent.", "author": "spena", "createdAt": "2020-01-17T17:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 73c8800808..8c754b536f 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,53 +15,115 @@\n \n package io.confluent.ksql.util;\n \n-import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+import java.util.List;\n import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n public final class ReservedInternalTopics {\n-  private static final Set<String> ALL_INTERNAL_TOPICS_PREFIXES = ImmutableSet.of(\n-      // Confluent\n-      \"_confluent\",\n-      \"__confluent\"\n-  );\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n \n-  private static final Set<String> ALL_INTERNAL_TOPICS_LITERALS = ImmutableSet.of(\n-      // Security\n-      \"_secrets\",\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n \n-      // Kafka\n-      \"__consumer_offsets\",\n-      \"__transaction_state\",\n-\n-      // Replicator\n-      \"__consumer_timestamps\",\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n \n-      // Schema Registry\n-      \"_schemas\",\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n \n-      // Connect\n-      \"connect-configs\",\n-      \"connect-offsets\",\n-      \"connect-status\",\n-      \"connect-statuses\"\n-  );\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n \n-  public static boolean isInternalTopic(final String topicName) {\n-    return isLiteral(topicName) || isPrefix(topicName);\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n   }\n \n-  private static boolean isPrefix(final String topicName) {\n-    return ALL_INTERNAL_TOPICS_PREFIXES.stream()\n-        .filter(topicName::startsWith)\n-        .findAny()\n-        .isPresent();\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n+          .stream()\n+          .map(Pattern::compile)\n+          .collect(Collectors.toList());\n+    } catch (final Exception e) {\n+      final String message = \"Cannot get a list of system internal topics due to an invalid \" +\n+          \"configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());\n+      throw new KsqlException(message, e);\n+    }\n   }\n \n-  private static boolean isLiteral(final String topicName) {\n-    return ALL_INTERNAL_TOPICS_LITERALS.contains(topicName);\n+  public Set<String> filterInternalTopics(final Set<String> topicNames) {\n+    return topicNames.stream()\n+        .filter(t -> !isInternalTopic(t))\n+        .collect(Collectors.toSet());\n   }\n \n-  private ReservedInternalTopics() {\n+  public boolean isInternalTopic(final String topicName) {\n+    return topicName.startsWith(KSQL_INTERNAL_TOPIC_PREFIX) || systemInternalTopics.stream()\n+        .filter(p -> p.matcher(topicName).matches())\n+        .findAny()\n+        .isPresent();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTg4Mg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367361882", "bodyText": "Consider moving KSQL_INTERNAL_TOPIC_PREFIX into the new ReservedInternalTopics class too.  Just expose it as a constant or static method.", "author": "big-andy-coates", "createdAt": "2020-01-16T11:15:08Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -23,7 +23,6 @@ private KsqlConstants() {\n   public static final String CONFLUENT_AUTHOR = \"Confluent\";\n \n   public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n-  public static final String CONFLUENT_INTERNAL_TOPIC_PREFIX = \"__confluent\";", "originalCommit": "dab9bd646fb4ded44715e70721363507d832a109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MjM1OQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367362359", "bodyText": "Also, consider adding unit test to ensure anything with KSQL_INTERNAL_TOPIC_PREFIX prefix is seen as an internal topic!\nI know they share a common start... but only at the moment. This might change in the future.", "author": "big-andy-coates", "createdAt": "2020-01-16T11:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MzI5MQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368063291", "bodyText": "Done", "author": "spena", "createdAt": "2020-01-17T17:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java\nindex 6ec3f9bd61..0f3ce1aeee 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java\n\n@@ -22,8 +22,6 @@ public final class KsqlConstants {\n \n   public static final String CONFLUENT_AUTHOR = \"Confluent\";\n \n-  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n-\n   public static final String STREAMS_CHANGELOG_TOPIC_SUFFIX = \"-changelog\";\n   public static final String STREAMS_REPARTITION_TOPIC_SUFFIX = \"-repartition\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NDM5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367364396", "bodyText": "suggest moving into a getDataSource or getTarget method.", "author": "big-andy-coates", "createdAt": "2020-01-16T11:21:34Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -145,11 +147,28 @@ public void execute(\n       final ServiceContext serviceContext\n   ) {\n     final InsertValues insertValues = statement.getStatement();\n+    final MetaStore metaStore = executionContext.getMetaStore();\n+\n+    final DataSource<?> dataSource = metaStore.getSource(insertValues.getTarget());\n+    if (dataSource == null) {\n+      throw new KsqlException(\"Cannot insert values into an unknown stream/table: \"\n+          + insertValues.getTarget());\n+    }\n+\n+    if (dataSource.getKsqlTopic().getKeyFormat().isWindowed()) {\n+      throw new KsqlException(\"Cannot insert values into windowed stream/table!\");\n+    }\n+\n+    if (ReservedInternalTopics.isInternalTopic(dataSource.getKafkaTopicName())) {\n+      throw new KsqlException(\"Cannot insert values into the reserved internal topic: \"\n+          + dataSource.getKafkaTopicName());\n+    }", "originalCommit": "dab9bd646fb4ded44715e70721363507d832a109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MzM2NA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368063364", "bodyText": "Done", "author": "spena", "createdAt": "2020-01-17T17:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "chunk": "diff --git a/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java b/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\nindex 7365c5866b..63dbc30dd2 100644\n--- a/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\n+++ b/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\n\n@@ -148,25 +149,11 @@ public class InsertValuesExecutor {\n   ) {\n     final InsertValues insertValues = statement.getStatement();\n     final MetaStore metaStore = executionContext.getMetaStore();\n-\n-    final DataSource<?> dataSource = metaStore.getSource(insertValues.getTarget());\n-    if (dataSource == null) {\n-      throw new KsqlException(\"Cannot insert values into an unknown stream/table: \"\n-          + insertValues.getTarget());\n-    }\n-\n-    if (dataSource.getKsqlTopic().getKeyFormat().isWindowed()) {\n-      throw new KsqlException(\"Cannot insert values into windowed stream/table!\");\n-    }\n-\n-    if (ReservedInternalTopics.isInternalTopic(dataSource.getKafkaTopicName())) {\n-      throw new KsqlException(\"Cannot insert values into the reserved internal topic: \"\n-          + dataSource.getKafkaTopicName());\n-    }\n-\n     final KsqlConfig config = statement.getConfig()\n         .cloneWithPropertyOverwrite(statement.getOverrides());\n \n+    final DataSource<?> dataSource = getDataSource(config, metaStore, insertValues);\n+\n     final ProducerRecord<byte[], byte[]> record =\n         buildRecord(statement, metaStore, dataSource, serviceContext);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjM5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367366396", "bodyText": "When adding a new constructor param you should add a new equality group.\nThe pattern I use is to have one equality group per constructor param. The first one has two entries, as the second entry tests that two entries are the same if all params match. The other groups have one entry, with a single param changes. Hence for this class it would be:\n    new EqualsTester()\n        .addEqualityGroup(\n            new ListTopics(Optional.of(SOME_LOCATION), true, true),\n            new ListTopics(Optional.of(OTHER_LOCATION), true, true)  <-- tests `equals` returns true if all fields match.\n        )\n        .addEqualityGroup(\n            new ListTopics(Optional.of(SOME_LOCATION), false, true), <-- tests `equals` returns false if `showAll` differs\n        )\n       .addEqualityGroup(\n            new ListTopics(Optional.of(SOME_LOCATION), true, false), <-- tests `equals` returns false if `showExtended ` differs\n        )\n        .testEquals();", "author": "big-andy-coates", "createdAt": "2020-01-16T11:26:19Z", "path": "ksql-parser/src/test/java/io/confluent/ksql/parser/tree/ListTopicsTest.java", "diffHunk": "@@ -30,12 +30,12 @@ public void shouldImplementHashCodeAndEqualsProperty() {\n     // Note: At the moment location does not take part in equality testing\n     new EqualsTester()\n         .addEqualityGroup(\n-            new ListTopics(Optional.of(SOME_LOCATION), true),\n-            new ListTopics(Optional.of(OTHER_LOCATION), true)\n+            new ListTopics(Optional.of(SOME_LOCATION), true, true),\n+            new ListTopics(Optional.of(OTHER_LOCATION), true, true)\n         )\n         .addEqualityGroup(\n-            new ListTopics(Optional.of(SOME_LOCATION), false),\n-            new ListTopics(Optional.of(OTHER_LOCATION), false)\n+            new ListTopics(Optional.of(SOME_LOCATION), false, false),\n+            new ListTopics(Optional.of(OTHER_LOCATION), false,false)", "originalCommit": "dab9bd646fb4ded44715e70721363507d832a109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MzQwMQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368063401", "bodyText": "Done", "author": "spena", "createdAt": "2020-01-17T17:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "chunk": "diff --git a/ksql-parser/src/test/java/io/confluent/ksql/parser/tree/ListTopicsTest.java b/ksql-parser/src/test/java/io/confluent/ksql/parser/tree/ListTopicsTest.java\nindex 332e477f71..6b5badaa35 100644\n--- a/ksql-parser/src/test/java/io/confluent/ksql/parser/tree/ListTopicsTest.java\n+++ b/ksql-parser/src/test/java/io/confluent/ksql/parser/tree/ListTopicsTest.java\n\n@@ -34,8 +34,10 @@ public class ListTopicsTest {\n             new ListTopics(Optional.of(OTHER_LOCATION), true, true)\n         )\n         .addEqualityGroup(\n-            new ListTopics(Optional.of(SOME_LOCATION), false, false),\n-            new ListTopics(Optional.of(OTHER_LOCATION), false,false)\n+            new ListTopics(Optional.of(SOME_LOCATION), false, true)\n+        )\n+        .addEqualityGroup(\n+            new ListTopics(Optional.of(SOME_LOCATION), true,false)\n         )\n         .testEquals();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NzMyMg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367367322", "bodyText": "Consider:\nfinal Map<String, TopicDescription> kafkaTopicDescription = statement.getStatement().getShowAll()\n      ? client.describeTopics(client.listTopicNames());\n      : client.describeTopics(client.listNonInternalTopicNames());", "author": "big-andy-coates", "createdAt": "2020-01-16T11:28:26Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java", "diffHunk": "@@ -59,8 +59,12 @@ private ListTopicsExecutor() {\n   ) {\n     final KafkaTopicClient client = serviceContext.getTopicClient();\n \n-    final Map<String, TopicDescription> kafkaTopicDescriptions\n-        = client.describeTopics(client.listNonInternalTopicNames());\n+    final Map<String, TopicDescription> kafkaTopicDescriptions;\n+    if (statement.getStatement().getShowAll()) {\n+      kafkaTopicDescriptions = client.describeTopics(client.listTopicNames());\n+    } else {\n+      kafkaTopicDescriptions = client.describeTopics(client.listNonInternalTopicNames());\n+    }", "originalCommit": "dab9bd646fb4ded44715e70721363507d832a109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MzQ0Nw==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368063447", "bodyText": "Done", "author": "spena", "createdAt": "2020-01-17T17:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NzMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java\nindex 3c6511817e..8fd6513a12 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java\n\n@@ -58,16 +58,7 @@ public final class ListTopicsExecutor {\n       final ServiceContext serviceContext\n   ) {\n     final KafkaTopicClient client = serviceContext.getTopicClient();\n-\n-    final Map<String, TopicDescription> kafkaTopicDescriptions;\n-    if (statement.getStatement().getShowAll()) {\n-      kafkaTopicDescriptions = client.describeTopics(client.listTopicNames());\n-    } else {\n-      kafkaTopicDescriptions = client.describeTopics(client.listNonInternalTopicNames());\n-    }\n-\n-    final Map<String, TopicDescription> filteredDescriptions = new TreeMap<>(\n-        filterKsqlInternalTopics(kafkaTopicDescriptions, statement.getConfig()));\n+    final Map<String, TopicDescription> topicDescriptions = listTopics(client, statement);\n \n     if (statement.getStatement().getShowExtended()) {\n       final KafkaConsumerGroupClient consumerGroupClient\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2ODQxMg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r367368412", "bodyText": "consider taking CCC out of the name, given that's not OSS.", "author": "big-andy-coates", "createdAt": "2020-01-16T11:31:03Z", "path": "ksql-engine/src/test/java/io/confluent/ksql/services/KafkaTopicClientImplTest.java", "diffHunk": "@@ -104,9 +104,7 @@\n       \"default\",\n       \"query_CTAS_USERS_BY_CITY-KSTREAM-AGGREGATE\"\n           + \"-STATE-STORE-0000000006-changelog\");\n-  private static final String confluentInternalTopic =\n-      String.format(\"%s-%s\", KsqlConstants.CONFLUENT_INTERNAL_TOPIC_PREFIX,\n-          \"confluent-control-center\");\n+  private static final String confluentInternalTopic = \"_confluent-confluent-control-center\";", "originalCommit": "dab9bd646fb4ded44715e70721363507d832a109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MzUyMA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368063520", "bodyText": "Done", "author": "spena", "createdAt": "2020-01-17T18:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2ODQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNzE5Mw==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368617193", "bodyText": "confused. You say 'Done', but C3 is still in the name!", "author": "big-andy-coates", "createdAt": "2020-01-20T15:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2ODQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0MDIxOA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369140218", "bodyText": "mmm, I'm pretty sure I did change it to internalTopic (including the value), but somehow that change is not reflected here. I'm just thinking I perhaps did Ctrl-Z at some point and didn't notice I went back to the old one. Anyways, I did the correct change this time. Thanks for pointing it out.", "author": "spena", "createdAt": "2020-01-21T17:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2ODQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "chunk": "diff --git a/ksql-engine/src/test/java/io/confluent/ksql/services/KafkaTopicClientImplTest.java b/ksql-engine/src/test/java/io/confluent/ksql/services/KafkaTopicClientImplTest.java\nindex 6b7ccbe3ee..26d181169d 100644\n--- a/ksql-engine/src/test/java/io/confluent/ksql/services/KafkaTopicClientImplTest.java\n+++ b/ksql-engine/src/test/java/io/confluent/ksql/services/KafkaTopicClientImplTest.java\n\n@@ -95,12 +96,12 @@ public class KafkaTopicClientImplTest {\n   private static final String topicName2 = \"topic2\";\n   private static final String topicName3 = \"topic3\";\n   private static final String internalTopic1 = String.format(\"%s%s_%s\",\n-      KsqlConstants.KSQL_INTERNAL_TOPIC_PREFIX,\n+      ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX,\n       \"default\",\n       \"query_CTAS_USERS_BY_CITY-KSTREAM-AGGREGATE\"\n           + \"-STATE-STORE-0000000006-repartition\");\n   private static final String internalTopic2 = String.format(\"%s%s_%s\",\n-      KsqlConstants.KSQL_INTERNAL_TOPIC_PREFIX,\n+      ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX,\n       \"default\",\n       \"query_CTAS_USERS_BY_CITY-KSTREAM-AGGREGATE\"\n           + \"-STATE-STORE-0000000006-changelog\");\n"}}, {"oid": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "url": "https://github.com/confluentinc/ksql/commit/284ace51d79637b7bf82e8e34ab7c738b8885ea5", "message": "feat: do not allow writing to the processing log topic", "committedDate": "2020-01-17T17:55:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjQ1Mg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368262452", "bodyText": "This ignores property overrides associated with the request, right? I'm wondering about the situation where a user has a valid reason to INSERT INTO an topic marked as internal by default, issues the request and sees an error, and now wants to override the SYSTEM_INTERNAL_TOPICS_CONFIG config to enable their use case. If this code ignores the statement override (which I believe it does), then they can't achieve the override without setting the config at a server level and restarting the KSQL server, which feels unnecessarily heavy-weight.", "author": "vcrfxia", "createdAt": "2020-01-19T03:17:42Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java", "diffHunk": "@@ -89,6 +95,14 @@ public DistributingExecutor(\n         .apply(executionContext, securityContext.getServiceContext())\n         .inject(statement);\n \n+    if (injected.getStatement() instanceof InsertInto) {\n+      throwIfInsertOnInternalTopic(\n+          statement.getConfig(),", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxOTIzNQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368619235", "bodyText": "I don't think we should allow users to override this setting at the console.\n\nIf it is an actual KSQL topic, e.g. the command topic, then we really don't want to allow them to produce to it!\nIf it is a topic the admin of the system has configured, via the new config, to be internal/read-only, then again, we should IMHO allow the CLI user to override this.", "author": "big-andy-coates", "createdAt": "2020-01-20T15:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NzY3Mw==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369147673", "bodyText": "Agree with @big-andy-coates, we should not let users override the setting. If the KSQL admin decided to hide and make those topics read-only, then is up to the admin to change the setting.", "author": "spena", "createdAt": "2020-01-21T17:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyNzQ3MQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369327471", "bodyText": "That's fine, but can we be more explicit about it and add the property to https://github.com/confluentinc/ksql/blob/master/ksql-common/src/main/java/io/confluent/ksql/config/ImmutableProperties.java in that case? The current implementation of this PR is inconsistent in that it does not allow overrides for INSERT INTO but it does for INSERT VALUES.", "author": "vcrfxia", "createdAt": "2020-01-22T01:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\nindex 06022043f8..82f4421197 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n\n@@ -96,8 +100,7 @@ public class DistributingExecutor {\n         .inject(statement);\n \n     if (injected.getStatement() instanceof InsertInto) {\n-      throwIfInsertOnInternalTopic(\n-          statement.getConfig(),\n+      throwIfInsertOnReadOnlyTopic(\n           executionContext.getMetaStore(),\n           (InsertInto)injected.getStatement()\n       );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwMjEzMQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368602131", "bodyText": "I would still prefix this with ksql. as its a KSQL property. It doesn't really matter what system they're internal topics form.\nAlternatively, you could call it ksql.read.only.topics.   The issue here is that the config isn't just controlling if a topic is read-only or not, but if it shows up in the Show topics output.\nCan I make another suggestion?  How about we split this into two settings?\n\nksql.read.only.topics: controls which topics are read-only\nksql.hidden.topics: controls the topics which are hidden from show topics by default\n\nEach setting is a list of regex patterns to match against.\nThis may give us a more flexible solution anyway.  Just a thought.", "author": "big-andy-coates", "createdAt": "2020-01-20T15:21:52Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -202,6 +202,16 @@\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n+  public static final String SYSTEM_INTERNAL_TOPICS_CONFIG = \"system.internal.topics\";", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4OTY1OA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369289658", "bodyText": "Yes, I like those configs too. I added the following ones:\n\nksql.internal.hidden.topics\nksql.internal.readonly.topics", "author": "spena", "createdAt": "2020-01-21T22:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwMjEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex c2bd4ba203..09ad44cc7e 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -202,15 +202,23 @@ public class KsqlConfig extends AbstractConfig {\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n-  public static final String SYSTEM_INTERNAL_TOPICS_CONFIG = \"system.internal.topics\";\n-  public static final String SYSTEM_INTERNAL_TOPICS_DEFAULT = \"_confluent.*,__confluent.*,_schemas,\"\n-      + \"__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,\"\n-      + \"connect-statuses\";\n-  public static final String SYSTEM_INTERNAL_TOPICS_DOC = \"List of topics considered part of \"\n-      + \"system internals which KSQL should not allow users to write data on them. This list will \"\n-      + \"not be displayed from the SHOW TOPICS command unless SHOW ALL TOPICS is used. The list \"\n-      + \"is separated by comma and may use regular expressions based on Java Patterns \"\n-      + \"(i.e. _confluent.* accepts any topic that starts with _confluent prefix).\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+      + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n+      + \"connect-status,connect-statuses\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DOC = \"List of topics that will not be \"\n+      + \"visible when running the SHOW TOPICS command unless SHOW ALL TOPICS is used. This list \"\n+      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n+      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n+\n+  public static final String KSQL_INTERNAL_READONLY_TOPICS_CONFIG = \"ksql.internal.readonly.topics\";\n+  public static final String KSQL_INTERNAL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+      + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n+      + \"connect-status,connect-statuses\";\n+  public static final String KSQL_INTERNAL_READONLY_TOPICS_DOC = \"List of topics that KSQL will \"\n+      + \" handle as read-only. These topics cannot be modified by any KSQL command. This list \"\n+      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n+      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n \n   private enum ConfigGeneration {\n     LEGACY,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNjExMg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368606112", "bodyText": "Rather than compiling (and then evaluating) each regex separately, just compile them as a single Regex!\nthis.internalPattern = Pattern.compile(\n      ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n          .stream()\n          .collect(Collectors.joining('|')\n     );\ni.e. just OR all the patterns together with |.\nYou can also add in KSQL internal topics with:\nthis.internalPattern = Pattern.compile(\n      Streams.concat(\n          Stream.of(KSQL_INTERNAL_TOPIC_PREFIX + \".*\"),\n          ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG).stream()\n      )\n      .collect(Collectors.joining('|')\n);", "author": "big-andy-coates", "createdAt": "2020-01-20T15:29:44Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4OTc4OA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369289788", "bodyText": "Thanks for the tip. Done.", "author": "spena", "createdAt": "2020-01-21T23:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNjExMg=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 8c754b536f..21e5ed61e1 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,14 +15,15 @@\n \n package io.confluent.ksql.util;\n \n+import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class ReservedInternalTopics {\n   private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNzE0Ng==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368607146", "bodyText": "This doesn't consider the processing log as an internal topic, which is a shame, as it is...\nI called this out before: #4322 (comment)", "author": "big-andy-coates", "createdAt": "2020-01-20T15:31:46Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n+          .stream()\n+          .map(Pattern::compile)\n+          .collect(Collectors.toList());\n+    } catch (final Exception e) {\n+      final String message = \"Cannot get a list of system internal topics due to an invalid \" +\n+          \"configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());\n+      throw new KsqlException(message, e);\n+    }\n+  }\n+\n+  public Set<String> filterInternalTopics(final Set<String> topicNames) {\n+    return topicNames.stream()\n+        .filter(t -> !isInternalTopic(t))\n+        .collect(Collectors.toSet());\n+  }\n+\n+  public boolean isInternalTopic(final String topicName) {\n+    return topicName.startsWith(KSQL_INTERNAL_TOPIC_PREFIX) || systemInternalTopics.stream()\n+        .filter(p -> p.matcher(topicName).matches())\n+        .findAny()\n+        .isPresent();\n+  }", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MDE0OA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369290148", "bodyText": "I splitted the method into isHIdden() and isReadOnly. The processing log will be part of the isReadOnly list.", "author": "spena", "createdAt": "2020-01-21T23:00:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNzE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 8c754b536f..21e5ed61e1 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,14 +15,15 @@\n \n package io.confluent.ksql.util;\n \n+import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class ReservedInternalTopics {\n   private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwODcxMA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368608710", "bodyText": "Rather than having topicName.startsWith(KSQL_INTERNAL_TOPIC_PREFIX), you could just add KSQL_INTERNAL_TOPIC_PREFIX + \".* as one of the patterns to match in systemInternalTopics.", "author": "big-andy-coates", "createdAt": "2020-01-20T15:34:52Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n+          .stream()\n+          .map(Pattern::compile)\n+          .collect(Collectors.toList());\n+    } catch (final Exception e) {\n+      final String message = \"Cannot get a list of system internal topics due to an invalid \" +\n+          \"configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());\n+      throw new KsqlException(message, e);\n+    }\n+  }\n+\n+  public Set<String> filterInternalTopics(final Set<String> topicNames) {\n+    return topicNames.stream()\n+        .filter(t -> !isInternalTopic(t))\n+        .collect(Collectors.toSet());\n+  }\n+\n+  public boolean isInternalTopic(final String topicName) {\n+    return topicName.startsWith(KSQL_INTERNAL_TOPIC_PREFIX) || systemInternalTopics.stream()", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MDIyMw==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369290223", "bodyText": "Done.", "author": "spena", "createdAt": "2020-01-21T23:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwODcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 8c754b536f..21e5ed61e1 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,14 +15,15 @@\n \n package io.confluent.ksql.util;\n \n+import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class ReservedInternalTopics {\n   private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwOTg1Ng==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368609856", "bodyText": "Generally, avoid \"log and throw\". It's an anti-pattern, which results in the same error resulting in multiple errors being logged for the same cause.  Leave it up to the calling code to determine if it wants to log the error, ignore it or throw it up the stack.", "author": "big-andy-coates", "createdAt": "2020-01-20T15:37:06Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n+          .stream()\n+          .map(Pattern::compile)\n+          .collect(Collectors.toList());\n+    } catch (final Exception e) {\n+      final String message = \"Cannot get a list of system internal topics due to an invalid \" +\n+          \"configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5NTIwMg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369195202", "bodyText": "I thought that initially, but while I was running some tests, I found the exception was only displayed on the client side. The server log didn't have any error. Being this a server configuration, I wanted to warn the KSQL server admin about this error too so they can fix it instead of relying on the client to send the error to the server admin.", "author": "spena", "createdAt": "2020-01-21T19:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MDU2NA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369290564", "bodyText": "I didn't change this in the updated PR because of above reasons. Let me know what you think.", "author": "spena", "createdAt": "2020-01-21T23:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MzAxNQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369483015", "bodyText": "Log and throw really is a anti pattern. Better to work out why the exception was not being logged on startup, as that omission could be causing other failures to not be logged, i.e. its a bug that needs fixing.", "author": "big-andy-coates", "createdAt": "2020-01-22T10:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwOTg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 8c754b536f..21e5ed61e1 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,14 +15,15 @@\n \n package io.confluent.ksql.util;\n \n+import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class ReservedInternalTopics {\n   private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMjk1MQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368612951", "bodyText": "Can you add a similar test for the processing logger topic?", "author": "big-andy-coates", "createdAt": "2020-01-20T15:43:19Z", "path": "ksql-common/src/test/java/io/confluent/ksql/util/ReservedInternalTopicsTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.PatternSyntaxException;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class ReservedInternalTopicsTest {\n+  @Rule\n+  public final ExpectedException expectedException = ExpectedException.none();\n+\n+  private ReservedInternalTopics internalTopics;\n+  private KsqlConfig ksqlConfig;\n+\n+  @Before\n+  public void setUp() {\n+    ksqlConfig = new KsqlConfig(ImmutableMap.of(\n+        KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG, \"prefix_.*,literal,.*_suffix\"\n+    ));\n+\n+    internalTopics = new ReservedInternalTopics(ksqlConfig);\n+  }\n+\n+\n+  @Test\n+  public void shouldReturnTrueOnAllInternalTopics() {\n+    // Given\n+    final List<String> topicNames = ImmutableList.of(\n+        \"prefix_\", \"_suffix\", \"prefix_topic\", \"topic_suffix\", \"literal\"\n+    );\n+\n+    topicNames.forEach(topic -> {\n+      // When\n+      final boolean isReserved = internalTopics.isInternalTopic(topic);\n+\n+      // Then\n+      assertThat(\"Should return true on internal topic: \" + topic,\n+          isReserved, is(true));\n+    });\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseOnNonInternalTopics() {\n+    // Given\n+    final List<String> topicNames = ImmutableList.of(\n+        \"topic_prefix_\", \"_suffix_topic\"\n+    );\n+\n+    // Given\n+    topicNames.forEach(topic -> {\n+      // When\n+      final boolean isReserved = internalTopics.isInternalTopic(topic);\n+\n+      // Then\n+      assertThat(\"Should return false on non-internal topic: \" + topic,\n+          isReserved, is(false));\n+    });\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueOnKsqlInternalTopics() {\n+    // Given\n+    final String ksqlInternalTopic = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX + \"_test\";\n+\n+    // When\n+    final boolean isReserved =\n+        internalTopics.isInternalTopic(ksqlInternalTopic);\n+\n+    // Then\n+    assertThat(isReserved, is(true));\n+  }\n+\n+  @Test\n+  public void shouldFilterAllInternalTopics() {\n+    // Given\n+    final Set<String> topics = ImmutableSet.of(\n+        \"prefix_name\", \"literal\", \"tt\", \"name1\", \"suffix\", \"p_suffix\"\n+    );\n+\n+    // When\n+    final Set<String> filteredTopics = internalTopics.filterInternalTopics(topics);\n+\n+    // Then\n+    assertThat(filteredTopics, is(ImmutableSet.of(\"tt\", \"name1\", \"suffix\")));\n+  }\n+\n+  @Test\n+  public void shouldThrowWhenInvalidSystemTopicsListIsUsed() {\n+    // Given\n+    final KsqlConfig givenConfig = new KsqlConfig(ImmutableMap.of(\n+        KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG, \"*_suffix\"\n+    ));\n+\n+    // Then\n+    expectedException.expect(KsqlException.class);\n+    expectedException.expectMessage(\"Cannot get a list of system internal topics due to\" +\n+        \" an invalid configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\");\n+\n+    // When\n+    new ReservedInternalTopics(givenConfig);\n+  }\n+\n+  @Test\n+  public void shouldReturnCommandTopic() {\n+    // Given/When\n+    final String commandTopic = ReservedInternalTopics.commandTopic(ksqlConfig);\n+\n+    // Then\n+    assertThat(\"_confluent-ksql-default__command_topic\", is(commandTopic));\n+  }\n+\n+  @Test\n+  public void shouldReturnConfigsTopic() {", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MDYwNQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369290605", "bodyText": "Done", "author": "spena", "createdAt": "2020-01-21T23:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMjk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/test/java/io/confluent/ksql/util/ReservedInternalTopicsTest.java b/ksql-common/src/test/java/io/confluent/ksql/util/ReservedInternalTopicsTest.java\nindex 0046a2550b..940679dd40 100644\n--- a/ksql-common/src/test/java/io/confluent/ksql/util/ReservedInternalTopicsTest.java\n+++ b/ksql-common/src/test/java/io/confluent/ksql/util/ReservedInternalTopicsTest.java\n\n@@ -20,9 +20,9 @@ import com.google.common.collect.ImmutableMap;\n \n import java.util.List;\n import java.util.Set;\n-import java.util.regex.PatternSyntaxException;\n \n import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDM3Mg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368614372", "bodyText": "Consider either injecting internalTopics in the constructor, or the config(s) needed to build it.\nTwo reasons:\n\nwe don't want the list of internal topics to be affected by any property overrides set in the CLI. Having it provided in the constructor means the config can never contain any overrides.\nit avoids compiling the regular expressions on each request.", "author": "big-andy-coates", "createdAt": "2020-01-20T15:46:18Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -192,11 +189,41 @@ public void execute(\n       throw new KsqlException(\"Cannot insert values into windowed stream/table!\");\n     }\n \n+    final ReservedInternalTopics internalTopics = new ReservedInternalTopics(ksqlConfig);", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MTI0MQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369291241", "bodyText": "I just created the internal topics in the DistributorExecutor constructor for now. The InsertValuesExecutor and ListTopicsExecutor will require more changes in several files to pass the KsqlConfig. I'd like to create a follow-up PR for that change only to avoid making this PR bigger. is that ok?", "author": "spena", "createdAt": "2020-01-21T23:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NjU5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369486596", "bodyText": "Don't mind. I don't think this PR is too large yet; adding a few more files where a param is injected and passed through won't, IMHO, make this PR unwieldy. Up to you.\nOn the flip side, I don't think we should merge this with the change in how you create the ProcessingLoggerConfig, which may necessitate passing more things around anyway.\nIMHO, wiring this up is part of this change. But I'll leave it up to you.", "author": "big-andy-coates", "createdAt": "2020-01-22T10:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java b/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\nindex 63dbc30dd2..31dfb7a03f 100644\n--- a/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\n+++ b/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\n\n@@ -190,17 +189,8 @@ public class InsertValuesExecutor {\n     }\n \n     final ReservedInternalTopics internalTopics = new ReservedInternalTopics(ksqlConfig);\n-    if (internalTopics.isInternalTopic(dataSource.getKafkaTopicName())) {\n-      throw new KsqlException(\"Cannot insert values into the reserved internal topic: \"\n-          + dataSource.getKafkaTopicName());\n-    }\n-\n-    final ProcessingLogConfig processingLogConfig =\n-        new ProcessingLogConfig(ksqlConfig.getAllConfigPropsWithSecretsObfuscated());\n-    final String processingLogTopic =\n-        ReservedInternalTopics.processingLogTopic(processingLogConfig, ksqlConfig);\n-    if (dataSource.getKafkaTopicName().equals(processingLogTopic)) {\n-      throw new KsqlException(\"Cannot insert into the processing log topic: \"\n+    if (internalTopics.isReadOnly(dataSource.getKafkaTopicName())) {\n+      throw new KsqlException(\"Cannot insert values into read-only topic: \"\n           + dataSource.getKafkaTopicName());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDkzMw==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368614933", "bodyText": "Move this into ReservedInternalTopics rather than having it here.  Then other places that make use of isInternalTopic can benefit from this logic too.\nAlso, are we sure it's correct to build the ProcessingLogConfig like this?  This is not how its currently built by KsqlRestApplication or StandaloneExecutorFactory.  I think it would be cleaner & safer to inject the actual ProcessingLogConfig, rather than constructing another.   If it were me I would change the ReservedInternalTopics constructor to also require a ProcessingLogConfig, and then inject the ReservedInternalTopics instance into InsertValuesExecutor constructor and anywhere else its needed.  In general, injecting things where they are needed is a better pattern to (re)creating them each place they are needed.", "author": "big-andy-coates", "createdAt": "2020-01-20T15:47:25Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -192,11 +189,41 @@ public void execute(\n       throw new KsqlException(\"Cannot insert values into windowed stream/table!\");\n     }\n \n+    final ReservedInternalTopics internalTopics = new ReservedInternalTopics(ksqlConfig);\n+    if (internalTopics.isInternalTopic(dataSource.getKafkaTopicName())) {\n+      throw new KsqlException(\"Cannot insert values into the reserved internal topic: \"\n+          + dataSource.getKafkaTopicName());\n+    }\n+\n+    final ProcessingLogConfig processingLogConfig =\n+        new ProcessingLogConfig(ksqlConfig.getAllConfigPropsWithSecretsObfuscated());\n+    final String processingLogTopic =\n+        ReservedInternalTopics.processingLogTopic(processingLogConfig, ksqlConfig);\n+    if (dataSource.getKafkaTopicName().equals(processingLogTopic)) {\n+      throw new KsqlException(\"Cannot insert into the processing log topic: \"\n+          + dataSource.getKafkaTopicName());\n+    }", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MTM0Mg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369291342", "bodyText": "Done.", "author": "spena", "createdAt": "2020-01-21T23:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNDkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java b/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\nindex 63dbc30dd2..31dfb7a03f 100644\n--- a/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\n+++ b/ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java\n\n@@ -190,17 +189,8 @@ public class InsertValuesExecutor {\n     }\n \n     final ReservedInternalTopics internalTopics = new ReservedInternalTopics(ksqlConfig);\n-    if (internalTopics.isInternalTopic(dataSource.getKafkaTopicName())) {\n-      throw new KsqlException(\"Cannot insert values into the reserved internal topic: \"\n-          + dataSource.getKafkaTopicName());\n-    }\n-\n-    final ProcessingLogConfig processingLogConfig =\n-        new ProcessingLogConfig(ksqlConfig.getAllConfigPropsWithSecretsObfuscated());\n-    final String processingLogTopic =\n-        ReservedInternalTopics.processingLogTopic(processingLogConfig, ksqlConfig);\n-    if (dataSource.getKafkaTopicName().equals(processingLogTopic)) {\n-      throw new KsqlException(\"Cannot insert into the processing log topic: \"\n+    if (internalTopics.isReadOnly(dataSource.getKafkaTopicName())) {\n+      throw new KsqlException(\"Cannot insert values into read-only topic: \"\n           + dataSource.getKafkaTopicName());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxOTYyOQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368619629", "bodyText": "duplicate code - this handling of the processing log shoudl be moved into ReservedInternalTopics.", "author": "big-andy-coates", "createdAt": "2020-01-20T15:56:33Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java", "diffHunk": "@@ -159,4 +173,31 @@ private void checkAuthorization(\n       throw new KsqlServerException(\"The KSQL server is not permitted to execute the command\", e);\n     }\n   }\n+\n+  private void throwIfInsertOnInternalTopic(\n+      final KsqlConfig ksqlConfig,\n+      final MetaStore metaStore,\n+      final InsertInto insertInto\n+  ) {\n+    final DataSource<?> dataSource = metaStore.getSource(insertInto.getTarget());\n+    if (dataSource == null) {\n+      throw new KsqlException(\"Cannot insert into an unknown stream/table: \"\n+          + insertInto.getTarget());\n+    }\n+\n+    final ReservedInternalTopics internalTopics = new ReservedInternalTopics(ksqlConfig);\n+    if (internalTopics.isInternalTopic(dataSource.getKafkaTopicName())) {\n+      throw new KsqlException(\"Cannot insert into the reserved internal topic: \"\n+          + dataSource.getKafkaTopicName());\n+    }\n+\n+    final ProcessingLogConfig processingLogConfig =\n+        new ProcessingLogConfig(ksqlConfig.getAllConfigPropsWithSecretsObfuscated());\n+    final String processingLogTopic =\n+        ReservedInternalTopics.processingLogTopic(processingLogConfig, ksqlConfig);\n+    if (dataSource.getKafkaTopicName().equals(processingLogTopic)) {\n+      throw new KsqlException(\"Cannot insert into the processing log topic: \"\n+          + dataSource.getKafkaTopicName());\n+    }", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MTQwNQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369291405", "bodyText": "Done", "author": "spena", "createdAt": "2020-01-21T23:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxOTYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\nindex 06022043f8..82f4421197 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n\n@@ -174,8 +177,7 @@ public class DistributingExecutor {\n     }\n   }\n \n-  private void throwIfInsertOnInternalTopic(\n-      final KsqlConfig ksqlConfig,\n+  private void throwIfInsertOnReadOnlyTopic(\n       final MetaStore metaStore,\n       final InsertInto insertInto\n   ) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDU4MQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368620581", "bodyText": "Consider renaming to make it more clear what this does.  Does it filter out internal names, or does it filter leaving only internal names?  Maybe:\n  public Set<String> removeInternalTopics(final Set<String> topicNames) {\n\nOr\n  public Set<String> filterOutInternalTopics(final Set<String> topicNames) {", "author": "big-andy-coates", "createdAt": "2020-01-20T15:58:12Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n+          .stream()\n+          .map(Pattern::compile)\n+          .collect(Collectors.toList());\n+    } catch (final Exception e) {\n+      final String message = \"Cannot get a list of system internal topics due to an invalid \" +\n+          \"configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());\n+      throw new KsqlException(message, e);\n+    }\n+  }\n+\n+  public Set<String> filterInternalTopics(final Set<String> topicNames) {", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MTUwMA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369291500", "bodyText": "Done. Changed to removeHiddenTopics", "author": "spena", "createdAt": "2020-01-21T23:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 8c754b536f..21e5ed61e1 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,14 +15,15 @@\n \n package io.confluent.ksql.util;\n \n+import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class ReservedInternalTopics {\n   private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDU5Mg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368620592", "bodyText": "Consider renaming to make it more clear what this does.  Does it filter out internal names, or does it filter leaving only internal names?  Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Set<String> filterInternalTopics(final Set<String> topicNames) {\n          \n          \n            \n              public Set<String> removeInternalTopics(final Set<String> topicNames) {\n          \n      \n    \n    \n  \n\nOr\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Set<String> filterInternalTopics(final Set<String> topicNames) {\n          \n          \n            \n              public Set<String> filterOutInternalTopics(final Set<String> topicNames) {", "author": "big-andy-coates", "createdAt": "2020-01-20T15:58:14Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n+          .stream()\n+          .map(Pattern::compile)\n+          .collect(Collectors.toList());\n+    } catch (final Exception e) {\n+      final String message = \"Cannot get a list of system internal topics due to an invalid \" +\n+          \"configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());\n+      throw new KsqlException(message, e);\n+    }\n+  }\n+\n+  public Set<String> filterInternalTopics(final Set<String> topicNames) {", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MTU2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369291561", "bodyText": "Done. Changed to removeHiddenTopics", "author": "spena", "createdAt": "2020-01-21T23:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDU5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 8c754b536f..21e5ed61e1 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,14 +15,15 @@\n \n package io.confluent.ksql.util;\n \n+import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class ReservedInternalTopics {\n   private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDYxOA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368620618", "bodyText": "Consider renaming to make it more clear what this does.  Does it filter out internal names, or does it filter leaving only internal names?  Maybe:\n  public Set<String> removeInternalTopics(final Set<String> topicNames) {\n\nOr\n  public Set<String> filterOutInternalTopics(final Set<String> topicNames) {", "author": "big-andy-coates", "createdAt": "2020-01-20T15:58:16Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final List<Pattern> systemInternalTopics;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    try {\n+      this.systemInternalTopics = ksqlConfig.getList(KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG)\n+          .stream()\n+          .map(Pattern::compile)\n+          .collect(Collectors.toList());\n+    } catch (final Exception e) {\n+      final String message = \"Cannot get a list of system internal topics due to an invalid \" +\n+          \"configuration in '\" + KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());\n+      throw new KsqlException(message, e);\n+    }\n+  }\n+\n+  public Set<String> filterInternalTopics(final Set<String> topicNames) {", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MTYwMg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369291602", "bodyText": "Done. Changed to removeHiddenTopics", "author": "spena", "createdAt": "2020-01-21T23:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 8c754b536f..21e5ed61e1 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -15,14 +15,15 @@\n \n package io.confluent.ksql.util;\n \n+import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class ReservedInternalTopics {\n   private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDk5OQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r368620999", "bodyText": "Why TreeMap?", "author": "big-andy-coates", "createdAt": "2020-01-20T15:58:59Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java", "diffHunk": "@@ -58,35 +58,45 @@ private ListTopicsExecutor() {\n       final ServiceContext serviceContext\n   ) {\n     final KafkaTopicClient client = serviceContext.getTopicClient();\n-\n-    final Map<String, TopicDescription> kafkaTopicDescriptions\n-        = client.describeTopics(client.listNonInternalTopicNames());\n-\n-    final Map<String, TopicDescription> filteredDescriptions = new TreeMap<>(\n-        filterKsqlInternalTopics(kafkaTopicDescriptions, statement.getConfig()));\n+    final Map<String, TopicDescription> topicDescriptions = listTopics(client, statement);\n \n     if (statement.getStatement().getShowExtended()) {\n       final KafkaConsumerGroupClient consumerGroupClient\n           = new KafkaConsumerGroupClientImpl(serviceContext.getAdminClient());\n       final Map<String, List<Integer>> topicConsumersAndGroupCount\n           = getTopicConsumerAndGroupCounts(consumerGroupClient);\n \n-      final List<KafkaTopicInfoExtended> topicInfoExtendedList = filteredDescriptions.values()\n+      final List<KafkaTopicInfoExtended> topicInfoExtendedList = topicDescriptions.values()\n           .stream().map(desc ->\n               topicDescriptionToTopicInfoExtended(desc, topicConsumersAndGroupCount))\n           .collect(Collectors.toList());\n \n       return Optional.of(\n           new KafkaTopicsListExtended(statement.getStatementText(), topicInfoExtendedList));\n     } else {\n-      final List<KafkaTopicInfo> topicInfoList = filteredDescriptions.values()\n+      final List<KafkaTopicInfo> topicInfoList = topicDescriptions.values()\n           .stream().map(desc -> topicDescriptionToTopicInfo(desc))\n           .collect(Collectors.toList());\n \n       return Optional.of(new KafkaTopicsList(statement.getStatementText(), topicInfoList));\n     }\n   }\n \n+  private static Map<String, TopicDescription> listTopics(\n+      final KafkaTopicClient topicClient,\n+      final ConfiguredStatement<ListTopics> statement\n+  ) {\n+    final ReservedInternalTopics internalTopics = new ReservedInternalTopics(statement.getConfig());\n+\n+    final Set<String> topics = statement.getStatement().getShowAll()\n+        ? topicClient.listTopicNames()\n+        : internalTopics.filterInternalTopics(topicClient.listTopicNames());\n+\n+    return new TreeMap<>(", "originalCommit": "284ace51d79637b7bf82e8e34ab7c738b8885ea5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwMjY2OA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369202668", "bodyText": "Not sure why. I just copied as it was used before the PR. See https://github.com/confluentinc/ksql/blob/master/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java#L66", "author": "spena", "createdAt": "2020-01-21T19:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java\nindex 8fd6513a12..93e01b18e6 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListTopicsExecutor.java\n\n@@ -90,7 +90,7 @@ public final class ListTopicsExecutor {\n \n     final Set<String> topics = statement.getStatement().getShowAll()\n         ? topicClient.listTopicNames()\n-        : internalTopics.filterInternalTopics(topicClient.listTopicNames());\n+        : internalTopics.removeHiddenTopics(topicClient.listTopicNames());\n \n     return new TreeMap<>(\n         filterKsqlInternalTopics(topicClient.describeTopics(topics), statement.getConfig())\n"}}, {"oid": "11f97a145ca52f00983b49c57195ceaf6b142d80", "url": "https://github.com/confluentinc/ksql/commit/11f97a145ca52f00983b49c57195ceaf6b142d80", "message": "fix: address review feedback from Andy and Jim", "committedDate": "2020-01-21T22:57:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2NjMzOA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369466338", "bodyText": "As above, I'd go with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n          \n          \n            \n              public static final String KSQL_HIDDEN_TOPICS_CONFIG = \"ksql.hidden.topics\";", "author": "big-andy-coates", "createdAt": "2020-01-22T10:02:39Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -202,6 +202,24 @@\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex 09ad44cc7e..4de1aac25c 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -202,23 +204,35 @@ public class KsqlConfig extends AbstractConfig {\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+  public static final String KSQL_HIDDEN_TOPICS_CONFIG = \"ksql.hidden.topics\";\n+  public static final String KSQL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n       + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n       + \"connect-status,connect-statuses\";\n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DOC = \"List of topics that will not be \"\n-      + \"visible when running the SHOW TOPICS command unless SHOW ALL TOPICS is used. This list \"\n-      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n-      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n-\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_CONFIG = \"ksql.internal.readonly.topics\";\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+  public static final String KSQL_HIDDEN_TOPICS_DOC = \"Comma-separated list of topics that will \"\n+      + \"be hidden. Entries in the list may be literal topic names or \"\n+      + \"[Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/\"\n+      + \"Pattern.html). \"\n+      + \"For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\"\n+      + \"\\nHidden topics will not visible when running the `SHOW TOPICS` command unless \"\n+      + \"`SHOW ALL TOPICS` is used.\"\n+      + \"\\nThe default value hides known system topics from Kafka and Confluent products.\"\n+      + \"\\nKSQL also marks its own internal topics as hidden. This is not controlled by this \"\n+      + \"config.\";\n+\n+  public static final String KSQL_READONLY_TOPICS_CONFIG = \"ksql.readonly.topics\";\n+  public static final String KSQL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n       + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n       + \"connect-status,connect-statuses\";\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_DOC = \"List of topics that KSQL will \"\n-      + \" handle as read-only. These topics cannot be modified by any KSQL command. This list \"\n-      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n-      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n+  public static final String KSQL_READONLY_TOPICS_DOC = \"Comma-separated list of topics that \"\n+      + \"should be marked as read-only. Entries in the list may be literal topic names or \"\n+      + \"[Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/\"\n+      + \"Pattern.html). \"\n+      + \"For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\"\n+      + \"\\nRead-only topics cannot be modified by any KSQL command.\"\n+      + \"\\nThe default value marks known system topics from Kafka and Confluent products as \"\n+      + \"read-only.\"\n+      + \"\\nKSQL also marks its own internal topics as read-only. This is not controlled by this \"\n+      + \"config.\";\n \n   private enum ConfigGeneration {\n     LEGACY,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2NjYzOQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369466639", "bodyText": "Inline with the config for hidden topics; I think the following is clearer:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String KSQL_INTERNAL_READONLY_TOPICS_CONFIG = \"ksql.internal.readonly.topics\";\n          \n          \n            \n              public static final String KSQL_READONLY_TOPICS_CONFIG = \"ksql.readonly.topics\";", "author": "big-andy-coates", "createdAt": "2020-01-22T10:03:22Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -202,6 +202,24 @@\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+      + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n+      + \"connect-status,connect-statuses\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DOC = \"List of topics that will not be \"\n+      + \"visible when running the SHOW TOPICS command unless SHOW ALL TOPICS is used. This list \"\n+      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n+      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n+\n+  public static final String KSQL_INTERNAL_READONLY_TOPICS_CONFIG = \"ksql.internal.readonly.topics\";", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex 09ad44cc7e..4de1aac25c 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -202,23 +204,35 @@ public class KsqlConfig extends AbstractConfig {\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+  public static final String KSQL_HIDDEN_TOPICS_CONFIG = \"ksql.hidden.topics\";\n+  public static final String KSQL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n       + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n       + \"connect-status,connect-statuses\";\n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DOC = \"List of topics that will not be \"\n-      + \"visible when running the SHOW TOPICS command unless SHOW ALL TOPICS is used. This list \"\n-      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n-      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n-\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_CONFIG = \"ksql.internal.readonly.topics\";\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+  public static final String KSQL_HIDDEN_TOPICS_DOC = \"Comma-separated list of topics that will \"\n+      + \"be hidden. Entries in the list may be literal topic names or \"\n+      + \"[Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/\"\n+      + \"Pattern.html). \"\n+      + \"For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\"\n+      + \"\\nHidden topics will not visible when running the `SHOW TOPICS` command unless \"\n+      + \"`SHOW ALL TOPICS` is used.\"\n+      + \"\\nThe default value hides known system topics from Kafka and Confluent products.\"\n+      + \"\\nKSQL also marks its own internal topics as hidden. This is not controlled by this \"\n+      + \"config.\";\n+\n+  public static final String KSQL_READONLY_TOPICS_CONFIG = \"ksql.readonly.topics\";\n+  public static final String KSQL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n       + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n       + \"connect-status,connect-statuses\";\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_DOC = \"List of topics that KSQL will \"\n-      + \" handle as read-only. These topics cannot be modified by any KSQL command. This list \"\n-      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n-      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n+  public static final String KSQL_READONLY_TOPICS_DOC = \"Comma-separated list of topics that \"\n+      + \"should be marked as read-only. Entries in the list may be literal topic names or \"\n+      + \"[Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/\"\n+      + \"Pattern.html). \"\n+      + \"For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\"\n+      + \"\\nRead-only topics cannot be modified by any KSQL command.\"\n+      + \"\\nThe default value marks known system topics from Kafka and Confluent products as \"\n+      + \"read-only.\"\n+      + \"\\nKSQL also marks its own internal topics as read-only. This is not controlled by this \"\n+      + \"config.\";\n \n   private enum ConfigGeneration {\n     LEGACY,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2OTc1MA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369469750", "bodyText": "Great docs :)\nWe could even give them a link to docs on Java regex, for those not familiar, and add details of defaults and topics that KSQL always hidden.\nA slightly reworded example is below.\nComma-separated list of topic that will be hidden. Entries in the list may be literal topic names or [Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html). For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\n\nHidden topics will not visible when running the `SHOW TOPICS` command unless `SHOW ALL TOPICS` is used. \n\nThe default value hides known system topics from Kafka and Confluent products.\n\nKSQL also marks its own internal topics as hidden. This is not controlled by this config.", "author": "big-andy-coates", "createdAt": "2020-01-22T10:08:47Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -202,6 +202,24 @@\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+      + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n+      + \"connect-status,connect-statuses\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DOC = \"List of topics that will not be \"\n+      + \"visible when running the SHOW TOPICS command unless SHOW ALL TOPICS is used. This list \"\n+      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n+      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex 09ad44cc7e..4de1aac25c 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -202,23 +204,35 @@ public class KsqlConfig extends AbstractConfig {\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+  public static final String KSQL_HIDDEN_TOPICS_CONFIG = \"ksql.hidden.topics\";\n+  public static final String KSQL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n       + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n       + \"connect-status,connect-statuses\";\n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DOC = \"List of topics that will not be \"\n-      + \"visible when running the SHOW TOPICS command unless SHOW ALL TOPICS is used. This list \"\n-      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n-      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n-\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_CONFIG = \"ksql.internal.readonly.topics\";\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+  public static final String KSQL_HIDDEN_TOPICS_DOC = \"Comma-separated list of topics that will \"\n+      + \"be hidden. Entries in the list may be literal topic names or \"\n+      + \"[Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/\"\n+      + \"Pattern.html). \"\n+      + \"For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\"\n+      + \"\\nHidden topics will not visible when running the `SHOW TOPICS` command unless \"\n+      + \"`SHOW ALL TOPICS` is used.\"\n+      + \"\\nThe default value hides known system topics from Kafka and Confluent products.\"\n+      + \"\\nKSQL also marks its own internal topics as hidden. This is not controlled by this \"\n+      + \"config.\";\n+\n+  public static final String KSQL_READONLY_TOPICS_CONFIG = \"ksql.readonly.topics\";\n+  public static final String KSQL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n       + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n       + \"connect-status,connect-statuses\";\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_DOC = \"List of topics that KSQL will \"\n-      + \" handle as read-only. These topics cannot be modified by any KSQL command. This list \"\n-      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n-      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n+  public static final String KSQL_READONLY_TOPICS_DOC = \"Comma-separated list of topics that \"\n+      + \"should be marked as read-only. Entries in the list may be literal topic names or \"\n+      + \"[Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/\"\n+      + \"Pattern.html). \"\n+      + \"For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\"\n+      + \"\\nRead-only topics cannot be modified by any KSQL command.\"\n+      + \"\\nThe default value marks known system topics from Kafka and Confluent products as \"\n+      + \"read-only.\"\n+      + \"\\nKSQL also marks its own internal topics as read-only. This is not controlled by this \"\n+      + \"config.\";\n \n   private enum ConfigGeneration {\n     LEGACY,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3NjYwMA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369476600", "bodyText": "As above, an example being:\nComma-separated list of topic that will be treated as read-only. Entries in the list may be literal topic names or [Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html). For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\n\nRead-only topics cannot be modified by any KSQL command.\n\nThe default value marks known system topics from Kafka and Confluent products as read-only.\n\nKSQL also marks its own internal topics as read-only. This is not controlled by this config.", "author": "big-andy-coates", "createdAt": "2020-01-22T10:22:18Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -202,6 +202,24 @@\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+      + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n+      + \"connect-status,connect-statuses\";\n+  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DOC = \"List of topics that will not be \"\n+      + \"visible when running the SHOW TOPICS command unless SHOW ALL TOPICS is used. This list \"\n+      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n+      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n+\n+  public static final String KSQL_INTERNAL_READONLY_TOPICS_CONFIG = \"ksql.internal.readonly.topics\";\n+  public static final String KSQL_INTERNAL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+      + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n+      + \"connect-status,connect-statuses\";\n+  public static final String KSQL_INTERNAL_READONLY_TOPICS_DOC = \"List of topics that KSQL will \"\n+      + \" handle as read-only. These topics cannot be modified by any KSQL command. This list \"\n+      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n+      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex 09ad44cc7e..4de1aac25c 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -202,23 +204,35 @@ public class KsqlConfig extends AbstractConfig {\n   public static final String KSQL_AUTH_CACHE_MAX_ENTRIES_DOC = \"Controls the size of the cache \"\n       + \"to a maximum number of KSQL authorization responses entries.\";\n \n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG = \"ksql.internal.hidden.topics\";\n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+  public static final String KSQL_HIDDEN_TOPICS_CONFIG = \"ksql.hidden.topics\";\n+  public static final String KSQL_HIDDEN_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n       + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n       + \"connect-status,connect-statuses\";\n-  public static final String KSQL_INTERNAL_HIDDEN_TOPICS_DOC = \"List of topics that will not be \"\n-      + \"visible when running the SHOW TOPICS command unless SHOW ALL TOPICS is used. This list \"\n-      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n-      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n-\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_CONFIG = \"ksql.internal.readonly.topics\";\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n+  public static final String KSQL_HIDDEN_TOPICS_DOC = \"Comma-separated list of topics that will \"\n+      + \"be hidden. Entries in the list may be literal topic names or \"\n+      + \"[Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/\"\n+      + \"Pattern.html). \"\n+      + \"For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\"\n+      + \"\\nHidden topics will not visible when running the `SHOW TOPICS` command unless \"\n+      + \"`SHOW ALL TOPICS` is used.\"\n+      + \"\\nThe default value hides known system topics from Kafka and Confluent products.\"\n+      + \"\\nKSQL also marks its own internal topics as hidden. This is not controlled by this \"\n+      + \"config.\";\n+\n+  public static final String KSQL_READONLY_TOPICS_CONFIG = \"ksql.readonly.topics\";\n+  public static final String KSQL_READONLY_TOPICS_DEFAULT = \"_confluent.*,__confluent.*\"\n       + \",_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,\"\n       + \"connect-status,connect-statuses\";\n-  public static final String KSQL_INTERNAL_READONLY_TOPICS_DOC = \"List of topics that KSQL will \"\n-      + \" handle as read-only. These topics cannot be modified by any KSQL command. This list \"\n-      + \"is comma separated and may use Java regular expressions to specify each topic (i.e. \"\n-      + \" _confluent.* accepts any topic that starts with the _confluent prefix).\";\n+  public static final String KSQL_READONLY_TOPICS_DOC = \"Comma-separated list of topics that \"\n+      + \"should be marked as read-only. Entries in the list may be literal topic names or \"\n+      + \"[Java regular expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/\"\n+      + \"Pattern.html). \"\n+      + \"For example, `_confluent.*` will match any topic whose name starts with the `_confluent`).\"\n+      + \"\\nRead-only topics cannot be modified by any KSQL command.\"\n+      + \"\\nThe default value marks known system topics from Kafka and Confluent products as \"\n+      + \"read-only.\"\n+      + \"\\nKSQL also marks its own internal topics as read-only. This is not controlled by this \"\n+      + \"config.\";\n \n   private enum ConfigGeneration {\n     LEGACY,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MDM1OQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369480359", "bodyText": "Still not convinced this is the right way to create the processing log config. This is not how it's created at the moment.\ne.g. can the processing log config ever have a password in it? In which case this 'withSecretsObfuscated` would fail.\ne.g. can the ksqlConfig passed in here include overrides users have supplied in the CLI?\nAt the moment, the ProcessingLogConfig is created in one place and then injected / passed to where it is needed. IMHO this is a better pattern than creating it in multiple places, when ever needed: the single instance pattern ensures we're using the same config everywhere.\nHence, I urge you to change the code so that we're passing down the ProcessorLogConfig to where its needed, ideally injecting it into constructors, rather than passing it as an argument of other methods, with it finally being passed as a separate constructor argument here.", "author": "big-andy-coates", "createdAt": "2020-01-22T10:29:38Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.common.collect.Streams;\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final Pattern hiddenTopicsPattern;\n+  private final Pattern readOnlyTopicsPattern;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    final ProcessingLogConfig processingLogConfig =\n+        new ProcessingLogConfig(ksqlConfig.getAllConfigPropsWithSecretsObfuscated());", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 21e5ed61e1..0ef112bebd 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -17,6 +17,8 @@ package io.confluent.ksql.util;\n \n import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+\n+import java.util.Arrays;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MTI2NQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369481265", "bodyText": "Did you see Vic's comment about adding the config(s) to the list of immutable configs? #4322 (comment)", "author": "big-andy-coates", "createdAt": "2020-01-22T10:31:20Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java", "diffHunk": "@@ -159,4 +176,20 @@ private void checkAuthorization(\n       throw new KsqlServerException(\"The KSQL server is not permitted to execute the command\", e);\n     }\n   }\n+\n+  private void throwIfInsertOnReadOnlyTopic(", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a746ed8dff807ac49384d664b50d8c49f22253a", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\nindex 82f4421197..32e553e467 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n\n@@ -177,7 +171,7 @@ public class DistributingExecutor {\n     }\n   }\n \n-  private void throwIfInsertOnReadOnlyTopic(\n+  private void throwIfInsertOnInternalTopic(\n       final MetaStore metaStore,\n       final InsertInto insertInto\n   ) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NDc4Mg==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369484782", "bodyText": "Rather than having this error checking here, it would be cleaner to check for invalid regular expressions using a Validator on the config itself.  This would mean the value is checked when the KsqlConfig is created, i.e. higher up the stack, resulting in an earlier, more targeted error message. Then this error checking, and the one below, can be removed; resulting in much cleaner code.\nWe already have ConfigValidators. Consider adding a validator in their for checking a regular expression is valid, and one that allows you to validate each entry in the list, i.e. two separate ones.  Or, just one that checks each string in the list is a valid regular expression.", "author": "big-andy-coates", "createdAt": "2020-01-22T10:38:41Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.common.collect.Streams;\n+import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ReservedInternalTopics {\n+  private static final Logger LOG = LoggerFactory.getLogger(ReservedInternalTopics.class);\n+\n+  // These constant should not be part of KsqlConfig.SYSTEM_INTERNAL_TOPICS_CONFIG because they're\n+  // not configurable.\n+  public static final String KSQL_INTERNAL_TOPIC_PREFIX = \"_confluent-ksql-\";\n+  public static final String KSQL_COMMAND_TOPIC_SUFFIX = \"command_topic\";\n+  public static final String KSQL_CONFIGS_TOPIC_SUFFIX = \"configs\";\n+\n+  /**\n+   * Returns the internal KSQL command topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The command topic name.\n+   */\n+  public static String commandTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_COMMAND_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the internal KSQL configs topic (used for KSQL standalone)\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @return The configurations topic name.\n+   */\n+  public static String configsTopic(final KsqlConfig ksqlConfig) {\n+    return toKsqlInternalTopic(ksqlConfig, KSQL_CONFIGS_TOPIC_SUFFIX);\n+  }\n+\n+  /**\n+   * Returns the KSQL processing log topic.\n+   * <p/>\n+   * This is not an internal topic in the sense that users are intentionally meant to read from\n+   * this topic to identify deserialization and other processing errors, define a KSQL stream on\n+   * it, and potentially issue queries to filter from it, etc. This is why it is not prefixed in\n+   * the way KSQL internal topics are.\n+   *\n+   * @param config The Processing log config, which is used to extract the processing topic suffix\n+   * @param ksqlConfig The KSQL config, which is used to extract the KSQL service id.\n+   * @return The processing log topic name.\n+   */\n+  public static String processingLogTopic(\n+      final ProcessingLogConfig config,\n+      final KsqlConfig ksqlConfig\n+  ) {\n+    final String topicNameConfig = config.getString(ProcessingLogConfig.TOPIC_NAME);\n+    if (topicNameConfig.equals(ProcessingLogConfig.TOPIC_NAME_NOT_SET)) {\n+      return String.format(\n+          \"%s%s\",\n+          ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+          ProcessingLogConfig.TOPIC_NAME_DEFAULT_SUFFIX\n+      );\n+    } else {\n+      return topicNameConfig;\n+    }\n+  }\n+\n+  /**\n+   * Compute a name for a KSQL internal topic.\n+   *\n+   * @param ksqlConfig The KSQL config, which is used to extract the internal topic prefix.\n+   * @param topicSuffix A suffix that is appended to the topic name.\n+   * @return The computed topic name.\n+   */\n+  private static String toKsqlInternalTopic(final KsqlConfig ksqlConfig, final String topicSuffix) {\n+    return String.format(\n+        \"%s%s_%s\",\n+        KSQL_INTERNAL_TOPIC_PREFIX,\n+        ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG),\n+        topicSuffix\n+    );\n+  }\n+\n+  private final Pattern hiddenTopicsPattern;\n+  private final Pattern readOnlyTopicsPattern;\n+\n+  public ReservedInternalTopics(final KsqlConfig ksqlConfig) {\n+    final ProcessingLogConfig processingLogConfig =\n+        new ProcessingLogConfig(ksqlConfig.getAllConfigPropsWithSecretsObfuscated());\n+\n+    try {\n+      this.hiddenTopicsPattern = Pattern.compile(\n+          Streams.concat(\n+              Stream.of(KSQL_INTERNAL_TOPIC_PREFIX + \".*\"),\n+              ksqlConfig.getList(KsqlConfig.KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG).stream()\n+          ).collect(Collectors.joining(\"|\"))\n+      );\n+    } catch (final Exception e) {\n+      final String message = \"Invalid pattern list in '\"\n+          + KsqlConfig.KSQL_INTERNAL_HIDDEN_TOPICS_CONFIG + \"'\";\n+\n+      LOG.error(message + \": \" + e.getMessage());\n+      throw new KsqlException(message, e);\n+    }", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\nindex 21e5ed61e1..0ef112bebd 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/ReservedInternalTopics.java\n\n@@ -17,6 +17,8 @@ package io.confluent.ksql.util;\n \n import com.google.common.collect.Streams;\n import io.confluent.ksql.logging.processing.ProcessingLogConfig;\n+\n+import java.util.Arrays;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NzE1OA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369487158", "bodyText": "not needed.", "author": "big-andy-coates", "createdAt": "2020-01-22T10:43:46Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java", "diffHunk": "@@ -43,20 +48,24 @@\n  * {@code distributedCmdResponseTimeout}.\n  */\n public class DistributingExecutor {\n+  private final KsqlConfig ksqlConfig;", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\nindex 82f4421197..9d1b9e4592 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n\n@@ -48,7 +48,6 @@ import org.apache.kafka.common.errors.ProducerFencedException;\n  * {@code distributedCmdResponseTimeout}.\n  */\n public class DistributingExecutor {\n-  private final KsqlConfig ksqlConfig;\n   private final CommandQueue commandQueue;\n   private final Duration distributedCmdResponseTimeout;\n   private final BiFunction<KsqlExecutionContext, ServiceContext, Injector> injectorFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NzQzMQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r369487431", "bodyText": "I'd actually pass in ReservedInternalTopics instead, otherwise you'll need to also pass in ProcessingLogConfig too.", "author": "big-andy-coates", "createdAt": "2020-01-22T10:44:25Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java", "diffHunk": "@@ -43,20 +48,24 @@\n  * {@code distributedCmdResponseTimeout}.\n  */\n public class DistributingExecutor {\n+  private final KsqlConfig ksqlConfig;\n   private final CommandQueue commandQueue;\n   private final Duration distributedCmdResponseTimeout;\n   private final BiFunction<KsqlExecutionContext, ServiceContext, Injector> injectorFactory;\n   private final Optional<KsqlAuthorizationValidator> authorizationValidator;\n   private final ValidatedCommandFactory validatedCommandFactory;\n   private final CommandIdAssigner commandIdAssigner;\n+  private final ReservedInternalTopics internalTopics;\n \n   public DistributingExecutor(\n+      final KsqlConfig ksqlConfig,", "originalCommit": "11f97a145ca52f00983b49c57195ceaf6b142d80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "chunk": "diff --git a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\nindex 82f4421197..9d1b9e4592 100644\n--- a/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n+++ b/ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/DistributingExecutor.java\n\n@@ -48,7 +48,6 @@ import org.apache.kafka.common.errors.ProducerFencedException;\n  * {@code distributedCmdResponseTimeout}.\n  */\n public class DistributingExecutor {\n-  private final KsqlConfig ksqlConfig;\n   private final CommandQueue commandQueue;\n   private final Duration distributedCmdResponseTimeout;\n   private final BiFunction<KsqlExecutionContext, ServiceContext, Injector> injectorFactory;\n"}}, {"oid": "2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "url": "https://github.com/confluentinc/ksql/commit/2dc3c0e56d18e6a8c6d5f97ffaee084b268b2b8c", "message": "fix: add KsqlConfig method to get ProcessingLogConfig props", "committedDate": "2020-01-23T22:33:51Z", "type": "forcePushed"}, {"oid": "a3a1a18bdc2271c016b0aa480c1c11d5a576d6c1", "url": "https://github.com/confluentinc/ksql/commit/a3a1a18bdc2271c016b0aa480c1c11d5a576d6c1", "message": "fix: add KsqlConfig method to get ProcessingLogConfig props", "committedDate": "2020-01-24T20:33:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMTUyOA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r371021528", "bodyText": "This should be Type.LIST`, which will be a list of strings.\nOf course, you'll need to update the validator as well. The most future proof would be to have a validator that validates each element, and pass the regex one to that.  But a short cut, for now, would just be to have the regex one validate a List.", "author": "big-andy-coates", "createdAt": "2020-01-26T18:54:48Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -532,6 +564,20 @@ private static ConfigDef buildConfigDef(final ConfigGeneration generation) {\n             KSQL_AUTH_CACHE_MAX_ENTRIES_DEFAULT,\n             Importance.LOW,\n             KSQL_AUTH_CACHE_MAX_ENTRIES_DOC\n+        ).define(\n+            KSQL_HIDDEN_TOPICS_CONFIG,\n+            Type.STRING,", "originalCommit": "a3a1a18bdc2271c016b0aa480c1c11d5a576d6c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyNDI1OA==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r374224258", "bodyText": "Done. I was having some issues with the casting initially, so I decided to convert it to a Type.STRING. But I put more logic in the validator to verify each list item is a String too and used a StringBuilder to build the final String now. That allowed me to use a Type.LIST this time.", "author": "spena", "createdAt": "2020-02-03T17:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMTUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "3a746ed8dff807ac49384d664b50d8c49f22253a", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\nindex 4de1aac25c..bacc45658b 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n\n@@ -564,20 +532,6 @@ public class KsqlConfig extends AbstractConfig {\n             KSQL_AUTH_CACHE_MAX_ENTRIES_DEFAULT,\n             Importance.LOW,\n             KSQL_AUTH_CACHE_MAX_ENTRIES_DOC\n-        ).define(\n-            KSQL_HIDDEN_TOPICS_CONFIG,\n-            Type.STRING,\n-            KSQL_HIDDEN_TOPICS_DEFAULT,\n-            ConfigValidators.validRegex(),\n-            Importance.LOW,\n-            KSQL_HIDDEN_TOPICS_DOC\n-        ).define(\n-            KSQL_READONLY_TOPICS_CONFIG,\n-            Type.STRING,\n-            KSQL_READONLY_TOPICS_DEFAULT,\n-            ConfigValidators.validRegex(),\n-            Importance.LOW,\n-            KSQL_READONLY_TOPICS_DOC\n         )\n         .withClientSslSupport();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMTcxNQ==", "url": "https://github.com/confluentinc/ksql/pull/4322#discussion_r371021715", "bodyText": "The regex should be a list, not a comma separated string.  So this logic will need to change.", "author": "big-andy-coates", "createdAt": "2020-01-26T18:58:03Z", "path": "ksql-common/src/main/java/io/confluent/ksql/configdef/ConfigValidators.java", "diffHunk": "@@ -92,6 +93,23 @@ public static Validator validUrl() {\n     };\n   }\n \n+  public static Validator validRegex() {\n+    return (name, val) -> {\n+      if (!(val instanceof String)) {\n+        throw new IllegalArgumentException(\"validator should only be used with STRING defs\");\n+      }\n+\n+      final String regex = Arrays.stream(((String) val).split(\",\"))\n+          .collect(Collectors.joining(\"|\"));\n+", "originalCommit": "a3a1a18bdc2271c016b0aa480c1c11d5a576d6c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a746ed8dff807ac49384d664b50d8c49f22253a", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/configdef/ConfigValidators.java b/ksql-common/src/main/java/io/confluent/ksql/configdef/ConfigValidators.java\nindex 554172fa86..163ce2dd9a 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/configdef/ConfigValidators.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/configdef/ConfigValidators.java\n\n@@ -93,23 +92,6 @@ public final class ConfigValidators {\n     };\n   }\n \n-  public static Validator validRegex() {\n-    return (name, val) -> {\n-      if (!(val instanceof String)) {\n-        throw new IllegalArgumentException(\"validator should only be used with STRING defs\");\n-      }\n-\n-      final String regex = Arrays.stream(((String) val).split(\",\"))\n-          .collect(Collectors.joining(\"|\"));\n-\n-      try {\n-        Pattern.compile(regex);\n-      } catch (final Exception e) {\n-        throw new ConfigException(name, val, \"Not valid regular expression: \" + e.getMessage());\n-      }\n-    };\n-  }\n-\n   public static final class ValidCaseInsensitiveString implements Validator {\n \n     private final List<String> validStrings;\n"}}, {"oid": "3a746ed8dff807ac49384d664b50d8c49f22253a", "url": "https://github.com/confluentinc/ksql/commit/3a746ed8dff807ac49384d664b50d8c49f22253a", "message": "fix: avoid writing data to reserved internal topics", "committedDate": "2020-02-03T16:08:32Z", "type": "commit"}, {"oid": "c4c9054f0963edac1627171b5acd29dff93a080d", "url": "https://github.com/confluentinc/ksql/commit/c4c9054f0963edac1627171b5acd29dff93a080d", "message": "feat: add 'show all topics' to include internal topics", "committedDate": "2020-02-03T16:08:34Z", "type": "commit"}, {"oid": "44016acd1f48f8a4035395ffc71a07df941acab2", "url": "https://github.com/confluentinc/ksql/commit/44016acd1f48f8a4035395ffc71a07df941acab2", "message": "refactor: move KSQL_INTERNAL_TOPIC_PREFIX to new class", "committedDate": "2020-02-03T16:09:18Z", "type": "commit"}, {"oid": "9214ed5f0839fb86967fcf4278f77bf479f7d8d0", "url": "https://github.com/confluentinc/ksql/commit/9214ed5f0839fb86967fcf4278f77bf479f7d8d0", "message": "refactor: use configurable SYSTEM_INTERNAL_TOPICS", "committedDate": "2020-02-03T16:10:27Z", "type": "commit"}, {"oid": "ea83fd0638e9843e6dba9bcbeb276ec7569c2247", "url": "https://github.com/confluentinc/ksql/commit/ea83fd0638e9843e6dba9bcbeb276ec7569c2247", "message": "refactor: create command/configs topics from new class", "committedDate": "2020-02-03T16:10:28Z", "type": "commit"}, {"oid": "4fc068f7cdfc6553060fd566e240b93a7529ef29", "url": "https://github.com/confluentinc/ksql/commit/4fc068f7cdfc6553060fd566e240b93a7529ef29", "message": "feat: do not allow writing to the processing log topic", "committedDate": "2020-02-03T16:10:30Z", "type": "commit"}, {"oid": "d36f00d29d056ec85640c2673ccb4dcb7a70ef46", "url": "https://github.com/confluentinc/ksql/commit/d36f00d29d056ec85640c2673ccb4dcb7a70ef46", "message": "fix: address review feedback from Andy and Jim", "committedDate": "2020-02-03T16:10:31Z", "type": "commit"}, {"oid": "79fcb1845997ee65f79a87aaa6c9cc06e1ab14fe", "url": "https://github.com/confluentinc/ksql/commit/79fcb1845997ee65f79a87aaa6c9cc06e1ab14fe", "message": "fix: address 3rd round of feedback\n\n- added configs to immutable properties\n- removed 'internal' word from config names\n- modified show-topics.md\n- list changelog/partition topics with ALL syntax\n- add regex validator to ConfigValidators and KsqlConfig", "committedDate": "2020-02-03T16:10:32Z", "type": "commit"}, {"oid": "d4f53c64568a2cfa00347fb3a4fa948cc10dac38", "url": "https://github.com/confluentinc/ksql/commit/d4f53c64568a2cfa00347fb3a4fa948cc10dac38", "message": "fix: add KsqlConfig method to get ProcessingLogConfig props", "committedDate": "2020-02-03T16:10:33Z", "type": "commit"}, {"oid": "84ebde38fda87c9b8097488317a9443dc0999214", "url": "https://github.com/confluentinc/ksql/commit/84ebde38fda87c9b8097488317a9443dc0999214", "message": "fix: rebase + convert hidden config names from string to list", "committedDate": "2020-02-03T16:45:52Z", "type": "commit"}, {"oid": "84ebde38fda87c9b8097488317a9443dc0999214", "url": "https://github.com/confluentinc/ksql/commit/84ebde38fda87c9b8097488317a9443dc0999214", "message": "fix: rebase + convert hidden config names from string to list", "committedDate": "2020-02-03T16:45:52Z", "type": "forcePushed"}]}