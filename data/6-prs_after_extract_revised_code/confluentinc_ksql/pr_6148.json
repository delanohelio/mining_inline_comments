{"pr_number": 6148, "pr_title": "feat: Add metrics for pull query request/response size in bytes", "pr_createdAt": "2020-09-03T01:35:27Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6148", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MTQxMQ==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r482641411", "bodyText": "This is the only place where we have access to the response sent over the wire. That's why I had to pass the pullQueryMetrics object in here", "author": "vpapavas", "createdAt": "2020-09-03T01:37:39Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -112,6 +118,9 @@ static void handleOldApiResponse(final Server server, final RoutingContext routi\n         response.end(responseBody);\n       }\n     }\n+    pullQueryMetrics", "originalCommit": "8ab531cb8aa37c0727d533131f2aec5918cc57eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\nindex 5f233eff1a..f12b5be5e4 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\n\n@@ -118,9 +112,6 @@ public final class OldApiUtils {\n         response.end(responseBody);\n       }\n     }\n-    pullQueryMetrics\n-        .ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics.recordResponseSize(\n-            routingContext.response().bytesWritten()));\n   }\n \n   private static void streamEndpointResponse(final Server server,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MTc2Mw==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r482641763", "bodyText": "Instead of passing the things we want to measure, like the startTime or the requestSize, I figured it's cleaner to pass the pullQueryMetrics. Also, the response cannot be measured from in here", "author": "vpapavas", "createdAt": "2020-09-03T01:39:02Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -139,24 +138,19 @@\n   private final KsqlExecutionContext executionContext;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n-  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n       final KsqlConfig ksqlConfig,\n-      final String serviceId,\n-      final Time time\n+      final String serviceId", "originalCommit": "8ab531cb8aa37c0727d533131f2aec5918cc57eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMzIxNg==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483313216", "bodyText": "I think the idea was that PullQueryExecutorMetrics was encapsulated here, but I agree that you can't do everything that way.  Similarly, we cut corners in measuring time by putting that in here to maintain encapsulation.  Andy felt strongly about this, so I made it that way, but I agree that if we want to measure size, it should be moved out.  I think we should measure time in exactly the same manner since we're already pulling PullQueryExecutorMetrics out.", "author": "AlanConfluent", "createdAt": "2020-09-03T23:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MTc2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MjEyMg==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r482642122", "bodyText": "I am not measuring the request/response here since I don't have access to the HttpServerRequest/HttpServerResponse objects here", "author": "vpapavas", "createdAt": "2020-09-03T01:40:16Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisher.java", "diffHunk": "@@ -34,33 +35,48 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import org.apache.kafka.common.utils.Time;\n \n class PullQueryPublisher implements Flow.Publisher<Collection<StreamedRow>> {\n \n   private final ServiceContext serviceContext;\n   private final ConfiguredStatement<Query> query;\n   private final PullQueryExecutor pullQueryExecutor;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n   private final long startTimeNanos;\n \n   @VisibleForTesting\n   PullQueryPublisher(\n       final ServiceContext serviceContext,\n       final ConfiguredStatement<Query> query,\n       final PullQueryExecutor pullQueryExecutor,\n+      final Optional<PullQueryExecutorMetrics> pullQueryMetrics,\n       final long startTimeNanos\n   ) {\n     this.serviceContext = requireNonNull(serviceContext, \"serviceContext\");\n     this.query = requireNonNull(query, \"query\");\n     this.pullQueryExecutor = requireNonNull(pullQueryExecutor, \"pullQueryExecutor\");\n+    this.pullQueryMetrics = pullQueryMetrics;\n     this.startTimeNanos = startTimeNanos;\n   }\n \n   @Override\n   public synchronized void subscribe(final Subscriber<Collection<StreamedRow>> subscriber) {\n     final PullQuerySubscription subscription = new PullQuerySubscription(\n         subscriber,\n-        () -> pullQueryExecutor.execute(query, serviceContext, Optional.of(false), startTimeNanos)\n+        () -> {\n+          final PullQueryResult result = pullQueryExecutor.execute(\n+              query, serviceContext, Optional.of(false), pullQueryMetrics);\n+          if (pullQueryMetrics.isPresent()) {\n+            //Record latency at microsecond scale\n+            final long nowNanos = Time.SYSTEM.nanoseconds();\n+            final double latency = TimeUnit.NANOSECONDS.toMicros(nowNanos - startTimeNanos);\n+            pullQueryMetrics.get().recordLatency(latency);", "originalCommit": "8ab531cb8aa37c0727d533131f2aec5918cc57eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisher.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisher.java\nindex bbb5233bcb..8f0f3b5185 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisher.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisher.java\n\n@@ -67,7 +67,7 @@ class PullQueryPublisher implements Flow.Publisher<Collection<StreamedRow>> {\n     final PullQuerySubscription subscription = new PullQuerySubscription(\n         subscriber,\n         () -> {\n-          final PullQueryResult result = pullQueryExecutor.execute(\n+          PullQueryResult result = pullQueryExecutor.execute(\n               query, serviceContext, Optional.of(false), pullQueryMetrics);\n           if (pullQueryMetrics.isPresent()) {\n             //Record latency at microsecond scale\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwODM4MA==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483308380", "bodyText": "Noop line?", "author": "AlanConfluent", "createdAt": "2020-09-03T23:39:53Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -227,32 +231,34 @@ private void handleQueryRequest(final RoutingContext routingContext) {\n \n     final CompletableFuture<Void> connectionClosedFuture = new CompletableFuture<>();\n     routingContext.request().connection().closeHandler(v -> connectionClosedFuture.complete(null));\n-\n-    handleOldApiRequest(server, routingContext, KsqlRequest.class,\n+    routingContext.request().bytesRead();", "originalCommit": "ff845b203112c7e49537219acb1856dca75dc0f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\nindex 0c3afe29ed..4bb721bda6 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java\n\n@@ -231,34 +227,32 @@ public class ServerVerticle extends AbstractVerticle {\n \n     final CompletableFuture<Void> connectionClosedFuture = new CompletableFuture<>();\n     routingContext.request().connection().closeHandler(v -> connectionClosedFuture.complete(null));\n-    routingContext.request().bytesRead();\n-    handleOldApiRequest(server, routingContext, KsqlRequest.class, pullQueryMetrics,\n+\n+    handleOldApiRequest(server, routingContext, KsqlRequest.class,\n         (request, apiSecurityContext) ->\n             endpoints\n-                .executeQueryRequest(\n-                    request, server.getWorkerExecutor(), connectionClosedFuture,\n+                .executeQueryRequest(request, server.getWorkerExecutor(), connectionClosedFuture,\n                     DefaultApiSecurityContext.create(routingContext),\n                     isInternalRequest(routingContext))\n-\n     );\n   }\n \n   private void handleInfoRequest(final RoutingContext routingContext) {\n-    handleOldApiRequest(server, routingContext, null, Optional.empty(),\n+    handleOldApiRequest(server, routingContext, null,\n         (request, apiSecurityContext) ->\n             endpoints.executeInfo(DefaultApiSecurityContext.create(routingContext))\n     );\n   }\n \n   private void handleClusterStatusRequest(final RoutingContext routingContext) {\n-    handleOldApiRequest(server, routingContext, null, Optional.empty(),\n+    handleOldApiRequest(server, routingContext, null,\n         (request, apiSecurityContext) ->\n             endpoints.executeClusterStatus(DefaultApiSecurityContext.create(routingContext))\n     );\n   }\n \n   private void handleHeartbeatRequest(final RoutingContext routingContext) {\n-    handleOldApiRequest(server, routingContext, HeartbeatMessage.class, Optional.empty(),\n+    handleOldApiRequest(server, routingContext, HeartbeatMessage.class,\n         (request, apiSecurityContext) ->\n             endpoints.executeHeartbeat(request, DefaultApiSecurityContext.create(routingContext))\n     );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTAwMQ==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483309001", "bodyText": "Nit: Unnecessary whitespace changes make it harder to use blame.", "author": "AlanConfluent", "createdAt": "2020-09-03T23:41:56Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerEndpoints.java", "diffHunk": "@@ -151,17 +156,20 @@ public KsqlServerEndpoints(\n   }\n \n   @Override\n-  public CompletableFuture<EndpointResponse> executeQueryRequest(final KsqlRequest request,\n+  public CompletableFuture<EndpointResponse> executeQueryRequest(", "originalCommit": "ff845b203112c7e49537219acb1856dca75dc0f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1ODk0Mg==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r485158942", "bodyText": "The formatting is off here, when we break arguments in multiple lines, the first one must be in a new line as well", "author": "vpapavas", "createdAt": "2020-09-08T19:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerEndpoints.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerEndpoints.java\nindex a7067aa17d..7468ac9c0a 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerEndpoints.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerEndpoints.java\n\n@@ -156,20 +151,17 @@ public class KsqlServerEndpoints implements Endpoints {\n   }\n \n   @Override\n-  public CompletableFuture<EndpointResponse> executeQueryRequest(\n-      final KsqlRequest request,\n+  public CompletableFuture<EndpointResponse> executeQueryRequest(final KsqlRequest request,\n       final WorkerExecutor workerExecutor,\n       final CompletableFuture<Void> connectionClosedFuture,\n       final ApiSecurityContext apiSecurityContext,\n-      final Optional<Boolean> isInternalRequest\n-  ) {\n+      final Optional<Boolean> isInternalRequest) {\n     return executeOldApiEndpointOnWorker(apiSecurityContext,\n         ksqlSecurityContext -> streamedQueryResource.streamQuery(\n             ksqlSecurityContext,\n             request,\n             connectionClosedFuture,\n-            isInternalRequest\n-        ), workerExecutor);\n+            isInternalRequest), workerExecutor);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTkzNQ==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483309935", "bodyText": "Why did you remove how this was being done by encapsulating the nowNanos?  It prevented you from having to do that all over.", "author": "AlanConfluent", "createdAt": "2020-09-03T23:45:14Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -83,18 +84,24 @@ public void recordRemoteRequests(final double value) {\n     this.remoteRequestsSensor.record(value);\n   }\n \n-  public void recordLatency(final long startTimeNanos) {\n+  public void recordLatency(final double value) {\n     // Record latency at microsecond scale\n-    final long nowNanos = time.nanoseconds();", "originalCommit": "ff845b203112c7e49537219acb1856dca75dc0f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3OTk1Mg==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r485179952", "bodyText": "Added it back, you are right", "author": "vpapavas", "createdAt": "2020-09-08T20:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex d9659d606b..e0c849bdab 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -94,14 +88,6 @@ public class PullQueryExecutorMetrics implements Closeable {\n     this.errorRateSensor.record(value);\n   }\n \n-  public void recordRequestSize(final double value) {\n-    this.requestSizeSensor.record(value);\n-  }\n-\n-  public void recordResponseSize(final double value) {\n-    this.responseSizeSensor.record(value);\n-  }\n-\n   List<Sensor> getSensors() {\n     return sensors;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMDUzMQ==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483310531", "bodyText": "Why not do recordLatency here too?  You can even record the start time here as well.  That way, they don't have to be sprinkled everywhere.  You would still have to handle the web socket since I don't believe it uses this path.", "author": "AlanConfluent", "createdAt": "2020-09-03T23:47:25Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -112,6 +120,9 @@ static void handleOldApiResponse(final Server server, final RoutingContext routi\n         response.end(responseBody);\n       }\n     }\n+    pullQueryMetrics\n+        .ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics.recordResponseSize(", "originalCommit": "ff845b203112c7e49537219acb1856dca75dc0f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTU3MA==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483311570", "bodyText": "Ideally we should measure every one of these endpoints in a generic fashion rather than having this special thing for pull queries, but maybe that is for a followup.", "author": "AlanConfluent", "createdAt": "2020-09-03T23:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMDUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\nindex 85194d8fa6..f12b5be5e4 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\n\n@@ -120,9 +112,6 @@ public final class OldApiUtils {\n         response.end(responseBody);\n       }\n     }\n-    pullQueryMetrics\n-        .ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics.recordResponseSize(\n-            routingContext.response().bytesWritten()));\n   }\n \n   private static void streamEndpointResponse(final Server server,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTMxMA==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483311310", "bodyText": "This no longer measures the latency for this endpoint.  Why did you remove it?", "author": "AlanConfluent", "createdAt": "2020-09-03T23:50:17Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java", "diffHunk": "@@ -43,34 +44,38 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import org.apache.kafka.common.utils.Time;\n \n public class QueryEndpoint {\n \n   private final KsqlEngine ksqlEngine;\n   private final KsqlConfig ksqlConfig;\n   private final PullQueryExecutor pullQueryExecutor;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n-  public QueryEndpoint(final KsqlEngine ksqlEngine, final KsqlConfig ksqlConfig,\n-      final PullQueryExecutor pullQueryExecutor) {\n+  public QueryEndpoint(\n+      final KsqlEngine ksqlEngine,\n+      final KsqlConfig ksqlConfig,\n+      final PullQueryExecutor pullQueryExecutor,\n+      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n+  ) {\n     this.ksqlEngine = ksqlEngine;\n     this.ksqlConfig = ksqlConfig;\n     this.pullQueryExecutor = pullQueryExecutor;\n+    this.pullQueryMetrics = pullQueryMetrics;\n   }\n \n   public QueryPublisher createQueryPublisher(\n       final String sql, final JsonObject properties,\n       final Context context,\n       final WorkerExecutor workerExecutor,\n       final ServiceContext serviceContext) {\n-    final long startTimeNanos = Time.SYSTEM.nanoseconds();", "originalCommit": "ff845b203112c7e49537219acb1856dca75dc0f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3NjUyNg==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r485176526", "bodyText": "Yeah, you are right. I got a bit trigger happy with removing things. Will add it back", "author": "vpapavas", "createdAt": "2020-09-08T20:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java\nindex 472920e3f1..e726113370 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java\n\n@@ -44,24 +45,19 @@ import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import org.apache.kafka.common.utils.Time;\n \n public class QueryEndpoint {\n \n   private final KsqlEngine ksqlEngine;\n   private final KsqlConfig ksqlConfig;\n   private final PullQueryExecutor pullQueryExecutor;\n-  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n-  public QueryEndpoint(\n-      final KsqlEngine ksqlEngine,\n-      final KsqlConfig ksqlConfig,\n-      final PullQueryExecutor pullQueryExecutor,\n-      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n-  ) {\n+  public QueryEndpoint(final KsqlEngine ksqlEngine, final KsqlConfig ksqlConfig,\n+      final PullQueryExecutor pullQueryExecutor) {\n     this.ksqlEngine = ksqlEngine;\n     this.ksqlConfig = ksqlConfig;\n     this.pullQueryExecutor = pullQueryExecutor;\n-    this.pullQueryMetrics = pullQueryMetrics;\n   }\n \n   public QueryPublisher createQueryPublisher(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NDc4Ng==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r494684786", "bodyText": "nit: Remove commented lines.", "author": "AlanConfluent", "createdAt": "2020-09-25T00:40:03Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -85,6 +89,8 @@ public void recordRemoteRequests(final double value) {\n \n   public void recordLatency(final long startTimeNanos) {\n     // Record latency at microsecond scale\n+    //this.latencySensor.record(value);", "originalCommit": "55cd6d70516e20302ebca12d11c0a316784acb9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex da0c2dd1f1..e0c849bdab 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -87,13 +78,9 @@ public class PullQueryExecutorMetrics implements Closeable {\n     this.remoteRequestsSensor.record(value);\n   }\n \n-  public void recordLatency(final long startTimeNanos) {\n+  public void recordLatency(final double value) {\n     // Record latency at microsecond scale\n-    //this.latencySensor.record(value);\n-    //this.requestRateSensor.record(1);\n-    final long nowNanos = time.nanoseconds();\n-    final double latency = TimeUnit.NANOSECONDS.toMicros(nowNanos - startTimeNanos);\n-    this.latencySensor.record(latency);\n+    this.latencySensor.record(value);\n     this.requestRateSensor.record(1);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NTUxOA==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r494685518", "bodyText": "How is this time used if it's not injected in?  I suspect the test won't pass.", "author": "AlanConfluent", "createdAt": "2020-09-25T00:43:00Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java", "diffHunk": "@@ -56,7 +56,7 @@ public void setUp() {\n     when(ksqlEngine.getServiceId()).thenReturn(KSQL_SERVICE_ID);\n     when(time.nanoseconds()).thenReturn(6000L);", "originalCommit": "55cd6d70516e20302ebca12d11c0a316784acb9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java\nindex 83c4533b77..e53c970dcd 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java\n\n@@ -56,7 +56,7 @@ public class PullQueryExecutorMetricsTest {\n     when(ksqlEngine.getServiceId()).thenReturn(KSQL_SERVICE_ID);\n     when(time.nanoseconds()).thenReturn(6000L);\n \n-    pullMetrics =   new PullQueryExecutorMetrics(ksqlEngine.getServiceId(), CUSTOM_TAGS);\n+    pullMetrics = new PullQueryExecutorMetrics(ksqlEngine.getServiceId(), CUSTOM_TAGS, time);\n   }\n \n   @After\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NTg4Mw==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r494685883", "bodyText": "If you leave time injected in, it'll make it easier to test this class.  In fact, I would imagine it would be hard to test if it's using a wall clock.", "author": "AlanConfluent", "createdAt": "2020-09-25T00:44:32Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -46,19 +48,19 @@\n   private final Sensor latencySensor;\n   private final Sensor requestRateSensor;\n   private final Sensor errorRateSensor;\n+  private final Sensor requestSizeSensor;\n+  private final Sensor responseSizeSensor;\n   private final Metrics metrics;\n   private final Map<String, String> customMetricsTags;\n-  private final Time time;\n   private final String ksqlServiceId;\n+  private final Time time = Time.SYSTEM;\n \n   public PullQueryExecutorMetrics(\n       final String ksqlServiceId,\n-      final Map<String, String> customMetricsTags,\n-      final Time time\n+      final Map<String, String> customMetricsTags\n   ) {\n \n     this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n-    this.time = Objects.requireNonNull(time, \"time\");", "originalCommit": "55cd6d70516e20302ebca12d11c0a316784acb9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex da0c2dd1f1..e0c849bdab 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -48,12 +44,9 @@ public class PullQueryExecutorMetrics implements Closeable {\n   private final Sensor latencySensor;\n   private final Sensor requestRateSensor;\n   private final Sensor errorRateSensor;\n-  private final Sensor requestSizeSensor;\n-  private final Sensor responseSizeSensor;\n   private final Metrics metrics;\n   private final Map<String, String> customMetricsTags;\n   private final String ksqlServiceId;\n-  private final Time time = Time.SYSTEM;\n \n   public PullQueryExecutorMetrics(\n       final String ksqlServiceId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NjgyNg==", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r494686826", "bodyText": "You want to record this when the response is complete in handleOldApiResponse, right?", "author": "AlanConfluent", "createdAt": "2020-09-25T00:48:17Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -64,22 +69,30 @@ private OldApiUtils() {\n     } else {\n       requestObject = null;\n     }\n-\n+    pullQueryMetrics\n+        .ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics.recordRequestSize(\n+            routingContext.request().bytesRead()));\n+    //Record latency at microsecond scale\n+    pullQueryMetrics.ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics", "originalCommit": "55cd6d70516e20302ebca12d11c0a316784acb9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\nindex 2164f14e54..f12b5be5e4 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\n\n@@ -69,30 +64,22 @@ public final class OldApiUtils {\n     } else {\n       requestObject = null;\n     }\n-    pullQueryMetrics\n-        .ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics.recordRequestSize(\n-            routingContext.request().bytesRead()));\n-    //Record latency at microsecond scale\n-    pullQueryMetrics.ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics\n-        .recordLatency(startTimeNanos));\n+\n     final CompletableFuture<EndpointResponse> completableFuture = requestor\n         .apply(requestObject, DefaultApiSecurityContext.create(routingContext));\n     completableFuture.thenAccept(endpointResponse -> {\n-      handleOldApiResponse(server, routingContext, endpointResponse, pullQueryMetrics);\n+      handleOldApiResponse(server, routingContext, endpointResponse);\n     }).exceptionally(t -> {\n       if (t instanceof CompletionException) {\n         t = t.getCause();\n       }\n-      handleOldApiResponse(server, routingContext, mapException(t), pullQueryMetrics);\n+      handleOldApiResponse(server, routingContext, mapException(t));\n       return null;\n     });\n   }\n \n-  static void handleOldApiResponse(\n-      final Server server, final RoutingContext routingContext,\n-      final EndpointResponse endpointResponse,\n-      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n-  ) {\n+  static void handleOldApiResponse(final Server server, final RoutingContext routingContext,\n+      final EndpointResponse endpointResponse) {\n     final HttpServerResponse response = routingContext.response();\n     response.putHeader(CONTENT_TYPE_HEADER, JSON_CONTENT_TYPE);\n \n"}}, {"oid": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "url": "https://github.com/confluentinc/ksql/commit/4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "message": "adding metrics for request/response size", "committedDate": "2020-09-25T19:36:51Z", "type": "commit"}, {"oid": "7fc84367683bc837113db73b5ca4149183382efe", "url": "https://github.com/confluentinc/ksql/commit/7fc84367683bc837113db73b5ca4149183382efe", "message": "measure size via vertx methods", "committedDate": "2020-09-25T19:39:34Z", "type": "commit"}, {"oid": "339ffe22267898b14600735fdcb4167afcefce71", "url": "https://github.com/confluentinc/ksql/commit/339ffe22267898b14600735fdcb4167afcefce71", "message": "remove jol dependency", "committedDate": "2020-09-25T19:39:36Z", "type": "commit"}, {"oid": "ea24f23838991e3f210ba0af6569c91b542b5604", "url": "https://github.com/confluentinc/ksql/commit/ea24f23838991e3f210ba0af6569c91b542b5604", "message": "removed routingContext from streamedqueryresource", "committedDate": "2020-09-25T19:39:36Z", "type": "commit"}, {"oid": "7c91764cdbf7d9aaec93bafa2daf04390eb14bf1", "url": "https://github.com/confluentinc/ksql/commit/7c91764cdbf7d9aaec93bafa2daf04390eb14bf1", "message": "Addressed alan's comments", "committedDate": "2020-09-25T19:39:36Z", "type": "commit"}, {"oid": "b635f18486f5f03d31c09ad6a95c952895ddf9e8", "url": "https://github.com/confluentinc/ksql/commit/b635f18486f5f03d31c09ad6a95c952895ddf9e8", "message": "address alan's comments", "committedDate": "2020-09-25T19:39:37Z", "type": "commit"}, {"oid": "db7409073c6e089358ce4eeb62ac90217f3e3da6", "url": "https://github.com/confluentinc/ksql/commit/db7409073c6e089358ce4eeb62ac90217f3e3da6", "message": "rebase", "committedDate": "2020-09-25T21:50:39Z", "type": "commit"}, {"oid": "db7409073c6e089358ce4eeb62ac90217f3e3da6", "url": "https://github.com/confluentinc/ksql/commit/db7409073c6e089358ce4eeb62ac90217f3e3da6", "message": "rebase", "committedDate": "2020-09-25T21:50:39Z", "type": "forcePushed"}]}