{"pr_number": 5523, "pr_title": "feat: Add encode udf", "pr_createdAt": "2020-06-02T00:38:23Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5523", "timeline": [{"oid": "9438d43fdd8bc21f67dc9b78b08b124fd768a072", "url": "https://github.com/confluentinc/ksql/commit/9438d43fdd8bc21f67dc9b78b08b124fd768a072", "message": "added encode udf", "committedDate": "2020-06-02T16:29:46Z", "type": "commit"}, {"oid": "ee6925089b136c8d73f1bc963db290fbb8629627", "url": "https://github.com/confluentinc/ksql/commit/ee6925089b136c8d73f1bc963db290fbb8629627", "message": "added docs", "committedDate": "2020-06-02T16:29:46Z", "type": "commit"}, {"oid": "9b10506c43d82c783c5aa51cd3f1261a8c5eaa54", "url": "https://github.com/confluentinc/ksql/commit/9b10506c43d82c783c5aa51cd3f1261a8c5eaa54", "message": "fix errors", "committedDate": "2020-06-02T16:29:46Z", "type": "commit"}, {"oid": "9b10506c43d82c783c5aa51cd3f1261a8c5eaa54", "url": "https://github.com/confluentinc/ksql/commit/9b10506c43d82c783c5aa51cd3f1261a8c5eaa54", "message": "fix errors", "committedDate": "2020-06-02T16:29:46Z", "type": "forcePushed"}, {"oid": "4ed1f6853f18e5664016440cb5c1b307fc9ab2c4", "url": "https://github.com/confluentinc/ksql/commit/4ed1f6853f18e5664016440cb5c1b307fc9ab2c4", "message": "fix errors", "committedDate": "2020-06-02T18:52:14Z", "type": "commit"}, {"oid": "13f5a4da2088999a2a3213405e5bf92d9cf6328b", "url": "https://github.com/confluentinc/ksql/commit/13f5a4da2088999a2a3213405e5bf92d9cf6328b", "message": "Update docs/developer-guide/ksqldb-reference/scalar-functions.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-06-02T20:33:23Z", "type": "commit"}, {"oid": "7efea472f5fd081fcdd65c93443381b960842159", "url": "https://github.com/confluentinc/ksql/commit/7efea472f5fd081fcdd65c93443381b960842159", "message": "Update docs/developer-guide/ksqldb-reference/scalar-functions.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-06-02T20:33:37Z", "type": "commit"}, {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688", "url": "https://github.com/confluentinc/ksql/commit/e44bbbdc4cbb06243635cad714ef1312d9a63688", "message": "Update docs/developer-guide/ksqldb-reference/scalar-functions.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-06-02T20:33:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MDA4NA==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434250084", "bodyText": "ENCODER_MAP?", "author": "AlanConfluent", "createdAt": "2020-06-03T00:47:07Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();", "originalCommit": "e44bbbdc4cbb06243635cad714ef1312d9a63688", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d88b81f1a9e78c88b4cb093592fa8b741cb25457", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\nindex 7c7f979767..839e3b4092 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n\n@@ -15,14 +15,13 @@\n \n package io.confluent.ksql.function.udf.string;\n \n+import com.google.common.collect.ImmutableMap;\n import io.confluent.ksql.function.KsqlFunctionException;\n import io.confluent.ksql.function.udf.Udf;\n import io.confluent.ksql.function.udf.UdfDescription;\n import io.confluent.ksql.function.udf.UdfParameter;\n import io.confluent.ksql.util.KsqlConstants;\n import java.nio.charset.StandardCharsets;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.codec.binary.Hex;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTAzMg==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434251032", "bodyText": "Do we want the url safe version?  Not sure if we have a precedent elsewhere in the codebase.", "author": "AlanConfluent", "createdAt": "2020-06-03T00:50:49Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+    }\n+  }\n+\n+  static class HexToBase64 implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) throws KsqlFunctionException {\n+      final byte[] decodedHex;\n+      try {\n+        decodedHex = Hex.decodeHex(input);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+      final byte[] encodedB64 = Base64.encodeBase64(decodedHex);", "originalCommit": "e44bbbdc4cbb06243635cad714ef1312d9a63688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTM5Ng==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434645396", "bodyText": "What do you mean?", "author": "vpapavas", "createdAt": "2020-06-03T15:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNjgxNg==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434726816", "bodyText": "There's a Base64 that's url safe, meaning it swaps a few characters to that it doesn't use any URL special characters.  https://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/binary/Base64.html#encodeBase64URLSafe-byte:A-\nI think it's fine not to do that.  This is the standard version.", "author": "AlanConfluent", "createdAt": "2020-06-03T17:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "d88b81f1a9e78c88b4cb093592fa8b741cb25457", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\nindex 7c7f979767..839e3b4092 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n\n@@ -15,14 +15,13 @@\n \n package io.confluent.ksql.function.udf.string;\n \n+import com.google.common.collect.ImmutableMap;\n import io.confluent.ksql.function.KsqlFunctionException;\n import io.confluent.ksql.function.udf.Udf;\n import io.confluent.ksql.function.udf.UdfDescription;\n import io.confluent.ksql.function.udf.UdfParameter;\n import io.confluent.ksql.util.KsqlConstants;\n import java.nio.charset.StandardCharsets;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.codec.binary.Hex;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1Mjg3MA==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434252870", "bodyText": "https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#String(byte[],%20java.nio.charset.Charset)\nSays that it will replace unmappable chars to the default character for the charset.  This might be fine, but just wanted to point out we could throw an error.\nI tend to think programmer mistakes should be errors, whereas row by row data mistakes should be more forgiving, so maybe what you have is the right thing, but just wanted to point it out.", "author": "AlanConfluent", "createdAt": "2020-06-03T00:58:22Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);", "originalCommit": "e44bbbdc4cbb06243635cad714ef1312d9a63688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTc3Mg==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434645772", "bodyText": "Yes, that was my thinking as well", "author": "vpapavas", "createdAt": "2020-06-03T15:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1Mjg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "d88b81f1a9e78c88b4cb093592fa8b741cb25457", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\nindex 7c7f979767..839e3b4092 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n\n@@ -15,14 +15,13 @@\n \n package io.confluent.ksql.function.udf.string;\n \n+import com.google.common.collect.ImmutableMap;\n import io.confluent.ksql.function.KsqlFunctionException;\n import io.confluent.ksql.function.udf.Udf;\n import io.confluent.ksql.function.udf.UdfDescription;\n import io.confluent.ksql.function.udf.UdfParameter;\n import io.confluent.ksql.util.KsqlConstants;\n import java.nio.charset.StandardCharsets;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.codec.binary.Hex;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzE3MA==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434253170", "bodyText": "No need for var encodedHex", "author": "AlanConfluent", "createdAt": "2020-06-03T00:59:35Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+    }\n+  }\n+\n+  static class HexToBase64 implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) throws KsqlFunctionException {\n+      final byte[] decodedHex;\n+      try {\n+        decodedHex = Hex.decodeHex(input);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+      final byte[] encodedB64 = Base64.encodeBase64(decodedHex);\n+      return new String(encodedB64, StandardCharsets.UTF_8);\n+\n+    }\n+  }\n+\n+  static class HexToUtf8 implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) throws KsqlFunctionException {\n+      final byte[] decodedHex;\n+      try {\n+        decodedHex = Hex.decodeHex(input);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+      return new String(decodedHex, StandardCharsets.UTF_8);\n+    }\n+  }\n+\n+  static class AsciiToHex implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      final String encodedHex = Hex.encodeHexString(input.getBytes(StandardCharsets.US_ASCII));", "originalCommit": "e44bbbdc4cbb06243635cad714ef1312d9a63688", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d88b81f1a9e78c88b4cb093592fa8b741cb25457", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\nindex 7c7f979767..839e3b4092 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n\n@@ -15,14 +15,13 @@\n \n package io.confluent.ksql.function.udf.string;\n \n+import com.google.common.collect.ImmutableMap;\n import io.confluent.ksql.function.KsqlFunctionException;\n import io.confluent.ksql.function.udf.Udf;\n import io.confluent.ksql.function.udf.UdfDescription;\n import io.confluent.ksql.function.udf.UdfParameter;\n import io.confluent.ksql.util.KsqlConstants;\n import java.nio.charset.StandardCharsets;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.codec.binary.Hex;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDI0MA==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434254240", "bodyText": "Isn't the input here not ascii?  I guess these get replaces with the default character and that's what's getting encoded?", "author": "AlanConfluent", "createdAt": "2020-06-03T01:03:42Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/string/EncodeTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import org.junit.Test;\n+\n+public class EncodeTest {\n+\n+  private Encode udf = new Encode();\n+\n+  @Test\n+  public void shouldReturnNullOnNullValue() {\n+    assertThat(udf.encode(null, \"hex\", \"ascii\"), is(nullValue()));\n+    assertThat(udf.encode(null, \"utf8\", \"base64\"), is(nullValue()));\n+    assertThat(udf.encode(\"some string\", null, \"utf8\"), is(nullValue()));\n+    assertThat(udf.encode(\"some string\", \"hex\", null), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToAscii() {\n+    assertThat(udf.encode(\"4578616d706C6521\", \"hex\", \"ascii\"), is(\"Example!\"));\n+    assertThat(udf.encode(\"506C616E74207472656573\", \"hex\", \"ascii\"), is(\"Plant trees\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"ascii\"), is(\"1 + 1 = 1\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"ascii\"), is(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"ascii\"), is(\"\ufffd\ufffdbermensch\"));\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToUtf8() {\n+    assertThat(udf.encode(\"4578616d706c6521\", \"hex\", \"utf8\"), is(\"Example!\"));\n+    assertThat(udf.encode(\"506c616e74207472656573\", \"hex\", \"utf8\"), is(\"Plant trees\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"utf8\"), is(\"1 + 1 = 1\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"utf8\"), is(\"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"utf8\"), is(\"\u00dcbermensch\"));\n+\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToBase64() {\n+    assertThat(udf.encode(\"4578616d706c6521\", \"hex\", \"base64\"), is(\"RXhhbXBsZSE=\"));\n+    assertThat(udf.encode(\"506c616e74207472656573\", \"hex\", \"base64\"), is(\"UGxhbnQgdHJlZXM=\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"base64\"), is(\"MSArIDEgPSAx\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"base64\"), is(\"zpXOu867zqzOtM6x\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"base64\"), is(\"w5xiZXJtZW5zY2g=\"));\n+\n+  }\n+\n+  @Test\n+  public void shouldEncodeAsciiToHex() {\n+    assertThat(udf.encode(\"Example!\", \"ascii\", \"hex\"), is(\"4578616d706c6521\"));\n+    assertThat(udf.encode(\"Plant trees\", \"ascii\", \"hex\"), is(\"506c616e74207472656573\"));\n+    assertThat(udf.encode(\"1 + 1 = 1\", \"ascii\", \"hex\"), is(\"31202b2031203d2031\"));\n+    assertThat(udf.encode(\"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\", \"ascii\", \"hex\"), is(\"3f3f3f3f3f3f\"));", "originalCommit": "e44bbbdc4cbb06243635cad714ef1312d9a63688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTE1Mg==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434645152", "bodyText": "Correct", "author": "vpapavas", "createdAt": "2020-06-03T15:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDI0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMDQ5OQ==", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434720499", "bodyText": "This is public mutable state.   Better to make it immutable, i.e. use ImmutableMap.builder().", "author": "big-andy-coates", "createdAt": "2020-06-03T17:01:55Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();", "originalCommit": "e44bbbdc4cbb06243635cad714ef1312d9a63688", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d88b81f1a9e78c88b4cb093592fa8b741cb25457", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\nindex 7c7f979767..839e3b4092 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java\n\n@@ -15,14 +15,13 @@\n \n package io.confluent.ksql.function.udf.string;\n \n+import com.google.common.collect.ImmutableMap;\n import io.confluent.ksql.function.KsqlFunctionException;\n import io.confluent.ksql.function.udf.Udf;\n import io.confluent.ksql.function.udf.UdfDescription;\n import io.confluent.ksql.function.udf.UdfParameter;\n import io.confluent.ksql.util.KsqlConstants;\n import java.nio.charset.StandardCharsets;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.codec.binary.Hex;\n"}}, {"oid": "d88b81f1a9e78c88b4cb093592fa8b741cb25457", "url": "https://github.com/confluentinc/ksql/commit/d88b81f1a9e78c88b4cb093592fa8b741cb25457", "message": "respond to comments", "committedDate": "2020-06-03T17:49:37Z", "type": "commit"}, {"oid": "1ebb8cb9436dc48cd851cf9cea3a551f0a3af2b5", "url": "https://github.com/confluentinc/ksql/commit/1ebb8cb9436dc48cd851cf9cea3a551f0a3af2b5", "message": "Merge branch 'encode-udf' of github.com:vpapavas/ksql into encode-udf", "committedDate": "2020-06-03T17:50:06Z", "type": "commit"}, {"oid": "8ae52a32646ecae7ad1b60aba39b963e65e2e463", "url": "https://github.com/confluentinc/ksql/commit/8ae52a32646ecae7ad1b60aba39b963e65e2e463", "message": "fix error", "committedDate": "2020-06-03T18:26:09Z", "type": "commit"}, {"oid": "5f31b1b44921f95a4bc0f66bfd732735a770e7bb", "url": "https://github.com/confluentinc/ksql/commit/5f31b1b44921f95a4bc0f66bfd732735a770e7bb", "message": "private", "committedDate": "2020-06-03T18:34:06Z", "type": "commit"}, {"oid": "9e57d8903fe93b1db8f0ed5e7ada6a5961c94ca0", "url": "https://github.com/confluentinc/ksql/commit/9e57d8903fe93b1db8f0ed5e7ada6a5961c94ca0", "message": "compile", "committedDate": "2020-06-03T19:30:40Z", "type": "commit"}]}