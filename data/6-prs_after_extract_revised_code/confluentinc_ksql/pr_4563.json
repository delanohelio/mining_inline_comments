{"pr_number": 4563, "pr_title": "feat: support JSON schema inference in ksqlDB", "pr_createdAt": "2020-02-14T01:05:21Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4563", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NzU2NA==", "url": "https://github.com/confluentinc/ksql/pull/4563#discussion_r380867564", "bodyText": "Seems to only be used in tests... is it needed?", "author": "big-andy-coates", "createdAt": "2020-02-18T18:52:50Z", "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java", "diffHunk": "@@ -23,14 +23,66 @@\n import io.confluent.ksql.schema.connect.SchemaWalker.Visitor;\n import io.confluent.ksql.schema.ksql.PersistenceSchema;\n import io.confluent.ksql.schema.ksql.SqlBaseType;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.Schema.Type;\n \n final class JsonSerdeUtils {\n \n+  // the JsonSchemaConverter adds a magic NULL byte and 4 bytes for the\n+  // schema ID at the start of the message\n+  private static final int SIZE_OF_SR_PREFIX = Byte.BYTES + Integer.BYTES;\n+\n   private JsonSerdeUtils() {\n   }\n \n+  /**\n+   * Convert JSON serialized with {@link io.confluent.connect.json.JsonSchemaConverter}\n+   * to standard JSON serialization.\n+   *\n+   * @param json the bytes representing the serialized JSON\n+   * @return the serialized form with the magic byte and schemaID, or {@code json}\n+   *         if it was not serialized with a magic byte to begin with\n+   */\n+  static byte[] removeMagicAndSchemaId(@Nullable final byte[] json) {\n+    if (!hasMagicByte(json)) {\n+      return json;\n+    }\n+\n+    final byte[] out = new byte[json.length - SIZE_OF_SR_PREFIX];\n+    System.arraycopy(json, SIZE_OF_SR_PREFIX, out, 0, json.length - SIZE_OF_SR_PREFIX);\n+    return out;\n+  }", "originalCommit": "18ea41af51945a20c1d808e08e086ea7fcc3d672", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3MjA2NA==", "url": "https://github.com/confluentinc/ksql/pull/4563#discussion_r380872064", "bodyText": "it was, now it's not, it will be again when we introduce JSON_SR format so I will keep it in for now \ud83d\ude02", "author": "agavra", "createdAt": "2020-02-18T19:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NzU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "955e00d0f72f0f2c7fbea8baf5bd66f4ac2178d5", "chunk": "diff --git a/ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java b/ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java\nindex 99a8a5fa0a..6563107d6e 100644\n--- a/ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java\n+++ b/ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java\n\n@@ -23,66 +23,14 @@ import io.confluent.ksql.schema.connect.SchemaWalker;\n import io.confluent.ksql.schema.connect.SchemaWalker.Visitor;\n import io.confluent.ksql.schema.ksql.PersistenceSchema;\n import io.confluent.ksql.schema.ksql.SqlBaseType;\n-import java.io.ByteArrayInputStream;\n-import java.io.InputStream;\n-import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.Schema.Type;\n \n final class JsonSerdeUtils {\n \n-  // the JsonSchemaConverter adds a magic NULL byte and 4 bytes for the\n-  // schema ID at the start of the message\n-  private static final int SIZE_OF_SR_PREFIX = Byte.BYTES + Integer.BYTES;\n-\n   private JsonSerdeUtils() {\n   }\n \n-  /**\n-   * Convert JSON serialized with {@link io.confluent.connect.json.JsonSchemaConverter}\n-   * to standard JSON serialization.\n-   *\n-   * @param json the bytes representing the serialized JSON\n-   * @return the serialized form with the magic byte and schemaID, or {@code json}\n-   *         if it was not serialized with a magic byte to begin with\n-   */\n-  static byte[] removeMagicAndSchemaId(@Nullable final byte[] json) {\n-    if (!hasMagicByte(json)) {\n-      return json;\n-    }\n-\n-    final byte[] out = new byte[json.length - SIZE_OF_SR_PREFIX];\n-    System.arraycopy(json, SIZE_OF_SR_PREFIX, out, 0, json.length - SIZE_OF_SR_PREFIX);\n-    return out;\n-  }\n-\n-  /**\n-   * Converts {@code json} into a {@link ByteArrayInputStream} that represents\n-   * standard JSON encoding. This is preferable to using {@link #removeMagicAndSchemaId(byte[])}\n-   * since it does not require a full copy of the underlying array\n-   *\n-   * @param json the serialized JSON\n-   * @return the corresponding input stream\n-   * @see #removeMagicAndSchemaId(byte[])\n-   */\n-  static InputStream asInputStream(@Nonnull final byte[] json) {\n-    return hasMagicByte(json)\n-        ? new ByteArrayInputStream(json, SIZE_OF_SR_PREFIX, json.length - SIZE_OF_SR_PREFIX)\n-        : new ByteArrayInputStream(json);\n-  }\n-\n-  /**\n-   * @param json the serialized JSON\n-   * @return whether or not this JSON contains the magic schema registry byte\n-   */\n-  static boolean hasMagicByte(final byte[] json) {\n-    // (https://tools.ietf.org/html/rfc7159#section-2) valid JSON should not\n-    // start with 0x00 - the only \"insignificant\" characters allowed are\n-    // 0x20, 0x09, 0x0A and 0x0D\n-    return json != null && json.length > 0 && json[0] == 0x00;\n-  }\n-\n   static PersistenceSchema validateSchema(final PersistenceSchema schema) {\n \n     class SchemaValidator implements Visitor<Void, Void> {\n"}}, {"oid": "ecae03a2b07eb3fb03e7ff069023291b284c85ef", "url": "https://github.com/confluentinc/ksql/commit/ecae03a2b07eb3fb03e7ff069023291b284c85ef", "message": "feat: support JSON schema inference in ksqlDB", "committedDate": "2020-02-18T20:39:08Z", "type": "commit"}, {"oid": "ecae03a2b07eb3fb03e7ff069023291b284c85ef", "url": "https://github.com/confluentinc/ksql/commit/ecae03a2b07eb3fb03e7ff069023291b284c85ef", "message": "feat: support JSON schema inference in ksqlDB", "committedDate": "2020-02-18T20:39:08Z", "type": "forcePushed"}, {"oid": "eb4b76b734286792f05f256726dbb9b631865e83", "url": "https://github.com/confluentinc/ksql/commit/eb4b76b734286792f05f256726dbb9b631865e83", "message": "chore: update SR version", "committedDate": "2020-02-18T21:04:54Z", "type": "commit"}, {"oid": "6961326dcc5533b01834ce83c1efba64d32795a2", "url": "https://github.com/confluentinc/ksql/commit/6961326dcc5533b01834ce83c1efba64d32795a2", "message": "chore: fix ksqlAuthFilter", "committedDate": "2020-02-18T21:33:44Z", "type": "commit"}, {"oid": "679c5a6677b7616588223e5b28d0c01f82268e88", "url": "https://github.com/confluentinc/ksql/commit/679c5a6677b7616588223e5b28d0c01f82268e88", "message": "fix: commit the plan for elements.json", "committedDate": "2020-02-19T00:11:24Z", "type": "commit"}, {"oid": "955e00d0f72f0f2c7fbea8baf5bd66f4ac2178d5", "url": "https://github.com/confluentinc/ksql/commit/955e00d0f72f0f2c7fbea8baf5bd66f4ac2178d5", "message": "feat: remove the cross-serde compatbility", "committedDate": "2020-02-19T20:32:06Z", "type": "commit"}]}