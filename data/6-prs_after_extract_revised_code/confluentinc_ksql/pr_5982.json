{"pr_number": 5982, "pr_title": "feat: support UDAFs with and without init Args with same param type", "pr_createdAt": "2020-08-11T18:49:42Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5982", "timeline": [{"oid": "f481a3c383bcf9eae933593e3915ca31378afebc", "url": "https://github.com/confluentinc/ksql/commit/f481a3c383bcf9eae933593e3915ca31378afebc", "message": "feat: support UDAFs with and without init Args with same param type\n\nAs well as an expression, UDAFs support constants being passed. However, prior to this change it was not possible to register a UDAF that have variants that too no constants and constants.  For example:\n\n```java\n@UdafDescription(\n    name = \"LATEST_BY_OFFSET\",\n    description = LatestByOffset.DESCRIPTION,\n    author = KsqlConstants.CONFLUENT_AUTHOR\n)\npublic final class LatestByOffset {\n\n  ...\n\n  // Version taking no constants:\n  @UdafFactory(description = \"return the latest value of an integer column\",\n      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL INT>\")\n  public static Udaf<Integer, Struct, Integer> latestInteger() {\n    return latest(STRUCT_INTEGER);\n  }\n\n  // Version taking one constant:\n  @UdafFactory(description = \"return the last N values of an integer column\",\n      aggregateSchema = \"ARRAY<STRUCT<SEQ BIGINT, VAL INT>>\")\n  public static Udaf<Integer, List<Struct>, List<Integer>> latestIntegers(final int topNSize) {\n    return latestN(STRUCT_INTEGER, topNSize);\n  }\n```\n\nThe above would previously have thrown an error on start up, complaining that \"A function with the same name and parameter types is already registered\" when `latestIntegers` was being registered, as it incorrectly only took the runtime `INTEGER` parameter, ignoring the `INTEGER` constant parameter.\n\nWith this change all parameters are taken into account.", "committedDate": "2020-08-11T18:48:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzU1OQ==", "url": "https://github.com/confluentinc/ksql/pull/5982#discussion_r468837559", "bodyText": "nit: not your code, but since you're already changing this can we call type.getActualTypeArguments() just once (and also check that the size is exactly three)", "author": "agavra", "createdAt": "2020-08-11T20:13:47Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/UdafTypes.java", "diffHunk": "@@ -54,38 +56,43 @@\n   private final Type inputType;\n   private final Type aggregateType;\n   private final Type outputType;\n-  private final String functionInfo;\n+  private final List<ParameterInfo> literalParams;\n   private final String invalidClassErrorMsg;\n   private final SqlTypeParser sqlTypeParser;\n \n   UdafTypes(\n       final Method method,\n-      final String functionInfo,\n+      final FunctionName functionName,\n       final SqlTypeParser sqlTypeParser\n   ) {\n-    Objects.requireNonNull(method);\n-    this.functionInfo = Objects.requireNonNull(functionInfo);\n     this.invalidClassErrorMsg = \"class='%s'\"\n         + \" is not supported by UDAFs. Valid types are: \" + SUPPORTED_TYPES + \" \"\n-        + functionInfo;\n+        + Objects.requireNonNull(functionName, \"functionName\");\n     final AnnotatedParameterizedType annotatedReturnType\n         = (AnnotatedParameterizedType) method.getAnnotatedReturnType();\n     final ParameterizedType type = (ParameterizedType) annotatedReturnType.getType();\n     this.sqlTypeParser = Objects.requireNonNull(sqlTypeParser);\n \n-    inputType = type.getActualTypeArguments()[0];\n-    aggregateType = type.getActualTypeArguments()[1];\n-    outputType = type.getActualTypeArguments()[2];\n+    this.inputType = type.getActualTypeArguments()[0];\n+    this.aggregateType = type.getActualTypeArguments()[1];\n+    this.outputType = type.getActualTypeArguments()[2];", "originalCommit": "f481a3c383bcf9eae933593e3915ca31378afebc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NDY4NQ==", "url": "https://github.com/confluentinc/ksql/pull/5982#discussion_r468844685", "bodyText": "this doesn't sit right with me. The initialization literals are not part of the parameters, they are something separate that initialize the aggregator itself. I'm wondering how this will bite us in the future - one place that comes to mind is when we describe the function I think it'll now include the initialization parameters when it shouldn't.\nAnother problem might come from handling of the schema provider annotations, which currently take in a list of the parameters (not including the initialization literals). I don't know whether they should or shouldn't, but it seems wrong to lump them in together.", "author": "agavra", "createdAt": "2020-08-11T20:27:31Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/UdafFactoryInvoker.java", "diffHunk": "@@ -63,13 +62,12 @@\n     if (!Modifier.isStatic(method.getModifiers())) {\n       throw new KsqlException(\"UDAF factory methods must be static \" + method);\n     }\n-    final UdafTypes types = new UdafTypes(method, functionName.text(), typeParser);\n+    final UdafTypes types = new UdafTypes(method, functionName, typeParser);\n     this.functionName = Objects.requireNonNull(functionName);\n     this.aggregateArgType = Objects.requireNonNull(types.getAggregateSchema(aggregateSchema));\n     this.aggregateReturnType = Objects.requireNonNull(types.getOutputSchema(outputSchema));\n     this.metrics = Objects.requireNonNull(metrics);\n-    this.params =\n-        Collections.singletonList(types.getInputSchema(Objects.requireNonNull(inputSchema)));\n+    this.params = types.getInputSchema(Objects.requireNonNull(inputSchema));", "originalCommit": "f481a3c383bcf9eae933593e3915ca31378afebc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MTE4Nw==", "url": "https://github.com/confluentinc/ksql/pull/5982#discussion_r469141187", "bodyText": "The initialization literals are not part of the parameters\n\nActually, it is part of the parameters from a users point of view.  Think about how this is being invoked:\nLATEST_BY_OFFSET(Col0, 2)\nThe above takes two parameters, not one.  Yes, the first is the parameter that will be passed to the aggregator on each agg call, and any after that must be literals and are passed to the aggregators init call.  But they are all parameters!\n\nI'm wondering how this will bite us in the future\n\nWe need to overhaul out UDAF framework at some point to support multiple input expressions, not just constants. This is needed to implement a proper topN UDAF for example. However, when we come to do this we will need to change all this code anyway. So I don't think this is painting us into a corner.\n\none place that comes to mind is when we describe the function I think it'll now include the initialization parameters when it shouldn't.\n\nI disagree, I think it should include the init params. The fact that describe currently excludes the init params is probably very confusing!  Take the second example LATEST_BY_OFFSET method in the description above. The one with two parameters.  Describing it only lists one parameter, which is wrong.\n\nAnother problem might come from handling of the schema provider annotations, which currently take in a list of the parameters (not including the initialization literals)\n\nThis is accounted for in the code.  The init params are added to end of the param described by the schema annotation.\nMy conclusion after looking into making this change is that it works for now and allows users to create variants of UDAFs that take constants as additional parameters, like the enhancement to LATEST_BY_OFFSET @sarwarbhuiyan wants to raise in a PR.  Longer term, we need a better solution. We desperately need UDAF support for schema provider functions, not just annotations. But this is a much bigger piece of work, and requires more thought, a KLIP, and resourcing.  This improves things in the short term, without hurting the long term, IMHO.\nOf course, that's not to say there isn't some gotcha I've not thought of... but we can't not make changes on this basis, otherwise we'd never change anything ;)", "author": "big-andy-coates", "createdAt": "2020-08-12T09:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NDY4NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5231494751de980fc4df3d653e773d951ec4df3a", "url": "https://github.com/confluentinc/ksql/commit/5231494751de980fc4df3d653e773d951ec4df3a", "message": "Merge branch 'master' into udaf_differentiate_by_initParams", "committedDate": "2020-08-12T14:54:33Z", "type": "commit"}]}