{"pr_number": 6615, "pr_title": "feat: Adds logging for every request to ksqlDB", "pr_createdAt": "2020-11-14T01:33:23Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6615", "timeline": [{"oid": "8caaa340b2c761d78cc87f6229cccc949fdeeb6a", "url": "https://github.com/confluentinc/ksql/commit/8caaa340b2c761d78cc87f6229cccc949fdeeb6a", "message": "feat: Adds logging for every request that comes in", "committedDate": "2020-11-14T01:26:59Z", "type": "commit"}, {"oid": "295a0a875157739b45323f5a385e51851f801e5e", "url": "https://github.com/confluentinc/ksql/commit/295a0a875157739b45323f5a385e51851f801e5e", "message": "Feedback", "committedDate": "2020-11-16T19:05:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjA5OA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776098", "bodyText": "Can we add a validator on the config to ensure that the config parses properly? Then we can throw a ConfigException rather than IllegalStateException.", "author": "vcrfxia", "createdAt": "2020-11-16T23:56:18Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NzY3MQ==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r525557671", "bodyText": "Done.  Added validator.  It's somewhat irritating that you can't actually do the parsing as well as part of the validation stage because I effectively have to parse again.", "author": "AlanConfluent", "createdAt": "2020-11-17T22:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\nindex 4b96049ddf..c7a92ff309 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n\n@@ -15,16 +15,27 @@\n \n package io.confluent.ksql.api.server;\n \n-import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG;\n \n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.api.auth.ApiUser;\n import io.confluent.ksql.rest.server.KsqlRestConfig;\n import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpVersion;\n import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.impl.Utils;\n+import java.time.Clock;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjE2Nw==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776167", "bodyText": "I don't think this comment adds anything -- I was also confused the first time I read it since I thought it was describing the line below.", "author": "vcrfxia", "createdAt": "2020-11-16T23:56:23Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1Nzc4OA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r525557788", "bodyText": "Makes sense.  Removed.", "author": "AlanConfluent", "createdAt": "2020-11-17T22:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\nindex 4b96049ddf..c7a92ff309 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n\n@@ -15,16 +15,27 @@\n \n package io.confluent.ksql.api.server;\n \n-import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG;\n \n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.api.auth.ApiUser;\n import io.confluent.ksql.rest.server.KsqlRestConfig;\n import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpVersion;\n import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.impl.Utils;\n+import java.time.Clock;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjE4Ng==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776186", "bodyText": "What's the purpose of this? Why would we have a situation where an erroneous response code was returned with no message, and why would we want to log the body in this case?", "author": "vcrfxia", "createdAt": "2020-11-16T23:56:24Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1ODU3Ng==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r525558576", "bodyText": "I was looking through the code and though it was possible to not set the status message.  Either way, in conforming to the Apache log format, I'm just going to remove this.", "author": "AlanConfluent", "createdAt": "2020-11-17T22:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\nindex 4b96049ddf..c7a92ff309 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n\n@@ -15,16 +15,27 @@\n \n package io.confluent.ksql.api.server;\n \n-import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG;\n \n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.api.auth.ApiUser;\n import io.confluent.ksql.rest.server.KsqlRestConfig;\n import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpVersion;\n import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.impl.Utils;\n+import java.time.Clock;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjIzOQ==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776239", "bodyText": "Let's also add the HTTP method. (We used to have Jetty HTTP request logging. This is the information we had at the time: https://www.eclipse.org/jetty/documentation/current/configuring-jetty-request-logs.html#constructing-request-log-entry)", "author": "vcrfxia", "createdAt": "2020-11-16T23:56:26Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();\n+        }\n+      }\n+      logger.accept(String.format(\n+          \"Request complete - %s %s status: %d, user agent: %s, request body: %d bytes,\"\n+              + \" error response: %s\",\n+          routingContext.request().remoteAddress().host(),\n+          routingContext.request().uri(),", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3MDI2MA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r527270260", "bodyText": "Done.  I kept a mostly apache like log message with the addition of request body bytes.", "author": "AlanConfluent", "createdAt": "2020-11-19T23:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\nindex 4b96049ddf..c7a92ff309 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n\n@@ -15,16 +15,27 @@\n \n package io.confluent.ksql.api.server;\n \n-import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG;\n \n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.api.auth.ApiUser;\n import io.confluent.ksql.rest.server.KsqlRestConfig;\n import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpVersion;\n import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.impl.Utils;\n+import java.time.Clock;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjI5NQ==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776295", "bodyText": "Is this just the size of the request body, or does it include the size of the headers as well? It'd be nice to have both. At minimum we should understand which this is.", "author": "vcrfxia", "createdAt": "2020-11-16T23:56:30Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();\n+        }\n+      }\n+      logger.accept(String.format(\n+          \"Request complete - %s %s status: %d, user agent: %s, request body: %d bytes,\"\n+              + \" error response: %s\",\n+          routingContext.request().remoteAddress().host(),\n+          routingContext.request().uri(),\n+          routingContext.response().getStatusCode(),\n+          routingContext.request().getHeader(HTTP_HEADER_USER_AGENT),\n+          routingContext.request().bytesRead(),", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3MjQzOQ==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r527272439", "bodyText": "It's just the body.  There's no API I've seen for the header size, though we do have access to the headers.  I was going to try to estimate the size, by looking at java objects, since from all of my research they're always ASCII, but this seems a bit hacky.  I can try that out if we really want that.", "author": "AlanConfluent", "createdAt": "2020-11-19T23:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\nindex 4b96049ddf..c7a92ff309 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n\n@@ -15,16 +15,27 @@\n \n package io.confluent.ksql.api.server;\n \n-import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG;\n \n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.api.auth.ApiUser;\n import io.confluent.ksql.rest.server.KsqlRestConfig;\n import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpVersion;\n import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.impl.Utils;\n+import java.time.Clock;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3Njg2OA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776868", "bodyText": "Add docs for this new config?", "author": "vcrfxia", "createdAt": "2020-11-16T23:57:04Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,6 +319,11 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n+  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAxODQ5OQ==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528018499", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-11-20T23:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3Njg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\nindex 40781cf514..37cc49969b 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n\n@@ -319,10 +322,15 @@ public class KsqlRestConfig extends AbstractConfig {\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n-  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n-  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n-      \"A list of response codes to skip logging\";\n+  public static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skipped.response.codes\";\n+  private static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_DOC =\n+      \"A list of HTTP response codes to skip during server request logging\";\n+\n+  public static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.rate.limited.request.paths\";\n+  private static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_DOC =\n+      \"A list of path:rate_limit pairs, to rate limit the server request logging\";\n \n   private static final ConfigDef CONFIG_DEF;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NzIzMg==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524777232", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"A list of response codes to skip logging\";\n          \n          \n            \n                  \"A list of HTTP response codes to skip during server request logging\";", "author": "vcrfxia", "createdAt": "2020-11-16T23:57:26Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,6 +319,11 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n+  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n+  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n+      \"A list of response codes to skip logging\";", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3MzAzMw==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r527273033", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-11-19T23:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NzIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\nindex 40781cf514..37cc49969b 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n\n@@ -319,10 +322,15 @@ public class KsqlRestConfig extends AbstractConfig {\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n-  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n-  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n-      \"A list of response codes to skip logging\";\n+  public static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skipped.response.codes\";\n+  private static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_DOC =\n+      \"A list of HTTP response codes to skip during server request logging\";\n+\n+  public static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.rate.limited.request.paths\";\n+  private static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_DOC =\n+      \"A list of path:rate_limit pairs, to rate limit the server request logging\";\n \n   private static final ConfigDef CONFIG_DEF;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NzMxMQ==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524777311", "bodyText": "nit: these three lines can be moved into setUp() and removed from the individual tests.", "author": "vcrfxia", "createdAt": "2020-11-16T23:57:31Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.api.server.LoggingHandler.HTTP_HEADER_USER_AGENT;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.function.Consumer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LoggingHandlerTest {\n+\n+  @Mock\n+  private Server server;\n+  @Mock\n+  private Consumer<String> logger;\n+  @Mock\n+  private RoutingContext routingContext;\n+  @Mock\n+  private KsqlRestConfig ksqlRestConfig;\n+  @Mock\n+  private HttpServerRequest request;\n+  @Mock\n+  private HttpServerResponse response;\n+  @Mock\n+  private SocketAddress socketAddress;\n+  @Captor\n+  private ArgumentCaptor<String> logStringCaptor;\n+  @Captor\n+  private ArgumentCaptor<Handler<AsyncResult<Void>>> endCallback;\n+\n+  private LoggingHandler loggingHandler;\n+\n+\n+  @Before\n+  public void setUp() {\n+    when(server.getConfig()).thenReturn(ksqlRestConfig);\n+    when(routingContext.response()).thenReturn(response);\n+    when(routingContext.request()).thenReturn(request);\n+    when(request.remoteAddress()).thenReturn(socketAddress);\n+    when(ksqlRestConfig.getList(any())).thenReturn(ImmutableList.of(\"401\"));\n+    loggingHandler = new LoggingHandler(server, logger);\n+  }\n+\n+  @Test\n+  public void shouldProduceLog() {\n+    when(response.getStatusCode()).thenReturn(200);\n+    when(request.uri()).thenReturn(\"/query\");\n+    when(request.getHeader(HTTP_HEADER_USER_AGENT)).thenReturn(\"bot\");\n+    when(socketAddress.host()).thenReturn(\"123.111.222.333\");\n+    when(request.bytesRead()).thenReturn(3456L);\n+    loggingHandler.handle(routingContext);", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyMDE0MA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528020140", "bodyText": "I moved most of this to setup.  The handle line actually differs between tests.", "author": "AlanConfluent", "createdAt": "2020-11-20T23:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NzMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java\nindex ed547d0f4c..4b02342c7d 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java\n\n@@ -5,18 +5,23 @@ import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n import io.confluent.ksql.rest.server.KsqlRestConfig;\n import io.vertx.core.AsyncResult;\n import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n import io.vertx.core.http.HttpServerRequest;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.http.HttpVersion;\n import io.vertx.core.net.SocketAddress;\n import io.vertx.ext.web.RoutingContext;\n-import java.util.function.Consumer;\n+import java.time.Clock;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3ODM2NA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524778364", "bodyText": "nit: can we follow the Given / When / Then pattern for these new tests, as we do throughout the rest of the repo? I think it helps pretty significantly with readable, especially for longer tests.", "author": "vcrfxia", "createdAt": "2020-11-16T23:58:36Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.api.server.LoggingHandler.HTTP_HEADER_USER_AGENT;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.function.Consumer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LoggingHandlerTest {\n+\n+  @Mock\n+  private Server server;\n+  @Mock\n+  private Consumer<String> logger;\n+  @Mock\n+  private RoutingContext routingContext;\n+  @Mock\n+  private KsqlRestConfig ksqlRestConfig;\n+  @Mock\n+  private HttpServerRequest request;\n+  @Mock\n+  private HttpServerResponse response;\n+  @Mock\n+  private SocketAddress socketAddress;\n+  @Captor\n+  private ArgumentCaptor<String> logStringCaptor;\n+  @Captor\n+  private ArgumentCaptor<Handler<AsyncResult<Void>>> endCallback;\n+\n+  private LoggingHandler loggingHandler;\n+\n+\n+  @Before\n+  public void setUp() {\n+    when(server.getConfig()).thenReturn(ksqlRestConfig);\n+    when(routingContext.response()).thenReturn(response);\n+    when(routingContext.request()).thenReturn(request);\n+    when(request.remoteAddress()).thenReturn(socketAddress);\n+    when(ksqlRestConfig.getList(any())).thenReturn(ImmutableList.of(\"401\"));\n+    loggingHandler = new LoggingHandler(server, logger);\n+  }\n+\n+  @Test\n+  public void shouldProduceLog() {", "originalCommit": "295a0a875157739b45323f5a385e51851f801e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MTY1Mw==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528041653", "bodyText": "Sure, done.", "author": "AlanConfluent", "createdAt": "2020-11-21T00:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3ODM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java\nindex ed547d0f4c..4b02342c7d 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java\n\n@@ -5,18 +5,23 @@ import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n import io.confluent.ksql.rest.server.KsqlRestConfig;\n import io.vertx.core.AsyncResult;\n import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n import io.vertx.core.http.HttpServerRequest;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.http.HttpVersion;\n import io.vertx.core.net.SocketAddress;\n import io.vertx.ext.web.RoutingContext;\n-import java.util.function.Consumer;\n+import java.time.Clock;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"oid": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "url": "https://github.com/confluentinc/ksql/commit/ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "message": "Feedback", "committedDate": "2020-11-20T23:18:20Z", "type": "commit"}, {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5", "url": "https://github.com/confluentinc/ksql/commit/051a4ddd2274bf6963fd620dcc989b82c300f7b5", "message": "lint", "committedDate": "2020-11-20T23:33:24Z", "type": "commit"}, {"oid": "7d33faba6f01a8a950ed54a9d83c117af1551277", "url": "https://github.com/confluentinc/ksql/commit/7d33faba6f01a8a950ed54a9d83c117af1551277", "message": "Apply suggestions from code review\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-11-21T00:19:43Z", "type": "commit"}, {"oid": "5d0425eeaaba14bc7b106ba350ecbc1678551e48", "url": "https://github.com/confluentinc/ksql/commit/5d0425eeaaba14bc7b106ba350ecbc1678551e48", "message": "Apply suggestions from code review\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-11-21T00:49:45Z", "type": "commit"}, {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "url": "https://github.com/confluentinc/ksql/commit/3e16849f59e290ca82cb75dc144e9201dfdecf71", "message": "when, given, then", "committedDate": "2020-11-21T00:52:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjYxOA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896618", "bodyText": "Can we make this ksql.logging.server.skipped.response.codes or similar to indicate that this is only for server request logging, in contrast to the ksql.logging.processing.* configs for the processing log? I considered suggesting ksql.logging.request.* rather than ksql.logging.server.*but I worry that a config such as ksql.logging.request.skipped.response.codes could be confusing. Maybe it's OK and that's actually better, unsure.\nIf we change the config name, we'll also have to update the docs. (Thanks for adding those!)", "author": "vcrfxia", "createdAt": "2020-11-23T18:01:51Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,10 +322,15 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n-  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n-  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n-      \"A list of response codes to skip logging\";\n+  public static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skipped.response.codes\";", "originalCommit": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0NTkyNA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r529945924", "bodyText": "I chose ksql.logging.server.* since I agree it's confusing if you have both request and response in the same name.\nI also updated the docs I added as well.", "author": "AlanConfluent", "createdAt": "2020-11-24T22:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "32f6b8eb77388057927774774d37fd3202c86c7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\nindex 37cc49969b..8acf642e36 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n\n@@ -322,14 +322,14 @@ public class KsqlRestConfig extends AbstractConfig {\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n-  public static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.skipped.response.codes\";\n-  private static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_DOC =\n+  public static final String KSQL_LOGGING_SERVER_SKIPPED_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.server.skipped.response.codes\";\n+  private static final String KSQL_LOGGING_SERVER_SKIPPED_RESPONSE_CODES_DOC =\n       \"A list of HTTP response codes to skip during server request logging\";\n \n-  public static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.rate.limited.request.paths\";\n-  private static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_DOC =\n+  public static final String KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.server.rate.limited.request.paths\";\n+  private static final String KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_DOC =\n       \"A list of path:rate_limit pairs, to rate limit the server request logging\";\n \n   private static final ConfigDef CONFIG_DEF;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjY0MA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896640", "bodyText": "Same comment as above regarding clarifying that this a server request logging config, in contrast to other types of logging.", "author": "vcrfxia", "createdAt": "2020-11-23T18:01:53Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,10 +322,15 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n-  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n-  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n-      \"A list of response codes to skip logging\";\n+  public static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skipped.response.codes\";\n+  private static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_DOC =\n+      \"A list of HTTP response codes to skip during server request logging\";\n+\n+  public static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.rate.limited.request.paths\";", "originalCommit": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0NjE5Ng==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r529946196", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-11-24T22:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "32f6b8eb77388057927774774d37fd3202c86c7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\nindex 37cc49969b..8acf642e36 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n\n@@ -322,14 +322,14 @@ public class KsqlRestConfig extends AbstractConfig {\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n-  public static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.skipped.response.codes\";\n-  private static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_DOC =\n+  public static final String KSQL_LOGGING_SERVER_SKIPPED_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.server.skipped.response.codes\";\n+  private static final String KSQL_LOGGING_SERVER_SKIPPED_RESPONSE_CODES_DOC =\n       \"A list of HTTP response codes to skip during server request logging\";\n \n-  public static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.rate.limited.request.paths\";\n-  private static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_DOC =\n+  public static final String KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.server.rate.limited.request.paths\";\n+  private static final String KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_DOC =\n       \"A list of path:rate_limit pairs, to rate limit the server request logging\";\n \n   private static final ConfigDef CONFIG_DEF;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjczMw==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896733", "bodyText": "This looks unused?", "author": "vcrfxia", "createdAt": "2020-11-23T18:02:01Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -914,4 +930,8 @@ private static String getLocalHostName() {\n     }\n   }\n \n+  public Map<String, String> getStringAsMap(final String key) {", "originalCommit": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0NzMyMg==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r529947322", "bodyText": "This is called in LoggingHandler.getSkipRequestPaths() to get the map of rate limits.  I also called KsqlConfig.parseStringAsMap in the validator, so it's being parsed twice.  It would be nice to be able to parse and validate at once, but it doesn't seem like the config library supports this at the moment.", "author": "AlanConfluent", "createdAt": "2020-11-24T22:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjczMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5Njc4Mw==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896783", "bodyText": "Does it make sense to add a short docs topic on the meaning of this format, since there are adaptations from the standard Apache log format?", "author": "vcrfxia", "createdAt": "2020-11-23T18:02:08Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -34,56 +45,110 @@\n   static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n \n   private final Set<Integer> skipResponseCodes;\n-  private final Consumer<String> logger;\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Logger logger;\n+  private final Clock clock;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n \n   public LoggingHandler(final Server server) {\n-    this(server, LOG::info);\n+    this(server, LOG, Clock.systemUTC(), RateLimiter::create);\n   }\n \n   @VisibleForTesting\n-  LoggingHandler(final Server server, final Consumer<String> logger) {\n+  LoggingHandler(\n+      final Server server,\n+      final Logger logger,\n+      final Clock clock,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n     this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.rateLimitedPaths = getSkipRequestPaths(server.getConfig());\n     this.logger = logger;\n+    this.clock = clock;\n+    this.rateLimiterFactory = rateLimiterFactory;\n   }\n \n   private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n-    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+    // Already validated as all ints\n+    return config.getList(KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG)\n         .stream()\n-        .map(responseCode -> {\n-          try {\n-            return Integer.parseInt(responseCode);\n-          } catch (NumberFormatException e) {\n-            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n-          }\n-        }).collect(ImmutableSet.toImmutableSet());\n-    return skipCodes;\n+        .map(Integer::parseInt).collect(ImmutableSet.toImmutableSet());\n+  }\n+\n+  private static Map<String, Double> getSkipRequestPaths(final KsqlRestConfig config) {\n+    // Already validated as having a double value\n+    return config.getStringAsMap(KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG)\n+        .entrySet().stream()\n+        .collect(ImmutableMap.toImmutableMap(Entry::getKey,\n+            entry -> Double.parseDouble(entry.getValue())));\n   }\n \n   @Override\n   public void handle(final RoutingContext routingContext) {\n-    // If we wanted to log at the beginning of a request, it would go here.\n     routingContext.addEndHandler(ar -> {\n       // After the response is complete, log results here.\n       if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n         return;\n       }\n-      String errorMessage = \"none\";\n-      if (routingContext.response().getStatusCode() > 300) {\n-        errorMessage = routingContext.response().getStatusMessage();\n-        if (Strings.isNullOrEmpty(errorMessage)) {\n-          errorMessage = routingContext.getBodyAsString();\n+      if (rateLimitedPaths.containsKey(routingContext.request().path())) {\n+        final String path = routingContext.request().path();\n+        final double rateLimit = rateLimitedPaths.get(path);\n+        rateLimiters.computeIfAbsent(path, (k) -> rateLimiterFactory.apply(rateLimit));\n+        if (!rateLimiters.get(path).tryAcquire()) {\n+          return;\n         }\n       }\n-      logger.accept(String.format(\n-          \"Request complete - %s %s status: %d, user agent: %s, request body: %d bytes,\"\n-              + \" error response: %s\",\n+      final long contentLength = routingContext.request().response().bytesWritten();\n+      final HttpVersion version = routingContext.request().version();\n+      final HttpMethod method = routingContext.request().method();\n+      final String uri = routingContext.request().uri();\n+      final int status = routingContext.request().response().getStatusCode();\n+      final long requestBodyLength = routingContext.request().bytesRead();\n+      final String versionFormatted;\n+      switch (version) {\n+        case HTTP_1_0:\n+          versionFormatted = \"HTTP/1.0\";\n+          break;\n+        case HTTP_1_1:\n+          versionFormatted = \"HTTP/1.1\";\n+          break;\n+        case HTTP_2:\n+          versionFormatted = \"HTTP/2.0\";\n+          break;\n+        default:\n+          versionFormatted = \"-\";\n+      }\n+      final String name = Optional.ofNullable((ApiUser) routingContext.user())\n+          .map(u -> u.getPrincipal().getName())\n+          .orElse(\"-\");\n+      final String userAgent = Optional.ofNullable(\n+          routingContext.request().getHeader(HTTP_HEADER_USER_AGENT)).orElse(\"-\");\n+      final String timestamp = Utils.formatRFC1123DateTime(clock.millis());\n+      final String message = String.format(\n+          \"%s - %s [%s] \\\"%s %s %s\\\" %d %d \\\"-\\\" \\\"%s\\\" %d\",", "originalCommit": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzOTM2OQ==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r529939369", "bodyText": "Since it's mixed with the other debug statements and the format may change if we get additional requested fields, it doesn't seem like should commit to a particular format for the moment.  I'm happy to write up a short doc explaining the format if this ends up being what we stick with.", "author": "AlanConfluent", "createdAt": "2020-11-24T22:25:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5Njc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "291558e9bace92a0c9bacfbe74ab8e02e1141547", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\nindex fc53942d58..df3ae7120c 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n\n@@ -77,7 +77,7 @@ public class LoggingHandler implements Handler<RoutingContext> {\n   }\n \n   private static Map<String, Double> getSkipRequestPaths(final KsqlRestConfig config) {\n-    // Already validated as having a double value\n+    // Already validated as having double values\n     return config.getStringAsMap(KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG)\n         .entrySet().stream()\n         .collect(ImmutableMap.toImmutableMap(Entry::getKey,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5Njg1OQ==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896859", "bodyText": "nit: spacing", "author": "vcrfxia", "createdAt": "2020-11-23T18:02:14Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -117,7 +117,7 @@ public synchronized void start() {\n     final List<URI> allListenUris = new ArrayList<>(listenUris);\n     internalListenUri.ifPresent(allListenUris::add);\n \n-    final int instances = config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);\n+    final int   instances = config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);", "originalCommit": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzOTQ5OA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r529939498", "bodyText": "Done.  I think this was an accidental addition of whitespace!", "author": "AlanConfluent", "createdAt": "2020-11-24T22:26:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5Njg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "32f6b8eb77388057927774774d37fd3202c86c7e", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\nindex 58d1fdb761..8788cd108e 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\n\n@@ -117,7 +117,7 @@ public class Server {\n     final List<URI> allListenUris = new ArrayList<>(listenUris);\n     internalListenUri.ifPresent(allListenUris::add);\n \n-    final int   instances = config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);\n+    final int instances = config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);\n     log.debug(\"Deploying \" + instances + \" instances of server verticle\");\n \n     final List<CompletableFuture<String>> deployFutures = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjkwNw==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896907", "bodyText": "nit: move private helper methods to end of file?", "author": "vcrfxia", "createdAt": "2020-11-23T18:02:18Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -34,56 +45,110 @@\n   static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n \n   private final Set<Integer> skipResponseCodes;\n-  private final Consumer<String> logger;\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Logger logger;\n+  private final Clock clock;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n \n   public LoggingHandler(final Server server) {\n-    this(server, LOG::info);\n+    this(server, LOG, Clock.systemUTC(), RateLimiter::create);\n   }\n \n   @VisibleForTesting\n-  LoggingHandler(final Server server, final Consumer<String> logger) {\n+  LoggingHandler(\n+      final Server server,\n+      final Logger logger,\n+      final Clock clock,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n     this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.rateLimitedPaths = getSkipRequestPaths(server.getConfig());\n     this.logger = logger;\n+    this.clock = clock;\n+    this.rateLimiterFactory = rateLimiterFactory;\n   }\n \n   private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {", "originalCommit": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyOTg3NA==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r529929874", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-11-24T22:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "291558e9bace92a0c9bacfbe74ab8e02e1141547", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\nindex fc53942d58..df3ae7120c 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n\n@@ -77,7 +77,7 @@ public class LoggingHandler implements Handler<RoutingContext> {\n   }\n \n   private static Map<String, Double> getSkipRequestPaths(final KsqlRestConfig config) {\n-    // Already validated as having a double value\n+    // Already validated as having double values\n     return config.getStringAsMap(KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG)\n         .entrySet().stream()\n         .collect(ImmutableMap.toImmutableMap(Entry::getKey,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5Njk0Mg==", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896942", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Already validated as having a double value\n          \n          \n            \n                // Already validated as having double values", "author": "vcrfxia", "createdAt": "2020-11-23T18:02:22Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -34,56 +45,110 @@\n   static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n \n   private final Set<Integer> skipResponseCodes;\n-  private final Consumer<String> logger;\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Logger logger;\n+  private final Clock clock;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n \n   public LoggingHandler(final Server server) {\n-    this(server, LOG::info);\n+    this(server, LOG, Clock.systemUTC(), RateLimiter::create);\n   }\n \n   @VisibleForTesting\n-  LoggingHandler(final Server server, final Consumer<String> logger) {\n+  LoggingHandler(\n+      final Server server,\n+      final Logger logger,\n+      final Clock clock,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n     this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.rateLimitedPaths = getSkipRequestPaths(server.getConfig());\n     this.logger = logger;\n+    this.clock = clock;\n+    this.rateLimiterFactory = rateLimiterFactory;\n   }\n \n   private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n-    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+    // Already validated as all ints\n+    return config.getList(KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG)\n         .stream()\n-        .map(responseCode -> {\n-          try {\n-            return Integer.parseInt(responseCode);\n-          } catch (NumberFormatException e) {\n-            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n-          }\n-        }).collect(ImmutableSet.toImmutableSet());\n-    return skipCodes;\n+        .map(Integer::parseInt).collect(ImmutableSet.toImmutableSet());\n+  }\n+\n+  private static Map<String, Double> getSkipRequestPaths(final KsqlRestConfig config) {\n+    // Already validated as having a double value", "originalCommit": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "291558e9bace92a0c9bacfbe74ab8e02e1141547", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\nindex fc53942d58..df3ae7120c 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java\n\n@@ -77,7 +77,7 @@ public class LoggingHandler implements Handler<RoutingContext> {\n   }\n \n   private static Map<String, Double> getSkipRequestPaths(final KsqlRestConfig config) {\n-    // Already validated as having a double value\n+    // Already validated as having double values\n     return config.getStringAsMap(KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG)\n         .entrySet().stream()\n         .collect(ImmutableMap.toImmutableMap(Entry::getKey,\n"}}, {"oid": "291558e9bace92a0c9bacfbe74ab8e02e1141547", "url": "https://github.com/confluentinc/ksql/commit/291558e9bace92a0c9bacfbe74ab8e02e1141547", "message": "Apply suggestions from code review\n\nCo-authored-by: Victoria Xia <victoria.f.xia281@gmail.com>", "committedDate": "2020-11-24T22:15:28Z", "type": "commit"}, {"oid": "32f6b8eb77388057927774774d37fd3202c86c7e", "url": "https://github.com/confluentinc/ksql/commit/32f6b8eb77388057927774774d37fd3202c86c7e", "message": "Feedback", "committedDate": "2020-11-24T22:41:58Z", "type": "commit"}]}