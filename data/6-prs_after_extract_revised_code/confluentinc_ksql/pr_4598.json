{"pr_number": 4598, "pr_title": "Add records to planned test cases", "pr_createdAt": "2020-02-20T08:11:04Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4598", "timeline": [{"oid": "40d5ab04ef69ac332737a3bf7afdba6f296f6b4f", "url": "https://github.com/confluentinc/ksql/commit/40d5ab04ef69ac332737a3bf7afdba6f296f6b4f", "message": "refactor: rearrange the planned test cases and add records\n\nThis patch rearranges the planned test cases, and adds input/output records into the persisted\ntest spec. spec.json is now split into plan.json and spec.json. plan.json contains the query plan\nand configs. spec.json contains everything else. This split ensures that we serialize the plan\nusing the exact same ObjectMapper as a real KSQL node. The spec.json needs a specially configured\nObjectMapper to serialize RecordNode correctly (deal with null keys and decimals)", "committedDate": "2020-02-20T08:13:33Z", "type": "commit"}, {"oid": "0fe590f78dace55834e135c9c44470012155e2cd", "url": "https://github.com/confluentinc/ksql/commit/0fe590f78dace55834e135c9c44470012155e2cd", "message": "chore: add the plans/specs", "committedDate": "2020-02-20T08:30:09Z", "type": "commit"}, {"oid": "0fe590f78dace55834e135c9c44470012155e2cd", "url": "https://github.com/confluentinc/ksql/commit/0fe590f78dace55834e135c9c44470012155e2cd", "message": "chore: add the plans/specs", "committedDate": "2020-02-20T08:30:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0NzE4OQ==", "url": "https://github.com/confluentinc/ksql/pull/4598#discussion_r381947189", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final List<KsqlPlan> planNode,\n          \n          \n            \n                  final List<KsqlPlan> planNodes,", "author": "big-andy-coates", "createdAt": "2020-02-20T11:41:05Z", "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCasePlan.java", "diffHunk": "@@ -16,55 +16,80 @@\n package io.confluent.ksql.test.planned;\n \n import io.confluent.ksql.engine.KsqlPlan;\n+import io.confluent.ksql.test.model.RecordNode;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n public final class TestCasePlan {\n-  private final TestCasePlanNode node;\n+  private final TestCaseSpecNode specNode;\n+  private final TestCasePlanNode planNode;\n   private final String topology;\n \n   TestCasePlan(\n       final String version,\n       final long timestamp,\n-      final List<KsqlPlan> plan,\n+      final List<KsqlPlan> planNode,", "originalCommit": "0fe590f78dace55834e135c9c44470012155e2cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0NzU4OA==", "url": "https://github.com/confluentinc/ksql/pull/4598#discussion_r381947588", "bodyText": "I'd inline all of these accessors that access either planNode or specNode. Calls can just use getPlanNode().getPlan() etc.", "author": "big-andy-coates", "createdAt": "2020-02-20T11:42:03Z", "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCasePlan.java", "diffHunk": "@@ -16,55 +16,80 @@\n package io.confluent.ksql.test.planned;\n \n import io.confluent.ksql.engine.KsqlPlan;\n+import io.confluent.ksql.test.model.RecordNode;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n public final class TestCasePlan {\n-  private final TestCasePlanNode node;\n+  private final TestCaseSpecNode specNode;\n+  private final TestCasePlanNode planNode;\n   private final String topology;\n \n   TestCasePlan(\n       final String version,\n       final long timestamp,\n-      final List<KsqlPlan> plan,\n+      final List<KsqlPlan> planNode,\n       final String topology,\n       final Map<String, String> schemas,\n-      final Map<String, String> configs\n+      final Map<String, String> configs,\n+      final List<RecordNode> inputs,\n+      final List<RecordNode> outputs\n   ) {\n-    this(new TestCasePlanNode(version, timestamp, plan, schemas, configs), topology);\n+    this(\n+        new TestCaseSpecNode(version, timestamp, schemas, inputs, outputs),\n+        new TestCasePlanNode(planNode, configs),\n+        topology\n+    );\n   }\n \n-  TestCasePlan(final TestCasePlanNode node, final String topology) {\n-    this.node = Objects.requireNonNull(node, \"node\");\n+  TestCasePlan(\n+      final TestCaseSpecNode specNode,\n+      final TestCasePlanNode planNode,\n+      final String topology\n+  ) {\n+    this.specNode = Objects.requireNonNull(specNode, \"spec\");\n+    this.planNode = Objects.requireNonNull(planNode, \"plan\");\n     this.topology = Objects.requireNonNull(topology, \"topology\");\n   }\n \n   public List<KsqlPlan> getPlan() {\n-    return node.getPlan();\n+    return planNode.getPlan();", "originalCommit": "0fe590f78dace55834e135c9c44470012155e2cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0ODQ4OQ==", "url": "https://github.com/confluentinc/ksql/pull/4598#discussion_r381948489", "bodyText": "nit: commented out code.\nIf these can be null I'd recommend making them Optional.  (You can plug Java8 support into Jackson if the mapper you're using doesn't have this already).\nPlus, i'd recommend taking an immutable copy of the input.", "author": "big-andy-coates", "createdAt": "2020-02-20T11:43:51Z", "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCaseSpecNode.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.confluent.ksql.test.planned;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.confluent.ksql.test.model.RecordNode;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class TestCaseSpecNode {\n+  private final String version;\n+  private final long timestamp;\n+  private final Map<String, String> schemas;\n+  private final List<RecordNode> inputs;\n+  private final List<RecordNode> outputs;\n+\n+  public TestCaseSpecNode(\n+      @JsonProperty(\"version\") final String version,\n+      @JsonProperty(\"timestamp\") final long timestamp,\n+      @JsonProperty(\"schemas\") final Map<String, String> schemas,\n+      @JsonProperty(\"inputs\") final List<RecordNode> inputs,\n+      @JsonProperty(\"outputs\") final List<RecordNode> outputs\n+  ) {\n+    this.version = Objects.requireNonNull(version, \"version\");\n+    this.timestamp = timestamp;\n+    this.schemas = Objects.requireNonNull(schemas, \"schemas\");\n+    this.inputs = inputs; // Objects.requireNonNull(inputs, \"inputs\");\n+    this.outputs = outputs; // Objects.requireNonNull(outputs, \"outputs\");", "originalCommit": "0fe590f78dace55834e135c9c44470012155e2cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}