{"pr_number": 5730, "pr_title": "fix: make sure old query stream doesn't block on close", "pr_createdAt": "2020-06-30T15:34:38Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5730", "timeline": [{"oid": "0789fdd435d8db41e241f32abc79cdb25533c4e6", "url": "https://github.com/confluentinc/ksql/commit/0789fdd435d8db41e241f32abc79cdb25533c4e6", "message": "fix: make sure old query stream doesn't block on close", "committedDate": "2020-06-30T15:20:24Z", "type": "commit"}, {"oid": "0bfc8b4b0f6e4305c585e44a03336d02fd7c33ee", "url": "https://github.com/confluentinc/ksql/commit/0bfc8b4b0f6e4305c585e44a03336d02fd7c33ee", "message": "Change write timeout to 10 mins", "committedDate": "2020-06-30T15:35:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMjE3MA==", "url": "https://github.com/confluentinc/ksql/pull/5730#discussion_r447832170", "bodyText": "Should we only try to fail the promise if it hasn't already been completed?", "author": "vcrfxia", "createdAt": "2020-06-30T16:48:40Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -113,19 +114,35 @@ static void handleOldApiResponse(final Server server, final RoutingContext routi\n     }\n   }\n \n-  private static void streamEndpointResponse(final Server server, final HttpServerResponse response,\n+  private static void streamEndpointResponse(final Server server,\n+      final RoutingContext routingContext,\n       final StreamingOutput streamingOutput) {\n     final WorkerExecutor workerExecutor = server.getWorkerExecutor();\n     final VertxCompletableFuture<Void> vcf = new VertxCompletableFuture<>();\n     workerExecutor.executeBlocking(promise -> {\n-      try (OutputStream os = new BufferedOutputStream(new ResponseOutputStream(response))) {\n-        streamingOutput.write(os);\n+      final OutputStream ros = new ResponseOutputStream(routingContext.response());\n+      routingContext.request().connection().closeHandler(v -> {\n+        // Close the OutputStream on close of the HTTP connection\n+        closeOutputStream(ros, promise);\n+      });\n+      try {\n+        streamingOutput.write(new BufferedOutputStream(ros));\n       } catch (Exception e) {\n         promise.fail(e);\n+      } finally {\n+        closeOutputStream(ros, promise);\n       }\n     }, vcf);\n   }\n \n+  private static void closeOutputStream(final OutputStream os, final Promise<Void> promise) {\n+    try {\n+      os.close();\n+    } catch (IOException e) {\n+      promise.fail(e);", "originalCommit": "0bfc8b4b0f6e4305c585e44a03336d02fd7c33ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ba16b86c1308448eaea9d46eaddf2e2bfc629b3", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\nindex 614045f747..b1bac73956 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java\n\n@@ -123,26 +122,27 @@ public final class OldApiUtils {\n       final OutputStream ros = new ResponseOutputStream(routingContext.response());\n       routingContext.request().connection().closeHandler(v -> {\n         // Close the OutputStream on close of the HTTP connection\n-        closeOutputStream(ros, promise);\n+        try {\n+          ros.close();\n+        } catch (IOException e) {\n+          promise.fail(e);\n+        }\n       });\n       try {\n         streamingOutput.write(new BufferedOutputStream(ros));\n+        promise.complete();\n       } catch (Exception e) {\n         promise.fail(e);\n       } finally {\n-        closeOutputStream(ros, promise);\n+        try {\n+          ros.close();\n+        } catch (IOException ignore) {\n+          // Ignore - it might already be closed\n+        }\n       }\n     }, vcf);\n   }\n \n-  private static void closeOutputStream(final OutputStream os, final Promise<Void> promise) {\n-    try {\n-      os.close();\n-    } catch (IOException e) {\n-      promise.fail(e);\n-    }\n-  }\n-\n   public static EndpointResponse mapException(final Throwable exception) {\n     if (exception instanceof KsqlRestException) {\n       final KsqlRestException restException = (KsqlRestException) exception;\n"}}, {"oid": "52904238c8b92fa5b110054e2962bc190398c8ba", "url": "https://github.com/confluentinc/ksql/commit/52904238c8b92fa5b110054e2962bc190398c8ba", "message": "revert whitespace change", "committedDate": "2020-07-01T07:25:48Z", "type": "commit"}, {"oid": "2ba16b86c1308448eaea9d46eaddf2e2bfc629b3", "url": "https://github.com/confluentinc/ksql/commit/2ba16b86c1308448eaea9d46eaddf2e2bfc629b3", "message": "Improved output stream close logic", "committedDate": "2020-07-01T07:34:52Z", "type": "commit"}]}