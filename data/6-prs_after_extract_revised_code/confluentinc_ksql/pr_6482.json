{"pr_number": 6482, "pr_title": "fix: Internal Server Error for /healthcheck endpoint in RBAC-enabled", "pr_createdAt": "2020-10-21T17:15:15Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6482", "timeline": [{"oid": "13172b94f83dcc3471464b0dd78a1ea1c0596dae", "url": "https://github.com/confluentinc/ksql/commit/13172b94f83dcc3471464b0dd78a1ea1c0596dae", "message": "fix: Internal Server Error for /healthcheck endpoint in RBAC-enabled", "committedDate": "2020-10-21T13:37:14Z", "type": "commit"}, {"oid": "f49fbf29e9728f84f26e0f5c23b1b57cc8be2c71", "url": "https://github.com/confluentinc/ksql/commit/f49fbf29e9728f84f26e0f5c23b1b57cc8be2c71", "message": "test: add tests to verify paths without authentication", "committedDate": "2020-10-22T11:12:07Z", "type": "commit"}, {"oid": "64038328e0973fe0ed53d72b364575ffc4130490", "url": "https://github.com/confluentinc/ksql/commit/64038328e0973fe0ed53d72b364575ffc4130490", "message": "chore: remove unused method", "committedDate": "2020-10-22T11:20:07Z", "type": "forcePushed"}, {"oid": "1202d41893a574721333b23cf498d6fc6e5b3064", "url": "https://github.com/confluentinc/ksql/commit/1202d41893a574721333b23cf498d6fc6e5b3064", "message": "chore: remove unused method", "committedDate": "2020-10-22T12:58:25Z", "type": "forcePushed"}, {"oid": "807260d12172929e67f270ed33768f3902309c72", "url": "https://github.com/confluentinc/ksql/commit/807260d12172929e67f270ed33768f3902309c72", "message": "chore: remove unused method", "committedDate": "2020-10-22T17:26:24Z", "type": "commit"}, {"oid": "807260d12172929e67f270ed33768f3902309c72", "url": "https://github.com/confluentinc/ksql/commit/807260d12172929e67f270ed33768f3902309c72", "message": "chore: remove unused method", "committedDate": "2020-10-22T17:26:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzI5OQ==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510557299", "bodyText": "Why can't this still be private?", "author": "vcrfxia", "createdAt": "2020-10-23T02:18:46Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -539,7 +612,7 @@ private void shouldNotAllowAccessIfPermissionCheckThrowsException(\n     void run() throws Exception;\n   }\n \n-  private static class StringPrincipal implements Principal {\n+  public static class StringPrincipal implements Principal {", "originalCommit": "807260d12172929e67f270ed33768f3902309c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjE5MA==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510992190", "bodyText": "Left from another approach I was taking. Fixed.", "author": "spena", "createdAt": "2020-10-23T16:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5ea80d536d51ec8d6903bafbd1819ef4a3937525", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\nindex 3ad2bdd91d..b8889e8fc8 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n\n@@ -612,7 +612,7 @@ public class AuthTest extends ApiTest {\n     void run() throws Exception;\n   }\n \n-  public static class StringPrincipal implements Principal {\n+  private static class StringPrincipal implements Principal {\n \n     private final String name;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzUxNQ==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510557515", "bodyText": "Can we move this into AuthenticationPluginHandler if we're going to rename it? It looks out of place here.", "author": "vcrfxia", "createdAt": "2020-10-23T02:19:33Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "diffHunk": "@@ -32,7 +32,7 @@\n  */\n public class KsqlAuthorizationProviderHandler implements Handler<RoutingContext> {\n \n-  public static final Set<String> PATHS_WITHOUT_AUTHORIZATION = ImmutableSet\n+  public static final Set<String> KSQL_AUTHENTICATION_SKIP_PATHS = ImmutableSet", "originalCommit": "807260d12172929e67f270ed33768f3902309c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjA4OA==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510992088", "bodyText": "done", "author": "spena", "createdAt": "2020-10-23T16:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5ea80d536d51ec8d6903bafbd1819ef4a3937525", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java\nindex cfb47a9951..cdd0f7d43e 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java\n\n@@ -25,16 +25,12 @@ import io.vertx.core.Promise;\n import io.vertx.core.WorkerExecutor;\n import io.vertx.ext.auth.User;\n import io.vertx.ext.web.RoutingContext;\n-import java.util.Set;\n \n /**\n  * Handler that calls a KsqlAuthorizationProvider plugin that can be used for custom authorization\n  */\n public class KsqlAuthorizationProviderHandler implements Handler<RoutingContext> {\n \n-  public static final Set<String> KSQL_AUTHENTICATION_SKIP_PATHS = ImmutableSet\n-      .of(\"/v1/metadata\", \"/v1/metadata/id\", \"/healthcheck\");\n-\n   private final WorkerExecutor workerExecutor;\n   private final KsqlAuthorizationProvider ksqlAuthorizationProvider;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzYxNQ==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510557615", "bodyText": "nit: can we rename this to sendPostRequest() in light of the new method above?", "author": "vcrfxia", "createdAt": "2020-10-23T02:19:54Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -137,6 +142,11 @@ public void close() {\n     server.start();\n   }\n \n+  @Override\n+  protected HttpResponse<Buffer> sendGetRequest(final String uri) throws Exception {\n+    return sendGetRequestWithCreds(client, uri, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n+  }\n+\n   @Override\n   protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri,", "originalCommit": "807260d12172929e67f270ed33768f3902309c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjA0NQ==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510992045", "bodyText": "done", "author": "spena", "createdAt": "2020-10-23T16:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3558b6b22d2a37b8baa8ce8efb35ba878026cc58", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\nindex 3ad2bdd91d..4fd790a92c 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n\n@@ -148,14 +148,14 @@ public class AuthTest extends ApiTest {\n   }\n \n   @Override\n-  protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri,\n+  protected HttpResponse<Buffer> sendPostRequest(final WebClient client, final String uri,\n       final Buffer requestBody)\n       throws Exception {\n-    return sendRequestWithCreds(client, uri, requestBody, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n+    return sendPostRequestWithCreds(client, uri, requestBody, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n   }\n \n   @Override\n-  protected void sendRequest(\n+  protected void sendPostRequest(\n       final WebClient client,\n       final String uri,\n       final Consumer<HttpRequest<Buffer>> requestSender) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzY1OQ==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510557659", "bodyText": "nit: can we rename this to sendPostRequestWithCreds() in light of the new method above?", "author": "vcrfxia", "createdAt": "2020-10-23T02:20:05Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -415,6 +436,22 @@ private void shouldFailInsertRequest(final String username, final String passwor\n     validateError(expectedErrorCode, expectedMessage, insertsResponse.error);\n   }\n \n+  // auth header is omitted if username and password are null\n+  private static HttpResponse<Buffer> sendGetRequestWithCreds(\n+      final WebClient client,\n+      final String uri,\n+      final String username,\n+      final String password\n+  ) throws Exception {\n+    VertxCompletableFuture<HttpResponse<Buffer>> requestFuture = new VertxCompletableFuture<>();\n+    HttpRequest<Buffer> request = client.get(uri);\n+    if (username != null || password != null) {\n+      request = request.basicAuthentication(username, password);\n+    }\n+    request.send(requestFuture);\n+    return requestFuture.get();\n+  }\n+\n   private HttpResponse<Buffer> sendRequestWithCreds(", "originalCommit": "807260d12172929e67f270ed33768f3902309c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjAwNQ==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510992005", "bodyText": "Done", "author": "spena", "createdAt": "2020-10-23T16:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3558b6b22d2a37b8baa8ce8efb35ba878026cc58", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\nindex 3ad2bdd91d..4fd790a92c 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java\n\n@@ -452,17 +452,17 @@ public class AuthTest extends ApiTest {\n     return requestFuture.get();\n   }\n \n-  private HttpResponse<Buffer> sendRequestWithCreds(\n+  private HttpResponse<Buffer> sendPostRequestWithCreds(\n       final String uri,\n       final Buffer requestBody,\n       final String username,\n       final String password\n   ) throws Exception {\n-    return sendRequestWithCreds(client, uri, requestBody, username, password);\n+    return sendPostRequestWithCreds(client, uri, requestBody, username, password);\n   }\n \n   // auth header is omitted if username and password are null\n-  private static HttpResponse<Buffer> sendRequestWithCreds(\n+  private static HttpResponse<Buffer> sendPostRequestWithCreds(\n       final WebClient client,\n       final String uri,\n       final Buffer requestBody,\n"}}, {"oid": "3558b6b22d2a37b8baa8ce8efb35ba878026cc58", "url": "https://github.com/confluentinc/ksql/commit/3558b6b22d2a37b8baa8ce8efb35ba878026cc58", "message": "refactor: rename sendRequest() to sendPostRequest()", "committedDate": "2020-10-23T14:37:37Z", "type": "commit"}, {"oid": "5ea80d536d51ec8d6903bafbd1819ef4a3937525", "url": "https://github.com/confluentinc/ksql/commit/5ea80d536d51ec8d6903bafbd1819ef4a3937525", "message": "refactor: move KSQL_AUTHENTICATINO_SKIPT_PATHS and other minor fixes", "committedDate": "2020-10-23T14:45:57Z", "type": "commit"}, {"oid": "553fc189802891fd3138b824c5f2804102dfcd97", "url": "https://github.com/confluentinc/ksql/commit/553fc189802891fd3138b824c5f2804102dfcd97", "message": "fix: return a default ServiceContext when User is missing", "committedDate": "2020-10-23T20:12:51Z", "type": "commit"}, {"oid": "553fc189802891fd3138b824c5f2804102dfcd97", "url": "https://github.com/confluentinc/ksql/commit/553fc189802891fd3138b824c5f2804102dfcd97", "message": "fix: return a default ServiceContext when User is missing", "committedDate": "2020-10-23T20:12:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcxODY5Nw==", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r511718697", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // A user context is not necessary if a user context provider is not present or\n          \n          \n            \n                // the user principal is missing. The missing principal was already validated by the\n          \n          \n            \n                // Authentication and Authorization plugins before calling this method, which means the\n          \n          \n            \n                // missing principal is a valid connection. For those cases, we create a default service\n          \n          \n            \n                // context that the missing user can use.\n          \n          \n            \n                // A user context is not necessary if a user context provider is not present or\n          \n          \n            \n                // the user principal is missing. If a failed authentication attempt results in a missing principle,\n          \n          \n            \n                // then the authentication plugin will have already failed the connection before calling this method.\n          \n          \n            \n                // Therefore, if we've reached this method with a missing principle, then this must be a valid connection that does not require authentication. \n          \n          \n            \n                // For these cases, we create a default service\n          \n          \n            \n                // context that the missing user can use.", "author": "vcrfxia", "createdAt": "2020-10-26T04:51:19Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/DefaultKsqlSecurityContextProvider.java", "diffHunk": "@@ -57,7 +57,17 @@ public KsqlSecurityContext provide(final ApiSecurityContext apiSecurityContext)\n     final Optional<Principal> principal = apiSecurityContext.getPrincipal();\n     final Optional<String> authHeader = apiSecurityContext.getAuthToken();\n \n-    if (securityExtension == null || !securityExtension.getUserContextProvider().isPresent()) {\n+    // A user context is not necessary if a user context provider is not present or\n+    // the user principal is missing. The missing principal was already validated by the\n+    // Authentication and Authorization plugins before calling this method, which means the\n+    // missing principal is a valid connection. For those cases, we create a default service\n+    // context that the missing user can use.", "originalCommit": "553fc189802891fd3138b824c5f2804102dfcd97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50cbb758f8b4dec9343c1487107b49301a1381f6", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/DefaultKsqlSecurityContextProvider.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/DefaultKsqlSecurityContextProvider.java\nindex 70ca6d52d3..d0a2be1ec9 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/DefaultKsqlSecurityContextProvider.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/DefaultKsqlSecurityContextProvider.java\n\n@@ -57,11 +57,12 @@ public class DefaultKsqlSecurityContextProvider implements KsqlSecurityContextPr\n     final Optional<Principal> principal = apiSecurityContext.getPrincipal();\n     final Optional<String> authHeader = apiSecurityContext.getAuthToken();\n \n-    // A user context is not necessary if a user context provider is not present or\n-    // the user principal is missing. The missing principal was already validated by the\n-    // Authentication and Authorization plugins before calling this method, which means the\n-    // missing principal is a valid connection. For those cases, we create a default service\n-    // context that the missing user can use.\n+    // A user context is not necessary if a user context provider is not present or the user\n+    // principal is missing. If a failed authentication attempt results in a missing principle,\n+    // then the authentication plugin will have already failed the connection before calling\n+    // this method. Therefore, if we've reached this method with a missing principle, then this\n+    // must be a valid connection that does not require authentication.\n+    // For these cases, we create a default service context that the missing user can use.\n     final boolean requiresUserContext =\n         securityExtension != null\n             && securityExtension.getUserContextProvider().isPresent()\n"}}, {"oid": "50cbb758f8b4dec9343c1487107b49301a1381f6", "url": "https://github.com/confluentinc/ksql/commit/50cbb758f8b4dec9343c1487107b49301a1381f6", "message": "Update comment\n\nCo-authored-by: Victoria Xia <victoria.f.xia281@gmail.com>", "committedDate": "2020-10-26T15:12:05Z", "type": "commit"}, {"oid": "50cbb758f8b4dec9343c1487107b49301a1381f6", "url": "https://github.com/confluentinc/ksql/commit/50cbb758f8b4dec9343c1487107b49301a1381f6", "message": "Update comment\n\nCo-authored-by: Victoria Xia <victoria.f.xia281@gmail.com>", "committedDate": "2020-10-26T15:12:05Z", "type": "forcePushed"}]}