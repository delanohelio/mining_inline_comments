{"pr_number": 6474, "pr_title": "feat: new syntax to interact with session variables (define/undefine/show variables)", "pr_createdAt": "2020-10-20T17:59:37Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6474", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgyMjkzOA==", "url": "https://github.com/confluentinc/ksql/pull/6474#discussion_r509822938", "bodyText": "do you need to actually run through configure etc... or can you mock out the configured statements?", "author": "agavra", "createdAt": "2020-10-22T01:14:48Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListVariablesExecutorTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import io.confluent.ksql.rest.SessionProperties;\n+import io.confluent.ksql.rest.entity.KsqlEntity;\n+import io.confluent.ksql.rest.entity.VariablesList;\n+import io.confluent.ksql.rest.server.TemporaryEngine;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ListVariablesExecutorTest {\n+  @Rule\n+  public final TemporaryEngine engine = new TemporaryEngine();", "originalCommit": "177563a9c7f591deae8678f1ade747f59a3e2b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNDcyOA==", "url": "https://github.com/confluentinc/ksql/pull/6474#discussion_r509834728", "bodyText": "I copied most of the code from ListTopicsExecutorTest and ListPropertiesExecutorTest. But you're right, we don't need this engine. I'll change it with a mock.", "author": "spena", "createdAt": "2020-10-22T02:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgyMjkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "ec1c89dd0dc1542bdd722027b70436b0ef7a0c39", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListVariablesExecutorTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListVariablesExecutorTest.java\nindex 9f117f0363..07040c2de1 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListVariablesExecutorTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListVariablesExecutorTest.java\n\n@@ -18,27 +18,24 @@ package io.confluent.ksql.rest.server.execution;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.rest.SessionProperties;\n import io.confluent.ksql.rest.entity.KsqlEntity;\n import io.confluent.ksql.rest.entity.VariablesList;\n-import io.confluent.ksql.rest.server.TemporaryEngine;\n+import io.confluent.ksql.statement.ConfiguredStatement;\n import io.confluent.ksql.util.KsqlHostInfo;\n import java.net.URL;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Optional;\n import org.junit.Before;\n-import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.junit.MockitoJUnitRunner;\n \n @RunWith(MockitoJUnitRunner.class)\n public class ListVariablesExecutorTest {\n-  @Rule\n-  public final TemporaryEngine engine = new TemporaryEngine();\n-\n   private SessionProperties sessionProperties;\n \n   @Before\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgyMzI2OQ==", "url": "https://github.com/confluentinc/ksql/pull/6474#discussion_r509823269", "bodyText": "should we add a test on adding duplicates? we should also check to make sure that case insensitive duplicates are stilled rejected", "author": "agavra", "createdAt": "2020-10-22T01:15:58Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/VariableExecutorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.mock;\n+\n+import io.confluent.ksql.parser.exception.ParseFailedException;\n+import io.confluent.ksql.rest.SessionProperties;\n+import io.confluent.ksql.rest.entity.KsqlEntity;\n+import io.confluent.ksql.rest.entity.WarningEntity;\n+import io.confluent.ksql.rest.server.TemporaryEngine;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class VariableExecutorTest {\n+  @Rule\n+  public final TemporaryEngine engine = new TemporaryEngine();\n+\n+  private SessionProperties sessionProperties;\n+\n+  @Before\n+  public void setup() {\n+    sessionProperties = new SessionProperties(\n+        new HashMap<>(), mock(KsqlHostInfo.class), mock(URL.class), false);\n+  }\n+\n+  private void executeDefineVariable(final String sql) {\n+    final Optional<KsqlEntity> response = CustomExecutors.DEFINE_VARIABLE.execute(\n+        engine.configure(sql),\n+        sessionProperties,\n+        engine.getEngine(),\n+        engine.getServiceContext()\n+    );\n+    assertThat(response, is(Optional.empty()));\n+  }\n+\n+  private Optional<KsqlEntity> executeUndefineVariable(final String sql) {\n+    return CustomExecutors.UNDEFINE_VARIABLE.execute(\n+        engine.configure(sql),\n+        sessionProperties,\n+        engine.getEngine(),\n+        engine.getServiceContext()\n+    );\n+  }\n+\n+  @Test\n+  public void shouldSetVariables() {\n+    // When:\n+    executeDefineVariable(\"DEFINE var1 = 'John Peter';\");\n+    executeDefineVariable(\"DEFINE var2 = '''John Peter''';\");\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.size(), is(2));\n+    assertThat(variablesMap, hasEntry(\"var1\", \"John Peter\"));\n+    assertThat(variablesMap, hasEntry(\"var2\", \"'John Peter'\"));\n+  }\n+\n+  @Test\n+  public void shouldSetCaseInsensitiveVariables() {\n+    // When:\n+    executeDefineVariable(\"DEFINE A = 'val1';\");\n+    executeDefineVariable(\"DEFINE b = 'val2';\");\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.containsKey(\"a\"), is(true));\n+    assertThat(variablesMap.get(\"a\"), is(\"val1\"));\n+    assertThat(variablesMap.containsKey(\"A\"), is(true));\n+    assertThat(variablesMap.get(\"A\"), is(\"val1\"));\n+    assertThat(variablesMap.containsKey(\"b\"), is(true));\n+    assertThat(variablesMap.get(\"b\"), is(\"val2\"));\n+    assertThat(variablesMap.containsKey(\"B\"), is(true));\n+    assertThat(variablesMap.get(\"B\"), is(\"val2\"));\n+  }\n+\n+  @Test\n+  public void shouldUnsetVariables() {\n+    // Given:\n+    sessionProperties.setVariable(\"var1\", \"1\");\n+    sessionProperties.setVariable(\"var2\", \"2\");\n+\n+    // When:\n+    final Optional<KsqlEntity> response = executeUndefineVariable(\"UNDEFINE var1;\");\n+    assertThat(response, is(Optional.empty()));\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.size(), is(1));\n+    assertThat(variablesMap, hasEntry(\"var2\", \"2\"));\n+  }\n+\n+  @Test\n+  public void shouldUnsetCaseInsensitiveVariables() {\n+    // Given:\n+    sessionProperties.setVariable(\"VAR1\", \"1\");\n+\n+    // When:\n+    final Optional<KsqlEntity> response = executeUndefineVariable(\"UNDEFINE var1;\");\n+    assertThat(response, is(Optional.empty()));\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.size(), is(0));\n+  }\n+\n+  @Test\n+  public void shouldReturnWarningWhenUndefineAnUnknownVariable() {\n+    // When:\n+    final KsqlEntity response = executeUndefineVariable(\"UNDEFINE var1;\").get();\n+\n+    // Then:\n+    assertThat(((WarningEntity)response).getMessage(),\n+        containsString(\"Cannot undefine variable 'var1' which was never defined\"));\n+  }\n+\n+  @Test\n+  public void shouldThrowOnInvalidValues() {", "originalCommit": "177563a9c7f591deae8678f1ade747f59a3e2b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNjI5Ng==", "url": "https://github.com/confluentinc/ksql/pull/6474#discussion_r509836296", "bodyText": "Variables will be overridden (no rejected) if an existing case insensitive variable exists. I'll add a test case that verifies that.\nIt will allow us to do this:\nDEFINE var1 = '1';\nDEFINE VAR1 = '2';\nDEFINE vAr1 = '3'; // latest update", "author": "spena", "createdAt": "2020-10-22T02:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgyMzI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ec1c89dd0dc1542bdd722027b70436b0ef7a0c39", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/VariableExecutorTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/VariableExecutorTest.java\nindex a3bf8c5128..f473d8cb8e 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/VariableExecutorTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/VariableExecutorTest.java\n\n@@ -134,6 +134,20 @@ public class VariableExecutorTest {\n     assertThat(variablesMap.size(), is(0));\n   }\n \n+  @Test\n+  public void shouldOverrideCaseInsensitiveVariables() {\n+    // When:\n+    executeDefineVariable(\"DEFINE var1 = '1';\");\n+    executeDefineVariable(\"DEFINE VAR1 = '2';\");\n+    executeDefineVariable(\"DEFINE vAr1 = '3';\"); // latest update\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.size(), is(1));\n+    assertThat(variablesMap.containsKey(\"var1\"), is(true));\n+    assertThat(variablesMap.get(\"var1\"), is(\"3\"));\n+  }\n+\n   @Test\n   public void shouldReturnWarningWhenUndefineAnUnknownVariable() {\n     // When:\n"}}, {"oid": "ec1c89dd0dc1542bdd722027b70436b0ef7a0c39", "url": "https://github.com/confluentinc/ksql/commit/ec1c89dd0dc1542bdd722027b70436b0ef7a0c39", "message": "fix: address Almog's feedback", "committedDate": "2020-10-22T11:26:12Z", "type": "forcePushed"}, {"oid": "57a35932131adc526633d68256bc3c8235aa01e2", "url": "https://github.com/confluentinc/ksql/commit/57a35932131adc526633d68256bc3c8235aa01e2", "message": "feat: add syntax to DEFINE/UNDEFINE session variables", "committedDate": "2020-10-22T17:59:50Z", "type": "commit"}, {"oid": "19433b185281d4c6e4fb7826a17103dbe4c5a45c", "url": "https://github.com/confluentinc/ksql/commit/19433b185281d4c6e4fb7826a17103dbe4c5a45c", "message": "feat: syntax SHOW VARIABLES to print session variables", "committedDate": "2020-10-22T17:59:50Z", "type": "commit"}, {"oid": "a9a9ba8f618e004c58e3512a6a0f06d2865bc7aa", "url": "https://github.com/confluentinc/ksql/commit/a9a9ba8f618e004c58e3512a6a0f06d2865bc7aa", "message": "fix: address Almog's feedback", "committedDate": "2020-10-22T17:59:50Z", "type": "commit"}, {"oid": "a9a9ba8f618e004c58e3512a6a0f06d2865bc7aa", "url": "https://github.com/confluentinc/ksql/commit/a9a9ba8f618e004c58e3512a6a0f06d2865bc7aa", "message": "fix: address Almog's feedback", "committedDate": "2020-10-22T17:59:50Z", "type": "forcePushed"}]}