{"pr_number": 4986, "pr_title": "Primary keys", "pr_createdAt": "2020-04-03T11:36:47Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4986", "timeline": [{"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469", "url": "https://github.com/confluentinc/ksql/commit/f8a869a64a0707a8deaf2f8357e404ed274c4469", "message": "feat: support `PRIMARY KEY` on table vs `KEY` on streams\n\nfixes: https://github.com/confluentinc/ksql/issues/3681\n\nThe commit introduces `PRIMARY KEY` columns into the ksqlDB syntax for tables. Streams will continue to have `KEY` columns. For example,\n\n```sql\nCREATE TABLE ORDERS (ID BIGINT PRIMARY KEY, USER_ID BIGINT, ...\n--vs\nCREATE STREAM ORDER_UPDATES (ID BIGINT KEY, USER_ID BIGINT, ...\n```\n\nThis change in syntax differentiates the key handling semantics for tables vs streams:\n\nA ksqlDB TABLE works much like tables in other SQL systems. Each row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL.\nA message in the underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the table,\nor _delete_ the row if the message's value is NULL, as long as the earlier row does not have a later timestamp / `ROWTIME`.\n\nA ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique. A stream can store its data in either `KEY` or `VALUE` columns.\nBoth `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same key.\n\nThe table below contrasts key handling for streams and tables:\n\n|                          |  STREAM                                                       | TABLE                                                             |\n| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\n| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\n| NON NULL key constraint  | No                                                            | Yes                                                               |\n:                          :                                                               : Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored :\n| Unique key constraint    | No                                                            | Yes                                                               |\n:                          : Messages with the same key as another have no special meaning : Later messages with the same key _replace_ earlier                :\n| Tombstones               | No                                                            | Yes                                                               |\n:                          : Messages with NULL values are ignored                         : NULL message values are treated as a _tombstone_                  :\n:                          :                                                               : Any existing row with a matching key is deleted                   :\n| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |", "committedDate": "2020-04-03T11:29:39Z", "type": "commit"}, {"oid": "81d7b4923e4ee3effd0477068169ad395e5bae41", "url": "https://github.com/confluentinc/ksql/commit/81d7b4923e4ee3effd0477068169ad395e5bae41", "message": "docs: doc updates for PRIMITIVE KEYS", "committedDate": "2020-04-03T11:30:15Z", "type": "commit"}, {"oid": "a9f9abbbbe238b508d8c2f12cdd1fc14f3376a04", "url": "https://github.com/confluentinc/ksql/commit/a9f9abbbbe238b508d8c2f12cdd1fc14f3376a04", "message": "test: test updates for primitive keys", "committedDate": "2020-04-03T11:31:41Z", "type": "commit"}, {"oid": "c740468d4efe6e07e50ec670f6ecf323c045e67c", "url": "https://github.com/confluentinc/ksql/commit/c740468d4efe6e07e50ec670f6ecf323c045e67c", "message": "chore: updated historical query plans", "committedDate": "2020-04-03T11:32:10Z", "type": "commit"}, {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05", "url": "https://github.com/confluentinc/ksql/commit/ce5e8f0b1033ce1ed0b34809101b57da87407d05", "message": "docs: fix table layout", "committedDate": "2020-04-03T11:38:51Z", "type": "commit"}, {"oid": "42ad42f7a7328ebeebff1caa94cc513af980d9ff", "url": "https://github.com/confluentinc/ksql/commit/42ad42f7a7328ebeebff1caa94cc513af980d9ff", "message": "chore: use 'primary key' when output schemas in CLI", "committedDate": "2020-04-06T13:13:00Z", "type": "commit"}, {"oid": "8fa7128a490c8ae76fccce719a89e92fa385654e", "url": "https://github.com/confluentinc/ksql/commit/8fa7128a490c8ae76fccce719a89e92fa385654e", "message": "docs: jim's requested changes", "committedDate": "2020-04-06T13:21:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzg2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404453861", "bodyText": "nit: we should start with the error message (Streams do not support ...) and then give what failed (thinking about cases where only number of chars are returned)", "author": "agavra", "createdAt": "2020-04-06T23:45:06Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java", "diffHunk": "@@ -83,4 +88,25 @@ public String toString() {\n         .add(\"properties\", getProperties())\n         .toString();\n   }\n+\n+  private static void throwOnPrimaryKeys(final TableElements elements) {\n+    final String badEs = elements.stream()\n+        .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.KEY)\n+        .map(badE ->\n+            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n+        .collect(Collectors.joining(System.lineSeparator()));\n+\n+    if (!badEs.isEmpty()) {\n+      throw new KsqlException(\"The following columns are defined as PRIMARY KEY columns. \"\n+          + \"Streams do not support PRIMARY KEY columns, only KEY columns.\"", "originalCommit": "f8a869a64a0707a8deaf2f8357e404ed274c4469", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4MTA3Ng==", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404681076", "bodyText": "done", "author": "big-andy-coates", "createdAt": "2020-04-07T09:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "18f44b67d5b7b25aa10a9ecfddaf2d3d9ed80d9f", "chunk": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java\nindex bb361a21bb..6f59d8f34f 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java\n\n@@ -90,23 +89,20 @@ public class CreateStream extends CreateSource implements ExecutableDdlStatement\n   }\n \n   private static void throwOnPrimaryKeys(final TableElements elements) {\n-    final String badEs = elements.stream()\n+    final Optional<TableElement> wrongKey = elements.stream()\n         .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.KEY)\n-        .map(badE ->\n-            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n-        .collect(Collectors.joining(System.lineSeparator()));\n+        .findFirst();\n \n-    if (!badEs.isEmpty()) {\n-      throw new KsqlException(\"The following columns are defined as PRIMARY KEY columns. \"\n-          + \"Streams do not support PRIMARY KEY columns, only KEY columns.\"\n-          + \" Please remove the `PRIMARY` key word. Columns:\"\n-          + System.lineSeparator()\n-          + badEs\n-          + System.lineSeparator()\n-          + \"Streams have KEYs, which have no uniqueness or NON NULL constraints.\"\n-          + System.lineSeparator()\n-          + \"Tables have PRIMARY KEYs, which are unique and NON NULL.\"\n+    wrongKey.ifPresent(col -> {\n+      final String loc = col.getLocation().map(NodeLocation::asPrefix).orElse(\"\");\n+      throw new KsqlException(\n+          loc + \"Column \" + col.getName() + \" is a 'PRIMARY KEY' column: \"\n+              + \"please use 'KEY' for streams.\"\n+              + System.lineSeparator()\n+              + \"Tables have PRIMARY KEYs, which are unique and NON NULL.\"\n+              + System.lineSeparator()\n+              + \"Streams have KEYs, which have no uniqueness or NON NULL constraints.\"\n       );\n-    }\n+    });\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzk5MQ==", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404453991", "bodyText": "ditto", "author": "agavra", "createdAt": "2020-04-06T23:45:27Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java", "diffHunk": "@@ -83,4 +88,25 @@ public String toString() {\n         .add(\"properties\", getProperties())\n         .toString();\n   }\n+\n+  private static void throwOnNonPrimaryKeys(final TableElements elements) {\n+    final String badEs = elements.stream()\n+        .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.PRIMARY_KEY)\n+        .map(badE ->\n+            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n+        .collect(Collectors.joining(System.lineSeparator()));\n+\n+    if (!badEs.isEmpty()) {\n+      throw new KsqlException(\"The following columns are defined as KEY columns. \"\n+          + \"Tables do not support KEY columns, only PRIMARY KEY columns.\"", "originalCommit": "f8a869a64a0707a8deaf2f8357e404ed274c4469", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4MTExMg==", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404681112", "bodyText": "done", "author": "big-andy-coates", "createdAt": "2020-04-07T09:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "18f44b67d5b7b25aa10a9ecfddaf2d3d9ed80d9f", "chunk": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java\nindex 6d52f59ad6..cccc9aa0ac 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java\n\n@@ -90,23 +89,20 @@ public class CreateTable extends CreateSource implements ExecutableDdlStatement\n   }\n \n   private static void throwOnNonPrimaryKeys(final TableElements elements) {\n-    final String badEs = elements.stream()\n+    final Optional<TableElement> wrongKey = elements.stream()\n         .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.PRIMARY_KEY)\n-        .map(badE ->\n-            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n-        .collect(Collectors.joining(System.lineSeparator()));\n+        .findFirst();\n \n-    if (!badEs.isEmpty()) {\n-      throw new KsqlException(\"The following columns are defined as KEY columns. \"\n-          + \"Tables do not support KEY columns, only PRIMARY KEY columns.\"\n-          + \" Please add the `PRIMARY` key word. Columns:\"\n-          + System.lineSeparator()\n-          + badEs\n-          + System.lineSeparator()\n-          + \"Tables have PRIMARY KEYs, which are unique and NON NULL.\"\n-          + System.lineSeparator()\n-          + \"Streams have KEYs, which have no uniqueness or NON NULL constraints.\"\n+    wrongKey.ifPresent(col -> {\n+      final String loc = col.getLocation().map(NodeLocation::asPrefix).orElse(\"\");\n+      throw new KsqlException(\n+          loc + \"Column \" + col.getName() + \" is a 'KEY' column: \"\n+              + \"please use 'PRIMARY KEY' for tables.\"\n+              + System.lineSeparator()\n+              + \"Tables have PRIMARY KEYs, which are unique and NON NULL.\"\n+              + System.lineSeparator()\n+              + \"Streams have KEYs, which have no uniqueness or NON NULL constraints.\"\n       );\n-    }\n+    });\n   }\n }\n"}}, {"oid": "18f44b67d5b7b25aa10a9ecfddaf2d3d9ed80d9f", "url": "https://github.com/confluentinc/ksql/commit/18f44b67d5b7b25aa10a9ecfddaf2d3d9ed80d9f", "message": "chore: updated error message", "committedDate": "2020-04-07T09:41:44Z", "type": "commit"}, {"oid": "ebfc67d4077af9999cdd8e382b5cf5f9f5532164", "url": "https://github.com/confluentinc/ksql/commit/ebfc67d4077af9999cdd8e382b5cf5f9f5532164", "message": "chore: updated error message", "committedDate": "2020-04-07T09:46:26Z", "type": "commit"}, {"oid": "d38cf3e83752618a04d7c7afc92b9b498e43ba6f", "url": "https://github.com/confluentinc/ksql/commit/d38cf3e83752618a04d7c7afc92b9b498e43ba6f", "message": "chore: fix findbugs in test", "committedDate": "2020-04-07T10:27:14Z", "type": "commit"}]}