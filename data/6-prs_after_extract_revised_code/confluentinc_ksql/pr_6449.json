{"pr_number": 6449, "pr_title": "chore: clean up SR key intergration", "pr_createdAt": "2020-10-16T17:43:42Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6449", "timeline": [{"oid": "437ef4bf08a9020d23f315306711d8e090e473aa", "url": "https://github.com/confluentinc/ksql/commit/437ef4bf08a9020d23f315306711d8e090e473aa", "message": "chore: clean up SR key intergration", "committedDate": "2020-10-16T17:58:53Z", "type": "commit"}, {"oid": "437ef4bf08a9020d23f315306711d8e090e473aa", "url": "https://github.com/confluentinc/ksql/commit/437ef4bf08a9020d23f315306711d8e090e473aa", "message": "chore: clean up SR key intergration", "committedDate": "2020-10-16T17:58:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg0NQ==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506760845", "bodyText": "Is this functional?", "author": "vcrfxia", "createdAt": "2020-10-16T23:25:04Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/topic/TopicDeleteInjector.java", "diffHunk": "@@ -100,26 +98,18 @@ public TopicDeleteInjector(\n \n     if (source != null) {\n       checkTopicRefs(source);\n-      try {\n-        ExecutorUtil.executeWithRetries(\n-            () -> topicClient.deleteTopics(ImmutableList.of(source.getKafkaTopicName())),\n-            ExecutorUtil.RetryBehaviour.ALWAYS);\n-      } catch (final Exception e) {\n-        throw new RuntimeException(\"Could not delete the corresponding kafka topic: \"\n-                + source.getKafkaTopicName(), e);\n-      }\n \n+      deleteTopic(source);\n+\n+      final Closer closer = Closer.create();\n+      deleteValueSubject(source);\n+      deleteKeySubject(source);\n       try {\n-        final Format valueFormat = FormatFactory\n-            .fromName(source.getKsqlTopic().getValueFormat().getFormat());\n-\n-        if (valueFormat.supportsFeature(SerdeFeature.SCHEMA_INFERENCE)) {\n-          SchemaRegistryUtil.deleteSubjectWithRetries(\n-                  schemaRegistryClient,\n-                  source.getKafkaTopicName() + KsqlConstants.SCHEMA_REGISTRY_VALUE_SUFFIX);\n-        }\n+        closer.close();", "originalCommit": "437ef4bf08a9020d23f315306711d8e090e473aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MTkzMA==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506761930", "bodyText": "what do you mean by \"functional\"? If by \"does it do anything\" the answer is yes - it will first close all of the closeables registered, and then it'll throw the first non-suppressed error that it encountered", "author": "agavra", "createdAt": "2020-10-16T23:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI0MzMxMw==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r507243313", "bodyText": "Where are closeables registered?", "author": "vcrfxia", "createdAt": "2020-10-18T23:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0Njg4Mw==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r507846883", "bodyText": "\ud83e\udd26 I think something got lost in my merge. Thanks for catching this...", "author": "agavra", "createdAt": "2020-10-19T15:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NDI4MA==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r507854280", "bodyText": "#6461", "author": "agavra", "createdAt": "2020-10-19T15:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg1OQ==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506760859", "bodyText": "We're planning on enabling Avro keys soon, right? We should remember to pull these out when we do.", "author": "vcrfxia", "createdAt": "2020-10-16T23:25:09Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/integration/EndToEndIntegrationTest.java", "diffHunk": "@@ -123,6 +123,10 @@\n       .withAdditionalConfig(\n           KsqlConfig.SCHEMA_REGISTRY_URL_PROPERTY,\n           \"http://foo:8080\")\n+      .withAdditionalConfig(\n+          KsqlConfig.KSQL_KEY_FORMAT_ENABLED,", "originalCommit": "437ef4bf08a9020d23f315306711d8e090e473aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MTU4Nw==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506761587", "bodyText": "Added a task to the project.", "author": "agavra", "createdAt": "2020-10-16T23:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg3Ng==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506760876", "bodyText": "nit (not your code): can we update the error message here to say Could not serialize value? To me \"row\" could refer to either the key or the value. Seems good to be more specific when we can.", "author": "vcrfxia", "createdAt": "2020-10-16T23:25:12Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -292,29 +299,39 @@ private void throwIfDisabled(final KsqlConfig config) {\n     try {\n       return valueSerde.serializer().serialize(topicName, row);\n     } catch (final Exception e) {\n-      final Format valueFormat = FormatFactory\n-          .fromName(dataSource.getKsqlTopic().getValueFormat().getFormat());\n-      if (valueFormat.supportsFeature(SerdeFeature.SCHEMA_INFERENCE)) {\n-        final Throwable rootCause = ExceptionUtils.getRootCause(e);\n-        if (rootCause instanceof RestClientException) {\n-          switch (((RestClientException) rootCause).getStatus()) {\n-            case HttpStatus.SC_UNAUTHORIZED:\n-            case HttpStatus.SC_FORBIDDEN:\n-              throw new KsqlException(String.format(\n-                  \"Not authorized to write Schema Registry subject: [%s]\",\n-                  topicName + KsqlConstants.SCHEMA_REGISTRY_VALUE_SUFFIX\n-              ));\n-            default:\n-              break;\n-          }\n-        }\n-      }\n-\n+      maybeThrowSchemaRegistryAuthError(\n+          FormatFactory.fromName(dataSource.getKsqlTopic().getValueFormat().getFormat()),\n+          topicName,\n+          false,\n+          e);\n       LOG.error(\"Could not serialize row.\", e);", "originalCommit": "437ef4bf08a9020d23f315306711d8e090e473aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MjE5NQ==", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506762195", "bodyText": "Since I need to update the other PR and this one is green, i'm going to just go ahead and merge and do it in #6452", "author": "agavra", "createdAt": "2020-10-16T23:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg3Ng=="}], "type": "inlineReview", "revised_code": null}]}