{"pr_number": 5983, "pr_title": "fix: Uses pull query metrics for all paths, not just /query", "pr_createdAt": "2020-08-11T18:49:54Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5983", "timeline": [{"oid": "33f7b5c0edc91780b5c88bf919beca2e00bd2cc3", "url": "https://github.com/confluentinc/ksql/commit/33f7b5c0edc91780b5c88bf919beca2e00bd2cc3", "message": "fix: Uses pull query metrics for all paths, not just /query", "committedDate": "2020-08-11T18:30:18Z", "type": "commit"}, {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "url": "https://github.com/confluentinc/ksql/commit/b0538fd6e1ca329a326d8d968897317a7c7551d9", "message": "Style", "committedDate": "2020-08-11T23:04:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxOTUyOQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r468919529", "bodyText": "What about the existing streamedQueryResource.closeMetrics() call?", "author": "apurvam", "createdAt": "2020-08-11T23:26:25Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -466,7 +468,7 @@ public void notifyTerminated() {\n   public void shutdown() {\n     log.info(\"ksqlDB shutdown called\");\n     try {\n-      streamedQueryResource.closeMetrics();\n+      pullQueryExecutor.closeMetrics();", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyMDk2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r468920961", "bodyText": "I moved the method to pullQueryExecutor and then just call that.  Same logic being called, just in a different place.", "author": "AlanConfluent", "createdAt": "2020-08-11T23:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxOTUyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r468948645", "bodyText": "There was a reason for these measurements to be in the StreamedQueryResource. They measure a more realistic latency that accounts also for query parsing etc. , basically all that happens before the request reaches the PullQueryExecutor.", "author": "vpapavas", "createdAt": "2020-08-12T01:10:10Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +229,21 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n           executionContext,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTQ1OA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469149458", "bodyText": "+1", "author": "big-andy-coates", "createdAt": "2020-08-12T10:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTg3Mw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469581873", "bodyText": "My original thinking was that such CPU bound things like parsing should be an order of magnitude or two faster than IO like reading from disk or network.  I do recall that in earlier benchmarking, we didn't seem to be IO bound, but that's probably a separate issue.\nIf what we really want is latency for the whole endpoint, which I agree is preferable, it seems like it would be good to have a more generic latency metric for all resources -- that way we don't special case this.  Not sure if that's possible with Vert.x, but I imagine it is.  So as to keep consistency with existing metric naming and make it work with the websocket (which is probably harder to make generic), I'll stick to the pull query use case for now.  Ok, I'll change this part back and add in the web socket.", "author": "AlanConfluent", "createdAt": "2020-08-12T22:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1MTMxOQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472051319", "bodyText": "That's a good point - might be worth asking @purplefox and/or googling about vert.x to see if there is a generic way to get metrics on all requests.  I know this is possible in Jetty, but don't know vert.x.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8720613ef8602449040b9a40aa9013f702a60a52", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex 7bf2b4887c..e6f04e6809 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -231,18 +232,14 @@ public final class PullQueryExecutor {\n \n       final PullQueryResult result = handlePullQuery(\n           statement,\n-          executionContext,\n+          ksqlEngine,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n \n-      if (pullQueryMetrics.isPresent()) {\n-        //Record latency at microsecond scale\n-        final double latency = (time.nanoseconds() - startTime) / 1000f;\n-        pullQueryMetrics.get().recordLatency(latency);\n-        pullQueryMetrics.get().recordRate(1);\n-      }\n+      pullQueryMetrics.ifPresent(metrics ->\n+          metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));\n       return result;\n     } catch (final Exception e) {\n       pullQueryMetrics.ifPresent(metrics -> metrics.recordErrorRate(1));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODQzNg==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469148436", "bodyText": "nit: can't be null, so:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Boolean collectMetrics = ksqlConfig.getBoolean(\n          \n          \n            \n                final boolean collectMetrics = ksqlConfig.getBoolean(", "author": "big-andy-coates", "createdAt": "2020-08-12T10:02:08Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -698,8 +700,16 @@ static KsqlRestApplication buildApplication(\n     final RoutingFilterFactory routingFilterFactory = initializeRoutingFilterFactory(ksqlConfig,\n         heartbeatAgent, lagReportingAgent);\n \n+    final Boolean collectMetrics = ksqlConfig.getBoolean(", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2MjU4OQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469662589", "bodyText": "Removed temp variable", "author": "AlanConfluent", "createdAt": "2020-08-13T02:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8720613ef8602449040b9a40aa9013f702a60a52", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\nindex 52e067b732..371aff72db 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n\n@@ -700,16 +698,8 @@ public final class KsqlRestApplication implements Executable {\n     final RoutingFilterFactory routingFilterFactory = initializeRoutingFilterFactory(ksqlConfig,\n         heartbeatAgent, lagReportingAgent);\n \n-    final Boolean collectMetrics = ksqlConfig.getBoolean(\n-        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n-    final Optional<PullQueryExecutorMetrics> pullQueryMetrics = collectMetrics\n-        ? Optional.of(new PullQueryExecutorMetrics(\n-        ksqlEngine.getServiceId(),\n-        ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n-        : empty();\n-\n     final PullQueryExecutor pullQueryExecutor = new PullQueryExecutor(\n-        ksqlEngine, routingFilterFactory, ksqlConfig, pullQueryMetrics);\n+        ksqlEngine, routingFilterFactory, ksqlConfig);\n \n     final DenyListPropertyValidator denyListPropertyValidator = new DenyListPropertyValidator(\n         ksqlConfig.getList(KsqlConfig.KSQL_PROPERTIES_OVERRIDES_DENYLIST));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODk3MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469148970", "bodyText": "Can we move this into the PullQueryExecutor constructor please, given its already being passed the ksqlConfig as a parameter?", "author": "big-andy-coates", "createdAt": "2020-08-12T10:03:11Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -698,8 +700,16 @@ static KsqlRestApplication buildApplication(\n     final RoutingFilterFactory routingFilterFactory = initializeRoutingFilterFactory(ksqlConfig,\n         heartbeatAgent, lagReportingAgent);\n \n+    final Boolean collectMetrics = ksqlConfig.getBoolean(\n+        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n+    final Optional<PullQueryExecutorMetrics> pullQueryMetrics = collectMetrics\n+        ? Optional.of(new PullQueryExecutorMetrics(\n+        ksqlEngine.getServiceId(),\n+        ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n+        : empty();\n+", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2MjQ5MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469662490", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-13T02:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "8720613ef8602449040b9a40aa9013f702a60a52", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\nindex 52e067b732..371aff72db 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java\n\n@@ -700,16 +698,8 @@ public final class KsqlRestApplication implements Executable {\n     final RoutingFilterFactory routingFilterFactory = initializeRoutingFilterFactory(ksqlConfig,\n         heartbeatAgent, lagReportingAgent);\n \n-    final Boolean collectMetrics = ksqlConfig.getBoolean(\n-        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n-    final Optional<PullQueryExecutorMetrics> pullQueryMetrics = collectMetrics\n-        ? Optional.of(new PullQueryExecutorMetrics(\n-        ksqlEngine.getServiceId(),\n-        ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n-        : empty();\n-\n     final PullQueryExecutor pullQueryExecutor = new PullQueryExecutor(\n-        ksqlEngine, routingFilterFactory, ksqlConfig, pullQueryMetrics);\n+        ksqlEngine, routingFilterFactory, ksqlConfig);\n \n     final DenyListPropertyValidator denyListPropertyValidator = new DenyListPropertyValidator(\n         ksqlConfig.getList(KsqlConfig.KSQL_PROPERTIES_OVERRIDES_DENYLIST));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTA4MQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469149081", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-08-12T10:03:27Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -139,17 +140,22 @@\n   private final KsqlExecutionContext executionContext;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n+  private final Time time;\n \n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n-      final KsqlConfig ksqlConfig\n+      final KsqlConfig ksqlConfig,\n+      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n   ) {\n     this.executionContext = Objects.requireNonNull(executionContext, \"executionContext\");\n     this.routingFilterFactory =\n         Objects.requireNonNull(routingFilterFactory, \"routingFilterFactory\");\n     this.rateLimiter = RateLimiter.create(ksqlConfig.getInt(\n         KsqlConfig.KSQL_QUERY_PULL_MAX_QPS_CONFIG));\n+    this.pullQueryMetrics = pullQueryMetrics;", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2MjQyNQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469662425", "bodyText": "I now create it here rather than pass it in.", "author": "AlanConfluent", "createdAt": "2020-08-13T02:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8720613ef8602449040b9a40aa9013f702a60a52", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex 7bf2b4887c..e6f04e6809 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -137,25 +138,25 @@ public final class PullQueryExecutor {\n   private static final String VALID_WINDOW_BOUNDS_TYPES_STRING =\n       GrammaticalJoiner.and().join(VALID_WINDOW_BOUNDS_TYPES);\n \n-  private final KsqlExecutionContext executionContext;\n+  private final KsqlEngine ksqlEngine;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n   private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n-  private final Time time;\n \n   public PullQueryExecutor(\n-      final KsqlExecutionContext executionContext,\n+      final KsqlEngine ksqlEngine,\n       final RoutingFilterFactory routingFilterFactory,\n-      final KsqlConfig ksqlConfig,\n-      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n+      final KsqlConfig ksqlConfig\n   ) {\n-    this.executionContext = Objects.requireNonNull(executionContext, \"executionContext\");\n+    this.ksqlEngine = Objects.requireNonNull(ksqlEngine, \"ksqlEngine\");\n     this.routingFilterFactory =\n         Objects.requireNonNull(routingFilterFactory, \"routingFilterFactory\");\n     this.rateLimiter = RateLimiter.create(ksqlConfig.getInt(\n         KsqlConfig.KSQL_QUERY_PULL_MAX_QPS_CONFIG));\n-    this.pullQueryMetrics = pullQueryMetrics;\n-    this.time = Time.SYSTEM;\n+    this.pullQueryMetrics = ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED)\n+        ? Optional.of(new PullQueryExecutorMetrics(ksqlEngine.getServiceId(),\n+        ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n+        : Optional.empty();\n   }\n \n   @SuppressWarnings(\"unused\") // Needs to match validator API.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1Mjc5MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469152790", "bodyText": "Any reason this can't be pulled into PullQueryExecutorMetrics?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (pullQueryMetrics.isPresent()) {\n          \n          \n            \n                    //Record latency at microsecond scale\n          \n          \n            \n                    final double latency = (time.nanoseconds() - startTime) / 1000f;\n          \n          \n            \n                    pullQueryMetrics.get().recordLatency(latency);\n          \n          \n            \n                    pullQueryMetrics.get().recordRate(1);\n          \n          \n            \n                  }\n          \n          \n            \n                  pullQueryMetrics\n          \n          \n            \n                          .ifPresent(collector -> collector.recordLatency(time.nanoseconds() - startTime));\n          \n      \n    \n    \n  \n\nWhere recordLatency becomes:\npublic void recordLatency(final long nanoSeconds) {\n    //Record latency at microsecond scale\n    final double latency = TimeUnit.NANOSECONDS.toMillis(nanoSeconds);\n    latencySensor.record(latency);\n    requestRateSensor.record(1);\n  }\nAnd recordRate can be deleted.", "author": "big-andy-coates", "createdAt": "2020-08-12T10:10:33Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +229,21 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n           executionContext,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+\n+      if (pullQueryMetrics.isPresent()) {\n+        //Record latency at microsecond scale\n+        final double latency = (time.nanoseconds() - startTime) / 1000f;\n+        pullQueryMetrics.get().recordLatency(latency);\n+        pullQueryMetrics.get().recordRate(1);\n+      }", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNzQ2MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469627460", "bodyText": "Done.  Also removed recordRate", "author": "AlanConfluent", "createdAt": "2020-08-13T00:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1Mjc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "8720613ef8602449040b9a40aa9013f702a60a52", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex 7bf2b4887c..e6f04e6809 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -231,18 +232,14 @@ public final class PullQueryExecutor {\n \n       final PullQueryResult result = handlePullQuery(\n           statement,\n-          executionContext,\n+          ksqlEngine,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n \n-      if (pullQueryMetrics.isPresent()) {\n-        //Record latency at microsecond scale\n-        final double latency = (time.nanoseconds() - startTime) / 1000f;\n-        pullQueryMetrics.get().recordLatency(latency);\n-        pullQueryMetrics.get().recordRate(1);\n-      }\n+      pullQueryMetrics.ifPresent(metrics ->\n+          metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));\n       return result;\n     } catch (final Exception e) {\n       pullQueryMetrics.ifPresent(metrics -> metrics.recordErrorRate(1));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1MzExMA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469153110", "bodyText": "pullQueryMetrics is Optional. It should never be null`.", "author": "big-andy-coates", "createdAt": "2020-08-12T10:11:11Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -248,6 +262,12 @@ void checkRateLimit() {\n     }\n   }\n \n+  public void closeMetrics() {\n+    if (pullQueryMetrics != null) {", "originalCommit": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNzU5Mw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469627593", "bodyText": "I agree, should have caught that.  This was just moved code.", "author": "AlanConfluent", "createdAt": "2020-08-13T00:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1MzExMA=="}], "type": "inlineReview", "revised_code": {"commit": "8720613ef8602449040b9a40aa9013f702a60a52", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex 7bf2b4887c..e6f04e6809 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -263,9 +260,7 @@ public final class PullQueryExecutor {\n   }\n \n   public void closeMetrics() {\n-    if (pullQueryMetrics != null) {\n-      pullQueryMetrics.ifPresent(PullQueryExecutorMetrics::close);\n-    }\n+    pullQueryMetrics.ifPresent(PullQueryExecutorMetrics::close);\n   }\n \n   private PullQueryResult handlePullQuery(\n"}}, {"oid": "8720613ef8602449040b9a40aa9013f702a60a52", "url": "https://github.com/confluentinc/ksql/commit/8720613ef8602449040b9a40aa9013f702a60a52", "message": "Feedback", "committedDate": "2020-08-13T02:39:24Z", "type": "commit"}, {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "url": "https://github.com/confluentinc/ksql/commit/35adefbc98e002d2016eed1609e2c8f8661bfe99", "message": "Fix test", "committedDate": "2020-08-13T16:54:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDAzNw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472054037", "bodyText": "nit: inline queryPublisher again.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:45:53Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java", "diffHunk": "@@ -93,18 +94,20 @@ private QueryPublisher createPushQueryPublisher(\n   private QueryPublisher createPullQueryPublisher(\n       final Context context,\n       final ServiceContext serviceContext,\n-      final ConfiguredStatement<Query> statement\n+      final ConfiguredStatement<Query> statement,\n+      final long startTimeNanos\n   ) {\n     final PullQueryResult result = pullQueryExecutor.execute(\n-        statement, serviceContext, Optional.empty(), Optional.of(false));\n+        statement, serviceContext, Optional.of(false), startTimeNanos);\n     final TableRows tableRows = result.getTableRows();\n \n-    return new PullQueryPublisher(\n+    final QueryPublisher queryPublisher = new PullQueryPublisher(", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxMjE5NA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474912194", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T19:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java\nindex cfdbe79a99..40edf92cf2 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java\n\n@@ -101,13 +101,12 @@ public class QueryEndpoint {\n         statement, serviceContext, Optional.of(false), startTimeNanos);\n     final TableRows tableRows = result.getTableRows();\n \n-    final QueryPublisher queryPublisher = new PullQueryPublisher(\n+    return new PullQueryPublisher(\n         context,\n         tableRows,\n         colNamesFromSchema(tableRows.getSchema().columns()),\n         colTypesFromSchema(tableRows.getSchema().columns())\n     );\n-    return queryPublisher;\n   }\n \n   private ConfiguredStatement<Query> createStatement(final String queryString,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDkxOA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472054918", "bodyText": "Probably better to keep this as KsqlExecutionContext and pass in the service Id... less coupling.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:47:21Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -136,20 +138,25 @@\n   private static final String VALID_WINDOW_BOUNDS_TYPES_STRING =\n       GrammaticalJoiner.and().join(VALID_WINDOW_BOUNDS_TYPES);\n \n-  private final KsqlExecutionContext executionContext;\n+  private final KsqlEngine ksqlEngine;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n   public PullQueryExecutor(\n-      final KsqlExecutionContext executionContext,\n+      final KsqlEngine ksqlEngine,", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzNTgyNg==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474935826", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T20:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex e6f04e6809..7c09f60615 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -138,24 +138,26 @@ public final class PullQueryExecutor {\n   private static final String VALID_WINDOW_BOUNDS_TYPES_STRING =\n       GrammaticalJoiner.and().join(VALID_WINDOW_BOUNDS_TYPES);\n \n-  private final KsqlEngine ksqlEngine;\n+  private final KsqlExecutionContext executionContext;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n   private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n   public PullQueryExecutor(\n-      final KsqlEngine ksqlEngine,\n+      final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n-      final KsqlConfig ksqlConfig\n+      final KsqlConfig ksqlConfig,\n+      final String serviceId,\n+      final Time time\n   ) {\n-    this.ksqlEngine = Objects.requireNonNull(ksqlEngine, \"ksqlEngine\");\n+    this.executionContext = Objects.requireNonNull(executionContext, \"executionContext\");\n     this.routingFilterFactory =\n         Objects.requireNonNull(routingFilterFactory, \"routingFilterFactory\");\n     this.rateLimiter = RateLimiter.create(ksqlConfig.getInt(\n         KsqlConfig.KSQL_QUERY_PULL_MAX_QPS_CONFIG));\n     this.pullQueryMetrics = ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED)\n-        ? Optional.of(new PullQueryExecutorMetrics(ksqlEngine.getServiceId(),\n-        ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n+        ? Optional.of(new PullQueryExecutorMetrics(serviceId,\n+        ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS), time))\n         : Optional.empty();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NTk5Mw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472055993", "bodyText": "Why not just have:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  pullQueryMetrics.ifPresent(metrics ->\n          \n          \n            \n                      metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));\n          \n          \n            \n                  pullQueryMetrics.ifPresent(metrics ->\n          \n          \n            \n                      metrics.recordLatency(startTimeNanos));\n          \n      \n    \n    \n  \n\nAnd change recordLatency to take the end time in ns, encapsulating the Time.SYSTEM.nanoseconds() into a single place...?", "author": "big-andy-coates", "createdAt": "2020-08-18T09:49:15Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +230,17 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n-          executionContext,\n+          ksqlEngine,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+\n+      pullQueryMetrics.ifPresent(metrics ->\n+          metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxNTI4Nw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474915287", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T19:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NTk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nindex e6f04e6809..7c09f60615 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\n\n@@ -232,14 +234,14 @@ public final class PullQueryExecutor {\n \n       final PullQueryResult result = handlePullQuery(\n           statement,\n-          ksqlEngine,\n+          executionContext,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n \n       pullQueryMetrics.ifPresent(metrics ->\n-          metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));\n+          metrics.recordLatency(startTimeNanos));\n       return result;\n     } catch (final Exception e) {\n       pullQueryMetrics.ifPresent(metrics -> metrics.recordErrorRate(1));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjU5MA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472056590", "bodyText": "As suggested above, change to taking the end time, rather than the elapsed time?", "author": "big-andy-coates", "createdAt": "2020-08-18T09:50:12Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -78,12 +77,10 @@ public void recordRemoteRequests(final double value) {\n     this.remoteRequestsSensor.record(value);\n   }\n \n-  public void recordRate(final double value) {\n-    this.requestRateSensor.record(value);\n-  }\n-\n-  public void recordLatency(final double value) {\n-    this.latencySensor.record(value);\n+  public void recordLatency(final long nanoSeconds) {", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxNTU2Nw==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474915567", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T19:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\nindex 7dbb395623..4c4a5a59b6 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java\n\n@@ -77,10 +85,12 @@ public class PullQueryExecutorMetrics implements Closeable {\n     this.remoteRequestsSensor.record(value);\n   }\n \n-  public void recordLatency(final long nanoSeconds) {\n+  public void recordLatency(final long startTimeNanos) {\n     // Record latency at microsecond scale\n-    final double latency = TimeUnit.NANOSECONDS.toMicros(nanoSeconds);\n+    long nowNanos = time.nanoseconds();\n+    final double latency = TimeUnit.NANOSECONDS.toMicros(nowNanos - startTimeNanos);\n     this.latencySensor.record(latency);\n+    this.requestRateSensor.record(1);\n   }\n \n   public void recordErrorRate(final double value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NzYzMA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472057630", "bodyText": "Can we go with a non-zero start time please?  Stick it in a constant, e.g. START_TIME = 1234L. Update tests to use START_TIME.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:52:06Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisherTest.java", "diffHunk": "@@ -80,10 +81,11 @@ public void setUp() {\n     publisher = new PullQueryPublisher(\n         serviceContext,\n         statement,\n-        pullQueryExecutor);\n+        pullQueryExecutor,\n+        0L);", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMjk4Ng==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474932986", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-08-21T20:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NzYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisherTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisherTest.java\nindex 067537eb14..40678affe4 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisherTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisherTest.java\n\n@@ -82,10 +82,10 @@ public class PullQueryPublisherTest {\n         serviceContext,\n         statement,\n         pullQueryExecutor,\n-        0L);\n+        TIME_NANOS);\n \n     PullQueryResult result = new PullQueryResult(entity, Optional.empty());\n-    when(pullQueryExecutor.execute(any(), any(), any(), anyLong())).thenReturn(result);\n+    when(pullQueryExecutor.execute(any(), any(), any(), eq(TIME_NANOS))).thenReturn(result);\n     when(entity.getSchema()).thenReturn(SCHEMA);\n \n     doAnswer(callRequestAgain()).when(subscriber).onNext(any());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1Nzk5OQ==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472057999", "bodyText": "Would be good to test its passing an appropriate start time here. Can we inject a clock?", "author": "big-andy-coates", "createdAt": "2020-08-18T09:52:42Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java", "diffHunk": "@@ -75,8 +74,7 @@ public void shouldThrowExceptionIfConfigDisabled() {\n       // When:\n       final Exception e = assertThrows(\n           KsqlException.class,\n-          () -> pullQueryExecutor.execute(query, engine.getServiceContext(), Optional.empty(),\n-              Optional.empty())\n+          () -> pullQueryExecutor.execute(query, engine.getServiceContext(), Optional.empty(), 0L)", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMjEzNA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474932134", "bodyText": "Done.", "author": "AlanConfluent", "createdAt": "2020-08-21T20:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1Nzk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java\nindex a7c9a3bde0..30acd6aeac 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java\n\n@@ -69,7 +74,8 @@ public class PullQueryExecutorTest {\n           engine.getKsqlConfig()\n       );\n       PullQueryExecutor pullQueryExecutor = new PullQueryExecutor(\n-          engine.getEngine(), ROUTING_FILTER_FACTORY, engine.getKsqlConfig());\n+          engine.getEngine(), ROUTING_FILTER_FACTORY, engine.getKsqlConfig(),\n+          engine.getEngine().getServiceId(), time);\n \n       // When:\n       final Exception e = assertThrows(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1OTE5NA==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472059194", "bodyText": "Rather than deleting this test, change it to:\n@Test\t\n  public void shouldRecordRequestRate() {\t\n    // Given:\t\n    pullMetrics. recordLatency(3000);\t\n   \n    // When:\t\n    final double rate = getMetricValue(\"-rate\");\t\n\n    // Then:\t\n    assertThat(rate, closeTo(0.03, 0.001));\t// <-- numbers need changing. \n  }\nOtherwise there's no test testing that the rate is updated when recordLatency is called!", "author": "big-andy-coates", "createdAt": "2020-08-18T09:54:48Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java", "diffHunk": "@@ -112,22 +112,10 @@ public void shouldRecordErrorRate() {\n     assertThat(rate, closeTo(0.03, 0.001));\n   }\n \n-  @Test\n-  public void shouldRecordRequestRate() {\n-    // Given:\n-    pullMetrics.recordRate(3);\n-\n-    // When:\n-    final double rate = getMetricValue(\"-rate\");\n-\n-    // Then:\n-    assertThat(rate, closeTo(0.03, 0.001));\n-  }", "originalCommit": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyMjgyMg==", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r474922822", "bodyText": "I had removed the rate variable since it didn't appear to be read at all in practice, and since you had recommended removing it, but I'm now thinking you just meant the method recordRate.  Alright, will add this variable to the recordLatecy call and add back this test.", "author": "AlanConfluent", "createdAt": "2020-08-21T20:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1OTE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java\nindex 38b9d822f2..e53c970dcd 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java\n\n@@ -112,6 +117,20 @@ public class PullQueryExecutorMetricsTest {\n     assertThat(rate, closeTo(0.03, 0.001));\n   }\n \n+  @Test\n+  public void shouldRecordRequestRate() {\n+    // Given:\n+    pullMetrics.recordLatency(3000);\n+    pullMetrics.recordLatency(3000);\n+    pullMetrics.recordLatency(3000);\n+\n+    // When:\n+    final double rate = getMetricValue(\"-rate\");\n+\n+    // Then:\n+    assertThat(rate, closeTo(0.03, 0.001));\n+  }\n+\n   @Test\n   public void shouldRecordLatency() {\n     // Given:\n"}}, {"oid": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "url": "https://github.com/confluentinc/ksql/commit/06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "message": "Feedback", "committedDate": "2020-08-21T20:22:47Z", "type": "commit"}, {"oid": "aed898da72c51ecb01e967952ce8fa1d58f0827c", "url": "https://github.com/confluentinc/ksql/commit/aed898da72c51ecb01e967952ce8fa1d58f0827c", "message": "Style", "committedDate": "2020-08-21T20:49:15Z", "type": "commit"}]}