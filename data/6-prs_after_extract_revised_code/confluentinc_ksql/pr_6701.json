{"pr_number": 6701, "pr_title": "fix: Makes response codes rate limited as well as prints a message when it is hit", "pr_createdAt": "2020-12-02T02:31:52Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6701", "timeline": [{"oid": "7f1edb14d0045ba9c0188c28698bbcb50fa124d1", "url": "https://github.com/confluentinc/ksql/commit/7f1edb14d0045ba9c0188c28698bbcb50fa124d1", "message": "fix: Makes response codes rate limited as well as prints a message when it is hit", "committedDate": "2020-12-02T02:28:48Z", "type": "commit"}, {"oid": "8673feccf6c3eac95958ed110e4bb16fbee184d3", "url": "https://github.com/confluentinc/ksql/commit/8673feccf6c3eac95958ed110e4bb16fbee184d3", "message": "Fix test name", "committedDate": "2020-12-02T02:30:35Z", "type": "commit"}, {"oid": "48282a47e0339128a381871336b39004f9a27e9f", "url": "https://github.com/confluentinc/ksql/commit/48282a47e0339128a381871336b39004f9a27e9f", "message": "Adds some more pairs to map test case", "committedDate": "2020-12-02T17:16:45Z", "type": "commit"}, {"oid": "6836df9edc6a3a5be388f5adeaba02bc1187970c", "url": "https://github.com/confluentinc/ksql/commit/6836df9edc6a3a5be388f5adeaba02bc1187970c", "message": "Apply suggestions from code review\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-12-03T17:51:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNjEyNA==", "url": "https://github.com/confluentinc/ksql/pull/6701#discussion_r535716124", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Print \"You hit a rate limit\" every 5 seconds\n          \n          \n            \n              // Print \"You hit a rate limit\" at most once every 5 seconds", "author": "vcrfxia", "createdAt": "2020-12-03T23:15:20Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -26,13 +27,23 @@\n import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.function.Function;\n+import org.slf4j.Logger;\n \n class LoggingRateLimiter {\n+  // Print \"You hit a rate limit\" every 5 seconds", "originalCommit": "6836df9edc6a3a5be388f5adeaba02bc1187970c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c0ec7a1831f58107c61b7d0fc886bdae67985e2", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\nindex d2f40fc6d9..e7ae63f1d9 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\n\n@@ -23,6 +23,7 @@ import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.util.concurrent.RateLimiter;\n import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.confluent.ksql.util.Pair;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentHashMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNzEzMg==", "url": "https://github.com/confluentinc/ksql/pull/6701#discussion_r535717132", "bodyText": "Would it be better to initialize the rate limiters up front, rather than calling computeIfAbsent on each request? I don't have a sense of how large this optimization is, feels minor but I also feel it can't hurt. Feel free to disagree.", "author": "vcrfxia", "createdAt": "2020-12-03T23:17:44Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -45,13 +56,33 @@\n     requireNonNull(ksqlRestConfig);\n     this.rateLimiterFactory = requireNonNull(rateLimiterFactory);\n     this.rateLimitedPaths = getRateLimitedRequestPaths(ksqlRestConfig);\n+    this.rateLimitedResponseCodes = getRateLimitedResponseCodes(ksqlRestConfig);\n+    this.pathLimitHit = rateLimiterFactory.apply(LIMIT_HIT_LOG_RATE);\n+    this.responseCodeLimitHit = rateLimiterFactory.apply(LIMIT_HIT_LOG_RATE);\n   }\n \n-  public boolean shouldLog(final String path) {\n+  public boolean shouldLog(final Logger logger, final String path, final int responseCode) {\n     if (rateLimitedPaths.containsKey(path)) {\n       final double rateLimit = rateLimitedPaths.get(path);\n-      rateLimiters.computeIfAbsent(path, (k) -> rateLimiterFactory.apply(rateLimit));\n-      return rateLimiters.get(path).tryAcquire();\n+      rateLimitersByPath.computeIfAbsent(path, (k) -> rateLimiterFactory.apply(rateLimit));", "originalCommit": "6836df9edc6a3a5be388f5adeaba02bc1187970c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5NDY4Ng==", "url": "https://github.com/confluentinc/ksql/pull/6701#discussion_r536494686", "bodyText": "Yeah, you're right.  The data is static and not large, so why not just make an immutable map instead on initialization?\nI was originally thinking it might be dynamic, but it's not currently.", "author": "AlanConfluent", "createdAt": "2020-12-05T03:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNzEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "1c0ec7a1831f58107c61b7d0fc886bdae67985e2", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\nindex d2f40fc6d9..e7ae63f1d9 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\n\n@@ -52,34 +48,33 @@ class LoggingRateLimiter {\n   @VisibleForTesting\n   LoggingRateLimiter(\n       final KsqlRestConfig ksqlRestConfig,\n-      final Function<Double, RateLimiter> rateLimiterFactory) {\n+      final Function<Double, RateLimiter> rateLimiterFactory\n+  ) {\n     requireNonNull(ksqlRestConfig);\n-    this.rateLimiterFactory = requireNonNull(rateLimiterFactory);\n-    this.rateLimitedPaths = getRateLimitedRequestPaths(ksqlRestConfig);\n-    this.rateLimitedResponseCodes = getRateLimitedResponseCodes(ksqlRestConfig);\n+    requireNonNull(rateLimiterFactory);\n     this.pathLimitHit = rateLimiterFactory.apply(LIMIT_HIT_LOG_RATE);\n     this.responseCodeLimitHit = rateLimiterFactory.apply(LIMIT_HIT_LOG_RATE);\n+    this.rateLimitersByPath = getRateLimitedRequestPaths(ksqlRestConfig, rateLimiterFactory);\n+    this.rateLimitersByResponseCode\n+        = getRateLimitedResponseCodes(ksqlRestConfig, rateLimiterFactory);\n   }\n \n   public boolean shouldLog(final Logger logger, final String path, final int responseCode) {\n-    if (rateLimitedPaths.containsKey(path)) {\n-      final double rateLimit = rateLimitedPaths.get(path);\n-      rateLimitersByPath.computeIfAbsent(path, (k) -> rateLimiterFactory.apply(rateLimit));\n-      if (!rateLimitersByPath.get(path).tryAcquire()) {\n+    if (rateLimitersByPath.containsKey(path)) {\n+      final RateLimiter rateLimiter = rateLimitersByPath.get(path);\n+      if (!rateLimiter.tryAcquire()) {\n         if (pathLimitHit.tryAcquire()) {\n-          logger.info(\"Hit rate limit for path \" + path + \" with limit \" + rateLimit);\n+          logger.info(\"Hit rate limit for path \" + path + \" with limit \" + rateLimiter.getRate());\n         }\n         return false;\n       }\n     }\n-    if (rateLimitedResponseCodes.containsKey(responseCode)) {\n-      final double rateLimit = rateLimitedResponseCodes.get(responseCode);\n-      rateLimitersByResponseCode.computeIfAbsent(\n-          responseCode, (k) -> rateLimiterFactory.apply(rateLimit));\n-      if (!rateLimitersByResponseCode.get(responseCode).tryAcquire()) {\n+    if (rateLimitersByResponseCode.containsKey(responseCode)) {\n+      final RateLimiter rateLimiter = rateLimitersByResponseCode.get(responseCode);\n+      if (!rateLimiter.tryAcquire()) {\n         if (responseCodeLimitHit.tryAcquire()) {\n           logger.info(\"Hit rate limit for response code \" + responseCode + \" with limit \"\n-              + rateLimit);\n+              + rateLimiter.getRate());\n         }\n         return false;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNzI4NA==", "url": "https://github.com/confluentinc/ksql/pull/6701#discussion_r535717284", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Already validated as all ints\n          \n          \n            \n                // Already validated as having int keys and double values", "author": "vcrfxia", "createdAt": "2020-12-03T23:18:06Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -64,4 +95,12 @@ public boolean shouldLog(final String path) {\n             entry -> Double.parseDouble(entry.getValue())));\n   }\n \n+  private static Map<Integer, Double> getRateLimitedResponseCodes(final KsqlRestConfig config) {\n+    // Already validated as all ints", "originalCommit": "6836df9edc6a3a5be388f5adeaba02bc1187970c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c0ec7a1831f58107c61b7d0fc886bdae67985e2", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\nindex d2f40fc6d9..e7ae63f1d9 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java\n\n@@ -87,20 +82,32 @@ class LoggingRateLimiter {\n     return true;\n   }\n \n-  private static Map<String, Double> getRateLimitedRequestPaths(final KsqlRestConfig config) {\n+  private static Map<String, RateLimiter> getRateLimitedRequestPaths(\n+      final KsqlRestConfig config,\n+      final Function<Double, RateLimiter> rateLimiterFactory\n+  ) {\n     // Already validated as having double values\n     return config.getStringAsMap(KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG)\n         .entrySet().stream()\n-        .collect(ImmutableMap.toImmutableMap(Entry::getKey,\n-            entry -> Double.parseDouble(entry.getValue())));\n+        .map(entry -> {\n+          double rateLimit = Double.parseDouble(entry.getValue());\n+          return Pair.of(entry.getKey(), rateLimiterFactory.apply(rateLimit));\n+        })\n+        .collect(ImmutableMap.toImmutableMap(Pair::getLeft, Pair::getRight));\n   }\n \n-  private static Map<Integer, Double> getRateLimitedResponseCodes(final KsqlRestConfig config) {\n+  private static Map<Integer, RateLimiter> getRateLimitedResponseCodes(\n+      final KsqlRestConfig config,\n+      final Function<Double, RateLimiter> rateLimiterFactory\n+  ) {\n     // Already validated as all ints\n     return config.getStringAsMap(KSQL_LOGGING_SERVER_RATE_LIMITED_RESPONSE_CODES_CONFIG)\n         .entrySet().stream()\n-        .collect(ImmutableMap.toImmutableMap(\n-            entry -> Integer.parseInt(entry.getKey()),\n-            entry -> Double.parseDouble(entry.getValue())));\n+        .map(entry -> {\n+          int statusCode = Integer.parseInt(entry.getKey());\n+          double rateLimit = Double.parseDouble(entry.getValue());\n+          return Pair.of(statusCode, rateLimiterFactory.apply(rateLimit));\n+        })\n+        .collect(ImmutableMap.toImmutableMap(Pair::getLeft, Pair::getRight));\n   }\n }\n"}}, {"oid": "1c0ec7a1831f58107c61b7d0fc886bdae67985e2", "url": "https://github.com/confluentinc/ksql/commit/1c0ec7a1831f58107c61b7d0fc886bdae67985e2", "message": "Feedback", "committedDate": "2020-12-05T03:25:24Z", "type": "commit"}, {"oid": "1c0ec7a1831f58107c61b7d0fc886bdae67985e2", "url": "https://github.com/confluentinc/ksql/commit/1c0ec7a1831f58107c61b7d0fc886bdae67985e2", "message": "Feedback", "committedDate": "2020-12-05T03:25:24Z", "type": "forcePushed"}, {"oid": "be9466426eb287001617948fdbace88172900443", "url": "https://github.com/confluentinc/ksql/commit/be9466426eb287001617948fdbace88172900443", "message": "Lint", "committedDate": "2020-12-05T03:45:18Z", "type": "commit"}]}