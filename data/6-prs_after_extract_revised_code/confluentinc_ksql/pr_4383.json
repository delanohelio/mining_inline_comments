{"pr_number": 4383, "pr_title": "chore: follow ups from PR 4354", "pr_createdAt": "2020-01-26T15:04:23Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4383", "timeline": [{"oid": "3b210b2207906288358f809b0ecbeaea67322737", "url": "https://github.com/confluentinc/ksql/commit/3b210b2207906288358f809b0ecbeaea67322737", "message": "follow ups from PR", "committedDate": "2020-01-26T15:03:01Z", "type": "commit"}, {"oid": "65e19f7a4c6db4aecdf118945ed733c0da7f9263", "url": "https://github.com/confluentinc/ksql/commit/65e19f7a4c6db4aecdf118945ed733c0da7f9263", "message": "added another test", "committedDate": "2020-01-26T15:15:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0ODg5Nw==", "url": "https://github.com/confluentinc/ksql/pull/4383#discussion_r371448897", "bodyText": "Might be worth moving to ksql-test-util module.", "author": "big-andy-coates", "createdAt": "2020-01-27T19:52:27Z", "path": "ksql-api/src/test/java/io/confluent/ksql/api/TestUtils.java", "diffHunk": "@@ -33,10 +32,10 @@ public static void awaitLatch(CountDownLatch latch) throws Exception {\n \n     private AssertionError error;\n \n-    public synchronized <T> void assertAsync(Supplier<? extends T> actualSupplier,\n+    public synchronized <T> void assertAsync(T t,", "originalCommit": "65e19f7a4c6db4aecdf118945ed733c0da7f9263", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1MTcxMQ==", "url": "https://github.com/confluentinc/ksql/pull/4383#discussion_r371451711", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state, i.e. null check handler.", "author": "big-andy-coates", "createdAt": "2020-01-27T19:57:59Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/BufferedPublisher.java", "diffHunk": "@@ -125,12 +125,15 @@ public boolean accept(final T t) {\n   /**\n    * If you set a drain handler. It will be called if, after delivery is attempted there are zero\n    * elements buffered internally and there is demand from the subscriber for more elements. Drain\n-   * handlers are one shot handlers, after being it will never be called more than once.\n+   * handlers are one shot handlers, after being called it will never be called more than once.\n    *\n    * @param handler The handler\n    */\n   public void drainHandler(final Runnable handler) {\n     checkContext();\n+    if (drainHandler != null) {\n+      throw new IllegalStateException(\"drainHandler already set\");\n+    }", "originalCommit": "65e19f7a4c6db4aecdf118945ed733c0da7f9263", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05a055ca3feb91ce7d12e3d83ceded5e996f7173", "chunk": "diff --git a/ksql-api/src/main/java/io/confluent/ksql/api/server/BufferedPublisher.java b/ksql-api/src/main/java/io/confluent/ksql/api/server/BufferedPublisher.java\nindex 995c06794e..772c45083a 100644\n--- a/ksql-api/src/main/java/io/confluent/ksql/api/server/BufferedPublisher.java\n+++ b/ksql-api/src/main/java/io/confluent/ksql/api/server/BufferedPublisher.java\n\n@@ -134,7 +134,7 @@ public class BufferedPublisher<T> implements Publisher<T> {\n     if (drainHandler != null) {\n       throw new IllegalStateException(\"drainHandler already set\");\n     }\n-    this.drainHandler = handler;\n+    this.drainHandler = Objects.requireNonNull(handler);\n   }\n \n   /**\n"}}, {"oid": "05a055ca3feb91ce7d12e3d83ceded5e996f7173", "url": "https://github.com/confluentinc/ksql/commit/05a055ca3feb91ce7d12e3d83ceded5e996f7173", "message": "check drainHandler is not null", "committedDate": "2020-01-27T21:52:35Z", "type": "commit"}]}