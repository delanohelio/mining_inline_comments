{"pr_number": 6617, "pr_title": "chore: support arrays/maps with mismatched elements", "pr_createdAt": "2020-11-16T12:51:22Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6617", "timeline": [{"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e", "url": "https://github.com/confluentinc/ksql/commit/037563b07a2e0911f27b184f5f62f20453fbf82e", "message": "chore: support arrays with mismatched elements\n\npart fix for https://github.com/confluentinc/ksql/issues/6470. (MAP / STRUCT remaining)", "committedDate": "2020-11-16T12:50:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0NDQyOA==", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524244428", "bodyText": "Bug fix: fixes issues where value has a negative scale.", "author": "big-andy-coates", "createdAt": "2020-11-16T12:52:44Z", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/DecimalUtil.java", "diffHunk": "@@ -268,15 +268,18 @@ private static void ensureMax(final BigDecimal value, final int precision, final\n   }\n \n   public static SqlType fromValue(final BigDecimal value) {\n-    final BigDecimal bigDecimalZero = BigDecimal.ZERO;\n+    // SqlDecimal does not support negative scale:\n+    final BigDecimal decimal = value.scale() < 0\n+        ? value.setScale(0, BigDecimal.ROUND_UNNECESSARY)\n+        : value;", "originalCommit": "037563b07a2e0911f27b184f5f62f20453fbf82e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e33a3e96e8fd89ca3d91f4490faaabcd07816fdb", "url": "https://github.com/confluentinc/ksql/commit/e33a3e96e8fd89ca3d91f4490faaabcd07816fdb", "message": "chore: support maps with mismatched key and value types\n\npart fix for https://github.com/confluentinc/ksql/issues/6470. (STRUCT remaining)", "committedDate": "2020-11-16T13:33:16Z", "type": "commit"}, {"oid": "8f0b5c63dd42085cd77b2055f46e54ae6b3254d0", "url": "https://github.com/confluentinc/ksql/commit/8f0b5c63dd42085cd77b2055f46e54ae6b3254d0", "message": "chore: update in.json removing unnecessary casts", "committedDate": "2020-11-16T13:38:34Z", "type": "commit"}, {"oid": "742e7feb610041f9fde9533a0075eb5f02769a6f", "url": "https://github.com/confluentinc/ksql/commit/742e7feb610041f9fde9533a0075eb5f02769a6f", "message": "chore: array of struct test", "committedDate": "2020-11-16T13:46:29Z", "type": "commit"}, {"oid": "cc5b157c9a34e8454bc225f7045048714e62861c", "url": "https://github.com/confluentinc/ksql/commit/cc5b157c9a34e8454bc225f7045048714e62861c", "message": "chore: fix test", "committedDate": "2020-11-16T15:39:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMTM5Mg==", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524421392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>Coercion is performed in order. So the type type of the first non-null expression drives the\n          \n          \n            \n               * <p>Coercion is performed in order. So the type of the first non-null expression drives the", "author": "agavra", "createdAt": "2020-11-16T16:57:17Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java", "diffHunk": "@@ -91,32 +91,65 @@ private CoercionUtil() {\n    *\n    * <p>Any non-literal expressions that don't match the common type, but which can be coerced, will\n    * be wrapped in an explicit {@code CAST} to convert them to the required type.\n+   *\n+   * <p>Coercion is performed in order. So the type type of the first non-null expression drives the", "originalCommit": "cc5b157c9a34e8454bc225f7045048714e62861c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a634a1927551af4c1218e7837549cdef0d2e4bc2", "chunk": "diff --git a/ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java b/ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java\nindex 68b7488fe7..d1b23401f8 100644\n--- a/ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java\n+++ b/ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java\n\n@@ -92,7 +92,7 @@ public final class CoercionUtil {\n    * <p>Any non-literal expressions that don't match the common type, but which can be coerced, will\n    * be wrapped in an explicit {@code CAST} to convert them to the required type.\n    *\n-   * <p>Coercion is performed in order. So the type type of the first non-null expression drives the\n+   * <p>Coercion is performed in order. So the type of the first non-null expression drives the\n    * common type. For example, if the first non-null expression is a string, then all other\n    * expressions must be coercible to a string. If its numeric, then all other expressions must be\n    * coercible to a number, etc.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMjUwOA==", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524422508", "bodyText": "is there a way to specify a DOUBLE with a string, or do they always get cast to decimals?", "author": "agavra", "createdAt": "2020-11-16T16:58:47Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java", "diffHunk": "@@ -307,14 +340,50 @@ private static void validateStringCanBeCoercedToBoolean(final String value) {\n         final String value, \n         final SqlType targetType\n     ) {\n+      Preconditions.checkArgument(targetType.baseType().isNumber());\n+\n       try {\n-        final BigDecimal result = new BigDecimal(value.trim());\n-        return Optional.of(resolveCommonNumericType(result, targetType));\n+        final SqlType sourceType = getStringNumericType(value);\n+\n+        if (sourceType.baseType() == SqlBaseType.DOUBLE\n+            || targetType.baseType() == SqlBaseType.DOUBLE\n+        ) {\n+          return Optional.of(SqlTypes.DOUBLE);\n+        }\n+\n+        if (sourceType.baseType() == SqlBaseType.DECIMAL\n+            || targetType.baseType() == SqlBaseType.DECIMAL\n+        ) {\n+          return Optional.of(DecimalUtil.widen(sourceType, targetType));\n+        }\n+\n+        return Optional.of(sourceType.baseType().canImplicitlyCast(targetType.baseType())\n+            ? targetType\n+            : sourceType);\n       } catch (final NumberFormatException e) {\n         throw invalidSyntaxException(value, targetType);\n       }\n     }\n \n+    private static SqlType getStringNumericType(final String value) {\n+      final BigDecimal result = new BigDecimal(value.trim());\n+\n+      final boolean containsDpOrScientific = value.contains(\".\")", "originalCommit": "cc5b157c9a34e8454bc225f7045048714e62861c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2Nzg1Nw==", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r525267857", "bodyText": "Always get cast to decimal.", "author": "big-andy-coates", "createdAt": "2020-11-17T15:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMjUwOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a634a1927551af4c1218e7837549cdef0d2e4bc2", "url": "https://github.com/confluentinc/ksql/commit/a634a1927551af4c1218e7837549cdef0d2e4bc2", "message": "chore: almog's requested changes", "committedDate": "2020-11-17T15:50:51Z", "type": "commit"}]}