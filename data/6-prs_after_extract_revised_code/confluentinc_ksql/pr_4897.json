{"pr_number": 4897, "pr_title": "chore: add syntax for multi-way joins", "pr_createdAt": "2020-03-26T00:00:58Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4897", "timeline": [{"oid": "5c167c4a183f779a673fdefd9b8455e5b0761d83", "url": "https://github.com/confluentinc/ksql/commit/5c167c4a183f779a673fdefd9b8455e5b0761d83", "message": "chore: add syntax for multi-way joins", "committedDate": "2020-03-25T23:57:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3NzgzNw==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398477837", "bodyText": "Should we be updating the if statement too?\nAt the moment we don't support JOINs to self. (Streams limitation I believe). Hence, I think we can update the if statement to throw if this would mean that the joinInfo list would be bigger than fromDataSources.", "author": "big-andy-coates", "createdAt": "2020-03-26T10:49:28Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java", "diffHunk": "@@ -169,20 +169,20 @@ void setLimitClause(final int limitClause) {\n     this.limitClause = OptionalInt.of(limitClause);\n   }\n \n-  void setJoin(final JoinInfo joinInfo) {\n+  void addJoin(final JoinInfo joinInfo) {\n     if (fromDataSources.size() <= 1) {\n       throw new IllegalStateException(\"Join info can only be supplied for joins\");\n     }\n \n-    this.joinInfo = Optional.of(joinInfo);\n+    this.joinInfo.add(joinInfo);", "originalCommit": "5c167c4a183f779a673fdefd9b8455e5b0761d83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d171c25f7e8adda703081d45f9c412e93915967e", "chunk": "diff --git a/ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java b/ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java\nindex 4881347d5d..ee8175d955 100644\n--- a/ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java\n+++ b/ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java\n\n@@ -170,7 +170,8 @@ public class Analysis implements ImmutableAnalysis {\n   }\n \n   void addJoin(final JoinInfo joinInfo) {\n-    if (fromDataSources.size() <= 1) {\n+    // we cannot add more joins than we have data sources\n+    if (fromDataSources.size() < this.joinInfo.size()) {\n       throw new IllegalStateException(\"Join info can only be supplied for joins\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MDI3Nw==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398480277", "bodyText": "why not just:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!analysis.isJoin()) {\n          \n          \n            \n                if (sources.size() == 1) {", "author": "big-andy-coates", "createdAt": "2020-03-26T10:53:41Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -421,36 +421,37 @@ private PlanNode buildSourceNode() {\n \n     final List<AliasedDataSource> sources = analysis.getFromDataSources();\n \n-    final Optional<JoinInfo> joinInfo = analysis.getOriginal().getJoin();\n-    if (!joinInfo.isPresent()) {\n+    if (!analysis.isJoin()) {", "originalCommit": "5c167c4a183f779a673fdefd9b8455e5b0761d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxODIwOA==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398718208", "bodyText": "just thought it was easier to read, we already had an isJoin method (I just exposed it)", "author": "agavra", "createdAt": "2020-03-26T16:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MDI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2ODI5Mg==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r399168292", "bodyText": "I don't think it ends up with more readable code though...\n    if (!analysis.isJoin()) {\n      return buildNonJoinNode(sources);\n    }\n\n    if (sources.size() == 1) {\n      throw new IllegalStateException(\"Expected more than one source. Got \" + sources.size());\n    }\n\n   // build join\nThe second if is superfluous if you know what isJoin is doing.  Can just be:\n    if ((sources.size() == 1) {\n      return buildNonJoinNode(sources);\n    }\n\n   // build join", "author": "big-andy-coates", "createdAt": "2020-03-27T10:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MDI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NjM0OQ==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r399356349", "bodyText": "\ud83e\udd14 I'll see if I can make this peak readable in my next PR", "author": "agavra", "createdAt": "2020-03-27T15:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MDI3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MjYzMw==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398482633", "bodyText": "nit: IMHO this name is confusing as it doesn't include the left source, so it's not all the sources...   would you mind renaming to something else? maybe getRights or getOthers or something that infers it's not the complete set?", "author": "big-andy-coates", "createdAt": "2020-03-26T10:57:43Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java", "diffHunk": "@@ -18,78 +18,42 @@\n import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.parser.NodeLocation;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n \n @Immutable\n public class Join extends Relation {\n \n-  private final Type type;\n   private final Relation left;\n-  private final Relation right;\n-  private final JoinCriteria criteria;\n-  private final Optional<WithinExpression> withinExpression;\n-\n-  public enum Type {\n-    INNER(\"INNER\"), LEFT(\"LEFT OUTER\"), OUTER(\"FULL OUTER\");\n-\n-    private final String formattedText;\n-\n-    Type(final String formattedText) {\n-      this.formattedText = Objects.requireNonNull(formattedText, \"formattedText\");\n-    }\n-\n-    public String getFormatted() {\n-      return formattedText;\n-    }\n-  }\n+  private final ImmutableList<JoinedSource> sources;\n \n   public Join(\n-      final Type type,\n       final Relation left,\n-      final Relation right,\n-      final JoinCriteria criteria,\n-      final Optional<WithinExpression> withinExpression\n+      final List<JoinedSource> sources\n   ) {\n-    this(Optional.empty(), type, left, right, criteria, withinExpression);\n+    this(Optional.empty(), left, sources);\n   }\n \n   public Join(\n       final Optional<NodeLocation> location,\n-      final Type type,\n       final Relation left,\n-      final Relation right,\n-      final JoinCriteria criteria,\n-      final Optional<WithinExpression> withinExpression\n+      final List<JoinedSource> sources\n   ) {\n     super(location);\n-    this.type = requireNonNull(type, \"type\");\n     this.left = requireNonNull(left, \"left\");\n-    this.right = requireNonNull(right, \"right\");\n-    this.criteria = requireNonNull(criteria, \"criteria\");\n-    this.withinExpression = requireNonNull(withinExpression, \"withinExpression\");\n-  }\n-\n-  public Type getType() {\n-    return type;\n+    this.sources = ImmutableList.copyOf(Objects.requireNonNull(sources, \"sources\"));\n   }\n \n   public Relation getLeft() {\n     return left;\n   }\n \n-  public Relation getRight() {\n-    return right;\n-  }\n-\n-  public JoinCriteria getCriteria() {\n-    return criteria;\n-  }\n-\n-  public Optional<WithinExpression> getWithinExpression() {\n-    return withinExpression;\n+  public ImmutableList<JoinedSource> getSources() {", "originalCommit": "5c167c4a183f779a673fdefd9b8455e5b0761d83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d171c25f7e8adda703081d45f9c412e93915967e", "chunk": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\nindex 953c970e86..b13aca4eea 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\n\n@@ -18,6 +18,7 @@ package io.confluent.ksql.parser.tree;\n import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.parser.NodeLocation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4Mjg5Nw==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398482897", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.\nIn this case, throw if sources is empty...", "author": "big-andy-coates", "createdAt": "2020-03-26T10:58:06Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java", "diffHunk": "@@ -18,78 +18,42 @@\n import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.parser.NodeLocation;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n \n @Immutable\n public class Join extends Relation {\n \n-  private final Type type;\n   private final Relation left;\n-  private final Relation right;\n-  private final JoinCriteria criteria;\n-  private final Optional<WithinExpression> withinExpression;\n-\n-  public enum Type {\n-    INNER(\"INNER\"), LEFT(\"LEFT OUTER\"), OUTER(\"FULL OUTER\");\n-\n-    private final String formattedText;\n-\n-    Type(final String formattedText) {\n-      this.formattedText = Objects.requireNonNull(formattedText, \"formattedText\");\n-    }\n-\n-    public String getFormatted() {\n-      return formattedText;\n-    }\n-  }\n+  private final ImmutableList<JoinedSource> sources;\n \n   public Join(\n-      final Type type,\n       final Relation left,\n-      final Relation right,\n-      final JoinCriteria criteria,\n-      final Optional<WithinExpression> withinExpression\n+      final List<JoinedSource> sources\n   ) {\n-    this(Optional.empty(), type, left, right, criteria, withinExpression);\n+    this(Optional.empty(), left, sources);\n   }\n \n   public Join(\n       final Optional<NodeLocation> location,\n-      final Type type,\n       final Relation left,\n-      final Relation right,\n-      final JoinCriteria criteria,\n-      final Optional<WithinExpression> withinExpression\n+      final List<JoinedSource> sources\n   ) {\n     super(location);\n-    this.type = requireNonNull(type, \"type\");\n     this.left = requireNonNull(left, \"left\");\n-    this.right = requireNonNull(right, \"right\");\n-    this.criteria = requireNonNull(criteria, \"criteria\");\n-    this.withinExpression = requireNonNull(withinExpression, \"withinExpression\");\n-  }\n-\n-  public Type getType() {\n-    return type;\n+    this.sources = ImmutableList.copyOf(Objects.requireNonNull(sources, \"sources\"));", "originalCommit": "5c167c4a183f779a673fdefd9b8455e5b0761d83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d171c25f7e8adda703081d45f9c412e93915967e", "chunk": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\nindex 953c970e86..b13aca4eea 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\n\n@@ -18,6 +18,7 @@ package io.confluent.ksql.parser.tree;\n import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.parser.NodeLocation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MzE3Nw==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398483177", "bodyText": "consider re-gennning this with in Java 7+ style?", "author": "big-andy-coates", "createdAt": "2020-03-26T10:58:31Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java", "diffHunk": "@@ -100,10 +64,8 @@ public JoinCriteria getCriteria() {\n   @Override\n   public String toString() {\n     return toStringHelper(this)\n-        .add(\"type\", type)\n         .add(\"left\", left)\n-        .add(\"right\", right)\n-        .add(\"criteria\", criteria)\n+        .add(\"sources\", sources)", "originalCommit": "5c167c4a183f779a673fdefd9b8455e5b0761d83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d171c25f7e8adda703081d45f9c412e93915967e", "chunk": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\nindex 953c970e86..b13aca4eea 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/Join.java\n\n@@ -63,11 +65,10 @@ public class Join extends Relation {\n \n   @Override\n   public String toString() {\n-    return toStringHelper(this)\n-        .add(\"left\", left)\n-        .add(\"sources\", sources)\n-        .omitNullValues()\n-        .toString();\n+    return \"Join{\"\n+        + \"left=\" + left\n+        + \", rights=\" + rights\n+        + '}';\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MzMxNA==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398483314", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "author": "big-andy-coates", "createdAt": "2020-03-26T10:58:45Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.parser.tree;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.parser.NodeLocation;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Immutable\n+public class JoinedSource extends Relation {\n+\n+  private final Relation relation;\n+  private final Type type;\n+  private final JoinCriteria criteria;\n+  private final Optional<WithinExpression> withinExpression;\n+\n+  public JoinedSource(\n+      final Optional<NodeLocation> location,\n+      final Relation relation,\n+      final Type type,\n+      final JoinCriteria criteria,\n+      final Optional<WithinExpression> withinExpression\n+  ) {\n+    super(location);\n+    this.relation = relation;\n+    this.type = type;\n+    this.criteria = criteria;\n+    this.withinExpression = withinExpression;", "originalCommit": "5c167c4a183f779a673fdefd9b8455e5b0761d83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d171c25f7e8adda703081d45f9c412e93915967e", "chunk": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java\nindex ea5cd69941..df2359ed17 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java\n\n@@ -36,10 +36,10 @@ public class JoinedSource extends Relation {\n       final Optional<WithinExpression> withinExpression\n   ) {\n     super(location);\n-    this.relation = relation;\n-    this.type = type;\n-    this.criteria = criteria;\n-    this.withinExpression = withinExpression;\n+    this.relation = Objects.requireNonNull(relation, \"relation\");\n+    this.type = Objects.requireNonNull(type, \"type\");\n+    this.criteria = Objects.requireNonNull(criteria, \"criteria\");\n+    this.withinExpression = Objects.requireNonNull(withinExpression, \"withinExpression\");\n   }\n \n   public Relation getRelation() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MzgwNg==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398483806", "bodyText": "any reason why this can't be toString()?", "author": "big-andy-coates", "createdAt": "2020-03-26T10:59:32Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.parser.tree;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.parser.NodeLocation;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Immutable\n+public class JoinedSource extends Relation {\n+\n+  private final Relation relation;\n+  private final Type type;\n+  private final JoinCriteria criteria;\n+  private final Optional<WithinExpression> withinExpression;\n+\n+  public JoinedSource(\n+      final Optional<NodeLocation> location,\n+      final Relation relation,\n+      final Type type,\n+      final JoinCriteria criteria,\n+      final Optional<WithinExpression> withinExpression\n+  ) {\n+    super(location);\n+    this.relation = relation;\n+    this.type = type;\n+    this.criteria = criteria;\n+    this.withinExpression = withinExpression;\n+  }\n+\n+  public Relation getRelation() {\n+    return relation;\n+  }\n+\n+  public Type getType() {\n+    return type;\n+  }\n+\n+  public JoinCriteria getCriteria() {\n+    return criteria;\n+  }\n+\n+  public Optional<WithinExpression> getWithinExpression() {\n+    return withinExpression;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    final JoinedSource that = (JoinedSource) o;\n+    return Objects.equals(relation, that.relation)\n+        && Objects.equals(type, that.type)\n+        && Objects.equals(criteria, that.criteria)\n+        && Objects.equals(withinExpression, that.withinExpression);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(relation, type, criteria, withinExpression);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"JoinedSource{\"\n+        + \"relation=\" + relation\n+        + \", type=\" + type\n+        + \", criteria=\" + criteria\n+        + \", withinExpression=\" + withinExpression\n+        + '}';\n+  }\n+\n+  public enum Type {\n+    INNER(\"INNER\"), LEFT(\"LEFT OUTER\"), OUTER(\"FULL OUTER\");\n+\n+    private final String formattedText;\n+\n+    Type(final String formattedText) {\n+      this.formattedText = Objects.requireNonNull(formattedText, \"formattedText\");\n+    }\n+\n+    public String getFormatted() {", "originalCommit": "5c167c4a183f779a673fdefd9b8455e5b0761d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyMTExNA==", "url": "https://github.com/confluentinc/ksql/pull/4897#discussion_r398721114", "bodyText": "uh no idea - i just copied this over from Join previously and I'd rather keep it like that for now to reduce jitter", "author": "agavra", "createdAt": "2020-03-26T16:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MzgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "d171c25f7e8adda703081d45f9c412e93915967e", "chunk": "diff --git a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java\nindex ea5cd69941..df2359ed17 100644\n--- a/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java\n+++ b/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/JoinedSource.java\n\n@@ -36,10 +36,10 @@ public class JoinedSource extends Relation {\n       final Optional<WithinExpression> withinExpression\n   ) {\n     super(location);\n-    this.relation = relation;\n-    this.type = type;\n-    this.criteria = criteria;\n-    this.withinExpression = withinExpression;\n+    this.relation = Objects.requireNonNull(relation, \"relation\");\n+    this.type = Objects.requireNonNull(type, \"type\");\n+    this.criteria = Objects.requireNonNull(criteria, \"criteria\");\n+    this.withinExpression = Objects.requireNonNull(withinExpression, \"withinExpression\");\n   }\n \n   public Relation getRelation() {\n"}}, {"oid": "d171c25f7e8adda703081d45f9c412e93915967e", "url": "https://github.com/confluentinc/ksql/commit/d171c25f7e8adda703081d45f9c412e93915967e", "message": "chore: address andys comments", "committedDate": "2020-03-26T16:44:51Z", "type": "commit"}, {"oid": "c07049adeda935a694d788ad1c0ed41342108960", "url": "https://github.com/confluentinc/ksql/commit/c07049adeda935a694d788ad1c0ed41342108960", "message": "chore: remove unused import", "committedDate": "2020-03-26T18:07:58Z", "type": "commit"}]}