{"pr_number": 5212, "pr_title": "feat: Adds the ability have internal endpoints listen on ksql.internal.listener", "pr_createdAt": "2020-04-29T01:10:27Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5212", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDkwMQ==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r417424901", "bodyText": "Not great to be disabling complexity rules in a new class. The rules are there for a reason, not just to be disabled when they're hit ;). I realize you've only moved this code from another class, but maybe you could have a stab at refactoring this oversized class?\nThis class is big and could do with breaking up.  The two things that jump out that could be refactored into their own classes are the failure handling and the auth handling.", "author": "big-andy-coates", "createdAt": "2020-04-29T15:53:53Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AbstractServerVerticle.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.FORBIDDEN;\n+import static io.netty.handler.codec.http.HttpResponseStatus.UNAUTHORIZED;\n+\n+import io.confluent.ksql.api.auth.AuthenticationPlugin;\n+import io.confluent.ksql.api.auth.AuthenticationPluginHandler;\n+import io.confluent.ksql.api.auth.JaasAuthProvider;\n+import io.confluent.ksql.api.auth.KsqlAuthorizationProviderHandler;\n+import io.confluent.ksql.api.server.protocol.ErrorResponse;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.confluent.ksql.security.KsqlSecurityExtension;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServer;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.AuthHandler;\n+import io.vertx.ext.web.handler.BasicAuthHandler;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The server deploys multiple server verticles. This is where the HTTP2 requests are handled. The\n+ * actual implementation of the endpoints is provided by an implementation of {@code Endpoints}.\n+ */\n+// CHECKSTYLE_RULES.OFF: ClassDataAbstractionCoupling", "originalCommit": "a764488cce19a687f4b368d9fc91d54045dc57e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0NTUzMQ==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r417645531", "bodyText": "Sure, split up, so things are much more modular now.\nI agree about these rules.  I was initially just trying to minimize the chance of breaking something  during the refactor, but it's pretty straightforward and low risk.", "author": "AlanConfluent", "createdAt": "2020-04-29T22:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "66294229ebddbefe321f7cddc7729dc03a3eb738", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AbstractServerVerticle.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AbstractServerVerticle.java\nindex 3178cd4cc3..af455e9ab0 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AbstractServerVerticle.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/AbstractServerVerticle.java\n\n@@ -15,43 +15,17 @@\n \n package io.confluent.ksql.api.server;\n \n-import static io.netty.handler.codec.http.HttpResponseStatus.FORBIDDEN;\n-import static io.netty.handler.codec.http.HttpResponseStatus.UNAUTHORIZED;\n-\n-import io.confluent.ksql.api.auth.AuthenticationPlugin;\n-import io.confluent.ksql.api.auth.AuthenticationPluginHandler;\n-import io.confluent.ksql.api.auth.JaasAuthProvider;\n-import io.confluent.ksql.api.auth.KsqlAuthorizationProviderHandler;\n-import io.confluent.ksql.api.server.protocol.ErrorResponse;\n-import io.confluent.ksql.rest.server.KsqlRestConfig;\n-import io.confluent.ksql.security.KsqlSecurityExtension;\n import io.vertx.core.AbstractVerticle;\n-import io.vertx.core.Handler;\n import io.vertx.core.Promise;\n-import io.vertx.core.buffer.Buffer;\n-import io.vertx.core.http.HttpHeaders;\n import io.vertx.core.http.HttpServer;\n import io.vertx.core.http.HttpServerOptions;\n-import io.vertx.core.http.HttpServerResponse;\n-import io.vertx.core.json.JsonObject;\n-import io.vertx.ext.auth.AuthProvider;\n import io.vertx.ext.web.Router;\n-import io.vertx.ext.web.RoutingContext;\n-import io.vertx.ext.web.handler.AuthHandler;\n-import io.vertx.ext.web.handler.BasicAuthHandler;\n import java.util.Objects;\n-import java.util.Optional;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/**\n- * The server deploys multiple server verticles. This is where the HTTP2 requests are handled. The\n- * actual implementation of the endpoints is provided by an implementation of {@code Endpoints}.\n- */\n-// CHECKSTYLE_RULES.OFF: ClassDataAbstractionCoupling\n public abstract class AbstractServerVerticle extends AbstractVerticle {\n \n-  // CHECKSTYLE_RULES.ON: ClassDataAbstractionCoupling\n   private static final Logger log = LoggerFactory.getLogger(AbstractServerVerticle.class);\n \n   protected final HttpServerOptions httpServerOptions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNTI4NQ==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r417425285", "bodyText": "Again, these rules are here for a reason - can we refactor this method so its not breaking all these complexity rules?", "author": "big-andy-coates", "createdAt": "2020-04-29T15:54:22Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -65,26 +66,32 @@\n   private final Set<HttpConnection> connections = new ConcurrentHashSet<>();\n   private final int maxPushQueryCount;\n   private final Set<String> deploymentIds = new HashSet<>();\n+  private final InternalEndpoints internalEndpoints;\n   private final KsqlSecurityExtension securityExtension;\n   private final Optional<AuthenticationPlugin> authenticationPlugin;\n   private final ServerState serverState;\n   private final List<URI> listeners = new ArrayList<>();\n   private WorkerExecutor workerExecutor;\n \n-  public Server(final Vertx vertx, final KsqlRestConfig config, final Endpoints endpoints,\n+  public Server(final Vertx vertx, final KsqlRestConfig config,\n+      final Endpoints endpoints,\n+      final InternalEndpoints internalEndpoints,\n       final KsqlSecurityExtension securityExtension,\n       final Optional<AuthenticationPlugin> authenticationPlugin,\n       final ServerState serverState) {\n     this.vertx = Objects.requireNonNull(vertx);\n     this.config = Objects.requireNonNull(config);\n     this.endpoints = Objects.requireNonNull(endpoints);\n+    this.internalEndpoints = Objects.requireNonNull(internalEndpoints);\n     this.securityExtension = Objects.requireNonNull(securityExtension);\n     this.authenticationPlugin = Objects.requireNonNull(authenticationPlugin);\n     this.serverState = Objects.requireNonNull(serverState);\n     this.maxPushQueryCount = config.getInt(KsqlRestConfig.MAX_PUSH_QUERIES);\n   }\n \n+  // CHECKSTYLE_RULES.OFF: CyclomaticComplexity|NPathComplexity", "originalCommit": "a764488cce19a687f4b368d9fc91d54045dc57e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2Mjc2Mw==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r417662763", "bodyText": "Split up the method and removed the disabling.", "author": "AlanConfluent", "createdAt": "2020-04-29T23:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNTI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "66294229ebddbefe321f7cddc7729dc03a3eb738", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\nindex c61b7dad7d..4be32f93e7 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\n\n@@ -71,6 +72,7 @@ public class Server {\n   private final Optional<AuthenticationPlugin> authenticationPlugin;\n   private final ServerState serverState;\n   private final List<URI> listeners = new ArrayList<>();\n+  private final List<URI> internalListeners = new ArrayList<>();\n   private WorkerExecutor workerExecutor;\n \n   public Server(final Vertx vertx, final KsqlRestConfig config,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNTQzNQ==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r417425435", "bodyText": "I'm guessing this is not intentional? Do we want different counts for internal vs external?", "author": "big-andy-coates", "createdAt": "2020-04-29T15:54:33Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -95,8 +102,13 @@ public synchronized void start() {\n     log.debug(\"Deploying \" + options.getInstances() + \" instances of server verticle\");\n \n     final List<URI> listenUris = parseListeners(config);\n+    final Optional<URI> internalListenUri = parseInternalListener(config, listenUris);\n+    // If there's no special internal endpoint listen URI, then just bind them with the rest of the\n+    // endpoints.\n+    final Optional<InternalEndpoints> combinedInternalEndpointsOptional =\n+        Optional.ofNullable(!internalListenUri.isPresent() ? internalEndpoints : null);\n \n-    final int instances = config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);\n+    final int instances = 2; //config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);", "originalCommit": "a764488cce19a687f4b368d9fc91d54045dc57e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MDMyMA==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r417650320", "bodyText": "Not intentional.\nFor any of these async handlers, I would set the number of instances to be some multiple times the number of cpus, since it should't be proportional to the amount of traffic.  So, it seems they should be be all the same.  If we think there's a reason internal would be different, I'll make another config.", "author": "AlanConfluent", "createdAt": "2020-04-29T22:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNTQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3NTY4Ng==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r420675686", "bodyText": "I'm not vertx, so can't really comment. @purplefox may have a view.", "author": "big-andy-coates", "createdAt": "2020-05-06T10:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNTQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "66294229ebddbefe321f7cddc7729dc03a3eb738", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\nindex c61b7dad7d..4be32f93e7 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\n\n@@ -108,21 +108,40 @@ public class Server {\n     final Optional<InternalEndpoints> combinedInternalEndpointsOptional =\n         Optional.ofNullable(!internalListenUri.isPresent() ? internalEndpoints : null);\n \n-    final int instances = 2; //config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);\n+    final int instances = config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);\n \n     final List<CompletableFuture<String>> deployFutures = new ArrayList<>();\n+    deployFutures.addAll(setupPublicEndpoints(instances, listenUris,\n+        combinedInternalEndpointsOptional));\n+    deployFutures.addAll(setupInternalEndpoints(instances, internalListenUri));\n \n-    final Map<URI, URI> uris = new ConcurrentHashMap<>();\n+    final CompletableFuture<Void> allDeployFuture = CompletableFuture.allOf(deployFutures\n+        .toArray(new CompletableFuture<?>[0]));\n \n+    try {\n+      allDeployFuture.get();\n+      for (CompletableFuture<String> deployFuture : deployFutures) {\n+        deploymentIds.add(deployFuture.get());\n+      }\n+    } catch (Exception e) {\n+      throw new KsqlException(\"Failed to start API server\", e);\n+    }\n+    log.info(\"API server started\");\n+  }\n+\n+  private static List<CompletableFuture<String>> setupEndpointsCommon(\n+      final Vertx vertx,\n+      final int instances,\n+      final List<URI> listenUris,\n+      final Function<URI, AbstractServerVerticle> verticleFactory,\n+      final List<URI> listeners) {\n+    final List<CompletableFuture<String>> deployFutures = new ArrayList<>();\n+    final Map<URI, URI> uris = new ConcurrentHashMap<>();\n     for (URI listener : listenUris) {\n \n       for (int i = 0; i < instances; i++) {\n         final VertxCompletableFuture<String> vcf = new VertxCompletableFuture<>();\n-        final ServerVerticle serverVerticle = new ServerVerticle(endpoints,\n-            combinedInternalEndpointsOptional,\n-            createHttpServerOptions(config, listener.getHost(), listener.getPort(),\n-                listener.getScheme().equalsIgnoreCase(\"https\")),\n-            this);\n+        final AbstractServerVerticle serverVerticle = verticleFactory.apply(listener);\n         vertx.deployVerticle(serverVerticle, vcf);\n         final int index = i;\n         final CompletableFuture<String> deployFuture = vcf.thenApply(s -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyODU4Mw==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r417428583", "bodyText": "This likely should refer to the same port as advertised listener, if set.\n\nNot sure what you mean by this - why should it be the same port? Seems normally for an internal endpoint to have a different port. And wouldn't that cause a port clash on startup?\n\nIf set, the internal endpoints don't use authentication.\n\nAside from the questionable English ;), the internal endpoints should definitely support authentication, otherwise its a security hole. It should be possible to configure that auth differently to the main endpoint. Yes, sometimes the internal endpoints can be locked down by other means, but not always, and some places will want the additional layer of protection that authentication brings regardless.  Security is like Ogres.", "author": "big-andy-coates", "createdAt": "2020-04-29T15:58:51Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -137,6 +137,16 @@\n           + \"Unlike listeners, it is not valid to use the 0.0.0.0 (IPv4) or [::] (IPv6) \"\n           + \"wildcard addresses.\";\n \n+  public static final String INTERNAL_LISTENER_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"internal.listener\";\n+  private static final String INTERNAL_LISTENER_DOC =\n+      \"The listener used for binding internal endpoints, if different to the '\"\n+          + LISTENERS_CONFIG + \"' config property. \"\n+          + \"This likely should refer to the same port as advertised listener, if set. \"\n+          + \"In IaaS environments, this may need to be different from the interface to which\"\n+          + \"the server binds. If this is not set, the first value from listeners will be used. \"\n+          + \"If set, the internal endpoints don't use authentication.\";\n+", "originalCommit": "a764488cce19a687f4b368d9fc91d54045dc57e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NDA1Nw==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r417654057", "bodyText": "This likely should refer to the same port as advertised listener, if set.\n\nNot sure what you mean by this - why should it be the same port? Seems normally for an internal endpoint to have a different port. And wouldn't that cause a port clash on startup?\n\nI explained this much better when talking with Tim in comments.   In practice, we want the ksql.advertised.listener to refer to the thing bound by ksql.internal.listener, since this advertising is only for inter-node internal requests.  Even if we wanted to call an existing, publicly facing endpoint, I think it's useful to differentiate where it's coming from and actually create an internal version of the endpoint (which can of course, delegate to the same logic, if necessary).  The alternative is to have a ksql.advertised.listener and ksql.advertised.internal.listener, but this seems overly complex and would not accomplish the differentiation.\nksql.advertised.listener is just a way of explicitly stating whatever is already listened on, it doesn't actually bind any ports, so there should be no port clash.  ksql.internal.listener is more analogous to listeners.  If those are set to the same port, it will attempt to do the combined setup.\nI can see my description is poor.  Let me take another try at it.\n\n\nIf set, the internal endpoints don't use authentication.\n\nAside from the questionable English ;), the internal endpoints should definitely support authentication, otherwise its a security hole. It should be possible to configure that auth differently to the main endpoint. Yes, sometimes the internal endpoints can be locked down by other means, but not always, and some places will want the additional layer of protection that authentication brings regardless. Security is like Ogres.\n\nFor many internal calls, they're not being done on behalf of a user.  Pull queries are the exception.  Do we have any mechanism for these system types of requests at the moment?", "author": "AlanConfluent", "createdAt": "2020-04-29T22:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyODU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "66294229ebddbefe321f7cddc7729dc03a3eb738", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\nindex e3211348c3..e4d4b921e0 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n\n@@ -142,10 +142,10 @@ public class KsqlRestConfig extends AbstractConfig {\n   private static final String INTERNAL_LISTENER_DOC =\n       \"The listener used for binding internal endpoints, if different to the '\"\n           + LISTENERS_CONFIG + \"' config property. \"\n-          + \"This likely should refer to the same port as advertised listener, if set. \"\n+          + \"This is the same endpoint referred to by ksql.advertised.listener, which is also used \"\n+          + \"for internal requests.\"\n           + \"In IaaS environments, this may need to be different from the interface to which\"\n-          + \"the server binds. If this is not set, the first value from listeners will be used. \"\n-          + \"If set, the internal endpoints don't use authentication.\";\n+          + \"the other endpoints bind.\";\n \n   static final String STREAMED_QUERY_DISCONNECT_CHECK_MS_CONFIG =\n       \"query.stream.disconnect.check\";\n"}}, {"oid": "66294229ebddbefe321f7cddc7729dc03a3eb738", "url": "https://github.com/confluentinc/ksql/commit/66294229ebddbefe321f7cddc7729dc03a3eb738", "message": "Adds back comment", "committedDate": "2020-05-01T03:15:25Z", "type": "forcePushed"}, {"oid": "76ed087aab594599cfef0f8b44f2ddaf28dfb350", "url": "https://github.com/confluentinc/ksql/commit/76ed087aab594599cfef0f8b44f2ddaf28dfb350", "message": "Fixes PullQueryFunctionalTest after rebase", "committedDate": "2020-05-11T23:32:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4OTUwMw==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r420689503", "bodyText": "Personally, I think we should reword this AND reword the help for the advertised listener. Maybe something like:\n  private static final String INTERNAL_LISTENER_DOC =\n      \"The listener used for inter-node communication, if different to the '\"\n          + LISTENERS_CONFIG + \"' config. \"\n          + \"The \" + ADVERTISED_LISTENER_CONFIG + \" config can be set to provide an \"\n          + \"externally routable name for this listener, if required\";\n\n\nprivate static final String ADVERTISED_LISTENER_DOC =\n      \"The listener this node will share with other ksqlDB nodes in the cluster for internal communication. \"\n          + \"In IaaS environments, this may need to be different from the interface to which \"\n          + \"the server binds. \"\n          + \"If this is not set, the advertised listener will either default to \" +  INTERNAL_LISTENER_CONFIG \n          + \", if set, or else the first value from \" +  LISTENERS_CONFIG + \" will be used. \"\n          + \"It is not valid to use the 0.0.0.0 (IPv4) or [::] (IPv6) wildcard addresses.\";\nPlus I think both INTERNAL_LISTENER_DOC and LISTENERS_DOC would benefit from more info on how to secure these listeners.", "author": "big-andy-coates", "createdAt": "2020-05-06T10:28:47Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -137,6 +137,16 @@\n           + \"Unlike listeners, it is not valid to use the 0.0.0.0 (IPv4) or [::] (IPv6) \"\n           + \"wildcard addresses.\";\n \n+  public static final String INTERNAL_LISTENER_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"internal.listener\";\n+  private static final String INTERNAL_LISTENER_DOC =\n+      \"The listener used for binding internal endpoints, if different to the '\"\n+          + LISTENERS_CONFIG + \"' config property. \"\n+          + \"This is the same endpoint referred to by ksql.advertised.listener, which is also used \"\n+          + \"for internal requests.\"\n+          + \"In IaaS environments, this may need to be different from the interface to which\"\n+          + \"the other endpoints bind.\";", "originalCommit": "6632e394b933e5024092e9661125b19a481d047c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMDA3MQ==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r424630071", "bodyText": "I agree, those previous doc strings were a bit outdated after multiple iterations on this.\nAdopted your suggestions.\nI added more of a security explanation for the internal listener doc, which I think makes it easier to understand the purpose of.", "author": "AlanConfluent", "createdAt": "2020-05-13T18:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4OTUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "538b289152d16580285431f2ae5d2a141dabf8f1", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\nindex e4d4b921e0..e3211348c3 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java\n\n@@ -142,10 +142,10 @@ public class KsqlRestConfig extends AbstractConfig {\n   private static final String INTERNAL_LISTENER_DOC =\n       \"The listener used for binding internal endpoints, if different to the '\"\n           + LISTENERS_CONFIG + \"' config property. \"\n-          + \"This is the same endpoint referred to by ksql.advertised.listener, which is also used \"\n-          + \"for internal requests.\"\n+          + \"This likely should refer to the same port as advertised listener, if set. \"\n           + \"In IaaS environments, this may need to be different from the interface to which\"\n-          + \"the other endpoints bind.\";\n+          + \"the server binds. If this is not set, the first value from listeners will be used. \"\n+          + \"If set, the internal endpoints don't use authentication.\";\n \n   static final String STREAMED_QUERY_DISCONNECT_CHECK_MS_CONFIG =\n       \"query.stream.disconnect.check\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5OTM3NQ==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r420699375", "bodyText": "Can there be more than one?  I thought there was only a single internal listener...\nIs this empty if internal listeners config is not set, or does it contain the first value from listeners?  It seems to me to be empty if internal listeners is not set - which will likely mean each caller of this method will need to duplicate logic to handle the 'if empty' case.   Might be better to have this method know to return the first non-internal listener if internal listeners is not set.\nAlso, it would be much cleaner IMHO if internalListeners (and listeners), where immutable. Yes, they're only set once start has been called, but then they should be immutable, i.e. ImmutableList in the case of listeners and either ImmutableList or just a URI in the case of the internal.  This means the field can't be final, but I'd rather  a mutable field to an immutable object than an immutable field to a mutable object.  The latter doesn't require the synchronized call you have here.", "author": "big-andy-coates", "createdAt": "2020-05-06T10:47:56Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -224,6 +277,10 @@ public int queryConnectionCount() {\n     return ImmutableList.copyOf(listeners);\n   }\n \n+  public synchronized List<URI> getInternalListeners() {\n+    return ImmutableList.copyOf(internalListeners);\n+  }", "originalCommit": "6632e394b933e5024092e9661125b19a481d047c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTYxMg==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r424559612", "bodyText": "You're right.  I was originally considering allowing for more than one, though I didn't do it this way.  I changed the return type to an Optional which is immutable.", "author": "AlanConfluent", "createdAt": "2020-05-13T16:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5OTM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "92e0947c78eef0e0f28cc5f890a4fba2e31f08d3", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\nindex 4be32f93e7..4dac46015c 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java\n\n@@ -277,8 +229,8 @@ public class Server {\n     return ImmutableList.copyOf(listeners);\n   }\n \n-  public synchronized List<URI> getInternalListeners() {\n-    return ImmutableList.copyOf(internalListeners);\n+  public synchronized Optional<URI> getInternalListener() {\n+    return Optional.ofNullable(internalListener);\n   }\n \n   private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ksqlRestConfig,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NDYzNg==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r423654636", "bodyText": "perfect - thanks!", "author": "big-andy-coates", "createdAt": "2020-05-12T11:17:21Z", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/AuthorizationFunctionalTest.java", "diffHunk": "@@ -121,6 +125,33 @@ public void shouldAllowAccess() {\n     assertThat(topics.get(0).getName(), is(TOPIC_1));\n   }\n \n+  @Test\n+  public void shouldDenyAccess_internal() {", "originalCommit": "76ed087aab594599cfef0f8b44f2ddaf28dfb350", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92e0947c78eef0e0f28cc5f890a4fba2e31f08d3", "chunk": "diff --git a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/AuthorizationFunctionalTest.java b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/AuthorizationFunctionalTest.java\nindex 1aba7a8495..d3ab1e2c62 100644\n--- a/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/AuthorizationFunctionalTest.java\n+++ b/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/AuthorizationFunctionalTest.java\n\n@@ -128,12 +133,12 @@ public class AuthorizationFunctionalTest {\n   @Test\n   public void shouldDenyAccess_internal() {\n     // Given:\n-    denyAccess(USER1, \"GET\", \"/clusterStatus\");\n+    denyAccess(USER1, \"POST\", \"/heartbeat\");\n \n     // When\n     final AssertionError e = assertThrows(\n         AssertionError.class,\n-        () -> makeClusterStatusRequest(USER1)\n+        () -> makeHeartbeat(USER1)\n     );\n \n     // Then:\n"}}, {"oid": "92e0947c78eef0e0f28cc5f890a4fba2e31f08d3", "url": "https://github.com/confluentinc/ksql/commit/92e0947c78eef0e0f28cc5f890a4fba2e31f08d3", "message": "Makes fallback from advertised to internal to listeners", "committedDate": "2020-05-13T00:20:05Z", "type": "forcePushed"}, {"oid": "538b289152d16580285431f2ae5d2a141dabf8f1", "url": "https://github.com/confluentinc/ksql/commit/538b289152d16580285431f2ae5d2a141dabf8f1", "message": "feat: Adds the ability have internal endpoints listen on ksql.internal.listener", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "5a0e625e053e0ec16ab2d7a145b20032b7844889", "url": "https://github.com/confluentinc/ksql/commit/5a0e625e053e0ec16ab2d7a145b20032b7844889", "message": "Initial feedback", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "9abe395b22029b52ade7d32fb19682cdfb47db70", "url": "https://github.com/confluentinc/ksql/commit/9abe395b22029b52ade7d32fb19682cdfb47db70", "message": "Fix bug with tracking listeners after async startup", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "15e3f301e420ad6903cc0f2ad8c56f3d8e29e8f6", "url": "https://github.com/confluentinc/ksql/commit/15e3f301e420ad6903cc0f2ad8c56f3d8e29e8f6", "message": "Gets functional tests working", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "dfa3e5e304bb1a5e17e7f9f991a9be9640dec9eb", "url": "https://github.com/confluentinc/ksql/commit/dfa3e5e304bb1a5e17e7f9f991a9be9640dec9eb", "message": "Adds back comment", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "09b2408af13654d64e1ef0d474589e96bbff0ac9", "url": "https://github.com/confluentinc/ksql/commit/09b2408af13654d64e1ef0d474589e96bbff0ac9", "message": "Added documentation for ksql.internal.listener", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "a10770c92a7af4aef4a27652e24d9234a2f6170a", "url": "https://github.com/confluentinc/ksql/commit/a10770c92a7af4aef4a27652e24d9234a2f6170a", "message": "Does not double bind endpoints", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "aa4d0faf107a1b6a2c6119bfb257e759e02e5325", "url": "https://github.com/confluentinc/ksql/commit/aa4d0faf107a1b6a2c6119bfb257e759e02e5325", "message": "Changed name of OldApiEndpointExecutor", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "122e1301c3653e83d057a8dc2bdffb734d975cec", "url": "https://github.com/confluentinc/ksql/commit/122e1301c3653e83d057a8dc2bdffb734d975cec", "message": "Apply suggestions from code review\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "2ee90b6e0358f180d7e45ae048908122436d73a7", "url": "https://github.com/confluentinc/ksql/commit/2ee90b6e0358f180d7e45ae048908122436d73a7", "message": "Adds AuthorizationFunctionalTest", "committedDate": "2020-05-13T22:25:21Z", "type": "commit"}, {"oid": "9483055966ec954173f8c40ca2d13951a8da173e", "url": "https://github.com/confluentinc/ksql/commit/9483055966ec954173f8c40ca2d13951a8da173e", "message": "Adds documetation and whitelists lag and heartbeats for no auth", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "e4948b1bec3ee38259cc0b4ceb728eef6ea9d26e", "url": "https://github.com/confluentinc/ksql/commit/e4948b1bec3ee38259cc0b4ceb728eef6ea9d26e", "message": "Adds more docs", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "1b41744bc1a59becaf2ac7739a0cfcee488acb1b", "url": "https://github.com/confluentinc/ksql/commit/1b41744bc1a59becaf2ac7739a0cfcee488acb1b", "message": "To be conservative by default, removing paths from KsqlAuthorizationProviderHandler.PATHS_WITHOUT_AUTHORIZATION.", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "21b4db8fa70bff1810b07324340988294a39e47e", "url": "https://github.com/confluentinc/ksql/commit/21b4db8fa70bff1810b07324340988294a39e47e", "message": "Adds internal header to /query and /ksql requests and checks for them", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "e3e8045bc84043b2a6acd26c4826a89e899524d9", "url": "https://github.com/confluentinc/ksql/commit/e3e8045bc84043b2a6acd26c4826a89e899524d9", "message": "updates docs", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "c25ab625849b975a137d0999d928e387b549d1d9", "url": "https://github.com/confluentinc/ksql/commit/c25ab625849b975a137d0999d928e387b549d1d9", "message": "Fixes PullQueryFunctionalTest after rebase", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "f362537e71c86a520c4f05bab4b7e414d466154d", "url": "https://github.com/confluentinc/ksql/commit/f362537e71c86a520c4f05bab4b7e414d466154d", "message": "Lots of feedback", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "2a7e73cbc9ff1213af8d2a9531b5c91a44574817", "url": "https://github.com/confluentinc/ksql/commit/2a7e73cbc9ff1213af8d2a9531b5c91a44574817", "message": "Makes fallback from advertised to internal to listeners", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "c8281b879f2d183207402f490cf863ecc0572daf", "url": "https://github.com/confluentinc/ksql/commit/c8281b879f2d183207402f490cf863ecc0572daf", "message": "Docs feedback", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "ef991e8e982f9ad1500430849178f9e5124c62a0", "url": "https://github.com/confluentinc/ksql/commit/ef991e8e982f9ad1500430849178f9e5124c62a0", "message": "Fix false findbugs warning", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "6576f9956e10d49ce8abe15e69e0d0c17189d3e6", "url": "https://github.com/confluentinc/ksql/commit/6576f9956e10d49ce8abe15e69e0d0c17189d3e6", "message": "Missed a doc string update", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "ace25ffffe22dc274dd295f0c4fabb9343e08ae2", "url": "https://github.com/confluentinc/ksql/commit/ace25ffffe22dc274dd295f0c4fabb9343e08ae2", "message": "Reverted refactor of ServerVerticle", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"oid": "6dee225818373c8454b582be48d9b984e29eefbe", "url": "https://github.com/confluentinc/ksql/commit/6dee225818373c8454b582be48d9b984e29eefbe", "message": "Adds back CHECKSTYLE_RULES.OFF: ClassDataAbstractionCoupling which was there before", "committedDate": "2020-05-13T22:25:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyMzI0OQ==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r424923249", "bodyText": "Best to use constant here HttpResponseStatus.BAD_REQUEST.code()", "author": "purplefox", "createdAt": "2020-05-14T07:24:22Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InternalEndpointHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+\n+public class InternalEndpointHandler implements Handler<RoutingContext> {\n+  private static final Set<String> INTERNAL_PATHS = ImmutableSet.of(\n+      \"/heartbeat\", \"/lag\");\n+\n+  private final boolean isFromInternalListener;\n+\n+  public InternalEndpointHandler(final boolean isFromInternalListener) {\n+    this.isFromInternalListener = isFromInternalListener;\n+  }\n+\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    if (INTERNAL_PATHS.contains(routingContext.normalisedPath())\n+        && !isFromInternalListener) {\n+      routingContext.fail(400,", "originalCommit": "58d089f0136847ef3c602b0750f7144d8ca67a99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyMzUxMw==", "url": "https://github.com/confluentinc/ksql/pull/5212#discussion_r425323513", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-05-14T17:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyMzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "168a3abeff52d294d3be89fce80b33237ba5b596", "chunk": "diff --git a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InternalEndpointHandler.java b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InternalEndpointHandler.java\nindex 8ae9c18fdd..97ec12e559 100644\n--- a/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InternalEndpointHandler.java\n+++ b/ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InternalEndpointHandler.java\n\n@@ -16,6 +16,7 @@\n package io.confluent.ksql.api.server;\n \n import com.google.common.collect.ImmutableSet;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.Handler;\n import io.vertx.ext.web.RoutingContext;\n import java.util.Set;\n"}}, {"oid": "168a3abeff52d294d3be89fce80b33237ba5b596", "url": "https://github.com/confluentinc/ksql/commit/168a3abeff52d294d3be89fce80b33237ba5b596", "message": "Feedback, constant for 400", "committedDate": "2020-05-14T17:03:21Z", "type": "commit"}, {"oid": "168a3abeff52d294d3be89fce80b33237ba5b596", "url": "https://github.com/confluentinc/ksql/commit/168a3abeff52d294d3be89fce80b33237ba5b596", "message": "Feedback, constant for 400", "committedDate": "2020-05-14T17:03:21Z", "type": "forcePushed"}]}