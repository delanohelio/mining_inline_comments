{"pr_number": 6466, "pr_title": "test: more avro key testing & schema verification", "pr_createdAt": "2020-10-20T01:09:35Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6466", "timeline": [{"oid": "21dcbb9d8cae411990e39e8c340c75eb227bb6e9", "url": "https://github.com/confluentinc/ksql/commit/21dcbb9d8cae411990e39e8c340c75eb227bb6e9", "message": "test: more avro key testing & schema verification", "committedDate": "2020-10-20T01:47:48Z", "type": "forcePushed"}, {"oid": "e35bcd9b660af14579265f0dea9d286ca35b91f7", "url": "https://github.com/confluentinc/ksql/commit/e35bcd9b660af14579265f0dea9d286ca35b91f7", "message": "test: more avro key testing & schema verification", "committedDate": "2020-10-20T03:16:02Z", "type": "commit"}, {"oid": "e35bcd9b660af14579265f0dea9d286ca35b91f7", "url": "https://github.com/confluentinc/ksql/commit/e35bcd9b660af14579265f0dea9d286ca35b91f7", "message": "test: more avro key testing & schema verification", "committedDate": "2020-10-20T03:16:02Z", "type": "forcePushed"}, {"oid": "bbf5a5a93971e0211a5074692e1aca87402d0452", "url": "https://github.com/confluentinc/ksql/commit/bbf5a5a93971e0211a5074692e1aca87402d0452", "message": "chore: suppress checkstyle", "committedDate": "2020-10-20T15:47:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2ODgyNw==", "url": "https://github.com/confluentinc/ksql/pull/6466#discussion_r508668827", "bodyText": "nit: can we move this matcher logic into PostTopicNode, so someone updating PostTopicNode is less likely to forget to update the matcher? The other QTT classes all follow a particular pattern with this, for example: https://github.com/confluentinc/ksql/blob/master/ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/SourceNode.java#L114", "author": "vcrfxia", "createdAt": "2020-10-20T16:23:43Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/PostConditionsNode.java", "diffHunk": "@@ -133,7 +138,34 @@ Pattern buildBlackList() {\n     @SuppressWarnings(\"unchecked\")\n     Matcher<Iterable<PostTopicNode>> buildTopics() {\n       final Matcher<PostTopicNode>[] matchers = topics.stream()\n-          .map(Matchers::is)\n+          .map(topic -> new BaseMatcher<PostTopicNode>() {", "originalCommit": "bbf5a5a93971e0211a5074692e1aca87402d0452", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68b36046822cdc1a6d5b775c2f9fdc596cf726c3", "chunk": "diff --git a/ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/PostConditionsNode.java b/ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/PostConditionsNode.java\nindex ab043fddee..da33df5da8 100644\n--- a/ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/PostConditionsNode.java\n+++ b/ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/PostConditionsNode.java\n\n@@ -138,34 +138,7 @@ public final class PostConditionsNode {\n     @SuppressWarnings(\"unchecked\")\n     Matcher<Iterable<PostTopicNode>> buildTopics() {\n       final Matcher<PostTopicNode>[] matchers = topics.stream()\n-          .map(topic -> new BaseMatcher<PostTopicNode>() {\n-            @Override\n-            public void describeTo(final Description description) {\n-              try {\n-                description.appendText(TestJsonMapper.INSTANCE.get().writeValueAsString(topic));\n-              } catch (JsonProcessingException e) {\n-                throw new IllegalArgumentException(e);\n-              }\n-            }\n-\n-            // CHECKSTYLE_RULES.OFF: BooleanExpressionComplexity\n-            @Override\n-            public boolean matches(final Object item) {\n-              if (!(item instanceof PostTopicNode)) {\n-                return false;\n-              }\n-\n-              final PostTopicNode that = (PostTopicNode) item;\n-              return Objects.equals(topic.name, that.name)\n-                  && Objects.equals(topic.keyFormat, that.keyFormat)\n-                  && Objects.equals(topic.valueFormat, that.valueFormat)\n-                  && (!topic.partitions.isPresent() || topic.partitions.equals(that.partitions))\n-                  && (topic.keySchema instanceof NullNode || topic.keySchema.equals(that.keySchema))\n-                  && (topic.valueSchema instanceof NullNode\n-                          || topic.valueSchema.equals(that.valueSchema));\n-            }\n-            // CHECKSTYLE_RULES.ON: BooleanExpessionComplexity\n-          })\n+          .map(PostTopicNode::build)\n           .toArray(Matcher[]::new);\n \n       return hasItems(matchers);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2OTk2Ng==", "url": "https://github.com/confluentinc/ksql/pull/6466#discussion_r508669966", "bodyText": "Can we add a comment explaining that we need this special case because protobuf schemas aren't valid JSON? If I hadn't coincidentally encountered this in SerdeUtil (link) the other day, I would've been confused by this.\nRelatedly, it sucks that we have to duplicate this special-casing in multiple places... can't think of a good alternative at the moment though.", "author": "vcrfxia", "createdAt": "2020-10-20T16:25:23Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutor.java", "diffHunk": "@@ -229,6 +241,22 @@ public void buildAndExecuteQuery(\n     }\n   }\n \n+  private static JsonNode fromSchemaMetadata(final Optional<SchemaMetadata> metadata) {\n+    if (!metadata.isPresent()) {\n+      return NullNode.getInstance();\n+    }\n+\n+    if (ProtobufFormat.NAME.equals(metadata.get().getSchemaType())) {", "originalCommit": "bbf5a5a93971e0211a5074692e1aca87402d0452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5NDc0Nw==", "url": "https://github.com/confluentinc/ksql/pull/6466#discussion_r508694747", "bodyText": "I was originally going to refactor all of it to just be a string, but then that made the QTT tests really annoying to write (escaped JSON inside JSON strings really sucks)", "author": "agavra", "createdAt": "2020-10-20T17:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2OTk2Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "68b36046822cdc1a6d5b775c2f9fdc596cf726c3", "url": "https://github.com/confluentinc/ksql/commit/68b36046822cdc1a6d5b775c2f9fdc596cf726c3", "message": "chore: PR feedback", "committedDate": "2020-10-20T18:48:05Z", "type": "commit"}]}