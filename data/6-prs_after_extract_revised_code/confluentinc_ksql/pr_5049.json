{"pr_number": 5049, "pr_title": "refactor: return single status based on aggregate results in state field", "pr_createdAt": "2020-04-10T22:06:29Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5049", "timeline": [{"oid": "874828ba0eba8edfb40f9acb7a974f51cc10a812", "url": "https://github.com/confluentinc/ksql/commit/874828ba0eba8edfb40f9acb7a974f51cc10a812", "message": "refactor: return aggregate status of query in state field", "committedDate": "2020-04-13T06:57:15Z", "type": "forcePushed"}, {"oid": "14b27464a8cbf046ab89bbc4019b9b3746dc5642", "url": "https://github.com/confluentinc/ksql/commit/14b27464a8cbf046ab89bbc4019b9b3746dc5642", "message": "refactor: return aggregate status of query in state field", "committedDate": "2020-04-13T07:47:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4MDkwNA==", "url": "https://github.com/confluentinc/ksql/pull/5049#discussion_r407780904", "bodyText": "Aren't there other states like REBALANCING, PENDING_SHUTDOWN etc.?  Should we document our rationale for clubbing all non-error states as RUNNING?", "author": "apurvam", "createdAt": "2020-04-13T23:40:31Z", "path": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/QueryDescription.java", "diffHunk": "@@ -116,7 +116,13 @@ public String getExecutionPlan() {\n   // kept for backwards compatibility\n   @JsonProperty(\"state\")\n   public Optional<String> getState() {\n-    return Optional.of(ksqlHostQueryStatus.toString());\n+    if (ksqlHostQueryStatus.isEmpty()) {\n+      return Optional.empty();\n+    }\n+\n+    return Optional.of(\n+        (ksqlHostQueryStatus.containsValue(KsqlQueryStatus.ERROR)", "originalCommit": "14b27464a8cbf046ab89bbc4019b9b3746dc5642", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4OTE2NA==", "url": "https://github.com/confluentinc/ksql/pull/5049#discussion_r407789164", "bodyText": "I was basing this off of the upcoming query error handling work being done. In the design doc, we're only exposing RUNNING and ERROR. Only having these two states probably makes more sense once that work is done, but I preemptively added them to KsqlQueryStatus.", "author": "stevenpyzhang", "createdAt": "2020-04-14T00:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4MDkwNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b54dee6bd876f11ca44085b67c926d066dbe2d47", "url": "https://github.com/confluentinc/ksql/commit/b54dee6bd876f11ca44085b67c926d066dbe2d47", "message": "refactor: return aggregate status of query in state field", "committedDate": "2020-04-15T18:34:34Z", "type": "commit"}, {"oid": "b54dee6bd876f11ca44085b67c926d066dbe2d47", "url": "https://github.com/confluentinc/ksql/commit/b54dee6bd876f11ca44085b67c926d066dbe2d47", "message": "refactor: return aggregate status of query in state field", "committedDate": "2020-04-15T18:34:34Z", "type": "forcePushed"}]}