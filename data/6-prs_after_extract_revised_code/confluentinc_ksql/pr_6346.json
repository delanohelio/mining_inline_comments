{"pr_number": 6346, "pr_title": "feat: add commandRunnerCheck to healthcheck detail", "pr_createdAt": "2020-10-01T18:29:04Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6346", "timeline": [{"oid": "d51eff055b2a590c6675228db6e947f87f074a08", "url": "https://github.com/confluentinc/ksql/commit/d51eff055b2a590c6675228db6e947f87f074a08", "message": "feat: add commandRunnerCheck to healthcheck detail", "committedDate": "2020-10-01T03:59:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxMTc1MQ==", "url": "https://github.com/confluentinc/ksql/pull/6346#discussion_r498811751", "bodyText": "Do we understand what causes the command runner to transition into ERROR state in practice? From looking at the code, it looks like this happens if the command runner has been unable to poll for 15 seconds (by default). Do we have a sense of how often this happens in practice, and why? It'd be good to have some assurance that this is rare, and that when it happens it singles an actual issue rather than something spurious, else failing the healthcheck because of it would not provide useful signal to users.\nBTW, how was the 15 second default time limit chosen?", "author": "vcrfxia", "createdAt": "2020-10-02T13:12:04Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/healthcheck/HealthCheckAgent.java", "diffHunk": "@@ -156,4 +162,24 @@ public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent)\n       return new HealthCheckResponseDetail(isHealthy);\n     }\n   }\n+\n+  private static class CommandRunnerCheck implements Check {\n+    private final String name;\n+\n+    CommandRunnerCheck(final String name) {\n+      this.name = Objects.requireNonNull(name, \"name\");\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return name;\n+    }\n+\n+    @Override\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n+      return new HealthCheckResponseDetail(\n+          healthCheckAgent.commandRunner.checkCommandRunnerStatus()\n+              == CommandRunner.CommandRunnerStatus.RUNNING);", "originalCommit": "d51eff055b2a590c6675228db6e947f87f074a08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MTg4Nw==", "url": "https://github.com/confluentinc/ksql/pull/6346#discussion_r498971887", "bodyText": "The 15 seconds is kind of arbitrary. A normal poll of the command topic by default is 5 seconds so just 3x that was the rationale.\nSo there's two conditions that can lead to returning an ERROR, if there's currently a command being processed or not.\nIf there's no command being processed, we check to see if the command runner has been unable to poll for 15 seconds. If it hasn't, it means that the CommandRunner thread is most likely dead so the server would still be running without a CommandRunner thread, which is an unhealthy state (this is if the UncaughtExceptionHandler isn't enabled).\nIf there's a command being processed, and it's been processing for longer than ksql.server.command.blocked.threshold.error.ms that's also an unhealthy state for the server since it's probably stuck executing a command (this would most likely be a bug in the code and this wouldn't eventually finish executing on its own) and isn't making progress on the command topic", "author": "stevenpyzhang", "createdAt": "2020-10-02T18:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxMTc1MQ=="}], "type": "inlineReview", "revised_code": null}]}