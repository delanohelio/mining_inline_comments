{"pr_number": 4414, "pr_title": "refactor: fix GenericRow encapsulation", "pr_createdAt": "2020-01-31T10:54:38Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4414", "timeline": [{"oid": "4679e8401aa3bb2bd3a0430e9f1ff1235c1db849", "url": "https://github.com/confluentinc/ksql/commit/4679e8401aa3bb2bd3a0430e9f1ff1235c1db849", "message": "refactor: re-order value schema used in Streams processing\n\nPreviously, when copying the meta and key columns into the value schema to enable processing via a Streams topology the columns where copied to the _start_ of the value schema. For example, given a schema of:\n\n```sql\nROWKEY INT KEY, VAL0 STRING\n```\n\nThe schema used during processing would of been:\n\n```sql\nROWKEY INT KEY, ROWTIME BIGINT, ROWKEY INT, VAL0 STRING\n```\n\nNote: `ROWTIME` and `ROWKEY` columns are _before_ the existing value columns.\n\nThis meant the transformer in `SourceBuilder` had to add the value for `ROWTIME` and `ROWKEY`, (and now `WINDOWSTART` and `WINDOWEND` for windowed sources), to the _start_ of the list of values in the `GenericRow`.  Internally, `GenericRow` was using an `ArrayList`. Inserting at the start of an `ArrayList` requires all the existing elements to be shuffled down to make room for the new element, hence processing incurred an array copy operation when inserting each of these system columns.\n\nAdditionally, the buffer backing the `ArrayList` would first need to be resized to accomodate the new element, resulting in an allocation and another array-copy op.\n\nHere's the transformer code from `SourceBuilder` and details of the operations happening:\n\n```java\n@Override\npublic GenericRow transform(final K key, final GenericRow row) {\n  if (row == null) {\n    return row;\n  }\n\n  // The call below:\n  //   - allocates a new buffer of <current-size> + 1 to hold the new element\n  //   - performs an array copy to move all existing elements down one slot\n  //   - inserts ROWTIME at the start of the list.\n  row.getColumns().add(0, processorContext.timestamp());\n\n  // The call below:\n  //   - allocates a new buffer of <current-size> + <num-key-columns> to hold the new elements\n  //   - performs an array copy to move all the existing elements, except ROWTIME, down by <num-key-columns> slots\n  //   - inserts the key columns after ROWTIME.\n  row.getColumns().addAll(1, rowKeyGenerator.apply(key));\n  return row;\n}\n```\n\nAs you can see this results in two new allocations and two array copies. Given this is in the main processing loop these aren't cheap and are easily avoided.\n\nThe new code does this:\n\n```java\n@Override\npublic GenericRow transform(final K key, final GenericRow row) {\n    if (row == null) {\n        return row;\n    }\n\n    final long timestamp = processorContext.timestamp();\n    final Collection<?> keyColumns = rowKeyGenerator.apply(key);\n\n    // Ensures capacity is large enough for all inserts\n    row.ensureAdditionalCapacity(1 + keyColumns.size());\n    // Appends ROWTIME at the end of the list\n    row.getColumns().add(timestamp);\n    // Appends key columns at the end of the list\n    row.getColumns().addAll(keyColumns);\n    return row;\n}\n```\n\nThis has zero-or-one allocations, (see below for why its generally zero), and not unnecessary array copies.\n\nTo avoid the allocation of a new buffer when the transformer calls `row.ensureAdditionalCapacity(1 + keyColumns.size());` there is a change in `GenericRowSerDe` to create the initial `GenericRow` with enough spare capacity to hold `ROWTIME`, `ROWKEY`, `WINDOWSTART` and `WINDOWEND`.\n\nBREAKING CHANGE: the order of columns for internal topics has changed. The `DELIMITED` format can not handle this in a backwards compatible way. Hence this is a breaking change for any existing queries the use the `DELIMITED` format and have internal topics.\n\nThis change has been made now for two reasons:\n 1. its a breaking change, making it much harder to do later.\n 2. The recent  https://github.com/confluentinc/ksql/pull/4404 change introduced this same issue for pull queries. This current change corrects pull queries too.\n\n### How to review\n\nThere's actually not much code changed, it's mainly tests:\n\n1. `LogicalSchema.withMetaAndKeysInValue`", "committedDate": "2020-01-30T14:29:28Z", "type": "commit"}, {"oid": "edbe8fcbeed0716f4b8ab2549e01ec642f0690b2", "url": "https://github.com/confluentinc/ksql/commit/edbe8fcbeed0716f4b8ab2549e01ec642f0690b2", "message": "chore: update tests", "committedDate": "2020-01-30T14:30:02Z", "type": "commit"}, {"oid": "e1919213ba48b53ba622edec96244e01abbc3f37", "url": "https://github.com/confluentinc/ksql/commit/e1919213ba48b53ba622edec96244e01abbc3f37", "message": "chore: quick fix", "committedDate": "2020-01-30T14:47:53Z", "type": "commit"}, {"oid": "63405e01d8eedc6cddc381c7d6fed2475427bc2e", "url": "https://github.com/confluentinc/ksql/commit/63405e01d8eedc6cddc381c7d6fed2475427bc2e", "message": "chore: disambiguate new constructor from old\n\nFix ambiguity between `new GenericRow(intialCapcity)` and `new GenericRow(singleIntColumn)`.", "committedDate": "2020-01-30T15:09:45Z", "type": "commit"}, {"oid": "067c3022de13ca31ae22eb6fa77fa55e66259885", "url": "https://github.com/confluentinc/ksql/commit/067c3022de13ca31ae22eb6fa77fa55e66259885", "message": "refactor: fix GenericRow encapsulation\n\nThe `GenericRow` that is so pervasive through the code has always been a bit of a mess:\n * it's untyped: just a list of objects.\n * it has verbose `toString` implementation.\n * it has a weird `equals`, which is also out of whack with its `hashCode`.\n * it leaks its internal state like crazy: i.e. it breaks encapsulation. It was basically a very leaky wrapper around a `List<Object>`.\n\nFollowing on from https://github.com/confluentinc/ksql/pull/4412, which added some new functionality to `GenericRow`, I couldn't resist spending some time fixing some of these issues.\n\nThis change fixes all but the first issue. It:\n * simplifies `toString` impl, removing array type handling, (which prod code doesn't use).\n   Note: `toString` is not called in prod code that I can tell, it's just for debugging.\n * removes funkiness from `equals`. Looks like `equals` is also only called from tests.\n * it fixes encapsulations: it no longer leaks mutable internal state via `getColumns` or constructors not taking defensive copies.  Mutating the state now requires explicit invocation of `GenericRow` methods. It's use of `List<Object>` internally is now an implementation detail, as it should be.\n\n This change does not fix the fact that `GenericRow` is untyped.\n\n To facilitate this change `KudafAggregator` has also been updated to accept the number of non-aggregate columns, rather than a list of non-aggregate column indexes. This is possible as the list of indexes was always sequential and zero-based, e.g. [0, 1, 2].", "committedDate": "2020-01-31T10:52:57Z", "type": "commit"}, {"oid": "f94aace331c143f8633dcc67036d37ab3862f3e0", "url": "https://github.com/confluentinc/ksql/commit/f94aace331c143f8633dcc67036d37ab3862f3e0", "message": "chore: all the rest", "committedDate": "2020-01-31T10:56:33Z", "type": "commit"}, {"oid": "5901b729455817f84615377a56c8620380657c5c", "url": "https://github.com/confluentinc/ksql/commit/5901b729455817f84615377a56c8620380657c5c", "message": "chore: refactor undo aggregator", "committedDate": "2020-01-31T11:22:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2ODc1NQ==", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374368755", "bodyText": "The NON_AGG_COLUMNS example in this unit test file confuses me since it seems to suggest non-aggregate columns may be intermingled with aggregate columns in the input, and violates the assumption that enables the refactor in this PR. I assume it's just the unit test that needs to be updated?", "author": "vcrfxia", "createdAt": "2020-02-03T22:07:28Z", "path": "ksql-streams/src/test/java/io/confluent/ksql/execution/streams/AggregateParamsFactoryTest.java", "diffHunk": "@@ -132,10 +140,21 @@ public void init() {\n   @SuppressWarnings(\"unchecked\")\n   @Test\n   public void shouldCreateAggregatorWithCorrectParams() {\n-    verify(udafFactory).create(\n-        ImmutableList.of(0, 2),", "originalCommit": "5901b729455817f84615377a56c8620380657c5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4MTAzOA==", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374881038", "bodyText": "Yeah, just the test out of whack. It's ok now though, right?", "author": "big-andy-coates", "createdAt": "2020-02-04T19:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2ODc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDY1NA==", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374930654", "bodyText": "Did anything change here? I don't see an update: https://github.com/confluentinc/ksql/blob/master/ksql-streams/src/test/java/io/confluent/ksql/execution/streams/AggregateParamsFactoryTest.java#L54-L55", "author": "vcrfxia", "createdAt": "2020-02-04T21:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2ODc1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2ODk2MA==", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374368960", "bodyText": "What happened to this concern about double comparison? Are doubles never being compared in tests?", "author": "vcrfxia", "createdAt": "2020-02-03T22:07:51Z", "path": "ksql-common/src/main/java/io/confluent/ksql/GenericRow.java", "diffHunk": "@@ -15,83 +15,111 @@\n \n package io.confluent.ksql;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.stream.Collectors;\n \n public class GenericRow {\n \n-  private final List<Object> columns;\n+  private final ArrayList<Object> values;\n \n   public GenericRow() {\n-    columns = new ArrayList<>();\n+    this(0);\n   }\n \n-  public GenericRow(final List<Object> columns) {\n-    Objects.requireNonNull(columns);\n-    this.columns = columns;\n+  public GenericRow(final int initialCapacity) {\n+    this.values = new ArrayList<>(initialCapacity);\n   }\n \n-  public GenericRow(final Object ...columns) {\n-    this(Arrays.asList(columns));\n+  @VisibleForTesting // Only use from tests\n+  public static GenericRow genericRow(final Object... columns) {\n+    return new GenericRow().appendAll(Arrays.asList(columns));\n+  }\n+\n+  /**\n+   * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements that its\n+   * current size.\n+   *\n+   * <p>Useful to avoid unnecessary array copies when adding multiple elements.\n+   *\n+   * @param additionalCapacity the number of additional elements\n+   */\n+  public void ensureAdditionalCapacity(final int additionalCapacity) {\n+    values.ensureCapacity(additionalCapacity + values.size());\n+  }\n+\n+  public int size() {\n+    return values.size();\n+  }\n+\n+  public Object get(final int index) {\n+    return values.get(index);\n+  }\n+\n+  public void set(final int index, final Object value) {\n+    values.set(index, value);\n+  }\n+\n+  public GenericRow append(final Object value) {\n+    values.add(value);\n+    return this;\n+  }\n+\n+  public GenericRow appendAll(final Collection<?> values) {\n+    this.values.addAll(values);\n+    return this;\n+  }\n+\n+  @JsonProperty(\"columns\")\n+  public List<Object> values() {\n+    return Collections.unmodifiableList(values);\n   }\n \n   @Override\n   public String toString() {\n-    final StringBuilder stringBuilder = new StringBuilder(\"[ \");\n-    int currentIndex = 0;\n-    for (int i = 0; i < columns.size(); i++) {\n-      final Object obj = columns.get(i);\n-      if (obj == null) {\n-        stringBuilder.append(\"null\");\n-      } else if (obj.getClass().isArray()) {\n-        stringBuilder.append(Arrays.toString((Object[]) obj));\n-      } else if (obj instanceof String) {\n-        stringBuilder.append(\"'\")\n-            .append(obj)\n-            .append(\"'\");\n-      } else {\n-        stringBuilder.append(obj);\n-      }\n-\n-      currentIndex++;\n-      if (currentIndex < columns.size()) {\n-        stringBuilder.append(\" | \");\n-      }\n-    }\n-    stringBuilder.append(\" ]\");\n-    return stringBuilder.toString();\n+    return values.stream()\n+        .map(GenericRow::formatValue)\n+        .collect(Collectors.joining(\" | \", \"[ \", \" ]\"));\n   }\n \n   @Override\n   public boolean equals(final Object o) {\n     if (this == o) {\n       return true;\n     }\n+\n     if (o == null || getClass() != o.getClass()) {\n       return false;\n     }\n-    final GenericRow that = (GenericRow) o;\n-    if (columns.size() != that.columns.size()) {\n-      return false;\n-    }\n \n-    // For now string matching is used to compare the rows as double comparison will cause issues", "originalCommit": "5901b729455817f84615377a56c8620380657c5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4MjY4MA==", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374882680", "bodyText": "So GenericRow.equals is only used in tests, so it's only tests that are an issue.\nWhen I made the change some tests passed because the GenericRow was being serialized and deserialized and Jackson is configured to deserializes decimal numbers as BigDecimal. So, for example, serializing a generic row with the double value 1.2 would get deserilized as BigDecimal.valueOf(1.2)... which would cause original.equals(deserialised) to fail.\nBut I just fixed up the tests to do the right thing.", "author": "big-andy-coates", "createdAt": "2020-02-04T19:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2ODk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "5c92a35f39ddf448460b0688c4324d02afc9083b", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/GenericRow.java b/ksql-common/src/main/java/io/confluent/ksql/GenericRow.java\nindex 955533441f..e5d93ddf5c 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/GenericRow.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/GenericRow.java\n\n@@ -43,7 +43,7 @@ public class GenericRow {\n   }\n \n   /**\n-   * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements that its\n+   * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements than its\n    * current size.\n    *\n    * <p>Useful to avoid unnecessary array copies when adding multiple elements.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2OTEyNA==", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374369124", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements that its\n          \n          \n            \n               * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements than its\n          \n      \n    \n    \n  \n\nnit: typo", "author": "vcrfxia", "createdAt": "2020-02-03T22:08:15Z", "path": "ksql-common/src/main/java/io/confluent/ksql/GenericRow.java", "diffHunk": "@@ -15,83 +15,111 @@\n \n package io.confluent.ksql;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.stream.Collectors;\n \n public class GenericRow {\n \n-  private final List<Object> columns;\n+  private final ArrayList<Object> values;\n \n   public GenericRow() {\n-    columns = new ArrayList<>();\n+    this(0);\n   }\n \n-  public GenericRow(final List<Object> columns) {\n-    Objects.requireNonNull(columns);\n-    this.columns = columns;\n+  public GenericRow(final int initialCapacity) {\n+    this.values = new ArrayList<>(initialCapacity);\n   }\n \n-  public GenericRow(final Object ...columns) {\n-    this(Arrays.asList(columns));\n+  @VisibleForTesting // Only use from tests\n+  public static GenericRow genericRow(final Object... columns) {\n+    return new GenericRow().appendAll(Arrays.asList(columns));\n+  }\n+\n+  /**\n+   * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements that its", "originalCommit": "5901b729455817f84615377a56c8620380657c5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c92a35f39ddf448460b0688c4324d02afc9083b", "chunk": "diff --git a/ksql-common/src/main/java/io/confluent/ksql/GenericRow.java b/ksql-common/src/main/java/io/confluent/ksql/GenericRow.java\nindex 955533441f..e5d93ddf5c 100644\n--- a/ksql-common/src/main/java/io/confluent/ksql/GenericRow.java\n+++ b/ksql-common/src/main/java/io/confluent/ksql/GenericRow.java\n\n@@ -43,7 +43,7 @@ public class GenericRow {\n   }\n \n   /**\n-   * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements that its\n+   * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements than its\n    * current size.\n    *\n    * <p>Useful to avoid unnecessary array copies when adding multiple elements.\n"}}, {"oid": "0043dd6a6c2574cef1b6bb87004654a83e8d0bc4", "url": "https://github.com/confluentinc/ksql/commit/0043dd6a6c2574cef1b6bb87004654a83e8d0bc4", "message": "chore: merge from master\n\nConflicting files\nksql-common/src/main/java/io/confluent/ksql/GenericRow.java\nksql-common/src/test/java/io/confluent/ksql/GenericRowTest.java\nksql-engine/src/test/java/io/confluent/ksql/planner/plan/AggregateNodeTest.java\nksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKTableTest.java\nksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nksql-rest-app/src/test/java/io/confluent/ksql/rest/entity/TableRowsEntityFactoryTest.java\nksql-serde/src/main/java/io/confluent/ksql/serde/GenericRowSerDe.java\nksql-streams/src/main/java/io/confluent/ksql/execution/streams/SourceBuilder.java\nksql-streams/src/test/java/io/confluent/ksql/execution/streams/AggregateParamsFactoryTest.java", "committedDate": "2020-02-04T17:02:27Z", "type": "commit"}, {"oid": "5c92a35f39ddf448460b0688c4324d02afc9083b", "url": "https://github.com/confluentinc/ksql/commit/5c92a35f39ddf448460b0688c4324d02afc9083b", "message": "Update ksql-common/src/main/java/io/confluent/ksql/GenericRow.java\n\nCo-Authored-By: Victoria Xia <victoria.f.xia281@gmail.com>", "committedDate": "2020-02-04T19:41:51Z", "type": "commit"}, {"oid": "5617e9a17af787f5615adc52319d6539fe5209fc", "url": "https://github.com/confluentinc/ksql/commit/5617e9a17af787f5615adc52319d6539fe5209fc", "message": "chore: fix test", "committedDate": "2020-02-04T19:43:35Z", "type": "commit"}, {"oid": "115f52b9bd24d6774aba6af7bf705984b61fa8bc", "url": "https://github.com/confluentinc/ksql/commit/115f52b9bd24d6774aba6af7bf705984b61fa8bc", "message": "Merge branch 'master' into generic_row_encap", "committedDate": "2020-02-04T19:43:44Z", "type": "commit"}, {"oid": "88fda95d63d44bf8e1eeb25c93282bdf1de0efc7", "url": "https://github.com/confluentinc/ksql/commit/88fda95d63d44bf8e1eeb25c93282bdf1de0efc7", "message": "Merge branch 'generic_row_encap' of github.com:big-andy-coates/ksql into generic_row_encap", "committedDate": "2020-02-04T19:44:01Z", "type": "commit"}]}