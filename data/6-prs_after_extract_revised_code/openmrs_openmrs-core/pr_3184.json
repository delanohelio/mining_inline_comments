{"pr_number": 3184, "pr_title": "TRUNK-5728: Condition to be linked to an Encounter", "pr_createdAt": "2020-04-20T20:08:42Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3184", "timeline": [{"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae", "url": "https://github.com/openmrs/openmrs-core/commit/47c88f12bc30ace26157e1139732d2583a1e63ae", "message": "TRUNK-5728: Condition to be linked to an Encounter", "committedDate": "2020-04-21T12:20:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0ODM2Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412148362", "bodyText": "@since 2.4.0, 2.3.1\nAnd everywhere where you did use @since.", "author": "mks-d", "createdAt": "2020-04-21T12:40:11Z", "path": "api/src/main/java/org/openmrs/Condition.java", "diffHunk": "@@ -328,6 +332,28 @@ public void setPatient(Patient patient) {\n \t\tthis.patient = patient;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for encounter\n+\t * \n+\t * @return encounter - the associated encounter\n+\t * @since 2.4.0", "originalCommit": "47c88f12bc30ace26157e1139732d2583a1e63ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4f167ab6633869e3fa32602e43e79a3ff6f20ec", "chunk": "diff --git a/api/src/main/java/org/openmrs/Condition.java b/api/src/main/java/org/openmrs/Condition.java\nindex 97cd0287d..f2372de4f 100644\n--- a/api/src/main/java/org/openmrs/Condition.java\n+++ b/api/src/main/java/org/openmrs/Condition.java\n\n@@ -336,7 +337,7 @@ public class Condition extends BaseChangeableOpenmrsData {\n \t * Basic property getter for encounter\n \t * \n \t * @return encounter - the associated encounter\n-\t * @since 2.4.0\n+\t * @since 2.4.0, 2.3.1\n \t */\n \tpublic Encounter getEncounter() {\n \t\treturn encounter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MjE0NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412152145", "bodyText": "Then I would expect test showing that conditions can be set and gotten from an encounter.", "author": "mks-d", "createdAt": "2020-04-21T12:45:38Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,26 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0\n+\t */\n+\tpublic Set<Condition> getConditions() {\n+\t\treturn conditions;\n+\t}\n+\n+\t/**\n+\t * Basic property setter for conditions\n+\t *  \n+\t * @param conditions - set of conditions\n+\t * @since 2.4.0\n+\t */\n+\tpublic void setConditions(Set<Condition> conditions) {\n+\t\tthis.conditions = conditions;\n+\t}\n+", "originalCommit": "47c88f12bc30ace26157e1139732d2583a1e63ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MDgzMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r423650830", "bodyText": "Added test cases for this", "author": "samuelmale", "createdAt": "2020-05-12T11:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MjE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "503c8eb72682e83d3dc921927145668888ecb029", "chunk": "diff --git a/api/src/main/java/org/openmrs/Encounter.java b/api/src/main/java/org/openmrs/Encounter.java\nindex f17e8610b..3b39788fc 100644\n--- a/api/src/main/java/org/openmrs/Encounter.java\n+++ b/api/src/main/java/org/openmrs/Encounter.java\n\n@@ -496,6 +496,9 @@ public class Encounter extends BaseChangeableOpenmrsData {\n \t * @since 2.4.0\n \t */\n \tpublic Set<Condition> getConditions() {\n+\t\tif (conditions == null) {\n+\t\t\tconditions = new LinkedHashSet<>();\n+\t\t}\n \t\treturn conditions;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412479907", "bodyText": "Why change an existing test? Is it because this change made it fail?", "author": "dkayiwa", "createdAt": "2020-04-21T20:46:42Z", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "originalCommit": "47c88f12bc30ace26157e1139732d2583a1e63ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxMDYxNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412810614", "bodyText": "No,  I was just adding this basic case where a condition has an encounter, the saveCondition(...) should handle the encounter property as expected.", "author": "samuelmale", "createdAt": "2020-04-22T09:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MjYwNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412942607", "bodyText": "When adding new features, changing existing tests creates the impression that the encounter is required and hence existing tests cannot pass without it being added.", "author": "dkayiwa", "createdAt": "2020-04-22T12:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2NzQ3Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413067473", "bodyText": "Sure, I just thought that expanding this existing test is sufficient and appropriate enough for this new property. Wouldn't it be superfluous to have a new test case for this?", "author": "samuelmale", "createdAt": "2020-04-22T15:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3OTUxOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413079519", "bodyText": "A new test like conditionShouldSaveWithoutEncounter? Or is it already covered?", "author": "dkayiwa", "createdAt": "2020-04-22T15:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2MDA5OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413260099", "bodyText": "I meant it's already covered as is \ud83d\udc4d", "author": "samuelmale", "createdAt": "2020-04-22T19:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxMDE4NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413310185", "bodyText": "Since you are assigning an encounter to a condition, how does it cover that a condition can save without an encounter?", "author": "dkayiwa", "createdAt": "2020-04-22T20:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4Njc5Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413586796", "bodyText": "Well, Iet's have a new case were a condition has an encounter and leave the existing test untouched. something like:\npublic void saveCondition_shouldSaveConditionWithAnEncounter() {\n    //...\n}", "author": "samuelmale", "createdAt": "2020-04-23T07:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5Njk1NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413696954", "bodyText": "But does it make sense to you? \ud83d\ude0a", "author": "dkayiwa", "createdAt": "2020-04-23T10:23:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3NDMxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413774315", "bodyText": "Yah it makes sense.\nThanks!", "author": "samuelmale", "createdAt": "2020-04-23T12:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTE4NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r423651184", "bodyText": "Resolved!\n@dkayiwa does the PR look any better? Like mergeable?", "author": "samuelmale", "createdAt": "2020-05-12T11:10:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "d4f167ab6633869e3fa32602e43e79a3ff6f20ec", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java b/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\nindex 7616c4088..9a83fe04d 100644\n--- a/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\n\n@@ -61,7 +61,6 @@ public class ConditionServiceImplTest extends BaseContextSensitiveTest {\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n-\t\tcondition.setEncounter(new Encounter(2039));\n \t\tconditionService.saveCondition(condition);\n \t\tCondition savedCondition = conditionService.getConditionByUuid(uuid);\n \t\tAssert.assertEquals(patientId, savedCondition.getPatient().getPatientId());\n"}}, {"oid": "d4f167ab6633869e3fa32602e43e79a3ff6f20ec", "url": "https://github.com/openmrs/openmrs-core/commit/d4f167ab6633869e3fa32602e43e79a3ff6f20ec", "message": "TRUNK-5728: Existing tests should not be tampered with", "committedDate": "2020-05-13T11:37:33Z", "type": "forcePushed"}, {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4", "url": "https://github.com/openmrs/openmrs-core/commit/b42ffcdc0545819ae52f126626e12b08a34997c4", "message": "TRUNK-5728: Condition to be linked to an Encounter", "committedDate": "2020-05-14T09:41:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjA5MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425022091", "bodyText": "@since 2.4.0, 2.3.1", "author": "mks-d", "createdAt": "2020-05-14T10:07:03Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,26 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0", "originalCommit": "b42ffcdc0545819ae52f126626e12b08a34997c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "503c8eb72682e83d3dc921927145668888ecb029", "chunk": "diff --git a/api/src/main/java/org/openmrs/Encounter.java b/api/src/main/java/org/openmrs/Encounter.java\nindex cc2ad2c84..3b39788fc 100644\n--- a/api/src/main/java/org/openmrs/Encounter.java\n+++ b/api/src/main/java/org/openmrs/Encounter.java\n\n@@ -496,6 +496,9 @@ public class Encounter extends BaseChangeableOpenmrsData {\n \t * @since 2.4.0\n \t */\n \tpublic Set<Condition> getConditions() {\n+\t\tif (conditions == null) {\n+\t\t\tconditions = new LinkedHashSet<>();\n+\t\t}\n \t\treturn conditions;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjI0OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425022248", "bodyText": "@since 2.4.0, 2.3.1", "author": "mks-d", "createdAt": "2020-05-14T10:07:19Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,26 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0\n+\t */\n+\tpublic Set<Condition> getConditions() {\n+\t\treturn conditions;\n+\t}\n+\n+\t/**\n+\t * Basic property setter for conditions\n+\t *  \n+\t * @param conditions - set of conditions\n+\t * @since 2.4.0", "originalCommit": "b42ffcdc0545819ae52f126626e12b08a34997c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "503c8eb72682e83d3dc921927145668888ecb029", "chunk": "diff --git a/api/src/main/java/org/openmrs/Encounter.java b/api/src/main/java/org/openmrs/Encounter.java\nindex cc2ad2c84..3b39788fc 100644\n--- a/api/src/main/java/org/openmrs/Encounter.java\n+++ b/api/src/main/java/org/openmrs/Encounter.java\n\n@@ -496,6 +496,9 @@ public class Encounter extends BaseChangeableOpenmrsData {\n \t * @since 2.4.0\n \t */\n \tpublic Set<Condition> getConditions() {\n+\t\tif (conditions == null) {\n+\t\t\tconditions = new LinkedHashSet<>();\n+\t\t}\n \t\treturn conditions;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjQ2OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425022468", "bodyText": "@since 2.4.0, 2.3.1", "author": "mks-d", "createdAt": "2020-05-14T10:07:36Z", "path": "api/src/main/java/org/openmrs/api/ConditionService.java", "diffHunk": "@@ -73,6 +74,16 @@\n \t@Authorized({ PrivilegeConstants.GET_CONDITIONS })\n \tList<Condition> getAllConditions(Patient patient) throws APIException;\n \n+\t/**\n+\t * Gets all conditions(not voided) of an encounter.\n+\t * \n+\t * @param encounter - the encounter to retrieve conditions for\n+\t * @return a list of encounter's conditions\n+\t * @throws APIException\n+\t * @since 2.4.0", "originalCommit": "b42ffcdc0545819ae52f126626e12b08a34997c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "148a6756cd468d064b9679baa2bfb8bb653548d7", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/ConditionService.java b/api/src/main/java/org/openmrs/api/ConditionService.java\nindex b09e8a9f3..29003ecfb 100644\n--- a/api/src/main/java/org/openmrs/api/ConditionService.java\n+++ b/api/src/main/java/org/openmrs/api/ConditionService.java\n\n@@ -80,7 +80,7 @@ public interface ConditionService extends OpenmrsService {\n \t * @param encounter - the encounter to retrieve conditions for\n \t * @return a list of encounter's conditions\n \t * @throws APIException\n-\t * @since 2.4.0\n+\t * @since 2.4.0, 2.3.1\n \t */\n \tList<Condition> getConditionsByEncounter(Encounter encounter) throws APIException;\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNjQ4MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425026481", "bodyText": "@dkayiwa / @ibacher what do you think, should this just be getConditionsForEncounter(Encounter) or even getConditions(Encounter)?", "author": "mks-d", "createdAt": "2020-05-14T10:14:09Z", "path": "api/src/main/java/org/openmrs/api/ConditionService.java", "diffHunk": "@@ -73,6 +74,16 @@\n \t@Authorized({ PrivilegeConstants.GET_CONDITIONS })\n \tList<Condition> getAllConditions(Patient patient) throws APIException;\n \n+\t/**\n+\t * Gets all conditions(not voided) of an encounter.\n+\t * \n+\t * @param encounter - the encounter to retrieve conditions for\n+\t * @return a list of encounter's conditions\n+\t * @throws APIException\n+\t * @since 2.4.0\n+\t */\n+\tList<Condition> getConditionsByEncounter(Encounter encounter) throws APIException;", "originalCommit": "b42ffcdc0545819ae52f126626e12b08a34997c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEyMzU5MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425123591", "bodyText": "I like the explicitness of getConditionsForEncounter().", "author": "ibacher", "createdAt": "2020-05-14T13:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNjQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3MTk2Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425371967", "bodyText": "The undocumented convention is getConditionsByEncounter \ud83d\ude0a", "author": "dkayiwa", "createdAt": "2020-05-14T19:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNjQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "148a6756cd468d064b9679baa2bfb8bb653548d7", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/ConditionService.java b/api/src/main/java/org/openmrs/api/ConditionService.java\nindex b09e8a9f3..29003ecfb 100644\n--- a/api/src/main/java/org/openmrs/api/ConditionService.java\n+++ b/api/src/main/java/org/openmrs/api/ConditionService.java\n\n@@ -80,7 +80,7 @@ public interface ConditionService extends OpenmrsService {\n \t * @param encounter - the encounter to retrieve conditions for\n \t * @return a list of encounter's conditions\n \t * @throws APIException\n-\t * @since 2.4.0\n+\t * @since 2.4.0, 2.3.1\n \t */\n \tList<Condition> getConditionsByEncounter(Encounter encounter) throws APIException;\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzQzNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425027434", "bodyText": "We need to assert that the conditions that are returned are actually those that are expected. Use two conditions as well to enforce the use of an actual \"collection\".", "author": "mks-d", "createdAt": "2020-05-14T10:15:47Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -382,6 +384,20 @@ public void saveEncounter_shouldSaveEncounterWithComplexObs() {\n \t\tassertEquals(2, encounter.getObsAtTopLevel(true).size());\n \t}\n \t\n+\t@Test\n+\tpublic void saveEncounter_shouldSaveEncounterWithCondition() {\n+\t\tEncounter encounter = buildEncounter();\n+\t\tCondition condition = new Condition();\n+\t\t\n+\t\tcondition.setPatient(encounter.getPatient());\n+\t\tencounter.setConditions(Collections.singleton(condition));\n+\t\tEncounterService es = Context.getEncounterService();\n+\t\tes.saveEncounter(encounter);\n+\t\t\n+\t\tencounter = es.getEncounter(encounter.getId());\n+\t\tassertEquals(1, encounter.getConditions().size());", "originalCommit": "b42ffcdc0545819ae52f126626e12b08a34997c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODM5OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425028399", "bodyText": "Always use the given/when/then pattern when writing tests. This makes easier for the reader to find what you actually replay.\nUnless @dkayiwa thinks differently?", "author": "mks-d", "createdAt": "2020-05-14T10:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3MjcwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425372703", "bodyText": "I like conventions that make code easier to understand. \ud83d\udc4d", "author": "dkayiwa", "createdAt": "2020-05-14T19:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "503c8eb72682e83d3dc921927145668888ecb029", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex 3365ecf9b..056a8a57c 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n\n@@ -385,17 +386,35 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t@Test\n-\tpublic void saveEncounter_shouldSaveEncounterWithCondition() {\n+\tpublic void saveEncounter_shouldCascadeSaveToContainedConditions() {\n+\t\t// setup\n \t\tEncounter encounter = buildEncounter();\n-\t\tCondition condition = new Condition();\n-\t\t\n-\t\tcondition.setPatient(encounter.getPatient());\n-\t\tencounter.setConditions(Collections.singleton(condition));\n-\t\tEncounterService es = Context.getEncounterService();\n-\t\tes.saveEncounter(encounter);\n+\t\tCondition pregnancy = new Condition();\n+\t\tCodedOrFreeText freeTextForPregnancy = new CodedOrFreeText();\n+\t\tfreeTextForPregnancy.setNonCoded(\"Pregnancy\");\n+\t\tpregnancy.setCondition(freeTextForPregnancy);\n+\t\tpregnancy.setPatient(encounter.getPatient());\n+\t\tencounter.addCondition(pregnancy);\n+\t\t\n+\t\tCondition edema = new Condition();\n+\t\tCodedOrFreeText freeTextForEdema = new CodedOrFreeText();\n+\t\tfreeTextForEdema.setNonCoded(\"Edema\");\n+\t\tedema.setCondition(freeTextForEdema);\n+\t\tedema.setPatient(encounter.getPatient());\n+\t\tencounter.addCondition(edema);\n+\t\t\n+\t\t// replay\n+\t\tContext.getEncounterService().saveEncounter(encounter);\n \t\t\n-\t\tencounter = es.getEncounter(encounter.getId());\n-\t\tassertEquals(1, encounter.getConditions().size());\n+\t\t// verify\n+\t\tObject[] conditionsArray = encounter.getConditions().toArray();\n+\t\tpregnancy = (Condition) conditionsArray[0];\n+\t\tedema = (Condition) conditionsArray[1];\n+\t\tassertEquals(2, conditionsArray.length);\n+\t\tassertNotNull(pregnancy.getId());\n+\t\tassertEquals(\"Pregnancy\", pregnancy.getCondition().getNonCoded());\n+\t\tassertNotNull(edema.getId());\n+\t\tassertEquals(\"Edema\", edema.getCondition().getNonCoded());\n \t}\n \t\n \tprivate Encounter buildEncounter() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzc0MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425027741", "bodyText": "saveCondition_shouldSaveConditionAssociatedWithAnEncounter", "author": "mks-d", "createdAt": "2020-05-14T10:16:19Z", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -70,6 +70,21 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tAssert.assertNotNull(savedCondition.getConditionId());\n \t}\n \n+\t/**\n+\t * @see ConditionService#saveCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void saveCondition_shouldSaveConditionWithAnEncounter() {", "originalCommit": "b42ffcdc0545819ae52f126626e12b08a34997c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "148a6756cd468d064b9679baa2bfb8bb653548d7", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java b/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\nindex 9a83fe04d..0bbf21310 100644\n--- a/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\n\n@@ -74,13 +74,18 @@ public class ConditionServiceImplTest extends BaseContextSensitiveTest {\n \t * @see ConditionService#saveCondition(Condition)\n \t */\n \t@Test\n-\tpublic void saveCondition_shouldSaveConditionWithAnEncounter() {\n+\tpublic void saveCondition_shouldSaveConditionAssociatedWithAnEncounter() {\n+\t\t// setup\n \t\tString uuid = \"fc281d91-cb1a-4cd1-b1ca-0f3cd5138fb2\";\n \t\tCondition condition = new Condition();\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(2));\n-\t\tcondition.setEncounter(new Encounter(2039));\t\n-\t\tconditionService.saveCondition(condition);\t\n+\t\tcondition.setEncounter(new Encounter(2039));\n+\t\t\n+\t\t// replay\n+\t\tconditionService.saveCondition(condition);\n+\t\t\n+\t\t// verify\n \t\tCondition savedCondition = conditionService.getConditionByUuid(uuid);\n \t\tAssert.assertEquals(Integer.valueOf(2039), savedCondition.getEncounter().getId());\n \t}\n"}}, {"oid": "503c8eb72682e83d3dc921927145668888ecb029", "url": "https://github.com/openmrs/openmrs-core/commit/503c8eb72682e83d3dc921927145668888ecb029", "message": "TRUNK-5728: Condition to be linked to an Encounter", "committedDate": "2020-05-15T14:06:13Z", "type": "commit"}, {"oid": "503c8eb72682e83d3dc921927145668888ecb029", "url": "https://github.com/openmrs/openmrs-core/commit/503c8eb72682e83d3dc921927145668888ecb029", "message": "TRUNK-5728: Condition to be linked to an Encounter", "committedDate": "2020-05-15T14:06:13Z", "type": "forcePushed"}, {"oid": "148a6756cd468d064b9679baa2bfb8bb653548d7", "url": "https://github.com/openmrs/openmrs-core/commit/148a6756cd468d064b9679baa2bfb8bb653548d7", "message": "TRUNK-5728: Adding minor release version 2.3.1 to @since annotation", "committedDate": "2020-05-15T14:13:56Z", "type": "commit"}, {"oid": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09", "url": "https://github.com/openmrs/openmrs-core/commit/177c79d8f10c9bc5470a28ddb6edd4c13a656d09", "message": "TRUNK-5728: Fixing a minor formating", "committedDate": "2020-05-15T14:16:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDQ0Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r426504446", "bodyText": "Using streams?", "author": "mks-d", "createdAt": "2020-05-18T09:50:15Z", "path": "api/src/main/java/org/openmrs/api/impl/EncounterServiceImpl.java", "diffHunk": "@@ -196,6 +197,11 @@ public Encounter saveEncounter(Encounter encounter) throws APIException {\n \n \t\tremoveGivenObsAndTheirGroupMembersFromEncounter(obsToRemove, encounter);\n \t\taddGivenObsAndTheirGroupMembersToEncounter(obsToAdd, encounter);\n+\t\t\n+\t\t// save the conditions\n+\t\tfor (Condition condition : encounter.getConditions()) {\n+\t\t\tContext.getConditionService().saveCondition(condition);\n+\t\t}", "originalCommit": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b56869eb7758d521b6c3837dc47a1431f395f50", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/impl/EncounterServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/EncounterServiceImpl.java\nindex afb792967..64fdbe274 100644\n--- a/api/src/main/java/org/openmrs/api/impl/EncounterServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/EncounterServiceImpl.java\n\n@@ -199,9 +199,9 @@ public class EncounterServiceImpl extends BaseOpenmrsService implements Encounte\n \t\taddGivenObsAndTheirGroupMembersToEncounter(obsToAdd, encounter);\n \t\t\n \t\t// save the conditions\n-\t\tfor (Condition condition : encounter.getConditions()) {\n+\t\tencounter.getConditions().forEach(condition -> {\n \t\t\tContext.getConditionService().saveCondition(condition);\n-\t\t}\n+\t\t});\n \t\treturn encounter;\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwODc1OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r426508759", "bodyText": "This is part of the replay.", "author": "mks-d", "createdAt": "2020-05-18T09:57:02Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -382,6 +385,38 @@ public void saveEncounter_shouldSaveEncounterWithComplexObs() {\n \t\tassertEquals(2, encounter.getObsAtTopLevel(true).size());\n \t}\n \t\n+\t@Test\n+\tpublic void saveEncounter_shouldCascadeSaveToContainedConditions() {\n+\t\t// setup\n+\t\tEncounter encounter = buildEncounter();\n+\t\tCondition pregnancy = new Condition();\n+\t\tCodedOrFreeText freeTextForPregnancy = new CodedOrFreeText();\n+\t\tfreeTextForPregnancy.setNonCoded(\"Pregnancy\");\n+\t\tpregnancy.setCondition(freeTextForPregnancy);\n+\t\tpregnancy.setPatient(encounter.getPatient());\n+\t\tencounter.addCondition(pregnancy);", "originalCommit": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b56869eb7758d521b6c3837dc47a1431f395f50", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex 056a8a57c..cc5922193 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n\n@@ -394,16 +394,16 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t\tfreeTextForPregnancy.setNonCoded(\"Pregnancy\");\n \t\tpregnancy.setCondition(freeTextForPregnancy);\n \t\tpregnancy.setPatient(encounter.getPatient());\n-\t\tencounter.addCondition(pregnancy);\n \t\t\n \t\tCondition edema = new Condition();\n \t\tCodedOrFreeText freeTextForEdema = new CodedOrFreeText();\n \t\tfreeTextForEdema.setNonCoded(\"Edema\");\n \t\tedema.setCondition(freeTextForEdema);\n \t\tedema.setPatient(encounter.getPatient());\n-\t\tencounter.addCondition(edema);\n \t\t\n \t\t// replay\n+\t\tencounter.addCondition(pregnancy);\n+\t\tencounter.addCondition(edema);\n \t\tContext.getEncounterService().saveEncounter(encounter);\n \t\t\n \t\t// verify\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwODg3OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r426508879", "bodyText": "This is part of the replay as well.", "author": "mks-d", "createdAt": "2020-05-18T09:57:13Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -382,6 +385,38 @@ public void saveEncounter_shouldSaveEncounterWithComplexObs() {\n \t\tassertEquals(2, encounter.getObsAtTopLevel(true).size());\n \t}\n \t\n+\t@Test\n+\tpublic void saveEncounter_shouldCascadeSaveToContainedConditions() {\n+\t\t// setup\n+\t\tEncounter encounter = buildEncounter();\n+\t\tCondition pregnancy = new Condition();\n+\t\tCodedOrFreeText freeTextForPregnancy = new CodedOrFreeText();\n+\t\tfreeTextForPregnancy.setNonCoded(\"Pregnancy\");\n+\t\tpregnancy.setCondition(freeTextForPregnancy);\n+\t\tpregnancy.setPatient(encounter.getPatient());\n+\t\tencounter.addCondition(pregnancy);\n+\t\t\n+\t\tCondition edema = new Condition();\n+\t\tCodedOrFreeText freeTextForEdema = new CodedOrFreeText();\n+\t\tfreeTextForEdema.setNonCoded(\"Edema\");\n+\t\tedema.setCondition(freeTextForEdema);\n+\t\tedema.setPatient(encounter.getPatient());\n+\t\tencounter.addCondition(edema);", "originalCommit": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b56869eb7758d521b6c3837dc47a1431f395f50", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex 056a8a57c..cc5922193 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n\n@@ -394,16 +394,16 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t\tfreeTextForPregnancy.setNonCoded(\"Pregnancy\");\n \t\tpregnancy.setCondition(freeTextForPregnancy);\n \t\tpregnancy.setPatient(encounter.getPatient());\n-\t\tencounter.addCondition(pregnancy);\n \t\t\n \t\tCondition edema = new Condition();\n \t\tCodedOrFreeText freeTextForEdema = new CodedOrFreeText();\n \t\tfreeTextForEdema.setNonCoded(\"Edema\");\n \t\tedema.setCondition(freeTextForEdema);\n \t\tedema.setPatient(encounter.getPatient());\n-\t\tencounter.addCondition(edema);\n \t\t\n \t\t// replay\n+\t\tencounter.addCondition(pregnancy);\n+\t\tencounter.addCondition(edema);\n \t\tContext.getEncounterService().saveEncounter(encounter);\n \t\t\n \t\t// verify\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwOTQ5Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r426509497", "bodyText": "This is part of the replay.", "author": "mks-d", "createdAt": "2020-05-18T09:58:13Z", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -70,6 +70,26 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tAssert.assertNotNull(savedCondition.getConditionId());\n \t}\n \n+\t/**\n+\t * @see ConditionService#saveCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void saveCondition_shouldSaveConditionAssociatedWithAnEncounter() {\n+\t\t// setup\n+\t\tString uuid = \"fc281d91-cb1a-4cd1-b1ca-0f3cd5138fb2\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setUuid(uuid);\n+\t\tcondition.setPatient(new Patient(2));\n+\t\tcondition.setEncounter(new Encounter(2039));", "originalCommit": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b56869eb7758d521b6c3837dc47a1431f395f50", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java b/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\nindex 0bbf21310..c39e61501 100644\n--- a/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java\n\n@@ -80,9 +80,9 @@ public class ConditionServiceImplTest extends BaseContextSensitiveTest {\n \t\tCondition condition = new Condition();\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(2));\n-\t\tcondition.setEncounter(new Encounter(2039));\n \t\t\n \t\t// replay\n+\t\tcondition.setEncounter(new Encounter(2039));\n \t\tconditionService.saveCondition(condition);\n \t\t\n \t\t// verify\n"}}, {"oid": "7b56869eb7758d521b6c3837dc47a1431f395f50", "url": "https://github.com/openmrs/openmrs-core/commit/7b56869eb7758d521b6c3837dc47a1431f395f50", "message": "TRUNK-5728: Using Java 8 streams", "committedDate": "2020-05-18T12:30:56Z", "type": "commit"}, {"oid": "93f09a7bbeb3ff0e75f569c6ac4614847a31c4af", "url": "https://github.com/openmrs/openmrs-core/commit/93f09a7bbeb3ff0e75f569c6ac4614847a31c4af", "message": "Remove extraneous whitespace", "committedDate": "2020-05-19T13:32:43Z", "type": "commit"}, {"oid": "05a77adb72d1e81400e34195c7748fbcd5aff247", "url": "https://github.com/openmrs/openmrs-core/commit/05a77adb72d1e81400e34195c7748fbcd5aff247", "message": "TRUNK-5728: Existing rows in the test datasets should not be tampered\u2026", "committedDate": "2020-05-19T21:02:19Z", "type": "commit"}, {"oid": "05a77adb72d1e81400e34195c7748fbcd5aff247", "url": "https://github.com/openmrs/openmrs-core/commit/05a77adb72d1e81400e34195c7748fbcd5aff247", "message": "TRUNK-5728: Existing rows in the test datasets should not be tampered\u2026", "committedDate": "2020-05-19T21:02:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwMTk0Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427601942", "bodyText": "I would not silently ignore one passing a null parameter. In other words, i would remove the if check and assume that the condition is not null. If it turns out to be null, better for the caller to automatically get a NullPointerException than chewing it quietly.", "author": "dkayiwa", "createdAt": "2020-05-19T21:10:28Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,52 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0, 2.3.1\n+\t */\n+\tpublic Set<Condition> getConditions() {\n+\t\tif (conditions == null) {\n+\t\t\tconditions = new LinkedHashSet<>();\n+\t\t}\n+\t\treturn conditions;\n+\t}\n+\n+\t/**\n+\t * Basic property setter for conditions\n+\t *  \n+\t * @param conditions - set of conditions\n+\t * @since 2.4.0, 2.3.1\n+\t */\n+\tpublic void setConditions(Set<Condition> conditions) {\n+\t\tthis.conditions = conditions;\n+\t}\n+\n+\t/**\n+\t * Add the given Condition to the set of conditions for this Encounter\n+\t *\n+\t * @param condition - the condition to add\n+\t */\n+\tpublic void addCondition(Condition condition) {\n+\t\tif (condition != null) {", "originalCommit": "05a77adb72d1e81400e34195c7748fbcd5aff247", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6285ed96ec803bb6f778a4ac5745b675b2b6e7e9", "chunk": "diff --git a/api/src/main/java/org/openmrs/Encounter.java b/api/src/main/java/org/openmrs/Encounter.java\nindex abd4d47dc..6f505f97d 100644\n--- a/api/src/main/java/org/openmrs/Encounter.java\n+++ b/api/src/main/java/org/openmrs/Encounter.java\n\n@@ -518,10 +518,8 @@ public class Encounter extends BaseChangeableOpenmrsData {\n \t * @param condition - the condition to add\n \t */\n \tpublic void addCondition(Condition condition) {\n-\t\tif (condition != null) {\n-\t\t\tcondition.setEncounter(this);\n-\t\t\tgetConditions().add(condition);\n-\t\t}\n+\t\tcondition.setEncounter(this);\n+\t\tgetConditions().add(condition);\n \t}\n \t\n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODkzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427618935", "bodyText": "I would not silently ignore one passing a null parameter. In other words, i would remove the if check and assume that the condition is not null. If it turns out to be null, better for the caller to automatically get a NullPointerException than chewing it quietly.\n\n@dkayiwa this was by design that the method addCondition(Condition) is null safe.\nI was simply following the behaviours  portrayed by existing addXxxx(Xxxx) methods in the codebase. An example is addObs(Observation)", "author": "samuelmale", "createdAt": "2020-05-19T21:45:51Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -954,6 +954,66 @@ public void removeOrder_shouldNotFailWhenRemovingNonExistentOrder() {\n \t\tencounter.removeOrder(new Order(123));\n \t}\n \t\n+\t/**\n+\t * @see Encounter#addCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void addCondition_shouldSetEncounterAttribute() {\n+\t\t// setup\n+\t\tEncounter encounter = new Encounter();\n+\t\tCondition condition = new Condition();\n+\t\t\n+\t\t// replay\n+\t\tencounter.addCondition(condition);\n+\t\t\n+\t\t// verify\n+\t\tassertTrue(condition.getEncounter().equals(encounter));\n+\t}\n+\t\n+\t/**\n+\t * @see Encounter#addCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void addCondition_shouldNotFailWithNullCondition() {\n+\t\t// setup\n+\t\tEncounter encounter = new Encounter();\n+\t\t\n+\t\t// replay\n+\t\tencounter.addCondition(null);\n+\t\t\n+\t\t// verify\n+\t\tassertEquals(0, encounter.getConditions().size());\n+\t}", "originalCommit": "05a77adb72d1e81400e34195c7748fbcd5aff247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMDY4Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427620686", "bodyText": "I feel that the existing behaviour is not a good one to copy. How can one add a null object and the api just silently ignore it?", "author": "dkayiwa", "createdAt": "2020-05-19T21:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNzA4NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427627084", "bodyText": "I agree with you here. The API shouldn't have back doors. Nice catch!", "author": "samuelmale", "createdAt": "2020-05-19T22:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6285ed96ec803bb6f778a4ac5745b675b2b6e7e9", "chunk": "diff --git a/api/src/test/java/org/openmrs/EncounterTest.java b/api/src/test/java/org/openmrs/EncounterTest.java\nindex 73eef49cf..4c4c536e7 100644\n--- a/api/src/test/java/org/openmrs/EncounterTest.java\n+++ b/api/src/test/java/org/openmrs/EncounterTest.java\n\n@@ -970,21 +970,6 @@ public class EncounterTest extends BaseContextSensitiveTest {\n \t\tassertTrue(condition.getEncounter().equals(encounter));\n \t}\n \t\n-\t/**\n-\t * @see Encounter#addCondition(Condition)\n-\t */\n-\t@Test\n-\tpublic void addCondition_shouldNotFailWithNullCondition() {\n-\t\t// setup\n-\t\tEncounter encounter = new Encounter();\n-\t\t\n-\t\t// replay\n-\t\tencounter.addCondition(null);\n-\t\t\n-\t\t// verify\n-\t\tassertEquals(0, encounter.getConditions().size());\n-\t}\n-\t\n \t/**\n \t * @see Encounter#removeCondition(Condition)\n \t */\n"}}, {"oid": "6285ed96ec803bb6f778a4ac5745b675b2b6e7e9", "url": "https://github.com/openmrs/openmrs-core/commit/6285ed96ec803bb6f778a4ac5745b675b2b6e7e9", "message": "TRUNK-5728: method Encounter#addCondition(Condition) should fail with a NPE with a null argument", "committedDate": "2020-05-19T21:58:42Z", "type": "commit"}]}