{"pr_number": 3294, "pr_title": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected\u2026", "pr_createdAt": "2020-07-05T18:53:55Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3294", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwODIzNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449908237", "bodyText": "this method have been commented because there is no Executable in junit 4", "author": "achilep", "createdAt": "2020-07-05T19:01:10Z", "path": "api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java", "diffHunk": "@@ -1199,11 +1178,11 @@ public void parse_shouldIgnoreAdviceWithoutPoint() throws IOException {\n \n \t\tassertThat(module.getAdvicePoints(), is(equalTo(Collections.EMPTY_LIST)));\n \t}\n+\t/*private void expectModuleExceptionWithMessage(Executable executable, String expectedMessage) {\n+\t\tModuleException thrown = assertThrows(ModuleException.class, executable.execute());\n+\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n+\t}*/\n \n-\tprivate void expectModuleExceptionWithMessage(String expectedMessage) {", "originalCommit": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MTIwMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449971201", "bodyText": "we already solved this with\n\tprivate void expectModuleExceptionWithMessage(ThrowingRunnable executable, String expectedMessage) {\n\t\tModuleException thrown = assertThrows(ModuleException.class, executable);\n\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n\t}\n(#3279 (comment))", "author": "teleivo", "createdAt": "2020-07-06T03:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwODIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "a45133500e84b62c318f4e3c2c8a0866a164d187", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\nindex c65699671..ab26b309c 100644\n--- a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n+++ b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n\n@@ -1178,11 +1199,11 @@ public class ModuleFileParserUnitTest extends BaseContextMockTest {\n \n \t\tassertThat(module.getAdvicePoints(), is(equalTo(Collections.EMPTY_LIST)));\n \t}\n-\t/*private void expectModuleExceptionWithMessage(Executable executable, String expectedMessage) {\n-\t\tModuleException thrown = assertThrows(ModuleException.class, executable.execute());\n-\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n-\t}*/\n \n+\tprivate void expectModuleExceptionWithMessage(String expectedMessage) {\n+\t\texpectedException.expect(ModuleException.class);\n+\t\texpectedException.expectMessage(expectedMessage);\n+\t}\n \n \tprivate void whenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(String messageKey) {\n \t\twhen(messageSourceService.getMessage(messageKey)).thenReturn(messageKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MjcxOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449972718", "bodyText": "@achilep please in general do never just comment out methods. If your changes makes something fail you need to understand why that is. If in this case the method is not needed anymore delete it. Please delete the 2 commented methods.", "author": "teleivo", "createdAt": "2020-07-06T04:02:53Z", "path": "api/src/test/java/org/openmrs/module/ModuleFileParserTest.java", "diffHunk": "@@ -157,17 +151,17 @@ public void parse_shouldParseValidLogicModuleFromFile() {\n \t\tassertThat(module.getMappingFiles(), hasItems(\"LogicRuleToken.hbm.xml\"));\n \t}\n \n-\tprivate void expectModuleExceptionWithTranslatedMessage(String s) {\n+\t/*private void expectModuleExceptionWit hTranslatedMessage(String s) {", "originalCommit": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a45133500e84b62c318f4e3c2c8a0866a164d187", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java b/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\nindex 5e9bb809d..9dc189005 100644\n--- a/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\n+++ b/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\n\n@@ -151,17 +157,17 @@ public class ModuleFileParserTest extends BaseContextSensitiveTest {\n \t\tassertThat(module.getMappingFiles(), hasItems(\"LogicRuleToken.hbm.xml\"));\n \t}\n \n-\t/*private void expectModuleExceptionWit hTranslatedMessage(String s) {\n+\tprivate void expectModuleExceptionWithTranslatedMessage(String s) {\n \t\tString expectedMessage = messageSourceService.getMessage(s);\n \t\texpectModuleExceptionWithMessage(expectedMessage);\n \t}\n \n-\tprivate void expectModuleExceptionWi thMessage(String s) {\n+\tprivate void expectModuleExceptionWithMessage(String s) {\n \t\tString expectedMessage = messageSourceService.getMessage(s);\n \t\texpectedException.expect(ModuleException.class);\n \t\texpectedException.expectMessage(expectedMessage);\n \t}\n-*/\n+\n \tprivate File writeConfigXmlToFile(Document config) throws IOException {\n \t\tFile file = temporaryFolder.newFile(\"modulefileparsertest.omod\");\n \t\tJarOutputStream jar = createJarWithConfigXmlEntry(file);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mjk1Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449972953", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(exception.getMessage(), is(\"Module file does not have the correct '.omod' file extension Module: reporting.jar\"));\n          \n          \n            \n            \t\tassertThat(exception.getMessage(), startsWith(messageSourceService.getMessage(\"Module.error.invalidFileExtension\")));\n          \n      \n    \n    \n  \n\nIf startsWith is not working use containsString", "author": "teleivo", "createdAt": "2020-07-06T04:04:23Z", "path": "api/src/test/java/org/openmrs/module/ModuleFileParserTest.java", "diffHunk": "@@ -71,17 +69,15 @@ public static void setUp() throws ParserConfigurationException {\n \t@Test\n \tpublic void moduleFileParser_shouldFailCreatingParserFromFileIfGivenNull() {\n \n-\t\texpectModuleExceptionWithTranslatedMessage(\"Module.error.fileCannotBeNull\");\n-\n-\t\tnew ModuleFileParser((File) null);\n+\t\tModuleException exception = assertThrows(ModuleException.class, () -> new ModuleFileParser((File) null));\n+\t\tassertThat(exception.getMessage(), is(messageSourceService.getMessage(\"Module.error.fileCannotBeNull\")));\n \t}\n \n \t@Test\n \tpublic void moduleFileParser_shouldFailCreatingParserFromFileIfNotEndingInOmod() {\n \n-\t\texpectModuleExceptionWithTranslatedMessage(\"Module.error.invalidFileExtension\");\n-\n-\t\tnew ModuleFileParser(new File(\"reporting.jar\"));\n+\t\tModuleException exception = assertThrows(ModuleException.class, () -> new ModuleFileParser(new File(\"reporting.jar\")));\n+\t\tassertThat(exception.getMessage(), is(\"Module file does not have the correct '.omod' file extension Module: reporting.jar\"));", "originalCommit": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a45133500e84b62c318f4e3c2c8a0866a164d187", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java b/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\nindex 5e9bb809d..9dc189005 100644\n--- a/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\n+++ b/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\n\n@@ -69,15 +71,17 @@ public class ModuleFileParserTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void moduleFileParser_shouldFailCreatingParserFromFileIfGivenNull() {\n \n-\t\tModuleException exception = assertThrows(ModuleException.class, () -> new ModuleFileParser((File) null));\n-\t\tassertThat(exception.getMessage(), is(messageSourceService.getMessage(\"Module.error.fileCannotBeNull\")));\n+\t\texpectModuleExceptionWithTranslatedMessage(\"Module.error.fileCannotBeNull\");\n+\n+\t\tnew ModuleFileParser((File) null);\n \t}\n \n \t@Test\n \tpublic void moduleFileParser_shouldFailCreatingParserFromFileIfNotEndingInOmod() {\n \n-\t\tModuleException exception = assertThrows(ModuleException.class, () -> new ModuleFileParser(new File(\"reporting.jar\")));\n-\t\tassertThat(exception.getMessage(), is(\"Module file does not have the correct '.omod' file extension Module: reporting.jar\"));\n+\t\texpectModuleExceptionWithTranslatedMessage(\"Module.error.invalidFileExtension\");\n+\n+\t\tnew ModuleFileParser(new File(\"reporting.jar\"));\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MzI2NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449973264", "bodyText": "please inline the expectedMessage since we do not need it as a local variable", "author": "teleivo", "createdAt": "2020-07-06T04:05:54Z", "path": "api/src/test/java/org/openmrs/module/ModuleFileParserTest.java", "diffHunk": "@@ -128,17 +123,16 @@ public void parse_shouldFailIfModuleHasConfigInvalidConfigVersion() throws Excep\n \t\tString invalidConfigVersion = \"0.0.1\";\n \t\tString expectedMessage = messageSourceService\n \t\t\t.getMessage(\"Module.error.invalidConfigVersion\",\n-\t\t\t\tnew Object[] { invalidConfigVersion, \"1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6\" }, Context.getLocale());\n-\t\texpectModuleExceptionWithMessage(expectedMessage);\n+\t\t\t\tnew Object[] { invalidConfigVersion, \"1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6 Module: modulefileparsertest.omod\" }, Context.getLocale());\n \n \t\tDocument configXml = documentBuilder.newDocument();\n \t\tElement root = configXml.createElement(\"module\");\n \t\tconfigXml.appendChild(root);\n \t\tconfigXml.getDocumentElement().setAttribute(\"configVersion\", invalidConfigVersion);\n \n \t\tModuleFileParser parser = new ModuleFileParser(writeConfigXmlToFile(configXml));\n-\n-\t\tparser.parse();\n+\t\tModuleException exception = assertThrows(ModuleException.class, () -> parser.parse());\n+\t\tassertThat(exception.getMessage(), is(expectedMessage));", "originalCommit": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a45133500e84b62c318f4e3c2c8a0866a164d187", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java b/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\nindex 5e9bb809d..9dc189005 100644\n--- a/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\n+++ b/api/src/test/java/org/openmrs/module/ModuleFileParserTest.java\n\n@@ -123,7 +128,8 @@ public class ModuleFileParserTest extends BaseContextSensitiveTest {\n \t\tString invalidConfigVersion = \"0.0.1\";\n \t\tString expectedMessage = messageSourceService\n \t\t\t.getMessage(\"Module.error.invalidConfigVersion\",\n-\t\t\t\tnew Object[] { invalidConfigVersion, \"1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6 Module: modulefileparsertest.omod\" }, Context.getLocale());\n+\t\t\t\tnew Object[] { invalidConfigVersion, \"1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6\" }, Context.getLocale());\n+\t\texpectModuleExceptionWithMessage(expectedMessage);\n \n \t\tDocument configXml = documentBuilder.newDocument();\n \t\tElement root = configXml.createElement(\"module\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MzQ5Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449973496", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tNullPointerException exception=assertThrows(NullPointerException.class, () -> new ModuleFileParser((MessageSourceService) null));\n          \n          \n            \n            \t\tNullPointerException exception= assertThrows(NullPointerException.class, () -> new ModuleFileParser((MessageSourceService) null));\n          \n      \n    \n    \n  \n\nplease pay attention to the whitespaces!", "author": "teleivo", "createdAt": "2020-07-06T04:07:08Z", "path": "api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java", "diffHunk": "@@ -98,22 +97,19 @@ public void after() {\n \t@Test\n \tpublic void moduleFileParserConstruction_shouldFailIfGivenNull() {\n \n-\t\texpectedException.expect(NullPointerException.class);\n-\t\texpectedException.expectMessage(\"messageSourceService must not be null\");\n-\n-\t\tnew ModuleFileParser((MessageSourceService) null);\n+\t\tNullPointerException exception=assertThrows(NullPointerException.class, () -> new ModuleFileParser((MessageSourceService) null));", "originalCommit": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a45133500e84b62c318f4e3c2c8a0866a164d187", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\nindex c65699671..ab26b309c 100644\n--- a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n+++ b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n\n@@ -97,8 +98,10 @@ public class ModuleFileParserUnitTest extends BaseContextMockTest {\n \t@Test\n \tpublic void moduleFileParserConstruction_shouldFailIfGivenNull() {\n \n-\t\tNullPointerException exception=assertThrows(NullPointerException.class, () -> new ModuleFileParser((MessageSourceService) null));\n-\t\tassertThat(exception.getMessage(), is(\"messageSourceService must not be null\"));\n+\t\texpectedException.expect(NullPointerException.class);\n+\t\texpectedException.expectMessage(\"messageSourceService must not be null\");\n+\n+\t\tnew ModuleFileParser((MessageSourceService) null);\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3Mzk1MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449973951", "bodyText": "indentation is missing. check whitespaces", "author": "teleivo", "createdAt": "2020-07-06T04:09:32Z", "path": "api/src/test/java/org/openmrs/util/HandlerUtilTest.java", "diffHunk": "@@ -76,10 +73,9 @@ public void getPreferredHandler_shouldReturnThePreferredHandlerForThePassedHandl\n \t */\n \t@Test\n \tpublic void getPreferredHandler_shouldThrowAAPIExceptionExceptionIfNoHandlerIsFound() {\n-\t\tthrown.expect(APIException.class);\n-\t\tthrown.expectMessage(Context.getMessageSourceService().getMessage(\"handler.type.not.found\", new Object[] { Validator.class.toString(), Integer.class }, null));\n \t\t\n-\t\tHandlerUtil.getPreferredHandler(Validator.class, Integer.class);\n+\tAPIException exception = assertThrows(APIException.class, () -> HandlerUtil.getPreferredHandler(Validator.class, Integer.class));\n+\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"handler.type.not.found\", new Object[] { Validator.class.toString(), Integer.class }, null)));", "originalCommit": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f06453fcd7a5403d7b032d71fe3c3c0f499027f4", "chunk": "diff --git a/api/src/test/java/org/openmrs/util/HandlerUtilTest.java b/api/src/test/java/org/openmrs/util/HandlerUtilTest.java\nindex cb54c99c2..f8c7d5669 100644\n--- a/api/src/test/java/org/openmrs/util/HandlerUtilTest.java\n+++ b/api/src/test/java/org/openmrs/util/HandlerUtilTest.java\n\n@@ -72,10 +72,10 @@ public class HandlerUtilTest extends BaseContextSensitiveTest {\n \t * @see HandlerUtil#getPreferredHandler(Class, Class)\n \t */\n \t@Test\n-\tpublic void getPreferredHandler_shouldThrowAAPIExceptionExceptionIfNoHandlerIsFound() {\n+\tpublic void getPreferredHandler_shouldThrowAAPIExceptionExceptionIfNoHandlerIsFound() { \n \t\t\n-\tAPIException exception = assertThrows(APIException.class, () -> HandlerUtil.getPreferredHandler(Validator.class, Integer.class));\n-\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"handler.type.not.found\", new Object[] { Validator.class.toString(), Integer.class }, null)));\n+\t\tAPIException exception = assertThrows(APIException.class, () -> HandlerUtil.getPreferredHandler(Validator.class, Integer.class));\n+\t\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"handler.type.not.found\", new Object[] { Validator.class.toString(), Integer.class }, null)));\n \t}\n \t\n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NDExMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449974113", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tMalformedURLException exception= assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));\n          \n          \n            \n            \t\tMalformedURLException exception = assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));", "author": "teleivo", "createdAt": "2020-07-06T04:10:13Z", "path": "api/src/test/java/org/openmrs/util/HttpUrlTest.java", "diffHunk": "@@ -38,16 +35,16 @@ public void constructor_shouldNotThrowExceptionIfItIsAnHttpsUrl() throws Malform\n \t\n \t@Test\n \tpublic void constructor_shouldThrowMalformedUrlExceptionIfTheUrlDoesNotHaveHttp() throws MalformedURLException {\n-\t\texception.expect(MalformedURLException.class);\n-\t\texception.expectMessage(\"Not a valid http(s) url\");\n-\t\tnew HttpUrl(\"not_http\");\n+\n+\t\tMalformedURLException exception= assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));", "originalCommit": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a45133500e84b62c318f4e3c2c8a0866a164d187", "chunk": "diff --git a/api/src/test/java/org/openmrs/util/HttpUrlTest.java b/api/src/test/java/org/openmrs/util/HttpUrlTest.java\nindex 9ea70de18..3fade7701 100644\n--- a/api/src/test/java/org/openmrs/util/HttpUrlTest.java\n+++ b/api/src/test/java/org/openmrs/util/HttpUrlTest.java\n\n@@ -35,15 +35,13 @@ public class HttpUrlTest {\n \t\n \t@Test\n \tpublic void constructor_shouldThrowMalformedUrlExceptionIfTheUrlDoesNotHaveHttp() throws MalformedURLException {\n-\n-\t\tMalformedURLException exception= assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));\n+\t\tMalformedURLException exception = assertThrows(MalformedURLException.class, () -> new HttpUrl(\"not_http\"));\n \t\tassertThat(exception.getMessage(), is(\"Not a valid http(s) url\"));\n \t}\n \t\n \t@Test\n \tpublic void constructor_shouldNotAllowNullUrls() throws MalformedURLException {\n-\t\t\n-\t\tMalformedURLException exception= assertThrows(MalformedURLException.class, () -> new HttpUrl(null));\n+\t\tMalformedURLException exception = assertThrows(MalformedURLException.class, () -> new HttpUrl(null));\n \t\tassertThat(exception.getMessage(), is(\"Url cannot be null\"));\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NDE2OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r449974168", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tMalformedURLException exception= assertThrows(MalformedURLException.class, () -> new HttpUrl(null));\n          \n          \n            \n            \t\tMalformedURLException exception = assertThrows(MalformedURLException.class, () -> new HttpUrl(null));", "author": "teleivo", "createdAt": "2020-07-06T04:10:30Z", "path": "api/src/test/java/org/openmrs/util/HttpUrlTest.java", "diffHunk": "@@ -38,16 +35,16 @@ public void constructor_shouldNotThrowExceptionIfItIsAnHttpsUrl() throws Malform\n \t\n \t@Test\n \tpublic void constructor_shouldThrowMalformedUrlExceptionIfTheUrlDoesNotHaveHttp() throws MalformedURLException {\n-\t\texception.expect(MalformedURLException.class);\n-\t\texception.expectMessage(\"Not a valid http(s) url\");\n-\t\tnew HttpUrl(\"not_http\");\n+\n+\t\tMalformedURLException exception= assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));\n+\t\tassertThat(exception.getMessage(), is(\"Not a valid http(s) url\"));\n \t}\n \t\n \t@Test\n \tpublic void constructor_shouldNotAllowNullUrls() throws MalformedURLException {\n-\t\texception.expect(MalformedURLException.class);\n-\t\texception.expectMessage(\"Url cannot be null\");\n-\t\tnew HttpUrl(null);\n+\t\t\n+\t\tMalformedURLException exception= assertThrows(MalformedURLException.class, () -> new HttpUrl(null));", "originalCommit": "8dbe8d005f4d1e4f6ae2e7d94b3381196a9d7c64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a45133500e84b62c318f4e3c2c8a0866a164d187", "chunk": "diff --git a/api/src/test/java/org/openmrs/util/HttpUrlTest.java b/api/src/test/java/org/openmrs/util/HttpUrlTest.java\nindex 9ea70de18..3fade7701 100644\n--- a/api/src/test/java/org/openmrs/util/HttpUrlTest.java\n+++ b/api/src/test/java/org/openmrs/util/HttpUrlTest.java\n\n@@ -35,15 +35,13 @@ public class HttpUrlTest {\n \t\n \t@Test\n \tpublic void constructor_shouldThrowMalformedUrlExceptionIfTheUrlDoesNotHaveHttp() throws MalformedURLException {\n-\n-\t\tMalformedURLException exception= assertThrows(MalformedURLException.class,() -> new HttpUrl(\"not_http\"));\n+\t\tMalformedURLException exception = assertThrows(MalformedURLException.class, () -> new HttpUrl(\"not_http\"));\n \t\tassertThat(exception.getMessage(), is(\"Not a valid http(s) url\"));\n \t}\n \t\n \t@Test\n \tpublic void constructor_shouldNotAllowNullUrls() throws MalformedURLException {\n-\t\t\n-\t\tMalformedURLException exception= assertThrows(MalformedURLException.class, () -> new HttpUrl(null));\n+\t\tMalformedURLException exception = assertThrows(MalformedURLException.class, () -> new HttpUrl(null));\n \t\tassertThat(exception.getMessage(), is(\"Url cannot be null\"));\n \t}\n \t\n"}}, {"oid": "a45133500e84b62c318f4e3c2c8a0866a164d187", "url": "https://github.com/openmrs/openmrs-core/commit/a45133500e84b62c318f4e3c2c8a0866a164d187", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)", "committedDate": "2020-07-06T07:20:14Z", "type": "forcePushed"}, {"oid": "f06453fcd7a5403d7b032d71fe3c3c0f499027f4", "url": "https://github.com/openmrs/openmrs-core/commit/f06453fcd7a5403d7b032d71fe3c3c0f499027f4", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)", "committedDate": "2020-07-06T07:38:08Z", "type": "forcePushed"}, {"oid": "7b91613b736c0afdc2cd404dfe4c6342d675fa6d", "url": "https://github.com/openmrs/openmrs-core/commit/7b91613b736c0afdc2cd404dfe4c6342d675fa6d", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)", "committedDate": "2020-07-06T07:57:43Z", "type": "forcePushed"}, {"oid": "b6bce6c1df6b8ab07beb1f61431ab22d555d328d", "url": "https://github.com/openmrs/openmrs-core/commit/b6bce6c1df6b8ab07beb1f61431ab22d555d328d", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)", "committedDate": "2020-07-06T08:00:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2MjY1NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r450062655", "bodyText": "How can the message be equal to 2 different error messages? I believe this should fail when running the test. Doesnt it?\nRemember that expectMessage is checking whether a substring is contained in the message. So instead of is which checks equality it should be containsString I assume", "author": "teleivo", "createdAt": "2020-07-06T08:26:22Z", "path": "api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java", "diffHunk": "@@ -161,13 +160,12 @@ public void shouldUpgradeFromClean1_9To1_10() throws IOException, SQLException {\n \tpublic void shouldFailMigratingDrugOrdersIfUnitsToConceptsMappingsIsNotSet() throws IOException, SQLException {\n \t\tupgradeTestUtil.executeDataset(STANDARD_TEST_1_9_7_DATASET);\n \t\tcreateOrderEntryUpgradeFileWithTestData(\"\");\n-\t\texpectedException.expect(IOException.class);\n \t\tString errorMsgSubString1 = \"liquibase.exception.MigrationFailedException: Migration failed for change set liquibase-update-to-latest.xml::201401101647-TRUNK-4187::wyclif\";\n-\t\texpectedException.expectMessage(errorMsgSubString1);\n \t\tString errorMsgSubString2 = Context.getMessageSourceService().getMessage(\"upgrade.settings.file.not.have.mapping\",\n \t\t    new Object[] { \"mg\" }, null);\n-\t\texpectedException.expectMessage(errorMsgSubString2);\n-\t\tupgradeTestUtil.upgrade();\n+\t\tIOException exception = assertThrows(IOException.class, () -> upgradeTestUtil.upgrade());\n+\t\tassertThat(exception.getMessage(), is(errorMsgSubString1));\n+\t\tassertThat(exception.getMessage(), is(errorMsgSubString2));", "originalCommit": "b6bce6c1df6b8ab07beb1f61431ab22d555d328d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30602c603ea1d93dfd7dd345d75b28c01d3fcb69", "chunk": "diff --git a/api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java b/api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java\nindex 16dea6081..8a5ad616f 100644\n--- a/api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java\n+++ b/api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java\n\n@@ -164,8 +165,8 @@ public class Database1_9_7UpgradeIT extends BaseContextSensitiveTest {\n \t\tString errorMsgSubString2 = Context.getMessageSourceService().getMessage(\"upgrade.settings.file.not.have.mapping\",\n \t\t    new Object[] { \"mg\" }, null);\n \t\tIOException exception = assertThrows(IOException.class, () -> upgradeTestUtil.upgrade());\n-\t\tassertThat(exception.getMessage(), is(errorMsgSubString1));\n-\t\tassertThat(exception.getMessage(), is(errorMsgSubString2));\n+\t\tassertThat(exception.getMessage(), containsString(errorMsgSubString1));\n+\t\tassertThat(exception.getMessage(), containsString(errorMsgSubString2));\n \t}\n \t\n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2Mjc5OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r450062798", "bodyText": "same as above", "author": "teleivo", "createdAt": "2020-07-06T08:26:35Z", "path": "api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java", "diffHunk": "@@ -179,11 +177,10 @@ public void shouldFailMigratingDrugOrdersIfUnitsToConceptsMappingsDoesNotPointTo\n \t\t    \"mg=111\\ntab(s)=112\\n1/day\\\\ x\\\\ 7\\\\ days/week=113\\n2/day\\\\ x\\\\ 7\\\\ days/week=114\");\n \t\tcreateOrderEntryUpgradeFileWithTestData(\"mg=111\\ntab(s)=invalid\");\n \t\t\n-\t\texpectedException.expect(IOException.class);\n \t\tString errorMsgSubString1 = \"liquibase.exception.MigrationFailedException: Migration failed for change set liquibase-update-to-latest.xml::201401101647-TRUNK-4187::wyclif\";\n-\t\texpectedException.expectMessage(errorMsgSubString1);\n-\t\texpectedException.expectMessage(\"For input string: \\\"invalid\\\"\");\n-\t\tupgradeTestUtil.upgrade();\n+\t\tIOException exception = assertThrows(IOException.class, () -> upgradeTestUtil.upgrade());\n+\t\tassertThat(exception.getMessage(), is(errorMsgSubString1));\n+\t\tassertThat(exception.getMessage(), is(\"For input string: \\\"invalid\\\"\"));", "originalCommit": "b6bce6c1df6b8ab07beb1f61431ab22d555d328d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5NzY0Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3294#discussion_r450097642", "bodyText": "@teleivo corrected.", "author": "achilep", "createdAt": "2020-07-06T09:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2Mjc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "30602c603ea1d93dfd7dd345d75b28c01d3fcb69", "chunk": "diff --git a/api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java b/api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java\nindex 16dea6081..8a5ad616f 100644\n--- a/api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java\n+++ b/api/src/test/java/org/openmrs/util/databasechange/Database1_9_7UpgradeIT.java\n\n@@ -179,8 +180,8 @@ public class Database1_9_7UpgradeIT extends BaseContextSensitiveTest {\n \t\t\n \t\tString errorMsgSubString1 = \"liquibase.exception.MigrationFailedException: Migration failed for change set liquibase-update-to-latest.xml::201401101647-TRUNK-4187::wyclif\";\n \t\tIOException exception = assertThrows(IOException.class, () -> upgradeTestUtil.upgrade());\n-\t\tassertThat(exception.getMessage(), is(errorMsgSubString1));\n-\t\tassertThat(exception.getMessage(), is(\"For input string: \\\"invalid\\\"\"));\n+\t\tassertThat(exception.getMessage(), containsString(errorMsgSubString1));\n+\t\tassertThat(exception.getMessage(), containsString(\"For input string: \\\"invalid\\\"\"));\n \t}\n \t\n \t@Test\n"}}, {"oid": "30602c603ea1d93dfd7dd345d75b28c01d3fcb69", "url": "https://github.com/openmrs/openmrs-core/commit/30602c603ea1d93dfd7dd345d75b28c01d3fcb69", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)", "committedDate": "2020-07-06T09:06:38Z", "type": "forcePushed"}, {"oid": "c5dbfbc7f9df54e7b1538a639a7ef59128e76004", "url": "https://github.com/openmrs/openmrs-core/commit/c5dbfbc7f9df54e7b1538a639a7ef59128e76004", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)", "committedDate": "2020-07-06T10:19:51Z", "type": "forcePushed"}, {"oid": "1a2c871b4112b5a53586b79db3903d9bb50e260f", "url": "https://github.com/openmrs/openmrs-core/commit/1a2c871b4112b5a53586b79db3903d9bb50e260f", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)", "committedDate": "2020-07-06T11:14:03Z", "type": "commit"}, {"oid": "1a2c871b4112b5a53586b79db3903d9bb50e260f", "url": "https://github.com/openmrs/openmrs-core/commit/1a2c871b4112b5a53586b79db3903d9bb50e260f", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..1)", "committedDate": "2020-07-06T11:14:03Z", "type": "forcePushed"}]}