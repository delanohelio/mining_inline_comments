{"pr_number": 3399, "pr_title": "TRUNK-5410 : OrderGroupAttribute implementation", "pr_createdAt": "2020-07-27T16:22:35Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3399", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjIzMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478272232", "bodyText": "In all places, code looks better when you have spaces around = signs. And also when you put space after a comma in method parameters.", "author": "dkayiwa", "createdAt": "2020-08-27T09:10:49Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjkzMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478272932", "bodyText": "What is the true parameter doing here?", "author": "dkayiwa", "createdAt": "2020-08-27T09:12:02Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MDIzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478860235", "bodyText": "Removing it.", "author": "tendomart", "createdAt": "2020-08-28T06:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MjkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTEwNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275107", "bodyText": "The indention seems off.", "author": "dkayiwa", "createdAt": "2020-08-27T09:15:48Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4OTIzOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484389238", "bodyText": "fixed", "author": "tendomart", "createdAt": "2020-09-07T12:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2NzE1OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484467158", "bodyText": "Are you sure?", "author": "dkayiwa", "createdAt": "2020-09-07T14:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxOTA1Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484619052", "bodyText": "Yes , but for some unknown reason the changes are not reflecting here .", "author": "tendomart", "createdAt": "2020-09-08T02:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYyMjkwNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484622905", "bodyText": "", "author": "tendomart", "createdAt": "2020-09-08T02:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTYyNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275626", "bodyText": "The indention seems off.", "author": "dkayiwa", "createdAt": "2020-08-27T09:16:42Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNzAzMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484427033", "bodyText": "fixed earlier", "author": "tendomart", "createdAt": "2020-09-07T13:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTc0Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275742", "bodyText": "The indention seems off.", "author": "dkayiwa", "createdAt": "2020-08-27T09:16:52Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4OTUwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484389503", "bodyText": "This was fixed", "author": "tendomart", "createdAt": "2020-09-07T12:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxNzIzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484617235", "bodyText": "I fixed the indent and been routinely running \"mvn clean install \"  before each commit , am however not sure why the local indenting is not reflected here . This is how my local indenting looks like.", "author": "tendomart", "createdAt": "2020-09-08T02:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxODMwMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484618301", "bodyText": "But am working to see that the changes are reflected.", "author": "tendomart", "createdAt": "2020-09-08T02:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTgxMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275811", "bodyText": "The indention seems off.", "author": "dkayiwa", "createdAt": "2020-08-27T09:16:59Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODkxNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484638914", "bodyText": "@dkayiwa  any  idea on how i should make the local indenation align with the remote repo ?", "author": "tendomart", "createdAt": "2020-09-08T04:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY4Mjk0NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484682945", "bodyText": "@sacull am sure you can be of help here. \ud83d\ude0a", "author": "dkayiwa", "createdAt": "2020-09-08T06:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTg4MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478275880", "bodyText": "The indention seems off.", "author": "dkayiwa", "createdAt": "2020-08-27T09:17:05Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4OTM1Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484389357", "bodyText": "This was fixed", "author": "tendomart", "createdAt": "2020-09-07T12:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NjY3Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478276676", "bodyText": "Spaces around - and after comma.", "author": "dkayiwa", "createdAt": "2020-08-27T09:18:25Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NzIyMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478277220", "bodyText": "Why this constant for use in one place?", "author": "dkayiwa", "createdAt": "2020-08-27T09:19:14Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NzU0NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478277545", "bodyText": "Spaces around =", "author": "dkayiwa", "createdAt": "2020-08-27T09:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NzIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3Nzc3OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478277779", "bodyText": "Why this constant for use in one place?", "author": "dkayiwa", "createdAt": "2020-08-27T09:20:14Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MDMzOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478280339", "bodyText": "What exactly are you testing here? Do you take a look at existing tests to see how we do it?", "author": "dkayiwa", "createdAt": "2020-08-27T09:24:30Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,65 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex dd58683a1..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -126,7 +126,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n     @Test\n \tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n \t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n-\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n \t}\n \t\n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MTYwMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478281602", "bodyText": "Do you take a look at existing tests to see how we do it?", "author": "dkayiwa", "createdAt": "2020-08-27T09:26:40Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,65 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+    \tfinal Integer ID = 4;\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(ID);", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex dd58683a1..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -126,7 +126,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n     @Test\n \tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n \t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n-\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n \t}\n \t\n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MjE5OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478282199", "bodyText": "Why this constant for use in one place?", "author": "dkayiwa", "createdAt": "2020-08-27T09:27:39Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,65 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+    \tfinal Integer ID = 4;\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(ID);\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+    public void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName(){\n+\t\tfinal String NAME = \"ECG\";\n+\t\tfinal String UUID4=\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex dd58683a1..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -126,7 +126,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n     @Test\n \tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n \t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n-\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n \t}\n \t\n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MzIzNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478283237", "bodyText": "Is uuid a constant?", "author": "dkayiwa", "createdAt": "2020-08-27T09:29:24Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,65 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+    \tfinal Integer ID = 4;\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(ID);\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+    public void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName(){\n+\t\tfinal String NAME = \"ECG\";\n+\t\tfinal String UUID4=\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByName(NAME);\n+\t\tassertEquals(NAME,newOrderGroupAttributeType.getName());\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t\tassertEquals(UUID4,newOrderGroupAttributeType.getUuid());\n+    }\n+    \n+    /**\n+\t * @see {@link HibernateOrderDAO#deleteOrderGroupAttributeType(OrderGroupAttributeType)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void deleteOrderGroupAttributeType_shouldDeleteOrderGroupAttributeTypeFromDatabase(){\n+    \tString uuid = \"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex dd58683a1..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -126,7 +126,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n     @Test\n \tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n \t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n-\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n \t}\n \t\n \t/**\n"}}, {"oid": "598a54f91d9d499297fd71d892ff4c966dba66ba", "url": "https://github.com/openmrs/openmrs-core/commit/598a54f91d9d499297fd71d892ff4c966dba66ba", "message": "TRUNK-5410:Rectifying Mistakes and adding New Features", "committedDate": "2020-08-28T15:50:22Z", "type": "commit"}, {"oid": "7165dbaf4dc556187e6cc8556063a40d71aa26aa", "url": "https://github.com/openmrs/openmrs-core/commit/7165dbaf4dc556187e6cc8556063a40d71aa26aa", "message": "TRUNK-5410:Removing unused import in HibernateOrderDAOTest", "committedDate": "2020-08-28T15:55:17Z", "type": "commit"}, {"oid": "4e3a9769a66c10ad4f7a82906db90c769a04af7e", "url": "https://github.com/openmrs/openmrs-core/commit/4e3a9769a66c10ad4f7a82906db90c769a04af7e", "message": "TRUNK-5410:Rectifying Mistakes and adding New Features", "committedDate": "2020-08-28T15:55:17Z", "type": "commit"}, {"oid": "4e3a9769a66c10ad4f7a82906db90c769a04af7e", "url": "https://github.com/openmrs/openmrs-core/commit/4e3a9769a66c10ad4f7a82906db90c769a04af7e", "message": "TRUNK-5410:Rectifying Mistakes and adding New Features", "committedDate": "2020-08-28T15:55:17Z", "type": "forcePushed"}, {"oid": "3becee4f2e9ffe96dc7cd16004964f772c773039", "url": "https://github.com/openmrs/openmrs-core/commit/3becee4f2e9ffe96dc7cd16004964f772c773039", "message": "TRUNK-5410:Doing more rectifications", "committedDate": "2020-08-31T07:50:53Z", "type": "commit"}, {"oid": "6246d522dbe882f632e4c5d6310b7ff2d68cba85", "url": "https://github.com/openmrs/openmrs-core/commit/6246d522dbe882f632e4c5d6310b7ff2d68cba85", "message": "TRUNK-5410:Doing more rectifications", "committedDate": "2020-08-31T07:53:41Z", "type": "commit"}, {"oid": "f8c3204ba0d5e6c9609206aa662e60464aca9726", "url": "https://github.com/openmrs/openmrs-core/commit/f8c3204ba0d5e6c9609206aa662e60464aca9726", "message": "TRUNK-5410:Doing more refactorings", "committedDate": "2020-09-01T12:41:23Z", "type": "commit"}, {"oid": "7c7f0baaccee2263615b0a0a1d8c8c21d70c2591", "url": "https://github.com/openmrs/openmrs-core/commit/7c7f0baaccee2263615b0a0a1d8c8c21d70c2591", "message": "TRUNK-5410:Doing more refactorings", "committedDate": "2020-09-01T12:49:46Z", "type": "commit"}, {"oid": "328046dac6660420b1055b115d94db002f606316", "url": "https://github.com/openmrs/openmrs-core/commit/328046dac6660420b1055b115d94db002f606316", "message": "TRUNK-5410:Adding missing pieces of code / Javadocs and formattings", "committedDate": "2020-09-01T20:33:30Z", "type": "commit"}, {"oid": "5bd2d5c96044b31696d551c66e9c54f6a5fa15c9", "url": "https://github.com/openmrs/openmrs-core/commit/5bd2d5c96044b31696d551c66e9c54f6a5fa15c9", "message": "Merge branch 'TRUNK-5410'", "committedDate": "2020-09-01T20:35:11Z", "type": "commit"}, {"oid": "a6353904268f8454ce3690ab6539f87a1f168dd8", "url": "https://github.com/openmrs/openmrs-core/commit/a6353904268f8454ce3690ab6539f87a1f168dd8", "message": "TRUNK-5410:Refactoring OrderServiceImpl.saveOrderGroup", "committedDate": "2020-09-02T18:43:03Z", "type": "commit"}, {"oid": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "url": "https://github.com/openmrs/openmrs-core/commit/6ed5da668f058d6945f7c64bcb9d931feff1be75", "message": "Merge branch 'TRUNK-5410'", "committedDate": "2020-09-02T18:44:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzQyMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483207422", "bodyText": "Do we need this comment?", "author": "dkayiwa", "createdAt": "2020-09-03T19:30:29Z", "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n+\n+\tprivate Integer orderGroupAttributeId;\n+\n+\t// BaseAttribute<OrderGroup> has an \"owner\" property of type OrderGroup, which we re-expose as \"orderGroup\"", "originalCommit": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dadfd5f7789b6965a52473b84448cf4a3f479779", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroupAttribute.java b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\nindex 28e35ccd7..be6d673d3 100644\n--- a/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n+++ b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n\n@@ -20,32 +20,30 @@ import org.openmrs.attribute.BaseAttribute;\n public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n \n \tprivate Integer orderGroupAttributeId;\n-\n-\t// BaseAttribute<OrderGroup> has an \"owner\" property of type OrderGroup, which we re-expose as \"orderGroup\"\n-\n+\t\n \t/**\n-\t * @return the orderGroupAttributeId\n+\t * @return the order group attribute Id\n \t */\n \tpublic Integer getOrderGroupAttributeId() {\n \t\treturn orderGroupAttributeId;\n \t}\n \n \t/**\n-\t * @param orderGroupAttributeId the orderGroupAttributeId to set\n+\t * @param orderGroupAttributeId the order group attribute Id to set\n \t */\n \tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n \t\tthis.orderGroupAttributeId = orderGroupAttributeId;\n \t}\n \n \t/**\n-\t * @return the orderGroup\n+\t * @return the order group\n \t */\n \tpublic OrderGroup getOrderGroup(){\n \t\treturn getOwner();\n \t}\n \t\n \t/**\n-\t * @param orderGroup the orderGroup to set\n+\t * @param orderGroup the order group to set\n \t */\n \tpublic void setOrderGroup(OrderGroup orderGroup){\n \t\tsetOwner(orderGroup);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTE0MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483291140", "bodyText": "orderGroupAttributeTypeId cannot be the description for orderGroupAttributeTypeId. Can you change the param description to? order group attribute type Id?\nFollow the same convention else where.", "author": "dkayiwa", "createdAt": "2020-09-03T22:41:44Z", "path": "api/src/main/java/org/openmrs/OrderGroupAttributeType.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.AttributeType;\n+import org.openmrs.attribute.BaseAttributeType;\n+\n+/**\n+ * A user-defined extension to the {@link OrderGroup} class.\n+ * @see AttributeType\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttributeType extends BaseAttributeType<OrderGroup> implements AttributeType<OrderGroup> {\n+\t\n+\tprivate Integer orderGroupAttributeTypeId;\n+\t\n+\t/**\n+\t * @see org.openmrs.OpenmrsObject#getId()\n+\t */\n+\t@Override\n+\tpublic Integer getId() {\n+\t\treturn getOrderGroupAttributeTypeId();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.OpenmrsObject#setId(java.lang.Integer)\n+\t */\n+\t@Override\n+\tpublic void setId(Integer id) {\n+\t\tsetOrderGroupAttributeTypeId(id);\n+\t}\n+\n+\t/**\n+\t * @return the orderGroupAttributeTypeId\n+\t */\n+\tpublic Integer getOrderGroupAttributeTypeId() {\n+\t\treturn orderGroupAttributeTypeId;\n+\t}\n+\n+\t/**\n+\t * @param orderGroupAttributeTypeId the orderGroupAttributeTypeId to set", "originalCommit": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk3MzQ4Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483973486", "bodyText": "True thanks.", "author": "tendomart", "createdAt": "2020-09-05T17:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "dadfd5f7789b6965a52473b84448cf4a3f479779", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroupAttributeType.java b/api/src/main/java/org/openmrs/OrderGroupAttributeType.java\nindex c18a23186..8e40c5714 100644\n--- a/api/src/main/java/org/openmrs/OrderGroupAttributeType.java\n+++ b/api/src/main/java/org/openmrs/OrderGroupAttributeType.java\n\n@@ -38,14 +38,14 @@ public class OrderGroupAttributeType extends BaseAttributeType<OrderGroup> imple\n \t}\n \n \t/**\n-\t * @return the orderGroupAttributeTypeId\n+\t * @return the order group attribute Id\n \t */\n \tpublic Integer getOrderGroupAttributeTypeId() {\n \t\treturn orderGroupAttributeTypeId;\n \t}\n \n \t/**\n-\t * @param orderGroupAttributeTypeId the orderGroupAttributeTypeId to set\n+\t * @param orderGroupAttributeTypeId the order group attribute type Id to set\n \t */\n \tpublic void setOrderGroupAttributeTypeId(Integer orderGroupAttributeTypeId) {\n \t\tthis.orderGroupAttributeTypeId = orderGroupAttributeTypeId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTUzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483291535", "bodyText": "Can you correct the english in the above sentence?", "author": "dkayiwa", "createdAt": "2020-09-03T22:43:02Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id", "originalCommit": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dadfd5f7789b6965a52473b84448cf4a3f479779", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex b220f5e5b..b7d562589 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -870,16 +870,16 @@ public interface OrderService extends OpenmrsService {\n \t * \n \t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the order group attribute type with the using the provided id\n+\t * @should return the order group attribute type using the provided id\n \t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches  order group attribute type using provided Uuid \n+\t * Fetches  order group attribute type using provided uuid \n \t * \n-\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @param uuid The uuid of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n \t * @should return the order group attribute type with the given uuid\n \t * @should return null if no order group attribute type exists with the given uuid\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTg5MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483291891", "bodyText": "Why capital S in Save?", "author": "dkayiwa", "createdAt": "2020-09-03T22:44:18Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database", "originalCommit": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dadfd5f7789b6965a52473b84448cf4a3f479779", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex b220f5e5b..b7d562589 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -870,16 +870,16 @@ public interface OrderService extends OpenmrsService {\n \t * \n \t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the order group attribute type with the using the provided id\n+\t * @should return the order group attribute type using the provided id\n \t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches  order group attribute type using provided Uuid \n+\t * Fetches  order group attribute type using provided uuid \n \t * \n-\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @param uuid The uuid of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n \t * @should return the order group attribute type with the given uuid\n \t * @should return null if no order group attribute type exists with the given uuid\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MjE5NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483292195", "bodyText": "a or an?", "author": "dkayiwa", "createdAt": "2020-09-03T22:45:14Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type", "originalCommit": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dadfd5f7789b6965a52473b84448cf4a3f479779", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex b220f5e5b..b7d562589 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -870,16 +870,16 @@ public interface OrderService extends OpenmrsService {\n \t * \n \t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the order group attribute type with the using the provided id\n+\t * @should return the order group attribute type using the provided id\n \t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches  order group attribute type using provided Uuid \n+\t * Fetches  order group attribute type using provided uuid \n \t * \n-\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @param uuid The uuid of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n \t * @should return the order group attribute type with the given uuid\n \t * @should return null if no order group attribute type exists with the given uuid\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MjQ3Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483292473", "bodyText": "type type?", "author": "dkayiwa", "createdAt": "2020-09-03T22:46:10Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType, String reason) throws APIException;\n+\n+\t/**\n+\t * Restores an order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes an order group attribute type type from the database", "originalCommit": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dadfd5f7789b6965a52473b84448cf4a3f479779", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex b220f5e5b..b7d562589 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -870,16 +870,16 @@ public interface OrderService extends OpenmrsService {\n \t * \n \t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the order group attribute type with the using the provided id\n+\t * @should return the order group attribute type using the provided id\n \t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches  order group attribute type using provided Uuid \n+\t * Fetches  order group attribute type using provided uuid \n \t * \n-\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @param uuid The uuid of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n \t * @should return the order group attribute type with the given uuid\n \t * @should return null if no order group attribute type exists with the given uuid\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NjY0Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483296642", "bodyText": "The TABBING above.\nDo you run mvn clean install? I remember seeing it automatically format the code.", "author": "dkayiwa", "createdAt": "2020-09-03T22:59:26Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,62 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", newOrderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", newOrderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+    public void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName(){\n+\t\tfinal String NAME = \"ECG\";\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByName(NAME);\n+\t\tassertEquals(NAME, newOrderGroupAttributeType.getName());\n+\t\tassertEquals(4, newOrderGroupAttributeType.getId());\n+\t\tassertEquals(\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\", newOrderGroupAttributeType.getUuid());\n+    }\n+    \n+    /**\n+\t * @see {@link HibernateOrderDAO#deleteOrderGroupAttributeType(OrderGroupAttributeType)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void deleteOrderGroupAttributeType_shouldDeleteOrderGroupAttributeTypeFromDatabase(){\n+    \tfinal String UUID1 = \"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "originalCommit": "6ed5da668f058d6945f7c64bcb9d931feff1be75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MDYwOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484470608", "bodyText": "Did you see the above?", "author": "dkayiwa", "createdAt": "2020-09-07T14:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MDg0Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484470846", "bodyText": "And why did you append 1 to the constant name?", "author": "dkayiwa", "createdAt": "2020-09-07T14:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYyNjkyMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484626921", "bodyText": "I have removed the 1\n@dkayiwa  this is the indenting which i have locally", "author": "tendomart", "createdAt": "2020-09-08T03:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex c4fcc9ff4..f333c72f9 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -135,8 +135,8 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \t */\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n-    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\", newOrderGroupAttributeType.getName());\n+    \tOrderGroupAttributeType orderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \t\n \t/**\n"}}, {"oid": "dadfd5f7789b6965a52473b84448cf4a3f479779", "url": "https://github.com/openmrs/openmrs-core/commit/dadfd5f7789b6965a52473b84448cf4a3f479779", "message": "TRUNK-5410:Doing more Refactorings", "committedDate": "2020-09-06T16:26:57Z", "type": "commit"}, {"oid": "d93519810f5c13baa29e227a563366372a5b1190", "url": "https://github.com/openmrs/openmrs-core/commit/d93519810f5c13baa29e227a563366372a5b1190", "message": "TRUNK-5410: Doing more format changes", "committedDate": "2020-09-07T13:36:34Z", "type": "commit"}, {"oid": "266558d63ee7be3fa4990052a4e1beae19264b0b", "url": "https://github.com/openmrs/openmrs-core/commit/266558d63ee7be3fa4990052a4e1beae19264b0b", "message": "Merge branch 'TRUNK-5410'", "committedDate": "2020-09-07T13:37:14Z", "type": "commit"}, {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "url": "https://github.com/openmrs/openmrs-core/commit/b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "message": "Merge branch 'master' of https://github.com/openmrs/openmrs-core", "committedDate": "2020-09-07T13:38:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NTk5MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484455991", "bodyText": "Stored on a or in an?", "author": "dkayiwa", "createdAt": "2020-09-07T14:11:23Z", "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MDczOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484460738", "bodyText": "Rectifying ....", "author": "tendomart", "createdAt": "2020-09-07T14:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NTk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroupAttribute.java b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\nindex be6d673d3..5599a5163 100644\n--- a/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n+++ b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n\n@@ -13,37 +13,39 @@ import org.openmrs.attribute.Attribute;\n import org.openmrs.attribute.BaseAttribute;\n \n /**\n- * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored in an {@link OrderGroup}.\n  * @see Attribute\n  * @since 2.4.0\n  */\n public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n \n \tprivate Integer orderGroupAttributeId;\n-\t\n+\n+\t// BaseAttribute<OrderGroup> has an \"owner\" property of type OrderGroup, which we re-expose as \"orderGroup\"\n+\n \t/**\n-\t * @return the order group attribute Id\n+\t * @return the orderGroupAttributeId\n \t */\n \tpublic Integer getOrderGroupAttributeId() {\n \t\treturn orderGroupAttributeId;\n \t}\n \n \t/**\n-\t * @param orderGroupAttributeId the order group attribute Id to set\n+\t * @param orderGroupAttributeId the orderGroupAttributeId to set\n \t */\n \tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n \t\tthis.orderGroupAttributeId = orderGroupAttributeId;\n \t}\n \n \t/**\n-\t * @return the order group\n+\t * @return the orderGroup\n \t */\n \tpublic OrderGroup getOrderGroup(){\n \t\treturn getOwner();\n \t}\n \t\n \t/**\n-\t * @param orderGroup the order group to set\n+\t * @param orderGroup the orderGroup to set\n \t */\n \tpublic void setOrderGroup(OrderGroup orderGroup){\n \t\tsetOwner(orderGroup);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1ODcyNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484458724", "bodyText": "Can you also document the reason param?", "author": "dkayiwa", "createdAt": "2020-09-07T14:16:13Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +853,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Returns all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided uuid \n+\t * \n+\t * @param uuid The uuid of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to save in the database\n+\t * @return the order group attribute type created or saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to retire", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MDQ1OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484460459", "bodyText": "Alright  let me do it .", "author": "tendomart", "createdAt": "2020-09-07T14:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1ODcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex c4c9d4bce..755bbf5b4 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -868,16 +868,16 @@ public interface OrderService extends OpenmrsService {\n \t * \n \t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the order group attribute type using the provided id\n+\t * @should return the order group attribute type with the using the provided id\n \t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches  order group attribute type using provided uuid \n+\t * Fetches  order group attribute type using provided Uuid \n \t * \n-\t * @param uuid The uuid of the order group attribute type to fetch from the database\n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n \t * @should return the order group attribute type with the given uuid\n \t * @should return null if no order group attribute type exists with the given uuid\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MDk3NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484460974", "bodyText": "Did you remove the above accidentally?", "author": "dkayiwa", "createdAt": "2020-09-07T14:20:34Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -119,7 +121,6 @@ public Order getOrder(Integer orderId) throws DAOException {\n \t * @see org.openmrs.api.db.OrderDAO#getOrders(org.openmrs.OrderType, java.util.List,\n \t *      java.util.List, java.util.List, java.util.List)\n \t */\n-\t@Override", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2NTM1NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484465354", "bodyText": "Yes i think , while removing extra spaces at the top.", "author": "tendomart", "createdAt": "2020-09-07T14:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MDk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex 17f97c2a7..f81eefc9b 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -121,7 +121,7 @@ public class HibernateOrderDAO implements OrderDAO {\n \t * @see org.openmrs.api.db.OrderDAO#getOrders(org.openmrs.OrderType, java.util.List,\n \t *      java.util.List, java.util.List, java.util.List)\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n \tpublic List<Order> getOrders(OrderType orderType, List<Patient> patients, List<Concept> concepts, List<User> orderers,\n \t        List<Encounter> encounters) {\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MjUzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484462535", "bodyText": "It is always good to put space between the type and variable name.", "author": "dkayiwa", "createdAt": "2020-09-07T14:23:35Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 20f07b652..b9de378c2 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3810,35 +3817,29 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n \t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n-\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType(){\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n-\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n+\t\tassertThat(orderGroupAttributeType.getId(), is(2));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n \t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzE0Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484463143", "bodyText": "Instead of doing executeDataSet in each test method, isn't it better to do it once with a BeforeClass?", "author": "dkayiwa", "createdAt": "2020-09-07T14:24:48Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2OTUwMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484469500", "bodyText": "I had actually opted for that , but it was the convention already used in the class , so i thought otherwise. But let me alter that as well.", "author": "tendomart", "createdAt": "2020-09-07T14:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 20f07b652..b9de378c2 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3810,35 +3817,29 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n \t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n-\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType(){\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n-\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n+\t\tassertThat(orderGroupAttributeType.getId(), is(2));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n \t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzQ5NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484463495", "bodyText": "getOrderGroupAttributeType by id?", "author": "dkayiwa", "createdAt": "2020-09-07T14:25:27Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 20f07b652..b9de378c2 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3810,35 +3817,29 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n \t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n-\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType(){\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n-\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n+\t\tassertThat(orderGroupAttributeType.getId(), is(2));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n \t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzcyNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484463724", "bodyText": "A constant for use in only one place?", "author": "dkayiwa", "createdAt": "2020-09-07T14:25:57Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2NDIxMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484464212", "bodyText": "Can you look at existing service tests for returning items by id?", "author": "dkayiwa", "createdAt": "2020-09-07T14:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 20f07b652..b9de378c2 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3810,35 +3817,29 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n \t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n-\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType(){\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n-\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n+\t\tassertThat(orderGroupAttributeType.getId(), is(2));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n \t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2ODEzOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484468138", "bodyText": "Don't you already have an orderService class level variable?", "author": "dkayiwa", "createdAt": "2020-09-07T14:34:41Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,126 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 20f07b652..b9de378c2 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3810,35 +3817,29 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n \t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n-\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType(){\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n-\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n+\t\tassertThat(orderGroupAttributeType.getId(), is(2));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n \t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n-\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2OTM3NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484469374", "bodyText": "The tabbing.", "author": "dkayiwa", "createdAt": "2020-09-07T14:37:16Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,62 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4OTMxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484489315", "bodyText": "I don't know why it changes , it's correctly indented on my local.", "author": "tendomart", "createdAt": "2020-09-07T15:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2OTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex c4fcc9ff4..f333c72f9 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -135,8 +135,8 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \t */\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n-    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\", newOrderGroupAttributeType.getName());\n+    \tOrderGroupAttributeType orderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \t\n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2OTgwMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484469800", "bodyText": "Why do you call it new?", "author": "dkayiwa", "createdAt": "2020-09-07T14:38:07Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,62 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", newOrderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(4);", "originalCommit": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex c4fcc9ff4..f333c72f9 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -135,8 +135,8 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \t */\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n-    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\", newOrderGroupAttributeType.getName());\n+    \tOrderGroupAttributeType orderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \t\n \t/**\n"}}, {"oid": "ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "url": "https://github.com/openmrs/openmrs-core/commit/ef701c485a9a5622dfa494a57c8764a3d9fb3ddd", "message": "TRUNK-5410 : Doing more refactorings", "committedDate": "2020-09-07T16:32:03Z", "type": "commit"}, {"oid": "7d2a2f6251ee36459578677df8aa5db9053f27f8", "url": "https://github.com/openmrs/openmrs-core/commit/7d2a2f6251ee36459578677df8aa5db9053f27f8", "message": "TRUNK-5410 : Doing more refactorings", "committedDate": "2020-09-07T16:33:52Z", "type": "commit"}, {"oid": "7d2a2f6251ee36459578677df8aa5db9053f27f8", "url": "https://github.com/openmrs/openmrs-core/commit/7d2a2f6251ee36459578677df8aa5db9053f27f8", "message": "TRUNK-5410 : Doing more refactorings", "committedDate": "2020-09-07T16:33:52Z", "type": "forcePushed"}, {"oid": "b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "url": "https://github.com/openmrs/openmrs-core/commit/b7e156d4ff8bc6e0649498a9383a9f6099da1a64", "message": "Merge branch 'master' of https://github.com/openmrs/openmrs-core", "committedDate": "2020-09-07T13:38:39Z", "type": "forcePushed"}, {"oid": "7d5209b845ac312ac4d3e8ebfec412b1b2aac6d9", "url": "https://github.com/openmrs/openmrs-core/commit/7d5209b845ac312ac4d3e8ebfec412b1b2aac6d9", "message": "TRUNK-541O: Doing more changes", "committedDate": "2020-09-08T01:27:44Z", "type": "commit"}, {"oid": "b2bcf7ccc13c1ddfb0ab66e83c41efce5517712c", "url": "https://github.com/openmrs/openmrs-core/commit/b2bcf7ccc13c1ddfb0ab66e83c41efce5517712c", "message": "TRUNK-5410: Doing more corrections", "committedDate": "2020-09-08T03:21:12Z", "type": "commit"}, {"oid": "44a66fd9d7559c3396cfed9026542ee94f90a564", "url": "https://github.com/openmrs/openmrs-core/commit/44a66fd9d7559c3396cfed9026542ee94f90a564", "message": "TRUNK-5410:Fixing Indentation in OrderServiceTest and HibernateOrderDAOTest", "committedDate": "2020-09-08T07:47:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NzA1NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484787055", "bodyText": "Why new?", "author": "dkayiwa", "createdAt": "2020-09-08T09:39:31Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,63 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes() {\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid() {\n+\t\tOrderGroupAttributeType orderGroupAttributeType = dao\n+\t\t        .getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType() {\n+\t\tOrderGroupAttributeType orderGroupAttributeType = dao.getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName() {\n+\t\tfinal String NAME = \"ECG\";\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByName(NAME);", "originalCommit": "44a66fd9d7559c3396cfed9026542ee94f90a564", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1eae6c7f9c485f762460cdb0f6cb42132f65e0e", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex d4ffea8a1..4124d0f2d 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -134,7 +132,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \t * @throws Exception\n \t */\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid() {\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldGetOrderGroupAttributeTypeGivenUuid() {\n \t\tOrderGroupAttributeType orderGroupAttributeType = dao\n \t\t        .getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n \t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4Nzk4MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484787981", "bodyText": "You forgot adding ByUuid to the test method name.", "author": "dkayiwa", "createdAt": "2020-09-08T09:40:58Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +116,63 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes() {\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(), 4);\n+\t}\n+\t\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid() {", "originalCommit": "44a66fd9d7559c3396cfed9026542ee94f90a564", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc5NDQ3MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484794471", "bodyText": "Sure very much.", "author": "tendomart", "createdAt": "2020-09-08T09:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4Nzk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1eae6c7f9c485f762460cdb0f6cb42132f65e0e", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex d4ffea8a1..4124d0f2d 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -134,7 +132,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \t * @throws Exception\n \t */\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid() {\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldGetOrderGroupAttributeTypeGivenUuid() {\n \t\tOrderGroupAttributeType orderGroupAttributeType = dao\n \t\t        .getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n \t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4OTE4Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484789186", "bodyText": "Are you using this constant anywhere in the class?", "author": "dkayiwa", "createdAt": "2020-09-08T09:42:54Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -41,7 +42,9 @@\n \tprivate static final String ORDER_SET = \"org/openmrs/api/include/OrderSetServiceTest-general.xml\";\n \t\n \tprivate static final String ORDER_GROUP = \"org/openmrs/api/include/OrderServiceTest-createOrderGroup.xml\";\n-\n+     \n+\tprivate static final String  UUID = \"9cf1b9de-d18e-11ea-87d0-0242ac130003\";", "originalCommit": "44a66fd9d7559c3396cfed9026542ee94f90a564", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1eae6c7f9c485f762460cdb0f6cb42132f65e0e", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex d4ffea8a1..4124d0f2d 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -42,8 +42,6 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \tprivate static final String ORDER_SET = \"org/openmrs/api/include/OrderSetServiceTest-general.xml\";\n \t\n \tprivate static final String ORDER_GROUP = \"org/openmrs/api/include/OrderServiceTest-createOrderGroup.xml\";\n-     \n-\tprivate static final String  UUID = \"9cf1b9de-d18e-11ea-87d0-0242ac130003\";\n \t\n \t@BeforeEach\n \tpublic void setUp() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc5MTUyMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484791523", "bodyText": "Why use Context.getOrderService() in many methods when you already have a class level orderService property?", "author": "dkayiwa", "createdAt": "2020-09-08T09:46:36Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3807,117 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes() {\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId() {\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeType() {\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(2));\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid() {\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService\n+\t\t        .getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType()\n+\t        throws ParseException {\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();", "originalCommit": "44a66fd9d7559c3396cfed9026542ee94f90a564", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxMTAxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484811015", "bodyText": "Cleaned out !", "author": "tendomart", "createdAt": "2020-09-08T10:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc5MTUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "a1eae6c7f9c485f762460cdb0f6cb42132f65e0e", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 62285a107..93d4f54e3 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3823,7 +3823,7 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId() {\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n+\t\tassertNull(orderService.getOrderGroupAttributeType(10));\n \t}\n \t\n \t@Test\n"}}, {"oid": "a1eae6c7f9c485f762460cdb0f6cb42132f65e0e", "url": "https://github.com/openmrs/openmrs-core/commit/a1eae6c7f9c485f762460cdb0f6cb42132f65e0e", "message": "TRUNK-5410:Replacing Context.orderService with orderService and other refactorings", "committedDate": "2020-09-08T11:48:53Z", "type": "commit"}, {"oid": "bcc86161cd7a6e11aa3233bfa174a138db0ab381", "url": "https://github.com/openmrs/openmrs-core/commit/bcc86161cd7a6e11aa3233bfa174a138db0ab381", "message": "TRUNK-5410:Changing newOrderGroupAttributeType to OrderGroupAttributeType", "committedDate": "2020-09-08T11:57:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzODczNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r461038735", "bodyText": "@tendomart i think this should be 2.4.0", "author": "gitcliff", "createdAt": "2020-07-27T17:05:35Z", "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.3", "originalCommit": "113e2334014befa3cddaef2f91a9bb14d07e1824", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MjE1NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r461382154", "bodyText": "Thanks @gitcliff  for the observation", "author": "tendomart", "createdAt": "2020-07-28T07:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzODczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroupAttribute.java b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\nindex 926f6efd0..cc7b4cd30 100644\n--- a/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n+++ b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n\n@@ -15,31 +15,31 @@ import org.openmrs.attribute.BaseAttribute;\n /**\n  * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n  * @see Attribute\n- * @since 2.3\n+ * @since 2.4.0\n  */\n public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n \n-\tpublic Integer orderGroupAttributeId; \n+\tprivate Integer orderGroupAttributeId;\n \n \tpublic Integer getOrderGroupAttributeId() {\n \t\treturn orderGroupAttributeId;\n \t}\n+\t\n \tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n-\t\tthis.orderGroupAttributeId=orderGroupAttributeId;\n+\t\tthis.orderGroupAttributeId = orderGroupAttributeId;\n \t}\n \n \t/**\n \t * @return the orderGroup\n \t */\n \tpublic OrderGroup getOrderGroup(){\n-\t\t\n \t\treturn getOwner();\n \t}\n+\t\n \t/**\n \t * @param orderGroup the orderGroup to set\n \t */\n \tpublic void setOrderGroup(OrderGroup orderGroup){\n-\t\t\n \t\tsetOwner(orderGroup);\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTAyMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r461869021", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OrderGroup extends BaseCustomizableMetadata<OrderGroupAttribute> {\n          \n          \n            \n            public class OrderGroup extends BaseCustomizableData<OrderGroupAttribute> {\n          \n      \n    \n    \n  \n\nThe change from a subtype of OpenmrsData -> OpenmrsMetadata is causing the error.", "author": "ibacher", "createdAt": "2020-07-28T20:47:53Z", "path": "api/src/main/java/org/openmrs/OrderGroup.java", "diffHunk": "@@ -22,7 +22,7 @@\n  * \n  * @since 1.12\n  */\n-public class OrderGroup extends BaseChangeableOpenmrsData {\n+public class OrderGroup extends BaseCustomizableMetadata<OrderGroupAttribute> {", "originalCommit": "113e2334014befa3cddaef2f91a9bb14d07e1824", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2ODg5OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r462068898", "bodyText": "Oh thanks alot @ibacher  let me try to alter this. But just a quick one out of curiosity .  isn't OrderGroupAttribute supposed to OpenmrsMetaData ?", "author": "tendomart", "createdAt": "2020-07-29T06:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NTI1Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r462265252", "bodyText": "The attributes might represent metadata, but OrderGroups themselves represent a group of actual orders placed, so they clearly belong on the \"data\" side of things (OrderSets, which represent a template for an OrderGroup are definitely metadata).", "author": "ibacher", "createdAt": "2020-07-29T12:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NjgxMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r462266811", "bodyText": "Oh thanks for the clarification .It actually worked spontaneously and cleared me hours of scratching the skull.", "author": "tendomart", "createdAt": "2020-07-29T12:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2ODg3Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r462268872", "bodyText": "@tendomart if you look at the ticket description again, it is the fourth commit.", "author": "dkayiwa", "createdAt": "2020-07-29T12:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MTYzMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r462271632", "bodyText": "Ohh yeah... I think being i confused it with some other Base class .Thanks @dkayiwa", "author": "tendomart", "createdAt": "2020-07-29T12:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroup.java b/api/src/main/java/org/openmrs/OrderGroup.java\nindex 17316083f..4170afa85 100644\n--- a/api/src/main/java/org/openmrs/OrderGroup.java\n+++ b/api/src/main/java/org/openmrs/OrderGroup.java\n\n@@ -20,9 +20,9 @@ import org.openmrs.api.APIException;\n  * Not all orders in an encounter need to be grouped this way, only those that have a specific connection to each other \n  * (e.g. several orders that together make up a treatment protocol for some diagnosis could be grouped).\n  * \n- * @since 1.12\n+ * @since 2.4.0\n  */\n-public class OrderGroup extends BaseCustomizableMetadata<OrderGroupAttribute> {\n+public class OrderGroup extends BaseCustomizableData<OrderGroupAttribute> {\n \t\n \tpublic static final long serialVersionUID = 72232L;\n \t\n"}}, {"oid": "c548dc3409c2b42ba58989e07e09ead0e932df20", "url": "https://github.com/openmrs/openmrs-core/commit/c548dc3409c2b42ba58989e07e09ead0e932df20", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType", "committedDate": "2020-07-30T07:55:45Z", "type": "commit"}, {"oid": "5a7a0879e4d9fc53e6068ed7b455ef323c280d00", "url": "https://github.com/openmrs/openmrs-core/commit/5a7a0879e4d9fc53e6068ed7b455ef323c280d00", "message": "TRUNK-5410 Added hbm Mapping Files and added them to cfg file", "committedDate": "2020-07-30T07:55:45Z", "type": "commit"}, {"oid": "ccf2ec3dc8b2b11b5aa06c140f768ae2c8fd7306", "url": "https://github.com/openmrs/openmrs-core/commit/ccf2ec3dc8b2b11b5aa06c140f768ae2c8fd7306", "message": "TRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface", "committedDate": "2020-07-30T07:55:45Z", "type": "commit"}, {"oid": "b6e83a3f222fccd4ec85805866445f15cdd383c8", "url": "https://github.com/openmrs/openmrs-core/commit/b6e83a3f222fccd4ec85805866445f15cdd383c8", "message": "TRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes", "committedDate": "2020-07-30T07:55:45Z", "type": "commit"}, {"oid": "8d80ac34fa569ab7bea2b32d427d2aae7971b417", "url": "https://github.com/openmrs/openmrs-core/commit/8d80ac34fa569ab7bea2b32d427d2aae7971b417", "message": "TRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml", "committedDate": "2020-07-30T07:55:45Z", "type": "commit"}, {"oid": "2b395beaed33eabfb11be1c6c04fbb06ff89ec98", "url": "https://github.com/openmrs/openmrs-core/commit/2b395beaed33eabfb11be1c6c04fbb06ff89ec98", "message": "TRUNK-5410:Did more refactorings", "committedDate": "2020-07-30T07:55:45Z", "type": "commit"}, {"oid": "fa8a342d70d6b4d106171d386e23dfce4f8d9dd0", "url": "https://github.com/openmrs/openmrs-core/commit/fa8a342d70d6b4d106171d386e23dfce4f8d9dd0", "message": "TRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO", "committedDate": "2020-07-30T07:55:45Z", "type": "commit"}, {"oid": "e5f7ee5954790e68d819d8e086eb3741d09aaf7d", "url": "https://github.com/openmrs/openmrs-core/commit/e5f7ee5954790e68d819d8e086eb3741d09aaf7d", "message": "TRUNK-5410:Added more Tests to OrderServiceimpl", "committedDate": "2020-07-30T14:17:05Z", "type": "commit"}, {"oid": "fe2f488b483e55e251f1b9e15cf01341bcb827cd", "url": "https://github.com/openmrs/openmrs-core/commit/fe2f488b483e55e251f1b9e15cf01341bcb827cd", "message": "Added more Tests for new Changes to HibernateOrderDAO", "committedDate": "2020-08-03T00:11:00Z", "type": "commit"}, {"oid": "6b3a9651b8efa8311bbeb5ebdf3d4aad401b6368", "url": "https://github.com/openmrs/openmrs-core/commit/6b3a9651b8efa8311bbeb5ebdf3d4aad401b6368", "message": "TRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code", "committedDate": "2020-08-03T17:16:51Z", "type": "commit"}, {"oid": "c5fcda7982cf08b76625b0183a73990ba382e532", "url": "https://github.com/openmrs/openmrs-core/commit/c5fcda7982cf08b76625b0183a73990ba382e532", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code", "committedDate": "2020-08-03T18:41:35Z", "type": "commit"}, {"oid": "c5fcda7982cf08b76625b0183a73990ba382e532", "url": "https://github.com/openmrs/openmrs-core/commit/c5fcda7982cf08b76625b0183a73990ba382e532", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code", "committedDate": "2020-08-03T18:41:35Z", "type": "forcePushed"}, {"oid": "b1db15ceb511f1cb0f78863cc928567c93772855", "url": "https://github.com/openmrs/openmrs-core/commit/b1db15ceb511f1cb0f78863cc928567c93772855", "message": "Merge branch 'master' into TRUNK-5410", "committedDate": "2020-08-04T04:43:00Z", "type": "commit"}, {"oid": "90993cfeefa2101555ff8cbdf216152ad0a9a87f", "url": "https://github.com/openmrs/openmrs-core/commit/90993cfeefa2101555ff8cbdf216152ad0a9a87f", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code\n\nTRUNK-5410:Cleaned out unnecessary code and applied conventional formatting", "committedDate": "2020-08-04T07:13:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MjAxNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465072014", "bodyText": "@tendomart these kinds of imports are discouraged", "author": "gitcliff", "createdAt": "2020-08-04T14:00:56Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -9,16 +9,7 @@\n  */\n package org.openmrs.api;\n \n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.Encounter;\n-import org.openmrs.Order;\n-import org.openmrs.OrderFrequency;\n-import org.openmrs.OrderGroup;\n-import org.openmrs.OrderType;\n-import org.openmrs.Patient;\n-import org.openmrs.Provider;\n+import org.openmrs.*;", "originalCommit": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 86f09f113..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -9,7 +9,18 @@\n  */\n package org.openmrs.api;\n \n-import org.openmrs.*;\n+import org.openmrs.Provider;\n+import org.openmrs.OrderGroup;\n+import org.openmrs.OrderGroupAttribute;\n+import org.openmrs.OrderGroupAttributeType;\n+import org.openmrs.Order;\n+import org.openmrs.Patient;\n+import org.openmrs.CareSetting;\n+import org.openmrs.OrderType;\n+import org.openmrs.Concept;\n+import org.openmrs.ConceptClass;\n+import org.openmrs.Encounter;\n+import org.openmrs.OrderFrequency;\n import org.openmrs.annotation.Authorized;\n import org.openmrs.api.db.OrderDAO;\n import org.openmrs.parameter.OrderSearchCriteria;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MjgwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465072803", "bodyText": "the same here to", "author": "gitcliff", "createdAt": "2020-08-04T14:02:03Z", "path": "api/src/main/java/org/openmrs/api/db/OrderDAO.java", "diffHunk": "@@ -13,16 +13,7 @@\n import java.util.List;\n import java.util.Locale;\n \n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.Encounter;\n-import org.openmrs.Order;\n-import org.openmrs.OrderFrequency;\n-import org.openmrs.OrderGroup;\n-import org.openmrs.OrderType;\n-import org.openmrs.Patient;\n-import org.openmrs.User;\n+import org.openmrs.*;", "originalCommit": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/OrderDAO.java b/api/src/main/java/org/openmrs/api/db/OrderDAO.java\nindex 64a350ab1..e71b0bdde 100644\n--- a/api/src/main/java/org/openmrs/api/db/OrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/OrderDAO.java\n\n@@ -12,8 +12,18 @@ package org.openmrs.api.db;\n import java.util.Date;\n import java.util.List;\n import java.util.Locale;\n-\n-import org.openmrs.*;\n+import org.openmrs.CareSetting;\n+import org.openmrs.Order;\n+import org.openmrs.Encounter;\n+import org.openmrs.Concept;\n+import org.openmrs.ConceptClass;\n+import org.openmrs.OrderGroup;\n+import org.openmrs.OrderType;\n+import org.openmrs.OrderGroupAttribute;\n+import org.openmrs.OrderGroupAttributeType;\n+import org.openmrs.Patient;\n+import org.openmrs.User;\n+import org.openmrs.OrderFrequency;\n import org.openmrs.api.APIException;\n import org.openmrs.parameter.OrderSearchCriteria;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MzE3MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465073171", "bodyText": "here to", "author": "gitcliff", "createdAt": "2020-08-04T14:02:34Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -21,17 +21,7 @@\n import org.hibernate.criterion.Restrictions;\n import org.hibernate.criterion.SimpleExpression;\n import org.hibernate.transform.DistinctRootEntityResultTransformer;\n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.Encounter;\n-import org.openmrs.GlobalProperty;\n-import org.openmrs.Order;\n-import org.openmrs.OrderFrequency;\n-import org.openmrs.OrderGroup;\n-import org.openmrs.OrderType;\n-import org.openmrs.Patient;\n-import org.openmrs.User;\n+import org.openmrs.*;", "originalCommit": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex 723cbea26..97ab04f64 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -21,11 +21,23 @@ import org.hibernate.criterion.MatchMode;\n import org.hibernate.criterion.Restrictions;\n import org.hibernate.criterion.SimpleExpression;\n import org.hibernate.transform.DistinctRootEntityResultTransformer;\n-import org.openmrs.*;\n+import org.openmrs.Concept;\n+import org.openmrs.ConceptClass;\n+import org.openmrs.CareSetting;\n+import org.openmrs.Encounter;\n+import org.openmrs.GlobalProperty;\n+import org.openmrs.Order;\n+import org.openmrs.OrderFrequency;\n+import org.openmrs.OrderGroup;\n+import org.openmrs.OrderGroupAttribute;\n+import org.openmrs.OrderGroupAttributeType;\n+import org.openmrs.OrderType;\n+import org.openmrs.Patient;\n import org.openmrs.api.APIException;\n import org.openmrs.api.db.DAOException;\n import org.openmrs.api.db.OrderDAO;\n import org.openmrs.parameter.OrderSearchCriteria;\n+import org.openmrs.User;\n import org.openmrs.util.OpenmrsConstants;\n import org.openmrs.util.OpenmrsUtil;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NDAxNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r465074014", "bodyText": "@tendomart kindly maintain the imports", "author": "gitcliff", "createdAt": "2020-08-04T14:03:45Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -52,38 +52,14 @@\n import org.hibernate.cfg.Configuration;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.Allergy;\n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.ConceptDatatype;\n-import org.openmrs.ConceptDescription;\n-import org.openmrs.ConceptName;\n-import org.openmrs.Condition;\n-import org.openmrs.Diagnosis;\n-import org.openmrs.DosingInstructions;\n-import org.openmrs.Drug;\n-import org.openmrs.DrugOrder;\n-import org.openmrs.Encounter;\n-import org.openmrs.FreeTextDosingInstructions;\n-import org.openmrs.GlobalProperty;\n-import org.openmrs.Obs;\n-import org.openmrs.Order;\n+import org.openmrs.*;", "originalCommit": "408b3d7289c87254f1efc72388fe63ae7bfa7c8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 3ba879529..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -52,8 +52,37 @@ import org.hibernate.boot.registry.StandardServiceRegistryBuilder;\n import org.hibernate.cfg.Configuration;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.*;\n+\n import org.openmrs.Order.Action;\n+import org.openmrs.TestOrder;\n+import org.openmrs.Patient;\n+import org.openmrs.DosingInstructions;\n+import org.openmrs.SimpleDosingInstructions;\n+import org.openmrs.DrugOrder;\n+import org.openmrs.FreeTextDosingInstructions;\n+import org.openmrs.Drug;\n+import org.openmrs.ConceptDescription;\n+import org.openmrs.ConceptClass;\n+import org.openmrs.ConceptDatatype;\n+import org.openmrs.ConceptName;\n+import org.openmrs.GlobalProperty;\n+import org.openmrs.Order;\n+import org.openmrs.OrderType;\n+import org.openmrs.Allergy;\n+import org.openmrs.Condition;\n+import org.openmrs.Diagnosis;\n+import org.openmrs.Visit;\n+import org.openmrs.OrderFrequency;\n+import org.openmrs.OrderGroup;\n+import org.openmrs.OrderSet;\n+import org.openmrs.OrderGroupAttribute;\n+import org.openmrs.OrderGroupAttributeType;\n+import org.openmrs.Encounter;\n+import org.openmrs.Provider;\n+import org.openmrs.Concept;\n+import org.openmrs.CareSetting;\n+import org.openmrs.api.builder.DrugOrderBuilder;\n+import org.openmrs.Obs;\n import org.openmrs.api.builder.OrderBuilder;\n import org.openmrs.api.context.Context;\n import org.openmrs.api.db.hibernate.HibernateAdministrationDAO;\n"}}, {"oid": "b480e59804b852455f7308034c60d6f913046e6f", "url": "https://github.com/openmrs/openmrs-core/commit/b480e59804b852455f7308034c60d6f913046e6f", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code\n\nTRUNK-5410:Cleaned out unnecessary code and applied conventional formatting", "committedDate": "2020-08-05T09:34:12Z", "type": "commit"}, {"oid": "5de7d1e2225ec628e54e84118fd1dab01b91702d", "url": "https://github.com/openmrs/openmrs-core/commit/5de7d1e2225ec628e54e84118fd1dab01b91702d", "message": "TRUNK-5410: Altered Changeset Numbers in DatabaseUpdaterDatabaseIT", "committedDate": "2020-08-05T09:34:12Z", "type": "commit"}, {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "url": "https://github.com/openmrs/openmrs-core/commit/1dce083d6b131f4af3af666ac0cdad47ffa27140", "message": "TRUNK-5410 : Removed Import Wild cards from OrderService , OrderDAO ,HibernateOrderDAO and OrderServiceTest", "committedDate": "2020-08-05T09:34:12Z", "type": "commit"}, {"oid": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "url": "https://github.com/openmrs/openmrs-core/commit/1dce083d6b131f4af3af666ac0cdad47ffa27140", "message": "TRUNK-5410 : Removed Import Wild cards from OrderService , OrderDAO ,HibernateOrderDAO and OrderServiceTest", "committedDate": "2020-08-05T09:34:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NTU1Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466255557", "bodyText": "Was this class added in 2.4?", "author": "dkayiwa", "createdAt": "2020-08-06T09:05:10Z", "path": "api/src/main/java/org/openmrs/OrderGroup.java", "diffHunk": "@@ -20,9 +20,9 @@\n  * Not all orders in an encounter need to be grouped this way, only those that have a specific connection to each other \n  * (e.g. several orders that together make up a treatment protocol for some diagnosis could be grouped).\n  * \n- * @since 1.12\n+ * @since 2.4.0", "originalCommit": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2NzY2MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466267660", "bodyText": "Oops No !", "author": "tendomart", "createdAt": "2020-08-06T09:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0Njg3OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469546878", "bodyText": "And so?", "author": "dkayiwa", "createdAt": "2020-08-12T21:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NTU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f8c3204ba0d5e6c9609206aa662e60464aca9726", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroup.java b/api/src/main/java/org/openmrs/OrderGroup.java\nindex 4170afa85..0aa4aeb69 100644\n--- a/api/src/main/java/org/openmrs/OrderGroup.java\n+++ b/api/src/main/java/org/openmrs/OrderGroup.java\n\n@@ -20,7 +20,7 @@ import org.openmrs.api.APIException;\n  * Not all orders in an encounter need to be grouped this way, only those that have a specific connection to each other \n  * (e.g. several orders that together make up a treatment protocol for some diagnosis could be grouped).\n  * \n- * @since 2.4.0\n+ * @since 1.12\n  */\n public class OrderGroup extends BaseCustomizableData<OrderGroupAttribute> {\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NjQ2Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466256466", "bodyText": "When we use the @see annotation, we no longer need the @param.", "author": "dkayiwa", "createdAt": "2020-08-06T09:06:48Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,77 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String) ", "originalCommit": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex 428ceeeea..97ab04f64 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -733,17 +733,12 @@ public class HibernateOrderDAO implements OrderDAO {\n \t}\n \n \t/**\n-\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String) \n-\t * @param uuid\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n \t */\n \t@Override\n \tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n-\t\tif(uuid==null||uuid.isEmpty()){\n-\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n-\t\t}\n-\t\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createCriteria(OrderGroup.class).add(\n-\t\t\tRestrictions.eq(\"uuid\",uuid)).uniqueResult();\n-\t\t\t\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NzExNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466257115", "bodyText": "Can we document these params and also add the method descriptions?", "author": "dkayiwa", "createdAt": "2020-08-06T09:08:01Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +856,87 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t/**\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * @param id", "originalCommit": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex cc519e56d..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -856,86 +855,96 @@ public interface OrderService extends OpenmrsService {\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n \t/**\n+\t * Returns all order group attribute types\n+\t *\n \t * @return all {@link OrderGroupAttributeType}s\n-\t * @should return all orderGroup attribute types including retired ones\n+\t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n-\t * @param id\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the orderGroup attribute type with the given id\n-\t * @should return null if no orderGroup attribute type exists with the given id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * @param uuid\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n-\t * @should return the orderGroup attribute type with the given uuid\n-\t * @should return null if no orderGroup attribute type exists with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n \t */\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n \t\n \t/**\n-\t * Creates or updates the given orderGroup attribute type in the database\n+\t * Creates or updates the given order group attribute type in the database\n \t *\n-\t * @param orderGroupAttributeType\n-\t * @return the OrderGroupAttributeType created/saved\n-\t * @should create a new orderGroup attribute type\n-\t * @should edit an existing orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n \t */\n     @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n \tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retires the given orderGroup attribute type in the database\n+\t * Retires the given order group attribute type  in the database\n \t *\n-\t * @param orderGroupAttributeType\n-\t * @return the orderGroupAttribute retired\n-\t * @should retire a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n \n \t/**\n-\t * Restores a orderGroup attribute type that was previous retired in the database\n-\t * @param orderGroupAttributeType\n-\t * @return the OrderGroupAttributeType unretired\n-\t * @should unretire a retired orderGroup attribute type\n+\t * Restores an order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Completely removes a orderGroup attribute type from the database\n+\t * Completely removes an order group attribute type type from the database\n \t *\n-\t * @param orderGroupAttributeType\n-\t * @should completely remove a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n \t */\n     @Authorized(PrivilegeConstants.PURGE_ORDERS)\n \tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retrieves a OrderGroupAttributeType object based on the name provided\n+\t * Retrieves an order group attribute type object based on the name provided\n \t *\n-\t * @param orderGroupAttributeTypeName\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n \t * @return the {@link OrderGroupAttributeType} with the specified name\n-\t * @should return the orderGroup attribute type with the specified name\n-\t * @should return null if no orderGroup attribute type exists with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n \t */\n     @Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n     \n \t/**\n-\t * @param uuid\n+\t * Fetches a given order group attribute  using the provided uuid\n+\t * \n+\t * @param uuid The Uuid of the order group attribute to fetch\n \t * @return the {@link OrderGroupAttribute} with the given uuid\n \t * @since 2.4.0\n-\t * @should get the order set attribute with the given uuid\n-\t * @should return null if no order set attribute has the given uuid\n+\t * @should get the order group attribute with the given uuid\n+\t * @should return null if no order group attribute has the given uuid\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \t OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws APIException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1Nzg2Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466257862", "bodyText": "Do you have a unit test that corresponds to each of these @should annotations?", "author": "dkayiwa", "createdAt": "2020-08-06T09:09:30Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +856,87 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t/**\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * @param id\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the orderGroup attribute type with the given id\n+\t * @should return null if no orderGroup attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * @param uuid\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the orderGroup attribute type with the given uuid\n+\t * @should return null if no orderGroup attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given orderGroup attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType\n+\t * @return the OrderGroupAttributeType created/saved\n+\t * @should create a new orderGroup attribute type\n+\t * @should edit an existing orderGroup attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given orderGroup attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType\n+\t * @return the orderGroupAttribute retired\n+\t * @should retire a orderGroup attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a orderGroup attribute type that was previous retired in the database\n+\t * @param orderGroupAttributeType\n+\t * @return the OrderGroupAttributeType unretired\n+\t * @should unretire a retired orderGroup attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a orderGroup attribute type from the database\n+\t *\n+\t * @param orderGroupAttributeType\n+\t * @should completely remove a orderGroup attribute type\n+\t */\n+    @Authorized(PrivilegeConstants.PURGE_ORDERS)\n+\tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retrieves a OrderGroupAttributeType object based on the name provided\n+\t *\n+\t * @param orderGroupAttributeTypeName\n+\t * @return the {@link OrderGroupAttributeType} with the specified name\n+\t * @should return the orderGroup attribute type with the specified name", "originalCommit": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex cc519e56d..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -856,86 +855,96 @@ public interface OrderService extends OpenmrsService {\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n \t/**\n+\t * Returns all order group attribute types\n+\t *\n \t * @return all {@link OrderGroupAttributeType}s\n-\t * @should return all orderGroup attribute types including retired ones\n+\t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n-\t * @param id\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the orderGroup attribute type with the given id\n-\t * @should return null if no orderGroup attribute type exists with the given id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * @param uuid\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n-\t * @should return the orderGroup attribute type with the given uuid\n-\t * @should return null if no orderGroup attribute type exists with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n \t */\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n \t\n \t/**\n-\t * Creates or updates the given orderGroup attribute type in the database\n+\t * Creates or updates the given order group attribute type in the database\n \t *\n-\t * @param orderGroupAttributeType\n-\t * @return the OrderGroupAttributeType created/saved\n-\t * @should create a new orderGroup attribute type\n-\t * @should edit an existing orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n \t */\n     @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n \tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retires the given orderGroup attribute type in the database\n+\t * Retires the given order group attribute type  in the database\n \t *\n-\t * @param orderGroupAttributeType\n-\t * @return the orderGroupAttribute retired\n-\t * @should retire a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n \n \t/**\n-\t * Restores a orderGroup attribute type that was previous retired in the database\n-\t * @param orderGroupAttributeType\n-\t * @return the OrderGroupAttributeType unretired\n-\t * @should unretire a retired orderGroup attribute type\n+\t * Restores an order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Completely removes a orderGroup attribute type from the database\n+\t * Completely removes an order group attribute type type from the database\n \t *\n-\t * @param orderGroupAttributeType\n-\t * @should completely remove a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n \t */\n     @Authorized(PrivilegeConstants.PURGE_ORDERS)\n \tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retrieves a OrderGroupAttributeType object based on the name provided\n+\t * Retrieves an order group attribute type object based on the name provided\n \t *\n-\t * @param orderGroupAttributeTypeName\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n \t * @return the {@link OrderGroupAttributeType} with the specified name\n-\t * @should return the orderGroup attribute type with the specified name\n-\t * @should return null if no orderGroup attribute type exists with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n \t */\n     @Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n     \n \t/**\n-\t * @param uuid\n+\t * Fetches a given order group attribute  using the provided uuid\n+\t * \n+\t * @param uuid The Uuid of the order group attribute to fetch\n \t * @return the {@link OrderGroupAttribute} with the given uuid\n \t * @since 2.4.0\n-\t * @should get the order set attribute with the given uuid\n-\t * @should return null if no order set attribute has the given uuid\n+\t * @should get the order group attribute with the given uuid\n+\t * @should return null if no order group attribute has the given uuid\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \t OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws APIException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1ODQ1OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466258459", "bodyText": "We do not recommend using wildcard imports.", "author": "dkayiwa", "createdAt": "2020-08-06T09:10:30Z", "path": "api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java", "diffHunk": "@@ -11,20 +11,8 @@\n \n import org.apache.commons.lang3.time.DateUtils;\n import org.hibernate.proxy.HibernateProxy;\n-import org.openmrs.CareSetting;\n-import org.openmrs.Concept;\n-import org.openmrs.ConceptClass;\n-import org.openmrs.DrugOrder;\n-import org.openmrs.Encounter;\n-import org.openmrs.GlobalProperty;\n-import org.openmrs.Order;\n+import org.openmrs.*;", "originalCommit": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\nindex 55543abfe..b27ab18e4 100644\n--- a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\n\n@@ -11,8 +11,22 @@ package org.openmrs.api.impl;\n \n import org.apache.commons.lang3.time.DateUtils;\n import org.hibernate.proxy.HibernateProxy;\n-import org.openmrs.*;\n+import org.openmrs.CareSetting;\n+import org.openmrs.Concept;\n+import org.openmrs.ConceptClass;\n+import org.openmrs.Encounter;\n+import org.openmrs.DrugOrder;\n+import org.openmrs.Order;\n+import org.openmrs.OrderFrequency;\n+import org.openmrs.OrderGroup;\n+import org.openmrs.OrderType;\n+import org.openmrs.GlobalProperty;\n+import org.openmrs.Patient;\n+import org.openmrs.Provider;\n import org.openmrs.Order.FulfillerStatus;\n+import org.openmrs.OrderGroupAttribute;\n+import org.openmrs.OrderGroupAttributeType;\n+import org.openmrs.TestOrder;\n import org.openmrs.api.APIException;\n import org.openmrs.api.AmbiguousOrderException;\n import org.openmrs.api.CannotDeleteObjectInUseException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1OTEyMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466259122", "bodyText": "What are we using these TODO s for?", "author": "dkayiwa", "createdAt": "2020-08-06T09:11:41Z", "path": "api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java", "diffHunk": "@@ -1083,5 +1073,51 @@ public OrderGroup getOrderGroup(Integer orderGroupId) throws APIException {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException {\n \t\treturn dao.getOrderGroupsByEncounter(encounter);\n \t}\n-\t\n+\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException {\n+\t\treturn dao.getAllOrderGroupAttributeTypes();\n+\t}\n+//TODO", "originalCommit": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\nindex 55543abfe..b27ab18e4 100644\n--- a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\n\n@@ -1073,51 +1087,76 @@ public class OrderServiceImpl extends BaseOpenmrsService implements OrderService\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException {\n \t\treturn dao.getOrderGroupsByEncounter(encounter);\n \t}\n-\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypes()\n+\t */\n \t@Override\n-\tpublic List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException {\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException {\n \t\treturn dao.getAllOrderGroupAttributeTypes();\n \t}\n-//TODO\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeById()\n+\t */\n \t@Override\n-\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException {\n-//\t\tif(id.intValue()==)\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException {\n \t\treturn dao.getOrderGroupAttributeType(id);\n \t}\n-\t//TODO\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeByUuid()\n+\t */\n \t@Override\n \tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid)throws APIException {\n \t\treturn dao.getOrderGroupAttributeTypeByUuid(uuid);\n \t}\n-\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#saveOrderGroupAttributeType()\n+\t */\n \t@Override\n \tpublic OrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException{\n \t\treturn dao.saveOrderGroupAttributeType(orderGroupAttributeType);\n \t}\n \n+\t/**\n+\t * @see org.openmrs.api.OrderService#retireOrderGroupAttributeType()\n+\t */\n \t@Override\n \tpublic OrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType, String reason)throws APIException {\n-\t\treturn dao.saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\treturn Context.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t}\n \n+\t/**\n+\t * @see org.openmrs.api.OrderService#unretireOrderGroupAttributeType()\n+\t */\n \t@Override\n \tpublic OrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType)throws APIException {\n \t\treturn Context.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t}\n \n+\t/**\n+\t * @see org.openmrs.api.OrderService#purgeOrderGroupAttributeType()\n+\t */\n \t@Override\n \tpublic void purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException{\n-         dao.deleteOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tdao.deleteOrderGroupAttributeType(orderGroupAttributeType);\n \t}\n \n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeByName()\n+\t */\n \t@Override\n \tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName)throws APIException {\n \t\treturn dao.getOrderGroupAttributeTypeByName(orderGroupAttributeTypeName);\n \t}\n \n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeByUuid()\n+\t */\n \t@Override\n \tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)throws APIException {\n \t\treturn dao.getOrderGroupAttributeByUuid(uuid);\n \t}\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2MDM2Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466260363", "bodyText": "No wildcard imports.", "author": "dkayiwa", "createdAt": "2020-08-06T09:13:16Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -9,27 +9,25 @@\n  */\n package org.openmrs.api.db.hibernate;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.UUID;\n \n+import org.hibernate.internal.SessionFactoryImpl;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.Encounter;\n-import org.openmrs.Order;\n-import org.openmrs.OrderGroup;\n-import org.openmrs.Patient;\n+import org.openmrs.*;", "originalCommit": "1dce083d6b131f4af3af666ac0cdad47ffa27140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI3MDI0OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466270248", "bodyText": "Thanks .Do you know of a quick wildcard filter to quickly scan for all of them ?", "author": "tendomart", "createdAt": "2020-08-06T09:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2MDM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex 5554cfc58..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -9,25 +9,28 @@\n  */\n package org.openmrs.api.db.hibernate;\n \n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n-import java.util.UUID;\n \n-import org.hibernate.internal.SessionFactoryImpl;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.*;\n+import org.openmrs.Encounter;\n+import org.openmrs.Order;\n+import org.openmrs.OrderGroup;\n+import org.openmrs.OrderGroupAttributeType;\n+import org.openmrs.Patient;\n import org.openmrs.api.APIException;\n import org.openmrs.api.builder.OrderBuilder;\n import org.openmrs.api.context.Context;\n import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import static org.junit.jupiter.api.Assertions.*;\n-\n /**\n  * Tests the saving of orders as part of the OrderGroup\n  */\n"}}, {"oid": "c577585a486d502a948ca8ac0c0ee38da7b47d03", "url": "https://github.com/openmrs/openmrs-core/commit/c577585a486d502a948ca8ac0c0ee38da7b47d03", "message": "TRUNK-5410:Removed unneccsarry docs from HibernateOrderDao ,Added Javadocs to OrderService Methods,Removed wildcards from OrderServiceImpl.java and unnecessary TODO'S ,Documented param types and method descriptions", "committedDate": "2020-08-06T12:30:47Z", "type": "commit"}, {"oid": "4d54e2991a64ed8cf4239bf7e424e8264c05a3a1", "url": "https://github.com/openmrs/openmrs-core/commit/4d54e2991a64ed8cf4239bf7e424e8264c05a3a1", "message": "TRUNK-5410:Added unit tests to OrderServiceTest.java", "committedDate": "2020-08-06T17:16:08Z", "type": "commit"}, {"oid": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69", "url": "https://github.com/openmrs/openmrs-core/commit/2af5967d5d01e1c441c96c5023d7cafa36f6cc69", "message": "TRUNK-5410:Removed wildcard imports , improved method descriptions in OrderService , added more tests in OrderServiceTest and removed unnecessary code in other files", "committedDate": "2020-08-07T02:43:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjQ0Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466822446", "bodyText": "@tendomart do you need these commented out lines", "author": "gitcliff", "createdAt": "2020-08-07T05:04:16Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3790,6 +3800,29 @@ public void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOr\n \t\tassertNotNull(orderGroupAttributeType.getId());\n \t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n \t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database", "originalCommit": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 1652d2b7d..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3756,131 +3757,169 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tAPIException exception = assertThrows(APIException.class, () -> secondSavedOrderGroup.addOrder(newOrderWithInvalidPosition, secondSavedOrderGroup.getOrders().size() + 1));\n \t\tassertThat(exception.getMessage(), is(\"Cannot add a member which is out of range of the list\"));\n \t}\n+\n+\t/**\n+\t * @see OrderService#saveOrder(Order, OrderContext)\n+\t */\n+\t@Test\n+\tpublic void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n+\t\texecuteDataSet(ORDER_SET);\n+\n+\t\tEncounter encounter = encounterService.getEncounter(3);\n+\t\tOrderContext context = new OrderContext();\n+\n+\t\t// First we confirm that saving a Drug Order on it's own with missing required fields will fail validation\n+\n+\t\tDrugOrder drugOrder = new DrugOrderBuilder().withPatient(encounter.getPatient().getPatientId())\n+\t\t\t.withEncounter(encounter.getEncounterId()).withCareSetting(1).withOrderer(1)\n+\t\t\t.withOrderType(1).withDrug(2)\n+\t\t\t.withUrgency(Order.Urgency.ROUTINE).withDateActivated(new Date())\n+\t\t\t.build();\n+\n+\t\tException expectedValidationError = null;\n+\t\ttry {\n+\t\t\tContext.getOrderService().saveOrder(drugOrder, context);\n+\t\t} catch (Exception e) {\n+\t\t\texpectedValidationError = e;\n+\t\t}\n+\n+\t\tassertNotNull(expectedValidationError);\n+\t\tassertEquals(ValidationException.class, expectedValidationError.getClass());\n+\t\tassertTrue(expectedValidationError.getMessage().contains(\"Dose is required\"));\n+\n+\t\t// Next, add this to an Order Group and save it within that group, and it should also fail\n+\n+\t\tOrderSet orderSet = Context.getOrderSetService().getOrderSet(2000);\n+\t\tOrderGroup orderGroup = new OrderGroup();\n+\t\torderGroup.setOrderSet(orderSet);\n+\t\torderGroup.setPatient(encounter.getPatient());\n+\t\torderGroup.setEncounter(encounter);\n+\t\torderGroup.addOrder(drugOrder);\n+\t\tdrugOrder.setOrderGroup(orderGroup);\n+\n+\t\tException expectedGroupValidationError = null;\n+\t\ttry {\n+\t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n+\t\t} catch (Exception e) {\n+\t\t\texpectedGroupValidationError = e;\n+\t\t}\n+\n+\t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n+\t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n+\t}\n+\t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n-\t\t\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n-\n+\t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n-\t\n+\n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n-\t\t\t\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\t\t\tfinal String name =\"ECG\";\n-\t\t\t\t//Check for values in the database\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-                //edit existing values in the database\n-\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n-\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n-\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n-                //confirm new values are persisted\n-\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\t\n-\t\t\t}\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderService orderService = Context.getOrderService();\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-                assertTrue(orderGroupAttributeType.getRetired());\n-                assertNotNull(orderGroupAttributeType.getRetiredBy());\n-                assertNotNull(orderGroupAttributeType.getDateRetired());\n-                assertNotNull(orderGroupAttributeType.getRetireReason());\n-                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-                \n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n-\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t     OrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n-\t\t     assertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n-\t\t\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n-\t\t\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount - 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(\"cbf580ee-d7fb-11ea-87d0-0242ac130003\"));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(UUID2);\n+\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(\"86bdcc12-d18d-11ea-87d0-0242ac130003\");\n \t\torderGroupAttribute.getValueReference();\n-\t\tassertEquals(\"Test 1\",orderGroupAttribute.getValueReference());\n-\t\tassertEquals(1,orderGroupAttribute.getId());\n+\t\tassertEquals(\"Test 1\", orderGroupAttribute.getValueReference());\n+\t\tassertEquals(1, orderGroupAttribute.getId());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjUyMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466822523", "bodyText": "do you need these commented out lines", "author": "gitcliff", "createdAt": "2020-08-07T05:04:40Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3790,6 +3800,29 @@ public void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOr\n \t\tassertNotNull(orderGroupAttributeType.getId());\n \t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n \t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database\n+\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n+\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+                //confirm new values are persisted", "originalCommit": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMDYwNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466920604", "bodyText": "FYI i was cleaning out wildcards , if closely investigate the link i shared , order was not a priority though , honestly speaking it makes the imports look neat.\nThat's why you have probably seen some changes .About the documentation , i didn't mean the Javadocs rather the openmrs wiki.\nIf you think the inline comments are unnecessary you can suggest that on the Dev forum so we clean them out and, i personally think they ease the reviewiers task for long bodied methods .\nJust thinking out loud.", "author": "tendomart", "createdAt": "2020-08-07T09:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 1652d2b7d..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3756,131 +3757,169 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tAPIException exception = assertThrows(APIException.class, () -> secondSavedOrderGroup.addOrder(newOrderWithInvalidPosition, secondSavedOrderGroup.getOrders().size() + 1));\n \t\tassertThat(exception.getMessage(), is(\"Cannot add a member which is out of range of the list\"));\n \t}\n+\n+\t/**\n+\t * @see OrderService#saveOrder(Order, OrderContext)\n+\t */\n+\t@Test\n+\tpublic void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n+\t\texecuteDataSet(ORDER_SET);\n+\n+\t\tEncounter encounter = encounterService.getEncounter(3);\n+\t\tOrderContext context = new OrderContext();\n+\n+\t\t// First we confirm that saving a Drug Order on it's own with missing required fields will fail validation\n+\n+\t\tDrugOrder drugOrder = new DrugOrderBuilder().withPatient(encounter.getPatient().getPatientId())\n+\t\t\t.withEncounter(encounter.getEncounterId()).withCareSetting(1).withOrderer(1)\n+\t\t\t.withOrderType(1).withDrug(2)\n+\t\t\t.withUrgency(Order.Urgency.ROUTINE).withDateActivated(new Date())\n+\t\t\t.build();\n+\n+\t\tException expectedValidationError = null;\n+\t\ttry {\n+\t\t\tContext.getOrderService().saveOrder(drugOrder, context);\n+\t\t} catch (Exception e) {\n+\t\t\texpectedValidationError = e;\n+\t\t}\n+\n+\t\tassertNotNull(expectedValidationError);\n+\t\tassertEquals(ValidationException.class, expectedValidationError.getClass());\n+\t\tassertTrue(expectedValidationError.getMessage().contains(\"Dose is required\"));\n+\n+\t\t// Next, add this to an Order Group and save it within that group, and it should also fail\n+\n+\t\tOrderSet orderSet = Context.getOrderSetService().getOrderSet(2000);\n+\t\tOrderGroup orderGroup = new OrderGroup();\n+\t\torderGroup.setOrderSet(orderSet);\n+\t\torderGroup.setPatient(encounter.getPatient());\n+\t\torderGroup.setEncounter(encounter);\n+\t\torderGroup.addOrder(drugOrder);\n+\t\tdrugOrder.setOrderGroup(orderGroup);\n+\n+\t\tException expectedGroupValidationError = null;\n+\t\ttry {\n+\t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n+\t\t} catch (Exception e) {\n+\t\t\texpectedGroupValidationError = e;\n+\t\t}\n+\n+\t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n+\t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n+\t}\n+\t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n-\t\t\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n-\n+\t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n-\t\n+\n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n-\t\t\t\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\t\t\tfinal String name =\"ECG\";\n-\t\t\t\t//Check for values in the database\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-                //edit existing values in the database\n-\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n-\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n-\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n-                //confirm new values are persisted\n-\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\t\n-\t\t\t}\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderService orderService = Context.getOrderService();\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-                assertTrue(orderGroupAttributeType.getRetired());\n-                assertNotNull(orderGroupAttributeType.getRetiredBy());\n-                assertNotNull(orderGroupAttributeType.getDateRetired());\n-                assertNotNull(orderGroupAttributeType.getRetireReason());\n-                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-                \n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n-\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t     OrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n-\t\t     assertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n-\t\t\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n-\t\t\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n+\t\t\t\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount - 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(\"cbf580ee-d7fb-11ea-87d0-0242ac130003\"));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(UUID2);\n+\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(\"86bdcc12-d18d-11ea-87d0-0242ac130003\");\n \t\torderGroupAttribute.getValueReference();\n-\t\tassertEquals(\"Test 1\",orderGroupAttribute.getValueReference());\n-\t\tassertEquals(1,orderGroupAttribute.getId());\n+\t\tassertEquals(\"Test 1\", orderGroupAttribute.getValueReference());\n+\t\tassertEquals(1, orderGroupAttribute.getId());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjkwNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466822906", "bodyText": "@tendomart are these formatting changes in the imports needed ?", "author": "gitcliff", "createdAt": "2020-08-07T05:06:07Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -9,41 +9,6 @@\n  */\n package org.openmrs.api;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.empty;\n-import static org.hamcrest.Matchers.hasItems;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.openmrs.Order.Action.DISCONTINUE;\n-import static org.openmrs.Order.FulfillerStatus.COMPLETED;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.openmrs.test.OpenmrsMatchers.hasId;\n-import static org.openmrs.test.TestUtil.containsId;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import java.lang.reflect.Field;\n-import java.text.DateFormat;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.GregorianCalendar;\n-import java.util.HashSet;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Set;\n-", "originalCommit": "2af5967d5d01e1c441c96c5023d7cafa36f6cc69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4ODcwOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466888709", "bodyText": "@gitcliff have you had a look at this\nhttps://github.com/openmrs/openmrs-core/blob/master/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nBorrowed a leaf  here\nDo you suggest this is old so we can clean this out and change the documentation as well.What do you think ?", "author": "tendomart", "createdAt": "2020-08-07T08:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxMzkwOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466913908", "bodyText": "@tendomart i wouldn't suggest to change this documentation in this pr , if we are to change then you can create a separate ticket to address this .\nBut am kindly suggesting that we don't change the imports order except for the new imports being added\nyou can press ctrl + z after saving your changes in your IDE to revert these formats", "author": "gitcliff", "createdAt": "2020-08-07T08:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNTU1Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466925557", "bodyText": "You can look at the recommendations here , honestly speaking i though there was no problem with the import java.util.*; wild cards  for the java.utils package but it's not an exception either.\nbut the original code had that , hence the cleaning.\nLook at the recommendations at https://wiki.openmrs.org/display/docs/Java+Conventions", "author": "tendomart", "createdAt": "2020-08-07T09:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzMwMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466927301", "bodyText": "You can look at the recommendations here , honestly speaking i though there was no problem with the import java.util.*; wild cards  for the java.utils package but it's not an exception either.\nbut the original code had that , hence the cleaning.\nLook at the recommendations at https://wiki.openmrs.org/display/docs/Java+Conventions\nAbout the not so obvious code still refer to https://wiki.openmrs.org/display/docs/Java+Conventions for clarification.", "author": "tendomart", "createdAt": "2020-08-07T09:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0MDUxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r466940515", "bodyText": "thanks for your feedback..\nam not against the code cleaning and the removing of the wildcards imports but my worry is about the formats as you can see the org.hamcrest.Matchers and  org.junit.jupiter.api packages moved from the top to the bottom .though we can wait for what others think about.\nThanks .\ncc @dkayiwa @ibacher", "author": "gitcliff", "createdAt": "2020-08-07T09:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNzE0MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467037141", "bodyText": "Oh i see ,you mean static imports coming before non static imports ?", "author": "tendomart", "createdAt": "2020-08-07T13:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 1652d2b7d..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -9,6 +9,41 @@\n  */\n package org.openmrs.api;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasItems;\n+import static org.openmrs.Order.Action.DISCONTINUE;\n+import static org.openmrs.Order.FulfillerStatus.COMPLETED;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.openmrs.test.OpenmrsMatchers.hasId;\n+import static org.openmrs.test.TestUtil.containsId;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.reflect.Field;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.Locale;\n+import java.util.GregorianCalendar;\n+import java.util.LinkedHashSet;\n+\n import org.apache.commons.lang3.time.DateUtils;\n import org.hibernate.boot.Metadata;\n import org.hibernate.boot.MetadataSources;\n"}}, {"oid": "9746f39942709c1c6a09074a62fc185ac65d127a", "url": "https://github.com/openmrs/openmrs-core/commit/9746f39942709c1c6a09074a62fc185ac65d127a", "message": "TRUNK-5410:Re-ordered imports format in OrderServiceTest and HibernateOrderDAOTest", "committedDate": "2020-08-07T13:37:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5ODQ5MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467898490", "bodyText": "Could you be having any reason for these empty lines?", "author": "dkayiwa", "createdAt": "2020-08-10T13:21:45Z", "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n+\n+\tpublic Integer orderGroupAttributeId; \n+\n+\tpublic Integer getOrderGroupAttributeId() {\n+\t\treturn orderGroupAttributeId;\n+\t}\n+\tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n+\t\tthis.orderGroupAttributeId=orderGroupAttributeId;\n+\t}\n+\n+\t/**\n+\t * @return the orderGroup\n+\t */\n+\tpublic OrderGroup getOrderGroup(){\n+\t\t\n+\t\treturn getOwner();\n+\t}\n+\t/**\n+\t * @param orderGroup the orderGroup to set\n+\t */\n+\tpublic void setOrderGroup(OrderGroup orderGroup){\n+\t\t\n+\t\tsetOwner(orderGroup);\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.OpenmrsObject#getId()\n+\t */\n+\t@Override\n+\tpublic Integer getId() {\n+\t\t", "originalCommit": "9746f39942709c1c6a09074a62fc185ac65d127a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroupAttribute.java b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\nindex dc5201e11..cc7b4cd30 100644\n--- a/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n+++ b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n\n@@ -19,27 +19,27 @@ import org.openmrs.attribute.BaseAttribute;\n  */\n public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n \n-\tpublic Integer orderGroupAttributeId; \n+\tprivate Integer orderGroupAttributeId;\n \n \tpublic Integer getOrderGroupAttributeId() {\n \t\treturn orderGroupAttributeId;\n \t}\n+\t\n \tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n-\t\tthis.orderGroupAttributeId=orderGroupAttributeId;\n+\t\tthis.orderGroupAttributeId = orderGroupAttributeId;\n \t}\n \n \t/**\n \t * @return the orderGroup\n \t */\n \tpublic OrderGroup getOrderGroup(){\n-\t\t\n \t\treturn getOwner();\n \t}\n+\t\n \t/**\n \t * @param orderGroup the orderGroup to set\n \t */\n \tpublic void setOrderGroup(OrderGroup orderGroup){\n-\t\t\n \t\tsetOwner(orderGroup);\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5OTMxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467899315", "bodyText": "An empty line between the class and property declaration would be great.", "author": "dkayiwa", "createdAt": "2020-08-10T13:22:58Z", "path": "api/src/main/java/org/openmrs/OrderGroupAttributeType.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.AttributeType;\n+import org.openmrs.attribute.BaseAttributeType;\n+\n+import java.util.Date;\n+\n+public class OrderGroupAttributeType extends BaseAttributeType<OrderGroup> implements AttributeType<OrderGroup> {\n+\tprivate Integer orderGroupAttributeTypeId;", "originalCommit": "9746f39942709c1c6a09074a62fc185ac65d127a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3NTA1Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484375057", "bodyText": "Done", "author": "tendomart", "createdAt": "2020-09-07T11:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5OTMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroupAttributeType.java b/api/src/main/java/org/openmrs/OrderGroupAttributeType.java\nindex 2801b9436..27820656b 100644\n--- a/api/src/main/java/org/openmrs/OrderGroupAttributeType.java\n+++ b/api/src/main/java/org/openmrs/OrderGroupAttributeType.java\n\n@@ -12,10 +12,19 @@ package org.openmrs;\n import org.openmrs.attribute.AttributeType;\n import org.openmrs.attribute.BaseAttributeType;\n \n-import java.util.Date;\n-\n public class OrderGroupAttributeType extends BaseAttributeType<OrderGroup> implements AttributeType<OrderGroup> {\n+\t\n \tprivate Integer orderGroupAttributeTypeId;\n+\t\n+\tprivate Integer cycleNumber;\n+\t\n+\tprivate String category;\n+\t\n+\tprivate Integer numberOfCyclesInTheRegimen;\n+\t\n+\tprivate Integer lengthOfCyclesInTheRegimen;\n+\t\n+\tprivate String priorOrderGroup;\n \n \t/**\n \t * @see org.openmrs.OpenmrsObject#getId()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMTAwNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467901004", "bodyText": "Adding some spaces around variables in the if statement would be great.", "author": "dkayiwa", "createdAt": "2020-08-10T13:25:24Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid==null||uuid.isEmpty()){", "originalCommit": "9746f39942709c1c6a09074a62fc185ac65d127a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex f0d86f162..97ab04f64 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -737,9 +737,6 @@ public class HibernateOrderDAO implements OrderDAO {\n \t */\n \t@Override\n \tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n-\t\tif(uuid==null||uuid.isEmpty()){\n-\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n-\t\t}\n \treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n \t\t\t.setString(\"uuid\", uuid).uniqueResult();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMTY1NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r467901654", "bodyText": "Same as above", "author": "dkayiwa", "createdAt": "2020-08-10T13:26:27Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid==null||uuid.isEmpty()){\n+\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n+\t\t}\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getAllOrderGroupAttributeTypes()\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).list();\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeType(java.lang.Integer)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().get(OrderGroupAttributeType.class,id);\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeTypeByUuid(java.lang.String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws DAOException{\n+\t\tif(uuid==null||uuid.isEmpty()){", "originalCommit": "9746f39942709c1c6a09074a62fc185ac65d127a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwMzUzMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r468403531", "bodyText": "@dkayiwa  cleaned out the spaces.", "author": "tendomart", "createdAt": "2020-08-11T08:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjA5OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r468406098", "bodyText": "I merged the commits which were done on master into branch TRUNK-5410 on the local repo .", "author": "tendomart", "createdAt": "2020-08-11T08:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMTY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex f0d86f162..97ab04f64 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -737,9 +737,6 @@ public class HibernateOrderDAO implements OrderDAO {\n \t */\n \t@Override\n \tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n-\t\tif(uuid==null||uuid.isEmpty()){\n-\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n-\t\t}\n \treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n \t\t\t.setString(\"uuid\", uuid).uniqueResult();\n \t}\n"}}, {"oid": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "url": "https://github.com/openmrs/openmrs-core/commit/e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "message": "TRUNK-5410:Added appropriate spacing in OrderGroupAttribute , OrderGroupAttributeType and spaces around if-statement variables in HibernateOrderDAO", "committedDate": "2020-08-11T07:37:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NzI2Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469547266", "bodyText": "Did you intentionally make this public?", "author": "dkayiwa", "createdAt": "2020-08-12T21:07:02Z", "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n+\n+\tpublic Integer orderGroupAttributeId; ", "originalCommit": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNjA1Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r470416052", "bodyText": "No I think it was a  typo.", "author": "tendomart", "createdAt": "2020-08-14T05:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NzI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroupAttribute.java b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\nindex 381eb9363..cc7b4cd30 100644\n--- a/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n+++ b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n\n@@ -19,14 +19,14 @@ import org.openmrs.attribute.BaseAttribute;\n  */\n public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n \n-\tpublic Integer orderGroupAttributeId; \n+\tprivate Integer orderGroupAttributeId;\n \n \tpublic Integer getOrderGroupAttributeId() {\n \t\treturn orderGroupAttributeId;\n \t}\n \t\n \tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n-\t\tthis.orderGroupAttributeId=orderGroupAttributeId;\n+\t\tthis.orderGroupAttributeId = orderGroupAttributeId;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0Nzc3NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469547774", "bodyText": "Can you put space around the equal sign?", "author": "dkayiwa", "createdAt": "2020-08-12T21:08:05Z", "path": "api/src/main/java/org/openmrs/OrderGroupAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.openmrs.attribute.Attribute;\n+import org.openmrs.attribute.BaseAttribute;\n+\n+/**\n+ * A value for a user-defined {@link OrderGroupAttributeType} that is stored on a {@link OrderGroup}.\n+ * @see Attribute\n+ * @since 2.4.0\n+ */\n+public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n+\n+\tpublic Integer orderGroupAttributeId; \n+\n+\tpublic Integer getOrderGroupAttributeId() {\n+\t\treturn orderGroupAttributeId;\n+\t}\n+\t\n+\tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n+\t\tthis.orderGroupAttributeId=orderGroupAttributeId;", "originalCommit": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/OrderGroupAttribute.java b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\nindex 381eb9363..cc7b4cd30 100644\n--- a/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n+++ b/api/src/main/java/org/openmrs/OrderGroupAttribute.java\n\n@@ -19,14 +19,14 @@ import org.openmrs.attribute.BaseAttribute;\n  */\n public class OrderGroupAttribute extends BaseAttribute<OrderGroupAttributeType, OrderGroup> implements Attribute<OrderGroupAttributeType, OrderGroup> {\n \n-\tpublic Integer orderGroupAttributeId; \n+\tprivate Integer orderGroupAttributeId;\n \n \tpublic Integer getOrderGroupAttributeId() {\n \t\treturn orderGroupAttributeId;\n \t}\n \t\n \tpublic void setOrderGroupAttributeId(Integer orderGroupAttributeId) {\n-\t\tthis.orderGroupAttributeId=orderGroupAttributeId;\n+\t\tthis.orderGroupAttributeId = orderGroupAttributeId;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0ODM2Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469548367", "bodyText": "Can you use proper english for the description instead of? OrderGroupAttributeTypes", "author": "dkayiwa", "createdAt": "2020-08-12T21:09:20Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +854,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t\n+\t/**\n+\t * Return all OrderGroupAttributeTypes", "originalCommit": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 08fd094a4..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -854,96 +855,96 @@ public interface OrderService extends OpenmrsService {\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n-\t\n+\n \t/**\n-\t * Return all OrderGroupAttributeTypes\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n-\t * @should return all orderGroup attribute types including retired ones\n+\t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n-\t * Fetches OrderGroupAttributeType using provided Id\n+\t * Fetches order group attribute type using provided Id\n \t * \n-\t * @param id The Id of the OrderGroupAttributeType to fetch from the database\n+\t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the orderGroup attribute type with the using the provided id\n-\t * @should return null if no orderGroup attribute type exists with the given id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches OrderGroupAttributeType using provided Uuid \n+\t * Fetches  order group attribute type using provided Uuid \n \t * \n-\t * @param uuid The Uuid of the OrderGroupAttributeType to Fetch from the database\n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n-\t * @should return the orderGroup attribute type with the given uuid\n-\t * @should return null if no orderGroup attribute type exists with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n \t */\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n \t\n \t/**\n-\t * Creates or updates the given orderGroup attribute type in the database\n+\t * Creates or updates the given order group attribute type in the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to Save in the database\n-\t * @return the OrderGroupAttributeType created/saved\n-\t * @should create a new orderGroup attribute type\n-\t * @should edit an existing orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n \t */\n     @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n \tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retires the given OrderGroupAttributeType attribute type in the database\n+\t * Retires the given order group attribute type  in the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType oo retire\n-\t * @return the orderGroupAttribute retired\n-\t * @should retire a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n \n \t/**\n-\t * Restores a OrderGroupAttributeType that was previously retired in the database\n+\t * Restores an order group attribute type that was previously retired in the database\n \t * \n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to unretire\n-\t * @return the OrderGroupAttributeType unretired\n-\t * @should unretire a retired orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Completely removes a OrderGroupAttributeType type from the database\n+\t * Completely removes an order group attribute type type from the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to purge completely\n-\t * @should completely remove a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n \t */\n     @Authorized(PrivilegeConstants.PURGE_ORDERS)\n \tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retrieves a OrderGroupAttributeType object based on the name provided\n+\t * Retrieves an order group attribute type object based on the name provided\n \t *\n-\t * @param orderGroupAttributeTypeName The name of the OrderGroupAttributeType to fetch\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n \t * @return the {@link OrderGroupAttributeType} with the specified name\n-\t * @should return the orderGroup attribute type with the specified name\n-\t * @should return null if no orderGroup attribute type exists with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n \t */\n     @Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n     \n \t/**\n-\t * Fetches a given OrderGroupAttribute using the Provided Uuid\n+\t * Fetches a given order group attribute  using the provided uuid\n \t * \n-\t * @param uuid The Uuid of the OrderGroupAttribute to fetch\n+\t * @param uuid The Uuid of the order group attribute to fetch\n \t * @return the {@link OrderGroupAttribute} with the given uuid\n \t * @since 2.4.0\n-\t * @should get the order set attribute with the given uuid\n-\t * @should return null if no order Group attribute has the given uuid\n+\t * @should get the order group attribute with the given uuid\n+\t * @should return null if no order group attribute has the given uuid\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \t OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws APIException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0ODYwOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469548608", "bodyText": "Same for orderGroup", "author": "dkayiwa", "createdAt": "2020-08-12T21:09:53Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +854,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t\n+\t/**\n+\t * Return all OrderGroupAttributeTypes\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones", "originalCommit": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 08fd094a4..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -854,96 +855,96 @@ public interface OrderService extends OpenmrsService {\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n-\t\n+\n \t/**\n-\t * Return all OrderGroupAttributeTypes\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n-\t * @should return all orderGroup attribute types including retired ones\n+\t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n-\t * Fetches OrderGroupAttributeType using provided Id\n+\t * Fetches order group attribute type using provided Id\n \t * \n-\t * @param id The Id of the OrderGroupAttributeType to fetch from the database\n+\t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the orderGroup attribute type with the using the provided id\n-\t * @should return null if no orderGroup attribute type exists with the given id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches OrderGroupAttributeType using provided Uuid \n+\t * Fetches  order group attribute type using provided Uuid \n \t * \n-\t * @param uuid The Uuid of the OrderGroupAttributeType to Fetch from the database\n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n-\t * @should return the orderGroup attribute type with the given uuid\n-\t * @should return null if no orderGroup attribute type exists with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n \t */\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n \t\n \t/**\n-\t * Creates or updates the given orderGroup attribute type in the database\n+\t * Creates or updates the given order group attribute type in the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to Save in the database\n-\t * @return the OrderGroupAttributeType created/saved\n-\t * @should create a new orderGroup attribute type\n-\t * @should edit an existing orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n \t */\n     @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n \tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retires the given OrderGroupAttributeType attribute type in the database\n+\t * Retires the given order group attribute type  in the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType oo retire\n-\t * @return the orderGroupAttribute retired\n-\t * @should retire a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n \n \t/**\n-\t * Restores a OrderGroupAttributeType that was previously retired in the database\n+\t * Restores an order group attribute type that was previously retired in the database\n \t * \n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to unretire\n-\t * @return the OrderGroupAttributeType unretired\n-\t * @should unretire a retired orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Completely removes a OrderGroupAttributeType type from the database\n+\t * Completely removes an order group attribute type type from the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to purge completely\n-\t * @should completely remove a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n \t */\n     @Authorized(PrivilegeConstants.PURGE_ORDERS)\n \tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retrieves a OrderGroupAttributeType object based on the name provided\n+\t * Retrieves an order group attribute type object based on the name provided\n \t *\n-\t * @param orderGroupAttributeTypeName The name of the OrderGroupAttributeType to fetch\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n \t * @return the {@link OrderGroupAttributeType} with the specified name\n-\t * @should return the orderGroup attribute type with the specified name\n-\t * @should return null if no orderGroup attribute type exists with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n \t */\n     @Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n     \n \t/**\n-\t * Fetches a given OrderGroupAttribute using the Provided Uuid\n+\t * Fetches a given order group attribute  using the provided uuid\n \t * \n-\t * @param uuid The Uuid of the OrderGroupAttribute to fetch\n+\t * @param uuid The Uuid of the order group attribute to fetch\n \t * @return the {@link OrderGroupAttribute} with the given uuid\n \t * @since 2.4.0\n-\t * @should get the order set attribute with the given uuid\n-\t * @should return null if no order Group attribute has the given uuid\n+\t * @should get the order group attribute with the given uuid\n+\t * @should return null if no order group attribute has the given uuid\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \t OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws APIException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0ODg2MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469548860", "bodyText": "Same as above. OrderGroupAttributeType", "author": "dkayiwa", "createdAt": "2020-08-12T21:10:23Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +854,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t\n+\t/**\n+\t * Return all OrderGroupAttributeTypes\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches OrderGroupAttributeType using provided Id", "originalCommit": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 08fd094a4..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -854,96 +855,96 @@ public interface OrderService extends OpenmrsService {\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n-\t\n+\n \t/**\n-\t * Return all OrderGroupAttributeTypes\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n-\t * @should return all orderGroup attribute types including retired ones\n+\t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n-\t * Fetches OrderGroupAttributeType using provided Id\n+\t * Fetches order group attribute type using provided Id\n \t * \n-\t * @param id The Id of the OrderGroupAttributeType to fetch from the database\n+\t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the orderGroup attribute type with the using the provided id\n-\t * @should return null if no orderGroup attribute type exists with the given id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches OrderGroupAttributeType using provided Uuid \n+\t * Fetches  order group attribute type using provided Uuid \n \t * \n-\t * @param uuid The Uuid of the OrderGroupAttributeType to Fetch from the database\n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n-\t * @should return the orderGroup attribute type with the given uuid\n-\t * @should return null if no orderGroup attribute type exists with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n \t */\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n \t\n \t/**\n-\t * Creates or updates the given orderGroup attribute type in the database\n+\t * Creates or updates the given order group attribute type in the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to Save in the database\n-\t * @return the OrderGroupAttributeType created/saved\n-\t * @should create a new orderGroup attribute type\n-\t * @should edit an existing orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n \t */\n     @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n \tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retires the given OrderGroupAttributeType attribute type in the database\n+\t * Retires the given order group attribute type  in the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType oo retire\n-\t * @return the orderGroupAttribute retired\n-\t * @should retire a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n \n \t/**\n-\t * Restores a OrderGroupAttributeType that was previously retired in the database\n+\t * Restores an order group attribute type that was previously retired in the database\n \t * \n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to unretire\n-\t * @return the OrderGroupAttributeType unretired\n-\t * @should unretire a retired orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Completely removes a OrderGroupAttributeType type from the database\n+\t * Completely removes an order group attribute type type from the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to purge completely\n-\t * @should completely remove a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n \t */\n     @Authorized(PrivilegeConstants.PURGE_ORDERS)\n \tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retrieves a OrderGroupAttributeType object based on the name provided\n+\t * Retrieves an order group attribute type object based on the name provided\n \t *\n-\t * @param orderGroupAttributeTypeName The name of the OrderGroupAttributeType to fetch\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n \t * @return the {@link OrderGroupAttributeType} with the specified name\n-\t * @should return the orderGroup attribute type with the specified name\n-\t * @should return null if no orderGroup attribute type exists with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n \t */\n     @Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n     \n \t/**\n-\t * Fetches a given OrderGroupAttribute using the Provided Uuid\n+\t * Fetches a given order group attribute  using the provided uuid\n \t * \n-\t * @param uuid The Uuid of the OrderGroupAttribute to fetch\n+\t * @param uuid The Uuid of the order group attribute to fetch\n \t * @return the {@link OrderGroupAttribute} with the given uuid\n \t * @since 2.4.0\n-\t * @should get the order set attribute with the given uuid\n-\t * @should return null if no order Group attribute has the given uuid\n+\t * @should get the order group attribute with the given uuid\n+\t * @should return null if no order group attribute has the given uuid\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \t OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws APIException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0OTE2NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r469549164", "bodyText": "Same as above in all these.", "author": "dkayiwa", "createdAt": "2020-08-12T21:11:01Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +854,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\t\n+\t/**\n+\t * Return all OrderGroupAttributeTypes\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all orderGroup attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches OrderGroupAttributeType using provided Id\n+\t * \n+\t * @param id The Id of the OrderGroupAttributeType to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id", "originalCommit": "e88eb34d5eb6a6447a3c2bc0225ad53ae2a42f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 08fd094a4..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -854,96 +855,96 @@ public interface OrderService extends OpenmrsService {\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n-\t\n+\n \t/**\n-\t * Return all OrderGroupAttributeTypes\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n-\t * @should return all orderGroup attribute types including retired ones\n+\t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n-\t * Fetches OrderGroupAttributeType using provided Id\n+\t * Fetches order group attribute type using provided Id\n \t * \n-\t * @param id The Id of the OrderGroupAttributeType to fetch from the database\n+\t * @param id The Id of the order group attribute type to fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given internal id\n-\t * @should return the orderGroup attribute type with the using the provided id\n-\t * @should return null if no orderGroup attribute type exists with the given id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\tOrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws APIException;\n \n \t/**\n-\t * Fetches OrderGroupAttributeType using provided Uuid \n+\t * Fetches  order group attribute type using provided Uuid \n \t * \n-\t * @param uuid The Uuid of the OrderGroupAttributeType to Fetch from the database\n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n \t * @return the {@link OrderGroupAttributeType} with the given uuid\n-\t * @should return the orderGroup attribute type with the given uuid\n-\t * @should return null if no orderGroup attribute type exists with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n \t */\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n \t\n \t/**\n-\t * Creates or updates the given orderGroup attribute type in the database\n+\t * Creates or updates the given order group attribute type in the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to Save in the database\n-\t * @return the OrderGroupAttributeType created/saved\n-\t * @should create a new orderGroup attribute type\n-\t * @should edit an existing orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n \t */\n     @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n \tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retires the given OrderGroupAttributeType attribute type in the database\n+\t * Retires the given order group attribute type  in the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType oo retire\n-\t * @return the orderGroupAttribute retired\n-\t * @should retire a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n \n \t/**\n-\t * Restores a OrderGroupAttributeType that was previously retired in the database\n+\t * Restores an order group attribute type that was previously retired in the database\n \t * \n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to unretire\n-\t * @return the OrderGroupAttributeType unretired\n-\t * @should unretire a retired orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n \tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Completely removes a OrderGroupAttributeType type from the database\n+\t * Completely removes an order group attribute type type from the database\n \t *\n-\t * @param orderGroupAttributeType The OrderGroupAttributeType to purge completely\n-\t * @should completely remove a orderGroup attribute type\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n \t */\n     @Authorized(PrivilegeConstants.PURGE_ORDERS)\n \tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n \n \t/**\n-\t * Retrieves a OrderGroupAttributeType object based on the name provided\n+\t * Retrieves an order group attribute type object based on the name provided\n \t *\n-\t * @param orderGroupAttributeTypeName The name of the OrderGroupAttributeType to fetch\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n \t * @return the {@link OrderGroupAttributeType} with the specified name\n-\t * @should return the orderGroup attribute type with the specified name\n-\t * @should return null if no orderGroup attribute type exists with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n \t */\n     @Authorized(PrivilegeConstants.GET_ORDERS)\n \tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n     \n \t/**\n-\t * Fetches a given OrderGroupAttribute using the Provided Uuid\n+\t * Fetches a given order group attribute  using the provided uuid\n \t * \n-\t * @param uuid The Uuid of the OrderGroupAttribute to fetch\n+\t * @param uuid The Uuid of the order group attribute to fetch\n \t * @return the {@link OrderGroupAttribute} with the given uuid\n \t * @since 2.4.0\n-\t * @should get the order set attribute with the given uuid\n-\t * @should return null if no order Group attribute has the given uuid\n+\t * @should get the order group attribute with the given uuid\n+\t * @should return null if no order group attribute has the given uuid\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \t OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws APIException;\n"}}, {"oid": "e84064ccddfab38a6b4864d82088d9f667faf567", "url": "https://github.com/openmrs/openmrs-core/commit/e84064ccddfab38a6b4864d82088d9f667faf567", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType", "committedDate": "2020-08-18T08:39:25Z", "type": "commit"}, {"oid": "c3adaa6604f0e9130e680d37e5ae4c755b1f1c1f", "url": "https://github.com/openmrs/openmrs-core/commit/c3adaa6604f0e9130e680d37e5ae4c755b1f1c1f", "message": "TRUNK-5410 Added hbm Mapping Files and added them to cfg file", "committedDate": "2020-08-18T08:39:25Z", "type": "commit"}, {"oid": "7cd9d0f5d353d08a6ae052dc566931c1ac8289d4", "url": "https://github.com/openmrs/openmrs-core/commit/7cd9d0f5d353d08a6ae052dc566931c1ac8289d4", "message": "TRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface", "committedDate": "2020-08-18T08:39:25Z", "type": "commit"}, {"oid": "08cbf1c54a47264824446ccdbe1d65ca7f310669", "url": "https://github.com/openmrs/openmrs-core/commit/08cbf1c54a47264824446ccdbe1d65ca7f310669", "message": "TRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes", "committedDate": "2020-08-18T08:39:25Z", "type": "commit"}, {"oid": "3add9c9a487b278a2acd0e4f99285f781fa43b03", "url": "https://github.com/openmrs/openmrs-core/commit/3add9c9a487b278a2acd0e4f99285f781fa43b03", "message": "TRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml", "committedDate": "2020-08-18T08:39:25Z", "type": "commit"}, {"oid": "0c7c6b4052b68395a1fc537dad7b6c81e80c1aa1", "url": "https://github.com/openmrs/openmrs-core/commit/0c7c6b4052b68395a1fc537dad7b6c81e80c1aa1", "message": "TRUNK-5410:Did more refactorings", "committedDate": "2020-08-18T08:39:25Z", "type": "commit"}, {"oid": "8934baa0a1ea02e2848884ef2f069ea5f4049734", "url": "https://github.com/openmrs/openmrs-core/commit/8934baa0a1ea02e2848884ef2f069ea5f4049734", "message": "TRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO", "committedDate": "2020-08-18T10:34:58Z", "type": "commit"}, {"oid": "26bc8cb4ddbfe19b1e0728bd305adfcac8b88d89", "url": "https://github.com/openmrs/openmrs-core/commit/26bc8cb4ddbfe19b1e0728bd305adfcac8b88d89", "message": "TRUNK-5410:Added more Tests to OrderServiceimpl", "committedDate": "2020-08-18T10:35:00Z", "type": "commit"}, {"oid": "9697061e6b6f32be4453bd1f8c439c7dadb39e63", "url": "https://github.com/openmrs/openmrs-core/commit/9697061e6b6f32be4453bd1f8c439c7dadb39e63", "message": "Added more Tests for new Changes to HibernateOrderDAO", "committedDate": "2020-08-18T10:36:19Z", "type": "commit"}, {"oid": "5e8d170a30b52711422929ad578c4830f6d133eb", "url": "https://github.com/openmrs/openmrs-core/commit/5e8d170a30b52711422929ad578c4830f6d133eb", "message": "TRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code", "committedDate": "2020-08-18T10:36:44Z", "type": "commit"}, {"oid": "4c3c09e57bff9c26f48e6df43112fbff611fe583", "url": "https://github.com/openmrs/openmrs-core/commit/4c3c09e57bff9c26f48e6df43112fbff611fe583", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code", "committedDate": "2020-08-18T10:37:15Z", "type": "commit"}, {"oid": "32fbfdcf744656371b9fd4a411cbf2eea85e2837", "url": "https://github.com/openmrs/openmrs-core/commit/32fbfdcf744656371b9fd4a411cbf2eea85e2837", "message": "TRUNK-5410 Created OrderGroupAttribute,OrderGroupAttributeType\n\nTRUNK-5410 Added hbm Mapping Files and added them to cfg file\n\nTRUNK-5410 Added  OrderGroupAttributeType OrderGroupAttribute methods to  OrderDao Interface\n\nTRUNK-5410: Altered OrderService ,HibrnateOrderDao and OrderGroup.hbm.xml to accomodate Previous Changes\n\nTRUNK-5410: Did some changes on OrderServiceImpl , OrderGroup.hbm.xml\n\nTRUNK-5410:Did more refactorings\n\nTRUNK-5410 : Added Unit Tests to HibernateOrderDAOTest for some new methods in HibernateOrderDAO\n\nTRUNK-5410:Added more Tests to OrderServiceimpl\n\nAdded more Tests for new Changes to HibernateOrderDAO\n\nTRUNK-5410: Added Unit Tests for new methods to HibernateOrderDAO and OrderServiceImpl , cleaned out unnecessary code\n\nTRUNK-5410:Cleaned out unnecessary code and applied conventional formatting", "committedDate": "2020-08-18T10:38:27Z", "type": "commit"}, {"oid": "a0061f3190e0e08ed890b52d4d74eebae610cf4b", "url": "https://github.com/openmrs/openmrs-core/commit/a0061f3190e0e08ed890b52d4d74eebae610cf4b", "message": "TRUNK-5410: Altered Changeset Numbers in DatabaseUpdaterDatabaseIT", "committedDate": "2020-08-18T10:38:28Z", "type": "commit"}, {"oid": "cc0c16984779c96b71ae0237899d8d65717f6416", "url": "https://github.com/openmrs/openmrs-core/commit/cc0c16984779c96b71ae0237899d8d65717f6416", "message": "TRUNK-5410 : Removed Import Wild cards from OrderService , OrderDAO ,HibernateOrderDAO and OrderServiceTest", "committedDate": "2020-08-18T10:38:41Z", "type": "commit"}, {"oid": "1af6244ca3683e462fa83209b97745afdabc9d5a", "url": "https://github.com/openmrs/openmrs-core/commit/1af6244ca3683e462fa83209b97745afdabc9d5a", "message": "TRUNK-5410:Removed unneccsarry docs from HibernateOrderDao ,Added Javadocs to OrderService Methods,Removed wildcards from OrderServiceImpl.java and unnecessary TODO'S ,Documented param types and method descriptions", "committedDate": "2020-08-18T10:38:42Z", "type": "commit"}, {"oid": "0140aa5aabc889a1c99e4ef6c0bf1b3e32b3ed58", "url": "https://github.com/openmrs/openmrs-core/commit/0140aa5aabc889a1c99e4ef6c0bf1b3e32b3ed58", "message": "TRUNK-5410:Added unit tests to OrderServiceTest.java", "committedDate": "2020-08-18T10:39:20Z", "type": "commit"}, {"oid": "2a68bedbab045df6535d9f53d91bc2b028f91726", "url": "https://github.com/openmrs/openmrs-core/commit/2a68bedbab045df6535d9f53d91bc2b028f91726", "message": "TRUNK-5410:Re-ordered imports format in OrderServiceTest and HibernateOrderDAOTest", "committedDate": "2020-08-18T10:39:51Z", "type": "commit"}, {"oid": "d8e649b34ae2cc0835c0d4e28403c2e688f74d06", "url": "https://github.com/openmrs/openmrs-core/commit/d8e649b34ae2cc0835c0d4e28403c2e688f74d06", "message": "TRUNK-5410:Added appropriate spacing in OrderGroupAttribute , OrderGroupAttributeType and spaces around if-statement variables in HibernateOrderDAO", "committedDate": "2020-08-18T10:39:51Z", "type": "commit"}, {"oid": "1edee5e443cc27a9ec83ef7f0646e11de03f2564", "url": "https://github.com/openmrs/openmrs-core/commit/1edee5e443cc27a9ec83ef7f0646e11de03f2564", "message": "TRUNK-5410 : Altered Javadocs decriptions in OrderService , and added spaces around expressions in OrderGroupAttribute", "committedDate": "2020-08-18T10:39:51Z", "type": "commit"}, {"oid": "3b25c4c652aa0e0f5e9d695416368b4cf4fdd874", "url": "https://github.com/openmrs/openmrs-core/commit/3b25c4c652aa0e0f5e9d695416368b4cf4fdd874", "message": "TRUNK-5410:Fixing merge conflicts", "committedDate": "2020-08-19T12:05:14Z", "type": "commit"}, {"oid": "7774dac39912692f3cf305bb660f5a13c12c62bb", "url": "https://github.com/openmrs/openmrs-core/commit/7774dac39912692f3cf305bb660f5a13c12c62bb", "message": "TRUNK-5410:Fixing more Conflicting Changes", "committedDate": "2020-08-20T13:48:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTM1Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474289357", "bodyText": "I would remove these checks for the null or empty parameter to throw an exception.", "author": "dkayiwa", "createdAt": "2020-08-20T21:43:28Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){", "originalCommit": "7774dac39912692f3cf305bb660f5a13c12c62bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU4NjYyMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474586622", "bodyText": "@dkayiwa  i found that removing the checks actually fails the test , for \"throwing the Exception\". So that necessary means no need for testing wether the Exception is thrown.", "author": "tendomart", "createdAt": "2020-08-21T09:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5MTU4Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474591583", "bodyText": "If it is a new test that you wrote, then you can remove it too. If we are to throw exceptions for every api parameter, and also have a corresponding test, we shall end up with too much code to maintain that has nothing to do with the real business logic. Have i convinced you enough? :)", "author": "dkayiwa", "createdAt": "2020-08-21T09:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5OTUyMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474599522", "bodyText": "and i don't think surrounding it with a try-catch will be a good idea.", "author": "tendomart", "createdAt": "2020-08-21T09:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMjQ2Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474602466", "bodyText": "If we were to sorround each and every method argument in our api with try and catch, can you imagine how much more code we would have to maintain?", "author": "dkayiwa", "createdAt": "2020-08-21T10:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwNDcxNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474604717", "bodyText": "If it is a new test that you wrote, then you can remove it too. If we are to throw exceptions for every api parameter, and also have a corresponding test, we shall end up with too much code to maintain that has nothing to do with the real business logic. Have i convinced you enough? :)\n\nha ha true, yes. There is gravity in the explanation.", "author": "tendomart", "createdAt": "2020-08-21T10:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwNjI5Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474606292", "bodyText": "About the other feature not  implemented  , are they  \"associate cycle number, the total number of cycles in the regimen, and the length of the regimen cycles.\" ?", "author": "tendomart", "createdAt": "2020-08-21T10:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex f4bfb9bd6..97ab04f64 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -737,9 +737,6 @@ public class HibernateOrderDAO implements OrderDAO {\n \t */\n \t@Override\n \tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n-\t\tif(uuid == null || uuid.isEmpty()){\n-\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n-\t\t}\n \treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n \t\t\t.setString(\"uuid\", uuid).uniqueResult();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTQ5MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474289491", "bodyText": "I would remove this too.", "author": "dkayiwa", "createdAt": "2020-08-20T21:43:50Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){\n+\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n+\t\t}\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getAllOrderGroupAttributeTypes()\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).list();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeType(java.lang.Integer)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().get(OrderGroupAttributeType.class,id);\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeTypeByUuid(java.lang.String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){", "originalCommit": "7774dac39912692f3cf305bb660f5a13c12c62bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex f4bfb9bd6..97ab04f64 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -737,9 +737,6 @@ public class HibernateOrderDAO implements OrderDAO {\n \t */\n \t@Override\n \tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n-\t\tif(uuid == null || uuid.isEmpty()){\n-\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n-\t\t}\n \treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n \t\t\t.setString(\"uuid\", uuid).uniqueResult();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTYwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r474289603", "bodyText": "I would remove this too.", "author": "dkayiwa", "createdAt": "2020-08-20T21:44:05Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,73 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){\n+\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n+\t\t}\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getAllOrderGroupAttributeTypes()\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).list();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeType(java.lang.Integer)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().get(OrderGroupAttributeType.class,id);\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeTypeByUuid(java.lang.String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws DAOException{\n+\t\tif(uuid == null || uuid.isEmpty()){\n+\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n+\t\t}\n+\t\treturn (OrderGroupAttributeType) sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).add(\n+\t\t\tRestrictions.eq(\"uuid\",uuid)).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#saveOrderGroupAttributeType(org.openmrs.OrderGroupAttributeType)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType)throws DAOException {\n+\t\tsessionFactory.getCurrentSession().saveOrUpdate(orderGroupAttributeType);\n+\t\treturn orderGroupAttributeType;\n+\t}\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#deleteOrderGroupAttributeType(org.openmrs.OrderGroupAttributeType)\n+\t */\n+\t@Override\n+\tpublic void deleteOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws DAOException{\n+\t\tif(orderGroupAttributeType == null){", "originalCommit": "7774dac39912692f3cf305bb660f5a13c12c62bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex f4bfb9bd6..97ab04f64 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -737,9 +737,6 @@ public class HibernateOrderDAO implements OrderDAO {\n \t */\n \t@Override\n \tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n-\t\tif(uuid == null || uuid.isEmpty()){\n-\t\t\tthrow  new APIException(\"Uuid Cannot be Empty or null\");\n-\t\t}\n \treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n \t\t\t.setString(\"uuid\", uuid).uniqueResult();\n \t}\n"}}, {"oid": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "url": "https://github.com/openmrs/openmrs-core/commit/5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "message": "TRUNK-5410:Removed unnecessary checks for  the null or empty parameters from some HibernateOrderDAO methods", "committedDate": "2020-08-21T12:05:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzAzOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137039", "bodyText": "Would be great to leave a line in between.", "author": "dkayiwa", "createdAt": "2020-08-22T20:48:34Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -41,7 +43,8 @@\n \tprivate static final String ORDER_SET = \"org/openmrs/api/include/OrderSetServiceTest-general.xml\";\n \t\n \tprivate static final String ORDER_GROUP = \"org/openmrs/api/include/OrderServiceTest-createOrderGroup.xml\";\n-\n+     \n+\tprivate static final String  UUID = \"9cf1b9de-d18e-11ea-87d0-0242ac130003\";", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM5MDM1MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484390351", "bodyText": "This was resolved.", "author": "tendomart", "createdAt": "2020-09-07T12:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex 61d70b033..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -45,6 +44,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \tprivate static final String ORDER_GROUP = \"org/openmrs/api/include/OrderServiceTest-createOrderGroup.xml\";\n      \n \tprivate static final String  UUID = \"9cf1b9de-d18e-11ea-87d0-0242ac130003\";\n+\t\n \t@BeforeEach\n \tpublic void setUp() {\n \t\texecuteDataSet(ORDER_SET);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzA4NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137085", "bodyText": "Did you intentionally tab this way?", "author": "dkayiwa", "createdAt": "2020-08-22T20:49:13Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +112,60 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);\n+\t\tassertEquals(newOrderGroupAttributeType.getName(),dao.getOrderGroupAttributeTypeByUuid(UUID2).getName());\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeType(Integer)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenIntegerId(){\n+    \tfinal Integer ID = 4;\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeType(ID);\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByName(String)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+    public void getOrderGroupAttributeTypeByName_shouldGetOrderGroupAttributeTypeByName(){\n+\t\tfinal String NAME = \"ECG\";\n+\t\tfinal String UUID4=\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByName(NAME);\n+\t\tassertEquals(NAME,newOrderGroupAttributeType.getName());\n+\t\tassertEquals(4,newOrderGroupAttributeType.getId());\n+\t\tassertEquals(UUID4,newOrderGroupAttributeType.getUuid());\n+    }\n+    /**\n+\t * @see {@link HibernateOrderDAO#deleteOrderGroupAttributeType(OrderGroupAttributeType)}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void deleteOrderGroupAttributeType_shouldDeleteOrderGroupAttributeTypeFromDatabase(){\n+    \tString uuid = \"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex 61d70b033..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -114,6 +118,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \t\tassertEquals(1, ordergroups.size());\n \t\t\n \t}\n+\t\n \t/**\n \t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n \t * @throws Exception\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzExOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137118", "bodyText": "Did you intentionally tab this way?", "author": "dkayiwa", "createdAt": "2020-08-22T20:49:24Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +112,60 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test\n+\tpublic void getAllOrderGroupAttributeTypes_shouldGetAllOrderGroupAttributeTypes(){\n+\t\tList<OrderGroupAttributeType> orderGroupAttributeTypes = dao.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(orderGroupAttributeTypes.size(),4);\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getOrderGroupAttributeTypeByUuid(String)}\n+\t * @throws Exception\n+\t */\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldGetOrderGroupAttributeTypeGivenUuid(){\n+\t\tfinal String UUID2 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+    \tOrderGroupAttributeType newOrderGroupAttributeType = dao.getOrderGroupAttributeTypeByUuid(UUID2);", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNzIxMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475307210", "bodyText": "I think it was the automatic formatting . A quick one is their a convetion on spacing between methods for example these two classes are totally different in terms of spacing.\n(SPACED)\nhttps://github.com/openmrs/openmrs-core/blob/master/api/src/test/java/org/openmrs/api/db/hibernate/ProviderDAOTest.java\nand\n(NO SPACES)\nhttps://github.com/openmrs/openmrs-core/blob/master/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nThough i found spacing  more consistent with other classes.", "author": "tendomart", "createdAt": "2020-08-24T02:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzExOA=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex 61d70b033..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -114,6 +118,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \t\tassertEquals(1, ordergroups.size());\n \t\t\n \t}\n+\t\n \t/**\n \t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n \t * @throws Exception\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzEzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137135", "bodyText": "Did you intentionally tab this way?", "author": "dkayiwa", "createdAt": "2020-08-22T20:49:34Z", "path": "api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java", "diffHunk": "@@ -109,5 +112,60 @@ public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() {\n \t\tPatient existingPatient = Context.getPatientService().getPatient(8);\n \t\tList<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient);\n \t\tassertEquals(1, ordergroups.size());\n+\t\t\n+\t}\n+\t/**\n+\t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n+\t * @throws Exception\n+\t */\n+    @Test", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM5MTQ5Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484391493", "bodyText": "Resolved this earlier.", "author": "tendomart", "createdAt": "2020-09-07T12:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYyNTAyMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484625021", "bodyText": "", "author": "tendomart", "createdAt": "2020-09-08T03:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\nindex 61d70b033..c4fcc9ff4 100644\n--- a/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n+++ b/api/src/test/java/org/openmrs/api/db/hibernate/HibernateOrderDAOTest.java\n\n@@ -114,6 +118,7 @@ public class HibernateOrderDAOTest extends BaseContextSensitiveTest {\n \t\tassertEquals(1, ordergroups.size());\n \t\t\n \t}\n+\t\n \t/**\n \t * @see {@link HibernateOrderDAO#getAllOrderGroupAttributeTypes()}\n \t * @throws Exception\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzE1Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137153", "bodyText": "Did you intentionally tab this way?", "author": "dkayiwa", "createdAt": "2020-08-22T20:49:48Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database\n+\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n+\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+                //confirm new values are persisted\n+\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\t\t}\n+\t\t\t@Test\n+\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tOrderService orderService = Context.getOrderService();\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+                assertTrue(orderGroupAttributeType.getRetired());\n+                assertNotNull(orderGroupAttributeType.getRetiredBy());\n+                assertNotNull(orderGroupAttributeType.getDateRetired());\n+                assertNotNull(orderGroupAttributeType.getRetireReason());\n+                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 60936041e..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3807,132 +3807,119 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n-\t\t\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n-\t\n-\t\n-\t\t\t@Test\n-\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\t\t\tfinal String name =\"ECG\";\n-\t\t\t\t//Check for values in the database\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-                //edit existing values in the database\n-\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n-\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n-\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n-                //confirm new values are persisted\n-\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderService orderService = Context.getOrderService();\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-                assertTrue(orderGroupAttributeType.getRetired());\n-                assertNotNull(orderGroupAttributeType.getRetiredBy());\n-                assertNotNull(orderGroupAttributeType.getDateRetired());\n-                assertNotNull(orderGroupAttributeType.getRetireReason());\n-                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n-\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t     OrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n-\t\t     assertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n-\t\t\t}\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n-\t\t\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n-\t\t\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount - 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(\"cbf580ee-d7fb-11ea-87d0-0242ac130003\"));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(UUID2);\n+\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(\"86bdcc12-d18d-11ea-87d0-0242ac130003\");\n \t\torderGroupAttribute.getValueReference();\n-\t\tassertEquals(\"Test 1\",orderGroupAttribute.getValueReference());\n-\t\tassertEquals(1,orderGroupAttribute.getId());\n+\t\tassertEquals(\"Test 1\", orderGroupAttribute.getValueReference());\n+\t\tassertEquals(1, orderGroupAttribute.getId());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzE1OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137158", "bodyText": "Did you intentionally tab this way?", "author": "dkayiwa", "createdAt": "2020-08-22T20:49:52Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database\n+\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n+\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+                //confirm new values are persisted\n+\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n+\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Test\n+\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n+\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n+\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\t\t}\n+\t\t\t@Test\n+\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tOrderService orderService = Context.getOrderService();\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+                assertTrue(orderGroupAttributeType.getRetired());\n+                assertNotNull(orderGroupAttributeType.getRetiredBy());", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 60936041e..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3807,132 +3807,119 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n-\t\t\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n-\t\n-\t\n-\t\t\t@Test\n-\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\t\t\tfinal String name =\"ECG\";\n-\t\t\t\t//Check for values in the database\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-                //edit existing values in the database\n-\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n-\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n-\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n-                //confirm new values are persisted\n-\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderService orderService = Context.getOrderService();\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-                assertTrue(orderGroupAttributeType.getRetired());\n-                assertNotNull(orderGroupAttributeType.getRetiredBy());\n-                assertNotNull(orderGroupAttributeType.getDateRetired());\n-                assertNotNull(orderGroupAttributeType.getRetireReason());\n-                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n-\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t     OrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n-\t\t     assertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n-\t\t\t}\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n-\t\t\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n-\t\t\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount - 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(\"cbf580ee-d7fb-11ea-87d0-0242ac130003\"));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(UUID2);\n+\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(\"86bdcc12-d18d-11ea-87d0-0242ac130003\");\n \t\torderGroupAttribute.getValueReference();\n-\t\tassertEquals(\"Test 1\",orderGroupAttribute.getValueReference());\n-\t\tassertEquals(1,orderGroupAttribute.getId());\n+\t\tassertEquals(\"Test 1\", orderGroupAttribute.getValueReference());\n+\t\tassertEquals(1, orderGroupAttribute.getId());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzE5OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137198", "bodyText": "Did you intentionally tab this way?", "author": "dkayiwa", "createdAt": "2020-08-22T20:50:20Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database\n+\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n+\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+                //confirm new values are persisted", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 60936041e..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3807,132 +3807,119 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n-\t\t\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n-\t\n-\t\n-\t\t\t@Test\n-\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\t\t\tfinal String name =\"ECG\";\n-\t\t\t\t//Check for values in the database\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-                //edit existing values in the database\n-\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n-\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n-\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n-                //confirm new values are persisted\n-\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderService orderService = Context.getOrderService();\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-                assertTrue(orderGroupAttributeType.getRetired());\n-                assertNotNull(orderGroupAttributeType.getRetiredBy());\n-                assertNotNull(orderGroupAttributeType.getDateRetired());\n-                assertNotNull(orderGroupAttributeType.getRetireReason());\n-                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n-\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t     OrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n-\t\t     assertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n-\t\t\t}\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n-\t\t\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n-\t\t\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount - 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(\"cbf580ee-d7fb-11ea-87d0-0242ac130003\"));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(UUID2);\n+\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(\"86bdcc12-d18d-11ea-87d0-0242ac130003\");\n \t\torderGroupAttribute.getValueReference();\n-\t\tassertEquals(\"Test 1\",orderGroupAttribute.getValueReference());\n-\t\tassertEquals(1,orderGroupAttribute.getId());\n+\t\tassertEquals(\"Test 1\", orderGroupAttribute.getValueReference());\n+\t\tassertEquals(1, orderGroupAttribute.getId());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzIwMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137202", "bodyText": "Did you intentionally tab this way?", "author": "dkayiwa", "createdAt": "2020-08-22T20:50:31Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\t\t\tfinal String name =\"ECG\";\n+\t\t\t\t//Check for values in the database\n+\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+                //edit existing values in the database", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 60936041e..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3807,132 +3807,119 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n-\t\t\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n-\t\n-\t\n-\t\t\t@Test\n-\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\t\t\tfinal String name =\"ECG\";\n-\t\t\t\t//Check for values in the database\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-                //edit existing values in the database\n-\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n-\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n-\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n-                //confirm new values are persisted\n-\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderService orderService = Context.getOrderService();\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-                assertTrue(orderGroupAttributeType.getRetired());\n-                assertNotNull(orderGroupAttributeType.getRetiredBy());\n-                assertNotNull(orderGroupAttributeType.getDateRetired());\n-                assertNotNull(orderGroupAttributeType.getRetireReason());\n-                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n-\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t     OrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n-\t\t     assertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n-\t\t\t}\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n-\t\t\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n-\t\t\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount - 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(\"cbf580ee-d7fb-11ea-87d0-0242ac130003\"));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(UUID2);\n+\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(\"86bdcc12-d18d-11ea-87d0-0242ac130003\");\n \t\torderGroupAttribute.getValueReference();\n-\t\tassertEquals(\"Test 1\",orderGroupAttribute.getValueReference());\n-\t\tassertEquals(1,orderGroupAttribute.getId());\n+\t\tassertEquals(\"Test 1\", orderGroupAttribute.getValueReference());\n+\t\tassertEquals(1, orderGroupAttribute.getId());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEzNzIyOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r475137229", "bodyText": "Did you intentionally tab this way?", "author": "dkayiwa", "createdAt": "2020-08-22T20:50:42Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\n+\t\n+\t\t\t@Test\n+\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){", "originalCommit": "5cefce10e39db0fbf4b80a08673a3a406b7b5ca4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 60936041e..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3807,132 +3807,119 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n-\t\t\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n+        //edit existing values in the database\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n-\t\n-\t\n-\t\t\t@Test\n-\t\t\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\t\t\tfinal String name =\"ECG\";\n-\t\t\t\t//Check for values in the database\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\t\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\t\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-                //edit existing values in the database\n-\t\t\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n-\t\t\t\torderGroupAttributeType.setName(\"Laparascopy\");\n-\t\t\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n-                //confirm new values are persisted\n-\t\t\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\t\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\t\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\t\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n-\t\t\t\tassertTrue(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\t\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n-\t\t\t}\n-\t\t\t@Test\n-\t\t\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tOrderService orderService = Context.getOrderService();\n-\t\t\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-                assertTrue(orderGroupAttributeType.getRetired());\n-                assertNotNull(orderGroupAttributeType.getRetiredBy());\n-                assertNotNull(orderGroupAttributeType.getDateRetired());\n-                assertNotNull(orderGroupAttributeType.getRetireReason());\n-                orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n-\t\t\t\tassertFalse(orderGroupAttributeType.getRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n-\t\t\t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\t\t\tassertNull(orderGroupAttributeType.getRetireReason());\n-\t\t\t}\n+\t@Test\n+\tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n+\t\tassertTrue(orderGroupAttributeType.getRetired());\n+\t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n+\t}\n+\t\n+\t@Test\n+\tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderService orderService = Context.getOrderService();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+        assertTrue(orderGroupAttributeType.getRetired());\n+        assertNotNull(orderGroupAttributeType.getRetiredBy());\n+        assertNotNull(orderGroupAttributeType.getDateRetired());\n+        assertNotNull(orderGroupAttributeType.getRetireReason());\n+        orderService.unretireOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertFalse(orderGroupAttributeType.getRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetiredBy());\n+\t\tassertNull(orderGroupAttributeType.getDateRetired());\n+\t\tassertNull(orderGroupAttributeType.getRetireReason());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n-\t\t     executeDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t     OrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n-\t\t     assertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\",orderGroupAttributeType.getUuid());\n-\t\t\t}\n+\t@Test\n+\tpublic  void getOrderGroupAttributeTypeByName_shouldReturnOrderGroupAttributeTypeUsingName(){\n+\t    executeDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByName(\"Bacteriology\");\n+\t\tassertEquals(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\", orderGroupAttributeType.getUuid());\n+\t}\n \t\t\t\n-\t\t\t@Test\n-\t\t\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n-\t\t\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\t\t\tint initialOrderGroupAttributeTypeCount= Context.getOrderService().getOrderGroupAttributeTypes().size();\n-\t\t\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeTypeById(4));\n-\t\t\t\tassertEquals(initialOrderGroupAttributeTypeCount-1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n-\t\t\t}\n+\t@Test\n+\tpublic void purgeOrderGroupAttributeType_shouldPurgeOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialOrderGroupAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n+\t\tContext.getOrderService().purgeOrderGroupAttributeType(Context.getOrderService().getOrderGroupAttributeType(4));\n+\t\tassertEquals(initialOrderGroupAttributeTypeCount - 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n+\t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnNullIfNonExistingUuidIsProvided(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"cbf580ee-d7fb-11ea-87d0-0242ac130003\";\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeByUuid(\"cbf580ee-d7fb-11ea-87d0-0242ac130003\"));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeByUuid_shouldReturnOrderGroupAttributeGivenUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID2=\"86bdcc12-d18d-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(UUID2);\n+\t\tOrderGroupAttribute orderGroupAttribute = orderService.getOrderGroupAttributeByUuid(\"86bdcc12-d18d-11ea-87d0-0242ac130003\");\n \t\torderGroupAttribute.getValueReference();\n-\t\tassertEquals(\"Test 1\",orderGroupAttribute.getValueReference());\n-\t\tassertEquals(1,orderGroupAttribute.getId());\n+\t\tassertEquals(\"Test 1\", orderGroupAttribute.getValueReference());\n+\t\tassertEquals(1, orderGroupAttribute.getId());\n \t}\n }\n"}}, {"oid": "22f5a56716348ac044294e432881e006408845ee", "url": "https://github.com/openmrs/openmrs-core/commit/22f5a56716348ac044294e432881e006408845ee", "message": "TRUNK-5410:Removin unnecessary indents and spaces from HibernateOrderDAOTest ,OrderServiceTest-createOrderGroupAttributes.xml  and OrderServiceTest", "committedDate": "2020-08-24T02:15:56Z", "type": "commit"}, {"oid": "465611723ea6dc0e973fdc2667ff1036db91d93b", "url": "https://github.com/openmrs/openmrs-core/commit/465611723ea6dc0e973fdc2667ff1036db91d93b", "message": "TRUNK-5410:Removing unnecessary indents and spaces from HibernateOrderDAOTest ,OrderServiceTest-createOrderGroupAttributes.xml  and OrderServiceTest", "committedDate": "2020-08-24T02:25:31Z", "type": "commit"}, {"oid": "7675e4eb3781efff413a40ac4c3316892213fa35", "url": "https://github.com/openmrs/openmrs-core/commit/7675e4eb3781efff413a40ac4c3316892213fa35", "message": "Merge branch 'master' of https://github.com/tendomart/openmrs-core", "committedDate": "2020-08-24T02:28:46Z", "type": "commit"}, {"oid": "d33ba94ffef65f11bc17240f630fb2aafddcb14b", "url": "https://github.com/openmrs/openmrs-core/commit/d33ba94ffef65f11bc17240f630fb2aafddcb14b", "message": "TRUNK-5410:Removing unused import in HibernateOrderDAOTest", "committedDate": "2020-08-24T02:35:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0Njk5NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478246994", "bodyText": "Why capital F in Fetch?", "author": "dkayiwa", "createdAt": "2020-08-27T08:28:56Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTcxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483291715", "bodyText": "Did you see the above comment?", "author": "dkayiwa", "createdAt": "2020-09-03T22:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0Njk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 1bf31bff0..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -857,13 +857,13 @@ public interface OrderService extends OpenmrsService {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n \n \t/**\n-\t * Return all order group attribute types\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n \t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n \t * Fetches order group attribute type using provided Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0ODA3MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478248070", "bodyText": "Would be nice to put space after the comma.", "author": "dkayiwa", "createdAt": "2020-08-27T08:30:41Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 1bf31bff0..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -857,13 +857,13 @@ public interface OrderService extends OpenmrsService {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n \n \t/**\n-\t * Return all order group attribute types\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n \t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n \t * Fetches order group attribute type using provided Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0ODYxMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478248612", "bodyText": "Can we also document the reason param?", "author": "dkayiwa", "createdAt": "2020-08-27T08:31:34Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MjA5NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483292094", "bodyText": "Can you correct the above sentence?", "author": "dkayiwa", "createdAt": "2020-09-03T22:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0ODYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 1bf31bff0..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -857,13 +857,13 @@ public interface OrderService extends OpenmrsService {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n \n \t/**\n-\t * Return all order group attribute types\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n \t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n \t * Fetches order group attribute type using provided Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0OTg3Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478249872", "bodyText": "a or an?", "author": "dkayiwa", "createdAt": "2020-08-27T08:33:43Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a order group attribute type type from the database", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 1bf31bff0..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -857,13 +857,13 @@ public interface OrderService extends OpenmrsService {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n \n \t/**\n-\t * Return all order group attribute types\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n \t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n \t * Fetches order group attribute type using provided Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MDcwNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478250706", "bodyText": "a or an?", "author": "dkayiwa", "createdAt": "2020-08-27T08:35:08Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a order group attribute type type from the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n+\t */\n+    @Authorized(PrivilegeConstants.PURGE_ORDERS)\n+\tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retrieves a order group attribute type object based on the name provided", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 1bf31bff0..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -857,13 +857,13 @@ public interface OrderService extends OpenmrsService {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n \n \t/**\n-\t * Return all order group attribute types\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n \t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n \t * Fetches order group attribute type using provided Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MTE4Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478251186", "bodyText": "Why capital P in Provided?", "author": "dkayiwa", "createdAt": "2020-08-27T08:35:58Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a order group attribute type type from the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n+\t */\n+    @Authorized(PrivilegeConstants.PURGE_ORDERS)\n+\tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retrieves a order group attribute type object based on the name provided\n+\t *\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n+\t * @return the {@link OrderGroupAttributeType} with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n+\t */\n+    @Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n+    \n+\t/**\n+\t * Fetches a given order group attribute  using the Provided Uuid", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 1bf31bff0..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -857,13 +857,13 @@ public interface OrderService extends OpenmrsService {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n \n \t/**\n-\t * Return all order group attribute types\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n \t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n \t * Fetches order group attribute type using provided Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NDYwNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478254606", "bodyText": "Why capital U in Uuid?", "author": "dkayiwa", "createdAt": "2020-08-27T08:41:32Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t\n+\t/**\n+\t * Fetches order group attribute type using provided Id\n+\t * \n+\t * @param id The Id of the order group attribute type to fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given internal id\n+\t * @should return the order group attribute type with the using the provided id\n+\t * @should return null if no order group attribute type exists with the given id\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException;\n+\n+\t/**\n+\t * Fetches  order group attribute type using provided Uuid \n+\t * \n+\t * @param uuid The Uuid of the order group attribute type to Fetch from the database\n+\t * @return the {@link OrderGroupAttributeType} with the given uuid\n+\t * @should return the order group attribute type with the given uuid\n+\t * @should return null if no order group attribute type exists with the given uuid\n+\t */\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid) throws APIException;\n+\t\n+\t/**\n+\t * Creates or updates the given order group attribute type in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to Save in the database\n+\t * @return the order group attribute type created/saved\n+\t * @should create a new order group attribute type\n+\t * @should edit an existing order group attribute type\n+\t */\n+    @Authorized({PrivilegeConstants.EDIT_ORDERS,PrivilegeConstants.ADD_ORDERS})\n+\tOrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retires the given order group attribute type  in the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type  retire\n+\t * @return the order group attribute type retired\n+\t * @should retire a order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType,String reason) throws APIException;\n+\n+\t/**\n+\t * Restores a order group attribute type that was previously retired in the database\n+\t * \n+\t * @param orderGroupAttributeType The order group attribute type to unretire\n+\t * @return the order group attribute type unretired\n+\t * @should unretire a retired order group attribute type\n+\t */\n+\t@Authorized(PrivilegeConstants.MANAGE_ORDER_TYPES)\n+\tOrderGroupAttributeType unretireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Completely removes a order group attribute type type from the database\n+\t *\n+\t * @param orderGroupAttributeType The order group attribute type to purge completely\n+\t * @should completely remove an order group attribute type\n+\t */\n+    @Authorized(PrivilegeConstants.PURGE_ORDERS)\n+\tvoid purgeOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException;\n+\n+\t/**\n+\t * Retrieves a order group attribute type object based on the name provided\n+\t *\n+\t * @param orderGroupAttributeTypeName The name of the order group attribute type to fetch\n+\t * @return the {@link OrderGroupAttributeType} with the specified name\n+\t * @should return the order group attribute type with the specified name\n+\t * @should return null if no order group attribute type exists with the specified name\n+\t */\n+    @Authorized(PrivilegeConstants.GET_ORDERS)\n+\tOrderGroupAttributeType getOrderGroupAttributeTypeByName(String orderGroupAttributeTypeName) throws APIException;\n+    \n+\t/**\n+\t * Fetches a given order group attribute  using the Provided Uuid\n+\t * \n+\t * @param uuid The Uuid of the order group attribute to fetch", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NDQwOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r483294409", "bodyText": "Did you see the above?", "author": "dkayiwa", "createdAt": "2020-09-03T22:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NDYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 1bf31bff0..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -857,13 +857,13 @@ public interface OrderService extends OpenmrsService {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n \n \t/**\n-\t * Return all order group attribute types\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n \t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n \t * Fetches order group attribute type using provided Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478255481", "bodyText": "Should the method name end with ById?", "author": "dkayiwa", "createdAt": "2020-08-27T08:43:00Z", "path": "api/src/main/java/org/openmrs/api/db/OrderDAO.java", "diffHunk": "@@ -269,4 +270,40 @@\n \t * @see org.openmrs.api.OrderService#getOrderGroupsByEncounter(Encounter)\n \t */\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws DAOException;\n+\t\n+\t/**\n+\t * @see  org.openmrs.api.OrderService#getOrderGroupAttributeByUuid(String)\n+\t */\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws DAOException;\n+\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypes()\n+\t */\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes()throws DAOException;\n+\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeById(Integer)\n+\t */\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id)throws DAOException;", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MDM5OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484460399", "bodyText": "Did you see the above comment?", "author": "dkayiwa", "createdAt": "2020-09-07T14:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYwODQ2MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484608461", "bodyText": "@dkayiwa  i think am failing to understand what you need here , however i changed the method name by removing the suffix  \" ById\" to it's new name getOrderGroupAttributeType\nThe param names have i also changed.", "author": "tendomart", "createdAt": "2020-09-08T01:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY4MjUzMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484682532", "bodyText": "@tendomart did you look at the convention used by the rest of the openmrs code base for such methods?", "author": "dkayiwa", "createdAt": "2020-09-08T06:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcyNTg0Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484725843", "bodyText": "@tendomart did you see the above?", "author": "dkayiwa", "createdAt": "2020-09-08T08:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc3MzExMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484773113", "bodyText": "seen it.", "author": "tendomart", "createdAt": "2020-09-08T09:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0Njg2Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484846862", "bodyText": "@dkayiwa  i implemented this , but it's not reflecting here but reflecting elsewhere", "author": "tendomart", "createdAt": "2020-09-08T11:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0NzUwMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484847502", "bodyText": "Similar to this ProviderDAO.getProviderAttributeType(Integer providerAttributeTypeId);", "author": "tendomart", "createdAt": "2020-09-08T11:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1MTY5OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484851698", "bodyText": "I did it here  b2bcf7c", "author": "tendomart", "createdAt": "2020-09-08T11:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NTQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/OrderDAO.java b/api/src/main/java/org/openmrs/api/db/OrderDAO.java\nindex 46d0e43d9..e71b0bdde 100644\n--- a/api/src/main/java/org/openmrs/api/db/OrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/OrderDAO.java\n\n@@ -277,12 +277,12 @@ public interface OrderDAO {\n \tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid) throws DAOException;\n \n \t/**\n-\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypes()\n+\t * @see org.openmrs.api.OrderService#getAllOrderGroupAttributeTypes()\n \t */\n \tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes()throws DAOException;\n \n \t/**\n-\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeById(Integer)\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeType(Integer)\n \t */\n \tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id)throws DAOException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1Njk0OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478256948", "bodyText": "Shouldn't this be getAllOrderGroupAttributeTypes?", "author": "dkayiwa", "createdAt": "2020-08-27T08:45:23Z", "path": "api/src/main/java/org/openmrs/api/OrderService.java", "diffHunk": "@@ -853,4 +855,97 @@ public Order discontinueOrder(Order orderToDiscontinue, String reasonNonCoded, D\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n+\n+\t/**\n+\t * Return all order group attribute types\n+\t *\n+\t * @return all {@link OrderGroupAttributeType}s\n+\t * @should return all order group attribute types including retired ones\n+\t */\n+\t@Authorized(PrivilegeConstants.GET_ORDERS)\n+\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/OrderService.java b/api/src/main/java/org/openmrs/api/OrderService.java\nindex 1bf31bff0..8f072bacd 100644\n--- a/api/src/main/java/org/openmrs/api/OrderService.java\n+++ b/api/src/main/java/org/openmrs/api/OrderService.java\n\n@@ -857,13 +857,13 @@ public interface OrderService extends OpenmrsService {\n \tpublic List<OrderGroup> getOrderGroupsByEncounter(Encounter encounter) throws APIException;\n \n \t/**\n-\t * Return all order group attribute types\n+\t * Returns all order group attribute types\n \t *\n \t * @return all {@link OrderGroupAttributeType}s\n \t * @should return all order group attribute types including retired ones\n \t */\n \t@Authorized(PrivilegeConstants.GET_ORDERS)\n-\t List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException;\n+\t List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException;\n \t\n \t/**\n \t * Fetches order group attribute type using provided Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1OTU2Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478259567", "bodyText": "Should the method name end with ById?", "author": "dkayiwa", "createdAt": "2020-08-27T08:49:39Z", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java", "diffHunk": "@@ -730,4 +731,65 @@ public boolean isOrderTypeInUse(OrderType orderType) {\n \t\tcriteria.add(Restrictions.eq(\"encounter\", encounter));\n \t\treturn criteria.list();\n \t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeByUuid(String)\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttribute getOrderGroupAttributeByUuid(String uuid)  throws DAOException{\n+\treturn (OrderGroupAttribute) sessionFactory.getCurrentSession().createQuery(\"from OrderGroupAttribute d where d.uuid = :uuid\")\n+\t\t\t.setString(\"uuid\", uuid).uniqueResult();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getAllOrderGroupAttributeTypes()\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws DAOException{\n+\t\treturn sessionFactory.getCurrentSession().createCriteria(OrderGroupAttributeType.class).list();\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.db.OrderDAO#getOrderGroupAttributeType(java.lang.Integer)", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM5NTYzNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484395636", "bodyText": "Resolved .\n@dkayiwa  do you think something similar here also needs to be changed ?\nhttps://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/api/db/OrderDAO.java", "author": "tendomart", "createdAt": "2020-09-07T12:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1OTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxNDQ0OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484614449", "bodyText": "@dkayiwa  did alter the method name including the param name to align with method it's self.", "author": "tendomart", "createdAt": "2020-09-08T02:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1OTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc3OTczNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r484779736", "bodyText": "I looked at the convention and fixed it to  getOrderGroupAttributeType(Integer orderGroupAttributeTypeId)", "author": "tendomart", "createdAt": "2020-09-08T09:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1OTU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\nindex 686d32f2a..97ab04f64 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateOrderDAO.java\n\n@@ -755,7 +755,7 @@ public class HibernateOrderDAO implements OrderDAO {\n \t */\n \t@Override\n \tpublic OrderGroupAttributeType getOrderGroupAttributeType(Integer id) throws DAOException{\n-\t\treturn sessionFactory.getCurrentSession().get(OrderGroupAttributeType.class,id);\n+\t\treturn sessionFactory.getCurrentSession().get(OrderGroupAttributeType.class, id);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2MTk0NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478261945", "bodyText": "Shouldn't this also use Context.getOrderService()?", "author": "dkayiwa", "createdAt": "2020-08-27T08:53:39Z", "path": "api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java", "diffHunk": "@@ -1084,4 +1088,75 @@ public OrderGroup getOrderGroup(Integer orderGroupId) throws APIException {\n \t\treturn dao.getOrderGroupsByEncounter(encounter);\n \t}\n \t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypes()\n+\t */\n+\t@Override\n+\tpublic List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException {\n+\t\treturn dao.getAllOrderGroupAttributeTypes();\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeById()\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeById(Integer id) throws APIException {\n+\t\treturn dao.getOrderGroupAttributeType(id);\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypeByUuid()\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType getOrderGroupAttributeTypeByUuid(String uuid)throws APIException {\n+\t\treturn dao.getOrderGroupAttributeTypeByUuid(uuid);\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.api.OrderService#saveOrderGroupAttributeType()\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType saveOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType) throws APIException{\n+\t\treturn dao.saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.api.OrderService#retireOrderGroupAttributeType()\n+\t */\n+\t@Override\n+\tpublic OrderGroupAttributeType retireOrderGroupAttributeType(OrderGroupAttributeType orderGroupAttributeType, String reason)throws APIException {\n+\t\treturn dao.saveOrderGroupAttributeType(orderGroupAttributeType);", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA3NjI5Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r479076292", "bodyText": "@dkayiwa  having replaced the dao variable with  Context.getOrderService() for all the other methods drove me into a stackoverflow , for all the methods were the change was introduced.\nhttps://hastebin.com/mupazayuko.js\nhowever checking  applicationContect-service.xml , orderService is registered.\nAny thoughts on the cause of this recursive behavour.", "author": "tendomart", "createdAt": "2020-08-28T10:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2MTk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTEyNjk4Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r479126983", "bodyText": "I mean't only for this one. Not for any other method.", "author": "dkayiwa", "createdAt": "2020-08-28T10:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2MTk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\nindex 27586a731..b27ab18e4 100644\n--- a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java\n\n@@ -1092,7 +1092,7 @@ public class OrderServiceImpl extends BaseOpenmrsService implements OrderService\n \t * @see org.openmrs.api.OrderService#getOrderGroupAttributeTypes()\n \t */\n \t@Override\n-\tpublic List<OrderGroupAttributeType> getOrderGroupAttributeTypes() throws APIException {\n+\tpublic List<OrderGroupAttributeType> getAllOrderGroupAttributeTypes() throws APIException {\n \t\treturn dao.getAllOrderGroupAttributeTypes();\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NjY4MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478266680", "bodyText": "It would be great to put spaces around the = sign.", "author": "dkayiwa", "createdAt": "2020-08-27T09:01:20Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NjgwNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478266806", "bodyText": "Would also be great to put space after the comma in method parameters.", "author": "dkayiwa", "createdAt": "2020-08-27T09:01:33Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NzM0Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478267346", "bodyText": "What does NonExistingId mean?", "author": "dkayiwa", "createdAt": "2020-08-27T09:02:28Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2ODMwNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478268307", "bodyText": "Can you take a look at existing tests in core that test for returning an item by id?", "author": "dkayiwa", "createdAt": "2020-08-27T09:04:11Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MDE2Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478270166", "bodyText": "What is the use of these constants if you are using them in only one place?", "author": "dkayiwa", "createdAt": "2020-08-27T09:07:20Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MDcwOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478270709", "bodyText": "What value does assertEquals and then assertNotEquals name add?", "author": "dkayiwa", "createdAt": "2020-08-27T09:08:18Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+        //edit existing values in the database\n+\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n+\t    orderGroupAttributeType.setName(\"Laparascopy\");\n+\t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n+        //confirm new values are persisted\n+\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNzA1MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478737050", "bodyText": "I added these to confirm that the method has updated the name and other fields in the database . That's why it compares the previous name \"ECG\" with the new name \"Laparascopy\" . But i will remove it since it's unnecessary.", "author": "tendomart", "createdAt": "2020-08-27T22:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MTQ0NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478861444", "bodyText": "I added these to confirm that the method has updated the name and other fields in the database . That's why it compares the previous name \"ECG\" with the new name \"Laparascopy\" . But i will remove it since it's unnecessary.", "author": "tendomart", "createdAt": "2020-08-28T06:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNDUyNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478904526", "bodyText": "What you are doing is similar to:\nassertEquals(name, 'tendo');\nassertNotEquals(name, 'martin');", "author": "dkayiwa", "createdAt": "2020-08-28T07:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwODA1MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478908050", "bodyText": "Ooh ok sure, am rectifying this as well.", "author": "tendomart", "createdAt": "2020-08-28T07:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MDcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478271594", "bodyText": "Is this test about retiring?", "author": "dkayiwa", "createdAt": "2020-08-27T09:09:49Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -3794,12 +3800,139 @@ public void saveOrderGroup_shouldFailValidationIfAnyOrdersFailValidation() {\n \t\tException expectedGroupValidationError = null;\n \t\ttry {\n \t\t\tContext.getOrderService().saveOrderGroup(orderGroup);\n-\t\t}\n-\t\tcatch (Exception e) {\n+\t\t} catch (Exception e) {\n \t\t\texpectedGroupValidationError = e;\n \t\t}\n \n \t\tassertNotNull(expectedGroupValidationError, \"Validation should cause order group to fail to save\");\n \t\tassertEquals(expectedValidationError.getMessage(), expectedGroupValidationError.getMessage());\n \t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n+\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t}\n+\n+\t@Test \n+\tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal Integer ID = 2;\n+\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n+\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n+\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n+\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t}\n+\n+\t@Test\n+\tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n+\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t}\n+\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n+\t\torderGroupAttributeType.setName(\"Surgery\");\n+\t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n+\t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n+\t\tassertNotNull(orderGroupAttributeType.getId());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t}\n+\t\t\n+\t@Test\n+\tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n+\t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n+\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n+\t\tfinal String name =\"ECG\";\n+\t\t//Check for values in the database\n+\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n+\t\tassertEquals(name,orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());", "originalCommit": "cdfa4227cf80bc3f0422128b822c418ff0ca96c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg1MTIxMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478851213", "bodyText": "Yes it is about retiring .", "author": "tendomart", "createdAt": "2020-08-28T06:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwMTgxMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r478901810", "bodyText": "Then why not put it in the retiring test that you put below?", "author": "dkayiwa", "createdAt": "2020-08-28T07:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA0NDY2Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r479044663", "bodyText": "@dkayiwa  do you think i should change something here ?", "author": "tendomart", "createdAt": "2020-08-28T09:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1MDA1Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r479050056", "bodyText": "Is this the test about retiring or the one below?", "author": "dkayiwa", "createdAt": "2020-08-28T09:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1NDcwOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r479054708", "bodyText": "It is this particular one\npublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {}", "author": "tendomart", "createdAt": "2020-08-28T09:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA3MTQzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r479071435", "bodyText": "That is why i would not expect anything to do with retire/unretire in the above.", "author": "dkayiwa", "createdAt": "2020-08-28T10:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA5MjE5Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3399#discussion_r479092193", "bodyText": "okk", "author": "tendomart", "createdAt": "2020-08-28T10:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MTU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "598a54f91d9d499297fd71d892ff4c966dba66ba", "chunk": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 19d6a04a3..20f07b652 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n\n@@ -3811,88 +3811,77 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getOrderGroupAttributeTypes_shouldReturnAllOrderGroupAttributeTypes(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes=orderService.getOrderGroupAttributeTypes();\n-\t\tassertEquals(4,orderGroupAttributeTypes.size());\n+\t\tList<OrderGroupAttributeType>orderGroupAttributeTypes = orderService.getAllOrderGroupAttributeTypes();\n+\t\tassertEquals(4, orderGroupAttributeTypes.size());\n \t}\n \t\n \t@Test\n-\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNonExistingIdIsProvided(){\n+\tpublic void getOrderGroupAttributeType_shouldReturnNullIfNoOrderGroupAttributeTypeHasTheGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tassertNull(Context.getOrderService().getOrderGroupAttributeTypeById(10));\n+\t\tassertNull(Context.getOrderService().getOrderGroupAttributeType(10));\n \t}\n \n \t@Test \n \tpublic void getOrderGroupAttributeType_shouldReturnOrderGroupAttributeTypeGivenId(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal Integer ID = 2;\n-\t\tfinal String UUID2=\"9cf1bbe6-d18e-11ea-87d0-0242ac130003\";\n-\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeById(ID);\n-\t\tassertEquals(orderService.getOrderGroupAttributeTypeByUuid(UUID2),orderGroupAttributeType);\n-\t\tassertEquals(orderGroupAttributeType.getUuid(),Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getUuid());\n-\t\tassertEquals(ID,Context.getOrderService().getOrderGroupAttributeTypeByUuid(UUID2).getId());\n+\t\tfinal Integer EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID = 2;\n+\t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeType(2);\n+\t\tassertThat(orderGroupAttributeType.getId(), is(EXISTING_ORDER_GROUP_ATTRIBUTE_TYPE_ID));\n \t}\n \n \t@Test\n \tpublic void getOrderGroupAttributeTypeByUuid_shouldReturnOrderGroupAttributeTypeByUuid(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderGroupAttributeType orderGroupAttributeType = orderService.getOrderGroupAttributeTypeByUuid(\"9cf1bce0-d18e-11ea-87d0-0242ac130003\");\n-\t\tassertEquals(\"Bacteriology\",orderGroupAttributeType.getName());\n+\t\tassertEquals(\"Bacteriology\", orderGroupAttributeType.getName());\n \t}\n \n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldSaveOrderGroupAttributeTypeGivenOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getOrderGroupAttributeTypes().size();\n+\t\tint initialGroupOrderAttributeTypeCount = Context.getOrderService().getAllOrderGroupAttributeTypes().size();\n \t\tOrderGroupAttributeType orderGroupAttributeType = new OrderGroupAttributeType();\n \t\torderGroupAttributeType.setName(\"Surgery\");\n \t\torderGroupAttributeType.setDatatypeClassname(FreeTextDatatype.class.getName());\n \t\tContext.getOrderService().saveOrderGroupAttributeType(orderGroupAttributeType);\n \t\tassertNotNull(orderGroupAttributeType.getId());\n-\t\tassertEquals(initialGroupOrderAttributeTypeCount+1,Context.getOrderService().getOrderGroupAttributeTypes().size());\n+\t\tassertEquals(initialGroupOrderAttributeTypeCount + 1, Context.getOrderService().getAllOrderGroupAttributeTypes().size());\n \t}\n \t\t\n \t@Test\n \tpublic void saveOrderGroupAttributeType_shouldEditAnExistingOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tfinal String UUID4 =\"9cf1bdb2-d18e-11ea-87d0-0242ac130003\";\n-\t\tfinal String name =\"ECG\";\n \t\t//Check for values in the database\n-\t\tOrderGroupAttributeType orderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(4);\n-\t\tassertEquals(UUID4,orderGroupAttributeType.getUuid());\n-\t\tassertEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n+\t\tassertEquals(\"ECG\", orderGroupAttributeType.getName());\n         //edit existing values in the database\n-\t\torderGroupAttributeType.setRetireReason(\"Change Order To Laparascopy\");\n \t    orderGroupAttributeType.setName(\"Laparascopy\");\n \t\torderService.saveOrderGroupAttributeType(orderGroupAttributeType);\n         //confirm new values are persisted\n-\t\tassertEquals(\"Laparascopy\",orderGroupAttributeType.getName());\n-\t\tassertNotEquals(name,orderGroupAttributeType.getName());\n-\t\tassertEquals(\"Change Order To Laparascopy\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotEquals(\"Testing unretire\",orderGroupAttributeType.getRetireReason());\n+\t\tassertEquals(\"Laparascopy\", orderGroupAttributeType.getName());\n \t}\n \t\t\t\n \t@Test\n \tpublic void retireOrderGroupAttributeType_shouldRetireOrderGroupAttributeType() throws ParseException {\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertFalse(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n \t\tassertNull(orderGroupAttributeType.getRetireReason());\n \t\tassertNull(orderGroupAttributeType.getDateRetired());\n-\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType,\"Test Retire\");\n-\t\torderGroupAttributeType=Context.getOrderService().getOrderGroupAttributeTypeById(2);\n+\t\tContext.getOrderService().retireOrderGroupAttributeType(orderGroupAttributeType, \"Test Retire\");\n+\t\torderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(2);\n \t\tassertTrue(orderGroupAttributeType.getRetired());\n \t\tassertNotNull(orderGroupAttributeType.getRetiredBy());\n-\t\tassertEquals(\"Test Retire\",orderGroupAttributeType.getRetireReason());\n-\t\tassertNotNull(orderGroupAttributeType.getDateRetired(),\"True\");\n+\t\tassertEquals(\"Test Retire\", orderGroupAttributeType.getRetireReason());\n+\t\tassertNotNull(orderGroupAttributeType.getDateRetired());\n \t}\n \t\n \t@Test\n \tpublic void unretireOrderGroupAttributeType_shouldUnretireOrderGroupAttributeType(){\n \t\texecuteDataSet(ORDER_GROUP_ATTRIBUTES);\n \t\tOrderService orderService = Context.getOrderService();\n-\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeTypeById(4);\n+\t\tOrderGroupAttributeType orderGroupAttributeType = Context.getOrderService().getOrderGroupAttributeType(4);\n         assertTrue(orderGroupAttributeType.getRetired());\n         assertNotNull(orderGroupAttributeType.getRetiredBy());\n         assertNotNull(orderGroupAttributeType.getDateRetired());\n"}}]}