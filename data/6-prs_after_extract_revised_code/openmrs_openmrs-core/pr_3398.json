{"pr_number": 3398, "pr_title": "TRUNK-5887 Validation error when starting Reference Metadata module on PostgreSQL", "pr_createdAt": "2020-07-26T10:07:00Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3398", "timeline": [{"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63", "url": "https://github.com/openmrs/openmrs-core/commit/40d9fad8c0be583d63ad314ee10d709be0913b63", "message": "TRUNK-5887 Validation error when starting Reference Metadata module on PostgreSQL", "committedDate": "2020-07-26T08:05:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460557593", "bodyText": "Aren't we going to have to do this in many places? Did you evaluate other options? Like switching the file size to 36?", "author": "dkayiwa", "createdAt": "2020-07-26T18:18:09Z", "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "originalCommit": "40d9fad8c0be583d63ad314ee10d709be0913b63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDE2MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460560161", "bodyText": "@dkayiwa , yes and as I am testing and getting validation errors, I am making the changes. One another ticket I raised today holds a similar problem.\nMaking uuid columns char(36) or varchar(38) did come in my mind, but isn't there any reason that why in OpenMRS we have set UUID columns as char(38) everywhere?", "author": "Am-Coder", "createdAt": "2020-07-26T18:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDk3MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460560971", "bodyText": "https://issues.openmrs.org/browse/TRUNK-1283", "author": "dkayiwa", "createdAt": "2020-07-26T18:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2NDM4MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460564381", "bodyText": "Oh now I see the reason. So dropping to char(36) is never an option. One solution I found of creating custom char type like this here but then if our main concern is the amount of code changes that will be needed then we will have to map uuid types to this custom type that we create everywhere. So, I went with the trim option.", "author": "Am-Coder", "createdAt": "2020-07-26T19:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2NTI3OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460565278", "bodyText": "Can we write the custom liquibase class that automatically maps to char(36) for PostgreSQL?", "author": "dkayiwa", "createdAt": "2020-07-26T19:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2NTYwMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460565601", "bodyText": "Let me look into it. I know something similar has been done for boolean conversion to tinyint(1) for MySQL.", "author": "Am-Coder", "createdAt": "2020-07-26T19:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5Nzg1Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460897856", "bodyText": "I'd actually think that we'd want to just change all UUID columns to 36 characters. The likelihood that we need to contend with Microsoft-generated UUIDs seems to me exceedingly small (and in those cases, we should just be removing the curly-braces anyways).", "author": "ibacher", "createdAt": "2020-07-27T13:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwODgzMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460908830", "bodyText": "@ibacher , setting UUID to 36 chars gives an error :\nCaused by: java.sql.BatchUpdateException: Batch entry 0 insert into appointmentscheduling_appointment_type (name, description, duration, confidential, visit_type_id, uuid, date_created, date_changed, date_retired, retired, retire_reason, creator, changed_by, retired_by, appointment_type_id) values ('Urology (New Patient)', NULL, 20, 'FALSE', NULL, '4d85dda4-c437-11e4-a470-82b0ea87e2d8e', '2020-07-27 15:33:49+05:30', NULL, NULL, 'FALSE', NULL, 2, NULL, NULL, 22) was aborted: ERROR: value too long for type character(36)  Call getNextException to see other errors in the batch.\nIf you see length of '4d85dda4-c437-11e4-a470-82b0ea87e2d8e' is 37, even though there are no curly braces. Thus I shifted to using VARCHAR(38) instead. Link to logs: https://pastebin.com/3i3L2N7a", "author": "Am-Coder", "createdAt": "2020-07-27T13:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1NDgzMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460954833", "bodyText": "@Am-Coder Do examples like that exist outside of the referencedemodata module? If not, shouldn't we just fix that module?", "author": "ibacher", "createdAt": "2020-07-27T14:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxMTM2OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461011369", "bodyText": "@ibacher , Let me check after correcting this uuid if I get error refering to uuid in other modules while initializing Reference Application.", "author": "Am-Coder", "createdAt": "2020-07-27T16:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNzI2MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461037260", "bodyText": "@ibacher , I just corrected it here and there is no other error in any other module or reference demo data module related to uuid being more then 36 characters. But for correction I just removed the last extra character. So, we are good to go with char(36) for PostgreSQL after this correction.\n@dkayiwa , what is your say on this to keep uuid to char(36) or varchar(38) and whether this be done for MySQL as well ?", "author": "Am-Coder", "createdAt": "2020-07-27T17:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NDA4OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461084089", "bodyText": "Doing a uuid of 36 characters makes more sense.", "author": "dkayiwa", "createdAt": "2020-07-27T18:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NDcyOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461154728", "bodyText": "@dkayiwa  @ibacher , Made the changes to convert char(38) to char(36) for PostgreSQL. Once this issue gets resolved we are good to go to initialize Reference Application on PostgreSQL. Currently, with these changes, I am able to run Reference Application on PostgreSQL \ud83d\ude42", "author": "Am-Coder", "createdAt": "2020-07-27T20:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "28122f0d51d30a4f3c1468528937f31c8b8e2ebe", "chunk": "diff --git a/api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java b/api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java\nindex 8b47d7af6..65289b4ec 100644\n--- a/api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java\n\n@@ -61,7 +61,7 @@ public class OrderFrequencyValidator implements Validator {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n \t\t\t\t\terrors.rejectValue(\"concept\", \"OrderFrequency.concept.shouldBeClassFrequency\");\n \t\t\t\t}\n \t\t\t\t\n"}}, {"oid": "28122f0d51d30a4f3c1468528937f31c8b8e2ebe", "url": "https://github.com/openmrs/openmrs-core/commit/28122f0d51d30a4f3c1468528937f31c8b8e2ebe", "message": "TRUNK-5887 Validation error when starting Reference Metadata module on PostgreSQL", "committedDate": "2020-07-27T10:31:20Z", "type": "commit"}, {"oid": "a068908c327cf38279e4b11addb57aee3857c1a3", "url": "https://github.com/openmrs/openmrs-core/commit/a068908c327cf38279e4b11addb57aee3857c1a3", "message": "TRUNK-5887 Validation error when starting Reference Metadata module on PostgreSQL", "committedDate": "2020-07-27T10:34:04Z", "type": "commit"}, {"oid": "f3ec009ada74645529f8b8f2cb5e2741d6d443d9", "url": "https://github.com/openmrs/openmrs-core/commit/f3ec009ada74645529f8b8f2cb5e2741d6d443d9", "message": "TRUNK-5887 Validation error when starting Reference Metadata module on PostgreSQL", "committedDate": "2020-07-27T19:22:23Z", "type": "commit"}, {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3", "url": "https://github.com/openmrs/openmrs-core/commit/1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3", "message": "TRUNK-5887 Validation error when starting Reference Metadata module on PostgreSQL", "committedDate": "2020-07-27T19:59:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461167948", "bodyText": "What if it is another char(38) field which is not a uuid?", "author": "dkayiwa", "createdAt": "2020-07-27T21:02:28Z", "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "originalCommit": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNjYxOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461506619", "bodyText": "@dkayiwa  @ibacher , I couldn't find a way to get access to column name within the scope of this method. Apparently, what I have understood is we will have to make the changes in diferent change classes here and this does not seem right.\nIf we hold a possibility of having any other fields with char(38), what if we apparently make change to using varchar(38) and if we finally are ready to revert https://issues.openmrs.org/browse/TRUNK-1283 , then we make char(36) directly into liquibase changesets for both MySQL and PostgreSQL rather then going this way ?", "author": "Am-Coder", "createdAt": "2020-07-28T11:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyNzk3NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461527975", "bodyText": "Would the revert require touching all existing changesets?", "author": "dkayiwa", "createdAt": "2020-07-28T12:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyOTk2NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461529964", "bodyText": "Yes, that is what I have in mind.", "author": "Am-Coder", "createdAt": "2020-07-28T12:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzMDg2OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461530868", "bodyText": "Would that require a validation checksum for the so many changesets?", "author": "dkayiwa", "createdAt": "2020-07-28T12:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzMjc1Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461532756", "bodyText": "Apparently, Yes.", "author": "Am-Coder", "createdAt": "2020-07-28T12:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNTk2MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461535961", "bodyText": "That would be too many changes.", "author": "dkayiwa", "createdAt": "2020-07-28T12:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzODEzOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461538139", "bodyText": "Rather than reverting (which isn't really the way to go) would it make sense to just add a new changeset downsizing the UUID fields?", "author": "ibacher", "createdAt": "2020-07-28T12:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NDYwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461544603", "bodyText": "A changeset like this ( I took it from the docs ) :\n<changeSet  author=\"liquibase-docs\"  id=\"modifyDataType-example\">  \n    <modifyDataType  catalogName=\"cat\"  \n            columnName=\"id\"  \n            newDataType=\"int\"  \n            schemaName=\"public\"  \n            tableName=\"person\"/>  \n</changeSet>\n\nwould then need to be added for each table present in core as well as all the ref. application modules. Wouldn't it be adding some overhead ?", "author": "Am-Coder", "createdAt": "2020-07-28T12:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}], "type": "inlineReview", "revised_code": null}]}