{"pr_number": 3383, "pr_title": "TRUNK-5817: Migrate web and webapp package tests to Junit 5 (StarupErrorFilterTest)", "pr_createdAt": "2020-07-19T20:33:05Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3383", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNzA3Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457107073", "bodyText": "Thanks alot @achilep  for your great , there are some failing tests that are breaking the ci ,could you first run your new changes", "author": "sherrif10", "createdAt": "2020-07-20T06:52:42Z", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {", "originalCommit": "0f1f661029842328275e42cbe419d8429936dc36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57b43e7c143312651bbb22002af960f7eb8d31b1", "chunk": "diff --git a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\nindex 181c7fadf..3e9c0066a 100644\n--- a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n+++ b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n\n@@ -13,7 +13,6 @@ import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.mock;\n \n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNTIwMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457115202", "bodyText": "we dont need to have a field for this one", "author": "teleivo", "createdAt": "2020-07-20T07:05:49Z", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n+\n+\tprivate StartupErrorFilter filter;\n \t\n-\t@Before\n+\tprivate Throwable errorAtStartup ;", "originalCommit": "0f1f661029842328275e42cbe419d8429936dc36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyODE4NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457128184", "bodyText": "Thanks for this @teleivo", "author": "sherrif10", "createdAt": "2020-07-20T07:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNTIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "57b43e7c143312651bbb22002af960f7eb8d31b1", "chunk": "diff --git a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\nindex 181c7fadf..3e9c0066a 100644\n--- a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n+++ b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n\n@@ -13,7 +13,6 @@ import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.mock;\n \n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNjA4Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457116082", "bodyText": "please inline the variable", "author": "teleivo", "createdAt": "2020-07-20T07:07:13Z", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n+\n+\tprivate StartupErrorFilter filter;\n \t\n-\t@Before\n+\tprivate Throwable errorAtStartup ;\n+\n+\t@BeforeEach\n \tpublic void setUp() {\n-\t\tmockStatic(Listener.class);\n+\t\tfilter = new StartupErrorFilter();\n+\t}\n+\t\n+\t@AfterEach\n+\tpublic void reverterrorAtStartup() {\n+\t\terrorAtStartup = null;", "originalCommit": "0f1f661029842328275e42cbe419d8429936dc36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57b43e7c143312651bbb22002af960f7eb8d31b1", "chunk": "diff --git a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\nindex 181c7fadf..3e9c0066a 100644\n--- a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n+++ b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n\n@@ -13,7 +13,6 @@ import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.mock;\n \n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNzI2MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457117260", "bodyText": "I think we don't need to mock the throwable. You can just create any Exception as they are Throwable", "author": "teleivo", "createdAt": "2020-07-20T07:09:14Z", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n+\n+\tprivate StartupErrorFilter filter;\n \t\n-\t@Before\n+\tprivate Throwable errorAtStartup ;\n+\n+\t@BeforeEach\n \tpublic void setUp() {\n-\t\tmockStatic(Listener.class);\n+\t\tfilter = new StartupErrorFilter();\n+\t}\n+\t\n+\t@AfterEach\n+\tpublic void reverterrorAtStartup() {\n+\t\terrorAtStartup = null;\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", errorAtStartup);\n+\t\t\n \t}\n \t\n \t@Test\n \tpublic void getModel_shouldReturnAStartupErrorFilterModelContainingTheStartupError() {\n \t\t\n \t\tThrowable t = mock(Throwable.class);\n-\t\twhen(Listener.getErrorAtStartup()).thenReturn(t);\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", t);", "originalCommit": "0f1f661029842328275e42cbe419d8429936dc36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57b43e7c143312651bbb22002af960f7eb8d31b1", "chunk": "diff --git a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\nindex 181c7fadf..3e9c0066a 100644\n--- a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n+++ b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n\n@@ -13,7 +13,6 @@ import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.mock;\n \n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExODgwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457118803", "bodyText": "remove this line, you are setting the errors to null in the after each , so there are no errors by default for this test. the test will then pass.", "author": "teleivo", "createdAt": "2020-07-20T07:11:37Z", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -55,20 +59,18 @@ public void getModel_shouldReturnAStartupErrorFilterModelContainingTheStartupErr\n \t@Test\n \tpublic void skipFilter_shouldReturnTrueIfNoErrorHasOccuredOnStartup() {\n \t\t\n-\t\twhen(Listener.errorOccurredAtStartup()).thenReturn(false);\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", false);", "originalCommit": "0f1f661029842328275e42cbe419d8429936dc36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57b43e7c143312651bbb22002af960f7eb8d31b1", "chunk": "diff --git a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\nindex 181c7fadf..3e9c0066a 100644\n--- a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n+++ b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n\n@@ -47,19 +44,18 @@ public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getModel_shouldReturnAStartupErrorFilterModelContainingTheStartupError() {\n \t\t\n-\t\tThrowable t = mock(Throwable.class);\n-\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", t);\n+\t\tException e = new Exception() ;\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", e);\n \t\t\n \t\t\n \t\tStartupErrorFilterModel model = filter.getUpdateFilterModel();\n \t\t\n-\t\tassertThat(model.errorAtStartup, is(t));\n+\t\tassertThat(model.errorAtStartup, is(e));\n \t}\n \t\n \t@Test\n \tpublic void skipFilter_shouldReturnTrueIfNoErrorHasOccuredOnStartup() {\n \t\t\n-\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", false);\n \t\t\n \t\t\n \t\tassertTrue(filter.skipFilter(new MockHttpServletRequest()), \"should be true on start without error\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTc3Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457119776", "bodyText": "you will need to set the errors field to a Throwable (for example an Exception) for the getter to return true", "author": "teleivo", "createdAt": "2020-07-20T07:13:09Z", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -55,20 +59,18 @@ public void getModel_shouldReturnAStartupErrorFilterModelContainingTheStartupErr\n \t@Test\n \tpublic void skipFilter_shouldReturnTrueIfNoErrorHasOccuredOnStartup() {\n \t\t\n-\t\twhen(Listener.errorOccurredAtStartup()).thenReturn(false);\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", false);\n \t\t\n-\t\tStartupErrorFilter filter = new StartupErrorFilter();\n \t\t\n-\t\tassertTrue(\"should be true on start without error\", filter.skipFilter(new MockHttpServletRequest()));\n+\t\tassertTrue(filter.skipFilter(new MockHttpServletRequest()), \"should be true on start without error\");\n \t}\n \t\n \t@Test\n \tpublic void skipFilter_shouldReturnFalseIfAnErrorHasOccuredOnStartup() {\n \t\t\n-\t\twhen(Listener.errorOccurredAtStartup()).thenReturn(true);\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", true);", "originalCommit": "0f1f661029842328275e42cbe419d8429936dc36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57b43e7c143312651bbb22002af960f7eb8d31b1", "chunk": "diff --git a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\nindex 181c7fadf..3e9c0066a 100644\n--- a/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n+++ b/web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java\n\n@@ -47,19 +44,18 @@ public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getModel_shouldReturnAStartupErrorFilterModelContainingTheStartupError() {\n \t\t\n-\t\tThrowable t = mock(Throwable.class);\n-\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", t);\n+\t\tException e = new Exception() ;\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", e);\n \t\t\n \t\t\n \t\tStartupErrorFilterModel model = filter.getUpdateFilterModel();\n \t\t\n-\t\tassertThat(model.errorAtStartup, is(t));\n+\t\tassertThat(model.errorAtStartup, is(e));\n \t}\n \t\n \t@Test\n \tpublic void skipFilter_shouldReturnTrueIfNoErrorHasOccuredOnStartup() {\n \t\t\n-\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", false);\n \t\t\n \t\t\n \t\tassertTrue(filter.skipFilter(new MockHttpServletRequest()), \"should be true on start without error\");\n"}}, {"oid": "57b43e7c143312651bbb22002af960f7eb8d31b1", "url": "https://github.com/openmrs/openmrs-core/commit/57b43e7c143312651bbb22002af960f7eb8d31b1", "message": "TRUNK-5817: Migrate web and webapp package tests to Junit 5", "committedDate": "2020-07-20T14:01:22Z", "type": "forcePushed"}, {"oid": "f790b39f35c9ef951cb79129673d5a0b24875b8c", "url": "https://github.com/openmrs/openmrs-core/commit/f790b39f35c9ef951cb79129673d5a0b24875b8c", "message": "TRUNK-5817: Migrate web and webapp package tests to Junit 5", "committedDate": "2020-07-20T14:04:31Z", "type": "forcePushed"}, {"oid": "c9e441a7b1bca3b05c25ebdbc2c927174e514fde", "url": "https://github.com/openmrs/openmrs-core/commit/c9e441a7b1bca3b05c25ebdbc2c927174e514fde", "message": "TRUNK-5817: Migrate web and webapp package tests to Junit 5", "committedDate": "2020-07-20T14:35:14Z", "type": "forcePushed"}, {"oid": "4411075c951e2c0bb1adaf68cfdc7f2b4dafa1c9", "url": "https://github.com/openmrs/openmrs-core/commit/4411075c951e2c0bb1adaf68cfdc7f2b4dafa1c9", "message": "TRUNK-5817: Migrate web and webapp package tests to Junit 5", "committedDate": "2020-07-20T14:53:08Z", "type": "forcePushed"}, {"oid": "52d52377804d644607e56102c930d779a3372b41", "url": "https://github.com/openmrs/openmrs-core/commit/52d52377804d644607e56102c930d779a3372b41", "message": "TRUNK-5817: Migrate web and webapp package test to Junit 5", "committedDate": "2020-07-20T16:41:32Z", "type": "forcePushed"}, {"oid": "59a62347236bf433825fbb69c8dd13907011daf0", "url": "https://github.com/openmrs/openmrs-core/commit/59a62347236bf433825fbb69c8dd13907011daf0", "message": "TRUNK-5817: Migrate web and webapp package test to Junit 5", "committedDate": "2020-07-20T17:23:09Z", "type": "commit"}, {"oid": "59a62347236bf433825fbb69c8dd13907011daf0", "url": "https://github.com/openmrs/openmrs-core/commit/59a62347236bf433825fbb69c8dd13907011daf0", "message": "TRUNK-5817: Migrate web and webapp package test to Junit 5", "committedDate": "2020-07-20T17:23:09Z", "type": "forcePushed"}]}