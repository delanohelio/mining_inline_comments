{"pr_number": 2907, "pr_title": "Add One-of qualifier value property constraint", "pr_createdAt": "2020-07-08T17:49:50Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2907", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNTM5MA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2907#discussion_r454405390", "bodyText": "Why call this variable specs? Those are the qualifiers you are inspecting, not the specifications of a constraint.", "author": "wetneb", "createdAt": "2020-07-14T14:37:36Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UseAsQualifierScrutinizer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.helpers.Datamodel;\n+import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Snak;\n+import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n+import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class UseAsQualifierScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"values-should-not-be-used-as-qualifier\";\n+    public static String ONE_OF_QUALIFIER_VALUE_PROPERTY_QID = \"Q52712340\";\n+    public static String QUALIFIER_PROPERTY_PID = \"P2306\";\n+    public static String ITEM_OF_PROPERTY_CONSTRAINT_PID = \"P2305\";\n+\n+    class UseAsQualifierConstraint {\n+        final PropertyIdValue allowedQualifierPid;\n+        final List<Value> itemList;\n+        UseAsQualifierConstraint(Statement statement) {\n+            List<SnakGroup> specs = statement.getClaim().getQualifiers();\n+            PropertyIdValue pid = null;\n+            this.itemList = new ArrayList<>();\n+            for(SnakGroup group : specs) {\n+                for (Snak snak : group.getSnaks()) {\n+                    if (group.getProperty().getId().equals(QUALIFIER_PROPERTY_PID)){\n+                        pid = (PropertyIdValue) snak.getValue();\n+                    }\n+                    if (group.getProperty().getId().equals(ITEM_OF_PROPERTY_CONSTRAINT_PID)){\n+                        this.itemList.add(snak.getValue());\n+                    }\n+                }\n+            }\n+            this.allowedQualifierPid = pid;\n+        }\n+    }\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        for (Statement statement : update.getAddedStatements()) {\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Map<PropertyIdValue, List<Value>> qualifiersMap = new HashMap<>();\n+            List<SnakGroup> specs = statement.getClaim().getQualifiers();", "originalCommit": "3bd3f0f3a288bc1f00e210d1b8c956f0949d5888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMDc4MQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2907#discussion_r454410781", "bodyText": "Copy-paste error. Sorry. :(", "author": "darecoder", "createdAt": "2020-07-14T14:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNTM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0d8f42b27fd4a28d6e393866b597b9a58e1399e0", "chunk": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UseAsQualifierScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UseAsQualifierScrutinizer.java\nindex 1a3dc50f1..cb00e7fbc 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UseAsQualifierScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UseAsQualifierScrutinizer.java\n\n@@ -3,38 +3,39 @@ package org.openrefine.wikidata.qa.scrutinizers;\n import org.openrefine.wikidata.qa.QAWarning;\n import org.openrefine.wikidata.updates.ItemUpdate;\n import org.wikidata.wdtk.datamodel.helpers.Datamodel;\n+import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\n import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n import org.wikidata.wdtk.datamodel.interfaces.Snak;\n import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n import org.wikidata.wdtk.datamodel.interfaces.Statement;\n-import org.wikidata.wdtk.datamodel.interfaces.Value;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n public class UseAsQualifierScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"values-should-not-be-used-as-qualifier\";\n-    public static String ONE_OF_QUALIFIER_VALUE_PROPERTY_QID = \"Q52712340\";\n-    public static String QUALIFIER_PROPERTY_PID = \"P2306\";\n+    public static String ONE_OF_QUALIFIER_VALUE_PROPERTY_CONSTRAINT = \"Q52712340\";\n+    public static String ALLOWED_AS_QUALIFIER_PROPERTY_PID = \"P2306\";\n     public static String ITEM_OF_PROPERTY_CONSTRAINT_PID = \"P2305\";\n \n     class UseAsQualifierConstraint {\n         final PropertyIdValue allowedQualifierPid;\n-        final List<Value> itemList;\n+        final List<ItemIdValue> itemList;\n         UseAsQualifierConstraint(Statement statement) {\n             List<SnakGroup> specs = statement.getClaim().getQualifiers();\n             PropertyIdValue pid = null;\n             this.itemList = new ArrayList<>();\n             for(SnakGroup group : specs) {\n                 for (Snak snak : group.getSnaks()) {\n-                    if (group.getProperty().getId().equals(QUALIFIER_PROPERTY_PID)){\n+                    if (group.getProperty().getId().equals(ALLOWED_AS_QUALIFIER_PROPERTY_PID)){\n                         pid = (PropertyIdValue) snak.getValue();\n                     }\n                     if (group.getProperty().getId().equals(ITEM_OF_PROPERTY_CONSTRAINT_PID)){\n-                        this.itemList.add(snak.getValue());\n+                        this.itemList.add((ItemIdValue) snak.getValue());\n                     }\n                 }\n             }\n"}}, {"oid": "0d8f42b27fd4a28d6e393866b597b9a58e1399e0", "url": "https://github.com/OpenRefine/OpenRefine/commit/0d8f42b27fd4a28d6e393866b597b9a58e1399e0", "message": "Add One-of qualifier value property constraint\n\nImplemented one-of qualifier value property constraint as part of #2354", "committedDate": "2020-07-14T19:16:50Z", "type": "commit"}, {"oid": "5a509e2a96c99e804d857e35a02784cfb15432f5", "url": "https://github.com/OpenRefine/OpenRefine/commit/5a509e2a96c99e804d857e35a02784cfb15432f5", "message": "Test class added", "committedDate": "2020-07-14T19:16:52Z", "type": "commit"}, {"oid": "92ed6f3f9e8c227914ac5837b67c7f626c610395", "url": "https://github.com/OpenRefine/OpenRefine/commit/92ed6f3f9e8c227914ac5837b67c7f626c610395", "message": "Test cases updated and working fine", "committedDate": "2020-07-14T19:20:02Z", "type": "commit"}, {"oid": "28908ca8028d03124ce038176ccd595d7af9d198", "url": "https://github.com/OpenRefine/OpenRefine/commit/28908ca8028d03124ce038176ccd595d7af9d198", "message": "resolved merge conflicts", "committedDate": "2020-07-15T09:23:32Z", "type": "commit"}]}