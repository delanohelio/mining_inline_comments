{"pr_number": 2870, "pr_title": "Report HTTP error codes to the user when creating a project from a URL", "pr_createdAt": "2020-07-03T13:50:31Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2870", "timeline": [{"oid": "c5bb7e116425065f61c98163a725e80cc57ac7b5", "url": "https://github.com/OpenRefine/OpenRefine/commit/c5bb7e116425065f61c98163a725e80cc57ac7b5", "message": "HTTP Error", "committedDate": "2020-07-03T15:16:25Z", "type": "forcePushed"}, {"oid": "ed4af84806826087ad582420f6e765d8f9704c8f", "url": "https://github.com/OpenRefine/OpenRefine/commit/ed4af84806826087ad582420f6e765d8f9704c8f", "message": "HTTP Error", "committedDate": "2020-07-03T15:31:14Z", "type": "forcePushed"}, {"oid": "3a6fc90f02559944cacbbe926b19d363db892086", "url": "https://github.com/OpenRefine/OpenRefine/commit/3a6fc90f02559944cacbbe926b19d363db892086", "message": "HTTP Error", "committedDate": "2020-07-03T16:22:05Z", "type": "commit"}, {"oid": "3a6fc90f02559944cacbbe926b19d363db892086", "url": "https://github.com/OpenRefine/OpenRefine/commit/3a6fc90f02559944cacbbe926b19d363db892086", "message": "HTTP Error", "committedDate": "2020-07-03T16:22:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwMjMxMA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2870#discussion_r449702310", "bodyText": "The standard way to do this is to consider anything greater or equal to 400 to be an error.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        if (statusCode / 100 != 2) {\n          \n          \n            \n                                        if (statusCode >= 400) {", "author": "tfmorris", "createdAt": "2020-07-03T20:55:34Z", "path": "main/src/com/google/refine/importing/ImportingUtilities.java", "diffHunk": "@@ -309,11 +310,18 @@ public void update(long bytesRead, long contentLength, int itemCount) {\n                         CloseableHttpResponse response = httpclient.execute(httpGet);\n \n                         try {\n-                            response.getStatusLine();\n+                            StatusLine status = response.getStatusLine();\n                             HttpEntity entity = response.getEntity();\n                             if (entity == null) {\n                                 throw new Exception(\"No content found in \" + url.toString());\n                             }\n+                            int statusCode = response.getStatusLine().getStatusCode();\n+                            if (statusCode / 100 != 2) {", "originalCommit": "3a6fc90f02559944cacbbe926b19d363db892086", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb34f64463dda97baaefc23056ccbe9c99c0758c", "chunk": "diff --git a/main/src/com/google/refine/importing/ImportingUtilities.java b/main/src/com/google/refine/importing/ImportingUtilities.java\nindex a7181309a..6b165a88e 100644\n--- a/main/src/com/google/refine/importing/ImportingUtilities.java\n+++ b/main/src/com/google/refine/importing/ImportingUtilities.java\n\n@@ -310,13 +310,13 @@ public class ImportingUtilities {\n                         CloseableHttpResponse response = httpclient.execute(httpGet);\n \n                         try {\n-                            StatusLine status = response.getStatusLine();\n                             HttpEntity entity = response.getEntity();\n                             if (entity == null) {\n                                 throw new Exception(\"No content found in \" + url.toString());\n                             }\n+                            StatusLine status = response.getStatusLine();\n                             int statusCode = response.getStatusLine().getStatusCode();\n-                            if (statusCode / 100 != 2) {\n+                            if (statusCode >= 400) {\n                                 String errorString = ParsingUtilities.inputStreamToString(entity.getContent());\n                                 String message = String.format(\"HTTP error %d : %s | %s\", statusCode,\n                                         status.getReasonPhrase(), errorString);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwMjUwMg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2870#discussion_r449702502", "bodyText": "It would be tidier to put this with the rest of the status processing code below.", "author": "tfmorris", "createdAt": "2020-07-03T20:57:02Z", "path": "main/src/com/google/refine/importing/ImportingUtilities.java", "diffHunk": "@@ -309,11 +310,18 @@ public void update(long bytesRead, long contentLength, int itemCount) {\n                         CloseableHttpResponse response = httpclient.execute(httpGet);\n \n                         try {\n-                            response.getStatusLine();\n+                            StatusLine status = response.getStatusLine();", "originalCommit": "3a6fc90f02559944cacbbe926b19d363db892086", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb34f64463dda97baaefc23056ccbe9c99c0758c", "chunk": "diff --git a/main/src/com/google/refine/importing/ImportingUtilities.java b/main/src/com/google/refine/importing/ImportingUtilities.java\nindex a7181309a..6b165a88e 100644\n--- a/main/src/com/google/refine/importing/ImportingUtilities.java\n+++ b/main/src/com/google/refine/importing/ImportingUtilities.java\n\n@@ -310,13 +310,13 @@ public class ImportingUtilities {\n                         CloseableHttpResponse response = httpclient.execute(httpGet);\n \n                         try {\n-                            StatusLine status = response.getStatusLine();\n                             HttpEntity entity = response.getEntity();\n                             if (entity == null) {\n                                 throw new Exception(\"No content found in \" + url.toString());\n                             }\n+                            StatusLine status = response.getStatusLine();\n                             int statusCode = response.getStatusLine().getStatusCode();\n-                            if (statusCode / 100 != 2) {\n+                            if (statusCode >= 400) {\n                                 String errorString = ParsingUtilities.inputStreamToString(entity.getContent());\n                                 String message = String.format(\"HTTP error %d : %s | %s\", statusCode,\n                                         status.getReasonPhrase(), errorString);\n"}}, {"oid": "c10acbfbf9fbbbf94ac844c054b8f1f72b17b437", "url": "https://github.com/OpenRefine/OpenRefine/commit/c10acbfbf9fbbbf94ac844c054b8f1f72b17b437", "message": "add test", "committedDate": "2020-07-06T09:36:46Z", "type": "forcePushed"}, {"oid": "51688c588eb16c05df8d5a5816f59f0cc45fc777", "url": "https://github.com/OpenRefine/OpenRefine/commit/51688c588eb16c05df8d5a5816f59f0cc45fc777", "message": "add test", "committedDate": "2020-07-06T09:39:41Z", "type": "forcePushed"}, {"oid": "fb34f64463dda97baaefc23056ccbe9c99c0758c", "url": "https://github.com/OpenRefine/OpenRefine/commit/fb34f64463dda97baaefc23056ccbe9c99c0758c", "message": "urlImportingTestCompleted", "committedDate": "2020-07-06T17:23:06Z", "type": "forcePushed"}, {"oid": "f16335343fbe1162c36eca708f7a6d77a736ae90", "url": "https://github.com/OpenRefine/OpenRefine/commit/f16335343fbe1162c36eca708f7a6d77a736ae90", "message": "urlImportingTestCompleted", "committedDate": "2020-07-06T17:28:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MjEyNA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2870#discussion_r450392124", "bodyText": "If no exception is thrown, this test will pass because the Assert will not be executed at all. A better way to assert that exceptions are thrown is to remove the try/catch block and to add the exception class in the @Test annotation as @Test(expectedExceptions = Exception.class)", "author": "wetneb", "createdAt": "2020-07-06T18:02:56Z", "path": "main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java", "diffHunk": "@@ -82,4 +95,75 @@ private ObjectNode getNestedOptions(ImportingJob job, TreeImportingParserBase pa\n         JSONUtilities.safePut(options, \"recordPath\", path);\n         return options;\n     }\n+\n+    private static String RESPONSE_BODY = \"{\\\"code\\\":401,\" + \"\\\"message\\\":\\\"Unauthorised\\\"\" + \"}\";\n+    private final static String MESSAGE = String.format(\"HTTP error %d : %s | %s\", 401,\n+            \"Client Error\", RESPONSE_BODY);\n+\n+    @Test\n+    public void urlImporting() {\n+\n+        try {\n+            MockWebServer server = new MockWebServer();\n+            MockResponse mockResponse = new MockResponse();\n+            mockResponse.setBody(RESPONSE_BODY);\n+            mockResponse.setResponseCode(401);\n+            server.start();\n+            server.enqueue(mockResponse);\n+            HttpUrl url = server.url(\"/random\");\n+\n+            MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n+            StringBody stringBody = new StringBody(url.toString(), ContentType.MULTIPART_FORM_DATA);\n+            builder = builder.addPart(\"download\", stringBody);\n+            HttpEntity entity = builder.build();\n+\n+            ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            entity.writeTo(os);\n+            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+\n+            HttpServletRequest req = Mockito.mock(HttpServletRequest.class);\n+            when(req.getContentType()).thenReturn(entity.getContentType().getValue());\n+            when(req.getParameter(\"download\")).thenReturn(url.toString());\n+            when(req.getMethod()).thenReturn(\"POST\");\n+            when(req.getContentLength()).thenReturn((int) entity.getContentLength());\n+            when(req.getInputStream()).thenReturn(new MockServletInputStream(is));\n+\n+\n+            ImportingJob job = ImportingManager.createJob();\n+            Properties parameters = ParsingUtilities.parseUrlParameters(req);\n+            ObjectNode retrievalRecord = ParsingUtilities.mapper.createObjectNode();\n+            ObjectNode progress = ParsingUtilities.mapper.createObjectNode();\n+            ImportingUtilities.retrieveContentFromPostRequest(req, parameters, job.getRawDataDir(), retrievalRecord, new ImportingUtilities.Progress() {\n+                @Override\n+                public void setProgress(String message, int percent) {\n+                    if (message != null) {\n+                        JSONUtilities.safePut(progress, \"message\", message);\n+                    }\n+                    JSONUtilities.safePut(progress, \"percent\", percent);\n+                }\n+\n+                @Override\n+                public boolean isCanceled() {\n+                    return job.canceled;\n+                }\n+            });\n+        } catch (Exception exception) {\n+            Assert.assertEquals(MESSAGE, exception.getMessage());", "originalCommit": "ce2152639643a5aa44df5896b34795820c300023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NDMyNQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2870#discussion_r450394325", "bodyText": "Or if you want to check the message in the exception, make sure you add an Assert.fail(\"No exception was thrown\") at the end of the try block. I would also make the try block narrower (it should just surround the call that is going to throw the exception). If there are any other methods throwing exceptions in the test you can add throws Exception to the method signature so that you do not have to catch them explicitly.", "author": "wetneb", "createdAt": "2020-07-06T18:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MjEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MzEzOQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2870#discussion_r450663139", "bodyText": "@urvashigupta7 any thoughts about this?", "author": "wetneb", "createdAt": "2020-07-07T07:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MjEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTY4Ng==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2870#discussion_r450675686", "bodyText": "Umm.. I think checking exception message would be better Because,  if we write expectedExceptions = Exception.class , the test will pass even if gets failed due to any other line which raises exception in retrieveContentFromPostRequest method.", "author": "urvashigupta7", "createdAt": "2020-07-07T07:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MjEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0NzkzMA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2870#discussion_r450747930", "bodyText": "Ah sorry I had not seen that you did add the Assert.fail and made the try block narrower. Thank you!", "author": "wetneb", "createdAt": "2020-07-07T09:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MjEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "19acdc0a1c1937f242764287eb70b4c82a10e2d2", "chunk": "diff --git a/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java b/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java\nindex a7a50101c..1b3d56636 100644\n--- a/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java\n+++ b/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java\n\n@@ -96,43 +96,43 @@ public class ImportingUtilitiesTests extends ImporterTest {\n         return options;\n     }\n \n-    private static String RESPONSE_BODY = \"{\\\"code\\\":401,\" + \"\\\"message\\\":\\\"Unauthorised\\\"\" + \"}\";\n-    private final static String MESSAGE = String.format(\"HTTP error %d : %s | %s\", 401,\n-            \"Client Error\", RESPONSE_BODY);\n-\n     @Test\n-    public void urlImporting() {\n-\n+    public void urlImporting() throws IOException {\n+\n+        String RESPONSE_BODY = \"{code:401,message:Unauthorised}\";\n+        String MESSAGE = String.format(\"HTTP error %d : %s | %s\", 401,\n+                \"Client Error\", RESPONSE_BODY);\n+\n+        MockWebServer server = new MockWebServer();\n+        MockResponse mockResponse = new MockResponse();\n+        mockResponse.setBody(RESPONSE_BODY);\n+        mockResponse.setResponseCode(401);\n+        server.start();\n+        server.enqueue(mockResponse);\n+        HttpUrl url = server.url(\"/random\");\n+\n+        MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n+        StringBody stringBody = new StringBody(url.toString(), ContentType.MULTIPART_FORM_DATA);\n+        builder = builder.addPart(\"download\", stringBody);\n+        HttpEntity entity = builder.build();\n+\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        entity.writeTo(os);\n+        ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+\n+        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);\n+        when(req.getContentType()).thenReturn(entity.getContentType().getValue());\n+        when(req.getParameter(\"download\")).thenReturn(url.toString());\n+        when(req.getMethod()).thenReturn(\"POST\");\n+        when(req.getContentLength()).thenReturn((int) entity.getContentLength());\n+        when(req.getInputStream()).thenReturn(new MockServletInputStream(is));\n+\n+\n+        ImportingJob job = ImportingManager.createJob();\n+        Properties parameters = ParsingUtilities.parseUrlParameters(req);\n+        ObjectNode retrievalRecord = ParsingUtilities.mapper.createObjectNode();\n+        ObjectNode progress = ParsingUtilities.mapper.createObjectNode();\n         try {\n-            MockWebServer server = new MockWebServer();\n-            MockResponse mockResponse = new MockResponse();\n-            mockResponse.setBody(RESPONSE_BODY);\n-            mockResponse.setResponseCode(401);\n-            server.start();\n-            server.enqueue(mockResponse);\n-            HttpUrl url = server.url(\"/random\");\n-\n-            MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n-            StringBody stringBody = new StringBody(url.toString(), ContentType.MULTIPART_FORM_DATA);\n-            builder = builder.addPart(\"download\", stringBody);\n-            HttpEntity entity = builder.build();\n-\n-            ByteArrayOutputStream os = new ByteArrayOutputStream();\n-            entity.writeTo(os);\n-            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n-\n-            HttpServletRequest req = Mockito.mock(HttpServletRequest.class);\n-            when(req.getContentType()).thenReturn(entity.getContentType().getValue());\n-            when(req.getParameter(\"download\")).thenReturn(url.toString());\n-            when(req.getMethod()).thenReturn(\"POST\");\n-            when(req.getContentLength()).thenReturn((int) entity.getContentLength());\n-            when(req.getInputStream()).thenReturn(new MockServletInputStream(is));\n-\n-\n-            ImportingJob job = ImportingManager.createJob();\n-            Properties parameters = ParsingUtilities.parseUrlParameters(req);\n-            ObjectNode retrievalRecord = ParsingUtilities.mapper.createObjectNode();\n-            ObjectNode progress = ParsingUtilities.mapper.createObjectNode();\n             ImportingUtilities.retrieveContentFromPostRequest(req, parameters, job.getRawDataDir(), retrievalRecord, new ImportingUtilities.Progress() {\n                 @Override\n                 public void setProgress(String message, int percent) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MjcxMg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2870#discussion_r450392712", "bodyText": "Since both of these variables are only used in the test below, I would just define them there. If they really need to be declared as static attributes, then they should go at the beginning of the test class. Also I would remove the + concatenation operators and just declare RESPONSE_BODY as a single string.", "author": "wetneb", "createdAt": "2020-07-06T18:04:06Z", "path": "main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java", "diffHunk": "@@ -82,4 +95,75 @@ private ObjectNode getNestedOptions(ImportingJob job, TreeImportingParserBase pa\n         JSONUtilities.safePut(options, \"recordPath\", path);\n         return options;\n     }\n+\n+    private static String RESPONSE_BODY = \"{\\\"code\\\":401,\" + \"\\\"message\\\":\\\"Unauthorised\\\"\" + \"}\";\n+    private final static String MESSAGE = String.format(\"HTTP error %d : %s | %s\", 401,\n+            \"Client Error\", RESPONSE_BODY);", "originalCommit": "ce2152639643a5aa44df5896b34795820c300023", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19acdc0a1c1937f242764287eb70b4c82a10e2d2", "chunk": "diff --git a/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java b/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java\nindex a7a50101c..1b3d56636 100644\n--- a/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java\n+++ b/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java\n\n@@ -96,43 +96,43 @@ public class ImportingUtilitiesTests extends ImporterTest {\n         return options;\n     }\n \n-    private static String RESPONSE_BODY = \"{\\\"code\\\":401,\" + \"\\\"message\\\":\\\"Unauthorised\\\"\" + \"}\";\n-    private final static String MESSAGE = String.format(\"HTTP error %d : %s | %s\", 401,\n-            \"Client Error\", RESPONSE_BODY);\n-\n     @Test\n-    public void urlImporting() {\n-\n+    public void urlImporting() throws IOException {\n+\n+        String RESPONSE_BODY = \"{code:401,message:Unauthorised}\";\n+        String MESSAGE = String.format(\"HTTP error %d : %s | %s\", 401,\n+                \"Client Error\", RESPONSE_BODY);\n+\n+        MockWebServer server = new MockWebServer();\n+        MockResponse mockResponse = new MockResponse();\n+        mockResponse.setBody(RESPONSE_BODY);\n+        mockResponse.setResponseCode(401);\n+        server.start();\n+        server.enqueue(mockResponse);\n+        HttpUrl url = server.url(\"/random\");\n+\n+        MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n+        StringBody stringBody = new StringBody(url.toString(), ContentType.MULTIPART_FORM_DATA);\n+        builder = builder.addPart(\"download\", stringBody);\n+        HttpEntity entity = builder.build();\n+\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        entity.writeTo(os);\n+        ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+\n+        HttpServletRequest req = Mockito.mock(HttpServletRequest.class);\n+        when(req.getContentType()).thenReturn(entity.getContentType().getValue());\n+        when(req.getParameter(\"download\")).thenReturn(url.toString());\n+        when(req.getMethod()).thenReturn(\"POST\");\n+        when(req.getContentLength()).thenReturn((int) entity.getContentLength());\n+        when(req.getInputStream()).thenReturn(new MockServletInputStream(is));\n+\n+\n+        ImportingJob job = ImportingManager.createJob();\n+        Properties parameters = ParsingUtilities.parseUrlParameters(req);\n+        ObjectNode retrievalRecord = ParsingUtilities.mapper.createObjectNode();\n+        ObjectNode progress = ParsingUtilities.mapper.createObjectNode();\n         try {\n-            MockWebServer server = new MockWebServer();\n-            MockResponse mockResponse = new MockResponse();\n-            mockResponse.setBody(RESPONSE_BODY);\n-            mockResponse.setResponseCode(401);\n-            server.start();\n-            server.enqueue(mockResponse);\n-            HttpUrl url = server.url(\"/random\");\n-\n-            MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n-            StringBody stringBody = new StringBody(url.toString(), ContentType.MULTIPART_FORM_DATA);\n-            builder = builder.addPart(\"download\", stringBody);\n-            HttpEntity entity = builder.build();\n-\n-            ByteArrayOutputStream os = new ByteArrayOutputStream();\n-            entity.writeTo(os);\n-            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n-\n-            HttpServletRequest req = Mockito.mock(HttpServletRequest.class);\n-            when(req.getContentType()).thenReturn(entity.getContentType().getValue());\n-            when(req.getParameter(\"download\")).thenReturn(url.toString());\n-            when(req.getMethod()).thenReturn(\"POST\");\n-            when(req.getContentLength()).thenReturn((int) entity.getContentLength());\n-            when(req.getInputStream()).thenReturn(new MockServletInputStream(is));\n-\n-\n-            ImportingJob job = ImportingManager.createJob();\n-            Properties parameters = ParsingUtilities.parseUrlParameters(req);\n-            ObjectNode retrievalRecord = ParsingUtilities.mapper.createObjectNode();\n-            ObjectNode progress = ParsingUtilities.mapper.createObjectNode();\n             ImportingUtilities.retrieveContentFromPostRequest(req, parameters, job.getRawDataDir(), retrievalRecord, new ImportingUtilities.Progress() {\n                 @Override\n                 public void setProgress(String message, int percent) {\n"}}, {"oid": "19acdc0a1c1937f242764287eb70b4c82a10e2d2", "url": "https://github.com/OpenRefine/OpenRefine/commit/19acdc0a1c1937f242764287eb70b4c82a10e2d2", "message": "urlImportingTestCompleted", "committedDate": "2020-07-07T03:15:36Z", "type": "forcePushed"}, {"oid": "89560f31d4e589987e80cae47034507dc105785b", "url": "https://github.com/OpenRefine/OpenRefine/commit/89560f31d4e589987e80cae47034507dc105785b", "message": "urlImportingTestCompleted", "committedDate": "2020-07-07T03:22:29Z", "type": "commit"}, {"oid": "89560f31d4e589987e80cae47034507dc105785b", "url": "https://github.com/OpenRefine/OpenRefine/commit/89560f31d4e589987e80cae47034507dc105785b", "message": "urlImportingTestCompleted", "committedDate": "2020-07-07T03:22:29Z", "type": "forcePushed"}, {"oid": "81fd6d250096ad52f33d9ecafc77de899b000b2c", "url": "https://github.com/OpenRefine/OpenRefine/commit/81fd6d250096ad52f33d9ecafc77de899b000b2c", "message": "Merge branch 'master' into HTTP-Error", "committedDate": "2020-07-07T03:23:49Z", "type": "commit"}]}