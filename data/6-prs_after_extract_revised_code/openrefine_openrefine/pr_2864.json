{"pr_number": 2864, "pr_title": "Implemented Difference-within-range Scrutinizer tests using mocks", "pr_createdAt": "2020-07-02T19:05:16Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2864", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyMzkwMQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#discussion_r449223901", "bodyText": "The seven lines above could be simplified by introducing a function that takes a List<Snak> and returns a List<SnakGroup> by grouping the snaks with identical properties.", "author": "wetneb", "createdAt": "2020-07-02T19:25:12Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java", "diffHunk": "@@ -19,39 +45,67 @@ public EditScrutinizer getScrutinizer() {\n     @Test\n     public void testTrigger() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(1800, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<Snak> snakList1 = Collections.singletonList(snak1);\n+        List<Snak> snakList2 = Collections.singletonList(snak2);\n+        List<Snak> snakList3 = Collections.singletonList(snak3);\n+        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n+        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n+        SnakGroup snakGroup3 = Datamodel.makeSnakGroup(snakList3);\n+        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2, snakGroup3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n+        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        setFetcher(fetcher);\n+\n         scrutinize(updateA);\n         assertWarningsRaised(DifferenceWithinRangeScrutinizer.type);\n     }\n \n     @Test\n     public void testNoIssue() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(2000, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<Snak> snakList1 = Collections.singletonList(snak1);\n+        List<Snak> snakList2 = Collections.singletonList(snak2);\n+        List<Snak> snakList3 = Collections.singletonList(snak3);\n+        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n+        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n+        SnakGroup snakGroup3 = Datamodel.makeSnakGroup(snakList3);\n+        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2, snakGroup3);", "originalCommit": "cd1128e92e3a25f6b351eeffb3d2edf3a00e123c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd00acec5bc04d54deab367c82ac411a9d88671c", "chunk": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\nindex fa1ea6a5e..e56466ef2 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\n\n@@ -53,23 +52,17 @@ public class DifferenceWithinScrutinizerTest extends ScrutinizerTest{\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n-        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n-        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n-        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n-        List<Snak> snakList1 = Collections.singletonList(snak1);\n-        List<Snak> snakList2 = Collections.singletonList(snak2);\n-        List<Snak> snakList3 = Collections.singletonList(snak3);\n-        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n-        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n-        SnakGroup snakGroup3 = Datamodel.makeSnakGroup(snakList3);\n-        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2, snakGroup3);\n-        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+        Snak propertyQualifier = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak minValueQualifier = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak maxValueQualifier = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> constraintQualifiers = makeSnakGroupList(propertyQualifier, minValueQualifier, maxValueQualifier);\n+        List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, constraintQualifiers);\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n-        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n-        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n-        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n-        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(constraintDefinitions);\n+        when(fetcher.findValues(constraintQualifiers, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(constraintQualifiers, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(constraintQualifiers, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n         setFetcher(fetcher);\n \n         scrutinize(updateA);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MTUwNA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#discussion_r449391504", "bodyText": "This could be pulled up in the ScrutinizerTest base class so that other tests can rely on it as well.", "author": "wetneb", "createdAt": "2020-07-03T06:04:08Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java", "diffHunk": "@@ -19,40 +47,78 @@ public EditScrutinizer getScrutinizer() {\n     @Test\n     public void testTrigger() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(1800, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n+        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        setFetcher(fetcher);\n+\n         scrutinize(updateA);\n         assertWarningsRaised(DifferenceWithinRangeScrutinizer.type);\n     }\n \n     @Test\n     public void testNoIssue() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(2000, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n+        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        setFetcher(fetcher);\n+\n         scrutinize(updateA);\n         assertNoWarningRaised();\n     }\n+\n+    private List<SnakGroup> makeSnakGroupList(Snak... snaks) {", "originalCommit": "0fade77b53fe54ad3c45a7b9400a31610e5524bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd00acec5bc04d54deab367c82ac411a9d88671c", "chunk": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\nindex c3af05d63..e56466ef2 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\n\n@@ -55,17 +52,17 @@ public class DifferenceWithinScrutinizerTest extends ScrutinizerTest{\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n-        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n-        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n-        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n-        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n-        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+        Snak propertyQualifier = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak minValueQualifier = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak maxValueQualifier = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> constraintQualifiers = makeSnakGroupList(propertyQualifier, minValueQualifier, maxValueQualifier);\n+        List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, constraintQualifiers);\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n-        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n-        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n-        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n-        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(constraintDefinitions);\n+        when(fetcher.findValues(constraintQualifiers, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(constraintQualifiers, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(constraintQualifiers, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n         setFetcher(fetcher);\n \n         scrutinize(updateA);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQyOTgxMA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#discussion_r449429810", "bodyText": "Same comment as before: it would be good to try to use meaningful variable names: snakGroupList could be constraintQualifiers, statementList could be constraintDefinitions, and so on :)", "author": "wetneb", "createdAt": "2020-07-03T07:45:33Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java", "diffHunk": "@@ -19,39 +44,55 @@ public EditScrutinizer getScrutinizer() {\n     @Test\n     public void testTrigger() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(1800, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n+        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        setFetcher(fetcher);\n+\n         scrutinize(updateA);\n         assertWarningsRaised(DifferenceWithinRangeScrutinizer.type);\n     }\n \n     @Test\n     public void testNoIssue() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(2000, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);", "originalCommit": "ea41039a4891e9cb7f1e272ef9858bd26bff710a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyNDM5MA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#discussion_r449524390", "bodyText": "\"There are only two hard things in Computer Science: cache invalidation and naming things.\"  ~Phil Karlton\nAnd I feel I find the 2nd one extremely hard. Sorry for this again :(", "author": "darecoder", "createdAt": "2020-07-03T11:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQyOTgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "fd00acec5bc04d54deab367c82ac411a9d88671c", "chunk": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\nindex 850b67da3..e56466ef2 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java\n\n@@ -52,17 +52,17 @@ public class DifferenceWithinScrutinizerTest extends ScrutinizerTest{\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n-        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n-        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n-        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n-        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n-        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+        Snak propertyQualifier = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak minValueQualifier = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak maxValueQualifier = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> constraintQualifiers = makeSnakGroupList(propertyQualifier, minValueQualifier, maxValueQualifier);\n+        List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, constraintQualifiers);\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n-        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n-        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n-        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n-        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(constraintDefinitions);\n+        when(fetcher.findValues(constraintQualifiers, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(constraintQualifiers, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(constraintQualifiers, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n         setFetcher(fetcher);\n \n         scrutinize(updateA);\n"}}, {"oid": "fd00acec5bc04d54deab367c82ac411a9d88671c", "url": "https://github.com/OpenRefine/OpenRefine/commit/fd00acec5bc04d54deab367c82ac411a9d88671c", "message": "Implemented Difference-within-range Scrutinizer tests using mocks\n\nUpdated all test cases and added DifferenceWithinRangeConstraint class.", "committedDate": "2020-07-03T11:08:54Z", "type": "commit"}]}