{"pr_number": 2468, "pr_title": "Support lookup by numbers for GREL cross function", "pr_createdAt": "2020-03-24T04:31:18Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2468", "timeline": [{"oid": "459524da389664446f020c28ba7d8e7fbb427fd7", "url": "https://github.com/OpenRefine/OpenRefine/commit/459524da389664446f020c28ba7d8e7fbb427fd7", "message": "support int & long argument for cross function", "committedDate": "2020-03-24T04:27:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTQ5Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2468#discussion_r397171492", "bodyText": "Hmm, I think we can relax this and just use v instance of Number ?  There will undoubtedly be some folks that want to perform lookups where the key's are potentially Double, Short, or Float additionally.  This also allow us to simplify our messaging to users.", "author": "thadguidry", "createdAt": "2020-03-24T13:56:58Z", "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -56,10 +56,8 @@ public Object call(Properties bindings, Object[] args) {\n             long targetProjectID;\n             ProjectLookup lookup;\n \n-            if (v != null &&\n-                    (v instanceof String || v instanceof WrappedCell) &&\n-                    targetProjectName != null && targetProjectName instanceof String &&\n-                    targetColumnName != null && targetColumnName instanceof String) {\n+            if ((v instanceof String || v instanceof Long || v instanceof Integer || v instanceof WrappedCell)", "originalCommit": "459524da389664446f020c28ba7d8e7fbb427fd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMjU1Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2468#discussion_r397202552", "bodyText": "Yeah, I'll make the change.", "author": "afkbrb", "createdAt": "2020-03-24T14:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNTE0MQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2468#discussion_r397205141", "bodyText": "Do you think we should also support date? It's possible that we just require the value not to be null here.", "author": "afkbrb", "createdAt": "2020-03-24T14:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNjQzMw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2468#discussion_r397206433", "bodyText": "Basically, we can support any type as long as it's valid type of a cell value.", "author": "afkbrb", "createdAt": "2020-03-24T14:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyNDk1Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2468#discussion_r397224952", "bodyText": "Correct, any valid cell type.\nHistory:\nWhat we traditionally did was try to make cross() a bit more rigid so that users didn't have to experience as much \"Ugh! My Cross is not working for some unknown reason\".\nToday:\nAnd what we have found out over time is that lookup failures are OK for users to experience, because there are lots of reasons why a cross() might fail to perform the lookup correctly due to the data quality.  For instance, any one of these kinds of errors.  So, I think we can relax the cross() completely as you suggest and have less defensive coding here for cross().\nFuture:\nInstead, we should ensure that we have much better error output for the failures of cross().  For instance, when applying a GREL expression, users have a radio button option to store error and that's where we could have cross() produce much more informative errors about the cross lookup failure similar to how other data tools work as seen in that hyperlink provided.  With that idea, I could see where users might want an enhancement for cross() to have a new boolean option for \"exact match with data type\"", "author": "thadguidry", "createdAt": "2020-03-24T15:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3MTcxMw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2468#discussion_r397671713", "bodyText": "Correct, any valid cell type.\n\nI'm also for anytype. It will give us so much possibilities, now that we can call it in Transform and that we can call it from any rows.\nFor my, a cross(false, \"TEST-Project\", \"isActive\") would give me the list of all rows that are active\u2026\nAnd, why not, a forEach(cross(false, \"TEST-Project\", \"isActive\"), vRow, if(vRow.cells[\"isAdmin\"], vRow.cells[\"FullName\"], \"\")).join(\", \") or so, wouldn't it be a sort a cross join? (more a single join with filtering\u2026 but it could be a way to use it.\n\nFuture:\nInstead, we should ensure that we have much better error output for the failures of cross(). For instance, when applying a GREL expression, users have a radio button option to store error and that's where we could have cross() produce much more informative errors about the cross lookup failure similar to how other data tools work as seen in that hyperlink provided. With that idea, I could see where users might want an enhancement for cross() to have a new boolean option for \"exact match with data type\"\n\nMore precise error reporting is always good and can save a lot of time\u2026 Good for user experience! ;-)\nI really like the way these discussion are going. Lot of interesting avenues!\nRegards, Antoine", "author": "antoine2711", "createdAt": "2020-03-25T08:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "67baa74a8a9615569d6b3529253bc1fafcb2e7dd", "chunk": "diff --git a/main/src/com/google/refine/expr/functions/Cross.java b/main/src/com/google/refine/expr/functions/Cross.java\nindex 2e5c0ebc8..5b74e3d90 100644\n--- a/main/src/com/google/refine/expr/functions/Cross.java\n+++ b/main/src/com/google/refine/expr/functions/Cross.java\n\n@@ -56,8 +56,7 @@ public class Cross implements Function {\n             long targetProjectID;\n             ProjectLookup lookup;\n \n-            if ((v instanceof String || v instanceof Long || v instanceof Integer || v instanceof WrappedCell)\n-                    && (targetProjectName instanceof String && targetColumnName instanceof String)) {\n+            if (v != null && targetProjectName instanceof String && targetColumnName instanceof String) {\n                 try {\n                     targetProjectID = ProjectManager.singleton.getProjectID((String) targetProjectName);\n                 } catch (GetProjectIDException e) {\n"}}, {"oid": "67baa74a8a9615569d6b3529253bc1fafcb2e7dd", "url": "https://github.com/OpenRefine/OpenRefine/commit/67baa74a8a9615569d6b3529253bc1fafcb2e7dd", "message": "support any types of a cell value", "committedDate": "2020-03-25T05:15:50Z", "type": "commit"}]}