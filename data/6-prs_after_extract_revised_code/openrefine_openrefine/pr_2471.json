{"pr_number": 2471, "pr_title": "[FEAT]Adds new options for split", "pr_createdAt": "2020-03-24T15:58:24Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2471", "timeline": [{"oid": "85b4523748db6b8e57619021c40a2923608607ca", "url": "https://github.com/OpenRefine/OpenRefine/commit/85b4523748db6b8e57619021c40a2923608607ca", "message": "added options ui", "committedDate": "2020-03-24T11:36:25Z", "type": "commit"}, {"oid": "ce2f8d21dead297bf5bb4677ce70cd27564426e8", "url": "https://github.com/OpenRefine/OpenRefine/commit/ce2f8d21dead297bf5bb4677ce70cd27564426e8", "message": "added definition for both separators", "committedDate": "2020-03-24T12:43:45Z", "type": "commit"}, {"oid": "3834835a7cad9bfb42e5aaaa29b80210c56631a1", "url": "https://github.com/OpenRefine/OpenRefine/commit/3834835a7cad9bfb42e5aaaa29b80210c56631a1", "message": "added tests", "committedDate": "2020-03-24T15:54:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5MDg3OQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2471#discussion_r397290879", "bodyText": "Instead of duplicating the two lines Process process = op.createProcess(project, new Properties()); and performProcessAndRespond(request, response, project, process); in each case of the if/else block, can we move them outside so that they are shared for all blocks? (The original code already had that duplication, it just feels more painful now that we have more cases)", "author": "wetneb", "createdAt": "2020-03-24T16:28:53Z", "path": "main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java", "diffHunk": "@@ -84,6 +84,20 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n                                                                          fieldLengths);\n                 Process process = op.createProcess(project, new Properties());\n                 \n+                performProcessAndRespond(request, response, project, process);\n+            } else if (\"cases\".equals(mode)) {\n+                AbstractOperation op = new MultiValuedCellSplitOperation(columnName, \n+                                                                         keyColumnName,\n+                                                                         true);\n+                Process process = op.createProcess(project, new Properties());\n+\n+                performProcessAndRespond(request, response, project, process);", "originalCommit": "3834835a7cad9bfb42e5aaaa29b80210c56631a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2Mzc1MQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2471#discussion_r397363751", "bodyText": "@wetneb Yes, I should do that.", "author": "lisa761", "createdAt": "2020-03-24T18:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5MDg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb7521bb3806ed0ec5e5f50779b8fe4f0997af9e", "chunk": "diff --git a/main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java b/main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java\nindex 2db29f583..cc0f95d7e 100644\n--- a/main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java\n+++ b/main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java\n\n@@ -66,40 +66,25 @@ public class SplitMultiValueCellsCommand extends Command {\n             String mode = request.getParameter(\"mode\");\n             Boolean regex = Boolean.parseBoolean(request.getParameter(\"regex\"));\n \n-            if (\"separator\".equals(mode)) {\n-                AbstractOperation op = new MultiValuedCellSplitOperation(columnName, \n-                                                                         keyColumnName,\n-                                                                         separator, \n-                                                                         regex);\n-                Process process = op.createProcess(project, new Properties());\n-                \n-                performProcessAndRespond(request, response, project, process);\n-            } else if (\"lengths\".equals(mode)) {\n+            AbstractOperation op;\n+\n+            if (\"lengths\".equals(mode)) {\n                 String s = request.getParameter(\"fieldLengths\");\n                 \n                 int[] fieldLengths = ParsingUtilities.mapper.readValue(s, new TypeReference<int[]>() {});\n                 \n-                AbstractOperation op = new MultiValuedCellSplitOperation(columnName,\n-                                                                         keyColumnName,\n-                                                                         fieldLengths);\n-                Process process = op.createProcess(project, new Properties());\n+                op = new MultiValuedCellSplitOperation(columnName,\n+                                                       keyColumnName,\n+                                                       fieldLengths);\n                 \n-                performProcessAndRespond(request, response, project, process);\n-            } else if (\"cases\".equals(mode)) {\n-                AbstractOperation op = new MultiValuedCellSplitOperation(columnName, \n-                                                                         keyColumnName,\n-                                                                         true);\n-                Process process = op.createProcess(project, new Properties());\n-\n-                performProcessAndRespond(request, response, project, process);\n-            } else if (\"number\".equals(mode)) {\n-                AbstractOperation op = new MultiValuedCellSplitOperation(columnName, \n-                                                                         keyColumnName,\n-                                                                         false);\n-                Process process = op.createProcess(project, new Properties());\n-\n-                performProcessAndRespond(request, response, project, process);\n-            }\n+            } else {\n+                op = new MultiValuedCellSplitOperation(columnName, \n+                                                       keyColumnName,\n+                                                       separator, \n+                                                       regex);\n+            } \n+            Process process = op.createProcess(project, new Properties());\n+            performProcessAndRespond(request, response, project, process);\n         } catch (Exception e) {\n             respondException(response, e);\n         }\n"}}, {"oid": "eb7521bb3806ed0ec5e5f50779b8fe4f0997af9e", "url": "https://github.com/OpenRefine/OpenRefine/commit/eb7521bb3806ed0ec5e5f50779b8fe4f0997af9e", "message": "removed definitions from backend and added them to frontend", "committedDate": "2020-03-24T19:08:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5OTE0NA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2471#discussion_r397399144", "bodyText": "I let the tests remain for the sake of different mode names wrt the UI.", "author": "lisa761", "createdAt": "2020-03-24T19:13:10Z", "path": "main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java", "diffHunk": "@@ -163,5 +163,54 @@ public void testSplitMultiValuedCellsLengths() throws Exception {\n         Assert.assertEquals(project.rows.get(3).getCellValue(keyCol), null);\n         Assert.assertEquals(project.rows.get(3).getCellValue(valueCol), \"four\");\n     }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsTextCase() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+            \"Value\",\n+            \"Key\",\n+            \"(?<=[a-z]|[a-z][\\\\s])(?=[A-Z])\",\n+            true);\n+        Process process = op.createProcess(project, new Properties());\n+        process.performImmediate();\n+\n+        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n+        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n+\n+        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n+        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one:two;three four;five\");\n+        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n+        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol), \"Six \");\n+        Assert.assertEquals(project.rows.get(2).getCellValue(keyCol), null);\n+        Assert.assertEquals(project.rows.get(2).getCellValue(valueCol), \"Seven\");\n+        Assert.assertEquals(project.rows.get(3).getCellValue(keyCol), null);\n+        Assert.assertEquals(project.rows.get(3).getCellValue(valueCol), \"Eight;nine91011twelve thirteen 14Fifteen\");\n+    }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsTextNumber() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+            \"Value\",\n+            \"Key\",\n+            \"(?<=[0-9]|[0-9][\\\\s])(?=[A-Z]|[a-z])|(?<=[a-z]|\\\\s|[A-Z])(?=[0-9])\",", "originalCommit": "eb7521bb3806ed0ec5e5f50779b8fe4f0997af9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7ad180a623f685eb569d8c70b0a964f072bdb6f", "chunk": "diff --git a/main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java b/main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java\nindex 53999b875..1deb0153f 100644\n--- a/main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java\n+++ b/main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java\n\n@@ -169,7 +169,7 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n         AbstractOperation op = new MultiValuedCellSplitOperation(\n             \"Value\",\n             \"Key\",\n-            \"(?<=[a-z]|[a-z][\\\\s])(?=[A-Z])\",\n+            \"(?<=[a-z]|[a-z\\\\s]|[\u00e0-\u00ff]|[\u00e0-\u00ff\\\\s])(?=[A-Z]|[\u00c0-\u00dd])\",\n             true);\n         Process process = op.createProcess(project, new Properties());\n         process.performImmediate();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxMjY2OQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2471#discussion_r400612669", "bodyText": "Test cases including accented upper and lower case characters are needed here. Probably also Unicode digits outside the 0-9 range.", "author": "tfmorris", "createdAt": "2020-03-31T02:54:49Z", "path": "main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java", "diffHunk": "@@ -163,5 +163,54 @@ public void testSplitMultiValuedCellsLengths() throws Exception {\n         Assert.assertEquals(project.rows.get(3).getCellValue(keyCol), null);\n         Assert.assertEquals(project.rows.get(3).getCellValue(valueCol), \"four\");\n     }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsTextCase() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+            \"Value\",\n+            \"Key\",\n+            \"(?<=[a-z]|[a-z][\\\\s])(?=[A-Z])\",\n+            true);\n+        Process process = op.createProcess(project, new Properties());\n+        process.performImmediate();\n+\n+        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n+        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n+\n+        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n+        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one:two;three four;five\");\n+        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n+        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol), \"Six \");\n+        Assert.assertEquals(project.rows.get(2).getCellValue(keyCol), null);\n+        Assert.assertEquals(project.rows.get(2).getCellValue(valueCol), \"Seven\");\n+        Assert.assertEquals(project.rows.get(3).getCellValue(keyCol), null);\n+        Assert.assertEquals(project.rows.get(3).getCellValue(valueCol), \"Eight;nine91011twelve thirteen 14Fifteen\");", "originalCommit": "eb7521bb3806ed0ec5e5f50779b8fe4f0997af9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7ad180a623f685eb569d8c70b0a964f072bdb6f", "chunk": "diff --git a/main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java b/main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java\nindex 53999b875..1deb0153f 100644\n--- a/main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java\n+++ b/main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java\n\n@@ -169,7 +169,7 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n         AbstractOperation op = new MultiValuedCellSplitOperation(\n             \"Value\",\n             \"Key\",\n-            \"(?<=[a-z]|[a-z][\\\\s])(?=[A-Z])\",\n+            \"(?<=[a-z]|[a-z\\\\s]|[\u00e0-\u00ff]|[\u00e0-\u00ff\\\\s])(?=[A-Z]|[\u00c0-\u00dd])\",\n             true);\n         Process process = op.createProcess(project, new Properties());\n         process.performImmediate();\n"}}, {"oid": "d1dc57dfbf68484e32bfb35d9d37c03852c958a0", "url": "https://github.com/OpenRefine/OpenRefine/commit/d1dc57dfbf68484e32bfb35d9d37c03852c958a0", "message": "added reverse order and handling for accented characters", "committedDate": "2020-04-01T17:24:12Z", "type": "commit"}, {"oid": "d7ad180a623f685eb569d8c70b0a964f072bdb6f", "url": "https://github.com/OpenRefine/OpenRefine/commit/d7ad180a623f685eb569d8c70b0a964f072bdb6f", "message": "added tests for accented characters and reverse split", "committedDate": "2020-04-01T17:58:28Z", "type": "commit"}, {"oid": "3c9ccf49a0a537656f234c33412d3b64c8d1e7eb", "url": "https://github.com/OpenRefine/OpenRefine/commit/3c9ccf49a0a537656f234c33412d3b64c8d1e7eb", "message": "fixed build errors", "committedDate": "2020-04-01T18:13:53Z", "type": "commit"}, {"oid": "78b8eb1b86a87388338e52efea8707d761c9afa2", "url": "https://github.com/OpenRefine/OpenRefine/commit/78b8eb1b86a87388338e52efea8707d761c9afa2", "message": "unicode character ranges instead", "committedDate": "2020-04-01T20:42:10Z", "type": "commit"}, {"oid": "2d10a536a590831e8b7a60c869b614975921265d", "url": "https://github.com/OpenRefine/OpenRefine/commit/2d10a536a590831e8b7a60c869b614975921265d", "message": "added examples", "committedDate": "2020-04-02T08:17:13Z", "type": "commit"}]}