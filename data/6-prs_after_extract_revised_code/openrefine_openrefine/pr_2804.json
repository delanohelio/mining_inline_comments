{"pr_number": 2804, "pr_title": "Updated Conflicts-with Scrutinizer tests using Mockito", "pr_createdAt": "2020-06-24T12:36:33Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2804", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NjYwMQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2804#discussion_r444866601", "bodyText": "Perhaps it would be worth using more informative variable names here, to emphasize the role they play in the constraint definition. You should also be able to reuse the constants declared at the beginning of ConflictsWithScrutinizer.", "author": "wetneb", "createdAt": "2020-06-24T12:45:48Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java", "diffHunk": "@@ -33,6 +45,19 @@ public void testTrigger() {\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n+        PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n+        EntityIdValue entityIdValue = Datamodel.makeWikidataItemIdValue(\"Q21502838\");\n+        PropertyIdValue property = Datamodel.makeWikidataPropertyIdValue(\"P2306\");\n+        Value propertyValue = Datamodel.makeWikidataPropertyIdValue(\"P31\");\n+        PropertyIdValue item = Datamodel.makeWikidataPropertyIdValue(\"P2305\");\n+        Value itemValue = Datamodel.makeWikidataItemIdValue(\"Q5\");", "originalCommit": "fa7f29518c2dd271ae9f42471b88b59db34e0d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9aaa4ec9ed46996397c0b877e4ed509afe44e580", "chunk": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\nindex 195ab547d..79d1947fe 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n\n@@ -31,28 +52,22 @@ public class ConflictsWithScrutinizerTest extends ScrutinizerTest {\n     public void testTrigger() {\n         ItemIdValue idA = TestingData.existingId;\n \n-        PropertyIdValue conflictsWithPid = MockConstraintFetcher.conflictsWithPid;\n-        Value conflictsWithValue = MockConstraintFetcher.conflictsWithStatementValue;\n-\n-        PropertyIdValue propertyWithConflictsPid = MockConstraintFetcher.conflictingStatementPid;\n-        Value conflictingValue  = MockConstraintFetcher.conflictingStatementValue;\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(conflictsWithPid, conflictsWithValue);\n-        ValueSnak value2 = Datamodel.makeValueSnak(propertyWithConflictsPid, conflictingValue);\n+        ValueSnak value2 = Datamodel.makeValueSnak(propertyWithConflictsPid1, conflictingValue1);\n \n-        Statement statement1 = new StatementImpl(\"P50\", value1,idA);\n+        Statement statement1 = new StatementImpl(\"P2002\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P31\", value2,idA);\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n-        PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n-        EntityIdValue entityIdValue = Datamodel.makeWikidataItemIdValue(\"Q21502838\");\n-        PropertyIdValue property = Datamodel.makeWikidataPropertyIdValue(\"P2306\");\n-        Value propertyValue = Datamodel.makeWikidataPropertyIdValue(\"P31\");\n-        PropertyIdValue item = Datamodel.makeWikidataPropertyIdValue(\"P2305\");\n-        Value itemValue = Datamodel.makeWikidataItemIdValue(\"Q5\");\n-\n-        Stream<Statement> statementStream = createStatementStream(propertyIdValue, entityIdValue, property, propertyValue, item, itemValue);\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, conflictingPropertyValue1);\n+        Snak snak2 = Datamodel.makeValueSnak(itemParameterPID, conflictingItemValue1);\n+        List<Snak> snakList1 = Collections.singletonList(snak1);\n+        List<Snak> snakList2 = Collections.singletonList(snak2);\n+        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n+        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n+        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2);\n+        Stream<Statement> statementStream = constraintParameterStatementStream(entityIdValue, snakGroupList);\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n         when(fetcher.getConstraintsByType(conflictsWithPid, \"Q21502838\")).thenReturn(statementStream);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzIxNA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2804#discussion_r444867214", "bodyText": "The first parameter could be removed since it is always going to be P2302. The name of the method could be improved to suggest that those statements are constraints definitions.", "author": "wetneb", "createdAt": "2020-06-24T12:46:58Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java", "diffHunk": "@@ -79,4 +92,33 @@ public void assertNoWarningRaised() {\n     public Set<String> getWarningTypes() {\n         return store.getWarnings().stream().map(w -> w.getType()).collect(Collectors.toSet());\n     }\n+\n+    public void setFetcher(ConstraintFetcher fetcher) {\n+        scrutinizer.setFetcher(fetcher);\n+    }\n+\n+    public Stream<Statement> createStatementStream(PropertyIdValue propertyIdValue, EntityIdValue entityIdValue, PropertyIdValue property, Value propertyValue, PropertyIdValue item, Value itemValue) {", "originalCommit": "fa7f29518c2dd271ae9f42471b88b59db34e0d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9aaa4ec9ed46996397c0b877e4ed509afe44e580", "chunk": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 133e0afbb..a3966f8f1 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n\n@@ -97,20 +96,11 @@ public abstract class ScrutinizerTest {\n         scrutinizer.setFetcher(fetcher);\n     }\n \n-    public Stream<Statement> createStatementStream(PropertyIdValue propertyIdValue, EntityIdValue entityIdValue, PropertyIdValue property, Value propertyValue, PropertyIdValue item, Value itemValue) {\n-        Snak snak = Datamodel.makeValueSnak(propertyIdValue,entityIdValue);\n+    public Stream<Statement> constraintParameterStatementStream(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n+        PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n+        Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);\n \n-        Snak snak1 = Datamodel.makeValueSnak(property, propertyValue);\n-        List<Snak> group1 = Collections.singletonList(snak1);\n-\n-        Snak snak2 = Datamodel.makeValueSnak(item, itemValue);\n-        List<Snak> group2 = Collections.singletonList(snak2);\n-\n-        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(group1);\n-        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(group2);\n-\n-        List<SnakGroup> listSnakGroup = Arrays.asList(snakGroup1, snakGroup2);\n-        Claim claim = Datamodel.makeClaim(entityIdValue, snak, listSnakGroup);\n+        Claim claim = Datamodel.makeClaim(itemIdValue, snakValue, listSnakGroup);\n \n         Reference reference = Datamodel.makeReference(listSnakGroup);\n         List<Reference> referenceList = Collections.singletonList(reference);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNTgyMg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2804#discussion_r445115822", "bodyText": "This method seems to be more generic than its name implies: it can generate any constraint definition which takes two different qualifiers as parameters.\nAlso I would make the type of the first argument more specific: because it is a value for the P2302 property, it should always be an ItemIdValue.", "author": "wetneb", "createdAt": "2020-06-24T19:17:29Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java", "diffHunk": "@@ -79,4 +92,34 @@ public void assertNoWarningRaised() {\n     public Set<String> getWarningTypes() {\n         return store.getWarnings().stream().map(w -> w.getType()).collect(Collectors.toSet());\n     }\n+\n+    public void setFetcher(ConstraintFetcher fetcher) {\n+        scrutinizer.setFetcher(fetcher);\n+    }\n+\n+    public Stream<Statement> conflictsWithParamaterStatementStream(EntityIdValue entityIdValue, PropertyIdValue property, Value propertyValue, PropertyIdValue item, Value itemValue) {", "originalCommit": "d0a0a7ab5399cc1f749a8d528313c682195d2cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9aaa4ec9ed46996397c0b877e4ed509afe44e580", "chunk": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 592020782..a3966f8f1 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n\n@@ -97,21 +96,11 @@ public abstract class ScrutinizerTest {\n         scrutinizer.setFetcher(fetcher);\n     }\n \n-    public Stream<Statement> conflictsWithParamaterStatementStream(EntityIdValue entityIdValue, PropertyIdValue property, Value propertyValue, PropertyIdValue item, Value itemValue) {\n+    public Stream<Statement> constraintParameterStatementStream(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n         PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n-        Snak snak = Datamodel.makeValueSnak(propertyIdValue,entityIdValue);\n+        Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);\n \n-        Snak snak1 = Datamodel.makeValueSnak(property, propertyValue);\n-        List<Snak> group1 = Collections.singletonList(snak1);\n-\n-        Snak snak2 = Datamodel.makeValueSnak(item, itemValue);\n-        List<Snak> group2 = Collections.singletonList(snak2);\n-\n-        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(group1);\n-        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(group2);\n-\n-        List<SnakGroup> listSnakGroup = Arrays.asList(snakGroup1, snakGroup2);\n-        Claim claim = Datamodel.makeClaim(entityIdValue, snak, listSnakGroup);\n+        Claim claim = Datamodel.makeClaim(itemIdValue, snakValue, listSnakGroup);\n \n         Reference reference = Datamodel.makeReference(listSnakGroup);\n         List<Reference> referenceList = Collections.singletonList(reference);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNTg0OQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2804#discussion_r445115849", "bodyText": "Really nice! That is exactly where the usefulness of mocking comes into play. Perhaps you could also add a test where multiple constraint definitions are present on the same property (we had found interesting examples of that on Wikidata).", "author": "wetneb", "createdAt": "2020-06-24T19:17:32Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java", "diffHunk": "@@ -70,6 +95,33 @@ public void testNoValueSnak() {\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n+        Stream<Statement> statementStream = conflictsWithParamaterStatementStream(entityIdValue, propertyParameterPID, conflictingPropertyValue, itemParameterPID, conflictingItemValue);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(conflictsWithPid, \"Q21502838\")).thenReturn(statementStream);\n+\n+        setFetcher(fetcher);\n+        scrutinize(updateA);\n+        assertNoWarningRaised();\n+    }\n+\n+    @Test\n+    public void testNoStatement() {", "originalCommit": "d0a0a7ab5399cc1f749a8d528313c682195d2cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9aaa4ec9ed46996397c0b877e4ed509afe44e580", "chunk": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\nindex fb3fe7e6a..79d1947fe 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n\n@@ -88,14 +109,21 @@ public class ConflictsWithScrutinizerTest extends ScrutinizerTest {\n         ItemIdValue idA = TestingData.existingId;\n \n         ValueSnak value1 = Datamodel.makeValueSnak(conflictsWithPid, conflictsWithValue);\n-        NoValueSnak value2 = Datamodel.makeNoValueSnak(propertyWithConflictsPid);\n+        NoValueSnak value2 = Datamodel.makeNoValueSnak(propertyWithConflictsPid1);\n \n-        Statement statement1 = new StatementImpl(\"P50\", value1,idA);\n+        Statement statement1 = new StatementImpl(\"P2002\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P31\", value2,idA);\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n-        Stream<Statement> statementStream = conflictsWithParamaterStatementStream(entityIdValue, propertyParameterPID, conflictingPropertyValue, itemParameterPID, conflictingItemValue);\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, conflictingPropertyValue1);\n+        Snak snak2 = Datamodel.makeValueSnak(itemParameterPID, conflictingItemValue1);\n+        List<Snak> snakList1 = Collections.singletonList(snak1);\n+        List<Snak> snakList2 = Collections.singletonList(snak2);\n+        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n+        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n+        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2);\n+        Stream<Statement> statementStream = constraintParameterStatementStream(entityIdValue, snakGroupList);\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n         when(fetcher.getConstraintsByType(conflictsWithPid, \"Q21502838\")).thenReturn(statementStream);\n"}}, {"oid": "9aaa4ec9ed46996397c0b877e4ed509afe44e580", "url": "https://github.com/OpenRefine/OpenRefine/commit/9aaa4ec9ed46996397c0b877e4ed509afe44e580", "message": "Implemented ConflictsWithScrutinizer tests using Mockito\n\nupdated test class by creating mocks for ConstraintFetcher\n\nImplemented tests for conflicts-with scrutinizer using mocks\n\nAdded testcase for no statementList & multiple constraint.\n\nImplemented tests using mock for conflicts-with scrutinizer\n\nImplemented tests using mock for conflicts-with scrutinizer\n\nAdded test case for multiple constraints\n\nAdded test case for multiple constraints", "committedDate": "2020-06-25T08:50:41Z", "type": "commit"}, {"oid": "3b4cd1afe8474d02afbe89217f6b02125008de9a", "url": "https://github.com/OpenRefine/OpenRefine/commit/3b4cd1afe8474d02afbe89217f6b02125008de9a", "message": "Merge branch 'master' into mocks-for-conflicts-with-scrutinizer", "committedDate": "2020-06-26T08:19:42Z", "type": "commit"}]}