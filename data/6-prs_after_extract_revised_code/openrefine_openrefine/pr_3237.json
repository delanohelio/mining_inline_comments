{"pr_number": 3237, "pr_title": "Refactor HTTP code into common module & Improve Fetch URL  - fixes #3129", "pr_createdAt": "2020-10-01T01:46:07Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/3237", "timeline": [{"oid": "0cf54c40dd3c324dc84e05970a0ee5d9fd901c99", "url": "https://github.com/OpenRefine/OpenRefine/commit/0cf54c40dd3c324dc84e05970a0ee5d9fd901c99", "message": "Update to Apache HTTP client 5.0.2", "committedDate": "2020-10-27T21:29:51Z", "type": "forcePushed"}, {"oid": "80807859645dddc622fe9a50138e33c9acc1eac5", "url": "https://github.com/OpenRefine/OpenRefine/commit/80807859645dddc622fe9a50138e33c9acc1eac5", "message": "Update to Apache HTTP client 5.0.2", "committedDate": "2020-11-03T22:50:43Z", "type": "forcePushed"}, {"oid": "9ab40f7ca254f8944ec9a8e8a1d33c853c8644b8", "url": "https://github.com/OpenRefine/OpenRefine/commit/9ab40f7ca254f8944ec9a8e8a1d33c853c8644b8", "message": "Refactor HTTP code into a common utility class\n\nCentralizes the six (slightly) different implementations to use\na common Apache HTTP Client 5 implementation which implements our\nstrategies for retries, timeouts, error handling, etc.", "committedDate": "2020-11-14T20:57:11Z", "type": "forcePushed"}, {"oid": "4d87b55015492962228704f3f36542bcaf87c52a", "url": "https://github.com/OpenRefine/OpenRefine/commit/4d87b55015492962228704f3f36542bcaf87c52a", "message": "Refactor HTTP code into a common utility class\n\nCentralizes the six (slightly) different implementations to use\na common Apache HTTP Client 5 implementation which implements our\nstrategies for retries, timeouts, error handling, etc.", "committedDate": "2020-11-14T21:24:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjYxOA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3237#discussion_r525442618", "bodyText": "I would leave this comment since this refactoring does not address this yet.", "author": "wetneb", "createdAt": "2020-11-17T19:41:38Z", "path": "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java", "diffHunk": "@@ -218,46 +203,17 @@ public ReconciledDataExtensionJob(DataExtensionConfig obj, String endpoint) {\n         return map;\n     }\n \n-    /**\n-     * @todo this should be refactored to be unified with the HTTP querying code\n-     * from StandardReconConfig. We should ideally extract a library to query\n-     * reconciliation services and expose it as such for others to reuse.\n-     */", "originalCommit": "52e9756988392572780508a84f6d2c1698176915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyOTQ2Ng==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3237#discussion_r532129466", "bodyText": "My thought here was that the refactoring in this PR was a superset of the suggest recon-only client. Is that not true? What special requirements does reconciliation have? The code that I thought the comment was referring to is just a single line now.\nThe Create Project streaming is a slightly different use, but it's already accommodated in the current code.\nI can add a version of the comment back if it's still relevant, but perhaps we should update it to reflect the current state of affairs.", "author": "tfmorris", "createdAt": "2020-11-29T01:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1NDc1NA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3237#discussion_r532154754", "bodyText": "I was thinking about a java library to query reconciliation services. You would be able to construct a reconciliation query with POJOs and send it to a service described by a URL (without having to worry about the JSON serialization of that reconciliation query, for instance). This is more high-level than a HTTP library: it would abstract away the specifics of how reconciliation clients and servers communicate over HTTP.\nSuch a library could also be the basis of a framework to build reconciliation services.", "author": "wetneb", "createdAt": "2020-11-29T04:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1NzQ3NA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3237#discussion_r532257474", "bodyText": "That sounds like it has very little, if anything to do with OpenRefine, but I'll put the comment back with a clarification that it's talking about a 3rd party library.", "author": "tfmorris", "createdAt": "2020-11-29T19:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0MTY2Ng==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3237#discussion_r537241666", "bodyText": "I've restored the comment, moved it so it's not on a single line method, and updated it with my limited understanding of what the task is. I've also rebased it to pick up the new CI code and will merge it when the tests pass.", "author": "tfmorris", "createdAt": "2020-12-07T05:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "bce3292ec3753cfd504fcddc9b86868dba34787d", "chunk": "diff --git a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java\nindex 602821d7e..86020c541 100644\n--- a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java\n+++ b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java\n\n@@ -203,17 +218,46 @@ public class ReconciledDataExtensionJob {\n         return map;\n     }\n \n-    static protected String postExtendQuery(String endpoint, String query) throws IOException {\n-        return getHttpClient().postNameValue(endpoint, \"extend\", query);\n+    /**\n+     * @todo this should be refactored to be unified with the HTTP querying code\n+     * from StandardReconConfig. We should ideally extract a library to query\n+     * reconciliation services and expose it as such for others to reuse.\n+     */\n+    \n+    static protected String performQuery(String endpoint, String query) throws IOException {\n+        HttpPost request = new HttpPost(endpoint);\n+        List<NameValuePair> body = Collections.singletonList(\n+                new BasicNameValuePair(\"extend\", query));\n+        request.setEntity(new UrlEncodedFormEntity(body, Consts.UTF_8));\n+        \n+        try (CloseableHttpResponse response = getHttpClient().execute(request)) {\n+            StatusLine statusLine = response.getStatusLine();\n+            if (statusLine.getStatusCode() >= 400) {\n+                throw new IOException(\"Data extension query failed - code: \"\n+                        + Integer.toString(statusLine.getStatusCode())\n+                        + \" message: \" + statusLine.getReasonPhrase());\n+            } else {\n+                return ParsingUtilities.inputStreamToString(response.getEntity().getContent());\n+            }\n+        }\n     }\n \n-    private static HttpClient getHttpClient() {\n-        if (httpClient == null) {\n-            httpClient = new HttpClient();\n+    private static CloseableHttpClient getHttpClient() {\n+        if (httpClient != null) {\n+            return httpClient;\n         }\n+        RequestConfig defaultRequestConfig = RequestConfig.custom()\n+                .setConnectTimeout(30 * 1000)\n+                .build();\n+\n+        HttpClientBuilder httpClientBuilder = HttpClients.custom()\n+                .setUserAgent(RefineServlet.getUserAgent())\n+                .setRedirectStrategy(new LaxRedirectStrategy())\n+                .setDefaultRequestConfig(defaultRequestConfig);\n+        httpClient = httpClientBuilder.build();\n         return httpClient;\n     }\n-\n+    \n     protected ReconciledDataExtensionJob.DataExtension collectResult(\n         ObjectNode record,\n         Map<String, ReconCandidate> reconCandidateMap\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MzkyMA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3237#discussion_r525443920", "bodyText": "I'd also leave this TODO since error reporting should not be in the server logs: users should be notified about it.", "author": "wetneb", "createdAt": "2020-11-17T19:42:43Z", "path": "main/src/com/google/refine/model/recon/StandardReconConfig.java", "diffHunk": "@@ -475,51 +463,40 @@ private CloseableHttpClient getHttpClient() {\n         stringWriter.write(\"}\");\n         String queriesString = stringWriter.toString();\n         \n-        HttpPost request = new HttpPost(service);\n-        List<NameValuePair> body = Collections.singletonList(\n-                new BasicNameValuePair(\"queries\", queriesString));\n-        request.setEntity(new UrlEncodedFormEntity(body, Consts.UTF_8));\n-        \n-        try (CloseableHttpResponse response = getHttpClient().execute(request)) {\n-            StatusLine statusLine = response.getStatusLine();\n-            if (statusLine.getStatusCode() >= 400) {\n-                logger.error(\"Failed  - code: \"\n-                        + Integer.toString(statusLine.getStatusCode())\n-                        + \" message: \" + statusLine.getReasonPhrase());\n+        try {\n+            String responseString = postQueries(service, queriesString);\n+            ObjectNode o = ParsingUtilities.evaluateJsonStringToObjectNode(responseString);\n+\n+            if (o == null) { // utility method returns null instead of throwing\n+                logger.error(\"Failed to parse string as JSON: \" + responseString);\n             } else {\n-                String s = ParsingUtilities.inputStreamToString(response.getEntity().getContent());\n-                ObjectNode o = ParsingUtilities.evaluateJsonStringToObjectNode(s);\n-                if (o == null) { // utility method returns null instead of throwing\n-                    logger.error(\"Failed to parse string as JSON: \" + s);\n-                } else {\n-                    for (int i = 0; i < jobs.size(); i++) {\n-                        StandardReconJob job = (StandardReconJob) jobs.get(i);\n-                        Recon recon = null;\n-\n-                        String text = job.text;\n-                        String key = \"q\" + i;\n-                        if (o.has(key) && o.get(key) instanceof ObjectNode) {\n-                            ObjectNode o2 = (ObjectNode) o.get(key);\n-                            if (o2.has(\"result\") && o2.get(\"result\") instanceof ArrayNode) {\n-                                ArrayNode results = (ArrayNode) o2.get(\"result\");\n-\n-                                recon = createReconServiceResults(text, results, historyEntryID);\n-                            } else {\n-                                logger.warn(\"Service error for text: \" + text + \"\\n  Job code: \" + job.code + \"\\n  Response: \" + o2.toString());\n-                            }\n+                for (int i = 0; i < jobs.size(); i++) {\n+                    StandardReconJob job = (StandardReconJob) jobs.get(i);\n+                    Recon recon = null;\n+\n+                    String text = job.text;\n+                    String key = \"q\" + i;\n+                    if (o.has(key) && o.get(key) instanceof ObjectNode) {\n+                        ObjectNode o2 = (ObjectNode) o.get(key);\n+                        if (o2.has(\"result\") && o2.get(\"result\") instanceof ArrayNode) {\n+                            ArrayNode results = (ArrayNode) o2.get(\"result\");\n+\n+                            recon = createReconServiceResults(text, results, historyEntryID);\n                         } else {\n-                            // TODO: better error reporting", "originalCommit": "52e9756988392572780508a84f6d2c1698176915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyOTk5OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3237#discussion_r532129998", "bodyText": "I think you are just seeing a diff artifact. The exact same text is a couple of lines down, but I've added a second copy.", "author": "tfmorris", "createdAt": "2020-11-29T01:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MzkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "bce3292ec3753cfd504fcddc9b86868dba34787d", "chunk": "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java\nindex 1f9f4db0d..c27e79915 100644\n--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java\n+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java\n\n@@ -463,40 +475,51 @@ public class StandardReconConfig extends ReconConfig {\n         stringWriter.write(\"}\");\n         String queriesString = stringWriter.toString();\n         \n-        try {\n-            String responseString = postQueries(service, queriesString);\n-            ObjectNode o = ParsingUtilities.evaluateJsonStringToObjectNode(responseString);\n-\n-            if (o == null) { // utility method returns null instead of throwing\n-                logger.error(\"Failed to parse string as JSON: \" + responseString);\n+        HttpPost request = new HttpPost(service);\n+        List<NameValuePair> body = Collections.singletonList(\n+                new BasicNameValuePair(\"queries\", queriesString));\n+        request.setEntity(new UrlEncodedFormEntity(body, Consts.UTF_8));\n+        \n+        try (CloseableHttpResponse response = getHttpClient().execute(request)) {\n+            StatusLine statusLine = response.getStatusLine();\n+            if (statusLine.getStatusCode() >= 400) {\n+                logger.error(\"Failed  - code: \"\n+                        + Integer.toString(statusLine.getStatusCode())\n+                        + \" message: \" + statusLine.getReasonPhrase());\n             } else {\n-                for (int i = 0; i < jobs.size(); i++) {\n-                    StandardReconJob job = (StandardReconJob) jobs.get(i);\n-                    Recon recon = null;\n-\n-                    String text = job.text;\n-                    String key = \"q\" + i;\n-                    if (o.has(key) && o.get(key) instanceof ObjectNode) {\n-                        ObjectNode o2 = (ObjectNode) o.get(key);\n-                        if (o2.has(\"result\") && o2.get(\"result\") instanceof ArrayNode) {\n-                            ArrayNode results = (ArrayNode) o2.get(\"result\");\n-\n-                            recon = createReconServiceResults(text, results, historyEntryID);\n+                String s = ParsingUtilities.inputStreamToString(response.getEntity().getContent());\n+                ObjectNode o = ParsingUtilities.evaluateJsonStringToObjectNode(s);\n+                if (o == null) { // utility method returns null instead of throwing\n+                    logger.error(\"Failed to parse string as JSON: \" + s);\n+                } else {\n+                    for (int i = 0; i < jobs.size(); i++) {\n+                        StandardReconJob job = (StandardReconJob) jobs.get(i);\n+                        Recon recon = null;\n+\n+                        String text = job.text;\n+                        String key = \"q\" + i;\n+                        if (o.has(key) && o.get(key) instanceof ObjectNode) {\n+                            ObjectNode o2 = (ObjectNode) o.get(key);\n+                            if (o2.has(\"result\") && o2.get(\"result\") instanceof ArrayNode) {\n+                                ArrayNode results = (ArrayNode) o2.get(\"result\");\n+\n+                                recon = createReconServiceResults(text, results, historyEntryID);\n+                            } else {\n+                                logger.warn(\"Service error for text: \" + text + \"\\n  Job code: \" + job.code + \"\\n  Response: \" + o2.toString());\n+                            }\n                         } else {\n-                            logger.warn(\"Service error for text: \" + text + \"\\n  Job code: \" + job.code + \"\\n  Response: \" + o2.toString());\n+                            // TODO: better error reporting\n+                            logger.warn(\"Service error for text: \" + text + \"\\n  Job code: \" + job.code);\n                         }\n-                    } else {\n-                        // TODO: better error reporting\n-                        logger.warn(\"Service error for text: \" + text + \"\\n  Job code: \" + job.code);\n-                    }\n \n-                    if (recon != null) {\n-                        recon.service = service;\n+                        if (recon != null) {\n+                            recon.service = service;\n+                        }\n+                        recons.add(recon);\n                     }\n-                    recons.add(recon);\n                 }\n             }\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             logger.error(\"Failed to batch recon with load:\\n\" + queriesString, e);\n         }\n \n"}}, {"oid": "bce3292ec3753cfd504fcddc9b86868dba34787d", "url": "https://github.com/OpenRefine/OpenRefine/commit/bce3292ec3753cfd504fcddc9b86868dba34787d", "message": "Update to Apache HTTP Client 5.x\n\nAdds support for Retry-After headers, HTTP/2, and a bunch of\nother stuff under the covers, but this is a straight 1:1\nreplacement without any functional changes unless provided\nby the default settings.", "committedDate": "2020-12-07T05:27:28Z", "type": "commit"}, {"oid": "2eceb3c401a54598be5ac9b8536ecb501bab1d91", "url": "https://github.com/OpenRefine/OpenRefine/commit/2eceb3c401a54598be5ac9b8536ecb501bab1d91", "message": "Add error checking", "committedDate": "2020-12-07T05:27:29Z", "type": "commit"}, {"oid": "f0146fd395bb426f02979cd9fde7ac2ccb77dcab", "url": "https://github.com/OpenRefine/OpenRefine/commit/f0146fd395bb426f02979cd9fde7ac2ccb77dcab", "message": "Fix request delay calculation & add more retries\n\nMoves request delay to a request interceptor and fixes calculation\nof the delay (again).\n\nIncrease retries from 1x to 3x and use delay*2 as the default\nretry interval, if no Retry-After header", "committedDate": "2020-12-07T05:27:29Z", "type": "commit"}, {"oid": "4c5cff6790b0ac1a28f454b954378df9ecb86123", "url": "https://github.com/OpenRefine/OpenRefine/commit/4c5cff6790b0ac1a28f454b954378df9ecb86123", "message": "Reuse HTTP client across requests", "committedDate": "2020-12-07T05:27:29Z", "type": "commit"}, {"oid": "5af1ecd04b14d0cfbfe1f8e5d7df42d013ee390c", "url": "https://github.com/OpenRefine/OpenRefine/commit/5af1ecd04b14d0cfbfe1f8e5d7df42d013ee390c", "message": "Add test for retries", "committedDate": "2020-12-07T05:27:29Z", "type": "commit"}, {"oid": "80ba0fc670a438b4f5ed85519dcceb8c4bd3f137", "url": "https://github.com/OpenRefine/OpenRefine/commit/80ba0fc670a438b4f5ed85519dcceb8c4bd3f137", "message": "Add exponential backup retry strategy", "committedDate": "2020-12-07T05:27:29Z", "type": "commit"}, {"oid": "7223fc50d18e3b3bc28bd07b0601f01ade2c259f", "url": "https://github.com/OpenRefine/OpenRefine/commit/7223fc50d18e3b3bc28bd07b0601f01ade2c259f", "message": "Use IOException instead of Exception for HTTP errors", "committedDate": "2020-12-07T05:27:29Z", "type": "commit"}, {"oid": "fd5d4454afc38a3206ab6983c0cf1c29a066bfca", "url": "https://github.com/OpenRefine/OpenRefine/commit/fd5d4454afc38a3206ab6983c0cf1c29a066bfca", "message": "Refactor HTTP code into a common utility class\n\nCentralizes the six (slightly) different implementations to use\na common Apache HTTP Client 5 implementation which implements our\nstrategies for retries, timeouts, error handling, etc.", "committedDate": "2020-12-07T05:27:29Z", "type": "commit"}, {"oid": "fd5d4454afc38a3206ab6983c0cf1c29a066bfca", "url": "https://github.com/OpenRefine/OpenRefine/commit/fd5d4454afc38a3206ab6983c0cf1c29a066bfca", "message": "Refactor HTTP code into a common utility class\n\nCentralizes the six (slightly) different implementations to use\na common Apache HTTP Client 5 implementation which implements our\nstrategies for retries, timeouts, error handling, etc.", "committedDate": "2020-12-07T05:27:29Z", "type": "forcePushed"}]}