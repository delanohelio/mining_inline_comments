{"pr_number": 3227, "pr_title": "Add option to import children of specific data record from OPAC", "pr_createdAt": "2020-02-25T10:31:48Z", "pr_url": "https://github.com/kitodo/kitodo-production/pull/3227", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTc4NA==", "url": "https://github.com/kitodo/kitodo-production/pull/3227#discussion_r383909784", "bodyText": "why aren't you using a forEach loop?", "author": "Kathrin-Huber", "createdAt": "2020-02-25T14:24:48Z", "path": "Kitodo/src/main/java/org/kitodo/production/forms/createprocess/CreateProcessForm.java", "diffHunk": "@@ -354,17 +363,33 @@ private void createProcessHierarchy() throws DataException, ProcessGenerationExc\n                 && !this.titleRecordLinkTab.getSelectedInsertionPosition().isEmpty()) {\n             this.processes = new LinkedList<>(Collections.singletonList(this.processes.get(0)));\n         }\n-        processProcessHierarchy();\n+        processAncestors();\n+        processChildren();\n+        // main process and it's ancestors need to be saved so they have IDs before creating their process directories\n         ServiceManager.getProcessService().save(getMainProcess());\n-        if (!createProcessesLocation()) {\n+        if (!createProcessesLocation(this.processes)) {\n             throw new IOException(\"Unable to create directories for process hierarchy!\");\n         }\n \n+        if (this.importTab.isImportChildren() && !createProcessesLocation(this.childProcesses)) {\n+            throw new IOException(\"Unable to create directories for child processes!\");\n+        }\n+\n         saveProcessHierarchyMetadata();\n-        if (ensureNonEmptyTitles()) {\n+\n+        // TODO: do the same 'ensureNonEmptyTitles' for child processes?\n+        if (ImportService.ensureNonEmptyTitles(this.processes)) {\n+            // saving the main process automatically saves it's parent and ancestor processes as well!\n             ServiceManager.getProcessService().save(getMainProcess());\n         }\n \n+        // add links between child processes and main process\n+        for (int i = 0; i < childProcesses.size(); i++) {", "originalCommit": "47efc5b2c8e0128e95ca43a56b563efc7a61f1d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ecad709af38f32a15902f94023dec163005eae0", "chunk": "diff --git a/Kitodo/src/main/java/org/kitodo/production/forms/createprocess/CreateProcessForm.java b/Kitodo/src/main/java/org/kitodo/production/forms/createprocess/CreateProcessForm.java\nindex d1df99660..e2b911a39 100644\n--- a/Kitodo/src/main/java/org/kitodo/production/forms/createprocess/CreateProcessForm.java\n+++ b/Kitodo/src/main/java/org/kitodo/production/forms/createprocess/CreateProcessForm.java\n\n@@ -384,11 +384,7 @@ public class CreateProcessForm extends BaseForm implements RulesetSetupInterface\n         }\n \n         // add links between child processes and main process\n-        for (int i = 0; i < childProcesses.size(); i++) {\n-            Process childProcess = childProcesses.get(i).getProcess();\n-            MetadataEditor.addLink(getMainProcess(), String.valueOf(i), childProcess.getId());\n-            ServiceManager.getProcessService().save(childProcess);\n-        }\n+        ImportService.saveChildProcessLinks(childProcesses, getMainProcess());\n \n         // if a process is selected in 'TitleRecordLinkTab' link it as parent with the first process in the list\n         if (this.processes.size() > 0 && Objects.nonNull(titleRecordLinkTab.getTitleRecordProcess())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxMzY5OA==", "url": "https://github.com/kitodo/kitodo-production/pull/3227#discussion_r383913698", "bodyText": "Why aren't you using a ForEach loop?", "author": "Kathrin-Huber", "createdAt": "2020-02-25T14:30:55Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -679,4 +755,239 @@ private Process loadParentProcess(HashMap<String, String> parentIDMetadata, int\n         }\n         return parentProcess;\n     }\n+\n+    /**\n+     * Check and return whether 'parentElement' has been configured for OPAC with name 'catalogName'.\n+     *\n+     * @param catalogName name of the OPAC to check\n+     * @return whether 'parentElement has been configured or not\n+     * @throws ConfigException thrown if configuration for OPAC 'catalogName' could not be found\n+     */\n+    public boolean isParentElementConfigured(String catalogName) throws ConfigException {\n+        loadOpacConfiguration(catalogName);\n+        return Objects.nonNull(OPACConfig.getParentIDElement(catalogName));\n+    }\n+\n+    /**\n+     * Create and return a List of ProcessDetail objects for the given TempProcess 'tempProcess'.\n+     *\n+     * @param tempProcess the TempProcess for which the List of ProcessDetail objects is created\n+     * @param managementInterface RulesetManagementInterface used to create the metadata of the process\n+     * @param acquisitionStage String containing the acquisitionStage\n+     * @param priorityList List of LanguageRange objects used as priority list\n+     * @return List of ProcessDetail objects\n+     * @throws InvalidMetadataValueException thrown if TempProcess contains invalid metadata\n+     * @throws NoSuchMetadataFieldException thrown if TempProcess contains undefined metadata\n+     */\n+    public static List<ProcessDetail> transformToProcessDetails(TempProcess tempProcess,\n+                                                         RulesetManagementInterface managementInterface,\n+                                                         String acquisitionStage,\n+                                                         List<Locale.LanguageRange> priorityList)\n+            throws InvalidMetadataValueException, NoSuchMetadataFieldException {\n+        ProcessFieldedMetadata metadata = initializeProcessDetails(tempProcess.getWorkpiece().getRootElement(),\n+                managementInterface, acquisitionStage, priorityList);\n+        metadata.setMetadata(ImportService.importMetadata(tempProcess.getMetadataNodes(), MdSec.DMD_SEC));\n+        metadata.preserve();\n+        return metadata.getRows();\n+    }\n+\n+    /**\n+     * Create a process title for the given TempProcess using the provided parameters.\n+     *\n+     * @param tempProcess the TempProcess for which the TifHeader is created\n+     * @param rulesetManagementInterface RulesetManagementInterface used to create TifHeader\n+     * @param acquisitionStage String containing name of acquisitionStage\n+     * @param priorityList List of LanguageRange objects used as priority list\n+     * @param processDetails List of ProcessDetail objects containing the metadata of the process\n+     * @throws ProcessGenerationException thrown if generating the Process title or the TifHeader fails\n+     */\n+    public static void createProcessTitle(TempProcess tempProcess,\n+                                            RulesetManagementInterface rulesetManagementInterface,\n+                                            String acquisitionStage, List<Locale.LanguageRange> priorityList,\n+                                            List<ProcessDetail> processDetails)\n+            throws ProcessGenerationException {\n+        String docType = tempProcess.getWorkpiece().getRootElement().getType();\n+        StructuralElementViewInterface docTypeView = rulesetManagementInterface\n+                .getStructuralElementView(docType, acquisitionStage, priorityList);\n+        String processTitle = docTypeView.getProcessTitle().orElse(\"\");\n+        ProcessService.generateProcessTitle(\"\", processDetails,\n+                processTitle, tempProcess.getProcess());\n+    }\n+\n+    /**\n+     * Create and return an instance of 'ProcessFieldedMetadata' for the given IncludedStructuralElement 'structure',\n+     * RulesetManagementInterface 'managementInterface', acquisition stage String 'stage' and List of LanguageRange\n+     * 'priorityList'.\n+     *\n+     * @param structure IncludedStructuralElement for which to create a ProcessFieldedMetadata\n+     * @param managementInterface RulesetManagementInterface used to create ProcessFieldedMetadata\n+     * @param stage String containing acquisition stage used to create ProcessFieldedMetadata\n+     * @param priorityList List of LanguageRange objects used to create ProcessFieldedMetadata\n+     * @return the created ProcessFieldedMetadata\n+     */\n+    public static ProcessFieldedMetadata initializeProcessDetails(IncludedStructuralElement structure,\n+                                                                  RulesetManagementInterface managementInterface,\n+                                                                  String stage,\n+                                                                  List<Locale.LanguageRange> priorityList) {\n+        StructuralElementViewInterface divisionView = managementInterface.getStructuralElementView(structure.getType(),\n+                stage, priorityList);\n+        return new ProcessFieldedMetadata(structure, divisionView);\n+    }\n+\n+    /**\n+     * Ensure all processes in given list 'tempProcesses' have a non empty title.\n+     *\n+     * @param tempProcesses list of TempProcesses to be checked\n+     * @return whether a title was changed or not\n+     * @throws IOException if the meta.xml file of a process could not be loaded\n+     */\n+    public static boolean ensureNonEmptyTitles(LinkedList<TempProcess> tempProcesses) throws IOException {\n+        boolean changedTitle = false;\n+        for (TempProcess tempProcess : tempProcesses) {\n+            Process process = tempProcess.getProcess();\n+            if (Objects.nonNull(process) && StringUtils.isEmpty(process.getTitle())) {\n+                // FIXME:\n+                //  if metadataFileUri is null or no meta.xml can be found, the tempProcess has not\n+                //  yet been saved to disk and contains the workpiece directly, instead!\n+                URI metadataFileUri = ServiceManager.getProcessService().getMetadataFileUri(process);\n+                Workpiece workpiece = ServiceManager.getMetsService().loadWorkpiece(metadataFileUri);\n+                Collection<Metadata> metadata = workpiece.getRootElement().getMetadata();\n+                String processTitle = \"[\" + Helper.getTranslation(\"process\") + \" \" + process.getId() + \"]\";\n+                for (Metadata metadatum : metadata) {\n+                    if (CATALOG_IDENTIFIER.equals(metadatum.getKey())) {\n+                        processTitle = ((MetadataEntry) metadatum).getValue();\n+                    }\n+                }\n+                process.setTitle(processTitle);\n+                changedTitle = true;\n+            }\n+        }\n+        return changedTitle;\n+    }\n+\n+    /**\n+     * Process list of child processes.\n+     *\n+     * @param mainProcess main process to which list of child processes are attached\n+     * @param childProcesses list of child processes that are attached to the main process\n+     * @throws DataException thrown if saving a process fails\n+     * @throws InvalidMetadataValueException thrown if process workpiece contains invalid metadata\n+     * @throws NoSuchMetadataFieldException thrown if process workpiece contains undefined metadata\n+     * @throws ProcessGenerationException thrown if process title cannot be created\n+     */\n+    public static void processProcessChildren(Process mainProcess, LinkedList<TempProcess> childProcesses,\n+                                              Template template, RulesetManagementInterface managementInterface,\n+                                              String acquisitionStage, List<Locale.LanguageRange> priorityList)\n+            throws DataException, InvalidMetadataValueException, NoSuchMetadataFieldException,\n+            ProcessGenerationException {\n+        for (int i = 0; i < childProcesses.size(); i++) {", "originalCommit": "47efc5b2c8e0128e95ca43a56b563efc7a61f1d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ecad709af38f32a15902f94023dec163005eae0", "chunk": "diff --git a/Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java b/Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java\nindex b1170b495..4eda0e781 100644\n--- a/Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java\n+++ b/Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java\n\n@@ -990,4 +991,21 @@ public class ImportService {\n         addProperties(tempProcess.getProcess(), template, processDetails, docType, tempProcess.getProcess().getTitle());\n         updateTasks(process);\n     }\n+\n+    /**\n+     * Save links between list of given child processes and given parent process.\n+     *\n+     * @param childProcesses List containing child processes to be linked to given parent process 'parent'\n+     * @param parent process to which list of given child processes are linked\n+     * @throws DataException thrown if child process could not be saved\n+     * @throws IOException thrown if link between child and parent process could not be added\n+     */\n+    public static void saveChildProcessLinks(LinkedList<TempProcess> childProcesses, Process parent) throws IOException,\n+            DataException {\n+        for (int i = 0; i < childProcesses.size(); i++) {\n+            Process childProcess = childProcesses.get(i).getProcess();\n+            MetadataEditor.addLink(parent, String.valueOf(i), childProcess.getId());\n+            ServiceManager.getProcessService().save(childProcess);\n+        }\n+    }\n }\n"}}, {"oid": "674d1b58507b884c054eba9f425deecc4aa42a5b", "url": "https://github.com/kitodo/kitodo-production/commit/674d1b58507b884c054eba9f425deecc4aa42a5b", "message": "Add missing confirmation dialog", "committedDate": "2020-02-27T15:25:21Z", "type": "forcePushed"}, {"oid": "1fa09ab21c5eb32c374c8ff92ec3e6cd7b2e29d1", "url": "https://github.com/kitodo/kitodo-production/commit/1fa09ab21c5eb32c374c8ff92ec3e6cd7b2e29d1", "message": "Add missing confirmation dialog", "committedDate": "2020-02-28T11:49:00Z", "type": "forcePushed"}, {"oid": "4a2b39f7ddb05c033803a902ccf9e8b159ed646b", "url": "https://github.com/kitodo/kitodo-production/commit/4a2b39f7ddb05c033803a902ccf9e8b159ed646b", "message": "Add missing confirmation dialog", "committedDate": "2020-03-03T09:29:54Z", "type": "forcePushed"}, {"oid": "a0b7509b34433afaf76670ce4ae97e6d55ee470d", "url": "https://github.com/kitodo/kitodo-production/commit/a0b7509b34433afaf76670ce4ae97e6d55ee470d", "message": "Add missing confirmation dialog", "committedDate": "2020-03-05T07:15:33Z", "type": "forcePushed"}, {"oid": "8ecad709af38f32a15902f94023dec163005eae0", "url": "https://github.com/kitodo/kitodo-production/commit/8ecad709af38f32a15902f94023dec163005eae0", "message": "Save main process after hierarchical import", "committedDate": "2020-03-06T11:29:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNjAzMA==", "url": "https://github.com/kitodo/kitodo-production/pull/3227#discussion_r388906030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private SearchResult searchChildRecords(String opac, String parentId, int numberOfrows) {\n          \n          \n            \n                    loadOpacConfiguration(opac);\n          \n          \n            \n                    String parenIDSearchField = OPACConfig.getParentIDElement(opac);\n          \n          \n            \n                    if (Objects.isNull(parenIDSearchField)) {\n          \n          \n            \n                        throw new ConfigException(\"Unable to find parent ID search field for catalog '\" + opac + \"'!\");\n          \n          \n            \n                    }\n          \n          \n            \n                    return performSearch(parenIDSearchField, parentId, opac, 0, numberOfrows);\n          \n          \n            \n                private SearchResult searchChildRecords(String opac, String parentId, int numberOfRows) {\n          \n          \n            \n                    loadOpacConfiguration(opac);\n          \n          \n            \n                    String parenIDSearchField = OPACConfig.getParentIDElement(opac);\n          \n          \n            \n                    if (Objects.isNull(parenIDSearchField)) {\n          \n          \n            \n                        throw new ConfigException(\"Unable to find parent ID search field for catalog '\" + opac + \"'!\");\n          \n          \n            \n                    }\n          \n          \n            \n                    return performSearch(parenIDSearchField, parentId, opac, 0, numberOfRows);", "author": "Kathrin-Huber", "createdAt": "2020-03-06T13:37:38Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -409,7 +432,64 @@ private String importProcessAndReturnParentID(String recordId, LinkedList<TempPr\n         return processes;\n     }\n \n-    private DataRecord importRecord(String opac, String identifier, boolean extractExemplars) throws NoRecordFoundException,\n+    private SearchResult searchChildRecords(String opac, String parentId, int numberOfrows) {\n+        loadOpacConfiguration(opac);\n+        String parenIDSearchField = OPACConfig.getParentIDElement(opac);\n+        if (Objects.isNull(parenIDSearchField)) {\n+            throw new ConfigException(\"Unable to find parent ID search field for catalog '\" + opac + \"'!\");\n+        }\n+        return performSearch(parenIDSearchField, parentId, opac, 0, numberOfrows);", "originalCommit": "94b2e4f7ad8b0380e108adb165b09b86adc9ec50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb78bb46cd760d0430c0cbb28ee0df54ab881b9b", "chunk": "diff --git a/Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java b/Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java\nindex 93cbf0485..fde04f880 100644\n--- a/Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java\n+++ b/Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java\n\n@@ -482,6 +481,7 @@ public class ImportService {\n         SearchResult childSearchResult = searchChildRecords(opac, elementID, rows);\n         LinkedList<TempProcess> childProcesses = new LinkedList<>();\n         for (SingleHit hit : childSearchResult.getHits()) {\n+            System.out.println(\"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() + \" child record...\");\n             Document childDocument = importDocument(opac, hit.getIdentifier(), false);\n             childProcesses.add(createTempProcessFromDocument(childDocument, templateId, projectId));\n         }\n"}}, {"oid": "bb78bb46cd760d0430c0cbb28ee0df54ab881b9b", "url": "https://github.com/kitodo/kitodo-production/commit/bb78bb46cd760d0430c0cbb28ee0df54ab881b9b", "message": "Add option to import children of specific data record from OPAC", "committedDate": "2020-03-10T09:31:18Z", "type": "commit"}, {"oid": "f7fbdb58cd81a60781e53db255162c28291da451", "url": "https://github.com/kitodo/kitodo-production/commit/f7fbdb58cd81a60781e53db255162c28291da451", "message": "Remove System.out.println", "committedDate": "2020-03-10T09:31:18Z", "type": "commit"}, {"oid": "1009b9ad608f3845b8abf65746bcb773d93c0602", "url": "https://github.com/kitodo/kitodo-production/commit/1009b9ad608f3845b8abf65746bcb773d93c0602", "message": "Add missing confirmation dialog", "committedDate": "2020-03-10T09:31:18Z", "type": "commit"}, {"oid": "fa05fc94ea93b16f90bc09e4b5b76ca260f4f4ac", "url": "https://github.com/kitodo/kitodo-production/commit/fa05fc94ea93b16f90bc09e4b5b76ca260f4f4ac", "message": "Save main process after hierarchical import", "committedDate": "2020-03-10T09:31:18Z", "type": "commit"}, {"oid": "2aead5c765c7e1e26e6b6381bce5ba44022cda11", "url": "https://github.com/kitodo/kitodo-production/commit/2aead5c765c7e1e26e6b6381bce5ba44022cda11", "message": "Overload 'findByMetadata' to allow for exact searches", "committedDate": "2020-03-10T09:31:18Z", "type": "commit"}, {"oid": "9e017c8cab5901e2804f230a37f204c39db6a709", "url": "https://github.com/kitodo/kitodo-production/commit/9e017c8cab5901e2804f230a37f204c39db6a709", "message": "Update Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java\n\nCo-Authored-By: Kathrin Huber <kathrin.huber@slub-dresden.de>", "committedDate": "2020-03-10T09:31:18Z", "type": "commit"}, {"oid": "9deb34295a173ac43a04912c80485f0bcbc368c3", "url": "https://github.com/kitodo/kitodo-production/commit/9deb34295a173ac43a04912c80485f0bcbc368c3", "message": "Fix typo", "committedDate": "2020-03-10T09:31:18Z", "type": "commit"}, {"oid": "9deb34295a173ac43a04912c80485f0bcbc368c3", "url": "https://github.com/kitodo/kitodo-production/commit/9deb34295a173ac43a04912c80485f0bcbc368c3", "message": "Fix typo", "committedDate": "2020-03-10T09:31:18Z", "type": "forcePushed"}, {"oid": "fba55878219c342a6886812ca9f4563bb5184dba", "url": "https://github.com/kitodo/kitodo-production/commit/fba55878219c342a6886812ca9f4563bb5184dba", "message": "Remove buggy ajax action listener", "committedDate": "2020-03-10T14:57:33Z", "type": "commit"}, {"oid": "535edaa978ac97874721e0d137bf896b00ee1b91", "url": "https://github.com/kitodo/kitodo-production/commit/535edaa978ac97874721e0d137bf896b00ee1b91", "message": "Refactor child import to reduce number of requests against OPAC interface", "committedDate": "2020-03-10T21:43:26Z", "type": "commit"}, {"oid": "ecb0694f2812541ec4641f6373e80a09c31761ee", "url": "https://github.com/kitodo/kitodo-production/commit/ecb0694f2812541ec4641f6373e80a09c31761ee", "message": "Add connection timeout to http client in SRUImport", "committedDate": "2020-03-10T22:07:34Z", "type": "commit"}, {"oid": "d8ec307687a31f9f7d5dae7d00478e346c931e98", "url": "https://github.com/kitodo/kitodo-production/commit/d8ec307687a31f9f7d5dae7d00478e346c931e98", "message": "Fix FacesContext null checks", "committedDate": "2020-03-11T10:33:30Z", "type": "commit"}]}