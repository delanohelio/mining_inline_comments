{"pr_number": 554, "pr_title": "refactor: Change parse line implementation", "pr_createdAt": "2020-10-13T09:15:35Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMTgyMA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554#discussion_r503801820", "bodyText": "I expect we will have a code smell about ignored return value here.", "author": "temanbrcom", "createdAt": "2020-10-13T09:25:12Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java", "diffHunk": "@@ -95,33 +99,23 @@\n     CobolLine cobolLine = new CobolLine();\n     line = getDelegate().apply(line);\n \n-    ResultWithErrors<String> result = checkLineLength(line, uri, lineNumber);\n-    String adjustedLine = result.getResult();\n-    List<SyntaxError> errors = new ArrayList<>(result.getErrors());\n-\n-    if (adjustedLine.length() > 0) {\n-      for (int i = adjustedLine.length(); i > 0; i--) {\n-        if (i > 72) {\n-          cobolLine.setCommentArea(adjustedLine.substring(72, i));\n-          i = 73;\n-        } else if (i > 11) {\n-          cobolLine.setContentAreaB(adjustedLine.substring(11, i));\n-          i = 12;\n-        } else if (i > 7) {\n-          cobolLine.setContentAreaA(adjustedLine.substring(7, i));\n-          i = 8;\n-        } else if (i > 6) {\n-          String indicatorArea = adjustedLine.substring(6, 7);\n-          ResultWithErrors<CobolLineTypeEnum> type = determineType(indicatorArea, uri, lineNumber);\n-          cobolLine.setIndicatorArea(indicatorArea);\n-          cobolLine.setType(type.getResult());\n-          errors.addAll(type.getErrors());\n-          i = 7;\n-        } else {\n-          cobolLine.setSequenceArea(adjustedLine.substring(0, i));\n-          i = 0;\n-        }\n-      }\n+    List<SyntaxError> errors = new ArrayList<>();\n+\n+    Matcher matcher = COBOL_LINE_PATTERN.matcher(line);\n+    matcher.matches();", "originalCommit": "3d8c87b99a1237ef73fe760478e326384251c888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MjU4Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554#discussion_r503892582", "bodyText": "In theory, any line must match this pattern. I'll log an error in case the line didn't match.", "author": "grianbrcom", "createdAt": "2020-10-13T12:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMTgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "661e815fc5cca4a35e11d7ded14ee54f980f88fb", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java b/server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java\nindex efad029b..9de9e100 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java\n\n@@ -102,20 +102,24 @@ public class CobolLineReaderImpl implements CobolLineReader {\n     List<SyntaxError> errors = new ArrayList<>();\n \n     Matcher matcher = COBOL_LINE_PATTERN.matcher(line);\n-    matcher.matches();\n-    cobolLine.setSequenceArea(matcher.group(\"sequence\"));\n-    String indicatorArea = matcher.group(\"indicator\");\n-    if (!indicatorArea.isEmpty()) {\n-      ResultWithErrors<CobolLineTypeEnum> type = determineType(indicatorArea, uri, lineNumber);\n-      cobolLine.setIndicatorArea(indicatorArea);\n-      cobolLine.setType(type.getResult());\n-      errors.addAll(type.getErrors());\n-    }\n-    cobolLine.setContentAreaA(matcher.group(\"contentA\"));\n-    cobolLine.setContentAreaB(matcher.group(\"contentB\"));\n-    cobolLine.setCommentArea(matcher.group(\"comment\"));\n-    if (!matcher.group(\"extra\").isEmpty()) {\n-      errors.add(createError(uri, LONG_LINE_MSG, lineNumber, MAX_LINE_LENGTH, line.length()));\n+    if (matcher.matches()) {\n+      cobolLine.setSequenceArea(matcher.group(\"sequence\"));\n+      String indicatorArea = matcher.group(\"indicator\");\n+      if (!indicatorArea.isEmpty()) {\n+        ResultWithErrors<CobolLineTypeEnum> type = determineType(indicatorArea, uri, lineNumber);\n+        cobolLine.setIndicatorArea(indicatorArea);\n+        cobolLine.setType(type.getResult());\n+        errors.addAll(type.getErrors());\n+      }\n+      cobolLine.setContentAreaA(matcher.group(\"contentA\"));\n+      cobolLine.setContentAreaB(matcher.group(\"contentB\"));\n+      cobolLine.setCommentArea(matcher.group(\"comment\"));\n+      if (!matcher.group(\"extra\").isEmpty()) {\n+        errors.add(createError(uri, LONG_LINE_MSG, lineNumber, MAX_LINE_LENGTH, line.length()));\n+      }\n+    } else {\n+      // It is impossible. Pattern must match any line.\n+      LOG.error(\"The line '{}' can't be parsed.\", line);\n     }\n \n     cobolLine.setNumber(lineNumber);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMTkyMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554#discussion_r503801923", "bodyText": "Amazing", "author": "temanbrcom", "createdAt": "2020-10-13T09:25:22Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java", "diffHunk": "@@ -43,6 +45,8 @@\n   private static final int MAX_LINE_LENGTH = 80;\n   private static final String LONG_LINE_MSG = \"Source text cannot go past column 80\";\n   private static final String INCORRECT_LINE_FORMAT_MSG = \"Unexpected indicator area content\";\n+  private static final Pattern COBOL_LINE_PATTERN = Pattern.compile(\n+      \"^(?<sequence>.{0,6})(?<indicator>.?)(?<contentA>.{0,4})(?<contentB>.{0,61})(?<comment>.{0,8})(?<extra>.*)$\");", "originalCommit": "3d8c87b99a1237ef73fe760478e326384251c888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0ODI0Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554#discussion_r503848243", "bodyText": "Beautiful mind", "author": "asatklichov", "createdAt": "2020-10-13T10:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMTkyMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "661e815fc5cca4a35e11d7ded14ee54f980f88fb", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/661e815fc5cca4a35e11d7ded14ee54f980f88fb", "message": "refactor: Change parse line implementation\n\nUsing regex for parse cobol line structure\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>", "committedDate": "2020-10-13T11:58:50Z", "type": "commit"}, {"oid": "661e815fc5cca4a35e11d7ded14ee54f980f88fb", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/661e815fc5cca4a35e11d7ded14ee54f980f88fb", "message": "refactor: Change parse line implementation\n\nUsing regex for parse cobol line structure\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>", "committedDate": "2020-10-13T11:58:50Z", "type": "forcePushed"}]}