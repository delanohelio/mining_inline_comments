{"pr_number": 172, "pr_title": "141 dep file management", "pr_createdAt": "2020-02-02T10:50:42Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172", "timeline": [{"oid": "021a9828616f367e541654c441402a3ec339ca1e", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/021a9828616f367e541654c441402a3ec339ca1e", "message": "Introduce new event RUN_ANALYSIS covered by unit test", "committedDate": "2020-01-16T07:59:32Z", "type": "commit"}, {"oid": "feb936585b6af83496e276bd3f7d63b7a7743826", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/feb936585b6af83496e276bd3f7d63b7a7743826", "message": "Generation dummy cobdeps folder with dep file for e2e test purpose", "committedDate": "2020-01-16T08:14:36Z", "type": "commit"}, {"oid": "b23c0f730a6fd18424bc92cac00a98ace551380b", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b23c0f730a6fd18424bc92cac00a98ace551380b", "message": "Definition test class to cover end to end subscribe, unsubscribe and publish", "committedDate": "2020-01-16T08:49:14Z", "type": "commit"}, {"oid": "e1b4d208f6f0f9a8c4f012b9075f8cbc27fbb5f6", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e1b4d208f6f0f9a8c4f012b9075f8cbc27fbb5f6", "message": "Introduce unit test for dep file management", "committedDate": "2020-01-24T09:01:28Z", "type": "commit"}, {"oid": "304b4f964642e3fede7e84a40f9892889030ae47", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/304b4f964642e3fede7e84a40f9892889030ae47", "message": "Refine implementation for a better error management in folder and dep file creation/update", "committedDate": "2020-01-28T14:23:19Z", "type": "commit"}, {"oid": "797746d138d63952fe7e28d866d57f1ca506c413", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/797746d138d63952fe7e28d866d57f1ca506c413", "message": "Merge remote-tracking branch 'remotes/origin/development' into 141_DepFileManagement\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/api/CopybookEventFactory.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/factory/RunAnalysisSubscriberFactory.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/impl/RunAnalysisEventSubscriber.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/model/DataEventType.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/model/RunAnalysisEvent.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/event/CopybookEventSubscribersTest.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/event/CopybookEventsTest.java\n#\tcom.ca.lsp.cobol/lsp-service-cobol/pom.xml\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/WorkspaceServiceTest.java", "committedDate": "2020-01-28T15:14:25Z", "type": "commit"}, {"oid": "44f96bbc344991f5ab44615edc6617d67189a973", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/44f96bbc344991f5ab44615edc6617d67189a973", "message": "Adjustment after merge with development branch", "committedDate": "2020-01-29T07:16:45Z", "type": "commit"}, {"oid": "e4d0c85621993867570c1a8a35e19efbe8249d31", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e4d0c85621993867570c1a8a35e19efbe8249d31", "message": "Fix search for copybook only in COPYBOOKS folder", "committedDate": "2020-01-29T07:30:31Z", "type": "commit"}, {"oid": "cdf75e221d57fb1201b5f3022655108dda4839e7", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/cdf75e221d57fb1201b5f3022655108dda4839e7", "message": "Update header and provide E2E integration test for FileSystemService with databus", "committedDate": "2020-01-29T14:53:09Z", "type": "commit"}, {"oid": "948cdf18150575154070d8fbd0d3d528d5145596", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/948cdf18150575154070d8fbd0d3d528d5145596", "message": "Merge remote-tracking branch 'remotes/origin/development' into 141_DepFileManagement\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/usecases/AnalyzeCopybookCaching.java", "committedDate": "2020-01-29T15:03:59Z", "type": "commit"}, {"oid": "b38f8a70c7d877a63be3b3580759cf3a9321c6ad", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b38f8a70c7d877a63be3b3580759cf3a9321c6ad", "message": "Consume documentURI information sent on the databus by the preprocessor in order to generate dependency files with the same name as the cobol file scanned by the preprocessor.", "committedDate": "2020-01-29T15:59:27Z", "type": "commit"}, {"oid": "c411fbcb268497a965fd1ede188ba54fc8e64d57", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/c411fbcb268497a965fd1ede188ba54fc8e64d57", "message": "Modify write function to address issues related to the concurrent writing", "committedDate": "2020-01-30T17:17:02Z", "type": "commit"}, {"oid": "ecf643c0f789e90ec1142e4b5736de9427261cea", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ecf643c0f789e90ec1142e4b5736de9427261cea", "message": "Fix failed test after the introduction of DocumentURI and improved write dependency of file checking for not empty values", "committedDate": "2020-01-31T09:09:30Z", "type": "commit"}, {"oid": "4809f9471923367ae12edc9ac4c5fdf3a3939caa", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4809f9471923367ae12edc9ac4c5fdf3a3939caa", "message": "Improve create and write on dependency file, cover edge cases that can happen due to failed sync with the filesystem", "committedDate": "2020-01-31T11:06:14Z", "type": "commit"}, {"oid": "489aa7b5b59c9f96571d26f2e5fcc1fa825adb6f", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/489aa7b5b59c9f96571d26f2e5fcc1fa825adb6f", "message": "Add notification message related to gitfs unsupported filesystem", "committedDate": "2020-02-02T09:26:09Z", "type": "commit"}, {"oid": "622c2f02756c07797b03159cec43fe66670908da", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/622c2f02756c07797b03159cec43fe66670908da", "message": "Merge remote-tracking branch 'remotes/origin/development' into 141_DepFileManagement\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java", "committedDate": "2020-02-02T09:29:16Z", "type": "commit"}, {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/bb6cb57467192dc724fb5be3ceb958f35027fac3", "message": "Fix duplicates in pom, removed old TODO and unused variables", "committedDate": "2020-02-02T11:15:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5Mzk1Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373993952", "bodyText": "if you will apply changes please change the copyright year as well", "author": "sergiuilie", "createdAt": "2020-02-03T09:23:40Z", "path": "com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusConfigProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2019 Broadcom.", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODgzNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374008836", "bodyText": "\ud83d\udc4c", "author": "zacanbrcom", "createdAt": "2020-02-03T09:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5Mzk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusConfigProvider.java b/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusConfigProvider.java\nindex a364476b..50af8a28 100644\n--- a/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusConfigProvider.java\n+++ b/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusConfigProvider.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019 Broadcom.\n+ * Copyright (c) 2020 Broadcom.\n  *\n  * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5Nzc1Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373997756", "bodyText": "create final variables for the string used in the condition", "author": "sergiuilie", "createdAt": "2020-02-03T09:31:47Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java", "diffHunk": "@@ -137,9 +138,14 @@\n         .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"formatting\", uri)));\n   }\n \n+  @SneakyThrows\n   @Override\n   public void didOpen(DidOpenTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n+    if (uri.startsWith(\"gitfs:/\")) {", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java b/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java\nindex 8787ec97..f978b8bd 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java\n\n@@ -142,8 +143,8 @@ public class MyTextDocumentService implements TextDocumentService, EventObserver\n   @Override\n   public void didOpen(DidOpenTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n-    if (uri.startsWith(\"gitfs:/\")) {\n-      communications.notifyThatExtensionIsUnsupported(\"git filesysem\");\n+    if (uri.startsWith(GIT_FS_URI)) {\n+      // communications.notifyThatExtensionIsUnsupported(\"git filesystem\");\n     }\n \n     String text = params.getTextDocument().getText();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDA4NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374000085", "bodyText": "how do you value this test? if I delete one call from the tests they are still passing, what is the output here?", "author": "sergiuilie", "createdAt": "2020-02-03T09:36:48Z", "path": "com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusEventSubscriptionE2ETest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.broadcom.lsp.domain.cobol.databus.impl;\n+\n+import com.broadcom.lsp.domain.cobol.event.model.DataEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Test;\n+\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * This class contains all the unit tests related to the pubblish/subscribe pattern handled by the\n+ * databus.\n+ */\n+@Slf4j\n+public class DatabusEventSubscriptionE2ETest extends DatabusConfigProvider {", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMTI5NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374011294", "bodyText": "This test verify that if the client subscribed to an event is also able to receive that event. I made one unit test for positive and negative scenarios, each of them test all the available events.", "author": "zacanbrcom", "createdAt": "2020-02-03T09:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusEventSubscriptionE2ETest.java b/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusEventSubscriptionE2ETest.java\nindex 6f9a7954..2bdb6719 100644\n--- a/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusEventSubscriptionE2ETest.java\n+++ b/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusEventSubscriptionE2ETest.java\n\n@@ -31,9 +31,19 @@ public class DatabusEventSubscriptionE2ETest extends DatabusConfigProvider {\n   @Test\n   @SneakyThrows\n   public void databusSubscriptionPositiveTest() {\n+    /*\n+     This positive test verify that a class subscribed to a specific DataEventType got a notification about that event.\n+     The main flow is explained below:\n+       1. The client (our unit class for this example) subscribes itself for an event using the method subscribeTo(theEvent)\n+       2. The unit class publish a message on the database of theEvent type and wait for a while using the Waiter\n+       3. The observerCallback() of the unit class is triggered (because subscribed on the event published on the databus)\n+       4. The callback verify that the event received is exactly the one that is looking for\n+       5. It's the same kind of event so will resume the waiter and the test will be ended successfully.\n+    */\n+\n     try {\n       databusSubscriptionForPositiveScenario(\n-          DataEventType.REQUIRED_COPYBOOK_EVENT, DataEventType.REQUIRED_COPYBOOK_EVENT);\n+          DataEventType.REQUIRED_COPYBOOK_EVENT, DataEventType.FETCHED_COPYBOOK_EVENT);\n       databusSubscriptionForPositiveScenario(\n           DataEventType.FETCHED_COPYBOOK_EVENT, DataEventType.FETCHED_COPYBOOK_EVENT);\n       databusSubscriptionForPositiveScenario(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDU4MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374000580", "bodyText": "FileSystemConfigurationTest", "author": "sergiuilie", "createdAt": "2020-02-03T09:37:56Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Slf4j\n+public class FileSystemConfiguration extends ConfigurableTest {", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODYxNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374008614", "bodyText": "The purpose of this class is to act as a provider for methods reused in other unit tests.\nHave nothing to test so I marked intentionally without ''Test'' in the name.\nI will add a comment next to the class to clarify that", "author": "zacanbrcom", "createdAt": "2020-02-03T09:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\nindex 822f9687..15effa6b 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n\n@@ -30,6 +30,10 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n+/**\n+ * This class provide support methods for FileSystemService and doesn't test anything. More in\n+ * detail create the workspace folder in the user tmp folder with some copybooks there\n+ */\n @Slf4j\n public class FileSystemConfiguration extends ConfigurableTest {\n   protected static final String COPYBOOK_CONTENT =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDQ3MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373994470", "bodyText": "I think this entire interface should be also removed", "author": "temanbrcom", "createdAt": "2020-02-03T09:24:50Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceService.java", "diffHunk": "@@ -17,18 +17,11 @@\n \n import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n-import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.eclipse.lsp4j.services.WorkspaceService;\n \n import java.io.IOException;\n-import java.nio.file.Path;\n-import java.util.List;\n \n public interface CobolWorkspaceService", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMDY4Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374030682", "bodyText": "Agree, but @sergiuilie also have to integrate some functionalities here. So in order to avoid any merge conflicts I'll wait for sergiu's merge and after that I will create an issue to get rid of this class and fix the related unit tests.\nLet me know if is ok.", "author": "zacanbrcom", "createdAt": "2020-02-03T10:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDQ3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NjM3OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373996379", "bodyText": "Seems like there was some problem with the copying of this comment", "author": "temanbrcom", "createdAt": "2020-02-03T09:28:52Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Singleton\n+@Slf4j\n+public class FileSystemServiceImpl implements FileSystemService {\n+  private static final String COBDEPS = \".cobdeps\";\n+  private static final String COPYBOOK_FOLDER_NAME = \"COPYBOOKS\";\n+  public static final String DEP_EXTENSION = \".dep\";\n+  private final DefaultDataBusBroker dataBus;\n+  private List<WorkspaceFolder> workspaceFolders;\n+\n+  @Inject\n+  public FileSystemServiceImpl(DefaultDataBusBroker dataBus) {\n+    this.dataBus = dataBus;\n+    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n+  }\n+\n+  /**\n+   * Store the informations about the workspace folder defined by the client IDE\n+   *\n+   * @param workspaceFolders list of workspace folders sent by the client to the server\n+   */\n+  @Override\n+  public void setWorkspaceFolders(List<WorkspaceFolder> workspaceFolders) {\n+    this.workspaceFolders = workspaceFolders;\n+  }\n+\n+  /**\n+   * @param copybookName (i.e. COPYTEST)\n+   * @return String that represent the content of a found copybook under the workspace folder or\n+   *     null if copybook is not found\n+   */\n+  @Override\n+  public String getContentByCopybookName(String copybookName) {\n+    return Optional.ofNullable(getPathByCopybookName(copybookName))\n+        .map(this::retrieveContentByPath)\n+        .orElse(null);\n+  }\n+\n+  /**", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java b/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\nindex 72f4dc44..cbddaccb 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\n\n@@ -15,18 +15,18 @@\n  */\n package com.ca.lsp.cobol.service;\n \n-import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.google.common.annotations.Beta;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n+import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.io.FilenameUtils;\n import org.eclipse.lsp4j.WorkspaceFolder;\n \n-import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import java.io.File;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NzE5OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373997199", "bodyText": "Please, make this check case insensitive and extract the list as a class field", "author": "temanbrcom", "createdAt": "2020-02-03T09:30:35Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Singleton\n+@Slf4j\n+public class FileSystemServiceImpl implements FileSystemService {\n+  private static final String COBDEPS = \".cobdeps\";\n+  private static final String COPYBOOK_FOLDER_NAME = \"COPYBOOKS\";\n+  public static final String DEP_EXTENSION = \".dep\";\n+  private final DefaultDataBusBroker dataBus;\n+  private List<WorkspaceFolder> workspaceFolders;\n+\n+  @Inject\n+  public FileSystemServiceImpl(DefaultDataBusBroker dataBus) {\n+    this.dataBus = dataBus;\n+    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n+  }\n+\n+  /**\n+   * Store the informations about the workspace folder defined by the client IDE\n+   *\n+   * @param workspaceFolders list of workspace folders sent by the client to the server\n+   */\n+  @Override\n+  public void setWorkspaceFolders(List<WorkspaceFolder> workspaceFolders) {\n+    this.workspaceFolders = workspaceFolders;\n+  }\n+\n+  /**\n+   * @param copybookName (i.e. COPYTEST)\n+   * @return String that represent the content of a found copybook under the workspace folder or\n+   *     null if copybook is not found\n+   */\n+  @Override\n+  public String getContentByCopybookName(String copybookName) {\n+    return Optional.ofNullable(getPathByCopybookName(copybookName))\n+        .map(this::retrieveContentByPath)\n+        .orElse(null);\n+  }\n+\n+  /**\n+   * From a given copybook name (without file extension) this method will return the URI of the file\n+   * * - if exists\n+   *\n+   * @param fileName (i.e. COPYTEST)\n+   * @return URI of file (i.e. file:///C:/Users/test/AppData/Local/Temp/WORKSPACE/COPYTEST.cpy) or *\n+   *     null if not found. This case should be covered by an appropriate diagnostic message * using\n+   *     the Communication service delegate object\n+   */\n+  protected Path getPathByCopybookName(String fileName) {\n+    return workspaceFoldersAsPathList().stream()\n+        .map(it -> searchInDirectory(fileName, it))\n+        .map(it -> it.orElse(null))\n+        .filter(Objects::nonNull)\n+        .findAny()\n+        .orElse(null);\n+  }\n+\n+  private List<Path> workspaceFoldersAsPathList() {\n+    return getWorkspaceFolders().stream()\n+        .map(this::getPathFromWorkspaceFolder)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private List<WorkspaceFolder> getWorkspaceFolders() {\n+    return workspaceFolders;\n+  }\n+\n+  /**\n+   * @param it workspace folder\n+   * @return the Path of the workspace folder\n+   * @throws IllegalArgumentException if the URI of WorkspaceFolder is not valid\n+   */\n+  @Nonnull\n+  private Path getPathFromWorkspaceFolder(WorkspaceFolder it) {\n+    try {\n+      return Paths.get(new URI(it.getUri()));\n+    } catch (URISyntaxException e) {\n+      throw new IllegalArgumentException(\"Workspace URI not valid\");\n+    }\n+  }\n+\n+  /**\n+   * Delegated method to search in directory\n+   *\n+   * @param fileName name provided by preprocessor\n+   * @param workspaceFolderPath NIO Path of workspace folder\n+   * @return a valid path of the copybook file or null if not found\n+   */\n+  private Optional<Path> searchInDirectory(String fileName, Path workspaceFolderPath) {\n+    return Optional.ofNullable(applySearch(fileName, getCopybookFolderPath(workspaceFolderPath)));\n+  }\n+\n+  private Path getCopybookFolderPath(Path workspaceFolderPath) {\n+    return Paths.get(workspaceFolderPath + filesystemSeparator() + COPYBOOK_FOLDER_NAME);\n+  }\n+\n+  /**\n+   * @param fileName copybook name\n+   * @param workspaceFolderPath physical path of workspace where to search for the copybook\n+   * @return Path of the found copybook in the workspace folder\n+   */\n+  private Path applySearch(String fileName, Path workspaceFolderPath) {\n+    try (Stream<Path> pathStream =\n+        Files.find(\n+            workspaceFolderPath,\n+            100,\n+            (path, basicFileAttributes) -> {\n+              File resFile = path.toFile();\n+              return resFile.isFile()\n+                  && !resFile.isDirectory()\n+                  && resFile.getName().contains(\".\")\n+                  && resFile\n+                      .getName()\n+                      .substring(0, resFile.getName().lastIndexOf('.'))\n+                      .equalsIgnoreCase(fileName)\n+                  && isValidExtension(resFile.getAbsoluteFile().toString().toLowerCase());\n+            },\n+            FileVisitOption.FOLLOW_LINKS)) {\n+      return pathStream.findAny().orElse(null);\n+    } catch (IOException e) {\n+      log.error(\"[copybook not found in copybook folder]\" + e.getLocalizedMessage());\n+      return null;\n+    }\n+  }\n+\n+  private boolean isValidExtension(String filePath) {", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java b/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\nindex 72f4dc44..cbddaccb 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\n\n@@ -15,18 +15,18 @@\n  */\n package com.ca.lsp.cobol.service;\n \n-import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.google.common.annotations.Beta;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n+import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.io.FilenameUtils;\n import org.eclipse.lsp4j.WorkspaceFolder;\n \n-import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import java.io.File;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5ODQ1NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373998454", "bodyText": "I think that null check for cobolFileName is required here", "author": "temanbrcom", "createdAt": "2020-02-03T09:33:18Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Singleton\n+@Slf4j\n+public class FileSystemServiceImpl implements FileSystemService {\n+  private static final String COBDEPS = \".cobdeps\";\n+  private static final String COPYBOOK_FOLDER_NAME = \"COPYBOOKS\";\n+  public static final String DEP_EXTENSION = \".dep\";\n+  private final DefaultDataBusBroker dataBus;\n+  private List<WorkspaceFolder> workspaceFolders;\n+\n+  @Inject\n+  public FileSystemServiceImpl(DefaultDataBusBroker dataBus) {\n+    this.dataBus = dataBus;\n+    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n+  }\n+\n+  /**\n+   * Store the informations about the workspace folder defined by the client IDE\n+   *\n+   * @param workspaceFolders list of workspace folders sent by the client to the server\n+   */\n+  @Override\n+  public void setWorkspaceFolders(List<WorkspaceFolder> workspaceFolders) {\n+    this.workspaceFolders = workspaceFolders;\n+  }\n+\n+  /**\n+   * @param copybookName (i.e. COPYTEST)\n+   * @return String that represent the content of a found copybook under the workspace folder or\n+   *     null if copybook is not found\n+   */\n+  @Override\n+  public String getContentByCopybookName(String copybookName) {\n+    return Optional.ofNullable(getPathByCopybookName(copybookName))\n+        .map(this::retrieveContentByPath)\n+        .orElse(null);\n+  }\n+\n+  /**\n+   * From a given copybook name (without file extension) this method will return the URI of the file\n+   * * - if exists\n+   *\n+   * @param fileName (i.e. COPYTEST)\n+   * @return URI of file (i.e. file:///C:/Users/test/AppData/Local/Temp/WORKSPACE/COPYTEST.cpy) or *\n+   *     null if not found. This case should be covered by an appropriate diagnostic message * using\n+   *     the Communication service delegate object\n+   */\n+  protected Path getPathByCopybookName(String fileName) {\n+    return workspaceFoldersAsPathList().stream()\n+        .map(it -> searchInDirectory(fileName, it))\n+        .map(it -> it.orElse(null))\n+        .filter(Objects::nonNull)\n+        .findAny()\n+        .orElse(null);\n+  }\n+\n+  private List<Path> workspaceFoldersAsPathList() {\n+    return getWorkspaceFolders().stream()\n+        .map(this::getPathFromWorkspaceFolder)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private List<WorkspaceFolder> getWorkspaceFolders() {\n+    return workspaceFolders;\n+  }\n+\n+  /**\n+   * @param it workspace folder\n+   * @return the Path of the workspace folder\n+   * @throws IllegalArgumentException if the URI of WorkspaceFolder is not valid\n+   */\n+  @Nonnull\n+  private Path getPathFromWorkspaceFolder(WorkspaceFolder it) {\n+    try {\n+      return Paths.get(new URI(it.getUri()));\n+    } catch (URISyntaxException e) {\n+      throw new IllegalArgumentException(\"Workspace URI not valid\");\n+    }\n+  }\n+\n+  /**\n+   * Delegated method to search in directory\n+   *\n+   * @param fileName name provided by preprocessor\n+   * @param workspaceFolderPath NIO Path of workspace folder\n+   * @return a valid path of the copybook file or null if not found\n+   */\n+  private Optional<Path> searchInDirectory(String fileName, Path workspaceFolderPath) {\n+    return Optional.ofNullable(applySearch(fileName, getCopybookFolderPath(workspaceFolderPath)));\n+  }\n+\n+  private Path getCopybookFolderPath(Path workspaceFolderPath) {\n+    return Paths.get(workspaceFolderPath + filesystemSeparator() + COPYBOOK_FOLDER_NAME);\n+  }\n+\n+  /**\n+   * @param fileName copybook name\n+   * @param workspaceFolderPath physical path of workspace where to search for the copybook\n+   * @return Path of the found copybook in the workspace folder\n+   */\n+  private Path applySearch(String fileName, Path workspaceFolderPath) {\n+    try (Stream<Path> pathStream =\n+        Files.find(\n+            workspaceFolderPath,\n+            100,\n+            (path, basicFileAttributes) -> {\n+              File resFile = path.toFile();\n+              return resFile.isFile()\n+                  && !resFile.isDirectory()\n+                  && resFile.getName().contains(\".\")\n+                  && resFile\n+                      .getName()\n+                      .substring(0, resFile.getName().lastIndexOf('.'))\n+                      .equalsIgnoreCase(fileName)\n+                  && isValidExtension(resFile.getAbsoluteFile().toString().toLowerCase());\n+            },\n+            FileVisitOption.FOLLOW_LINKS)) {\n+      return pathStream.findAny().orElse(null);\n+    } catch (IOException e) {\n+      log.error(\"[copybook not found in copybook folder]\" + e.getLocalizedMessage());\n+      return null;\n+    }\n+  }\n+\n+  private boolean isValidExtension(String filePath) {\n+    List<String> validExtensions = Arrays.asList(\"cpy\", \"cbl\", \"cobol\", \"cob\");\n+    return validExtensions.stream()\n+        .anyMatch(ext -> ext.equals(filePath.substring(filePath.lastIndexOf('.') + 1)));\n+  }\n+\n+  /**\n+   * @param uriForFileName of copybook found under workspace folder\n+   * @return content of the file as String content\n+   */\n+  @Nullable\n+  private String retrieveContentByPath(Path uriForFileName) {\n+    String content = null;\n+    try (Stream<String> stream = Files.lines(uriForFileName)) {\n+      content = stream.reduce((s1, s2) -> s1 + \"\\r\\n\" + s2).orElse(null);\n+    } catch (IOException e) {\n+      log.error(\"[retrieve content by path]\" + Arrays.toString(e.getStackTrace()));\n+    }\n+    return content;\n+  }\n+\n+  /** create the task and pass it to the executor service */\n+  @Override\n+  public void observerCallback(RequiredCopybookEvent event) {\n+    String requiredCopybookName = event.getName();\n+    Path path = getPathByCopybookName(requiredCopybookName);\n+    String content = Optional.ofNullable(path).map(this::retrieveContentByPath).orElse(null);\n+\n+    addCopybookInDepFile(requiredCopybookName, event.getDocumentUri());\n+\n+    dataBus.postData(\n+        FetchedCopybookEvent.builder()\n+            .name(requiredCopybookName)\n+            .uri(Optional.ofNullable(path).map(Path::toUri).map(URI::toString).orElse(null))\n+            .content(content)\n+            .build());\n+  }\n+\n+  @Beta\n+  void addCopybookInDepFile(String requiredCopybookName, String documentUri) {\n+    String cobolFileName = getCobolFileNameFromUri(documentUri);\n+    Path dependencyFolder = initializeDependencyFolder();\n+    Path dependencyFile = retrieveDependencyFile(dependencyFolder, cobolFileName);\n+\n+    if (!depFileExists(dependencyFile)) {\n+      generateDependencyFile(cobolFileName, dependencyFolder);\n+    }\n+    // check why dependency file path is sometimes null\n+    updateDependencyList(dependencyFile, requiredCopybookName);\n+  }\n+\n+  private String getCobolFileNameFromUri(String documentUri) {\n+    String result = null;\n+    try {\n+      result = FilenameUtils.getBaseName(Paths.get(new URI(documentUri)).getFileName().toString());\n+    } catch (URISyntaxException e) {\n+      log.error(\"URI not found for the given document \" + documentUri);\n+    }\n+    return result;\n+  }\n+\n+  private Path retrieveDependencyFile(Path dependencyFolderPath, String cobolFileName) {", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java b/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\nindex 72f4dc44..cbddaccb 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\n\n@@ -15,18 +15,18 @@\n  */\n package com.ca.lsp.cobol.service;\n \n-import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.google.common.annotations.Beta;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n+import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.io.FilenameUtils;\n import org.eclipse.lsp4j.WorkspaceFolder;\n \n-import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import java.io.File;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDk4OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374000988", "bodyText": "Please, describe the purpose of this class", "author": "temanbrcom", "createdAt": "2020-02-03T09:38:49Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\nindex 822f9687..15effa6b 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n\n@@ -30,6 +30,10 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n+/**\n+ * This class provide support methods for FileSystemService and doesn't test anything. More in\n+ * detail create the workspace folder in the user tmp folder with some copybooks there\n+ */\n @Slf4j\n public class FileSystemConfiguration extends ConfigurableTest {\n   protected static final String COPYBOOK_CONTENT =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMTM3Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374001377", "bodyText": "Check?", "author": "temanbrcom", "createdAt": "2020-02-03T09:39:38Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Slf4j\n+public class FileSystemConfiguration extends ConfigurableTest {\n+  protected static final String COPYBOOK_CONTENT =\n+      \"000230 77  REPORT-STATUS           PIC 99 VALUE ZERO.\";\n+  protected static final String WORKSPACE_FOLDER_NAME = \"test\";\n+  protected static final String WS_FOLDER_NAME = \"WORKSPACE\";\n+  protected static final String CPYB_FOLDER_NAME = \"COPYBOOKS\";\n+  protected static final String CPYB_INNER_NAME = \"INNER\";\n+  protected static final String CPY_OUTER_NAME_ONLY2 = \"copy2\";\n+  protected static final String EMPTY_COPYBOOK_NAME = \" \";\n+  public static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n+  protected static final String CPY_OUTER_FILE_NAME_WITH_EXT = \"copy.cpy\";\n+  protected static final String CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT = \"copy3.out\";\n+  protected static final String CPY_INNER_FILE_NAME_WITH_EXT = \"copy2.cpy\";\n+  protected static final String DEP_FILE_COST_NAME = \"SOMEPROG\";\n+  private URI workspaceFolderPath = null;\n+  private Path innerCopybooksPath = null;\n+  protected Path workspacePath = createPathOfName(WS_FOLDER_NAME, Optional.empty());\n+\n+  /*\n+  STRUCTURE FOLDER USED FOR TEST PURPOSES\n+  ***************************************\n+  TEMP/\n+  \u2514\u2500\u2500 WORKSPACE/\n+      \u251c\u2500\u2500 .cobdeps\n+      \u2502   \u2514\u2500\u2500 SOMEPROG.dep\n+      \u2514\u2500\u2500\u2500 COPYBOOKS\n+          \u251c\u2500\u2500 INNER/\n+          \u2502   \u2514\u2500\u2500 copy2.cpy\n+          \u251c\u2500\u2500 copy3.out\n+          \u2514\u2500\u2500 copy.cpy\n+  ***************************************\n+  */\n+\n+  protected List<WorkspaceFolder> initWorkspaceFolderList() {\n+    Path copybooksPath = createPathOfName(CPYB_FOLDER_NAME, Optional.of(workspacePath));\n+    Path cpyFilePath = createPathOfName(CPY_OUTER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n+    Path anotherCpyFilePath =\n+        createPathOfName(CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n+    innerCopybooksPath = createPathOfName(CPYB_INNER_NAME, Optional.of(copybooksPath));\n+\n+    // create two cpy files\n+    createTempDirAndFile(workspacePath, copybooksPath, cpyFilePath, anotherCpyFilePath);\n+    createInnerFolderAndFile(\n+        copybooksPath,\n+        createPathOfName(CPY_INNER_FILE_NAME_WITH_EXT, Optional.of(innerCopybooksPath)));\n+\n+    WorkspaceFolder workspaceFolder = new WorkspaceFolder();\n+    workspaceFolder.setName(WORKSPACE_FOLDER_NAME);\n+    workspaceFolder.setUri(adjustURI(getWorkspaceFolderPath().toString()));\n+    setWorkspaceFolderPath(workspacePath.toUri());\n+\n+    return Collections.singletonList(workspaceFolder);\n+  }\n+\n+  protected URI getWorkspaceFolderPath() {\n+    return workspaceFolderPath;\n+  }\n+\n+  private void setWorkspaceFolderPath(URI workspaceFolderPath) {\n+    this.workspaceFolderPath = workspaceFolderPath;\n+  }\n+\n+  protected String filesystemSeparator() {\n+    return FileSystems.getDefault().getSeparator();\n+  }\n+\n+  /*\n+  Remove the last slash from the URI path in order to replicate the behaviour of the client IDE that send to the server\n+  the path of the opened workspace without the last slash.\n+   */\n+  private String adjustURI(String originalUri) {\n+    return originalUri.substring(0, originalUri.length() - 1);\n+  }\n+\n+  @Nonnull\n+  private Path createPathOfName(String folderName, Optional<Path> parentFolder) {\n+\n+    // creck if the workspace folder already exists (parent folder)..", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzNzg4Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374037883", "bodyText": "\ud83d\ude21 I miss that - thanks :D", "author": "zacanbrcom", "createdAt": "2020-02-03T10:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMTM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\nindex 822f9687..15effa6b 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n\n@@ -30,6 +30,10 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n+/**\n+ * This class provide support methods for FileSystemService and doesn't test anything. More in\n+ * detail create the workspace folder in the user tmp folder with some copybooks there\n+ */\n @Slf4j\n public class FileSystemConfiguration extends ConfigurableTest {\n   protected static final String COPYBOOK_CONTENT =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMTc5OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374001798", "bodyText": "Please, replace the printStackTrace calls with logging", "author": "temanbrcom", "createdAt": "2020-02-03T09:40:22Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Slf4j\n+public class FileSystemConfiguration extends ConfigurableTest {\n+  protected static final String COPYBOOK_CONTENT =\n+      \"000230 77  REPORT-STATUS           PIC 99 VALUE ZERO.\";\n+  protected static final String WORKSPACE_FOLDER_NAME = \"test\";\n+  protected static final String WS_FOLDER_NAME = \"WORKSPACE\";\n+  protected static final String CPYB_FOLDER_NAME = \"COPYBOOKS\";\n+  protected static final String CPYB_INNER_NAME = \"INNER\";\n+  protected static final String CPY_OUTER_NAME_ONLY2 = \"copy2\";\n+  protected static final String EMPTY_COPYBOOK_NAME = \" \";\n+  public static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n+  protected static final String CPY_OUTER_FILE_NAME_WITH_EXT = \"copy.cpy\";\n+  protected static final String CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT = \"copy3.out\";\n+  protected static final String CPY_INNER_FILE_NAME_WITH_EXT = \"copy2.cpy\";\n+  protected static final String DEP_FILE_COST_NAME = \"SOMEPROG\";\n+  private URI workspaceFolderPath = null;\n+  private Path innerCopybooksPath = null;\n+  protected Path workspacePath = createPathOfName(WS_FOLDER_NAME, Optional.empty());\n+\n+  /*\n+  STRUCTURE FOLDER USED FOR TEST PURPOSES\n+  ***************************************\n+  TEMP/\n+  \u2514\u2500\u2500 WORKSPACE/\n+      \u251c\u2500\u2500 .cobdeps\n+      \u2502   \u2514\u2500\u2500 SOMEPROG.dep\n+      \u2514\u2500\u2500\u2500 COPYBOOKS\n+          \u251c\u2500\u2500 INNER/\n+          \u2502   \u2514\u2500\u2500 copy2.cpy\n+          \u251c\u2500\u2500 copy3.out\n+          \u2514\u2500\u2500 copy.cpy\n+  ***************************************\n+  */\n+\n+  protected List<WorkspaceFolder> initWorkspaceFolderList() {\n+    Path copybooksPath = createPathOfName(CPYB_FOLDER_NAME, Optional.of(workspacePath));\n+    Path cpyFilePath = createPathOfName(CPY_OUTER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n+    Path anotherCpyFilePath =\n+        createPathOfName(CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n+    innerCopybooksPath = createPathOfName(CPYB_INNER_NAME, Optional.of(copybooksPath));\n+\n+    // create two cpy files\n+    createTempDirAndFile(workspacePath, copybooksPath, cpyFilePath, anotherCpyFilePath);\n+    createInnerFolderAndFile(\n+        copybooksPath,\n+        createPathOfName(CPY_INNER_FILE_NAME_WITH_EXT, Optional.of(innerCopybooksPath)));\n+\n+    WorkspaceFolder workspaceFolder = new WorkspaceFolder();\n+    workspaceFolder.setName(WORKSPACE_FOLDER_NAME);\n+    workspaceFolder.setUri(adjustURI(getWorkspaceFolderPath().toString()));\n+    setWorkspaceFolderPath(workspacePath.toUri());\n+\n+    return Collections.singletonList(workspaceFolder);\n+  }\n+\n+  protected URI getWorkspaceFolderPath() {\n+    return workspaceFolderPath;\n+  }\n+\n+  private void setWorkspaceFolderPath(URI workspaceFolderPath) {\n+    this.workspaceFolderPath = workspaceFolderPath;\n+  }\n+\n+  protected String filesystemSeparator() {\n+    return FileSystems.getDefault().getSeparator();\n+  }\n+\n+  /*\n+  Remove the last slash from the URI path in order to replicate the behaviour of the client IDE that send to the server\n+  the path of the opened workspace without the last slash.\n+   */\n+  private String adjustURI(String originalUri) {\n+    return originalUri.substring(0, originalUri.length() - 1);\n+  }\n+\n+  @Nonnull\n+  private Path createPathOfName(String folderName, Optional<Path> parentFolder) {\n+\n+    // creck if the workspace folder already exists (parent folder)..\n+    return parentFolder\n+        .map(\n+            path ->\n+                Paths.get(parentFolder.get() + System.getProperty(\"file.separator\") + folderName))\n+        .orElseGet(\n+            () ->\n+                Paths.get(\n+                    System.getProperty(\"java.io.tmpdir\")\n+                        + System.getProperty(\"file.separator\")\n+                        + folderName));\n+  }\n+\n+  // util methods to create dummy cobol code inside copybook file\n+  private void createInnerFolderAndFile(Path parentFolder, Path copybookFile) {\n+    try {\n+      // create parent folder\n+      if (Files.exists(parentFolder)) {\n+        if (!Files.exists(copybookFile)) {\n+          Files.createDirectory(innerCopybooksPath);\n+          // create file into it\n+          Path copybookFilePath = Files.createFile(copybookFile);\n+          generateDummyContentForFile(copybookFilePath);\n+        }\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\nindex 822f9687..15effa6b 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n\n@@ -30,6 +30,10 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n+/**\n+ * This class provide support methods for FileSystemService and doesn't test anything. More in\n+ * detail create the workspace folder in the user tmp folder with some copybooks there\n+ */\n @Slf4j\n public class FileSystemConfiguration extends ConfigurableTest {\n   protected static final String COPYBOOK_CONTENT =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMzQ4Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374003482", "bodyText": "Using Thread.sleep() in tests is a code smell, it is better to use Awaitility here.", "author": "temanbrcom", "createdAt": "2020-02-03T09:43:49Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.domain.cobol.databus.impl.AbstractDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.UnknownEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * This class contains all the unit test that perform the publish/subscribe acrivities for generate\n+ * the dependency file.\n+ */\n+public class FileSystemE2ETest extends FileSystemConfiguration {\n+  public static final String CPY_NAME_WITHOUT_EXT = \"copy2\";\n+  DefaultDataBusBroker broker =\n+      (DefaultDataBusBroker) LangServerCtx.getInjector().getInstance(AbstractDataBusBroker.class);\n+\n+  private FileSystemServiceImpl fileSystemService = new FileSystemServiceImpl(broker);\n+\n+  @Before\n+  public void initActivities() {\n+    // the delegate will prepare the structure and this method will just setup the list of workspace\n+    // folders\n+    fileSystemService.setWorkspaceFolders(initWorkspaceFolderList());\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(Paths.get(getWorkspaceFolderPath()))\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    broker.invalidateCache();\n+  }\n+\n+  /**\n+   * This test verify that when the preprocessor publish a require copybook event the FileSystem\n+   * service subscribed to it react generating the dependency file.\n+   */\n+  @Test\n+  public void generateDependencyFileOnCallback() throws InterruptedException {\n+    // generate a required copybook event\n+    broker.postData(\n+        RequiredCopybookEvent.builder()\n+            .name(CPY_NAME_WITHOUT_EXT)\n+            .documentUri(DOCUMENT_URI)\n+            .build());\n+    Thread.sleep(1000);", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java\nindex 16857148..8ccf2db1 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java\n\n@@ -14,11 +14,14 @@\n package com.ca.lsp.cobol.service;\n \n import com.broadcom.lsp.cdi.LangServerCtx;\n-import com.broadcom.lsp.domain.cobol.databus.impl.AbstractDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.UnknownEvent;\n import com.ca.lsp.cobol.FileSystemConfiguration;\n+import lombok.extern.slf4j.Slf4j;\n+import org.awaitility.Duration;\n+import org.awaitility.core.ConditionTimeoutException;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMzg1NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374003855", "bodyText": "Please, replace with logging", "author": "temanbrcom", "createdAt": "2020-02-03T09:44:33Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.domain.cobol.databus.impl.AbstractDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.UnknownEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * This class contains all the unit test that perform the publish/subscribe acrivities for generate\n+ * the dependency file.\n+ */\n+public class FileSystemE2ETest extends FileSystemConfiguration {\n+  public static final String CPY_NAME_WITHOUT_EXT = \"copy2\";\n+  DefaultDataBusBroker broker =\n+      (DefaultDataBusBroker) LangServerCtx.getInjector().getInstance(AbstractDataBusBroker.class);\n+\n+  private FileSystemServiceImpl fileSystemService = new FileSystemServiceImpl(broker);\n+\n+  @Before\n+  public void initActivities() {\n+    // the delegate will prepare the structure and this method will just setup the list of workspace\n+    // folders\n+    fileSystemService.setWorkspaceFolders(initWorkspaceFolderList());\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(Paths.get(getWorkspaceFolderPath()))\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java\nindex 16857148..8ccf2db1 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java\n\n@@ -14,11 +14,14 @@\n package com.ca.lsp.cobol.service;\n \n import com.broadcom.lsp.cdi.LangServerCtx;\n-import com.broadcom.lsp.domain.cobol.databus.impl.AbstractDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.UnknownEvent;\n import com.ca.lsp.cobol.FileSystemConfiguration;\n+import lombok.extern.slf4j.Slf4j;\n+import org.awaitility.Duration;\n+import org.awaitility.core.ConditionTimeoutException;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNzM2NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374007365", "bodyText": "Do we need a class cast here? I think it will work if you call the impl class.\nStill, the best practice is to interact only with the interface methods.", "author": "temanbrcom", "createdAt": "2020-02-03T09:51:25Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemServiceTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.*;\n+\n+@Slf4j\n+public class FileSystemServiceTest extends FileSystemConfiguration\n+    implements EventObserver<RequiredCopybookEvent> {\n+\n+  private static final String DEP_EXTENSION = \".dep\";\n+  private FileSystemServiceImpl fileSystemService =\n+      (FileSystemServiceImpl) LangServerCtx.getInjector().getInstance(FileSystemService.class);", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA3NjUzOQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374076539", "bodyText": "I will refactor this using mockito with private methods defining a proper issue", "author": "zacanbrcom", "createdAt": "2020-02-03T12:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNzM2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODExMQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374008111", "bodyText": "This comment is out-of-date", "author": "temanbrcom", "createdAt": "2020-02-03T09:52:46Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/mocks/MockFileSystemService.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service.mocks;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.positive.CobolTextRegistry;\n+import com.ca.lsp.cobol.service.FileSystemService;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import net.jodah.concurrentunit.Waiter;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class is used to mock the actual behavior of {@link", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/mocks/MockFileSystemService.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/mocks/MockFileSystemService.java\nindex aac7a9b3..ccc15be9 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/mocks/MockFileSystemService.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/mocks/MockFileSystemService.java\n\n@@ -18,7 +18,6 @@ package com.ca.lsp.cobol.service.mocks;\n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n-import com.ca.lsp.cobol.positive.CobolTextRegistry;\n import com.ca.lsp.cobol.service.FileSystemService;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDA0Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374010047", "bodyText": "Should it be MockFileSystemService here?", "author": "temanbrcom", "createdAt": "2020-02-03T09:56:30Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java", "diffHunk": "@@ -51,9 +55,13 @@ protected void configure() {\n     bind(LanguageServer.class).to(TestLanguageServer.class);\n     bind(LanguageEngineFacade.class).to(CobolLanguageEngineFacade.class);\n     bind(WorkspaceService.class).to(MockWorkspaceService.class);\n+\n+    bind(FileSystemService.class).to(FileSystemServiceImpl.class);", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MjI1Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374192252", "bodyText": "I think is the same as #172 (comment). The new implementation will also involve this fix", "author": "zacanbrcom", "createdAt": "2020-02-03T16:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java\nindex 9647f030..9d230aa9 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java\n\n@@ -55,13 +53,10 @@ public class TestModule extends DefaultModule {\n     bind(LanguageServer.class).to(TestLanguageServer.class);\n     bind(LanguageEngineFacade.class).to(CobolLanguageEngineFacade.class);\n     bind(WorkspaceService.class).to(MockWorkspaceService.class);\n-\n     bind(FileSystemService.class).to(FileSystemServiceImpl.class);\n-\n     bind(Communications.class).to(ServerCommunications.class);\n     bind(TextDocumentService.class).to(MyTextDocumentService.class);\n     bind(CobolTextRegistry.class).to(ZipTextRegistry.class);\n-    bind(AbstractDataBusBroker.class).to(DefaultDataBusBroker.class);\n     bind(CobolSourceFormat.class).toInstance(CobolSourceFormat.FIXED);\n     bind(String.class)\n         .annotatedWith(Names.named(PATH_TO_TEST_RESOURCES))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDk3Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374010973", "bodyText": "By idea, this binding should be from the widest to the most possibly precise, i.e. DataBusBroker -> DefaultDataBusBroker", "author": "temanbrcom", "createdAt": "2020-02-03T09:58:23Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java", "diffHunk": "@@ -51,9 +55,13 @@ protected void configure() {\n     bind(LanguageServer.class).to(TestLanguageServer.class);\n     bind(LanguageEngineFacade.class).to(CobolLanguageEngineFacade.class);\n     bind(WorkspaceService.class).to(MockWorkspaceService.class);\n+\n+    bind(FileSystemService.class).to(FileSystemServiceImpl.class);\n+\n     bind(Communications.class).to(ServerCommunications.class);\n     bind(TextDocumentService.class).to(MyTextDocumentService.class);\n     bind(CobolTextRegistry.class).to(ZipTextRegistry.class);\n+    bind(AbstractDataBusBroker.class).to(DefaultDataBusBroker.class);", "originalCommit": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java\nindex 9647f030..9d230aa9 100644\n--- a/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java\n\n@@ -55,13 +53,10 @@ public class TestModule extends DefaultModule {\n     bind(LanguageServer.class).to(TestLanguageServer.class);\n     bind(LanguageEngineFacade.class).to(CobolLanguageEngineFacade.class);\n     bind(WorkspaceService.class).to(MockWorkspaceService.class);\n-\n     bind(FileSystemService.class).to(FileSystemServiceImpl.class);\n-\n     bind(Communications.class).to(ServerCommunications.class);\n     bind(TextDocumentService.class).to(MyTextDocumentService.class);\n     bind(CobolTextRegistry.class).to(ZipTextRegistry.class);\n-    bind(AbstractDataBusBroker.class).to(DefaultDataBusBroker.class);\n     bind(CobolSourceFormat.class).toInstance(CobolSourceFormat.FIXED);\n     bind(String.class)\n         .annotatedWith(Names.named(PATH_TO_TEST_RESOURCES))\n"}}, {"oid": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "message": "Address request changes", "committedDate": "2020-02-03T16:14:50Z", "type": "commit"}, {"oid": "216d765929081f17bfd39326492eb0a2458caf68", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/216d765929081f17bfd39326492eb0a2458caf68", "message": "Align positive test parameters", "committedDate": "2020-02-03T16:33:16Z", "type": "commit"}]}