{"pr_number": 657, "pr_title": "Extend the grammar to contain all the SQL keywords #568", "pr_createdAt": "2020-11-18T16:36:06Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/657", "timeline": [{"oid": "cbfe74fd895f98736718b9e87c37d766c674bf21", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/cbfe74fd895f98736718b9e87c37d766c674bf21", "message": "feat: Extend the grammar to contain all the SQL keywords #568\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-12T12:18:59Z", "type": "commit"}, {"oid": "cbfe74fd895f98736718b9e87c37d766c674bf21", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/cbfe74fd895f98736718b9e87c37d766c674bf21", "message": "feat: Extend the grammar to contain all the SQL keywords #568\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-12T12:18:59Z", "type": "forcePushed"}, {"oid": "ee1857d37ec06991dec400e9922c425ffb6c1873", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ee1857d37ec06991dec400e9922c425ffb6c1873", "message": "refactor: increasinging memory needed to run sql-parser\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-12T13:09:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg1MjY4Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/657#discussion_r555852683", "bodyText": "Is it correct? How the user will see it?", "author": "temanbrcom", "createdAt": "2021-01-12T15:21:39Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/TestSqlIncludeStatementNotDefinedCorrectly.java", "diffHunk": "@@ -33,7 +33,7 @@\n           + \"       DATA DIVISION.\\n\"\n           + \"       WORKING-STORAGE SECTION.\\n\"\n           + \"       01 {$*SQLCA}.\\n\"\n-          + \"       EXEC  {INCLUDE|1} STRUCT1 END-EXEC.\";\n+          + \"       EXEC  INCLUDE STRUCT1 END-EXEC.{|1}\";", "originalCommit": "ee1857d37ec06991dec400e9922c425ffb6c1873", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQwNzM5Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/657#discussion_r556407396", "bodyText": "Fixed", "author": "asatklichov", "createdAt": "2021-01-13T10:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg1MjY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9d5a13dacafa1e1cfe5bea6a7f4e0099e1870a44", "chunk": "diff --git a/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestSqlIncludeStatementNotDefinedCorrectly.java b/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestSqlIncludeStatementNotDefinedCorrectly.java\nindex 0ad45383..b664ee48 100644\n--- a/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestSqlIncludeStatementNotDefinedCorrectly.java\n+++ b/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestSqlIncludeStatementNotDefinedCorrectly.java\n\n@@ -33,7 +33,7 @@ class TestSqlIncludeStatementNotDefinedCorrectly {\n           + \"       DATA DIVISION.\\n\"\n           + \"       WORKING-STORAGE SECTION.\\n\"\n           + \"       01 {$*SQLCA}.\\n\"\n-          + \"       EXEC  INCLUDE STRUCT1 END-EXEC.{|1}\";\n+          + \"       EXEC  {INCLUDE|1} STRUCT1 END-EXEC.\";\n \n   @Test\n   void test() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2Mjc0MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/657#discussion_r555862740", "bodyText": "The SQL here was cut. The original code example is in the INSXML.cbl", "author": "temanbrcom", "createdAt": "2021-01-12T15:31:33Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java", "diffHunk": "@@ -42,6 +35,29 @@\n  * semantic analyzer could not find a token for variable usages, producing unexpected behavior.\n  */\n class TestXmlQueryNotTerminatesSemanticAnalysis {\n+  // TODO check if below commented syntax is valid.", "originalCommit": "ee1857d37ec06991dec400e9922c425ffb6c1873", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM3ODg0Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/657#discussion_r557378843", "bodyText": "I would kindly ask you to revert the changes in this test and make it ignored. It requires additional investigation.", "author": "temanbrcom", "createdAt": "2021-01-14T13:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2Mjc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzODc4NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/657#discussion_r557538784", "bodyText": "@temanbrcom Yes, done. Now all requested-changes are done (except this test)", "author": "asatklichov", "createdAt": "2021-01-14T16:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2Mjc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "1e929df1e49b25e16cfaf29d287962eab4a544a6", "chunk": "diff --git a/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java b/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java\nindex d643731b..eef7f208 100644\n--- a/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java\n+++ b/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java\n\n@@ -35,55 +43,41 @@ import java.util.Map;\n  * semantic analyzer could not find a token for variable usages, producing unexpected behavior.\n  */\n class TestXmlQueryNotTerminatesSemanticAnalysis {\n-  // TODO check if below commented syntax is valid.\n-  //  private static final String TEXT =\n-  //          \"       IDENTIFICATION DIVISION.\\n\"\n-  //                  + \"       PROGRAM-ID. TEST1.\\n\"\n-  //                  + \"       ENVIRONMENT DIVISION.\\n\"\n-  //                  + \"       DATA DIVISION.\\n\"\n-  //                  + \"       LINKAGE SECTION.\\n\"\n-  //                  + \"       01 {$*VARNAME} PIC 9.\\n\"\n-  //                  + \"       PROCEDURE DIVISION.\\n\"\n-  //                  + \"           EXEC SQL\\n\"\n-  //                  + \"            SELECT COALESCE (SUM( XMLCAST(\\n\"\n-  //                  + \"            XMLQUERY(\\n\"\n-  //                  + \"            \\\"declare default element namespace 'smth';\\n\"\n-  //                  + \"\\n\"\n-  //                  + \"      -     \\\"/Invoice[cac:PaymentMeans/cbc:id1=$PAYMENTDATE]/\\n\"\n-  //                  + \"      -     \\\"cac:id2/cbc:id3\\\"\\n\"\n-  //                  + \"            PASSING DOCUMENT\\n\"\n-  //                  + \"            , :ID1 AS PAYMENTDATE)\\n\"\n-  //                  + \"            AS DECIMAL(9,2) )) ,0) INTO :ID2\\n\"\n-  //                  + \"            FROM DB.NAME\\n\"\n-  //                  + \"            END-EXEC.\\n\"\n-  //                  + \"           MOVE 0 TO VARNAME1.\\n\"\n-  //                  + \"           GOBACK. \";\n   private static final String TEXT =\n-      \"       IDENTIFICATION DIVISION.\\n\"\n-          + \"       PROGRAM-ID. TEST1.\\n\"\n-          + \"       ENVIRONMENT DIVISION.\\n\"\n-          + \"       DATA DIVISION.\\n\"\n-          + \"       LINKAGE SECTION.\\n\"\n-          + \"       01 {$*VARNAME} PIC 9.\\n\"\n-          + \"       PROCEDURE DIVISION.\\n\"\n-          + \"           EXEC SQL\\n\"\n-          + \"            SELECT COALESCE (SUM( XMLCAST(\\n\"\n-          + \"            XMLQUERY(\\n\"\n-          + \"            \\\"declare default element namespace 'smth';\\n\"\n-          + \"      -     \\\"/Invoice[cac:PaymentMeans/cbc:id1=$PAYMENTDATE]/\\n\"\n-          + \"      -     \\\"cac:id2/cbc:id3\\\"\\n\"\n-          + \"      -     PASSING DOCUMENT\\n\"\n-          + \"            , :ID1 AS PAYMENTDATE)\\n\"\n-          + \"            AS DECIMAL(9,2) )) ,0) INTO :ID2\\n\"\n-          + \"            FROM DB.NAME\\n\"\n-          + \"            END-EXEC.\\n\"\n-          + \"           MOVE 0 TO {$VARNAME}.\\n\"\n-          + \"           GOBACK. \";\n+          \"       IDENTIFICATION DIVISION.\\n\"\n+                  + \"       PROGRAM-ID. TEST1.\\n\"\n+                  + \"       ENVIRONMENT DIVISION.\\n\"\n+                  + \"       DATA DIVISION.\\n\"\n+                  + \"       LINKAGE SECTION.\\n\"\n+                  + \"       01 {$*VARNAME} PIC 9.\\n\"\n+                  + \"       PROCEDURE DIVISION.\\n\"\n+                  + \"           EXEC SQL\\n\"\n+                  + \"            SELECT COALESCE (SUM( XMLCAST(\\n\"\n+                  + \"            XMLQUERY(\\n\"\n+                  + \"            \\\"declare default element namespace 'smth';\\n\"\n+                  + \"\\n\"\n+                  + \"      -     \\\"/Invoice[cac:PaymentMeans/cbc:id1=$PAYMENTDATE]/\\n\"\n+                  + \"      -     \\\"cac:id2/cbc:id3\\\"\\n\"\n+                  + \"            PASSING DOCUMENT\\n\"\n+                  + \"            , :ID1 AS PAYMENTDATE)\\n\"\n+                  + \"            AS DECIMAL(9,2) )) ,0) INTO :ID2\\n\"\n+                  + \"            FROM DB.NAME\\n\"\n+                  + \"            END-EXEC.\\n\"\n+                  + \"           MOVE 0 TO VARNAME1.\\n\"\n+                  + \"           GOBACK. \";\n \n-  @Test\n+  @Disabled(\"Needed a lot invetigation\")\n   void test() {\n     // TODO: after #619 fixed, all the false-positive diagnostics should disappear and this test\n     // should be refactored using UseCaseEngine\n-    UseCaseEngine.runTest(TEXT, List.of(), Map.of());\n+    AnalysisResult actual = UseCaseUtils.analyze(UseCaseUtils.DOCUMENT_URI, TEXT, List.of());\n+    List<Diagnostic> diagnostics = actual.getDiagnostics().get(UseCaseUtils.DOCUMENT_URI);\n+    Assertions.assertEquals(\n+            diagnostics.get(diagnostics.size() - 1),\n+            new Diagnostic(\n+                    new Range(new Position(19, 21), new Position(19, 29)),\n+                    \"Invalid definition for: VARNAME1\",\n+                    Information,\n+                    INFO.getText()));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2Mjg1MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/657#discussion_r555862851", "bodyText": "This line break is a part of the test semantic", "author": "temanbrcom", "createdAt": "2021-01-12T15:31:41Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java", "diffHunk": "@@ -54,29 +70,20 @@\n           + \"            SELECT COALESCE (SUM( XMLCAST(\\n\"\n           + \"            XMLQUERY(\\n\"\n           + \"            \\\"declare default element namespace 'smth';\\n\"\n-          + \"\\n\"", "originalCommit": "ee1857d37ec06991dec400e9922c425ffb6c1873", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e929df1e49b25e16cfaf29d287962eab4a544a6", "chunk": "diff --git a/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java b/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java\nindex d643731b..eef7f208 100644\n--- a/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java\n+++ b/server/src/test/java/com/broadcom/lsp/cobol/usecases/TestXmlQueryNotTerminatesSemanticAnalysis.java\n\n@@ -35,55 +43,41 @@ import java.util.Map;\n  * semantic analyzer could not find a token for variable usages, producing unexpected behavior.\n  */\n class TestXmlQueryNotTerminatesSemanticAnalysis {\n-  // TODO check if below commented syntax is valid.\n-  //  private static final String TEXT =\n-  //          \"       IDENTIFICATION DIVISION.\\n\"\n-  //                  + \"       PROGRAM-ID. TEST1.\\n\"\n-  //                  + \"       ENVIRONMENT DIVISION.\\n\"\n-  //                  + \"       DATA DIVISION.\\n\"\n-  //                  + \"       LINKAGE SECTION.\\n\"\n-  //                  + \"       01 {$*VARNAME} PIC 9.\\n\"\n-  //                  + \"       PROCEDURE DIVISION.\\n\"\n-  //                  + \"           EXEC SQL\\n\"\n-  //                  + \"            SELECT COALESCE (SUM( XMLCAST(\\n\"\n-  //                  + \"            XMLQUERY(\\n\"\n-  //                  + \"            \\\"declare default element namespace 'smth';\\n\"\n-  //                  + \"\\n\"\n-  //                  + \"      -     \\\"/Invoice[cac:PaymentMeans/cbc:id1=$PAYMENTDATE]/\\n\"\n-  //                  + \"      -     \\\"cac:id2/cbc:id3\\\"\\n\"\n-  //                  + \"            PASSING DOCUMENT\\n\"\n-  //                  + \"            , :ID1 AS PAYMENTDATE)\\n\"\n-  //                  + \"            AS DECIMAL(9,2) )) ,0) INTO :ID2\\n\"\n-  //                  + \"            FROM DB.NAME\\n\"\n-  //                  + \"            END-EXEC.\\n\"\n-  //                  + \"           MOVE 0 TO VARNAME1.\\n\"\n-  //                  + \"           GOBACK. \";\n   private static final String TEXT =\n-      \"       IDENTIFICATION DIVISION.\\n\"\n-          + \"       PROGRAM-ID. TEST1.\\n\"\n-          + \"       ENVIRONMENT DIVISION.\\n\"\n-          + \"       DATA DIVISION.\\n\"\n-          + \"       LINKAGE SECTION.\\n\"\n-          + \"       01 {$*VARNAME} PIC 9.\\n\"\n-          + \"       PROCEDURE DIVISION.\\n\"\n-          + \"           EXEC SQL\\n\"\n-          + \"            SELECT COALESCE (SUM( XMLCAST(\\n\"\n-          + \"            XMLQUERY(\\n\"\n-          + \"            \\\"declare default element namespace 'smth';\\n\"\n-          + \"      -     \\\"/Invoice[cac:PaymentMeans/cbc:id1=$PAYMENTDATE]/\\n\"\n-          + \"      -     \\\"cac:id2/cbc:id3\\\"\\n\"\n-          + \"      -     PASSING DOCUMENT\\n\"\n-          + \"            , :ID1 AS PAYMENTDATE)\\n\"\n-          + \"            AS DECIMAL(9,2) )) ,0) INTO :ID2\\n\"\n-          + \"            FROM DB.NAME\\n\"\n-          + \"            END-EXEC.\\n\"\n-          + \"           MOVE 0 TO {$VARNAME}.\\n\"\n-          + \"           GOBACK. \";\n+          \"       IDENTIFICATION DIVISION.\\n\"\n+                  + \"       PROGRAM-ID. TEST1.\\n\"\n+                  + \"       ENVIRONMENT DIVISION.\\n\"\n+                  + \"       DATA DIVISION.\\n\"\n+                  + \"       LINKAGE SECTION.\\n\"\n+                  + \"       01 {$*VARNAME} PIC 9.\\n\"\n+                  + \"       PROCEDURE DIVISION.\\n\"\n+                  + \"           EXEC SQL\\n\"\n+                  + \"            SELECT COALESCE (SUM( XMLCAST(\\n\"\n+                  + \"            XMLQUERY(\\n\"\n+                  + \"            \\\"declare default element namespace 'smth';\\n\"\n+                  + \"\\n\"\n+                  + \"      -     \\\"/Invoice[cac:PaymentMeans/cbc:id1=$PAYMENTDATE]/\\n\"\n+                  + \"      -     \\\"cac:id2/cbc:id3\\\"\\n\"\n+                  + \"            PASSING DOCUMENT\\n\"\n+                  + \"            , :ID1 AS PAYMENTDATE)\\n\"\n+                  + \"            AS DECIMAL(9,2) )) ,0) INTO :ID2\\n\"\n+                  + \"            FROM DB.NAME\\n\"\n+                  + \"            END-EXEC.\\n\"\n+                  + \"           MOVE 0 TO VARNAME1.\\n\"\n+                  + \"           GOBACK. \";\n \n-  @Test\n+  @Disabled(\"Needed a lot invetigation\")\n   void test() {\n     // TODO: after #619 fixed, all the false-positive diagnostics should disappear and this test\n     // should be refactored using UseCaseEngine\n-    UseCaseEngine.runTest(TEXT, List.of(), Map.of());\n+    AnalysisResult actual = UseCaseUtils.analyze(UseCaseUtils.DOCUMENT_URI, TEXT, List.of());\n+    List<Diagnostic> diagnostics = actual.getDiagnostics().get(UseCaseUtils.DOCUMENT_URI);\n+    Assertions.assertEquals(\n+            diagnostics.get(diagnostics.size() - 1),\n+            new Diagnostic(\n+                    new Range(new Position(19, 21), new Position(19, 29)),\n+                    \"Invalid definition for: VARNAME1\",\n+                    Information,\n+                    INFO.getText()));\n   }\n }\n"}}, {"oid": "9d5a13dacafa1e1cfe5bea6a7f4e0099e1870a44", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9d5a13dacafa1e1cfe5bea6a7f4e0099e1870a44", "message": "refactor: resolving code-review comments\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-13T16:27:24Z", "type": "commit"}, {"oid": "d27ddba0fe320b87d335be82daf7df795403159d", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/d27ddba0fe320b87d335be82daf7df795403159d", "message": "refactor: improving sql grammar validity check\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-14T12:15:49Z", "type": "commit"}, {"oid": "91c857d958174303b930666d8e682a38fecc1955", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/91c857d958174303b930666d8e682a38fecc1955", "message": "feat: DB2 SQL Variable Length check #723\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-14T15:02:29Z", "type": "commit"}, {"oid": "f8e81787b5ec2f1708900e70c5ca65cb685729b8", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f8e81787b5ec2f1708900e70c5ca65cb685729b8", "message": "feat: Extending DB2 SQL build-in-function Keywords #722\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-14T16:05:10Z", "type": "commit"}, {"oid": "1e929df1e49b25e16cfaf29d287962eab4a544a6", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/1e929df1e49b25e16cfaf29d287962eab4a544a6", "message": "test: ignore test, which needs further investigation\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-14T16:41:07Z", "type": "commit"}, {"oid": "602576aaee03dc82807c1fadec3d7e2ce6ecd5e8", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/602576aaee03dc82807c1fadec3d7e2ce6ecd5e8", "message": "test: cleanup for un-used imports, regarding to checkstyle\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2021-01-14T17:01:00Z", "type": "commit"}]}