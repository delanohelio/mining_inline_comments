{"pr_number": 437, "pr_title": "Add support for Area A&B", "pr_createdAt": "2020-07-21T13:54:32Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437", "timeline": [{"oid": "e68df24b27fec0594aa19189ec357ac51a236b27", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e68df24b27fec0594aa19189ec357ac51a236b27", "message": "feat: Add content areas A and B support - issue #12", "committedDate": "2020-07-21T13:52:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzNTEyOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458135128", "bodyText": "Maybe, it would be better to extract ctx.getStart() as a variable to reduce duplicated calls?", "author": "temanbrcom", "createdAt": "2020-07-21T14:21:18Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -38,24 +41,140 @@\n   private static final int INFO_LEVEL = 3;\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n+  @Getter @Setter private String programName;\n \n   private String documentUri;\n   private SemanticContext semanticContext;\n+  private CommonTokenStream tokenStream;\n \n-  public CobolVisitor(String documentUri, SemanticContext semanticContext) {\n+  public CobolVisitor(\n+      String documentUri, SemanticContext semanticContext, CommonTokenStream tokenStream) {\n     this.documentUri = documentUri;\n     this.semanticContext = semanticContext;\n+    this.tokenStream = tokenStream;\n+  }\n+\n+  @Override\n+  public Class visitIdentificationDivision(IdentificationDivisionContext ctx) {\n+    String token = ctx.getStart().getText();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token, ctx.getStart().getLine());", "originalCommit": "e68df24b27fec0594aa19189ec357ac51a236b27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4MDM2NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458180365", "bodyText": "sure", "author": "sergiuilie", "createdAt": "2020-07-21T15:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzNTEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0MTAwOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458641008", "bodyText": "\ud83d\udc4d I left a similar comment, I will resolve mine :)", "author": "zacanbrcom", "createdAt": "2020-07-22T08:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzNTEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "145cbd5ea3b3fdebbd536af470c1f85364bcc836", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\nindex d4e0a011..85d48e7e 100644\n--- a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n+++ b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n\n@@ -41,8 +40,8 @@ public class CobolVisitor extends CobolParserBaseVisitor<Class> {\n   private static final int INFO_LEVEL = 3;\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n-  @Getter @Setter private String programName;\n \n+  private String programName = null;\n   private String documentUri;\n   private SemanticContext semanticContext;\n   private CommonTokenStream tokenStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0NTIzOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458145238", "bodyText": "You may use UseCaseEngine#analyze or UseCaseEngine#analyzeForErrors here to reduce code duplication", "author": "temanbrcom", "createdAt": "2020-07-21T14:34:01Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/MarginABTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.core.cobol.visitor;\n+\n+import com.broadcom.lsp.cdi.EngineModule;\n+import com.broadcom.lsp.cdi.module.databus.DatabusModule;\n+import com.ca.lsp.core.cobol.engine.CobolLanguageEngine;\n+import com.ca.lsp.core.cobol.model.ResultWithErrors;\n+import com.ca.lsp.core.cobol.semantics.SemanticContext;\n+import com.google.inject.Guice;\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+\n+/** This test verifies if the margins are respected and warnings are thrown */\n+public class MarginABTest {\n+\n+  /**\n+   * In TEXT_DIVISION_WRONG_PLACE string there are several DIVISIONS that are not in the right place\n+   */\n+  private static final String TEXT_DIVISION_WRONG_PLACE =\n+      \"000000       IDENTIFICATION DIVISION.\\n\" // starting area B instead of A\n+          + \"000000  PROGRAM-ID.    FILETOTEST.\\n\"\n+          + \"000000  AUTHOR. SERGIU ILIE.\\n\"\n+          + \"000000     DATA DIVISION.\\n\" // starting area B instead of A\n+          + \"000000  WORKING-STORAGE SECTION.\\n\"\n+          + \"000000  01 TAPARM1.\\n\"\n+          + \"000000  01 TAPARM2      PIC 99 VALUE 2.\\n\"\n+          + \"000000  01 ATCDEM3      PIC X(7) VALUE 'ATCDEM3'.\\n\"\n+          + \"000000  01 P1PARM1      PIC 99 VALUE 0.\\n\"\n+          + \"000000  01 TASTRUCT.\\n\"\n+          + \"000000     05 LOC-ID.\\n\"\n+          + \"000000         10 STATE    PIC X(2).\\n\"\n+          + \"000000         10 CITY     PIC X(3).\\n\"\n+          + \"000000     05 OP-SYS     PIC X(3).\\n\"\n+          + \"000000     PROCEDURE DIVISION.\\n\" // starting area B instead of A\n+          + \"000000     MOVE 'ILCHIMVS' TO TASTRUCT.\\n\"\n+          + \"000000     MOVE 'ILSPR' TO LOC-ID.\\n\"\n+          + \"000000     MOVE 'AIX' TO OP-SYS.\\n\"\n+          + \"000000  PROGA.\\n\"\n+          + \"000000     PERFORM WITH TEST BEFORE UNTIL TAPARM1 = 0\\n\"\n+          + \"000000       SUBTRACT 1 FROM TAPARM1\\n\"\n+          + \"000000       CALL 'ATCDEM3'\\n\"\n+          + \"000000     END-PERFORM\\n\"\n+          + \"000000     IF TAPARM2 = 0\\n\"\n+          + \"000000       PERFORM PROCA\\n\"\n+          + \"000000     END-IF\\n\"\n+          + \"000000     PERFORM WITH TEST BEFORE UNTIL TAPARM2 = 0\\n\"\n+          + \"000000       SUBTRACT 1 FROM TAPARM2\\n\"\n+          + \"000000     END-PERFORM.\\n\"\n+          + \"000000  END PROGRAM FILETOTEST.\";\n+\n+  /** In TEXT_AREA_B there are several statements starting on the wrong position */\n+  private static final String TEXT_AREA_B =\n+      \"000000 IDENTIFICATION DIVISION.\\n\"\n+          + \"000000  PROGRAM-ID.    FILETOTEST.\\n\"\n+          + \"000000  AUTHOR. SERGIU ILIE.\\n\"\n+          + \"000000 DATA DIVISION.\\n\"\n+          + \"000000  WORKING-STORAGE SECTION.\\n\"\n+          + \"000000  01 TAPARM1.\\n\"\n+          + \"000000  01 TAPARM2      PIC 99 VALUE 2.\\n\"\n+          + \"000000  01 ATCDEM3      PIC X(7) VALUE 'ATCDEM3'.\\n\"\n+          + \"000000  01 P1PARM1      PIC 99 VALUE 0.\\n\"\n+          + \"000000  01 TASTRUCT.\\n\"\n+          + \"000000  05 LOC-ID.\\n\" // starting area A instead of B\n+          + \"000000         10 STATE    PIC X(2).\\n\"\n+          + \"000000         10 CITY     PIC X(3).\\n\"\n+          + \"000000     05 OP-SYS     PIC X(3).\\n\"\n+          + \"000000 PROCEDURE DIVISION.\\n\"\n+          + \"000000  MOVE 'ILCHIMVS' TO TASTRUCT.\\n\" // starting area A instead of B\n+          + \"000000     MOVE 'ILSPR' TO LOC-ID.\\n\"\n+          + \"000000     MOVE 'AIX' TO OP-SYS.\\n\"\n+          + \"000000  PROGA.\\n\"\n+          + \"000000  PERFORM WITH TEST BEFORE UNTIL TAPARM1 = 0\\n\" // starting area A instead of B\n+          + \"000000       SUBTRACT 1 FROM TAPARM1\\n\"\n+          + \"000000       CALL 'ATCDEM3'\\n\"\n+          + \"000000     END-PERFORM\\n\"\n+          + \"000000     IF TAPARM2 = 0\\n\"\n+          + \"000000       PERFORM PROCA\\n\"\n+          + \"000000     END-IF\\n\"\n+          + \"000000  PERFORM WITH TEST\\n\" // starting area A instead of B\n+          + \"000000  BEFORE UNTIL TAPARM2 = 0\\n\" // starting area A instead of B\n+          + \"000000       SUBTRACT 1 FROM TAPARM2\\n\"\n+          + \"000000     END-PERFORM.\\n\"\n+          + \"000000  END PROGRAM FILETOTEST.\";\n+\n+  private static final String TEXT_PROGRAM_ID =\n+      \"000000 IDENTIFICATION DIVISION.\\n\"\n+          + \"000000  PROGRAM-ID.    FILETOTEST.\\n\"\n+          + \"000000  AUTHOR. SERGIU ILIE.\\n\"\n+          + \"000000 DATA DIVISION.\\n\"\n+          + \"000000  WORKING-STORAGE SECTION.\\n\"\n+          + \"000000  01 TASTRUCT.\\n\"\n+          + \"000000     05 LOC-ID.\\n\"\n+          + \"000000         10 STATE    PIC X(2).\\n\"\n+          + \"000000         10 CITY     PIC X(3).\\n\"\n+          + \"000000     05 OP-SYS     PIC X(3).\\n\"\n+          + \"000000 PROCEDURE DIVISION.\\n\"\n+          + \"000000     MOVE 'ILCHIMVS' TO TASTRUCT.\\n\"\n+          + \"000000     MOVE 'ILSPR' TO LOC-ID.\\n\"\n+          + \"000000     MOVE 'AIX' TO OP-SYS.\\n\"\n+          + \"000000  END PROGRAM FILETOTEST2.\"; // PROGRAM-ID must be similar with PROGRAM-ID\n+  // mentioned on ID DIVISION\n+\n+  /** In TEXT_DECLARATIVES the mistake is on the DECLARATIVE line */\n+  private static final String TEXT_DECLARATIVES =\n+      \"000000 IDENTIFICATION DIVISION.\\n\"\n+          + \"000000  PROGRAM-ID.    FILETOTEST.\\n\"\n+          + \"000000  AUTHOR. SERGIU ILIE.\\n\"\n+          + \"000000 DATA DIVISION.\\n\"\n+          + \"000000  WORKING-STORAGE SECTION.\\n\"\n+          + \"000000  01 TASTRUCT.\\n\"\n+          + \"000000     05 LOC-ID.\\n\"\n+          + \"000000         10 STATE    PIC X(2).\\n\"\n+          + \"000000         10 CITY     PIC X(3).\\n\"\n+          + \"000000     05 OP-SYS     PIC X(3).\\n\"\n+          + \"000000 PROCEDURE DIVISION.\\n\"\n+          + \"000000 DECLARATIVES. MAMA\\n\" // after DECLARATIVES keyword no other token is allowed\n+          + \"000000 COBOL-DEBUG SECTION.\\n\"\n+          + \"000000     USE FOR DEBUGGING ON ALL PROCEDURES.\\n\"\n+          + \"000000 COBOL-DEBUG-PARA.\\n\"\n+          + \"000000     IF READY-TRACE THEN\\n\"\n+          + \"000000       DISPLAY DEBUG-NAME\\n\"\n+          + \"000000     END-IF.\\n\"\n+          + \"000000  END DECLARATIVES.\\n\"\n+          + \"000000     MOVE 'ILCHIMVS' TO TASTRUCT.\\n\"\n+          + \"000000     MOVE 'ILSPR' TO LOC-ID.\\n\"\n+          + \"000000     MOVE 'AIX' TO OP-SYS.\\n\"\n+          + \"000000  END PROGRAM FILETOTEST.\";\n+\n+  @Test\n+  public void checkForAreaA() {\n+    CobolLanguageEngine engine =\n+        Guice.createInjector(new EngineModule(), new DatabusModule())\n+            .getInstance(CobolLanguageEngine.class);\n+    ResultWithErrors<SemanticContext> result;\n+\n+    result = engine.run(\"1\", TEXT_DIVISION_WRONG_PLACE, \"DID_OPEN\");\n+    assertEquals(3, result.getErrors().size());", "originalCommit": "e68df24b27fec0594aa19189ec357ac51a236b27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "145cbd5ea3b3fdebbd536af470c1f85364bcc836", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/MarginABTest.java b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/usecases/TestMarginAB.java\nsimilarity index 79%\nrename from com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/MarginABTest.java\nrename to com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/usecases/TestMarginAB.java\nindex 04770ed2..4012098c 100644\n--- a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/MarginABTest.java\n+++ b/com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/usecases/TestMarginAB.java\n\n@@ -12,19 +12,15 @@\n  *    Broadcom, Inc. - initial API and implementation\n  */\n \n-package com.ca.lsp.core.cobol.visitor;\n+package com.ca.lsp.cobol.usecases;\n \n-import com.broadcom.lsp.cdi.EngineModule;\n-import com.broadcom.lsp.cdi.module.databus.DatabusModule;\n-import com.ca.lsp.core.cobol.engine.CobolLanguageEngine;\n-import com.ca.lsp.core.cobol.model.ResultWithErrors;\n-import com.ca.lsp.core.cobol.semantics.SemanticContext;\n-import com.google.inject.Guice;\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n import static org.junit.Assert.assertEquals;\n import org.junit.Test;\n+import static com.ca.lsp.cobol.service.delegates.validations.UseCaseUtils.analyze;\n \n /** This test verifies if the margins are respected and warnings are thrown */\n-public class MarginABTest {\n+public class TestMarginAB {\n \n   /**\n    * In TEXT_DIVISION_WRONG_PLACE string there are several DIVISIONS that are not in the right place\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0NjMzMQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458146331", "bodyText": "I don't think we need a setter here", "author": "temanbrcom", "createdAt": "2020-07-21T14:35:29Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -38,24 +41,140 @@\n   private static final int INFO_LEVEL = 3;\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n+  @Getter @Setter private String programName;", "originalCommit": "e68df24b27fec0594aa19189ec357ac51a236b27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5NTY4OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458195689", "bodyText": "true", "author": "sergiuilie", "createdAt": "2020-07-21T15:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0NjMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "145cbd5ea3b3fdebbd536af470c1f85364bcc836", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\nindex d4e0a011..85d48e7e 100644\n--- a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n+++ b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n\n@@ -41,8 +40,8 @@ public class CobolVisitor extends CobolParserBaseVisitor<Class> {\n   private static final int INFO_LEVEL = 3;\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n-  @Getter @Setter private String programName;\n \n+  private String programName = null;\n   private String documentUri;\n   private SemanticContext semanticContext;\n   private CommonTokenStream tokenStream;\n"}}, {"oid": "145cbd5ea3b3fdebbd536af470c1f85364bcc836", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/145cbd5ea3b3fdebbd536af470c1f85364bcc836", "message": "address requested changes", "committedDate": "2020-07-21T15:43:47Z", "type": "commit"}, {"oid": "d0e53d251d1d9c5bc65512fb42173497645f734a", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/d0e53d251d1d9c5bc65512fb42173497645f734a", "message": "Merge branch 'development' into area-creation", "committedDate": "2020-07-21T15:44:32Z", "type": "commit"}, {"oid": "fd9e14c6d59006aa6308fd4c8ddd58a3514aa816", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/fd9e14c6d59006aa6308fd4c8ddd58a3514aa816", "message": "remove check for other levels", "committedDate": "2020-07-21T16:08:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNDkxNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458624916", "bodyText": "Question: May this portion of code be extracted in a private method that accept as input an instance of ParserRuleContext?", "author": "zacanbrcom", "createdAt": "2020-07-22T08:29:14Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -39,23 +41,136 @@\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n \n+  private String programName = null;\n   private String documentUri;\n   private SemanticContext semanticContext;\n+  private CommonTokenStream tokenStream;\n \n-  public CobolVisitor(String documentUri, SemanticContext semanticContext) {\n+  public CobolVisitor(\n+      String documentUri, SemanticContext semanticContext, CommonTokenStream tokenStream) {\n     this.documentUri = documentUri;\n     this.semanticContext = semanticContext;\n+    this.tokenStream = tokenStream;\n+  }\n+\n+  @Override\n+  public Class visitIdentificationDivision(IdentificationDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProgramIdParagraph(ProgramIdParagraphContext ctx) {\n+    if (ctx.programName() != null) {\n+      programName = ctx.programName().getText();\n+    }\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProcedureDivision(ProcedureDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitEnvironmentDivision(EnvironmentDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);", "originalCommit": "fd9e14c6d59006aa6308fd4c8ddd58a3514aa816", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "141fe4d44fe4a14fe05046990d626485f52c0a00", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\nindex 646e5b41..1e7e39bf 100644\n--- a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n+++ b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n\n@@ -38,6 +38,13 @@ import static com.ca.lsp.core.cobol.parser.CobolParser.*;\n public class CobolVisitor extends CobolParserBaseVisitor<Class> {\n   private static final int WARNING_LEVEL = 2;\n   private static final int INFO_LEVEL = 3;\n+  private static final String AREA_A_WARNING_MSG = \"Following token must start in Area A: \";\n+  private static final String AREA_B_WARNING_MSG = \"Following token must start in Area B: \";\n+  private static final String IDENTICAL_PROGRAM_MSG =\n+      \"Program-name must be identical to the program-name of the corresponding PROGRAM-ID paragraph: \";\n+  private static final String DECLARATIVE_SAME_MSG =\n+      \"Following token can not be on the same line with DECLARATIVE token: \";\n+  private static final String INVALID_DEF_MSG = \"Invalid definition for: \";\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNDY3Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458634677", "bodyText": "Is better provide a String constant for quick reference", "author": "zacanbrcom", "createdAt": "2020-07-22T08:45:15Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -39,23 +41,136 @@\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n \n+  private String programName = null;\n   private String documentUri;\n   private SemanticContext semanticContext;\n+  private CommonTokenStream tokenStream;\n \n-  public CobolVisitor(String documentUri, SemanticContext semanticContext) {\n+  public CobolVisitor(\n+      String documentUri, SemanticContext semanticContext, CommonTokenStream tokenStream) {\n     this.documentUri = documentUri;\n     this.semanticContext = semanticContext;\n+    this.tokenStream = tokenStream;\n+  }\n+\n+  @Override\n+  public Class visitIdentificationDivision(IdentificationDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProgramIdParagraph(ProgramIdParagraphContext ctx) {\n+    if (ctx.programName() != null) {\n+      programName = ctx.programName().getText();\n+    }\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProcedureDivision(ProcedureDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitEnvironmentDivision(EnvironmentDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitDataDivision(DataDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitDataDivisionSection(DataDivisionSectionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitEnvironmentDivisionBody(EnvironmentDivisionBodyContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProcedureSectionHeader(ProcedureSectionHeaderContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n   }\n \n   @Override\n   public Class visitProcedureSection(ProcedureSectionContext ctx) {\n-    String wrongToken = ctx.getStart().getText();\n-    throwWarning(wrongToken, ctx.getStart().getLine(), ctx.getStart().getCharPositionInLine());\n+    Token token = ctx.getStart();\n+    throwWarning(token.getText(), token.getLine(), token.getCharPositionInLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitParagraph(ParagraphContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitDataDescriptionEntryFormat1(DataDescriptionEntryFormat1Context ctx) {\n+    Token token = ctx.getStart();\n+    String tokenText = token.getText();\n+    if (tokenText.equals(\"01\") || tokenText.equals(\"1\") || tokenText.equals(\"77\")) {\n+      areaAWarning(ctx.start.getCharPositionInLine(), tokenText, token.getLine());\n+    }\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProcedureDeclaratives(ProcedureDeclarativesContext ctx) {\n+    Token firstDeclarative = ctx.getStart();\n+    int firstDeclLine = firstDeclarative.getLine();\n+    Token declarativeBody = ctx.procedureDeclarative(0).getStart();\n+    Token endToken = ctx.END().getSymbol();\n+\n+    if (firstDeclLine == declarativeBody.getLine()) {\n+      throwException(\n+          declarativeBody.getText(),\n+          declarativeBody.getLine(),\n+          declarativeBody.getCharPositionInLine(),\n+          \"Following token can not be on the same line with DECLARATIVE token: \",", "originalCommit": "fd9e14c6d59006aa6308fd4c8ddd58a3514aa816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3OTMwNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458679304", "bodyText": "sure", "author": "sergiuilie", "createdAt": "2020-07-22T10:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNDY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "141fe4d44fe4a14fe05046990d626485f52c0a00", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\nindex 646e5b41..1e7e39bf 100644\n--- a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n+++ b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n\n@@ -38,6 +38,13 @@ import static com.ca.lsp.core.cobol.parser.CobolParser.*;\n public class CobolVisitor extends CobolParserBaseVisitor<Class> {\n   private static final int WARNING_LEVEL = 2;\n   private static final int INFO_LEVEL = 3;\n+  private static final String AREA_A_WARNING_MSG = \"Following token must start in Area A: \";\n+  private static final String AREA_B_WARNING_MSG = \"Following token must start in Area B: \";\n+  private static final String IDENTICAL_PROGRAM_MSG =\n+      \"Program-name must be identical to the program-name of the corresponding PROGRAM-ID paragraph: \";\n+  private static final String DECLARATIVE_SAME_MSG =\n+      \"Following token can not be on the same line with DECLARATIVE token: \";\n+  private static final String INVALID_DEF_MSG = \"Invalid definition for: \";\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNzIxMg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458637212", "bodyText": "For this case might be useful provide a javadoc to explain the margin checks we applied for the declarative sections", "author": "zacanbrcom", "createdAt": "2020-07-22T08:49:21Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -39,23 +41,136 @@\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n \n+  private String programName = null;\n   private String documentUri;\n   private SemanticContext semanticContext;\n+  private CommonTokenStream tokenStream;\n \n-  public CobolVisitor(String documentUri, SemanticContext semanticContext) {\n+  public CobolVisitor(\n+      String documentUri, SemanticContext semanticContext, CommonTokenStream tokenStream) {\n     this.documentUri = documentUri;\n     this.semanticContext = semanticContext;\n+    this.tokenStream = tokenStream;\n+  }\n+\n+  @Override\n+  public Class visitIdentificationDivision(IdentificationDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProgramIdParagraph(ProgramIdParagraphContext ctx) {\n+    if (ctx.programName() != null) {\n+      programName = ctx.programName().getText();\n+    }\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProcedureDivision(ProcedureDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitEnvironmentDivision(EnvironmentDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitDataDivision(DataDivisionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitDataDivisionSection(DataDivisionSectionContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitEnvironmentDivisionBody(EnvironmentDivisionBodyContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProcedureSectionHeader(ProcedureSectionHeaderContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n   }\n \n   @Override\n   public Class visitProcedureSection(ProcedureSectionContext ctx) {\n-    String wrongToken = ctx.getStart().getText();\n-    throwWarning(wrongToken, ctx.getStart().getLine(), ctx.getStart().getCharPositionInLine());\n+    Token token = ctx.getStart();\n+    throwWarning(token.getText(), token.getLine(), token.getCharPositionInLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitParagraph(ParagraphContext ctx) {\n+    Token token = ctx.getStart();\n+    areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitDataDescriptionEntryFormat1(DataDescriptionEntryFormat1Context ctx) {\n+    Token token = ctx.getStart();\n+    String tokenText = token.getText();\n+    if (tokenText.equals(\"01\") || tokenText.equals(\"1\") || tokenText.equals(\"77\")) {\n+      areaAWarning(ctx.start.getCharPositionInLine(), tokenText, token.getLine());\n+    }\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitProcedureDeclaratives(ProcedureDeclarativesContext ctx) {", "originalCommit": "fd9e14c6d59006aa6308fd4c8ddd58a3514aa816", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "141fe4d44fe4a14fe05046990d626485f52c0a00", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\nindex 646e5b41..1e7e39bf 100644\n--- a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n+++ b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n\n@@ -38,6 +38,13 @@ import static com.ca.lsp.core.cobol.parser.CobolParser.*;\n public class CobolVisitor extends CobolParserBaseVisitor<Class> {\n   private static final int WARNING_LEVEL = 2;\n   private static final int INFO_LEVEL = 3;\n+  private static final String AREA_A_WARNING_MSG = \"Following token must start in Area A: \";\n+  private static final String AREA_B_WARNING_MSG = \"Following token must start in Area B: \";\n+  private static final String IDENTICAL_PROGRAM_MSG =\n+      \"Program-name must be identical to the program-name of the corresponding PROGRAM-ID paragraph: \";\n+  private static final String DECLARATIVE_SAME_MSG =\n+      \"Following token can not be on the same line with DECLARATIVE token: \";\n+  private static final String INVALID_DEF_MSG = \"Invalid definition for: \";\n \n   @Getter private List<SyntaxError> errors = new ArrayList<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0NDQ2NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458644465", "bodyText": "Question: can we use token.getText() instead of programName?", "author": "zacanbrcom", "createdAt": "2020-07-22T09:01:08Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -246,4 +368,49 @@ private Position retrievePosition(ParserRuleContext ctx) {\n         ctx.getStart().getLine(),\n         ctx.getStart().getCharPositionInLine());\n   }\n+\n+  private void areaAWarning(int charPosition, String token, int startLine) {\n+    if (charPosition > 10) {\n+      throwException(\n+          token, startLine, charPosition, \"Following token must start in Area A: \", WARNING_LEVEL);\n+    }\n+  }\n+\n+  private void areaBWarning(List<Token> tokenList) {\n+    for (Token token : tokenList) {\n+      int charPosition = token.getCharPositionInLine();\n+      if (charPosition > 6 && charPosition < 11 && token.getChannel() != 1) {\n+        throwException(\n+            token.getText(),\n+            token.getLine(),\n+            charPosition,\n+            \"Following token must start in Area B: \",\n+            WARNING_LEVEL);\n+      }\n+    }\n+  }\n+\n+  private void checkProgramName(Token token) {\n+    if (programName == null) {", "originalCommit": "fd9e14c6d59006aa6308fd4c8ddd58a3514aa816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3Nzk5MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458677990", "bodyText": "sure", "author": "sergiuilie", "createdAt": "2020-07-22T09:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0NDQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "141fe4d44fe4a14fe05046990d626485f52c0a00", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\nindex 646e5b41..1e7e39bf 100644\n--- a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n+++ b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java\n\n@@ -371,8 +383,7 @@ public class CobolVisitor extends CobolParserBaseVisitor<Class> {\n \n   private void areaAWarning(int charPosition, String token, int startLine) {\n     if (charPosition > 10) {\n-      throwException(\n-          token, startLine, charPosition, \"Following token must start in Area A: \", WARNING_LEVEL);\n+      throwException(token, startLine, charPosition, AREA_A_WARNING_MSG, WARNING_LEVEL);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2NDIxNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458664214", "bodyText": "Question: do we have an unit test that check that misspelled warning message is sent back to the user?", "author": "zacanbrcom", "createdAt": "2020-07-22T09:34:27Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorSemanticAnalysisTest.java", "diffHunk": "@@ -81,9 +81,9 @@ public void testDefinedVariableUsageIsFound() {\n    * Check if visitor calculates distance between a wrong token and a keyword and returns a\n    * suggestion with the closest keyword.\n    */\n-  @Test\n+  @Test(expected = NullPointerException.class)", "originalCommit": "fd9e14c6d59006aa6308fd4c8ddd58a3514aa816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODA0Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/437#discussion_r458678046", "bodyText": "on it", "author": "sergiuilie", "createdAt": "2020-07-22T09:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2NDIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "141fe4d44fe4a14fe05046990d626485f52c0a00", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorSemanticAnalysisTest.java b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorSemanticAnalysisTest.java\nindex 38f9820f..0ae61938 100644\n--- a/com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorSemanticAnalysisTest.java\n+++ b/com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorSemanticAnalysisTest.java\n\n@@ -81,11 +82,15 @@ public class VisitorSemanticAnalysisTest {\n    * Check if visitor calculates distance between a wrong token and a keyword and returns a\n    * suggestion with the closest keyword.\n    */\n-  @Test(expected = NullPointerException.class)\n+  @Test\n   public void testMisspelledKeywordDistance() {\n-    CobolVisitor visitor = new CobolVisitor(null, null, null);\n     CobolParser.StatementContext node = mock(CobolParser.StatementContext.class);\n     when(node.getStart()).thenReturn(createNewToken(WRONG_TOKEN));\n+    when(node.getStop()).thenReturn(createNewToken(WRONG_TOKEN));\n+\n+    CommonTokenStream tokenStream = mock(CommonTokenStream.class);\n+\n+    CobolVisitor visitor = new CobolVisitor(null, null, tokenStream);\n \n     visitor.visitStatement(node);\n \n"}}, {"oid": "141fe4d44fe4a14fe05046990d626485f52c0a00", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/141fe4d44fe4a14fe05046990d626485f52c0a00", "message": "add exception test + address requested changes", "committedDate": "2020-07-22T13:54:01Z", "type": "commit"}]}