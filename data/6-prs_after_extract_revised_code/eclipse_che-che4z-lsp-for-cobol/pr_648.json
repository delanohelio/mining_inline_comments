{"pr_number": 648, "pr_title": "refactor: Resolve Coverity Issues", "pr_createdAt": "2020-11-12T14:59:20Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NTMyNQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522175325", "bodyText": "", "author": "Nurkambay", "createdAt": "2020-11-12T15:05:20Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java", "diffHunk": "@@ -96,8 +96,9 @@ boolean isPipeEnabled(@NonNull String[] args) {\n       LOG.info(\"Language server started using socket communication on port [{}]\", LSP_PORT);\n       LOG.info(\"Java version: \" + Runtime.version());\n       // wait for clients to connect\n-      Socket socket = serverSocket.accept();\n-      return createServerLauncher(server, socket.getInputStream(), socket.getOutputStream());\n+      try (Socket socket = serverSocket.accept()) {", "originalCommit": "957276dbf4a5720416222373cffdc37eb496d02d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NDUyMg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522194522", "bodyText": "INFO: Socket closed\njava.net.SocketException: Socket closed\n\tat java.base/sun.nio.ch.NioSocketImpl.ensureOpenAndConnected(NioSocketImpl.java:166)\n\tat java.base/sun.nio.ch.NioSocketImpl.beginRead(NioSocketImpl.java:232)\n\tat java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:300)\n\tat java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:351)\n\tat java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:802)\n\tat java.base/java.net.Socket$SocketInputStream.read(Socket.java:937)\n\tat java.base/java.net.Socket$SocketInputStream.read(Socket.java:932)\n\tat org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:79)\n\tat org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:99)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:830)", "author": "temanbrcom", "createdAt": "2020-11-12T15:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5ODgxNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522198816", "bodyText": "Have checked the first time without client-side and missed this error, thanks!\nReverted.", "author": "Nurkambay", "createdAt": "2020-11-12T15:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NTMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "febe3ab3472fd567627b96fd463ecd66b30d1cf4", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java b/server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java\nindex 6b7e4f0a..ab04e034 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java\n\n@@ -96,9 +96,8 @@ public class LangServerBootstrap {\n       LOG.info(\"Language server started using socket communication on port [{}]\", LSP_PORT);\n       LOG.info(\"Java version: \" + Runtime.version());\n       // wait for clients to connect\n-      try (Socket socket = serverSocket.accept()) {\n-        return createServerLauncher(server, socket.getInputStream(), socket.getOutputStream());\n-      }\n+      Socket socket = serverSocket.accept();\n+      return createServerLauncher(server, socket.getInputStream(), socket.getOutputStream());\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NTU5MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522175591", "bodyText": "", "author": "Nurkambay", "createdAt": "2020-11-12T15:05:43Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/semantics/outline/OutlineTreeBuilder.java", "diffHunk": "@@ -187,7 +186,7 @@ private void addOutlineNodeToTree(List<DocumentSymbol> outlineNodes, DocumentSym\n   }\n \n   @Value\n-  private class VariableNode {\n+  private static class VariableNode {", "originalCommit": "957276dbf4a5720416222373cffdc37eb496d02d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NTg4MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522175881", "bodyText": "", "author": "Nurkambay", "createdAt": "2020-11-12T15:06:05Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java", "diffHunk": "@@ -64,13 +66,14 @@ public void setMessageService(MessageService messageService) {\n     this.messageService = messageService;\n   }\n \n-  private String getExpectedToken(Parser recognizer, InputMismatchException e) {\n-    if (e == null) {\n-      IntervalSet expecting = getExpectedTokens(recognizer);\n-      return expecting.toString(recognizer.getVocabulary());\n-    } else {\n-      return e.getExpectedTokens().toString(recognizer.getVocabulary());\n-    }\n+  private String getExpectedToken(@NonNull Parser recognizer, InputMismatchException e) {", "originalCommit": "957276dbf4a5720416222373cffdc37eb496d02d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "febe3ab3472fd567627b96fd463ecd66b30d1cf4", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java b/server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java\nindex fb2b02db..52050ad6 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java\n\n@@ -73,7 +73,7 @@ public class CobolErrorStrategy extends DefaultErrorStrategy {\n \n     return Optional.ofNullable(expecting)\n         .map(exp -> exp.toString(recognizer.getVocabulary()))\n-        .orElseThrow(() -> new RuntimeException(\"Cannot find expected tokens\"));\n+        .orElse(\"\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NjY5Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522176693", "bodyText": "", "author": "Nurkambay", "createdAt": "2020-11-12T15:07:09Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "diffHunk": "@@ -291,7 +288,7 @@ public Class visitLocalStorageSection(LocalStorageSectionContext ctx) {\n \n   @Override\n   public Class visitStatement(StatementContext ctx) {\n-    List<Token> tokenList =\n+    @NonNull List<Token> tokenList =", "originalCommit": "957276dbf4a5720416222373cffdc37eb496d02d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzMzQ3OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522233479", "bodyText": "Sorry, but it will not work this way. Lombok's NonNull works only with parameters.", "author": "grianbrcom", "createdAt": "2020-11-12T16:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NjY5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f8729b0ac365c265118785eb4bac17fbb52c13d9", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java b/server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java\nindex 7f305743..7ea411ff 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java\n\n@@ -288,7 +288,7 @@ public class CobolVisitor extends CobolParserBaseVisitor<Class> {\n \n   @Override\n   public Class visitStatement(StatementContext ctx) {\n-    @NonNull List<Token> tokenList =\n+    List<Token> tokenList =\n         tokenStream.getTokens(ctx.getStart().getTokenIndex(), ctx.getStop().getTokenIndex());\n     areaBWarning(tokenList);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NzE3Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522177176", "bodyText": "", "author": "Nurkambay", "createdAt": "2020-11-12T15:07:47Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "diffHunk": "@@ -568,8 +565,9 @@ private void checkVariableStructure(\n     }\n   }\n \n-  private String extractErrorStatementText(Token childToken, Token parentToken) {\n-    return tokenStream.getTokens(childToken.getTokenIndex(), parentToken.getTokenIndex()).stream()\n+  private String extractErrorStatementText(@NonNull Token childToken, @NonNull Token parentToken) {\n+    @NonNull List<Token> tokenList = tokenStream.getTokens(childToken.getTokenIndex(), parentToken.getTokenIndex());", "originalCommit": "957276dbf4a5720416222373cffdc37eb496d02d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8729b0ac365c265118785eb4bac17fbb52c13d9", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java b/server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java\nindex 7f305743..7ea411ff 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java\n\n@@ -566,8 +566,10 @@ public class CobolVisitor extends CobolParserBaseVisitor<Class> {\n   }\n \n   private String extractErrorStatementText(@NonNull Token childToken, @NonNull Token parentToken) {\n-    @NonNull List<Token> tokenList = tokenStream.getTokens(childToken.getTokenIndex(), parentToken.getTokenIndex());\n-    return tokenList.stream()\n+    List<Token> tokenList = tokenStream.getTokens(childToken.getTokenIndex(), parentToken.getTokenIndex());\n+\n+    return Optional.ofNullable(tokenList).stream()\n+        .flatMap(Collection::stream)\n         .map(Token::getText)\n         .collect(joining())\n         .replaceAll(\" +\", \" \");\n"}}, {"oid": "e54be02d18b29e0cdee36d2f9ea0d84b46cf30a7", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e54be02d18b29e0cdee36d2f9ea0d84b46cf30a7", "message": "refactor: Resolve Coverity Issues\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>", "committedDate": "2020-11-12T15:09:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4Njc5Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522186796", "bodyText": "", "author": "Nurkambay", "createdAt": "2020-11-12T15:20:25Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -117,7 +117,7 @@ CopybookModel resolveSync(\n       @NonNull String documentUri,\n       @NonNull CopybookProcessingMode copybookProcessingMode)\n       throws ExecutionException, InterruptedException {\n-    String cobolFileName = files.getNameFromURI(documentUri);\n+    @NonNull String cobolFileName = files.getNameFromURI(documentUri);", "originalCommit": "e54be02d18b29e0cdee36d2f9ea0d84b46cf30a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1OTkwMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522259903", "bodyText": "Please, rewrite this too. The annotation will not work here as well.\nAs I see, this error is about null check between computeIfAbsent and add calls.", "author": "grianbrcom", "createdAt": "2020-11-12T16:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4Njc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f31b6e7d8732c8c04be0a4cc303e3636d96a5f00", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java b/server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java\nindex d1d49da2..655cde97 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java\n\n@@ -117,16 +117,15 @@ public class CopybookServiceImpl implements CopybookService, ThreadInterruptAspe\n       @NonNull String documentUri,\n       @NonNull CopybookProcessingMode copybookProcessingMode)\n       throws ExecutionException, InterruptedException {\n-    @NonNull String cobolFileName = files.getNameFromURI(documentUri);\n+    String cobolFileName = files.getNameFromURI(documentUri);\n     String uri =\n         retrieveURI(\n             settingsService\n                 .getConfiguration(COPYBOOK_RESOLVE.label, cobolFileName, copybookName)\n                 .get());\n     if (uri.isEmpty()) {\n-      if (copybookProcessingMode.download) {\n-        copybooksForDownloading\n-            .computeIfAbsent(cobolFileName, s -> ConcurrentHashMap.newKeySet())\n+      if (copybookProcessingMode.download && cobolFileName != null) {\n+        copybooksForDownloading.computeIfAbsent(cobolFileName, s -> ConcurrentHashMap.newKeySet())\n             .add(copybookName);\n       }\n       return new CopybookModel(copybookName, null, null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5Mjc1MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522192750", "bodyText": "Maybe, it would be better to just return an empty string?", "author": "temanbrcom", "createdAt": "2020-11-12T15:28:09Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java", "diffHunk": "@@ -64,13 +66,14 @@ public void setMessageService(MessageService messageService) {\n     this.messageService = messageService;\n   }\n \n-  private String getExpectedToken(Parser recognizer, InputMismatchException e) {\n-    if (e == null) {\n-      IntervalSet expecting = getExpectedTokens(recognizer);\n-      return expecting.toString(recognizer.getVocabulary());\n-    } else {\n-      return e.getExpectedTokens().toString(recognizer.getVocabulary());\n-    }\n+  private String getExpectedToken(@NonNull Parser recognizer, InputMismatchException e) {\n+    IntervalSet expecting = Optional.ofNullable(e)\n+        .map(RecognitionException::getExpectedTokens)\n+        .orElse(getExpectedTokens(recognizer));\n+\n+    return Optional.ofNullable(expecting)\n+        .map(exp -> exp.toString(recognizer.getVocabulary()))\n+        .orElseThrow(() -> new RuntimeException(\"Cannot find expected tokens\"));", "originalCommit": "e54be02d18b29e0cdee36d2f9ea0d84b46cf30a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "febe3ab3472fd567627b96fd463ecd66b30d1cf4", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java b/server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java\nindex fb2b02db..52050ad6 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java\n\n@@ -73,7 +73,7 @@ public class CobolErrorStrategy extends DefaultErrorStrategy {\n \n     return Optional.ofNullable(expecting)\n         .map(exp -> exp.toString(recognizer.getVocabulary()))\n-        .orElseThrow(() -> new RuntimeException(\"Cannot find expected tokens\"));\n+        .orElse(\"\");\n   }\n \n   @Override\n"}}, {"oid": "febe3ab3472fd567627b96fd463ecd66b30d1cf4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/febe3ab3472fd567627b96fd463ecd66b30d1cf4", "message": "refactor: Resolve Coverity Issues\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>", "committedDate": "2020-11-12T15:35:00Z", "type": "forcePushed"}, {"oid": "f8729b0ac365c265118785eb4bac17fbb52c13d9", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f8729b0ac365c265118785eb4bac17fbb52c13d9", "message": "refactor: Resolve Coverity Issues\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>", "committedDate": "2020-11-12T16:49:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1NzY2OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522257668", "bodyText": "Will throw an exception on null tokenList", "author": "Nurkambay", "createdAt": "2020-11-12T16:51:37Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "diffHunk": "@@ -620,7 +620,7 @@ private void areaAWarning(Token token) {\n         .ifPresent(it -> throwException(token.getText(), it, messageService.getMessage(\"CobolVisitor.AreaAWarningMsg\")));\n   }\n \n-  private void areaBWarning(List<Token> tokenList) {\n+  private void areaBWarning(@NonNull List<Token> tokenList) {", "originalCommit": "f8729b0ac365c265118785eb4bac17fbb52c13d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1OTA5MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522259090", "bodyText": "This makes sense. Let's see if Coverity agreed with this.", "author": "grianbrcom", "createdAt": "2020-11-12T16:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1NzY2OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f31b6e7d8732c8c04be0a4cc303e3636d96a5f00", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f31b6e7d8732c8c04be0a4cc303e3636d96a5f00", "message": "refactor: Resolve Coverity Issues\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>", "committedDate": "2020-11-12T17:06:29Z", "type": "commit"}, {"oid": "f31b6e7d8732c8c04be0a4cc303e3636d96a5f00", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f31b6e7d8732c8c04be0a4cc303e3636d96a5f00", "message": "refactor: Resolve Coverity Issues\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>", "committedDate": "2020-11-12T17:06:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc2Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522269766", "bodyText": "Anyway better to check cobolFileName for null.\ncopybooksForDownloading.computeIfAbsent if always not null, so it is false-positive issue in that case", "author": "Nurkambay", "createdAt": "2020-11-12T17:08:06Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -124,9 +124,8 @@ CopybookModel resolveSync(\n                 .getConfiguration(COPYBOOK_RESOLVE.label, cobolFileName, copybookName)\n                 .get());\n     if (uri.isEmpty()) {\n-      if (copybookProcessingMode.download) {\n-        copybooksForDownloading\n-            .computeIfAbsent(cobolFileName, s -> ConcurrentHashMap.newKeySet())\n+      if (copybookProcessingMode.download && cobolFileName != null) {", "originalCommit": "f31b6e7d8732c8c04be0a4cc303e3636d96a5f00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3MjMzOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522272338", "bodyText": "I think that the issue is that computeIfAbsent can return null if our mapping function returns null. But maybe your assumption right.", "author": "grianbrcom", "createdAt": "2020-11-12T17:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3MzMzOQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522273339", "bodyText": "Maybe better to check this set as well :-)", "author": "Nurkambay", "createdAt": "2020-11-12T17:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3NDU0NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522274544", "bodyText": "Nope :-( Have a warning from Idea that set is always not null:\n        Set<String> copybooks = copybooksForDownloading.computeIfAbsent(cobolFileName, s -> ConcurrentHashMap.newKeySet());\n        Optional.ofNullable(copybooks).ifPresent(c -> c.add(copybookName));", "author": "Nurkambay", "createdAt": "2020-11-12T17:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3NjY1OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/648#discussion_r522276658", "bodyText": "I agree that it will never be a null. We will see it tomorrow.", "author": "grianbrcom", "createdAt": "2020-11-12T17:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc2Ng=="}], "type": "inlineReview", "revised_code": null}]}