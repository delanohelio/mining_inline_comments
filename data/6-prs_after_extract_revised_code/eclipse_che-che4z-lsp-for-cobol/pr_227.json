{"pr_number": 227, "pr_title": "Finalize LRU algorithm #226", "pr_createdAt": "2020-03-05T21:18:54Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/227", "timeline": [{"oid": "6a85fd1b11e030e0a6e9898077441e9e5e812530", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/6a85fd1b11e030e0a6e9898077441e9e5e812530", "message": "Finalize LRU algorithm by adding the time", "committedDate": "2020-03-05T21:13:58Z", "type": "commit"}, {"oid": "082f114b526b97361b969145b73b2fdef7d6932e", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/082f114b526b97361b969145b73b2fdef7d6932e", "message": "update CHANGELOG.md", "committedDate": "2020-03-05T21:21:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2NTc4Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/227#discussion_r388765787", "bodyText": "We can use the method reference directly CopybookStorable::isExpired", "author": "zacanbrcom", "createdAt": "2020-03-06T08:20:40Z", "path": "com.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRU.java", "diffHunk": "@@ -84,6 +88,8 @@ public void setSort(boolean isSort) {\n   @Override\n   @SneakyThrows\n   public synchronized void persist(@NonNull CopybookStorable deepCopy) {\n+    cpyRepo.removeIf(elem -> elem.isExpired());", "originalCommit": "082f114b526b97361b969145b73b2fdef7d6932e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8928b9a5f36b2e8b09e29392a6a52c9bd7758fde", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRU.java b/com.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRU.java\nindex a4179521..fa41aac1 100644\n--- a/com.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRU.java\n+++ b/com.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRU.java\n\n@@ -88,7 +88,7 @@ public class CopybookRepositoryLRU implements CopybookRepository {\n   @Override\n   @SneakyThrows\n   public synchronized void persist(@NonNull CopybookStorable deepCopy) {\n-    cpyRepo.removeIf(elem -> elem.isExpired());\n+    cpyRepo.removeIf(CopybookStorable::isExpired);\n \n     if (!isStored(deepCopy.getId())) {\n       if (cpyRepo.size() < getCacheMaxSize()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3NDI3MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/227#discussion_r388774271", "bodyText": "Here is better use to use a waiter", "author": "zacanbrcom", "createdAt": "2020-03-06T08:41:30Z", "path": "com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRUTest.java", "diffHunk": "@@ -62,6 +66,60 @@ public void testPersist() {\n     assertEquals(repository.size(), prevCacheSize + 1);\n   }\n \n+  /**\n+   * This test validates that the cache is throwing the expired elements away, the elements which\n+   * are older than 3h\n+   *\n+   * @throws NoSuchFieldException\n+   */\n+  @Test\n+  public void testCacheExpiration() throws NoSuchFieldException {\n+    long genDt = Instant.now().minus(4, ChronoUnit.HOURS).getEpochSecond();\n+\n+    CopybookStorable storableCpy = new CopybookStorable(\"REMOVE\", \"URI\", \"DUMMY CONTENT\");\n+    Field f = storableCpy.getClass().getDeclaredField(\"genDt\");\n+    f.setAccessible(true);\n+    FieldSetter.setField(storableCpy, f, genDt);\n+\n+    repository.persist(storableCpy);\n+    repository.persist(new CopybookStorable(\"NEW_STO\", \"URI\", \"DUMMY CONTENT\"));\n+    repository.persist(new CopybookStorable(\"NEW_STO232\", \"URI\", \"DUMMY CONTENT\"));\n+    repository.persist(new CopybookStorable(\"NEW_STO\", \"URI\", \"DUMMY CONTENT\"));\n+\n+    assertEquals(3, repository.size());\n+  }\n+\n+  /**\n+   * This test validates the cache sort mechanism, first is sorted by the hits and after by the\n+   * time, it is worth to mention that we need to put the thread asleep for 1ms in order to have a\n+   * time difference at the creation moment, if not it will not differentiate and the order will be\n+   * not the expected one\n+   *\n+   * @throws InterruptedException\n+   */\n+  @Test\n+  public void testCacheSort() throws InterruptedException {\n+    CopybookStorable topElem = new CopybookStorable(\"NEW_STO3\", \"URI\", \"DUMMY CONTENT\");\n+    Thread.sleep(1);", "originalCommit": "082f114b526b97361b969145b73b2fdef7d6932e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8928b9a5f36b2e8b09e29392a6a52c9bd7758fde", "chunk": "diff --git a/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRUTest.java b/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRUTest.java\nindex 6f08f19a..5b24375c 100644\n--- a/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRUTest.java\n+++ b/com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRUTest.java\n\n@@ -90,21 +93,34 @@ public class CopybookRepositoryLRUTest extends CopybookStorableProvider {\n   }\n \n   /**\n-   * This test validates the cache sort mechanism, first is sorted by the hits and after by the\n-   * time, it is worth to mention that we need to put the thread asleep for 1ms in order to have a\n+   * This test validates the cache sort mechanism, first is sorted by the hits and after by the time\n+   * in ms, it is worth to mention that we need to delay with 1ms the element in order to have a\n    * time difference at the creation moment, if not it will not differentiate and the order will be\n    * not the expected one\n    *\n-   * @throws InterruptedException\n+   * @throws NoSuchFieldException\n    */\n   @Test\n-  public void testCacheSort() throws InterruptedException {\n-    CopybookStorable topElem = new CopybookStorable(\"NEW_STO3\", \"URI\", \"DUMMY CONTENT\");\n-    Thread.sleep(1);\n-    CopybookStorable lastElem = new CopybookStorable(\"NEW_STO1\", \"URI\", \"DUMMY CONTENT\");\n+  public void testCacheSort() throws NoSuchFieldException {\n+    long genDt = Instant.now().minus(1, ChronoUnit.MILLIS).toEpochMilli();\n+\n+    CopybookStorable elem1 = new CopybookStorable(\"NEW_STO3\", \"URI\", \"DUMMY CONTENT\");\n+\n+    /*\n+     The mechanism is using ms to evaluate the time of creation, because the process is too fast there is a need\n+      for one ms delay\n+    */\n+    Field f = elem1.getClass().getDeclaredField(\"genDt\");\n+    f.setAccessible(true);\n+    FieldSetter.setField(elem1, f, genDt);\n+\n+    CopybookStorable elem2 = new CopybookStorable(\"NEW_STO1\", \"URI\", \"DUMMY CONTENT\");\n \n-    repository.persist(topElem);\n-    repository.persist(lastElem);\n+    /*\n+     Element1 and element2 are used as notation in order to make more visible the expected result\n+    */\n+    repository.persist(elem1);\n+    repository.persist(elem2);\n     repository.persist(new CopybookStorable(\"NEW_STO\", \"URI\", \"DUMMY CONTENT\"));\n     repository.persist(new CopybookStorable(\"NEW_STO2\", \"URI\", \"DUMMY CONTENT\"));\n     repository.persist(new CopybookStorable(\"NEW_STO\", \"URI\", \"DUMMY CONTENT\"));\n"}}, {"oid": "8928b9a5f36b2e8b09e29392a6a52c9bd7758fde", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/8928b9a5f36b2e8b09e29392a6a52c9bd7758fde", "message": "Add negative test and address requested changes", "committedDate": "2020-03-06T10:44:27Z", "type": "commit"}]}