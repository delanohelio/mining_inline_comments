{"pr_number": 126, "pr_title": "Engineering Excellence and Dependency Injection", "pr_createdAt": "2020-01-04T11:37:12Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126", "timeline": [{"oid": "89782f06ef21e82f1cb0c8db29e7328127d4a558", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/89782f06ef21e82f1cb0c8db29e7328127d4a558", "message": "Remove a circular dependency in the serive module GH-24\nMake the Server a Client provider in order to remove circular binding LanguageServer->TextDocumentService->Communications->LanguageServer. The server instance is unnecesssary for communications because there is only a client proxy required.\nThe injection of Provider is needed for a lazy client resolution due to the client proxy is available only after a connection, not on a bootstrap stage.", "committedDate": "2019-12-31T11:21:09Z", "type": "commit"}, {"oid": "9c3c9cb125dd99c1ee091752e7c5fdea68e3ad22", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9c3c9cb125dd99c1ee091752e7c5fdea68e3ad22", "message": "Cover server bootstrap with tests. In order to do this the unnecessary feature to accept multiple clients on a socket connection was removed.", "committedDate": "2019-12-31T16:21:46Z", "type": "commit"}, {"oid": "e07278dc93aed6f04c0d20658bfb7fe287adae0d", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e07278dc93aed6f04c0d20658bfb7fe287adae0d", "message": "Decouple server and client proxy to simplify dependencies GH-24\nImplement a separate client provider in order to be have access to a server without a client and vice versa. The reason is to simpify dependencies in tests.", "committedDate": "2020-01-02T09:53:43Z", "type": "commit"}, {"oid": "9f761f3edb37a1194cf01a3345edfbb81707289b", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9f761f3edb37a1194cf01a3345edfbb81707289b", "message": "Provide binding for language engine entry point GH-24\nThe requirement to support different language types is out of date, so the infrastructure to create a language engine was simplified and replaced with injected engine.\nBinding of CobolSourceFormat required its extraction to a separate class that have lead the severe renaming refactoring over the core module.", "committedDate": "2020-01-02T15:26:22Z", "type": "commit"}, {"oid": "e7e9c8738ae4fba17e106917954c4c37b54cba4f", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e7e9c8738ae4fba17e106917954c4c37b54cba4f", "message": "Remove Nonnull annotation due to a lazy provider may not contain a client", "committedDate": "2020-01-03T09:39:33Z", "type": "commit"}, {"oid": "f37f0b1f46ee05f78d35454a7021ced461b79b7f", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f37f0b1f46ee05f78d35454a7021ced461b79b7f", "message": "Refactor Bootstrap to keep a single repsoncibilty of methods", "committedDate": "2020-01-03T10:43:57Z", "type": "commit"}, {"oid": "724f42f2d5c26f54db32159582992f6a29ca3137", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/724f42f2d5c26f54db32159582992f6a29ca3137", "message": "Remove mock client from mock server to simplify dependencies GH-24", "committedDate": "2020-01-03T11:50:44Z", "type": "commit"}, {"oid": "3ad8791ce4a18de99352a13c5f3ea7a17fd969bd", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3ad8791ce4a18de99352a13c5f3ea7a17fd969bd", "message": "Make use cases work with the language engine directly\nWith an ability to instantiate the language engine it is better for the tests to use it directly, without mocks of server and client.", "committedDate": "2020-01-03T14:13:42Z", "type": "commit"}, {"oid": "3a401a81f0ddc3ce448f8f04c2e113113acb8bc7", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3a401a81f0ddc3ce448f8f04c2e113113acb8bc7", "message": "Move the service delegates to the separate packagesto make it clearer", "committedDate": "2020-01-03T14:48:53Z", "type": "commit"}, {"oid": "0099ef2f7482d7a6ee79f66a910d9fd643527c45", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0099ef2f7482d7a6ee79f66a910d9fd643527c45", "message": "Provide dependency binding for formation delegates #24", "committedDate": "2020-01-03T15:58:04Z", "type": "commit"}, {"oid": "f175a984440865eed28b93d07c145a8af6c22dee", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f175a984440865eed28b93d07c145a8af6c22dee", "message": "Provide binding for the completion delegate GH-24\nConvert the Comletions entry point form util class to an injectable dependency in order to make it testable.\nThe common logic to retrieve the completion suggestions and resolve documentation is moved to the Completions class because the additional abstraction level is not needed anymore.\nNow the type-specific resolvers are injected as a set instead of chain responsibility due to the resolution order doesn't matter in this case. The order of elements is specified using an order constant specific to an item kind.", "committedDate": "2020-01-04T11:32:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0MTg2NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363241865", "bodyText": "is just formatting?", "author": "zacanbrcom", "createdAt": "2020-01-06T10:41:17Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserImpl.java", "diffHunk": "@@ -68,21 +67,22 @@ public PreprocessedInput processLines(\n     return new PreprocessedInput(listener.context().read(), semanticContext);\n   }\n \n-  private void processCopybooks(CobolSourceFormatEnum format) {\n+  private void processCopybooks(CobolSourceFormat format) {\n     Multimap<String, Position> copybookNames = semanticContext.getCopybooks().getDefinitions();\n     if (copybookNames.isEmpty()) {\n       return;\n     }\n     CopybookAnalysis copybookAnalyzer = createCopybookAnalyzer();\n     List<CopybookSemanticContext> contexts =\n-        copybookAnalyzer.analyzeCopybooks(copybookNames, semanticContext.getCopybookUsageTracker(), format);\n+        copybookAnalyzer.analyzeCopybooks(\n+            copybookNames, semanticContext.getCopybookUsageTracker(), format);", "originalCommit": "f175a984440865eed28b93d07c145a8af6c22dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI2MTg2Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363261862", "bodyText": "yes", "author": "temanbrcom", "createdAt": "2020-01-06T11:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0MTg2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0Mjk5MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363242990", "bodyText": "That is a lot of asterisks. And year should be 2020", "author": "ishche", "createdAt": "2020-01-06T10:44:27Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/ClientProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *\n+ *  * Copyright (c) 2019 Broadcom.", "originalCommit": "f175a984440865eed28b93d07c145a8af6c22dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI1MDU0Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363250543", "bodyText": "about the year @shciubrcom, it is true that is a new class but we didn't agree on the format, we will have to change later anyway. I think the commit can be approved without modifying this.", "author": "sergiuilie", "createdAt": "2020-01-06T11:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0Mjk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI1MTIyNw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363251227", "bodyText": "yes. I've approved it.", "author": "ishche", "createdAt": "2020-01-06T11:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0Mjk5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0NTg5MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363245890", "bodyText": "2020", "author": "ishche", "createdAt": "2020-01-06T10:53:05Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/delegates/completions/Completion.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2019 Broadcom.", "originalCommit": "f175a984440865eed28b93d07c145a8af6c22dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI1OTc3Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363259776", "bodyText": "is this class from lsp4j? do they have a license?", "author": "sergiuilie", "createdAt": "2020-01-06T11:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0NTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI3OTA2OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363279068", "bodyText": "No, this is our class", "author": "temanbrcom", "createdAt": "2020-01-06T12:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0NTg5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0Njk0NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/126#discussion_r363246944", "bodyText": "also something wrong with copyright here", "author": "ishche", "createdAt": "2020-01-06T10:56:17Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/LangServerBootstrapTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ *\n+ *  * Copyright (c) 2019 Broadcom.", "originalCommit": "f175a984440865eed28b93d07c145a8af6c22dee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}