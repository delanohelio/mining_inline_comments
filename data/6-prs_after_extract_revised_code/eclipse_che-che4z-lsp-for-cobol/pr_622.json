{"pr_number": 622, "pr_title": "using custom thread pool executor #615", "pr_createdAt": "2020-11-06T10:04:07Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NjQ1Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518656453", "bodyText": "Any specific reason to start the server using this executor service?\nIf we don't, we can use customExecutor to stop all server processing by shutting down the customExecutor during shutdown call before exit.", "author": "ap891843", "createdAt": "2020-11-06T10:22:40Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java", "diffHunk": "@@ -78,30 +85,37 @@ private void start(\n     }\n   }\n \n-  Launcher<LanguageClient> launchServer(@NonNull String[] args, @NonNull LanguageServer server)\n+  Launcher<LanguageClient> launchServer(\n+      @NonNull String[] args,\n+      @NonNull LanguageServer server,\n+      @NonNull ExecutorService executorService)\n       throws IOException {\n     return isPipeEnabled(args)\n-        ? createServerLauncher(server, System.in, System.out)\n-        : createServerLauncherWithSocket(server);\n+        ? createServerLauncher(server, System.in, System.out, executorService)", "originalCommit": "ea27044a59b96aceb9db2c8e860090b07bc56442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NzM0Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518657342", "bodyText": "Yes, shutdown I forgot ;) thanks", "author": "asatklichov", "createdAt": "2020-11-06T10:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NjQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "291ed034484978f0a0149a233c9dfdb835c73605", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java b/server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java\nindex d90ed433..8d6df511 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java\n\n@@ -82,6 +82,8 @@ public class LangServerBootstrap {\n     } catch (IOException e) {\n       LOG.error(\"Unable to start server using socket communication on port [{}]\", LSP_PORT);\n       throw e;\n+    } finally {\n+      executorService.shutdown();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MTI0Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518671246", "bodyText": "So, it creates a new executor on each call?", "author": "temanbrcom", "createdAt": "2020-11-06T10:49:42Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+\n+import java.util.concurrent.*;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {\n+\n+  private int corePoolSize;\n+  private int maximumPoolSize;\n+  private int keepAliveTime;\n+  private int corePoolSizeForScheduledThreadPool;\n+\n+  @Inject\n+  public CustomThreadPoolExecutorService(\n+      @Named(\"CORE-POOL-SIZE\") int corePoolSize,\n+      @Named(\"MAX-POOL-SIZE\") int maximumPoolSize,\n+      @Named(\"KEEP-ALIVE-TIME-IN-SECONDS\") int keepAliveTim,\n+      @Named(\"CORE-POOL-SIZE-FOR-SCHEDULED-POOL\") int corePoolSizeForScheduledThreadPool) {\n+    this.corePoolSize = corePoolSize;\n+    this.maximumPoolSize = maximumPoolSize;\n+    this.keepAliveTime = keepAliveTime;\n+    this.corePoolSizeForScheduledThreadPool = corePoolSizeForScheduledThreadPool;\n+  }\n+\n+  private ExecutorService getThreadPoolExecutor(\n+      int corePoolSize, int maxPoolSize, long keepAliveTime) {\n+    return new ThreadPoolExecutor(\n+        corePoolSize,\n+        maxPoolSize,\n+        keepAliveTime,\n+        TimeUnit.SECONDS,\n+        new LinkedBlockingQueue<Runnable>());\n+  }\n+\n+  private ScheduledExecutorService getScheduledThreadPoolExecutor(\n+      int corePoolSizeForScheduledThreadPool) {\n+    return new ScheduledThreadPoolExecutor(corePoolSizeForScheduledThreadPool);", "originalCommit": "ea27044a59b96aceb9db2c8e860090b07bc56442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMTUwMA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518701500", "bodyText": "Initial solution was based on util-class, yes I will make this single-loaded", "author": "asatklichov", "createdAt": "2020-11-06T11:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MTI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "291ed034484978f0a0149a233c9dfdb835c73605", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nsimilarity index 65%\nrename from server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\nrename to server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nindex 8c1ba487..865b7e00 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\n\n@@ -3,6 +3,7 @@ package com.broadcom.lsp.cobol.service.utils;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n import com.google.inject.name.Named;\n+import lombok.NonNull;\n \n import java.util.concurrent.*;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MTk1Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518671957", "bodyText": "Could you, please, rewrite it to avoid using the LangServerCtx? We plan to get rid of this class", "author": "temanbrcom", "createdAt": "2020-11-06T10:51:02Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/LangServerBootstrapTest.java", "diffHunk": "@@ -49,10 +65,12 @@ void initCtx() {\n \n     // Bound class in Service module\n     CobolLanguageServer server = getInjector().getInstance(CobolLanguageServer.class);\n+    CustomThreadPoolExecutor customExecutor = LangServerCtx.getInjector().getInstance(CustomThreadPoolExecutor.class);", "originalCommit": "ea27044a59b96aceb9db2c8e860090b07bc56442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzUzOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518703538", "bodyText": "Ok, then   both server  and customExecutor  via constructor.  LangServerCtx is used in test, but can be removed.", "author": "asatklichov", "createdAt": "2020-11-06T11:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MTk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyNzI3MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519627271", "bodyText": "Could you, please, rewrite it to avoid using the LangServerCtx? We plan to get rid of this class\n\nAs a part of  #621 this will be refactored", "author": "asatklichov", "createdAt": "2020-11-09T08:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MTk1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MzcwMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518673703", "bodyText": "Will schedule each task in a new executor", "author": "temanbrcom", "createdAt": "2020-11-06T10:54:16Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "diffHunk": "@@ -83,7 +87,7 @@ public void notifyThatEngineNotFound(String languageType) {\n   public void notifyThatLoadingInProgress(String uri) {\n     String decodedUri = files.decodeURI(uri);\n     uriInProgress.add(decodedUri);\n-    executor.schedule(\n+    customExecutor.getScheduledThreadPoolExecutor().schedule(", "originalCommit": "ea27044a59b96aceb9db2c8e860090b07bc56442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMzQ4Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519633483", "bodyText": "Will schedule each task in a new executor\n\ndone", "author": "asatklichov", "createdAt": "2020-11-09T08:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MzcwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NTMxOQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519185319", "bodyText": "Why are you bind CustomThreadPoolExecutor in two modules? I think that we can define it only in one place.", "author": "grianbrcom", "createdAt": "2020-11-07T14:54:18Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/domain/modules/ServiceModule.java", "diffHunk": "@@ -50,6 +53,7 @@\n public class ServiceModule extends AbstractModule {\n   @Override\n   protected void configure() {\n+    bind(CustomThreadPoolExecutor.class).to(CustomThreadPoolExecutorService.class);", "originalCommit": "ea27044a59b96aceb9db2c8e860090b07bc56442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyNjc2Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519626763", "bodyText": "I created a new #621 to refactor our DI modules, there are are already duplications in app", "author": "asatklichov", "createdAt": "2020-11-09T08:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NTMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "291ed034484978f0a0149a233c9dfdb835c73605", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/domain/modules/ServiceModule.java b/server/src/main/java/com/broadcom/lsp/cobol/domain/modules/ServiceModule.java\nindex 0ce41443..0c3bfcf2 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/domain/modules/ServiceModule.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/domain/modules/ServiceModule.java\n\n@@ -53,7 +52,7 @@ import static com.google.inject.name.Names.named;\n public class ServiceModule extends AbstractModule {\n   @Override\n   protected void configure() {\n-    bind(CustomThreadPoolExecutor.class).to(CustomThreadPoolExecutorService.class);\n+    bind(CustomThreadPoolExecutor.class).to(CustomThreadPoolExecutorProvider.class);\n     bind(LanguageServer.class).to(CobolLanguageServer.class);\n     bind(LanguageEngineFacade.class).to(CobolLanguageEngineFacade.class);\n     bind(CopybookService.class).to(CopybookServiceImpl.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NjIwOQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519186209", "bodyText": "I suppose that this getter also must return the same ThreadPool each time.\nI see that you want to rewrite getScheduledThreadPoolExecutor, I just want to mark this place for not to forget.", "author": "grianbrcom", "createdAt": "2020-11-07T15:04:16Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+\n+import java.util.concurrent.*;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {\n+\n+  private int corePoolSize;\n+  private int maximumPoolSize;\n+  private int keepAliveTime;\n+  private int corePoolSizeForScheduledThreadPool;\n+\n+  @Inject\n+  public CustomThreadPoolExecutorService(\n+      @Named(\"CORE-POOL-SIZE\") int corePoolSize,\n+      @Named(\"MAX-POOL-SIZE\") int maximumPoolSize,\n+      @Named(\"KEEP-ALIVE-TIME-IN-SECONDS\") int keepAliveTim,\n+      @Named(\"CORE-POOL-SIZE-FOR-SCHEDULED-POOL\") int corePoolSizeForScheduledThreadPool) {\n+    this.corePoolSize = corePoolSize;\n+    this.maximumPoolSize = maximumPoolSize;\n+    this.keepAliveTime = keepAliveTime;\n+    this.corePoolSizeForScheduledThreadPool = corePoolSizeForScheduledThreadPool;\n+  }\n+\n+  private ExecutorService getThreadPoolExecutor(\n+      int corePoolSize, int maxPoolSize, long keepAliveTime) {\n+    return new ThreadPoolExecutor(", "originalCommit": "ea27044a59b96aceb9db2c8e860090b07bc56442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzNTIzNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519635234", "bodyText": "I suppose that this getter also must return the same ThreadPool each time.\nI see that you want to rewrite getScheduledThreadPoolExecutor, I just want to mark this place for not to forget.\n\ndone", "author": "asatklichov", "createdAt": "2020-11-09T08:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NjIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "291ed034484978f0a0149a233c9dfdb835c73605", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nsimilarity index 65%\nrename from server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\nrename to server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nindex 8c1ba487..865b7e00 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\n\n@@ -3,6 +3,7 @@ package com.broadcom.lsp.cobol.service.utils;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n import com.google.inject.name.Named;\n+import lombok.NonNull;\n \n import java.util.concurrent.*;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMDQ2Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519810466", "bodyText": "Why do you store those values?", "author": "temanbrcom", "createdAt": "2020-11-09T13:22:41Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.NonNull;\n+\n+import java.util.Map;\n+import java.util.concurrent.*;\n+\n+import static java.util.Collections.singletonMap;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {\n+\n+  private static final String CUSTOM_THREAD_POOL = \"CUSTOM_THREAD_POOL\";\n+  private static final String CUSTOM_SCHEDULED_THREAD_POOL = \"CUSTOM_SCHEDULED_THREAD_POOL\";\n+\n+  private int corePoolSize;\n+  private int maximumPoolSize;\n+  private int keepAliveTime;\n+  private int corePoolSizeForScheduledThreadPool;", "originalCommit": "6c2f16d38e7dbf624fed54d4b2c6181c3c2a17d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "291ed034484978f0a0149a233c9dfdb835c73605", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nsimilarity index 50%\nrename from server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\nrename to server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nindex fdedbe54..865b7e00 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\n\n@@ -5,11 +5,8 @@ import com.google.inject.Singleton;\n import com.google.inject.name.Named;\n import lombok.NonNull;\n \n-import java.util.Map;\n import java.util.concurrent.*;\n \n-import static java.util.Collections.singletonMap;\n-\n /**\n  * {@inheritDoc}\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMDY1Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519810656", "bodyText": "Why don't store the executors without maps?", "author": "temanbrcom", "createdAt": "2020-11-09T13:23:01Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.NonNull;\n+\n+import java.util.Map;\n+import java.util.concurrent.*;\n+\n+import static java.util.Collections.singletonMap;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {\n+\n+  private static final String CUSTOM_THREAD_POOL = \"CUSTOM_THREAD_POOL\";\n+  private static final String CUSTOM_SCHEDULED_THREAD_POOL = \"CUSTOM_SCHEDULED_THREAD_POOL\";\n+\n+  private int corePoolSize;\n+  private int maximumPoolSize;\n+  private int keepAliveTime;\n+  private int corePoolSizeForScheduledThreadPool;\n+\n+  private Map<String, ExecutorService> executorServiceMap = Map.of();\n+  private Map<String, ScheduledExecutorService> scheduledExecutorServiceMap = Map.of();", "originalCommit": "6c2f16d38e7dbf624fed54d4b2c6181c3c2a17d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzMDU1Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519830556", "bodyText": "Why don't store the executors without maps?\nI will change it, but honestly initial solution (static class) was quite sufficient for our case. These injected services are exceeding its role.", "author": "asatklichov", "createdAt": "2020-11-09T13:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMDY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "291ed034484978f0a0149a233c9dfdb835c73605", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nsimilarity index 50%\nrename from server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\nrename to server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nindex fdedbe54..865b7e00 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\n\n@@ -5,11 +5,8 @@ import com.google.inject.Singleton;\n import com.google.inject.name.Named;\n import lombok.NonNull;\n \n-import java.util.Map;\n import java.util.concurrent.*;\n \n-import static java.util.Collections.singletonMap;\n-\n /**\n  * {@inheritDoc}\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMzM1Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519813357", "bodyText": "The name doesn't reflect the purpose of the class. It is either a Provider that just holds and returns the executors or an Executor, but in this case, it should not expose the nested executors and just provide the API to control the tasks.", "author": "temanbrcom", "createdAt": "2020-11-09T13:27:25Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.NonNull;\n+\n+import java.util.Map;\n+import java.util.concurrent.*;\n+\n+import static java.util.Collections.singletonMap;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {", "originalCommit": "6c2f16d38e7dbf624fed54d4b2c6181c3c2a17d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzNzI2NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519837264", "bodyText": "Changed, will rebase and squash", "author": "asatklichov", "createdAt": "2020-11-09T14:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMzM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "291ed034484978f0a0149a233c9dfdb835c73605", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nsimilarity index 50%\nrename from server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\nrename to server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\nindex fdedbe54..865b7e00 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorProvider.java\n\n@@ -5,11 +5,8 @@ import com.google.inject.Singleton;\n import com.google.inject.name.Named;\n import lombok.NonNull;\n \n-import java.util.Map;\n import java.util.concurrent.*;\n \n-import static java.util.Collections.singletonMap;\n-\n /**\n  * {@inheritDoc}\n  *\n"}}, {"oid": "291ed034484978f0a0149a233c9dfdb835c73605", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/291ed034484978f0a0149a233c9dfdb835c73605", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2020-11-09T14:14:55Z", "type": "forcePushed"}, {"oid": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/05a95eb60c9ef6fe0ad465dcb25eda581252bfda", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2020-11-09T14:42:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNzUxMQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r520727511", "bodyText": "Please, add the LICENSE header.", "author": "grianbrcom", "createdAt": "2020-11-10T17:09:11Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.broadcom.lsp.cobol.service.utils;", "originalCommit": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDc1Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r521190756", "bodyText": "Please, add the LICENSE header.\n\noops, done", "author": "asatklichov", "createdAt": "2020-11-11T08:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNzUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "94180ba45c4168f863573923cba587f6db9c2167", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutor.java b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutor.java\nindex 64a8f1dc..736cec3b 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutor.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutor.java\n\n@@ -1,3 +1,17 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n package com.broadcom.lsp.cobol.service.utils;\n \n import java.util.concurrent.ExecutorService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNzY2OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r520727669", "bodyText": "Please, add the LICENSE header.", "author": "grianbrcom", "createdAt": "2020-11-10T17:09:21Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.broadcom.lsp.cobol.service.utils;", "originalCommit": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94180ba45c4168f863573923cba587f6db9c2167", "chunk": "diff --git a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\nindex ad5f148f..1f7ef04e 100644\n--- a/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\n+++ b/server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java\n\n@@ -1,3 +1,17 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n package com.broadcom.lsp.cobol.service.utils;\n \n import com.google.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyODQzMg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r520728432", "bodyText": "Please, add the LICENSE header.", "author": "grianbrcom", "createdAt": "2020-11-10T17:10:30Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/utils/CustomThreadPoolExecutorTest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.broadcom.lsp.cobol.utils;", "originalCommit": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94180ba45c4168f863573923cba587f6db9c2167", "chunk": "diff --git a/server/src/test/java/com/broadcom/lsp/cobol/utils/CustomThreadPoolExecutorTest.java b/server/src/test/java/com/broadcom/lsp/cobol/utils/CustomThreadPoolExecutorTest.java\nindex 44252a45..e97d38ad 100644\n--- a/server/src/test/java/com/broadcom/lsp/cobol/utils/CustomThreadPoolExecutorTest.java\n+++ b/server/src/test/java/com/broadcom/lsp/cobol/utils/CustomThreadPoolExecutorTest.java\n\n@@ -1,3 +1,17 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n package com.broadcom.lsp.cobol.utils;\n \n import com.broadcom.lsp.cobol.service.utils.CustomThreadPoolExecutor;\n"}}, {"oid": "94180ba45c4168f863573923cba587f6db9c2167", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/94180ba45c4168f863573923cba587f6db9c2167", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2020-11-11T08:23:17Z", "type": "commit"}, {"oid": "94180ba45c4168f863573923cba587f6db9c2167", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/94180ba45c4168f863573923cba587f6db9c2167", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2020-11-11T08:23:17Z", "type": "forcePushed"}]}