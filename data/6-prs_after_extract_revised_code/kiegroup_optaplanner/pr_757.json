{"pr_number": 757, "pr_title": "Rename \"ScoreRules.drl\" to \"Constraint.drl\"", "pr_createdAt": "2020-04-25T10:03:31Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/757", "timeline": [{"oid": "48d3c506df165c9ecdbf717868184fabfe66c152", "url": "https://github.com/kiegroup/optaplanner/commit/48d3c506df165c9ecdbf717868184fabfe66c152", "message": "Rename \"ScoreRules.drl\" to \"Constraint.drl\"", "committedDate": "2020-04-25T09:54:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMzgzMA==", "url": "https://github.com/kiegroup/optaplanner/pull/757#discussion_r415033830", "bodyText": "This is not ideal either way. The original Javadoc assumed that we always use DRL, this one assumes we always use Constraint Streams. Maybe it should be more generic?", "author": "triceo", "createdAt": "2020-04-25T10:30:34Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactCollectionProperty.java", "diffHunk": "@@ -20,24 +20,25 @@\n import java.lang.annotation.Target;\n import java.util.Collection;\n \n-import org.kie.api.runtime.KieSession;\n import org.optaplanner.core.api.domain.entity.PlanningEntity;\n import org.optaplanner.core.api.domain.solution.PlanningSolution;\n-import org.optaplanner.core.impl.score.director.drools.DroolsScoreDirector;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n import org.optaplanner.core.impl.solver.ProblemFactChange;\n \n-import static java.lang.annotation.ElementType.*;\n-import static java.lang.annotation.RetentionPolicy.*;\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n \n /**\n  * Specifies that a property (or a field) on a {@link PlanningSolution} class is a {@link Collection} of problem facts.\n- * A problem fact must not change during solving (except through {@link ProblemFactChange} event).\n+ * A problem fact must not change during solving (except through a {@link ProblemFactChange} event).\n  * <p>\n- * The problem facts will be added as facts in the {@link KieSession} of the {@link DroolsScoreDirector},\n- * so the score rules can use them.\n+ * A {@link ConstraintProvider} builds constraints from such problem facts\n+ * with {@link ConstraintFactory#from(Class)}.\n  * <p>\n  * Do not annotate {@link PlanningEntity planning entities} as problem facts:\n- * they are automatically inserted into the {@link KieSession}.\n+ * they are automatically available as facts with {@link ConstraintFactory#from(Class)}.", "originalCommit": "48d3c506df165c9ecdbf717868184fabfe66c152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjg0Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/757#discussion_r415236846", "bodyText": "Given the philosophy \"ConstraintStreams First, Score DRL Second\", we can only skip Score DRL if it's not crucial. This is indeed a crucial concept - you're right. Let me see what I can make of it.", "author": "ge0ffrey", "createdAt": "2020-04-26T07:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMzgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjkyMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/757#discussion_r415236921", "bodyText": "I just hate importing KieSession here. I want to avoid that.", "author": "ge0ffrey", "createdAt": "2020-04-26T07:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMzgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "46271c8fce1d5f018c5b7639350f6489535850db", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactCollectionProperty.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactCollectionProperty.java\nindex dbfcf72e5..1463cb876 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactCollectionProperty.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactCollectionProperty.java\n\n@@ -34,11 +34,11 @@ import static java.lang.annotation.RetentionPolicy.RUNTIME;\n  * Specifies that a property (or a field) on a {@link PlanningSolution} class is a {@link Collection} of problem facts.\n  * A problem fact must not change during solving (except through a {@link ProblemFactChange} event).\n  * <p>\n- * A {@link ConstraintProvider} builds constraints from such problem facts\n- * with {@link ConstraintFactory#from(Class)}.\n+ * The constraints in a {@link ConstraintProvider} rely on problem facts for {@link ConstraintFactory#from(Class)}.\n+ * Alternatively, scoreDRL relies on problem facts too.\n  * <p>\n  * Do not annotate {@link PlanningEntity planning entities} as problem facts:\n- * they are automatically available as facts with {@link ConstraintFactory#from(Class)}.\n+ * they are automatically available as facts for {@link ConstraintFactory#from(Class)} or DRL.\n  * @see ProblemFactProperty\n  */\n @Target({METHOD, FIELD})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMzkxMw==", "url": "https://github.com/kiegroup/optaplanner/pull/757#discussion_r415033913", "bodyText": "Dtto.", "author": "triceo", "createdAt": "2020-04-25T10:31:02Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactProperty.java", "diffHunk": "@@ -19,25 +19,26 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.Target;\n \n-import org.kie.api.runtime.KieSession;\n import org.optaplanner.core.api.domain.constraintweight.ConstraintConfiguration;\n import org.optaplanner.core.api.domain.entity.PlanningEntity;\n import org.optaplanner.core.api.domain.solution.PlanningSolution;\n-import org.optaplanner.core.impl.score.director.drools.DroolsScoreDirector;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n import org.optaplanner.core.impl.solver.ProblemFactChange;\n \n-import static java.lang.annotation.ElementType.*;\n-import static java.lang.annotation.RetentionPolicy.*;\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n \n /**\n  * Specifies that a property (or a field) on a {@link PlanningSolution} class is a problem fact.\n- * A problem fact must not change during solving (except through {@link ProblemFactChange} event).\n+ * A problem fact must not change during solving (except through a {@link ProblemFactChange} event).\n  * <p>\n- * The problem fact will be added as a fact in the {@link KieSession} of the {@link DroolsScoreDirector},\n- * so the score rules can use it.\n+ * A {@link ConstraintProvider} builds constraints from such a problem fact\n+ * with {@link ConstraintFactory#from(Class)}.\n  * <p>\n- * Do not annotate {@link PlanningEntity planning entities} or a {@link ConstraintConfiguration planning paramerization}\n- * as problem facts: they are automatically inserted into the {@link KieSession}.\n+ * Do not annotate a {@link PlanningEntity planning entity} or a {@link ConstraintConfiguration planning paramerization}\n+ * as a problem fact: they are automatically available as facts with {@link ConstraintFactory#from(Class)}.\n  * @see ProblemFactCollectionProperty\n  */", "originalCommit": "48d3c506df165c9ecdbf717868184fabfe66c152", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46271c8fce1d5f018c5b7639350f6489535850db", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactProperty.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactProperty.java\nindex 172182d37..588d4c0cc 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactProperty.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactProperty.java\n\n@@ -34,11 +34,11 @@ import static java.lang.annotation.RetentionPolicy.RUNTIME;\n  * Specifies that a property (or a field) on a {@link PlanningSolution} class is a problem fact.\n  * A problem fact must not change during solving (except through a {@link ProblemFactChange} event).\n  * <p>\n- * A {@link ConstraintProvider} builds constraints from such a problem fact\n- * with {@link ConstraintFactory#from(Class)}.\n+ * The constraints in a {@link ConstraintProvider} rely on problem facts for {@link ConstraintFactory#from(Class)}.\n+ * Alternatively, scoreDRL relies on problem facts too.\n  * <p>\n  * Do not annotate a {@link PlanningEntity planning entity} or a {@link ConstraintConfiguration planning paramerization}\n- * as a problem fact: they are automatically available as facts with {@link ConstraintFactory#from(Class)}.\n+ * as a problem fact: they are automatically available as facts for {@link ConstraintFactory#from(Class)} or DRL.\n  * @see ProblemFactCollectionProperty\n  */\n @Target({METHOD, FIELD})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzNDEyNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/757#discussion_r415034125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * to fail-fast on a bug in a {@link Move} implementation, a constraint, the engine itself or something else\n          \n          \n            \n                 * at a horrible performance cost.\n          \n          \n            \n                 * to fail-fast on a bug in a {@link Move} implementation, a constraint, the engine itself or something else\n          \n          \n            \n                 * at an overwhelming performance cost.\n          \n      \n    \n    \n  \n\nSomehow appears more professional to me.", "author": "triceo", "createdAt": "2020-04-25T10:32:08Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/solver/EnvironmentMode.java", "diffHunk": "@@ -47,7 +47,7 @@\n     FULL_ASSERT,\n     /**\n      * This mode turns on several assertions (but not all of them)\n-     * to fail-fast on a bug in a {@link Move} implementation, a score rule, the rule engine itself or something else\n+     * to fail-fast on a bug in a {@link Move} implementation, a constraint, the engine itself or something else\n      * at a horrible performance cost.", "originalCommit": "48d3c506df165c9ecdbf717868184fabfe66c152", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b973def74f75fdd50ff524c60ff16a47747b53cc", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/EnvironmentMode.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/EnvironmentMode.java\nindex 4c95ac124..bb95b50a2 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/EnvironmentMode.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/EnvironmentMode.java\n\n@@ -48,7 +48,7 @@ public enum EnvironmentMode {\n     /**\n      * This mode turns on several assertions (but not all of them)\n      * to fail-fast on a bug in a {@link Move} implementation, a constraint, the engine itself or something else\n-     * at a horrible performance cost.\n+     * at an overwhelming performance cost.\n      * <p>\n      * This mode is reproducible (see {@link #REPRODUCIBLE} mode).\n      * <p>\n"}}, {"oid": "3f19fb698f8620d2c4f0ef65ad5f2ca21b8eb06f", "url": "https://github.com/kiegroup/optaplanner/commit/3f19fb698f8620d2c4f0ef65ad5f2ca21b8eb06f", "message": "Typos/grammar\n\nCo-Authored-By: Luk\u00e1\u0161 Petrovick\u00fd <lukas@petrovicky.net>", "committedDate": "2020-04-26T07:00:57Z", "type": "commit"}, {"oid": "a7d602a61fe5752807b4d1289ed0f31ca3abb4b0", "url": "https://github.com/kiegroup/optaplanner/commit/a7d602a61fe5752807b4d1289ed0f31ca3abb4b0", "message": "Typos/grammar\n\nCo-Authored-By: Luk\u00e1\u0161 Petrovick\u00fd <lukas@petrovicky.net>", "committedDate": "2020-04-26T07:01:07Z", "type": "commit"}, {"oid": "b973def74f75fdd50ff524c60ff16a47747b53cc", "url": "https://github.com/kiegroup/optaplanner/commit/b973def74f75fdd50ff524c60ff16a47747b53cc", "message": "Typos/grammar\n\nCo-Authored-By: Luk\u00e1\u0161 Petrovick\u00fd <lukas@petrovicky.net>", "committedDate": "2020-04-26T07:01:23Z", "type": "commit"}, {"oid": "46271c8fce1d5f018c5b7639350f6489535850db", "url": "https://github.com/kiegroup/optaplanner/commit/46271c8fce1d5f018c5b7639350f6489535850db", "message": "ProblemFact(Collection)Property applies on scoreDRL too", "committedDate": "2020-04-26T22:05:47Z", "type": "commit"}]}