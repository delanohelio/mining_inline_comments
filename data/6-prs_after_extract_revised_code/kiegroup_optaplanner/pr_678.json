{"pr_number": 678, "pr_title": "PLANNER-1840 Extra test coverage for joiners", "pr_createdAt": "2020-02-10T09:33:52Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/678", "timeline": [{"oid": "e0deec1482f4f416a2c45d6ab6d3237e1d738a0e", "url": "https://github.com/kiegroup/optaplanner/commit/e0deec1482f4f416a2c45d6ab6d3237e1d738a0e", "message": "Add equality tests", "committedDate": "2020-02-10T09:32:56Z", "type": "commit"}, {"oid": "55d2f084f0c68e76f577a2e37f73b7d94d57a6ad", "url": "https://github.com/kiegroup/optaplanner/commit/55d2f084f0c68e76f577a2e37f73b7d94d57a6ad", "message": "Add lessThan/greaterThan tests", "committedDate": "2020-02-10T10:06:49Z", "type": "commit"}, {"oid": "32771ff77d94c310a1a5bc1f4d4686f96ab2740e", "url": "https://github.com/kiegroup/optaplanner/commit/32771ff77d94c310a1a5bc1f4d4686f96ab2740e", "message": "Refactor joiners for code reuse", "committedDate": "2020-02-10T10:35:34Z", "type": "commit"}, {"oid": "c402747c84c9382ada1f9da9e22f61687c772d75", "url": "https://github.com/kiegroup/optaplanner/commit/c402747c84c9382ada1f9da9e22f61687c772d75", "message": "Add tests for joiner merging", "committedDate": "2020-02-10T11:37:23Z", "type": "commit"}, {"oid": "27ebd4a5ea1739bdfc76bf41f5f246d294018a5c", "url": "https://github.com/kiegroup/optaplanner/commit/27ebd4a5ea1739bdfc76bf41f5f246d294018a5c", "message": "Verify fail-fasts", "committedDate": "2020-02-10T12:22:16Z", "type": "commit"}, {"oid": "82aad3ce8fd21e3f6075c942a55fb72f31c9ad48", "url": "https://github.com/kiegroup/optaplanner/commit/82aad3ce8fd21e3f6075c942a55fb72f31c9ad48", "message": "Finishing touches", "committedDate": "2020-02-10T13:22:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4ODQzOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/678#discussion_r377088439", "bodyText": "Code style: I think that * imports are generally less preferable. Is it intentional here or is it an accident caused by IDE?", "author": "rsynek", "createdAt": "2020-02-10T14:17:54Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.score.stream;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.function.QuadFunction;\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.impl.score.stream.bi.AbstractBiJoiner;\n+import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n+import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n+import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n+\n+import static java.math.BigInteger.*;", "originalCommit": "82aad3ce8fd21e3f6075c942a55fb72f31c9ad48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16875537c2583b1d8d1ba532483a0cc9b5154f71", "chunk": "diff --git a/optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java b/optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java\nindex 6034b5078..54756cdcb 100644\n--- a/optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java\n+++ b/optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/JoinersTest.java\n\n@@ -29,7 +29,9 @@ import org.optaplanner.core.impl.score.stream.penta.AbstractPentaJoiner;\n import org.optaplanner.core.impl.score.stream.quad.AbstractQuadJoiner;\n import org.optaplanner.core.impl.score.stream.tri.AbstractTriJoiner;\n \n-import static java.math.BigInteger.*;\n+import static java.math.BigInteger.ONE;\n+import static java.math.BigInteger.TEN;\n+import static java.math.BigInteger.ZERO;\n import static org.assertj.core.api.SoftAssertions.assertSoftly;\n \n public class JoinersTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MjkxNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/678#discussion_r377092915", "bodyText": "This presumes that that we'll never do this:\nBi<A,B>.join(Bi<C,D>)\nI don't want to close off that opportunity.\n-1 to abstract the Right generatic type here...", "author": "ge0ffrey", "createdAt": "2020-02-10T14:25:10Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java", "diffHunk": "@@ -16,8 +16,30 @@\n \n package org.optaplanner.core.impl.score.stream.common;\n \n-public abstract class AbstractJoiner {\n+import java.util.Arrays;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+public abstract class AbstractJoiner<Right> {", "originalCommit": "82aad3ce8fd21e3f6075c942a55fb72f31c9ad48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee78cd43bfc3ecfb93ace8ab1de9ee5bd5e76019", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java\nindex 94cf807fc..630f7ce17 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java\n\n@@ -16,11 +16,7 @@\n \n package org.optaplanner.core.impl.score.stream.common;\n \n-import java.util.Arrays;\n-import java.util.function.Function;\n-import java.util.stream.IntStream;\n-\n-public abstract class AbstractJoiner<Right> {\n+public abstract class AbstractJoiner {\n \n     protected void assertMappingIndex(int index) {\n         int mappingCount = getJoinerTypes().length;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5Mzc5OA==", "url": "https://github.com/kiegroup/optaplanner/pull/678#discussion_r377093798", "bodyText": "You can probably use f::apply (one less wrapper lambda)", "author": "ge0ffrey", "createdAt": "2020-02-10T14:26:41Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/AbstractBiJoiner.java", "diffHunk": "@@ -75,11 +77,14 @@ public boolean matches(A a, B b) {\n \n     public abstract Function<A, Object> getLeftMapping(int index);\n \n-    public abstract Function<A, Object[]> getLeftCombinedMapping();\n-\n-    public abstract Function<B, Object> getRightMapping(int index);\n-\n-    public abstract Function<B, Object[]> getRightCombinedMapping();\n+    public Function<A, Object[]> getLeftCombinedMapping() {\n+        Function<A, Object>[] mappings = IntStream.range(0, getJoinerTypes().length)\n+                .mapToObj(this::getLeftMapping)\n+                .toArray(Function[]::new);\n+        return (A a) -> Arrays.stream(mappings)\n+                .map(f -> f.apply(a))", "originalCommit": "82aad3ce8fd21e3f6075c942a55fb72f31c9ad48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExNjcwMA==", "url": "https://github.com/kiegroup/optaplanner/pull/678#discussion_r377116700", "bodyText": "Not in this case. It would work if I was trying to get rid of f, but here I need to pass a to f and therefore I need to do it like this.", "author": "triceo", "createdAt": "2020-02-10T15:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5Mzc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "ee78cd43bfc3ecfb93ace8ab1de9ee5bd5e76019", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/AbstractBiJoiner.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/AbstractBiJoiner.java\nindex acac663ec..be7a903ce 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/AbstractBiJoiner.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/AbstractBiJoiner.java\n\n@@ -77,14 +75,11 @@ public abstract class AbstractBiJoiner<A, B> extends AbstractJoiner<B> implement\n \n     public abstract Function<A, Object> getLeftMapping(int index);\n \n-    public Function<A, Object[]> getLeftCombinedMapping() {\n-        Function<A, Object>[] mappings = IntStream.range(0, getJoinerTypes().length)\n-                .mapToObj(this::getLeftMapping)\n-                .toArray(Function[]::new);\n-        return (A a) -> Arrays.stream(mappings)\n-                .map(f -> f.apply(a))\n-                .toArray();\n-    }\n+    public abstract Function<A, Object[]> getLeftCombinedMapping();\n+\n+    public abstract Function<B, Object> getRightMapping(int index);\n+\n+    public abstract Function<B, Object[]> getRightCombinedMapping();\n \n     public BiPredicate<A, B> getFilter() {\n         return filter;\n"}}, {"oid": "ee78cd43bfc3ecfb93ace8ab1de9ee5bd5e76019", "url": "https://github.com/kiegroup/optaplanner/commit/ee78cd43bfc3ecfb93ace8ab1de9ee5bd5e76019", "message": "Revert \"Refactor joiners for code reuse\"\n\nThis reverts commit 32771ff7", "committedDate": "2020-02-10T14:58:52Z", "type": "commit"}, {"oid": "16875537c2583b1d8d1ba532483a0cc9b5154f71", "url": "https://github.com/kiegroup/optaplanner/commit/16875537c2583b1d8d1ba532483a0cc9b5154f71", "message": "Address code review comments", "committedDate": "2020-02-10T15:04:40Z", "type": "commit"}, {"oid": "e5fd5e93ec4da9885d65319428798d1e95d2b1df", "url": "https://github.com/kiegroup/optaplanner/commit/e5fd5e93ec4da9885d65319428798d1e95d2b1df", "message": "One last change", "committedDate": "2020-02-10T16:03:38Z", "type": "commit"}]}