{"pr_number": 915, "pr_title": "PLANNER-2135 Remove support for JavaScript expressions from configs", "pr_createdAt": "2020-09-07T13:09:15Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/915", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzgzNw==", "url": "https://github.com/kiegroup/optaplanner/pull/915#discussion_r484433837", "bodyText": "If the field PARALLEL_BENCHMARK_COUNT_AUTO isn't used any more, it should be removed too.\nBut that's still used in javadocs, and replacing it with ConfigUtils#THREAD_COUNT_AUTO makes no sense, because not a THREAD_COUNT. One parallel benchmark or 1 solverManager.parallel may actually use multiple threads. So calling it threadCount is confusing. Also,  resolveThreadPoolSize() is a bad name I guess - we can rename that to resolvePoolSize()?\nI see 2 options:\n\nrename - ConfigUtils.THREAD_COUNT_AUTO to just AUTO or something more descriptive without being incorrect in some cases like THREAD_COUNT_AUTO. But then every resolveThreadPoolSize() call must have an AUTO option (which is currently the case, so I guess that's fine).\nDon't generalize \"auto\", like it is before this PR (doesn't impact the other changes in this PR).", "author": "ge0ffrey", "createdAt": "2020-09-07T13:31:41Z", "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfig.java", "diffHunk": "@@ -800,27 +799,9 @@ protected void generateSolverBenchmarkConfigNames() {\n \n     protected int resolveParallelBenchmarkCount() {\n         int availableProcessorCount = Runtime.getRuntime().availableProcessors();\n-        int resolvedParallelBenchmarkCount;\n-        if (parallelBenchmarkCount == null) {\n-            resolvedParallelBenchmarkCount = 1;\n-        } else if (parallelBenchmarkCount.equals(PARALLEL_BENCHMARK_COUNT_AUTO)) {\n-            resolvedParallelBenchmarkCount = resolveParallelBenchmarkCountAutomatically(availableProcessorCount);\n-        } else {\n-            resolvedParallelBenchmarkCount = ConfigUtils.resolveThreadPoolSizeScript(\n-                    \"parallelBenchmarkCount\", parallelBenchmarkCount, PARALLEL_BENCHMARK_COUNT_AUTO);\n-        }\n-        if (resolvedParallelBenchmarkCount < 1) {\n-            throw new IllegalArgumentException(\"The parallelBenchmarkCount (\" + parallelBenchmarkCount\n-                    + \") resulted in a resolvedParallelBenchmarkCount (\" + resolvedParallelBenchmarkCount\n-                    + \") that is lower than 1.\");\n-        }\n-        if (resolvedParallelBenchmarkCount > availableProcessorCount) {\n-            logger.warn(\"Because the resolvedParallelBenchmarkCount ({}) is higher \"\n-                    + \"than the availableProcessorCount ({}), it is reduced to \"\n-                    + \"availableProcessorCount.\", resolvedParallelBenchmarkCount, availableProcessorCount);\n-            resolvedParallelBenchmarkCount = availableProcessorCount;\n-        }\n-        return resolvedParallelBenchmarkCount;\n+        return ConfigUtils.resolveThreadPoolSize(\"parallelBenchmarkCount\", parallelBenchmarkCount,\n+                () -> resolveParallelBenchmarkCountAutomatically(availableProcessorCount),\n+                () -> availableProcessorCount, logger);", "originalCommit": "d176986e671ddaf4aaa5f38e6b19da32772740c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "chunk": "diff --git a/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfig.java b/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfig.java\nindex 95692452c..fe047fcef 100644\n--- a/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfig.java\n+++ b/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/config/PlannerBenchmarkConfig.java\n\n@@ -799,9 +799,27 @@ public class PlannerBenchmarkConfig {\n \n     protected int resolveParallelBenchmarkCount() {\n         int availableProcessorCount = Runtime.getRuntime().availableProcessors();\n-        return ConfigUtils.resolveThreadPoolSize(\"parallelBenchmarkCount\", parallelBenchmarkCount,\n-                () -> resolveParallelBenchmarkCountAutomatically(availableProcessorCount),\n-                () -> availableProcessorCount, logger);\n+        int resolvedParallelBenchmarkCount;\n+        if (parallelBenchmarkCount == null) {\n+            resolvedParallelBenchmarkCount = 1;\n+        } else if (parallelBenchmarkCount.equals(PARALLEL_BENCHMARK_COUNT_AUTO)) {\n+            resolvedParallelBenchmarkCount = resolveParallelBenchmarkCountAutomatically(availableProcessorCount);\n+        } else {\n+            resolvedParallelBenchmarkCount = ConfigUtils.resolvePoolSize(\"parallelBenchmarkCount\",\n+                    parallelBenchmarkCount, PARALLEL_BENCHMARK_COUNT_AUTO);\n+        }\n+        if (resolvedParallelBenchmarkCount < 1) {\n+            throw new IllegalArgumentException(\"The parallelBenchmarkCount (\" + parallelBenchmarkCount\n+                    + \") resulted in a resolvedParallelBenchmarkCount (\" + resolvedParallelBenchmarkCount\n+                    + \") that is lower than 1.\");\n+        }\n+        if (resolvedParallelBenchmarkCount > availableProcessorCount) {\n+            logger.warn(\"Because the resolvedParallelBenchmarkCount ({}) is higher \"\n+                    + \"than the availableProcessorCount ({}), it is reduced to \"\n+                    + \"availableProcessorCount.\", resolvedParallelBenchmarkCount, availableProcessorCount);\n+            resolvedParallelBenchmarkCount = availableProcessorCount;\n+        }\n+        return resolvedParallelBenchmarkCount;\n     }\n \n     protected int resolveParallelBenchmarkCountAutomatically(int availableProcessorCount) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNDQzOA==", "url": "https://github.com/kiegroup/optaplanner/pull/915#discussion_r484434438", "bodyText": "This is why I tend to prefer option 2, as sometimes there are extra values, like UNLIMITED.", "author": "ge0ffrey", "createdAt": "2020-09-07T13:32:52Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/partitionedsearch/PartitionedSearchPhaseConfig.java", "diffHunk": "@@ -45,7 +45,6 @@\n public class PartitionedSearchPhaseConfig extends PhaseConfig<PartitionedSearchPhaseConfig> {\n \n     public static final String XML_ELEMENT_NAME = \"partitionedSearch\";\n-    public static final String ACTIVE_THREAD_COUNT_AUTO = \"AUTO\";\n     public static final String ACTIVE_THREAD_COUNT_UNLIMITED = \"UNLIMITED\";", "originalCommit": "d176986e671ddaf4aaa5f38e6b19da32772740c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0MDI0Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/915#discussion_r484440247", "bodyText": "(But if we find good consistent naming, I don't veto option 1 though.)", "author": "ge0ffrey", "createdAt": "2020-09-07T13:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNDQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/partitionedsearch/PartitionedSearchPhaseConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/partitionedsearch/PartitionedSearchPhaseConfig.java\nindex cad621772..57992bb15 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/partitionedsearch/PartitionedSearchPhaseConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/partitionedsearch/PartitionedSearchPhaseConfig.java\n\n@@ -45,6 +45,7 @@ import org.optaplanner.core.impl.partitionedsearch.partitioner.SolutionPartition\n public class PartitionedSearchPhaseConfig extends PhaseConfig<PartitionedSearchPhaseConfig> {\n \n     public static final String XML_ELEMENT_NAME = \"partitionedSearch\";\n+    public static final String ACTIVE_THREAD_COUNT_AUTO = \"AUTO\";\n     public static final String ACTIVE_THREAD_COUNT_UNLIMITED = \"UNLIMITED\";\n \n     // Warning: all fields are null (and not defaulted) because they can be inherited\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNTUxMg==", "url": "https://github.com/kiegroup/optaplanner/pull/915#discussion_r484435512", "bodyText": "Let's also remove availableProcessorCount:\nWhile \"availableProcessorCount / 2\" can be usefull (despite no one using it), \"availableProcessorCount\" is always a bad idea (freezes the computer). It's a loaded gun tied to your leg aimed at your foot. There's no way to miss.", "author": "ge0ffrey", "createdAt": "2020-09-07T13:35:00Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java", "diffHunk": "@@ -29,29 +27,33 @@\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.function.IntSupplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import javax.script.ScriptEngine;\n-import javax.script.ScriptEngineManager;\n-import javax.script.ScriptException;\n-\n import org.optaplanner.core.api.domain.lookup.PlanningId;\n import org.optaplanner.core.config.AbstractConfig;\n import org.optaplanner.core.impl.domain.common.AlphabeticMemberComparator;\n import org.optaplanner.core.impl.domain.common.ReflectionHelper;\n import org.optaplanner.core.impl.domain.common.accessor.MemberAccessor;\n import org.optaplanner.core.impl.domain.common.accessor.MemberAccessorFactory;\n+import org.slf4j.Logger;\n+\n+import static org.optaplanner.core.impl.domain.common.accessor.MemberAccessorFactory.MemberAccessorType.FIELD_OR_READ_METHOD;\n \n public class ConfigUtils {\n \n+    /**\n+     * Name of the variable that represents {@link Runtime#availableProcessors()}.\n+     */\n+    public static final String THREAD_COUNT_AUTO = \"AUTO\";\n+    public static final String AVAILABLE_PROCESSOR_COUNT = \"availableProcessorCount\";", "originalCommit": "d176986e671ddaf4aaa5f38e6b19da32772740c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\nindex dd68fd0e8..18e041568 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\n\n@@ -27,13 +29,13 @@ import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n-import java.util.function.IntSupplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNjUzNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/915#discussion_r484436535", "bodyText": "We don't catch Exception or Throwable. Catching Throwable could inadvertadly catch an OutOfMemoryException 98% GC usage. Catching exception is less dangerous, but still undesired. Let's just catch NumberFormatException (see parseInt() javadoc for @throws) .", "author": "ge0ffrey", "createdAt": "2020-09-07T13:36:58Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java", "diffHunk": "@@ -261,35 +263,31 @@ public static int ceilDivide(int dividend, int divisor) {\n         return (dividend / divisor) + correction;\n     }\n \n-    /**\n-     * Name of the variable that represents {@link Runtime#availableProcessors()}.\n-     */\n-    public static final String AVAILABLE_PROCESSOR_COUNT = \"availableProcessorCount\";\n-\n-    public static int resolveThreadPoolSizeScript(String propertyName, String script, String... magicValues) {\n-        final String scriptLanguage = \"JavaScript\";\n-        ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName(scriptLanguage);\n-        if (scriptEngine == null) {\n-            throw new IllegalStateException(\"The \" + propertyName + \" (\" + script\n-                    + \") could not resolve because the JVM doesn't support scriptLanguage (\" + scriptLanguage + \").\\n\"\n-                    + \"Maybe try running in a normal JVM.\");\n+    public static int resolveThreadPoolSize(String propertyName, String script, IntSupplier defaultValue,\n+            IntSupplier availableProcessors, Logger logger) {\n+        int resolved;\n+        if (script == null || script.equals(THREAD_COUNT_AUTO)) {\n+            resolved = defaultValue.getAsInt();\n+        } else {\n+            try {\n+                resolved = Integer.parseInt(script);\n+            } catch (Exception e) {", "originalCommit": "d176986e671ddaf4aaa5f38e6b19da32772740c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\nindex dd68fd0e8..18e041568 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\n\n@@ -263,31 +257,13 @@ public class ConfigUtils {\n         return (dividend / divisor) + correction;\n     }\n \n-    public static int resolveThreadPoolSize(String propertyName, String script, IntSupplier defaultValue,\n-            IntSupplier availableProcessors, Logger logger) {\n-        int resolved;\n-        if (script == null || script.equals(THREAD_COUNT_AUTO)) {\n-            resolved = defaultValue.getAsInt();\n-        } else {\n-            try {\n-                resolved = Integer.parseInt(script);\n-            } catch (Exception e) {\n-                throw new IllegalStateException(\"The \" + propertyName + \" (\" + script +\n-                        \") resolved to neither '\" + THREAD_COUNT_AUTO + \"' nor a number.\");\n-            }\n-        }\n-        if (resolved < 1) {\n-            throw new IllegalArgumentException(\"The \" + propertyName + \" (\" + script + \") resolved to (\" + resolved +\n-                    \") that is lower than 1.\");\n-        }\n-        int availableProcessorCount = availableProcessors.getAsInt();\n-        if (resolved > availableProcessorCount) {\n-            logger.warn(\"The \" + propertyName + \" (\" + script + \") resolved to (\" + resolved + \") that is \" +\n-                    \"higher than the availableProcessorCount ({}), which is counter-efficient.\", resolved,\n-                    availableProcessorCount);\n-            // Still allow it, to reproduce issues of a high-end server machine on a low-end developer machine\n+    public static int resolvePoolSize(String propertyName, String value, String... magicValues) {\n+        try {\n+            return Integer.parseInt(value);\n+        } catch (NumberFormatException ex) {\n+            throw new IllegalStateException(\"The \" + propertyName + \" (\" + value + \") resolved to neither of (\"\n+                    + Arrays.toString(magicValues) + \") nor a number.\");\n         }\n-        return resolved;\n     }\n \n     // ************************************************************************\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzOTA2OA==", "url": "https://github.com/kiegroup/optaplanner/pull/915#discussion_r484439068", "bodyText": "Suggestion: change \"that ...\" to \"that must be at least 1.\"", "author": "ge0ffrey", "createdAt": "2020-09-07T13:42:08Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java", "diffHunk": "@@ -261,35 +263,31 @@ public static int ceilDivide(int dividend, int divisor) {\n         return (dividend / divisor) + correction;\n     }\n \n-    /**\n-     * Name of the variable that represents {@link Runtime#availableProcessors()}.\n-     */\n-    public static final String AVAILABLE_PROCESSOR_COUNT = \"availableProcessorCount\";\n-\n-    public static int resolveThreadPoolSizeScript(String propertyName, String script, String... magicValues) {\n-        final String scriptLanguage = \"JavaScript\";\n-        ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName(scriptLanguage);\n-        if (scriptEngine == null) {\n-            throw new IllegalStateException(\"The \" + propertyName + \" (\" + script\n-                    + \") could not resolve because the JVM doesn't support scriptLanguage (\" + scriptLanguage + \").\\n\"\n-                    + \"Maybe try running in a normal JVM.\");\n+    public static int resolveThreadPoolSize(String propertyName, String script, IntSupplier defaultValue,\n+            IntSupplier availableProcessors, Logger logger) {\n+        int resolved;\n+        if (script == null || script.equals(THREAD_COUNT_AUTO)) {\n+            resolved = defaultValue.getAsInt();\n+        } else {\n+            try {\n+                resolved = Integer.parseInt(script);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"The \" + propertyName + \" (\" + script +\n+                        \") resolved to neither '\" + THREAD_COUNT_AUTO + \"' nor a number.\");\n+            }\n         }\n-        scriptEngine.put(AVAILABLE_PROCESSOR_COUNT, Runtime.getRuntime().availableProcessors());\n-        Object scriptResult;\n-        try {\n-            scriptResult = scriptEngine.eval(script);\n-        } catch (ScriptException e) {\n-            throw new IllegalArgumentException(\"The \" + propertyName + \" (\" + script\n-                    + \") is not in magicValues (\" + Arrays.toString(magicValues)\n-                    + \") and cannot be parsed in \" + scriptLanguage\n-                    + \" with the variables ([\" + AVAILABLE_PROCESSOR_COUNT + \"]).\", e);\n+        if (resolved < 1) {\n+            throw new IllegalArgumentException(\"The \" + propertyName + \" (\" + script + \") resolved to (\" + resolved +\n+                    \") that is lower than 1.\");", "originalCommit": "d176986e671ddaf4aaa5f38e6b19da32772740c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\nindex dd68fd0e8..18e041568 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\n\n@@ -263,31 +257,13 @@ public class ConfigUtils {\n         return (dividend / divisor) + correction;\n     }\n \n-    public static int resolveThreadPoolSize(String propertyName, String script, IntSupplier defaultValue,\n-            IntSupplier availableProcessors, Logger logger) {\n-        int resolved;\n-        if (script == null || script.equals(THREAD_COUNT_AUTO)) {\n-            resolved = defaultValue.getAsInt();\n-        } else {\n-            try {\n-                resolved = Integer.parseInt(script);\n-            } catch (Exception e) {\n-                throw new IllegalStateException(\"The \" + propertyName + \" (\" + script +\n-                        \") resolved to neither '\" + THREAD_COUNT_AUTO + \"' nor a number.\");\n-            }\n-        }\n-        if (resolved < 1) {\n-            throw new IllegalArgumentException(\"The \" + propertyName + \" (\" + script + \") resolved to (\" + resolved +\n-                    \") that is lower than 1.\");\n-        }\n-        int availableProcessorCount = availableProcessors.getAsInt();\n-        if (resolved > availableProcessorCount) {\n-            logger.warn(\"The \" + propertyName + \" (\" + script + \") resolved to (\" + resolved + \") that is \" +\n-                    \"higher than the availableProcessorCount ({}), which is counter-efficient.\", resolved,\n-                    availableProcessorCount);\n-            // Still allow it, to reproduce issues of a high-end server machine on a low-end developer machine\n+    public static int resolvePoolSize(String propertyName, String value, String... magicValues) {\n+        try {\n+            return Integer.parseInt(value);\n+        } catch (NumberFormatException ex) {\n+            throw new IllegalStateException(\"The \" + propertyName + \" (\" + value + \") resolved to neither of (\"\n+                    + Arrays.toString(magicValues) + \") nor a number.\");\n         }\n-        return resolved;\n     }\n \n     // ************************************************************************\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzOTM5Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/915#discussion_r484439392", "bodyText": "this error message lacks to mention UNLIMITED for one of the use cases. This is related to the removal of magicValues parameter.", "author": "ge0ffrey", "createdAt": "2020-09-07T13:42:50Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java", "diffHunk": "@@ -261,35 +263,31 @@ public static int ceilDivide(int dividend, int divisor) {\n         return (dividend / divisor) + correction;\n     }\n \n-    /**\n-     * Name of the variable that represents {@link Runtime#availableProcessors()}.\n-     */\n-    public static final String AVAILABLE_PROCESSOR_COUNT = \"availableProcessorCount\";\n-\n-    public static int resolveThreadPoolSizeScript(String propertyName, String script, String... magicValues) {\n-        final String scriptLanguage = \"JavaScript\";\n-        ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName(scriptLanguage);\n-        if (scriptEngine == null) {\n-            throw new IllegalStateException(\"The \" + propertyName + \" (\" + script\n-                    + \") could not resolve because the JVM doesn't support scriptLanguage (\" + scriptLanguage + \").\\n\"\n-                    + \"Maybe try running in a normal JVM.\");\n+    public static int resolveThreadPoolSize(String propertyName, String script, IntSupplier defaultValue,\n+            IntSupplier availableProcessors, Logger logger) {\n+        int resolved;\n+        if (script == null || script.equals(THREAD_COUNT_AUTO)) {\n+            resolved = defaultValue.getAsInt();\n+        } else {\n+            try {\n+                resolved = Integer.parseInt(script);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"The \" + propertyName + \" (\" + script +\n+                        \") resolved to neither '\" + THREAD_COUNT_AUTO + \"' nor a number.\");", "originalCommit": "d176986e671ddaf4aaa5f38e6b19da32772740c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\nindex dd68fd0e8..18e041568 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/util/ConfigUtils.java\n\n@@ -263,31 +257,13 @@ public class ConfigUtils {\n         return (dividend / divisor) + correction;\n     }\n \n-    public static int resolveThreadPoolSize(String propertyName, String script, IntSupplier defaultValue,\n-            IntSupplier availableProcessors, Logger logger) {\n-        int resolved;\n-        if (script == null || script.equals(THREAD_COUNT_AUTO)) {\n-            resolved = defaultValue.getAsInt();\n-        } else {\n-            try {\n-                resolved = Integer.parseInt(script);\n-            } catch (Exception e) {\n-                throw new IllegalStateException(\"The \" + propertyName + \" (\" + script +\n-                        \") resolved to neither '\" + THREAD_COUNT_AUTO + \"' nor a number.\");\n-            }\n-        }\n-        if (resolved < 1) {\n-            throw new IllegalArgumentException(\"The \" + propertyName + \" (\" + script + \") resolved to (\" + resolved +\n-                    \") that is lower than 1.\");\n-        }\n-        int availableProcessorCount = availableProcessors.getAsInt();\n-        if (resolved > availableProcessorCount) {\n-            logger.warn(\"The \" + propertyName + \" (\" + script + \") resolved to (\" + resolved + \") that is \" +\n-                    \"higher than the availableProcessorCount ({}), which is counter-efficient.\", resolved,\n-                    availableProcessorCount);\n-            // Still allow it, to reproduce issues of a high-end server machine on a low-end developer machine\n+    public static int resolvePoolSize(String propertyName, String value, String... magicValues) {\n+        try {\n+            return Integer.parseInt(value);\n+        } catch (NumberFormatException ex) {\n+            throw new IllegalStateException(\"The \" + propertyName + \" (\" + value + \") resolved to neither of (\"\n+                    + Arrays.toString(magicValues) + \") nor a number.\");\n         }\n-        return resolved;\n     }\n \n     // ************************************************************************\n"}}, {"oid": "10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "url": "https://github.com/kiegroup/optaplanner/commit/10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "message": "PLANNER-2135 Remove support for JavaScript expressions in configs", "committedDate": "2020-09-07T15:44:43Z", "type": "commit"}, {"oid": "10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "url": "https://github.com/kiegroup/optaplanner/commit/10fe7b22d21bcaf43d4c66ee7585aad15c6bd4e0", "message": "PLANNER-2135 Remove support for JavaScript expressions in configs", "committedDate": "2020-09-07T15:44:43Z", "type": "forcePushed"}]}