{"pr_number": 713, "pr_title": "PLANNER-1861 ConstraintVerifier API", "pr_createdAt": "2020-03-04T09:41:15Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/713", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NjE3NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389656175", "bodyText": "test method should not start with \"test\", that's verbose (and junit 3 era)", "author": "ge0ffrey", "createdAt": "2020-03-09T13:21:59Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n+\n+    @Test\n+    public void testSingleConstraint() {", "originalCommit": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "416ad4db27e958d3230a9476c94414354513b8dd", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 083e956b1..e8b81ae90 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -18,13 +18,10 @@ package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n-import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n \n import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n-import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NzE3OA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389657178", "bodyText": "Let's write the code to initialize those in the test strawman too.\nIt might affect how we design methods, such as adding varargs params.", "author": "ge0ffrey", "createdAt": "2020-03-09T13:22:58Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;", "originalCommit": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "416ad4db27e958d3230a9476c94414354513b8dd", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 083e956b1..e8b81ae90 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -18,13 +18,10 @@ package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n-import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n \n import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n-import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1ODQyNw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389658427", "bodyText": "All ScoreVerifier checks should be regardless of the constraingWeight. Only the matchWeight needs to be asserted.\nThis is for both fixed constraintWeight and penalizeConfigurable constraintWeights etc.\nSo there is no need for a \"SimpleScore.ONE\" here.\nIt should verify if it's a penality or a reward. So no \"impact\" in most cases.\nWe need an .expectPenality(1) (or .assertPenality(1)?) I guess. And assertReward(...). And .assertPenality() with no parameters that is same as with 1.", "author": "ge0ffrey", "createdAt": "2020-03-09T13:24:07Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.", "originalCommit": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDI5NA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389744294", "bodyText": "Actually, I disagree.\nWe should assert on the final impact, not on the matchWeight. You want to know what becomes your score, not some partial calculation that is matchWeight.\nIn fact, that is why I added the method givenPlanningSolution, where the configurable constraint weights are defined - so that you can get the final result, not just the match weight.", "author": "triceo", "createdAt": "2020-03-09T14:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1ODQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MTc0Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r390281747", "bodyText": "I tend to agree with Geoffrey. In the context of a constraint provider unit test, I'd like to focus on testing purely the constraint behavior, that is:\n\nwhether it's a penalty of a reward,\nhow many times it triggers (typically to verify number of matching unique pairs in the given set of objects),\nwhether the matchWeigher calculates the expected match weight (in cases it is affected by matching object properties, e.g. distance).\n\nI would argue that @ConstraintWeight affects total score but not constraint behavior. So, if constraint weight configuration changes, constraints' behavior doesn't change, therefore the constraint provider unit test shouldn't fail.\nIn other words, I'd like to freely change my constraint weight configuration without breaking CP tests.", "author": "yurloc", "createdAt": "2020-03-10T12:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1ODQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "416ad4db27e958d3230a9476c94414354513b8dd", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 083e956b1..e8b81ae90 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -18,13 +18,10 @@ package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n-import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n \n import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n-import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2MzkwOA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389663908", "bodyText": "where do we set which constraint we're verifying?\nThe goal is to verify a single constraint in isolation, so that when refactoring the other constraints, this unit test is unaffected.", "author": "ge0ffrey", "createdAt": "2020-03-09T13:28:56Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.\n+                .expectImpact(SimpleScore.ONE); // Does not allow to check constraint matches, pointless with Solution.\n+    }\n+\n+    @Test\n+    public void testVerifierReuse() {\n+        ConstraintProviderVerifier constraintVerifier = forConstraintProvider(new NQueensConstraintProvider());", "originalCommit": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDgxMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389744811", "bodyText": "The goal of this method is to test the constraint provider as a whole. I do think that this is an interesting, useful use case - considering solution X, my score is Y.", "author": "triceo", "createdAt": "2020-03-09T14:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2MzkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "416ad4db27e958d3230a9476c94414354513b8dd", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 083e956b1..e8b81ae90 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -18,13 +18,10 @@ package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n-import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n \n import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n-import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2NDk5OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r389664999", "bodyText": "Makes sense probably to add indeed. But givenFacts() is going to be used far more frequently.", "author": "ge0ffrey", "createdAt": "2020-03-09T13:29:54Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.", "originalCommit": "6611cdbf2c278d69515e3e0a3a7fd1312ca0026e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "416ad4db27e958d3230a9476c94414354513b8dd", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 083e956b1..e8b81ae90 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -18,13 +18,10 @@ package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n-import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n \n import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n-import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n"}}, {"oid": "33a4fcff24c14b475be4cb3a02fd79aeada8394b", "url": "https://github.com/kiegroup/optaplanner/commit/33a4fcff24c14b475be4cb3a02fd79aeada8394b", "message": "API strawman", "committedDate": "2020-03-10T10:45:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzAwOA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r396993008", "bodyText": "This mess is what I hoped to avoid by allowing the user to simply deserialize a ready-made solution.\nKeep in mind that this is a trival example - testing real-world constraints will become a nightmare, unless we allow working with ready-made solutions.", "author": "triceo", "createdAt": "2020-03-24T09:00:07Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier =\n+            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        Column column1 = new Column();\n+        column1.setId(0L);\n+        column1.setIndex(0);\n+        Column column2 = new Column();\n+        column2.setId(1L);\n+        column2.setIndex(1);\n+        Row row = new Row();\n+        row.setId(0L);\n+        row.setIndex(0);\n+        Queen queen1 = new Queen();\n+        queen1.setId(0L);\n+        queen1.setRow(row);\n+        queen1.setColumn(column1);\n+        Queen queen2 = new Queen();\n+        queen2.setId(1L);\n+        queen2.setRow(row);\n+        queen2.setColumn(column2);", "originalCommit": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4NTA1OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398085059", "bodyText": "I think this can be solved by using a helper method in the test or factory methods in the domain model. But, since methods have just a single return value, we'd have to wrap the set of objects in some kind of container (the solution, probably (obviously?)).\n<TLDR>\nSo, no matter if we get the solution (or any kind of container) with a factory/helper method or by unmarshalling it, givenFacts() needs to (also) accept that instead of varargs of objects.\n</TLDR>\nOn the other hand, Geoffrey's argument against that approach is also valid. Sometimes the objects can be created very easily and wrapping them into a solution is an unnecessary ceremony.", "author": "yurloc", "createdAt": "2020-03-25T18:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 84903e190..083e956b1 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -17,44 +17,47 @@\n package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n-import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n-import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n-    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier =\n-            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n \n     @Test\n     public void testSingleConstraint() {\n-        Column column1 = new Column();\n-        column1.setId(0L);\n-        column1.setIndex(0);\n-        Column column2 = new Column();\n-        column2.setId(1L);\n-        column2.setIndex(1);\n-        Row row = new Row();\n-        row.setId(0L);\n-        row.setIndex(0);\n-        Queen queen1 = new Queen();\n-        queen1.setId(0L);\n-        queen1.setRow(row);\n-        queen1.setColumn(column1);\n-        Queen queen2 = new Queen();\n-        queen2.setId(1L);\n-        queen2.setRow(row);\n-        queen2.setColumn(column2);\n-        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n-                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1, column2)\n-                .expectImpact(0);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n-                .expectImpact(1);\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.\n+                .expectImpact(SimpleScore.ONE); // Does not allow to check constraint matches, pointless with Solution.\n+    }\n+\n+    @Test\n+    public void testVerifierReuse() {\n+        ConstraintProviderVerifier constraintVerifier = forConstraintProvider(new NQueensConstraintProvider());\n+        constraintVerifier.givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE);\n+        constraintVerifier.givenFacts(queen2, row1)\n+                .expectImpact(SimpleScore.ZERO);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzY4Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r396993687", "bodyText": "This is the important bit that needs discussion, the test.\nDon't focus on the implementation code just yet.", "author": "triceo", "createdAt": "2020-03-24T09:01:12Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {", "originalCommit": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 84903e190..083e956b1 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -17,44 +17,47 @@\n package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n-import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n-import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n-    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier =\n-            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n \n     @Test\n     public void testSingleConstraint() {\n-        Column column1 = new Column();\n-        column1.setId(0L);\n-        column1.setIndex(0);\n-        Column column2 = new Column();\n-        column2.setId(1L);\n-        column2.setIndex(1);\n-        Row row = new Row();\n-        row.setId(0L);\n-        row.setIndex(0);\n-        Queen queen1 = new Queen();\n-        queen1.setId(0L);\n-        queen1.setRow(row);\n-        queen1.setColumn(column1);\n-        Queen queen2 = new Queen();\n-        queen2.setId(1L);\n-        queen2.setRow(row);\n-        queen2.setColumn(column2);\n-        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n-                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1, column2)\n-                .expectImpact(0);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n-                .expectImpact(1);\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.\n+                .expectImpact(SimpleScore.ONE); // Does not allow to check constraint matches, pointless with Solution.\n+    }\n+\n+    @Test\n+    public void testVerifierReuse() {\n+        ConstraintProviderVerifier constraintVerifier = forConstraintProvider(new NQueensConstraintProvider());\n+        constraintVerifier.givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE);\n+        constraintVerifier.givenFacts(queen2, row1)\n+                .expectImpact(SimpleScore.ZERO);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5Njk5OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r396996999", "bodyText": "Now that I see this, I realize this needs a message argument, much like JUnit assertions.", "author": "triceo", "createdAt": "2020-03-24T09:06:47Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier =\n+            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        Column column1 = new Column();\n+        column1.setId(0L);\n+        column1.setIndex(0);\n+        Column column2 = new Column();\n+        column2.setId(1L);\n+        column2.setIndex(1);\n+        Row row = new Row();\n+        row.setId(0L);\n+        row.setIndex(0);\n+        Queen queen1 = new Queen();\n+        queen1.setId(0L);\n+        queen1.setRow(row);\n+        queen1.setColumn(column1);\n+        Queen queen2 = new Queen();\n+        queen2.setId(1L);\n+        queen2.setRow(row);\n+        queen2.setColumn(column2);\n+        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n+                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1, column2)\n+                .expectImpact(0);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n+                .expectImpact(1);", "originalCommit": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 84903e190..083e956b1 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -17,44 +17,47 @@\n package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n-import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n-import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n-    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier =\n-            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n \n     @Test\n     public void testSingleConstraint() {\n-        Column column1 = new Column();\n-        column1.setId(0L);\n-        column1.setIndex(0);\n-        Column column2 = new Column();\n-        column2.setId(1L);\n-        column2.setIndex(1);\n-        Row row = new Row();\n-        row.setId(0L);\n-        row.setIndex(0);\n-        Queen queen1 = new Queen();\n-        queen1.setId(0L);\n-        queen1.setRow(row);\n-        queen1.setColumn(column1);\n-        Queen queen2 = new Queen();\n-        queen2.setId(1L);\n-        queen2.setRow(row);\n-        queen2.setColumn(column2);\n-        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n-                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1, column2)\n-                .expectImpact(0);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n-                .expectImpact(1);\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.\n+                .expectImpact(SimpleScore.ONE); // Does not allow to check constraint matches, pointless with Solution.\n+    }\n+\n+    @Test\n+    public void testVerifierReuse() {\n+        ConstraintProviderVerifier constraintVerifier = forConstraintProvider(new NQueensConstraintProvider());\n+        constraintVerifier.givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE);\n+        constraintVerifier.givenFacts(queen2, row1)\n+                .expectImpact(SimpleScore.ZERO);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDY1MA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397344650", "bodyText": "[TIP] I like to do this:", "author": "yurloc", "createdAt": "2020-03-24T17:43:47Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/AbstractScoreDirector.java", "diffHunk": "@@ -162,6 +162,7 @@ public SupplyManager getSupplyManager() {\n \n     @Override\n     public void setWorkingSolution(Solution_ workingSolution) {\n+        Objects.requireNonNull(workingSolution);", "originalCommit": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MTMyMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397491321", "bodyText": "Ah, it has a return type. Good to know, I thought it was void.", "author": "triceo", "createdAt": "2020-03-24T22:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/AbstractScoreDirector.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/AbstractScoreDirector.java\nindex db917ec90..9dbb5cd2a 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/AbstractScoreDirector.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/AbstractScoreDirector.java\n\n@@ -162,7 +162,6 @@ public abstract class AbstractScoreDirector<Solution_, Factory_ extends Abstract\n \n     @Override\n     public void setWorkingSolution(Solution_ workingSolution) {\n-        Objects.requireNonNull(workingSolution);\n         this.workingSolution = workingSolution;\n         SolutionDescriptor<Solution_> solutionDescriptor = getSolutionDescriptor();\n         workingInitScore = - solutionDescriptor.countUninitializedVariables(workingSolution);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzg2Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397703863", "bodyText": "What is this number? Is it the sum of matchWeights from all matches of this constraint?", "author": "yurloc", "createdAt": "2020-03-25T09:14:14Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier =\n+            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        Column column1 = new Column();\n+        column1.setId(0L);\n+        column1.setIndex(0);\n+        Row row = new Row();\n+        row.setId(0L);\n+        row.setIndex(0);\n+        Queen queen1 = new Queen();\n+        queen1.setId(0L);\n+        queen1.setRow(row);\n+        queen1.setColumn(column1);\n+        // One queen\n+        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n+                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1)\n+                .expectImpact(\"No horizontal conflicts with just one queen.\", 0);", "originalCommit": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNjk3MA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397706970", "bodyText": "I'm thinking about two use cases:\n\nI only want to verify how many times the constraint matched and I don't care about the match weights.\nI want to verify the match weight was calculated correctly.\n\nI think that use case 2 is more important and it also indirectly verifies the match count. So the question is: is use case 1 valid? Should it be supported as well? My proposed answer is yes. If it is, then the API should discern between these two verification types.", "author": "yurloc", "createdAt": "2020-03-25T09:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMDYyNA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397710624", "bodyText": "Feel free to disagree. I probably shouldn't have looked at the implementation where the impact number is calculated as a sum of matches. The weight is disregarded. That made me ask the original question in this thread.\nNow I think verifying the total match weight is enough.", "author": "yurloc", "createdAt": "2020-03-25T09:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNTY5OA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397715698", "bodyText": "That's a good question.\nI believe that the constraint is more than just a number of matches. The match weight is calculated, and in some cases it's calculated with a relatively complicated code. Therefore it needs to be tested.\nYou know I was originally arguing that we should evaluate the resulting score, not just the weights. I have since changed my mind on that. But I think that further reducing the problem to just match counts would be over-simplifying.", "author": "triceo", "createdAt": "2020-03-25T09:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5NzEzMA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397797130", "bodyText": "I'm thinking the same.\nI still think verifying the match count could be useful in some cases but we can think about that later.", "author": "yurloc", "createdAt": "2020-03-25T11:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMzg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex c67f14560..083e956b1 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -17,59 +17,47 @@\n package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n-import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n-import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n-    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier =\n-            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n \n     @Test\n     public void testSingleConstraint() {\n-        Column column1 = new Column();\n-        column1.setId(0L);\n-        column1.setIndex(0);\n-        Row row = new Row();\n-        row.setId(0L);\n-        row.setIndex(0);\n-        Queen queen1 = new Queen();\n-        queen1.setId(0L);\n-        queen1.setRow(row);\n-        queen1.setColumn(column1);\n-        // One queen\n-        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n-                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1)\n-                .expectImpact(\"No horizontal conflicts with just one queen.\", 0);\n-        // Two queens\n-        Column column2 = new Column();\n-        column2.setId(1L);\n-        column2.setIndex(1);\n-        Queen queen2 = new Queen();\n-        queen2.setId(1L);\n-        queen2.setRow(row);\n-        queen2.setColumn(column2);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n-                .expectImpact(\"One pair of queens on the same row.\", 1);\n-        // Three queens\n-        Column column3 = new Column();\n-        column2.setId(2L);\n-        column2.setIndex(2);\n-        Queen queen3 = new Queen();\n-        queen3.setId(2L);\n-        queen3.setRow(row);\n-        queen3.setColumn(column3);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, queen3, row, column1, column2, column3)\n-                .expectImpact(\"Three pairs of queens on the same row.\", 3);\n-        // Intentionally broken to see the broken expectation message.\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, queen3, row, column1, column2, column3)\n-                .expectImpact(\"Three pairs of queens on the same row.\", -1);\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.\n+                .expectImpact(SimpleScore.ONE); // Does not allow to check constraint matches, pointless with Solution.\n+    }\n+\n+    @Test\n+    public void testVerifierReuse() {\n+        ConstraintProviderVerifier constraintVerifier = forConstraintProvider(new NQueensConstraintProvider());\n+        constraintVerifier.givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE);\n+        constraintVerifier.givenFacts(queen2, row1)\n+                .expectImpact(SimpleScore.ZERO);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzg5Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397713896", "bodyText": "If 3 is the total match weight, I think it should be SimpleScore.of(3). I think it will make the tests easier to understand although it requires more keystrokes than just providing the number.", "author": "yurloc", "createdAt": "2020-03-25T09:30:17Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import org.junit.Test;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier =\n+            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+\n+    @Test\n+    public void testSingleConstraint() {\n+        Column column1 = new Column();\n+        column1.setId(0L);\n+        column1.setIndex(0);\n+        Row row = new Row();\n+        row.setId(0L);\n+        row.setIndex(0);\n+        Queen queen1 = new Queen();\n+        queen1.setId(0L);\n+        queen1.setRow(row);\n+        queen1.setColumn(column1);\n+        // One queen\n+        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n+                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1)\n+                .expectImpact(\"No horizontal conflicts with just one queen.\", 0);\n+        // Two queens\n+        Column column2 = new Column();\n+        column2.setId(1L);\n+        column2.setIndex(1);\n+        Queen queen2 = new Queen();\n+        queen2.setId(1L);\n+        queen2.setRow(row);\n+        queen2.setColumn(column2);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n+                .expectImpact(\"One pair of queens on the same row.\", 1);\n+        // Three queens\n+        Column column3 = new Column();\n+        column2.setId(2L);\n+        column2.setIndex(2);\n+        Queen queen3 = new Queen();\n+        queen3.setId(2L);\n+        queen3.setRow(row);\n+        queen3.setColumn(column3);\n+        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, queen3, row, column1, column2, column3)\n+                .expectImpact(\"Three pairs of queens on the same row.\", 3);", "originalCommit": "a6f4e06b1f9feef6e9a9bf07ef5dc915deb38183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNjI1Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397716256", "bodyText": "I don't know what you mean. You've all made it very clear to me during the last meeting that we should not match scores, as constraint weights are externally configurable.", "author": "triceo", "createdAt": "2020-03-25T09:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwNTY4MA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397805680", "bodyText": "I'm not talking about the total score. I'm only talking about the match weight.\nI went through the code again and I think I've probably confused constraint weight and match weight (in the API, not conceptually). So if I have:\n    Constraint horizontalConflict(ConstraintFactory factory) {\n        return factory\n                .fromUniquePair(Queen.class, equal(Queen::getRowIndex))\n                .penalize(\"Horizontal conflict\", SimpleScore.ONE);\n    }\nSimpleScore.ONE is constraint weight, which only determines score level and the base that can be weighted. In this case match weight is not provided, so I guess it defaults to 1.\nWhereas:\n    Constraint computerCost(ConstraintFactory constraintFactory) {\n        return constraintFactory.from(CloudComputer.class)\n                .ifExists(CloudProcess.class, equal(Function.identity(), CloudProcess::getComputer))\n                .penalize(\"computerCost\",\n                        HardSoftScore.ONE_SOFT,\n                        CloudComputer::getCost);\n    }\nin this case constraint weight is HardSoftScore.ONE_SOFT and it's given an additional (dynamic) weight of CloudComputer::getCost.\nIf this is true then the question in the beginning of this thread doesn't make sense. Result of weight calculation is a number (int, long, Big*) so it makes sense as it is (expectImpact(String msg, Number totalWeight)).", "author": "yurloc", "createdAt": "2020-03-25T12:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNDA0MA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398004040", "bodyText": "Yes, exactly. The score-typed argument (HardSoftScore.ONE_SOFT) is called \"constraint weight\", and can be configured externally using ConstraintConfiguration. The other value, often calculated (CloudComputer::getCost), is called \"match weight\", it is a numeric type and is defined within the constraint itself.", "author": "triceo", "createdAt": "2020-03-25T16:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMzg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex c67f14560..083e956b1 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -17,59 +17,47 @@\n package org.optaplanner.examples.nqueens.solver.score;\n \n import org.junit.Test;\n-import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n-import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n-import org.optaplanner.test.impl.score.stream.SingleConstraintVerifier;\n+import org.optaplanner.test.impl.score.stream.ConstraintProviderVerifier;\n+\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraint;\n+import static org.optaplanner.test.impl.score.stream.ConstraintVerifier.forConstraintProvider;\n \n public class NQueensConstraintProviderTest {\n \n-    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier =\n-            ConstraintVerifier.createFor(NQueens.class, Queen.class);\n+    // Dummy data, the tests don't actually do anything.\n+    private Queen queen1, queen2;\n+    private Row row1, row2;\n \n     @Test\n     public void testSingleConstraint() {\n-        Column column1 = new Column();\n-        column1.setId(0L);\n-        column1.setIndex(0);\n-        Row row = new Row();\n-        row.setId(0L);\n-        row.setIndex(0);\n-        Queen queen1 = new Queen();\n-        queen1.setId(0L);\n-        queen1.setRow(row);\n-        queen1.setColumn(column1);\n-        // One queen\n-        SingleConstraintVerifier<NQueens> horizontalConflictConstraintVerifier =\n-                constraintVerifier.forConstraint(constraintProvider::horizontalConflict);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, row, column1)\n-                .expectImpact(\"No horizontal conflicts with just one queen.\", 0);\n-        // Two queens\n-        Column column2 = new Column();\n-        column2.setId(1L);\n-        column2.setIndex(1);\n-        Queen queen2 = new Queen();\n-        queen2.setId(1L);\n-        queen2.setRow(row);\n-        queen2.setColumn(column2);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, row, column1, column2)\n-                .expectImpact(\"One pair of queens on the same row.\", 1);\n-        // Three queens\n-        Column column3 = new Column();\n-        column2.setId(2L);\n-        column2.setIndex(2);\n-        Queen queen3 = new Queen();\n-        queen3.setId(2L);\n-        queen3.setRow(row);\n-        queen3.setColumn(column3);\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, queen3, row, column1, column2, column3)\n-                .expectImpact(\"Three pairs of queens on the same row.\", 3);\n-        // Intentionally broken to see the broken expectation message.\n-        horizontalConflictConstraintVerifier.givenFacts(queen1, queen2, queen3, row, column1, column2, column3)\n-                .expectImpact(\"Three pairs of queens on the same row.\", -1);\n+        NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+        forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE)  // No type check here. Wrong score type fails at runtime.\n+                .expectConstraintMatches(queen1, queen2);\n+        //      ^^^^^^ We shouldn't allow this until we have a clear definition and correct implementation of\n+        //      constraint matches.\n+        //      I suggest that this is out of scope for now, and therefore so is this method.\n+    }\n+\n+    @Test\n+    public void testEntireConstraintProvider() {\n+        forConstraintProvider(new NQueensConstraintProvider())\n+                .givenPlanningSolution(new NQueens()) // You would read some XStream solution here.\n+                .expectImpact(SimpleScore.ONE); // Does not allow to check constraint matches, pointless with Solution.\n+    }\n+\n+    @Test\n+    public void testVerifierReuse() {\n+        ConstraintProviderVerifier constraintVerifier = forConstraintProvider(new NQueensConstraintProvider());\n+        constraintVerifier.givenFacts(queen1, queen2, row1, row2)\n+                .expectImpact(SimpleScore.ONE);\n+        constraintVerifier.givenFacts(queen2, row1)\n+                .expectImpact(SimpleScore.ZERO);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MjM1Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397872356", "bodyText": "Why not using AssertionError? E.g. jUnit throws this exception in case of a test failure.", "author": "rsynek", "createdAt": "2020-03-25T13:55:51Z", "path": "optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.impl.score.stream;\n+\n+import java.math.BigDecimal;\n+\n+public abstract class AbstractConstraintVerifierAssertion<A extends AbstractConstraintVerifierAssertion<A, V>,\n+        V extends AbstractConstraintVerifier<A, V>> {\n+\n+    private final V parentConstraintVerifier;\n+\n+    protected AbstractConstraintVerifierAssertion(V constraintVerifier) {\n+        this.parentConstraintVerifier = constraintVerifier;\n+    }\n+\n+    protected final V getParentConstraintVerifier() {\n+        return parentConstraintVerifier;\n+    }\n+\n+    abstract protected Number getImpact();\n+\n+    private void assertImpact(Number weight) {\n+        Number impact = getImpact();\n+        if (!weight.equals(impact)) {\n+            throw new IllegalStateException(\"Expected \" + weight + \" (\" + weight.getClass() + \") is not actual \" + impact + \" (\" + impact.getClass() + \")\");", "originalCommit": "bbc7ef6f04dcd9c66f7ab098fea5ac9d76294aea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java b/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java\nindex 4c95c0076..78c0c8346 100644\n--- a/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java\n+++ b/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java\n\n@@ -16,42 +16,37 @@\n \n package org.optaplanner.test.impl.score.stream;\n \n-import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.score.Score;\n \n public abstract class AbstractConstraintVerifierAssertion<A extends AbstractConstraintVerifierAssertion<A, V>,\n-        V extends AbstractConstraintVerifier<A, V>> {\n+        V extends AbstractConstraintVerifier<A>> {\n \n     private final V parentConstraintVerifier;\n+    private final Object planningSolution;\n+    private final Object[] facts;\n \n-    protected AbstractConstraintVerifierAssertion(V constraintVerifier) {\n+    protected AbstractConstraintVerifierAssertion(V constraintVerifier, Object planningSolution) {\n+        Objects.requireNonNull(planningSolution);\n         this.parentConstraintVerifier = constraintVerifier;\n+        this.planningSolution = planningSolution;\n+        this.facts = null;\n     }\n \n-    protected final V getParentConstraintVerifier() {\n-        return parentConstraintVerifier;\n-    }\n-\n-    abstract protected Number getImpact();\n-\n-    private void assertImpact(Number weight) {\n-        Number impact = getImpact();\n-        if (!weight.equals(impact)) {\n-            throw new IllegalStateException(\"Expected \" + weight + \" (\" + weight.getClass() + \") is not actual \" + impact + \" (\" + impact.getClass() + \")\");\n-        }\n-    }\n-\n-    public A expectImpact(int matchWeight) {\n-        assertImpact(matchWeight);\n-        return (A) this;\n+    protected AbstractConstraintVerifierAssertion(V constraintVerifier, Object[] facts) {\n+        Objects.requireNonNull(facts);\n+        this.parentConstraintVerifier = constraintVerifier;\n+        this.planningSolution = null;\n+        this.facts = Arrays.copyOf(facts, facts.length);\n     }\n \n-    public A expectImpact(long matchWeight) {\n-        assertImpact(matchWeight);\n-        return (A) this;\n+    protected final V getParentConstraintVerifier() {\n+        return parentConstraintVerifier;\n     }\n \n-    public A expectImpact(BigDecimal matchWeight) {\n-        assertImpact(matchWeight);\n+    public A expectImpact(Score<?> score) {\n         return (A) this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4NzIxOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r397987219", "bodyText": "throw AssertionError? Frameworks like JUnit or AssertJ throw that or a subclass of it.", "author": "yurloc", "createdAt": "2020-03-25T16:20:07Z", "path": "optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.impl.score.stream;\n+\n+import java.math.BigDecimal;\n+\n+public abstract class AbstractConstraintVerifierAssertion<A extends AbstractConstraintVerifierAssertion<A, V>,\n+        V extends AbstractConstraintVerifier<A, V>> {\n+\n+    private final V parentConstraintVerifier;\n+\n+    protected AbstractConstraintVerifierAssertion(V constraintVerifier) {\n+        this.parentConstraintVerifier = constraintVerifier;\n+    }\n+\n+    protected final V getParentConstraintVerifier() {\n+        return parentConstraintVerifier;\n+    }\n+\n+    abstract protected Number getImpact();\n+\n+    private void assertImpact(Number weight, String message) {\n+        Number impact = getImpact();\n+        String constraintId = getParentConstraintVerifier().getConstraint().getConstraintId();\n+        if (weight.equals(impact)) {\n+            return;\n+        }\n+        if (message == null) {\n+            throw new IllegalStateException(\"Broken expectation.\" + System.lineSeparator() +", "originalCommit": "62c09e0627328e5965b5af90a6eb6225ca77e0a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java b/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java\nindex 33dedf2ad..78c0c8346 100644\n--- a/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java\n+++ b/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/AbstractConstraintVerifierAssertion.java\n\n@@ -16,67 +16,38 @@\n \n package org.optaplanner.test.impl.score.stream;\n \n-import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.score.Score;\n \n public abstract class AbstractConstraintVerifierAssertion<A extends AbstractConstraintVerifierAssertion<A, V>,\n-        V extends AbstractConstraintVerifier<A, V>> {\n+        V extends AbstractConstraintVerifier<A>> {\n \n     private final V parentConstraintVerifier;\n+    private final Object planningSolution;\n+    private final Object[] facts;\n \n-    protected AbstractConstraintVerifierAssertion(V constraintVerifier) {\n+    protected AbstractConstraintVerifierAssertion(V constraintVerifier, Object planningSolution) {\n+        Objects.requireNonNull(planningSolution);\n         this.parentConstraintVerifier = constraintVerifier;\n+        this.planningSolution = planningSolution;\n+        this.facts = null;\n     }\n \n-    protected final V getParentConstraintVerifier() {\n-        return parentConstraintVerifier;\n-    }\n-\n-    abstract protected Number getImpact();\n-\n-    private void assertImpact(Number weight, String message) {\n-        Number impact = getImpact();\n-        String constraintId = getParentConstraintVerifier().getConstraint().getConstraintId();\n-        if (weight.equals(impact)) {\n-            return;\n-        }\n-        if (message == null) {\n-            throw new IllegalStateException(\"Broken expectation.\" + System.lineSeparator() +\n-                    \"  Constraint: \" + constraintId + System.lineSeparator() +\n-                    \"    Expected: \" + weight + \" (\" + weight.getClass() + \")\" + System.lineSeparator() +\n-                    \"      Actual: \" + impact + \" (\" + impact.getClass() + \")\");\n-        }\n-        throw new IllegalStateException(\"Broken expectation. \" + System.lineSeparator() +\n-                \"     Message: \" + message + System.lineSeparator() +\n-                \"  Constraint: \" + constraintId + System.lineSeparator() +\n-                \"    Expected: \" + weight + \" (\" + weight.getClass() + \")\" + System.lineSeparator() +\n-                \"      Actual: \" + impact + \" (\" + impact.getClass() + \")\");\n-    }\n-\n-    public A expectImpact(String message, int matchWeight) {\n-        assertImpact(matchWeight, message);\n-        return (A) this;\n+    protected AbstractConstraintVerifierAssertion(V constraintVerifier, Object[] facts) {\n+        Objects.requireNonNull(facts);\n+        this.parentConstraintVerifier = constraintVerifier;\n+        this.planningSolution = null;\n+        this.facts = Arrays.copyOf(facts, facts.length);\n     }\n \n-    public A expectImpact(String message, long matchWeight) {\n-        assertImpact(matchWeight, message);\n-        return (A) this;\n+    protected final V getParentConstraintVerifier() {\n+        return parentConstraintVerifier;\n     }\n \n-    public A expectImpact(String message, BigDecimal matchWeight) {\n-        assertImpact(matchWeight, message);\n+    public A expectImpact(Score<?> score) {\n         return (A) this;\n     }\n \n-    public A expectImpact(int matchWeight) {\n-        return expectImpact(null, matchWeight);\n-    }\n-\n-    public A expectImpact(long matchWeight) {\n-        return expectImpact(null, matchWeight);\n-    }\n-\n-    public A expectImpact(BigDecimal matchWeight) {\n-        return expectImpact(null, matchWeight);\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMDY4Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398500682", "bodyText": "Unused.", "author": "yurloc", "createdAt": "2020-03-26T11:29:25Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSession.java", "diffHunk": "@@ -50,6 +50,8 @@\n      */\n     Map<Object, Indictment> getIndictmentMap();\n \n+    ConstraintSessionFactory<Solution_> getSessionFactory();", "originalCommit": "11fb4ba12fe9c879703353b2befe10b458f1e662", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSession.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSession.java\nindex e61f15e40..07adf3e0c 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSession.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSession.java\n\n@@ -50,8 +50,6 @@ public interface ConstraintSession<Solution_> extends AutoCloseable {\n      */\n     Map<Object, Indictment> getIndictmentMap();\n \n-    ConstraintSessionFactory<Solution_> getSessionFactory();\n-\n     @Override\n     void close();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMzY5OA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398503698", "bodyText": "Seems to be unused.", "author": "yurloc", "createdAt": "2020-03-26T11:35:08Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java", "diffHunk": "@@ -41,6 +42,7 @@\n \n public final class BavetConstraintSession<Solution_> implements ConstraintSession<Solution_> {\n \n+    private final ConstraintSessionFactory<Solution_> sessionFactory;", "originalCommit": "11fb4ba12fe9c879703353b2befe10b458f1e662", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java\nindex 28dee21f8..6ff1eb5d2 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/BavetConstraintSession.java\n\n@@ -42,7 +41,6 @@ import org.optaplanner.core.impl.score.stream.bavet.uni.BavetFromUniTuple;\n \n public final class BavetConstraintSession<Solution_> implements ConstraintSession<Solution_> {\n \n-    private final ConstraintSessionFactory<Solution_> sessionFactory;\n     private final boolean constraintMatchEnabled;\n     private final Score<?> zeroScore;\n     private final ScoreInliner<?> scoreInliner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNDkyOA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398504928", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Duplicates validation when the session is build, but this fail-fasts when weights are hard coded\n          \n          \n            \n                    // Duplicates validation when the session is built, but this fails fast when weights are hard coded", "author": "yurloc", "createdAt": "2020-03-26T11:37:28Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java", "diffHunk": "@@ -63,7 +63,7 @@\n \n     protected Function<Solution_, Score<?>> buildConstraintWeightExtractor(String constraintPackage, String constraintName, Score<?> constraintWeight) {\n         validateConstraintId(constraintPackage, constraintName);\n-        // Duplicates validation when the session is build, but this fail-faster when weights are hard coded\n+        // Duplicates validation when the session is build, but this fail-fasts when weights are hard coded", "originalCommit": "11fb4ba12fe9c879703353b2befe10b458f1e662", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java\nindex e12fafc68..12742d743 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java\n\n@@ -63,7 +63,7 @@ public abstract class AbstractConstraintStream<Solution_> implements ConstraintS\n \n     protected Function<Solution_, Score<?>> buildConstraintWeightExtractor(String constraintPackage, String constraintName, Score<?> constraintWeight) {\n         validateConstraintId(constraintPackage, constraintName);\n-        // Duplicates validation when the session is build, but this fail-fasts when weights are hard coded\n+        // Duplicates validation when the session is build, but this fail-faster when weights are hard coded\n         getConstraintFactory().getSolutionDescriptor().validateConstraintWeight(constraintPackage, constraintName, constraintWeight);\n         return solution -> constraintWeight;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNTU3MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398505571", "bodyText": "Raw type.", "author": "yurloc", "createdAt": "2020-03-26T11:38:39Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n+\n+public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n+\n+    private final ScoreDefinition scoreDefinition;", "originalCommit": "11fb4ba12fe9c879703353b2befe10b458f1e662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NDYxMw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399364613", "bodyText": "Good catch.\nTrouble is that it's raw on SolutionDescriptor too :(\nI am really looking for to 8.0 to get reduce Score<S extends Score> to just Score,\nthat will give a fighting change against the raw types.", "author": "ge0ffrey", "createdAt": "2020-03-27T15:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNTU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NjA5NA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399366094", "bodyText": "Ps: I don't recommending fixing SolutionDescriptor for this right now. I tried in the past and failed, eventually... we need to degenerify Score first in 8.0.", "author": "ge0ffrey", "createdAt": "2020-03-27T15:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNTU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\ndeleted file mode 100644\nindex 1f4c78f18..000000000\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.optaplanner.core.impl.score.stream.common;\n-\n-import java.math.BigDecimal;\n-import java.util.Arrays;\n-\n-import org.optaplanner.core.api.score.Score;\n-import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n-import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n-import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n-\n-public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n-\n-    private final ScoreDefinition scoreDefinition;\n-\n-    protected AbstractConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDescriptor) {\n-        this.scoreDefinition = solutionDescriptor.getScoreDefinition();\n-    }\n-\n-    protected ScoreDefinition<?> getScoreDefinition() {\n-        return scoreDefinition;\n-    }\n-\n-    protected Score<?> getScoreZero() {\n-        return scoreDefinition.getZeroScore();\n-    }\n-\n-    protected <S extends Score<S>> S getScoreOneSoftest() {\n-        Number[] result = Arrays.copyOf(getScoreZero().toLevelNumbers(), scoreDefinition.getLevelsSize());\n-        Number lastNumber = result[result.length - 1];\n-        if (lastNumber instanceof Integer) {\n-            lastNumber = 1;\n-        } else if (lastNumber instanceof Long) {\n-            lastNumber = 1L;\n-        } else if (lastNumber instanceof Double) {\n-            lastNumber = 1.0d;\n-        } else if (lastNumber instanceof BigDecimal) {\n-            lastNumber = BigDecimal.ONE;\n-        } else {\n-            throw new IllegalStateException(\"Unexpected score number format: \" + lastNumber.getClass());\n-        }\n-        result[result.length - 1] = lastNumber;\n-        return (S) scoreDefinition.fromLevelNumbers(0, result);\n-    }\n-\n-}\n"}}, {"oid": "72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "url": "https://github.com/kiegroup/optaplanner/commit/72dbaa4dc9069ddee4a645bb5916ab8cb23a9d0b", "message": "API strawman", "committedDate": "2020-03-26T11:42:13Z", "type": "commit"}, {"oid": "a348578a17b6edb343a4e5b92b0c9feb66b684ce", "url": "https://github.com/kiegroup/optaplanner/commit/a348578a17b6edb343a4e5b92b0c9feb66b684ce", "message": "Fix compilation error", "committedDate": "2020-03-26T11:42:13Z", "type": "commit"}, {"oid": "416ad4db27e958d3230a9476c94414354513b8dd", "url": "https://github.com/kiegroup/optaplanner/commit/416ad4db27e958d3230a9476c94414354513b8dd", "message": "Remove API we don't want to support", "committedDate": "2020-03-26T11:42:13Z", "type": "commit"}, {"oid": "c8d4c4f92c34a2a6a877c7ff6922e53e86e557f1", "url": "https://github.com/kiegroup/optaplanner/commit/c8d4c4f92c34a2a6a877c7ff6922e53e86e557f1", "message": "Add penalty, reward", "committedDate": "2020-03-26T11:42:14Z", "type": "commit"}, {"oid": "c8c7431d1a2b78b30ff83c1f27bf8fa733febe77", "url": "https://github.com/kiegroup/optaplanner/commit/c8c7431d1a2b78b30ff83c1f27bf8fa733febe77", "message": "ConstraintVerifier gets to specify stream impl type", "committedDate": "2020-03-26T11:42:14Z", "type": "commit"}, {"oid": "4ddbe6e2b8b9d79e6d975270269a238fb2120348", "url": "https://github.com/kiegroup/optaplanner/commit/4ddbe6e2b8b9d79e6d975270269a238fb2120348", "message": "Prepare for null solutions", "committedDate": "2020-03-26T11:42:14Z", "type": "commit"}, {"oid": "41e2ba148329b737a07b93d405edb64cf18679c4", "url": "https://github.com/kiegroup/optaplanner/commit/41e2ba148329b737a07b93d405edb64cf18679c4", "message": "Add first successful test", "committedDate": "2020-03-26T11:42:14Z", "type": "commit"}, {"oid": "ecfc346b26c214b441acfd2bd9e2858a328d00c7", "url": "https://github.com/kiegroup/optaplanner/commit/ecfc346b26c214b441acfd2bd9e2858a328d00c7", "message": "Bit of fixes", "committedDate": "2020-03-26T11:42:14Z", "type": "commit"}, {"oid": "889a5ecd67906c6148677dbb6c692b8b19107aea", "url": "https://github.com/kiegroup/optaplanner/commit/889a5ecd67906c6148677dbb6c692b8b19107aea", "message": "Add expectation message", "committedDate": "2020-03-26T11:42:15Z", "type": "commit"}, {"oid": "f00d0af74c85da3000da8376e0839317d367b8b4", "url": "https://github.com/kiegroup/optaplanner/commit/f00d0af74c85da3000da8376e0839317d367b8b4", "message": "Add constraint ID to the message", "committedDate": "2020-03-26T11:42:15Z", "type": "commit"}, {"oid": "e189cab00d29f52609c5ad5b9adc9a05eeec8ac3", "url": "https://github.com/kiegroup/optaplanner/commit/e189cab00d29f52609c5ad5b9adc9a05eeec8ac3", "message": "Less nesting", "committedDate": "2020-03-26T11:42:15Z", "type": "commit"}, {"oid": "91b82664cf0741a1423f58e6bd66d51d020681ed", "url": "https://github.com/kiegroup/optaplanner/commit/91b82664cf0741a1423f58e6bd66d51d020681ed", "message": "requireNonNull() has a return value", "committedDate": "2020-03-26T11:42:15Z", "type": "commit"}, {"oid": "e9d3319601277ddff26aa542623f736cf0d2880e", "url": "https://github.com/kiegroup/optaplanner/commit/e9d3319601277ddff26aa542623f736cf0d2880e", "message": "Address first set of comments", "committedDate": "2020-03-26T11:42:15Z", "type": "commit"}, {"oid": "36ae1d2d05102c8c88e81409c78e6169ebd35368", "url": "https://github.com/kiegroup/optaplanner/commit/36ae1d2d05102c8c88e81409c78e6169ebd35368", "message": "Address another set of comments", "committedDate": "2020-03-26T11:42:15Z", "type": "commit"}, {"oid": "353558da63b9bd9368aff0ab2a9c4106090631ec", "url": "https://github.com/kiegroup/optaplanner/commit/353558da63b9bd9368aff0ab2a9c4106090631ec", "message": "Add Javadoc and address other minor issues", "committedDate": "2020-03-26T11:42:16Z", "type": "commit"}, {"oid": "d339db464de39d5d78a83f2d8530de200ceaa413", "url": "https://github.com/kiegroup/optaplanner/commit/d339db464de39d5d78a83f2d8530de200ceaa413", "message": "Fix a memory leak", "committedDate": "2020-03-26T11:42:16Z", "type": "commit"}, {"oid": "a0647d8002a878f5140368987d930fcd62ef6ee1", "url": "https://github.com/kiegroup/optaplanner/commit/a0647d8002a878f5140368987d930fcd62ef6ee1", "message": "Simplify test", "committedDate": "2020-03-26T11:42:16Z", "type": "commit"}, {"oid": "88a4c346016ee4e5ca5babc5a832be5604a6820e", "url": "https://github.com/kiegroup/optaplanner/commit/88a4c346016ee4e5ca5babc5a832be5604a6820e", "message": "Generics", "committedDate": "2020-03-26T11:42:16Z", "type": "commit"}, {"oid": "131ced03b5e1f154cc0e214a64edd290ada1a23c", "url": "https://github.com/kiegroup/optaplanner/commit/131ced03b5e1f154cc0e214a64edd290ada1a23c", "message": "Test all constraints", "committedDate": "2020-03-26T11:42:16Z", "type": "commit"}, {"oid": "ced2f1e3eea1cb8c4290bdae20bd39f2a0239624", "url": "https://github.com/kiegroup/optaplanner/commit/ced2f1e3eea1cb8c4290bdae20bd39f2a0239624", "message": "Allow for asserting on Solution", "committedDate": "2020-03-26T11:42:16Z", "type": "commit"}, {"oid": "d0c1ebe16365a674688f4f233a1bad6389fa890a", "url": "https://github.com/kiegroup/optaplanner/commit/d0c1ebe16365a674688f4f233a1bad6389fa890a", "message": "Implement solution-based assertions", "committedDate": "2020-03-26T11:42:16Z", "type": "commit"}, {"oid": "fd29fcc5f3c6c8e5aef2e31a678669cb6636833e", "url": "https://github.com/kiegroup/optaplanner/commit/fd29fcc5f3c6c8e5aef2e31a678669cb6636833e", "message": "Complete the NQueensConstraintProviderTest", "committedDate": "2020-03-26T11:42:17Z", "type": "commit"}, {"oid": "f0ddd734e902a0b2487554245c60719760952fa5", "url": "https://github.com/kiegroup/optaplanner/commit/f0ddd734e902a0b2487554245c60719760952fa5", "message": "Remove extra dot", "committedDate": "2020-03-26T11:42:17Z", "type": "commit"}, {"oid": "73b0618a41b489282d50484b9508f32f07aa5de3", "url": "https://github.com/kiegroup/optaplanner/commit/73b0618a41b489282d50484b9508f32f07aa5de3", "message": "Review ready", "committedDate": "2020-03-26T11:42:17Z", "type": "commit"}, {"oid": "fa35304d2e01b3380eb84eec0e66e51e46375290", "url": "https://github.com/kiegroup/optaplanner/commit/fa35304d2e01b3380eb84eec0e66e51e46375290", "message": "Remove unused field", "committedDate": "2020-03-26T11:42:17Z", "type": "commit"}, {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "url": "https://github.com/kiegroup/optaplanner/commit/c2ddd66212bfcd8bf8a4b91d120386812be07051", "message": "Update optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java\n\nCo-Authored-By: Ji\u0159\u00ed Locker <jiri.locker@gmail.com>", "committedDate": "2020-03-26T11:42:17Z", "type": "commit"}, {"oid": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "url": "https://github.com/kiegroup/optaplanner/commit/c2ddd66212bfcd8bf8a4b91d120386812be07051", "message": "Update optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintStream.java\n\nCo-Authored-By: Ji\u0159\u00ed Locker <jiri.locker@gmail.com>", "committedDate": "2020-03-26T11:42:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwODk0Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398508947", "bodyText": "Candidate for a unit test.", "author": "yurloc", "createdAt": "2020-03-26T11:45:02Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n+\n+public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n+\n+    private final ScoreDefinition scoreDefinition;\n+\n+    protected AbstractConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.scoreDefinition = solutionDescriptor.getScoreDefinition();\n+    }\n+\n+    protected ScoreDefinition<?> getScoreDefinition() {\n+        return scoreDefinition;\n+    }\n+\n+    protected Score<?> getScoreZero() {\n+        return scoreDefinition.getZeroScore();\n+    }\n+\n+    protected <S extends Score<S>> S getScoreOneSoftest() {", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2076ae3037e18db43630d9edc0d949fc4ce52a13", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\nindex 1f4c78f18..af1da3b0d 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\n\n@@ -16,10 +16,6 @@\n \n package org.optaplanner.core.impl.score.stream.common;\n \n-import java.math.BigDecimal;\n-import java.util.Arrays;\n-\n-import org.optaplanner.core.api.score.Score;\n import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNDU0MA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398514540", "bodyText": "Throws NPE on my machine. Can you confirm that?", "author": "yurloc", "createdAt": "2020-03-26T11:55:03Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        Queen queen3 = new Queen(2, row1, column3);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    @Test\n+    public void noAscendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column2);\n+        Queen queen2 = new Queen(1, row2, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column3);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    @Test\n+    public void noDescendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column3);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    private NQueens readSolution(String resource) throws IOException {\n+        Path tempFile = Files.createTempFile(\"optaplanner-test\", \"xml\");\n+        try (InputStreamReader inputStreamReader =\n+                new InputStreamReader(NQueensConstraintProviderTest.class.getResourceAsStream(resource))) {", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNTQ1MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398515451", "bodyText": "Maybe you forgot to commit 256queens_-30.xml?", "author": "yurloc", "createdAt": "2020-03-26T11:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNDU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNjkzNg==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398516936", "bodyText": "Doesn't, tests pass both on my machine and on Jenkins.", "author": "triceo", "createdAt": "2020-03-26T11:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNDU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0Mzc2Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398543767", "bodyText": "Fails on Jenkins.", "author": "yurloc", "createdAt": "2020-03-26T12:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNDU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NTkxMw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398695913", "bodyText": "I could swear it didn't. Fixing, thanks for pointing out.", "author": "triceo", "createdAt": "2020-03-26T16:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNDU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "f64db332588af0a27cf94de2f9cce98500c464c4", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 7405f928c..baa5b140d 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -59,7 +59,7 @@ public class NQueensConstraintProviderTest {\n         Queen queen2 = new Queen(1, row1, column2);\n         constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n                 .given(queen1, queen2)\n-                .expectReward(1);\n+                .expectPenalty(1);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNjU0MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398516541", "bodyText": "Should be a penalty, shouldn't it?", "author": "yurloc", "createdAt": "2020-03-26T11:58:47Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0MzkxMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398543911", "bodyText": "Lukas, presuming this isn't a typo, I am playing chess again you next F2F!\nI played Matej Cimbora a few years ago and he handed me my behind... Three times... (he has an ELO rating.) I need a win :)", "author": "ge0ffrey", "createdAt": "2020-03-26T12:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNjU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3MzY0Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398573647", "bodyText": "I suck at chess, that would be no challenge for you. :-)", "author": "triceo", "createdAt": "2020-03-26T13:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxNjU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f64db332588af0a27cf94de2f9cce98500c464c4", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 7405f928c..baa5b140d 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -59,7 +59,7 @@ public class NQueensConstraintProviderTest {\n         Queen queen2 = new Queen(1, row1, column2);\n         constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n                 .given(queen1, queen2)\n-                .expectReward(1);\n+                .expectPenalty(1);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzMzc2Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398533767", "bodyText": "ConstraintStreamScoreDirectorFactory.getConstraints is non-public API.\nWe avoid defensive copies in non-public API, unless it's a probably-one-day-public-API, to avoid performance surprises and to reduce the code size. Note that even though the array is defensively copied, the constraint instances are not. So it's not watertight.\nThis method will never be part of a public API I'd argue.", "author": "ge0ffrey", "createdAt": "2020-03-26T12:30:06Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/stream/ConstraintStreamScoreDirectorFactory.java", "diffHunk": "@@ -62,13 +65,21 @@ public ConstraintStreamScoreDirectorFactory(SolutionDescriptor<Solution_> soluti\n     // ************************************************************************\n \n     @Override\n-    public ConstraintStreamScoreDirector<Solution_> buildScoreDirector(\n-            boolean lookUpEnabled, boolean constraintMatchEnabledPreference) {\n+    public ConstraintStreamScoreDirector<Solution_> buildScoreDirector(boolean lookUpEnabled,\n+            boolean constraintMatchEnabledPreference) {\n         return new ConstraintStreamScoreDirector<>(this, lookUpEnabled, constraintMatchEnabledPreference);\n     }\n \n     public ConstraintSession<Solution_> newConstraintStreamingSession(boolean constraintMatchEnabled, Solution_ workingSolution) {\n         return constraintSessionFactory.buildSession(constraintMatchEnabled, workingSolution);\n     }\n \n+    // ************************************************************************\n+    // Getters/setters\n+    // ************************************************************************\n+\n+    public Constraint[] getConstraints() {\n+        return Arrays.copyOf(constraints, constraints.length);", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc9f945780bbfa521540c3732cc6d9adef8e6da0", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/stream/ConstraintStreamScoreDirectorFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/stream/ConstraintStreamScoreDirectorFactory.java\nindex 2dda987c5..ab549a6bb 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/stream/ConstraintStreamScoreDirectorFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/director/stream/ConstraintStreamScoreDirectorFactory.java\n\n@@ -79,7 +77,7 @@ public class ConstraintStreamScoreDirectorFactory<Solution_> extends AbstractSco\n     // ************************************************************************\n \n     public Constraint[] getConstraints() {\n-        return Arrays.copyOf(constraints, constraints.length);\n+        return constraints;\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNDMxMA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398534310", "bodyText": "\"may\" or \"will\"?\nIn general, words as \"may\", \"might\", \"could\" should only be used in docs and javadocs if we have proven cases were it doesn't happen too. In the product docs's style guide they are heavily discouraged.", "author": "ge0ffrey", "createdAt": "2020-03-26T12:31:08Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSessionFactory.java", "diffHunk": "@@ -23,7 +23,7 @@\n     /**\n      * This method is thread-safe.\n      * @param constraintMatchEnabled  true if {@link ScoreDirector#isConstraintMatchEnabled()} should be true\n-     * @param workingSolution never null\n+     * @param workingSolution if null, uniform synthetic constraint weights may be applied", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNjA0Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398536043", "bodyText": "to take that philosophy a step further: if it's indeed \"may\", then it should specify when and when it doesn't happen, if that's practical.", "author": "ge0ffrey", "createdAt": "2020-03-26T12:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNDMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "cc9f945780bbfa521540c3732cc6d9adef8e6da0", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSessionFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSessionFactory.java\nindex e3a55eb3b..44ede4740 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSessionFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/ConstraintSessionFactory.java\n\n@@ -23,7 +23,7 @@ public interface ConstraintSessionFactory<Solution_>  {\n     /**\n      * This method is thread-safe.\n      * @param constraintMatchEnabled  true if {@link ScoreDirector#isConstraintMatchEnabled()} should be true\n-     * @param workingSolution if null, uniform synthetic constraint weights may be applied\n+     * @param workingSolution if null, uniform synthetic constraint weights will be applied\n      * @return never null\n      */\n     ConstraintSession<Solution_> buildSession(boolean constraintMatchEnabled, Solution_ workingSolution);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNjc1MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398536751", "bodyText": "code style: d in capital, just longs L are in capital (which get confused with one otherwise)", "author": "ge0ffrey", "createdAt": "2020-03-26T12:35:20Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n+\n+public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n+\n+    private final ScoreDefinition scoreDefinition;\n+\n+    protected AbstractConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.scoreDefinition = solutionDescriptor.getScoreDefinition();\n+    }\n+\n+    protected ScoreDefinition<?> getScoreDefinition() {\n+        return scoreDefinition;\n+    }\n+\n+    protected Score<?> getScoreZero() {\n+        return scoreDefinition.getZeroScore();\n+    }\n+\n+    protected <S extends Score<S>> S getScoreOneSoftest() {\n+        Number[] result = Arrays.copyOf(getScoreZero().toLevelNumbers(), scoreDefinition.getLevelsSize());\n+        Number lastNumber = result[result.length - 1];\n+        if (lastNumber instanceof Integer) {\n+            lastNumber = 1;\n+        } else if (lastNumber instanceof Long) {\n+            lastNumber = 1L;\n+        } else if (lastNumber instanceof Double) {\n+            lastNumber = 1.0d;", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2076ae3037e18db43630d9edc0d949fc4ce52a13", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\nindex 1f4c78f18..af1da3b0d 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\n\n@@ -16,10 +16,6 @@\n \n package org.optaplanner.core.impl.score.stream.common;\n \n-import java.math.BigDecimal;\n-import java.util.Arrays;\n-\n-import org.optaplanner.core.api.score.Score;\n import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzOTE1Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398539156", "bodyText": "-1 on this approach. It is not this classes's responsibility to figure out the \"one soft score\".\n(This will cause pain if ever decide to build a HardLongSoftIntScore. Or with pareto scoring. And even though that pain might be unavoidable, this will hide that pain to the very last moment)\nAdd a method on ScoreDefinition, just like we have getZeroScore() there.", "author": "ge0ffrey", "createdAt": "2020-03-26T12:39:23Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.common;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n+\n+public abstract class AbstractConstraintSessionFactory<Solution_> implements ConstraintSessionFactory<Solution_> {\n+\n+    private final ScoreDefinition scoreDefinition;\n+\n+    protected AbstractConstraintSessionFactory(SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.scoreDefinition = solutionDescriptor.getScoreDefinition();\n+    }\n+\n+    protected ScoreDefinition<?> getScoreDefinition() {\n+        return scoreDefinition;\n+    }\n+\n+    protected Score<?> getScoreZero() {\n+        return scoreDefinition.getZeroScore();\n+    }\n+\n+    protected <S extends Score<S>> S getScoreOneSoftest() {\n+        Number[] result = Arrays.copyOf(getScoreZero().toLevelNumbers(), scoreDefinition.getLevelsSize());\n+        Number lastNumber = result[result.length - 1];", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2076ae3037e18db43630d9edc0d949fc4ce52a13", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\nindex 1f4c78f18..af1da3b0d 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractConstraintSessionFactory.java\n\n@@ -16,10 +16,6 @@\n \n package org.optaplanner.core.impl.score.stream.common;\n \n-import java.math.BigDecimal;\n-import java.util.Arrays;\n-\n-import org.optaplanner.core.api.score.Score;\n import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n import org.optaplanner.core.impl.score.stream.ConstraintSessionFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0MTAxMA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398541010", "bodyText": "If we add that comment, we should do it in the other examples that have a default constructor for this reason too.\nPersonally, I wouldn't add the comment.\nBtw, the comment isn't accurate. OptaPlanner itself also needs a no-arg constructor to planning clone Queen.", "author": "ge0ffrey", "createdAt": "2020-03-26T12:42:34Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/nqueens/domain/Queen.java", "diffHunk": "@@ -32,6 +32,16 @@\n     // Planning variables: changes during planning, between score calculations.\n     private Row row;\n \n+    public Queen() {\n+        // For XStream", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc9f945780bbfa521540c3732cc6d9adef8e6da0", "chunk": "diff --git a/optaplanner-examples/src/main/java/org/optaplanner/examples/nqueens/domain/Queen.java b/optaplanner-examples/src/main/java/org/optaplanner/examples/nqueens/domain/Queen.java\nindex 01bd412d5..751bd7036 100644\n--- a/optaplanner-examples/src/main/java/org/optaplanner/examples/nqueens/domain/Queen.java\n+++ b/optaplanner-examples/src/main/java/org/optaplanner/examples/nqueens/domain/Queen.java\n\n@@ -33,7 +33,6 @@ public class Queen extends AbstractPersistable {\n     private Row row;\n \n     public Queen() {\n-        // For XStream\n     }\n \n     public Queen(long id, Row row, Column column) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0NzA4MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398547081", "bodyText": "Code syntax and method parameters look great.\nNow for the difficult part: naming.\nAre we sure we want to settle on these names?\n\nforConstraint(): +0.8 (like Class.forName()).\n-- alternatives: ofConstraint()= +1 (like LocalTime.of())\ngiven: +1 (short and sweet)\n-- alternatives: givenFacts +0 (more descriptive)\nexpectReward: +0\n-- alternatives: assertReward: +1 (because of JUnit's assertEquals(expeted, actual))", "author": "ge0ffrey", "createdAt": "2020-03-26T12:52:00Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        Queen queen3 = new Queen(2, row1, column3);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1MDMyMw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398550323", "bodyText": "I like it how it is now. When you read it out loud it makes sense. \"For constraint constraint, given facts, expect penalty value\".", "author": "yurloc", "createdAt": "2020-03-26T12:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0NzA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f64db332588af0a27cf94de2f9cce98500c464c4", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 7405f928c..baa5b140d 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -59,7 +59,7 @@ public class NQueensConstraintProviderTest {\n         Queen queen2 = new Queen(1, row1, column2);\n         constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n                 .given(queen1, queen2)\n-                .expectReward(1);\n+                .expectPenalty(1);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxMTgxNw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398511817", "bodyText": "Why using a temporary file for reading the test dataset?", "author": "rsynek", "createdAt": "2020-03-26T11:50:06Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        Queen queen3 = new Queen(2, row1, column3);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    @Test\n+    public void noAscendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column2);\n+        Queen queen2 = new Queen(1, row2, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column3);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    @Test\n+    public void noDescendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectReward(1);\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column3);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectReward(3);\n+    }\n+\n+    private NQueens readSolution(String resource) throws IOException {\n+        Path tempFile = Files.createTempFile(\"optaplanner-test\", \"xml\");", "originalCommit": "c2ddd66212bfcd8bf8a4b91d120386812be07051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NDEyNw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r398664127", "bodyText": "I don't need a dataset, I need a solution that's at least partially solved. And I need it with a fixed score, that I am asserting against.", "author": "triceo", "createdAt": "2020-03-26T15:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUxMTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "f64db332588af0a27cf94de2f9cce98500c464c4", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex 7405f928c..baa5b140d 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -59,7 +59,7 @@ public class NQueensConstraintProviderTest {\n         Queen queen2 = new Queen(1, row1, column2);\n         constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n                 .given(queen1, queen2)\n-                .expectReward(1);\n+                .expectPenalty(1);\n     }\n \n     @Test\n"}}, {"oid": "f64db332588af0a27cf94de2f9cce98500c464c4", "url": "https://github.com/kiegroup/optaplanner/commit/f64db332588af0a27cf94de2f9cce98500c464c4", "message": "Recognize penalties properly", "committedDate": "2020-03-26T16:08:45Z", "type": "commit"}, {"oid": "cc9f945780bbfa521540c3732cc6d9adef8e6da0", "url": "https://github.com/kiegroup/optaplanner/commit/cc9f945780bbfa521540c3732cc6d9adef8e6da0", "message": "Address some code review comments", "committedDate": "2020-03-26T16:20:14Z", "type": "commit"}, {"oid": "2076ae3037e18db43630d9edc0d949fc4ce52a13", "url": "https://github.com/kiegroup/optaplanner/commit/2076ae3037e18db43630d9edc0d949fc4ce52a13", "message": "Fix how we deal with scores", "committedDate": "2020-03-26T17:05:21Z", "type": "commit"}, {"oid": "4d153e00aed7c2aefe45f3436e7720035b816db8", "url": "https://github.com/kiegroup/optaplanner/commit/4d153e00aed7c2aefe45f3436e7720035b816db8", "message": "Fix Revapi", "committedDate": "2020-03-26T17:08:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NjM5Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399296396", "bodyText": "Prop A) using()\nProp B) of()\nProp C) withSolution().withEntities()\nProp D) forSolutionAndEntities()\nProp E) build()\nProp F) buildConstraintVerifier()", "author": "triceo", "createdAt": "2020-03-27T14:17:17Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex baa5b140d..554684896 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -36,7 +36,7 @@ import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n public class NQueensConstraintProviderTest {\n \n     private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.build(NQueens.class, Queen.class);\n \n     private final Row row1 = new Row(0);\n     private final Row row2 = new Row(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDYwNA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399300604", "bodyText": "Prop A) forConstraint() (geoffrey +1, chris +1)\nProp B) ofConstraint()\nProp C) of()\nProp D) forSingleConstraint()", "author": "triceo", "createdAt": "2020-03-27T14:23:26Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex baa5b140d..554684896 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -36,7 +36,7 @@ import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n public class NQueensConstraintProviderTest {\n \n     private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.build(NQueens.class, Queen.class);\n \n     private final Row row1 = new Row(0);\n     private final Row row2 = new Row(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMTE2Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399301163", "bodyText": "Prop A) given() (geoffrey +1, chris +1)\nProp B) givenFacts()", "author": "triceo", "createdAt": "2020-03-27T14:24:08Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex baa5b140d..554684896 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -36,7 +36,7 @@ import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n public class NQueensConstraintProviderTest {\n \n     private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.build(NQueens.class, Queen.class);\n \n     private final Row row1 = new Row(0);\n     private final Row row2 = new Row(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMDEwMw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399310103", "bodyText": "// Winner\nConstraintVerifier.verifyThat(constraintProvider::horizontalConflict)\n.given(queen1, queen2)\n.penalizesBy(1) / rewardsWith(1) / hasNoImpact();", "author": "ge0ffrey", "createdAt": "2020-03-27T14:36:19Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectPenalty(1);", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyODY2MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399328661", "bodyText": "Optional description method example:\n        constraintVerifier\n                .verifyThat(constraintProvider::ascendingDiagonalConflict)\n                .given(queen1, queen2)\n                .as(\"queen 1 attacks queen 2\")\n                .penalizesBy(2);", "author": "yurloc", "createdAt": "2020-03-27T15:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMDEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex baa5b140d..554684896 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -36,7 +36,7 @@ import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n public class NQueensConstraintProviderTest {\n \n     private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.build(NQueens.class, Queen.class);\n \n     private final Row row1 = new Row(0);\n     private final Row row2 = new Row(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzNTAwNg==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399335006", "bodyText": "Throws NPE if you expectNoImpact() but the constraint does a penalty or a reward. To reproduce, change any expectPenalty() in the NQueens test to expectNoImpact().\njava.lang.IllegalStateException: Failed assembling asserting message.\n\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.getAssertionErrorMessage(SingleConstraintAssertion.java:93)\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.assertImpact(SingleConstraintAssertion.java:62)\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.expectNoImpact(SingleConstraintAssertion.java:213)\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.expectNoImpact(SingleConstraintAssertion.java:220)\n\tat org.optaplanner.examples.nqueens.solver.score.NQueensConstraintProviderTest.horizontalConflictWithTwoQueens(NQueensConstraintProviderTest.java:62)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:131)\nCaused by: java.lang.NullPointerException\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.getImpactTypeLabel(SingleConstraintAssertion.java:98)\n\tat org.optaplanner.test.impl.score.stream.SingleConstraintAssertion.getAssertionErrorMessage(SingleConstraintAssertion.java:76)\n\t... 31 more", "author": "yurloc", "createdAt": "2020-03-27T15:10:01Z", "path": "optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/SingleConstraintAssertion.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.impl.score.stream;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.optaplanner.core.api.score.constraint.ConstraintMatchTotal;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.impl.score.stream.common.AbstractConstraint;\n+import org.optaplanner.core.impl.score.stream.common.ScoreImpactType;\n+\n+public final class SingleConstraintAssertion<Solution_> extends AbstractAssertion<Solution_,\n+        SingleConstraintAssertion<Solution_>, SingleConstraintVerifier<Solution_>> {\n+\n+    private final Map<String, ConstraintMatchTotal> constraintMatchTotalMap;\n+\n+    SingleConstraintAssertion(SingleConstraintVerifier<Solution_> singleConstraintVerifier,\n+            Map<String, ConstraintMatchTotal> constraintMatchTotalMap) {\n+        super(singleConstraintVerifier);\n+        this.constraintMatchTotalMap = Collections.unmodifiableMap(constraintMatchTotalMap);\n+    }\n+\n+    private Number getImpact() {\n+        return constraintMatchTotalMap.values().stream()\n+                .mapToInt(ConstraintMatchTotal::getConstraintMatchCount)\n+                .sum();\n+    }\n+\n+    private static void assertCorrectMatchWeight(Number matchWeightTotal) {\n+        if (matchWeightTotal.doubleValue() <= 0) {\n+            throw new IllegalArgumentException(\"Expected a positive match weight, given (\" + matchWeightTotal + \").\");\n+        }\n+    }\n+\n+    private void assertImpact(ScoreImpactType scoreImpactType, Number weight, String message) {\n+        Number impact = getImpact();\n+        AbstractConstraint<?, ?> constraint = (AbstractConstraint<?, ?>) getParentConstraintVerifier().getConstraint();\n+        // Null means we're just looking for any kind of penalty or an impact.\n+        boolean isCorrectImpactType = scoreImpactType == null || scoreImpactType == constraint.getScoreImpactType();\n+        if (isCorrectImpactType && weight.equals(impact)) {\n+            return;\n+        }\n+        String constraintId = constraint.getConstraintId();\n+        String assertionMessage = getAssertionErrorMessage(scoreImpactType, weight, constraint.getScoreImpactType(),\n+                impact, constraintId, message);\n+        throw new AssertionError(assertionMessage);\n+    }\n+\n+    private static String getAssertionErrorMessage(ScoreImpactType expectedImpactType, Number expectedImpact,\n+            ScoreImpactType actualImpactType, Number actualImpact, String constraintId, String message) {\n+        boolean hasMessage = message != null;\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); PrintStream printStream = new PrintStream(baos)) {\n+            String preformattedMessage = \"Broken expectation.%n\" +\n+                    \"%18s: %s%n\" +\n+                    (hasMessage ? \"%18s: %s%n\" : \"\") +\n+                    \"%18s: %s (%s)%n\" +\n+                    \"%18s: %s (%s)\";\n+            String expectedImpactLabel = \"Expected \" + getImpactTypeLabel(expectedImpactType);\n+            String actualImpactLabel = \"Actual \" + getImpactTypeLabel(actualImpactType);\n+            if (hasMessage) {\n+                printStream.printf(preformattedMessage,\n+                        \"Message\", message,\n+                        \"Constraint\", constraintId,\n+                        expectedImpactLabel, expectedImpact, expectedImpact.getClass(),\n+                        actualImpactLabel, actualImpact, actualImpact.getClass());\n+\n+            } else {\n+                printStream.printf(preformattedMessage,\n+                        \"Constraint\", constraintId,\n+                        expectedImpactLabel, expectedImpact, expectedImpact.getClass(),\n+                        actualImpactLabel, actualImpact, actualImpact.getClass());\n+            }\n+            return baos.toString();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Failed assembling asserting message.\", e);\n+        }\n+    }\n+\n+    private static String getImpactTypeLabel(ScoreImpactType scoreImpactType) {\n+        switch (scoreImpactType) {", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "chunk": "diff --git a/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/SingleConstraintAssertion.java b/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/SingleConstraintAssertion.java\nindex 61c1e1e2a..a54551028 100644\n--- a/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/SingleConstraintAssertion.java\n+++ b/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/stream/SingleConstraintAssertion.java\n\n@@ -112,46 +112,46 @@ public final class SingleConstraintAssertion<Solution_> extends AbstractAssertio\n      * @param message optional description of the scenario being asserted\n      * @throws AssertionError when the expected penalty is not observed\n      */\n-    public void expectPenalty(int matchWeightTotal, String message) {\n+    public void penalizesBy(int matchWeightTotal, String message) {\n         assertCorrectMatchWeight(matchWeightTotal);\n         assertImpact(ScoreImpactType.PENALTY, matchWeightTotal, message);\n     }\n \n     /**\n-     * As defined by {@link #expectPenalty(int, String)}.\n+     * As defined by {@link #penalizesBy(int, String)}.\n      */\n-    public void expectPenalty(long matchWeightTotal, String message) {\n+    public void penalizesBy(long matchWeightTotal, String message) {\n         assertCorrectMatchWeight(matchWeightTotal);\n         assertImpact(ScoreImpactType.PENALTY, matchWeightTotal, message);\n     }\n \n     /**\n-     * As defined by {@link #expectPenalty(int, String)}.\n+     * As defined by {@link #penalizesBy(int, String)}.\n      */\n-    public void expectPenalty(BigDecimal matchWeightTotal, String message) {\n+    public void penalizesBy(BigDecimal matchWeightTotal, String message) {\n         assertCorrectMatchWeight(matchWeightTotal);\n         assertImpact(ScoreImpactType.PENALTY, matchWeightTotal, message);\n     }\n \n     /**\n-     * As defined by {@link #expectPenalty(int, String)} with a null message.\n+     * As defined by {@link #penalizesBy(int, String)} with a null message.\n      */\n-    public void expectPenalty(int matchWeightTotal) {\n-        expectPenalty(matchWeightTotal, null);\n+    public void penalizesBy(int matchWeightTotal) {\n+        penalizesBy(matchWeightTotal, null);\n     }\n \n     /**\n-     * As defined by {@link #expectPenalty(int, String)} with a null message.\n+     * As defined by {@link #penalizesBy(int, String)} with a null message.\n      */\n-    public void expectPenalty(long matchWeightTotal) {\n-        expectPenalty(matchWeightTotal, null);\n+    public void penalizesBy(long matchWeightTotal) {\n+        penalizesBy(matchWeightTotal, null);\n     }\n \n     /**\n-     * As defined by {@link #expectPenalty(int, String)} with a null message.\n+     * As defined by {@link #penalizesBy(int, String)} with a null message.\n      */\n-    public void expectPenalty(BigDecimal matchWeightTotal) {\n-        expectPenalty(matchWeightTotal, null);\n+    public void penalizesBy(BigDecimal matchWeightTotal) {\n+        penalizesBy(matchWeightTotal, null);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1MDkwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399350905", "bodyText": "Why BendableScoreDefinition.java has getOne() that returns Number, while HardSoftScoreDefinition.java has getOneSoftestScore() that returns Score?\nI'd prefer them all to just have getOneSoftestScore() that returns Score and avoid any levelNumbers magic.\n(LevelNumbers are error prone.)", "author": "ge0ffrey", "createdAt": "2020-03-27T15:32:24Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/bendable/BendableScoreDefinition.java", "diffHunk": "@@ -44,6 +44,11 @@ public BendableScore getZeroScore() {\n         return BendableScore.zero(hardLevelsSize, softLevelsSize);\n     }\n \n+    @Override\n+    protected Number getOne() {\n+        return 1;", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d44021dbf47a30d22048bb4e0b1b21c8094672d", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/bendable/BendableScoreDefinition.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/bendable/BendableScoreDefinition.java\nindex bcba8dc1e..a27307c45 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/bendable/BendableScoreDefinition.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/bendable/BendableScoreDefinition.java\n\n@@ -45,8 +45,8 @@ public class BendableScoreDefinition extends AbstractBendableScoreDefinition<Ben\n     }\n \n     @Override\n-    protected Number getOne() {\n-        return 1;\n+    public final BendableScore getOneSoftestScore() {\n+        return BendableScore.ofSoft(hardLevelsSize, softLevelsSize, softLevelsSize - 1, 1);\n     }\n \n     @Override\n"}}, {"oid": "20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "url": "https://github.com/kiegroup/optaplanner/commit/20dffd0d88d08a40f4db8986a4eaa3a5237f7124", "message": "Finalized naming", "committedDate": "2020-03-27T15:50:18Z", "type": "commit"}, {"oid": "6496855791688757779b6ffb485f4db6f3aedebb", "url": "https://github.com/kiegroup/optaplanner/commit/6496855791688757779b6ffb485f4db6f3aedebb", "message": "Constraint verifier gets its own API package", "committedDate": "2020-03-27T15:51:01Z", "type": "commit"}, {"oid": "05943bcbe281f3739e63d868da67ac2b85b22a6e", "url": "https://github.com/kiegroup/optaplanner/commit/05943bcbe281f3739e63d868da67ac2b85b22a6e", "message": "optaplanner-test gets an API package", "committedDate": "2020-03-27T15:55:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NzkwNw==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399367907", "bodyText": "I recommend avoid toLevelNumbers if possible.\nSo I'd assert that getZeroScore equals BendableScore.of(new int[]{0}, new int[]{0, 0})", "author": "ge0ffrey", "createdAt": "2020-03-27T15:56:41Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/bendablebigdecimal/BendableBigDecimalScoreDefinitionTest.java", "diffHunk": "@@ -21,10 +21,24 @@\n import org.junit.Test;\n import org.optaplanner.core.api.score.buildin.bendablebigdecimal.BendableBigDecimalScore;\n \n-import static org.junit.Assert.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n \n public class BendableBigDecimalScoreDefinitionTest {\n \n+    @Test\n+    public void getZeroScore() {\n+        BendableBigDecimalScore score = new BendableBigDecimalScoreDefinition(1, 2).getZeroScore();\n+        assertThat(score.toLevelNumbers()).containsOnly(BigDecimal.ZERO);", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d44021dbf47a30d22048bb4e0b1b21c8094672d", "chunk": "diff --git a/optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/bendablebigdecimal/BendableBigDecimalScoreDefinitionTest.java b/optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/bendablebigdecimal/BendableBigDecimalScoreDefinitionTest.java\nindex 688d443e5..281dc57fb 100644\n--- a/optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/bendablebigdecimal/BendableBigDecimalScoreDefinitionTest.java\n+++ b/optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/bendablebigdecimal/BendableBigDecimalScoreDefinitionTest.java\n\n@@ -30,13 +30,14 @@ public class BendableBigDecimalScoreDefinitionTest {\n     @Test\n     public void getZeroScore() {\n         BendableBigDecimalScore score = new BendableBigDecimalScoreDefinition(1, 2).getZeroScore();\n-        assertThat(score.toLevelNumbers()).containsOnly(BigDecimal.ZERO);\n+        assertThat(score).isEqualTo(BendableBigDecimalScore.zero(1, 2));\n     }\n \n     @Test\n     public void getSoftestOneScore() {\n         BendableBigDecimalScore score = new BendableBigDecimalScoreDefinition(1, 2).getOneSoftestScore();\n-        assertThat(score.toLevelNumbers()).containsExactly(BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ONE);\n+        assertThat(score).isEqualTo(BendableBigDecimalScore.of(new BigDecimal[] {BigDecimal.ZERO},\n+                new BigDecimal[] {BigDecimal.ZERO, BigDecimal.ONE}));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2OTM5Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399369392", "bodyText": "code style: \"0.0\" instead of \"0d\"", "author": "ge0ffrey", "createdAt": "2020-03-27T15:58:47Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/hardsoftdouble/HardSoftDoubleScoreDefinitionTest.java", "diffHunk": "@@ -21,10 +21,24 @@\n import org.optaplanner.core.config.score.trend.InitializingScoreTrendLevel;\n import org.optaplanner.core.impl.score.trend.InitializingScoreTrend;\n \n-import static org.junit.Assert.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n \n public class HardSoftDoubleScoreDefinitionTest {\n \n+    @Test\n+    public void getZeroScore() {\n+        HardSoftDoubleScore score = new HardSoftDoubleScoreDefinition().getZeroScore();\n+        assertThat(score.toLevelNumbers()).containsOnly(0d);", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d44021dbf47a30d22048bb4e0b1b21c8094672d", "chunk": "diff --git a/optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/hardsoftdouble/HardSoftDoubleScoreDefinitionTest.java b/optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/hardsoftdouble/HardSoftDoubleScoreDefinitionTest.java\nindex f668e428f..3118ebf93 100644\n--- a/optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/hardsoftdouble/HardSoftDoubleScoreDefinitionTest.java\n+++ b/optaplanner-core/src/test/java/org/optaplanner/core/impl/score/buildin/hardsoftdouble/HardSoftDoubleScoreDefinitionTest.java\n\n@@ -30,13 +30,13 @@ public class HardSoftDoubleScoreDefinitionTest {\n     @Test\n     public void getZeroScore() {\n         HardSoftDoubleScore score = new HardSoftDoubleScoreDefinition().getZeroScore();\n-        assertThat(score.toLevelNumbers()).containsOnly(0d);\n+        assertThat(score).isEqualTo(HardSoftDoubleScore.ZERO);\n     }\n \n     @Test\n     public void getSoftestOneScore() {\n         HardSoftDoubleScore score = new HardSoftDoubleScoreDefinition().getOneSoftestScore();\n-        assertThat(score.toLevelNumbers()).containsExactly(0d, 1d);\n+        assertThat(score).isEqualTo(HardSoftDoubleScore.ONE_SOFT);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3MDcwMA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399370700", "bodyText": "add new method XStreamSolutionFileIO.read(InputStream) and use that instead of writing a temp file.", "author": "ge0ffrey", "createdAt": "2020-03-27T16:00:39Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.nqueens.solver.score;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.examples.nqueens.domain.Column;\n+import org.optaplanner.examples.nqueens.domain.NQueens;\n+import org.optaplanner.examples.nqueens.domain.Queen;\n+import org.optaplanner.examples.nqueens.domain.Row;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n+import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+\n+public class NQueensConstraintProviderTest {\n+\n+    private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+\n+    private final Row row1 = new Row(0);\n+    private final Row row2 = new Row(1);\n+    private final Row row3 = new Row(2);\n+    private final Column column1 = new Column(0);\n+    private final Column column2 = new Column(1);\n+    private final Column column3 = new Column(2);\n+\n+    @Test\n+    public void noHorizontalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2)\n+                .expectPenalty(1);\n+    }\n+\n+    @Test\n+    public void horizontalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row1, column2);\n+        Queen queen3 = new Queen(2, row1, column3);\n+        constraintVerifier.forConstraint(constraintProvider::horizontalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectPenalty(3);\n+    }\n+\n+    @Test\n+    public void noAscendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column2);\n+        Queen queen2 = new Queen(1, row2, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectPenalty(1);\n+    }\n+\n+    @Test\n+    public void ascendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column3);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column1);\n+        constraintVerifier.forConstraint(constraintProvider::ascendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectPenalty(3);\n+    }\n+\n+    @Test\n+    public void noDescendingDiagonalConflictWithOneQueen() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1)\n+                .expectNoImpact();\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithTwoQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2)\n+                .expectPenalty(1);\n+    }\n+\n+    @Test\n+    public void descendingDiagonalConflictWithThreeQueens() {\n+        Queen queen1 = new Queen(0, row1, column1);\n+        Queen queen2 = new Queen(1, row2, column2);\n+        Queen queen3 = new Queen(2, row3, column3);\n+        constraintVerifier.forConstraint(constraintProvider::descendingDiagonalConflict)\n+                .given(queen1, queen2, queen3)\n+                .expectPenalty(3);\n+    }\n+\n+    private NQueens readSolution(String resource) throws IOException {\n+        Path tempFile = Files.createTempFile(\"optaplanner-test\", \"xml\");\n+        try (InputStreamReader inputStreamReader =\n+                new InputStreamReader(NQueensConstraintProviderTest.class.getResourceAsStream(resource))) {\n+            List<String> lines = IOUtils.readLines(inputStreamReader);\n+            Files.write(tempFile,lines);\n+            final SolutionFileIO<NQueens> solutionFileIO = new XStreamSolutionFileIO<>(NQueens.class);", "originalCommit": "4d153e00aed7c2aefe45f3436e7720035b816db8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9f20a6903525a8aaec32c3143644b96f1078e70", "chunk": "diff --git a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\nindex baa5b140d..646e7200d 100644\n--- a/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n+++ b/optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/score/NQueensConstraintProviderTest.java\n\n@@ -31,12 +31,12 @@ import org.optaplanner.examples.nqueens.domain.Queen;\n import org.optaplanner.examples.nqueens.domain.Row;\n import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;\n-import org.optaplanner.test.impl.score.stream.ConstraintVerifier;\n+import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n \n public class NQueensConstraintProviderTest {\n \n     private final NQueensConstraintProvider constraintProvider = new NQueensConstraintProvider();\n-    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.using(NQueens.class, Queen.class);\n+    private final ConstraintVerifier<NQueens> constraintVerifier = ConstraintVerifier.build(NQueens.class, Queen.class);\n \n     private final Row row1 = new Row(0);\n     private final Row row2 = new Row(1);\n"}}, {"oid": "d9f20a6903525a8aaec32c3143644b96f1078e70", "url": "https://github.com/kiegroup/optaplanner/commit/d9f20a6903525a8aaec32c3143644b96f1078e70", "message": "Fix exception message", "committedDate": "2020-03-27T16:08:48Z", "type": "commit"}, {"oid": "47da4eca4f9853f4825b6bc1cf360a189ad8e516", "url": "https://github.com/kiegroup/optaplanner/commit/47da4eca4f9853f4825b6bc1cf360a189ad8e516", "message": "Simpler solution file IO", "committedDate": "2020-03-27T16:15:14Z", "type": "commit"}, {"oid": "9e6d50be05a1a56dad9072ae808d8785fe310201", "url": "https://github.com/kiegroup/optaplanner/commit/9e6d50be05a1a56dad9072ae808d8785fe310201", "message": "Rename resource", "committedDate": "2020-03-27T16:16:55Z", "type": "commit"}, {"oid": "1d44021dbf47a30d22048bb4e0b1b21c8094672d", "url": "https://github.com/kiegroup/optaplanner/commit/1d44021dbf47a30d22048bb4e0b1b21c8094672d", "message": "Better score creation and testing", "committedDate": "2020-03-27T16:35:26Z", "type": "commit"}, {"oid": "8669c52038b515d6c57b7a33f8251c9f0a24d14d", "url": "https://github.com/kiegroup/optaplanner/commit/8669c52038b515d6c57b7a33f8251c9f0a24d14d", "message": "Remove raw type", "committedDate": "2020-03-27T17:00:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0NTcyNA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399445724", "bodyText": "code style: space before (", "author": "ge0ffrey", "createdAt": "2020-03-27T17:59:00Z", "path": "optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java", "diffHunk": "@@ -61,11 +62,19 @@ public String getInputFileExtension() {\n \n     @Override\n     public Solution_ read(File inputSolutionFile) {\n+        try(InputStream inputSolutionStream = Files.newInputStream(inputSolutionFile.toPath())) {", "originalCommit": "8669c52038b515d6c57b7a33f8251c9f0a24d14d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10c0ad57335a5dd0e8d48177d87badeac7708c57", "chunk": "diff --git a/optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java b/optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java\nindex da7c33577..92d85372d 100644\n--- a/optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java\n+++ b/optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java\n\n@@ -62,16 +63,16 @@ public class XStreamSolutionFileIO<Solution_> implements SolutionFileIO<Solution\n \n     @Override\n     public Solution_ read(File inputSolutionFile) {\n-        try(InputStream inputSolutionStream = Files.newInputStream(inputSolutionFile.toPath())) {\n+        try (InputStream inputSolutionStream = Files.newInputStream(inputSolutionFile.toPath())) {\n             return read(inputSolutionStream);\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             throw new IllegalArgumentException(\"Failed reading inputSolutionFile (\" + inputSolutionFile + \").\", e);\n         }\n     }\n \n     public Solution_ read(InputStream inputSolutionStream) {\n         // xStream.fromXml(InputStream) does not use UTF-8\n-        try (Reader reader = new InputStreamReader(inputSolutionStream, \"UTF-8\")) {\n+        try (Reader reader = new InputStreamReader(inputSolutionStream, StandardCharsets.UTF_8)) {\n             return (Solution_) xStream.fromXML(reader);\n         } catch (XStreamException | IOException e) {\n             throw new IllegalArgumentException(\"Failed reading inputSolutionStream.\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0ODgyMg==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399448822", "bodyText": "This one is serious: if there an XStreamException or an IOException during read(InputStream), the error message won't mention the inputSolutionFile, which is important as a breadcrumb (to figure out what 's wrong for the user).\nWhy? that read(InputStream) throws an IllegalSargumentException and that isn't caught.\nxstream exceptions are very common btw. Either invalid xml or  that has a  (there is no XSD).\nThinking further:\nif there is such an xml parsing or element nesting error for an resource (not file), then we still want the resource name.\nSuggestion to fix all of this:\n\nDon't add read(InputStream(). Add readResource(String resource) instead. That also decreases the boilerplate in the NQueensCosntraintProviderTest", "author": "ge0ffrey", "createdAt": "2020-03-27T18:04:25Z", "path": "optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java", "diffHunk": "@@ -61,11 +62,19 @@ public String getInputFileExtension() {\n \n     @Override\n     public Solution_ read(File inputSolutionFile) {\n+        try(InputStream inputSolutionStream = Files.newInputStream(inputSolutionFile.toPath())) {\n+            return read(inputSolutionStream);\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"Failed reading inputSolutionFile (\" + inputSolutionFile + \").\", e);", "originalCommit": "8669c52038b515d6c57b7a33f8251c9f0a24d14d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10c0ad57335a5dd0e8d48177d87badeac7708c57", "chunk": "diff --git a/optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java b/optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java\nindex da7c33577..92d85372d 100644\n--- a/optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java\n+++ b/optaplanner-persistence/optaplanner-persistence-xstream/src/main/java/org/optaplanner/persistence/xstream/impl/domain/solution/XStreamSolutionFileIO.java\n\n@@ -62,16 +63,16 @@ public class XStreamSolutionFileIO<Solution_> implements SolutionFileIO<Solution\n \n     @Override\n     public Solution_ read(File inputSolutionFile) {\n-        try(InputStream inputSolutionStream = Files.newInputStream(inputSolutionFile.toPath())) {\n+        try (InputStream inputSolutionStream = Files.newInputStream(inputSolutionFile.toPath())) {\n             return read(inputSolutionStream);\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             throw new IllegalArgumentException(\"Failed reading inputSolutionFile (\" + inputSolutionFile + \").\", e);\n         }\n     }\n \n     public Solution_ read(InputStream inputSolutionStream) {\n         // xStream.fromXml(InputStream) does not use UTF-8\n-        try (Reader reader = new InputStreamReader(inputSolutionStream, \"UTF-8\")) {\n+        try (Reader reader = new InputStreamReader(inputSolutionStream, StandardCharsets.UTF_8)) {\n             return (Solution_) xStream.fromXML(reader);\n         } catch (XStreamException | IOException e) {\n             throw new IllegalArgumentException(\"Failed reading inputSolutionStream.\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MDQ5MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399450491", "bodyText": "Mind renaming V to Verifier_ and A to Assertion_?\nDo we really need this Foo<F extends Foo? I did that for Score and I regret it.\nDo we really need types A and V?\nOk to see this merges already as is and discuss on master.", "author": "ge0ffrey", "createdAt": "2020-03-27T18:07:33Z", "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/AbstractAssertion.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.api.score.stream;\n+\n+public abstract class AbstractAssertion<Solution_, A extends AbstractAssertion<Solution_, A, V>, V\n+        extends AbstractConstraintVerifier<Solution_, A, V>> {", "originalCommit": "8669c52038b515d6c57b7a33f8251c9f0a24d14d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10c0ad57335a5dd0e8d48177d87badeac7708c57", "chunk": "diff --git a/optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/AbstractAssertion.java b/optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/AbstractAssertion.java\nindex 8ae04818f..c07062ada 100644\n--- a/optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/AbstractAssertion.java\n+++ b/optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/AbstractAssertion.java\n\n@@ -16,16 +16,16 @@\n \n package org.optaplanner.test.api.score.stream;\n \n-public abstract class AbstractAssertion<Solution_, A extends AbstractAssertion<Solution_, A, V>, V\n-        extends AbstractConstraintVerifier<Solution_, A, V>> {\n+public abstract class AbstractAssertion<Solution_, Assertion extends AbstractAssertion<Solution_, Assertion, Verifier>,\n+        Verifier extends AbstractConstraintVerifier<Solution_, Assertion, Verifier>> {\n \n-    private final V parentConstraintVerifier;\n+    private final Verifier parentConstraintVerifier;\n \n-    protected AbstractAssertion(V constraintVerifier) {\n+    protected AbstractAssertion(Verifier constraintVerifier) {\n         this.parentConstraintVerifier = constraintVerifier;\n     }\n \n-    protected final V getParentConstraintVerifier() {\n+    protected final Verifier getParentConstraintVerifier() {\n         return parentConstraintVerifier;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MTQxNA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399451414", "bodyText": "Can do withConstraintStreamImplType(ConstraintStreamImplType constraintStreamImplType) like ScoreDirectorFactoryConfig#withConstraintStreamImplType instead?", "author": "ge0ffrey", "createdAt": "2020-03-27T18:09:05Z", "path": "optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.test.api.score.stream;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.ConstraintStreamImplType;\n+import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public final class ConstraintVerifier<Solution_> {\n+\n+    private final SolutionDescriptor<Solution_> solutionDescriptor;\n+    private ConstraintStreamImplType constraintStreamImplType = ConstraintStreamImplType.DROOLS;\n+\n+    private ConstraintVerifier(SolutionDescriptor<Solution_> solutionDescriptor) {\n+        this.solutionDescriptor = solutionDescriptor;\n+    }\n+\n+    /**\n+     * Entry point to the API.\n+     *\n+     * @param planningSolutionClass never null, {@link PlanningSolution}-annotated class associated with the constraints\n+     * @param firstPlanningEntityClass never null, {@link PlanningEntity} used by the {@link PlanningSolution}\n+     * @param otherPlanningEntityClasses optional, extra entity classes if {@link PlanningSolution} uses more than one\n+     * @param <Solution_> type of the {@link PlanningSolution}-annotated class\n+     * @return never null\n+     */\n+    public static <Solution_> ConstraintVerifier<Solution_> build(Class<Solution_> planningSolutionClass,\n+            Class<?> firstPlanningEntityClass, Class<?>... otherPlanningEntityClasses) {\n+        Class[] entityClasses = Stream.concat(Stream.of(requireNonNull(firstPlanningEntityClass)),\n+                Stream.of(otherPlanningEntityClasses))\n+                .toArray(Class[]::new);\n+        SolutionDescriptor<Solution_> solutionDescriptor =\n+                SolutionDescriptor.buildSolutionDescriptor(requireNonNull(planningSolutionClass), entityClasses);\n+        return new ConstraintVerifier<>(solutionDescriptor);\n+    }\n+\n+    SolutionDescriptor<Solution_> getSolutionDescriptor() {\n+        return solutionDescriptor;\n+    }\n+\n+    /**\n+     * All subsequent calls to {@link #verifyThat(Function)} and {@link #verifyThat(ConstraintProvider)}\n+     * will use {@link ConstraintStreamImplType#BAVET} instead of the default {@link ConstraintStreamImplType#DROOLS}.\n+     * @return this\n+     */\n+    public ConstraintVerifier<Solution_> useBavet() {", "originalCommit": "8669c52038b515d6c57b7a33f8251c9f0a24d14d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MTY2NA==", "url": "https://github.com/kiegroup/optaplanner/pull/713#discussion_r399451664", "bodyText": "Consistency + gives us the freedom to switch the default (both on verifier and on the Scoredirectorconfig at the same time!) if we ever would wanted to.", "author": "ge0ffrey", "createdAt": "2020-03-27T18:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MTQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "10c0ad57335a5dd0e8d48177d87badeac7708c57", "chunk": "diff --git a/optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java b/optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java\nindex 6d875fe30..ce9fb8536 100644\n--- a/optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java\n+++ b/optaplanner-test/src/main/java/org/optaplanner/test/api/score/stream/ConstraintVerifier.java\n\n@@ -40,7 +40,6 @@ public final class ConstraintVerifier<Solution_> {\n \n     /**\n      * Entry point to the API.\n-     *\n      * @param planningSolutionClass never null, {@link PlanningSolution}-annotated class associated with the constraints\n      * @param firstPlanningEntityClass never null, {@link PlanningEntity} used by the {@link PlanningSolution}\n      * @param otherPlanningEntityClasses optional, extra entity classes if {@link PlanningSolution} uses more than one\n"}}, {"oid": "10c0ad57335a5dd0e8d48177d87badeac7708c57", "url": "https://github.com/kiegroup/optaplanner/commit/10c0ad57335a5dd0e8d48177d87badeac7708c57", "message": "Finishing touches", "committedDate": "2020-03-27T18:27:41Z", "type": "commit"}]}