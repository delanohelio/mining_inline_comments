{"pr_number": 789, "pr_title": "PLANNER-1987, PLANNER-1575 More deprecations", "pr_createdAt": "2020-05-25T10:26:36Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/789", "timeline": [{"oid": "560bcb1a46c3d9f9ae95f33de6814dc6cc7676d7", "url": "https://github.com/kiegroup/optaplanner/commit/560bcb1a46c3d9f9ae95f33de6814dc6cc7676d7", "message": "isCompatibleArithmeticArgument() moved to ScoreDefinition", "committedDate": "2020-05-25T08:31:30Z", "type": "commit"}, {"oid": "e2a1d3c360a6de9b9439f1575304f24441e3b459", "url": "https://github.com/kiegroup/optaplanner/commit/e2a1d3c360a6de9b9439f1575304f24441e3b459", "message": "Deprecate generateDroolsTestOnError", "committedDate": "2020-05-25T09:00:22Z", "type": "commit"}, {"oid": "cdb6660c0e4970426bb4f190665fc0745fc98c9c", "url": "https://github.com/kiegroup/optaplanner/commit/cdb6660c0e4970426bb4f190665fc0745fc98c9c", "message": "pinningFilter replaces movableEntitySelectionFilter", "committedDate": "2020-05-25T10:03:37Z", "type": "commit"}, {"oid": "3ad8493b305c0cfdee058bb2122e5c5a10d80a37", "url": "https://github.com/kiegroup/optaplanner/commit/3ad8493b305c0cfdee058bb2122e5c5a10d80a37", "message": "reinitializeVariable... deprecated", "committedDate": "2020-05-25T10:17:53Z", "type": "commit"}, {"oid": "c5bc83db98c97b4b157294d48b386dcc4875235a", "url": "https://github.com/kiegroup/optaplanner/commit/c5bc83db98c97b4b157294d48b386dcc4875235a", "message": "Revapi", "committedDate": "2020-05-25T10:53:10Z", "type": "commit"}, {"oid": "53fcc36cfde686ea83f7986a8e6fa242254ebae2", "url": "https://github.com/kiegroup/optaplanner/commit/53fcc36cfde686ea83f7986a8e6fa242254ebae2", "message": "Fix benchmarker tests", "committedDate": "2020-05-25T11:15:12Z", "type": "commit"}, {"oid": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "url": "https://github.com/kiegroup/optaplanner/commit/27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "message": "Fix examples tests", "committedDate": "2020-05-25T11:40:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MTAwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429891005", "bodyText": "I have to say... I don't like the fact that, in order to filter moves in selectors, users need to implement this interface.\nIdeally, I'd like ScoreDirector to be an implementation detail. Yet, it keeps leaking.", "author": "triceo", "createdAt": "2020-05-25T11:44:43Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/nurserostering/domain/solver/MovableShiftAssignmentSelectionFilter.java", "diffHunk": "@@ -17,16 +17,19 @@\n package org.optaplanner.examples.nurserostering.domain.solver;\n \n import org.optaplanner.core.api.domain.entity.PinningFilter;\n+import org.optaplanner.core.impl.heuristic.selector.common.decorator.SelectionFilter;\n+import org.optaplanner.core.impl.score.director.ScoreDirector;\n import org.optaplanner.examples.nurserostering.domain.NurseRoster;\n import org.optaplanner.examples.nurserostering.domain.ShiftAssignment;\n-import org.optaplanner.examples.nurserostering.domain.ShiftDate;\n \n-public class MovableShiftAssignmentSelectionFilter implements PinningFilter<NurseRoster, ShiftAssignment> {\n+public class MovableShiftAssignmentSelectionFilter implements SelectionFilter<NurseRoster, ShiftAssignment> {", "originalCommit": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MzE0Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429943146", "bodyText": "Yea, sounds like maybe SelectionFilter, instead of creating a new type of Filter like PinningFilter that doesn't work on moves (and shouldn't due to naming).", "author": "ge0ffrey", "createdAt": "2020-05-25T13:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MTAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f909135b0352c350dea66a3c8ac475418861312a", "chunk": "diff --git a/optaplanner-examples/src/main/java/org/optaplanner/examples/nurserostering/domain/solver/MovableShiftAssignmentSelectionFilter.java b/optaplanner-examples/src/main/java/org/optaplanner/examples/nurserostering/domain/solver/MovableShiftAssignmentSelectionFilter.java\nindex 6302637085..e0bc725789 100644\n--- a/optaplanner-examples/src/main/java/org/optaplanner/examples/nurserostering/domain/solver/MovableShiftAssignmentSelectionFilter.java\n+++ b/optaplanner-examples/src/main/java/org/optaplanner/examples/nurserostering/domain/solver/MovableShiftAssignmentSelectionFilter.java\n\n@@ -29,7 +29,7 @@ public class MovableShiftAssignmentSelectionFilter implements SelectionFilter<Nu\n \n     @Override\n     public boolean accept(ScoreDirector<NurseRoster> scoreDirector, ShiftAssignment selection) {\n-        return pinningFilter.accept(scoreDirector.getWorkingSolution(), selection);\n+        return !pinningFilter.accept(scoreDirector.getWorkingSolution(), selection);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMTQ4MA==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429931480", "bodyText": "Are we sure about this?\nMost users don't know about ScoreDefinition.\nThis means most users can never use a ResilientScoreComparator.\nBut on the other hand, I presume they will never need it, so it's fine?", "author": "ge0ffrey", "createdAt": "2020-05-25T13:20:56Z", "path": "optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/ranking/ResilientScoreComparator.java", "diffHunk": "@@ -20,11 +20,18 @@\n import java.util.Comparator;\n \n import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n \n /**\n  * Able to compare {@link Score}s of different types or nulls.\n  */\n-public class ResilientScoreComparator implements Comparator<Score>, Serializable {\n+final class ResilientScoreComparator implements Comparator<Score>, Serializable {\n+\n+    private final ScoreDefinition aScoreDefinition;\n+\n+    public ResilientScoreComparator(ScoreDefinition aScoreDefinition) {", "originalCommit": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0NjA5Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429946097", "bodyText": "This is no longer a public class. And even before now, it was not in public API.\nWe are fine.", "author": "triceo", "createdAt": "2020-05-25T13:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMTQ4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMzk1NA==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429933954", "bodyText": "\"an immovable\" => \"a pinned\"", "author": "ge0ffrey", "createdAt": "2020-05-25T13:26:14Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.domain.entity;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.impl.heuristic.move.Move;\n+\n+/**\n+ * Decides on accepting or discarding a {@link PlanningEntity}.\n+ * An immovable {@link PlanningEntity} is rejected and therefore never used in a {@link Move}.", "originalCommit": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f909135b0352c350dea66a3c8ac475418861312a", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\nindex 03e561750a..5457bd1275 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\n\n@@ -21,7 +21,7 @@ import org.optaplanner.core.impl.heuristic.move.Move;\n \n /**\n  * Decides on accepting or discarding a {@link PlanningEntity}.\n- * An immovable {@link PlanningEntity} is rejected and therefore never used in a {@link Move}.\n+ * A pinned {@link PlanningEntity} is never used in a {@link Move}.\n  *\n  * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n  * @param <T> the entity type\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNDkyMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429934921", "bodyText": "true if the entity's planning variables can change, false if the entity is pinned\n@triceo Red flag. accept() returns false if the entity is pinned in an interface called PinningFilter. this is a serious issue.", "author": "ge0ffrey", "createdAt": "2020-05-25T13:28:17Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.domain.entity;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.impl.heuristic.move.Move;\n+\n+/**\n+ * Decides on accepting or discarding a {@link PlanningEntity}.\n+ * An immovable {@link PlanningEntity} is rejected and therefore never used in a {@link Move}.\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ * @param <T> the entity type\n+ */\n+public interface PinningFilter<Solution_, T> {\n+\n+    /**\n+     * @param solution working solution to which the selection belongs or applies to\n+     * @param entity never null, a {@link PlanningEntity}\n+     * @return true if the entity it is movable, false if the entity is immovable", "originalCommit": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f909135b0352c350dea66a3c8ac475418861312a", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\nindex 03e561750a..5457bd1275 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\n\n@@ -21,7 +21,7 @@ import org.optaplanner.core.impl.heuristic.move.Move;\n \n /**\n  * Decides on accepting or discarding a {@link PlanningEntity}.\n- * An immovable {@link PlanningEntity} is rejected and therefore never used in a {@link Move}.\n+ * A pinned {@link PlanningEntity} is never used in a {@link Move}.\n  *\n  * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n  * @param <T> the entity type\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNTUzMg==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429935532", "bodyText": "find in path for all \"immovable\"", "author": "ge0ffrey", "createdAt": "2020-05-25T13:29:33Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PlanningEntity.java", "diffHunk": "@@ -51,13 +51,34 @@\n      * if the selection entity is immovable and it returns true if the selection entity is movable\n      *\n      * @return {@link NullMovableEntitySelectionFilter} when it is null (workaround for annotation limitation)\n+     * @deprecated in favor of {@link #pinningFilter()}.\n      */\n+    @Deprecated(/* forRemoval = true */)\n     Class<? extends SelectionFilter> movableEntitySelectionFilter() default NullMovableEntitySelectionFilter.class;\n \n     /** Workaround for annotation limitation in {@link #movableEntitySelectionFilter()}. */\n+    @Deprecated(/* forRemoval = true */)\n     interface NullMovableEntitySelectionFilter extends SelectionFilter {\n     }\n \n+    /**\n+     * An immovable planning entity is never changed during planning,\n+     * this is useful in repeated planning use cases (such as continuous planning and real-time planning).\n+     * <p>\n+     * This applies to all the planning variables of this planning entity.\n+     * To make individual variables immovable, see https://issues.redhat.com/browse/PLANNER-124", "originalCommit": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f909135b0352c350dea66a3c8ac475418861312a", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PlanningEntity.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PlanningEntity.java\nindex 99212f9ef3..3ace1fa79d 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PlanningEntity.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PlanningEntity.java\n\n@@ -41,14 +41,14 @@ import org.optaplanner.core.impl.score.director.ScoreDirector;\n public @interface PlanningEntity {\n \n     /**\n-     * An immovable planning entity is never changed during planning,\n+     * A pinned planning entity is never changed during planning,\n      * this is useful in repeated planning use cases (such as continuous planning and real-time planning).\n      * <p>\n      * This applies to all the planning variables of this planning entity.\n-     * To make individual variables immovable, see https://issues.redhat.com/browse/PLANNER-124\n+     * To pin individual variables, see https://issues.redhat.com/browse/PLANNER-124\n      * <p>\n      * The method {@link SelectionFilter#accept(ScoreDirector, Object)} returns false\n-     * if the selection entity is immovable and it returns true if the selection entity is movable\n+     * if the selection entity is pinned and it returns true if the selection entity is movable\n      *\n      * @return {@link NullMovableEntitySelectionFilter} when it is null (workaround for annotation limitation)\n      * @deprecated in favor of {@link #pinningFilter()}.\n"}}, {"oid": "ee76ec4e67c2a90078fdbbcaf6900f39b68eedbd", "url": "https://github.com/kiegroup/optaplanner/commit/ee76ec4e67c2a90078fdbbcaf6900f39b68eedbd", "message": "Pinning filter text", "committedDate": "2020-05-25T13:32:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNzIzOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429937239", "bodyText": "Can we add a comment behind it \"for what\"? Mainly as an expiration date: when we can remove this line.\nFor example:\n@SuppressWarnings(\"deprecation\") // Remove in 8.0 when it doesn't call  foo.bar() any more", "author": "ge0ffrey", "createdAt": "2020-05-25T13:33:08Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedValuePlacerConfig.java", "diffHunk": "@@ -87,6 +87,7 @@ public void setMoveSelectorConfig(MoveSelectorConfig moveSelectorConfig) {\n     // Builder methods\n     // ************************************************************************\n \n+    @SuppressWarnings(\"deprecation\")", "originalCommit": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b70530c3b00b44f3efd1f1953ef0aa0e36f5b33", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedValuePlacerConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedValuePlacerConfig.java\nindex 02ceeebdc7..5d47b19a33 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedValuePlacerConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedValuePlacerConfig.java\n\n@@ -87,7 +87,6 @@ public class QueuedValuePlacerConfig extends EntityPlacerConfig<QueuedValuePlace\n     // Builder methods\n     // ************************************************************************\n \n-    @SuppressWarnings(\"deprecation\")\n     @Override\n     public QueuedValuePlacer buildEntityPlacer(HeuristicConfigPolicy configPolicy) {\n         EntityDescriptor entityDescriptor = deduceEntityDescriptor(configPolicy.getSolutionDescriptor(), entityClass);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzODcxNA==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429938714", "bodyText": "This should be a simple setter (that is now deprecated). It shouldn't mess with the system property, in favor of which it is deprecated, because  System.setProperty() is dangerous: presume that a single JVM process runs 2 solver configs, constructed by java (not by xml) and the first one calls setGenerateDroolsTestOnError(true), but the second one doesn't. The second one would feel it too.\n=> remove that if-else block", "author": "ge0ffrey", "createdAt": "2020-05-25T13:36:16Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java", "diffHunk": "@@ -332,11 +338,24 @@ public void setAssertionScoreDirectorFactory(ScoreDirectorFactoryConfig assertio\n         this.assertionScoreDirectorFactory = assertionScoreDirectorFactory;\n     }\n \n+    /**\n+     * @deprecated for removal.\n+     */\n+    @Deprecated(/* forRemoval = true */)\n     public Boolean isGenerateDroolsTestOnError() {\n         return generateDroolsTestOnError;\n     }\n \n+    /**\n+     * @deprecated for removal.\n+     */\n+    @Deprecated(/* forRemoval = true */)\n     public void setGenerateDroolsTestOnError(Boolean generateDroolsTestOnError) {\n+        if (BooleanUtils.isTrue(generateDroolsTestOnError)) {\n+            System.setProperty(GENERATE_DROOLS_TEST_ON_ERROR_PROPERTY_NAME, \"true\");\n+        } else {\n+            System.clearProperty(GENERATE_DROOLS_TEST_ON_ERROR_PROPERTY_NAME);\n+        }\n         this.generateDroolsTestOnError = generateDroolsTestOnError;", "originalCommit": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b3d1e1d5a12cf4506d1d3779f746bf6a2ade9e7", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java\nindex 35be8a00d1..2a6ca4f18a 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java\n\n@@ -351,11 +351,6 @@ public class ScoreDirectorFactoryConfig extends AbstractConfig<ScoreDirectorFact\n      */\n     @Deprecated(/* forRemoval = true */)\n     public void setGenerateDroolsTestOnError(Boolean generateDroolsTestOnError) {\n-        if (BooleanUtils.isTrue(generateDroolsTestOnError)) {\n-            System.setProperty(GENERATE_DROOLS_TEST_ON_ERROR_PROPERTY_NAME, \"true\");\n-        } else {\n-            System.clearProperty(GENERATE_DROOLS_TEST_ON_ERROR_PROPERTY_NAME);\n-        }\n         this.generateDroolsTestOnError = generateDroolsTestOnError;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MTEzOA==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r429941138", "bodyText": "Our error messages typically have 2 lines:\n\nline 1: what is wrong. This is always truth. It doesn't say how to fix it though. Ends with \"\\n\"\nline 2 (optional): How to fix it. This isn't always the way to fix it, it is a recommendation. Therefore, it starts with \"Maybe ...\"\n\nI'd also add a breadcrumb to @PlanningEntity\n=>\n            throw new IllegalStateException(\"The entityClass (\" + entityClass\n                    + \") uses both movableEntitySelectionFilter (\" + movableEntitySelectionFilterClass +\n                    \") and pinningFilter (\" + pinningFilterClass + \").\\n\" +\n                    \"Maybe use only pinningFilterClass on your @\" + PlanningEntity.class.getSimpleName() + \" annotation.\");", "author": "ge0ffrey", "createdAt": "2020-05-25T13:41:06Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/entity/descriptor/EntityDescriptor.java", "diffHunk": "@@ -159,10 +160,27 @@ private void processEntityAnnotations(DescriptorPolicy descriptorPolicy) {\n \n     private void processMovable(DescriptorPolicy descriptorPolicy, PlanningEntity entityAnnotation) {\n         Class<? extends SelectionFilter> movableEntitySelectionFilterClass = entityAnnotation.movableEntitySelectionFilter();\n-        if (movableEntitySelectionFilterClass == PlanningEntity.NullMovableEntitySelectionFilter.class) {\n-            movableEntitySelectionFilterClass = null;\n-        }\n-        if (movableEntitySelectionFilterClass != null) {\n+        boolean hasSelectionFilter = movableEntitySelectionFilterClass != PlanningEntity.NullMovableEntitySelectionFilter.class;\n+        Class<? extends PinningFilter> pinningFilterClass = entityAnnotation.pinningFilter();\n+        boolean hasPinningFilter = pinningFilterClass != PlanningEntity.NullPinningFilter.class;\n+        if (hasPinningFilter && hasSelectionFilter) {\n+            throw new IllegalStateException(\"The entityClass (\" + entityClass\n+                    + \") uses both movableEntitySelectionFilter (\" + movableEntitySelectionFilterClass +\n+                    \") and pinningFilter (\" + pinningFilterClass + \"). \" +\n+                    \"Use pinningFilter exclusively.\");", "originalCommit": "27ccd78343cbbdfc965060cec3fe5f1c44f2e1fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f909135b0352c350dea66a3c8ac475418861312a", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/entity/descriptor/EntityDescriptor.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/entity/descriptor/EntityDescriptor.java\nindex 072cd14b88..4e451ccbc4 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/entity/descriptor/EntityDescriptor.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/entity/descriptor/EntityDescriptor.java\n\n@@ -177,7 +177,7 @@ public class EntityDescriptor<Solution_> {\n \n                 @Override\n                 public boolean accept(ScoreDirector scoreDirector, Object selection) {\n-                    return pinningFilter.accept(scoreDirector.getWorkingSolution(), selection);\n+                    return !pinningFilter.accept(scoreDirector.getWorkingSolution(), selection);\n                 }\n             };\n         } else if (hasSelectionFilter) {\n"}}, {"oid": "99dd33e25f178462185978129033c4b5697a0a0b", "url": "https://github.com/kiegroup/optaplanner/commit/99dd33e25f178462185978129033c4b5697a0a0b", "message": "ReinitializeVariable replacement", "committedDate": "2020-05-25T13:41:46Z", "type": "commit"}, {"oid": "976632f0c19138ec402013ddc98b0a1fd9157eb9", "url": "https://github.com/kiegroup/optaplanner/commit/976632f0c19138ec402013ddc98b0a1fd9157eb9", "message": "Whitespace", "committedDate": "2020-05-25T13:50:45Z", "type": "commit"}, {"oid": "71cab7ae67d4b26bca22290343fd573ea0d8e658", "url": "https://github.com/kiegroup/optaplanner/commit/71cab7ae67d4b26bca22290343fd573ea0d8e658", "message": "More whitespace fixes", "committedDate": "2020-05-25T13:53:05Z", "type": "commit"}, {"oid": "f909135b0352c350dea66a3c8ac475418861312a", "url": "https://github.com/kiegroup/optaplanner/commit/f909135b0352c350dea66a3c8ac475418861312a", "message": "No longer mention \"immovable\" entities", "committedDate": "2020-05-26T08:00:55Z", "type": "commit"}, {"oid": "851bfbfd96fc9e74e74ca385b3ede5b93a53144d", "url": "https://github.com/kiegroup/optaplanner/commit/851bfbfd96fc9e74e74ca385b3ede5b93a53144d", "message": "Typos", "committedDate": "2020-05-26T08:06:46Z", "type": "commit"}, {"oid": "8b70530c3b00b44f3efd1f1953ef0aa0e36f5b33", "url": "https://github.com/kiegroup/optaplanner/commit/8b70530c3b00b44f3efd1f1953ef0aa0e36f5b33", "message": "Remove warning suppression", "committedDate": "2020-05-26T08:11:44Z", "type": "commit"}, {"oid": "3b3d1e1d5a12cf4506d1d3779f746bf6a2ade9e7", "url": "https://github.com/kiegroup/optaplanner/commit/3b3d1e1d5a12cf4506d1d3779f746bf6a2ade9e7", "message": "Simple setter", "committedDate": "2020-05-26T08:12:37Z", "type": "commit"}, {"oid": "36739ee924130a4f93c311882fc1b6e032cdea9a", "url": "https://github.com/kiegroup/optaplanner/commit/36739ee924130a4f93c311882fc1b6e032cdea9a", "message": "Fix fail-fast", "committedDate": "2020-05-26T08:13:54Z", "type": "commit"}, {"oid": "4b5efa6b5a066a520e57c34d2f86d372953edca1", "url": "https://github.com/kiegroup/optaplanner/commit/4b5efa6b5a066a520e57c34d2f86d372953edca1", "message": "Remove legacy DSDF", "committedDate": "2020-05-26T09:51:28Z", "type": "commit"}, {"oid": "0a377823d2b209d918c257c6f911a10596e2791c", "url": "https://github.com/kiegroup/optaplanner/commit/0a377823d2b209d918c257c6f911a10596e2791c", "message": "Typo", "committedDate": "2020-05-26T09:54:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5NjQ2OA==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r430296468", "bodyText": "I wonder... shouldn't this be deprecated too? We're deprecating kieBase already.", "author": "triceo", "createdAt": "2020-05-26T09:58:54Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java", "diffHunk": "@@ -122,6 +122,10 @@\n     protected List<File> scoreDrlFileList = null;\n     @XStreamConverter(KeyAsElementMapConverter.class)\n     protected Map<String, String> kieBaseConfigurationProperties = null;", "originalCommit": "0a377823d2b209d918c257c6f911a10596e2791c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNjkyMw==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432626923", "bodyText": "I'd argue no, because they can also be used in combination with scoreDrl.\nFor example to switch that Drools property propagation from \"ALLOWED\" to \"ALWAYS\", which might perf benefits (at a very higher maitenance cost)", "author": "ge0ffrey", "createdAt": "2020-05-29T17:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5NjQ2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNTA5Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432625093", "bodyText": "(soft) Consistency with other code: Rename T to Entity_. It reads much clearer if that's the return type somewhere, or if someone needs to extend/implement this class.", "author": "ge0ffrey", "createdAt": "2020-05-29T17:13:26Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.domain.entity;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.impl.heuristic.move.Move;\n+\n+/**\n+ * Decides on accepting or discarding a {@link PlanningEntity}.\n+ * A pinned {@link PlanningEntity} is never used in a {@link Move}.\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ * @param <T> the entity type\n+ */\n+public interface PinningFilter<Solution_, T> {", "originalCommit": "0a377823d2b209d918c257c6f911a10596e2791c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1bc495f2270dc3f5920d8fd73518bf27edf386d4", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\nindex 5457bd1275..edb4828d04 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\n\n@@ -24,15 +24,15 @@ import org.optaplanner.core.impl.heuristic.move.Move;\n  * A pinned {@link PlanningEntity} is never used in a {@link Move}.\n  *\n  * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n- * @param <T> the entity type\n+ * @param <Entity_> the entity type, the class with the {@link PlanningEntity} annotation\n  */\n-public interface PinningFilter<Solution_, T> {\n+public interface PinningFilter<Solution_, Entity_> {\n \n     /**\n      * @param solution working solution to which the entity belongs\n      * @param entity never null, a {@link PlanningEntity}\n      * @return true if the entity it is pinned, false if the entity is movable.\n      */\n-    boolean accept(Solution_ solution, T entity);\n+    boolean accept(Solution_ solution, Entity_ entity);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNTkwMg==", "url": "https://github.com/kiegroup/optaplanner/pull/789#discussion_r432625902", "bodyText": "(very soft) change to:\n@param <Entity_> the entity type, the class with the {@link PlanningEntity} annotation", "author": "ge0ffrey", "createdAt": "2020-05-29T17:15:05Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.domain.entity;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.impl.heuristic.move.Move;\n+\n+/**\n+ * Decides on accepting or discarding a {@link PlanningEntity}.\n+ * A pinned {@link PlanningEntity} is never used in a {@link Move}.\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ * @param <T> the entity type", "originalCommit": "0a377823d2b209d918c257c6f911a10596e2791c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1bc495f2270dc3f5920d8fd73518bf27edf386d4", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\nindex 5457bd1275..edb4828d04 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/domain/entity/PinningFilter.java\n\n@@ -24,15 +24,15 @@ import org.optaplanner.core.impl.heuristic.move.Move;\n  * A pinned {@link PlanningEntity} is never used in a {@link Move}.\n  *\n  * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n- * @param <T> the entity type\n+ * @param <Entity_> the entity type, the class with the {@link PlanningEntity} annotation\n  */\n-public interface PinningFilter<Solution_, T> {\n+public interface PinningFilter<Solution_, Entity_> {\n \n     /**\n      * @param solution working solution to which the entity belongs\n      * @param entity never null, a {@link PlanningEntity}\n      * @return true if the entity it is pinned, false if the entity is movable.\n      */\n-    boolean accept(Solution_ solution, T entity);\n+    boolean accept(Solution_ solution, Entity_ entity);\n \n }\n"}}, {"oid": "1bc495f2270dc3f5920d8fd73518bf27edf386d4", "url": "https://github.com/kiegroup/optaplanner/commit/1bc495f2270dc3f5920d8fd73518bf27edf386d4", "message": "Address review comments", "committedDate": "2020-05-29T18:32:29Z", "type": "commit"}]}