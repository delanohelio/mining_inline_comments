{"pr_number": 649, "pr_title": "PLANNER-1684 First BiGroup operation", "pr_createdAt": "2020-01-07T08:32:27Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/649", "timeline": [{"oid": "f1bc3e362a601fe4d829e8f543a3f9733709699e", "url": "https://github.com/kiegroup/optaplanner/commit/f1bc3e362a601fe4d829e8f543a3f9733709699e", "message": "Add new API method", "committedDate": "2019-12-17T07:51:28Z", "type": "commit"}, {"oid": "d4b69fe5090da98e2f943c79893f20723f661d4a", "url": "https://github.com/kiegroup/optaplanner/commit/d4b69fe5090da98e2f943c79893f20723f661d4a", "message": "Implement the new API", "committedDate": "2019-12-17T07:51:28Z", "type": "commit"}, {"oid": "6c72e78d2fb67f8e34c52f30a8fd9bdf9236e137", "url": "https://github.com/kiegroup/optaplanner/commit/6c72e78d2fb67f8e34c52f30a8fd9bdf9236e137", "message": "Improve one example", "committedDate": "2019-12-17T07:51:29Z", "type": "commit"}, {"oid": "541606b9bf611515d95f40c1f889d53146793b01", "url": "https://github.com/kiegroup/optaplanner/commit/541606b9bf611515d95f40c1f889d53146793b01", "message": "Implement first biGroup", "committedDate": "2019-12-17T07:51:29Z", "type": "commit"}, {"oid": "ea4863839b8989f0987c8d4019ec7bceaa9a72dc", "url": "https://github.com/kiegroup/optaplanner/commit/ea4863839b8989f0987c8d4019ec7bceaa9a72dc", "message": "WIP", "committedDate": "2019-12-17T07:51:29Z", "type": "commit"}, {"oid": "69ced52421669a802d5d1a89922ff2a852860428", "url": "https://github.com/kiegroup/optaplanner/commit/69ced52421669a802d5d1a89922ff2a852860428", "message": "Add equality and sameness test for CS", "committedDate": "2019-12-17T07:51:29Z", "type": "commit"}, {"oid": "e0273d0527de8079d57f39efcd4931e156249a7f", "url": "https://github.com/kiegroup/optaplanner/commit/e0273d0527de8079d57f39efcd4931e156249a7f", "message": "Revert \"WIP\"\n\nThis reverts commit 26bdd46c", "committedDate": "2019-12-17T07:51:29Z", "type": "commit"}, {"oid": "bf73f632f53c4dbe3070fe523daf95e26b98fe89", "url": "https://github.com/kiegroup/optaplanner/commit/bf73f632f53c4dbe3070fe523daf95e26b98fe89", "message": "Fix biregrouping", "committedDate": "2019-12-17T07:51:29Z", "type": "commit"}, {"oid": "c1ac4a45fcffe3df9f3fc967eff6f81912cb2889", "url": "https://github.com/kiegroup/optaplanner/commit/c1ac4a45fcffe3df9f3fc967eff6f81912cb2889", "message": "Refactor how rules are constructed", "committedDate": "2019-12-17T07:51:30Z", "type": "commit"}, {"oid": "3dad6a1c747559d6b24b23d7d514f28526a7bb6f", "url": "https://github.com/kiegroup/optaplanner/commit/3dad6a1c747559d6b24b23d7d514f28526a7bb6f", "message": "UniRuleStructure only created from within", "committedDate": "2019-12-17T07:51:30Z", "type": "commit"}, {"oid": "4b520eb4407fd5def8c1ab56cdc8b419b78a3a21", "url": "https://github.com/kiegroup/optaplanner/commit/4b520eb4407fd5def8c1ab56cdc8b419b78a3a21", "message": "Even more rule structure unification", "committedDate": "2019-12-18T13:12:13Z", "type": "commit"}, {"oid": "718a04f4fc1df5f8580661f4ef1312b9ed5adc37", "url": "https://github.com/kiegroup/optaplanner/commit/718a04f4fc1df5f8580661f4ef1312b9ed5adc37", "message": "Add another test", "committedDate": "2020-01-04T11:56:08Z", "type": "commit"}, {"oid": "ef8f2f74780eb26e181094b0ba9b26ef80a4ce75", "url": "https://github.com/kiegroup/optaplanner/commit/ef8f2f74780eb26e181094b0ba9b26ef80a4ce75", "message": "Remove support for regrouping", "committedDate": "2020-01-07T08:27:07Z", "type": "commit"}, {"oid": "ac948fcc8a287c3b6ff2892934218511179ec985", "url": "https://github.com/kiegroup/optaplanner/commit/ac948fcc8a287c3b6ff2892934218511179ec985", "message": "Remove unimplemented methods", "committedDate": "2020-01-07T08:30:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzOTU3Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363639577", "bodyText": "Shall we immediately add the javadoc if we uncomment it?", "author": "ge0ffrey", "createdAt": "2020-01-07T08:36:28Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -195,21 +195,27 @@\n     }\n \n     // ************************************************************************\n-    // Group by (TODO implement these)\n+    // Group by\n     // ************************************************************************\n \n-    /*\n-    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(\n-            BiFunction<A, B, GroupKey_> groupKeyMapping);\n+    <GroupKey_> UniConstraintStream<GroupKey_> groupBy(BiFunction<A, B, GroupKey_> groupKeyMapping);", "originalCommit": "ac948fcc8a287c3b6ff2892934218511179ec985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MjUzOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363642539", "bodyText": "Good point, will add.", "author": "triceo", "createdAt": "2020-01-07T08:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzOTU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "73f60a0b1db48e3f8a3d0b9aa5bd856de6aa0c4d", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java\nindex ab89a93cb..a70f31572 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java\n\n@@ -198,6 +199,14 @@ public interface BiConstraintStream<A, B> extends ConstraintStream {\n     // Group by\n     // ************************************************************************\n \n+    /**\n+     * Convert the {@link BiConstraintStream} to a {@link UniConstraintStream}, containing the set of tuples resulting\n+     * from applying the group key mapping function on all tuples of the original stream. Neither tuple of the new\n+     * stream will {@link Objects#equals(Object, Object)} any other.\n+     * @param groupKeyMapping never null, mapping function to convert each element in the stream to a different element\n+     * @param <GroupKey_> the type of a fact in the destination {@link UniConstraintStream}'s tuple\n+     * @return never null\n+     */\n     <GroupKey_> UniConstraintStream<GroupKey_> groupBy(BiFunction<A, B, GroupKey_> groupKeyMapping);\n \n     /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MTIzNg==", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363641236", "bodyText": "In toString() and log messages,\nwe use \"[\" to denote lists, collections, arrays, etc.\nWe use \"(\" to denote fields.\nSo let's change this into: return \"Pair(\" + key + \", \" + value + \")\";", "author": "ge0ffrey", "createdAt": "2020-01-07T08:41:32Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/uni/DroolsValuePair.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.uni;\n+\n+import java.util.Objects;\n+\n+public final class DroolsValuePair<K,V> {\n+    public final K key;\n+    public final V value;\n+    private final int hashCode;\n+\n+    public DroolsValuePair(K key, V value) {\n+        this.key = key;\n+        this.value = value;\n+        this.hashCode = Objects.hash(key, value);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || !Objects.equals(getClass(), o.getClass())) {\n+            return false;\n+        }\n+        final DroolsValuePair<?, ?> pair = (DroolsValuePair<?, ?>) o;\n+        return Objects.equals(key, pair.key) &&\n+                Objects.equals(value, pair.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return hashCode;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Pair[\" + key + \", \" + value + \"]\";", "originalCommit": "ac948fcc8a287c3b6ff2892934218511179ec985", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "977c5845ba1a3049dd8af7bf9571fd71f27ead4e", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/uni/DroolsValuePair.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/uni/DroolsValuePair.java\nindex 279f200cb..9dcde4f86 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/uni/DroolsValuePair.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/uni/DroolsValuePair.java\n\n@@ -49,6 +49,6 @@ public final class DroolsValuePair<K,V> {\n \n     @Override\n     public String toString() {\n-        return \"Pair[\" + key + \", \" + value + \"]\";\n+        return \"Pair(\" + key + \", \" + value + \")\";\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MzUwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363643505", "bodyText": "Assorted?\nI don't like \"Assorted\"Test. It's like Drools's notorious \"Misc\"Test (and Misc2Test and Misc3Test). It's like a \"lost+find\" directory - tests that haven't been sorted yet.\nSo far, the \"where can I find it\" logic in the tests has been:\nif the final stream is a Uni stream, in the UniTest, if it's a Bi then in the BiTest, etc.\nBut if you think it makes more sense to put some of these grouping tests into a (Advanced)GroupByConstraintStreamTest, etc to avoid bloating the BiTest etc, I am ok with that.\nVeto on naming a test \"Assorted\" or \"Misc\" Test. It's too broad.", "author": "ge0ffrey", "createdAt": "2020-01-07T08:48:17Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AssortedConstraintStreamTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.api.score.stream;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.core.impl.score.director.InnerScoreDirector;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntity;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishEntityGroup;\n+import org.optaplanner.core.impl.testdata.domain.score.lavish.TestdataLavishSolution;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+\n+public class AssortedConstraintStreamTest extends AbstractConstraintStreamTest {", "originalCommit": "ac948fcc8a287c3b6ff2892934218511179ec985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDA1OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363644059", "bodyText": "Yeah, this was one of the things I was going to \"clean up later before I submit the PR.\" :-)", "author": "triceo", "createdAt": "2020-01-07T08:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0MzUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ab9a98ec56137eae65c46db49fb49f00571e6d7", "chunk": "diff --git a/optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AssortedConstraintStreamTest.java b/optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AdvancedGroupByConstraintStreamTest.java\nsimilarity index 96%\nrename from optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AssortedConstraintStreamTest.java\nrename to optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AdvancedGroupByConstraintStreamTest.java\nindex a547bcd39..3b778dc52 100644\n--- a/optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AssortedConstraintStreamTest.java\n+++ b/optaplanner-core/src/test/java/org/optaplanner/core/api/score/stream/AdvancedGroupByConstraintStreamTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDUzNg==", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363644536", "bodyText": "I am not sure if these javadocs can't be made more \"simple & clear\".\nAlso notice the big out-of-sync between the javadoc of groupBy(Function) and groupBy(Function, Collector). Those must be brought in sync as much as possible", "author": "ge0ffrey", "createdAt": "2020-01-07T08:51:06Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/uni/UniConstraintStream.java", "diffHunk": "@@ -197,8 +197,8 @@\n             UniConstraintCollector<A, ResultContainer_, Result_> collector);\n \n     /**\n-     * Convert the {@link UniConstraintStream} to a different {@link UniConstraintStream}, containing of the set of\n-     * tuples resulting from applying the group key mapping function on all tuples of the original stream.\n+     * Convert the {@link UniConstraintStream} to a different {@link UniConstraintStream}, containing the set of tuples\n+     * resulting from applying the group key mapping function on all tuples of the original stream.\n      * Neither tuple of the new stream will {@link Objects#equals(Object, Object)} any other.", "originalCommit": "ac948fcc8a287c3b6ff2892934218511179ec985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDg4Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/649#discussion_r363644887", "bodyText": "We should improve these (if possible), before copy-pasting it into the other streams cardinalities.", "author": "ge0ffrey", "createdAt": "2020-01-07T08:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0NDUzNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "977c5845ba1a3049dd8af7bf9571fd71f27ead4e", "url": "https://github.com/kiegroup/optaplanner/commit/977c5845ba1a3049dd8af7bf9571fd71f27ead4e", "message": "Fix value pair toString", "committedDate": "2020-01-07T09:00:29Z", "type": "commit"}, {"oid": "6ab9a98ec56137eae65c46db49fb49f00571e6d7", "url": "https://github.com/kiegroup/optaplanner/commit/6ab9a98ec56137eae65c46db49fb49f00571e6d7", "message": "Rename test class", "committedDate": "2020-01-07T09:00:47Z", "type": "commit"}, {"oid": "0ba59e88c1b2fefb4cf1cb3f81dc36b07efbbe2f", "url": "https://github.com/kiegroup/optaplanner/commit/0ba59e88c1b2fefb4cf1cb3f81dc36b07efbbe2f", "message": "Add a regrouping note to the docs", "committedDate": "2020-01-07T09:06:37Z", "type": "commit"}, {"oid": "73f60a0b1db48e3f8a3d0b9aa5bd856de6aa0c4d", "url": "https://github.com/kiegroup/optaplanner/commit/73f60a0b1db48e3f8a3d0b9aa5bd856de6aa0c4d", "message": "Adjust Javadocs", "committedDate": "2020-01-07T09:32:34Z", "type": "commit"}]}