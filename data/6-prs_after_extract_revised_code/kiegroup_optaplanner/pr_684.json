{"pr_number": 684, "pr_title": "PLANNER-1613 toList() and toSet() constraint collectors", "pr_createdAt": "2020-02-12T13:15:44Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/684", "timeline": [{"oid": "77708011e072bd378c2cfa1865f4356d6ca83a8a", "url": "https://github.com/kiegroup/optaplanner/commit/77708011e072bd378c2cfa1865f4356d6ca83a8a", "message": "PLANNER-1613 toList() and toSet() constraint collectors", "committedDate": "2020-02-12T13:03:59Z", "type": "commit"}, {"oid": "3b1c7844c2238bdb888062ed13766ee50b0e79b4", "url": "https://github.com/kiegroup/optaplanner/commit/3b1c7844c2238bdb888062ed13766ee50b0e79b4", "message": "PLANNER-1613 Documentation: toList() and toSet() constraint collectors", "committedDate": "2020-02-12T13:56:16Z", "type": "forcePushed"}, {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39", "url": "https://github.com/kiegroup/optaplanner/commit/b16506510308d0ffb3826ecd7c33e37acea7ea39", "message": "PLANNER-1613 Documentation: toList() and toSet() constraint collectors", "committedDate": "2020-02-12T13:59:01Z", "type": "commit"}, {"oid": "b16506510308d0ffb3826ecd7c33e37acea7ea39", "url": "https://github.com/kiegroup/optaplanner/commit/b16506510308d0ffb3826ecd7c33e37acea7ea39", "message": "PLANNER-1613 Documentation: toList() and toSet() constraint collectors", "committedDate": "2020-02-12T13:59:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTI0Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378779242", "bodyText": "avoid future tense.\n-> \"that returns\"", "author": "ge0ffrey", "createdAt": "2020-02-13T10:38:56Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.", "originalCommit": "b16506510308d0ffb3826ecd7c33e37acea7ea39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62cbe2139cb2a8dbadcb01d27e6944cdb49a0c55", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\nindex 19d8ab475..e15a3b7b3 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\n\n@@ -558,44 +558,38 @@ public final class ConstraintCollectors {\n                 (resultContainer) -> resultContainer.isEmpty() ? null : keySupplier.apply(resultContainer));\n     }\n \n-    private ConstraintCollectors() {\n-    }\n-\n     // ************************************************************************\n     // toCollection\n     // ************************************************************************\n \n-    /**\n-     * Creates constraint collector that will return matched facts as a collection.\n-     *\n-     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n-     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n-     * @param <Result> type of the target collection\n-     * @return never null\n-     */\n     public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n             IntFunction<Result> collectionFunction) {\n         return toCollection(Function.identity(), collectionFunction);\n     }\n \n+    /**\n+     * As defined by {@link #toList()}, with {@link Set} as the resulting collection.\n+     *\n+     * @param <A> type of the matched fact\n+     * @return never null\n+     */\n     public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n         return toSet(Function.identity());\n     }\n \n-    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n-        return toList(Function.identity());\n-    }\n-\n     /**\n-     * Creates constraint collector that will return a collection of the given type.\n+     * Creates constraint collector that returns {@link List} of the same element type as the\n+     * {@link UniConstraintStream}.\n+     * Makes no guarantees on iteration order.\n+     * For stable iteration order, use {@link #toCollection(IntFunction)} together with a sorted collection.\n      *\n-     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n-     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n      * @param <A> type of the matched fact\n-     * @param <Mapped> type of elements in the resulting collection\n-     * @param <Result> type of the resulting collection\n      * @return never null\n      */\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n     public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n             Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n         return new DefaultUniConstraintCollector<>(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378779760", "bodyText": "Do we need toCollection? When in doubt leave it out. I 'd rather start with just toSet() and toList() until someone complains of the lack of toCollection(). Wdyt?", "author": "ge0ffrey", "createdAt": "2020-02-13T10:39:50Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(", "originalCommit": "b16506510308d0ffb3826ecd7c33e37acea7ea39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTAxMA==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781010", "bodyText": "I consider it useful for when you want a stable iteration order, so you request toCollection(TreeSet::new).", "author": "triceo", "createdAt": "2020-02-13T10:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NjYxNA==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378986614", "bodyText": "Agreed, or to pick your collection type. Keep it indeed.\nThis is the special case though. The toList() is the normal case. So toList() gets a full proper javadoc (they others can use \"As defined by\"). Wdyt?", "author": "ge0ffrey", "createdAt": "2020-02-13T16:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NzI3OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378987279", "bodyText": "So, I guess we want toCollection(constructor), but not toCollection()?", "author": "ge0ffrey", "createdAt": "2020-02-13T16:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "62cbe2139cb2a8dbadcb01d27e6944cdb49a0c55", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\nindex 19d8ab475..e15a3b7b3 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\n\n@@ -558,44 +558,38 @@ public final class ConstraintCollectors {\n                 (resultContainer) -> resultContainer.isEmpty() ? null : keySupplier.apply(resultContainer));\n     }\n \n-    private ConstraintCollectors() {\n-    }\n-\n     // ************************************************************************\n     // toCollection\n     // ************************************************************************\n \n-    /**\n-     * Creates constraint collector that will return matched facts as a collection.\n-     *\n-     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n-     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n-     * @param <Result> type of the target collection\n-     * @return never null\n-     */\n     public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n             IntFunction<Result> collectionFunction) {\n         return toCollection(Function.identity(), collectionFunction);\n     }\n \n+    /**\n+     * As defined by {@link #toList()}, with {@link Set} as the resulting collection.\n+     *\n+     * @param <A> type of the matched fact\n+     * @return never null\n+     */\n     public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n         return toSet(Function.identity());\n     }\n \n-    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n-        return toList(Function.identity());\n-    }\n-\n     /**\n-     * Creates constraint collector that will return a collection of the given type.\n+     * Creates constraint collector that returns {@link List} of the same element type as the\n+     * {@link UniConstraintStream}.\n+     * Makes no guarantees on iteration order.\n+     * For stable iteration order, use {@link #toCollection(IntFunction)} together with a sorted collection.\n      *\n-     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n-     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n      * @param <A> type of the matched fact\n-     * @param <Mapped> type of elements in the resulting collection\n-     * @param <Result> type of the resulting collection\n      * @return never null\n      */\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n     public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n             Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n         return new DefaultUniConstraintCollector<>(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDA3Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378780077", "bodyText": "javadocs :)\nEspecially for toList() as that's the main one.", "author": "ge0ffrey", "createdAt": "2020-02-13T10:40:27Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {", "originalCommit": "b16506510308d0ffb3826ecd7c33e37acea7ea39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTIwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781205", "bodyText": "Yeah, the Javadoc is on toCollection() now.", "author": "triceo", "createdAt": "2020-02-13T10:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NTgxMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378985811", "bodyText": "Add at least a \"As defined by ...\"", "author": "ge0ffrey", "createdAt": "2020-02-13T16:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "62cbe2139cb2a8dbadcb01d27e6944cdb49a0c55", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\nindex 19d8ab475..e15a3b7b3 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\n\n@@ -558,44 +558,38 @@ public final class ConstraintCollectors {\n                 (resultContainer) -> resultContainer.isEmpty() ? null : keySupplier.apply(resultContainer));\n     }\n \n-    private ConstraintCollectors() {\n-    }\n-\n     // ************************************************************************\n     // toCollection\n     // ************************************************************************\n \n-    /**\n-     * Creates constraint collector that will return matched facts as a collection.\n-     *\n-     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n-     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n-     * @param <Result> type of the target collection\n-     * @return never null\n-     */\n     public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n             IntFunction<Result> collectionFunction) {\n         return toCollection(Function.identity(), collectionFunction);\n     }\n \n+    /**\n+     * As defined by {@link #toList()}, with {@link Set} as the resulting collection.\n+     *\n+     * @param <A> type of the matched fact\n+     * @return never null\n+     */\n     public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n         return toSet(Function.identity());\n     }\n \n-    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n-        return toList(Function.identity());\n-    }\n-\n     /**\n-     * Creates constraint collector that will return a collection of the given type.\n+     * Creates constraint collector that returns {@link List} of the same element type as the\n+     * {@link UniConstraintStream}.\n+     * Makes no guarantees on iteration order.\n+     * For stable iteration order, use {@link #toCollection(IntFunction)} together with a sorted collection.\n      *\n-     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n-     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n      * @param <A> type of the matched fact\n-     * @param <Mapped> type of elements in the resulting collection\n-     * @param <Result> type of the resulting collection\n      * @return never null\n      */\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n     public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n             Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n         return new DefaultUniConstraintCollector<>(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTA5Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781093", "bodyText": "Thinking aloud: The method name doesn't indicate it's used as the undo operation.\nHow about calling it to undoToCollection?", "author": "ge0ffrey", "createdAt": "2020-02-13T10:42:20Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java", "diffHunk": "@@ -554,4 +561,171 @@ private static Runnable innerCountDistinctLong(CountDistinctLongResultContainer\n     private ConstraintCollectors() {\n     }\n \n+    // ************************************************************************\n+    // toCollection\n+    // ************************************************************************\n+\n+    /**\n+     * Creates constraint collector that will return matched facts as a collection.\n+     *\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n+     * @param <Result> type of the target collection\n+     * @return never null\n+     */\n+    public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n+            IntFunction<Result> collectionFunction) {\n+        return toCollection(Function.identity(), collectionFunction);\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n+        return toSet(Function.identity());\n+    }\n+\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n+    /**\n+     * Creates constraint collector that will return a collection of the given type.\n+     *\n+     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n+     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n+     * @param <A> type of the matched fact\n+     * @param <Mapped> type of elements in the resulting collection\n+     * @param <Result> type of the resulting collection\n+     * @return never null\n+     */\n+    public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n+            Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n+        return new DefaultUniConstraintCollector<>(\n+                (Supplier<List<Mapped>>) ArrayList::new,\n+                (resultContainer, a) -> {\n+                    Mapped mapped = mappingFunction.apply(a);\n+                    resultContainer.add(mapped);\n+                    return () -> resultContainer.remove(mapped);\n+                },\n+                resultContainer -> finishToCollection(collectionFunction, resultContainer));\n+    }\n+\n+    private static <Mapped, Container extends List<Mapped>, Result extends Collection<Mapped>> Result\n+    finishToCollection(IntFunction<Result> collectionFunction, Container resultContainer) {", "originalCommit": "b16506510308d0ffb3826ecd7c33e37acea7ea39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTcxMw==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378781713", "bodyText": "This is not the undo. This is the finisher, which takes the incremental container and turns it into a final immutable product.", "author": "triceo", "createdAt": "2020-02-13T10:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NTQ2OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/684#discussion_r378985469", "bodyText": "Agreed, then the name is correct. I interpreted \"finish\" as last part that is common, not as finisher.\nMaybe toCollectionFinisher? Although name is fine now.", "author": "ge0ffrey", "createdAt": "2020-02-13T16:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "62cbe2139cb2a8dbadcb01d27e6944cdb49a0c55", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\nindex 19d8ab475..e15a3b7b3 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/ConstraintCollectors.java\n\n@@ -558,44 +558,38 @@ public final class ConstraintCollectors {\n                 (resultContainer) -> resultContainer.isEmpty() ? null : keySupplier.apply(resultContainer));\n     }\n \n-    private ConstraintCollectors() {\n-    }\n-\n     // ************************************************************************\n     // toCollection\n     // ************************************************************************\n \n-    /**\n-     * Creates constraint collector that will return matched facts as a collection.\n-     *\n-     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n-     * @param <A> type of the matched fact, matching the type of elements in the resulting collection\n-     * @param <Result> type of the target collection\n-     * @return never null\n-     */\n     public static <A, Result extends Collection<A>> UniConstraintCollector<A, ?, Result> toCollection(\n             IntFunction<Result> collectionFunction) {\n         return toCollection(Function.identity(), collectionFunction);\n     }\n \n+    /**\n+     * As defined by {@link #toList()}, with {@link Set} as the resulting collection.\n+     *\n+     * @param <A> type of the matched fact\n+     * @return never null\n+     */\n     public static <A> UniConstraintCollector<A, ?, Set<A>> toSet() {\n         return toSet(Function.identity());\n     }\n \n-    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n-        return toList(Function.identity());\n-    }\n-\n     /**\n-     * Creates constraint collector that will return a collection of the given type.\n+     * Creates constraint collector that returns {@link List} of the same element type as the\n+     * {@link UniConstraintStream}.\n+     * Makes no guarantees on iteration order.\n+     * For stable iteration order, use {@link #toCollection(IntFunction)} together with a sorted collection.\n      *\n-     * @param mappingFunction never null, converts matched facts to elements of the resulting collection\n-     * @param collectionFunction never null, provides new instance of the target collection with given initial capacity\n      * @param <A> type of the matched fact\n-     * @param <Mapped> type of elements in the resulting collection\n-     * @param <Result> type of the resulting collection\n      * @return never null\n      */\n+    public static <A> UniConstraintCollector<A, ?, List<A>> toList() {\n+        return toList(Function.identity());\n+    }\n+\n     public static <A, Mapped, Result extends Collection<Mapped>> UniConstraintCollector<A, ?, Result> toCollection(\n             Function<A, Mapped> mappingFunction, IntFunction<Result> collectionFunction) {\n         return new DefaultUniConstraintCollector<>(\n"}}, {"oid": "62cbe2139cb2a8dbadcb01d27e6944cdb49a0c55", "url": "https://github.com/kiegroup/optaplanner/commit/62cbe2139cb2a8dbadcb01d27e6944cdb49a0c55", "message": "Fix Javadocs", "committedDate": "2020-02-13T17:41:29Z", "type": "commit"}]}