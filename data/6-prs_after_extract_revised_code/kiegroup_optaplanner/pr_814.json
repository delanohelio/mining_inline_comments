{"pr_number": 814, "pr_title": "PLANNER-2011 Somewhat improve Examination Constraint Provider performance", "pr_createdAt": "2020-06-24T14:01:02Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/814", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNjEzMw==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r444916133", "bodyText": "I am removing this as it just replaces an exception with another one.\nThis brings no value and costs precious time on the CS-D hot path.", "author": "triceo", "createdAt": "2020-06-24T14:01:39Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java", "diffHunk": "@@ -18,14 +18,6 @@\n \n public abstract class AbstractJoiner {\n \n-    protected void assertMappingIndex(int index) {\n-        int mappingCount = getJoinerTypes().length;\n-        if (index >= mappingCount) {\n-            throw new IllegalArgumentException(\n-                    \"Joiner only has (\" + mappingCount + \") mappings, requested index (\" + index + \")\");\n-        }\n-    }\n-", "originalCommit": "57282228ac0511dfaffbd307530dc69e8c87cbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NzI1Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445477252", "bodyText": "Agreed.", "author": "ge0ffrey", "createdAt": "2020-06-25T11:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNjEzMw=="}], "type": "inlineReview", "revised_code": {"commit": "f11be7f4739edc4fa95aa41259f59110373fc611", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java\nindex 7461f17c6f..1e3a6caa00 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/common/AbstractJoiner.java\n\n@@ -18,6 +18,14 @@ package org.optaplanner.core.impl.score.stream.common;\n \n public abstract class AbstractJoiner {\n \n+    protected void assertMappingIndex(int index) {\n+        int mappingCount = getJoinerTypes().length;\n+        if (index >= mappingCount) {\n+            throw new IllegalArgumentException(\n+                    \"Joiner only has (\" + mappingCount + \") mappings, requested index (\" + index + \")\");\n+        }\n+    }\n+\n     public abstract JoinerType[] getJoinerTypes();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NzEyMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445477121", "bodyText": "Why can we get rid of these fail fasts? Because it throws an ArrayOutOfBoundsException?\nIf only OptaPlanner code can trigger that, then the ArrayOutOfBoundsException is certainly fine. If a user can do something wrong that easily triggers it, it might not be ideal. But I can't immediately think of something, so +1 to remove the assert.", "author": "ge0ffrey", "createdAt": "2020-06-25T11:01:37Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/CompositeBiJoiner.java", "diffHunk": "@@ -52,39 +55,29 @@\n \n     @Override\n     public Function<A, Object> getLeftMapping(int index) {\n-        assertMappingIndex(index);", "originalCommit": "3341568cae7d199a329bd955e3d2a464e3b84b7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NzM3OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445477379", "bodyText": "Retracting this comment. See below.", "author": "ge0ffrey", "createdAt": "2020-06-25T11:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NzEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f11be7f4739edc4fa95aa41259f59110373fc611", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/CompositeBiJoiner.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/CompositeBiJoiner.java\nindex 45d6704623..b13581d143 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/CompositeBiJoiner.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bi/CompositeBiJoiner.java\n\n@@ -55,6 +55,7 @@ public final class CompositeBiJoiner<A, B> extends AbstractBiJoiner<A, B> {\n \n     @Override\n     public Function<A, Object> getLeftMapping(int index) {\n+        assertMappingIndex(index);\n         return (Function<A, Object>) leftMappings[index];\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3OTI3OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445479279", "bodyText": "a from() guarantees that all genuine planning variables aren't null.\nSo the room filter is definitely obsolete, because room is a planning variable on Exam.\nFor period its more complex. It's a genuine planning variable on LeadingExam, and a shadow variable on FollowingExam - and nothing on Exam. So I think it doesn't get filtered by default, because we're doing \"from\" Exam.\nI would recommend adding a comment above that filter, to signal why were're filtering it.", "author": "ge0ffrey", "createdAt": "2020-06-25T11:06:13Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -65,12 +83,10 @@ protected Constraint periodDurationTooShort(ConstraintFactory constraintFactory)\n     }\n \n     protected Constraint roomCapacityTooSmall(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Room.class)\n-                .join(Exam.class, equal(Function.identity(), Exam::getRoom))\n-                .join(Period.class, equal((room, exam) -> exam.getPeriod(), Function.identity()))\n-                .groupBy((room, exam, period) -> room,\n-                        (room, exam, period) -> period,\n-                        ConstraintCollectors.sum((period, exam, room) -> exam.getTopicStudentSize()))\n+        return constraintFactory.from(Exam.class)\n+                .filter(exam -> exam.getRoom() != null)\n+                .filter(exam -> exam.getPeriod() != null)", "originalCommit": "3341568cae7d199a329bd955e3d2a464e3b84b7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f11be7f4739edc4fa95aa41259f59110373fc611", "chunk": "diff --git a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\nindex 172d3725ec..a215769a32 100644\n--- a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n+++ b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n\n@@ -83,10 +65,12 @@ public class ExaminationConstraintProvider implements ConstraintProvider {\n     }\n \n     protected Constraint roomCapacityTooSmall(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Exam.class)\n-                .filter(exam -> exam.getRoom() != null)\n-                .filter(exam -> exam.getPeriod() != null)\n-                .groupBy(Exam::getRoom, Exam::getPeriod, sum(Exam::getTopicStudentSize))\n+        return constraintFactory.from(Room.class)\n+                .join(Exam.class, equal(Function.identity(), Exam::getRoom))\n+                .join(Period.class, equal((room, exam) -> exam.getPeriod(), Function.identity()))\n+                .groupBy((room, exam, period) -> room,\n+                        (room, exam, period) -> period,\n+                        ConstraintCollectors.sum((period, exam, room) -> exam.getTopicStudentSize()))\n                 .filter((room, period, totalStudentSize) -> totalStudentSize > room.getCapacity())\n                 .penalizeConfigurable(\"roomCapacityTooSmall\",\n                         (room, period, totalStudentSize) -> totalStudentSize - room.getCapacity());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4MDMzMw==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445480333", "bodyText": "2 lines above says that the leftExam's period isn't null.\nThe line above says that the rightExam period is the same one.\nTherefore, checking if the rightExam isn't null is obsolete.\nIf A != null && A == B then B != null", "author": "ge0ffrey", "createdAt": "2020-06-25T11:08:25Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -99,8 +115,8 @@ protected Constraint periodPenaltyExclusion(ConstraintFactory constraintFactory)\n                         filtering((periodPenalty, leftExam) -> leftExam.getPeriod() != null))\n                 .join(Exam.class,\n                         equal((periodPenalty, leftExam) -> periodPenalty.getRightTopic(), Exam::getTopic),\n-                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null),\n-                        filtering((periodPenalty, leftExam, rightExam) -> leftExam.getPeriod().equals(rightExam.getPeriod())))\n+                        equal((periodPenalty, leftExam) -> leftExam.getPeriod(), Exam::getPeriod),\n+                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null))", "originalCommit": "3341568cae7d199a329bd955e3d2a464e3b84b7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f11be7f4739edc4fa95aa41259f59110373fc611", "chunk": "diff --git a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\nindex 172d3725ec..a215769a32 100644\n--- a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n+++ b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n\n@@ -115,8 +99,8 @@ public class ExaminationConstraintProvider implements ConstraintProvider {\n                         filtering((periodPenalty, leftExam) -> leftExam.getPeriod() != null))\n                 .join(Exam.class,\n                         equal((periodPenalty, leftExam) -> periodPenalty.getRightTopic(), Exam::getTopic),\n-                        equal((periodPenalty, leftExam) -> leftExam.getPeriod(), Exam::getPeriod),\n-                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null))\n+                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null),\n+                        filtering((periodPenalty, leftExam, rightExam) -> leftExam.getPeriod().equals(rightExam.getPeriod())))\n                 .penalizeConfigurable(\"periodPenaltyExclusion\",\n                         (periodPenalty, leftExam, rightExam) -> leftExam.getTopic().getStudentSize()\n                                 + rightExam.getTopic().getStudentSize());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4MTYzNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445481635", "bodyText": "Doesn't this crash? rightExam.getPeriodIndex() can throw an NPE, right? Or return null that isn't Comparable?\nI think it might be \"lucky\" that the topic equality protects you from exposing that bug?\nIdeally, the rightExam period != null filtering must happen before the join:\n.join(f.from(Exam).filter(exam.getPeriod != null)),\n       lessThanOrEqual(....)", "author": "ge0ffrey", "createdAt": "2020-06-25T11:11:15Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -114,9 +130,8 @@ protected Constraint periodPenaltyAfter(ConstraintFactory constraintFactory) {\n                         filtering((periodPenalty, leftExam) -> leftExam.getPeriod() != null))\n                 .join(Exam.class,\n                         equal((periodPenalty, leftExam) -> periodPenalty.getRightTopic(), Exam::getTopic),\n-                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null),\n-                        filtering((periodPenalty, leftExam,\n-                                rightExam) -> leftExam.getPeriod().getPeriodIndex() <= rightExam.getPeriod().getPeriodIndex()))\n+                        lessThanOrEqual((periodPenalty, leftExam) -> leftExam.getPeriodIndex(), Exam::getPeriodIndex),\n+                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null))", "originalCommit": "3341568cae7d199a329bd955e3d2a464e3b84b7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1Mjg3MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445552871", "bodyText": "getPeriodIndex() has a built-in null check. That's how I can afford to do this.\nBut the null check here is redundant anyway, since lessThanOrEqual() would filter those situations out anyway.", "author": "triceo", "createdAt": "2020-06-25T13:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4MTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f11be7f4739edc4fa95aa41259f59110373fc611", "chunk": "diff --git a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\nindex 172d3725ec..a215769a32 100644\n--- a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n+++ b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n\n@@ -130,8 +114,9 @@ public class ExaminationConstraintProvider implements ConstraintProvider {\n                         filtering((periodPenalty, leftExam) -> leftExam.getPeriod() != null))\n                 .join(Exam.class,\n                         equal((periodPenalty, leftExam) -> periodPenalty.getRightTopic(), Exam::getTopic),\n-                        lessThanOrEqual((periodPenalty, leftExam) -> leftExam.getPeriodIndex(), Exam::getPeriodIndex),\n-                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null))\n+                        filtering((periodPenalty, leftExam, rightExam) -> rightExam.getPeriod() != null),\n+                        filtering((periodPenalty, leftExam,\n+                                rightExam) -> leftExam.getPeriod().getPeriodIndex() <= rightExam.getPeriod().getPeriodIndex()))\n                 .penalizeConfigurable(\"periodPenaltyAfter\",\n                         (periodPenalty, leftExam, rightExam) -> leftExam.getTopic().getStudentSize()\n                                 + rightExam.getTopic().getStudentSize());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4NTQ2OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445485469", "bodyText": "I'd keep this comment.\nIt's the only reason why this rule is so complex, because of the ITC 2007 spec. Otherwise, we won't understand it in the future.\nNormally, this would result in 5 penalties, probably mutliplied by the number of students.", "author": "ge0ffrey", "createdAt": "2020-06-25T11:19:32Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -170,30 +185,31 @@ protected Constraint periodSpread(ConstraintFactory constraintFactory) {\n                 .join(Exam.class,\n                         equal((config, topicConflict) -> topicConflict.getLeftTopic(), Exam::getTopic),\n                         filtering((config, topicConflict, leftExam) -> leftExam.getPeriod() != null))\n-                .ifExists(Exam.class,\n+                .join(Exam.class,\n                         equal((config, topicConflict, leftExam) -> topicConflict.getRightTopic(), Exam::getTopic),\n                         filtering((config, topicConflict, leftExam, rightExam) -> rightExam.getPeriod() != null),\n                         filtering((config, topicConflict, leftExam,\n                                 rightExam) -> getPeriodIndexDifferenceBetweenExams(leftExam,\n                                         rightExam) < (config.getPeriodSpreadLength() + 1)))\n                 .penalizeConfigurable(\"periodSpread\",\n-                        (config, topicConflict, leftExam) -> topicConflict.getStudentSize());\n+                        (config, topicConflict, leftExam, rightExam) -> topicConflict.getStudentSize());\n     }\n \n     protected Constraint mixedDurations(ConstraintFactory constraintFactory) {\n-        // 4 mixed durations of 100, 150, 200 and 200 should only result in 2 penalties (for 100&150 and 100&200).", "originalCommit": "3341568cae7d199a329bd955e3d2a464e3b84b7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f11be7f4739edc4fa95aa41259f59110373fc611", "chunk": "diff --git a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\nindex 172d3725ec..a215769a32 100644\n--- a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n+++ b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n\n@@ -185,31 +170,30 @@ public class ExaminationConstraintProvider implements ConstraintProvider {\n                 .join(Exam.class,\n                         equal((config, topicConflict) -> topicConflict.getLeftTopic(), Exam::getTopic),\n                         filtering((config, topicConflict, leftExam) -> leftExam.getPeriod() != null))\n-                .join(Exam.class,\n+                .ifExists(Exam.class,\n                         equal((config, topicConflict, leftExam) -> topicConflict.getRightTopic(), Exam::getTopic),\n                         filtering((config, topicConflict, leftExam, rightExam) -> rightExam.getPeriod() != null),\n                         filtering((config, topicConflict, leftExam,\n                                 rightExam) -> getPeriodIndexDifferenceBetweenExams(leftExam,\n                                         rightExam) < (config.getPeriodSpreadLength() + 1)))\n                 .penalizeConfigurable(\"periodSpread\",\n-                        (config, topicConflict, leftExam, rightExam) -> topicConflict.getStudentSize());\n+                        (config, topicConflict, leftExam) -> topicConflict.getStudentSize());\n     }\n \n     protected Constraint mixedDurations(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Exam.class)\n-                .filter(leftExam -> leftExam.getPeriod() != null)\n-                .filter(leftExam -> leftExam.getRoom() != null)\n-                .ifNotExistsOther(Exam.class,\n-                        equal(Exam::getPeriod),\n-                        equal(Exam::getRoom),\n-                        greaterThan(Exam::getId))\n-                .join(Exam.class,\n-                        equal(Exam::getPeriod),\n-                        equal(Exam::getRoom),\n-                        lessThan(Exam::getId),\n-                        filtering((leftExam, rightExam) -> leftExam.getTopicDuration() != rightExam.getTopicDuration()))\n+        // 4 mixed durations of 100, 150, 200 and 200 should only result in 2 penalties (for 100&150 and 100&200).\n+        return constraintFactory.fromUniquePair(Exam.class,\n+                equal(Exam::getPeriod),\n+                equal(Exam::getRoom))\n+                // Keep only those that have different topic durations in the same room-period pair.\n+                .filter((leftExam, rightExam) -> leftExam.getTopicDuration() != rightExam.getTopicDuration())\n+                // Keep only those where the left exam's id is the lowest one in the room-period pair.\n                 .ifNotExists(Exam.class,\n                         equal((leftExam, rightExam) -> leftExam.getPeriod(), Exam::getPeriod),\n+                        equal((leftExam, rightExam) -> leftExam.getRoom(), Exam::getRoom),\n+                        greaterThan((leftExam, rightExam) -> leftExam.getId(), Exam::getId))\n+                // Keep only those where the left exam's id is the lowest one in the room-period pair.\n+                .ifNotExists(Exam.class, equal((leftExam, rightExam) -> leftExam.getPeriod(), Exam::getPeriod),\n                         equal((leftExam, rightExam) -> leftExam.getRoom(), Exam::getRoom),\n                         equal((leftExam, rightExam) -> rightExam.getTopicDuration(), Exam::getTopicDuration),\n                         greaterThan((leftExam, rightExam) -> rightExam.getId(), Exam::getId))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4NjIzMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445486231", "bodyText": "I prefer the original rule.\nIt reads better and it's probably faster too (no joins).", "author": "ge0ffrey", "createdAt": "2020-06-25T11:21:04Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -207,15 +223,19 @@ protected Constraint frontLoad(ConstraintFactory constraintFactory) {\n     }\n \n     protected Constraint periodPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Exam.class)\n-                .filter(exam -> exam.getPeriod().getPenalty() != 0)\n-                .penalizeConfigurable(\"periodPenalty\", exam -> exam.getPeriod().getPenalty());", "originalCommit": "3341568cae7d199a329bd955e3d2a464e3b84b7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1OTc2OA==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445559768", "bodyText": "This is actually a performance improvement - there is only a small number of Periods, and many of them will be ignored due to the penalty being zero. Therefore, the subsequent join will result in much less tuples that have to be traversed, as opposed to crawling over all the Exams. (The period in the join will be indexed, unlike the filter.)\nI'm keeping this as is.", "author": "triceo", "createdAt": "2020-06-25T13:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4NjIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f11be7f4739edc4fa95aa41259f59110373fc611", "chunk": "diff --git a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\nindex 172d3725ec..a215769a32 100644\n--- a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n+++ b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n\n@@ -223,19 +207,15 @@ public class ExaminationConstraintProvider implements ConstraintProvider {\n     }\n \n     protected Constraint periodPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Period.class)\n-                .filter(period -> period.getPenalty() != 0)\n-                .join(Exam.class,\n-                        equal(Function.identity(), Exam::getPeriod))\n-                .penalizeConfigurable(\"periodPenalty\", (period, exam) -> period.getPenalty());\n+        return constraintFactory.from(Exam.class)\n+                .filter(exam -> exam.getPeriod().getPenalty() != 0)\n+                .penalizeConfigurable(\"periodPenalty\", exam -> exam.getPeriod().getPenalty());\n     }\n \n     protected Constraint roomPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Room.class)\n-                .filter(room -> room.getPenalty() != 0)\n-                .join(Exam.class,\n-                        equal(Function.identity(), Exam::getRoom))\n-                .penalizeConfigurable(\"roomPenalty\", (room, exam) -> room.getPenalty());\n+        return constraintFactory.from(Exam.class)\n+                .filter(exam -> exam.getRoom().getPenalty() != 0)\n+                .penalizeConfigurable(\"roomPenalty\", exam -> exam.getRoom().getPenalty());\n     }\n \n     private int getPeriodIndexDifferenceBetweenExams(Exam leftExam, Exam rightExam) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4NzAwMg==", "url": "https://github.com/kiegroup/optaplanner/pull/814#discussion_r445487002", "bodyText": "Same here, see zulip \"perf guidlines writing CS\"", "author": "ge0ffrey", "createdAt": "2020-06-25T11:22:47Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java", "diffHunk": "@@ -207,15 +223,19 @@ protected Constraint frontLoad(ConstraintFactory constraintFactory) {\n     }\n \n     protected Constraint periodPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Exam.class)\n-                .filter(exam -> exam.getPeriod().getPenalty() != 0)\n-                .penalizeConfigurable(\"periodPenalty\", exam -> exam.getPeriod().getPenalty());\n+        return constraintFactory.from(Period.class)\n+                .filter(period -> period.getPenalty() != 0)\n+                .join(Exam.class,\n+                        equal(Function.identity(), Exam::getPeriod))\n+                .penalizeConfigurable(\"periodPenalty\", (period, exam) -> period.getPenalty());\n     }\n \n     protected Constraint roomPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Exam.class)\n-                .filter(exam -> exam.getRoom().getPenalty() != 0)\n-                .penalizeConfigurable(\"roomPenalty\", exam -> exam.getRoom().getPenalty());\n+        return constraintFactory.from(Room.class)\n+                .filter(room -> room.getPenalty() != 0)\n+                .join(Exam.class,\n+                        equal(Function.identity(), Exam::getRoom))\n+                .penalizeConfigurable(\"roomPenalty\", (room, exam) -> room.getPenalty());", "originalCommit": "3341568cae7d199a329bd955e3d2a464e3b84b7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f11be7f4739edc4fa95aa41259f59110373fc611", "chunk": "diff --git a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\nindex 172d3725ec..a215769a32 100644\n--- a/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n+++ b/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/solver/score/ExaminationConstraintProvider.java\n\n@@ -223,19 +207,15 @@ public class ExaminationConstraintProvider implements ConstraintProvider {\n     }\n \n     protected Constraint periodPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Period.class)\n-                .filter(period -> period.getPenalty() != 0)\n-                .join(Exam.class,\n-                        equal(Function.identity(), Exam::getPeriod))\n-                .penalizeConfigurable(\"periodPenalty\", (period, exam) -> period.getPenalty());\n+        return constraintFactory.from(Exam.class)\n+                .filter(exam -> exam.getPeriod().getPenalty() != 0)\n+                .penalizeConfigurable(\"periodPenalty\", exam -> exam.getPeriod().getPenalty());\n     }\n \n     protected Constraint roomPenalty(ConstraintFactory constraintFactory) {\n-        return constraintFactory.from(Room.class)\n-                .filter(room -> room.getPenalty() != 0)\n-                .join(Exam.class,\n-                        equal(Function.identity(), Exam::getRoom))\n-                .penalizeConfigurable(\"roomPenalty\", (room, exam) -> room.getPenalty());\n+        return constraintFactory.from(Exam.class)\n+                .filter(exam -> exam.getRoom().getPenalty() != 0)\n+                .penalizeConfigurable(\"roomPenalty\", exam -> exam.getRoom().getPenalty());\n     }\n \n     private int getPeriodIndexDifferenceBetweenExams(Exam leftExam, Exam rightExam) {\n"}}, {"oid": "f11be7f4739edc4fa95aa41259f59110373fc611", "url": "https://github.com/kiegroup/optaplanner/commit/f11be7f4739edc4fa95aa41259f59110373fc611", "message": "Performance improvements to Joiners", "committedDate": "2020-06-25T13:24:29Z", "type": "commit"}, {"oid": "483a3a2fc8da7edd6fb2e3302cc38229b5f33456", "url": "https://github.com/kiegroup/optaplanner/commit/483a3a2fc8da7edd6fb2e3302cc38229b5f33456", "message": "Fix typo", "committedDate": "2020-06-25T13:24:29Z", "type": "commit"}, {"oid": "80d8bd733cde43b51bf0ce2b28f0a160e5a2c3ff", "url": "https://github.com/kiegroup/optaplanner/commit/80d8bd733cde43b51bf0ce2b28f0a160e5a2c3ff", "message": "Remove needless bounds checking", "committedDate": "2020-06-25T13:24:29Z", "type": "commit"}, {"oid": "09b30c7d98f429c966a95f5c57e77fb3a3060698", "url": "https://github.com/kiegroup/optaplanner/commit/09b30c7d98f429c966a95f5c57e77fb3a3060698", "message": "Improve performance of the Examination constraint provider", "committedDate": "2020-06-25T13:24:29Z", "type": "commit"}, {"oid": "e2c4e6fc015bfcfd6a41531faddfa3386b005cf6", "url": "https://github.com/kiegroup/optaplanner/commit/e2c4e6fc015bfcfd6a41531faddfa3386b005cf6", "message": "Bring performance of Constraint Providers more in line with DRL", "committedDate": "2020-06-25T13:24:29Z", "type": "commit"}, {"oid": "0672f1b72f64a2f731fe82355d276cd5aff70b73", "url": "https://github.com/kiegroup/optaplanner/commit/0672f1b72f64a2f731fe82355d276cd5aff70b73", "message": "Don't change what doesn't need changing", "committedDate": "2020-06-25T13:24:30Z", "type": "commit"}, {"oid": "33194820ffd0a5e45a0aaba7e509bef544148654", "url": "https://github.com/kiegroup/optaplanner/commit/33194820ffd0a5e45a0aaba7e509bef544148654", "message": "Don't change what doesn't need changing, part 2", "committedDate": "2020-06-25T13:24:30Z", "type": "commit"}, {"oid": "b1d049494816e563d913345e5db3c2f80f5b5c3b", "url": "https://github.com/kiegroup/optaplanner/commit/b1d049494816e563d913345e5db3c2f80f5b5c3b", "message": "Fix formatting", "committedDate": "2020-06-25T13:24:30Z", "type": "commit"}, {"oid": "20e48cf210736d514a0a754bde67a0b2c3644d59", "url": "https://github.com/kiegroup/optaplanner/commit/20e48cf210736d514a0a754bde67a0b2c3644d59", "message": "Address some review comments", "committedDate": "2020-06-25T13:24:30Z", "type": "commit"}, {"oid": "20e48cf210736d514a0a754bde67a0b2c3644d59", "url": "https://github.com/kiegroup/optaplanner/commit/20e48cf210736d514a0a754bde67a0b2c3644d59", "message": "Address some review comments", "committedDate": "2020-06-25T13:24:30Z", "type": "forcePushed"}]}