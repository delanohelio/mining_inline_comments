{"pr_number": 763, "pr_title": "PLANNER-561 Fix OutOfMemoryException in finalistList", "pr_createdAt": "2020-04-28T17:26:01Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/763", "timeline": [{"oid": "e005b56c5b1b66768438e4b4ad27e9dc2adfa0f4", "url": "https://github.com/kiegroup/optaplanner/commit/e005b56c5b1b66768438e4b4ad27e9dc2adfa0f4", "message": "PLANNER-561 Fix OutOfMemoryException in finalistList", "committedDate": "2020-04-28T17:25:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODI0Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/763#discussion_r416798247", "bodyText": "Any particular reason why so many finalists would be a good idea?", "author": "triceo", "createdAt": "2020-04-28T17:35:06Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/localsearch/decider/forager/finalist/AbstractFinalistPodium.java", "diffHunk": "@@ -32,6 +32,8 @@\n  */\n public abstract class AbstractFinalistPodium extends LocalSearchPhaseLifecycleListenerAdapter implements FinalistPodium {\n \n+    protected static final int FINALIST_LIST_MAX_SIZE = 1_024_000;", "originalCommit": "e005b56c5b1b66768438e4b4ad27e9dc2adfa0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzNjYzOA==", "url": "https://github.com/kiegroup/optaplanner/pull/763#discussion_r417836638", "bodyText": "No, but with a normal amount of memory we can handle this.\nFiguring out the MAX_SIZE on which these so many finalist would be 100% of the time a bad idea, is impossible.\nIt would be a good guesstimate at best, so if we get it wrong: an potential risk for silent, surprising misbehaviour in how the algorithm reacts in certain conditions. That's a risk I am unwilling to take (low chance it happens but too high impact if it does).\nThis MAX_SIZE isn't meant to distinguish between good and bad. It's to distinguish between bad without OOME trouble and bad with OOME.", "author": "ge0ffrey", "createdAt": "2020-04-30T08:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODI0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMDE2Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/763#discussion_r416800167", "bodyText": "Wouldn't it make sense to instead remove the least recent finalist? Or perhaps the worst finalist?", "author": "triceo", "createdAt": "2020-04-28T17:38:01Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/localsearch/decider/forager/finalist/AbstractFinalistPodium.java", "diffHunk": "@@ -44,6 +46,19 @@ public void stepStarted(LocalSearchStepScope stepScope) {\n         finalistList = new ArrayList<>(1024);\n     }\n \n+    protected void clearAndAddFinalist(LocalSearchMoveScope moveScope) {\n+        finalistList.clear();\n+        finalistList.add(moveScope);\n+    }\n+\n+    protected void addFinalist(LocalSearchMoveScope moveScope) {\n+        if (finalistList.size() >= FINALIST_LIST_MAX_SIZE) {\n+            // Avoid unbounded growth and OutOfMemoryException\n+            return;", "originalCommit": "e005b56c5b1b66768438e4b4ad27e9dc2adfa0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0MDY3Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/763#discussion_r417840677", "bodyText": "All moves in the finalistList have the same score (which is the reason that in most cases, it's typically size 1 to at most 100). There is no way to distinguish out the worst one.\nI doubted about ignoring the oldest or the newest.\nRemoving the oldest in an ArrayList (not ArrayDeque) has a big0(n) perf cost. Ignoring the newest doesn't.\nBoth the first move evaluated and the last move evaluated in the same step with the same score, have equal right to be selected - recency doesn't count (there is no changes in the steps).\nSo I went for ignoring the newest.", "author": "ge0ffrey", "createdAt": "2020-04-30T08:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMDE2Nw=="}], "type": "inlineReview", "revised_code": null}]}