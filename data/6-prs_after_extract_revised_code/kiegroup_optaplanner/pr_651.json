{"pr_number": 651, "pr_title": "PLANNER-1684 Implement the remaining bi grouping operations", "pr_createdAt": "2020-01-07T15:19:45Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/651", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMDQ3MA==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363800470", "bodyText": "\"the value\" is too broad. Everything's a value. Can we be more specific?\nCan we do something like this?\nThe first fact is the return value of the first group key mapping function, applied on the incoming tuple.\nThe second fact is the result value of ...", "author": "ge0ffrey", "createdAt": "2020-01-07T15:23:44Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -209,19 +209,36 @@\n      */\n     <GroupKey_> UniConstraintStream<GroupKey_> groupBy(BiFunction<A, B, GroupKey_> groupKeyMapping);\n \n-    /*\n-    // TODO implement this\n+    /**\n+     * Convert the {@link BiConstraintStream} to a different {@link BiConstraintStream}, consisting of unique tuples.\n+     * <p>\n+     * The first fact is the value resulting from applying the group key mapping function on the original tuple.\n+     * The second fact is the value of applying a given {@link BiConstraintCollector} on all the tuples with the same", "originalCommit": "9bc5e1edb62f8054db54a3b9839a3d7e022f33d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02e8de11447d6920a9881f19acef8f93dc54cf49", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java\nindex 923068255..a70f31572 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java\n\n@@ -209,36 +209,19 @@ public interface BiConstraintStream<A, B> extends ConstraintStream {\n      */\n     <GroupKey_> UniConstraintStream<GroupKey_> groupBy(BiFunction<A, B, GroupKey_> groupKeyMapping);\n \n-    /**\n-     * Convert the {@link BiConstraintStream} to a different {@link BiConstraintStream}, consisting of unique tuples.\n-     * <p>\n-     * The first fact is the value resulting from applying the group key mapping function on the original tuple.\n-     * The second fact is the value of applying a given {@link BiConstraintCollector} on all the tuples with the same\n-     * group key.\n-     * @param groupKeyMapping never null, function to convert a fact in original tuple to a different fact\n-     * @param <GroupKey_> the type of the first fact in the destination {@link BiConstraintStream}'s tuple\n-     * @param <ResultContainer_> the mutable accumulation type (often hidden as an implementation detail)\n-     * @param <Result_> the type of the second fact in the destination {@link BiConstraintStream}'s tuple\n-     * @return never null\n-     */\n+    /*\n+    // TODO implement this\n     <GroupKey_, ResultContainer_, Result_> BiConstraintStream<GroupKey_, Result_> groupBy(\n             BiFunction<A, B, GroupKey_> groupKeyMapping,\n             BiConstraintCollector<A, B, ResultContainer_, Result_> collector);\n-\n-    /**\n-     * Convert the {@link BiConstraintStream} to a different {@link BiConstraintStream}, consisting of unique tuples.\n-     * <p>\n-     * The first fact is the value resulting from applying the \"A\" group key mapping function to the original tuple.\n-     * The second fact is the value resulting from applying the \"B\" group key mapping function on all the tuples with\n-     * the same \"A\" group key.\n-     * @param groupKeyAMapping never null, function to convert facts in the original tuple to a new fact\n-     * @param groupKeyBMapping never null, function to convert facts in the original tuple to another new fact\n-     * @param <GroupKeyA_> the type of the first fact in the destination {@link BiConstraintStream}'s tuple\n-     * @param <GroupKeyB_> the type of the second fact in the destination {@link BiConstraintStream}'s tuple\n-     * @return never null\n      */\n+\n+    /*\n+    // TODO implement this\n     <GroupKeyA_, GroupKeyB_> BiConstraintStream<GroupKeyA_, GroupKeyB_> groupBy(\n-            BiFunction<A, B, GroupKeyA_> groupKeyAMapping, BiFunction<A, B, GroupKeyB_> groupKeyBMapping);\n+            BiFunction<A, B, GroupKeyA_> groupKeyAMapping,\n+            BiFunction<A, B, GroupKeyB_> groupKeyBMapping);\n+     */\n \n     /*\n     // TODO implement this\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTI2NA==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363801264", "bodyText": "If Drools supports these, don't we want to put the UnsupportedOperationException throwing in the Bavet impl?", "author": "ge0ffrey", "createdAt": "2020-01-07T15:25:11Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetAbstractBiConstraintStream.java", "diffHunk": "@@ -111,6 +113,19 @@ protected void addChildStream(BavetAbstractBiConstraintStream<Solution_, A, B> c\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n+    public <GroupKey_, ResultContainer_, Result_> BiConstraintStream<GroupKey_, Result_> groupBy(\n+            BiFunction<A, B, GroupKey_> groupKeyMapping,\n+            BiConstraintCollector<A, B, ResultContainer_, Result_> collector) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public <GroupKeyA_, GroupKeyB_> BiConstraintStream<GroupKeyA_, GroupKeyB_> groupBy(\n+            BiFunction<A, B, GroupKeyA_> groupKeyAMapping, BiFunction<A, B, GroupKeyB_> groupKeyBMapping) {\n+        throw new UnsupportedOperationException();", "originalCommit": "9bc5e1edb62f8054db54a3b9839a3d7e022f33d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTY0NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363801645", "bodyText": "Not sure what you mean. It is in Bavet impl.", "author": "triceo", "createdAt": "2020-01-07T15:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwNTQ3Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363805472", "bodyText": "Good point :)", "author": "ge0ffrey", "createdAt": "2020-01-07T15:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "02e8de11447d6920a9881f19acef8f93dc54cf49", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetAbstractBiConstraintStream.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetAbstractBiConstraintStream.java\nindex c87f21b96..117d4ba41 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetAbstractBiConstraintStream.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetAbstractBiConstraintStream.java\n\n@@ -113,19 +111,6 @@ public abstract class BavetAbstractBiConstraintStream<Solution_, A, B> extends B\n         throw new UnsupportedOperationException();\n     }\n \n-    @Override\n-    public <GroupKey_, ResultContainer_, Result_> BiConstraintStream<GroupKey_, Result_> groupBy(\n-            BiFunction<A, B, GroupKey_> groupKeyMapping,\n-            BiConstraintCollector<A, B, ResultContainer_, Result_> collector) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public <GroupKeyA_, GroupKeyB_> BiConstraintStream<GroupKeyA_, GroupKeyB_> groupBy(\n-            BiFunction<A, B, GroupKeyA_> groupKeyAMapping, BiFunction<A, B, GroupKeyB_> groupKeyBMapping) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n     // ************************************************************************\n     // Penalize/reward\n     // ************************************************************************\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjIyNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363802225", "bodyText": "nitpick code consistently: when optaplanner code captures the return value of map.put() or list.add(), it's typically called old*, not previous*. => Runnable oldUndo.", "author": "ge0ffrey", "createdAt": "2020-01-07T15:26:57Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupBy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.bi;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+\n+import org.drools.core.common.InternalFactHandle;\n+import org.optaplanner.core.api.score.stream.bi.BiConstraintCollector;\n+import org.optaplanner.core.impl.score.stream.drools.common.BiTuple;\n+\n+final class DroolsBiGroupBy<A, B, ResultContainer, NewA, NewB> implements Serializable {\n+\n+    private static final long serialVersionUID = 510l;\n+    private final Map<Long, Runnable> undoMap = new HashMap<>(0);\n+    private final BiFunction<A, B, NewA> groupKeyMapping;\n+    private final BiConstraintCollector<A, B, ResultContainer, NewB> collector;\n+    private DroolsBiGroupByAccumulator<A, B, ResultContainer, NewA, NewB> acc;\n+\n+    public DroolsBiGroupBy(BiFunction<A, B, NewA> groupKeyMapping,\n+            BiConstraintCollector<A, B, ResultContainer, NewB> collector) {\n+        this.groupKeyMapping = groupKeyMapping;\n+        this.collector = collector;\n+    }\n+\n+    public void init() {\n+        acc = new DroolsBiGroupByAccumulator<>(groupKeyMapping, collector);\n+        undoMap.clear();\n+    }\n+\n+    public void accumulate(InternalFactHandle handle, A a, B b) {\n+        Runnable undo = acc.accumulate(a, b);\n+        Runnable previousUndo = this.undoMap.put(handle.getId(), undo);", "originalCommit": "9bc5e1edb62f8054db54a3b9839a3d7e022f33d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02e8de11447d6920a9881f19acef8f93dc54cf49", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupBy.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupBy.java\ndeleted file mode 100644\nindex 2e8d49107..000000000\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupBy.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.optaplanner.core.impl.score.stream.drools.bi;\n-\n-import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.BiFunction;\n-\n-import org.drools.core.common.InternalFactHandle;\n-import org.optaplanner.core.api.score.stream.bi.BiConstraintCollector;\n-import org.optaplanner.core.impl.score.stream.drools.common.BiTuple;\n-\n-final class DroolsBiGroupBy<A, B, ResultContainer, NewA, NewB> implements Serializable {\n-\n-    private static final long serialVersionUID = 510l;\n-    private final Map<Long, Runnable> undoMap = new HashMap<>(0);\n-    private final BiFunction<A, B, NewA> groupKeyMapping;\n-    private final BiConstraintCollector<A, B, ResultContainer, NewB> collector;\n-    private DroolsBiGroupByAccumulator<A, B, ResultContainer, NewA, NewB> acc;\n-\n-    public DroolsBiGroupBy(BiFunction<A, B, NewA> groupKeyMapping,\n-            BiConstraintCollector<A, B, ResultContainer, NewB> collector) {\n-        this.groupKeyMapping = groupKeyMapping;\n-        this.collector = collector;\n-    }\n-\n-    public void init() {\n-        acc = new DroolsBiGroupByAccumulator<>(groupKeyMapping, collector);\n-        undoMap.clear();\n-    }\n-\n-    public void accumulate(InternalFactHandle handle, A a, B b) {\n-        Runnable undo = acc.accumulate(a, b);\n-        Runnable previousUndo = this.undoMap.put(handle.getId(), undo);\n-        if (previousUndo != null) {\n-            throw new IllegalStateException(\"Undo for fact handle (\" + handle.getId() + \") already exists.\");\n-        }\n-    }\n-\n-    public void reverse(InternalFactHandle handle) {\n-        final Runnable undo = this.undoMap.remove(handle.getId());\n-        if (undo == null) {\n-            throw new IllegalStateException(\"No undo for fact handle (\" + handle.getId() + \")\");\n-        }\n-        undo.run();\n-    }\n-\n-    public Set<BiTuple<NewA, NewB>> getResult() {\n-        return acc.finish();\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjg4MA==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363802880", "bodyText": "code style: map variable should end with Map.\ncontainers -> containerMap", "author": "ge0ffrey", "createdAt": "2020-01-07T15:28:13Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupByAccumulator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.bi;\n+\n+import java.io.Serializable;\n+import java.util.IdentityHashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.api.score.stream.bi.BiConstraintCollector;\n+import org.optaplanner.core.impl.score.stream.drools.common.BiTuple;\n+\n+final class DroolsBiGroupByAccumulator<A, B, ResultContainer, NewA, NewB> implements Serializable {\n+\n+    // Containers may be identical in type and contents, yet they should still not count as the same container.\n+    private final Map<ResultContainer, Long> containersInUse = new IdentityHashMap<>(0);\n+    // LinkedHashMap to maintain a consistent iteration order of resulting pairs.\n+    private final Map<NewA, ResultContainer> containers = new LinkedHashMap<>(0);", "originalCommit": "9bc5e1edb62f8054db54a3b9839a3d7e022f33d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02e8de11447d6920a9881f19acef8f93dc54cf49", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupByAccumulator.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupByAccumulator.java\ndeleted file mode 100644\nindex 59e12a19b..000000000\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupByAccumulator.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.optaplanner.core.impl.score.stream.drools.bi;\n-\n-import java.io.Serializable;\n-import java.util.IdentityHashMap;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedHashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.BiFunction;\n-import java.util.function.Function;\n-import java.util.function.Supplier;\n-\n-import org.optaplanner.core.api.function.TriFunction;\n-import org.optaplanner.core.api.score.stream.bi.BiConstraintCollector;\n-import org.optaplanner.core.impl.score.stream.drools.common.BiTuple;\n-\n-final class DroolsBiGroupByAccumulator<A, B, ResultContainer, NewA, NewB> implements Serializable {\n-\n-    // Containers may be identical in type and contents, yet they should still not count as the same container.\n-    private final Map<ResultContainer, Long> containersInUse = new IdentityHashMap<>(0);\n-    // LinkedHashMap to maintain a consistent iteration order of resulting pairs.\n-    private final Map<NewA, ResultContainer> containers = new LinkedHashMap<>(0);\n-    private final BiFunction<A, B, NewA> groupKeyMapping;\n-    private final Supplier<ResultContainer> supplier;\n-    private final TriFunction<ResultContainer, A, B, Runnable> accumulator;\n-    private final Function<ResultContainer, NewB> finisher;\n-    // Transient as Spotbugs complains otherwise (\"non-transient non-serializable instance field\").\n-    // It doesn't make sense to serialize this anyway, as it is recreated every time.\n-    private final transient Set<BiTuple<NewA, NewB>> result = new LinkedHashSet<>(0);\n-\n-    public DroolsBiGroupByAccumulator(BiFunction<A, B, NewA> groupKeyMapping,\n-            BiConstraintCollector<A, B, ResultContainer, NewB> collector) {\n-        this.groupKeyMapping = groupKeyMapping;\n-        this.supplier = collector.supplier();\n-        this.accumulator = collector.accumulator();\n-        this.finisher = collector.finisher();\n-    }\n-\n-    private static Long increment(Long count) {\n-        return count == null ? 1L : count + 1L;\n-    }\n-\n-    private static Long decrement(Long count) {\n-        return count == 1L ? null : count - 1L;\n-    }\n-\n-    public Runnable accumulate(A firstKey, B secondKey) {\n-        NewA key = groupKeyMapping.apply(firstKey, secondKey);\n-        ResultContainer container = containers.computeIfAbsent(key, __ -> supplier.get());\n-        Runnable undo = accumulator.apply(container, firstKey, secondKey);\n-        containersInUse.compute(container, (__, count) -> increment(count)); // Increment use counter.\n-        return () -> {\n-            undo.run();\n-            // Decrement use counter. If 0, container is ignored during finishing. Removes empty groups from results.\n-            Long currentCount = containersInUse.compute(container, (__, count) -> decrement(count));\n-            if (currentCount == null) {\n-                containers.remove(key);\n-            }\n-        };\n-    }\n-\n-    public Set<BiTuple<NewA, NewB>> finish() {\n-        result.clear();\n-        for (Map.Entry<NewA, ResultContainer> entry: containers.entrySet()) {\n-            ResultContainer container = entry.getValue();\n-            result.add(new BiTuple<>(entry.getKey(), finisher.apply(container)));\n-        }\n-        return result;\n-    }\n-}\n"}}, {"oid": "02e8de11447d6920a9881f19acef8f93dc54cf49", "url": "https://github.com/kiegroup/optaplanner/commit/02e8de11447d6920a9881f19acef8f93dc54cf49", "message": "GroupBy invoker gets renamed to Uni...", "committedDate": "2020-01-07T18:10:00Z", "type": "commit"}, {"oid": "ef1d86d2de2463873180dd502c641461208b66d7", "url": "https://github.com/kiegroup/optaplanner/commit/ef1d86d2de2463873180dd502c641461208b66d7", "message": "Implement a second groupBy()", "committedDate": "2020-01-07T18:10:00Z", "type": "commit"}, {"oid": "c352894f546c074ce6a7e8eb900f52fad18af813", "url": "https://github.com/kiegroup/optaplanner/commit/c352894f546c074ce6a7e8eb900f52fad18af813", "message": "Implement a final bi groupBy()", "committedDate": "2020-01-07T18:10:00Z", "type": "commit"}, {"oid": "be5513f55d1b21c59d158cefc2ebbf74f3f6805e", "url": "https://github.com/kiegroup/optaplanner/commit/be5513f55d1b21c59d158cefc2ebbf74f3f6805e", "message": "Add a forgotten operation", "committedDate": "2020-01-07T18:10:01Z", "type": "commit"}, {"oid": "7ab31d885dd7a987d76be7e10b35ed08ac0c9588", "url": "https://github.com/kiegroup/optaplanner/commit/7ab31d885dd7a987d76be7e10b35ed08ac0c9588", "message": "Resolve code review comments", "committedDate": "2020-01-07T18:10:01Z", "type": "commit"}, {"oid": "045a5fe8ae9a23bb541fcab37c607a65a18ad884", "url": "https://github.com/kiegroup/optaplanner/commit/045a5fe8ae9a23bb541fcab37c607a65a18ad884", "message": "Revapi fix", "committedDate": "2020-01-07T18:17:01Z", "type": "commit"}, {"oid": "045a5fe8ae9a23bb541fcab37c607a65a18ad884", "url": "https://github.com/kiegroup/optaplanner/commit/045a5fe8ae9a23bb541fcab37c607a65a18ad884", "message": "Revapi fix", "committedDate": "2020-01-07T18:17:01Z", "type": "forcePushed"}, {"oid": "65836e0ffaa510b5dfc300f09f037300482a28e4", "url": "https://github.com/kiegroup/optaplanner/commit/65836e0ffaa510b5dfc300f09f037300482a28e4", "message": "Fix cloud balancing benchmark", "committedDate": "2020-01-08T08:02:54Z", "type": "commit"}]}