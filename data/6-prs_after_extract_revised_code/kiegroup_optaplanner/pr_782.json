{"pr_number": 782, "pr_title": "PLANNER-1983 Final easy deprecations", "pr_createdAt": "2020-05-19T07:48:10Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/782", "timeline": [{"oid": "22d5d4272043c46427bbb3a078158696b31dddc0", "url": "https://github.com/kiegroup/optaplanner/commit/22d5d4272043c46427bbb3a078158696b31dddc0", "message": "Move variableListenerRef down", "committedDate": "2020-05-19T06:51:12Z", "type": "commit"}, {"oid": "73de7da561ece76c871014a2374d75c5accc1b3a", "url": "https://github.com/kiegroup/optaplanner/commit/73de7da561ece76c871014a2374d75c5accc1b3a", "message": "@ProblemFact... annotations moved one level up", "committedDate": "2020-05-19T06:57:30Z", "type": "commit"}, {"oid": "fd7fe1cae551027a4569e40b3ea2fb3f33047801", "url": "https://github.com/kiegroup/optaplanner/commit/fd7fe1cae551027a4569e40b3ea2fb3f33047801", "message": "Scanning annotated classes has been deprecated", "committedDate": "2020-05-19T07:29:37Z", "type": "commit"}, {"oid": "ddfc4102cf2df5fddf2c9a94f00df6337644b0c2", "url": "https://github.com/kiegroup/optaplanner/commit/ddfc4102cf2df5fddf2c9a94f00df6337644b0c2", "message": "Config deprecations", "committedDate": "2020-05-19T07:37:52Z", "type": "commit"}, {"oid": "e7fafd0fd2597e3f2ac7d8d66c091e650b9de4c6", "url": "https://github.com/kiegroup/optaplanner/commit/e7fafd0fd2597e3f2ac7d8d66c091e650b9de4c6", "message": "Deprecate kieSessionName", "committedDate": "2020-05-19T07:43:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNjU0NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427106545", "bodyText": "We should be careful here.\nIf for some reason we have to make 8 compatible with 7 tooling, we can not remove this.", "author": "triceo", "createdAt": "2020-05-19T08:04:01Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java", "diffHunk": "@@ -112,6 +111,7 @@\n     @XStreamConverter(KeyAsElementMapConverter.class)\n     protected Map<String, String> incrementalScoreCalculatorCustomProperties = null;\n \n+    @Deprecated(/* forRemoval = true */)\n     protected String ksessionName = null;", "originalCommit": "e7fafd0fd2597e3f2ac7d8d66c091e650b9de4c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MTczOA==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427381738", "bodyText": "Yea, I don't think we can deprecate this just yet. There's no good alternative today (maybe quarkus extension but still we can't deprecate kie-server in 7.x).\nPlease undeprecate, but add a \"// TODO remove for 8.0\"", "author": "ge0ffrey", "createdAt": "2020-05-19T15:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNjU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "dfaf171f5e60d54f1738fad191171653c8680a68", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java\nindex 4f92973c5..7c9f1713c 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/score/director/ScoreDirectorFactoryConfig.java\n\n@@ -111,6 +111,9 @@ public class ScoreDirectorFactoryConfig extends AbstractConfig<ScoreDirectorFact\n     @XStreamConverter(KeyAsElementMapConverter.class)\n     protected Map<String, String> incrementalScoreCalculatorCustomProperties = null;\n \n+    /**\n+     * @deprecated for removal\n+     */\n     @Deprecated(/* forRemoval = true */)\n     protected String ksessionName = null;\n     @XStreamOmitField\n"}}, {"oid": "dfaf171f5e60d54f1738fad191171653c8680a68", "url": "https://github.com/kiegroup/optaplanner/commit/dfaf171f5e60d54f1738fad191171653c8680a68", "message": "Add missing Javadoc tag", "committedDate": "2020-05-19T08:20:22Z", "type": "commit"}, {"oid": "965a4b7661b41fb1e4222e20f84164e9f39160ef", "url": "https://github.com/kiegroup/optaplanner/commit/965a4b7661b41fb1e4222e20f84164e9f39160ef", "message": "ScoreManager gets extra methods", "committedDate": "2020-05-19T08:36:27Z", "type": "commit"}, {"oid": "282697eab786a7ec70540a00ba087f2e1928c0a3", "url": "https://github.com/kiegroup/optaplanner/commit/282697eab786a7ec70540a00ba087f2e1928c0a3", "message": "More deprecations", "committedDate": "2020-05-19T08:59:45Z", "type": "commit"}, {"oid": "1a76a59c4d1f0bdd040bb90e6f7ef7620d10607a", "url": "https://github.com/kiegroup/optaplanner/commit/1a76a59c4d1f0bdd040bb90e6f7ef7620d10607a", "message": "Even more deprecations", "committedDate": "2020-05-19T09:19:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MDA3Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427160073", "bodyText": "New API. Technically, this is a break of bwd compatibility for the interface.\nPractically, no way to avoid it.", "author": "triceo", "createdAt": "2020-05-19T09:26:46Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java", "diffHunk": "@@ -61,4 +63,33 @@\n      */\n     void updateScore(Solution_ solution);\n \n+    /**\n+     * Returns the {@link Score} of the solution.\n+     * <p>\n+     * This is useful for generic code, which doesn't know the type of the {@link PlanningSolution} to retrieve the\n+     * {@link Score} from the solution easily.\n+     * <p>\n+     * This method is thread-safe.\n+     *\n+     * @return null if the {@link PlanningSolution} is still uninitialized\n+     */\n+    Score getScore(Solution_ solution);\n+\n+    /**\n+     * Returns a diagnostic text that explains the solution through the {@link ConstraintMatch} API to identify which\n+     * constraints or planning entities cause that score quality.\n+     * In case of an {@link Score#isFeasible() infeasible} solution, this can help diagnose the cause of that.\n+     * <p>\n+     * Do not parse this string.\n+     * Instead, to provide this information in a UI or a service, use {@link SolverFactory#getScoreDirectorFactory()}\n+     * to retrieve {@link ScoreDirector#getConstraintMatchTotalMap()} and {@link ScoreDirector#getIndictmentMap()}\n+     * and convert those into a domain specific API.\n+     * <p>\n+     * This method is thread-safe.\n+     *\n+     * @return null if {@link #getScore(Object)} returns null with the same solution\n+     * @see ScoreDirector#explainScore()\n+     */\n+    String explainScore(Solution_ solution);", "originalCommit": "1a76a59c4d1f0bdd040bb90e6f7ef7620d10607a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a046f600bdbb3b6ba8d6ccadb55f24269d295436", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java\nindex 43691ab8f..fcfa70171 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java\n\n@@ -61,19 +61,7 @@ public interface ScoreManager<Solution_> {\n      *\n      * @param solution never null\n      */\n-    void updateScore(Solution_ solution);\n-\n-    /**\n-     * Returns the {@link Score} of the solution.\n-     * <p>\n-     * This is useful for generic code, which doesn't know the type of the {@link PlanningSolution} to retrieve the\n-     * {@link Score} from the solution easily.\n-     * <p>\n-     * This method is thread-safe.\n-     *\n-     * @return null if the {@link PlanningSolution} is still uninitialized\n-     */\n-    Score getScore(Solution_ solution);\n+    Score updateScore(Solution_ solution);\n \n     /**\n      * Returns a diagnostic text that explains the solution through the {@link ConstraintMatch} API to identify which\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MDIwNw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427160207", "bodyText": "New API. Technically, this is a break of bwd compatibility for the interface.\nPractically, no way to avoid it.", "author": "triceo", "createdAt": "2020-05-19T09:26:57Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverJob.java", "diffHunk": "@@ -72,4 +73,14 @@\n      */\n     Solution_ getFinalBestSolution() throws InterruptedException, ExecutionException;\n \n+    /**\n+     * Returns the {@link Duration} spent solving since the last start.\n+     * If it hasn't started it yet, it returns {@link Duration#ZERO}.\n+     * If it hasn't ended yet, it returns the time between the last start and now.\n+     * If it has ended already, it returns the time between the last start and the ending.\n+     *\n+     * @return the {@link Duration} spent solving since the last (re)start, at least 0\n+     */\n+    Duration getTimeSpent();", "originalCommit": "1a76a59c4d1f0bdd040bb90e6f7ef7620d10607a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3OTc1MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427379751", "bodyText": "Maybe we should rename this method to getDurationSpent() or better yet, getSolvingDuration() Wdyt? Let's discuss on zulip.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MDIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgzODQ1Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427838457", "bodyText": "agreed on getSolvingDuration()", "author": "ge0ffrey", "createdAt": "2020-05-20T08:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MDIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "c0cf5a44cc2a61ef1f955b9ff5f98dc9d5bc1f61", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverJob.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverJob.java\nindex a7ef7a107..362c7665e 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverJob.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverJob.java\n\n@@ -81,6 +81,6 @@ public interface SolverJob<Solution_, ProblemId_> {\n      *\n      * @return the {@link Duration} spent solving since the last (re)start, at least 0\n      */\n-    Duration getTimeSpent();\n+    Duration getSolvingDuration();\n \n }\n"}}, {"oid": "3dbc04c8ac378b752447251499288a9eda64df8a", "url": "https://github.com/kiegroup/optaplanner/commit/3dbc04c8ac378b752447251499288a9eda64df8a", "message": "Fix nanotime usage", "committedDate": "2020-05-19T09:31:45Z", "type": "commit"}, {"oid": "4a60b89a4315978f6f06507feeff88d0c6e2bc73", "url": "https://github.com/kiegroup/optaplanner/commit/4a60b89a4315978f6f06507feeff88d0c6e2bc73", "message": "Hide things", "committedDate": "2020-05-19T09:33:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NjIyMA==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427166220", "bodyText": "I converted the class to use nanos instead of millis. No need not to use the precision, if we have it.\nAlso, I've hidden the fields, since they have getters and setters and this is not performance-sensitive code.", "author": "triceo", "createdAt": "2020-05-19T09:36:32Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/scope/DefaultSolverScope.java", "diffHunk": "@@ -47,15 +48,15 @@\n      */\n     protected Semaphore runnableThreadSemaphore = null;\n \n-    protected volatile Long startingSystemTimeMillis;\n-    protected volatile Long endingSystemTimeMillis;\n+    private volatile Long startingSystemTimeNanos;\n+    private volatile Long endingSystemTimeNanos;\n     protected long childThreadsScoreCalculationCount = 0;\n \n     protected Score startingInitializedScore;\n \n     protected volatile Solution_ bestSolution;\n     protected volatile Score bestScore;\n-    protected Long bestSolutionTimeMillis;\n+    private Long bestSolutionTimeNanos;", "originalCommit": "4a60b89a4315978f6f06507feeff88d0c6e2bc73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5NTU1Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427395557", "bodyText": "I 'd rather keep the millis to nanos refactor in a seperate PR. There are serious risks there.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NjIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "aa3ce52550f5b0cbabb32376fd00e647b4c853e6", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/scope/DefaultSolverScope.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/scope/DefaultSolverScope.java\nindex 7a83c7123..3bf95a6bd 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/scope/DefaultSolverScope.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/scope/DefaultSolverScope.java\n\n@@ -48,15 +47,15 @@ public class DefaultSolverScope<Solution_> {\n      */\n     protected Semaphore runnableThreadSemaphore = null;\n \n-    private volatile Long startingSystemTimeNanos;\n-    private volatile Long endingSystemTimeNanos;\n+    protected volatile Long startingSystemTimeMillis;\n+    protected volatile Long endingSystemTimeMillis;\n     protected long childThreadsScoreCalculationCount = 0;\n \n     protected Score startingInitializedScore;\n \n     protected volatile Solution_ bestSolution;\n     protected volatile Score bestScore;\n-    private Long bestSolutionTimeNanos;\n+    protected Long bestSolutionTimeMillis;\n \n     // ************************************************************************\n     // Constructors and simple getters/setters\n"}}, {"oid": "261a73efb6ac8cdc718be075034689a38b8a487f", "url": "https://github.com/kiegroup/optaplanner/commit/261a73efb6ac8cdc718be075034689a38b8a487f", "message": "Javadoc", "committedDate": "2020-05-19T09:41:33Z", "type": "commit"}, {"oid": "cd2feec5d178bde4edbf35f8ab1a25c45ca78888", "url": "https://github.com/kiegroup/optaplanner/commit/cd2feec5d178bde4edbf35f8ab1a25c45ca78888", "message": "Incorporate duplicated annotations", "committedDate": "2020-05-19T10:30:55Z", "type": "commit"}, {"oid": "0c7706305ef80a14f7d1f7dff7da3658fd9e0d3c", "url": "https://github.com/kiegroup/optaplanner/commit/0c7706305ef80a14f7d1f7dff7da3658fd9e0d3c", "message": "Make the docs correct", "committedDate": "2020-05-19T11:13:30Z", "type": "commit"}, {"oid": "717a55e146ab43e6a2d33a01e5ef34ec08d7d21d", "url": "https://github.com/kiegroup/optaplanner/commit/717a55e146ab43e6a2d33a01e5ef34ec08d7d21d", "message": "Fix typo", "committedDate": "2020-05-19T11:20:04Z", "type": "commit"}, {"oid": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "url": "https://github.com/kiegroup/optaplanner/commit/c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "message": "Fix whitespace issues", "committedDate": "2020-05-19T11:26:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NzUyMA==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427377520", "bodyText": "This doesn't calculate the score, but it only extracts it right?", "author": "ge0ffrey", "createdAt": "2020-05-19T15:06:49Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java", "diffHunk": "@@ -61,4 +63,33 @@\n      */\n     void updateScore(Solution_ solution);\n \n+    /**\n+     * Returns the {@link Score} of the solution.\n+     * <p>\n+     * This is useful for generic code, which doesn't know the type of the {@link PlanningSolution} to retrieve the\n+     * {@link Score} from the solution easily.\n+     * <p>\n+     * This method is thread-safe.\n+     *\n+     * @return null if the {@link PlanningSolution} is still uninitialized\n+     */\n+    Score getScore(Solution_ solution);", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0MTkyOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427841929", "bodyText": "Removed, make updateScore return Score", "author": "ge0ffrey", "createdAt": "2020-05-20T08:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NzUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "a046f600bdbb3b6ba8d6ccadb55f24269d295436", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java\nindex 43691ab8f..fcfa70171 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/ScoreManager.java\n\n@@ -61,19 +61,7 @@ public interface ScoreManager<Solution_> {\n      *\n      * @param solution never null\n      */\n-    void updateScore(Solution_ solution);\n-\n-    /**\n-     * Returns the {@link Score} of the solution.\n-     * <p>\n-     * This is useful for generic code, which doesn't know the type of the {@link PlanningSolution} to retrieve the\n-     * {@link Score} from the solution easily.\n-     * <p>\n-     * This method is thread-safe.\n-     *\n-     * @return null if the {@link PlanningSolution} is still uninitialized\n-     */\n-    Score getScore(Solution_ solution);\n+    Score updateScore(Solution_ solution);\n \n     /**\n      * Returns a diagnostic text that explains the solution through the {@link ConstraintMatch} API to identify which\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3ODY1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427378653", "bodyText": "copy paste bug: should be in favor of ScoreManager#getScore(...)", "author": "ge0ffrey", "createdAt": "2020-05-19T15:08:19Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/Solver.java", "diffHunk": "@@ -105,7 +109,9 @@\n      * This method is thread-safe.\n      *\n      * @return null if the {@link PlanningSolution} is still uninitialized\n+     * @deprecated in favor of {@link ScoreManager#explainScore(Object)}", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0830c0d71b6a141d965f08a3805326bcfa7e1256", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/solver/Solver.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/solver/Solver.java\nindex c9cc74661..9eadb0777 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/solver/Solver.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/solver/Solver.java\n\n@@ -109,7 +109,7 @@ public interface Solver<Solution_> {\n      * This method is thread-safe.\n      *\n      * @return null if the {@link PlanningSolution} is still uninitialized\n-     * @deprecated in favor of {@link ScoreManager#explainScore(Object)}\n+     * @deprecated in favor of {@link ScoreManager#getScore(Object)}\n      */\n     @Deprecated(/* forRemoval = true */)\n     Score getBestScore();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDIwMA==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427380200", "bodyText": "in favor of Quarkus extension or Spring Boot starter.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:10:25Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ReflectionsWorkaroundClasspathHelper.java", "diffHunk": "@@ -38,7 +38,10 @@\n /**\n  * Workaround for bug in {@link ClasspathHelper}.\n  * This workaround expires once https://github.com/ronmamo/reflections/pull/118 is fixed.\n+ * \n+ * @deprecated for removal.", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MjI2OA==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427782268", "bodyText": "I actually re-read the comment and this class may no longer be necessary as the PR in question has been merged.", "author": "triceo", "createdAt": "2020-05-20T06:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "0830c0d71b6a141d965f08a3805326bcfa7e1256", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ReflectionsWorkaroundClasspathHelper.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ReflectionsWorkaroundClasspathHelper.java\nindex 8ecbc9853..957d4ccd8 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ReflectionsWorkaroundClasspathHelper.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ReflectionsWorkaroundClasspathHelper.java\n\n@@ -39,7 +39,7 @@ import com.google.common.collect.Sets;\n  * Workaround for bug in {@link ClasspathHelper}.\n  * This workaround expires once https://github.com/ronmamo/reflections/pull/118 is fixed.\n  * \n- * @deprecated for removal.\n+ * @deprecated in favor of Quarkus extension or Spring Boot starter.\n  */\n @Deprecated(/* forRemoval = true */)\n public abstract class ReflectionsWorkaroundClasspathHelper {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDM5Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427380393", "bodyText": "in favor of Quarkus extension or Spring Boot starter.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:10:40Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ScanAnnotatedClassesConfig.java", "diffHunk": "@@ -37,7 +37,11 @@\n import com.thoughtworks.xstream.annotations.XStreamAlias;\n import com.thoughtworks.xstream.annotations.XStreamImplicit;\n \n+/**\n+ * @deprecated This functionality will be removed in the next major version of OptaPlanner.", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0830c0d71b6a141d965f08a3805326bcfa7e1256", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ScanAnnotatedClassesConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ScanAnnotatedClassesConfig.java\nindex 478ea1245..1f5429fcd 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ScanAnnotatedClassesConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/domain/ScanAnnotatedClassesConfig.java\n\n@@ -38,7 +38,8 @@ import com.thoughtworks.xstream.annotations.XStreamAlias;\n import com.thoughtworks.xstream.annotations.XStreamImplicit;\n \n /**\n- * @deprecated This functionality will be removed in the next major version of OptaPlanner.\n+ * @deprecated in favor of the Quarkus extension or Spring Boot starter which handle annotation scanning more\n+ *             efficiently.\n  */\n @XStreamAlias(\"scanAnnotatedClasses\")\n @Deprecated(/* forRemoval = true */)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MzQ2Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427383466", "bodyText": "deprecated in favor of the Quarkus extension or Spring Boot starter which handle annotation scanning more efficiently.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:14:40Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java", "diffHunk": "@@ -235,7 +235,11 @@ public static SolverConfig createFromXmlReader(Reader reader, ClassLoader classL\n     protected Integer moveThreadBufferSize = null;\n     protected Class<? extends ThreadFactory> threadFactoryClass = null;\n \n+    /**\n+     * @deprecated This functionality will be removed in the next major version of OptaPlanner.", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0830c0d71b6a141d965f08a3805326bcfa7e1256", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\nindex 07f476569..e0c937a97 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\n\n@@ -236,7 +236,8 @@ public class SolverConfig extends AbstractConfig<SolverConfig> {\n     protected Class<? extends ThreadFactory> threadFactoryClass = null;\n \n     /**\n-     * @deprecated This functionality will be removed in the next major version of OptaPlanner.\n+     * @deprecated in favor of the Quarkus extension or Spring Boot starter which handle annotation scanning more\n+     *             efficiently.\n      */\n     @XStreamAlias(\"scanAnnotatedClasses\")\n     @Deprecated(/* forRemoval = true */)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NTQzNg==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427385436", "bodyText": "deprecated in favor of the Quarkus extension or Spring Boot starter which handle annotation scanning more efficiently.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:17:15Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java", "diffHunk": "@@ -354,10 +358,18 @@ public void setThreadFactoryClass(Class<? extends ThreadFactory> threadFactoryCl\n         this.threadFactoryClass = threadFactoryClass;\n     }\n \n+    /**\n+     * @deprecated This functionality will be removed in the next major version of OptaPlanner.", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0830c0d71b6a141d965f08a3805326bcfa7e1256", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\nindex 07f476569..e0c937a97 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\n\n@@ -359,7 +360,8 @@ public class SolverConfig extends AbstractConfig<SolverConfig> {\n     }\n \n     /**\n-     * @deprecated This functionality will be removed in the next major version of OptaPlanner.\n+     * @deprecated in favor of the Quarkus extension or Spring Boot starter which handle annotation scanning more\n+     *             efficiently.\n      */\n     @Deprecated(/* forRemoval = true */)\n     public ScanAnnotatedClassesConfig getScanAnnotatedClassesConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NTQ4NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427385485", "bodyText": "deprecated in favor of the Quarkus extension or Spring Boot starter which handle annotation scanning more efficiently.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:17:19Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java", "diffHunk": "@@ -354,10 +358,18 @@ public void setThreadFactoryClass(Class<? extends ThreadFactory> threadFactoryCl\n         this.threadFactoryClass = threadFactoryClass;\n     }\n \n+    /**\n+     * @deprecated This functionality will be removed in the next major version of OptaPlanner.\n+     */\n+    @Deprecated(/* forRemoval = true */)\n     public ScanAnnotatedClassesConfig getScanAnnotatedClassesConfig() {\n         return scanAnnotatedClassesConfig;\n     }\n \n+    /**\n+     * @deprecated This functionality will be removed in the next major version of OptaPlanner.", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0830c0d71b6a141d965f08a3805326bcfa7e1256", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\nindex 07f476569..e0c937a97 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/solver/SolverConfig.java\n\n@@ -359,7 +360,8 @@ public class SolverConfig extends AbstractConfig<SolverConfig> {\n     }\n \n     /**\n-     * @deprecated This functionality will be removed in the next major version of OptaPlanner.\n+     * @deprecated in favor of the Quarkus extension or Spring Boot starter which handle annotation scanning more\n+     *             efficiently.\n      */\n     @Deprecated(/* forRemoval = true */)\n     public ScanAnnotatedClassesConfig getScanAnnotatedClassesConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NjM3Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427386377", "bodyText": "ok, so getScore() doesn't just extract it, but calculates it?\nWe can't have 2 methods that do exactly the same, so I guess updateScore() needs to be deprecated?", "author": "ge0ffrey", "createdAt": "2020-05-19T15:18:32Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java", "diffHunk": "@@ -38,10 +39,22 @@ public DefaultScoreManager(ScoreDirectorFactory<Solution_> scoreDirectorFactory)\n \n     @Override\n     public void updateScore(Solution_ solution) {\n+        getScore(solution);", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a046f600bdbb3b6ba8d6ccadb55f24269d295436", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java\nindex 74dac3ece..d0298af19 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java\n\n@@ -38,12 +38,7 @@ public class DefaultScoreManager<Solution_> implements ScoreManager<Solution_> {\n     }\n \n     @Override\n-    public void updateScore(Solution_ solution) {\n-        getScore(solution);\n-    }\n-\n-    @Override\n-    public Score getScore(Solution_ solution) {\n+    public Score updateScore(Solution_ solution) {\n         try (ScoreDirector<Solution_> scoreDirector = scoreDirectorFactory.buildScoreDirector()) {\n             scoreDirector.setWorkingSolution(solution);\n             return scoreDirector.calculateScore();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4Nzk2Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427387962", "bodyText": "This needs to be renamed to calculateScore().\nI would also deprecate updateScore() (unless we decide to just keep that and have it return the score).\nIt's surprising that getScore() or calculateScore also changes the Solution instance. Let's talk about this on zulip and bluejeans.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:20:34Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java", "diffHunk": "@@ -38,10 +39,22 @@ public DefaultScoreManager(ScoreDirectorFactory<Solution_> scoreDirectorFactory)\n \n     @Override\n     public void updateScore(Solution_ solution) {\n+        getScore(solution);\n+    }\n+\n+    @Override\n+    public Score getScore(Solution_ solution) {", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a046f600bdbb3b6ba8d6ccadb55f24269d295436", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java\nindex 74dac3ece..d0298af19 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/DefaultScoreManager.java\n\n@@ -38,12 +38,7 @@ public class DefaultScoreManager<Solution_> implements ScoreManager<Solution_> {\n     }\n \n     @Override\n-    public void updateScore(Solution_ solution) {\n-        getScore(solution);\n-    }\n-\n-    @Override\n-    public Score getScore(Solution_ solution) {\n+    public Score updateScore(Solution_ solution) {\n         try (ScoreDirector<Solution_> scoreDirector = scoreDirectorFactory.buildScoreDirector()) {\n             scoreDirector.setWorkingSolution(solution);\n             return scoreDirector.calculateScore();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5MDAyMw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427390023", "bodyText": "This is dangerous, from https://www.geeksforgeeks.org/java-system-nanotime-vs-system-currenttimemillis/\nCons:\nThe result reflected doesn\u2019t have any fixed reference point. According to Java documentation,\n\nThe value returned represents nanoseconds since some fixed\nbut arbitrary time (perhaps in the future, so values may be negative).\n\nLess accurate. This method provides nanosecond precision, but not necessarily nanosecond accuracy. No guarantees are made about how frequently values change.\nDepending on the system, it can take more than 100 cpu cycles to execute.\nNot thread safe. May return erroneous results if used between more than one threads.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:23:12Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolver.java", "diffHunk": "@@ -125,17 +126,17 @@ public String explainBestScore() {\n \n     @Override\n     public long getTimeMillisSpent() {\n-        Long startingSystemTimeMillis = solverScope.getStartingSystemTimeMillis();\n-        if (startingSystemTimeMillis == null) {\n+        Long startingSystemTimeNanos = solverScope.getStartingSystemTimeNanos();\n+        if (startingSystemTimeNanos == null) {\n             // The solver hasn't started yet\n             return 0L;\n         }\n-        Long endingSystemTimeMillis = solverScope.getEndingSystemTimeMillis();\n-        if (endingSystemTimeMillis == null) {\n+        Long endingSystemTimeNanos = solverScope.getEndingSystemTimeNanos();\n+        if (endingSystemTimeNanos == null) {\n             // The solver hasn't ended yet\n-            endingSystemTimeMillis = System.currentTimeMillis();\n+            endingSystemTimeNanos = System.nanoTime();", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5MzYyMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427393621", "bodyText": "Also, a Long can hold about 4 000 000 000 000 000 000 nanos.\nSo 4 000 000 000 seconds. (think milli, micro, nano)\nSo 46296 days. So 126 years. This means OptaPlanner might have a Y2K bug after 2096 (the epoch starts in 1970).\nOk, this is less important, but the previous comment highlights some risks. I don't think this change should be part of this PR, it should be in a seperate PR.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5MDAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "aa3ce52550f5b0cbabb32376fd00e647b4c853e6", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolver.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolver.java\nindex d0cf1cdd2..afdd53212 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolver.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolver.java\n\n@@ -126,17 +125,17 @@ public class DefaultSolver<Solution_> extends AbstractSolver<Solution_> {\n \n     @Override\n     public long getTimeMillisSpent() {\n-        Long startingSystemTimeNanos = solverScope.getStartingSystemTimeNanos();\n-        if (startingSystemTimeNanos == null) {\n+        Long startingSystemTimeMillis = solverScope.getStartingSystemTimeMillis();\n+        if (startingSystemTimeMillis == null) {\n             // The solver hasn't started yet\n             return 0L;\n         }\n-        Long endingSystemTimeNanos = solverScope.getEndingSystemTimeNanos();\n-        if (endingSystemTimeNanos == null) {\n+        Long endingSystemTimeMillis = solverScope.getEndingSystemTimeMillis();\n+        if (endingSystemTimeMillis == null) {\n             // The solver hasn't ended yet\n-            endingSystemTimeNanos = System.nanoTime();\n+            endingSystemTimeMillis = System.currentTimeMillis();\n         }\n-        return Duration.ofNanos(endingSystemTimeNanos - startingSystemTimeNanos).toMillis();\n+        return endingSystemTimeMillis - startingSystemTimeMillis;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5MzgwNw==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427393807", "bodyText": "typo impossile", "author": "ge0ffrey", "createdAt": "2020-05-19T15:28:05Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -61,7 +63,11 @@ public DefaultSolverJob(\n             BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler) {\n         this.solverManager = solverManager;\n         this.problemId = problemId;\n-        this.solver = solver;\n+        if (!(solver instanceof DefaultSolver)) {\n+            throw new IllegalStateException(\n+                    \"Impossile state: solver is not instance of \" + DefaultSolver.class.getSimpleName() + \".\");", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0830c0d71b6a141d965f08a3805326bcfa7e1256", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java\nindex 54ef59091..799719c3d 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java\n\n@@ -64,8 +64,8 @@ public final class DefaultSolverJob<Solution_, ProblemId_> implements SolverJob<\n         this.solverManager = solverManager;\n         this.problemId = problemId;\n         if (!(solver instanceof DefaultSolver)) {\n-            throw new IllegalStateException(\n-                    \"Impossile state: solver is not instance of \" + DefaultSolver.class.getSimpleName() + \".\");\n+            throw new IllegalStateException(\"Impossible state: solver is not instance of \" +\n+                    DefaultSolver.class.getSimpleName() + \".\");\n         }\n         this.solver = (DefaultSolver<Solution_>) solver;\n         this.problemFinder = problemFinder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5OTY2NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/782#discussion_r427399665", "bodyText": "Do we have a testdata unit test that still uses these deprecated ProblemFactCollectionProperty? (Including a // TODO remove in 8.0)\nAlmost all of our users use this, many won't refactor quickly. We need to make sure this keeps working during the course of the 7.x time.", "author": "ge0ffrey", "createdAt": "2020-05-19T15:36:17Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/solution/drools/ProblemFactCollectionProperty.java", "diffHunk": "@@ -40,10 +40,11 @@\n  * Do not annotate {@link PlanningEntity planning entities} as problem facts:\n  * they are automatically available as facts for {@link ConstraintFactory#from(Class)} or DRL.\n  *\n- * @see ProblemFactProperty\n+ * @deprecated In favor of {@link org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty}.\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)\n+@Deprecated(/* forRemoval = true */)\n public @interface ProblemFactCollectionProperty {", "originalCommit": "c17c6ad7d8df26b8508f20ac4194f9a2d0f25a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "39b7e601fa14242d0c32b58f78864a9b00c4310f", "url": "https://github.com/kiegroup/optaplanner/commit/39b7e601fa14242d0c32b58f78864a9b00c4310f", "message": "Revert \"Deprecate kieSessionName\"\n\nThis reverts commit e7fafd0f", "committedDate": "2020-05-20T06:46:38Z", "type": "commit"}, {"oid": "aa3ce52550f5b0cbabb32376fd00e647b4c853e6", "url": "https://github.com/kiegroup/optaplanner/commit/aa3ce52550f5b0cbabb32376fd00e647b4c853e6", "message": "Revert the millis to nanos change", "committedDate": "2020-05-20T06:53:36Z", "type": "commit"}, {"oid": "0830c0d71b6a141d965f08a3805326bcfa7e1256", "url": "https://github.com/kiegroup/optaplanner/commit/0830c0d71b6a141d965f08a3805326bcfa7e1256", "message": "Typos and wording changes", "committedDate": "2020-05-20T07:02:15Z", "type": "commit"}, {"oid": "4888103b2ebe933d458550dedabaee850eac9704", "url": "https://github.com/kiegroup/optaplanner/commit/4888103b2ebe933d458550dedabaee850eac9704", "message": "Add test for deprecated annotations", "committedDate": "2020-05-20T07:07:31Z", "type": "commit"}, {"oid": "c0cf5a44cc2a61ef1f955b9ff5f98dc9d5bc1f61", "url": "https://github.com/kiegroup/optaplanner/commit/c0cf5a44cc2a61ef1f955b9ff5f98dc9d5bc1f61", "message": "getTimeSpent() renamed to getSolvingDuration()", "committedDate": "2020-05-20T09:02:56Z", "type": "commit"}, {"oid": "a046f600bdbb3b6ba8d6ccadb55f24269d295436", "url": "https://github.com/kiegroup/optaplanner/commit/a046f600bdbb3b6ba8d6ccadb55f24269d295436", "message": "Final deprecations", "committedDate": "2020-05-20T09:08:32Z", "type": "commit"}, {"oid": "6874dfa65a2dce2dd0cff4d805a5d2a13df7a700", "url": "https://github.com/kiegroup/optaplanner/commit/6874dfa65a2dce2dd0cff4d805a5d2a13df7a700", "message": "Fix Revapi", "committedDate": "2020-05-20T09:10:13Z", "type": "commit"}]}