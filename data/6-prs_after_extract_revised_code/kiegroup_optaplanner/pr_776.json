{"pr_number": 776, "pr_title": "PLANNER-1978 Score-related deprecations", "pr_createdAt": "2020-05-12T11:39:59Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/776", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDQ4Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423674483", "bodyText": "I was able to replace methods on the individual Score implementations with this one.", "author": "triceo", "createdAt": "2020-05-12T11:56:02Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -60,15 +63,22 @@\n      * For example {@code -7init/0hard/-8soft} returns {@code 0hard/-8soft}.\n      *\n      * @return equal score except that {@link #getInitScore()} is {@code 0}.\n+     * @deprecated Use {@link #withInitScore(int)} with 0 as the argument.\n      */\n-    Score_ toInitializedScore();\n+    @Deprecated\n+    default Score_ toInitializedScore() {\n+        if (isSolutionInitialized()) {\n+            return (Score_) this;\n+        } else {\n+            return withInitScore(0);\n+        }\n+    }", "originalCommit": "cd2c6a9b7806a20370b5288379d60fe2d318b088", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db27a3612e13e6c7c647dc7608f24b634db4f29", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\nindex 6cfc2643d6..4a70a15dc9 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\n\n@@ -63,22 +63,15 @@ public interface Score<Score_ extends Score> extends Comparable<Score_> {\n      * For example {@code -7init/0hard/-8soft} returns {@code 0hard/-8soft}.\n      *\n      * @return equal score except that {@link #getInitScore()} is {@code 0}.\n-     * @deprecated Use {@link #withInitScore(int)} with 0 as the argument.\n      */\n-    @Deprecated\n-    default Score_ toInitializedScore() {\n-        if (isSolutionInitialized()) {\n-            return (Score_) this;\n-        } else {\n-            return withInitScore(0);\n-        }\n-    }\n+    Score_ toInitializedScore();\n \n     /**\n      * For example {@code 0hard/-8soft} with {@code -7} returns {@code -7init/0hard/-8soft}.\n      *\n      * @param newInitScore always negative (except in statistical calculations), 0 if all planning variables are initialized\n      * @return equals score except that {@link #getInitScore()} is set to {@code newInitScore}\n+     * @throws IllegalStateException if the original {@link #getInitScore()} is not 0\n      */\n     Score_ withInitScore(int newInitScore);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDYzMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423674631", "bodyText": "Noteworthy, I anticipate comments here.", "author": "triceo", "createdAt": "2020-05-12T11:56:22Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -155,6 +165,22 @@\n      */\n     boolean isCompatibleArithmeticArgument(Score otherScore);\n \n+    /**\n+     * A {@link PlanningSolution} is feasible if it has no broken hard constraints\n+     * and {@link #isSolutionInitialized()} is true.\n+     *\n+     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible.\n+     *\n+     * @return true if the hard score is 0 or higher and the {@link #getInitScore()} is 0.\n+     */\n+    default boolean isFeasible() {\n+        /*\n+         * This exception will only be thrown for custom scores that did not implement FeasibilityScore.\n+         * TODO Safe to remove this default implementation once FeasibilityScore has been removed in 8.0.\n+         */\n+        throw new UnsupportedOperationException();\n+    }", "originalCommit": "cd2c6a9b7806a20370b5288379d60fe2d318b088", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNDcwMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423814701", "bodyText": "I am fine with this approach. When I added toShortString() in FEB 2017 I should have probably done it this way too with a default method until 8.0 is.\nPlease add this in the list of PLANNER-750 TODO's, to make this method abstract again.", "author": "ge0ffrey", "createdAt": "2020-05-12T15:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4664976d20074526600c10ae2b99bd39895c5572", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\nindex 6cfc2643d6..5a5d0dee61 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\n\n@@ -169,7 +169,8 @@ public interface Score<Score_ extends Score> extends Comparable<Score_> {\n      * A {@link PlanningSolution} is feasible if it has no broken hard constraints\n      * and {@link #isSolutionInitialized()} is true.\n      *\n-     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible.\n+     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible,\n+     * if their {@link #getInitScore()} is 0.\n      *\n      * @return true if the hard score is 0 or higher and the {@link #getInitScore()} is 0.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDg1NA==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423674854", "bodyText": "Technically this is a backwards incompatible change. Used to throw, doesn't anymore. I think it should be fine.", "author": "triceo", "createdAt": "2020-05-12T11:56:48Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -60,15 +63,22 @@\n      * For example {@code -7init/0hard/-8soft} returns {@code 0hard/-8soft}.\n      *\n      * @return equal score except that {@link #getInitScore()} is {@code 0}.\n+     * @deprecated Use {@link #withInitScore(int)} with 0 as the argument.\n      */\n-    Score_ toInitializedScore();\n+    @Deprecated\n+    default Score_ toInitializedScore() {\n+        if (isSolutionInitialized()) {\n+            return (Score_) this;\n+        } else {\n+            return withInitScore(0);\n+        }\n+    }\n \n     /**\n      * For example {@code 0hard/-8soft} with {@code -7} returns {@code -7init/0hard/-8soft}.\n      *\n      * @param newInitScore always negative (except in statistical calculations), 0 if all planning variables are initialized\n      * @return equals score except that {@link #getInitScore()} is set to {@code newInitScore}\n-     * @throws IllegalStateException if the original {@link #getInitScore()} is not 0", "originalCommit": "cd2c6a9b7806a20370b5288379d60fe2d318b088", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMDM3OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423810379", "bodyText": "EasyScoreDirector and IncrementalScoreDirector should fail fast if the EasyScoreCalculator etc return a Score with a non zero initScore. Before they did, now they don't I believe.", "author": "ge0ffrey", "createdAt": "2020-05-12T15:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMTI1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423811253", "bodyText": "I'd add a fail-fast check in both those directors, if the score returned by calculateScore() has a non-zero initScore.", "author": "ge0ffrey", "createdAt": "2020-05-12T15:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3NDg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "8db27a3612e13e6c7c647dc7608f24b634db4f29", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\nindex 6cfc2643d6..4a70a15dc9 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\n\n@@ -63,22 +63,15 @@ public interface Score<Score_ extends Score> extends Comparable<Score_> {\n      * For example {@code -7init/0hard/-8soft} returns {@code 0hard/-8soft}.\n      *\n      * @return equal score except that {@link #getInitScore()} is {@code 0}.\n-     * @deprecated Use {@link #withInitScore(int)} with 0 as the argument.\n      */\n-    @Deprecated\n-    default Score_ toInitializedScore() {\n-        if (isSolutionInitialized()) {\n-            return (Score_) this;\n-        } else {\n-            return withInitScore(0);\n-        }\n-    }\n+    Score_ toInitializedScore();\n \n     /**\n      * For example {@code 0hard/-8soft} with {@code -7} returns {@code -7init/0hard/-8soft}.\n      *\n      * @param newInitScore always negative (except in statistical calculations), 0 if all planning variables are initialized\n      * @return equals score except that {@link #getInitScore()} is set to {@code newInitScore}\n+     * @throws IllegalStateException if the original {@link #getInitScore()} is not 0\n      */\n     Score_ withInitScore(int newInitScore);\n \n"}}, {"oid": "a7ebb05d5d6c7a0712a1ba35c41f8d98c48a9cc8", "url": "https://github.com/kiegroup/optaplanner/commit/a7ebb05d5d6c7a0712a1ba35c41f8d98c48a9cc8", "message": "Fix compilation", "committedDate": "2020-05-12T11:57:56Z", "type": "forcePushed"}, {"oid": "8db27a3612e13e6c7c647dc7608f24b634db4f29", "url": "https://github.com/kiegroup/optaplanner/commit/8db27a3612e13e6c7c647dc7608f24b634db4f29", "message": "Deprecate FeasibilityScore", "committedDate": "2020-05-12T12:04:14Z", "type": "commit"}, {"oid": "4a2d00bbbef0d8a9111da71e558804f3db00ac99", "url": "https://github.com/kiegroup/optaplanner/commit/4a2d00bbbef0d8a9111da71e558804f3db00ac99", "message": "Remove FeasibilityScoreDefinition", "committedDate": "2020-05-12T12:04:30Z", "type": "commit"}, {"oid": "646b73a7205189ae50b3b06b1724296d76d4b558", "url": "https://github.com/kiegroup/optaplanner/commit/646b73a7205189ae50b3b06b1724296d76d4b558", "message": "toInitializedScore() is deprecated", "committedDate": "2020-05-12T12:04:31Z", "type": "commit"}, {"oid": "8f0cc118f0527dfb90a5806e48f77c4506884997", "url": "https://github.com/kiegroup/optaplanner/commit/8f0cc118f0527dfb90a5806e48f77c4506884997", "message": "Deprecate various comparators", "committedDate": "2020-05-12T12:04:31Z", "type": "commit"}, {"oid": "8f0cc118f0527dfb90a5806e48f77c4506884997", "url": "https://github.com/kiegroup/optaplanner/commit/8f0cc118f0527dfb90a5806e48f77c4506884997", "message": "Deprecate various comparators", "committedDate": "2020-05-12T12:04:31Z", "type": "forcePushed"}, {"oid": "55296c27897b7a14a9fd8a1791953133ead2d9b3", "url": "https://github.com/kiegroup/optaplanner/commit/55296c27897b7a14a9fd8a1791953133ead2d9b3", "message": "Fix Sonar code smell", "committedDate": "2020-05-12T12:49:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMjE1MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423812151", "bodyText": "not sure if it's worth adding, but \"(unless their {@link #getInitScore()} isn't 0)\"", "author": "ge0ffrey", "createdAt": "2020-05-12T15:09:40Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java", "diffHunk": "@@ -155,6 +165,22 @@\n      */\n     boolean isCompatibleArithmeticArgument(Score otherScore);\n \n+    /**\n+     * A {@link PlanningSolution} is feasible if it has no broken hard constraints\n+     * and {@link #isSolutionInitialized()} is true.\n+     *\n+     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible.", "originalCommit": "55296c27897b7a14a9fd8a1791953133ead2d9b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4664976d20074526600c10ae2b99bd39895c5572", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\nindex 6cfc2643d6..5a5d0dee61 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/Score.java\n\n@@ -169,7 +169,8 @@ public interface Score<Score_ extends Score> extends Comparable<Score_> {\n      * A {@link PlanningSolution} is feasible if it has no broken hard constraints\n      * and {@link #isSolutionInitialized()} is true.\n      *\n-     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible.\n+     * Simple scores ({@link SimpleScore}, {@link SimpleLongScore}, {@link SimpleBigDecimalScore}) are always feasible,\n+     * if their {@link #getInitScore()} is 0.\n      *\n      * @return true if the hard score is 0 or higher and the {@link #getInitScore()} is 0.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNzAyNw==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423817027", "bodyText": "\"it is trivial to implement\" says the rocket engineer on how to build a V2 missle :)\nMaybe mention how to build a comparator on natural comparison? Especially in the upgrade recipe, to save users from have to look that up on SO.", "author": "ge0ffrey", "createdAt": "2020-05-12T15:16:02Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/comparator/NaturalScoreComparator.java", "diffHunk": "@@ -23,7 +23,10 @@\n \n /**\n  * Compares by the natural order of {@link Score}s.\n+ * \n+ * @deprecated If you need this, it is trivial to implement.", "originalCommit": "55296c27897b7a14a9fd8a1791953133ead2d9b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxODYzOA==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423818638", "bodyText": "Ah, its just Comparable::compareTo apparently?", "author": "ge0ffrey", "createdAt": "2020-05-12T15:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNzAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "159409465003138be0c494ea745970ed2152f3fe", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/comparator/NaturalScoreComparator.java b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/comparator/NaturalScoreComparator.java\nindex 5247210e6f..f2ad0e9ee0 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/api/score/comparator/NaturalScoreComparator.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/api/score/comparator/NaturalScoreComparator.java\n\n@@ -18,13 +18,14 @@ package org.optaplanner.core.api.score.comparator;\n \n import java.io.Serializable;\n import java.util.Comparator;\n+import java.util.function.Function;\n \n import org.optaplanner.core.api.score.Score;\n \n /**\n  * Compares by the natural order of {@link Score}s.\n  * \n- * @deprecated If you need this, it is trivial to implement.\n+ * @deprecated If you need this, it is trivial to implement via {@link Comparator#comparing(Function)}.\n  */\n @Deprecated(/* forRemoval = true */)\n public class NaturalScoreComparator implements Comparator<Score>, Serializable {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxOTcyNg==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423819726", "bodyText": "AbstractScoreDefinition implements ScoreDefinition, no need to mention it twice. Remove the \"implements\".\nSame in other files.", "author": "ge0ffrey", "createdAt": "2020-05-12T15:19:38Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/hardmediumsoft/HardMediumSoftScoreDefinition.java", "diffHunk": "@@ -21,11 +21,13 @@\n import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;\n import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;\n import org.optaplanner.core.config.score.trend.InitializingScoreTrendLevel;\n-import org.optaplanner.core.impl.score.definition.AbstractFeasibilityScoreDefinition;\n+import org.optaplanner.core.impl.score.definition.AbstractScoreDefinition;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n import org.optaplanner.core.impl.score.inliner.ScoreInliner;\n import org.optaplanner.core.impl.score.trend.InitializingScoreTrend;\n \n-public class HardMediumSoftScoreDefinition extends AbstractFeasibilityScoreDefinition<HardMediumSoftScore> {\n+public class HardMediumSoftScoreDefinition extends AbstractScoreDefinition<HardMediumSoftScore>\n+        implements ScoreDefinition<HardMediumSoftScore> {", "originalCommit": "55296c27897b7a14a9fd8a1791953133ead2d9b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f229ff0b7311b4f18da776f5c361ca3a2dfd492", "chunk": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/hardmediumsoft/HardMediumSoftScoreDefinition.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/hardmediumsoft/HardMediumSoftScoreDefinition.java\nindex d62ad9c013..d3f9f4f7d0 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/hardmediumsoft/HardMediumSoftScoreDefinition.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/score/buildin/hardmediumsoft/HardMediumSoftScoreDefinition.java\n\n@@ -22,12 +22,10 @@ import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore\n import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;\n import org.optaplanner.core.config.score.trend.InitializingScoreTrendLevel;\n import org.optaplanner.core.impl.score.definition.AbstractScoreDefinition;\n-import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n import org.optaplanner.core.impl.score.inliner.ScoreInliner;\n import org.optaplanner.core.impl.score.trend.InitializingScoreTrend;\n \n-public class HardMediumSoftScoreDefinition extends AbstractScoreDefinition<HardMediumSoftScore>\n-        implements ScoreDefinition<HardMediumSoftScore> {\n+public class HardMediumSoftScoreDefinition extends AbstractScoreDefinition<HardMediumSoftScore> {\n \n     public HardMediumSoftScoreDefinition() {\n         super(new String[] { \"hard score\", \"medium score\", \"soft score\" });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMDQ1Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/776#discussion_r423820457", "bodyText": "same here, AbstractScoreDefinition already implements it", "author": "ge0ffrey", "createdAt": "2020-05-12T15:20:33Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/definition/AbstractBendableScoreDefinition.java", "diffHunk": "@@ -18,8 +18,8 @@\n \n import org.optaplanner.core.api.score.FeasibilityScore;\n \n-public abstract class AbstractBendableScoreDefinition<S extends FeasibilityScore<S>>\n-        extends AbstractFeasibilityScoreDefinition<S> {\n+public abstract class AbstractBendableScoreDefinition<S extends FeasibilityScore<S>> extends AbstractScoreDefinition<S>\n+        implements ScoreDefinition<S> {", "originalCommit": "55296c27897b7a14a9fd8a1791953133ead2d9b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "4664976d20074526600c10ae2b99bd39895c5572", "url": "https://github.com/kiegroup/optaplanner/commit/4664976d20074526600c10ae2b99bd39895c5572", "message": "Fix SimpleScore feasibility", "committedDate": "2020-05-13T06:00:54Z", "type": "commit"}, {"oid": "159409465003138be0c494ea745970ed2152f3fe", "url": "https://github.com/kiegroup/optaplanner/commit/159409465003138be0c494ea745970ed2152f3fe", "message": "Better deprecation message for Comparators", "committedDate": "2020-05-13T06:03:31Z", "type": "commit"}, {"oid": "2f229ff0b7311b4f18da776f5c361ca3a2dfd492", "url": "https://github.com/kiegroup/optaplanner/commit/2f229ff0b7311b4f18da776f5c361ca3a2dfd492", "message": "AbstractScoreDefinition already implements ScoreDefinition", "committedDate": "2020-05-13T06:07:10Z", "type": "commit"}, {"oid": "500f5051cda3207421ad2f9a2eec681cc9454989", "url": "https://github.com/kiegroup/optaplanner/commit/500f5051cda3207421ad2f9a2eec681cc9454989", "message": "Restore fail fast in score directors", "committedDate": "2020-05-13T06:15:40Z", "type": "commit"}]}