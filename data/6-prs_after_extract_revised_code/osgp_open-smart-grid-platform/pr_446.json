{"pr_number": 446, "pr_title": "Solving SonarQube issues", "pr_createdAt": "2020-10-06T07:29:28Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/446", "timeline": [{"oid": "4c5b126734839898ad7a7183e1a211b9a3ec3b04", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4c5b126734839898ad7a7183e1a211b9a3ec3b04", "message": "replaced lambda with private method\n\nlambda expression was too long, placing it in a seperate method makes it more readable", "committedDate": "2020-10-01T09:12:57Z", "type": "commit"}, {"oid": "b72d605362cf83f30864e3349355d979259d3b7e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b72d605362cf83f30864e3349355d979259d3b7e", "message": "Replaced anonymous method with private method\n\nanonymous method was too long, making the method, however small, unreadable. Also suppressed a small duplicate code.", "committedDate": "2020-10-01T09:36:01Z", "type": "commit"}, {"oid": "245d304f21d625383667d4c2ab9a37726721a24f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/245d304f21d625383667d4c2ab9a37726721a24f", "message": "Solved static base member being accessed from derived class\n\nIn 5 files where SYNCHRONIZATION_ALWAYS from AbstractPlatformTransactionManager was used, but was called from it's derived class JpaTransactionManager.", "committedDate": "2020-10-01T13:53:32Z", "type": "commit"}, {"oid": "ae3df0c2bc0c4c5a2a3b61d66cacb5ff82325c9e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ae3df0c2bc0c4c5a2a3b61d66cacb5ff82325c9e", "message": "Suppressed return null issues\n\nIn the file there were 2 instances of returning null rather than an empty list. The reason for this was that the object(s) used to fill the list couldn't be made, making an empty list misleading", "committedDate": "2020-10-01T14:03:40Z", "type": "commit"}, {"oid": "12b079db8330edb667422aff2c3992c6687bede4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/12b079db8330edb667422aff2c3992c6687bede4", "message": "fixed argument not being used\n\nThe last argument in the string builder was not being used. This was because the brackets for the third argument were missing. Added brackets to solve the issue.", "committedDate": "2020-10-01T14:05:48Z", "type": "commit"}, {"oid": "96e60de5723dc60688832536c08bcd1aa6c52c95", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/96e60de5723dc60688832536c08bcd1aa6c52c95", "message": "unused assignment removed\n\nremoved an unused assignment. listOfObvjectArrays is not used after being set to null, making it never used. Also the initial setting is from a query making it useless to empty it", "committedDate": "2020-10-01T14:19:25Z", "type": "commit"}, {"oid": "dafd32e49adc664b8244b1814f7707face656223", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/dafd32e49adc664b8244b1814f7707face656223", "message": "suppressed several null returns\n\nreason for suppressing is given at each specific point, but generally there is no list that should be returned, regardless of the amount of elements, making null the most logical return value", "committedDate": "2020-10-01T14:38:38Z", "type": "commit"}, {"oid": "5e579938146e585390b9bcd48ca0a7d32d9e32c0", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5e579938146e585390b9bcd48ca0a7d32d9e32c0", "message": "Fixed several SonarQube issues\n\nOne main issue was with errors being thrown within a catch, and then being catched again and send to a method. I changed it so the first catch calls the method with the new exception. This is also explained in a comment in DeviceManagerEndpoint. Due to the amount of occurences I felt that I needed to explain what I did and why in case there is a good reason for doing it the way it was done", "committedDate": "2020-10-08T07:53:46Z", "type": "commit"}, {"oid": "efd643122af2a1506dea61b11fbcb64190465964", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/efd643122af2a1506dea61b11fbcb64190465964", "message": "More SonarQube fixes\n\nMost fixes are simple and / documented. In ValidationException the set is simplified, as the old declaration was unnecessarily complicated", "committedDate": "2020-10-08T11:57:48Z", "type": "commit"}, {"oid": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6f641c2708d6e7246ba563ab38e1bee00635e0cd", "message": "revert a change\n\napperantly the previous way of solving the SonarQube issue caused other issues at build, therefor the change is reverted and suppressed", "committedDate": "2020-10-08T12:18:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzOTQ5OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508239498", "bodyText": "'This is the correct way of doing it' is not an explanation for suppressing a warning.\nif (LOGGER.isInfoEnabled()) {\nLOGGER.info(\"Initializing Cron Trigger bean with cron expression {}.\", this.cronExpression());\n}\nShould be the way to go if this.cronExpression() is a expensive method. So if you want to suppress the warning, you should say something about the complexity of the method called.", "author": "robindenadel", "createdAt": "2020-10-20T06:29:30Z", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java", "diffHunk": "@@ -61,17 +60,20 @@\n     @Resource\n     private Environment environment;\n \n-    @Autowired\n-    private CommunicationMonitoringTask communicationMonitoringTask;\n-\n+    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it.", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e56e97dbdb8eed3f4a4bfc528cc842a9bd5dc26", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java b/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\nindex b2f6ca94fe..486fa105fb 100644\n--- a/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\n+++ b/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\n\n@@ -60,7 +61,14 @@ public class CommunicationMonitoringConfig extends AbstractConfig {\n     @Resource\n     private Environment environment;\n \n-    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it.\n+    // suppress warning about field being autowired for class rather than the method it is used in. The calling of\n+    // the method might not be able to provide CommunicationMonitoringTask as parameter.\n+    @SuppressWarnings(\"squid:S3305\")\n+    @Autowired\n+    private CommunicationMonitoringTask communicationMonitoringTask;\n+\n+    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it. the\n+    // this.cronExpression() expression is not very complex, making it not necessary to check before calling it.\n     @SuppressWarnings(\"squid:S2629\")\n     @Bean\n     public CronTrigger communicationMonitoringTaskCronTrigger() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0MDgzMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508240830", "bodyText": "so make communicationMonitoringEnabled a boolean method instead of suppressing the warning.", "author": "robindenadel", "createdAt": "2020-10-20T06:32:24Z", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java", "diffHunk": "@@ -61,17 +60,20 @@\n     @Resource\n     private Environment environment;\n \n-    @Autowired\n-    private CommunicationMonitoringTask communicationMonitoringTask;\n-\n+    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it.\n+    @SuppressWarnings(\"squid:S2629\")\n     @Bean\n     public CronTrigger communicationMonitoringTaskCronTrigger() {\n+\n         LOGGER.info(\"Initializing Cron Trigger bean with cron expression {}.\", this.cronExpression());\n         return new CronTrigger(this.cronExpression());\n     }\n \n+    // suppress warning about using method for boolean in if. The method can only return a boolean, and not a null\n+    // value that would result in an issue.\n+    @SuppressWarnings(\"squid:S5411\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e56e97dbdb8eed3f4a4bfc528cc842a9bd5dc26", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java b/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\nindex b2f6ca94fe..486fa105fb 100644\n--- a/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\n+++ b/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\n\n@@ -60,7 +61,14 @@ public class CommunicationMonitoringConfig extends AbstractConfig {\n     @Resource\n     private Environment environment;\n \n-    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it.\n+    // suppress warning about field being autowired for class rather than the method it is used in. The calling of\n+    // the method might not be able to provide CommunicationMonitoringTask as parameter.\n+    @SuppressWarnings(\"squid:S3305\")\n+    @Autowired\n+    private CommunicationMonitoringTask communicationMonitoringTask;\n+\n+    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it. the\n+    // this.cronExpression() expression is not very complex, making it not necessary to check before calling it.\n     @SuppressWarnings(\"squid:S2629\")\n     @Bean\n     public CronTrigger communicationMonitoringTaskCronTrigger() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0MTkwMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508241902", "bodyText": "Why did you move the autowired communicationMonitoringTask into a non-autowired parameter.\nThis will probably break functionality.", "author": "robindenadel", "createdAt": "2020-10-20T06:34:45Z", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java", "diffHunk": "@@ -61,17 +60,20 @@\n     @Resource\n     private Environment environment;\n \n-    @Autowired\n-    private CommunicationMonitoringTask communicationMonitoringTask;\n-\n+    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it.\n+    @SuppressWarnings(\"squid:S2629\")\n     @Bean\n     public CronTrigger communicationMonitoringTaskCronTrigger() {\n+\n         LOGGER.info(\"Initializing Cron Trigger bean with cron expression {}.\", this.cronExpression());\n         return new CronTrigger(this.cronExpression());\n     }\n \n+    // suppress warning about using method for boolean in if. The method can only return a boolean, and not a null\n+    // value that would result in an issue.\n+    @SuppressWarnings(\"squid:S5411\")\n     @Bean(destroyMethod = \"shutdown\")\n-    public TaskScheduler communicationMonitoringTaskScheduler() {\n+    public TaskScheduler communicationMonitoringTaskScheduler(CommunicationMonitoringTask communicationMonitoringTask) {", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e56e97dbdb8eed3f4a4bfc528cc842a9bd5dc26", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java b/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\nindex b2f6ca94fe..486fa105fb 100644\n--- a/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\n+++ b/osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/config/CommunicationMonitoringConfig.java\n\n@@ -60,7 +61,14 @@ public class CommunicationMonitoringConfig extends AbstractConfig {\n     @Resource\n     private Environment environment;\n \n-    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it.\n+    // suppress warning about field being autowired for class rather than the method it is used in. The calling of\n+    // the method might not be able to provide CommunicationMonitoringTask as parameter.\n+    @SuppressWarnings(\"squid:S3305\")\n+    @Autowired\n+    private CommunicationMonitoringTask communicationMonitoringTask;\n+\n+    // suppress warning concerning the string in the LOGGER.info. This is actually a correct way of doing it. the\n+    // this.cronExpression() expression is not very complex, making it not necessary to check before calling it.\n     @SuppressWarnings(\"squid:S2629\")\n     @Bean\n     public CronTrigger communicationMonitoringTaskCronTrigger() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0MjYwMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508242600", "bodyText": "See comments on the da CommunicationMonitoringConfig", "author": "robindenadel", "createdAt": "2020-10-20T06:36:20Z", "path": "osgp/platform/osgp-adapter-domain-microgrids/src/main/java/org/opensmartgridplatform/adapter/domain/microgrids/application/config/CommunicationMonitoringConfig.java", "diffHunk": "@@ -64,17 +64,17 @@\n     @Resource\n     private Environment environment;\n \n-    @Autowired\n-    private Runnable communicationMonitoringTask;\n-\n+    // suppress warning about string building in LOGGER. The way it is done here is actually correct.\n+    @SuppressWarnings(\"squid:S2629\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-microgrids/src/main/java/org/opensmartgridplatform/adapter/domain/microgrids/application/config/CommunicationMonitoringConfig.java b/osgp/platform/osgp-adapter-domain-microgrids/src/main/java/org/opensmartgridplatform/adapter/domain/microgrids/application/config/CommunicationMonitoringConfig.java\nindex 83102d6665..6819c56d1c 100644\n--- a/osgp/platform/osgp-adapter-domain-microgrids/src/main/java/org/opensmartgridplatform/adapter/domain/microgrids/application/config/CommunicationMonitoringConfig.java\n+++ b/osgp/platform/osgp-adapter-domain-microgrids/src/main/java/org/opensmartgridplatform/adapter/domain/microgrids/application/config/CommunicationMonitoringConfig.java\n\n@@ -64,7 +64,14 @@ public class CommunicationMonitoringConfig extends AbstractConfig {\n     @Resource\n     private Environment environment;\n \n-    // suppress warning about string building in LOGGER. The way it is done here is actually correct.\n+    // suppress warning about field being autowired for class rather than the method it is used in. The calling of\n+    // the method might not be able to provide CommunicationMonitoringTask as parameter.\n+    @SuppressWarnings(\"squid:3305\")\n+    @Autowired\n+    private Runnable communicationMonitoringTask;\n+\n+    // suppress warning concerning the string in the LOGGER.info. The this.cronExpression() expression is not very\n+    // complex, making it not necessary to check before calling it.\n     @SuppressWarnings(\"squid:S2629\")\n     @Bean\n     public CronTrigger communicationMonitoringTaskCronTrigger() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0ODQ3Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508248472", "bodyText": "This sort of comment (I changed ....) should not be in code, I would put it in a commit message.", "author": "robindenadel", "createdAt": "2020-10-20T06:49:02Z", "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java", "diffHunk": "@@ -120,12 +120,16 @@ public CreateOrganisationResponse createOrganisation(\n         try {\n             this.deviceManagementService.addOrganisation(organisationIdentification, organisation);\n         } catch (final ConstraintViolationException e) {\n+            // I changed this on several places, but I will comment here on the first place what I changed and why.\n+            // This catch thew a new error, that was supposed to be catched by the last catch. I presume this is done\n+            // in order to convert the error to a more useful one and therefor I kept both the error and the logging,\n+            // but made it call the method with the error rather than throwing it.", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8abd7c0c527b9e0663e6041462c1196b56986007", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java\nindex cb910cc99f..111bff6fa3 100644\n--- a/osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java\n\n@@ -120,16 +124,12 @@ public class DeviceManagementEndpoint {\n         try {\n             this.deviceManagementService.addOrganisation(organisationIdentification, organisation);\n         } catch (final ConstraintViolationException e) {\n-            // I changed this on several places, but I will comment here on the first place what I changed and why.\n-            // This catch thew a new error, that was supposed to be catched by the last catch. I presume this is done\n-            // in order to convert the error to a more useful one and therefor I kept both the error and the logging,\n-            // but made it call the method with the error rather than throwing it.\n             LOGGER.error(EXCEPTION_OCCURRED, e);\n-            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_ADMIN,\n-                    new ValidationException(e.getConstraintViolations())));\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_ADMIN,\n+                    new ValidationException(e.getConstraintViolations()));\n         } catch (final TransactionSystemException e) {\n             LOGGER.error(EXCEPTION_OCCURRED, e);\n-            this.handleException(new TechnicalException(COMPONENT_TYPE_WS_ADMIN, e));\n+            throw new TechnicalException(COMPONENT_TYPE_WS_ADMIN, e);\n         } catch (final Exception e) {\n             this.handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1MDE3Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508250172", "bodyText": "This changes the exception thrown from a FunctionalException into a TechnicalException with less information on what is the error.\nTo prevent such a situation, first write a test, then refactor. If the test fails, you know you broke something.\nRevert the changes.", "author": "robindenadel", "createdAt": "2020-10-20T06:52:32Z", "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java", "diffHunk": "@@ -120,12 +120,16 @@ public CreateOrganisationResponse createOrganisation(\n         try {\n             this.deviceManagementService.addOrganisation(organisationIdentification, organisation);\n         } catch (final ConstraintViolationException e) {\n+            // I changed this on several places, but I will comment here on the first place what I changed and why.\n+            // This catch thew a new error, that was supposed to be catched by the last catch. I presume this is done\n+            // in order to convert the error to a more useful one and therefor I kept both the error and the logging,\n+            // but made it call the method with the error rather than throwing it.\n             LOGGER.error(EXCEPTION_OCCURRED, e);\n-            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_ADMIN,\n-                    new ValidationException(e.getConstraintViolations()));\n+            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_ADMIN,\n+                    new ValidationException(e.getConstraintViolations())));", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8abd7c0c527b9e0663e6041462c1196b56986007", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java\nindex cb910cc99f..111bff6fa3 100644\n--- a/osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java\n\n@@ -120,16 +124,12 @@ public class DeviceManagementEndpoint {\n         try {\n             this.deviceManagementService.addOrganisation(organisationIdentification, organisation);\n         } catch (final ConstraintViolationException e) {\n-            // I changed this on several places, but I will comment here on the first place what I changed and why.\n-            // This catch thew a new error, that was supposed to be catched by the last catch. I presume this is done\n-            // in order to convert the error to a more useful one and therefor I kept both the error and the logging,\n-            // but made it call the method with the error rather than throwing it.\n             LOGGER.error(EXCEPTION_OCCURRED, e);\n-            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_ADMIN,\n-                    new ValidationException(e.getConstraintViolations())));\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_ADMIN,\n+                    new ValidationException(e.getConstraintViolations()));\n         } catch (final TransactionSystemException e) {\n             LOGGER.error(EXCEPTION_OCCURRED, e);\n-            this.handleException(new TechnicalException(COMPONENT_TYPE_WS_ADMIN, e));\n+            throw new TechnicalException(COMPONENT_TYPE_WS_ADMIN, e);\n         } catch (final Exception e) {\n             this.handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MTYyMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508281622", "bodyText": "Changes are fine. To prove no functionality has changed, write a unit test", "author": "robindenadel", "createdAt": "2020-10-20T07:48:39Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java", "diffHunk": "@@ -240,10 +240,10 @@ public Organisation findOrganisation(@Identification final String organisationId\n         if (description == null && descriptionStartsWith == null) {\n             return specification;\n         }\n-        if (description == null && descriptionStartsWith != null) {\n+        if (description == null) {\n             return specification.and(descriptionStartsWithSpecification);\n         }\n-        if (description != null && descriptionStartsWith == null) {\n+        if (descriptionStartsWith == null) {\n             return specification.and(descriptionSpecification);\n         }", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MjAzOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508282038", "bodyText": "see DeviceManagementEndpoint", "author": "robindenadel", "createdAt": "2020-10-20T07:49:18Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/ConfigurationManagementEndpoint.java", "diffHunk": "@@ -105,8 +105,8 @@ public SetConfigurationAsyncResponse setConfiguration(\n             response.setAsyncResponse(asyncResponse);\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(\"Exception: {}, StackTrace: {}\", e.getMessage(), e.getStackTrace(), e);\n-            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n-                    new ValidationException(e.getConstraintViolations()));\n+            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n+                    new ValidationException(e.getConstraintViolations())));", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8abd7c0c527b9e0663e6041462c1196b56986007", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/ConfigurationManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/ConfigurationManagementEndpoint.java\nindex 89afafa8d2..4ca0ba7518 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/ConfigurationManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/ConfigurationManagementEndpoint.java\n\n@@ -105,8 +108,8 @@ public class ConfigurationManagementEndpoint {\n             response.setAsyncResponse(asyncResponse);\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(\"Exception: {}, StackTrace: {}\", e.getMessage(), e.getStackTrace(), e);\n-            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n-                    new ValidationException(e.getConstraintViolations())));\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n+                    new ValidationException(e.getConstraintViolations()));\n         } catch (final Exception e) {\n             this.handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MjIxMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508282211", "bodyText": "see DeviceManagementEndpoint", "author": "robindenadel", "createdAt": "2020-10-20T07:49:32Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceInstallationEndpoint.java", "diffHunk": "@@ -153,12 +153,12 @@ public AddDeviceResponse addDevice(@OrganisationIdentification final String orga\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(EXCEPTION_WHILE_ADDING_DEVICE, e.getMessage(), request.getDevice().getDeviceIdentification(),\n                     organisationIdentification, e);\n-            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n-                    new ValidationException(e.getConstraintViolations()));\n+            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n+                    new ValidationException(e.getConstraintViolations())));", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8abd7c0c527b9e0663e6041462c1196b56986007", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceInstallationEndpoint.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceInstallationEndpoint.java\nindex a19deb4f27..7befe3997c 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceInstallationEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceInstallationEndpoint.java\n\n@@ -153,12 +157,12 @@ public class DeviceInstallationEndpoint {\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(EXCEPTION_WHILE_ADDING_DEVICE, e.getMessage(), request.getDevice().getDeviceIdentification(),\n                     organisationIdentification, e);\n-            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n-                    new ValidationException(e.getConstraintViolations())));\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n+                    new ValidationException(e.getConstraintViolations()));\n         } catch (final AssertionError e) {\n             LOGGER.error(EXCEPTION_WHILE_ADDING_DEVICE, e.getMessage(), request.getDevice().getDeviceIdentification(),\n                     organisationIdentification, e);\n-            this.handleException(new TechnicalException(COMPONENT_WS_CORE, e));\n+            throw new TechnicalException(COMPONENT_WS_CORE, e);\n         } catch (final Exception e) {\n             LOGGER.error(EXCEPTION_WHILE_ADDING_DEVICE, e.getMessage(), request.getDevice().getDeviceIdentification(),\n                     organisationIdentification, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4MjM2Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508282362", "bodyText": "see DeviceManagementEndpoint", "author": "robindenadel", "createdAt": "2020-10-20T07:49:47Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceManagementEndpoint.java", "diffHunk": "@@ -135,8 +135,8 @@ public FindOrganisationResponse findOrganisation(\n                     org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Organisation.class));\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(EXCEPTION, e.getMessage(), e.getStackTrace(), e);\n-            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n-                    new ValidationException(e.getConstraintViolations()));\n+            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n+                    new ValidationException(e.getConstraintViolations())));", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8abd7c0c527b9e0663e6041462c1196b56986007", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceManagementEndpoint.java\nindex 91baa1af6d..179dc9197a 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceManagementEndpoint.java\n\n@@ -135,8 +139,8 @@ public class DeviceManagementEndpoint {\n                     org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Organisation.class));\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(EXCEPTION, e.getMessage(), e.getStackTrace(), e);\n-            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n-                    new ValidationException(e.getConstraintViolations())));\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_CORE,\n+                    new ValidationException(e.getConstraintViolations()));\n         } catch (final Exception e) {\n             this.handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4ODE5Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508288193", "bodyText": "Don't suppress the warning, change the line to\nLOGGER.error(\"FindEventsRequest Exception {}\", e.getMessage(), e);", "author": "robindenadel", "createdAt": "2020-10-20T07:58:37Z", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java", "diffHunk": "@@ -123,6 +123,9 @@ public FindEventsAsyncResponse findEventsRequest(\n         return response;\n     }\n \n+    // suppress warnings about the string in the final LOGGER. THere are 3 arguments provided that SonarLint expects\n+    // to be part of the string, but they are actually arguments for the error method.\n+    @SuppressWarnings(\"squid:S3457\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\nindex c4ccace0fa..56f0af70f4 100644\n--- a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n\n@@ -123,9 +126,6 @@ public class SmartMeteringManagementEndpoint extends SmartMeteringEndpoint {\n         return response;\n     }\n \n-    // suppress warnings about the string in the final LOGGER. THere are 3 arguments provided that SonarLint expects\n-    // to be part of the string, but they are actually arguments for the error method.\n-    @SuppressWarnings(\"squid:S3457\")\n     @PayloadRoot(localPart = \"FindEventsAsyncRequest\", namespace = NAMESPACE)\n     @ResponsePayload\n     public FindEventsResponse getFindEventsResponse(@OrganisationIdentification final String organisationIdentification,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5MzY2Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508293666", "bodyText": "see DeviceManagementEndpoint", "author": "robindenadel", "createdAt": "2020-10-20T08:07:16Z", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java", "diffHunk": "@@ -152,8 +155,8 @@ public FindEventsResponse getFindEventsResponse(@OrganisationIdentification fina\n \n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(\"FindEventsRequest Exception\", e.getMessage(), e.getStackTrace(), e);\n-            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_SMART_METERING,\n-                    new ValidationException(e.getConstraintViolations()));\n+            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_SMART_METERING,\n+                    new ValidationException(e.getConstraintViolations())));", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8abd7c0c527b9e0663e6041462c1196b56986007", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\nindex c4ccace0fa..cfcc5741ac 100644\n--- a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n\n@@ -155,8 +158,8 @@ public class SmartMeteringManagementEndpoint extends SmartMeteringEndpoint {\n \n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(\"FindEventsRequest Exception\", e.getMessage(), e.getStackTrace(), e);\n-            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_SMART_METERING,\n-                    new ValidationException(e.getConstraintViolations())));\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_SMART_METERING,\n+                    new ValidationException(e.getConstraintViolations()));\n         } catch (final Exception e) {\n             this.handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5Mzg3OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508293878", "bodyText": "Explanation is missing.", "author": "robindenadel", "createdAt": "2020-10-20T08:07:39Z", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java", "diffHunk": "@@ -221,6 +224,7 @@ public EnableDebuggingAsyncResponse enableDebuggingRequest(\n         return response;\n     }\n \n+    @SuppressWarnings(\"squid:S3457\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "521fbc276fb72629b0095ab6a44559c1f36d478e", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\nindex c4ccace0fa..c914c7ed3a 100644\n--- a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n\n@@ -224,6 +224,8 @@ public class SmartMeteringManagementEndpoint extends SmartMeteringEndpoint {\n         return response;\n     }\n \n+    // suppress a warning about the string in the first catch not containing any format specifiers. The other\n+    // arguments are arguments for the LOGGER.error rather than for the string that is being made.\n     @SuppressWarnings(\"squid:S3457\")\n     @PayloadRoot(localPart = \"EnableDebuggingAsyncRequest\", namespace = NAMESPACE)\n     @ResponsePayload\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NDAzNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508294036", "bodyText": "Explanation is missing", "author": "robindenadel", "createdAt": "2020-10-20T08:07:54Z", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java", "diffHunk": "@@ -285,6 +289,7 @@ public DisableDebuggingAsyncResponse disableDebuggingRequest(\n         return response;\n     }\n \n+    @SuppressWarnings(\"squid:S3457\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf8426ba61c797475804006ab7faf247b2df9e8", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\nindex c4ccace0fa..3131a5d101 100644\n--- a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n\n@@ -289,7 +281,6 @@ public class SmartMeteringManagementEndpoint extends SmartMeteringEndpoint {\n         return response;\n     }\n \n-    @SuppressWarnings(\"squid:S3457\")\n     @PayloadRoot(localPart = \"DisableDebuggingAsyncRequest\", namespace = NAMESPACE)\n     @ResponsePayload\n     public DisableDebuggingResponse getDisableDebuggingResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NDMyMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508294323", "bodyText": "Explanation is missing", "author": "robindenadel", "createdAt": "2020-10-20T08:08:22Z", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java", "diffHunk": "@@ -369,6 +374,7 @@ public FindMessageLogsAsyncResponse findMessageLogsRequest(\n      * @return FindMessageLogsResponse\n      * @throws OsgpException\n      */\n+    @SuppressWarnings(\"squid:S3457\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf8426ba61c797475804006ab7faf247b2df9e8", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\nindex c4ccace0fa..3131a5d101 100644\n--- a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n\n@@ -374,7 +364,6 @@ public class SmartMeteringManagementEndpoint extends SmartMeteringEndpoint {\n      * @return FindMessageLogsResponse\n      * @throws OsgpException\n      */\n-    @SuppressWarnings(\"squid:S3457\")\n     @PayloadRoot(localPart = \"FindMessageLogsAsyncRequest\", namespace = NAMESPACE)\n     @ResponsePayload\n     public FindMessageLogsResponse getFindMessageLogsResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NDUxNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508294514", "bodyText": "Explanation is missing", "author": "robindenadel", "createdAt": "2020-10-20T08:08:37Z", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java", "diffHunk": "@@ -436,6 +442,7 @@ public SetDeviceCommunicationSettingsAsyncResponse setDeviceCommunicationSetting\n         return response;\n     }\n \n+    @SuppressWarnings(\"squid:S3457\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf8426ba61c797475804006ab7faf247b2df9e8", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\nindex c4ccace0fa..3131a5d101 100644\n--- a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n\n@@ -442,7 +430,6 @@ public class SmartMeteringManagementEndpoint extends SmartMeteringEndpoint {\n         return response;\n     }\n \n-    @SuppressWarnings(\"squid:S3457\")\n     @PayloadRoot(localPart = \"SetDeviceCommunicationSettingsAsyncRequest\", namespace = NAMESPACE)\n     @ResponsePayload\n     public SetDeviceCommunicationSettingsResponse setDeviceCommunicationSettingsResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NDYwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508294609", "bodyText": "Explanation is missing", "author": "robindenadel", "createdAt": "2020-10-20T08:08:49Z", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java", "diffHunk": "@@ -501,6 +508,7 @@ public SetDeviceLifecycleStatusByChannelAsyncResponse setDeviceLifecycleStatusBy\n         return asyncResponse;\n     }\n \n+    @SuppressWarnings(\"squid:S3457\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf8426ba61c797475804006ab7faf247b2df9e8", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\nindex c4ccace0fa..3131a5d101 100644\n--- a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n\n@@ -508,7 +494,6 @@ public class SmartMeteringManagementEndpoint extends SmartMeteringEndpoint {\n         return asyncResponse;\n     }\n \n-    @SuppressWarnings(\"squid:S3457\")\n     @PayloadRoot(localPart = \"SetDeviceLifecycleStatusByChannelAsyncRequest\", namespace = NAMESPACE)\n     @ResponsePayload\n     public SetDeviceLifecycleStatusByChannelResponse setDeviceLifecycleStatusByChannelResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NDc5NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508294795", "bodyText": "see DeviceManagementEndpoint", "author": "robindenadel", "createdAt": "2020-10-20T08:09:09Z", "path": "osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingAdHocManagementEndpoint.java", "diffHunk": "@@ -81,8 +81,8 @@ public GetDevicesResponse getDevices(@OrganisationIdentification final String or\n             response.setDevicePage(devicePage);\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(\"Exception: {}, StackTrace: {}\", e.getMessage(), e.getStackTrace(), e);\n-            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, COMPONENT_WS_TARIFF_SWITCHING,\n-                    new ValidationException(e.getConstraintViolations()));\n+            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, COMPONENT_WS_TARIFF_SWITCHING,\n+                    new ValidationException(e.getConstraintViolations())));", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8abd7c0c527b9e0663e6041462c1196b56986007", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingAdHocManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingAdHocManagementEndpoint.java\nindex cca6f51cc5..61a949368b 100644\n--- a/osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingAdHocManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingAdHocManagementEndpoint.java\n\n@@ -81,8 +84,8 @@ public class TariffSwitchingAdHocManagementEndpoint {\n             response.setDevicePage(devicePage);\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(\"Exception: {}, StackTrace: {}\", e.getMessage(), e.getStackTrace(), e);\n-            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, COMPONENT_WS_TARIFF_SWITCHING,\n-                    new ValidationException(e.getConstraintViolations())));\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, COMPONENT_WS_TARIFF_SWITCHING,\n+                    new ValidationException(e.getConstraintViolations()));\n         } catch (final Exception e) {\n             this.handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NDkzNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508294937", "bodyText": "see DeviceManagementEndpoint", "author": "robindenadel", "createdAt": "2020-10-20T08:09:24Z", "path": "osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingScheduleManagementEndpoint.java", "diffHunk": "@@ -99,8 +99,9 @@ public SetScheduleAsyncResponse setSchedule(@OrganisationIdentification final St\n             response.setAsyncResponse(asyncResponse);\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(\"Exception: {}, StackTrace: {}\", e.getMessage(), e.getStackTrace(), e);\n-            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.WS_TARIFF_SWITCHING,\n-                    new ValidationException(e.getConstraintViolations()));\n+            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR,\n+                ComponentType.WS_TARIFF_SWITCHING,\n+                    new ValidationException(e.getConstraintViolations())));", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8abd7c0c527b9e0663e6041462c1196b56986007", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingScheduleManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingScheduleManagementEndpoint.java\nindex 29896df879..6bf78a86c7 100644\n--- a/osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingScheduleManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-tariffswitching/src/main/java/org/opensmartgridplatform/adapter/ws/tariffswitching/endpoints/TariffSwitchingScheduleManagementEndpoint.java\n\n@@ -99,9 +103,9 @@ public class TariffSwitchingScheduleManagementEndpoint {\n             response.setAsyncResponse(asyncResponse);\n         } catch (final ConstraintViolationException e) {\n             LOGGER.error(\"Exception: {}, StackTrace: {}\", e.getMessage(), e.getStackTrace(), e);\n-            this.handleException(new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR,\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR,\n                 ComponentType.WS_TARIFF_SWITCHING,\n-                    new ValidationException(e.getConstraintViolations())));\n+                    new ValidationException(e.getConstraintViolations()));\n         } catch (final Exception e) {\n             this.handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NTEwOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508295108", "bodyText": "Explanation is missing", "author": "robindenadel", "createdAt": "2020-10-20T08:09:40Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/entities/Ssld.java", "diffHunk": "@@ -97,6 +97,7 @@ public Ssld(final String deviceIdentification, final String alias, final Address\n         super(deviceIdentification, alias, containerAddress, gpsCoordinates, cdmaSettings);\n     }\n \n+    @SuppressWarnings(\"squid:S2159\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e2b3312d5b2e2313f8c0751db76e6c7b2ef1b09", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/entities/Ssld.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/entities/Ssld.java\nindex a3f21695f4..2b92b62ad2 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/entities/Ssld.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/entities/Ssld.java\n\n@@ -97,7 +97,6 @@ public class Ssld extends Device {\n         super(deviceIdentification, alias, containerAddress, gpsCoordinates, cdmaSettings);\n     }\n \n-    @SuppressWarnings(\"squid:S2159\")\n     @Override\n     public boolean equals(final Object o) {\n         /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NTYxOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508295618", "bodyText": "I don't consider this a good explanation.", "author": "robindenadel", "createdAt": "2020-10-20T08:10:20Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java", "diffHunk": "@@ -16,6 +16,9 @@\n import org.springframework.ws.soap.server.endpoint.annotation.FaultCode;\n import org.springframework.ws.soap.server.endpoint.annotation.SoapFault;\n \n+// suppress warning about the Set<? extends ConstraintViolation<?>>. This is because it is apparently required to be\n+// written this way.\n+@SuppressWarnings(\"squid:S1452\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java\nindex d8a8bd5552..80a296aba0 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java\n\n@@ -16,8 +16,9 @@ import org.apache.commons.lang3.StringUtils;\n import org.springframework.ws.soap.server.endpoint.annotation.FaultCode;\n import org.springframework.ws.soap.server.endpoint.annotation.SoapFault;\n \n-// suppress warning about the Set<? extends ConstraintViolation<?>>. This is because it is apparently required to be\n-// written this way.\n+// suppress warning about the Set<? extends ConstraintViolation<?>>. SonarQube complains about the generic wildcard\n+// type being used. The generic wildcart makes it that the set expects an object from a class that extends\n+// ConstraintViolation. Removing the wildcard would change the behaviour.\n @SuppressWarnings(\"squid:S1452\")\n @SoapFault(faultCode = FaultCode.SERVER)\n public class ValidationException extends PlatformException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NjcxOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508296718", "bodyText": "I don't think we should suppress this warning, and return an empty list.\nWrite unit tests for all the code calling this method to make sure everything keeps on working ok.", "author": "robindenadel", "createdAt": "2020-10-20T08:11:53Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java", "diffHunk": "@@ -152,6 +152,10 @@ public boolean hasPushObjectList() {\n         return this.pushObjectList != null;\n     }\n \n+    // suppress warning about returning null. With this method a null return is currently used to show that the list\n+    // that is used isn't actually initialized. This means that there isn't really an absence of objects to put in\n+    // the list, but rather that the object to put into it couldn't be made.\n+    @SuppressWarnings(\"squid:S1168\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b76ec69b29e85c4833734c1bd9a1fd77f5cc6f", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java\nindex c8931f1d64..a3e8daa3d3 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java\n\n@@ -152,13 +152,9 @@ public abstract class AbstractPushSetup implements Serializable {\n         return this.pushObjectList != null;\n     }\n \n-    // suppress warning about returning null. With this method a null return is currently used to show that the list\n-    // that is used isn't actually initialized. This means that there isn't really an absence of objects to put in\n-    // the list, but rather that the object to put into it couldn't be made.\n-    @SuppressWarnings(\"squid:S1168\")\n     public List<CosemObjectDefinition> getPushObjectList() {\n         if (this.pushObjectList == null) {\n-            return null;\n+            return new ArrayList<>();\n         }\n         return new ArrayList<>(this.pushObjectList);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5Njg2OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508296868", "bodyText": "I don't think we should suppress this warning, and return an empty list.\nWrite unit tests for all the code calling this method to make sure everything keeps on working ok.", "author": "robindenadel", "createdAt": "2020-10-20T08:12:08Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java", "diffHunk": "@@ -171,6 +175,10 @@ public boolean hasCommunicationWindow() {\n         return this.communicationWindow != null;\n     }\n \n+    // suppress warning about returning null. With this method a null return is currently used to show that the list\n+    // that is used isn't actually initialized. This means that there isn't really an absence of objects to put in\n+    // the list, but rather that the object to put into it couldn't be made.\n+    @SuppressWarnings(\"squid:S1168\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b76ec69b29e85c4833734c1bd9a1fd77f5cc6f", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java\nindex c8931f1d64..a3e8daa3d3 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/AbstractPushSetup.java\n\n@@ -175,13 +171,9 @@ public abstract class AbstractPushSetup implements Serializable {\n         return this.communicationWindow != null;\n     }\n \n-    // suppress warning about returning null. With this method a null return is currently used to show that the list\n-    // that is used isn't actually initialized. This means that there isn't really an absence of objects to put in\n-    // the list, but rather that the object to put into it couldn't be made.\n-    @SuppressWarnings(\"squid:S1168\")\n     public List<WindowElement> getCommunicationWindow() {\n         if (this.communicationWindow == null) {\n-            return null;\n+            return new ArrayList<>();\n         }\n         return new ArrayList<>(this.communicationWindow);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI5NzEyOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508297128", "bodyText": "I don't think we should suppress this warning, and return an empty set.\nWrite unit tests for all the code calling this method to make sure everything keeps on working ok.", "author": "robindenadel", "createdAt": "2020-10-20T08:12:34Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java", "diffHunk": "@@ -51,6 +51,9 @@ public boolean hasStatusBits() {\n         return this.statusBits != null;\n     }\n \n+    // this is a getter, meaning it should return what the actual value is. Since it is possible that the actual\n+    // value is set to null, it should also return this in that case.\n+    @SuppressWarnings(\"squid:S1168\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ece2ec820f857b632be719d9a4041e241f139e0", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java\nindex 7edae58fa5..fce169f5f1 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java\n\n@@ -51,12 +52,9 @@ public class ClockStatus implements Serializable {\n         return this.statusBits != null;\n     }\n \n-    // this is a getter, meaning it should return what the actual value is. Since it is possible that the actual\n-    // value is set to null, it should also return this in that case.\n-    @SuppressWarnings(\"squid:S1168\")\n     public Set<ClockStatusBit> getStatusBits() {\n         if (this.statusBits == null) {\n-            return null;\n+            return new HashSet<ClockStatusBit>();\n         }\n         return EnumSet.copyOf(this.statusBits);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyMjkxMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508322912", "bodyText": "I don't think we should suppress this warning, and return an empty set.\nWrite unit tests for all the code calling this method to make sure everything keeps on working ok.", "author": "robindenadel", "createdAt": "2020-10-20T08:49:46Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java", "diffHunk": "@@ -45,6 +48,10 @@ public String toString() {\n         return forClockStatus(clockStatus & 0xFF);\n     }\n \n+    // here returning null is independed of the actual ClockStatusBit that is later used to make the list. This meand\n+    // that returning an empty list would falsly suggest that there is an empty list, where in fact there is no valid\n+    // list to return\n+    @SuppressWarnings(\"squid:S1168\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ece2ec820f857b632be719d9a4041e241f139e0", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\nindex 3f1668f137..9846966279 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\n\n@@ -48,10 +48,12 @@ public enum ClockStatusBit {\n         return forClockStatus(clockStatus & 0xFF);\n     }\n \n-    // here returning null is independed of the actual ClockStatusBit that is later used to make the list. This meand\n-    // that returning an empty list would falsly suggest that there is an empty list, where in fact there is no valid\n-    // list to return\n-    @SuppressWarnings(\"squid:S1168\")\n+    // SonarQube complains about the null return. SonarQube wants to see a\n+    // return of an empty set. The problem is that the behavior of the code\n+    // differs depending on whether the return value is null or an empty set.\n+    // Trying to correct this would result in other behavior changes, making a\n+    // simple fix not possible. It is still an issue though, meaning it\n+    // shouldn't be suppressed.\n     public static Set<ClockStatusBit> forClockStatus(final int clockStatus) {\n         if (ClockStatus.STATUS_NOT_SPECIFIED == clockStatus) {\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNDMwNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508324306", "bodyText": "Don't suppress this warning", "author": "robindenadel", "createdAt": "2020-10-20T08:51:47Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/SpecificAttributeValueRequest.java", "diffHunk": "@@ -33,6 +33,10 @@ public int hashCode() {\n         return result;\n     }\n \n+    // Suppress warning that super.equals(obj) always returns false. This is not true since the given object might\n+    // be the parent class from this class. I'm not sure if the current behaviour is intended but that should be\n+    // tested in unit tests.\n+    @SuppressWarnings(\"squid:S2159\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38cf093a1680f7af253d53247cb7e51d46c0803f", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/SpecificAttributeValueRequest.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/SpecificAttributeValueRequest.java\nindex 25a161eb8f..776f819b80 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/SpecificAttributeValueRequest.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/SpecificAttributeValueRequest.java\n\n@@ -33,10 +33,6 @@ public class SpecificAttributeValueRequest extends SpecificAttributeValueRequest\n         return result;\n     }\n \n-    // Suppress warning that super.equals(obj) always returns false. This is not true since the given object might\n-    // be the parent class from this class. I'm not sure if the current behaviour is intended but that should be\n-    // tested in unit tests.\n-    @SuppressWarnings(\"squid:S2159\")\n     @Override\n     public boolean equals(final Object obj) {\n         if (this == obj) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNTI4MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r508325280", "bodyText": "Don't suppress this warning", "author": "robindenadel", "createdAt": "2020-10-20T08:53:17Z", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850GetConfigurationCommand.java", "diffHunk": "@@ -41,6 +41,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+// small piece of code for making softwareConfiguration and lightTypeValue also exists in GetStatusCommand. The code\n+// is too small to be put in a seperate class. Doing so also wouldn't help with making the code easier to maintain.\n+@SuppressWarnings(\"DuplicatedCode\")", "originalCommit": "6f641c2708d6e7246ba563ab38e1bee00635e0cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6287f9436eb47661064a5f197d1dd04945ec83f", "chunk": "diff --git a/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850GetConfigurationCommand.java b/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850GetConfigurationCommand.java\nindex 5be0d3d5ee..13d76577e4 100644\n--- a/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850GetConfigurationCommand.java\n+++ b/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850GetConfigurationCommand.java\n\n@@ -34,16 +33,13 @@ import org.opensmartgridplatform.dto.valueobjects.DaliConfigurationDto;\n import org.opensmartgridplatform.dto.valueobjects.DeviceFixedIpDto;\n import org.opensmartgridplatform.dto.valueobjects.LightTypeDto;\n import org.opensmartgridplatform.dto.valueobjects.LinkTypeDto;\n-import org.opensmartgridplatform.dto.valueobjects.LongTermIntervalTypeDto;\n-import org.opensmartgridplatform.dto.valueobjects.MeterTypeDto;\n import org.opensmartgridplatform.dto.valueobjects.RelayConfigurationDto;\n import org.opensmartgridplatform.dto.valueobjects.RelayMapDto;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-// small piece of code for making softwareConfiguration and lightTypeValue also exists in GetStatusCommand. The code\n-// is too small to be put in a seperate class. Doing so also wouldn't help with making the code easier to maintain.\n-@SuppressWarnings(\"DuplicatedCode\")\n+import com.beanit.openiec61850.Fc;\n+\n public class Iec61850GetConfigurationCommand {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(Iec61850GetConfigurationCommand.class);\n"}}, {"oid": "3e56e97dbdb8eed3f4a4bfc528cc842a9bd5dc26", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3e56e97dbdb8eed3f4a4bfc528cc842a9bd5dc26", "message": "Update CommunicationMonitoringConfig.java\n\nImproved description of suppress warnings, and reverted and suppressed an issue with autowiring a parameter", "committedDate": "2020-10-22T09:33:18Z", "type": "commit"}, {"oid": "8abd7c0c527b9e0663e6041462c1196b56986007", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8abd7c0c527b9e0663e6041462c1196b56986007", "message": "Reverted change\n\nReverted changes there where an exception throw was replaced with calling a method with this exception. This code unneccesarely complicated the code since the handleException is being called on it later on nonetheless. I suppressed the issue about logging an exception and then rethrowing it.", "committedDate": "2020-10-22T09:54:51Z", "type": "commit"}, {"oid": "3c2d2f78208fcda58684769441744d13584e885f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3c2d2f78208fcda58684769441744d13584e885f", "message": "Added a small test to check that the change in DeviceManagementService doesn't break functionality.", "committedDate": "2020-10-27T09:14:20Z", "type": "commit"}, {"oid": "2e2b3312d5b2e2313f8c0751db76e6c7b2ef1b09", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2e2b3312d5b2e2313f8c0751db76e6c7b2ef1b09", "message": "Removed SuppressWarnings, appearently there is no issue.", "committedDate": "2020-10-27T09:21:41Z", "type": "commit"}, {"oid": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/352e04b3a9b59f4a45f433df81e9b30de30ff912", "message": "Several changes based on the feedback provided to earlier changes.", "committedDate": "2020-10-27T12:33:10Z", "type": "commit"}, {"oid": "23b76ec69b29e85c4833734c1bd9a1fd77f5cc6f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/23b76ec69b29e85c4833734c1bd9a1fd77f5cc6f", "message": "Changed AbstractPushSetup and AbstractPushSetupConverter to allow returning an empty list rather then null\n\nThe code in AbstractPushConverter is tested to make sure that the changes don't change the behavior.", "committedDate": "2020-11-03T09:04:32Z", "type": "commit"}, {"oid": "38cf093a1680f7af253d53247cb7e51d46c0803f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/38cf093a1680f7af253d53247cb7e51d46c0803f", "message": "Removed issue suppression in SpecificAttributeValueRequest.\n\nAfter tests it turned out that there was no issue with the function. After removing the suppression and running SonarLint it seems as though it doesn't give an issue anymore.", "committedDate": "2020-11-03T12:12:38Z", "type": "commit"}, {"oid": "5ece2ec820f857b632be719d9a4041e241f139e0", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5ece2ec820f857b632be719d9a4041e241f139e0", "message": "Fix comments on issues in ClockStatus and ClockStatusBit.\n\nThere were 2 issues for which changes were requested. The first one is suppressing the issue of returning null in ClockStatus. The method where this issue is suppressed, is never called and therefor it was changed to return an empty set.\n\nThe other issue was returning null in ClockStatusBit. Here we looked at ways to fix it, but kept running into the problem that the code was written with the idea that certain values could / should be null. In the end we decided to neither change nor suppress the issue, since someone with more knowledge about the specific code should look at it instead.", "committedDate": "2020-11-10T15:09:11Z", "type": "commit"}, {"oid": "521fbc276fb72629b0095ab6a44559c1f36d478e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/521fbc276fb72629b0095ab6a44559c1f36d478e", "message": "Made 2 small changes to fix issues.\n\nRemoved some commented code in AbstractPushSetupConverter and added an explanation to the suppressing in SmartMeteringManagementEndpoint.", "committedDate": "2020-11-12T10:56:11Z", "type": "commit"}, {"oid": "f6287f9436eb47661064a5f197d1dd04945ec83f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f6287f9436eb47661064a5f197d1dd04945ec83f", "message": "Merge branch 'development' into code_quality/Solving_SonarQube_Issues", "committedDate": "2020-11-17T09:42:46Z", "type": "commit"}, {"oid": "f49aca9796669df606ccf46c1187dfd6ffadb346", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f49aca9796669df606ccf46c1187dfd6ffadb346", "message": "Some small changes regarding tests\n\nRemove an unused dependency in ws-admin, remove a test that was made for trying something and removed the public from another test", "committedDate": "2020-11-19T08:41:38Z", "type": "commit"}, {"oid": "2bf8426ba61c797475804006ab7faf247b2df9e8", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2bf8426ba61c797475804006ab7faf247b2df9e8", "message": "New fixes to the sonar issue of logging and throwing errors\n\nA new fix to the sonar issues of logging an error and then rethowring it. I removed the suppressing and the logging, since the exception should be logged where it will be handled.", "committedDate": "2020-11-19T09:18:44Z", "type": "commit"}, {"oid": "857485e554e5ac77fc57d37b67cc8260acfec11c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/857485e554e5ac77fc57d37b67cc8260acfec11c", "message": "Some small changes made to sonar issues and a test\n\nRemove 2 warning suppressings and change junit assertion to assertj in test", "committedDate": "2020-11-19T09:25:45Z", "type": "commit"}, {"oid": "08ab0246aa6ebb535866175baf2654aeb30068df", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/08ab0246aa6ebb535866175baf2654aeb30068df", "message": "Add tests to the DeviceManagementServiceTest\n\nThese tests are intended for checking the behavior of the\nhandleDescription in DeviceManagementService. A small change was made\nhere that shouldn't change behavior and these tests should confirm this.", "committedDate": "2020-11-19T11:45:35Z", "type": "commit"}, {"oid": "4955363b58ddbedcdc03d437450caeb1d031e30c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4955363b58ddbedcdc03d437450caeb1d031e30c", "message": "Remove suppression for some String issues\n\nRemove the suppression of certain issues where the String wasn't build\nproperly. There is no issue for in on the current SonarQube server,\nindicating that it is no longer seen as an issue", "committedDate": "2020-11-19T16:05:06Z", "type": "commit"}, {"oid": "63e0d12cc51be47442c0aae373cd885950e7e71c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/63e0d12cc51be47442c0aae373cd885950e7e71c", "message": "Remove public from ClockStatusTest", "committedDate": "2020-12-03T13:01:04Z", "type": "commit"}, {"oid": "5802cf58a6dff10df56b1b8e3cad53957a8620e2", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5802cf58a6dff10df56b1b8e3cad53957a8620e2", "message": "Change size != 0 to isEmpty in AbstractPushSetupConverter", "committedDate": "2020-12-03T13:41:37Z", "type": "commit"}, {"oid": "9311ccc5fae4dd33f9d62eca3f2d86333cc185fa", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9311ccc5fae4dd33f9d62eca3f2d86333cc185fa", "message": "Remove the suppression of generic wildcard warning\n\nWhile there is no immediate reason to change the code as this might impact behavior, it is not necessarily a false positive. SonarQube advises against using it and this advise could be followed here.", "committedDate": "2020-12-08T14:54:55Z", "type": "commit"}, {"oid": "858a404081f72de8145a712ae8c65fd613b45968", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/858a404081f72de8145a712ae8c65fd613b45968", "message": "Removed suppression of LOGGER name issue\n\nThis doesn't count as a false positive. It therefor shouldn't be suppressed.", "committedDate": "2020-12-08T15:06:02Z", "type": "commit"}, {"oid": "78bc414dc0a181298c82bad92a7aff1c3b7a2a9a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/78bc414dc0a181298c82bad92a7aff1c3b7a2a9a", "message": "Merge branch 'development' into code_quality/Solving_SonarQube_Issues", "committedDate": "2020-12-17T09:48:10Z", "type": "commit"}, {"oid": "8eaa1be3e415fa31f365a6ca214f6ea75d608b41", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8eaa1be3e415fa31f365a6ca214f6ea75d608b41", "message": "Merge branch 'development' into code_quality/Solving_SonarQube_Issues", "committedDate": "2021-01-07T13:00:55Z", "type": "commit"}, {"oid": "2e42181e5fbcef172e4b460c0d365b0cb8bfe39c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2e42181e5fbcef172e4b460c0d365b0cb8bfe39c", "message": "Change to return empty list reverted, tests failed\n\nA bigger change in the code is required to fix this SonarQube issue.", "committedDate": "2021-01-14T08:44:33Z", "type": "commit"}, {"oid": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "message": "Update PushSetupAlarmDtoConverterTest.java\n\nOne test was fixed", "committedDate": "2021-01-14T09:23:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ0NDQ2Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557444466", "bodyText": "licence header is missing", "author": "robindenadel", "createdAt": "2021-01-14T14:42:46Z", "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\nindex 1525a6e63f..7416893491 100644\n--- a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n+++ b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n\n@@ -1,13 +1,20 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.when;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ0NjM2NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557446364", "bodyText": "use asserJ instead of junit assertions", "author": "robindenadel", "createdAt": "2021-01-14T14:45:13Z", "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\nindex 1525a6e63f..7416893491 100644\n--- a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n+++ b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n\n@@ -1,13 +1,20 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.when;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ0Njk0NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557446945", "bodyText": "this can be one line, see https://www.baeldung.com/java-init-list-one-line", "author": "robindenadel", "createdAt": "2021-01-14T14:45:59Z", "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ConfigurationMapper;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemDateTime;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemObisCode;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemObjectDefinition;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.PushSetupAlarm;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.WindowElement;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.PushSetupAlarmDto;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PushSetupAlarmDtoConverterTest {\n+    @Mock\n+    private ConfigurationMapper configurationMapper;\n+    @Mock\n+    private PushSetupAlarmDto pushSetupAlarmDto;\n+    @Mock\n+    private MappingContext mappingContext;\n+    @Mock\n+    private PushSetupAlarm pushSetupAlarm;\n+    private PushSetupAlarmDtoConverter pushSetupAlarmDtoConverter;\n+\n+    @Test\n+    void convertTest() {\n+        this.pushSetupAlarmDtoConverter = new PushSetupAlarmDtoConverter(this.configurationMapper);\n+\n+        final List<WindowElement> testList = new ArrayList<>();\n+        testList.add(new WindowElement(new CosemDateTime(), new CosemDateTime()));", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\nindex 1525a6e63f..7416893491 100644\n--- a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n+++ b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n\n@@ -1,13 +1,20 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.when;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ0NzQzNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557447435", "bodyText": "see previous comment", "author": "robindenadel", "createdAt": "2021-01-14T14:46:34Z", "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ConfigurationMapper;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemDateTime;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemObisCode;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemObjectDefinition;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.PushSetupAlarm;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.WindowElement;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.PushSetupAlarmDto;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PushSetupAlarmDtoConverterTest {\n+    @Mock\n+    private ConfigurationMapper configurationMapper;\n+    @Mock\n+    private PushSetupAlarmDto pushSetupAlarmDto;\n+    @Mock\n+    private MappingContext mappingContext;\n+    @Mock\n+    private PushSetupAlarm pushSetupAlarm;\n+    private PushSetupAlarmDtoConverter pushSetupAlarmDtoConverter;\n+\n+    @Test\n+    void convertTest() {\n+        this.pushSetupAlarmDtoConverter = new PushSetupAlarmDtoConverter(this.configurationMapper);\n+\n+        final List<WindowElement> testList = new ArrayList<>();\n+        testList.add(new WindowElement(new CosemDateTime(), new CosemDateTime()));\n+        when(this.pushSetupAlarm.getCommunicationWindow()).thenReturn(testList);\n+\n+        final List<CosemObjectDefinition> pushObjectList = new ArrayList<>();\n+        final CosemObisCode code = new CosemObisCode(1, 2, 3, 4, 5, 6);\n+        pushObjectList.add(new CosemObjectDefinition(1, code, 2));", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\nindex 1525a6e63f..7416893491 100644\n--- a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n+++ b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n\n@@ -1,13 +1,20 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.when;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ0OTA5NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557449094", "bodyText": "remove the unused constants EXCEPTION_OCCURRED and STACK_TRACE", "author": "robindenadel", "createdAt": "2021-01-14T14:48:42Z", "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/endpoints/DeviceManagementEndpoint.java", "diffHunk": "@@ -120,11 +120,9 @@ public CreateOrganisationResponse createOrganisation(\n         try {\n             this.deviceManagementService.addOrganisation(organisationIdentification, organisation);\n         } catch (final ConstraintViolationException e) {\n-            LOGGER.error(EXCEPTION_OCCURRED, e);", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1Njk0Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557456947", "bodyText": "Why did you add this condition?", "author": "robindenadel", "createdAt": "2021-01-14T14:58:53Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/endpoints/DeviceManagementEndpoint.java", "diffHunk": "@@ -304,7 +301,7 @@ public FindDevicesResponse findDevices(@OrganisationIdentification final String\n                 response.getPage().setCurrentPage(result.getNumber());\n             }\n \n-            if (request.isUsePages() != null && !request.isUsePages()) {\n+            if (result != null && request.isUsePages() != null && !request.isUsePages()) {", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1NzI0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557457248", "bodyText": "licence header missing", "author": "robindenadel", "createdAt": "2021-01-14T14:59:15Z", "path": "osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.opensmartgridplatform.adapter.ws.core.application.services;", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\nindex e3e56c1df5..03fc411718 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n\n@@ -1,7 +1,17 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.ws.core.application.services;\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import javax.persistence.criteria.CriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1Nzk2OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557457968", "bodyText": "use a static import so we don't need to put Assertions. here", "author": "robindenadel", "createdAt": "2021-01-14T15:00:10Z", "path": "osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.opensmartgridplatform.adapter.ws.core.application.services;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.when;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.ws.core.application.criteria.SearchEventsCriteria;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.repositories.EventRepository;\n+import org.opensmartgridplatform.domain.core.specifications.EventSpecifications;\n+import org.opensmartgridplatform.shared.application.config.PagingSettings;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+@ExtendWith(MockitoExtension.class)\n+class DeviceManagementServiceTest {\n+    @Mock\n+    private SearchEventsCriteria criteria;\n+    @Mock\n+    private Specification<Event> descriptionSpecification;\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+    @Mock\n+    private DomainHelperService domainHelperService;\n+    @Mock\n+    private EventRepository eventRepository;\n+    @Mock\n+    private EventSpecifications eventSpecifications;\n+    @Mock\n+    private Page<String> page;\n+    @Mock\n+    private PagingSettings pagingSettings;\n+    @Mock\n+    private Specification<Event> specification;\n+\n+    @Test\n+    void findEventsTest() throws FunctionalException {\n+        when(this.criteria.getOrganisationIdentification()).thenReturn(\"orgIdentification\");\n+        when(this.criteria.getDeviceIdentification()).thenReturn(\"deviceIdentification\");\n+        when(this.criteria.getDescriptionStartsWith()).thenReturn(\"descriptionStartValue\");\n+        when(this.criteria.getDescription()).thenReturn(\"description\");\n+        when(this.domainHelperService.findOrganisation(any())).thenReturn(new Organisation());\n+        doNothing().when(this.pagingSettings).updatePagingSettings(any());\n+        when(this.domainHelperService.findDevice(any())).thenReturn(new Device());\n+        doNothing().when(this.domainHelperService).isAllowed(any(), any(), any());\n+        when(this.eventSpecifications.isFromDevice(any())).thenReturn(this.specification);\n+        when(this.eventSpecifications.withDescription(any())).thenReturn(this.descriptionSpecification);\n+        when(this.pagingSettings.getPageNumber()).thenReturn(1);\n+        when(this.pagingSettings.getPageSize()).thenReturn(1);\n+        when(this.eventRepository.findAll((Specification<Event>) any(), any(Pageable.class))).thenReturn(null);\n+        when(this.specification.and(any())).thenReturn(this.specification);\n+        when(this.descriptionSpecification.or(any())).thenReturn(this.descriptionSpecification);\n+\n+        final Page<Event> resultPage = this.deviceManagementService.findEvents(this.criteria);\n+\n+        Assertions.assertThat(resultPage).isNull();", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\nindex e3e56c1df5..03fc411718 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n\n@@ -1,7 +1,17 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.ws.core.application.services;\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import javax.persistence.criteria.CriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1ODQ4OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557458489", "bodyText": "refactor the return part into a method", "author": "robindenadel", "createdAt": "2021-01-14T15:00:52Z", "path": "osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.opensmartgridplatform.adapter.ws.core.application.services;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.when;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.ws.core.application.criteria.SearchEventsCriteria;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.repositories.EventRepository;\n+import org.opensmartgridplatform.domain.core.specifications.EventSpecifications;\n+import org.opensmartgridplatform.shared.application.config.PagingSettings;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+@ExtendWith(MockitoExtension.class)\n+class DeviceManagementServiceTest {\n+    @Mock\n+    private SearchEventsCriteria criteria;\n+    @Mock\n+    private Specification<Event> descriptionSpecification;\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+    @Mock\n+    private DomainHelperService domainHelperService;\n+    @Mock\n+    private EventRepository eventRepository;\n+    @Mock\n+    private EventSpecifications eventSpecifications;\n+    @Mock\n+    private Page<String> page;\n+    @Mock\n+    private PagingSettings pagingSettings;\n+    @Mock\n+    private Specification<Event> specification;\n+\n+    @Test\n+    void findEventsTest() throws FunctionalException {\n+        when(this.criteria.getOrganisationIdentification()).thenReturn(\"orgIdentification\");\n+        when(this.criteria.getDeviceIdentification()).thenReturn(\"deviceIdentification\");\n+        when(this.criteria.getDescriptionStartsWith()).thenReturn(\"descriptionStartValue\");\n+        when(this.criteria.getDescription()).thenReturn(\"description\");\n+        when(this.domainHelperService.findOrganisation(any())).thenReturn(new Organisation());\n+        doNothing().when(this.pagingSettings).updatePagingSettings(any());\n+        when(this.domainHelperService.findDevice(any())).thenReturn(new Device());\n+        doNothing().when(this.domainHelperService).isAllowed(any(), any(), any());\n+        when(this.eventSpecifications.isFromDevice(any())).thenReturn(this.specification);\n+        when(this.eventSpecifications.withDescription(any())).thenReturn(this.descriptionSpecification);\n+        when(this.pagingSettings.getPageNumber()).thenReturn(1);\n+        when(this.pagingSettings.getPageSize()).thenReturn(1);\n+        when(this.eventRepository.findAll((Specification<Event>) any(), any(Pageable.class))).thenReturn(null);\n+        when(this.specification.and(any())).thenReturn(this.specification);\n+        when(this.descriptionSpecification.or(any())).thenReturn(this.descriptionSpecification);\n+\n+        final Page<Event> resultPage = this.deviceManagementService.findEvents(this.criteria);\n+\n+        Assertions.assertThat(resultPage).isNull();\n+    }\n+\n+    @Test\n+    void findEventsWithNoDescriptionStartsWithTest() throws FunctionalException {\n+        when(this.criteria.getOrganisationIdentification()).thenReturn(\"orgIdentification\");\n+        when(this.criteria.getDeviceIdentification()).thenReturn(\"deviceIdentification\");\n+        when(this.domainHelperService.findOrganisation(any())).thenReturn(new Organisation());\n+        doNothing().when(this.pagingSettings).updatePagingSettings(any());\n+        when(this.domainHelperService.findDevice(any())).thenReturn(new Device());\n+        doNothing().when(this.domainHelperService).isAllowed(any(), any(), any());\n+        when(this.eventSpecifications.isFromDevice(any())).thenReturn(new Specification<Event>() {\n+            private static final long serialVersionUID = 2946693984484298490L;\n+\n+            @Override\n+            public Predicate toPredicate(final Root<Event> root, final CriteriaQuery<?> criteriaQuery,\n+                    final CriteriaBuilder criteriaBuilder) {\n+                return null;\n+            }\n+        });", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\nindex e3e56c1df5..03fc411718 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n\n@@ -1,7 +1,17 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.ws.core.application.services;\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import javax.persistence.criteria.CriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1OTkxNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557459916", "bodyText": "there are only tests checking for the resultPage to be null\nI would expect tests checking a non-null result as well", "author": "robindenadel", "createdAt": "2021-01-14T15:02:22Z", "path": "osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.opensmartgridplatform.adapter.ws.core.application.services;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.when;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.ws.core.application.criteria.SearchEventsCriteria;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.repositories.EventRepository;\n+import org.opensmartgridplatform.domain.core.specifications.EventSpecifications;\n+import org.opensmartgridplatform.shared.application.config.PagingSettings;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+@ExtendWith(MockitoExtension.class)\n+class DeviceManagementServiceTest {", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\nindex e3e56c1df5..03fc411718 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n\n@@ -1,7 +1,17 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.ws.core.application.services;\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import javax.persistence.criteria.CriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MDI1MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557460250", "bodyText": "see earlier comment", "author": "robindenadel", "createdAt": "2021-01-14T15:02:45Z", "path": "osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.opensmartgridplatform.adapter.ws.core.application.services;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.when;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.ws.core.application.criteria.SearchEventsCriteria;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.repositories.EventRepository;\n+import org.opensmartgridplatform.domain.core.specifications.EventSpecifications;\n+import org.opensmartgridplatform.shared.application.config.PagingSettings;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+@ExtendWith(MockitoExtension.class)\n+class DeviceManagementServiceTest {\n+    @Mock\n+    private SearchEventsCriteria criteria;\n+    @Mock\n+    private Specification<Event> descriptionSpecification;\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+    @Mock\n+    private DomainHelperService domainHelperService;\n+    @Mock\n+    private EventRepository eventRepository;\n+    @Mock\n+    private EventSpecifications eventSpecifications;\n+    @Mock\n+    private Page<String> page;\n+    @Mock\n+    private PagingSettings pagingSettings;\n+    @Mock\n+    private Specification<Event> specification;\n+\n+    @Test\n+    void findEventsTest() throws FunctionalException {\n+        when(this.criteria.getOrganisationIdentification()).thenReturn(\"orgIdentification\");\n+        when(this.criteria.getDeviceIdentification()).thenReturn(\"deviceIdentification\");\n+        when(this.criteria.getDescriptionStartsWith()).thenReturn(\"descriptionStartValue\");\n+        when(this.criteria.getDescription()).thenReturn(\"description\");\n+        when(this.domainHelperService.findOrganisation(any())).thenReturn(new Organisation());\n+        doNothing().when(this.pagingSettings).updatePagingSettings(any());\n+        when(this.domainHelperService.findDevice(any())).thenReturn(new Device());\n+        doNothing().when(this.domainHelperService).isAllowed(any(), any(), any());\n+        when(this.eventSpecifications.isFromDevice(any())).thenReturn(this.specification);\n+        when(this.eventSpecifications.withDescription(any())).thenReturn(this.descriptionSpecification);\n+        when(this.pagingSettings.getPageNumber()).thenReturn(1);\n+        when(this.pagingSettings.getPageSize()).thenReturn(1);\n+        when(this.eventRepository.findAll((Specification<Event>) any(), any(Pageable.class))).thenReturn(null);\n+        when(this.specification.and(any())).thenReturn(this.specification);\n+        when(this.descriptionSpecification.or(any())).thenReturn(this.descriptionSpecification);\n+\n+        final Page<Event> resultPage = this.deviceManagementService.findEvents(this.criteria);\n+\n+        Assertions.assertThat(resultPage).isNull();\n+    }\n+\n+    @Test\n+    void findEventsWithNoDescriptionStartsWithTest() throws FunctionalException {\n+        when(this.criteria.getOrganisationIdentification()).thenReturn(\"orgIdentification\");\n+        when(this.criteria.getDeviceIdentification()).thenReturn(\"deviceIdentification\");\n+        when(this.domainHelperService.findOrganisation(any())).thenReturn(new Organisation());\n+        doNothing().when(this.pagingSettings).updatePagingSettings(any());\n+        when(this.domainHelperService.findDevice(any())).thenReturn(new Device());\n+        doNothing().when(this.domainHelperService).isAllowed(any(), any(), any());\n+        when(this.eventSpecifications.isFromDevice(any())).thenReturn(new Specification<Event>() {\n+            private static final long serialVersionUID = 2946693984484298490L;\n+\n+            @Override\n+            public Predicate toPredicate(final Root<Event> root, final CriteriaQuery<?> criteriaQuery,\n+                    final CriteriaBuilder criteriaBuilder) {\n+                return null;\n+            }\n+        });\n+        when(this.pagingSettings.getPageNumber()).thenReturn(1);\n+        when(this.pagingSettings.getPageSize()).thenReturn(1);\n+        when(this.eventRepository.findAll((Specification<Event>) any(), any(Pageable.class))).thenReturn(null);\n+\n+        final Page<Event> resultPage = this.deviceManagementService.findEvents(this.criteria);\n+\n+        Assertions.assertThat(resultPage).isNull();\n+    }\n+\n+    @Test\n+    void findEventsWithNoDescriptionTest() throws FunctionalException {\n+        when(this.criteria.getOrganisationIdentification()).thenReturn(\"orgIdentification\");\n+        when(this.criteria.getDeviceIdentification()).thenReturn(\"deviceIdentification\");\n+        when(this.criteria.getDescriptionStartsWith()).thenReturn(\"descriptionStartValue\");\n+        when(this.domainHelperService.findOrganisation(any())).thenReturn(new Organisation());\n+        doNothing().when(this.pagingSettings).updatePagingSettings(any());\n+        when(this.domainHelperService.findDevice(any())).thenReturn(new Device());\n+        doNothing().when(this.domainHelperService).isAllowed(any(), any(), any());\n+        when(this.eventSpecifications.isFromDevice(any())).thenReturn(new Specification<Event>() {\n+            private static final long serialVersionUID = 2946693984484298490L;\n+\n+            @Override\n+            public Predicate toPredicate(final Root<Event> root, final CriteriaQuery<?> criteriaQuery,\n+                    final CriteriaBuilder criteriaBuilder) {\n+                return null;\n+            }\n+        });", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\nindex e3e56c1df5..03fc411718 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n\n@@ -1,7 +1,17 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.ws.core.application.services;\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import javax.persistence.criteria.CriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MTAxMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557461010", "bodyText": "the empty line was fine here, roll back the change", "author": "robindenadel", "createdAt": "2021-01-14T15:03:54Z", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java", "diffHunk": "@@ -68,7 +68,6 @@\n import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n-", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\nindex 3131a5d101..588d726642 100644\n--- a/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n+++ b/osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/endpoints/SmartMeteringManagementEndpoint.java\n\n@@ -68,6 +68,7 @@ import org.springframework.ws.server.endpoint.annotation.Endpoint;\n import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n @Endpoint\n public class SmartMeteringManagementEndpoint extends SmartMeteringEndpoint {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MTk4MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557461981", "bodyText": "why was the order of methods changed?", "author": "robindenadel", "createdAt": "2021-01-14T15:05:14Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java", "diffHunk": "@@ -19,11 +19,28 @@\n @SoapFault(faultCode = FaultCode.SERVER)\n public class ValidationException extends PlatformException {\n \n+    private static final String DEFAULT_MESSAGE = \"Validation Exception\";\n     /**\n      * Serial Version UID.\n      */\n     private static final long serialVersionUID = 9063383618380310347L;\n-    private static final String DEFAULT_MESSAGE = \"Validation Exception\";\n+", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java\nindex 8cf40f0aa8..cb86933feb 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/exceptions/ValidationException.java\n\n@@ -19,11 +19,11 @@ import org.springframework.ws.soap.server.endpoint.annotation.SoapFault;\n @SoapFault(faultCode = FaultCode.SERVER)\n public class ValidationException extends PlatformException {\n \n-    private static final String DEFAULT_MESSAGE = \"Validation Exception\";\n     /**\n      * Serial Version UID.\n      */\n     private static final long serialVersionUID = 9063383618380310347L;\n+    private static final String DEFAULT_MESSAGE = \"Validation Exception\";\n \n     private static String convertToString(final Set<? extends ConstraintViolation<?>> constraintViolations) {\n         final StringBuilder violations = new StringBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MjY2MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557462660", "bodyText": "this line introduced another sonar issue", "author": "robindenadel", "createdAt": "2021-01-14T15:06:02Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java", "diffHunk": "@@ -53,7 +54,7 @@ public boolean hasStatusBits() {\n \n     public Set<ClockStatusBit> getStatusBits() {\n         if (this.statusBits == null) {\n-            return null;\n+            return new HashSet<ClockStatusBit>();", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java\nindex fce169f5f1..469c3dae1c 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatus.java\n\n@@ -54,7 +54,7 @@ public class ClockStatus implements Serializable {\n \n     public Set<ClockStatusBit> getStatusBits() {\n         if (this.statusBits == null) {\n-            return new HashSet<ClockStatusBit>();\n+            return new HashSet<>();\n         }\n         return EnumSet.copyOf(this.statusBits);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MzU1NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557463555", "bodyText": "why was the order of elements changed?", "author": "robindenadel", "createdAt": "2021-01-14T15:07:05Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java", "diffHunk": "@@ -10,41 +10,30 @@\n import java.util.EnumSet;\n import java.util.Set;\n \n+// suppress warning for duplicate string at reserved (line 21,22,23). The way it\n+// is currently done is according to the blue book 12th edition at paragraph 4.1.6.1\n+@SuppressWarnings(\"squid:S1192\")\n public enum ClockStatusBit {\n \n-    INVALID_VALUE(\"invalid value\"),\n-    DOUBTFUL_VALUE(\"doubtful value\"),\n+    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\"),\n     DIFFERENT_CLOCK_BASE(\"different clock base\"),\n+    DOUBTFUL_VALUE(\"doubtful value\"),\n     INVALID_CLOCK_STATUS(\"invalid clock status\"),\n+    INVALID_VALUE(\"invalid value\"),\n     RESERVED_1(\"reserved\"),\n     RESERVED_2(\"reserved\"),\n-    RESERVED_3(\"reserved\"),\n-    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\");", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff73c45de2f4ed4db7b03ee3c22e8a8a9e881185", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\nindex 243f3c8793..0009ff6124 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\n\n@@ -15,14 +15,34 @@ import java.util.Set;\n @SuppressWarnings(\"squid:S1192\")\n public enum ClockStatusBit {\n \n-    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\"),\n-    DIFFERENT_CLOCK_BASE(\"different clock base\"),\n+    INVALID_VALUE(\"invalid value\"),\n     DOUBTFUL_VALUE(\"doubtful value\"),\n+    DIFFERENT_CLOCK_BASE(\"different clock base\"),\n     INVALID_CLOCK_STATUS(\"invalid clock status\"),\n-    INVALID_VALUE(\"invalid value\"),\n     RESERVED_1(\"reserved\"),\n     RESERVED_2(\"reserved\"),\n-    RESERVED_3(\"reserved\");\n+    RESERVED_3(\"reserved\"),\n+    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\");\n+\n+    private final String description;\n+\n+    ClockStatusBit(final String description) {\n+        this.description = description;\n+    }\n+\n+    public String getDescription() {\n+        return this.description;\n+    }\n+\n+    public boolean isSet(final int clockStatus) {\n+        final int mask = 1 << this.ordinal();\n+        return mask == (mask & clockStatus);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.description;\n+    }\n \n     public static Set<ClockStatusBit> forClockStatus(final byte clockStatus) {\n         return forClockStatus(clockStatus & 0xFF);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2NDA5OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557464099", "bodyText": "why was the order of methods changed?", "author": "robindenadel", "createdAt": "2021-01-14T15:07:44Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java", "diffHunk": "@@ -10,41 +10,30 @@\n import java.util.EnumSet;\n import java.util.Set;\n \n+// suppress warning for duplicate string at reserved (line 21,22,23). The way it\n+// is currently done is according to the blue book 12th edition at paragraph 4.1.6.1\n+@SuppressWarnings(\"squid:S1192\")\n public enum ClockStatusBit {\n \n-    INVALID_VALUE(\"invalid value\"),\n-    DOUBTFUL_VALUE(\"doubtful value\"),\n+    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\"),\n     DIFFERENT_CLOCK_BASE(\"different clock base\"),\n+    DOUBTFUL_VALUE(\"doubtful value\"),\n     INVALID_CLOCK_STATUS(\"invalid clock status\"),\n+    INVALID_VALUE(\"invalid value\"),\n     RESERVED_1(\"reserved\"),\n     RESERVED_2(\"reserved\"),\n-    RESERVED_3(\"reserved\"),\n-    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\");\n-\n-    private final String description;\n-\n-    ClockStatusBit(final String description) {\n-        this.description = description;\n-    }\n-\n-    public String getDescription() {\n-        return this.description;\n-    }\n-\n-    public boolean isSet(final int clockStatus) {\n-        final int mask = 1 << this.ordinal();\n-        return mask == (mask & clockStatus);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return this.description;\n-    }", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff73c45de2f4ed4db7b03ee3c22e8a8a9e881185", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\nindex 243f3c8793..0009ff6124 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\n\n@@ -15,14 +15,34 @@ import java.util.Set;\n @SuppressWarnings(\"squid:S1192\")\n public enum ClockStatusBit {\n \n-    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\"),\n-    DIFFERENT_CLOCK_BASE(\"different clock base\"),\n+    INVALID_VALUE(\"invalid value\"),\n     DOUBTFUL_VALUE(\"doubtful value\"),\n+    DIFFERENT_CLOCK_BASE(\"different clock base\"),\n     INVALID_CLOCK_STATUS(\"invalid clock status\"),\n-    INVALID_VALUE(\"invalid value\"),\n     RESERVED_1(\"reserved\"),\n     RESERVED_2(\"reserved\"),\n-    RESERVED_3(\"reserved\");\n+    RESERVED_3(\"reserved\"),\n+    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\");\n+\n+    private final String description;\n+\n+    ClockStatusBit(final String description) {\n+        this.description = description;\n+    }\n+\n+    public String getDescription() {\n+        return this.description;\n+    }\n+\n+    public boolean isSet(final int clockStatus) {\n+        final int mask = 1 << this.ordinal();\n+        return mask == (mask & clockStatus);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.description;\n+    }\n \n     public static Set<ClockStatusBit> forClockStatus(final byte clockStatus) {\n         return forClockStatus(clockStatus & 0xFF);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2NDUwOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557464508", "bodyText": "very good!", "author": "robindenadel", "createdAt": "2021-01-14T15:08:11Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java", "diffHunk": "@@ -10,41 +10,30 @@\n import java.util.EnumSet;\n import java.util.Set;\n \n+// suppress warning for duplicate string at reserved (line 21,22,23). The way it\n+// is currently done is according to the blue book 12th edition at paragraph 4.1.6.1\n+@SuppressWarnings(\"squid:S1192\")\n public enum ClockStatusBit {\n \n-    INVALID_VALUE(\"invalid value\"),\n-    DOUBTFUL_VALUE(\"doubtful value\"),\n+    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\"),\n     DIFFERENT_CLOCK_BASE(\"different clock base\"),\n+    DOUBTFUL_VALUE(\"doubtful value\"),\n     INVALID_CLOCK_STATUS(\"invalid clock status\"),\n+    INVALID_VALUE(\"invalid value\"),\n     RESERVED_1(\"reserved\"),\n     RESERVED_2(\"reserved\"),\n-    RESERVED_3(\"reserved\"),\n-    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\");\n-\n-    private final String description;\n-\n-    ClockStatusBit(final String description) {\n-        this.description = description;\n-    }\n-\n-    public String getDescription() {\n-        return this.description;\n-    }\n-\n-    public boolean isSet(final int clockStatus) {\n-        final int mask = 1 << this.ordinal();\n-        return mask == (mask & clockStatus);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return this.description;\n-    }\n+    RESERVED_3(\"reserved\");\n \n     public static Set<ClockStatusBit> forClockStatus(final byte clockStatus) {\n         return forClockStatus(clockStatus & 0xFF);\n     }\n \n+    // SonarQube complains about the null return. SonarQube wants to see a\n+    // return of an empty set. The problem is that the behavior of the code\n+    // differs depending on whether the return value is null or an empty set.\n+    // Trying to correct this would result in other behavior changes, making a\n+    // simple fix not possible. It is still an issue though, meaning it\n+    // shouldn't be suppressed.", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff73c45de2f4ed4db7b03ee3c22e8a8a9e881185", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\nindex 243f3c8793..0009ff6124 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/ClockStatusBit.java\n\n@@ -15,14 +15,34 @@ import java.util.Set;\n @SuppressWarnings(\"squid:S1192\")\n public enum ClockStatusBit {\n \n-    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\"),\n-    DIFFERENT_CLOCK_BASE(\"different clock base\"),\n+    INVALID_VALUE(\"invalid value\"),\n     DOUBTFUL_VALUE(\"doubtful value\"),\n+    DIFFERENT_CLOCK_BASE(\"different clock base\"),\n     INVALID_CLOCK_STATUS(\"invalid clock status\"),\n-    INVALID_VALUE(\"invalid value\"),\n     RESERVED_1(\"reserved\"),\n     RESERVED_2(\"reserved\"),\n-    RESERVED_3(\"reserved\");\n+    RESERVED_3(\"reserved\"),\n+    DAYLIGHT_SAVING_ACTIVE(\"daylight saving active\");\n+\n+    private final String description;\n+\n+    ClockStatusBit(final String description) {\n+        this.description = description;\n+    }\n+\n+    public String getDescription() {\n+        return this.description;\n+    }\n+\n+    public boolean isSet(final int clockStatus) {\n+        final int mask = 1 << this.ordinal();\n+        return mask == (mask & clockStatus);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this.description;\n+    }\n \n     public static Set<ClockStatusBit> forClockStatus(final byte clockStatus) {\n         return forClockStatus(clockStatus & 0xFF);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ4NTMwNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557485306", "bodyText": "Mock is not used in class. Maybe remove?", "author": "MithraicMagic", "createdAt": "2021-01-14T15:35:41Z", "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ConfigurationMapper;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemDateTime;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemObisCode;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemObjectDefinition;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.PushSetupAlarm;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.WindowElement;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.PushSetupAlarmDto;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PushSetupAlarmDtoConverterTest {\n+    @Mock\n+    private ConfigurationMapper configurationMapper;\n+    @Mock\n+    private PushSetupAlarmDto pushSetupAlarmDto;", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\nindex 1525a6e63f..7416893491 100644\n--- a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n+++ b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n\n@@ -1,13 +1,20 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.when;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ4NTc0Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r557485747", "bodyText": "This is used in both functions, set globally in class?", "author": "MithraicMagic", "createdAt": "2021-01-14T15:36:12Z", "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.ConfigurationMapper;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemDateTime;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemObisCode;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.CosemObjectDefinition;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.PushSetupAlarm;\n+import org.opensmartgridplatform.domain.core.valueobjects.smartmetering.WindowElement;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.PushSetupAlarmDto;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PushSetupAlarmDtoConverterTest {\n+    @Mock\n+    private ConfigurationMapper configurationMapper;\n+    @Mock\n+    private PushSetupAlarmDto pushSetupAlarmDto;\n+    @Mock\n+    private MappingContext mappingContext;\n+    @Mock\n+    private PushSetupAlarm pushSetupAlarm;\n+    private PushSetupAlarmDtoConverter pushSetupAlarmDtoConverter;\n+\n+    @Test\n+    void convertTest() {\n+        this.pushSetupAlarmDtoConverter = new PushSetupAlarmDtoConverter(this.configurationMapper);", "originalCommit": "90fbac293f9a5c4d6eea912400bd9d631a01e3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b045531425ed09eca9236585898538e2acb6d8f3", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\nindex 1525a6e63f..7416893491 100644\n--- a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n+++ b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n\n@@ -1,13 +1,20 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.domain.smartmetering.application.mapping.customconverters;\n \n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.when;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import ma.glasnost.orika.MappingContext;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n"}}, {"oid": "b045531425ed09eca9236585898538e2acb6d8f3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b045531425ed09eca9236585898538e2acb6d8f3", "message": "Feedback SonarQube issues implemented\n\nsome small fixes to several previous changes / additions.", "committedDate": "2021-01-19T09:43:43Z", "type": "commit"}, {"oid": "a3d3c326d7ac8bc2572ceeafa6514c2e1070fa49", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a3d3c326d7ac8bc2572ceeafa6514c2e1070fa49", "message": "Improved DeviceManagementServiceTest\n\nImproved the tests, mainly by refactoring them to make them more readable. Also added a test for the last possibility", "committedDate": "2021-01-19T10:02:10Z", "type": "commit"}, {"oid": "2b3da3275789de2ef707a96d2ea57aeaadb60779", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2b3da3275789de2ef707a96d2ea57aeaadb60779", "message": "Merge branch 'development' into code_quality/Solving_SonarQube_Issues", "committedDate": "2021-01-19T15:21:22Z", "type": "commit"}, {"oid": "ff73c45de2f4ed4db7b03ee3c22e8a8a9e881185", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ff73c45de2f4ed4db7b03ee3c22e8a8a9e881185", "message": "Fixed ClockStatusBits", "committedDate": "2021-01-19T15:37:29Z", "type": "commit"}, {"oid": "0a81e6926b9c48ff8bf223b96b2d096a376d9e7c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0a81e6926b9c48ff8bf223b96b2d096a376d9e7c", "message": "Fixed ValidationException", "committedDate": "2021-01-19T15:41:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2MDExMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r561660113", "bodyText": "2021", "author": "robindenadel", "createdAt": "2021-01-21T07:44:43Z", "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright 2020 Alliander N.V.", "originalCommit": "0a81e6926b9c48ff8bf223b96b2d096a376d9e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a37b5776f642176b1a737c2fe229e0eaedc1b715", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\nindex 7416893491..1397567949 100644\n--- a/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n+++ b/osgp/platform/osgp-adapter-domain-smartmetering/src/test/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/PushSetupAlarmDtoConverterTest.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Alliander N.V.\n+ * Copyright 2021 Alliander N.V.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2MDQxNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/446#discussion_r561660414", "bodyText": "2021", "author": "robindenadel", "createdAt": "2021-01-21T07:45:28Z", "path": "osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright 2020 Alliander N.V.", "originalCommit": "0a81e6926b9c48ff8bf223b96b2d096a376d9e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a37b5776f642176b1a737c2fe229e0eaedc1b715", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\nindex 298f5272ed..bb6565e0b0 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/test/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementServiceTest.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Alliander N.V.\n+ * Copyright 2021 Alliander N.V.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"oid": "a37b5776f642176b1a737c2fe229e0eaedc1b715", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a37b5776f642176b1a737c2fe229e0eaedc1b715", "message": "License headers changed", "committedDate": "2021-01-21T08:51:20Z", "type": "commit"}]}