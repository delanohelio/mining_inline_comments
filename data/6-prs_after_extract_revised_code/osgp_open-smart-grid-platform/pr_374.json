{"pr_number": 374, "pr_title": "OC-615 ~ Reduces cyclomatic complexity of several methods.", "pr_createdAt": "2020-07-14T13:03:07Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/374", "timeline": [{"oid": "24a36de1de0f9b402bc21bec836785e13de1c214", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/24a36de1de0f9b402bc21bec836785e13de1c214", "message": "OC-615/Simplified-LongTermIntervalAndLongTermIntervalTypeValidator", "committedDate": "2020-07-14T12:57:05Z", "type": "commit"}, {"oid": "b33ec6c6a379c972814c33578b613d646340e034", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b33ec6c6a379c972814c33578b613d646340e034", "message": "OC-615/Simplified-LongTermIntervalAndLongTermIntervalTypeValidator-fixed-unreachable-statement", "committedDate": "2020-07-14T15:13:53Z", "type": "commit"}, {"oid": "a2f12c4a65494ed638fa10af6e966d994112c86d", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a2f12c4a65494ed638fa10af6e966d994112c86d", "message": "OC-615 ~ Reduces cyclomatic complexity of\nLongTermIntervalAndLongTermIntervalTypeValidator.", "committedDate": "2020-07-16T14:25:16Z", "type": "commit"}, {"oid": "6ab9a4f48269aabf12b0be666263710a433d6288", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6ab9a4f48269aabf12b0be666263710a433d6288", "message": "OC-615 ~ Reduces cyclomatic complexity of\nOslpUtils#isOslpResponse(OslpEnvelope).", "committedDate": "2020-07-17T13:33:19Z", "type": "commit"}, {"oid": "628b32ee205b2e16b47c1473958ade5b09933485", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/628b32ee205b2e16b47c1473958ade5b09933485", "message": "OC-615 ~ Reduces cyclomatic complexity of\nConfigurationToOslpSetConfigurationRequestConverter#convert(ConfigurationDto,\nOslp.SetConfigurationRequest, MappingContext).", "committedDate": "2020-07-17T14:42:16Z", "type": "commit"}, {"oid": "1ec609bfdb7a5961251d96cb402ee77cd5749196", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1ec609bfdb7a5961251d96cb402ee77cd5749196", "message": "OC-615 ~ Reduces cyclomatic complexity of\nOslpGetConfigurationResponseToConfigurationConverter#convert(Oslp.GetConfigurationResponse,\nConfigurationDto, MappingContext).", "committedDate": "2020-07-17T15:36:23Z", "type": "commit"}, {"oid": "9ec4b75c4c475fb7eb236c3d6b7147501ba00c2a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9ec4b75c4c475fb7eb236c3d6b7147501ba00c2a", "message": "OC-615 ~ Reduces cyclomatic complexity of\nDaylightSavingTimeTransition#isValid(String).", "committedDate": "2020-07-21T20:50:14Z", "type": "commit"}, {"oid": "9405d5367d5fd43cc626e2d9f9629042864beab8", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9405d5367d5fd43cc626e2d9f9629042864beab8", "message": "OC-615 ~ Resolves SonarQube issue 'Replace this if-then-else statement\nby a single return statement'.", "committedDate": "2020-07-22T13:29:42Z", "type": "commit"}, {"oid": "b8bf5e1efeec97d4c19e0f9e6cd64fa689cd787a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b8bf5e1efeec97d4c19e0f9e6cd64fa689cd787a", "message": "OC-615 ~ Reduces cyclomatic complexity of\nIec61850SetConfigurationCommand#setConfigurationOnDevice(Iec61850Client,\nDeviceConnection, ConfigurationDto).", "committedDate": "2020-07-22T22:02:02Z", "type": "commit"}, {"oid": "f03dbd7f527810e2d57a78f12de3bc65d181ead3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f03dbd7f527810e2d57a78f12de3bc65d181ead3", "message": "OC-615 ~ Reduces cyclomatic complexity of\nIEC61850SetScheduleCommand#writeScheduleEntryForRelay(DeviceMessageLog,\n List<ScheduleEntry>, LogicalNode, NodeContainer schedule, int).", "committedDate": "2020-07-22T23:59:47Z", "type": "commit"}, {"oid": "ad340ecd3e4e69f3e24a224057ad1e06b1248c52", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ad340ecd3e4e69f3e24a224057ad1e06b1248c52", "message": "OC-615 ~ Reduces cyclomatic complexity of\nIec61850SetScheduleCommand#createScheduleEntries(List<ScheduleEntryDto>\n, Ssld, RelayTypeDto, SsldDataService).", "committedDate": "2020-07-23T00:43:59Z", "type": "commit"}, {"oid": "11d2c34f6548c68374af1cd269e880f844f3f918", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/11d2c34f6548c68374af1cd269e880f844f3f918", "message": "OC-615 ~ Reduces cyclomatic complexity of\nOslpDeviceService#convertToOslpSchedules(List<ScheduleEntryDto>).", "committedDate": "2020-07-23T01:06:12Z", "type": "commit"}, {"oid": "3d39f33d25a9a9bb9fac19666048e8c219c8504a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3d39f33d25a9a9bb9fac19666048e8c219c8504a", "message": "OC-615 ~ Refactors OslpChannelHandler#handleRequest(OslpEnvelope, int).", "committedDate": "2020-07-23T08:29:35Z", "type": "commit"}, {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "message": "OC-615 ~ Reduces number of arguments to resolve SonarQube issue.", "committedDate": "2020-07-23T14:50:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyMTQ2OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459521468", "bodyText": "Reduce this anonymous class number of lines from 164 to at most 20, or make it a named class.", "author": "jenkins-ip-10-4-24-184", "createdAt": "2020-07-23T15:07:35Z", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "diffHunk": "@@ -77,7 +82,7 @@ public void setScheduleOnDevice(final Iec61850Client iec61850Client, final Devic\n         try {\n             // Creating a list of all Schedule entries, grouped by relay index.\n             final Map<Integer, List<ScheduleEntry>> relaySchedulesEntries = this.createScheduleEntries(scheduleList,\n-                    ssld, relayType, ssldDataService);\n+                    ssld, relayType);\n \n             final Function<Void> function = new Function<Void>() {", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NTA3Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459875076", "bodyText": "I think this should be a private method.\nFurthermore, the parameter could be an int, nothing is done with the Configuration object in this method besides using the getLongTermHistoryInterval.", "author": "robindenadel", "createdAt": "2020-07-24T06:36:04Z", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/validation/LongTermIntervalAndLongTermIntervalTypeValidator.java", "diffHunk": "@@ -27,33 +27,34 @@ public boolean isValid(final Configuration value, final ConstraintValidatorConte\n             return true;\n         }\n         // If LongTermHistoryInterval or LongTermHistoryIntervalType is not\n-        // present,\n-        // the other must be not present as well.\n+        // present, the other must be not present as well.\n         if (value.getLongTermHistoryInterval() == null && value.getLongTermHistoryIntervalType() == null) {\n             return true;\n         }\n-        // If LongTermHistoryInterval or LongTermHistoryIntervalType is present,\n-        // the other must be as well.\n-        if (value.getLongTermHistoryInterval() != null && value.getLongTermHistoryIntervalType() != null) {\n-            // And, the value of long term history interval must be among the\n-            // permitted values, defined by the ranges:\n-            // - from 1 to 30 for long term history interval type DAYS.\n-            // - from 1 to 12 for long term history interval type MONTHS.\n-            switch (value.getLongTermHistoryIntervalType()) {\n-            case DAYS:\n-                if (value.getLongTermHistoryInterval() >= 1 && value.getLongTermHistoryInterval() <= 30) {\n-                    return true;\n-                }\n-                break;\n-            case MONTHS:\n-                if (value.getLongTermHistoryInterval() >= 1 && value.getLongTermHistoryInterval() <= 12) {\n-                    return true;\n-                }\n-                break;\n-            default:\n-                throw new ValidationException(\"unknown LongTermHistoryIntervalType\");\n+        // And, the value of long term history interval must be among the\n+        // permitted values, defined by the ranges:\n+        // - from 1 to 30 for long term history interval type DAYS.\n+        // - from 1 to 12 for long term history interval type MONTHS.\n+        return this.checkRanges(value);\n+    }\n+\n+    protected boolean checkRanges(final Configuration value) {", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMjc2Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460122767", "bodyText": "Changed method to private and added arguments for the interval value and type.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NTA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/validation/LongTermIntervalAndLongTermIntervalTypeValidator.java b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/validation/LongTermIntervalAndLongTermIntervalTypeValidator.java\nindex 25ad62d1d1..6ac0118a14 100644\n--- a/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/validation/LongTermIntervalAndLongTermIntervalTypeValidator.java\n+++ b/osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/validation/LongTermIntervalAndLongTermIntervalTypeValidator.java\n\n@@ -35,13 +36,13 @@ public class LongTermIntervalAndLongTermIntervalTypeValidator\n         // permitted values, defined by the ranges:\n         // - from 1 to 30 for long term history interval type DAYS.\n         // - from 1 to 12 for long term history interval type MONTHS.\n-        return this.checkRanges(value);\n-    }\n-\n-    protected boolean checkRanges(final Configuration value) {\n         final int interval = value.getLongTermHistoryInterval();\n+        final LongTermIntervalType type = value.getLongTermHistoryIntervalType();\n+        return this.checkRanges(interval, type);\n+    }\n \n-        switch (value.getLongTermHistoryIntervalType()) {\n+    private boolean checkRanges(final int interval, final LongTermIntervalType type) {\n+        switch (type) {\n         case DAYS:\n             if (interval >= 1 && interval <= 30) {\n                 return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5MDA3Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459890073", "bodyText": "by not checking for the value of validRange here, the following test fails, while it should pass:\n@test\npublic void testDayOfWeekOfMonthTransitionValidationExceedsMaxMonth() {\nassertThat(DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH.isValid(\"M13.5.0\")).isFalse();\n}", "author": "robindenadel", "createdAt": "2020-07-24T07:21:05Z", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransition.java", "diffHunk": "@@ -207,16 +207,24 @@ public boolean isValid(final String transition) {\n                 } catch (final NumberFormatException nfe) {\n                     return false;\n                 }\n-                if (m < 1 || m > 12 || w < 1 || w > 5 || d < 0 || d > 6) {\n-                    return false;\n-                }\n+                final boolean validRange = this.checkRange(m, w, d);", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzA0NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123044", "bodyText": "I added the test to the unit tests and refactored the method.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5MDA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransition.java b/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransition.java\nindex 81e36be0c5..1b78ea18fd 100644\n--- a/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransition.java\n+++ b/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransition.java\n\n@@ -207,22 +207,25 @@ public class DaylightSavingTimeTransition {\n                 } catch (final NumberFormatException nfe) {\n                     return false;\n                 }\n-                final boolean validRange = this.checkRange(m, w, d);\n-                if (timeSeparatorPos == -1) {\n-                    return true;\n-                }\n-                return validRange && transition.length() > timeSeparatorPos\n-                        && this.isValidTime(transition.substring(timeSeparatorPos + 1));\n+                return this.checkTransitionTime(transition, timeSeparatorPos, m, w, d);\n             }\n \n-            private boolean checkRange(final int m, final int w, final int d) {\n+            private boolean checkTransitionTime(final String transition, final int timeSeparatorPos, final int m,\n+                    final int w, final int d) {\n                 if (m < 1 || m > 12) {\n                     return false;\n                 }\n                 if (w < 1 || w > 5) {\n                     return false;\n                 }\n-                return !(d < 0 || d > 6);\n+                if (d < 0 || d > 6) {\n+                    return false;\n+                }\n+                if (timeSeparatorPos == -1) {\n+                    return true;\n+                }\n+                return transition.length() > timeSeparatorPos\n+                        && this.isValidTime(transition.substring(timeSeparatorPos + 1));\n             }\n \n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459900748", "bodyText": "I think the readability would be improved if the order of private methods is the same as the calling order setRelayConfiguration, setOsgpIpAddressAndPort, setAstronomicalOffsets, setClockConfiguration and setDhcpConfiguration", "author": "robindenadel", "createdAt": "2020-07-24T07:47:23Z", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetConfigurationCommand.java", "diffHunk": "@@ -51,114 +53,85 @@ public void setConfigurationOnDevice(final Iec61850Client iec61850Client, final\n             @Override\n             public Void apply(final DeviceMessageLog deviceMessageLog) throws ProtocolAdapterException {\n \n-                if (configuration.getRelayConfiguration() != null\n-                        && configuration.getRelayConfiguration().getRelayMap() != null) {\n+                this.setRelayConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                    final List<RelayMapDto> relayMaps = configuration.getRelayConfiguration().getRelayMap();\n-                    for (final RelayMapDto relayMap : relayMaps) {\n-                        final Integer internalIndex = relayMap.getAddress();\n-                        final RelayTypeDto relayType = relayMap.getRelayType();\n+                this.setOsgpIpAddressAndPort(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final LogicalNode logicalNode = LogicalNode.getSwitchComponentByIndex(internalIndex);\n-                        final NodeContainer switchType = deviceConnection.getFcModelNode(LogicalDevice.LIGHTING,\n-                                logicalNode, DataAttribute.SWITCH_TYPE, Fc.CO);\n-                        iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n-                                switchType.getFcmodelNode());\n+                this.setAstronomicalOffsets(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final NodeContainer operation = switchType.getChild(SubDataAttribute.OPERATION);\n-                        iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n-                                operation.getFcmodelNode());\n-                        final BdaInt8 ctlVal = operation.getByte(SubDataAttribute.CONTROL_VALUE);\n+                this.setClockConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final byte switchTypeValue = (byte) (RelayTypeDto.LIGHT.equals(relayType) ? SWITCH_TYPE_LIGHT\n-                                : SWITCH_TYPE_TARIFF);\n-                        LOGGER.info(\"Updating Switch for internal index {} to {} ({})\", internalIndex, switchTypeValue,\n-                                relayType);\n+                this.setDhcpConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        ctlVal.setValue(switchTypeValue);\n-                        operation.write();\n+                Iec61850SetConfigurationCommand.this.loggingService.logMessage(deviceMessageLog,\n+                        deviceConnection.getDeviceIdentification(), deviceConnection.getOrganisationIdentification(),\n+                        false);\n \n-                        deviceMessageLog.addVariable(logicalNode, DataAttribute.SWITCH_TYPE, Fc.CO,\n-                                SubDataAttribute.OPERATION, SubDataAttribute.CONTROL_VALUE,\n-                                Byte.toString(switchTypeValue));\n-                    }\n-                }\n+                return null;\n+            }\n \n-                // Checking to see if all register values are null, so that we\n+            private void setDhcpConfiguration(final Iec61850Client iec61850Client,", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzM4MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123380", "bodyText": "Method order changed to calling order.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetConfigurationCommand.java b/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetConfigurationCommand.java\nindex f39c56f713..1bd6bb9387 100644\n--- a/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetConfigurationCommand.java\n+++ b/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetConfigurationCommand.java\n\n@@ -70,48 +70,115 @@ public class Iec61850SetConfigurationCommand {\n                 return null;\n             }\n \n-            private void setDhcpConfiguration(final Iec61850Client iec61850Client,\n+            private void setRelayConfiguration(final Iec61850Client iec61850Client,\n                     final DeviceConnection deviceConnection, final ConfigurationDto configuration,\n                     final DeviceMessageLog deviceMessageLog) throws NodeException {\n-                // Checking to see if all network values are null, so that we\n+                if (configuration.getRelayConfiguration() != null\n+                        && configuration.getRelayConfiguration().getRelayMap() != null) {\n+\n+                    final List<RelayMapDto> relayMaps = configuration.getRelayConfiguration().getRelayMap();\n+                    for (final RelayMapDto relayMap : relayMaps) {\n+                        final Integer internalIndex = relayMap.getAddress();\n+                        final RelayTypeDto relayType = relayMap.getRelayType();\n+\n+                        final LogicalNode logicalNode = LogicalNode.getSwitchComponentByIndex(internalIndex);\n+                        final NodeContainer switchType = deviceConnection.getFcModelNode(LogicalDevice.LIGHTING,\n+                                logicalNode, DataAttribute.SWITCH_TYPE, Fc.CO);\n+                        iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n+                                switchType.getFcmodelNode());\n+\n+                        final NodeContainer operation = switchType.getChild(SubDataAttribute.OPERATION);\n+                        iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n+                                operation.getFcmodelNode());\n+                        final BdaInt8 ctlVal = operation.getByte(SubDataAttribute.CONTROL_VALUE);\n+\n+                        final byte switchTypeValue = (byte) (RelayTypeDto.LIGHT.equals(relayType) ? SWITCH_TYPE_LIGHT\n+                                : SWITCH_TYPE_TARIFF);\n+                        LOGGER.info(\"Updating Switch for internal index {} to {} ({})\", internalIndex, switchTypeValue,\n+                                relayType);\n+\n+                        ctlVal.setValue(switchTypeValue);\n+                        operation.write();\n+\n+                        deviceMessageLog.addVariable(logicalNode, DataAttribute.SWITCH_TYPE, Fc.CO,\n+                                SubDataAttribute.OPERATION, SubDataAttribute.CONTROL_VALUE,\n+                                Byte.toString(switchTypeValue));\n+                    }\n+                }\n+            }\n+\n+            private void setOsgpIpAddressAndPort(final Iec61850Client iec61850Client,\n+                    final DeviceConnection deviceConnection, final ConfigurationDto configuration,\n+                    final DeviceMessageLog deviceMessageLog) throws NodeException {\n+                // Checking to see if all register values are null, so that we\n                 // don't read the values for no reason.\n-                if (!(configuration.isDhcpEnabled() == null && configuration.getDeviceFixedIp() == null)) {\n+                if (!(configuration.getOsgpIpAddres() == null && configuration.getOsgpPortNumber() == null)) {\n \n-                    final NodeContainer ipConfiguration = deviceConnection.getFcModelNode(LogicalDevice.LIGHTING,\n-                            LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.IP_CONFIGURATION, Fc.CF);\n+                    final NodeContainer registration = deviceConnection.getFcModelNode(LogicalDevice.LIGHTING,\n+                            LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.REGISTRATION, Fc.CF);\n                     iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n-                            ipConfiguration.getFcmodelNode());\n+                            registration.getFcmodelNode());\n \n-                    if (configuration.isDhcpEnabled() != null) {\n-                        LOGGER.info(\"Updating DhcpEnabled to {}\", configuration.isDhcpEnabled());\n-                        ipConfiguration.writeBoolean(SubDataAttribute.ENABLE_DHCP, configuration.isDhcpEnabled());\n+                    if (configuration.getOsgpIpAddres() != null) {\n+                        LOGGER.info(\"Updating OspgIpAddress to {}\", configuration.getOsgpIpAddres());\n+                        registration.writeString(SubDataAttribute.SERVER_ADDRESS, configuration.getOsgpIpAddres());\n \n-                        deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION,\n-                                DataAttribute.IP_CONFIGURATION, Fc.CF, SubDataAttribute.ENABLE_DHCP,\n-                                Boolean.toString(configuration.isDhcpEnabled()));\n+                        deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.REGISTRATION,\n+                                Fc.CF, SubDataAttribute.SERVER_ADDRESS, configuration.getOsgpIpAddres());\n                     }\n \n-                    // All values in DeviceFixedIpDto are non-nullable, so no\n-                    // null-checks are needed.\n-                    final DeviceFixedIpDto deviceFixedIp = configuration.getDeviceFixedIp();\n+                    if (configuration.getOsgpPortNumber() != null) {\n+                        LOGGER.info(\"Updating OsgpPortNumber to {}\", configuration.getOsgpPortNumber());\n+                        registration.writeInteger(SubDataAttribute.SERVER_PORT, configuration.getOsgpPortNumber());\n \n-                    LOGGER.info(\"Updating deviceFixedIpAddress to {}\", configuration.getDeviceFixedIp().getIpAddress());\n-                    ipConfiguration.writeString(SubDataAttribute.IP_ADDRESS, deviceFixedIp.getIpAddress());\n+                        deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.REGISTRATION,\n+                                Fc.CF, SubDataAttribute.SERVER_PORT, configuration.getOsgpPortNumber().toString());\n+                    }\n+                }\n+            }\n \n-                    deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.IP_CONFIGURATION,\n-                            Fc.CF, SubDataAttribute.IP_ADDRESS, deviceFixedIp.getIpAddress());\n+            private void setAstronomicalOffsets(final Iec61850Client iec61850Client,\n+                    final DeviceConnection deviceConnection, final ConfigurationDto configuration,\n+                    final DeviceMessageLog deviceMessageLog) throws NodeException {\n+                // Checking to see if all software configuration values are\n+                // null, so that we don't read the values for no reason.\n+                if (!(configuration.getAstroGateSunRiseOffset() == null\n+                        && configuration.getAstroGateSunSetOffset() == null && configuration.getLightType() == null)) {\n \n-                    LOGGER.info(\"Updating deviceFixedIpNetmask to {}\", configuration.getDeviceFixedIp().getNetMask());\n-                    ipConfiguration.writeString(SubDataAttribute.NETMASK, deviceFixedIp.getNetMask());\n+                    final NodeContainer softwareConfiguration = deviceConnection.getFcModelNode(LogicalDevice.LIGHTING,\n+                            LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.SOFTWARE_CONFIGURATION, Fc.CF);\n+                    iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n+                            softwareConfiguration.getFcmodelNode());\n \n-                    deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.IP_CONFIGURATION,\n-                            Fc.CF, SubDataAttribute.NETMASK, deviceFixedIp.getNetMask());\n+                    if (configuration.getAstroGateSunRiseOffset() != null) {\n+                        LOGGER.info(\"Updating AstroGateSunRiseOffset to {}\", configuration.getAstroGateSunRiseOffset());\n+                        softwareConfiguration.writeShort(SubDataAttribute.ASTRONOMIC_SUNRISE_OFFSET,\n+                                configuration.getAstroGateSunRiseOffset().shortValue());\n \n-                    LOGGER.info(\"Updating deviceFixIpGateway to {}\", configuration.getDeviceFixedIp().getGateWay());\n-                    ipConfiguration.writeString(SubDataAttribute.GATEWAY, deviceFixedIp.getGateWay());\n+                        deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION,\n+                                DataAttribute.SOFTWARE_CONFIGURATION, Fc.CF, SubDataAttribute.ASTRONOMIC_SUNRISE_OFFSET,\n+                                Short.toString(configuration.getAstroGateSunRiseOffset().shortValue()));\n+                    }\n \n-                    deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.IP_CONFIGURATION,\n-                            Fc.CF, SubDataAttribute.GATEWAY, deviceFixedIp.getGateWay());\n+                    if (configuration.getAstroGateSunSetOffset() != null) {\n+                        LOGGER.info(\"Updating AstroGateSunSetOffset to {}\", configuration.getAstroGateSunSetOffset());\n+                        softwareConfiguration.writeShort(SubDataAttribute.ASTRONOMIC_SUNSET_OFFSET,\n+                                configuration.getAstroGateSunSetOffset().shortValue());\n+\n+                        deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION,\n+                                DataAttribute.SOFTWARE_CONFIGURATION, Fc.CF, SubDataAttribute.ASTRONOMIC_SUNSET_OFFSET,\n+                                Short.toString(configuration.getAstroGateSunSetOffset().shortValue()));\n+                    }\n+\n+                    if (configuration.getLightType() != null) {\n+                        LOGGER.info(\"Updating LightType to {}\", configuration.getLightType());\n+                        softwareConfiguration.writeString(SubDataAttribute.LIGHT_TYPE,\n+                                configuration.getLightType().name());\n+\n+                        deviceMessageLog.addVariable(LogicalNode.STREET_LIGHT_CONFIGURATION,\n+                                DataAttribute.SOFTWARE_CONFIGURATION, Fc.CF, SubDataAttribute.LIGHT_TYPE,\n+                                configuration.getLightType().name());\n+                    }\n                 }\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTM1Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459905352", "bodyText": "nice way to get rid of the ssldDataService parameter in lots of methods!", "author": "robindenadel", "createdAt": "2020-07-24T07:58:12Z", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "diffHunk": "@@ -61,13 +62,17 @@\n \n     private final DeviceMessageLoggingService loggingService;\n \n-    public Iec61850SetScheduleCommand(final DeviceMessageLoggingService loggingService) {\n+    private final SsldDataService ssldDataService;\n+\n+    public Iec61850SetScheduleCommand(final DeviceMessageLoggingService loggingService,\n+            final SsldDataService ssldDataService) {", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzYwNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123607", "bodyText": "Thanks mate :)", "author": "kevinsmeets", "createdAt": "2020-07-24T15:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTM1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNjY4NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459906685", "bodyText": "It would improve readability if the order of private methods would be the same as the calling order.", "author": "robindenadel", "createdAt": "2020-07-24T08:00:58Z", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "diffHunk": "@@ -161,20 +166,61 @@ private void writeScheduleEntryForRelay(final DeviceMessageLog deviceMessageLog,\n                     final String scheduleEntryName = SubDataAttribute.SCHEDULE_ENTRY.getDescription() + (i + 1);\n                     final NodeContainer scheduleNode = schedule.getChild(scheduleEntryName);\n \n-                    final BdaBoolean enabled = scheduleNode.getBoolean(SubDataAttribute.SCHEDULE_ENABLE);\n-                    if (enabled.getValue() != scheduleEntry.isEnabled()) {\n-                        scheduleNode.writeBoolean(SubDataAttribute.SCHEDULE_ENABLE, scheduleEntry.isEnabled());\n+                    this.setEnabled(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setDay(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setSwitchTimes(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setMinimumTimeOn(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName,\n+                            scheduleNode);\n+\n+                    this.setTriggerWindow(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName,\n+                            scheduleNode);\n+                }\n+\n+                private void setTriggerWindow(final DeviceMessageLog deviceMessageLog, final LogicalNode logicalNode,", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzY3Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123672", "bodyText": "Method order changed to calling order.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNjY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java b/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java\nindex c9836f5f71..f6a1372f17 100644\n--- a/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java\n+++ b/osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java\n\n@@ -179,43 +179,26 @@ public class Iec61850SetScheduleCommand {\n                             scheduleNode);\n                 }\n \n-                private void setTriggerWindow(final DeviceMessageLog deviceMessageLog, final LogicalNode logicalNode,\n+                private void setEnabled(final DeviceMessageLog deviceMessageLog, final LogicalNode logicalNode,\n                         final ScheduleEntry scheduleEntry, final String scheduleEntryName,\n                         final NodeContainer scheduleNode) throws NodeWriteException {\n-                    final Integer triggerMinutesBefore = scheduleNode\n-                            .getUnsignedShort(SubDataAttribute.SCHEDULE_TRIGGER_MINUTES_BEFORE)\n-                            .getValue();\n-                    if (triggerMinutesBefore != scheduleEntry.getTriggerWindowMinutesBefore()) {\n-                        scheduleNode.writeUnsignedShort(SubDataAttribute.SCHEDULE_TRIGGER_MINUTES_BEFORE,\n-                                scheduleEntry.getTriggerWindowMinutesBefore());\n-                    }\n-                    deviceMessageLog.addVariable(logicalNode, DataAttribute.SCHEDULE, Fc.CF, scheduleEntryName,\n-                            SubDataAttribute.SCHEDULE_TRIGGER_MINUTES_BEFORE,\n-                            Integer.toString(scheduleEntry.getTriggerWindowMinutesBefore()));\n-\n-                    final Integer triggerMinutesAfter = scheduleNode\n-                            .getUnsignedShort(SubDataAttribute.SCHEDULE_TRIGGER_MINUTES_AFTER)\n-                            .getValue();\n-                    if (triggerMinutesAfter != scheduleEntry.getTriggerWindowMinutesAfter()) {\n-                        scheduleNode.writeUnsignedShort(SubDataAttribute.SCHEDULE_TRIGGER_MINUTES_AFTER,\n-                                scheduleEntry.getTriggerWindowMinutesAfter());\n+                    final BdaBoolean enabled = scheduleNode.getBoolean(SubDataAttribute.SCHEDULE_ENABLE);\n+                    if (enabled.getValue() != scheduleEntry.isEnabled()) {\n+                        scheduleNode.writeBoolean(SubDataAttribute.SCHEDULE_ENABLE, scheduleEntry.isEnabled());\n                     }\n                     deviceMessageLog.addVariable(logicalNode, DataAttribute.SCHEDULE, Fc.CF, scheduleEntryName,\n-                            SubDataAttribute.SCHEDULE_TRIGGER_MINUTES_AFTER,\n-                            Integer.toString(scheduleEntry.getTriggerWindowMinutesAfter()));\n+                            SubDataAttribute.SCHEDULE_ENABLE, Boolean.toString(scheduleEntry.isEnabled()));\n                 }\n \n-                private void setMinimumTimeOn(final DeviceMessageLog deviceMessageLog, final LogicalNode logicalNode,\n+                private void setDay(final DeviceMessageLog deviceMessageLog, final LogicalNode logicalNode,\n                         final ScheduleEntry scheduleEntry, final String scheduleEntryName,\n                         final NodeContainer scheduleNode) throws NodeWriteException {\n-                    final Integer minimumTimeOn = scheduleNode.getUnsignedShort(SubDataAttribute.MINIMUM_TIME_ON)\n-                            .getValue();\n-                    final Integer newMinimumTimeOn = scheduleEntry.getMinimumLightsOn() / 60;\n-                    if (!Objects.equals(minimumTimeOn, newMinimumTimeOn)) {\n-                        scheduleNode.writeUnsignedShort(SubDataAttribute.MINIMUM_TIME_ON, newMinimumTimeOn);\n+                    final Integer day = scheduleNode.getInteger(SubDataAttribute.SCHEDULE_DAY).getValue();\n+                    if (day != scheduleEntry.getDay()) {\n+                        scheduleNode.writeInteger(SubDataAttribute.SCHEDULE_DAY, scheduleEntry.getDay());\n                     }\n                     deviceMessageLog.addVariable(logicalNode, DataAttribute.SCHEDULE, Fc.CF, scheduleEntryName,\n-                            SubDataAttribute.MINIMUM_TIME_ON, Integer.toString(newMinimumTimeOn));\n+                            SubDataAttribute.SCHEDULE_DAY, Integer.toString(scheduleEntry.getDay()));\n                 }\n \n                 private void setSwitchTimes(final DeviceMessageLog deviceMessageLog, final LogicalNode logicalNode,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMzA4OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459913088", "bodyText": "It would improve readability if the order of private methods would be the same as the calling order.", "author": "robindenadel", "createdAt": "2020-07-24T08:15:26Z", "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/OslpGetConfigurationResponseToConfigurationConverter.java", "diffHunk": "@@ -114,7 +88,82 @@ public ConfigurationDto convert(final Oslp.GetConfigurationResponse source,\n         configuration.setWinterTimeDetails(winterTimeDetails);\n \n         return configuration;\n-        // @formatter:on\n+    }\n+\n+    private LongTermIntervalTypeDto getLongTermHistoryIntervalType(final Oslp.GetConfigurationResponse source) {", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzcwMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123700", "bodyText": "Method order changed to calling order.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMzA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/OslpGetConfigurationResponseToConfigurationConverter.java b/osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/OslpGetConfigurationResponseToConfigurationConverter.java\nindex 614cd00284..c26b911f78 100644\n--- a/osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/OslpGetConfigurationResponseToConfigurationConverter.java\n+++ b/osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/OslpGetConfigurationResponseToConfigurationConverter.java\n\n@@ -90,28 +90,19 @@ public class OslpGetConfigurationResponseToConfigurationConverter\n         return configuration;\n     }\n \n-    private LongTermIntervalTypeDto getLongTermHistoryIntervalType(final Oslp.GetConfigurationResponse source) {\n-        return source.hasLongTermHistoryIntervalType()\n-                && !source.getLongTermHistoryIntervalType().equals(Oslp.LongTermIntervalType.LT_INT_NOT_SET)\n-                        ? this.mapperFacade.map(source.getLongTermHistoryIntervalType(), LongTermIntervalTypeDto.class)\n-                        : null;\n-    }\n-\n-    private Integer getLongTermHistoryInterval(final Oslp.GetConfigurationResponse source) {\n-        return source.hasLongTermHistoryInterval()\n-                ? this.mapperFacade.map(source.getLongTermHistoryInterval(), Integer.class)\n-                : null;\n+    private LightTypeDto getLightType(final Oslp.GetConfigurationResponse source) {\n+        return source.hasLightType() ? this.mapperFacade.map(source.getLightType(), LightTypeDto.class) : null;\n     }\n \n-    private MeterTypeDto getMeterType(final Oslp.GetConfigurationResponse source) {\n-        return source.hasMeterType() && !source.getMeterType().equals(Oslp.MeterType.MT_NOT_SET)\n-                ? this.mapperFacade.map(source.getMeterType(), MeterTypeDto.class)\n+    private DaliConfigurationDto getDaliConfiguration(final Oslp.GetConfigurationResponse source) {\n+        return source.hasDaliConfiguration()\n+                ? this.mapperFacade.map(source.getDaliConfiguration(), DaliConfigurationDto.class)\n                 : null;\n     }\n \n-    private LinkTypeDto getPreferredLinkType(final Oslp.GetConfigurationResponse source) {\n-        return source.hasPreferredLinkType() && !source.getPreferredLinkType().equals(Oslp.LinkType.LINK_NOT_SET)\n-                ? this.mapperFacade.map(source.getPreferredLinkType(), LinkTypeDto.class)\n+    private Integer getShortTermHistoryIntervalMinutes(final Oslp.GetConfigurationResponse source) {\n+        return source.hasShortTermHistoryIntervalMinutes()\n+                ? this.mapperFacade.map(source.getShortTermHistoryIntervalMinutes(), Integer.class)\n                 : null;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMzM3Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459913377", "bodyText": "It would improve readability if the order of private methods would be the same as the calling order.", "author": "robindenadel", "createdAt": "2020-07-24T08:15:54Z", "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/ConfigurationToOslpSetConfigurationRequestConverter.java", "diffHunk": "@@ -37,55 +37,111 @@ public SetConfigurationRequest convert(final ConfigurationDto source,\n \n         final Oslp.SetConfigurationRequest.Builder setConfigurationRequest = Oslp.SetConfigurationRequest.newBuilder();\n \n-        if (source.getLightType() != null) {\n-            setConfigurationRequest.setLightType(this.mapperFacade.map(source.getLightType(), Oslp.LightType.class));\n-        }\n-        if (source.getDaliConfiguration() != null) {\n-            setConfigurationRequest.setDaliConfiguration(\n-                    this.mapperFacade.map(source.getDaliConfiguration(), Oslp.DaliConfiguration.class));\n-        }\n-        if (source.getRelayConfiguration() != null) {\n-            setConfigurationRequest.setRelayConfiguration(\n-                    this.mapperFacade.map(source.getRelayConfiguration(), Oslp.RelayConfiguration.class));\n-        }\n-        if (source.getShortTermHistoryIntervalMinutes() != null) {\n-            setConfigurationRequest.setShortTermHistoryIntervalMinutes(\n-                    this.mapperFacade.map(source.getShortTermHistoryIntervalMinutes(), Integer.class));\n-        }\n-        if (source.getLongTermHistoryInterval() != null) {\n-            setConfigurationRequest.setLongTermHistoryInterval(\n-                    this.mapperFacade.map(source.getLongTermHistoryInterval(), Integer.class));\n+        this.setLightType(source, setConfigurationRequest);\n+        this.setDaliConfiguration(source, setConfigurationRequest);\n+        this.setRelayConfiguration(source, setConfigurationRequest);\n+        this.setShortTermHistoryIntervalMinutes(source, setConfigurationRequest);\n+        this.setLongTermHistoryInterval(source, setConfigurationRequest);\n+        this.setLongTermHistoryIntervalType(source, setConfigurationRequest);\n+        this.setPreferredLinkType(source, setConfigurationRequest);\n+        this.setMeterType(source, setConfigurationRequest);\n+        this.setAstroGateSunRiseOffset(source, setConfigurationRequest);\n+        this.setAstroGateSunSetOffset(source, setConfigurationRequest);\n+        this.setIsAutomaticSummerTimingEnabled(source, setConfigurationRequest);\n+        this.setCommunicationNumberOfRetries(source, setConfigurationRequest);\n+        this.setCommunicationPauseTimeBetweenConnectionTrials(source, setConfigurationRequest);\n+        this.setCommunicationTimeout(source, setConfigurationRequest);\n+        this.setFixedIpConfiguration(source, setConfigurationRequest);\n+        this.setIsDhcpEnabled(source, setConfigurationRequest);\n+        this.setOsgpPortNumber(source, setConfigurationRequest);\n+        this.setOsgpIpAddress(source, setConfigurationRequest);\n+        this.setRelayRefreshing(source, setConfigurationRequest);\n+        this.setSummerTimeDetails(source, setConfigurationRequest);\n+        this.setIsTestButtonEnabled(source, setConfigurationRequest);\n+        this.setTimeSyncFrequency(source, setConfigurationRequest);\n+        this.setWinterTimeDetails(source, setConfigurationRequest);\n+        this.setSwitchingDelays(source, setConfigurationRequest);\n+        this.setRelayLinking(source, setConfigurationRequest);\n+\n+        return setConfigurationRequest.build();\n+    }\n+\n+    private void setRelayLinking(final ConfigurationDto source,", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzc0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123748", "bodyText": "Method order changed to calling order.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMzM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/ConfigurationToOslpSetConfigurationRequestConverter.java b/osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/ConfigurationToOslpSetConfigurationRequestConverter.java\nindex 9762edc2f0..1da5e9562c 100644\n--- a/osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/ConfigurationToOslpSetConfigurationRequestConverter.java\n+++ b/osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/ConfigurationToOslpSetConfigurationRequestConverter.java\n\n@@ -66,96 +66,93 @@ public class ConfigurationToOslpSetConfigurationRequestConverter\n         return setConfigurationRequest.build();\n     }\n \n-    private void setRelayLinking(final ConfigurationDto source,\n+    private void setLightType(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getRelayLinking() != null) {\n-            setConfigurationRequest\n-                    .addAllRelayLinking(this.mapperFacade.mapAsList(source.getRelayLinking(), Oslp.RelayMatrix.class));\n+        if (source.getLightType() != null) {\n+            setConfigurationRequest.setLightType(this.mapperFacade.map(source.getLightType(), Oslp.LightType.class));\n         }\n     }\n \n-    private void setSwitchingDelays(final ConfigurationDto source,\n+    private void setDaliConfiguration(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getSwitchingDelays() != null) {\n-            setConfigurationRequest.addAllSwitchingDelay(source.getSwitchingDelays());\n+        if (source.getDaliConfiguration() != null) {\n+            setConfigurationRequest.setDaliConfiguration(\n+                    this.mapperFacade.map(source.getDaliConfiguration(), Oslp.DaliConfiguration.class));\n         }\n     }\n \n-    private void setWinterTimeDetails(final ConfigurationDto source,\n+    private void setRelayConfiguration(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getWinterTimeDetails() != null) {\n-            final String winterTimeDetails = this.convertSummerTimeWinterTimeDetails(source.getWinterTimeDetails());\n-            setConfigurationRequest.setWinterTimeDetails(winterTimeDetails);\n+        if (source.getRelayConfiguration() != null) {\n+            setConfigurationRequest.setRelayConfiguration(\n+                    this.mapperFacade.map(source.getRelayConfiguration(), Oslp.RelayConfiguration.class));\n         }\n     }\n \n-    private void setTimeSyncFrequency(final ConfigurationDto source,\n+    private void setShortTermHistoryIntervalMinutes(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getTimeSyncFrequency() != null) {\n-            setConfigurationRequest.setTimeSyncFrequency(source.getTimeSyncFrequency());\n+        if (source.getShortTermHistoryIntervalMinutes() != null) {\n+            setConfigurationRequest.setShortTermHistoryIntervalMinutes(\n+                    this.mapperFacade.map(source.getShortTermHistoryIntervalMinutes(), Integer.class));\n         }\n     }\n \n-    private void setIsTestButtonEnabled(final ConfigurationDto source,\n+    private void setLongTermHistoryInterval(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.isTestButtonEnabled() != null) {\n-            setConfigurationRequest.setIsTestButtonEnabled(source.isTestButtonEnabled());\n+        if (source.getLongTermHistoryInterval() != null) {\n+            setConfigurationRequest.setLongTermHistoryInterval(\n+                    this.mapperFacade.map(source.getLongTermHistoryInterval(), Integer.class));\n         }\n     }\n \n-    private void setSummerTimeDetails(final ConfigurationDto source,\n+    private void setLongTermHistoryIntervalType(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getSummerTimeDetails() != null) {\n-            final String summerTimeDetails = this.convertSummerTimeWinterTimeDetails(source.getSummerTimeDetails());\n-            setConfigurationRequest.setSummerTimeDetails(summerTimeDetails);\n+        if (source.getLongTermHistoryIntervalType() != null) {\n+            setConfigurationRequest.setLongTermHistoryIntervalType(\n+                    this.mapperFacade.map(source.getLongTermHistoryIntervalType(), Oslp.LongTermIntervalType.class));\n         }\n     }\n \n-    private void setRelayRefreshing(final ConfigurationDto source,\n+    private void setPreferredLinkType(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.isRelayRefreshing() != null) {\n-            setConfigurationRequest.setRelayRefreshing(source.isRelayRefreshing());\n+        if (source.getPreferredLinkType() != null) {\n+            setConfigurationRequest\n+                    .setPreferredLinkType(this.mapperFacade.map(source.getPreferredLinkType(), Oslp.LinkType.class));\n         }\n     }\n \n-    private void setOsgpIpAddress(final ConfigurationDto source,\n+    private void setMeterType(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getOsgpIpAddres() != null) {\n-            setConfigurationRequest\n-                    .setOspgIpAddress(this.convertTextualIpAddressToByteString(source.getOsgpIpAddres()));\n+        if (source.getMeterType() != null) {\n+            setConfigurationRequest.setMeterType(this.mapperFacade.map(source.getMeterType(), Oslp.MeterType.class));\n         }\n     }\n \n-    private void setOsgpPortNumber(final ConfigurationDto source,\n+    private void setAstroGateSunRiseOffset(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getOsgpPortNumber() != null) {\n-            setConfigurationRequest.setOsgpPortNumber(source.getOsgpPortNumber());\n+        if (source.getAstroGateSunRiseOffset() != null) {\n+            setConfigurationRequest.setAstroGateSunRiseOffset(source.getAstroGateSunRiseOffset() * SECONDS_PER_MINUTE);\n         }\n     }\n \n-    private void setIsDhcpEnabled(final ConfigurationDto source,\n+    private void setAstroGateSunSetOffset(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.isDhcpEnabled() != null) {\n-            setConfigurationRequest.setIsDhcpEnabled(source.isDhcpEnabled());\n+        if (source.getAstroGateSunSetOffset() != null) {\n+            setConfigurationRequest.setAstroGateSunSetOffset(source.getAstroGateSunSetOffset() * SECONDS_PER_MINUTE);\n         }\n     }\n \n-    private void setFixedIpConfiguration(final ConfigurationDto source,\n+    private void setIsAutomaticSummerTimingEnabled(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getDeviceFixedIp() != null) {\n-            setConfigurationRequest.setDeviceFixIpValue(\n-                    this.convertTextualIpAddressToByteString(source.getDeviceFixedIp().getIpAddress()));\n-            setConfigurationRequest\n-                    .setNetMask(this.convertTextualIpAddressToByteString(source.getDeviceFixedIp().getNetMask()));\n-            setConfigurationRequest\n-                    .setGateWay(this.convertTextualIpAddressToByteString(source.getDeviceFixedIp().getGateWay()));\n+        if (source.isAutomaticSummerTimingEnabled() != null) {\n+            setConfigurationRequest.setIsAutomaticSummerTimingEnabled(source.isAutomaticSummerTimingEnabled());\n         }\n     }\n \n-    private void setCommunicationTimeout(final ConfigurationDto source,\n+    private void setCommunicationNumberOfRetries(final ConfigurationDto source,\n             final Oslp.SetConfigurationRequest.Builder setConfigurationRequest) {\n-        if (source.getCommunicationTimeout() != null) {\n-            setConfigurationRequest.setCommunicationTimeout(source.getCommunicationTimeout());\n+        if (source.getCommunicationNumberOfRetries() != null) {\n+            setConfigurationRequest.setCommunicationNumberOfRetries(source.getCommunicationNumberOfRetries());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODU2OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459978568", "bodyText": "as far as I can see the parameter response is always null here.", "author": "robindenadel", "createdAt": "2020-07-24T10:41:10Z", "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzkxNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123917", "bodyText": "Removed the response parameter.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java b/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\nindex 1349e80cf9..d5c5cfb11e 100644\n--- a/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\n+++ b/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\n\n@@ -495,7 +495,7 @@ public class OslpChannelHandler extends SimpleChannelInboundHandler<OslpEnvelope\n             }\n         }\n \n-        response = this.handleRequest(request, response, device);\n+        response = this.checkForRequest(request, device);\n \n         // Update device\n         device.setSequenceNumber(expectedSequenceNumber);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODcyMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459978723", "bodyText": "remove the parameter response", "author": "robindenadel", "createdAt": "2020-07-24T10:41:32Z", "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);\n+\n+        // Update device\n+        device.setSequenceNumber(expectedSequenceNumber);\n+        this.deviceManagementService.updateDevice(device);\n+\n+        // Write log entry for response\n+        LOGGER.debug(\"Responding: {}\", response);\n+\n+        return response;\n+    }\n+\n+    @SuppressWarnings(\"squid:MethodCyclomaticComplexity\")\n+    private Oslp.Message handleRequest(final Oslp.Message request, Oslp.Message response, final Device device)", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzk4Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123982", "bodyText": "Removed the response parameter.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java b/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\nindex 1349e80cf9..d5c5cfb11e 100644\n--- a/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\n+++ b/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\n\n@@ -495,7 +495,7 @@ public class OslpChannelHandler extends SimpleChannelInboundHandler<OslpEnvelope\n             }\n         }\n \n-        response = this.handleRequest(request, response, device);\n+        response = this.checkForRequest(request, device);\n \n         // Update device\n         device.setSequenceNumber(expectedSequenceNumber);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MDExNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459980115", "bodyText": "according to https://github.com/SmartSocietyServices/Way-of-Working-Wiki/wiki/Suppression-of-SonarQube-warnings-like-FalsePositives a justification why the specific warning is being suppressed should be given", "author": "robindenadel", "createdAt": "2020-07-24T10:45:02Z", "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);\n+\n+        // Update device\n+        device.setSequenceNumber(expectedSequenceNumber);\n+        this.deviceManagementService.updateDevice(device);\n+\n+        // Write log entry for response\n+        LOGGER.debug(\"Responding: {}\", response);\n+\n+        return response;\n+    }\n+\n+    @SuppressWarnings(\"squid:MethodCyclomaticComplexity\")", "originalCommit": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNDA1OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460124058", "bodyText": "Added a comment.", "author": "kevinsmeets", "createdAt": "2020-07-24T15:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MDExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "chunk": "diff --git a/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java b/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\nindex 1349e80cf9..d5c5cfb11e 100644\n--- a/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\n+++ b/osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java\n\n@@ -495,7 +495,7 @@ public class OslpChannelHandler extends SimpleChannelInboundHandler<OslpEnvelope\n             }\n         }\n \n-        response = this.handleRequest(request, response, device);\n+        response = this.checkForRequest(request, device);\n \n         // Update device\n         device.setSequenceNumber(expectedSequenceNumber);\n"}}, {"oid": "69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/69f77718dd20fdaf88e9f3df8accf7ddd9b0b4f8", "message": "OC-615 ~ Processes review comments.", "committedDate": "2020-07-24T15:57:50Z", "type": "commit"}, {"oid": "99c538e7ab6f7a24ef00660f843837a143ff65a6", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/99c538e7ab6f7a24ef00660f843837a143ff65a6", "message": "OC-615 ~ Reduces cyclomatic complexity of\nOslpDeviceService#handleOslpResponseGetStatus(DeviceRequest,\nOslpEnvelope, DeviceResponseHandler).", "committedDate": "2020-07-27T09:47:32Z", "type": "commit"}, {"oid": "aa45fa43c1b762d84f5e27e4d09c580f42f6b953", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/aa45fa43c1b762d84f5e27e4d09c580f42f6b953", "message": "Disables 'Destroy an AWS System'.", "committedDate": "2020-07-27T12:13:15Z", "type": "commit"}, {"oid": "70528ecdb45799435d15352083d9ec07e4ed9b0c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/70528ecdb45799435d15352083d9ec07e4ed9b0c", "message": "Disables 'cleanWs()'.", "committedDate": "2020-07-27T12:19:41Z", "type": "commit"}, {"oid": "766713d9bf51a4c62238f41e0550bb7f18b2bd76", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/766713d9bf51a4c62238f41e0550bb7f18b2bd76", "message": "Enables all pipeline steps.", "committedDate": "2020-07-27T14:36:50Z", "type": "commit"}]}