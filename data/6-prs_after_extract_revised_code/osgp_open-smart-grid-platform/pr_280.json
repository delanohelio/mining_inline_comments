{"pr_number": 280, "pr_title": "Feature/oc 560 kafka adapter", "pr_createdAt": "2020-04-14T15:56:08Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/280", "timeline": [{"oid": "1fe4c43a69b94ea9c1e0610db4a772ec288e7008", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1fe4c43a69b94ea9c1e0610db4a772ec288e7008", "message": "OC-560 ~ Adds kafka adapter from hackathon", "committedDate": "2020-04-09T12:44:38Z", "type": "commit"}, {"oid": "5611629193453baac91a8d46aab69c672845a8bf", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5611629193453baac91a8d46aab69c672845a8bf", "message": "OC-560 ~ Pom updates", "committedDate": "2020-04-09T15:49:28Z", "type": "commit"}, {"oid": "ec6a301a44773525df6d5be4b97b42633db0076c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ec6a301a44773525df6d5be4b97b42633db0076c", "message": "OC-560 ~ Removes some SOAP related classes", "committedDate": "2020-04-09T15:50:13Z", "type": "commit"}, {"oid": "92c2848f54a8f2c1951704954c6cb001e22d3a7d", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/92c2848f54a8f2c1951704954c6cb001e22d3a7d", "message": "OC-560 ~ Pom updates", "committedDate": "2020-04-09T16:11:36Z", "type": "commit"}, {"oid": "4ea6d4b39dff73c9c20660d7d94720c7932ab98e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4ea6d4b39dff73c9c20660d7d94720c7932ab98e", "message": "OC-560 ~ Removes confluent avro serializer dependency", "committedDate": "2020-04-10T07:39:34Z", "type": "commit"}, {"oid": "f1ef38d8a00d3627bd79c8c5ec8cd4a2f74e0191", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f1ef38d8a00d3627bd79c8c5ec8cd4a2f74e0191", "message": "OC-560 ~ Further cleanup of pom file, reordering of elements in pom\n\nReordering according to POM Code Convention as suggested by Sonar\n(squid:S3423)", "committedDate": "2020-04-10T08:18:53Z", "type": "commit"}, {"oid": "f065af28da8e202729689a212a01a7b829fe082e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f065af28da8e202729689a212a01a7b829fe082e", "message": "OC-560 ~ Introduces security configuration and spring kafka in da kafka adapter\n\nAnd some other refactorings:\n* Renames PersistenceConfigWs to PersistenceConfig\n* Moves messageprocessors package inside jms package", "committedDate": "2020-04-10T10:44:32Z", "type": "commit"}, {"oid": "6d2af92973e4818b75428098f82c801e9f861bde", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6d2af92973e4818b75428098f82c801e9f861bde", "message": "OC-560 ~ Updates properties\n\n- Removes web service properties\n- Updates hibernate properties", "committedDate": "2020-04-10T16:18:14Z", "type": "commit"}, {"oid": "fa62beaf13fef9fd52236430a77a1b5feb02a0d4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fa62beaf13fef9fd52236430a77a1b5feb02a0d4", "message": "OC-560 ~ Adds Kafka Adapter Distribution Automation to components enum", "committedDate": "2020-04-14T14:58:48Z", "type": "commit"}, {"oid": "996958d5108f8cf5bd44933f4c3b81e964a3b037", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/996958d5108f8cf5bd44933f4c3b81e964a3b037", "message": "OC-560 ~ Cleans up some more WS Adapter related classes and files", "committedDate": "2020-04-14T15:02:41Z", "type": "commit"}, {"oid": "54477c5f9a3a4ce63c4e13cfc230b32ce8bb6b65", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/54477c5f9a3a4ce63c4e13cfc230b32ce8bb6b65", "message": "OC-560 ~ Renames beans from ws... to kafka...", "committedDate": "2020-04-14T15:05:19Z", "type": "commit"}, {"oid": "369dc4374203f1f74ab8adceee7c6406f21bbdb4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/369dc4374203f1f74ab8adceee7c6406f21bbdb4", "message": "OC-560 ~ Updates logback xml", "committedDate": "2020-04-14T15:06:11Z", "type": "commit"}, {"oid": "e7c08c1f30b2ccc8c437b7adcd69b3c2140782fb", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e7c08c1f30b2ccc8c437b7adcd69b3c2140782fb", "message": "OC-560 ~ Adds and/or updates some TODOs", "committedDate": "2020-04-14T15:10:40Z", "type": "commit"}, {"oid": "349156a842d26ae3cbdac5b562124f4240d13a0a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/349156a842d26ae3cbdac5b562124f4240d13a0a", "message": "OC-560 ~ Updates bean name", "committedDate": "2020-04-14T15:12:16Z", "type": "commit"}, {"oid": "b6d598f15afa07739ba255ae8dbda2b714cdf49a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b6d598f15afa07739ba255ae8dbda2b714cdf49a", "message": "OC-560 ~ Cleans up some more...", "committedDate": "2020-04-14T15:22:30Z", "type": "commit"}, {"oid": "7904d5b6bcf1197703967c702b9080097f81523c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/7904d5b6bcf1197703967c702b9080097f81523c", "message": "OC-560 ~ Adds kafka adapter module to main pom.\n\nReorders pom files in the recommended order by sonar rule (squid:S3423)", "committedDate": "2020-04-14T15:45:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTY0MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r408261640", "bodyText": "Complete the task associated to this TODO comment.", "author": "jenkins-ip-10-4-24-184", "createdAt": "2020-04-14T16:13:20Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingSerializer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// TODO - Rename and update for correct Avro message format.", "originalCommit": "7904d5b6bcf1197703967c702b9080097f81523c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingSerializer.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingSerializer.java\nindex 544bb75a87..ca2bc250d5 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingSerializer.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingSerializer.java\n\n@@ -4,7 +4,7 @@ import java.io.IOException;\n import java.nio.ByteBuffer;\n \n import org.apache.kafka.common.serialization.Serializer;\n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTY2NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r408261664", "bodyText": "Complete the task associated to this TODO comment.", "author": "jenkins-ip-10-4-24-184", "createdAt": "2020-04-14T16:13:21Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Service;\n+\n+// TODO - Rename class once AVRO message format is known\n+@Service\n+public class MeterReadingProducer {\n+    @Autowired\n+    private KafkaTemplate<String, MeterReading> kafkaTemplate;\n+\n+    @Autowired\n+    private DistributionAutomationMapper mapper;\n+\n+    public void send(final MeasurementReport measurementReport) {\n+\n+        // TODO - Map measurementReport to correct Avro message format and", "originalCommit": "7904d5b6bcf1197703967c702b9080097f81523c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java\nindex fd1dd565e4..3416d69287 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java\n\n@@ -1,9 +1,10 @@\n package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n \n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.kafka.core.KafkaTemplate;\n import org.springframework.stereotype.Service;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTY3OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r408261679", "bodyText": "Complete the task associated to this TODO comment.", "author": "jenkins-ip-10-4-24-184", "createdAt": "2020-04-14T16:13:22Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Service;\n+\n+// TODO - Rename class once AVRO message format is known", "originalCommit": "7904d5b6bcf1197703967c702b9080097f81523c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java\nindex fd1dd565e4..3416d69287 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java\n\n@@ -1,9 +1,10 @@\n package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n \n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.kafka.core.KafkaTemplate;\n import org.springframework.stereotype.Service;\n \n"}}, {"oid": "110fca2b621634da50f555a4222dba0198fdee62", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/110fca2b621634da50f555a4222dba0198fdee62", "message": "OC-560 ~ Solves some sonar issues in pom files", "committedDate": "2020-04-15T07:24:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4OTM4Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409389387", "bodyText": "I think this comment can be removed.", "author": "robindenadel", "createdAt": "2020-04-16T08:50:26Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/ApplicationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.config;\n+\n+import org.opensmartgridplatform.shared.application.config.AbstractConfig;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n+import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\n+\n+/**\n+ * An application context Java configuration class. The usage of Java\n+ * configuration requires Spring Framework 3.0\n+ */", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE2MDIzMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r410160231", "bodyText": "Done", "author": "smvdheijden", "createdAt": "2020-04-17T11:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4OTM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/ApplicationContext.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/ApplicationContext.java\nindex 2154e2440e..f0ca4e8cfa 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/ApplicationContext.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/ApplicationContext.java\n\n@@ -16,15 +16,12 @@ import org.springframework.context.annotation.PropertySource;\n import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\n \n-/**\n- * An application context Java configuration class. The usage of Java\n- * configuration requires Spring Framework 3.0\n- */\n @Configuration\n-@ComponentScan(basePackages = { \"org.opensmartgridplatform.shared.domain.services\",\n-        \"org.opensmartgridplatform.domain.da\", \"org.opensmartgridplatform.adapter.kafka.da\",\n-        \"org.opensmartgridplatform.domain.logging\", \"org.opensmartgridplatform.domain.core.services\",\n-        \"org.opensmartgridplatform.shared.application.config\" })\n+@ComponentScan(\n+        basePackages = { \"org.opensmartgridplatform.shared.domain.services\", \"org.opensmartgridplatform.domain.da\",\n+                \"org.opensmartgridplatform.adapter.kafka.da\", \"org.opensmartgridplatform.domain.logging\",\n+                \"org.opensmartgridplatform.domain.core.services\", \"org.opensmartgridplatform.shared.application.config\",\n+                \"org.opensmartgridplatform.adapter.kafka.da.infra.jms.messageprocessors\" })\n @Import({ PersistenceConfigCore.class, MessagingConfig.class })\n @PropertySource(\"classpath:osgp-adapter-kafka-distributionautomation.properties\")\n @PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTMwMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409391302", "bodyText": "This class seems a copy of the KafkaConfig class in the webservice client. I think we should put common code in the shared library.", "author": "robindenadel", "createdAt": "2020-04-16T08:53:25Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.opensmartgridplatform.adapter.kafka.da.application.config;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Resource;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.annotation.EnableKafka;\n+// TODO - Enable when consumer is implemented\n+//import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+//import org.springframework.kafka.core.ConsumerFactory;\n+//import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+\n+@EnableKafka\n+@Configuration\n+public class KafkaConfig {", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MjgwMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409392802", "bodyText": "For now it would make the class more easier to read without the consumer code. Instead of all the commented lines of code, you could have one comment stating the consumer part has not been implemented yet.", "author": "robindenadel", "createdAt": "2020-04-16T08:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNTUwNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r411925507", "bodyText": "Removed commented consumer code, refactored configuration and moved common code to shared.", "author": "smvdheijden", "createdAt": "2020-04-21T07:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java\ndeleted file mode 100644\nindex a8aa92153e..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-package org.opensmartgridplatform.adapter.kafka.da.application.config;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.annotation.Resource;\n-\n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.Environment;\n-import org.springframework.kafka.annotation.EnableKafka;\n-// TODO - Enable when consumer is implemented\n-//import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n-//import org.springframework.kafka.core.ConsumerFactory;\n-//import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n-import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n-import org.springframework.kafka.core.KafkaTemplate;\n-\n-@EnableKafka\n-@Configuration\n-public class KafkaConfig {\n-    @Resource\n-    private Environment environment;\n-\n-    @Value(\"${distributionautomation.kafka.producer.topic}\")\n-    private String topicProducer;\n-\n-    // TODO - Enable when consumer is implemented\n-    // @Value(\"${distributionautomation.kafka.consumer.concurrency}\")\n-    // private Integer concurrency;\n-    //\n-    // @Value(\"${distributionautomation.kafka.consumer.poll.timeout}\")\n-    // private Integer pollTimeout;\n-\n-    private Map<String, Object> producerConfigs() {\n-        final Map<String, Object> properties = this.createCommonProperties();\n-        properties.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n-        properties.put(\"value.serializer\",\n-                \"org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.MeterReadingSerializer\");\n-        KafkaProperties.producerProperties()\n-                .forEach((k, v) -> this.addIfExist(properties, k, \"distributionautomation.kafka.producer\", v));\n-        return properties;\n-    }\n-\n-    private Map<String, Object> createCommonProperties() {\n-        final Map<String, Object> properties = new HashMap<>();\n-        KafkaProperties.commonProperties()\n-                .forEach((k, v) -> this.addIfExist(properties, k, \"distributionautomation.kafka\", v));\n-\n-        return properties;\n-    }\n-\n-    // TODO - Enable when consumer is implemented\n-    // @formatter:off\n-//    @Bean\n-//    public Map<String, Object> consumerConfigs() {\n-//        final Map<String, Object> properties = this.createCommonProperties();\n-//\n-//        properties.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n-//        properties.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n-//        KafkaProperties.consumerProperties().forEach((k, v) -> this.addIfExist(properties, k, \"kafka.consumer\", v));\n-//        return properties;\n-//    }\n-    // @formatter:on\n-\n-    private <T> void addIfExist(final Map<String, Object> properties, final String kafkaProperty, final String prefix,\n-            final Class<T> targetType) {\n-        final String fullPropertyName = prefix + \".\" + kafkaProperty;\n-        final T value = this.environment.getProperty(fullPropertyName, targetType);\n-        if (value != null) {\n-            properties.put(kafkaProperty, value);\n-        }\n-    }\n-\n-    @Bean\n-    public KafkaTemplate<String, MeterReading> kafkaTemplate() {\n-        final KafkaTemplate<String, MeterReading> template = new KafkaTemplate<>(\n-                new DefaultKafkaProducerFactory<>(this.producerConfigs()));\n-        template.setDefaultTopic(this.topicProducer);\n-        return template;\n-    }\n-\n-    // TODO - Enable when consumer is implemented\n-    // @formatter:off\n-//    @Bean\n-//    public ConsumerFactory<String, String> consumerFactory() {\n-//        return new DefaultKafkaConsumerFactory<>(this.consumerConfigs());\n-//    }\n-//\n-//    @Bean\n-//    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory() {\n-//        final ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n-//        factory.setConsumerFactory(this.consumerFactory());\n-//        factory.setConcurrency(this.concurrency);\n-//        factory.getContainerProperties().setPollTimeout(this.pollTimeout);\n-//        return factory;\n-//    }\n-    // @formatter:on\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MzI5Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409393293", "bodyText": "I really wish you didn't use that.", "author": "robindenadel", "createdAt": "2020-04-16T08:56:23Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.opensmartgridplatform.adapter.kafka.da.application.config;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Resource;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.annotation.EnableKafka;\n+// TODO - Enable when consumer is implemented\n+//import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+//import org.springframework.kafka.core.ConsumerFactory;\n+//import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+\n+@EnableKafka\n+@Configuration\n+public class KafkaConfig {\n+    @Resource\n+    private Environment environment;\n+\n+    @Value(\"${distributionautomation.kafka.producer.topic}\")\n+    private String topicProducer;\n+\n+    // TODO - Enable when consumer is implemented\n+    // @Value(\"${distributionautomation.kafka.consumer.concurrency}\")\n+    // private Integer concurrency;\n+    //\n+    // @Value(\"${distributionautomation.kafka.consumer.poll.timeout}\")\n+    // private Integer pollTimeout;\n+\n+    private Map<String, Object> producerConfigs() {\n+        final Map<String, Object> properties = this.createCommonProperties();\n+        properties.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        properties.put(\"value.serializer\",\n+                \"org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.MeterReadingSerializer\");\n+        KafkaProperties.producerProperties()\n+                .forEach((k, v) -> this.addIfExist(properties, k, \"distributionautomation.kafka.producer\", v));\n+        return properties;\n+    }\n+\n+    private Map<String, Object> createCommonProperties() {\n+        final Map<String, Object> properties = new HashMap<>();\n+        KafkaProperties.commonProperties()\n+                .forEach((k, v) -> this.addIfExist(properties, k, \"distributionautomation.kafka\", v));\n+\n+        return properties;\n+    }\n+\n+    // TODO - Enable when consumer is implemented\n+    // @formatter:off", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java\ndeleted file mode 100644\nindex a8aa92153e..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-package org.opensmartgridplatform.adapter.kafka.da.application.config;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.annotation.Resource;\n-\n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.Environment;\n-import org.springframework.kafka.annotation.EnableKafka;\n-// TODO - Enable when consumer is implemented\n-//import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n-//import org.springframework.kafka.core.ConsumerFactory;\n-//import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n-import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n-import org.springframework.kafka.core.KafkaTemplate;\n-\n-@EnableKafka\n-@Configuration\n-public class KafkaConfig {\n-    @Resource\n-    private Environment environment;\n-\n-    @Value(\"${distributionautomation.kafka.producer.topic}\")\n-    private String topicProducer;\n-\n-    // TODO - Enable when consumer is implemented\n-    // @Value(\"${distributionautomation.kafka.consumer.concurrency}\")\n-    // private Integer concurrency;\n-    //\n-    // @Value(\"${distributionautomation.kafka.consumer.poll.timeout}\")\n-    // private Integer pollTimeout;\n-\n-    private Map<String, Object> producerConfigs() {\n-        final Map<String, Object> properties = this.createCommonProperties();\n-        properties.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n-        properties.put(\"value.serializer\",\n-                \"org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.MeterReadingSerializer\");\n-        KafkaProperties.producerProperties()\n-                .forEach((k, v) -> this.addIfExist(properties, k, \"distributionautomation.kafka.producer\", v));\n-        return properties;\n-    }\n-\n-    private Map<String, Object> createCommonProperties() {\n-        final Map<String, Object> properties = new HashMap<>();\n-        KafkaProperties.commonProperties()\n-                .forEach((k, v) -> this.addIfExist(properties, k, \"distributionautomation.kafka\", v));\n-\n-        return properties;\n-    }\n-\n-    // TODO - Enable when consumer is implemented\n-    // @formatter:off\n-//    @Bean\n-//    public Map<String, Object> consumerConfigs() {\n-//        final Map<String, Object> properties = this.createCommonProperties();\n-//\n-//        properties.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n-//        properties.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n-//        KafkaProperties.consumerProperties().forEach((k, v) -> this.addIfExist(properties, k, \"kafka.consumer\", v));\n-//        return properties;\n-//    }\n-    // @formatter:on\n-\n-    private <T> void addIfExist(final Map<String, Object> properties, final String kafkaProperty, final String prefix,\n-            final Class<T> targetType) {\n-        final String fullPropertyName = prefix + \".\" + kafkaProperty;\n-        final T value = this.environment.getProperty(fullPropertyName, targetType);\n-        if (value != null) {\n-            properties.put(kafkaProperty, value);\n-        }\n-    }\n-\n-    @Bean\n-    public KafkaTemplate<String, MeterReading> kafkaTemplate() {\n-        final KafkaTemplate<String, MeterReading> template = new KafkaTemplate<>(\n-                new DefaultKafkaProducerFactory<>(this.producerConfigs()));\n-        template.setDefaultTopic(this.topicProducer);\n-        return template;\n-    }\n-\n-    // TODO - Enable when consumer is implemented\n-    // @formatter:off\n-//    @Bean\n-//    public ConsumerFactory<String, String> consumerFactory() {\n-//        return new DefaultKafkaConsumerFactory<>(this.consumerConfigs());\n-//    }\n-//\n-//    @Bean\n-//    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory() {\n-//        final ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n-//        factory.setConsumerFactory(this.consumerFactory());\n-//        factory.setConcurrency(this.concurrency);\n-//        factory.getContainerProperties().setPollTimeout(this.pollTimeout);\n-//        return factory;\n-//    }\n-    // @formatter:on\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NjMxMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409396312", "bodyText": "seems a leftover of the POC", "author": "robindenadel", "createdAt": "2020-04-16T09:00:51Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class MeterReadingMapping extends CustomConverter<MeasurementReport, MeterReading> {\n+\n+    @Override\n+    public MeterReading convert(final MeasurementReport source, final Type<? extends MeterReading> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final List<MeasurementElement> measurementElements = source.getMeasurementGroups()\n+                .stream()\n+                .map(MeasurementGroup::getMeasurements)\n+                .flatMap(List::stream)\n+                .map(Measurement::getMeasurementElements)\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+\n+        final List<IntervalReading> intervalReadings = Arrays.asList(this.getIntervalReading(measurementElements));\n+\n+        final String identification = source.getMeasurementGroups()\n+                .get(0)\n+                .getIdentification();\n+        final ReadingType readingType = this.getReadingType(identification);\n+        final IntervalBlock intervalBlock = new IntervalBlock(readingType, intervalReadings);\n+\n+        final Long start = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .min(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-13 00:00:00\"));", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjM1MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r411926350", "bodyText": "Replaced with start datetime of current year.", "author": "smvdheijden", "createdAt": "2020-04-21T07:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NjMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\nindex 5ad4137051..0918390de0 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\n\n@@ -8,19 +8,20 @@\n  */\n package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n \n+import java.time.LocalDate;\n import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n+import java.time.ZoneOffset;\n+import java.time.temporal.TemporalAdjusters;\n import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n-import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n-import org.opensmartgridplatform.adapter.kafka.ReadingType;\n-import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n-import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n import org.opensmartgridplatform.domain.da.measurements.Measurement;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NjQ1NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409396455", "bodyText": "seems a leftover of the POC", "author": "robindenadel", "createdAt": "2020-04-16T09:01:04Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class MeterReadingMapping extends CustomConverter<MeasurementReport, MeterReading> {\n+\n+    @Override\n+    public MeterReading convert(final MeasurementReport source, final Type<? extends MeterReading> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final List<MeasurementElement> measurementElements = source.getMeasurementGroups()\n+                .stream()\n+                .map(MeasurementGroup::getMeasurements)\n+                .flatMap(List::stream)\n+                .map(Measurement::getMeasurementElements)\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+\n+        final List<IntervalReading> intervalReadings = Arrays.asList(this.getIntervalReading(measurementElements));\n+\n+        final String identification = source.getMeasurementGroups()\n+                .get(0)\n+                .getIdentification();\n+        final ReadingType readingType = this.getReadingType(identification);\n+        final IntervalBlock intervalBlock = new IntervalBlock(readingType, intervalReadings);\n+\n+        final Long start = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .min(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-13 00:00:00\"));\n+        final Long end = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .max(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-16 00:00:00\"));", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjQwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r411926409", "bodyText": "Replaced with start datetime of next year", "author": "smvdheijden", "createdAt": "2020-04-21T07:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NjQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\nindex 5ad4137051..0918390de0 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\n\n@@ -8,19 +8,20 @@\n  */\n package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n \n+import java.time.LocalDate;\n import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n+import java.time.ZoneOffset;\n+import java.time.temporal.TemporalAdjusters;\n import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n-import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n-import org.opensmartgridplatform.adapter.kafka.ReadingType;\n-import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n-import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n import org.opensmartgridplatform.domain.da.measurements.Measurement;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NzE0MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409397141", "bodyText": "This code was good enough for the POC. I doubt if it is good enough now.", "author": "robindenadel", "createdAt": "2020-04-16T09:02:11Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class MeterReadingMapping extends CustomConverter<MeasurementReport, MeterReading> {\n+\n+    @Override\n+    public MeterReading convert(final MeasurementReport source, final Type<? extends MeterReading> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final List<MeasurementElement> measurementElements = source.getMeasurementGroups()\n+                .stream()\n+                .map(MeasurementGroup::getMeasurements)\n+                .flatMap(List::stream)\n+                .map(Measurement::getMeasurementElements)\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+\n+        final List<IntervalReading> intervalReadings = Arrays.asList(this.getIntervalReading(measurementElements));\n+\n+        final String identification = source.getMeasurementGroups()\n+                .get(0)\n+                .getIdentification();\n+        final ReadingType readingType = this.getReadingType(identification);\n+        final IntervalBlock intervalBlock = new IntervalBlock(readingType, intervalReadings);\n+\n+        final Long start = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .min(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-13 00:00:00\"));\n+        final Long end = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .max(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-16 00:00:00\"));\n+        final ValuesInterval valuesInterval = new ValuesInterval(start, end);\n+\n+        final UsagePoint usagePoint = new UsagePoint(this.getUsagePoint(identification));\n+        return new MeterReading(valuesInterval, null, identification, usagePoint, Arrays.asList(intervalBlock));\n+\n+    }\n+\n+    private ReadingType getReadingType(final String identification) {\n+        if (identification.contains(\"Power\")) {\n+            return new ReadingType(\"10s\", \"energy\", \"M\", \"W\", \"Energy MW en 10s\", null);\n+        } else {\n+            return new ReadingType(\"60s\", \"temperature\", \"none\", \"degC\", \"Temperature transformateur \u00b0C en 60s\", null);\n+        }", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjcyNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r411926726", "bodyText": "Leaving for now, will become obsolete when new AVRO message format is defined", "author": "smvdheijden", "createdAt": "2020-04-21T07:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NzE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\nindex 5ad4137051..0918390de0 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\n\n@@ -8,19 +8,20 @@\n  */\n package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n \n+import java.time.LocalDate;\n import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n+import java.time.ZoneOffset;\n+import java.time.temporal.TemporalAdjusters;\n import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n-import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n-import org.opensmartgridplatform.adapter.kafka.ReadingType;\n-import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n-import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n import org.opensmartgridplatform.domain.da.measurements.Measurement;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5ODI1Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409398257", "bodyText": "This code was good enough for the POC. I doubt if it is good enough now.", "author": "robindenadel", "createdAt": "2020-04-16T09:03:55Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class MeterReadingMapping extends CustomConverter<MeasurementReport, MeterReading> {\n+\n+    @Override\n+    public MeterReading convert(final MeasurementReport source, final Type<? extends MeterReading> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final List<MeasurementElement> measurementElements = source.getMeasurementGroups()\n+                .stream()\n+                .map(MeasurementGroup::getMeasurements)\n+                .flatMap(List::stream)\n+                .map(Measurement::getMeasurementElements)\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+\n+        final List<IntervalReading> intervalReadings = Arrays.asList(this.getIntervalReading(measurementElements));\n+\n+        final String identification = source.getMeasurementGroups()\n+                .get(0)\n+                .getIdentification();\n+        final ReadingType readingType = this.getReadingType(identification);\n+        final IntervalBlock intervalBlock = new IntervalBlock(readingType, intervalReadings);\n+\n+        final Long start = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .min(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-13 00:00:00\"));\n+        final Long end = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .max(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-16 00:00:00\"));\n+        final ValuesInterval valuesInterval = new ValuesInterval(start, end);\n+\n+        final UsagePoint usagePoint = new UsagePoint(this.getUsagePoint(identification));\n+        return new MeterReading(valuesInterval, null, identification, usagePoint, Arrays.asList(intervalBlock));\n+\n+    }\n+\n+    private ReadingType getReadingType(final String identification) {\n+        if (identification.contains(\"Power\")) {\n+            return new ReadingType(\"10s\", \"energy\", \"M\", \"W\", \"Energy MW en 10s\", null);\n+        } else {\n+            return new ReadingType(\"60s\", \"temperature\", \"none\", \"degC\", \"Temperature transformateur \u00b0C en 60s\", null);\n+        }\n+    }\n+\n+    private static long dateStringToEpoch(final String dateString) {\n+        final LocalDateTime localDateTime = LocalDateTime.parse(dateString,\n+                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n+        return localDateTime.atZone(ZoneId.systemDefault())\n+                .toInstant()\n+                .toEpochMilli();\n+    }\n+\n+    private CharSequence getUsagePoint(final String identification) {\n+        String usagePoint = \"Substation 1\";\n+        if (identification.contains(\"TFR1\")) {\n+            usagePoint += \" PT 1\";\n+        }\n+        if (identification.contains(\"TFR2\")) {\n+            usagePoint += \" PT 2\";\n+        }\n+        return usagePoint;", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjc5OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r411926799", "bodyText": "Leaving for now, will become obsolete when new AVRO message format is defined", "author": "smvdheijden", "createdAt": "2020-04-21T07:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5ODI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\nindex 5ad4137051..0918390de0 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java\n\n@@ -8,19 +8,20 @@\n  */\n package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n \n+import java.time.LocalDate;\n import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n+import java.time.ZoneOffset;\n+import java.time.temporal.TemporalAdjusters;\n import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n-import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n-import org.opensmartgridplatform.adapter.kafka.MeterReading;\n-import org.opensmartgridplatform.adapter.kafka.ReadingType;\n-import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n-import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n import org.opensmartgridplatform.domain.da.measurements.Measurement;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5OTQ1Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409399452", "bodyText": "Why don't we use an optional with orElseThrow?", "author": "robindenadel", "createdAt": "2020-04-16T09:05:45Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/services/DomainHelperService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.services;\n+\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.RtuDevice;\n+import org.opensmartgridplatform.domain.core.exceptions.NotAuthorizedException;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.OrganisationRepository;\n+import org.opensmartgridplatform.domain.core.repositories.RtuDeviceRepository;\n+import org.opensmartgridplatform.domain.core.services.SecurityService;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceFunction;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class DomainHelperService {\n+\n+    private static final ComponentType COMPONENT_TYPE = ComponentType.KAFKA_DISTRIBUTION_AUTOMATION;\n+\n+    @Autowired\n+    private RtuDeviceRepository rtuDeviceRepository;\n+\n+    @Autowired\n+    private OrganisationRepository organisationRepository;\n+\n+    @Autowired\n+    private SecurityService securityService;\n+\n+    public RtuDevice findDevice(final String deviceIdentification) throws FunctionalException {\n+        final RtuDevice device = this.rtuDeviceRepository.findByDeviceIdentification(deviceIdentification);\n+        if (device == null) {", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk0NTkxNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r411945915", "bodyText": "Not all repositories are already updated to return optionals. Dependent of the usage of the methods throughout the code, refactoring to use optionals might be a lot of work.\nIn this case the method in the repository was referenced only a few times, so therefor I\nrefactored it to use an optional.\nThe findOrganisation method in this class could also use the same refactoring, however updating the organisationRepository will have a greater impact (more references in more value streams), so I'll guess I won't do this now...", "author": "smvdheijden", "createdAt": "2020-04-21T07:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5OTQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/services/DomainHelperService.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/services/DomainHelperService.java\nindex b60b805707..58f1e9a8e0 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/services/DomainHelperService.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/services/DomainHelperService.java\n\n@@ -27,22 +27,22 @@ public class DomainHelperService {\n \n     private static final ComponentType COMPONENT_TYPE = ComponentType.KAFKA_DISTRIBUTION_AUTOMATION;\n \n-    @Autowired\n-    private RtuDeviceRepository rtuDeviceRepository;\n-\n-    @Autowired\n-    private OrganisationRepository organisationRepository;\n+    private final RtuDeviceRepository rtuDeviceRepository;\n+    private final OrganisationRepository organisationRepository;\n+    private final SecurityService securityService;\n \n     @Autowired\n-    private SecurityService securityService;\n+    public DomainHelperService(final RtuDeviceRepository rtuDeviceRepository,\n+            final OrganisationRepository organisationRepository, final SecurityService securityService) {\n+        this.rtuDeviceRepository = rtuDeviceRepository;\n+        this.organisationRepository = organisationRepository;\n+        this.securityService = securityService;\n+    }\n \n     public RtuDevice findDevice(final String deviceIdentification) throws FunctionalException {\n-        final RtuDevice device = this.rtuDeviceRepository.findByDeviceIdentification(deviceIdentification);\n-        if (device == null) {\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, COMPONENT_TYPE,\n-                    new UnknownEntityException(RtuDevice.class, deviceIdentification));\n-        }\n-        return device;\n+        return this.rtuDeviceRepository.findByDeviceIdentification(deviceIdentification)\n+                .orElseThrow(() -> new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, COMPONENT_TYPE,\n+                        new UnknownEntityException(RtuDevice.class, deviceIdentification)));\n     }\n \n     public Organisation findOrganisation(final String organisationIdentification) throws FunctionalException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwMTg1MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409401851", "bodyText": "there is no param notification Type", "author": "robindenadel", "createdAt": "2020-04-16T09:09:28Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.jms.messageprocessors;\n+\n+import java.io.Serializable;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.MeterReadingProducer;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.MessageProcessor;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class to process incoming domain responses.\n+ */\n+@Component(value = \"kafkaDistributionAutomationInboundDomainResponsesMessageProcessor\")\n+public class DomainResponseMessageProcessor implements MessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DomainResponseMessageProcessor.class);\n+\n+    @Autowired\n+    protected DistributionAutomationMapper mapper;\n+\n+    @Autowired\n+    private MeterReadingProducer meterReadingProducer;\n+\n+    @Override\n+    public void processMessage(final ObjectMessage message) {\n+        LOGGER.debug(\"Processing distribution automation response message\");\n+\n+        String correlationUid = null;\n+        String messageType = null;\n+        String organisationIdentification = null;\n+        String deviceIdentification = null;\n+\n+        ResponseMessageResultType resultType;\n+        String resultDescription;\n+        ResponseMessage dataObject;\n+\n+        try {\n+            correlationUid = message.getJMSCorrelationID();\n+            organisationIdentification = message.getStringProperty(Constants.ORGANISATION_IDENTIFICATION);\n+            deviceIdentification = message.getStringProperty(Constants.DEVICE_IDENTIFICATION);\n+\n+            messageType = message.getJMSType();\n+\n+            resultType = ResponseMessageResultType.valueOf(message.getStringProperty(Constants.RESULT));\n+            resultDescription = message.getStringProperty(Constants.DESCRIPTION);\n+\n+            dataObject = (ResponseMessage) message.getObject();\n+        } catch (final IllegalArgumentException e) {\n+            LOGGER.error(\"UNRECOVERABLE ERROR, received messageType {} is unknown.\", messageType, e);\n+            logDebugInformation(messageType, correlationUid, organisationIdentification, deviceIdentification);\n+\n+            return;\n+        } catch (final JMSException e) {\n+            LOGGER.error(\"UNRECOVERABLE ERROR, unable to read ObjectMessage instance, giving up.\", e);\n+            logDebugInformation(messageType, correlationUid, organisationIdentification, deviceIdentification);\n+\n+            return;\n+        }\n+\n+        try {\n+            LOGGER.info(\"Calling application service function to handle response: {}\", messageType);\n+\n+            final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification,\n+                    correlationUid);\n+            this.handleMessage(ids, messageType, resultType, resultDescription, dataObject);\n+\n+        } catch (final RuntimeException e) {\n+            handleError(e, correlationUid);\n+        }\n+    }\n+\n+    private void handleMessage(final CorrelationIds ids, final String messageType,\n+            final ResponseMessageResultType resultType, final String resultDescription, final ResponseMessage message) {\n+\n+        final Serializable dataObject = message.getDataObject();\n+        if (!(dataObject instanceof MeasurementReport)) {\n+            LOGGER.error(\"For this component we only handle measurement reports\");\n+        } else {\n+            this.meterReadingProducer.send(this.mapper.map(dataObject,\n+                    org.opensmartgridplatform.domain.da.measurements.MeasurementReport.class));\n+        }\n+\n+    }\n+\n+    /**\n+     * In case of an error, this function can be used to send a response\n+     * containing the exception to the web-service-adapter.\n+     *\n+     * @param e\n+     *            The exception.\n+     * @param correlationUid\n+     *            The correlation UID.\n+     * @param notificationType\n+     *            The message type.", "originalCommit": "110fca2b621634da50f555a4222dba0198fdee62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk0NzIwMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r411947200", "bodyText": "No use of having this javadocs above a private method. Removed.", "author": "smvdheijden", "createdAt": "2020-04-21T07:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwMTg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java\nindex ae6306c2d9..f522d73cbd 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java\n\n@@ -89,31 +89,20 @@ public class DomainResponseMessageProcessor implements MessageProcessor {\n \n     private void handleMessage(final CorrelationIds ids, final String messageType,\n             final ResponseMessageResultType resultType, final String resultDescription, final ResponseMessage message) {\n+        LOGGER.debug(\"Handling message of type {} for device {} with result: type {}, description {}.\", messageType,\n+                ids.getDeviceIdentification(), resultType, resultDescription);\n \n         final Serializable dataObject = message.getDataObject();\n         if (!(dataObject instanceof MeasurementReport)) {\n             LOGGER.error(\"For this component we only handle measurement reports\");\n         } else {\n-            this.meterReadingProducer.send(this.mapper.map(dataObject,\n-                    org.opensmartgridplatform.domain.da.measurements.MeasurementReport.class));\n+            this.meterReadingProducer.send(this.mapper.map(dataObject, MeasurementReport.class));\n         }\n-\n     }\n \n-    /**\n-     * In case of an error, this function can be used to send a response\n-     * containing the exception to the web-service-adapter.\n-     *\n-     * @param e\n-     *            The exception.\n-     * @param correlationUid\n-     *            The correlation UID.\n-     * @param notificationType\n-     *            The message type.\n-     */\n     private static void handleError(final RuntimeException e, final String correlationUid) {\n \n-        LOGGER.warn(\"Error '{}' occurred while trying to send message with correlationUid: {}\", e.getMessage(),\n+        LOGGER.error(\"Error '{}' occurred while trying to send message with correlationUid: {}\", e.getMessage(),\n                 correlationUid, e);\n     }\n \n"}}, {"oid": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "message": "OC-560 ~ Processes review comments", "committedDate": "2020-04-21T08:01:10Z", "type": "commit"}, {"oid": "5b274ea71e86a26f2776b201544e7aba1f4955e5", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5b274ea71e86a26f2776b201544e7aba1f4955e5", "message": "Merge branch 'development' into feature/OC-560-Kafka-adapter", "committedDate": "2020-04-21T08:25:16Z", "type": "commit"}, {"oid": "adebad1229c2c7083d0176209af79f6b3a53c1d3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/adebad1229c2c7083d0176209af79f6b3a53c1d3", "message": "OC-560 ~ Implements kafka consumer configuration in shared\n\nAnd refactors kafka producer configuration to align with kafka consumer\nconfiguration", "committedDate": "2020-04-21T15:54:14Z", "type": "commit"}, {"oid": "1ece97321bd1cfafa7f36d3b995742d6aee9f185", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1ece97321bd1cfafa7f36d3b995742d6aee9f185", "message": "Merge branch 'development' into feature/OC-560-Kafka-adapter", "committedDate": "2020-04-21T16:42:14Z", "type": "commit"}, {"oid": "92378e4ebb49c1ffb0898951d4f1030b8c55a5a0", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/92378e4ebb49c1ffb0898951d4f1030b8c55a5a0", "message": "OC-560 ~ Fixes unused parameter warning", "committedDate": "2020-04-22T13:47:50Z", "type": "commit"}, {"oid": "ec3c668acbde81a1962f8189d59a88028a52236a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ec3c668acbde81a1962f8189d59a88028a52236a", "message": "OC-560 ~ Updates spring-kafka dependency to scope provided\n\nAnd reorders pom elements to recommended order according to pom code\nconventions", "committedDate": "2020-04-22T16:26:38Z", "type": "commit"}]}