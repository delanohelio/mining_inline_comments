{"pr_number": 381, "pr_title": "Feature/oc 611 implement changes to mqtt measurement message", "pr_createdAt": "2020-07-23T08:16:21Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/381", "timeline": [{"oid": "bc6b767cca4afab8ce49732ebea4233d787eed7f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bc6b767cca4afab8ce49732ebea4233d787eed7f", "message": "Merge branch 'development' into feature/OC-611_implement_changes_to_mqtt_measurement_message", "committedDate": "2020-07-21T07:27:50Z", "type": "commit"}, {"oid": "6ecc93664a402eee5202399329298ec5d4811217", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6ecc93664a402eee5202399329298ec5d4811217", "message": "OC-611: Implements changes to mqtt measurement message.", "committedDate": "2020-07-23T08:07:36Z", "type": "commit"}, {"oid": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "message": "Merge branch 'development' into feature/OC-611_implement_changes_to_mqtt_measurement_message", "committedDate": "2020-07-23T08:10:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNzQyMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r459917421", "bodyText": "Perhaps we can make it slightly clearer here by ditching the \"isEqualToComparingOnlyGivenFields\".\nSo compare description, kind and getPowerSystemResource().description one by one and the measurements last.\nIf you don't think it's worth while, just leave in the current code.", "author": "rlemmers", "createdAt": "2020-07-24T08:24:28Z", "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/kafka/in/PeakShavingConsumer.java", "diffHunk": "@@ -41,7 +42,13 @@ public void checkKafkaOutput(final String expectedMessage) {\n             remaining = this.waitFailMillis - elapsed;\n         }\n         assertThat(this.consumerRecord).isNotNull();\n-        assertThat(this.consumerRecord.value()).isEqualTo(expectedMessage);\n+        final GridMeasurementPublishedEvent message = this.consumerRecord.value();\n+        assertThat(message).isEqualToComparingOnlyGivenFields(expectedMessage, \"description\", \"kind\");\n+        assertThat(message.getPowerSystemResource())\n+                .isEqualToComparingOnlyGivenFields(expectedMessage.getPowerSystemResource(), \"description\");\n+        assertThat(message.getMeasurements()).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(expectedMessage.getMeasurements());\n+", "originalCommit": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNTgyMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r460015822", "bodyText": "I don't see why that should be clearer.", "author": "robindenadel", "createdAt": "2020-07-24T12:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNzQyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxODU2Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r459918563", "bodyText": "License header is missing.", "author": "rlemmers", "createdAt": "2020-07-24T08:26:55Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;", "originalCommit": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNjM5Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r460016393", "bodyText": "added it", "author": "robindenadel", "createdAt": "2020-07-24T12:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxODU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\nindex d59f05d065..6821b742be 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\n\n@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n \n import java.util.Arrays;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjIzNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r459932235", "bodyText": "Is masking necessary? If some calls the method using 45 as value, there will be a runtime exception anyway.", "author": "rlemmers", "createdAt": "2020-07-24T08:57:24Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+\n+public enum LsPeakShavingMeasurementType {\n+    VOLTAGE_L1(1, \"U-L1-E\", UnitSymbol.V),\n+    VOLTAGE_L2(2, \"U-L2-E\", UnitSymbol.V),\n+    VOLTAGE_L3(3, \"U-L3-E\", UnitSymbol.V),\n+    CURRENT_L1(4, \"I-L1\", UnitSymbol.A),\n+    CURRENT_L2(5, \"I-L2\", UnitSymbol.A),\n+    CURRENT_L3(6, \"I-L3\", UnitSymbol.A),\n+    TOTAL_ACTIVE_POWER(7, \"SomP\", UnitSymbol.W, UnitMultiplier.k),\n+    TOTAL_REACTIVE_POWER(8, \"SomQ\", UnitSymbol.VAr, UnitMultiplier.k),\n+    ACTIVE_POWER_L1(9, \"P-L1\", UnitSymbol.W, UnitMultiplier.k),\n+    ACTIVE_POWER_L2(10, \"P-L2\", UnitSymbol.W, UnitMultiplier.k),\n+    ACTIVE_POWER_L3(11, \"P-L3\", UnitSymbol.W, UnitMultiplier.k),\n+    REACTIVE_POWER_L1(12, \"Q-L1\", UnitSymbol.VAr, UnitMultiplier.k),\n+    REACTIVE_POWER_L2(13, \"Q-L2\", UnitSymbol.VAr, UnitMultiplier.k),\n+    REACTIVE_POWER_L3(14, \"Q-L3\", UnitSymbol.VAr, UnitMultiplier.k),\n+    POWER_FACTOR_L1(15, \"PF-L1\", UnitSymbol.none),\n+    POWER_FACTOR_L2(16, \"PF-L2\", UnitSymbol.none),\n+    POWER_FACTOR_L3(17, \"PF-L3\", UnitSymbol.none),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L1(18, \"THDi-L1\", UnitSymbol.PerCent),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L2(19, \"THDi-L2\", UnitSymbol.PerCent),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L3(20, \"THDi-L3\", UnitSymbol.PerCent),\n+    CURRENT_HARMONIC_L1_H3(21, \"I1-H3\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L2_H3(22, \"I2-H3\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L3_H3(23, \"I3-H3\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L1_H5(24, \"I1-H5\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L2_H5(25, \"I2-H5\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L3_H5(26, \"I3-H5\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L1_H7(27, \"I1-H7\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L2_H7(28, \"I2-H7\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L3_H7(29, \"I3-H7\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L1_H9(30, \"I1-H9\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L2_H9(31, \"I2-H9\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L3_H9(32, \"I3-H9\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L1_H11(33, \"I1-H11\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L2_H11(34, \"I2-H11\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L3_H11(35, \"I3-H11\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L1_H13(36, \"I1-H13\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L2_H13(37, \"I2-H13\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L3_H13(38, \"I3-H13\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L1_H15(39, \"I1-H15\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L2_H15(40, \"I2-H15\", UnitSymbol.A),\n+    CURRENT_HARMONIC_L3_H15(41, \"I3-H15\", UnitSymbol.A);\n+\n+    private static final Map<Integer, LsPeakShavingMeasurementType> MEASUREMENTS_MAP = Arrays\n+            .stream(LsPeakShavingMeasurementType.values())\n+            .collect(Collectors.toMap(LsPeakShavingMeasurementType::getIndex, e -> e));\n+\n+    private int index;\n+    private String description;\n+    private UnitSymbol unitSymbol;\n+    private UnitMultiplier unitMultiplier;\n+\n+    LsPeakShavingMeasurementType(final int index, final String description, final UnitSymbol unitSymbol) {\n+        this(index, description, unitSymbol, UnitMultiplier.none);\n+    }\n+\n+    LsPeakShavingMeasurementType(final int index, final String description, final UnitSymbol unitSymbol,\n+            final UnitMultiplier unitMultiplier) {\n+        this.index = index;\n+        this.description = description;\n+        this.unitSymbol = unitSymbol;\n+        this.unitMultiplier = unitMultiplier;\n+    }\n+\n+    public static LsPeakShavingMeasurementType getMeasurementType(final int index) {\n+        return MEASUREMENTS_MAP.get(index & 0xFF);", "originalCommit": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNjQ3Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r460016477", "bodyText": "removed it", "author": "robindenadel", "createdAt": "2020-07-24T12:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\nindex d59f05d065..6821b742be 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\n\n@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n \n import java.util.Arrays;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTUwMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r459935501", "bodyText": "License header missing.", "author": "rlemmers", "createdAt": "2020-07-24T09:04:12Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;", "originalCommit": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNjcwNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r460016707", "bodyText": "duplication?", "author": "robindenadel", "createdAt": "2020-07-24T12:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNTUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\nindex d59f05d065..6821b742be 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMeasurementType.java\n\n@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n \n import java.util.Arrays;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1ODQzOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r459958439", "bodyText": "There's a lot of repetition in this code. Create a few factory methods or a builder to make it cleaner. It also helps to make SimpleMessageFactory a bit cleaner. Perhaps the method \"private Analog createAnalog(final String description, final Float value, final UnitSymbol unitSymbol, final UnitMultiplier unitMultiplier)\" can be reused/adapted.", "author": "rlemmers", "createdAt": "2020-07-24T09:52:38Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMessageFactory.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+\n+public class LsPeakShavingMessageFactory {\n+    public static List<Analog> expectedMeasurements() {\n+        final List<Analog> measurements = new ArrayList<>();\n+        measurements.add(new Analog(\"TST-01-L-1V1:U-L1-E\", null, AccumulationKind.none, MeasuringPeriodKind.none,", "originalCommit": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNjg2NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r460016864", "bodyText": "changed it", "author": "robindenadel", "createdAt": "2020-07-24T12:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1ODQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMessageFactory.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMessageFactory.java\nindex a4f14f581e..e43076188e 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMessageFactory.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMessageFactory.java\n\n@@ -8,144 +8,56 @@\n package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n \n-import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n \n-public class LsPeakShavingMessageFactory {\n+public class LsPeakShavingMessageFactory extends MessageFactory {\n     public static List<Analog> expectedMeasurements() {\n         final List<Analog> measurements = new ArrayList<>();\n-        measurements.add(new Analog(\"TST-01-L-1V1:U-L1-E\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.1f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:U-L2-E\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.2f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:U-L3-E\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.3f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I-L1\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.4f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I-L2\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.5f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I-L3\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.6f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:SomP\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.k, UnitSymbol.W, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.7f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:SomQ\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.k, UnitSymbol.VAr, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.8f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:P-L1\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.k, UnitSymbol.W, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(0.9f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:P-L2\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.k, UnitSymbol.W, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.0f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:P-L3\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.k, UnitSymbol.W, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.1f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:Q-L1\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.k, UnitSymbol.VAr, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.2f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:Q-L2\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.k, UnitSymbol.VAr, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.3f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:Q-L3\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.k, UnitSymbol.VAr, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.4f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:PF-L1\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.none, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.5f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:PF-L2\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.none, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.6f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:PF-L3\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.none, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.7f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:THDi-L1\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.PerCent, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.8f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:THDi-L2\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.PerCent, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(1.9f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:THDi-L3\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.PerCent, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.0f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I1-H3\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.1f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I2-H3\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.2f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I3-H3\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.3f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I1-H5\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.4f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I2-H5\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.5f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I3-H5\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.6f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I1-H7\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.7f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I2-H7\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.8f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I3-H7\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(2.9f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I1-H9\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.0f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I2-H9\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.1f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I3-H9\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.2f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I1-H11\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.3f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I2-H11\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.4f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I3-H11\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.5f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I1-H13\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.6f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I2-H13\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.7f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I3-H13\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.8f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I1-H15\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(3.9f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I2-H15\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(4.0f, null, null))));\n-        measurements.add(new Analog(\"TST-01-L-1V1:I3-H15\", null, AccumulationKind.none, MeasuringPeriodKind.none,\n-                PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                Arrays.asList(new AnalogValue(4.1f, null, null))));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:U-L1-E\", 0.1f, UnitSymbol.V));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:U-L2-E\", 0.2f, UnitSymbol.V));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:U-L3-E\", 0.3f, UnitSymbol.V));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I-L1\", 0.4f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I-L2\", 0.5f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I-L3\", 0.6f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:SomP\", 0.7f, UnitSymbol.W, UnitMultiplier.k));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:SomQ\", 0.8f, UnitSymbol.VAr, UnitMultiplier.k));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:P-L1\", 0.9f, UnitSymbol.W, UnitMultiplier.k));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:P-L2\", 1.0f, UnitSymbol.W, UnitMultiplier.k));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:P-L3\", 1.1f, UnitSymbol.W, UnitMultiplier.k));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:Q-L1\", 1.2f, UnitSymbol.VAr, UnitMultiplier.k));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:Q-L2\", 1.3f, UnitSymbol.VAr, UnitMultiplier.k));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:Q-L3\", 1.4f, UnitSymbol.VAr, UnitMultiplier.k));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:PF-L1\", 1.5f, UnitSymbol.none));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:PF-L2\", 1.6f, UnitSymbol.none));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:PF-L3\", 1.7f, UnitSymbol.none));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:THDi-L1\", 1.8f, UnitSymbol.PerCent));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:THDi-L2\", 1.9f, UnitSymbol.PerCent));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:THDi-L3\", 2.0f, UnitSymbol.PerCent));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I1-H3\", 2.1f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I2-H3\", 2.2f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I3-H3\", 2.3f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I1-H5\", 2.4f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I2-H5\", 2.5f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I3-H5\", 2.6f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I1-H7\", 2.7f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I2-H7\", 2.8f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I3-H7\", 2.9f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I1-H9\", 3.0f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I2-H9\", 3.1f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I3-H9\", 3.2f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I1-H11\", 3.3f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I2-H11\", 3.4f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I3-H11\", 3.5f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I1-H13\", 3.6f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I2-H13\", 3.7f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I3-H13\", 3.8f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I1-H15\", 3.9f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I2-H15\", 4.0f, UnitSymbol.A));\n+        measurements.add(createAnalog(\"TST-01-L-1V1:I3-H15\", 4.1f, UnitSymbol.A));\n         return measurements;\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2MzQ3NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r459963475", "bodyText": "Mention these two variations in the JavaDoc of the class. It currently only mentions the old (simple) format.", "author": "rlemmers", "createdAt": "2020-07-24T10:03:56Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -42,49 +33,30 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int VOLTAGE_START_INDEX = 1;\n-    private static final int CURRENT_START_INDEX = 4;\n-    private static final int CURRENT_RETURNED_START_INDEX = 7;\n-    private static final int END_INDEX = 10;\n+    private static final int SIMPLE_END_INDEX = 10;\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n+        StringArrayToAnalogList stringArrayToAnalogList = null;\n         final String[] values = source.split(\";\");\n-        if (values.length != END_INDEX) {\n+        if (values.length == SIMPLE_END_INDEX) {\n+            stringArrayToAnalogList = new SimpleStringToAnalogList();\n+        } else if (values.length == (LsPeakShavingMeasurementType.getNumberOfElements() + 1)) {\n+            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();", "originalCommit": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNzAxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r460017013", "bodyText": "changed the java doc", "author": "robindenadel", "createdAt": "2020-07-24T12:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2MzQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 45878f9791..85f9635fed 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -22,12 +22,15 @@ import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n /**\n- * Class for mapping String containing a measurement to\n- * GridMeasurementPublishedEvent\n+ * Class for mapping String containing a simple measurement or ls peak shaving\n+ * measurement to GridMeasurementPublishedEvent\n  * <p>\n- * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n- * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n- * current_returned_L3;\n+ * simple measurement: ean_code; voltage_L1; voltage_L2; voltage_L3;\n+ * current_in_L1; current_in_L2; current_in_L3; current_returned_L1;\n+ * current_returned_L2; current_returned_L3;\n+ * <p>\n+ * ls peak shaving measurement: ean_code + the values of\n+ * LsPeakShavingMeasurementType seperated by semicolons.\n  */\n public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2NDI1Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r459964252", "bodyText": "The outer round brackets in \"(LsPeakShavingMeasurementType.getNumberOfElements() + 1)\" can be removed.", "author": "rlemmers", "createdAt": "2020-07-24T10:05:45Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -42,49 +33,30 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int VOLTAGE_START_INDEX = 1;\n-    private static final int CURRENT_START_INDEX = 4;\n-    private static final int CURRENT_RETURNED_START_INDEX = 7;\n-    private static final int END_INDEX = 10;\n+    private static final int SIMPLE_END_INDEX = 10;\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n+        StringArrayToAnalogList stringArrayToAnalogList = null;\n         final String[] values = source.split(\";\");\n-        if (values.length != END_INDEX) {\n+        if (values.length == SIMPLE_END_INDEX) {\n+            stringArrayToAnalogList = new SimpleStringToAnalogList();\n+        } else if (values.length == (LsPeakShavingMeasurementType.getNumberOfElements() + 1)) {", "originalCommit": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNzExOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r460017119", "bodyText": "done so", "author": "robindenadel", "createdAt": "2020-07-24T12:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2NDI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 45878f9791..85f9635fed 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -22,12 +22,15 @@ import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n /**\n- * Class for mapping String containing a measurement to\n- * GridMeasurementPublishedEvent\n+ * Class for mapping String containing a simple measurement or ls peak shaving\n+ * measurement to GridMeasurementPublishedEvent\n  * <p>\n- * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n- * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n- * current_returned_L3;\n+ * simple measurement: ean_code; voltage_L1; voltage_L2; voltage_L3;\n+ * current_in_L1; current_in_L2; current_in_L3; current_returned_L1;\n+ * current_returned_L2; current_returned_L3;\n+ * <p>\n+ * ls peak shaving measurement: ean_code + the values of\n+ * LsPeakShavingMeasurementType seperated by semicolons.\n  */\n public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2NjY3Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r459966672", "bodyText": "A check on the number of elements was already done before calling this method. To make it more robust, we can also check in this method if LsPeakShavingMeasurementType.getNumberOfElements() matches the length of the array.\nThe same applies to SimpleStringToAnalogList.", "author": "rlemmers", "createdAt": "2020-07-24T10:11:31Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsMeasurementMessageToAnalogList.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+\n+public class LsMeasurementMessageToAnalogList implements StringArrayToAnalogList {\n+\n+    @Override\n+    public List<Analog> convertToAnalogList(final String[] values) {\n+        final List<Analog> measurements = new ArrayList<>();\n+\n+        final String eanCode = values[0];\n+        for (int index = 1; index < values.length; index++) {", "originalCommit": "9ea4f4dd5345713dd13fc87f9da5d48ba597b426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNzIxOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/381#discussion_r460017219", "bodyText": "added checks", "author": "robindenadel", "createdAt": "2020-07-24T12:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2NjY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsMeasurementMessageToAnalogList.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsMeasurementMessageToAnalogList.java\nindex ba6d4ba8a6..a4ded31a11 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsMeasurementMessageToAnalogList.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsMeasurementMessageToAnalogList.java\n\n@@ -16,10 +16,18 @@ public class LsMeasurementMessageToAnalogList implements StringArrayToAnalogList\n \n     @Override\n     public List<Analog> convertToAnalogList(final String[] values) {\n+\n+        final int lengthOfInputArray = values.length;\n+        final int expectedLength = LsPeakShavingMeasurementType.getNumberOfElements() + 1;\n+        if (lengthOfInputArray != expectedLength) {\n+            throw new IllegalArgumentException(\n+                    \"Invalid value string length \" + lengthOfInputArray + \", expected \" + expectedLength);\n+        }\n+\n         final List<Analog> measurements = new ArrayList<>();\n \n         final String eanCode = values[0];\n-        for (int index = 1; index < values.length; index++) {\n+        for (int index = 1; index < lengthOfInputArray; index++) {\n             final LsPeakShavingMeasurementType measurementType = LsPeakShavingMeasurementType.getMeasurementType(index);\n             final String description = eanCode + \":\" + measurementType.getDescription();\n             measurements.add(this.createAnalog(description, Float.valueOf(values[index]),\n"}}, {"oid": "316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/316c3cba0cef2718dc5e2a4ec69eba3bc4d30d1d", "message": "OC-611: Addresses review comments.", "committedDate": "2020-07-24T12:18:14Z", "type": "commit"}]}