{"pr_number": 427, "pr_title": "OC-648 Peakshaving: adapt the chain so the output given by a MQTT device is handled correctly", "pr_createdAt": "2020-09-22T15:13:30Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/427", "timeline": [{"oid": "bcd45355d650ad71eb1c19c1c0caaa69bb91e336", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bcd45355d650ad71eb1c19c1c0caaa69bb91e336", "message": "Working Peakshaving test", "committedDate": "2020-09-22T08:21:44Z", "type": "commit"}, {"oid": "e299f02aa85f6e4470c183dfe05e46099d5e3c60", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e299f02aa85f6e4470c183dfe05e46099d5e3c60", "message": "Jackson objectmapper", "committedDate": "2020-09-22T10:36:47Z", "type": "commit"}, {"oid": "77e227edc3ef813cbc26712c9b8799c7faa64cf6", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/77e227edc3ef813cbc26712c9b8799c7faa64cf6", "message": "MQTT simulator", "committedDate": "2020-09-22T15:11:33Z", "type": "commit"}, {"oid": "ac890e63b659653a68ec1c9a3678cc30b018faaf", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ac890e63b659653a68ec1c9a3678cc30b018faaf", "message": "Merge remote-tracking branch 'origin/development' into feature/OC-648-mqtt-device-peak-shaving", "committedDate": "2020-09-22T15:12:00Z", "type": "commit"}, {"oid": "e775a48652c46547e5a936e47ea0baedb2949739", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e775a48652c46547e5a936e47ea0baedb2949739", "message": "Not starting the MQTT simulator on the jenkins server", "committedDate": "2020-09-23T08:01:49Z", "type": "commit"}, {"oid": "46313ae5701d6a8c67a87cf0c11f894785bcdf68", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/46313ae5701d6a8c67a87cf0c11f894785bcdf68", "message": "Proper error throwing and removal off unused code", "committedDate": "2020-09-23T13:26:00Z", "type": "commit"}, {"oid": "e59bf1fb9ff161b2b6503fca0021f7cbacc5a154", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e59bf1fb9ff161b2b6503fca0021f7cbacc5a154", "message": "Using a date converter to use the date of the created message", "committedDate": "2020-09-24T13:15:04Z", "type": "commit"}, {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "message": "Removal of simple messages", "committedDate": "2020-09-24T15:20:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NTg3MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496555870", "bodyText": "change in .getLogger(MqttDeviceSteps.class)", "author": "joostknapen", "createdAt": "2020-09-29T09:01:47Z", "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java", "diffHunk": "@@ -51,6 +53,8 @@\n     @Autowired\n     private PeakShavingConsumer consumer;\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SimulatorSpecPublishingClient.class);", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java b/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java\nindex f40c7fe7f9..1f7d12accf 100644\n--- a/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java\n\n@@ -53,7 +53,7 @@ public class MqttDeviceSteps {\n     @Autowired\n     private PeakShavingConsumer consumer;\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(SimulatorSpecPublishingClient.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MqttDeviceSteps.class);\n \n     @When(\"MQTT device {string} sends a measurement report\")\n     public void theDeviceSendsAMeasurementReport(final String deviceIdentification,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjE2MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496606161", "bodyText": "In case there is no 0'th element, a nullpointer exception will be thrown. Add a check for this.", "author": "joostknapen", "createdAt": "2020-09-29T10:21:16Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 670f381d76..14e316e124 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -52,31 +53,40 @@ public class GridMeasurementPublishedEventConverter extends CustomConverter<Stri\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.info(\"Source string: {}\", source);\n+        LOGGER.debug(\"Source string: {}\", source);\n \n         try {\n-            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n+                return null;\n+            }\n+            final Payload payload = payloads[0];\n \n-            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n+                    Arrays.toString(measurementValues));\n \n-            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n                 stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n             } else {\n-                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                LOGGER.error(\n+                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n                 return null;\n             }\n \n-            final String eanCode = values[0];\n+            final String eanCode = measurementValues[0];\n             final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n                     UUID.randomUUID().toString(), new ArrayList<Name>());\n             final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            dateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Amsterdam\"));\n             final Date date = dateFormat.parse(payload.date);\n             final long createdDateTime = date.getTime();\n-            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            LOGGER.debug(\"CreatedDateTime: {}\", createdDateTime);\n             return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n                     \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                    stringArrayToAnalogList.convertToAnalogList(values));\n+                    stringArrayToAnalogList.convertToAnalogList(measurementValues));\n         } catch (final JsonMappingException e) {\n             LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjQ5Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496606492", "bodyText": "change to .getLogger(MqttDeviceSteps.class);", "author": "joostknapen", "createdAt": "2020-09-29T10:21:54Z", "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java", "diffHunk": "@@ -51,6 +53,8 @@\n     @Autowired\n     private PeakShavingConsumer consumer;\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SimulatorSpecPublishingClient.class);", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java b/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java\nindex f40c7fe7f9..1f7d12accf 100644\n--- a/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java\n\n@@ -53,7 +53,7 @@ public class MqttDeviceSteps {\n     @Autowired\n     private PeakShavingConsumer consumer;\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(SimulatorSpecPublishingClient.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MqttDeviceSteps.class);\n \n     @When(\"MQTT device {string} sends a measurement report\")\n     public void theDeviceSendsAMeasurementReport(final String deviceIdentification,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMDU4Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496610587", "bodyText": "I would make this a debug message instead of info, or even remove the message", "author": "joostknapen", "createdAt": "2020-09-29T10:29:15Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 670f381d76..14e316e124 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -52,31 +53,40 @@ public class GridMeasurementPublishedEventConverter extends CustomConverter<Stri\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.info(\"Source string: {}\", source);\n+        LOGGER.debug(\"Source string: {}\", source);\n \n         try {\n-            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n+                return null;\n+            }\n+            final Payload payload = payloads[0];\n \n-            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n+                    Arrays.toString(measurementValues));\n \n-            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n                 stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n             } else {\n-                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                LOGGER.error(\n+                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n                 return null;\n             }\n \n-            final String eanCode = values[0];\n+            final String eanCode = measurementValues[0];\n             final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n                     UUID.randomUUID().toString(), new ArrayList<Name>());\n             final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            dateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Amsterdam\"));\n             final Date date = dateFormat.parse(payload.date);\n             final long createdDateTime = date.getTime();\n-            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            LOGGER.debug(\"CreatedDateTime: {}\", createdDateTime);\n             return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n                     \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                    stringArrayToAnalogList.convertToAnalogList(values));\n+                    stringArrayToAnalogList.convertToAnalogList(measurementValues));\n         } catch (final JsonMappingException e) {\n             LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMjMwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496612309", "bodyText": "I would make this a debug message instead of info. Also without knowing the java code the message is unclear. The only thing this messsage makes clear is that there is (or is not) a bug in the code, since  a few lines above, the Source string is already logged. In general, I think you should remove log messages that are only added to the code to make development itself easier", "author": "joostknapen", "createdAt": "2020-09-29T10:32:15Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMTM0Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496621347", "bodyText": "Maybe add in the error message below the number of elements of 'value' and the number of expected elements", "author": "joostknapen", "createdAt": "2020-09-29T10:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMjMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 670f381d76..14e316e124 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -52,31 +53,40 @@ public class GridMeasurementPublishedEventConverter extends CustomConverter<Stri\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.info(\"Source string: {}\", source);\n+        LOGGER.debug(\"Source string: {}\", source);\n \n         try {\n-            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n+                return null;\n+            }\n+            final Payload payload = payloads[0];\n \n-            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n+                    Arrays.toString(measurementValues));\n \n-            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n                 stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n             } else {\n-                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                LOGGER.error(\n+                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n                 return null;\n             }\n \n-            final String eanCode = values[0];\n+            final String eanCode = measurementValues[0];\n             final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n                     UUID.randomUUID().toString(), new ArrayList<Name>());\n             final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            dateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Amsterdam\"));\n             final Date date = dateFormat.parse(payload.date);\n             final long createdDateTime = date.getTime();\n-            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            LOGGER.debug(\"CreatedDateTime: {}\", createdDateTime);\n             return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n                     \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                    stringArrayToAnalogList.convertToAnalogList(values));\n+                    stringArrayToAnalogList.convertToAnalogList(measurementValues));\n         } catch (final JsonMappingException e) {\n             LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMjk4NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496612984", "bodyText": "In general, I prefer to return an Optional.empty, instead of null. But I noticed that many (if not all) converters are already returning null in case of a failed conversion", "author": "joostknapen", "createdAt": "2020-09-29T10:33:28Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);\n             return null;", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 670f381d76..14e316e124 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -52,31 +53,40 @@ public class GridMeasurementPublishedEventConverter extends CustomConverter<Stri\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.info(\"Source string: {}\", source);\n+        LOGGER.debug(\"Source string: {}\", source);\n \n         try {\n-            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n+                return null;\n+            }\n+            final Payload payload = payloads[0];\n \n-            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n+                    Arrays.toString(measurementValues));\n \n-            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n                 stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n             } else {\n-                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                LOGGER.error(\n+                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n                 return null;\n             }\n \n-            final String eanCode = values[0];\n+            final String eanCode = measurementValues[0];\n             final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n                     UUID.randomUUID().toString(), new ArrayList<Name>());\n             final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            dateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Amsterdam\"));\n             final Date date = dateFormat.parse(payload.date);\n             final long createdDateTime = date.getTime();\n-            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            LOGGER.debug(\"CreatedDateTime: {}\", createdDateTime);\n             return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n                     \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                    stringArrayToAnalogList.convertToAnalogList(values));\n+                    stringArrayToAnalogList.convertToAnalogList(measurementValues));\n         } catch (final JsonMappingException e) {\n             LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDAzMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496614031", "bodyText": "Give values a more meaningful name", "author": "joostknapen", "createdAt": "2020-09-29T10:35:21Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 670f381d76..14e316e124 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -52,31 +53,40 @@ public class GridMeasurementPublishedEventConverter extends CustomConverter<Stri\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.info(\"Source string: {}\", source);\n+        LOGGER.debug(\"Source string: {}\", source);\n \n         try {\n-            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n+                return null;\n+            }\n+            final Payload payload = payloads[0];\n \n-            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n+                    Arrays.toString(measurementValues));\n \n-            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n                 stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n             } else {\n-                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                LOGGER.error(\n+                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n                 return null;\n             }\n \n-            final String eanCode = values[0];\n+            final String eanCode = measurementValues[0];\n             final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n                     UUID.randomUUID().toString(), new ArrayList<Name>());\n             final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            dateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Amsterdam\"));\n             final Date date = dateFormat.parse(payload.date);\n             final long createdDateTime = date.getTime();\n-            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            LOGGER.debug(\"CreatedDateTime: {}\", createdDateTime);\n             return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n                     \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                    stringArrayToAnalogList.convertToAnalogList(values));\n+                    stringArrayToAnalogList.convertToAnalogList(measurementValues));\n         } catch (final JsonMappingException e) {\n             LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxOTI1MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496619250", "bodyText": "This class has no super class; remove super()", "author": "joostknapen", "createdAt": "2020-09-29T10:45:16Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);\n             return null;\n         }\n-\n-        final String eanCode = values[0];\n-        final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode, UUID.randomUUID().toString(),\n-                new ArrayList<Name>());\n-        final long createdDateTime = System.currentTimeMillis();\n-        return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n-                \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                stringArrayToAnalogList.convertToAnalogList(values));\n     }\n \n+    private static class Payload {\n+\n+        private String gisnr;\n+        private String feeder;\n+        @JsonAlias({ \"D\" })\n+        private String date;\n+        private String[] data;\n+\n+        public Payload() {", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwODY4Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496808687", "bodyText": "This super is needed because it is a private static class. The objectmapper needs the super to create/map the Payload object.", "author": "JelleHoffman", "createdAt": "2020-09-29T15:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxOTI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 670f381d76..14e316e124 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -52,31 +53,40 @@ public class GridMeasurementPublishedEventConverter extends CustomConverter<Stri\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.info(\"Source string: {}\", source);\n+        LOGGER.debug(\"Source string: {}\", source);\n \n         try {\n-            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n+                return null;\n+            }\n+            final Payload payload = payloads[0];\n \n-            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n+                    Arrays.toString(measurementValues));\n \n-            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n                 stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n             } else {\n-                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                LOGGER.error(\n+                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n                 return null;\n             }\n \n-            final String eanCode = values[0];\n+            final String eanCode = measurementValues[0];\n             final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n                     UUID.randomUUID().toString(), new ArrayList<Name>());\n             final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            dateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Amsterdam\"));\n             final Date date = dateFormat.parse(payload.date);\n             final long createdDateTime = date.getTime();\n-            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            LOGGER.debug(\"CreatedDateTime: {}\", createdDateTime);\n             return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n                     \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                    stringArrayToAnalogList.convertToAnalogList(values));\n+                    stringArrayToAnalogList.convertToAnalogList(measurementValues));\n         } catch (final JsonMappingException e) {\n             LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzkxNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496623916", "bodyText": "typo :-)", "author": "joostknapen", "createdAt": "2020-09-29T10:54:09Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);", "originalCommit": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5NTEyOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496795128", "bodyText": "Which typo? I can't see it haha.", "author": "JelleHoffman", "createdAt": "2020-09-29T15:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4MTc0Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r497281742", "bodyText": "however the provided date was not the correct format --> A date is not a format. It is formatted in a particual way. So the date was not in the correct format or the date was not formatted correctly :-)", "author": "joostknapen", "createdAt": "2020-09-30T06:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "35620f5cf96e573484b9052869909b7313399632", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 670f381d76..14e316e124 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -52,31 +53,40 @@ public class GridMeasurementPublishedEventConverter extends CustomConverter<Stri\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.info(\"Source string: {}\", source);\n+        LOGGER.debug(\"Source string: {}\", source);\n \n         try {\n-            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n+                return null;\n+            }\n+            final Payload payload = payloads[0];\n \n-            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n+                    Arrays.toString(measurementValues));\n \n-            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n                 stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n             } else {\n-                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                LOGGER.error(\n+                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n                 return null;\n             }\n \n-            final String eanCode = values[0];\n+            final String eanCode = measurementValues[0];\n             final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n                     UUID.randomUUID().toString(), new ArrayList<Name>());\n             final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            dateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Amsterdam\"));\n             final Date date = dateFormat.parse(payload.date);\n             final long createdDateTime = date.getTime();\n-            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            LOGGER.debug(\"CreatedDateTime: {}\", createdDateTime);\n             return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n                     \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                    stringArrayToAnalogList.convertToAnalogList(values));\n+                    stringArrayToAnalogList.convertToAnalogList(measurementValues));\n         } catch (final JsonMappingException e) {\n             LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n             return null;\n"}}, {"oid": "496e0cfa5ae21076ddd56eebb8c6073440447f13", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/496e0cfa5ae21076ddd56eebb8c6073440447f13", "message": "Merge branch 'development' into feature/OC-648-mqtt-device-peak-shaving", "committedDate": "2020-09-29T12:31:43Z", "type": "commit"}, {"oid": "35620f5cf96e573484b9052869909b7313399632", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/35620f5cf96e573484b9052869909b7313399632", "message": "Revisions based on comments Joost", "committedDate": "2020-09-29T15:49:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NDY3OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r497284679", "bodyText": "I meant the case where payloads.length == 0, that would result in the null pointer. You can't call equals on an array element with a null value. Since in that case, payload[0] references to null.", "author": "joostknapen", "createdAt": "2020-09-30T07:03:19Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +46,95 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.debug(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {", "originalCommit": "35620f5cf96e573484b9052869909b7313399632", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73a9e1aee4dfc7886a795402c2ae609c2676daed", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 14e316e124..5b9aa2d0ec 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -57,7 +57,7 @@ public class GridMeasurementPublishedEventConverter extends CustomConverter<Stri\n \n         try {\n             final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n-            if (payloads[0].equals(null)) {\n+            if (payloads.length == 0 || payloads[0] == null) {\n                 LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n                 return null;\n             }\n"}}, {"oid": "73a9e1aee4dfc7886a795402c2ae609c2676daed", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/73a9e1aee4dfc7886a795402c2ae609c2676daed", "message": "Added test and fixed typo", "committedDate": "2020-09-30T08:28:22Z", "type": "commit"}]}