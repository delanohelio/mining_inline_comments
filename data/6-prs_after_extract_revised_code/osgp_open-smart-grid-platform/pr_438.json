{"pr_number": 438, "pr_title": "Code quality/increase coverage of firmware management service", "pr_createdAt": "2020-09-29T07:16:01Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/438", "timeline": [{"oid": "3bb2be735ebb196d138a015889175fbe5fabb24a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3bb2be735ebb196d138a015889175fbe5fabb24a", "message": "Increased coverage for FirmwareManagementService + fixed typo", "committedDate": "2020-09-22T10:11:49Z", "type": "commit"}, {"oid": "ca1e7e9368b53787363d874c19b48fcee328654a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ca1e7e9368b53787363d874c19b48fcee328654a", "message": "Added tests to increase coverage further", "committedDate": "2020-09-22T10:45:29Z", "type": "commit"}, {"oid": "9975f417d2cc43c849d3e7f0a1ce9cdf46210ae5", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9975f417d2cc43c849d3e7f0a1ce9cdf46210ae5", "message": "Fixed more tests", "committedDate": "2020-09-24T09:46:47Z", "type": "commit"}, {"oid": "fb5bb957c4e034c87d5929493c75e1d718116658", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fb5bb957c4e034c87d5929493c75e1d718116658", "message": "Merge pull request #2 from OSGP/development\n\nUpdating Fork", "committedDate": "2020-09-24T11:43:31Z", "type": "commit"}, {"oid": "d55ead2227e47d9004348e5b701ddbf98635972d", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d55ead2227e47d9004348e5b701ddbf98635972d", "message": "Merge remote-tracking branch 'origin/development' into code_quality/Increase_coverage_of_FirmwareManagementService", "committedDate": "2020-09-24T11:44:30Z", "type": "commit"}, {"oid": "8441c3fcc77090b7a145dc511eba5167ac64381f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8441c3fcc77090b7a145dc511eba5167ac64381f", "message": "Added and cleaned up more tests", "committedDate": "2020-09-24T13:07:06Z", "type": "commit"}, {"oid": "c289d754ddf18482ce27b82d9f0a6d5250dc3a47", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c289d754ddf18482ce27b82d9f0a6d5250dc3a47", "message": "fixed whitespace", "committedDate": "2020-09-24T14:15:03Z", "type": "commit"}, {"oid": "4af2de58bf144b12bf04ea21cd7fac072b2a9a77", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4af2de58bf144b12bf04ea21cd7fac072b2a9a77", "message": "Fixed some more whitespace", "committedDate": "2020-09-24T14:16:19Z", "type": "commit"}, {"oid": "f35360526b776bbf06709500767d8fa703f0ddeb", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f35360526b776bbf06709500767d8fa703f0ddeb", "message": "Some more whitespace fixed", "committedDate": "2020-09-24T14:17:09Z", "type": "commit"}, {"oid": "df5e6b1095a72488bc000e929a5e0bc618734dbc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/df5e6b1095a72488bc000e929a5e0bc618734dbc", "message": "I dislike tabs and spaces :(", "committedDate": "2020-09-24T14:19:40Z", "type": "commit"}, {"oid": "bcedf3a858ae5e9804cfc0c55ad219c1dada7de5", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bcedf3a858ae5e9804cfc0c55ad219c1dada7de5", "message": "Merge branch 'development' into code_quality/Increase_coverage_of_FirmwareManagementService", "committedDate": "2020-10-06T08:18:59Z", "type": "commit"}, {"oid": "b2dd7e92a804876e778c991c8fd3c0f6baa66338", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b2dd7e92a804876e778c991c8fd3c0f6baa66338", "message": "Fixed duplicate definitions", "committedDate": "2020-10-06T08:33:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMTQ3Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503731477", "bodyText": "very good!", "author": "robindenadel", "createdAt": "2020-10-13T07:38:15Z", "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -145,7 +145,7 @@ private void createSsldPendingFirmwareUpdateRecord(final CorrelationIds ids, fin\n             LOGGER.info(\"Saved pending fimware update record for SSLD: {}, {}\", ids.getDeviceIdentification(),\n                     ssldPendingFirmwareUpdate);\n         } catch (final Exception e) {\n-            LOGGER.error(\"Caugth exception when creating pending firmware update record for SSLD: {}\",\n+            LOGGER.error(\"Caught exception when creating pending firmware update record for SSLD: {}\",", "originalCommit": "b2dd7e92a804876e778c991c8fd3c0f6baa66338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjM4OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503732388", "bodyText": "indentation not ok, check your IDE settings", "author": "robindenadel", "createdAt": "2020-10-13T07:39:45Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";", "originalCommit": "b2dd7e92a804876e778c991c8fd3c0f6baa66338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDEyMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r519644122", "bodyText": "Formatting still not ok", "author": "robindenadel", "createdAt": "2020-11-09T08:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "3ef02154cf24f58b72131a3a2c4c5489603df6b0", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\nindex 8b560674cc..56eeb14293 100644\n--- a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n\n@@ -582,170 +582,152 @@ class FirmwareManagementServiceTest {\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n-    \n-    \n-    /*\n-     * Returns basic CorrelationIds for simple tests\n-     */\n-    private CorrelationIds getCorrelationIds() {\n-    \tfinal String organisationIdentification = \"test-org\";\n-        final String deviceIdentification = \"device-identification\";\n-        final String correlationUid = \"correlation-uid\";\n-    \treturn new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n-    }\n-    \n+\n     /*\n-     * Returns device of provided class with already mocked IP address \n+     * Returns device of provided class with already mocked IP address\n      */\n     private <T> Device getMockDevice(final Class<T> deviceClass) {\n-    \tfinal Device device = (Device) Mockito.mock(deviceClass);\n-    \twhen(device.getIpAddress()).thenReturn(\"0.0.0.0\"); \n-    \treturn device;\n+        final Device device = (Device) Mockito.mock(deviceClass);\n+        when(device.getIpAddress()).thenReturn(\"0.0.0.0\");\n+        return device;\n     }\n \n     @Test\n     void testUpdateFirmwareForNonSsld() throws FunctionalException {\n-        final CorrelationIds ids = this.getCorrelationIds();\n         final Device device = this.getMockDevice(Device.class);\n \n         when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-        when(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+        when(this.deviceDomainService.searchActiveDevice(this.correlationIds.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n             .thenReturn(device);\n \n-        this.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n \n         verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageCaptor.capture(),\n                 this.messageTypeCaptor.capture(), this.messagePriorityCaptor.capture(), this.ipAddressCaptor.capture(),\n                 this.scheduledTimeCaptor.capture());\n \n         final RequestMessage requestMessage = this.requestMessageCaptor.getValue();\n-        final RequestMessage expectedRequestMessage = new RequestMessage(\"correlation-uid\", \"test-org\",\n-            \"device-identification\", null);\n+        final RequestMessage expectedRequestMessage = new RequestMessage(this.correlationUid,\n+                this.organisationIdentification,\n+                this.deviceIdentification, null);\n \n         assertThat(requestMessage).usingRecursiveComparison().ignoringFields(\"request\").isEqualTo(expectedRequestMessage);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareForSsld() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-\n-    \tverify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(this.correlationIds.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n \n         final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate =\n                 this.ssldPendingFirmwareUpdateArgumentCaptor.getValue();\n         final SsldPendingFirmwareUpdate expectedSsldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(\n-            \"device-identification\", FirmwareModuleType.FUNCTIONAL, VERSION_1, \"test-org\", \"correlation-uid\"\n+                this.deviceIdentification, FirmwareModuleType.FUNCTIONAL, VERSION_1, this.organisationIdentification, this.correlationUid\n         );\n \n         assertThat(ssldPendingFirmwareUpdate).isEqualTo(expectedSsldPendingFirmwareUpdate);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithNoFirmwareFiles() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+        final Device device = this.getMockDevice(Ssld.class);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n \n         verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithNoFirmwareModuleVersions() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n-    \twhen(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-    \t\n-    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+        when(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithIncorrectFirmwareUrl() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-\t\t\t.thenReturn(device);\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-    \t\n-    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n-    \t\n-    \tfinal SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n-    \tfinal List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n-    \t\n-    \twhen(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n-       \t\t.thenReturn(ssldPendingFirmwareUpdates);\n-    \twhen(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(ids.getCorrelationUid());\n-    \twhen(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n-    \twhen(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n-    \twhen(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n-\t\t   \tArrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n-\t\t);\n-\n-    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, ids, \"messageType\", 1, \n-    \t\t\tResponseMessageResultType.OK, null);\n-\n-    \tverifyNoInteractions(this.webServiceResponseMessageSender);\n-    \tverify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n+    void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n+        final List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n+\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n+        final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n+\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n+            .thenReturn(ssldPendingFirmwareUpdates);\n+        when(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(this.correlationIds.getCorrelationUid());\n+        when(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n+        when(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n+        when(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n+            Arrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n+        );\n+\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, this.correlationIds, \"messageType\", 1,\n+                ResponseMessageResultType.OK, null);\n+\n+        verifyNoInteractions(this.webServiceResponseMessageSender);\n+        verify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionResponseNotOk() {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n-    \t\n-    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n-    \t\t\tResponseMessageResultType.NOT_OK, null);\n+    void testHandleGetFirmwareVersionResponseNotOk() {\n+        final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n \n-    \tverify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, this.correlationIds, \"messageType\", 1,\n+                ResponseMessageResultType.NOT_OK, null);\n \n-    \tfinal ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n+        verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+\n+        final ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n \n-    \tassertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n-    \tassertThat(responseMessage.getOsgpException().getMessage())\n+        assertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n+        assertThat(responseMessage.getOsgpException().getMessage())\n                 .isEqualTo(\"Exception occurred while getting device firmware version\");\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionErrorNotNull() {\n-        final CorrelationIds ids = this.getCorrelationIds();\n+    void testHandleGetFirmwareVersionErrorNotNull() {\n         final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n \n-        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, this.correlationIds, \"messageType\", 1,\n             ResponseMessageResultType.OK, this.defaultException);\n \n         verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzMxMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503733311", "bodyText": "Since we are going to check for these values in the assert part of the tests, refactor them into constants.", "author": "robindenadel", "createdAt": "2020-10-13T07:41:09Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";", "originalCommit": "b2dd7e92a804876e778c991c8fd3c0f6baa66338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ef02154cf24f58b72131a3a2c4c5489603df6b0", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\nindex 8b560674cc..56eeb14293 100644\n--- a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n\n@@ -582,170 +582,152 @@ class FirmwareManagementServiceTest {\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n-    \n-    \n-    /*\n-     * Returns basic CorrelationIds for simple tests\n-     */\n-    private CorrelationIds getCorrelationIds() {\n-    \tfinal String organisationIdentification = \"test-org\";\n-        final String deviceIdentification = \"device-identification\";\n-        final String correlationUid = \"correlation-uid\";\n-    \treturn new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n-    }\n-    \n+\n     /*\n-     * Returns device of provided class with already mocked IP address \n+     * Returns device of provided class with already mocked IP address\n      */\n     private <T> Device getMockDevice(final Class<T> deviceClass) {\n-    \tfinal Device device = (Device) Mockito.mock(deviceClass);\n-    \twhen(device.getIpAddress()).thenReturn(\"0.0.0.0\"); \n-    \treturn device;\n+        final Device device = (Device) Mockito.mock(deviceClass);\n+        when(device.getIpAddress()).thenReturn(\"0.0.0.0\");\n+        return device;\n     }\n \n     @Test\n     void testUpdateFirmwareForNonSsld() throws FunctionalException {\n-        final CorrelationIds ids = this.getCorrelationIds();\n         final Device device = this.getMockDevice(Device.class);\n \n         when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-        when(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+        when(this.deviceDomainService.searchActiveDevice(this.correlationIds.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n             .thenReturn(device);\n \n-        this.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n \n         verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageCaptor.capture(),\n                 this.messageTypeCaptor.capture(), this.messagePriorityCaptor.capture(), this.ipAddressCaptor.capture(),\n                 this.scheduledTimeCaptor.capture());\n \n         final RequestMessage requestMessage = this.requestMessageCaptor.getValue();\n-        final RequestMessage expectedRequestMessage = new RequestMessage(\"correlation-uid\", \"test-org\",\n-            \"device-identification\", null);\n+        final RequestMessage expectedRequestMessage = new RequestMessage(this.correlationUid,\n+                this.organisationIdentification,\n+                this.deviceIdentification, null);\n \n         assertThat(requestMessage).usingRecursiveComparison().ignoringFields(\"request\").isEqualTo(expectedRequestMessage);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareForSsld() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-\n-    \tverify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(this.correlationIds.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n \n         final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate =\n                 this.ssldPendingFirmwareUpdateArgumentCaptor.getValue();\n         final SsldPendingFirmwareUpdate expectedSsldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(\n-            \"device-identification\", FirmwareModuleType.FUNCTIONAL, VERSION_1, \"test-org\", \"correlation-uid\"\n+                this.deviceIdentification, FirmwareModuleType.FUNCTIONAL, VERSION_1, this.organisationIdentification, this.correlationUid\n         );\n \n         assertThat(ssldPendingFirmwareUpdate).isEqualTo(expectedSsldPendingFirmwareUpdate);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithNoFirmwareFiles() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+        final Device device = this.getMockDevice(Ssld.class);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n \n         verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithNoFirmwareModuleVersions() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n-    \twhen(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-    \t\n-    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+        when(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithIncorrectFirmwareUrl() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-\t\t\t.thenReturn(device);\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-    \t\n-    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n-    \t\n-    \tfinal SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n-    \tfinal List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n-    \t\n-    \twhen(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n-       \t\t.thenReturn(ssldPendingFirmwareUpdates);\n-    \twhen(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(ids.getCorrelationUid());\n-    \twhen(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n-    \twhen(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n-    \twhen(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n-\t\t   \tArrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n-\t\t);\n-\n-    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, ids, \"messageType\", 1, \n-    \t\t\tResponseMessageResultType.OK, null);\n-\n-    \tverifyNoInteractions(this.webServiceResponseMessageSender);\n-    \tverify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n+    void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n+        final List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n+\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n+        final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n+\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n+            .thenReturn(ssldPendingFirmwareUpdates);\n+        when(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(this.correlationIds.getCorrelationUid());\n+        when(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n+        when(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n+        when(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n+            Arrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n+        );\n+\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, this.correlationIds, \"messageType\", 1,\n+                ResponseMessageResultType.OK, null);\n+\n+        verifyNoInteractions(this.webServiceResponseMessageSender);\n+        verify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionResponseNotOk() {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n-    \t\n-    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n-    \t\t\tResponseMessageResultType.NOT_OK, null);\n+    void testHandleGetFirmwareVersionResponseNotOk() {\n+        final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n \n-    \tverify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, this.correlationIds, \"messageType\", 1,\n+                ResponseMessageResultType.NOT_OK, null);\n \n-    \tfinal ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n+        verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+\n+        final ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n \n-    \tassertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n-    \tassertThat(responseMessage.getOsgpException().getMessage())\n+        assertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n+        assertThat(responseMessage.getOsgpException().getMessage())\n                 .isEqualTo(\"Exception occurred while getting device firmware version\");\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionErrorNotNull() {\n-        final CorrelationIds ids = this.getCorrelationIds();\n+    void testHandleGetFirmwareVersionErrorNotNull() {\n         final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n \n-        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, this.correlationIds, \"messageType\", 1,\n             ResponseMessageResultType.OK, this.defaultException);\n \n         verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNjgwNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503736804", "bodyText": "remove public", "author": "robindenadel", "createdAt": "2020-10-13T07:46:59Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";\n+    \treturn new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+    }\n+    \n+    /*\n+     * Returns device of provided class with already mocked IP address \n+     */\n+    private <T> Device getMockDevice(final Class<T> deviceClass) {\n+    \tfinal Device device = (Device) Mockito.mock(deviceClass);\n+    \twhen(device.getIpAddress()).thenReturn(\"0.0.0.0\"); \n+    \treturn device;\n+    }\n+\n+    @Test\n+    void testUpdateFirmwareForNonSsld() throws FunctionalException {\n+        final CorrelationIds ids = this.getCorrelationIds();\n+        final Device device = this.getMockDevice(Device.class);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+            .thenReturn(device);\n+\n+        this.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageCaptor.capture(),\n+                this.messageTypeCaptor.capture(), this.messagePriorityCaptor.capture(), this.ipAddressCaptor.capture(),\n+                this.scheduledTimeCaptor.capture());\n+\n+        final RequestMessage requestMessage = this.requestMessageCaptor.getValue();\n+        final RequestMessage expectedRequestMessage = new RequestMessage(\"correlation-uid\", \"test-org\",\n+            \"device-identification\", null);\n+\n+        assertThat(requestMessage).usingRecursiveComparison().ignoringFields(\"request\").isEqualTo(expectedRequestMessage);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareForSsld() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+    \tverify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n+\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate =\n+                this.ssldPendingFirmwareUpdateArgumentCaptor.getValue();\n+        final SsldPendingFirmwareUpdate expectedSsldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(\n+            \"device-identification\", FirmwareModuleType.FUNCTIONAL, VERSION_1, \"test-org\", \"correlation-uid\"\n+        );\n+\n+        assertThat(ssldPendingFirmwareUpdate).isEqualTo(expectedSsldPendingFirmwareUpdate);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithNoFirmwareFiles() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithNoFirmwareModuleVersions() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+    \twhen(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+    \t\n+    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithIncorrectFirmwareUrl() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+\t\t\t.thenReturn(device);\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+    \t\n+    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {", "originalCommit": "b2dd7e92a804876e778c991c8fd3c0f6baa66338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ef02154cf24f58b72131a3a2c4c5489603df6b0", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\nindex 8b560674cc..56eeb14293 100644\n--- a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n\n@@ -582,170 +582,152 @@ class FirmwareManagementServiceTest {\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n-    \n-    \n-    /*\n-     * Returns basic CorrelationIds for simple tests\n-     */\n-    private CorrelationIds getCorrelationIds() {\n-    \tfinal String organisationIdentification = \"test-org\";\n-        final String deviceIdentification = \"device-identification\";\n-        final String correlationUid = \"correlation-uid\";\n-    \treturn new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n-    }\n-    \n+\n     /*\n-     * Returns device of provided class with already mocked IP address \n+     * Returns device of provided class with already mocked IP address\n      */\n     private <T> Device getMockDevice(final Class<T> deviceClass) {\n-    \tfinal Device device = (Device) Mockito.mock(deviceClass);\n-    \twhen(device.getIpAddress()).thenReturn(\"0.0.0.0\"); \n-    \treturn device;\n+        final Device device = (Device) Mockito.mock(deviceClass);\n+        when(device.getIpAddress()).thenReturn(\"0.0.0.0\");\n+        return device;\n     }\n \n     @Test\n     void testUpdateFirmwareForNonSsld() throws FunctionalException {\n-        final CorrelationIds ids = this.getCorrelationIds();\n         final Device device = this.getMockDevice(Device.class);\n \n         when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-        when(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+        when(this.deviceDomainService.searchActiveDevice(this.correlationIds.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n             .thenReturn(device);\n \n-        this.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n \n         verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageCaptor.capture(),\n                 this.messageTypeCaptor.capture(), this.messagePriorityCaptor.capture(), this.ipAddressCaptor.capture(),\n                 this.scheduledTimeCaptor.capture());\n \n         final RequestMessage requestMessage = this.requestMessageCaptor.getValue();\n-        final RequestMessage expectedRequestMessage = new RequestMessage(\"correlation-uid\", \"test-org\",\n-            \"device-identification\", null);\n+        final RequestMessage expectedRequestMessage = new RequestMessage(this.correlationUid,\n+                this.organisationIdentification,\n+                this.deviceIdentification, null);\n \n         assertThat(requestMessage).usingRecursiveComparison().ignoringFields(\"request\").isEqualTo(expectedRequestMessage);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareForSsld() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-\n-    \tverify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(this.correlationIds.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n \n         final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate =\n                 this.ssldPendingFirmwareUpdateArgumentCaptor.getValue();\n         final SsldPendingFirmwareUpdate expectedSsldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(\n-            \"device-identification\", FirmwareModuleType.FUNCTIONAL, VERSION_1, \"test-org\", \"correlation-uid\"\n+                this.deviceIdentification, FirmwareModuleType.FUNCTIONAL, VERSION_1, this.organisationIdentification, this.correlationUid\n         );\n \n         assertThat(ssldPendingFirmwareUpdate).isEqualTo(expectedSsldPendingFirmwareUpdate);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithNoFirmwareFiles() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+        final Device device = this.getMockDevice(Ssld.class);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n \n         verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithNoFirmwareModuleVersions() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n-    \twhen(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-    \t\n-    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+        when(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithIncorrectFirmwareUrl() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-\t\t\t.thenReturn(device);\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-    \t\n-    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n-    \t\n-    \tfinal SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n-    \tfinal List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n-    \t\n-    \twhen(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n-       \t\t.thenReturn(ssldPendingFirmwareUpdates);\n-    \twhen(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(ids.getCorrelationUid());\n-    \twhen(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n-    \twhen(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n-    \twhen(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n-\t\t   \tArrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n-\t\t);\n-\n-    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, ids, \"messageType\", 1, \n-    \t\t\tResponseMessageResultType.OK, null);\n-\n-    \tverifyNoInteractions(this.webServiceResponseMessageSender);\n-    \tverify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n+    void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n+        final List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n+\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n+        final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n+\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n+            .thenReturn(ssldPendingFirmwareUpdates);\n+        when(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(this.correlationIds.getCorrelationUid());\n+        when(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n+        when(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n+        when(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n+            Arrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n+        );\n+\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, this.correlationIds, \"messageType\", 1,\n+                ResponseMessageResultType.OK, null);\n+\n+        verifyNoInteractions(this.webServiceResponseMessageSender);\n+        verify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionResponseNotOk() {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n-    \t\n-    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n-    \t\t\tResponseMessageResultType.NOT_OK, null);\n+    void testHandleGetFirmwareVersionResponseNotOk() {\n+        final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n \n-    \tverify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, this.correlationIds, \"messageType\", 1,\n+                ResponseMessageResultType.NOT_OK, null);\n \n-    \tfinal ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n+        verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+\n+        final ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n \n-    \tassertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n-    \tassertThat(responseMessage.getOsgpException().getMessage())\n+        assertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n+        assertThat(responseMessage.getOsgpException().getMessage())\n                 .isEqualTo(\"Exception occurred while getting device firmware version\");\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionErrorNotNull() {\n-        final CorrelationIds ids = this.getCorrelationIds();\n+    void testHandleGetFirmwareVersionErrorNotNull() {\n         final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n \n-        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, this.correlationIds, \"messageType\", 1,\n             ResponseMessageResultType.OK, this.defaultException);\n \n         verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczOTg2NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503739865", "bodyText": "Check for the exception type using either .isInstanceOf in this construction or use assertThatExceptionOfType(<Exception.class>).isThrownBy(() -> {", "author": "robindenadel", "createdAt": "2020-10-13T07:51:50Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";\n+    \treturn new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+    }\n+    \n+    /*\n+     * Returns device of provided class with already mocked IP address \n+     */\n+    private <T> Device getMockDevice(final Class<T> deviceClass) {\n+    \tfinal Device device = (Device) Mockito.mock(deviceClass);\n+    \twhen(device.getIpAddress()).thenReturn(\"0.0.0.0\"); \n+    \treturn device;\n+    }\n+\n+    @Test\n+    void testUpdateFirmwareForNonSsld() throws FunctionalException {\n+        final CorrelationIds ids = this.getCorrelationIds();\n+        final Device device = this.getMockDevice(Device.class);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+            .thenReturn(device);\n+\n+        this.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageCaptor.capture(),\n+                this.messageTypeCaptor.capture(), this.messagePriorityCaptor.capture(), this.ipAddressCaptor.capture(),\n+                this.scheduledTimeCaptor.capture());\n+\n+        final RequestMessage requestMessage = this.requestMessageCaptor.getValue();\n+        final RequestMessage expectedRequestMessage = new RequestMessage(\"correlation-uid\", \"test-org\",\n+            \"device-identification\", null);\n+\n+        assertThat(requestMessage).usingRecursiveComparison().ignoringFields(\"request\").isEqualTo(expectedRequestMessage);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareForSsld() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+    \tverify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n+\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate =\n+                this.ssldPendingFirmwareUpdateArgumentCaptor.getValue();\n+        final SsldPendingFirmwareUpdate expectedSsldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(\n+            \"device-identification\", FirmwareModuleType.FUNCTIONAL, VERSION_1, \"test-org\", \"correlation-uid\"\n+        );\n+\n+        assertThat(ssldPendingFirmwareUpdate).isEqualTo(expectedSsldPendingFirmwareUpdate);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithNoFirmwareFiles() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithNoFirmwareModuleVersions() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+    \twhen(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+    \t\n+    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithIncorrectFirmwareUrl() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+\t\t\t.thenReturn(device);\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+    \t\n+    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n+    \t\n+    \tfinal SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n+    \tfinal List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n+    \t\n+    \twhen(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n+       \t\t.thenReturn(ssldPendingFirmwareUpdates);\n+    \twhen(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(ids.getCorrelationUid());\n+    \twhen(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n+    \twhen(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n+    \twhen(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n+\t\t   \tArrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n+\t\t);\n+\n+    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, ids, \"messageType\", 1, \n+    \t\t\tResponseMessageResultType.OK, null);\n+\n+    \tverifyNoInteractions(this.webServiceResponseMessageSender);\n+    \tverify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseNotOk() {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n+    \t\n+    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+    \t\t\tResponseMessageResultType.NOT_OK, null);\n+\n+    \tverify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+\n+    \tfinal ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n+\n+    \tassertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n+    \tassertThat(responseMessage.getOsgpException().getMessage())\n+                .isEqualTo(\"Exception occurred while getting device firmware version\");\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionErrorNotNull() {\n+        final CorrelationIds ids = this.getCorrelationIds();\n+        final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n+\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+            ResponseMessageResultType.OK, this.defaultException);\n+\n+        verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+        verify(this.ssldPendingFirmwareUpdateRepository, never()).delete(any());\n+\n+        final ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n+        final ResponseMessage expectedResponseMessage = ResponseMessage.newResponseMessageBuilder()\n+            .withIds(ids)\n+            .withResult(ResponseMessageResultType.NOT_OK)\n+            .withOsgpException(new TechnicalException(\"Exception occurred while getting device firmware version\"))\n+            .withMessagePriority(1)\n+            .build();\n+\n+        assertThat(responseMessage).usingRecursiveComparison().ignoringFields(\"dataObject\").isEqualTo(expectedResponseMessage);\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionWithPendingUpdateIsNull() {\n+        final CorrelationIds ids = this.getCorrelationIds();\n+        final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n+\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any())).thenReturn(null);\n+\n+        assertThatThrownBy(() -> {\n+            this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+                    ResponseMessageResultType.OK, null);\n+        }).hasMessage(null);", "originalCommit": "b2dd7e92a804876e778c991c8fd3c0f6baa66338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ef02154cf24f58b72131a3a2c4c5489603df6b0", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\nindex 8b560674cc..56eeb14293 100644\n--- a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n\n@@ -582,170 +582,152 @@ class FirmwareManagementServiceTest {\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n-    \n-    \n-    /*\n-     * Returns basic CorrelationIds for simple tests\n-     */\n-    private CorrelationIds getCorrelationIds() {\n-    \tfinal String organisationIdentification = \"test-org\";\n-        final String deviceIdentification = \"device-identification\";\n-        final String correlationUid = \"correlation-uid\";\n-    \treturn new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n-    }\n-    \n+\n     /*\n-     * Returns device of provided class with already mocked IP address \n+     * Returns device of provided class with already mocked IP address\n      */\n     private <T> Device getMockDevice(final Class<T> deviceClass) {\n-    \tfinal Device device = (Device) Mockito.mock(deviceClass);\n-    \twhen(device.getIpAddress()).thenReturn(\"0.0.0.0\"); \n-    \treturn device;\n+        final Device device = (Device) Mockito.mock(deviceClass);\n+        when(device.getIpAddress()).thenReturn(\"0.0.0.0\");\n+        return device;\n     }\n \n     @Test\n     void testUpdateFirmwareForNonSsld() throws FunctionalException {\n-        final CorrelationIds ids = this.getCorrelationIds();\n         final Device device = this.getMockDevice(Device.class);\n \n         when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-        when(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+        when(this.deviceDomainService.searchActiveDevice(this.correlationIds.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n             .thenReturn(device);\n \n-        this.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n \n         verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageCaptor.capture(),\n                 this.messageTypeCaptor.capture(), this.messagePriorityCaptor.capture(), this.ipAddressCaptor.capture(),\n                 this.scheduledTimeCaptor.capture());\n \n         final RequestMessage requestMessage = this.requestMessageCaptor.getValue();\n-        final RequestMessage expectedRequestMessage = new RequestMessage(\"correlation-uid\", \"test-org\",\n-            \"device-identification\", null);\n+        final RequestMessage expectedRequestMessage = new RequestMessage(this.correlationUid,\n+                this.organisationIdentification,\n+                this.deviceIdentification, null);\n \n         assertThat(requestMessage).usingRecursiveComparison().ignoringFields(\"request\").isEqualTo(expectedRequestMessage);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareForSsld() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-\n-    \tverify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(this.correlationIds.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n \n         final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate =\n                 this.ssldPendingFirmwareUpdateArgumentCaptor.getValue();\n         final SsldPendingFirmwareUpdate expectedSsldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(\n-            \"device-identification\", FirmwareModuleType.FUNCTIONAL, VERSION_1, \"test-org\", \"correlation-uid\"\n+                this.deviceIdentification, FirmwareModuleType.FUNCTIONAL, VERSION_1, this.organisationIdentification, this.correlationUid\n         );\n \n         assertThat(ssldPendingFirmwareUpdate).isEqualTo(expectedSsldPendingFirmwareUpdate);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithNoFirmwareFiles() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+        final Device device = this.getMockDevice(Ssld.class);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n \n         verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithNoFirmwareModuleVersions() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-    \t\t.thenReturn(device);\n-    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n-    \twhen(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-    \t\n-    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+        when(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+        when(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n-    \n+\n     @Test\n     void testUpdateFirmwareWithIncorrectFirmwareUrl() throws FunctionalException {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal Device device = this.getMockDevice(Ssld.class);\n-    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n-    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n-    \t\n-    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n-    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n-\t\t\t.thenReturn(device);\n-    \t\n-    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n-    \t\n-    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        final Device device = this.getMockDevice(Ssld.class);\n+        final FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+        firmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n+        when(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+            .thenReturn(device);\n+\n+        this.firmwareManagementService.updateFirmware(this.correlationIds, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n-    \t\n-    \tfinal SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n-    \tfinal List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n-    \t\n-    \twhen(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n-       \t\t.thenReturn(ssldPendingFirmwareUpdates);\n-    \twhen(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(ids.getCorrelationUid());\n-    \twhen(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n-    \twhen(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n-    \twhen(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n-\t\t   \tArrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n-\t\t);\n-\n-    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, ids, \"messageType\", 1, \n-    \t\t\tResponseMessageResultType.OK, null);\n-\n-    \tverifyNoInteractions(this.webServiceResponseMessageSender);\n-    \tverify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n+    void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n+        final List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n+\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n+        final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n+\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n+            .thenReturn(ssldPendingFirmwareUpdates);\n+        when(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(this.correlationIds.getCorrelationUid());\n+        when(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n+        when(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n+        when(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n+            Arrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n+        );\n+\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, this.correlationIds, \"messageType\", 1,\n+                ResponseMessageResultType.OK, null);\n+\n+        verifyNoInteractions(this.webServiceResponseMessageSender);\n+        verify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionResponseNotOk() {\n-    \tfinal CorrelationIds ids = this.getCorrelationIds();\n-    \tfinal List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n-    \t\n-    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n-    \t\t\tResponseMessageResultType.NOT_OK, null);\n+    void testHandleGetFirmwareVersionResponseNotOk() {\n+        final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n \n-    \tverify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, this.correlationIds, \"messageType\", 1,\n+                ResponseMessageResultType.NOT_OK, null);\n \n-    \tfinal ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n+        verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+\n+        final ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n \n-    \tassertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n-    \tassertThat(responseMessage.getOsgpException().getMessage())\n+        assertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n+        assertThat(responseMessage.getOsgpException().getMessage())\n                 .isEqualTo(\"Exception occurred while getting device firmware version\");\n     }\n \n     @Test\n-    public void testHandleGetFirmwareVersionErrorNotNull() {\n-        final CorrelationIds ids = this.getCorrelationIds();\n+    void testHandleGetFirmwareVersionErrorNotNull() {\n         final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n \n-        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, this.correlationIds, \"messageType\", 1,\n             ResponseMessageResultType.OK, this.defaultException);\n \n         verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n"}}, {"oid": "3ef02154cf24f58b72131a3a2c4c5489603df6b0", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3ef02154cf24f58b72131a3a2c4c5489603df6b0", "message": "Fixed identation, added constants and removed public", "committedDate": "2020-10-13T14:05:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NTk1Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r519645953", "bodyText": "constants should be static\nConstants should be all uppercase with words separated by underscores, see https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html", "author": "robindenadel", "createdAt": "2020-11-09T08:59:09Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -72,6 +82,32 @@\n     private static final String VERSION_1 = \"R01\";\n     private static final String VERSION_2 = \"R02\";\n     private static final String VERSION_3 = \"R03\";\n+\n+    private final String organisationIdentification = \"test-org\";\n+    private final String deviceIdentification = \"device-identification\";\n+    private final String correlationUid = \"correlation-uid\";\n+    private final CorrelationIds correlationIds = new CorrelationIds(this.organisationIdentification,\n+            this.deviceIdentification, this.correlationUid);\n+\n+    private final OsgpException defaultException = new OsgpException(ComponentType.DOMAIN_CORE, \"test\");", "originalCommit": "3ef02154cf24f58b72131a3a2c4c5489603df6b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87aa724a72552331335dca57c6887e040541a8a3", "chunk": "diff --git a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\nindex 56eeb14293..3f6e5085b1 100644\n--- a/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n+++ b/osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java\n\n@@ -83,13 +84,13 @@ class FirmwareManagementServiceTest {\n     private static final String VERSION_2 = \"R02\";\n     private static final String VERSION_3 = \"R03\";\n \n-    private final String organisationIdentification = \"test-org\";\n-    private final String deviceIdentification = \"device-identification\";\n-    private final String correlationUid = \"correlation-uid\";\n-    private final CorrelationIds correlationIds = new CorrelationIds(this.organisationIdentification,\n-            this.deviceIdentification, this.correlationUid);\n+    private static final String ORGANISATION_IDENTIFICATION = \"test-org\";\n+    private static final String DEVICE_IDENTIFICATION = \"device-identification\";\n+    private static final String CORRELATION_UID = \"correlation-uid\";\n+    private static final CorrelationIds CORRELATION_IDS = new CorrelationIds(ORGANISATION_IDENTIFICATION,\n+            DEVICE_IDENTIFICATION, CORRELATION_UID);\n \n-    private final OsgpException defaultException = new OsgpException(ComponentType.DOMAIN_CORE, \"test\");\n+    private static final OsgpException DEFAULT_EXCEPTION = new OsgpException(ComponentType.DOMAIN_CORE, \"test\");\n \n     @Captor\n     ArgumentCaptor<RequestMessage> requestMessageCaptor;\n"}}, {"oid": "87aa724a72552331335dca57c6887e040541a8a3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/87aa724a72552331335dca57c6887e040541a8a3", "message": "Implementing reviewed changes and tried to fix indentation errors", "committedDate": "2020-11-17T13:59:19Z", "type": "commit"}]}