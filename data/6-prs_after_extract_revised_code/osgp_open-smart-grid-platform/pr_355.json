{"pr_number": 355, "pr_title": "Slim 2077 create new secret mgmt application", "pr_createdAt": "2020-06-18T12:57:42Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/355", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NzMwOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450787308", "bodyText": "this seems confusing. Can these file ever be null?\nin case any of the files is null, the Provider does not work, correct ? RSA does not work unless both keys are in order.", "author": "coendamen", "createdAt": "2020-07-07T11:13:00Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NzU3MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450787570", "bodyText": "these can be final I think?", "author": "coendamen", "createdAt": "2020-07-07T11:13:36Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4ODc4Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450788787", "bodyText": "Why check on null if this would never be the case? consider rewriting the constructor.", "author": "coendamen", "createdAt": "2020-07-07T11:16:07Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {\n+        try {\n+            KeyFactory keyFactory = KeyFactory.getInstance(ALG);\n+\n+            if (privateKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+                PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+                privateKey = keyFactory.generatePrivate(privateKeySpec);\n+                super.setKeyFile(privateKeyStoreFile);\n+            }\n+            if (publicKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+                X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+                publicKey = keyFactory.generatePublic(publicKeySpec);\n+            }\n+        } catch (Exception e) {\n+            throw new EncrypterException(\"Something went wrong during construction of \"\n+                    + \"RsaEncryptionProvider\", e);\n+        }\n+    }\n+\n+    protected Cipher getCipher() throws javax.crypto.NoSuchPaddingException, NoSuchAlgorithmException {\n+        return Cipher.getInstance(ALGORITHM);\n+    }\n+\n+    protected Key getSecretEncryptionKey(String key, int cipherMode) {\n+        if (cipherMode == Cipher.ENCRYPT_MODE) {\n+            if (publicKey == null) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTMxMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450789312", "bodyText": "I would rewrite this into several methods:", "author": "coendamen", "createdAt": "2020-07-07T11:17:11Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {\n+        try {\n+            KeyFactory keyFactory = KeyFactory.getInstance(ALG);\n+\n+            if (privateKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+                PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+                privateKey = keyFactory.generatePrivate(privateKeySpec);\n+                super.setKeyFile(privateKeyStoreFile);\n+            }\n+            if (publicKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+                X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+                publicKey = keyFactory.generatePublic(publicKeySpec);\n+            }\n+        } catch (Exception e) {\n+            throw new EncrypterException(\"Something went wrong during construction of \"\n+                    + \"RsaEncryptionProvider\", e);\n+        }\n+    }\n+\n+    protected Cipher getCipher() throws javax.crypto.NoSuchPaddingException, NoSuchAlgorithmException {\n+        return Cipher.getInstance(ALGORITHM);\n+    }\n+\n+    protected Key getSecretEncryptionKey(String key, int cipherMode) {\n+        if (cipherMode == Cipher.ENCRYPT_MODE) {\n+            if (publicKey == null) {\n+                throw new EncrypterException(\"Cannot RSA encrypt because no public key is defined.\");\n+            }\n+            return publicKey;\n+        } else if (cipherMode == Cipher.DECRYPT_MODE) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTYxMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450789612", "bodyText": "are these constants used on other classes? If not, make private", "author": "coendamen", "createdAt": "2020-07-07T11:17:50Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MDA1NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450790054", "bodyText": "why not create a SecretKey class with a constuctor and use Lombok ?", "author": "coendamen", "createdAt": "2020-07-07T11:18:43Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";\n+    private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+    private byte[] key;\n+\n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n+    public JreEncryptionProvider(File keyStoreFile) {\n+        try {\n+            super.setKeyFile(keyStoreFile);\n+            this.key = Files.readAllBytes(Paths.get(keyStoreFile.getAbsolutePath()));\n+        } catch (IOException e) {\n+            throw new EncrypterException(\"Could not read keystore\");\n+        }\n+    }\n+\n+    protected Key getSecretEncryptionKey(String keyReference, int cipherMode) {\n+\n+        if (!keyReference.equals(DEFAULT_SINGLE_KEY_REFERENCE)) {\n+            throw new EncrypterException(\"Only keyReference '1' is valid in this implementation.\");\n+        }\n+\n+        return new SecretKey() {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nindex eb9e9df8d0..6268a9fb92 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n\n@@ -27,28 +27,28 @@ import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n \n public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n \n-    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n-    public static final String ALG = \"AES\";\n-    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n-    public static final String PROVIDER = \"SunJCE\";\n-    public static final String FORMAT = \"RAW\";\n+    private static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    private static final String ALG = \"AES\";\n+    private static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    private static final String PROVIDER = \"SunJCE\";\n+    private static final String FORMAT = \"RAW\";\n     private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n \n-    private byte[] key;\n-\n-    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n-        return Cipher.getInstance(ALGORITHM, PROVIDER);\n-    }\n+    private final byte[] key;\n \n     public JreEncryptionProvider(File keyStoreFile) {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.key = Files.readAllBytes(Paths.get(keyStoreFile.getAbsolutePath()));\n         } catch (IOException e) {\n-            throw new EncrypterException(\"Could not read keystore\");\n+            throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n     protected Key getSecretEncryptionKey(String keyReference, int cipherMode) {\n \n         if (!keyReference.equals(DEFAULT_SINGLE_KEY_REFERENCE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MDQ3NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450790474", "bodyText": "I think all these values can be private", "author": "coendamen", "createdAt": "2020-07-07T11:19:32Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nindex eb9e9df8d0..6268a9fb92 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n\n@@ -27,28 +27,28 @@ import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n \n public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n \n-    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n-    public static final String ALG = \"AES\";\n-    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n-    public static final String PROVIDER = \"SunJCE\";\n-    public static final String FORMAT = \"RAW\";\n+    private static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    private static final String ALG = \"AES\";\n+    private static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    private static final String PROVIDER = \"SunJCE\";\n+    private static final String FORMAT = \"RAW\";\n     private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n \n-    private byte[] key;\n-\n-    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n-        return Cipher.getInstance(ALGORITHM, PROVIDER);\n-    }\n+    private final byte[] key;\n \n     public JreEncryptionProvider(File keyStoreFile) {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.key = Files.readAllBytes(Paths.get(keyStoreFile.getAbsolutePath()));\n         } catch (IOException e) {\n-            throw new EncrypterException(\"Could not read keystore\");\n+            throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n     protected Key getSecretEncryptionKey(String keyReference, int cipherMode) {\n \n         if (!keyReference.equals(DEFAULT_SINGLE_KEY_REFERENCE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MTg0NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450791844", "bodyText": "I would consider creating a super constructor with the Key File instead of a setter, to make the values immutable", "author": "coendamen", "createdAt": "2020-07-07T11:22:26Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    private static final String ALGORITHM = \"AES/CBC/NoPadding\";\n+    private static final String PROVIDER = \"nCipherKM\";\n+    private static final String TYPE = \"ncipher.sworld\";\n+    private static final byte[] IV = new byte[16];\n+\n+    private KeyStore keyStore;\n+\n+    public HsmEncryptionProvider(File keyStoreFile) {\n+        try {\n+            super.setKeyFile(keyStoreFile);", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java\nindex b07f1cdd7b..50b47ff5d4 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java\n\n@@ -34,7 +34,7 @@ public class HsmEncryptionProvider extends AbstractEncryptionProvider implements\n     private static final String TYPE = \"ncipher.sworld\";\n     private static final byte[] IV = new byte[16];\n \n-    private KeyStore keyStore;\n+    private final KeyStore keyStore;\n \n     public HsmEncryptionProvider(File keyStoreFile) {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MjMxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450792313", "bodyText": "this else could be removed, just return false.", "author": "coendamen", "createdAt": "2020-07-07T11:23:28Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+\n+    protected abstract Cipher getCipher()\n+            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+\n+    public void setKeyFile(File keyFile) {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not encrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n+\n+        if (secret.getType() != this.getType()) {\n+            throw new EncrypterException(\n+                    \"EncryptionProvider for type \" + this.getType().name() + \" cannot decrypt secrets of type \"\n+                            + secret.getType().name());\n+        }\n+\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.DECRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.DECRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            final byte[] decryptedData = cipher.doFinal(secret.getSecret());\n+\n+            if (this.checkNullBytesPrepended(decryptedData)) {\n+                return new Secret(Arrays.copyOfRange(decryptedData, BLOCK_SIZE, decryptedData.length));\n+            } else {\n+                return new Secret(decryptedData);\n+            }\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not decrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    private boolean checkNullBytesPrepended(final byte[] bytes) {\n+        if (bytes.length > BLOCK_SIZE) {\n+            for (short s = 0; s < BLOCK_SIZE; s++) {\n+                if (bytes[s] != 0) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        } else {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\nindex 57084c5361..4c7378d2c8 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n\n@@ -31,14 +31,13 @@ public abstract class AbstractEncryptionProvider {\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher()\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+    protected abstract Cipher getCipher() throws EncrypterException;\n \n     protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n \n     protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n \n-    public void setKeyFile(File keyFile) {\n+    protected void setKeyFile(File keyFile) {\n         this.keyFile = keyFile;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MjU1Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450792552", "bodyText": "remove?", "author": "coendamen", "createdAt": "2020-07-07T11:23:57Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+\n+    protected abstract Cipher getCipher()\n+            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+\n+    public void setKeyFile(File keyFile) {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not encrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n+\n+        if (secret.getType() != this.getType()) {\n+            throw new EncrypterException(\n+                    \"EncryptionProvider for type \" + this.getType().name() + \" cannot decrypt secrets of type \"\n+                            + secret.getType().name());\n+        }\n+\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.DECRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.DECRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            final byte[] decryptedData = cipher.doFinal(secret.getSecret());\n+\n+            if (this.checkNullBytesPrepended(decryptedData)) {\n+                return new Secret(Arrays.copyOfRange(decryptedData, BLOCK_SIZE, decryptedData.length));\n+            } else {\n+                return new Secret(decryptedData);\n+            }\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\nindex 57084c5361..4c7378d2c8 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n\n@@ -31,14 +31,13 @@ public abstract class AbstractEncryptionProvider {\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher()\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+    protected abstract Cipher getCipher() throws EncrypterException;\n \n     protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n \n     protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n \n-    public void setKeyFile(File keyFile) {\n+    protected void setKeyFile(File keyFile) {\n         this.keyFile = keyFile;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5Mjk3MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450792970", "bodyText": "remove ?", "author": "coendamen", "createdAt": "2020-07-07T11:24:48Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+\n+    protected abstract Cipher getCipher()\n+            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+\n+    public void setKeyFile(File keyFile) {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\nindex 57084c5361..4c7378d2c8 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n\n@@ -31,14 +31,13 @@ public abstract class AbstractEncryptionProvider {\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher()\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+    protected abstract Cipher getCipher() throws EncrypterException;\n \n     protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n \n     protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n \n-    public void setKeyFile(File keyFile) {\n+    protected void setKeyFile(File keyFile) {\n         this.keyFile = keyFile;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NDE2Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450794163", "bodyText": "why not use the Secret class here? it already has the byte array", "author": "coendamen", "createdAt": "2020-07-07T11:27:15Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptedSecret.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+/**\n+ * Secret class to store any binary encrypted secret. The secret can be anything.\n+ * A secret contains the type of encryption provider that was used to encrypt it.\n+ * There is no encoding/decoding.\n+ */\n+public class EncryptedSecret {\n+    private final byte[] secret;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptedSecret.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptedSecret.java\nindex 893dd1abb0..3c4df1bc53 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptedSecret.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptedSecret.java\n\n@@ -14,12 +14,12 @@ package org.opensmartgridplatform.shared.security;\n  * There is no encoding/decoding.\n  */\n public class EncryptedSecret {\n-    private final byte[] secret;\n+    private final Secret secret;\n     private final EncryptionProviderType type;\n \n-    public EncryptedSecret(final EncryptionProviderType type, final byte[] secret) {\n+    public EncryptedSecret(final EncryptionProviderType type, final byte[] secretBytes) {\n         this.type = type;\n-        this.secret = secret;\n+        this.secret = new Secret(secretBytes);\n     }\n \n     public EncryptionProviderType getType() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NDcxMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450794712", "bodyText": "I think this line and the next can be combined into one.", "author": "coendamen", "createdAt": "2020-07-07T11:28:28Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.providers.EncryptionProvider;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+@Component\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers;\n+\n+    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {\n+        this.providers = Arrays.asList(encryptionProviders);\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(\n+            final EncryptionProviderType encryptionProviderType, final Secret secret, final String keyReference) {\n+        final Optional<EncryptionProvider> oep = this.providers.stream().filter(\n+                ep -> ep.getType().equals(encryptionProviderType)).findFirst();\n+\n+        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).encrypt(secret, keyReference);\n+    }\n+\n+    @Override\n+    public Secret decrypt(final EncryptedSecret secret, final String keyReference) {\n+        final EncryptionProviderType encType = secret.getType();\n+        final Optional<EncryptionProvider> oep = this.providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\nindex ecfdddc866..c7d8dd4bdc 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\n\n@@ -22,27 +22,24 @@ import org.springframework.stereotype.Component;\n @Component\n public class DefaultEncryptionDelegate implements EncryptionDelegate {\n \n+    private static final String ERROR_NO_PROVIDER = \"Could not find a provider\";\n     private final List<EncryptionProvider> providers;\n \n-    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {\n-        this.providers = Arrays.asList(encryptionProviders);\n+    public DefaultEncryptionDelegate(final List<EncryptionProvider> encryptionProviders) {\n+        this.providers = encryptionProviders;\n     }\n \n     @Override\n-    public EncryptedSecret encrypt(\n-            final EncryptionProviderType encryptionProviderType, final Secret secret, final String keyReference) {\n-        final Optional<EncryptionProvider> oep = this.providers.stream().filter(\n-                ep -> ep.getType().equals(encryptionProviderType)).findFirst();\n-\n-        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).encrypt(secret, keyReference);\n+    public EncryptedSecret encrypt(final EncryptionProviderType encryptionProviderType, final Secret secret,\n+            final String keyReference) {\n+        return this.providers.stream().filter(ep -> ep.getType().equals(encryptionProviderType)).findFirst().orElseThrow(\n+                () -> new EncrypterException(ERROR_NO_PROVIDER)).encrypt(secret, keyReference);\n     }\n \n     @Override\n     public Secret decrypt(final EncryptedSecret secret, final String keyReference) {\n-        final EncryptionProviderType encType = secret.getType();\n-        final Optional<EncryptionProvider> oep = this.providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-\n-        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).decrypt(secret, keyReference);\n+        return this.providers.stream().filter(ep -> ep.getType().equals(secret.getType())).findFirst().orElseThrow(\n+                () -> new EncrypterException(ERROR_NO_PROVIDER)).decrypt(secret, keyReference);\n     }\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NTAxMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450795012", "bodyText": "could be one liner", "author": "coendamen", "createdAt": "2020-07-07T11:29:05Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.providers.EncryptionProvider;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+@Component\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers;\n+\n+    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {\n+        this.providers = Arrays.asList(encryptionProviders);\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(\n+            final EncryptionProviderType encryptionProviderType, final Secret secret, final String keyReference) {\n+        final Optional<EncryptionProvider> oep = this.providers.stream().filter(\n+                ep -> ep.getType().equals(encryptionProviderType)).findFirst();\n+\n+        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).encrypt(secret, keyReference);", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\nindex ecfdddc866..c7d8dd4bdc 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\n\n@@ -22,27 +22,24 @@ import org.springframework.stereotype.Component;\n @Component\n public class DefaultEncryptionDelegate implements EncryptionDelegate {\n \n+    private static final String ERROR_NO_PROVIDER = \"Could not find a provider\";\n     private final List<EncryptionProvider> providers;\n \n-    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {\n-        this.providers = Arrays.asList(encryptionProviders);\n+    public DefaultEncryptionDelegate(final List<EncryptionProvider> encryptionProviders) {\n+        this.providers = encryptionProviders;\n     }\n \n     @Override\n-    public EncryptedSecret encrypt(\n-            final EncryptionProviderType encryptionProviderType, final Secret secret, final String keyReference) {\n-        final Optional<EncryptionProvider> oep = this.providers.stream().filter(\n-                ep -> ep.getType().equals(encryptionProviderType)).findFirst();\n-\n-        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).encrypt(secret, keyReference);\n+    public EncryptedSecret encrypt(final EncryptionProviderType encryptionProviderType, final Secret secret,\n+            final String keyReference) {\n+        return this.providers.stream().filter(ep -> ep.getType().equals(encryptionProviderType)).findFirst().orElseThrow(\n+                () -> new EncrypterException(ERROR_NO_PROVIDER)).encrypt(secret, keyReference);\n     }\n \n     @Override\n     public Secret decrypt(final EncryptedSecret secret, final String keyReference) {\n-        final EncryptionProviderType encType = secret.getType();\n-        final Optional<EncryptionProvider> oep = this.providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-\n-        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).decrypt(secret, keyReference);\n+        return this.providers.stream().filter(ep -> ep.getType().equals(secret.getType())).findFirst().orElseThrow(\n+                () -> new EncrypterException(ERROR_NO_PROVIDER)).decrypt(secret, keyReference);\n     }\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NTMxMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450795311", "bodyText": "why is this an array parameter and not a List ?", "author": "coendamen", "createdAt": "2020-07-07T11:29:41Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.providers.EncryptionProvider;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+@Component\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers;\n+\n+    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\nindex ecfdddc866..c7d8dd4bdc 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java\n\n@@ -22,27 +22,24 @@ import org.springframework.stereotype.Component;\n @Component\n public class DefaultEncryptionDelegate implements EncryptionDelegate {\n \n+    private static final String ERROR_NO_PROVIDER = \"Could not find a provider\";\n     private final List<EncryptionProvider> providers;\n \n-    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {\n-        this.providers = Arrays.asList(encryptionProviders);\n+    public DefaultEncryptionDelegate(final List<EncryptionProvider> encryptionProviders) {\n+        this.providers = encryptionProviders;\n     }\n \n     @Override\n-    public EncryptedSecret encrypt(\n-            final EncryptionProviderType encryptionProviderType, final Secret secret, final String keyReference) {\n-        final Optional<EncryptionProvider> oep = this.providers.stream().filter(\n-                ep -> ep.getType().equals(encryptionProviderType)).findFirst();\n-\n-        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).encrypt(secret, keyReference);\n+    public EncryptedSecret encrypt(final EncryptionProviderType encryptionProviderType, final Secret secret,\n+            final String keyReference) {\n+        return this.providers.stream().filter(ep -> ep.getType().equals(encryptionProviderType)).findFirst().orElseThrow(\n+                () -> new EncrypterException(ERROR_NO_PROVIDER)).encrypt(secret, keyReference);\n     }\n \n     @Override\n     public Secret decrypt(final EncryptedSecret secret, final String keyReference) {\n-        final EncryptionProviderType encType = secret.getType();\n-        final Optional<EncryptionProvider> oep = this.providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-\n-        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).decrypt(secret, keyReference);\n+        return this.providers.stream().filter(ep -> ep.getType().equals(secret.getType())).findFirst().orElseThrow(\n+                () -> new EncrypterException(ERROR_NO_PROVIDER)).decrypt(secret, keyReference);\n     }\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NzY3Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450797676", "bodyText": "I don't think you need this qualifier, there is only one bean named SecretManagementService", "author": "coendamen", "createdAt": "2020-07-07T11:34:33Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java", "diffHunk": "@@ -28,12 +28,14 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n \n public class Lls1Connector extends SecureDlmsConnector {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(Lls1Connector.class);\n \n     @Autowired\n+    @Qualifier(\"secretManagementService\")", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5ODA0Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450798043", "bodyText": "move this autowired to constructor injection.", "author": "coendamen", "createdAt": "2020-07-07T11:35:16Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java", "diffHunk": "@@ -28,12 +28,14 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n \n public class Lls1Connector extends SecureDlmsConnector {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(Lls1Connector.class);\n \n     @Autowired", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5ODgxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450798813", "bodyText": "I don;t understand why the class is SecurityKeyService, why not inject the SecretManagementService ?", "author": "coendamen", "createdAt": "2020-07-07T11:36:49Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java", "diffHunk": "@@ -44,6 +45,7 @@\n     private final RecoverKeyProcessInitiator recoverKeyProcessInitiator;\n \n     @Autowired\n+    @Qualifier(\"secretManagementService\")\n     private SecurityKeyService securityKeyService;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5OTE2NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450799164", "bodyText": "change to constructor injection", "author": "coendamen", "createdAt": "2020-07-07T11:37:31Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -57,6 +58,7 @@\n     }\n \n     @Autowired\n+    @Qualifier(\"secretManagementService\")\n     private SecurityKeyService securityKeyService;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5OTUzOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450799539", "bodyText": "@slf4j", "author": "coendamen", "createdAt": "2020-07-07T11:38:21Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n+\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+\n+/**\n+ * SOAP Client for SecretManagement\n+ */\n+@Component\n+public class SecretManagementClient {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementClient.class);\n+\n+    private final WebServiceTemplate webServiceTemplate;\n+\n+    SecretManagementClient(WebServiceTemplate webServiceTemplate) {\n+        this.webServiceTemplate = webServiceTemplate;\n+    }\n+\n+    public GetSecretsResponse getSecretsRequest(GetSecretsRequest request) {\n+\n+        LOGGER.info(\"Calling SecretManagement.getSecretsRequest over SOAP for device {}\", request.getDeviceId());", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\nindex d54079a3b2..362c5e30ff 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\n\n@@ -1,12 +1,11 @@\n package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.NotImplementedException;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n import org.springframework.ws.client.core.WebServiceTemplate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMDgyNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450800824", "bodyText": "dit kom meerdere keren voor. dit moet allemaal veranderen in SecretManagementService injection, die qualifier kan weg", "author": "coendamen", "createdAt": "2020-07-07T11:40:42Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java", "diffHunk": "@@ -39,6 +40,7 @@\n     private InstallationMapper installationMapper;\n \n     @Autowired\n+    @Qualifier(\"secretManagementService\")\n     private SecurityKeyService securityKeyService;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTE4Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450801182", "bodyText": "formatting not applied ?", "author": "coendamen", "createdAt": "2020-07-07T11:41:20Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n+\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex 40ef0f7ee5..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -9,17 +9,18 @@ import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.Secr\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTI3Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450801277", "bodyText": "params kunnen final zijn", "author": "coendamen", "createdAt": "2020-07-07T11:41:29Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n+\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex 40ef0f7ee5..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -9,17 +9,18 @@ import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.Secr\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTMzMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450801331", "bodyText": "final ?", "author": "coendamen", "createdAt": "2020-07-07T11:41:35Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex 40ef0f7ee5..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -9,17 +9,18 @@ import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.Secr\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTY0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450801648", "bodyText": "dit hoeft niet, de naam is al goed. het is al secretManagementService", "author": "coendamen", "createdAt": "2020-07-07T11:42:09Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex 40ef0f7ee5..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -9,17 +9,18 @@ import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.Secr\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMjQyNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450802426", "bodyText": "use @slf4j", "author": "coendamen", "createdAt": "2020-07-07T11:43:47Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n+\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {\n+        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+        this.secretManagementClient = secretManagementClient;\n+    }\n+\n+    @Override\n+    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] getDlmsMasterKey(String deviceIdentification) {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n+\n+        try {\n+            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification, SecretType.E_METER_AUTHENTICATION_KEY);\n+            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n+            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response, SecretType.E_METER_AUTHENTICATION_KEY);\n+\n+            return decryptSoapSecret(deviceIdentification,\n+                    optionalTypedSecret.orElseThrow(()->new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+        }\n+        catch(Exception e) {\n+            LOGGER.error(\"Error while retrieving authentication key\", e);\n+        }\n+        return new byte[0];\n+    }\n+\n+    @Override\n+    public byte[] getDlmsGlobalUnicastEncryptionKey(String deviceIdentification) {\n+\n+        try {\n+            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification, SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n+            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n+            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response, SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n+\n+            return decryptSoapSecret(deviceIdentification,\n+                    optionalTypedSecret.orElseThrow(()->new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+        }\n+        catch(Exception e) {\n+            LOGGER.error(\"Error while retrieving encryption key\", e);", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex 40ef0f7ee5..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -9,17 +9,18 @@ import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.Secr\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMzQxNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450803415", "bodyText": "dit is obscuur IMO, je gooit de optional met een elseThrow mee als parameter. Ik zou dit iets explicieter maken door een ifPresent oid te schrijven", "author": "coendamen", "createdAt": "2020-07-07T11:45:44Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n+\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {\n+        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+        this.secretManagementClient = secretManagementClient;\n+    }\n+\n+    @Override\n+    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] getDlmsMasterKey(String deviceIdentification) {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n+\n+        try {\n+            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification, SecretType.E_METER_AUTHENTICATION_KEY);\n+            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n+            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response, SecretType.E_METER_AUTHENTICATION_KEY);\n+\n+            return decryptSoapSecret(deviceIdentification,\n+                    optionalTypedSecret.orElseThrow(()->new IllegalStateException(\"Secret not found:\" + deviceIdentification)));", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex 40ef0f7ee5..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -9,17 +9,18 @@ import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.Secr\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNTg4Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450805883", "bodyText": "SOME_DEVICE zou constant kunnen zijn", "author": "coendamen", "createdAt": "2020-07-07T11:50:44Z", "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class SecretManagementServiceTest {\n+    SecretManagementService service;\n+\n+    @Mock\n+    EncryptionDelegate encryptionDelegate;\n+    @Mock\n+    DbEncryptedSecretRepository secretRepository;\n+    @Mock\n+    DbEncryptionKeyRepository keyRepository;\n+\n+    @BeforeEach\n+    public void setHsmEncryption() {\n+        this.service = new SecretManagementService(this.encryptionDelegate, EncryptionProviderType.HSM,\n+                this.secretRepository, this.keyRepository);\n+    }\n+\n+    @Test\n+    public void retrieveSecrets() throws Exception {\n+        //GIVEN\n+        final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n+        final DbEncryptedSecret secret = new DbEncryptedSecret();\n+        secret.setSecretType(SecretType.E_METER_MASTER_KEY);\n+        secret.setEncryptionKeyReference(keyReference);\n+        final Secret decryptedSecret = new Secret(\"secret\".getBytes());\n+\n+        //WHEN\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(1L);\n+        when(this.secretRepository.findById(any())).thenReturn(Optional.of(secret));\n+        when(this.encryptionDelegate.decrypt(any(), any())).thenReturn(decryptedSecret);\n+        final List<TypedSecret> typedSecrets = this.service.retrieveSecrets(\"SOME_DEVICE\",\n+                Arrays.asList(SecretType.E_METER_MASTER_KEY));\n+\n+        //THEN\n+        assertThat(typedSecrets).isNotNull();\n+        assertThat(typedSecrets.size()).isEqualTo(1);\n+        final TypedSecret typedSecret = typedSecrets.get(0);\n+        assertThat(typedSecret.getSecret()).isEqualTo(HexUtils.toHexString(\"secret\".getBytes()));\n+        assertThat(typedSecret.getSecretType()).isEqualTo(SecretType.E_METER_MASTER_KEY);\n+    }\n+\n+    @Test\n+    public void retrieveSecrets_decryptionError() {\n+        //GIVEN\n+        final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n+        final DbEncryptedSecret secret = new DbEncryptedSecret();\n+        secret.setSecretType(SecretType.E_METER_MASTER_KEY);\n+        secret.setEncryptionKeyReference(keyReference);\n+\n+        //WHEN\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(1L);\n+        when(this.secretRepository.findById(1L)).thenReturn(Optional.of(secret));\n+        when(this.encryptionDelegate.decrypt(any(), any())).thenThrow(new RuntimeException(\"Decryption error\"));\n+\n+        //THEN\n+        assertThatIllegalStateException().isThrownBy(\n+                () -> this.service.retrieveSecrets(\"SOME_DEVICE\", Arrays.asList(SecretType.E_METER_MASTER_KEY)));\n+    }\n+\n+    @Test\n+    public void retrieveSecrets_secretWithoutKey() {\n+        final DbEncryptedSecret secret = new DbEncryptedSecret();\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(1L);\n+        when(this.secretRepository.findById(1L)).thenReturn(Optional.of(secret));\n+        assertThatIllegalStateException().isThrownBy(\n+                () -> this.service.retrieveSecrets(\"SOME_DEVICE\", Arrays.asList(SecretType.E_METER_MASTER_KEY)));\n+    }\n+\n+    @Test\n+    public void retrieveSecrets_noSecrets() {\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n+        assertThatIllegalStateException().isThrownBy(\n+                () -> this.service.retrieveSecrets(\"SOME_DEVICE\", Arrays.asList(SecretType.E_METER_MASTER_KEY)));\n+    }\n+\n+    @Test\n+    public void storeSecrets() throws Exception {\n+        //GIVEN\n+        final TypedSecret typedSecret = new TypedSecret();\n+        typedSecret.setSecretType(SecretType.E_METER_MASTER_KEY);\n+        typedSecret.setSecret(HexUtils.toHexString(\"$3cr3t\".getBytes()));\n+        final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n+        keyReference.setEncryptionProviderType(EncryptionProviderType.JRE);\n+        keyReference.setReference(\"keyReferenceString\");\n+        final EncryptedSecret encryptedSecret = new EncryptedSecret(EncryptionProviderType.JRE, \"$3cr3t\".getBytes());\n+        final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+\n+        //WHEN\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n+        when(this.keyRepository.findByTypeAndValid(any(), any(), any())).thenReturn(\n+                new PageImpl<>(Arrays.asList(keyReference)));\n+        when(this.encryptionDelegate.encrypt(any(), any(), anyString())).thenReturn(encryptedSecret);\n+        this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret));\n+        //THEN\n+        final ArgumentCaptor<DbEncryptedSecret> secretArgumentCaptor = ArgumentCaptor.forClass(DbEncryptedSecret.class);\n+        verify(this.secretRepository).save(secretArgumentCaptor.capture());\n+        final DbEncryptedSecret savedSecret = secretArgumentCaptor.getValue();\n+        assertThat(savedSecret).isNotNull();\n+        assertThat(savedSecret.getDeviceIdentification()).isEqualTo(\"SOME_DEVICE\");", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java b/osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java\nindex baebb95835..09585139d8 100644\n--- a/osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java\n+++ b/osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java\n\n@@ -45,14 +45,17 @@ import org.springframework.data.domain.PageImpl;\n \n @ExtendWith(MockitoExtension.class)\n public class SecretManagementServiceTest {\n-    SecretManagementService service;\n+\n+    private static final String SOME_DEVICE = \"SOME_DEVICE\";\n+\n+    private SecretManagementService service;\n \n     @Mock\n-    EncryptionDelegate encryptionDelegate;\n+    private EncryptionDelegate encryptionDelegate;\n     @Mock\n-    DbEncryptedSecretRepository secretRepository;\n+    private DbEncryptedSecretRepository secretRepository;\n     @Mock\n-    DbEncryptionKeyRepository keyRepository;\n+    private DbEncryptionKeyRepository keyRepository;\n \n     @BeforeEach\n     public void setHsmEncryption() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNjY1Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450806657", "bodyText": "minor: could all be private", "author": "coendamen", "createdAt": "2020-07-07T11:52:06Z", "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class SecretManagementServiceTest {\n+    SecretManagementService service;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java b/osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java\nindex baebb95835..09585139d8 100644\n--- a/osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java\n+++ b/osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java\n\n@@ -45,14 +45,17 @@ import org.springframework.data.domain.PageImpl;\n \n @ExtendWith(MockitoExtension.class)\n public class SecretManagementServiceTest {\n-    SecretManagementService service;\n+\n+    private static final String SOME_DEVICE = \"SOME_DEVICE\";\n+\n+    private SecretManagementService service;\n \n     @Mock\n-    EncryptionDelegate encryptionDelegate;\n+    private EncryptionDelegate encryptionDelegate;\n     @Mock\n-    DbEncryptedSecretRepository secretRepository;\n+    private DbEncryptedSecretRepository secretRepository;\n     @Mock\n-    DbEncryptionKeyRepository keyRepository;\n+    private DbEncryptionKeyRepository keyRepository;\n \n     @BeforeEach\n     public void setHsmEncryption() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwOTYyNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450809625", "bodyText": "what could go wrong here?", "author": "coendamen", "createdAt": "2020-07-07T11:58:01Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwOTkwMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450809902", "bodyText": "could be rewritten with Optional?", "author": "coendamen", "createdAt": "2020-07-07T11:58:35Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\n+                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+        }\n+    }\n+\n+    @java.lang.SuppressWarnings(\"squid:S3655\")\n+    public TypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n+        final Date now = new Date();\n+        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n+                now);\n+        if (secretId == null) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxMDM2Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450810363", "bodyText": "this seems strange, why do a null check here?\nconsider doing the null check in the caller, that is much clearer.", "author": "coendamen", "createdAt": "2020-07-07T11:59:33Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\n+                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+        }\n+    }\n+\n+    @java.lang.SuppressWarnings(\"squid:S3655\")\n+    public TypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n+        final Date now = new Date();\n+        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n+                now);\n+        if (secretId == null) {\n+            throw new NoSuchElementException(\"No secret found with a valid key\");\n+        }\n+        return this.getTypedSecret(this.secretRepository.findById(secretId).get());\n+    }\n+\n+    private TypedSecret getTypedSecret(final DbEncryptedSecret dbEncryptedSecret) {\n+        if (dbEncryptedSecret != null) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxMTExNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450811116", "bodyText": "and another null check?\nconsider validating the DbEncryptedSecret  first before calling this method", "author": "coendamen", "createdAt": "2020-07-07T12:00:53Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\n+                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+        }\n+    }\n+\n+    @java.lang.SuppressWarnings(\"squid:S3655\")\n+    public TypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n+        final Date now = new Date();\n+        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n+                now);\n+        if (secretId == null) {\n+            throw new NoSuchElementException(\"No secret found with a valid key\");\n+        }\n+        return this.getTypedSecret(this.secretRepository.findById(secretId).get());\n+    }\n+\n+    private TypedSecret getTypedSecret(final DbEncryptedSecret dbEncryptedSecret) {\n+        if (dbEncryptedSecret != null) {\n+            final DbEncryptionKeyReference keyReference = dbEncryptedSecret.getEncryptionKeyReference();\n+            if (keyReference == null) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxMjYyNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450812627", "bodyText": "I see many IllegalStateExceptions, although it is easy/handy to throw just a RuntimeException I would suggest to make a proper Checked Exception to make it more explicit where it can go wrong and improved exception handling.", "author": "coendamen", "createdAt": "2020-07-07T12:03:37Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\n+                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+        }\n+    }\n+\n+    @java.lang.SuppressWarnings(\"squid:S3655\")\n+    public TypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n+        final Date now = new Date();\n+        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n+                now);\n+        if (secretId == null) {\n+            throw new NoSuchElementException(\"No secret found with a valid key\");\n+        }\n+        return this.getTypedSecret(this.secretRepository.findById(secretId).get());\n+    }\n+\n+    private TypedSecret getTypedSecret(final DbEncryptedSecret dbEncryptedSecret) {\n+        if (dbEncryptedSecret != null) {\n+            final DbEncryptionKeyReference keyReference = dbEncryptedSecret.getEncryptionKeyReference();\n+            if (keyReference == null) {\n+                throw new IllegalStateException(\"Could not create encrypted secret: secret has no key reference\");\n+            }\n+            final byte[] secretBytes = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            final EncryptedSecret encryptedSecret = new EncryptedSecret(keyReference.getEncryptionProviderType(),\n+                    secretBytes);\n+            return this.createTypedSecret(dbEncryptedSecret, keyReference, encryptedSecret);\n+        } else {    //Should never happen because of stream mapping in retrieveSecrets()\n+            throw new IllegalStateException(\"Could not create typed secret for NULL secret\");\n+        }\n+    }\n+\n+    private TypedSecret createTypedSecret(final DbEncryptedSecret dbEncryptedSecret,\n+            final DbEncryptionKeyReference keyReference, final EncryptedSecret encryptedSecret) {\n+        try {\n+            final Secret decryptedSecret = this.encryptionDelegate.decrypt(encryptedSecret,\n+                    keyReference.getReference());\n+            final TypedSecret typedSecret = new TypedSecret();\n+            typedSecret.setSecret(HexUtils.toHexString(decryptedSecret.getSecret()));\n+            typedSecret.setSecretType(dbEncryptedSecret.getSecretType());\n+            return typedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not decrypt secret (id: \" + dbEncryptedSecret.getId() + \")\", exc);", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxMzk4Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450813987", "bodyText": "I would rewrite this into a constructor to make data immutable.\nalso it is much less lines. just return new DbEncryptedSecret(value1, value2) etc", "author": "coendamen", "createdAt": "2020-07-07T12:06:11Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNTYwOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450815608", "bodyText": "where is the NoSuchElementException exception thrown?", "author": "coendamen", "createdAt": "2020-07-07T12:09:35Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNjIyMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450816220", "bodyText": "I would rewrite this to make it clearer", "author": "coendamen", "createdAt": "2020-07-07T12:10:35Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNjk3Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450816977", "bodyText": "this annotation is not needed", "author": "coendamen", "createdAt": "2020-07-07T12:11:58Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNzcyMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450817722", "bodyText": "possible NPE's here?", "author": "coendamen", "createdAt": "2020-07-07T12:13:07Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n+            }\n+            if (technicalFault.getInnerException() != null) {\n+                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            }\n+        }\n+    }\n+\n+    private TechnicalFault convert(final TechnicalException ex) {\n+        if (ex == null) {\n+            return null;\n+        }\n+        final TechnicalFault destination = new TechnicalFault();\n+        destination.setComponent(ex.getComponentType().name());\n+        destination.setMessage(ex.getMessage());\n+        if (ex.getCause() != null) {\n+            destination.setInnerException(ex.getCause().getClass().getName());", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\nindex ad9aaef645..9c7bf34058 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n\n@@ -20,41 +20,20 @@ public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExc\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        SoapFaultDetail detail = fault.addFaultDetail();\n+\n+        if (ex.getMessage() != null) {\n+            detail.addFaultDetailElement(MESSAGE).addText(ex.getMessage());\n+        }\n+\n         if (ex instanceof TechnicalException) {\n-            TechnicalFault technicalFault = convert((TechnicalException) ex);\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) {\n-                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            }\n-            if (technicalFault.getComponent() != null) {\n-                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            }\n-            if (technicalFault.getInnerMessage() != null) {\n-                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            }\n-            if (technicalFault.getInnerException() != null) {\n-                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            if (((TechnicalException) ex).getComponentType().name() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(((TechnicalException) ex).getComponentType().name());\n             }\n         }\n     }\n \n-    private TechnicalFault convert(final TechnicalException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        final TechnicalFault destination = new TechnicalFault();\n-        destination.setComponent(ex.getComponentType().name());\n-        destination.setMessage(ex.getMessage());\n-        if (ex.getCause() != null) {\n-            destination.setInnerException(ex.getCause().getClass().getName());\n-            destination.setInnerMessage(ex.getCause().getMessage());\n-        }\n-\n-        return destination;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxODkzMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450818930", "bodyText": "you could use Stream().map() here", "author": "coendamen", "createdAt": "2020-07-07T12:15:15Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList =\n+                soapSecretTypes.getSecretType();\n+        List<SecretType> secretTypeList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.SecretType soapSecretType :", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\nindex b97dbaa3e9..5c81e0d9e9 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n\n@@ -29,7 +29,7 @@ import java.util.List;\n public class SoapEndpointDataTypeConverter {\n \n     private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-    private EncryptionDelegate encryptionDelegate;\n+    private final EncryptionDelegate encryptionDelegate;\n \n     public SoapEndpointDataTypeConverter(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxOTI2Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450819267", "bodyText": "could use Stream().map()", "author": "coendamen", "createdAt": "2020-07-07T12:15:46Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList =\n+                soapSecretTypes.getSecretType();\n+        List<SecretType> secretTypeList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.SecretType soapSecretType :\n+                soapSecretTypeList) {\n+            SecretType secretType = convertToSecretType(soapSecretType);\n+            secretTypeList.add(secretType);\n+        }\n+\n+        return secretTypeList;\n+    }\n+\n+    public List<TypedSecret> convertToTypedSecrets(TypedSecrets soapTypedSecrets) throws OsgpException {\n+\n+        if (soapTypedSecrets == null) {\n+            throw new TechnicalException(\"Missing input: typed secrets\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret> soapTypedSecretsList\n+                = soapTypedSecrets.getTypedSecret();\n+        List<TypedSecret> typedSecretList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret soapTypedSecret :", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\nindex b97dbaa3e9..5c81e0d9e9 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n\n@@ -29,7 +29,7 @@ import java.util.List;\n public class SoapEndpointDataTypeConverter {\n \n     private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-    private EncryptionDelegate encryptionDelegate;\n+    private final EncryptionDelegate encryptionDelegate;\n \n     public SoapEndpointDataTypeConverter(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMDA2Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450820066", "bodyText": "I would keep the endpoint as thin as possible and move away the \"secrets\"code to the service.", "author": "coendamen", "createdAt": "2020-07-07T12:17:15Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        log.trace(request.toString());\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(request.getSecretTypes());", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\nindex d0deee67d7..db9aab1d6d 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n\n@@ -10,28 +10,31 @@ package org.opensmartgridplatform.secretmanagement.application.endpoints;\n \n import java.util.List;\n \n-import lombok.extern.slf4j.Slf4j;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.config.SecretManagementInitializer;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.ws.server.endpoint.annotation.Endpoint;\n import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n \n @Endpoint\n-@Slf4j\n public class SecretManagementEndpoint {\n \n+    Logger logger = LoggerFactory.getLogger(SecretManagementInitializer.class);\n+\n     private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n             + \".org/schemas/security/secretmanagement/2020/05\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMTIxOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450821218", "bodyText": "why is this class prepended with Db (I understand why, but it is not standard to the rest of the app).\nConsider changing to EncryptionKeyReference, then you also do not need the name attribute of @table", "author": "coendamen", "createdAt": "2020-07-07T12:19:30Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+@Entity\n+@Table(name = \"encryption_key_reference\")\n+@Getter\n+@Setter\n+public class DbEncryptionKeyReference {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae1f1686574dd3072ce1307d9629ab84b0d6e95d", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java\nindex 9fe4dff042..ace84bf792 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java\n\n@@ -32,14 +32,14 @@ public class DbEncryptionKeyReference {\n     @SequenceGenerator(name = \"encryption_key_seq_gen\", sequenceName = \"encryption_key_reference_id_seq\",\n             allocationSize = 1)\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"encryption_key_seq_gen\")\n-    Long id;\n-    Date creationTime;\n-    Date modificationTime;\n-    Long version; //for optimistic locking\n+    private Long id;\n+    private Date creationTime;\n+    private Date modificationTime;\n+    private Long version; //for optimistic locking\n     @Enumerated(EnumType.STRING)\n-    EncryptionProviderType encryptionProviderType;\n-    String reference;\n-    Date validFrom;\n-    Date validTo;\n-    String modifiedBy;\n+    private EncryptionProviderType encryptionProviderType;\n+    private String reference;\n+    private Date validFrom;\n+    private Date validTo;\n+    private String modifiedBy;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMTc3NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450821774", "bodyText": "remove the Db and name attributes from the annotation", "author": "coendamen", "createdAt": "2020-07-07T12:20:35Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Encrypted secret, which should not be mutated, because modifications should result in a new version (record in the\n+ * DB). Historic entries remain in the DB table and the current secret should be determined via a query on creationTime.\n+ */\n+@Entity\n+@Table(name = \"encrypted_secret\")\n+@Getter\n+@Setter\n+public class DbEncryptedSecret {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae1f1686574dd3072ce1307d9629ab84b0d6e95d", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java\nindex 6cb8e5873d..489e2459d7 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java\n\n@@ -35,12 +35,12 @@ public class DbEncryptedSecret {\n     @Id\n     @SequenceGenerator(name = \"encrypted_secret_seq_gen\", sequenceName = \"encrypted_secret_id_seq\", allocationSize = 1)\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"encrypted_secret_seq_gen\")\n-    Long id;\n-    Date creationTime;\n-    String deviceIdentification;\n+    private Long id;\n+    private Date creationTime;\n+    private String deviceIdentification;\n     @Enumerated(EnumType.STRING)\n-    SecretType secretType;\n-    String encodedSecret;\n+    private SecretType secretType;\n+    private String encodedSecret;\n     @ManyToOne\n-    DbEncryptionKeyReference encryptionKeyReference;\n+    private DbEncryptionKeyReference encryptionKeyReference;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMzIyOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450823228", "bodyText": "is this possible? for RSA you need both the public key and the private key, They should never be able to be null.\nI would rewrite this to fail the deployment / startup when any of the keys is null. Or not create this Provider at all if the provider can be absent", "author": "coendamen", "createdAt": "2020-07-07T12:23:21Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.shared.security.DefaultEncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.providers.EncryptionProvider;\n+import org.opensmartgridplatform.shared.security.providers.HsmEncryptionProvider;\n+import org.opensmartgridplatform.shared.security.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+\n+@Configuration\n+public class SecurityConfig {\n+\n+    @Value(\"${soap.public.key.resource:#{null}}\")\n+    private Optional<Resource> soapPublicKeyResource;\n+\n+    @Value(\"${soap.private.key.resource:#{null}}\")\n+    private Optional<Resource> soapPrivateKeyResource;\n+\n+    @Value(\"${database.secret.resource}\")\n+    private Resource databaseSecretResource;\n+\n+    @Value(\"${hsm.keystore.resource:#{null}}\")\n+    private Optional<Resource> hsmKeystoreResource;\n+\n+    @Value(\"${encryption.provider.type}\")\n+    private String encryptionProviderTypeName;\n+\n+    @Bean(\"DefaultEncryptionDelegate\")\n+    public DefaultEncryptionDelegate getEncryptionDelegate() {\n+        return new DefaultEncryptionDelegate(getDefaultEncryptionProviders());\n+    }\n+\n+    private EncryptionProvider[] getDefaultEncryptionProviders() {\n+\n+        List<EncryptionProvider> encryptionProviderList = new ArrayList<>();\n+\n+        try {\n+            JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider(\n+                    this.databaseSecretResource.getFile());\n+\n+            encryptionProviderList.add(jreEncryptionProvider);\n+\n+            File privateKeyStoreFile = this.soapPrivateKeyResource.isPresent() ?\n+                    this.soapPrivateKeyResource.get().getFile() : null;\n+            File publicKeyStoreFile = this.soapPublicKeyResource.isPresent() ?\n+                    this.soapPublicKeyResource.get().getFile() : null;\n+\n+            RsaEncryptionProvider rsaEncryptionProvider = new RsaEncryptionProvider(privateKeyStoreFile,", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java\nindex c50ecb4ced..1e98fdd99b 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java\n\n@@ -34,8 +34,8 @@ public class SecurityConfig {\n     @Value(\"${soap.private.key.resource:#{null}}\")\n     private Optional<Resource> soapPrivateKeyResource;\n \n-    @Value(\"${database.secret.resource}\")\n-    private Resource databaseSecretResource;\n+    @Value(\"${jre.encryption.key.resource}\")\n+    private Resource jreEncryptionKeyResource;\n \n     @Value(\"${hsm.keystore.resource:#{null}}\")\n     private Optional<Resource> hsmKeystoreResource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNTYyMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450825621", "bodyText": "can you explain why is this class needed? either the logback.xml from the classpath is loaded or one is provided via the context.xml.\nIs there a reason we use JDNI here? is the log file neede by JMX ?", "author": "coendamen", "createdAt": "2020-07-07T12:27:43Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecretManagementInitializer.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import ch.qos.logback.core.joran.spi.JoranException;\n+import ch.qos.logback.ext.spring.LogbackConfigurer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.WebApplicationInitializer;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+\n+public class SecretManagementInitializer implements WebApplicationInitializer {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecretManagementInitializer.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecretManagementInitializer.java\ndeleted file mode 100644\nindex d6dd291844..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecretManagementInitializer.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.secretmanagement.application.config;\n-\n-import ch.qos.logback.core.joran.spi.JoranException;\n-import ch.qos.logback.ext.spring.LogbackConfigurer;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.web.WebApplicationInitializer;\n-\n-import javax.naming.Context;\n-import javax.naming.InitialContext;\n-import javax.naming.NamingException;\n-import javax.servlet.ServletContext;\n-import javax.servlet.ServletException;\n-\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-\n-public class SecretManagementInitializer implements WebApplicationInitializer {\n-\n-    private static final String LOG_CONFIG = \"java:comp/env/osgp/SecretManagement/log-config\";\n-\n-    @Override\n-    public void onStartup(final ServletContext servletContext) throws ServletException {\n-\n-        Logger logger = LoggerFactory.getLogger(SecretManagementInitializer.class);\n-        Context initialContext;\n-        try {\n-            initialContext = new InitialContext();\n-            final String logLocation = (String) initialContext.lookup(LOG_CONFIG);\n-\n-            // Load specific logback configuration, otherwise fallback to\n-            // classpath logback.xml\n-            if (new File(logLocation).exists()) {\n-                LogbackConfigurer.initLogging(logLocation);\n-                logger.info(\"Initialized logging using {}\", LOG_CONFIG);\n-            }\n-        } catch (final NamingException | FileNotFoundException | JoranException e) {\n-            throw new ServletException(\"Failed to initialize logging using \" + LOG_CONFIG, e);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjA5Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450826093", "bodyText": "this is a constant, is there a reason why it is a Spring @value ?", "author": "coendamen", "createdAt": "2020-07-07T12:28:35Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration\n+@PropertySource(\"classpath:osgp-secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n+public class ApplicationConfig {\n+    @Value(\"${component.name}\")", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java\ndeleted file mode 100644\nindex 262b59e6d0..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.secretmanagement.application.config;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.PropertySource;\n-\n-@Configuration\n-@PropertySource(\"classpath:osgp-secret-management.properties\")\n-@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n-@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n-public class ApplicationConfig {\n-    @Value(\"${component.name}\")\n-    public static final String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMDM2MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450830360", "bodyText": "Global variables", "author": "jboon", "createdAt": "2020-07-07T12:36:24Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import org.opensmartgridplatform.secretmanagement.application.exception.DetailSoapFaultMappingExceptionResolver;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.boot.web.servlet.ServletRegistrationBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.ws.config.annotation.EnableWs;\n+import org.springframework.ws.config.annotation.WsConfigurerAdapter;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultDefinition;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+import org.springframework.ws.transport.http.MessageDispatcherServlet;\n+import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;\n+import org.springframework.xml.xsd.XsdSchemaCollection;\n+import org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection;\n+\n+import java.util.Properties;\n+\n+@EnableWs\n+@Configuration\n+public class WebServiceConfig extends WsConfigurerAdapter {\n+\n+    public static final String SECRET_MANAGEMENT_WS_BASE_PATH = \"/ws/SecretManagement/*\";\n+    public static final String SECRET_MANAGEMENT_PORT = \"SecretManagementPort\";\n+    public static final String SECRET_MANAGEMENT_URI = \"/ws/SecretManagement\";\n+    public static final String SECRET_MANAGEMENT_NS = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+    public static final String SECRET_MANAGEMENT_SCHEMA_LOC = \"schemas/secret-management.xsd\";", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java\nindex 40c1761c49..f1f05fc7a3 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java\n\n@@ -30,12 +30,12 @@ import java.util.Properties;\n @Configuration\n public class WebServiceConfig extends WsConfigurerAdapter {\n \n-    public static final String SECRET_MANAGEMENT_WS_BASE_PATH = \"/ws/SecretManagement/*\";\n-    public static final String SECRET_MANAGEMENT_PORT = \"SecretManagementPort\";\n-    public static final String SECRET_MANAGEMENT_URI = \"/ws/SecretManagement\";\n-    public static final String SECRET_MANAGEMENT_NS = \"http://www.opensmartgridplatform\"\n+    private static final String SECRET_MANAGEMENT_WS_BASE_PATH = \"/ws/SecretManagement/*\";\n+    private static final String SECRET_MANAGEMENT_PORT = \"SecretManagementPort\";\n+    private static final String SECRET_MANAGEMENT_URI = \"/ws/SecretManagement\";\n+    private static final String SECRET_MANAGEMENT_NS = \"http://www.opensmartgridplatform\"\n             + \".org/schemas/security/secretmanagement/2020/05\";\n-    public static final String SECRET_MANAGEMENT_SCHEMA_LOC = \"schemas/secret-management.xsd\";\n+    private static final String SECRET_MANAGEMENT_SCHEMA_LOC = \"schemas/secret-management.xsd\";\n \n     @Bean\n     public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMTI0MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450831241", "bodyText": "Add private access modifiers", "author": "jboon", "createdAt": "2020-07-07T12:37:58Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Encrypted secret, which should not be mutated, because modifications should result in a new version (record in the\n+ * DB). Historic entries remain in the DB table and the current secret should be determined via a query on creationTime.\n+ */\n+@Entity\n+@Table(name = \"encrypted_secret\")\n+@Getter\n+@Setter\n+public class DbEncryptedSecret {\n+    @Id\n+    @SequenceGenerator(name = \"encrypted_secret_seq_gen\", sequenceName = \"encrypted_secret_id_seq\", allocationSize = 1)\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"encrypted_secret_seq_gen\")\n+    Long id;\n+    Date creationTime;\n+    String deviceIdentification;\n+    @Enumerated(EnumType.STRING)\n+    SecretType secretType;\n+    String encodedSecret;\n+    @ManyToOne\n+    DbEncryptionKeyReference encryptionKeyReference;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae1f1686574dd3072ce1307d9629ab84b0d6e95d", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java\nindex 6cb8e5873d..489e2459d7 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java\n\n@@ -35,12 +35,12 @@ public class DbEncryptedSecret {\n     @Id\n     @SequenceGenerator(name = \"encrypted_secret_seq_gen\", sequenceName = \"encrypted_secret_id_seq\", allocationSize = 1)\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"encrypted_secret_seq_gen\")\n-    Long id;\n-    Date creationTime;\n-    String deviceIdentification;\n+    private Long id;\n+    private Date creationTime;\n+    private String deviceIdentification;\n     @Enumerated(EnumType.STRING)\n-    SecretType secretType;\n-    String encodedSecret;\n+    private SecretType secretType;\n+    private String encodedSecret;\n     @ManyToOne\n-    DbEncryptionKeyReference encryptionKeyReference;\n+    private DbEncryptionKeyReference encryptionKeyReference;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMTU4Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450831586", "bodyText": "Add private access modifiers", "author": "jboon", "createdAt": "2020-07-07T12:38:35Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+@Entity\n+@Table(name = \"encryption_key_reference\")\n+@Getter\n+@Setter\n+public class DbEncryptionKeyReference {\n+    @Id\n+    @SequenceGenerator(name = \"encryption_key_seq_gen\", sequenceName = \"encryption_key_reference_id_seq\",\n+            allocationSize = 1)\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"encryption_key_seq_gen\")\n+    Long id;\n+    Date creationTime;\n+    Date modificationTime;\n+    Long version; //for optimistic locking\n+    @Enumerated(EnumType.STRING)\n+    EncryptionProviderType encryptionProviderType;\n+    String reference;\n+    Date validFrom;\n+    Date validTo;\n+    String modifiedBy;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae1f1686574dd3072ce1307d9629ab84b0d6e95d", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java\nindex 9fe4dff042..ace84bf792 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java\n\n@@ -32,14 +32,14 @@ public class DbEncryptionKeyReference {\n     @SequenceGenerator(name = \"encryption_key_seq_gen\", sequenceName = \"encryption_key_reference_id_seq\",\n             allocationSize = 1)\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"encryption_key_seq_gen\")\n-    Long id;\n-    Date creationTime;\n-    Date modificationTime;\n-    Long version; //for optimistic locking\n+    private Long id;\n+    private Date creationTime;\n+    private Date modificationTime;\n+    private Long version; //for optimistic locking\n     @Enumerated(EnumType.STRING)\n-    EncryptionProviderType encryptionProviderType;\n-    String reference;\n-    Date validFrom;\n-    Date validTo;\n-    String modifiedBy;\n+    private EncryptionProviderType encryptionProviderType;\n+    private String reference;\n+    private Date validFrom;\n+    private Date validTo;\n+    private String modifiedBy;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMTgxNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450831815", "bodyText": "Add private access modifiers", "author": "jboon", "createdAt": "2020-07-07T12:39:00Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+/**\n+ * TypedSecret stores a secret (not necessarily an encrypted secret), along with it's type.\n+ */\n+public class TypedSecret {\n+    SecretType secretType;\n+    String secret;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java\nindex 73dbb615c6..3c62f329a6 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java\n\n@@ -12,8 +12,8 @@ package org.opensmartgridplatform.secretmanagement.application.domain;\n  * TypedSecret stores a secret (not necessarily an encrypted secret), along with it's type.\n  */\n public class TypedSecret {\n-    SecretType secretType;\n-    String secret;\n+    private SecretType secretType;\n+    private String secret;\n \n     public String getSecret() {\n         return secret;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNjM2Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450836366", "bodyText": "Any exception will be translated to a TechnicalException. Is this intended?\nMaybe return a SOAP Fault to communicate the problem to the caller?", "author": "jboon", "createdAt": "2020-07-07T12:46:16Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        log.trace(request.toString());\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(request.getSecretTypes());\n+            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+                    secretTypeList);\n+\n+            TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n+\n+            response.setTypedSecrets(soapTypedSecrets);\n+            response.setResult(OsgpResultType.OK);\n+\n+            log.trace(response.toString());\n+\n+            return response;\n+        } catch (Exception e) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\nindex d0deee67d7..db9aab1d6d 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n\n@@ -10,28 +10,31 @@ package org.opensmartgridplatform.secretmanagement.application.endpoints;\n \n import java.util.List;\n \n-import lombok.extern.slf4j.Slf4j;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.config.SecretManagementInitializer;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.ws.server.endpoint.annotation.Endpoint;\n import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n \n @Endpoint\n-@Slf4j\n public class SecretManagementEndpoint {\n \n+    Logger logger = LoggerFactory.getLogger(SecretManagementInitializer.class);\n+\n     private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n             + \".org/schemas/security/secretmanagement/2020/05\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNjU0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450836548", "bodyText": "See comment above", "author": "jboon", "createdAt": "2020-07-07T12:46:34Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        log.trace(request.toString());\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(request.getSecretTypes());\n+            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+                    secretTypeList);\n+\n+            TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n+\n+            response.setTypedSecrets(soapTypedSecrets);\n+            response.setResult(OsgpResultType.OK);\n+\n+            log.trace(response.toString());\n+\n+            return response;\n+        } catch (Exception e) {\n+            throw new TechnicalException(ComponentType.SHARED, e.getMessage());\n+        }\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n+    @ResponsePayload\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n+        log.trace(request.toString());\n+\n+        StoreSecretsResponse response = new StoreSecretsResponse();\n+\n+        try {\n+            List<TypedSecret> typedSecretList = converter.convertToTypedSecrets(request.getTypedSecrets());\n+\n+            secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n+\n+            response.setResult(OsgpResultType.OK);\n+\n+            log.trace(response.toString());\n+\n+            return response;\n+        } catch (Exception e) {\n+            throw new TechnicalException(ComponentType.SHARED, e.getMessage());", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\nindex d0deee67d7..db9aab1d6d 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n\n@@ -10,28 +10,31 @@ package org.opensmartgridplatform.secretmanagement.application.endpoints;\n \n import java.util.List;\n \n-import lombok.extern.slf4j.Slf4j;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.config.SecretManagementInitializer;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.ws.server.endpoint.annotation.Endpoint;\n import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n \n @Endpoint\n-@Slf4j\n public class SecretManagementEndpoint {\n \n+    Logger logger = LoggerFactory.getLogger(SecretManagementInitializer.class);\n+\n     private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n             + \".org/schemas/security/secretmanagement/2020/05\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzODQwNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450838407", "bodyText": "Make this field final", "author": "jboon", "createdAt": "2020-07-07T12:49:43Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\nindex b97dbaa3e9..5c81e0d9e9 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n\n@@ -29,7 +29,7 @@ import java.util.List;\n public class SoapEndpointDataTypeConverter {\n \n     private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-    private EncryptionDelegate encryptionDelegate;\n+    private final EncryptionDelegate encryptionDelegate;\n \n     public SoapEndpointDataTypeConverter(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzOTMyNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450839327", "bodyText": "You could validate this in the caller and assume valid input.", "author": "jboon", "createdAt": "2020-07-07T12:51:14Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\nindex b97dbaa3e9..5c81e0d9e9 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n\n@@ -29,7 +29,7 @@ import java.util.List;\n public class SoapEndpointDataTypeConverter {\n \n     private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-    private EncryptionDelegate encryptionDelegate;\n+    private final EncryptionDelegate encryptionDelegate;\n \n     public SoapEndpointDataTypeConverter(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzOTg5OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450839899", "bodyText": "Validate input", "author": "jboon", "createdAt": "2020-07-07T12:52:08Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        log.trace(request.toString());\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(request.getSecretTypes());", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\nindex d0deee67d7..db9aab1d6d 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n\n@@ -10,28 +10,31 @@ package org.opensmartgridplatform.secretmanagement.application.endpoints;\n \n import java.util.List;\n \n-import lombok.extern.slf4j.Slf4j;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n-import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.config.SecretManagementInitializer;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.ws.server.endpoint.annotation.Endpoint;\n import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n \n @Endpoint\n-@Slf4j\n public class SecretManagementEndpoint {\n \n+    Logger logger = LoggerFactory.getLogger(SecretManagementInitializer.class);\n+\n     private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n             + \".org/schemas/security/secretmanagement/2020/05\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MTI3OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450841279", "bodyText": "This could be done beautifully with the Streams API ;-)", "author": "jboon", "createdAt": "2020-07-07T12:54:26Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList =\n+                soapSecretTypes.getSecretType();\n+        List<SecretType> secretTypeList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.SecretType soapSecretType :", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\nindex b97dbaa3e9..5c81e0d9e9 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n\n@@ -29,7 +29,7 @@ import java.util.List;\n public class SoapEndpointDataTypeConverter {\n \n     private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-    private EncryptionDelegate encryptionDelegate;\n+    private final EncryptionDelegate encryptionDelegate;\n \n     public SoapEndpointDataTypeConverter(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MjA5Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450842096", "bodyText": "See comments above", "author": "jboon", "createdAt": "2020-07-07T12:55:40Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList =\n+                soapSecretTypes.getSecretType();\n+        List<SecretType> secretTypeList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.SecretType soapSecretType :\n+                soapSecretTypeList) {\n+            SecretType secretType = convertToSecretType(soapSecretType);\n+            secretTypeList.add(secretType);\n+        }\n+\n+        return secretTypeList;\n+    }\n+\n+    public List<TypedSecret> convertToTypedSecrets(TypedSecrets soapTypedSecrets) throws OsgpException {\n+\n+        if (soapTypedSecrets == null) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\nindex b97dbaa3e9..5c81e0d9e9 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n\n@@ -29,7 +29,7 @@ import java.util.List;\n public class SoapEndpointDataTypeConverter {\n \n     private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-    private EncryptionDelegate encryptionDelegate;\n+    private final EncryptionDelegate encryptionDelegate;\n \n     public SoapEndpointDataTypeConverter(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NTM1NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450845355", "bodyText": "This will never be null due to the instance of check  in the above code fragment", "author": "jboon", "createdAt": "2020-07-07T13:00:55Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n+            }\n+            if (technicalFault.getInnerException() != null) {\n+                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            }\n+        }\n+    }\n+\n+    private TechnicalFault convert(final TechnicalException ex) {\n+        if (ex == null) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\nindex ad9aaef645..9c7bf34058 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n\n@@ -20,41 +20,20 @@ public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExc\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        SoapFaultDetail detail = fault.addFaultDetail();\n+\n+        if (ex.getMessage() != null) {\n+            detail.addFaultDetailElement(MESSAGE).addText(ex.getMessage());\n+        }\n+\n         if (ex instanceof TechnicalException) {\n-            TechnicalFault technicalFault = convert((TechnicalException) ex);\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) {\n-                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            }\n-            if (technicalFault.getComponent() != null) {\n-                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            }\n-            if (technicalFault.getInnerMessage() != null) {\n-                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            }\n-            if (technicalFault.getInnerException() != null) {\n-                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            if (((TechnicalException) ex).getComponentType().name() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(((TechnicalException) ex).getComponentType().name());\n             }\n         }\n     }\n \n-    private TechnicalFault convert(final TechnicalException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        final TechnicalFault destination = new TechnicalFault();\n-        destination.setComponent(ex.getComponentType().name());\n-        destination.setMessage(ex.getMessage());\n-        if (ex.getCause() != null) {\n-            destination.setInnerException(ex.getCause().getClass().getName());\n-            destination.setInnerMessage(ex.getCause().getMessage());\n-        }\n-\n-        return destination;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0ODEwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450848109", "bodyText": "+1 for the exception translation", "author": "jboon", "createdAt": "2020-07-07T13:05:25Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\nindex ad9aaef645..9c7bf34058 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n\n@@ -20,41 +20,20 @@ public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExc\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        SoapFaultDetail detail = fault.addFaultDetail();\n+\n+        if (ex.getMessage() != null) {\n+            detail.addFaultDetailElement(MESSAGE).addText(ex.getMessage());\n+        }\n+\n         if (ex instanceof TechnicalException) {\n-            TechnicalFault technicalFault = convert((TechnicalException) ex);\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) {\n-                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            }\n-            if (technicalFault.getComponent() != null) {\n-                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            }\n-            if (technicalFault.getInnerMessage() != null) {\n-                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            }\n-            if (technicalFault.getInnerException() != null) {\n-                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            if (((TechnicalException) ex).getComponentType().name() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(((TechnicalException) ex).getComponentType().name());\n             }\n         }\n     }\n \n-    private TechnicalFault convert(final TechnicalException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        final TechnicalFault destination = new TechnicalFault();\n-        destination.setComponent(ex.getComponentType().name());\n-        destination.setMessage(ex.getMessage());\n-        if (ex.getCause() != null) {\n-            destination.setInnerException(ex.getCause().getClass().getName());\n-            destination.setInnerMessage(ex.getCause().getMessage());\n-        }\n-\n-        return destination;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0ODkzNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450848935", "bodyText": "Is there only a generic exception?", "author": "jboon", "createdAt": "2020-07-07T13:06:50Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\nindex ad9aaef645..9c7bf34058 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n\n@@ -20,41 +20,20 @@ public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExc\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        SoapFaultDetail detail = fault.addFaultDetail();\n+\n+        if (ex.getMessage() != null) {\n+            detail.addFaultDetailElement(MESSAGE).addText(ex.getMessage());\n+        }\n+\n         if (ex instanceof TechnicalException) {\n-            TechnicalFault technicalFault = convert((TechnicalException) ex);\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) {\n-                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            }\n-            if (technicalFault.getComponent() != null) {\n-                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            }\n-            if (technicalFault.getInnerMessage() != null) {\n-                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            }\n-            if (technicalFault.getInnerException() != null) {\n-                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            if (((TechnicalException) ex).getComponentType().name() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(((TechnicalException) ex).getComponentType().name());\n             }\n         }\n     }\n \n-    private TechnicalFault convert(final TechnicalException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        final TechnicalFault destination = new TechnicalFault();\n-        destination.setComponent(ex.getComponentType().name());\n-        destination.setMessage(ex.getMessage());\n-        if (ex.getCause() != null) {\n-            destination.setInnerException(ex.getCause().getClass().getName());\n-            destination.setInnerMessage(ex.getCause().getMessage());\n-        }\n-\n-        return destination;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0OTU1NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450849554", "bodyText": "I have only seen Component.SHARED be set. What is the relevance of this field?", "author": "jboon", "createdAt": "2020-07-07T13:07:44Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\nindex ad9aaef645..9c7bf34058 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n\n@@ -20,41 +20,20 @@ public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExc\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        SoapFaultDetail detail = fault.addFaultDetail();\n+\n+        if (ex.getMessage() != null) {\n+            detail.addFaultDetailElement(MESSAGE).addText(ex.getMessage());\n+        }\n+\n         if (ex instanceof TechnicalException) {\n-            TechnicalFault technicalFault = convert((TechnicalException) ex);\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) {\n-                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            }\n-            if (technicalFault.getComponent() != null) {\n-                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            }\n-            if (technicalFault.getInnerMessage() != null) {\n-                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            }\n-            if (technicalFault.getInnerException() != null) {\n-                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            if (((TechnicalException) ex).getComponentType().name() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(((TechnicalException) ex).getComponentType().name());\n             }\n         }\n     }\n \n-    private TechnicalFault convert(final TechnicalException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        final TechnicalFault destination = new TechnicalFault();\n-        destination.setComponent(ex.getComponentType().name());\n-        destination.setMessage(ex.getMessage());\n-        if (ex.getCause() != null) {\n-            destination.setInnerException(ex.getCause().getClass().getName());\n-            destination.setInnerMessage(ex.getCause().getMessage());\n-        }\n-\n-        return destination;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0OTg2MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450849861", "bodyText": "Is this relevant for the caller?", "author": "jboon", "createdAt": "2020-07-07T13:08:12Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\nindex ad9aaef645..9c7bf34058 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n\n@@ -20,41 +20,20 @@ public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExc\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        SoapFaultDetail detail = fault.addFaultDetail();\n+\n+        if (ex.getMessage() != null) {\n+            detail.addFaultDetailElement(MESSAGE).addText(ex.getMessage());\n+        }\n+\n         if (ex instanceof TechnicalException) {\n-            TechnicalFault technicalFault = convert((TechnicalException) ex);\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) {\n-                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            }\n-            if (technicalFault.getComponent() != null) {\n-                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            }\n-            if (technicalFault.getInnerMessage() != null) {\n-                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            }\n-            if (technicalFault.getInnerException() != null) {\n-                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            if (((TechnicalException) ex).getComponentType().name() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(((TechnicalException) ex).getComponentType().name());\n             }\n         }\n     }\n \n-    private TechnicalFault convert(final TechnicalException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        final TechnicalFault destination = new TechnicalFault();\n-        destination.setComponent(ex.getComponentType().name());\n-        destination.setMessage(ex.getMessage());\n-        if (ex.getCause() != null) {\n-            destination.setInnerException(ex.getCause().getClass().getName());\n-            destination.setInnerMessage(ex.getCause().getMessage());\n-        }\n-\n-        return destination;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MDA2Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450850063", "bodyText": "Is this something you want to expose?", "author": "jboon", "createdAt": "2020-07-07T13:08:30Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n+            }\n+            if (technicalFault.getInnerException() != null) {\n+                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\nindex ad9aaef645..9c7bf34058 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n\n@@ -20,41 +20,20 @@ public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExc\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        SoapFaultDetail detail = fault.addFaultDetail();\n+\n+        if (ex.getMessage() != null) {\n+            detail.addFaultDetailElement(MESSAGE).addText(ex.getMessage());\n+        }\n+\n         if (ex instanceof TechnicalException) {\n-            TechnicalFault technicalFault = convert((TechnicalException) ex);\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) {\n-                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            }\n-            if (technicalFault.getComponent() != null) {\n-                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            }\n-            if (technicalFault.getInnerMessage() != null) {\n-                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            }\n-            if (technicalFault.getInnerException() != null) {\n-                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            if (((TechnicalException) ex).getComponentType().name() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(((TechnicalException) ex).getComponentType().name());\n             }\n         }\n     }\n \n-    private TechnicalFault convert(final TechnicalException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        final TechnicalFault destination = new TechnicalFault();\n-        destination.setComponent(ex.getComponentType().name());\n-        destination.setMessage(ex.getMessage());\n-        if (ex.getCause() != null) {\n-            destination.setInnerException(ex.getCause().getClass().getName());\n-            destination.setInnerMessage(ex.getCause().getMessage());\n-        }\n-\n-        return destination;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MDkyNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450850926", "bodyText": "I would not expose the cause. Translate exceptions to application specific ones.", "author": "jboon", "createdAt": "2020-07-07T13:09:43Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n+            }\n+            if (technicalFault.getInnerException() != null) {\n+                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            }\n+        }\n+    }\n+\n+    private TechnicalFault convert(final TechnicalException ex) {\n+        if (ex == null) {\n+            return null;\n+        }\n+        final TechnicalFault destination = new TechnicalFault();\n+        destination.setComponent(ex.getComponentType().name());\n+        destination.setMessage(ex.getMessage());\n+        if (ex.getCause() != null) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\nindex ad9aaef645..9c7bf34058 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java\n\n@@ -20,41 +20,20 @@ public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExc\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        SoapFaultDetail detail = fault.addFaultDetail();\n+\n+        if (ex.getMessage() != null) {\n+            detail.addFaultDetailElement(MESSAGE).addText(ex.getMessage());\n+        }\n+\n         if (ex instanceof TechnicalException) {\n-            TechnicalFault technicalFault = convert((TechnicalException) ex);\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) {\n-                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            }\n-            if (technicalFault.getComponent() != null) {\n-                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            }\n-            if (technicalFault.getInnerMessage() != null) {\n-                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            }\n-            if (technicalFault.getInnerException() != null) {\n-                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            if (((TechnicalException) ex).getComponentType().name() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(((TechnicalException) ex).getComponentType().name());\n             }\n         }\n     }\n \n-    private TechnicalFault convert(final TechnicalException ex) {\n-        if (ex == null) {\n-            return null;\n-        }\n-        final TechnicalFault destination = new TechnicalFault();\n-        destination.setComponent(ex.getComponentType().name());\n-        destination.setMessage(ex.getMessage());\n-        if (ex.getCause() != null) {\n-            destination.setInnerException(ex.getCause().getClass().getName());\n-            destination.setInnerMessage(ex.getCause().getMessage());\n-        }\n-\n-        return destination;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1Mjc2MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450852760", "bodyText": "+1 for using the Stream API", "author": "jboon", "createdAt": "2020-07-07T13:12:24Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 7f3861aaaf..7afdce5544 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -38,7 +38,6 @@ public class SecretManagementService {\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n \n-    @Autowired\n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MzkzOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450853939", "bodyText": "Global variables", "author": "jboon", "createdAt": "2020-07-07T13:14:19Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NDA0NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450854045", "bodyText": "Make final", "author": "jboon", "createdAt": "2020-07-07T13:14:27Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NTM2Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450855363", "bodyText": "I think I wouldn't do this in the constructor. You could create beans and inject the Key objects in here", "author": "jboon", "createdAt": "2020-07-07T13:16:25Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {\n+        try {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NzAyMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450857020", "bodyText": "?", "author": "jboon", "createdAt": "2020-07-07T13:19:02Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {\n+        try {\n+            KeyFactory keyFactory = KeyFactory.getInstance(ALG);\n+\n+            if (privateKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+                PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+                privateKey = keyFactory.generatePrivate(privateKeySpec);\n+                super.setKeyFile(privateKeyStoreFile);\n+            }\n+            if (publicKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+                X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+                publicKey = keyFactory.generatePublic(publicKeySpec);\n+            }\n+        } catch (Exception e) {\n+            throw new EncrypterException(\"Something went wrong during construction of \"\n+                    + \"RsaEncryptionProvider\", e);\n+        }\n+    }\n+\n+    protected Cipher getCipher() throws javax.crypto.NoSuchPaddingException, NoSuchAlgorithmException {\n+        return Cipher.getInstance(ALGORITHM);\n+    }\n+\n+    protected Key getSecretEncryptionKey(String key, int cipherMode) {\n+        if (cipherMode == Cipher.ENCRYPT_MODE) {\n+            if (publicKey == null) {\n+                throw new EncrypterException(\"Cannot RSA encrypt because no public key is defined.\");\n+            }\n+            return publicKey;\n+        } else if (cipherMode == Cipher.DECRYPT_MODE) {\n+            if (privateKey == null) {\n+                throw new EncrypterException(\"Cannot RSA encrypt because no private key is defined.\");\n+            }\n+            return privateKey;\n+        }\n+        throw new EncrypterException(\"Invalid cipher mode specified.\");\n+    }\n+\n+    protected AlgorithmParameterSpec getAlgorithmParameterSpec() {\n+        return null;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex c8edb0a8f9..494ce3546c 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,11 +1,13 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NzY2Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450857667", "bodyText": "Global variables", "author": "jboon", "createdAt": "2020-07-07T13:20:06Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nindex eb9e9df8d0..6268a9fb92 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n\n@@ -27,28 +27,28 @@ import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n \n public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n \n-    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n-    public static final String ALG = \"AES\";\n-    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n-    public static final String PROVIDER = \"SunJCE\";\n-    public static final String FORMAT = \"RAW\";\n+    private static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    private static final String ALG = \"AES\";\n+    private static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    private static final String PROVIDER = \"SunJCE\";\n+    private static final String FORMAT = \"RAW\";\n     private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n \n-    private byte[] key;\n-\n-    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n-        return Cipher.getInstance(ALGORITHM, PROVIDER);\n-    }\n+    private final byte[] key;\n \n     public JreEncryptionProvider(File keyStoreFile) {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.key = Files.readAllBytes(Paths.get(keyStoreFile.getAbsolutePath()));\n         } catch (IOException e) {\n-            throw new EncrypterException(\"Could not read keystore\");\n+            throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n     protected Key getSecretEncryptionKey(String keyReference, int cipherMode) {\n \n         if (!keyReference.equals(DEFAULT_SINGLE_KEY_REFERENCE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1ODA2Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450858062", "bodyText": "Make final", "author": "jboon", "createdAt": "2020-07-07T13:20:36Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";\n+    private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+    private byte[] key;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nindex eb9e9df8d0..6268a9fb92 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n\n@@ -27,28 +27,28 @@ import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n \n public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n \n-    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n-    public static final String ALG = \"AES\";\n-    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n-    public static final String PROVIDER = \"SunJCE\";\n-    public static final String FORMAT = \"RAW\";\n+    private static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    private static final String ALG = \"AES\";\n+    private static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    private static final String PROVIDER = \"SunJCE\";\n+    private static final String FORMAT = \"RAW\";\n     private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n \n-    private byte[] key;\n-\n-    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n-        return Cipher.getInstance(ALGORITHM, PROVIDER);\n-    }\n+    private final byte[] key;\n \n     public JreEncryptionProvider(File keyStoreFile) {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.key = Files.readAllBytes(Paths.get(keyStoreFile.getAbsolutePath()));\n         } catch (IOException e) {\n-            throw new EncrypterException(\"Could not read keystore\");\n+            throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n     protected Key getSecretEncryptionKey(String keyReference, int cipherMode) {\n \n         if (!keyReference.equals(DEFAULT_SINGLE_KEY_REFERENCE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1OTg5MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450859891", "bodyText": "Make this private, add getter if needed.", "author": "jboon", "createdAt": "2020-07-07T13:23:09Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\nindex 57084c5361..4c7378d2c8 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n\n@@ -31,14 +31,13 @@ public abstract class AbstractEncryptionProvider {\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher()\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+    protected abstract Cipher getCipher() throws EncrypterException;\n \n     protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n \n     protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n \n-    public void setKeyFile(File keyFile) {\n+    protected void setKeyFile(File keyFile) {\n         this.keyFile = keyFile;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MTE3NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450871175", "bodyText": "return\nbytes.length > BLOCK_SIZE\n&&\nArrays.stream(Arrays.copyOfRange(bytes, 0, BLOCK_SIZE)).allMatch(b -> b == 0);\nSomething like this?", "author": "jboon", "createdAt": "2020-07-07T13:38:52Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+\n+    protected abstract Cipher getCipher()\n+            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+\n+    public void setKeyFile(File keyFile) {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not encrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n+\n+        if (secret.getType() != this.getType()) {\n+            throw new EncrypterException(\n+                    \"EncryptionProvider for type \" + this.getType().name() + \" cannot decrypt secrets of type \"\n+                            + secret.getType().name());\n+        }\n+\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.DECRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.DECRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            final byte[] decryptedData = cipher.doFinal(secret.getSecret());\n+\n+            if (this.checkNullBytesPrepended(decryptedData)) {\n+                return new Secret(Arrays.copyOfRange(decryptedData, BLOCK_SIZE, decryptedData.length));\n+            } else {\n+                return new Secret(decryptedData);\n+            }\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not decrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    private boolean checkNullBytesPrepended(final byte[] bytes) {", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\nindex 57084c5361..4c7378d2c8 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java\n\n@@ -31,14 +31,13 @@ public abstract class AbstractEncryptionProvider {\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher()\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+    protected abstract Cipher getCipher() throws EncrypterException;\n \n     protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n \n     protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n \n-    public void setKeyFile(File keyFile) {\n+    protected void setKeyFile(File keyFile) {\n         this.keyFile = keyFile;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MTYyMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450871620", "bodyText": "final", "author": "jboon", "createdAt": "2020-07-07T13:39:31Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    private static final String ALGORITHM = \"AES/CBC/NoPadding\";\n+    private static final String PROVIDER = \"nCipherKM\";\n+    private static final String TYPE = \"ncipher.sworld\";\n+    private static final byte[] IV = new byte[16];\n+\n+    private KeyStore keyStore;", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java\nindex b07f1cdd7b..50b47ff5d4 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java\n\n@@ -34,7 +34,7 @@ public class HsmEncryptionProvider extends AbstractEncryptionProvider implements\n     private static final String TYPE = \"ncipher.sworld\";\n     private static final byte[] IV = new byte[16];\n \n-    private KeyStore keyStore;\n+    private final KeyStore keyStore;\n \n     public HsmEncryptionProvider(File keyStoreFile) {\n         try {\n"}}, {"oid": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/862ff45f0dad78e58c81214be6c772adec3d3ee6", "message": "SLIM-2077-excluded-spring-security", "committedDate": "2020-07-07T13:54:15Z", "type": "commit"}, {"oid": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "message": "SLIM-2077-review-comments", "committedDate": "2020-07-08T12:28:23Z", "type": "commit"}, {"oid": "ae1f1686574dd3072ce1307d9629ab84b0d6e95d", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ae1f1686574dd3072ce1307d9629ab84b0d6e95d", "message": "PR review changes", "committedDate": "2020-07-08T12:35:48Z", "type": "commit"}, {"oid": "452499e17c6886bd78c880364ea1e177605b885d", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/452499e17c6886bd78c880364ea1e177605b885d", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-07-08T12:35:57Z", "type": "commit"}, {"oid": "90464396df4c09f1a59c8fcb11cb619705914cc4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/90464396df4c09f1a59c8fcb11cb619705914cc4", "message": "mvn POM property fixed", "committedDate": "2020-07-13T12:48:52Z", "type": "commit"}, {"oid": "1ef03c7e069dcb1f9f69e10a827e10314b9dd873", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1ef03c7e069dcb1f9f69e10a827e10314b9dd873", "message": "fixed non-running tests during Maven build", "committedDate": "2020-07-13T13:08:19Z", "type": "commit"}, {"oid": "3f6c276ffa1696b0ad2975e65974e05c77658bd0", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3f6c276ffa1696b0ad2975e65974e05c77658bd0", "message": "SLIM-2077-review-comments", "committedDate": "2020-07-13T16:50:42Z", "type": "commit"}, {"oid": "1b6e76f1ae90d21483a8cb6700ced390ece6ddde", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1b6e76f1ae90d21483a8cb6700ced390ece6ddde", "message": "SLIM-2077-additional-trace-level-logging-for-test", "committedDate": "2020-07-14T12:37:29Z", "type": "commit"}, {"oid": "960d7b310d52105a83162bf24bef337b063bda42", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/960d7b310d52105a83162bf24bef337b063bda42", "message": "SLIM-2077-added-debug-level-logging", "committedDate": "2020-07-14T15:37:17Z", "type": "commit"}, {"oid": "a1bad9a2d6d8054d346efca7d9600467e429b62c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a1bad9a2d6d8054d346efca7d9600467e429b62c", "message": "SLIM-2077-added-debug-level-logging-and-logging-initializer", "committedDate": "2020-07-15T08:44:24Z", "type": "commit"}, {"oid": "3acde2e6b4750f309034f6cc5cbd0d221a0baf8e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3acde2e6b4750f309034f6cc5cbd0d221a0baf8e", "message": "SLIM-2077-adjusted-to-warn-levels", "committedDate": "2020-07-15T09:02:08Z", "type": "commit"}, {"oid": "4f568126891b2741b21365035117542af21a2a5b", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4f568126891b2741b21365035117542af21a2a5b", "message": "SLIM-2077-added-debug-level-logging", "committedDate": "2020-07-15T10:33:16Z", "type": "commit"}, {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/27e8524ee4835a63fc556e033e0a2213932c401f", "message": "SLIM-2077-moved-main-for-log-initialization", "committedDate": "2020-07-15T11:57:29Z", "type": "commit"}, {"oid": "44a3bcbb103c55ae89dcb931f229d8fda5d2bd2a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/44a3bcbb103c55ae89dcb931f229d8fda5d2bd2a", "message": "SLIM-2077-exception-now-at-max-level-max-trace", "committedDate": "2020-07-15T15:46:13Z", "type": "commit"}, {"oid": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "message": "SLIM-2077-moved-main-for-log-initialization", "committedDate": "2020-07-16T12:19:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMjU1Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456032552", "bodyText": "Header is missing for this file.", "author": "kevinsmeets", "createdAt": "2020-07-16T19:42:07Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.config;", "originalCommit": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76c4b6da598e77347a129c0bc9fe636040c6c64c", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java\nindex 3666984daa..3a2efdff21 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java\n\n@@ -2,7 +2,6 @@ package org.opensmartgridplatform.adapter.protocol.dlms.application.config;\n \n import java.io.File;\n import java.io.IOException;\n-import java.security.NoSuchAlgorithmException;\n import java.security.spec.InvalidKeySpecException;\n \n import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMjcyMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456032723", "bodyText": "Header is missing for this file.", "author": "kevinsmeets", "createdAt": "2020-07-16T19:42:20Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;", "originalCommit": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f41fa2e6cb64e6d9d2ec81a9f40865c97c62f380", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex 5af7af2f0b..cab6259172 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2016 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMjk1Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456032953", "bodyText": "Header is missing for this file.", "author": "kevinsmeets", "createdAt": "2020-07-16T19:42:35Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;", "originalCommit": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f41fa2e6cb64e6d9d2ec81a9f40865c97c62f380", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\nindex 362c5e30ff..811d1c0cc2 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\n\n@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2016 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n \n import lombok.extern.slf4j.Slf4j;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMzY3Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456033677", "bodyText": "Header is missing for this file.", "author": "kevinsmeets", "createdAt": "2020-07-16T19:43:32Z", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.opensmartgridplatform.shared.security.providers;", "originalCommit": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd7f59b56b5f6250d14db53ebb35f3c826b73056", "chunk": "diff --git a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\nindex d6a3864758..591396bf8b 100644\n--- a/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java\n\n@@ -1,5 +1,10 @@\n package org.opensmartgridplatform.shared.security.providers;\n \n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNDQ3NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456034475", "bodyText": "Header is missing for this file.", "author": "kevinsmeets", "createdAt": "2020-07-16T19:44:48Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecurityKeyService.java", "diffHunk": "@@ -1,503 +1,23 @@\n-/**\n- * Copyright 2017 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;", "originalCommit": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f41fa2e6cb64e6d9d2ec81a9f40865c97c62f380", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecurityKeyService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecurityKeyService.java\nindex 54f6b6b3ff..abff08c1c8 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecurityKeyService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecurityKeyService.java\n\n@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2016 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2ODQ3NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456068475", "bodyText": "Spring Boot will override the property logging.config.", "author": "kevinsmeets", "createdAt": "2020-07-16T20:47:47Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/Application.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.PropertySource;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import java.util.Properties;\n+\n+@Slf4j\n+@SpringBootApplication(exclude = { SecurityAutoConfiguration.class })\n+@PropertySource(\"classpath:osgp-secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n+@ComponentScan(basePackages = { \"org.opensmartgridplatform.secretmanagement\" })\n+public class Application extends SpringBootServletInitializer {\n+\n+    private static final String LOG_CONFIG = \"java:comp/env/osgp/SecretManagement/log-config\";\n+\n+    public static void main(final String[] args) {\n+        //command line startup method (not used when app is started in application server)\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+    @Override\n+    protected SpringApplicationBuilder configure(final SpringApplicationBuilder builder) {\n+        String logPropertiesLocation = this.getLogbackConfigurationLocation();\n+\n+        log.info(\"Location for properties: {}\", logPropertiesLocation);\n+\n+        Properties props = new Properties();\n+        props.setProperty(\"logging.config\", logPropertiesLocation);\n+        builder.application().setDefaultProperties(props);\n+\n+        return builder.sources(Application.class);", "originalCommit": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0aaff58885efd4ad4159ccfd59178c055735da22", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/Application.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/Application.java\nindex 9b135abfbe..b2f0d629cd 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/Application.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/Application.java\n\n@@ -20,6 +20,8 @@ import org.springframework.context.annotation.PropertySource;\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n+import java.io.File;\n+import java.util.Optional;\n import java.util.Properties;\n \n @Slf4j\n"}}, {"oid": "ca5c33f8e0e69b18366e0a79198f1ee25c0bcec1", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ca5c33f8e0e69b18366e0a79198f1ee25c0bcec1", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' into test_2077", "committedDate": "2020-07-17T11:09:10Z", "type": "commit"}, {"oid": "bde1481a55eb7557be924ba8e0129113827c4162", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bde1481a55eb7557be924ba8e0129113827c4162", "message": "Remove tests for build", "committedDate": "2020-07-17T12:08:57Z", "type": "commit"}, {"oid": "fd7f59b56b5f6250d14db53ebb35f3c826b73056", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fd7f59b56b5f6250d14db53ebb35f3c826b73056", "message": "Solved Sonar issues", "committedDate": "2020-07-17T13:19:39Z", "type": "commit"}, {"oid": "b33ea72db450ef9024872811269d65c2743dfd99", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b33ea72db450ef9024872811269d65c2743dfd99", "message": "Remove unused catch", "committedDate": "2020-07-17T13:28:43Z", "type": "commit"}, {"oid": "76c4b6da598e77347a129c0bc9fe636040c6c64c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/76c4b6da598e77347a129c0bc9fe636040c6c64c", "message": "Remove unused exception", "committedDate": "2020-07-17T13:42:28Z", "type": "commit"}, {"oid": "bd58ee80242d67262adf062325925d9bcfa90694", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bd58ee80242d67262adf062325925d9bcfa90694", "message": "Resolve Sonar issues", "committedDate": "2020-07-17T14:15:29Z", "type": "commit"}, {"oid": "f412aa1604ab1172bae19addfc5000971b7f5c0a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f412aa1604ab1172bae19addfc5000971b7f5c0a", "message": "Adjust pipeline script", "committedDate": "2020-07-17T14:47:00Z", "type": "commit"}, {"oid": "bf30f647c4161df08ef894f4e80f80be0cc9ba58", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bf30f647c4161df08ef894f4e80f80be0cc9ba58", "message": "SLIM-2077-extra-log-info", "committedDate": "2020-07-20T12:25:07Z", "type": "commit"}, {"oid": "d5057e11397b25692c4a84ba7f8050080ce199d4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d5057e11397b25692c4a84ba7f8050080ce199d4", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-07-20T13:17:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MDU2NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455140565", "bodyText": "Layout: only show one value per line for readability.", "author": "rlemmers", "createdAt": "2020-07-15T15:27:25Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretType.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+public enum SecretType {\n+    E_METER_MASTER_KEY, E_METER_AUTHENTICATION_KEY, E_METER_ENCRYPTION_KEY_UNICAST, E_METER_ENCRYPTION_KEY_BROADCAST,\n+    G_METER_MASTER_KEY, G_METER_ENCRYPTION_KEY, G_METER_FIRMWARE_UPDATE_AUTHENTICATION_KEY, G_METER_OPTICAL_PORT_KEY,\n+    PPP_PASSWORD", "originalCommit": "27e8524ee4835a63fc556e033e0a2213932c401f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f41fa2e6cb64e6d9d2ec81a9f40865c97c62f380", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretType.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretType.java\nindex 995a89b9a4..df1642b7ca 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretType.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretType.java\n\n@@ -9,7 +9,13 @@\n package org.opensmartgridplatform.secretmanagement.application.domain;\n \n public enum SecretType {\n-    E_METER_MASTER_KEY, E_METER_AUTHENTICATION_KEY, E_METER_ENCRYPTION_KEY_UNICAST, E_METER_ENCRYPTION_KEY_BROADCAST,\n-    G_METER_MASTER_KEY, G_METER_ENCRYPTION_KEY, G_METER_FIRMWARE_UPDATE_AUTHENTICATION_KEY, G_METER_OPTICAL_PORT_KEY,\n+    E_METER_MASTER_KEY,\n+    E_METER_AUTHENTICATION_KEY,\n+    E_METER_ENCRYPTION_KEY_UNICAST,\n+    E_METER_ENCRYPTION_KEY_BROADCAST,\n+    G_METER_MASTER_KEY,\n+    G_METER_ENCRYPTION_KEY,\n+    G_METER_FIRMWARE_UPDATE_AUTHENTICATION_KEY,\n+    G_METER_OPTICAL_PORT_KEY,\n     PPP_PASSWORD\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MTU0OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455141549", "bodyText": "To be consistent, use Lombok here as well.", "author": "rlemmers", "createdAt": "2020-07-15T15:28:55Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+/**\n+ * TypedSecret stores a secret (not necessarily an encrypted secret), along with it's type.\n+ */\n+public class TypedSecret {\n+    private SecretType secretType;\n+    private String secret;\n+\n+    public String getSecret() {\n+        return this.secret;\n+    }\n+\n+    public SecretType getSecretType() {\n+        return this.secretType;\n+    }\n+\n+    public void setSecret(final String secret) {\n+        this.secret = secret;\n+    }\n+\n+    public void setSecretType(final SecretType secretType) {\n+        this.secretType = secretType;\n+    }", "originalCommit": "27e8524ee4835a63fc556e033e0a2213932c401f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1NzI4NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455157284", "bodyText": "Never use printStackTrace.", "author": "rlemmers", "createdAt": "2020-07-15T15:54:10Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.List;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        if (log.isTraceEnabled()) {\n+            log.trace(getSecretsRequestToString(request));\n+        }\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            SecretTypes soapSecretTypes = request.getSecretTypes();\n+\n+            if (soapSecretTypes == null) {\n+                throw new TechnicalException(\"Missing input: secret types\");\n+            }\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(soapSecretTypes);\n+            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+                    secretTypeList);\n+\n+            TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n+\n+            response.setTypedSecrets(soapTypedSecrets);\n+            response.setResult(OsgpResultType.OK);\n+\n+            log.trace(response.toString());\n+\n+            return response;\n+\n+        } catch (Exception e) {\n+            if (log.isDebugEnabled()) {\n+                e.printStackTrace();", "originalCommit": "27e8524ee4835a63fc556e033e0a2213932c401f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\nindex 7eb42b6e8a..e7d9328893 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n\n@@ -56,8 +56,8 @@ public class SecretManagementEndpoint {\n \n         log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n \n-        if (log.isTraceEnabled()) {\n-            log.trace(getSecretsRequestToString(request));\n+        if (log.isDebugEnabled()) {\n+            log.debug(getSecretsRequestToString(request));\n         }\n \n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1OTAxNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455159015", "bodyText": "The method only throws TechnicalExceptions, so why use OsgpException in the throws clause?", "author": "rlemmers", "createdAt": "2020-07-15T15:56:50Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.List;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {", "originalCommit": "27e8524ee4835a63fc556e033e0a2213932c401f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\nindex 7eb42b6e8a..e7d9328893 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java\n\n@@ -56,8 +56,8 @@ public class SecretManagementEndpoint {\n \n         log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n \n-        if (log.isTraceEnabled()) {\n-            log.trace(getSecretsRequestToString(request));\n+        if (log.isDebugEnabled()) {\n+            log.debug(getSecretsRequestToString(request));\n         }\n \n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MDQ5OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455160499", "bodyText": "We normally use Orika for mapping.", "author": "rlemmers", "createdAt": "2020-07-15T15:59:14Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {", "originalCommit": "27e8524ee4835a63fc556e033e0a2213932c401f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9927d20221b3a973c6afbac6deb042424d94bbcc", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\nindex 2920305149..eba4f67467 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java\n\n@@ -36,11 +36,11 @@ public class SoapEndpointDataTypeConverter {\n         this.encryptionDelegate = defaultEncryptionDelegate;\n     }\n \n-    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) {\n \n         List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList = soapSecretTypes.getSecretType();\n \n-        return soapSecretTypeList.stream().map((soapSecretType) -> convertToSecretType(soapSecretType)).collect(\n+        return soapSecretTypeList.stream().map(soapSecretType -> convertToSecretType(soapSecretType)).collect(\n                 Collectors.toList());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MTE1MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455161151", "bodyText": "Do not use the \"Db\" prefix for repositories and entities.", "author": "rlemmers", "createdAt": "2020-07-15T16:00:18Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {", "originalCommit": "27e8524ee4835a63fc556e033e0a2213932c401f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MzYyMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455163622", "bodyText": "We normally don't use the creation_time (and modification_time) in the code. And we've had some problems in the few places where we did use those columns. Consider using a separate column.\nOr would it be possible to just select \"max(es.id)\" instead of searching the highest creation_time?\nWhen searching a value, both edges (valid_from = :date and valid_to = :date) are excluded. I would expect at least one of those two to be included.", "author": "rlemmers", "createdAt": "2020-07-15T16:04:40Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {\n+    @Query(value = \"SELECT es.id FROM encrypted_secret es \"\n+            + \"LEFT JOIN encryption_key_reference ekr ON es.encryption_key_reference_id = ekr.id \"\n+            + \"WHERE es.device_identification = :deviceIdentification AND es.secret_type = :secretType \"\n+            + \"AND ekr.valid_from < :date AND (ekr.valid_to IS NULL OR ekr.valid_to > :date) \"\n+            + \"ORDER BY es.creation_time DESC, es.id DESC LIMIT 1\", nativeQuery = true)", "originalCommit": "27e8524ee4835a63fc556e033e0a2213932c401f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODA3Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r457478073", "bodyText": "Avoid using the old java.util.Date class. ZonedDateTime is a better one.", "author": "rlemmers", "createdAt": "2020-07-20T15:11:26Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();", "originalCommit": "bf30f647c4161df08ef894f4e80f80be0cc9ba58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyMzkxMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r458023910", "bodyText": "The date is also used in the call to the \"find\" for the DB, so using java.util.Date is still necessary. I'll mark this comment as resolved.", "author": "rlemmers", "createdAt": "2020-07-21T11:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e2b37fab39390dac5960a5a9e780f8b5162b3a54", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 618e001b7d..29d26a3ffb 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -1,9 +1,9 @@\n /**\n  * Copyright 2020 Smart Society Services B.V.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n  */\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODk2MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r457478960", "bodyText": "Your IDE should be able to format this nicely automatically (the same goes for the previous \"@Formatter\" code.", "author": "rlemmers", "createdAt": "2020-07-20T15:12:15Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        final Optional<TypedSecret> current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+        return current.isPresent() ? current.get().getSecret().equals(secret.getSecret()) : false;\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off", "originalCommit": "bf30f647c4161df08ef894f4e80f80be0cc9ba58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2b37fab39390dac5960a5a9e780f8b5162b3a54", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex 618e001b7d..29d26a3ffb 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -1,9 +1,9 @@\n /**\n  * Copyright 2020 Smart Society Services B.V.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n  */\n \n"}}, {"oid": "e2b37fab39390dac5960a5a9e780f8b5162b3a54", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e2b37fab39390dac5960a5a9e780f8b5162b3a54", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' into test_2077", "committedDate": "2020-07-21T06:20:21Z", "type": "commit"}, {"oid": "7eb9a13750cb54d3c2533f1ff3954856805637f9", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/7eb9a13750cb54d3c2533f1ff3954856805637f9", "message": "Merge branch 'development' into test_2077", "committedDate": "2020-07-21T06:20:26Z", "type": "commit"}, {"oid": "13dc1cb72a2a3d9aad4a25da733e2e2fea6172b1", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/13dc1cb72a2a3d9aad4a25da733e2e2fea6172b1", "message": "Revert \"Remove tests for build\"\n\nThis reverts commit bde1481a55eb7557be924ba8e0129113827c4162.", "committedDate": "2020-07-21T07:01:46Z", "type": "commit"}, {"oid": "fb6248e8bf029e15394e1e0fa0cbc2968af22e33", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fb6248e8bf029e15394e1e0fa0cbc2968af22e33", "message": "Disable failing unit tests, solve minor sonar issues", "committedDate": "2020-07-21T07:16:42Z", "type": "commit"}, {"oid": "f41fa2e6cb64e6d9d2ec81a9f40865c97c62f380", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f41fa2e6cb64e6d9d2ec81a9f40865c97c62f380", "message": "SLIM-2077-review", "committedDate": "2020-07-21T08:45:23Z", "type": "commit"}, {"oid": "61d74da39a055a7282e4ed9d471e117ee0e09b7e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/61d74da39a055a7282e4ed9d471e117ee0e09b7e", "message": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java", "committedDate": "2020-07-21T08:55:15Z", "type": "commit"}, {"oid": "e80af70465197a2f500e08fe40b9f74ac3806c95", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e80af70465197a2f500e08fe40b9f74ac3806c95", "message": "Enable unit tests", "committedDate": "2020-07-21T08:55:41Z", "type": "commit"}, {"oid": "ed14ef97bad42284b11ab8117d86d7268281ed11", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ed14ef97bad42284b11ab8117d86d7268281ed11", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' into test_2077", "committedDate": "2020-07-21T08:56:23Z", "type": "commit"}, {"oid": "2eb6ffa103b266a63e4551960e8a9a3bd7e4b654", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2eb6ffa103b266a63e4551960e8a9a3bd7e4b654", "message": "public to private", "committedDate": "2020-07-21T09:00:32Z", "type": "commit"}, {"oid": "1dd5aedca9ddb6ab2bd7cb605bdeb772c3703551", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1dd5aedca9ddb6ab2bd7cb605bdeb772c3703551", "message": "Merge pull request #375 from OSGP/test_2077\n\nTest 2077", "committedDate": "2020-07-21T09:05:45Z", "type": "commit"}, {"oid": "0aaff58885efd4ad4159ccfd59178c055735da22", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0aaff58885efd4ad4159ccfd59178c055735da22", "message": "Added fix for not finding external logback configuration", "committedDate": "2020-07-21T09:09:25Z", "type": "commit"}, {"oid": "386a82357fdf8a0c2f31134a64087b09415bc2f7", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/386a82357fdf8a0c2f31134a64087b09415bc2f7", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-07-21T09:09:45Z", "type": "commit"}, {"oid": "48a8d639fd19c7786b50e3a88ce00d744f804024", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/48a8d639fd19c7786b50e3a88ce00d744f804024", "message": "Removed file appender for integration test", "committedDate": "2020-07-21T09:15:52Z", "type": "commit"}, {"oid": "48660fefc94fb080feaeee024ece5bd90dbf40e4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/48660fefc94fb080feaeee024ece5bd90dbf40e4", "message": "Add context.xml", "committedDate": "2020-07-21T11:15:25Z", "type": "commit"}, {"oid": "1a5975cc121f6272044cb1608e7ea345b97dd06b", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1a5975cc121f6272044cb1608e7ea345b97dd06b", "message": "Sonar Critical on log.error", "committedDate": "2020-07-21T12:36:13Z", "type": "commit"}, {"oid": "9927d20221b3a973c6afbac6deb042424d94bbcc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9927d20221b3a973c6afbac6deb042424d94bbcc", "message": "SLIM-2077-handled-review-comments", "committedDate": "2020-07-21T12:37:47Z", "type": "commit"}, {"oid": "00861f5300efe580d234c91e027f1d6ac6548e75", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/00861f5300efe580d234c91e027f1d6ac6548e75", "message": "Add secret management to pom and database", "committedDate": "2020-07-21T16:27:41Z", "type": "commit"}, {"oid": "375f0f01164b4a33bf9d0619b5abe945c00eb216", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/375f0f01164b4a33bf9d0619b5abe945c00eb216", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-07-21T16:28:10Z", "type": "commit"}, {"oid": "0cfc3079ae9e5917f37f5fe281cd3fba37461d56", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0cfc3079ae9e5917f37f5fe281cd3fba37461d56", "message": "Add missing db connection file", "committedDate": "2020-07-21T16:38:46Z", "type": "commit"}, {"oid": "4dc00294fff56796ae7c4af8e8099e75721879f8", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4dc00294fff56796ae7c4af8e8099e75721879f8", "message": "Solve db issues", "committedDate": "2020-07-21T17:15:01Z", "type": "commit"}, {"oid": "0fafd2b0fb242615222d9e0eee0cf61329ca5797", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0fafd2b0fb242615222d9e0eee0cf61329ca5797", "message": "Improve inserts", "committedDate": "2020-07-21T20:32:11Z", "type": "commit"}, {"oid": "caae04725c6f4c967a2c7e147b1eceffe63f2018", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/caae04725c6f4c967a2c7e147b1eceffe63f2018", "message": "change key file in properties", "committedDate": "2020-07-22T06:35:37Z", "type": "commit"}, {"oid": "836c59ef390bd4af38db8b9bdece1fe5e3d57eae", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/836c59ef390bd4af38db8b9bdece1fe5e3d57eae", "message": "Adapted context.xml and logging", "committedDate": "2020-07-22T07:23:39Z", "type": "commit"}, {"oid": "8caac38ef83c6bf8385b6f181d95b8d3535e95ba", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8caac38ef83c6bf8385b6f181d95b8d3535e95ba", "message": "Use generic keystore and truststore", "committedDate": "2020-07-22T09:47:00Z", "type": "commit"}, {"oid": "80dc367d9c7e29c1ae0a2eddbc73e10099344762", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/80dc367d9c7e29c1ae0a2eddbc73e10099344762", "message": "Set correct truststore password", "committedDate": "2020-07-22T11:17:34Z", "type": "commit"}, {"oid": "d74e3b3f5af25bee0f9ceec7e7ed907f82c15def", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d74e3b3f5af25bee0f9ceec7e7ed907f82c15def", "message": "SLIM-2077-option-no-hostname-verifier", "committedDate": "2020-07-22T13:47:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxMzc1MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r458813751", "bodyText": "Remove the literal \"false\" boolean value.", "author": "jenkins-ip-10-4-24-184", "createdAt": "2020-07-22T13:59:31Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright 2016 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.config;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.http.conn.ssl.NoopHostnameVerifier;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.soap.security.support.KeyManagersFactoryBean;\n+import org.springframework.ws.soap.security.support.KeyStoreFactoryBean;\n+import org.springframework.ws.soap.security.support.TrustManagersFactoryBean;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+@Configuration\n+public class SoapClientConfig {\n+\n+    private static final String XSD_SCHEMA_PACKAGE = \"org.opensmartgridplatform.ws.schema.core.secret.management\";\n+\n+    @Value(\"${soapclient.use.client.auth:false}\")\n+    private String useClientAuth;\n+\n+    @Value(\"${soapclient.use.hostname.verifier:true}\")\n+    private String useHostNameVerifier;\n+\n+    @Value(\"${soapclient.default-uri}\")\n+\n+    private String defaultUri;\n+\n+    @Value(\"${soapclient.ssl.trust-store}\")\n+    private Resource trustStore;\n+\n+    @Value(\"${soapclient.ssl.trust-store-password}\")\n+    private String trustStorePassword;\n+\n+    @Value(\"${soapclient.ssl.key-store}\")\n+    private Resource keyStore;\n+\n+    @Value(\"${soapclient.ssl.key-store-password}\")\n+    private String keyStorePassword;\n+\n+    @Value(\"${soapclient.ssl.key-password}\")\n+    private String keyPassword;\n+\n+    @Value(\"${encryption.soap.rsa.private.key.resource}\")\n+    private Resource soapRsaPrivateKeyResource;\n+\n+    @Bean\n+    Jaxb2Marshaller soapClientJaxb2Marshaller() {\n+        Jaxb2Marshaller jaxb2Marshaller = new Jaxb2Marshaller();\n+        jaxb2Marshaller.setContextPath(XSD_SCHEMA_PACKAGE);\n+        return jaxb2Marshaller;\n+    }\n+\n+    @Bean\n+    public WebServiceTemplate webServiceTemplate() throws Exception {\n+        WebServiceTemplate webServiceTemplate = new WebServiceTemplate();\n+        webServiceTemplate.setMarshaller(soapClientJaxb2Marshaller());\n+        webServiceTemplate.setUnmarshaller(soapClientJaxb2Marshaller());\n+        webServiceTemplate.setDefaultUri(defaultUri);\n+\n+        if (Boolean.parseBoolean(useClientAuth)) {\n+            webServiceTemplate.setMessageSender(httpsUrlConnectionMessageSender());\n+        }\n+\n+        return webServiceTemplate;\n+    }\n+\n+    @Bean\n+    public HttpsUrlConnectionMessageSender httpsUrlConnectionMessageSender() throws Exception {\n+        HttpsUrlConnectionMessageSender httpsUrlConnectionMessageSender =\n+                new HttpsUrlConnectionMessageSender();\n+        // set the trust store(s)\n+        httpsUrlConnectionMessageSender.setTrustManagers(trustManagersFactoryBean().getObject());\n+        // set the key store(s)\n+        httpsUrlConnectionMessageSender.setKeyManagers(keyManagersFactoryBean().getObject());\n+\n+        if (Boolean.parseBoolean(useHostNameVerifier) == false) {", "originalCommit": "d74e3b3f5af25bee0f9ceec7e7ed907f82c15def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a289d4567ed4ce79a06d47423208a05518ae88a3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a289d4567ed4ce79a06d47423208a05518ae88a3", "message": "Skip PR failing tests", "committedDate": "2020-07-22T14:38:16Z", "type": "commit"}, {"oid": "c56ebb4fb0b904c86e87bf75229b202394da40e2", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c56ebb4fb0b904c86e87bf75229b202394da40e2", "message": "Undo groovy change for release branch", "committedDate": "2020-07-22T14:49:44Z", "type": "commit"}, {"oid": "a6ae07aa56913797c686daf3169e8827f0c26c7c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a6ae07aa56913797c686daf3169e8827f0c26c7c", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-05-27T13:35:21Z", "type": "commit"}, {"oid": "c572ca0cb59b0a78b41bb9fc353c564f1dc9c3b8", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c572ca0cb59b0a78b41bb9fc353c564f1dc9c3b8", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-05-28T16:03:00Z", "type": "commit"}, {"oid": "de9edc52ccfbfe6dd21a3a06aec258773c1112e4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/de9edc52ccfbfe6dd21a3a06aec258773c1112e4", "message": "SLIM-2460-implement-soap-service-with-encryption", "committedDate": "2020-06-03T08:03:13Z", "type": "commit"}, {"oid": "ca2f0172359d2a78bf5537ee4fb1bc9154e9d7a3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ca2f0172359d2a78bf5537ee4fb1bc9154e9d7a3", "message": "SLIM-2460-create-soap-service-with-encryption", "committedDate": "2020-06-03T13:01:48Z", "type": "commit"}, {"oid": "c90d7d8eb4a488336e3fe18a8e572ad23fef0d03", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c90d7d8eb4a488336e3fe18a8e572ad23fef0d03", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-06-03T13:26:16Z", "type": "commit"}, {"oid": "9ef81a677d5bc8a4d7c6f55b4e18b93fbd55104f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9ef81a677d5bc8a4d7c6f55b4e18b93fbd55104f", "message": "typo fixed", "committedDate": "2020-06-03T13:43:42Z", "type": "commit"}, {"oid": "78c2a4b157b69e261b2eac9de64059a833912ac7", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/78c2a4b157b69e261b2eac9de64059a833912ac7", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-06-03T16:52:36Z", "type": "commit"}, {"oid": "bbec761fdf93700bbf98ec3da77f034512bdc057", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bbec761fdf93700bbf98ec3da77f034512bdc057", "message": "Initial version of secret management service and repo's", "committedDate": "2020-06-03T17:20:06Z", "type": "commit"}, {"oid": "9549e751bc945bd3c979eee42597ca01cfdda6be", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9549e751bc945bd3c979eee42597ca01cfdda6be", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application\n\n\u0001 Conflicts:\n\u0001\tosgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/domain/TypedSecret.java\n\u0001\tosgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "committedDate": "2020-06-03T17:22:06Z", "type": "commit"}, {"oid": "7234fa91d298770ee1488748cba73c8109bd2d2e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/7234fa91d298770ee1488748cba73c8109bd2d2e", "message": "Removed generate secret method for now", "committedDate": "2020-06-03T17:23:51Z", "type": "commit"}, {"oid": "94620cbaaea7f9956a99e974bb17c56799546b04", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/94620cbaaea7f9956a99e974bb17c56799546b04", "message": "Added encryption/decryption & exception handling to service", "committedDate": "2020-06-04T12:33:29Z", "type": "commit"}, {"oid": "ae6d8b625253702c1f3d9cfcf48cd6b269b17fe3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ae6d8b625253702c1f3d9cfcf48cd6b269b17fe3", "message": "Changes resulting from discussion with Erik", "committedDate": "2020-06-04T14:09:33Z", "type": "commit"}, {"oid": "e841604b5a1ae073a37b2130205543d07d03d650", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e841604b5a1ae073a37b2130205543d07d03d650", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-06-04T16:35:38Z", "type": "commit"}, {"oid": "d1bfa13f6d3ec99adb6f83676196e50b4179d309", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d1bfa13f6d3ec99adb6f83676196e50b4179d309", "message": "Added dynamic encryption provider type key lookup", "committedDate": "2020-06-05T08:39:59Z", "type": "commit"}, {"oid": "f7ec2d7b8fe90a04383a7fcd3c549ff67a61147c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f7ec2d7b8fe90a04383a7fcd3c549ff67a61147c", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application\n\n\u0001 Conflicts:\n\u0001\tosgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "committedDate": "2020-06-05T08:42:15Z", "type": "commit"}, {"oid": "573c9654d09454e8f3bd4f8e8a2478f3718f0c9d", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/573c9654d09454e8f3bd4f8e8a2478f3718f0c9d", "message": "Changes to accomodate key dereferencing and code cleanup/shuffle", "committedDate": "2020-06-05T09:22:14Z", "type": "commit"}, {"oid": "c4644bd6bd482510e0b0aeb48f9182b2bccea04b", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c4644bd6bd482510e0b0aeb48f9182b2bccea04b", "message": "Added repository IT & fixed persistency related problems", "committedDate": "2020-06-08T12:32:47Z", "type": "commit"}, {"oid": "6e2f5d44bd07c0cc983b6a46ee71062e9fba4c8e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6e2f5d44bd07c0cc983b6a46ee71062e9fba4c8e", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-06-08T12:42:54Z", "type": "commit"}, {"oid": "1c6247d34a9a0d4149adcd00a88dfd42d7dbf252", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1c6247d34a9a0d4149adcd00a88dfd42d7dbf252", "message": "SLIM-2077 related. fix in DbEncryptionKeyReference", "committedDate": "2020-06-08T13:02:39Z", "type": "commit"}, {"oid": "e4204c55c3f81a81bf061c1d05841b5e93c57743", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e4204c55c3f81a81bf061c1d05841b5e93c57743", "message": "SLIM-2077 first test", "committedDate": "2020-06-08T13:27:25Z", "type": "commit"}, {"oid": "95b4fa74b8bf4a78f06aca7ff2e7c5003f9e9e5b", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/95b4fa74b8bf4a78f06aca7ff2e7c5003f9e9e5b", "message": "Added encryption provider type to repo find method", "committedDate": "2020-06-08T14:41:55Z", "type": "commit"}, {"oid": "35cef18e8a0be42202668ff18ac6f65513545ee0", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/35cef18e8a0be42202668ff18ac6f65513545ee0", "message": "Added configuralbe encryption type", "committedDate": "2020-06-08T14:58:29Z", "type": "commit"}, {"oid": "5dfcb4ac9595b4649fb694be05d391ecd0957863", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5dfcb4ac9595b4649fb694be05d391ecd0957863", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-06-08T15:14:46Z", "type": "commit"}, {"oid": "cc974d5f431c339e46863218884e1b7aba54e7cf", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/cc974d5f431c339e46863218884e1b7aba54e7cf", "message": "Moved IT and changed test default to JRE encryption", "committedDate": "2020-06-08T15:41:20Z", "type": "commit"}, {"oid": "6837bff9ed177a6c16482ca45e1b8c7da535c57b", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6837bff9ed177a6c16482ca45e1b8c7da535c57b", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-08T15:41:28Z", "type": "commit"}, {"oid": "4bef9f50a22bcab1654445d904f9081b4233cadc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4bef9f50a22bcab1654445d904f9081b4233cadc", "message": "SLIM-2077 improvements on integration test", "committedDate": "2020-06-08T16:42:09Z", "type": "commit"}, {"oid": "0ee08ed09848af3c18278da8652221af4b8ae93f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0ee08ed09848af3c18278da8652221af4b8ae93f", "message": "SLIM-2077-improved-tests-and-added-keys-for-test", "committedDate": "2020-06-09T12:38:40Z", "type": "commit"}, {"oid": "335d534e55396bbfefc8ff8e1db4e49fce37f914", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/335d534e55396bbfefc8ff8e1db4e49fce37f914", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-06-09T12:57:24Z", "type": "commit"}, {"oid": "6ff6a5dc51cd86148a4f05c298aa8d742a353732", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6ff6a5dc51cd86148a4f05c298aa8d742a353732", "message": "SLIM-2077-create-new-secret-mgmt-application", "committedDate": "2020-06-09T13:05:03Z", "type": "commit"}, {"oid": "123a5296f26f4ec1207e233936a1dcf8b55d44a7", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/123a5296f26f4ec1207e233936a1dcf8b55d44a7", "message": "SLIM-2077-added-custom-exception-handling", "committedDate": "2020-06-09T16:56:45Z", "type": "commit"}, {"oid": "b067a401782db58af46e77857bcf923e47ed3522", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b067a401782db58af46e77857bcf923e47ed3522", "message": "SLIM-2077-fixed-tests", "committedDate": "2020-06-10T09:11:29Z", "type": "commit"}, {"oid": "c763ff5ac10305ce4687ad558c5164f9d9a9936a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c763ff5ac10305ce4687ad558c5164f9d9a9936a", "message": "IT and unit tests (work in progress)", "committedDate": "2020-06-10T10:00:07Z", "type": "commit"}, {"oid": "2c3aa050dbdaa79905f50d38ef633521773fe6ae", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2c3aa050dbdaa79905f50d38ef633521773fe6ae", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-10T10:00:15Z", "type": "commit"}, {"oid": "1031358c5e3d07d2e966f8a725ab5ea2dc4ca553", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1031358c5e3d07d2e966f8a725ab5ea2dc4ca553", "message": "Finished unit test", "committedDate": "2020-06-10T13:19:50Z", "type": "commit"}, {"oid": "dd286e4034d78b47a34e3283c605fc7940862e1b", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/dd286e4034d78b47a34e3283c605fc7940862e1b", "message": "SLIM-2077-added-test-with-mock-server", "committedDate": "2020-06-10T13:45:25Z", "type": "commit"}, {"oid": "9048680727bb4b8f907c540f806c56fe3a238520", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9048680727bb4b8f907c540f806c56fe3a238520", "message": "Added test asserts on secret stored to DB", "committedDate": "2020-06-10T13:49:50Z", "type": "commit"}, {"oid": "218754b1619a5258596fc0c65d57a4631697c016", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/218754b1619a5258596fc0c65d57a4631697c016", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-10T13:50:08Z", "type": "commit"}, {"oid": "cc282595dc80429c47adf8769dc12416e01c42ec", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/cc282595dc80429c47adf8769dc12416e01c42ec", "message": "Attempt IT", "committedDate": "2020-06-10T15:19:30Z", "type": "commit"}, {"oid": "0c6103b8275a874d07dec56c63fbde753ebe96fa", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0c6103b8275a874d07dec56c63fbde753ebe96fa", "message": "Setup roundtrip IT using SOAP", "committedDate": "2020-06-10T19:55:47Z", "type": "commit"}, {"oid": "03b1229222c5cab8f9378d3cf5b66add668d3c80", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/03b1229222c5cab8f9378d3cf5b66add668d3c80", "message": "Error message improved", "committedDate": "2020-06-10T19:56:50Z", "type": "commit"}, {"oid": "ea6c5a10333ac689e00b79a252b53311c04650e5", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ea6c5a10333ac689e00b79a252b53311c04650e5", "message": "Improved IT (setup, testdata, request resource)", "committedDate": "2020-06-11T06:48:22Z", "type": "commit"}, {"oid": "9974e9b33cd1c3469a90dca99f74b3da1d9286fa", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9974e9b33cd1c3469a90dca99f74b3da1d9286fa", "message": "Added expected response (context todo); added test request and response folders", "committedDate": "2020-06-11T08:39:58Z", "type": "commit"}, {"oid": "6c020b390c09cf3b5a9a53fc34386f4d2bee4de8", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6c020b390c09cf3b5a9a53fc34386f4d2bee4de8", "message": "SLIM-2077-added-test-with-mocked-soap-client", "committedDate": "2020-06-11T11:45:48Z", "type": "commit"}, {"oid": "5b485c162c1959ec57929c2f6ca32197981c85ee", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5b485c162c1959ec57929c2f6ca32197981c85ee", "message": "SLIM-2077-added-store-secrets-test", "committedDate": "2020-06-11T12:32:42Z", "type": "commit"}, {"oid": "f1c46c2cc45c6fdf4e411d6cf9fa6291af4b4064", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f1c46c2cc45c6fdf4e411d6cf9fa6291af4b4064", "message": "SLIM-2077-added-exception-handling-tests", "committedDate": "2020-06-11T14:47:03Z", "type": "commit"}, {"oid": "b26b3441e03e9e6ea69d1357dca43742eb8c1671", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b26b3441e03e9e6ea69d1357dca43742eb8c1671", "message": "Added repo IT for key repo", "committedDate": "2020-06-11T16:01:27Z", "type": "commit"}, {"oid": "75edd80300464cb23214b936f6a45bf2ed244f8c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/75edd80300464cb23214b936f6a45bf2ed244f8c", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-11T16:01:38Z", "type": "commit"}, {"oid": "37b67777bbeb6633975b6209ba153918410b6c29", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/37b67777bbeb6633975b6209ba153918410b6c29", "message": "SLIM-2077 load keyfile on init and coverage improvents", "committedDate": "2020-06-11T17:58:49Z", "type": "commit"}, {"oid": "e5b1a215349e862c826c68c578577058d0911c51", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e5b1a215349e862c826c68c578577058d0911c51", "message": "Initial Flyway script", "committedDate": "2020-06-12T12:33:00Z", "type": "commit"}, {"oid": "fef9835bf6fd2981b8a8836f14994d8fc983e1fe", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fef9835bf6fd2981b8a8836f14994d8fc983e1fe", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-15T09:28:28Z", "type": "commit"}, {"oid": "ea34b33d499c78a6a2fff588d96dc0f801f43702", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ea34b33d499c78a6a2fff588d96dc0f801f43702", "message": "Added Postgresql and Flyway configuration", "committedDate": "2020-06-15T14:43:21Z", "type": "commit"}, {"oid": "3d3b7f5ef29b7b75a73a9de81a8184b7d18d335b", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3d3b7f5ef29b7b75a73a9de81a8184b7d18d335b", "message": "Added provisional DB creation script", "committedDate": "2020-06-15T14:45:01Z", "type": "commit"}, {"oid": "07ca1dac658849263aa0889753d22931f40661b7", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/07ca1dac658849263aa0889753d22931f40661b7", "message": "Fixed bug regarding NOT NULL constraint for creation time", "committedDate": "2020-06-15T15:02:07Z", "type": "commit"}, {"oid": "9b0d5b00acb60d4d3e1a5f9f65293c7137c7b096", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9b0d5b00acb60d4d3e1a5f9f65293c7137c7b096", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application\n\n\u0001 Conflicts:\n\u0001\tosgp/platform/osgp-secret-management/src/main/resources/application.properties", "committedDate": "2020-06-15T15:07:07Z", "type": "commit"}, {"oid": "5b3c5caa21fdd9249057885df7acef4957fc0194", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5b3c5caa21fdd9249057885df7acef4957fc0194", "message": "Removed constraint on unique secrets; added check on adding existing (identical) secret; changed retrieval (get latest valid secret)", "committedDate": "2020-06-15T20:30:58Z", "type": "commit"}, {"oid": "0f76ff094848996ba8b2b67633587ab75d772241", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0f76ff094848996ba8b2b67633587ab75d772241", "message": "Changed logging levels/output for ITs", "committedDate": "2020-06-15T20:32:28Z", "type": "commit"}, {"oid": "61bd836485bb0a583aa6ef0dcce84b842ff3553e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/61bd836485bb0a583aa6ef0dcce84b842ff3553e", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-16T14:27:45Z", "type": "commit"}, {"oid": "6a1dfacff715203d3349014a6ca9091182c227e6", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6a1dfacff715203d3349014a6ca9091182c227e6", "message": "SLIM-2253-use-secret-mangement-for-secure-keys", "committedDate": "2020-06-16T16:25:23Z", "type": "commit"}, {"oid": "6bd41c8e1f007b8b929c4aea46c78776fc50c4c6", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6bd41c8e1f007b8b929c4aea46c78776fc50c4c6", "message": "Fixed bug (regarding incorrect query generation for DB paging) by changing repo query", "committedDate": "2020-06-17T11:25:24Z", "type": "commit"}, {"oid": "58645014655aca64d9497b68c90ca8e8d454d4c7", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/58645014655aca64d9497b68c90ca8e8d454d4c7", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-17T11:58:36Z", "type": "commit"}, {"oid": "e652282d05d5f6f3c27a2f9e3947399b881baee4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e652282d05d5f6f3c27a2f9e3947399b881baee4", "message": "Fixed inconsistent ITs caused by timing issue in query", "committedDate": "2020-06-18T09:08:06Z", "type": "commit"}, {"oid": "3a7a0be4830c7e0923e322d2174948301f10dcfc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3a7a0be4830c7e0923e322d2174948301f10dcfc", "message": "SLIM-2253-use-secret-mangement-for-secure-keys", "committedDate": "2020-06-18T09:20:35Z", "type": "commit"}, {"oid": "e123e77e81814331fe614a56b63e44a016b1a852", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e123e77e81814331fe614a56b63e44a016b1a852", "message": "Changed repo query (no encryption provider type parameter)", "committedDate": "2020-06-18T09:52:08Z", "type": "commit"}, {"oid": "1b5fa799ca78b43ee9f0a1e5ee6658675c924f27", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1b5fa799ca78b43ee9f0a1e5ee6658675c924f27", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-18T10:00:38Z", "type": "commit"}, {"oid": "8db06fd8c0d89cc552ae0a354dbc6391138dc881", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8db06fd8c0d89cc552ae0a354dbc6391138dc881", "message": "SLIM-2253-use-secret-mangement-for-secure-keys", "committedDate": "2020-06-18T10:05:31Z", "type": "commit"}, {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/25adddc4a129c95cb5e571f6164e19c3a9534806", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-18T10:07:04Z", "type": "commit"}, {"oid": "5ab3d8f8592aced8f3e6a12f99d9b45cb1ea2370", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5ab3d8f8592aced8f3e6a12f99d9b45cb1ea2370", "message": "SLIM-2253-use-secret-mangement-for-secure-keys", "committedDate": "2020-06-18T11:30:49Z", "type": "commit"}, {"oid": "8f82a15c92e135420a06bde377856c0f607a6d93", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8f82a15c92e135420a06bde377856c0f607a6d93", "message": "SLIM-2253-use-secret-mangement-for-secure-keys", "committedDate": "2020-06-18T14:06:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMzI1NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442213255", "bodyText": "dit is gegenereerde source code, deze zou niet moeten worden ingechecked.", "author": "coendamen", "createdAt": "2020-06-18T13:10:21Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecrets.java", "diffHunk": "@@ -0,0 +1,76 @@\n+//", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecrets.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecrets.java\ndeleted file mode 100644\nindex 22f35a26c4..0000000000\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecrets.java\n+++ /dev/null\n\n@@ -1,76 +0,0 @@\n-//\n-// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 \n-// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \n-// Any modifications to this file will be lost upon recompilation of the source schema. \n-// Generated on: 2020.06.18 at 10:59:28 AM CEST \n-//\n-\n-\n-package org.opensmartgridplatform.schemas.security.secretmanagement._2020._05;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-\n-/**\n- * <p>Java class for TypedSecrets complex type.\n- * \n- * <p>The following schema fragment specifies the expected content contained within this class.\n- * \n- * <pre>\n- * &lt;complexType name=\"TypedSecrets\"&gt;\n- *   &lt;complexContent&gt;\n- *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n- *       &lt;sequence maxOccurs=\"16\"&gt;\n- *         &lt;element name=\"TypedSecret\" type=\"{http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05}TypedSecret\"/&gt;\n- *       &lt;/sequence&gt;\n- *     &lt;/restriction&gt;\n- *   &lt;/complexContent&gt;\n- * &lt;/complexType&gt;\n- * </pre>\n- * \n- * \n- */\n-@XmlAccessorType(XmlAccessType.FIELD)\n-@XmlType(name = \"TypedSecrets\", propOrder = {\n-    \"typedSecret\"\n-})\n-public class TypedSecrets {\n-\n-    @XmlElement(name = \"TypedSecret\", required = true)\n-    protected List<TypedSecret> typedSecret;\n-\n-    /**\n-     * Gets the value of the typedSecret property.\n-     * \n-     * <p>\n-     * This accessor method returns a reference to the live list,\n-     * not a snapshot. Therefore any modification you make to the\n-     * returned list will be present inside the JAXB object.\n-     * This is why there is not a <CODE>set</CODE> method for the typedSecret property.\n-     * \n-     * <p>\n-     * For example, to add a new item, do as follows:\n-     * <pre>\n-     *    getTypedSecret().add(newItem);\n-     * </pre>\n-     * \n-     * \n-     * <p>\n-     * Objects of the following type(s) are allowed in the list\n-     * {@link TypedSecret }\n-     * \n-     * \n-     */\n-    public List<TypedSecret> getTypedSecret() {\n-        if (typedSecret == null) {\n-            typedSecret = new ArrayList<TypedSecret>();\n-        }\n-        return this.typedSecret;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMzU5Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442213592", "bodyText": "dit is gegenereerde code.", "author": "coendamen", "createdAt": "2020-06-18T13:10:51Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+//", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/package-info.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/package-info.java\ndeleted file mode 100644\nindex 9c5315ab36..0000000000\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/package-info.java\n+++ /dev/null\n\n@@ -1,9 +0,0 @@\n-//\n-// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 \n-// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \n-// Any modifications to this file will be lost upon recompilation of the source schema. \n-// Generated on: 2020.06.18 at 10:59:28 AM CEST \n-//\n-\n-@javax.xml.bind.annotation.XmlSchema(namespace = \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)\n-package org.opensmartgridplatform.schemas.security.secretmanagement._2020._05;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMzg1Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442213853", "bodyText": "gegenereerd.", "author": "coendamen", "createdAt": "2020-06-18T13:11:15Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecret.java", "diffHunk": "@@ -0,0 +1,99 @@\n+//", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecret.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecret.java\ndeleted file mode 100644\nindex 13d12f618e..0000000000\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecret.java\n+++ /dev/null\n\n@@ -1,99 +0,0 @@\n-//\n-// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 \n-// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \n-// Any modifications to this file will be lost upon recompilation of the source schema. \n-// Generated on: 2020.06.18 at 10:59:28 AM CEST \n-//\n-\n-\n-package org.opensmartgridplatform.schemas.security.secretmanagement._2020._05;\n-\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlSchemaType;\n-import javax.xml.bind.annotation.XmlType;\n-\n-\n-/**\n- * <p>Java class for TypedSecret complex type.\n- * \n- * <p>The following schema fragment specifies the expected content contained within this class.\n- * \n- * <pre>\n- * &lt;complexType name=\"TypedSecret\"&gt;\n- *   &lt;complexContent&gt;\n- *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n- *       &lt;sequence&gt;\n- *         &lt;element name=\"Type\" type=\"{http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05}SecretType\"/&gt;\n- *         &lt;element name=\"Secret\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/&gt;\n- *       &lt;/sequence&gt;\n- *     &lt;/restriction&gt;\n- *   &lt;/complexContent&gt;\n- * &lt;/complexType&gt;\n- * </pre>\n- * \n- * \n- */\n-@XmlAccessorType(XmlAccessType.FIELD)\n-@XmlType(name = \"TypedSecret\", propOrder = {\n-    \"type\",\n-    \"secret\"\n-})\n-public class TypedSecret {\n-\n-    @XmlElement(name = \"Type\", required = true)\n-    @XmlSchemaType(name = \"string\")\n-    protected SecretType type;\n-    @XmlElement(name = \"Secret\", required = true)\n-    protected String secret;\n-\n-    /**\n-     * Gets the value of the type property.\n-     * \n-     * @return\n-     *     possible object is\n-     *     {@link SecretType }\n-     *     \n-     */\n-    public SecretType getType() {\n-        return type;\n-    }\n-\n-    /**\n-     * Sets the value of the type property.\n-     * \n-     * @param value\n-     *     allowed object is\n-     *     {@link SecretType }\n-     *     \n-     */\n-    public void setType(SecretType value) {\n-        this.type = value;\n-    }\n-\n-    /**\n-     * Gets the value of the secret property.\n-     * \n-     * @return\n-     *     possible object is\n-     *     {@link String }\n-     *     \n-     */\n-    public String getSecret() {\n-        return secret;\n-    }\n-\n-    /**\n-     * Sets the value of the secret property.\n-     * \n-     * @param value\n-     *     allowed object is\n-     *     {@link String }\n-     *     \n-     */\n-    public void setSecret(String value) {\n-        this.secret = value;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNDA1Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442214052", "bodyText": "gegenereerd.", "author": "coendamen", "createdAt": "2020-06-18T13:11:34Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TechnicalFault.java", "diffHunk": "@@ -0,0 +1,155 @@\n+//", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TechnicalFault.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TechnicalFault.java\ndeleted file mode 100644\nindex e5c45dfc9b..0000000000\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TechnicalFault.java\n+++ /dev/null\n\n@@ -1,155 +0,0 @@\n-//\n-// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 \n-// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \n-// Any modifications to this file will be lost upon recompilation of the source schema. \n-// Generated on: 2020.06.18 at 10:59:28 AM CEST \n-//\n-\n-\n-package org.opensmartgridplatform.schemas.security.secretmanagement._2020._05;\n-\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-\n-/**\n- * <p>Java class for anonymous complex type.\n- * \n- * <p>The following schema fragment specifies the expected content contained within this class.\n- * \n- * <pre>\n- * &lt;complexType&gt;\n- *   &lt;complexContent&gt;\n- *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n- *       &lt;sequence&gt;\n- *         &lt;element name=\"Message\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/&gt;\n- *         &lt;element name=\"Component\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/&gt;\n- *         &lt;element name=\"InnerException\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/&gt;\n- *         &lt;element name=\"InnerMessage\" type=\"{http://www.w3.org/2001/XMLSchema}string\"/&gt;\n- *       &lt;/sequence&gt;\n- *     &lt;/restriction&gt;\n- *   &lt;/complexContent&gt;\n- * &lt;/complexType&gt;\n- * </pre>\n- * \n- * \n- */\n-@XmlAccessorType(XmlAccessType.FIELD)\n-@XmlType(name = \"\", propOrder = {\n-    \"message\",\n-    \"component\",\n-    \"innerException\",\n-    \"innerMessage\"\n-})\n-@XmlRootElement(name = \"TechnicalFault\")\n-public class TechnicalFault {\n-\n-    @XmlElement(name = \"Message\", required = true)\n-    protected String message;\n-    @XmlElement(name = \"Component\", required = true)\n-    protected String component;\n-    @XmlElement(name = \"InnerException\", required = true)\n-    protected String innerException;\n-    @XmlElement(name = \"InnerMessage\", required = true)\n-    protected String innerMessage;\n-\n-    /**\n-     * Gets the value of the message property.\n-     * \n-     * @return\n-     *     possible object is\n-     *     {@link String }\n-     *     \n-     */\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    /**\n-     * Sets the value of the message property.\n-     * \n-     * @param value\n-     *     allowed object is\n-     *     {@link String }\n-     *     \n-     */\n-    public void setMessage(String value) {\n-        this.message = value;\n-    }\n-\n-    /**\n-     * Gets the value of the component property.\n-     * \n-     * @return\n-     *     possible object is\n-     *     {@link String }\n-     *     \n-     */\n-    public String getComponent() {\n-        return component;\n-    }\n-\n-    /**\n-     * Sets the value of the component property.\n-     * \n-     * @param value\n-     *     allowed object is\n-     *     {@link String }\n-     *     \n-     */\n-    public void setComponent(String value) {\n-        this.component = value;\n-    }\n-\n-    /**\n-     * Gets the value of the innerException property.\n-     * \n-     * @return\n-     *     possible object is\n-     *     {@link String }\n-     *     \n-     */\n-    public String getInnerException() {\n-        return innerException;\n-    }\n-\n-    /**\n-     * Sets the value of the innerException property.\n-     * \n-     * @param value\n-     *     allowed object is\n-     *     {@link String }\n-     *     \n-     */\n-    public void setInnerException(String value) {\n-        this.innerException = value;\n-    }\n-\n-    /**\n-     * Gets the value of the innerMessage property.\n-     * \n-     * @return\n-     *     possible object is\n-     *     {@link String }\n-     *     \n-     */\n-    public String getInnerMessage() {\n-        return innerMessage;\n-    }\n-\n-    /**\n-     * Sets the value of the innerMessage property.\n-     * \n-     * @param value\n-     *     allowed object is\n-     *     {@link String }\n-     *     \n-     */\n-    public void setInnerMessage(String value) {\n-        this.innerMessage = value;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNTE4Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442215182", "bodyText": "why is a qualifier needed ?", "author": "coendamen", "createdAt": "2020-06-18T13:13:23Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java", "diffHunk": "@@ -35,6 +36,7 @@\n     private ReplaceKeyCommandExecutor replaceKeyCommandExecutor;\n \n     @Autowired\n+    @Qualifier(\"secretMangementService\")", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java\nindex 3ace614331..262b89d62e 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java\n\n@@ -36,7 +36,7 @@ public class GenerateAndReplaceKeyCommandExecutor extends AbstractCommandExecuto\n     private ReplaceKeyCommandExecutor replaceKeyCommandExecutor;\n \n     @Autowired\n-    @Qualifier(\"secretMangementService\")\n+    @Qualifier(\"secretManagementService\")\n     private SecurityKeyService securityKeyService;\n \n     public GenerateAndReplaceKeyCommandExecutor() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxODgwNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442218804", "bodyText": "I would expect Spring injection here.", "author": "coendamen", "createdAt": "2020-06-18T13:18:59Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n+\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.stereotype.Component;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+\n+/**\n+ * SOAP Client for SecretManagement\n+ */\n+@Component\n+public class SecretManagementClient {\n+\n+    private final WebServiceTemplate webServiceTemplate;\n+\n+    SecretManagementClient() {\n+\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+        // this package must match the package in the <generatePackage> specified in\n+        // pom.xml\n+        marshaller.setContextPath(\"org.opensmartgridplatform.schemas.security.secretmanagement._2020._05\");\n+\n+        this.webServiceTemplate = new WebServiceTemplate(marshaller);", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\nindex 71759b7926..d54079a3b2 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\n\n@@ -1,11 +1,12 @@\n package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n \n import org.apache.commons.lang3.NotImplementedException;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n-import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n import org.springframework.ws.client.core.WebServiceTemplate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxOTMyOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442219328", "bodyText": "hardcoded url. on non https channel", "author": "coendamen", "createdAt": "2020-06-18T13:19:46Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n+\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.stereotype.Component;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+\n+/**\n+ * SOAP Client for SecretManagement\n+ */\n+@Component\n+public class SecretManagementClient {\n+\n+    private final WebServiceTemplate webServiceTemplate;\n+\n+    SecretManagementClient() {\n+\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+        // this package must match the package in the <generatePackage> specified in\n+        // pom.xml\n+        marshaller.setContextPath(\"org.opensmartgridplatform.schemas.security.secretmanagement._2020._05\");\n+\n+        this.webServiceTemplate = new WebServiceTemplate(marshaller);\n+    }\n+\n+    public GetSecretsResponse getSecretsRequest(GetSecretsRequest request) {\n+\n+        return (GetSecretsResponse) this.webServiceTemplate\n+                .marshalSendAndReceive(\"http://localhost:8080/osgp-secret-management/ws/SecretManagement\", request);", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\nindex 71759b7926..d54079a3b2 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java\n\n@@ -1,11 +1,12 @@\n package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n \n import org.apache.commons.lang3.NotImplementedException;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n-import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n import org.springframework.ws.client.core.WebServiceTemplate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDI5NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442220294", "bodyText": "value param is redundant.", "author": "coendamen", "createdAt": "2020-06-18T13:21:14Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDQ5Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442220492", "bodyText": "also name is misspelled.", "author": "coendamen", "createdAt": "2020-06-18T13:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1OTI3Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442359273", "bodyText": "Wow, eagle-eye! +1", "author": "jandik", "createdAt": "2020-06-18T16:38:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2ODIyOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444068228", "bodyText": "hahaha +1", "author": "jboon", "createdAt": "2020-06-23T08:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex e9acf98139..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -1,44 +1,44 @@\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n+import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.codec.binary.Hex;\n import org.apache.commons.lang3.NotImplementedException;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.List;\n-import java.util.Optional;\n-\n-@Service(value = \"secretMangementService\")\n-@Transactional(value = \"transactionManager\")\n+@Service(value = \"secretManagementService\")\n+@Transactional\n public class SecretManagementService implements SecurityKeyService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n \n-    @Autowired\n-    EncryptionService soapSecretEncryptionService;\n-\n-    @Autowired\n-    SecretManagementClient secretManagementClient;\n-\n-    @Autowired\n-    @Qualifier(\"dlmsSecurityKeyService\")\n-    DlmsSecurityKeyService dlmsSecurityKeyService;\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {\n+        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+        this.secretManagementClient = secretManagementClient;\n+    }\n \n     @Override\n     public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDkwMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442220900", "bodyText": "is qualifier needed?", "author": "coendamen", "createdAt": "2020-06-18T13:22:07Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")\n+@Transactional(value = \"transactionManager\")\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+\n+    @Autowired\n+    EncryptionService soapSecretEncryptionService;\n+\n+    @Autowired\n+    SecretManagementClient secretManagementClient;\n+\n+    @Autowired\n+    @Qualifier(\"dlmsSecurityKeyService\")", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex e9acf98139..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -1,44 +1,44 @@\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n+import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.codec.binary.Hex;\n import org.apache.commons.lang3.NotImplementedException;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.List;\n-import java.util.Optional;\n-\n-@Service(value = \"secretMangementService\")\n-@Transactional(value = \"transactionManager\")\n+@Service(value = \"secretManagementService\")\n+@Transactional\n public class SecretManagementService implements SecurityKeyService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n \n-    @Autowired\n-    EncryptionService soapSecretEncryptionService;\n-\n-    @Autowired\n-    SecretManagementClient secretManagementClient;\n-\n-    @Autowired\n-    @Qualifier(\"dlmsSecurityKeyService\")\n-    DlmsSecurityKeyService dlmsSecurityKeyService;\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {\n+        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+        this.secretManagementClient = secretManagementClient;\n+    }\n \n     @Override\n     public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMTQ3Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442221476", "bodyText": "a lot of NotImplementedExceptions, is the story/EPIC done?", "author": "coendamen", "createdAt": "2020-06-18T13:22:53Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")\n+@Transactional(value = \"transactionManager\")\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+\n+    @Autowired\n+    EncryptionService soapSecretEncryptionService;\n+\n+    @Autowired\n+    SecretManagementClient secretManagementClient;\n+\n+    @Autowired\n+    @Qualifier(\"dlmsSecurityKeyService\")\n+    DlmsSecurityKeyService dlmsSecurityKeyService;\n+\n+    @Override\n+    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MDA4Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442360083", "bodyText": "I think this is all post-MVP work, so should be covered by other epic/story", "author": "jandik", "createdAt": "2020-06-18T16:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMTQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex e9acf98139..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -1,44 +1,44 @@\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n+import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.codec.binary.Hex;\n import org.apache.commons.lang3.NotImplementedException;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.List;\n-import java.util.Optional;\n-\n-@Service(value = \"secretMangementService\")\n-@Transactional(value = \"transactionManager\")\n+@Service(value = \"secretManagementService\")\n+@Transactional\n public class SecretManagementService implements SecurityKeyService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n \n-    @Autowired\n-    EncryptionService soapSecretEncryptionService;\n-\n-    @Autowired\n-    SecretManagementClient secretManagementClient;\n-\n-    @Autowired\n-    @Qualifier(\"dlmsSecurityKeyService\")\n-    DlmsSecurityKeyService dlmsSecurityKeyService;\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {\n+        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+        this.secretManagementClient = secretManagementClient;\n+    }\n \n     @Override\n     public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMjUxMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442222511", "bodyText": "scope should be private I think.\nconsider using constructor injection to make testing available", "author": "coendamen", "createdAt": "2020-06-18T13:24:26Z", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")\n+@Transactional(value = \"transactionManager\")\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+\n+    @Autowired\n+    EncryptionService soapSecretEncryptionService;", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\nindex e9acf98139..b9d2db6aa3 100644\n--- a/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n+++ b/osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java\n\n@@ -1,44 +1,44 @@\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n+import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.codec.binary.Hex;\n import org.apache.commons.lang3.NotImplementedException;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.List;\n-import java.util.Optional;\n-\n-@Service(value = \"secretMangementService\")\n-@Transactional(value = \"transactionManager\")\n+@Service(value = \"secretManagementService\")\n+@Transactional\n public class SecretManagementService implements SecurityKeyService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n \n-    @Autowired\n-    EncryptionService soapSecretEncryptionService;\n-\n-    @Autowired\n-    SecretManagementClient secretManagementClient;\n-\n-    @Autowired\n-    @Qualifier(\"dlmsSecurityKeyService\")\n-    DlmsSecurityKeyService dlmsSecurityKeyService;\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {\n+        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+        this.secretManagementClient = secretManagementClient;\n+    }\n \n     @Override\n     public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyOTg5Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442229893", "bodyText": "I would expect this to be a Spring Component.", "author": "coendamen", "createdAt": "2020-06-18T13:34:58Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nsimilarity index 58%\nrename from osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java\nrename to osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nindex c0f1218102..eb9e9df8d0 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n\n@@ -1,20 +1,33 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n \n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import javax.crypto.SecretKey;\n-import javax.crypto.spec.IvParameterSpec;\n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.security.Key;\n-import java.security.KeyStore;\n import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n import java.security.spec.AlgorithmParameterSpec;\n \n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n \n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n     public static final String ALG = \"AES\";\n     public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n     public static final String PROVIDER = \"SunJCE\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMDEyOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442230128", "bodyText": "inject as Spring @resource ?", "author": "coendamen", "createdAt": "2020-06-18T13:35:17Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";\n+    private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+    private byte[] key;\n+\n+    protected int getIVLength() {\n+        return IV.length;\n+    }\n+\n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n+    @Override\n+    public void setKeyFile(File keyStoreFile) throws Exception {", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nsimilarity index 58%\nrename from osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java\nrename to osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nindex c0f1218102..eb9e9df8d0 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n\n@@ -1,20 +1,33 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n \n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import javax.crypto.SecretKey;\n-import javax.crypto.spec.IvParameterSpec;\n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.security.Key;\n-import java.security.KeyStore;\n import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n import java.security.spec.AlgorithmParameterSpec;\n \n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n \n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n     public static final String ALG = \"AES\";\n     public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n     public static final String PROVIDER = \"SunJCE\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMDQ1Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442230456", "bodyText": "what is \"1\" , better to create a constant", "author": "coendamen", "createdAt": "2020-06-18T13:35:47Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";\n+    private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+    private byte[] key;\n+\n+    protected int getIVLength() {\n+        return IV.length;\n+    }\n+\n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n+    @Override\n+    public void setKeyFile(File keyStoreFile) throws Exception {\n+        super.setKeyFile(keyStoreFile);\n+        this.key = Files.readAllBytes(Paths.get(keyStoreFile.getAbsolutePath()));\n+    }\n+\n+    protected Key getSecretEncryptionKey(String keyReference) {\n+\n+        if (!keyReference.equals(\"1\")) {", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nsimilarity index 58%\nrename from osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java\nrename to osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\nindex c0f1218102..eb9e9df8d0 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java\n+++ b/osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java\n\n@@ -1,20 +1,33 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n \n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import javax.crypto.SecretKey;\n-import javax.crypto.spec.IvParameterSpec;\n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.security.Key;\n-import java.security.KeyStore;\n import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n import java.security.spec.AlgorithmParameterSpec;\n \n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n \n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n     public static final String ALG = \"AES\";\n     public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n     public static final String PROVIDER = \"SunJCE\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMTAwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442231009", "bodyText": "Spring component ?", "author": "coendamen", "createdAt": "2020-06-18T13:36:36Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java\ndeleted file mode 100644\nindex 26b3c426f2..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import javax.crypto.spec.IvParameterSpec;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.security.Key;\n-import java.security.KeyStore;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.NoSuchProviderException;\n-import java.security.spec.AlgorithmParameterSpec;\n-\n-public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n-\n-    private static final String ALGORITHM = \"AES/CBC/NoPadding\";\n-    private static final String PROVIDER = \"nCipherKM\";\n-    private static final String TYPE = \"ncipher.sworld\";\n-    private static final byte[] IV = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n-\n-    private KeyStore keyStore;\n-\n-    protected int getIVLength() {\n-        return IV.length;\n-    }\n-\n-    @Override\n-    public void setKeyFile(File keyStoreFile) throws Exception {\n-        super.setKeyFile(keyStoreFile);\n-        this.keyStore = KeyStore.getInstance(TYPE, PROVIDER);\n-        FileInputStream fIn = new FileInputStream(keyStoreFile);\n-        this.keyStore.load(fIn, null);\n-    }\n-\n-    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n-        return Cipher.getInstance(ALGORITHM, PROVIDER);\n-    }\n-\n-    /**\n-     * This method reads the 'actual' encryption key (from the database).\n-     * Normally this is the key start isValidFrom(now) and isValidUntil(now).\n-     *\n-     * @return the key that must be used for encryption/decryption\n-     * @throws Exception when keystore can not be accessed\n-     */\n-    protected Key getSecretEncryptionKey(String keyReference) throws Exception {\n-        return this.keyStore.getKey(keyReference, null);\n-    }\n-\n-    protected AlgorithmParameterSpec getAlgorithmParameterSpec() {\n-        return new IvParameterSpec(IV);\n-    }\n-\n-    public EncryptionProviderType getType() {\n-        return EncryptionProviderType.HSM;\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMjI5Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442232292", "bodyText": "warning or error ?", "author": "coendamen", "createdAt": "2020-06-18T13:38:26Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+import java.util.logging.Logger;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AbstractEncryptionProvider.class.getName());\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+    protected abstract Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+    protected abstract Key getSecretEncryptionKey(String keyReference) throws Exception;\n+    protected abstract int getIVLength();\n+\n+    public void setKeyFile(File keyFile) throws Exception {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) throws Exception {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference), this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            LOGGER.warning(e.getMessage());", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java\ndeleted file mode 100644\nindex a4d0d51948..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n-\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import java.io.File;\n-import java.security.Key;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.NoSuchProviderException;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.util.Arrays;\n-import java.util.logging.Logger;\n-\n-public abstract class AbstractEncryptionProvider {\n-\n-    private static final Logger LOGGER = Logger.getLogger(AbstractEncryptionProvider.class.getName());\n-\n-    protected File keyFile;\n-\n-    public abstract EncryptionProviderType getType();\n-    protected abstract Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n-    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n-    protected abstract Key getSecretEncryptionKey(String keyReference) throws Exception;\n-    protected abstract int getIVLength();\n-\n-    public void setKeyFile(File keyFile) throws Exception {\n-        this.keyFile = keyFile;\n-    }\n-\n-    public EncryptedSecret encrypt(Secret secret, String keyReference) throws Exception {\n-        try {\n-            final Cipher cipher = this.getCipher();\n-            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference), this.getAlgorithmParameterSpec());\n-            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n-        } catch (Exception e) {\n-            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException |\n-            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n-            LOGGER.warning(e.getMessage());\n-            throw e;\n-        }\n-    }\n-\n-    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n-\n-        if (secret.getType() != this.getType()) {\n-            throw new IllegalStateException(\"EncryptionProvider for type \" + this.getType().name() + \" cannot decrypt secrets of type \" + secret.getType().name());\n-        }\n-\n-        try {\n-            final Cipher cipher = this.getCipher();\n-            cipher.init(Cipher.DECRYPT_MODE, this.getSecretEncryptionKey(keyReference), this.getAlgorithmParameterSpec());\n-            final byte[] decryptedData = cipher.doFinal(secret.getSecret());\n-\n-            if (this.checkNullBytesPrepended(decryptedData)) {\n-                return new Secret(Arrays.copyOfRange(decryptedData, this.getIVLength(), decryptedData.length));\n-            } else {\n-                return new Secret(decryptedData);\n-            }\n-        } catch (Exception e) {\n-            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException |\n-            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n-            LOGGER.warning(e.getMessage());\n-            throw e;\n-        }\n-    }\n-\n-    /**\n-     * - When aes decrypting data (both Java / bouncy castle and openssl) sometimes 16 0 bytes are prepended.\n-     * - Possibly this has to do with padding during encryption\n-     * - openssl as well as Java / bouncy castle don't prefix iv bytes when aes encrypting data (seen in junit test and commandline)\n-     * - makeSimulatorKey.sh (device simulator) assumes decrypted data are prepended with 0 bytes, at present this is correct\n-     *\n-     * @param bytes\n-     *            the array to check\n-     * @return true if the array is prepended with 0 bytes, false otherwise\n-     */\n-    private boolean checkNullBytesPrepended(final byte[] bytes) {\n-        int l = this.getIVLength();\n-        if (bytes.length > l) {\n-            boolean nullBytesPrepended = false;\n-            for (short s = 0; s < l; s++) {\n-                if (bytes[s] == 0) {\n-                    nullBytesPrepended = true;\n-                } else {\n-                    return false;\n-                }\n-            }\n-            return nullBytesPrepended;\n-        } else {\n-            return false;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzNjI3MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442236270", "bodyText": "basically returning null is a code-smell. consider returning Optional", "author": "coendamen", "createdAt": "2020-06-18T13:44:06Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);\n+\n+        if (hsmKeyStoreFile != null) {\n+            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n+            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n+            providers.add(hsmEncryptionProvider);\n+        }\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n+        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;\n+    }\n+\n+    @Override\n+    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n+        EncryptionProviderType encType = secret.getType();\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n+        return oep.isPresent()?oep.get().decrypt(secret, keyReference):null;", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\ndeleted file mode 100644\nindex 48ad99029f..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n-\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-/**\n- * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n- */\n-public class DefaultEncryptionDelegate implements EncryptionDelegate {\n-\n-    private final List<EncryptionProvider> providers = new ArrayList<>();\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n-        this(jreKeyFile, null);\n-    }\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n-        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n-        jreEncryptionProvider.setKeyFile(jreKeyFile);\n-\n-        providers.add(jreEncryptionProvider);\n-\n-        if (hsmKeyStoreFile != null) {\n-            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n-            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n-            providers.add(hsmEncryptionProvider);\n-        }\n-    }\n-\n-    @Override\n-    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;\n-    }\n-\n-    @Override\n-    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n-        EncryptionProviderType encType = secret.getType();\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().decrypt(secret, keyReference):null;\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzNjM3Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442236376", "bodyText": "basically returning null is a code-smell. consider returning Optional", "author": "coendamen", "createdAt": "2020-06-18T13:44:17Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);\n+\n+        if (hsmKeyStoreFile != null) {\n+            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n+            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n+            providers.add(hsmEncryptionProvider);\n+        }\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n+        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\ndeleted file mode 100644\nindex 48ad99029f..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n-\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-/**\n- * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n- */\n-public class DefaultEncryptionDelegate implements EncryptionDelegate {\n-\n-    private final List<EncryptionProvider> providers = new ArrayList<>();\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n-        this(jreKeyFile, null);\n-    }\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n-        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n-        jreEncryptionProvider.setKeyFile(jreKeyFile);\n-\n-        providers.add(jreEncryptionProvider);\n-\n-        if (hsmKeyStoreFile != null) {\n-            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n-            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n-            providers.add(hsmEncryptionProvider);\n-        }\n-    }\n-\n-    @Override\n-    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;\n-    }\n-\n-    @Override\n-    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n-        EncryptionProviderType encType = secret.getType();\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().decrypt(secret, keyReference):null;\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzNjk4MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442236980", "bodyText": "change to Spring bean and use @resource injection", "author": "coendamen", "createdAt": "2020-06-18T13:45:07Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\ndeleted file mode 100644\nindex 48ad99029f..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n-\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-/**\n- * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n- */\n-public class DefaultEncryptionDelegate implements EncryptionDelegate {\n-\n-    private final List<EncryptionProvider> providers = new ArrayList<>();\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n-        this(jreKeyFile, null);\n-    }\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n-        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n-        jreEncryptionProvider.setKeyFile(jreKeyFile);\n-\n-        providers.add(jreEncryptionProvider);\n-\n-        if (hsmKeyStoreFile != null) {\n-            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n-            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n-            providers.add(hsmEncryptionProvider);\n-        }\n-    }\n-\n-    @Override\n-    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;\n-    }\n-\n-    @Override\n-    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n-        EncryptionProviderType encType = secret.getType();\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().decrypt(secret, keyReference):null;\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzExMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442247113", "bodyText": "minor: consider naming interface SecretManagementService and the impl SecretManagementServiceImpl as this is the most common way to do this.", "author": "coendamen", "createdAt": "2020-06-18T13:58:15Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.opensmartgridplatform.secretmgmt.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService implements SecretManagement {", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NTc3OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442355778", "bodyText": "Agreed.", "author": "jandik", "createdAt": "2020-06-18T16:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzExMw=="}], "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nsimilarity index 75%\nrename from osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java\nrename to osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex cb55f2bfee..7f3861aaaf 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -1,4 +1,13 @@\n-package org.opensmartgridplatform.secretmgmt.application.services;\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n \n import java.util.Date;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzY2OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442247668", "bodyText": "do yo need a native query per se ?", "author": "coendamen", "createdAt": "2020-06-18T13:58:58Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opensmartgridplatform.secretmgmt.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {\n+    @Query(value = \"SELECT es.id FROM encrypted_secret es \" +\n+            \"LEFT JOIN encryption_key_reference ekr ON es.encryption_key_reference_id = ekr.id \" +\n+            \"WHERE es.device_identification = :deviceIdentification \" +\n+            \"AND es.secret_type = :secretType \" +\n+            \"AND ekr.valid_from < :date AND (ekr.valid_to IS NULL OR ekr.valid_to > :date) \" +\n+            \"ORDER BY es.creation_time DESC, es.id DESC \" +\n+            \"LIMIT 1\",\n+            nativeQuery = true)", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NTQ1OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442355458", "bodyText": "Unfortunately, I do. Jpql doesn't support LIMIT. Alternative option (which I tried first) is to use Jpql in combination with pagination, but this resulted in an error (hibernate tries to generate a count query, but this query was incorrect SQL) and might also be less performant.", "author": "jandik", "createdAt": "2020-06-18T16:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MDY2OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444050669", "bodyText": "hmm, I think there is a setMaxResults setting on a query, maybe could be worth a try", "author": "coendamen", "createdAt": "2020-06-23T08:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2ODIxOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r447568219", "bodyText": "the setMaxResults property applies to a Hibernate query, not on a Spring query annotation", "author": "jandik", "createdAt": "2020-06-30T10:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java\ndeleted file mode 100644\nindex d40d798b45..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java\n+++ /dev/null\n\n@@ -1,25 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.repository;\n-\n-import java.util.Date;\n-\n-import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n-import org.springframework.data.jpa.repository.JpaRepository;\n-import org.springframework.data.jpa.repository.Query;\n-import org.springframework.data.repository.query.Param;\n-import org.springframework.stereotype.Repository;\n-\n-@Repository\n-public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {\n-    @Query(value = \"SELECT es.id FROM encrypted_secret es \" +\n-            \"LEFT JOIN encryption_key_reference ekr ON es.encryption_key_reference_id = ekr.id \" +\n-            \"WHERE es.device_identification = :deviceIdentification \" +\n-            \"AND es.secret_type = :secretType \" +\n-            \"AND ekr.valid_from < :date AND (ekr.valid_to IS NULL OR ekr.valid_to > :date) \" +\n-            \"ORDER BY es.creation_time DESC, es.id DESC \" +\n-            \"LIMIT 1\",\n-            nativeQuery = true)\n-    Long findIdOfValidMostRecent(@Param(\"deviceIdentification\") String deviceIdentification,\n-            @Param(\"secretType\") String secretType,\n-            @Param(\"date\") Date validDate);\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0ODM3OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442248379", "bodyText": "TechnicalServiceFault seems vague. Maybe rename to SecretManagementException or something like that ?", "author": "coendamen", "createdAt": "2020-06-18T13:59:56Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/TechnicalServiceFaultException.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.opensmartgridplatform.secretmgmt.application.exception;\n+\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+\n+public class TechnicalServiceFaultException extends RuntimeException {", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/TechnicalServiceFaultException.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/TechnicalServiceFaultException.java\ndeleted file mode 100644\nindex 3557ee1ee3..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/TechnicalServiceFaultException.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.exception;\n-\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n-\n-public class TechnicalServiceFaultException extends RuntimeException {\n-    private TechnicalFault technicalFault;\n-\n-    public TechnicalServiceFaultException(String message) {\n-        super(message);\n-\n-        technicalFault = new TechnicalFault();\n-        technicalFault.setMessage(message);\n-    }\n-\n-    public TechnicalServiceFaultException(String message, Throwable e, TechnicalFault technicalFault) {\n-        super(message, e);\n-        this.technicalFault = technicalFault;\n-    }\n-\n-    public TechnicalFault getTechnicalFault() {\n-        return technicalFault;\n-    }\n-\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0ODk4Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442248982", "bodyText": "add accolades as per the standard.", "author": "coendamen", "createdAt": "2020-06-18T14:00:43Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.opensmartgridplatform.secretmgmt.application.exception;\n+\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+import javax.xml.namespace.QName;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalServiceFaultException) {\n+            TechnicalFault technicalFault = ((TechnicalServiceFaultException) ex).getTechnicalFault();\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/DetailSoapFaultMappingExceptionResolver.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/DetailSoapFaultMappingExceptionResolver.java\ndeleted file mode 100644\nindex f95baf4697..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/DetailSoapFaultMappingExceptionResolver.java\n+++ /dev/null\n\n@@ -1,28 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.exception;\n-\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n-import org.springframework.ws.soap.SoapFault;\n-import org.springframework.ws.soap.SoapFaultDetail;\n-import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n-\n-import javax.xml.namespace.QName;\n-\n-public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n-\n-    private static final QName MESSAGE = new QName(\"Message\");\n-    private static final QName COMPONENT = new QName(\"Component\");\n-    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n-    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n-\n-    @Override\n-    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n-        if (ex instanceof TechnicalServiceFaultException) {\n-            TechnicalFault technicalFault = ((TechnicalServiceFaultException) ex).getTechnicalFault();\n-            SoapFaultDetail detail = fault.addFaultDetail();\n-            if (technicalFault.getMessage() != null) detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n-            if (technicalFault.getComponent() != null) detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n-            if (technicalFault.getInnerMessage() != null) detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n-            if (technicalFault.getInnerException() != null) detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MDY2Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442250666", "bodyText": "I see a lot of hardcoded strings, consider moving to properties as in the rest of OSGP", "author": "coendamen", "createdAt": "2020-06-18T14:03:05Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/WebServiceConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.opensmartgridplatform.secretmgmt.application.config;\n+\n+import org.opensmartgridplatform.secretmgmt.application.exception.DetailSoapFaultMappingExceptionResolver;\n+import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.springframework.boot.web.servlet.ServletRegistrationBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.ws.config.annotation.EnableWs;\n+import org.springframework.ws.config.annotation.WsConfigurerAdapter;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultDefinition;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+import org.springframework.ws.transport.http.MessageDispatcherServlet;\n+import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;\n+import org.springframework.xml.xsd.XsdSchemaCollection;\n+import org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection;\n+\n+import java.util.Properties;\n+\n+@EnableWs\n+@Configuration\n+public class WebServiceConfig extends WsConfigurerAdapter {\n+    @Bean\n+    public ServletRegistrationBean messageDispatcherServlet(ApplicationContext applicationContext) {\n+        MessageDispatcherServlet servlet = new MessageDispatcherServlet();\n+        servlet.setApplicationContext(applicationContext);\n+        servlet.setTransformWsdlLocations(true);\n+        return new ServletRegistrationBean(servlet, \"/ws/SecretManagement/*\");\n+    }\n+\n+    /**\n+     * url of the WSDL by this definition is:\n+     *\n+     *    http://localhost:8080/ws/SecretManagement/secretManagement.wsdl\n+     */\n+    @Bean(name = \"secretManagement\")\n+    public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchemaCollection secretManagementSchemas) {\n+        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();\n+        wsdl11Definition.setPortTypeName(\"SecretManagementPort\");\n+        wsdl11Definition.setLocationUri(\"/ws/SecretManagement\");\n+        wsdl11Definition.setTargetNamespace(\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\");", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/WebServiceConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java\nsimilarity index 58%\nrename from osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/WebServiceConfig.java\nrename to osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java\nindex 869f5cb80c..40c1761c49 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/WebServiceConfig.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java\n\n@@ -1,7 +1,15 @@\n-package org.opensmartgridplatform.secretmgmt.application.config;\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n \n-import org.opensmartgridplatform.secretmgmt.application.exception.DetailSoapFaultMappingExceptionResolver;\n-import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.opensmartgridplatform.secretmanagement.application.exception.DetailSoapFaultMappingExceptionResolver;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MzU4Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442253587", "bodyText": "Note that the DefaultEncryptionDelegate is not a delegate but a Delegator. The actual Delegates are the providers doing the work.\nConsider renaming.", "author": "coendamen", "createdAt": "2020-06-18T14:06:59Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/SecurityConfig.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.opensmartgridplatform.secretmgmt.application.config;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.DefaultEncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+\n+import java.util.Optional;\n+\n+@Configuration\n+public class SecurityConfig {\n+\n+    @Value(\"${soap.secret.resource}\")\n+    private Resource soapSecretResource;\n+\n+    @Value(\"${database.secret.resource}\")\n+    private Resource databaseSecretResource;\n+\n+    @Value(\"${hsm.keystore.resource:#{null}}\")\n+    private Optional<Resource> hsmKeystoreResource;\n+\n+    @Value(\"${encryption.provider.type}\")\n+    private String encryptionProviderTypeName;\n+\n+    @Bean(name = \"osgpEncryptionDelegate\")\n+    public EncryptionDelegate getDefaultEncryptionDelegate() throws Exception {\n+        EncryptionDelegate encryptionDelegate;", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/SecurityConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/SecurityConfig.java\ndeleted file mode 100644\nindex b90bc720ab..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/SecurityConfig.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.config;\n-\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.DefaultEncryptionDelegate;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptionDelegate;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.Resource;\n-\n-import java.util.Optional;\n-\n-@Configuration\n-public class SecurityConfig {\n-\n-    @Value(\"${soap.secret.resource}\")\n-    private Resource soapSecretResource;\n-\n-    @Value(\"${database.secret.resource}\")\n-    private Resource databaseSecretResource;\n-\n-    @Value(\"${hsm.keystore.resource:#{null}}\")\n-    private Optional<Resource> hsmKeystoreResource;\n-\n-    @Value(\"${encryption.provider.type}\")\n-    private String encryptionProviderTypeName;\n-\n-    @Bean(name = \"osgpEncryptionDelegate\")\n-    public EncryptionDelegate getDefaultEncryptionDelegate() throws Exception {\n-        EncryptionDelegate encryptionDelegate;\n-\n-        if (this.hsmKeystoreResource.isPresent()) {\n-            encryptionDelegate = new DefaultEncryptionDelegate(this.databaseSecretResource.getFile(), this.hsmKeystoreResource.get().getFile());\n-        } else {\n-            encryptionDelegate = new DefaultEncryptionDelegate(this.databaseSecretResource.getFile());\n-        }\n-        return encryptionDelegate;\n-\n-    }\n-\n-    @Bean(name = \"SoapSecretEncryptionProvider\")\n-    public EncryptionProvider getSoapSecretEncryptionProvider() throws Exception {\n-        final EncryptionProvider encryptionProvider = new JreEncryptionProvider();\n-        encryptionProvider.setKeyFile(this.soapSecretResource.getFile());\n-        return encryptionProvider;\n-    }\n-\n-    @Bean\n-    public EncryptionProviderType getEncryptionProviderType() {\n-        return EncryptionProviderType.valueOf(this.encryptionProviderTypeName);\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2MzQ5OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442263498", "bodyText": "this seems a strange construct and not open to extension. Why not create a second Provider for HSM?", "author": "coendamen", "createdAt": "2020-06-18T14:20:54Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\ndeleted file mode 100644\nindex 48ad99029f..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n-\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-/**\n- * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n- */\n-public class DefaultEncryptionDelegate implements EncryptionDelegate {\n-\n-    private final List<EncryptionProvider> providers = new ArrayList<>();\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n-        this(jreKeyFile, null);\n-    }\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n-        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n-        jreEncryptionProvider.setKeyFile(jreKeyFile);\n-\n-        providers.add(jreEncryptionProvider);\n-\n-        if (hsmKeyStoreFile != null) {\n-            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n-            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n-            providers.add(hsmEncryptionProvider);\n-        }\n-    }\n-\n-    @Override\n-    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;\n-    }\n-\n-    @Override\n-    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n-        EncryptionProviderType encType = secret.getType();\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().decrypt(secret, keyReference):null;\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NDI5NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442264294", "bodyText": "for my understanding: is it ever possible that multiple providers for the same EncryptionProviderType are registered?", "author": "coendamen", "createdAt": "2020-06-18T14:21:55Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);\n+\n+        if (hsmKeyStoreFile != null) {\n+            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n+            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n+            providers.add(hsmEncryptionProvider);\n+        }\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NTEwMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442265102", "bodyText": "consider keeping the param names equal to the Object types. EncryptionProviderType --> encType misses \"provider\" and is thus less readable.", "author": "coendamen", "createdAt": "2020-06-18T14:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NDI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\ndeleted file mode 100644\nindex 48ad99029f..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n-\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-/**\n- * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n- */\n-public class DefaultEncryptionDelegate implements EncryptionDelegate {\n-\n-    private final List<EncryptionProvider> providers = new ArrayList<>();\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n-        this(jreKeyFile, null);\n-    }\n-\n-    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n-        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n-        jreEncryptionProvider.setKeyFile(jreKeyFile);\n-\n-        providers.add(jreEncryptionProvider);\n-\n-        if (hsmKeyStoreFile != null) {\n-            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n-            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n-            providers.add(hsmEncryptionProvider);\n-        }\n-    }\n-\n-    @Override\n-    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;\n-    }\n-\n-    @Override\n-    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n-        EncryptionProviderType encType = secret.getType();\n-        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n-        return oep.isPresent()?oep.get().decrypt(secret, keyReference):null;\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NjYyNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442266627", "bodyText": "use default value in annotation:\n\"${component.name:OSGP-SECRET-MANAGEMENT}\"", "author": "coendamen", "createdAt": "2020-06-18T14:24:53Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.opensmartgridplatform.secretmgmt.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class ApplicationConfig {\n+\n+    @Value(\"${component.name}\")\n+    public final static String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java\ndeleted file mode 100644\nindex e878aa0df9..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.config;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Configuration;\n-\n-@Configuration\n-public class ApplicationConfig {\n-\n-    @Value(\"${component.name}\")\n-    public final static String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NzUyMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442267523", "bodyText": "I don't think this should be hardcoded here.", "author": "coendamen", "createdAt": "2020-06-18T14:25:57Z", "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/config/WebClientConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.opensmartgridplatform.secretmgmt.config;\n+\n+import org.opensmartgridplatform.secretmgmt.serviceclient.SoapConnector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+@Configuration\n+public class WebClientConfig {\n+\n+    @Bean\n+    public Jaxb2Marshaller marshaller() {\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+\n+        marshaller.setContextPath(\"org.opensmartgridplatform.schemas.security.secretmanagement._2020._05\");\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    public SoapConnector soapConnector(Jaxb2Marshaller marshaller) {\n+        SoapConnector client = new SoapConnector();\n+        client.setDefaultUri(\"http://localhost:8080/ws/SecretManagement\");", "originalCommit": "25adddc4a129c95cb5e571f6164e19c3a9534806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/config/WebClientConfig.java b/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/config/WebClientConfig.java\ndeleted file mode 100644\nindex 458342b8a7..0000000000\n--- a/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/config/WebClientConfig.java\n+++ /dev/null\n\n@@ -1,27 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.config;\n-\n-import org.opensmartgridplatform.secretmgmt.serviceclient.SoapConnector;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n-\n-@Configuration\n-public class WebClientConfig {\n-\n-    @Bean\n-    public Jaxb2Marshaller marshaller() {\n-        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n-\n-        marshaller.setContextPath(\"org.opensmartgridplatform.schemas.security.secretmanagement._2020._05\");\n-        return marshaller;\n-    }\n-\n-    @Bean\n-    public SoapConnector soapConnector(Jaxb2Marshaller marshaller) {\n-        SoapConnector client = new SoapConnector();\n-        client.setDefaultUri(\"http://localhost:8080/ws/SecretManagement\");\n-        client.setMarshaller(marshaller);\n-        client.setUnmarshaller(marshaller);\n-        return client;\n-    }\n-}\n"}}, {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e0377bd4adc6c45a4de93764715961fd781a03ab", "message": "SLIM-2253-use-secret-mangement-for-secure-keys", "committedDate": "2020-06-22T12:29:45Z", "type": "commit"}, {"oid": "7d3f6e7354717549f9aab0b23ae156ac087a4fc8", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/7d3f6e7354717549f9aab0b23ae156ac087a4fc8", "message": "SLIM-2253-use-secret-mangement-for-secure-keys", "committedDate": "2020-06-22T14:28:32Z", "type": "commit"}, {"oid": "ca4077fc480ac8f0dd62f8634f7b907b54354e0f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ca4077fc480ac8f0dd62f8634f7b907b54354e0f", "message": "SLIM-2253-use-secret-mangement-for-secure-keys", "committedDate": "2020-06-22T14:30:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzODkzNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444038935", "bodyText": "remove?", "author": "jboon", "createdAt": "2020-06-23T08:06:11Z", "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.opensmartgridplatform.secretmgmt.application;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.ws.test.server.RequestCreators.withPayload;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.AutoConfigureTestEntityManager;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.ws.test.server.MockWebServiceClient;\n+import org.springframework.ws.test.server.ResponseMatchers;\n+\n+@SpringBootTest\n+@Transactional\n+@EnableAutoConfiguration(exclude = FlywayAutoConfiguration.class)\n+@AutoConfigureTestDatabase\n+@AutoConfigureTestEntityManager\n+public class SoapServiceSecretManagementIT {\n+\n+    /**\n+     * The AES keys must be configured with the following values:\n+     * db key: hex:1cb340f6edab9d9b3f2912877c9ed161\n+     * soap key: hex:8ff36ab298aa8c240d1bb1185a138fe1\n+     *\n+     * The plantext secrets for meter 'E0054002019112319' are:\n+     *\n+     * hex: 72b8fc276644a60ccefdf219fbee1a49 (E_METER_AUTHENTICATION)\n+     * hex: a3d5883fe56cf12b1a7cb5a686da6064 (E_METER_ENCRYPTION_KEY_UNICAST)\n+     *\n+     * The db-encrypted secrets are: hex:35c6d2af323bd3c4a588692dfcf4235fd20c2bd39bcf8672b6e65d515940150f\n+     * (E_METER_AUTHENTICATION)\n+     * hex:7c737a402bdef7a0819f47ae9b625e2d8531e6c5d7603c4e4982c45175c4e063 (E_METER_ENCRYPTION_KEY_UNICAST)\n+     *\n+     * The soap-encrypted secrets are: hex:74efc062231e81c9e006bb56c5dec38631210c5073511606a203ba748fcdc794\n+     * (E_METER_AUTHENTICATION)\n+     * hex:3dca51832c70e372460796ca01acbab769fd330c9b936246a01d4e97f8c5bc26 (E_METER_ENCRYPTION_KEY_UNICAST)\n+     */\n+\n+    private static final String E_METER_AUTHENTICATION_KEY_ENCRYPTED_FOR_DB =\n+            \"35c6d2af323bd3c4a588692dfcf4235fd20c2bd39bcf8672b6e65d515940150f\";\n+    private static final String E_METER_ENCRYPTION_KEY_UNICAST_ENCRYPTED_FOR_DB =\n+            \"7c737a402bdef7a0819f47ae9b625e2d8531e6c5d7603c4e4982c45175c4e063\";\n+\n+    private static final String DEVICE_IDENTIFICATION = \"E0054002019112319\";\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private DbEncryptedSecretRepository secretRepository;\n+\n+    @Autowired\n+    private EntityManager testEntityManager;\n+\n+    private MockWebServiceClient mockWebServiceClient;\n+\n+    @BeforeEach\n+    public void setupTest() {\n+        this.mockWebServiceClient = MockWebServiceClient.createClient(this.applicationContext);\n+        this.createTestData();\n+    }\n+\n+    @Test\n+    public void getSecretsRequest() {\n+\n+        /**\n+         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n+         */\n+        assertThat(this.secretRepository.count()).isEqualTo(2);\n+        final Resource request = new ClassPathResource(\"test-requests/getSecrets.xml\");\n+        final Resource expectedResponse = new ClassPathResource(\"test-responses/getSecrets.xml\");\n+        try {\n+            this.mockWebServiceClient.sendRequest(withPayload(request))/*.andExpect\n+            (ResponseMatchers", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/application/SoapServiceSecretManagementIT.java b/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java\nsimilarity index 71%\nrename from osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/application/SoapServiceSecretManagementIT.java\nrename to osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java\nindex 9e5e6286ca..035b23ccad 100644\n--- a/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/application/SoapServiceSecretManagementIT.java\n+++ b/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java\n\n@@ -1,9 +1,19 @@\n-package org.opensmartgridplatform.secretmgmt.application;\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.springframework.ws.test.server.RequestCreators.withPayload;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.io.OutputStream;\n import java.util.Date;\n \n import javax.persistence.EntityManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0MzQwMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444043400", "bodyText": "These @propertysource annotations must be placed on @SpringBootApplication annotated class due to loading order problems", "author": "jboon", "createdAt": "2020-06-23T08:14:06Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.opensmartgridplatform.secretmgmt.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration\n+@PropertySource(\"classpath:secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java\ndeleted file mode 100644\nindex afe9c27853..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java\n+++ /dev/null\n\n@@ -1,14 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.config;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.PropertySource;\n-\n-@Configuration\n-@PropertySource(\"classpath:secret-management.properties\")\n-@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n-@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n-public class ApplicationConfig {\n-    @Value(\"${component.name}\")\n-    public final static String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjU3MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444046570", "bodyText": "@slf4j", "author": "jboon", "createdAt": "2020-06-23T08:19:45Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.opensmartgridplatform.secretmgmt.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n+\n+@Endpoint\n+public class SecretManagementEndpoint {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java\ndeleted file mode 100644\nindex bb2bd84c77..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java\n+++ /dev/null\n\n@@ -1,172 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.endpoints;\n-\n-import org.apache.tomcat.util.buf.HexUtils;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n-import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n-import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n-import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n-import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.ws.server.endpoint.annotation.Endpoint;\n-import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n-import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n-import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n-\n-@Endpoint\n-public class SecretManagementEndpoint {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);\n-\n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\";\n-    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-\n-    private final SecretManagementService secretManagementService;\n-    private final EncryptionProvider jreEncryptionProvider;\n-\n-    public SecretManagementEndpoint(SecretManagementService secretManagementService, EncryptionProvider soapSecretEncryptionProvider) {\n-        this.secretManagementService = secretManagementService;\n-        this.jreEncryptionProvider = soapSecretEncryptionProvider;\n-    }\n-\n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n-    @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) {\n-\n-        LOGGER.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        try {\n-            SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n-            if (soapSecretTypes == null) {\n-                throw new TechnicalServiceFaultException(\"Missing input: secret types\");\n-            }\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType> soapSecretTypeList = soapSecretTypes.getSecretType();\n-            List<SecretType> secretTypeList = new ArrayList<>();\n-\n-            for (org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType: soapSecretTypeList) {\n-                SecretType secretType = convertToSecretType(soapSecretType);\n-                secretTypeList.add(secretType);\n-            }\n-\n-            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(), secretTypeList);\n-            TypedSecrets soapTypedSecrets = new TypedSecrets();\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret> soapTypedSecretList = soapTypedSecrets.getTypedSecret();\n-\n-            for (TypedSecret typedSecret : typedSecrets) {\n-                org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret = encryptAndConvertSoapTypedSecret(typedSecret);\n-                soapTypedSecretList.add(soapTypedSecret);\n-            }\n-\n-            response.setTypedSecrets(soapTypedSecrets);\n-            response.setResult(OsgpResultType.OK);\n-\n-            return response;\n-        }\n-        catch (Exception e) {\n-            throw new TechnicalServiceFaultException(e.getMessage(), e, createTechnicalFaultFromException(e));\n-        }\n-    }\n-\n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n-    @ResponsePayload\n-    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) {\n-\n-        LOGGER.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n-\n-        StoreSecretsResponse response = new StoreSecretsResponse();\n-\n-        try {\n-            TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n-\n-            if (soapTypedSecrets == null) {\n-                throw new TechnicalServiceFaultException(\"Missing input: typed secrets\");\n-            }\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret> soapTypedSecretsList = soapTypedSecrets.getTypedSecret();\n-            List<TypedSecret> typedSecretList = new ArrayList<>();\n-\n-            for (org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret : soapTypedSecretsList) {\n-                typedSecretList.add(decryptAndConvertSoapTypedSecret(soapTypedSecret));\n-            }\n-\n-            secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n-            response.setResult(OsgpResultType.OK);\n-\n-            return response;\n-        }\n-        catch (Exception e) {\n-            throw new TechnicalServiceFaultException(e.getMessage(), e, createTechnicalFaultFromException(e));\n-        }\n-    }\n-\n-    private SecretType convertToSecretType(org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType) {\n-        SecretType secretType = SecretType.valueOf(soapSecretType.value());\n-        return secretType;\n-    }\n-\n-    private org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType convertToSoapSecretType(SecretType secretType) {\n-        org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType = org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType.fromValue(secretType.name());\n-        return soapSecretType;\n-    }\n-\n-    private org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret encryptAndConvertSoapTypedSecret(TypedSecret typedSecret) throws Exception {\n-        org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret = new org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret();\n-\n-        String encodedSecret = typedSecret.getSecret();\n-        byte[] rawSecret = HexUtils.fromHexString(encodedSecret);\n-        Secret secret = new Secret(rawSecret);\n-        EncryptedSecret encryptedSecret = jreEncryptionProvider.encrypt(secret, KEY_REFERENCE);\n-        soapTypedSecret.setSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n-\n-        SecretType secretType = typedSecret.getSecretType();\n-        soapTypedSecret.setType(convertToSoapSecretType(secretType));\n-\n-        return soapTypedSecret;\n-    }\n-\n-    private TypedSecret decryptAndConvertSoapTypedSecret(org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret) throws Exception {\n-        TypedSecret typedSecret = new TypedSecret();\n-\n-        byte[] rawEncryptedSecret = HexUtils.fromHexString(soapTypedSecret.getSecret());\n-        EncryptedSecret encryptedSecret = new EncryptedSecret(EncryptionProviderType.JRE, rawEncryptedSecret);\n-        Secret decryptedSecret = jreEncryptionProvider.decrypt(encryptedSecret, KEY_REFERENCE);\n-\n-        typedSecret.setSecret(HexUtils.toHexString(decryptedSecret.getSecret()));\n-        typedSecret.setSecretType(convertToSecretType(soapTypedSecret.getType()));\n-\n-        return typedSecret;\n-    }\n-\n-    private TechnicalFault createTechnicalFaultFromException(Exception e) {\n-        TechnicalFault fault = new TechnicalFault();\n-        fault.setMessage(e.getMessage());\n-        fault.setComponent(COMPONENT_NAME);\n-        if (e.getCause() != null) {\n-            fault.setInnerException(e.getCause().toString());\n-            fault.setInnerMessage(e.getCause().getMessage());\n-        }\n-        return fault;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NzIzMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444047230", "bodyText": "consider renaming to a more specific name", "author": "coendamen", "createdAt": "2020-06-23T08:20:53Z", "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.opensmartgridplatform.secretmgmt.serviceclient;\n+\n+import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n+\n+public class SoapConnector extends WebServiceGatewaySupport {", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java b/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java\ndeleted file mode 100644\nindex df9c46b4f6..0000000000\n--- a/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java\n+++ /dev/null\n\n@@ -1,10 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.serviceclient;\n-\n-import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n-\n-public class SoapConnector extends WebServiceGatewaySupport {\n-\n-    public Object callWebService(String url, Object request){\n-        return getWebServiceTemplate().marshalSendAndReceive(url, request);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NzUwOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444047508", "bodyText": "callWebService could be more specific. which webservice ?", "author": "coendamen", "createdAt": "2020-06-23T08:21:21Z", "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.opensmartgridplatform.secretmgmt.serviceclient;\n+\n+import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n+\n+public class SoapConnector extends WebServiceGatewaySupport {\n+\n+    public Object callWebService(String url, Object request){", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java b/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java\ndeleted file mode 100644\nindex df9c46b4f6..0000000000\n--- a/osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java\n+++ /dev/null\n\n@@ -1,10 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.serviceclient;\n-\n-import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n-\n-public class SoapConnector extends WebServiceGatewaySupport {\n-\n-    public Object callWebService(String url, Object request){\n-        return getWebServiceTemplate().marshalSendAndReceive(url, request);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0OTc2Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444049762", "bodyText": "for an Endpoint, this method contains too much code, consider moving this to a service for better readability, maintenance and testability", "author": "coendamen", "createdAt": "2020-06-23T08:24:58Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.opensmartgridplatform.secretmgmt.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n+\n+@Endpoint\n+public class SecretManagementEndpoint {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\";\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+\n+    private final SecretManagementService secretManagementService;\n+    private final EncryptionProvider jreEncryptionProvider;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService, EncryptionProvider soapSecretEncryptionProvider) {\n+        this.secretManagementService = secretManagementService;\n+        this.jreEncryptionProvider = soapSecretEncryptionProvider;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) {\n+\n+        LOGGER.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        GetSecretsResponse response = new GetSecretsResponse();\n+\n+        try {\n+            SecretTypes soapSecretTypes = request.getSecretTypes();", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java\ndeleted file mode 100644\nindex bb2bd84c77..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java\n+++ /dev/null\n\n@@ -1,172 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.endpoints;\n-\n-import org.apache.tomcat.util.buf.HexUtils;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n-import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n-import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n-import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n-import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.ws.server.endpoint.annotation.Endpoint;\n-import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n-import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n-import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n-\n-@Endpoint\n-public class SecretManagementEndpoint {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);\n-\n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\";\n-    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-\n-    private final SecretManagementService secretManagementService;\n-    private final EncryptionProvider jreEncryptionProvider;\n-\n-    public SecretManagementEndpoint(SecretManagementService secretManagementService, EncryptionProvider soapSecretEncryptionProvider) {\n-        this.secretManagementService = secretManagementService;\n-        this.jreEncryptionProvider = soapSecretEncryptionProvider;\n-    }\n-\n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n-    @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) {\n-\n-        LOGGER.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        try {\n-            SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n-            if (soapSecretTypes == null) {\n-                throw new TechnicalServiceFaultException(\"Missing input: secret types\");\n-            }\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType> soapSecretTypeList = soapSecretTypes.getSecretType();\n-            List<SecretType> secretTypeList = new ArrayList<>();\n-\n-            for (org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType: soapSecretTypeList) {\n-                SecretType secretType = convertToSecretType(soapSecretType);\n-                secretTypeList.add(secretType);\n-            }\n-\n-            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(), secretTypeList);\n-            TypedSecrets soapTypedSecrets = new TypedSecrets();\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret> soapTypedSecretList = soapTypedSecrets.getTypedSecret();\n-\n-            for (TypedSecret typedSecret : typedSecrets) {\n-                org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret = encryptAndConvertSoapTypedSecret(typedSecret);\n-                soapTypedSecretList.add(soapTypedSecret);\n-            }\n-\n-            response.setTypedSecrets(soapTypedSecrets);\n-            response.setResult(OsgpResultType.OK);\n-\n-            return response;\n-        }\n-        catch (Exception e) {\n-            throw new TechnicalServiceFaultException(e.getMessage(), e, createTechnicalFaultFromException(e));\n-        }\n-    }\n-\n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n-    @ResponsePayload\n-    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) {\n-\n-        LOGGER.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n-\n-        StoreSecretsResponse response = new StoreSecretsResponse();\n-\n-        try {\n-            TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n-\n-            if (soapTypedSecrets == null) {\n-                throw new TechnicalServiceFaultException(\"Missing input: typed secrets\");\n-            }\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret> soapTypedSecretsList = soapTypedSecrets.getTypedSecret();\n-            List<TypedSecret> typedSecretList = new ArrayList<>();\n-\n-            for (org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret : soapTypedSecretsList) {\n-                typedSecretList.add(decryptAndConvertSoapTypedSecret(soapTypedSecret));\n-            }\n-\n-            secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n-            response.setResult(OsgpResultType.OK);\n-\n-            return response;\n-        }\n-        catch (Exception e) {\n-            throw new TechnicalServiceFaultException(e.getMessage(), e, createTechnicalFaultFromException(e));\n-        }\n-    }\n-\n-    private SecretType convertToSecretType(org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType) {\n-        SecretType secretType = SecretType.valueOf(soapSecretType.value());\n-        return secretType;\n-    }\n-\n-    private org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType convertToSoapSecretType(SecretType secretType) {\n-        org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType = org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType.fromValue(secretType.name());\n-        return soapSecretType;\n-    }\n-\n-    private org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret encryptAndConvertSoapTypedSecret(TypedSecret typedSecret) throws Exception {\n-        org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret = new org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret();\n-\n-        String encodedSecret = typedSecret.getSecret();\n-        byte[] rawSecret = HexUtils.fromHexString(encodedSecret);\n-        Secret secret = new Secret(rawSecret);\n-        EncryptedSecret encryptedSecret = jreEncryptionProvider.encrypt(secret, KEY_REFERENCE);\n-        soapTypedSecret.setSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n-\n-        SecretType secretType = typedSecret.getSecretType();\n-        soapTypedSecret.setType(convertToSoapSecretType(secretType));\n-\n-        return soapTypedSecret;\n-    }\n-\n-    private TypedSecret decryptAndConvertSoapTypedSecret(org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret) throws Exception {\n-        TypedSecret typedSecret = new TypedSecret();\n-\n-        byte[] rawEncryptedSecret = HexUtils.fromHexString(soapTypedSecret.getSecret());\n-        EncryptedSecret encryptedSecret = new EncryptedSecret(EncryptionProviderType.JRE, rawEncryptedSecret);\n-        Secret decryptedSecret = jreEncryptionProvider.decrypt(encryptedSecret, KEY_REFERENCE);\n-\n-        typedSecret.setSecret(HexUtils.toHexString(decryptedSecret.getSecret()));\n-        typedSecret.setSecretType(convertToSecretType(soapTypedSecret.getType()));\n-\n-        return typedSecret;\n-    }\n-\n-    private TechnicalFault createTechnicalFaultFromException(Exception e) {\n-        TechnicalFault fault = new TechnicalFault();\n-        fault.setMessage(e.getMessage());\n-        fault.setComponent(COMPONENT_NAME);\n-        if (e.getCause() != null) {\n-            fault.setInnerException(e.getCause().toString());\n-            fault.setInnerMessage(e.getCause().getMessage());\n-        }\n-        return fault;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MDExMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444050113", "bodyText": "move code to separate service would improve the maintainability", "author": "coendamen", "createdAt": "2020-06-23T08:25:33Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.opensmartgridplatform.secretmgmt.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n+\n+@Endpoint\n+public class SecretManagementEndpoint {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\";\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+\n+    private final SecretManagementService secretManagementService;\n+    private final EncryptionProvider jreEncryptionProvider;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService, EncryptionProvider soapSecretEncryptionProvider) {\n+        this.secretManagementService = secretManagementService;\n+        this.jreEncryptionProvider = soapSecretEncryptionProvider;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) {\n+\n+        LOGGER.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        GetSecretsResponse response = new GetSecretsResponse();\n+\n+        try {\n+            SecretTypes soapSecretTypes = request.getSecretTypes();\n+\n+            if (soapSecretTypes == null) {\n+                throw new TechnicalServiceFaultException(\"Missing input: secret types\");\n+            }\n+\n+            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType> soapSecretTypeList = soapSecretTypes.getSecretType();\n+            List<SecretType> secretTypeList = new ArrayList<>();\n+\n+            for (org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType: soapSecretTypeList) {\n+                SecretType secretType = convertToSecretType(soapSecretType);\n+                secretTypeList.add(secretType);\n+            }\n+\n+            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(), secretTypeList);\n+            TypedSecrets soapTypedSecrets = new TypedSecrets();\n+\n+            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret> soapTypedSecretList = soapTypedSecrets.getTypedSecret();\n+\n+            for (TypedSecret typedSecret : typedSecrets) {\n+                org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret = encryptAndConvertSoapTypedSecret(typedSecret);\n+                soapTypedSecretList.add(soapTypedSecret);\n+            }\n+\n+            response.setTypedSecrets(soapTypedSecrets);\n+            response.setResult(OsgpResultType.OK);\n+\n+            return response;\n+        }\n+        catch (Exception e) {\n+            throw new TechnicalServiceFaultException(e.getMessage(), e, createTechnicalFaultFromException(e));\n+        }\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n+    @ResponsePayload\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) {\n+\n+        LOGGER.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        StoreSecretsResponse response = new StoreSecretsResponse();\n+\n+        try {\n+            TypedSecrets soapTypedSecrets = request.getTypedSecrets();", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java\ndeleted file mode 100644\nindex bb2bd84c77..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java\n+++ /dev/null\n\n@@ -1,172 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.endpoints;\n-\n-import org.apache.tomcat.util.buf.HexUtils;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n-import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n-import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n-import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n-import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n-import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.ws.server.endpoint.annotation.Endpoint;\n-import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n-import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n-import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n-\n-@Endpoint\n-public class SecretManagementEndpoint {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);\n-\n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\";\n-    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n-\n-    private final SecretManagementService secretManagementService;\n-    private final EncryptionProvider jreEncryptionProvider;\n-\n-    public SecretManagementEndpoint(SecretManagementService secretManagementService, EncryptionProvider soapSecretEncryptionProvider) {\n-        this.secretManagementService = secretManagementService;\n-        this.jreEncryptionProvider = soapSecretEncryptionProvider;\n-    }\n-\n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n-    @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) {\n-\n-        LOGGER.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        try {\n-            SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n-            if (soapSecretTypes == null) {\n-                throw new TechnicalServiceFaultException(\"Missing input: secret types\");\n-            }\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType> soapSecretTypeList = soapSecretTypes.getSecretType();\n-            List<SecretType> secretTypeList = new ArrayList<>();\n-\n-            for (org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType: soapSecretTypeList) {\n-                SecretType secretType = convertToSecretType(soapSecretType);\n-                secretTypeList.add(secretType);\n-            }\n-\n-            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(), secretTypeList);\n-            TypedSecrets soapTypedSecrets = new TypedSecrets();\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret> soapTypedSecretList = soapTypedSecrets.getTypedSecret();\n-\n-            for (TypedSecret typedSecret : typedSecrets) {\n-                org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret = encryptAndConvertSoapTypedSecret(typedSecret);\n-                soapTypedSecretList.add(soapTypedSecret);\n-            }\n-\n-            response.setTypedSecrets(soapTypedSecrets);\n-            response.setResult(OsgpResultType.OK);\n-\n-            return response;\n-        }\n-        catch (Exception e) {\n-            throw new TechnicalServiceFaultException(e.getMessage(), e, createTechnicalFaultFromException(e));\n-        }\n-    }\n-\n-    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n-    @ResponsePayload\n-    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) {\n-\n-        LOGGER.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n-\n-        StoreSecretsResponse response = new StoreSecretsResponse();\n-\n-        try {\n-            TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n-\n-            if (soapTypedSecrets == null) {\n-                throw new TechnicalServiceFaultException(\"Missing input: typed secrets\");\n-            }\n-\n-            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret> soapTypedSecretsList = soapTypedSecrets.getTypedSecret();\n-            List<TypedSecret> typedSecretList = new ArrayList<>();\n-\n-            for (org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret : soapTypedSecretsList) {\n-                typedSecretList.add(decryptAndConvertSoapTypedSecret(soapTypedSecret));\n-            }\n-\n-            secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n-            response.setResult(OsgpResultType.OK);\n-\n-            return response;\n-        }\n-        catch (Exception e) {\n-            throw new TechnicalServiceFaultException(e.getMessage(), e, createTechnicalFaultFromException(e));\n-        }\n-    }\n-\n-    private SecretType convertToSecretType(org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType) {\n-        SecretType secretType = SecretType.valueOf(soapSecretType.value());\n-        return secretType;\n-    }\n-\n-    private org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType convertToSoapSecretType(SecretType secretType) {\n-        org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType = org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType.fromValue(secretType.name());\n-        return soapSecretType;\n-    }\n-\n-    private org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret encryptAndConvertSoapTypedSecret(TypedSecret typedSecret) throws Exception {\n-        org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret = new org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret();\n-\n-        String encodedSecret = typedSecret.getSecret();\n-        byte[] rawSecret = HexUtils.fromHexString(encodedSecret);\n-        Secret secret = new Secret(rawSecret);\n-        EncryptedSecret encryptedSecret = jreEncryptionProvider.encrypt(secret, KEY_REFERENCE);\n-        soapTypedSecret.setSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n-\n-        SecretType secretType = typedSecret.getSecretType();\n-        soapTypedSecret.setType(convertToSoapSecretType(secretType));\n-\n-        return soapTypedSecret;\n-    }\n-\n-    private TypedSecret decryptAndConvertSoapTypedSecret(org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret) throws Exception {\n-        TypedSecret typedSecret = new TypedSecret();\n-\n-        byte[] rawEncryptedSecret = HexUtils.fromHexString(soapTypedSecret.getSecret());\n-        EncryptedSecret encryptedSecret = new EncryptedSecret(EncryptionProviderType.JRE, rawEncryptedSecret);\n-        Secret decryptedSecret = jreEncryptionProvider.decrypt(encryptedSecret, KEY_REFERENCE);\n-\n-        typedSecret.setSecret(HexUtils.toHexString(decryptedSecret.getSecret()));\n-        typedSecret.setSecretType(convertToSecretType(soapTypedSecret.getType()));\n-\n-        return typedSecret;\n-    }\n-\n-    private TechnicalFault createTechnicalFaultFromException(Exception e) {\n-        TechnicalFault fault = new TechnicalFault();\n-        fault.setMessage(e.getMessage());\n-        fault.setComponent(COMPONENT_NAME);\n-        if (e.getCause() != null) {\n-            fault.setInnerException(e.getCause().toString());\n-            fault.setInnerMessage(e.getCause().getMessage());\n-        }\n-        return fault;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NjcxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444056713", "bodyText": "As long as there is no presentation it's fine. Date is an epoch.", "author": "jboon", "createdAt": "2020-06-23T08:36:00Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.opensmartgridplatform.secretmgmt.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService implements SecretManagement {\n+    private final static int FIRST_PAGE = 0;\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(final EncryptionDelegate osgpEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = osgpEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    @Override\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey(s)))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey(final TypedSecret typedSecret) {\n+        final Date now = new Date(); //TODO: UTC?", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nsimilarity index 75%\nrename from osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java\nrename to osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\nindex cb55f2bfee..7f3861aaaf 100644\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java\n+++ b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java\n\n@@ -1,4 +1,13 @@\n-package org.opensmartgridplatform.secretmgmt.application.services;\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n \n import java.util.Date;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2MDE1OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444060159", "bodyText": "@slf4j", "author": "jboon", "createdAt": "2020-06-23T08:41:37Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+import java.util.logging.Logger;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AbstractEncryptionProvider.class.getName());", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java\ndeleted file mode 100644\nindex a4d0d51948..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n-\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n-import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import java.io.File;\n-import java.security.Key;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.NoSuchProviderException;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.util.Arrays;\n-import java.util.logging.Logger;\n-\n-public abstract class AbstractEncryptionProvider {\n-\n-    private static final Logger LOGGER = Logger.getLogger(AbstractEncryptionProvider.class.getName());\n-\n-    protected File keyFile;\n-\n-    public abstract EncryptionProviderType getType();\n-    protected abstract Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n-    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n-    protected abstract Key getSecretEncryptionKey(String keyReference) throws Exception;\n-    protected abstract int getIVLength();\n-\n-    public void setKeyFile(File keyFile) throws Exception {\n-        this.keyFile = keyFile;\n-    }\n-\n-    public EncryptedSecret encrypt(Secret secret, String keyReference) throws Exception {\n-        try {\n-            final Cipher cipher = this.getCipher();\n-            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference), this.getAlgorithmParameterSpec());\n-            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n-        } catch (Exception e) {\n-            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException |\n-            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n-            LOGGER.warning(e.getMessage());\n-            throw e;\n-        }\n-    }\n-\n-    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n-\n-        if (secret.getType() != this.getType()) {\n-            throw new IllegalStateException(\"EncryptionProvider for type \" + this.getType().name() + \" cannot decrypt secrets of type \" + secret.getType().name());\n-        }\n-\n-        try {\n-            final Cipher cipher = this.getCipher();\n-            cipher.init(Cipher.DECRYPT_MODE, this.getSecretEncryptionKey(keyReference), this.getAlgorithmParameterSpec());\n-            final byte[] decryptedData = cipher.doFinal(secret.getSecret());\n-\n-            if (this.checkNullBytesPrepended(decryptedData)) {\n-                return new Secret(Arrays.copyOfRange(decryptedData, this.getIVLength(), decryptedData.length));\n-            } else {\n-                return new Secret(decryptedData);\n-            }\n-        } catch (Exception e) {\n-            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException |\n-            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n-            LOGGER.warning(e.getMessage());\n-            throw e;\n-        }\n-    }\n-\n-    /**\n-     * - When aes decrypting data (both Java / bouncy castle and openssl) sometimes 16 0 bytes are prepended.\n-     * - Possibly this has to do with padding during encryption\n-     * - openssl as well as Java / bouncy castle don't prefix iv bytes when aes encrypting data (seen in junit test and commandline)\n-     * - makeSimulatorKey.sh (device simulator) assumes decrypted data are prepended with 0 bytes, at present this is correct\n-     *\n-     * @param bytes\n-     *            the array to check\n-     * @return true if the array is prepended with 0 bytes, false otherwise\n-     */\n-    private boolean checkNullBytesPrepended(final byte[] bytes) {\n-        int l = this.getIVLength();\n-        if (bytes.length > l) {\n-            boolean nullBytesPrepended = false;\n-            for (short s = 0; s < l; s++) {\n-                if (bytes[s] == 0) {\n-                    nullBytesPrepended = true;\n-                } else {\n-                    return false;\n-                }\n-            }\n-            return nullBytesPrepended;\n-        } else {\n-            return false;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NTQ1Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444065456", "bodyText": "byte[] IV = new byte[16];", "author": "jboon", "createdAt": "2020-06-23T08:50:04Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    private static final String ALGORITHM = \"AES/CBC/NoPadding\";\n+    private static final String PROVIDER = \"nCipherKM\";\n+    private static final String TYPE = \"ncipher.sworld\";\n+    private static final byte[] IV = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };", "originalCommit": "e0377bd4adc6c45a4de93764715961fd781a03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862ff45f0dad78e58c81214be6c772adec3d3ee6", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java\ndeleted file mode 100644\nindex 26b3c426f2..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.NoSuchPaddingException;\n-import javax.crypto.spec.IvParameterSpec;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.security.Key;\n-import java.security.KeyStore;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.NoSuchProviderException;\n-import java.security.spec.AlgorithmParameterSpec;\n-\n-public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n-\n-    private static final String ALGORITHM = \"AES/CBC/NoPadding\";\n-    private static final String PROVIDER = \"nCipherKM\";\n-    private static final String TYPE = \"ncipher.sworld\";\n-    private static final byte[] IV = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n-\n-    private KeyStore keyStore;\n-\n-    protected int getIVLength() {\n-        return IV.length;\n-    }\n-\n-    @Override\n-    public void setKeyFile(File keyStoreFile) throws Exception {\n-        super.setKeyFile(keyStoreFile);\n-        this.keyStore = KeyStore.getInstance(TYPE, PROVIDER);\n-        FileInputStream fIn = new FileInputStream(keyStoreFile);\n-        this.keyStore.load(fIn, null);\n-    }\n-\n-    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n-        return Cipher.getInstance(ALGORITHM, PROVIDER);\n-    }\n-\n-    /**\n-     * This method reads the 'actual' encryption key (from the database).\n-     * Normally this is the key start isValidFrom(now) and isValidUntil(now).\n-     *\n-     * @return the key that must be used for encryption/decryption\n-     * @throws Exception when keystore can not be accessed\n-     */\n-    protected Key getSecretEncryptionKey(String keyReference) throws Exception {\n-        return this.keyStore.getKey(keyReference, null);\n-    }\n-\n-    protected AlgorithmParameterSpec getAlgorithmParameterSpec() {\n-        return new IvParameterSpec(IV);\n-    }\n-\n-    public EncryptionProviderType getType() {\n-        return EncryptionProviderType.HSM;\n-    }\n-}\n\\ No newline at end of file\n"}}, {"oid": "bea803279342ba056c5d7d1ed440d94d809dd28a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bea803279342ba056c5d7d1ed440d94d809dd28a", "message": "SLIM-2253-use-secret-mangement-for-secure-keys-review-comments", "committedDate": "2020-06-23T11:23:58Z", "type": "commit"}, {"oid": "337adf5f2da703835c07416aa92d0079f0f8eb22", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/337adf5f2da703835c07416aa92d0079f0f8eb22", "message": "Code clean up flyway script", "committedDate": "2020-06-23T11:28:11Z", "type": "commit"}, {"oid": "5db6853d3a6cb94355cf81aa52dcafd499fdb5dc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5db6853d3a6cb94355cf81aa52dcafd499fdb5dc", "message": "Merge branch 'SLIM-2077-Create-new-secret-mgmt-application' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-06-23T11:28:47Z", "type": "commit"}, {"oid": "22c1bda067bf1aebc6c6c54d91e991079cca0ed6", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/22c1bda067bf1aebc6c6c54d91e991079cca0ed6", "message": "Build fix", "committedDate": "2020-06-23T11:33:35Z", "type": "commit"}, {"oid": "f9727419135de5ab1372cf781bf5551ed9be5a28", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f9727419135de5ab1372cf781bf5551ed9be5a28", "message": "SLIM-2253-use-secret-mangement-for-secure-keys-review-comments", "committedDate": "2020-06-23T15:05:35Z", "type": "commit"}, {"oid": "a0b08a9c2c730840e041ce33f971280f883d9c37", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a0b08a9c2c730840e041ce33f971280f883d9c37", "message": "SLIM-2253-use-secret-mangement-for-secure-keys-review-comments", "committedDate": "2020-06-23T15:40:38Z", "type": "commit"}, {"oid": "1ed3c5e7668045d6846f07c71a4bfc643a65bca7", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1ed3c5e7668045d6846f07c71a4bfc643a65bca7", "message": "SLIM-2077-Create-new-secret-management-Improved-configuration", "committedDate": "2020-06-29T11:47:11Z", "type": "commit"}, {"oid": "12007bfbdb1ecbe673087489c59bbc2fb1a3fb55", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/12007bfbdb1ecbe673087489c59bbc2fb1a3fb55", "message": "SLIM-2077-Create-new-secret-management-Applied-New-Code-formatting-rules", "committedDate": "2020-06-29T11:55:46Z", "type": "commit"}, {"oid": "55f22ff736d13023e89e4ea789bd8b03a36b5847", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/55f22ff736d13023e89e4ea789bd8b03a36b5847", "message": "SLIM-2077-Create-new-secret-management-application-RandomizedTestKeys", "committedDate": "2020-06-30T09:10:42Z", "type": "commit"}, {"oid": "913bef393dc28d380dfed0041ed3ddb45041bcd4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/913bef393dc28d380dfed0041ed3ddb45041bcd4", "message": "Review comments processed", "committedDate": "2020-06-30T10:10:57Z", "type": "commit"}, {"oid": "0422cdce058532f0245a685f2d2030e78a8dc0d5", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0422cdce058532f0245a685f2d2030e78a8dc0d5", "message": "SLIM-2077-Create-new-secret-management-review-comments-protocol-adapter", "committedDate": "2020-06-30T17:08:18Z", "type": "commit"}, {"oid": "8426e45af7b1241ef972078ea9996806107c4c6b", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8426e45af7b1241ef972078ea9996806107c4c6b", "message": "SLIM-2512 exchange the shared secret AES with PKI (RSA)", "committedDate": "2020-07-01T14:46:00Z", "type": "commit"}, {"oid": "18c6cc045b6e20630541b95beff33113587ee28f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/18c6cc045b6e20630541b95beff33113587ee28f", "message": "SLIM-2077-Create-new-secret-management-moved-encryption-to-shared-implemened-rsa-for-secret-management", "committedDate": "2020-07-02T13:35:07Z", "type": "commit"}, {"oid": "f81cf0f32e2c483a5b4a00808ede8fbe99da07dc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f81cf0f32e2c483a5b4a00808ede8fbe99da07dc", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2077-Create-new-secret-mgmt-application", "committedDate": "2020-07-03T16:00:31Z", "type": "commit"}, {"oid": "41b1e47ec7d78cb700489b512fc7f9e6b7f85d50", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/41b1e47ec7d78cb700489b512fc7f9e6b7f85d50", "message": "SLIM-2512-HSTN - exchange the shared secret AES with PKI (RSA)", "committedDate": "2020-07-06T07:15:52Z", "type": "commit"}, {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3aeca558df16a07cbffbd6a90129aac8fa0810c4", "message": "SLIM-2077-improved-exception-handling-separated-soap-schema", "committedDate": "2020-07-06T18:08:58Z", "type": "commit"}, {"oid": "6f3d3f091ca71f541febdf5fd1b07d5eb633ca7d", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6f3d3f091ca71f541febdf5fd1b07d5eb633ca7d", "message": "SLIM-2077-fix-in-property-name", "committedDate": "2020-07-07T09:48:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNTYzOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450825639", "bodyText": "@propertysource annotations should be placed on Main.class. That class is annotated with @SpringBootApplication and will be loaded before @configuration annotated classes (which need those properties!)", "author": "jboon", "createdAt": "2020-07-07T12:27:45Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration\n+@PropertySource(\"classpath:osgp-secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java\ndeleted file mode 100644\nindex 262b59e6d0..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.secretmanagement.application.config;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.PropertySource;\n-\n-@Configuration\n-@PropertySource(\"classpath:osgp-secret-management.properties\")\n-@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n-@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n-public class ApplicationConfig {\n-    @Value(\"${component.name}\")\n-    public static final String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyODM5NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450828395", "bodyText": "Use @value(\"${component.name:OSGP-SECRET-MANAGEMENT}\") to provide default value.\nAlso, final fields should be set through constructor only. Best to remove final and I would probably make this field private.", "author": "jboon", "createdAt": "2020-07-07T12:32:43Z", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration\n+@PropertySource(\"classpath:osgp-secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n+public class ApplicationConfig {\n+    @Value(\"${component.name}\")\n+    public static final String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";", "originalCommit": "3aeca558df16a07cbffbd6a90129aac8fa0810c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b3bdbc3abb7923c361f76bd8eab179fdd1262c", "chunk": "diff --git a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java b/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java\ndeleted file mode 100644\nindex 262b59e6d0..0000000000\n--- a/osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.secretmanagement.application.config;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.PropertySource;\n-\n-@Configuration\n-@PropertySource(\"classpath:osgp-secret-management.properties\")\n-@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n-@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n-public class ApplicationConfig {\n-    @Value(\"${component.name}\")\n-    public static final String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";\n-\n-}\n"}}]}