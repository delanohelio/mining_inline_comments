{"pr_number": 370, "pr_title": "Oc 574 update kafka adapter for new avro schema", "pr_createdAt": "2020-07-09T13:28:06Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/370", "timeline": [{"oid": "c5cf0720c5741ac941ee45f986546498d4811aef", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c5cf0720c5741ac941ee45f986546498d4811aef", "message": "OC-574: Updates avro schema.", "committedDate": "2020-07-09T13:18:57Z", "type": "commit"}, {"oid": "1b8186134a8160be76724cbafe3dce1210236deb", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1b8186134a8160be76724cbafe3dce1210236deb", "message": "OC-574: Changes mRid to a uuid.", "committedDate": "2020-07-09T13:27:25Z", "type": "commit"}, {"oid": "c50c068fbc1cd52d21d889574e2edd8e7f741688", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c50c068fbc1cd52d21d889574e2edd8e7f741688", "message": "OC-574: Updates the avro schema so that measurement values can be\nhandled.", "committedDate": "2020-07-10T06:39:29Z", "type": "commit"}, {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/44fc355cd299316f0f2fefe0eac33f5ed642fe9c", "message": "OC-574: Addresses sonar issue.", "committedDate": "2020-07-10T06:51:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MzQ1Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452743456", "bodyText": "Consider using a more specific name like GridMeasurement(PublishedEvent)KafkaProducerConfig in case we need more Kafka producers in the future", "author": "smvdheijden", "createdAt": "2020-07-10T09:50:50Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaProducerConfig.java", "diffHunk": "@@ -17,7 +17,7 @@\n import org.springframework.kafka.core.KafkaTemplate;\n \n @Configuration\n-public class KafkaProducerConfig extends AbstractKafkaProducerConfig<String, MeterReading> {\n+public class KafkaProducerConfig extends AbstractKafkaProducerConfig<String, GridMeasurementPublishedEvent> {", "originalCommit": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDk3Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452810972", "bodyText": "done", "author": "robindenadel", "createdAt": "2020-07-10T12:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MzQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "69956ea3b270a854a28636249475d2703b25d86c", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaProducerConfig.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/GridMeasurementKafkaProducerConfig.java\nsimilarity index 86%\nrename from osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaProducerConfig.java\nrename to osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/GridMeasurementKafkaProducerConfig.java\nindex ddbb595160..8a580962a0 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaProducerConfig.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/GridMeasurementKafkaProducerConfig.java\n\n@@ -17,10 +17,10 @@ import org.springframework.core.env.Environment;\n import org.springframework.kafka.core.KafkaTemplate;\n \n @Configuration\n-public class KafkaProducerConfig extends AbstractKafkaProducerConfig<String, GridMeasurementPublishedEvent> {\n+public class GridMeasurementKafkaProducerConfig extends AbstractKafkaProducerConfig<String, GridMeasurementPublishedEvent> {\n \n     @Autowired\n-    public KafkaProducerConfig(final Environment environment,\n+    public GridMeasurementKafkaProducerConfig(final Environment environment,\n             @Value(\"${distributionautomation.kafka.common.properties.prefix}\") final String propertiesPrefix,\n             @Value(\"${distributionautomation.kafka.topic}\") final String topic) {\n         super(environment, propertiesPrefix, topic);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mzk5MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452743991", "bodyText": "Update comment", "author": "smvdheijden", "createdAt": "2020-07-10T09:51:57Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading", "originalCommit": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "69956ea3b270a854a28636249475d2703b25d86c", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java\ndeleted file mode 100644\nindex 5a2d970f86..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-\n-import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n-import org.opensmartgridplatform.domain.da.measurements.Measurement;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n-import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n-import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n-\n-import ma.glasnost.orika.CustomConverter;\n-import ma.glasnost.orika.MappingContext;\n-import ma.glasnost.orika.metadata.Type;\n-\n-/**\n- * Class for mapping MeasurementReport to MeterReading\n- */\n-public class GridMeasurementPublishedEventMapping\n-        extends CustomConverter<MeasurementReport, GridMeasurementPublishedEvent> {\n-\n-    @Override\n-    public GridMeasurementPublishedEvent convert(final MeasurementReport source,\n-            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n-\n-        final String identification = source.getMeasurementGroups().get(0).getIdentification();\n-\n-        final List<Analog> measurements = new ArrayList<>();\n-        for (final MeasurementGroup measurementGroup : source.getMeasurementGroups()) {\n-            final List<AnalogValue> values = new ArrayList<>();\n-\n-            final List<MeasurementElement> measurementElements = measurementGroup.getMeasurements()\n-                    .stream()\n-                    .map(Measurement::getMeasurementElements)\n-                    .flatMap(List::stream)\n-                    .collect(Collectors.toList());\n-            for (final MeasurementElement element : measurementElements) {\n-                if (element instanceof TimestampMeasurementElement) {\n-                    final TimestampMeasurementElement timestampElement = (TimestampMeasurementElement) element;\n-                    values.add(new AnalogValue(null, timestampElement.getValue(), null));\n-                }\n-                if (element instanceof FloatMeasurementElement) {\n-                    final FloatMeasurementElement floatMeasurementElement = (FloatMeasurementElement) element;\n-                    values.add(new AnalogValue(floatMeasurementElement.getValue(), null, null));\n-                }\n-            }\n-\n-            measurements.add(new Analog(measurementGroup.getIdentification(), UUID.randomUUID().toString(),\n-                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none,\n-                    UnitSymbol.none, new ArrayList<Name>(), values));\n-        }\n-\n-        final PowerSystemResource powerSystemResource = new PowerSystemResource(identification, identification,\n-                new ArrayList<Name>());\n-        final long createdDateTime = System.currentTimeMillis();\n-        return new GridMeasurementPublishedEvent(createdDateTime, identification, UUID.randomUUID().toString(),\n-                \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource, measurements);\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDYyMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452744621", "bodyText": "Do we receive the data as a MeasurementReport or as a String? Shouldn't we convert the semicolon separated string received from the MQTT protocol adapter here?\nConsider renaming to GridMeasurementPublishedEventConverter to make it more consistent with other converters in GXF/OSGP.\nAlso consider adding a unit test for this converter.", "author": "smvdheijden", "createdAt": "2020-07-10T09:53:20Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading\n+ */\n+public class GridMeasurementPublishedEventMapping", "originalCommit": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDgyMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452810821", "bodyText": "removed this converter, added one to convert a string to a GridMeasurementPublishedEvent and added a test for it.", "author": "robindenadel", "createdAt": "2020-07-10T12:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "69956ea3b270a854a28636249475d2703b25d86c", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java\ndeleted file mode 100644\nindex 5a2d970f86..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-\n-import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n-import org.opensmartgridplatform.domain.da.measurements.Measurement;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n-import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n-import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n-\n-import ma.glasnost.orika.CustomConverter;\n-import ma.glasnost.orika.MappingContext;\n-import ma.glasnost.orika.metadata.Type;\n-\n-/**\n- * Class for mapping MeasurementReport to MeterReading\n- */\n-public class GridMeasurementPublishedEventMapping\n-        extends CustomConverter<MeasurementReport, GridMeasurementPublishedEvent> {\n-\n-    @Override\n-    public GridMeasurementPublishedEvent convert(final MeasurementReport source,\n-            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n-\n-        final String identification = source.getMeasurementGroups().get(0).getIdentification();\n-\n-        final List<Analog> measurements = new ArrayList<>();\n-        for (final MeasurementGroup measurementGroup : source.getMeasurementGroups()) {\n-            final List<AnalogValue> values = new ArrayList<>();\n-\n-            final List<MeasurementElement> measurementElements = measurementGroup.getMeasurements()\n-                    .stream()\n-                    .map(Measurement::getMeasurementElements)\n-                    .flatMap(List::stream)\n-                    .collect(Collectors.toList());\n-            for (final MeasurementElement element : measurementElements) {\n-                if (element instanceof TimestampMeasurementElement) {\n-                    final TimestampMeasurementElement timestampElement = (TimestampMeasurementElement) element;\n-                    values.add(new AnalogValue(null, timestampElement.getValue(), null));\n-                }\n-                if (element instanceof FloatMeasurementElement) {\n-                    final FloatMeasurementElement floatMeasurementElement = (FloatMeasurementElement) element;\n-                    values.add(new AnalogValue(floatMeasurementElement.getValue(), null, null));\n-                }\n-            }\n-\n-            measurements.add(new Analog(measurementGroup.getIdentification(), UUID.randomUUID().toString(),\n-                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none,\n-                    UnitSymbol.none, new ArrayList<Name>(), values));\n-        }\n-\n-        final PowerSystemResource powerSystemResource = new PowerSystemResource(identification, identification,\n-                new ArrayList<Name>());\n-        final long createdDateTime = System.currentTimeMillis();\n-        return new GridMeasurementPublishedEvent(createdDateTime, identification, UUID.randomUUID().toString(),\n-                \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource, measurements);\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjMzOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452746339", "bodyText": "What's the purpose of this randomUUID? Does it only have any value for the recipient? Or do we need to keep track of this in GXF/OSGP as well (for example for audit logging)?", "author": "smvdheijden", "createdAt": "2020-07-10T09:56:43Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading\n+ */\n+public class GridMeasurementPublishedEventMapping\n+        extends CustomConverter<MeasurementReport, GridMeasurementPublishedEvent> {\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final MeasurementReport source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String identification = source.getMeasurementGroups().get(0).getIdentification();\n+\n+        final List<Analog> measurements = new ArrayList<>();\n+        for (final MeasurementGroup measurementGroup : source.getMeasurementGroups()) {\n+            final List<AnalogValue> values = new ArrayList<>();\n+\n+            final List<MeasurementElement> measurementElements = measurementGroup.getMeasurements()\n+                    .stream()\n+                    .map(Measurement::getMeasurementElements)\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList());\n+            for (final MeasurementElement element : measurementElements) {\n+                if (element instanceof TimestampMeasurementElement) {\n+                    final TimestampMeasurementElement timestampElement = (TimestampMeasurementElement) element;\n+                    values.add(new AnalogValue(null, timestampElement.getValue(), null));\n+                }\n+                if (element instanceof FloatMeasurementElement) {\n+                    final FloatMeasurementElement floatMeasurementElement = (FloatMeasurementElement) element;\n+                    values.add(new AnalogValue(floatMeasurementElement.getValue(), null, null));\n+                }\n+            }\n+\n+            measurements.add(new Analog(measurementGroup.getIdentification(), UUID.randomUUID().toString(),", "originalCommit": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NzI0Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452767242", "bodyText": "Part of the schema is:\nThe mRID is unique within an exchange context. Global uniqueness is easily achieved by using a UUID", "author": "robindenadel", "createdAt": "2020-07-10T10:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNzI3Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457417273", "bodyText": "I am thinking about the part of the mRID definition in the Avro schema that you did not copy:\n\nMaster resource identifier issued by a model authority.\n\nI don't know what a \"model authority\" or an \"exchange context\" is in this context, and therefore am a bit doubtful whether we can assume this role and determine the mRID ourselves. As it appears to be nullable a better way to deal with this might be to leave it unset, but I cannot say what is the correct way to handle this, due to lack of knowledge.", "author": "bvdzwet", "createdAt": "2020-07-20T14:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3NzA2Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r459377066", "bodyText": "Joep van Genuchten (the creator of the AVRO schema) confirmed we can generate random UUIDs ourselves as values for the mRID.", "author": "rlemmers", "createdAt": "2020-07-23T11:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "69956ea3b270a854a28636249475d2703b25d86c", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java\ndeleted file mode 100644\nindex 5a2d970f86..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-\n-import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n-import org.opensmartgridplatform.domain.da.measurements.Measurement;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n-import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n-import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n-\n-import ma.glasnost.orika.CustomConverter;\n-import ma.glasnost.orika.MappingContext;\n-import ma.glasnost.orika.metadata.Type;\n-\n-/**\n- * Class for mapping MeasurementReport to MeterReading\n- */\n-public class GridMeasurementPublishedEventMapping\n-        extends CustomConverter<MeasurementReport, GridMeasurementPublishedEvent> {\n-\n-    @Override\n-    public GridMeasurementPublishedEvent convert(final MeasurementReport source,\n-            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n-\n-        final String identification = source.getMeasurementGroups().get(0).getIdentification();\n-\n-        final List<Analog> measurements = new ArrayList<>();\n-        for (final MeasurementGroup measurementGroup : source.getMeasurementGroups()) {\n-            final List<AnalogValue> values = new ArrayList<>();\n-\n-            final List<MeasurementElement> measurementElements = measurementGroup.getMeasurements()\n-                    .stream()\n-                    .map(Measurement::getMeasurementElements)\n-                    .flatMap(List::stream)\n-                    .collect(Collectors.toList());\n-            for (final MeasurementElement element : measurementElements) {\n-                if (element instanceof TimestampMeasurementElement) {\n-                    final TimestampMeasurementElement timestampElement = (TimestampMeasurementElement) element;\n-                    values.add(new AnalogValue(null, timestampElement.getValue(), null));\n-                }\n-                if (element instanceof FloatMeasurementElement) {\n-                    final FloatMeasurementElement floatMeasurementElement = (FloatMeasurementElement) element;\n-                    values.add(new AnalogValue(floatMeasurementElement.getValue(), null, null));\n-                }\n-            }\n-\n-            measurements.add(new Analog(measurementGroup.getIdentification(), UUID.randomUUID().toString(),\n-                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none,\n-                    UnitSymbol.none, new ArrayList<Name>(), values));\n-        }\n-\n-        final PowerSystemResource powerSystemResource = new PowerSystemResource(identification, identification,\n-                new ArrayList<Name>());\n-        final long createdDateTime = System.currentTimeMillis();\n-        return new GridMeasurementPublishedEvent(createdDateTime, identification, UUID.randomUUID().toString(),\n-                \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource, measurements);\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1MDYzMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452750632", "bodyText": "Consider renaming to GridMeasurementPublishedEventKafkaConsumerConfig", "author": "smvdheijden", "createdAt": "2020-07-10T10:05:22Z", "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventConsumerConfig.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.logging.config;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.shared.application.config.kafka.AbstractKafkaConsumerConfig;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+import org.springframework.kafka.core.ConsumerFactory;\n+\n+@Configuration\n+@Conditional(PeakShavingLoggingEnabled.class)\n+public class GridMeasurementPublishedEventConsumerConfig", "originalCommit": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDQ4OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452810488", "bodyText": "done", "author": "robindenadel", "createdAt": "2020-07-10T12:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1MDYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "69956ea3b270a854a28636249475d2703b25d86c", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventConsumerConfig.java b/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java\nsimilarity index 93%\nrename from osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventConsumerConfig.java\nrename to osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java\nindex 39ff8fe212..7446061f31 100644\n--- a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventConsumerConfig.java\n+++ b/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java\n\n@@ -19,10 +19,10 @@ import org.springframework.kafka.core.ConsumerFactory;\n \n @Configuration\n @Conditional(PeakShavingLoggingEnabled.class)\n-public class GridMeasurementPublishedEventConsumerConfig\n+public class GridMeasurementPublishedEventKafkaConsumerConfig\n         extends AbstractKafkaConsumerConfig<String, GridMeasurementPublishedEvent> {\n \n-    public GridMeasurementPublishedEventConsumerConfig(final Environment environment,\n+    public GridMeasurementPublishedEventKafkaConsumerConfig(final Environment environment,\n             @Value(\"${grid.measurement.published.event.kafka.common.properties.prefix}\") final String propertiesPrefix,\n             @Value(\"${grid.measurement.published.event.kafka.topic}\") final String topic,\n             @Value(\"${grid.measurement.published.event.kafka.consumer.concurrency}\") final int concurrency,\n"}}, {"oid": "69956ea3b270a854a28636249475d2703b25d86c", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/69956ea3b270a854a28636249475d2703b25d86c", "message": "OC-574: Addresses review comments.", "committedDate": "2020-07-10T12:25:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwMTYxOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452901619", "bodyText": "Congestion would probably not be needed, as they, as far as I know, go in the opposite direction.", "author": "smvdheijden", "createdAt": "2020-07-10T15:05:12Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion", "originalCommit": "69956ea3b270a854a28636249475d2703b25d86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMjgyOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457112828", "bodyText": "done", "author": "robindenadel", "createdAt": "2020-07-20T07:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwMTYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ca289f4a969b952938c4a2949ac65df20abaf849", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex ee45c0a08a..4fb4aa6ad5 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -31,52 +31,50 @@ import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n /**\n- * Class for mapping String containing a measurement or congestion\n- * to GridMeasurementPublishedEvent\n+ * Class for mapping String containing a measurement to GridMeasurementPublishedEvent\n  */\n /**\n  * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n  * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n  * current_returned_L3;\n  */\n-/**\n- * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n- * current_returned_L1; current_returned_L2; current_returned_L3;\n- *\n- */\n public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n+    private static final int VOLTAGE_START_INDEX = 1;\n+    private static final int CURRENT_START_INDEX = 4;\n+    private static final int CURRENT_RETURNED_START_INDEX = 7;\n+    private static final int CURRENT_RETURNED_END_INDEX = 10;\n+\n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         final String[] values = source.split(\";\");\n-        if (values.length != 7 && values.length != 10) {\n+        if (values.length != 10) {\n             LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n             return null;\n         }\n         final List<Analog> measurements = new ArrayList<>();\n \n-        int startIndexCurrent = 1;\n-        int endIndexCurrent = 7;\n         final String eanCode = values[0];\n-        if (values.length == 10) {\n-            for (int index = 1; index < 4; index++) {\n-                measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n-                        MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n-                        new ArrayList<Name>(),\n-                        Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n-            }\n-            startIndexCurrent = 4;\n-            endIndexCurrent = 10;\n+        for (int index = VOLTAGE_START_INDEX; index < CURRENT_START_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":voltage_L\" + index, UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+        }\n+\n+        for (int index = CURRENT_START_INDEX; index < CURRENT_RETURNED_START_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":current_in_L\" + (index - 3), UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n         }\n \n-        for (int index = startIndexCurrent; index < endIndexCurrent; index++) {\n-            measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n-                    MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                    Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+        for (int index = CURRENT_RETURNED_START_INDEX; index < CURRENT_RETURNED_END_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":current_returned_L\" + (index - 6), UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n         }\n \n         final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode, UUID.randomUUID().toString(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwOTExMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452909110", "bodyText": "Probably only check on length 10 needed here.", "author": "smvdheijden", "createdAt": "2020-07-10T15:17:53Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */\n+public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final String source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String[] values = source.split(\";\");\n+        if (values.length != 7 && values.length != 10) {", "originalCommit": "69956ea3b270a854a28636249475d2703b25d86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMjg5Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457112897", "bodyText": "done", "author": "robindenadel", "createdAt": "2020-07-20T07:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwOTExMA=="}], "type": "inlineReview", "revised_code": {"commit": "ca289f4a969b952938c4a2949ac65df20abaf849", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex ee45c0a08a..4fb4aa6ad5 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -31,52 +31,50 @@ import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n /**\n- * Class for mapping String containing a measurement or congestion\n- * to GridMeasurementPublishedEvent\n+ * Class for mapping String containing a measurement to GridMeasurementPublishedEvent\n  */\n /**\n  * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n  * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n  * current_returned_L3;\n  */\n-/**\n- * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n- * current_returned_L1; current_returned_L2; current_returned_L3;\n- *\n- */\n public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n+    private static final int VOLTAGE_START_INDEX = 1;\n+    private static final int CURRENT_START_INDEX = 4;\n+    private static final int CURRENT_RETURNED_START_INDEX = 7;\n+    private static final int CURRENT_RETURNED_END_INDEX = 10;\n+\n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         final String[] values = source.split(\";\");\n-        if (values.length != 7 && values.length != 10) {\n+        if (values.length != 10) {\n             LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n             return null;\n         }\n         final List<Analog> measurements = new ArrayList<>();\n \n-        int startIndexCurrent = 1;\n-        int endIndexCurrent = 7;\n         final String eanCode = values[0];\n-        if (values.length == 10) {\n-            for (int index = 1; index < 4; index++) {\n-                measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n-                        MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n-                        new ArrayList<Name>(),\n-                        Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n-            }\n-            startIndexCurrent = 4;\n-            endIndexCurrent = 10;\n+        for (int index = VOLTAGE_START_INDEX; index < CURRENT_START_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":voltage_L\" + index, UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+        }\n+\n+        for (int index = CURRENT_START_INDEX; index < CURRENT_RETURNED_START_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":current_in_L\" + (index - 3), UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n         }\n \n-        for (int index = startIndexCurrent; index < endIndexCurrent; index++) {\n-            measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n-                    MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                    Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+        for (int index = CURRENT_RETURNED_START_INDEX; index < CURRENT_RETURNED_END_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":current_returned_L\" + (index - 6), UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n         }\n \n         final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode, UUID.randomUUID().toString(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMjQ4Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452912486", "bodyText": "This code could probably be simplified, when congestion message would not be needed to process here.\nNevertheless I think it could be made a bit clearer by defining startIndexVoltage and endIndexVoltage variables (or even better constants?) as well.", "author": "smvdheijden", "createdAt": "2020-07-10T15:23:42Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */\n+public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final String source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String[] values = source.split(\";\");\n+        if (values.length != 7 && values.length != 10) {\n+            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+            return null;\n+        }\n+        final List<Analog> measurements = new ArrayList<>();\n+\n+        int startIndexCurrent = 1;\n+        int endIndexCurrent = 7;\n+        final String eanCode = values[0];\n+        if (values.length == 10) {\n+            for (int index = 1; index < 4; index++) {\n+                measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n+                        MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n+                        new ArrayList<Name>(),\n+                        Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+            }\n+            startIndexCurrent = 4;\n+            endIndexCurrent = 10;\n+        }", "originalCommit": "69956ea3b270a854a28636249475d2703b25d86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMjk2MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457112961", "bodyText": "done", "author": "robindenadel", "createdAt": "2020-07-20T07:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMjQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ca289f4a969b952938c4a2949ac65df20abaf849", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex ee45c0a08a..4fb4aa6ad5 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -31,52 +31,50 @@ import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n /**\n- * Class for mapping String containing a measurement or congestion\n- * to GridMeasurementPublishedEvent\n+ * Class for mapping String containing a measurement to GridMeasurementPublishedEvent\n  */\n /**\n  * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n  * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n  * current_returned_L3;\n  */\n-/**\n- * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n- * current_returned_L1; current_returned_L2; current_returned_L3;\n- *\n- */\n public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n+    private static final int VOLTAGE_START_INDEX = 1;\n+    private static final int CURRENT_START_INDEX = 4;\n+    private static final int CURRENT_RETURNED_START_INDEX = 7;\n+    private static final int CURRENT_RETURNED_END_INDEX = 10;\n+\n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         final String[] values = source.split(\";\");\n-        if (values.length != 7 && values.length != 10) {\n+        if (values.length != 10) {\n             LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n             return null;\n         }\n         final List<Analog> measurements = new ArrayList<>();\n \n-        int startIndexCurrent = 1;\n-        int endIndexCurrent = 7;\n         final String eanCode = values[0];\n-        if (values.length == 10) {\n-            for (int index = 1; index < 4; index++) {\n-                measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n-                        MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n-                        new ArrayList<Name>(),\n-                        Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n-            }\n-            startIndexCurrent = 4;\n-            endIndexCurrent = 10;\n+        for (int index = VOLTAGE_START_INDEX; index < CURRENT_START_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":voltage_L\" + index, UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+        }\n+\n+        for (int index = CURRENT_START_INDEX; index < CURRENT_RETURNED_START_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":current_in_L\" + (index - 3), UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n         }\n \n-        for (int index = startIndexCurrent; index < endIndexCurrent; index++) {\n-            measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n-                    MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                    Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+        for (int index = CURRENT_RETURNED_START_INDEX; index < CURRENT_RETURNED_END_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":current_returned_L\" + (index - 6), UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n         }\n \n         final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode, UUID.randomUUID().toString(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzgxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452913813", "bodyText": "Consider renaming measurementReport to measurement.", "author": "smvdheijden", "createdAt": "2020-07-10T15:25:53Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java", "diffHunk": "@@ -30,7 +29,7 @@ public GridMeasurementPublishedEventProducer(\n         this.mapper = mapper;\n     }\n \n-    public void send(final MeasurementReport measurementReport) {\n+    public void send(final String measurementReport) {", "originalCommit": "69956ea3b270a854a28636249475d2703b25d86c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca289f4a969b952938c4a2949ac65df20abaf849", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java\nindex c7a4639edd..5c8970dfe2 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java\n\n@@ -29,9 +29,9 @@ public class GridMeasurementPublishedEventProducer {\n         this.mapper = mapper;\n     }\n \n-    public void send(final String measurementReport) {\n+    public void send(final String measurement) {\n \n-        final GridMeasurementPublishedEvent meterReading = this.mapper.map(measurementReport,\n+        final GridMeasurementPublishedEvent meterReading = this.mapper.map(measurement,\n                 GridMeasurementPublishedEvent.class);\n         /*\n          * No need for callback functionality now; by default, the template is\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNDMzNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452914336", "bodyText": "Could probably be removed.", "author": "smvdheijden", "createdAt": "2020-07-10T15:26:46Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+\n+class GridMeasurementPublishedEventConverterTest {\n+\n+    private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n+\n+    @Test\n+    void testConvertMeasurement() {\n+        final String measurement = \"TST-01; 220.1; 220.2; 220.3; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\").isEqualTo(this.expectedMeasurements());\n+    }\n+\n+    @Test\n+    void testConvertCongestion() {\n+        final String measurement = \"TST-01; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(this.expectedCurrentMeasurements());\n+    }", "originalCommit": "69956ea3b270a854a28636249475d2703b25d86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMzE0Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457113142", "bodyText": "done", "author": "robindenadel", "createdAt": "2020-07-20T07:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNDMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "ca289f4a969b952938c4a2949ac65df20abaf849", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java\nindex 12f09132cc..54e3a6738f 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java\n\n@@ -37,16 +37,6 @@ class GridMeasurementPublishedEventConverterTest {\n         assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\").isEqualTo(this.expectedMeasurements());\n     }\n \n-    @Test\n-    void testConvertCongestion() {\n-        final String measurement = \"TST-01; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n-        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n-        final List<Analog> measurements = event.getMeasurements();\n-\n-        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n-                .isEqualTo(this.expectedCurrentMeasurements());\n-    }\n-\n     @Test\n     void testSomeOtherString() {\n         final String someOtherString = \"TST-01\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNzQ4MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452917480", "bodyText": "Consider extracting a method for expectedVoltageMeasurements as well in order to improve readability.", "author": "smvdheijden", "createdAt": "2020-07-10T15:32:14Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+\n+class GridMeasurementPublishedEventConverterTest {\n+\n+    private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n+\n+    @Test\n+    void testConvertMeasurement() {\n+        final String measurement = \"TST-01; 220.1; 220.2; 220.3; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\").isEqualTo(this.expectedMeasurements());\n+    }\n+\n+    @Test\n+    void testConvertCongestion() {\n+        final String measurement = \"TST-01; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(this.expectedCurrentMeasurements());\n+    }\n+\n+    @Test\n+    void testSomeOtherString() {\n+        final String someOtherString = \"TST-01\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(someOtherString,\n+                GridMeasurementPublishedEvent.class);\n+\n+        assertThat(event).isNull();\n+\n+    }\n+\n+    private List<Analog> expectedMeasurements() {\n+        final List<Analog> measurements = new ArrayList<>();\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.1f, null, null))));\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.2f, null, null))));\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.3f, null, null))));", "originalCommit": "69956ea3b270a854a28636249475d2703b25d86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMzM0OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457113349", "bodyText": "done", "author": "robindenadel", "createdAt": "2020-07-20T07:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNzQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "ca289f4a969b952938c4a2949ac65df20abaf849", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java\nindex 12f09132cc..54e3a6738f 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java\n\n@@ -37,16 +37,6 @@ class GridMeasurementPublishedEventConverterTest {\n         assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\").isEqualTo(this.expectedMeasurements());\n     }\n \n-    @Test\n-    void testConvertCongestion() {\n-        final String measurement = \"TST-01; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n-        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n-        final List<Analog> measurements = event.getMeasurements();\n-\n-        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n-                .isEqualTo(this.expectedCurrentMeasurements());\n-    }\n-\n     @Test\n     void testSomeOtherString() {\n         final String someOtherString = \"TST-01\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxOTA3OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452919079", "bodyText": "Could probably be deleted.", "author": "smvdheijden", "createdAt": "2020-07-10T15:35:13Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */", "originalCommit": "69956ea3b270a854a28636249475d2703b25d86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNDQ4Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457114482", "bodyText": "done", "author": "robindenadel", "createdAt": "2020-07-20T07:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxOTA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ca289f4a969b952938c4a2949ac65df20abaf849", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex ee45c0a08a..4fb4aa6ad5 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -31,52 +31,50 @@ import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n /**\n- * Class for mapping String containing a measurement or congestion\n- * to GridMeasurementPublishedEvent\n+ * Class for mapping String containing a measurement to GridMeasurementPublishedEvent\n  */\n /**\n  * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n  * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n  * current_returned_L3;\n  */\n-/**\n- * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n- * current_returned_L1; current_returned_L2; current_returned_L3;\n- *\n- */\n public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n+    private static final int VOLTAGE_START_INDEX = 1;\n+    private static final int CURRENT_START_INDEX = 4;\n+    private static final int CURRENT_RETURNED_START_INDEX = 7;\n+    private static final int CURRENT_RETURNED_END_INDEX = 10;\n+\n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n         final String[] values = source.split(\";\");\n-        if (values.length != 7 && values.length != 10) {\n+        if (values.length != 10) {\n             LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n             return null;\n         }\n         final List<Analog> measurements = new ArrayList<>();\n \n-        int startIndexCurrent = 1;\n-        int endIndexCurrent = 7;\n         final String eanCode = values[0];\n-        if (values.length == 10) {\n-            for (int index = 1; index < 4; index++) {\n-                measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n-                        MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n-                        new ArrayList<Name>(),\n-                        Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n-            }\n-            startIndexCurrent = 4;\n-            endIndexCurrent = 10;\n+        for (int index = VOLTAGE_START_INDEX; index < CURRENT_START_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":voltage_L\" + index, UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+        }\n+\n+        for (int index = CURRENT_START_INDEX; index < CURRENT_RETURNED_START_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":current_in_L\" + (index - 3), UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n         }\n \n-        for (int index = startIndexCurrent; index < endIndexCurrent; index++) {\n-            measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n-                    MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A, new ArrayList<Name>(),\n-                    Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+        for (int index = CURRENT_RETURNED_START_INDEX; index < CURRENT_RETURNED_END_INDEX; index++) {\n+            measurements.add(new Analog(eanCode + \":current_returned_L\" + (index - 6), UUID.randomUUID().toString(),\n+                    AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.A,\n+                    new ArrayList<Name>(), Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n         }\n \n         final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode, UUID.randomUUID().toString(),\n"}}, {"oid": "ca289f4a969b952938c4a2949ac65df20abaf849", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ca289f4a969b952938c4a2949ac65df20abaf849", "message": "OC-574: Addresses review comments.", "committedDate": "2020-07-20T07:01:41Z", "type": "commit"}, {"oid": "1165353e29cd9aaaf8bf2a0d2758782007512b5f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1165353e29cd9aaaf8bf2a0d2758782007512b5f", "message": "OC-574: Refactors the creation of an Analog.", "committedDate": "2020-07-20T07:20:33Z", "type": "commit"}, {"oid": "926dfdd044f2563462b205c68b986c2d7ea48c7a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/926dfdd044f2563462b205c68b986c2d7ea48c7a", "message": "OC-574: Uses a constant instead of a magic number.", "committedDate": "2020-07-20T07:23:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxNTg2MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457315860", "bodyText": "Closing the javadoc and opening a new one looses the text from the first in the result.\nUse something like  * <p> instead if you want to keep all text and have some white space.", "author": "bvdzwet", "createdAt": "2020-07-20T11:56:30Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement to GridMeasurementPublishedEvent\n+ */\n+/**", "originalCommit": "926dfdd044f2563462b205c68b986c2d7ea48c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDc2NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457434764", "bodyText": "done so", "author": "robindenadel", "createdAt": "2020-07-20T14:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxNTg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "0260c725ba9e1e7e31345061b571064f148dfe96", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\nindex 560c2c7351..dc03710619 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java\n\n@@ -18,7 +18,6 @@ import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n"}}, {"oid": "0260c725ba9e1e7e31345061b571064f148dfe96", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0260c725ba9e1e7e31345061b571064f148dfe96", "message": "OC-574: Addresses review comment.", "committedDate": "2020-07-20T14:24:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDExMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457430110", "bodyText": "Should probably be a conditional on the GridMeasurementPublishedEventLoggingEnabled.class instead.", "author": "bvdzwet", "createdAt": "2020-07-20T14:20:30Z", "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.logging.config;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.shared.application.config.kafka.AbstractKafkaConsumerConfig;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+import org.springframework.kafka.core.ConsumerFactory;\n+\n+@Configuration\n+@Conditional(PeakShavingLoggingEnabled.class)", "originalCommit": "926dfdd044f2563462b205c68b986c2d7ea48c7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a50a0212b69597b6bf6a2f5dbb2ea5d7b23c7a83", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java b/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java\nindex 7446061f31..b0af55df1f 100644\n--- a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java\n+++ b/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java\n\n@@ -18,7 +18,7 @@ import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n import org.springframework.kafka.core.ConsumerFactory;\n \n @Configuration\n-@Conditional(PeakShavingLoggingEnabled.class)\n+@Conditional(GridMeasurementPublishedEventLoggingEnabled.class)\n public class GridMeasurementPublishedEventKafkaConsumerConfig\n         extends AbstractKafkaConsumerConfig<String, GridMeasurementPublishedEvent> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMzY1NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457433655", "bodyText": "With the refactoring of the type from MeterReading to GridMeasurementPublishedEvent, the name of variable meterReading does not look a very good fit anymore.", "author": "bvdzwet", "createdAt": "2020-07-20T14:24:05Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java", "diffHunk": "@@ -8,34 +8,31 @@\n package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n \n import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.kafka.core.KafkaTemplate;\n import org.springframework.stereotype.Service;\n \n-// TODO - Rename class once AVRO message format is known\n @Service\n-public class MeterReadingProducer {\n+public class GridMeasurementPublishedEventProducer {\n \n-    private final KafkaTemplate<String, MeterReading> kafkaTemplate;\n+    private final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate;\n \n     private final DistributionAutomationMapper mapper;\n \n     @Autowired\n-    public MeterReadingProducer(\n-            @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, MeterReading> kafkaTemplate,\n+    public GridMeasurementPublishedEventProducer(\n+            @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate,\n             final DistributionAutomationMapper mapper) {\n         this.kafkaTemplate = kafkaTemplate;\n         this.mapper = mapper;\n     }\n \n-    public void send(final MeasurementReport measurementReport) {\n+    public void send(final String measurement) {\n \n-        // TODO - Map measurementReport to correct Avro message format and\n-        // send...\n-        final MeterReading meterReading = this.mapper.map(measurementReport, MeterReading.class);\n+        final GridMeasurementPublishedEvent meterReading = this.mapper.map(measurement,", "originalCommit": "926dfdd044f2563462b205c68b986c2d7ea48c7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a50a0212b69597b6bf6a2f5dbb2ea5d7b23c7a83", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java\nindex 5c8970dfe2..990acd2d9b 100644\n--- a/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java\n+++ b/osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java\n\n@@ -31,14 +31,14 @@ public class GridMeasurementPublishedEventProducer {\n \n     public void send(final String measurement) {\n \n-        final GridMeasurementPublishedEvent meterReading = this.mapper.map(measurement,\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement,\n                 GridMeasurementPublishedEvent.class);\n         /*\n          * No need for callback functionality now; by default, the template is\n          * configured with a LoggingProducerListener, which logs errors and does\n          * nothing when the send is successful.\n          */\n-        this.kafkaTemplate.sendDefault(meterReading);\n+        this.kafkaTemplate.sendDefault(event);\n     }\n \n }\n"}}, {"oid": "a50a0212b69597b6bf6a2f5dbb2ea5d7b23c7a83", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a50a0212b69597b6bf6a2f5dbb2ea5d7b23c7a83", "message": "OC-574: Addresses review comments.", "committedDate": "2020-07-21T05:51:09Z", "type": "commit"}]}