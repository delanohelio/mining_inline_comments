{"pr_number": 451, "pr_title": "FLEX-5445: Support for several messages of the same type for one mock\u2026", "pr_createdAt": "2020-10-08T12:36:37Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/451", "timeline": [{"oid": "ac0b0c2900416aa40065396d7f92c6960f437043", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ac0b0c2900416aa40065396d7f92c6960f437043", "message": "FLEX-5445: Support for several messages of the same type for one mocked device. Support for several mocked devices. Initial commit to see which cucumber test fail during build", "committedDate": "2020-10-08T12:29:41Z", "type": "commit"}, {"oid": "59770869fcefb103276b460b429ce46448744705", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/59770869fcefb103276b460b429ce46448744705", "message": "FLEX-5445: Now a particular device can wait for reception of a partical message", "committedDate": "2020-10-08T14:43:33Z", "type": "commit"}, {"oid": "1fcc2d0f8a0af2baaea68129d1a55d233dbe57f2", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1fcc2d0f8a0af2baaea68129d1a55d233dbe57f2", "message": "FLEX-5445: Bugfix->reversed order of returned messages of the same type", "committedDate": "2020-10-09T10:42:29Z", "type": "commit"}, {"oid": "7eba30d8aaac635f9549702f78689ca58e671364", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/7eba30d8aaac635f9549702f78689ca58e671364", "message": "FLEX-5445: Added many mock server steps needed for mocking a non-default device", "committedDate": "2020-10-09T14:40:32Z", "type": "commit"}, {"oid": "fbf2db5573b09de85aed608ba3518f0dfd4021ff", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fbf2db5573b09de85aed608ba3518f0dfd4021ff", "message": "FLEX-5445: Fixed cucumber tests related to multiple devices", "committedDate": "2020-10-12T12:09:44Z", "type": "commit"}, {"oid": "55dd65fae38946308196f733ba35f80703ed66ee", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/55dd65fae38946308196f733ba35f80703ed66ee", "message": "FLEX-5445: added missing cucumber step 'the device returns a set tariff schedule response'", "committedDate": "2020-10-12T12:20:27Z", "type": "commit"}, {"oid": "6db279f133a356b3e8a6c6bd3c7a806dcba3f160", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6db279f133a356b3e8a6c6bd3c7a806dcba3f160", "message": "FLEX-5445: reverted a state to FAILURE in SetConfiguration.feature. It was accidentally changed", "committedDate": "2020-10-12T12:26:48Z", "type": "commit"}, {"oid": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c36843cb6afe48da22e2448a9e7818c772aff0c2", "message": "FLEX-5445: reverted a state to FAILURE in SetConfiguration.feature. It was accidentally changed", "committedDate": "2020-10-12T12:28:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNDM2Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504014367", "bodyText": "Some improper camel casing. I am not sure how much was already there and if any was introduced here, but abbreviations like OSLP or UID should be camel-cased like Oslp and Uid and not in all upper-case letters.", "author": "bvdzwet", "createdAt": "2020-10-13T14:47:35Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -106,12 +106,27 @@\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification) {\n-        final Message message = this.oslpMockServer.waitForRequest(MessageType.GET_CONFIGURATION);\n+    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+            throws DeviceSimulatorException {\n+        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+    }", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MTMzMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504761330", "bodyText": "I will refactor all to getDeviceUid", "author": "joostknapen", "createdAt": "2020-10-14T15:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNDM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMyMzE0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505323148", "bodyText": "I am not sure how much was already there --> most of it was already there ;-)", "author": "joostknapen", "createdAt": "2020-10-15T08:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNDM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\nindex b7c34527b6..2a1f83ca86 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n\n@@ -99,58 +99,65 @@ public class OslpDeviceSteps {\n     private OslpDeviceRepository oslpDeviceRepository;\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the device.\n+     * Verify that a get configuration Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetConfigurationOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetConfigurationOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the specific device.\n+     * Verify that a get configuration Oslp message is sent to the specific device.\n+     *\n+     * @param protocol\n+     *            The protocol over which the device communicates. - NOT USED -\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n+     *            device. - NOT USED -\n+     *\n+     * @param deviceUid\n+     *            The device Uid expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetConfigurationOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_CONFIGURATION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_CONFIGURATION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetConfigurationRequest()).isTrue();\n     }\n \n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the device.\n+     * Verify that a get firmware version Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetFirmwareVersionOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the specific device.\n+     * Verify that a get firmware version Oslp message is sent to the specific device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_FIRMWARE_VERSION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_FIRMWARE_VERSION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetFirmwareVersionRequest()).isTrue();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyMjk2MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504022960", "bodyText": "It either makes sense or does not make sense to have both the device identification and the device UID as parameters to a method like this, depending on whether my understanding about the device UID is correct.\nI thought the device UID would always be the bytes of the device identification, encoded as a base-64 string (in code Base64.encodeBase64String(deviceIdentification.getBytes(StandardCharsets.US_ASCII)) as it is applied in the DeviceConverter of osgp-adapter-ws-publiclighting).\nIf that understanding of mine is indeed correct, we should only ever specify both device identification and device UID as inputs if we would want to check handling of unmatched values (according to the relation described before).\nIn all other cases we can derive one from the other, and for readability probably just talk about the device identification in the steps.\nAs I don't think this idea I am having is applied in our current test base, we maybe should check both if it is correct, and if so, whether it would be good to start applying it from here at this moment.", "author": "bvdzwet", "createdAt": "2020-10-13T14:58:25Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -106,12 +106,27 @@\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification) {\n-        final Message message = this.oslpMockServer.waitForRequest(MessageType.GET_CONFIGURATION);\n+    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+            throws DeviceSimulatorException {\n+        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+    }\n+\n+    /**\n+     * Verify that a get configuration OSLP message is sent to the specific device.\n+     *\n+     * @param deviceIdentification\n+     *            The device identification expected in the message to the\n+     *            device.\n+     */\n+    @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n+    public void aGetConfigurationOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2ODk5OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504768999", "bodyText": "As how things are build in our cucumber test set your statement is not true. (I am not saying that you are wrong, but that's not how the cucumber test are set up)\nThe default device_uid as set in PlatformDefaults.java = dGVzdDEyMzQ1Njc4. That decodes to test12345678\nThe default device_identifcation as set in PlatformDefaults.java = TD01\nSo in the tests device_uid and device_identifacation are not coupled in any way. If we do want to couple them, that will likely requires changes in many tests. I did not look into that. I also wa not aware of the (pretented) relatation between device_uid and device_identification.\nFor now, I will suggest to keep the fields unrelated. Maybe it should be another issue on the back log.\nWhat do you think?", "author": "joostknapen", "createdAt": "2020-10-14T15:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyMjk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwMjQ3OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504802479", "bodyText": "Agreed it would probably have too much impact to do something about the device identification vs UID split to make the tests simpler (if the assumptions hold up we can regard the relation between the two as fixed).", "author": "bvdzwet", "createdAt": "2020-10-14T16:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyMjk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\nindex b7c34527b6..2a1f83ca86 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n\n@@ -99,58 +99,65 @@ public class OslpDeviceSteps {\n     private OslpDeviceRepository oslpDeviceRepository;\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the device.\n+     * Verify that a get configuration Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetConfigurationOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetConfigurationOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the specific device.\n+     * Verify that a get configuration Oslp message is sent to the specific device.\n+     *\n+     * @param protocol\n+     *            The protocol over which the device communicates. - NOT USED -\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n+     *            device. - NOT USED -\n+     *\n+     * @param deviceUid\n+     *            The device Uid expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetConfigurationOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_CONFIGURATION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_CONFIGURATION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetConfigurationRequest()).isTrue();\n     }\n \n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the device.\n+     * Verify that a get firmware version Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetFirmwareVersionOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the specific device.\n+     * Verify that a get firmware version Oslp message is sent to the specific device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_FIRMWARE_VERSION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_FIRMWARE_VERSION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetFirmwareVersionRequest()).isTrue();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNTYwNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504025607", "bodyText": "Any reason to document the deviceIdentification and not document the other params?", "author": "bvdzwet", "createdAt": "2020-10-13T15:01:41Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -106,12 +106,27 @@\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification) {\n-        final Message message = this.oslpMockServer.waitForRequest(MessageType.GET_CONFIGURATION);\n+    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+            throws DeviceSimulatorException {\n+        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+    }\n+\n+    /**\n+     * Verify that a get configuration OSLP message is sent to the specific device.\n+     *\n+     * @param deviceIdentification\n+     *            The device identification expected in the message to the\n+     *            device.", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3MDU5Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504770596", "bodyText": "No, I guess this is old code. There are, unfortunately, many flaws in the Java documentation. I can have a look at this case.", "author": "joostknapen", "createdAt": "2020-10-14T15:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNTYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMzNzUxNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505337516", "bodyText": "I just checked. All methods that have 'protocol' as a parameter, are missing this comment. Ugly, but not really related to this issue. Let's adapt it together with the new issue on the backlog about the protocol parameter.", "author": "joostknapen", "createdAt": "2020-10-15T08:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNTYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4NjI0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505486248", "bodyText": "Checked... This is a particularly bad case. The method has 3 parameters of which 2 are not used. (Changed the doc)", "author": "joostknapen", "createdAt": "2020-10-15T12:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNTYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\nindex b7c34527b6..2a1f83ca86 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n\n@@ -99,58 +99,65 @@ public class OslpDeviceSteps {\n     private OslpDeviceRepository oslpDeviceRepository;\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the device.\n+     * Verify that a get configuration Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetConfigurationOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetConfigurationOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the specific device.\n+     * Verify that a get configuration Oslp message is sent to the specific device.\n+     *\n+     * @param protocol\n+     *            The protocol over which the device communicates. - NOT USED -\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n+     *            device. - NOT USED -\n+     *\n+     * @param deviceUid\n+     *            The device Uid expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetConfigurationOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_CONFIGURATION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_CONFIGURATION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetConfigurationRequest()).isTrue();\n     }\n \n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the device.\n+     * Verify that a get firmware version Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetFirmwareVersionOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the specific device.\n+     * Verify that a get firmware version Oslp message is sent to the specific device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_FIRMWARE_VERSION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_FIRMWARE_VERSION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetFirmwareVersionRequest()).isTrue();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzODE2Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504038162", "bodyText": "I am not sure how much sense it makes that these methods have a protocol in the form of a parameter,\nIts value does not appear to be used, and the protocol is always OSLP here.\nWould it perhaps be better to remove the parameter and hard code OSLP in a get configuration \\\"([^\\\"]*)\\\" message?", "author": "bvdzwet", "createdAt": "2020-10-13T15:17:55Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -106,12 +106,27 @@\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification) {\n-        final Message message = this.oslpMockServer.waitForRequest(MessageType.GET_CONFIGURATION);\n+    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+            throws DeviceSimulatorException {\n+        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3MjY4MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504772680", "bodyText": "Agree with you on that. I had this discussion before with Kevin. I already proposed to remove all these unused parameters. Removing all these protocol parameters should in my opionion be a new story on the back log.", "author": "joostknapen", "createdAt": "2020-10-14T15:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzODE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\nindex b7c34527b6..2a1f83ca86 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n\n@@ -99,58 +99,65 @@ public class OslpDeviceSteps {\n     private OslpDeviceRepository oslpDeviceRepository;\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the device.\n+     * Verify that a get configuration Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetConfigurationOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetConfigurationOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the specific device.\n+     * Verify that a get configuration Oslp message is sent to the specific device.\n+     *\n+     * @param protocol\n+     *            The protocol over which the device communicates. - NOT USED -\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n+     *            device. - NOT USED -\n+     *\n+     * @param deviceUid\n+     *            The device Uid expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetConfigurationOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_CONFIGURATION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_CONFIGURATION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetConfigurationRequest()).isTrue();\n     }\n \n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the device.\n+     * Verify that a get firmware version Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetFirmwareVersionOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the specific device.\n+     * Verify that a get firmware version Oslp message is sent to the specific device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_FIRMWARE_VERSION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_FIRMWARE_VERSION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetFirmwareVersionRequest()).isTrue();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA0MTMzMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504041332", "bodyText": "The remarks about the documentation of params, proper camel-casing. the device UID vs device identification and the usefulness of the protocol parameter appear to apply to some more of the (refactored) methods.\nI think it would be good to consistently apply changes (or ignore the suggestion when there is a good reason) to all these methods, but I won't repeat the identical comments throughout this file.", "author": "bvdzwet", "createdAt": "2020-10-13T15:21:57Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -120,8 +135,22 @@ public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, fi\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification) {\n-        final Message message = this.oslpMockServer.waitForRequest(MessageType.GET_FIRMWARE_VERSION);\n+    public void aGetFirmwareVersionOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+            throws DeviceSimulatorException {\n+        this.aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+    }\n+\n+    /**\n+     * Verify that a get firmware version OSLP message is sent to the specific device.\n+     *\n+     * @param deviceIdentification\n+     *            The device identification expected in the message to the\n+     *            device.", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\nindex b7c34527b6..2a1f83ca86 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n\n@@ -99,58 +99,65 @@ public class OslpDeviceSteps {\n     private OslpDeviceRepository oslpDeviceRepository;\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the device.\n+     * Verify that a get configuration Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetConfigurationOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetConfigurationOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetConfigurationOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get configuration OSLP message is sent to the specific device.\n+     * Verify that a get configuration Oslp message is sent to the specific device.\n+     *\n+     * @param protocol\n+     *            The protocol over which the device communicates. - NOT USED -\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n+     *            device. - NOT USED -\n+     *\n+     * @param deviceUid\n+     *            The device Uid expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get configuration \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetConfigurationOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetConfigurationOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_CONFIGURATION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_CONFIGURATION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetConfigurationRequest()).isTrue();\n     }\n \n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the device.\n+     * Verify that a get firmware version Oslp message is sent to the device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n+    public void aGetFirmwareVersionOslpMessageIsSentToDevice(final String protocol, final String deviceIdentification)\n             throws DeviceSimulatorException {\n-        this.aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUID(new HashMap<>()));\n+        this.aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(protocol, deviceIdentification, this.getDeviceUid(new HashMap<>()));\n     }\n \n     /**\n-     * Verify that a get firmware version OSLP message is sent to the specific device.\n+     * Verify that a get firmware version Oslp message is sent to the specific device.\n      *\n      * @param deviceIdentification\n      *            The device identification expected in the message to the\n      *            device.\n      */\n     @Then(\"^a get firmware version \\\"([^\\\"]*)\\\" message is sent to device \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void aGetFirmwareVersionOSLPMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUID)\n+    public void aGetFirmwareVersionOslpMessageIsSentToSpecificDevice(final String protocol, final String deviceIdentification, final String deviceUid)\n             throws DeviceSimulatorException {\n-        final Message message = this.oslpMockServer.waitForRequest(deviceUID, MessageType.GET_FIRMWARE_VERSION);\n+        final Message message = this.oslpMockServer.waitForRequest(deviceUid, MessageType.GET_FIRMWARE_VERSION);\n         assertThat(message).isNotNull();\n         assertThat(message.hasGetFirmwareVersionRequest()).isTrue();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2MDQyOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504060428", "bodyText": "This probably works for now, but I don't have a good feeling by just making op a device UID for mocking the device interaction.\nAn - I think - more robust way to deal with it, would be to add the device identification in the step line in the feature file.\nIf there ever will be any scenario with multiple devices of which one but not the others is to work in the specified way, this could lead to trouble.", "author": "bvdzwet", "createdAt": "2020-10-13T15:44:47Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -860,23 +965,38 @@ public void theDeviceReturnsASetConfigurationStatusWithStatusOverOSLP(final Stri\n      */\n     @Given(\"^the device returns a set event notification \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n     public void theDeviceReturnsASetEventNotificationOverOSLP(final String result, final String protocol) {\n-        this.oslpMockServer.mockSetEventNotificationResponse(Enum.valueOf(Status.class, result));\n+        this.theSpecificDeviceReturnsASetEventNotificationOverOSLP(result, protocol, this.getDeviceUID(new HashMap<>()));", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\nindex b7c34527b6..2a1f83ca86 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n\n@@ -964,12 +971,12 @@ public class OslpDeviceSteps {\n      * the mock.\n      */\n     @Given(\"^the device returns a set event notification \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n-    public void theDeviceReturnsASetEventNotificationOverOSLP(final String result, final String protocol) {\n-        this.theSpecificDeviceReturnsASetEventNotificationOverOSLP(result, protocol, this.getDeviceUID(new HashMap<>()));\n+    public void theDeviceReturnsASetEventNotificationOverOslp(final String result, final String protocol) {\n+        this.theSpecificDeviceReturnsASetEventNotificationOverOslp(result, protocol, this.getDeviceUid(new HashMap<>()));\n     }\n \n     @Given(\"^the device returns a set event notification \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void theSpecificDeviceReturnsASetEventNotificationOverOSLP(final String result, final String protocol, final String deviceUid) {\n+    public void theSpecificDeviceReturnsASetEventNotificationOverOslp(final String result, final String protocol, final String deviceUid) {\n         this.oslpMockServer.mockSetEventNotificationResponse(deviceUid, Enum.valueOf(Status.class, result));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2NDM0MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504064341", "bodyText": "The TODO above this refactored line does not make sense anymore, as there is no ByteString.EMPTY left here.\nAt the place where it is left, it should be resolved, as we shouldn't leave TODOs in the code like this.\nIf there is no way to get clarity about this, and we think it is not really important, I'd remove the \"TODO: \" and just leave a comment that there might come a time when we would use more interesting values, but that the empty value will do for now.\nIf we cannot get the clarity now, but we think we really need this, I guess it should be managed via the backlog and not by having a TODO in the code.", "author": "bvdzwet", "createdAt": "2020-10-13T15:50:05Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -886,55 +1006,89 @@ public void theDeviceReturnsASetLightScheduleResponseOverOSLP(final String resul\n      * FAILURE response, the protocol adapter will only validate the last of the\n      * 3 steps.\n      */\n+\n     @Given(\"^the device returns the responses for setting a light schedule with result \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n     public void theDeviceReturnsTheResponsesForSettingLightScheduleWithResultOverProtocol(final String result,\n             final String protocol) throws UnknownHostException {\n-        this.theDeviceReturnsAGetConfigurationStatusWithResultOverOSLP(result, protocol);\n-        this.theDeviceReturnsASetConfigurationStatusWithStatusOverOSLP(result, protocol);\n-        this.theDeviceReturnsASetLightScheduleResponseOverOSLP(result, protocol);\n+        this.theSpecificDeviceReturnsTheResponsesForSettingLightScheduleWithResultOverProtocol(result, protocol, this.getDeviceUID(new HashMap<>()));\n+    }\n+\n+    @Given(\"^the device returns the responses for setting a light schedule with result \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n+    public void theSpecificDeviceReturnsTheResponsesForSettingLightScheduleWithResultOverProtocol(final String result,\n+            final String protocol, final String deviceUid) throws UnknownHostException {\n+        this.theDeviceReturnsAGetConfigurationStatusWithResultOverOSLP(result, protocol, this.setDeviceUid(new HashMap<>(), deviceUid));\n+        this.theSpecificDeviceReturnsASetConfigurationStatusWithStatusOverOSLP(result, protocol, deviceUid);\n+        this.theSpecificDeviceReturnsASetLightScheduleResponseOverOSLP(result, protocol, deviceUid);\n     }\n \n     /**\n      * Setup method to set a reboot which should be returned by the mock.\n      */\n     @Given(\"^the device returns a set reboot response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n     public void theDeviceReturnsASetRebootResponseOverOSLP(final String result, final String protocol) {\n-        this.oslpMockServer.mockSetRebootResponse(Enum.valueOf(Status.class, result));\n+        this.theSpecificDeviceReturnsASetRebootResponseOverOSLP(result, protocol, this.getDeviceUID(new HashMap<>()));\n+    }\n+\n+    @Given(\"^the device returns a set reboot response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n+    public void theSpecificDeviceReturnsASetRebootResponseOverOSLP(final String result, final String protocol, final String deviceUid) {\n+        this.oslpMockServer.mockSetRebootResponse(deviceUid, Enum.valueOf(Status.class, result));\n     }\n \n     @Given(\"^the device returns a set reverse tariff schedule response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n     public void theDeviceReturnsASetReverseTariffScheduleResponseOverOSLP(final String result, final String protocol) {\n-        this.theDeviceReturnsASetTariffScheduleResponseOverOSLP(result, protocol);\n+        this.theSpecificDeviceReturnsASetTariffScheduleResponseOverOSLP(result, protocol, this.getDeviceUID(new HashMap<>()));\n     }\n \n     @Given(\"^the device returns a set tariff schedule response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n     public void theDeviceReturnsASetTariffScheduleResponseOverOSLP(final String result, final String protocol) {\n-        this.callMockSetScheduleResponse(result, MessageType.SET_TARIFF_SCHEDULE);\n+        this.theSpecificDeviceReturnsASetTariffScheduleResponseOverOSLP(result, protocol, this.getDeviceUID(new HashMap<>()));\n+    }\n+\n+    @Given(\"^the device returns a set tariff schedule response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n+    public void theSpecificDeviceReturnsASetTariffScheduleResponseOverOSLP(final String result, final String protocol, final String deviceUid) {\n+        this.callMockSetScheduleResponse(deviceUid, result, MessageType.SET_TARIFF_SCHEDULE);\n     }\n \n     /**\n      * Setup method to set a transition which should be returned by the mock.\n      */\n     @Given(\"^the device returns a set transition response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n-    public void theDeviceReturnsASetTransitionResponseOverOSLP(final String result, final String protocol) {\n-        this.oslpMockServer.mockSetTransitionResponse(Enum.valueOf(Status.class, result));\n+    public void theSpecificDeviceReturnsASetTransitionResponseOverOSLP(final String result, final String protocol) {\n+        this.theSpecificDeviceReturnsASetTransitionResponseOverOSLP(result, protocol, this.getDeviceUID(new HashMap<>()));\n+    }\n+\n+    @Given(\"^the device returns a set transition response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n+    public void theSpecificDeviceReturnsASetTransitionResponseOverOSLP(final String result, final String protocol, final String deviceUid) {\n+        this.oslpMockServer.mockSetTransitionResponse(deviceUid, Enum.valueOf(Status.class, result));\n     }\n \n     /**\n      * Setup method to start a device which should be returned by the mock.\n      */\n     @Given(\"^the device returns a start device response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n     public void theDeviceReturnsAStartDeviceResponseOverOSLP(final String result, final String protocol) {\n-        this.oslpMockServer.mockStartDeviceResponse(Enum.valueOf(Status.class, result));\n+        this.theSpecificDeviceReturnsAStartDeviceResponseOverOSLP(result, protocol, this.getDeviceUID(new HashMap<>()));\n+    }\n+\n+    @Given(\"^the device returns a start device response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n+    public void theSpecificDeviceReturnsAStartDeviceResponseOverOSLP(final String result, final String protocol, final String deviceUid) {\n+        this.oslpMockServer.mockStartDeviceResponse(deviceUid, Enum.valueOf(Status.class, result));\n     }\n \n+\n     /**\n      * Setup method to stop a device which should be returned by the mock.\n      */\n     @Given(\"^the device returns a stop device response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n     public void theDeviceReturnsAStopDeviceResponseOverOSLP(final String result, final String protocol) {\n         // TODO: Check if ByteString.EMPTY must be something else\n-        this.oslpMockServer.mockStopDeviceResponse(ByteString.EMPTY, Enum.valueOf(Status.class, result));", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4Nzk5MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505487990", "bodyText": "Removed the TODO", "author": "joostknapen", "createdAt": "2020-10-15T12:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2NDM0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\nindex b7c34527b6..2a1f83ca86 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n\n@@ -990,18 +997,18 @@ public class OslpDeviceSteps {\n      * Setup method to get a status which should be returned by the mock.\n      */\n     @Given(\"^the device returns a set light schedule response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\"$\")\n-    public void theDeviceReturnsASetLightScheduleResponseOverOSLP(final String result, final String protocol) {\n-        this.theSpecificDeviceReturnsASetLightScheduleResponseOverOSLP(result, protocol, this.getDeviceUID(new HashMap<>()));\n+    public void theDeviceReturnsASetLightScheduleResponseOverOslp(final String result, final String protocol) {\n+        this.theSpecificDeviceReturnsASetLightScheduleResponseOverOslp(result, protocol, this.getDeviceUid(new HashMap<>()));\n     }\n \n     @Given(\"^the device returns a set light schedule response \\\"([^\\\"]*)\\\" over \\\"([^\\\"]*)\\\" with deviceUid \\\"([^\\\"]*)\\\"$\")\n-    public void theSpecificDeviceReturnsASetLightScheduleResponseOverOSLP(final String result, final String protocol, final String deviceUid) {\n+    public void theSpecificDeviceReturnsASetLightScheduleResponseOverOslp(final String result, final String protocol, final String deviceUid) {\n         this.callMockSetScheduleResponse(deviceUid, result, MessageType.SET_LIGHT_SCHEDULE);\n     }\n \n     /**\n      * Setup method which combines get configuration, set configuration and set\n-     * schedule mock responses. The protocol adapter component for OSLP executes\n+     * schedule mock responses. The protocol adapter component for Oslp executes\n      * these 3 steps when a light schedule is pushed to a device. In case of\n      * FAILURE response, the protocol adapter will only validate the last of the\n      * 3 steps.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MTcxNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504081715", "bodyText": "Assigning to parameters, though not harmful here, wouldn't be a coding practice I would encourage.\nMaybe nicer to just return the default DEVICE_UID instead, or drop the null-check (as it is a private method it should be easy enough to enforce this, and if not we will immediately see failing tests).", "author": "bvdzwet", "createdAt": "2020-10-13T16:14:49Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -1250,4 +1423,17 @@ private static String convertIpAddress(final ByteString byteString) {\n         final String ipValue = stringBuilder.toString();\n         return ipValue.substring(0, ipValue.length() - 1);\n     }\n+\n+    private Map<String, String> setDeviceUid(final Map<String, String> settings, final String deviceUid) {\n+        settings.put(PlatformPubliclightingKeys.KEY_DEVICE_UID, deviceUid);\n+        return settings;\n+    }\n+\n+    private String getDeviceUID(Map<String, String> settings) {\n+        if (settings == null) {\n+            settings = new HashMap<>();", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MDc1NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505490755", "bodyText": "Maybe nicer to just return the default DEVICE_UID instead --> That's what it does. I use this method as helper method to get rid of this code that is used in may places (which this method encapsulates)\nreturn getString(settings, PlatformPubliclightingKeys.KEY_DEVICE_UID,\nPlatformPubliclightingDefaults.DEVICE_UID);", "author": "joostknapen", "createdAt": "2020-10-15T12:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMjE2Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505512167", "bodyText": "Regarding just returning the default device UID, that is not what it does. More precisely, that is not what the line a commented on does, it is what the method does, but that wasn't my point.\nWhat it does, is producing some return value by assigning to a parameter (bad practice), which causes a side effect later-on.\nThe method is rather short, so it is not that hard to comprehend, and you can leave it as is if you like it better this way.", "author": "bvdzwet", "createdAt": "2020-10-15T12:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUyMDQ5NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505520494", "bodyText": "Oh, agreed, thanks for pointing out. It can potentially hide an unwanted edge case (cq bug) where settings == null\nI'll remove the null check since it is/should not be needed anyway.", "author": "joostknapen", "createdAt": "2020-10-15T12:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\nindex b7c34527b6..2a1f83ca86 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java\n\n@@ -1429,10 +1434,7 @@ public class OslpDeviceSteps {\n         return settings;\n     }\n \n-    private String getDeviceUID(Map<String, String> settings) {\n-        if (settings == null) {\n-            settings = new HashMap<>();\n-        }\n+    private String getDeviceUid(final Map<String, String> settings) {\n         return getString(settings, PlatformPubliclightingKeys.KEY_DEVICE_UID,\n                 PlatformPubliclightingDefaults.DEVICE_UID);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MjU2MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504082560", "bodyText": "Copyright on new files should mention Alliander N.V. instead of Smart Society Services B.V.", "author": "bvdzwet", "createdAt": "2020-10-13T16:15:57Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MTIyMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505491223", "bodyText": "Oops", "author": "joostknapen", "createdAt": "2020-10-15T12:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MjU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MTY0Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504481642", "bodyText": "Copyright on new files should mention Alliander N.V. instead of Smart Society Services B.V.", "author": "bvdzwet", "createdAt": "2020-10-14T08:06:39Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\nindex a3e85c7e9a..39949a0e22 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MzE3NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504483174", "bodyText": "Proper camel-casing would be deviceUid instead of deviceUID.", "author": "bvdzwet", "createdAt": "2020-10-14T08:09:08Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4Nzg2OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504487869", "bodyText": "This works just fine, but it looks like the result is already available from computeIfAbsent, and could be returned from the previous line, without looking it up again.", "author": "bvdzwet", "createdAt": "2020-10-14T08:16:39Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);\n+    }\n+\n+    public boolean hasMockedResponses(final MessageType messageType) {\n+        return !this.getQueue(this.mockedResponsesMap, messageType).isEmpty();\n+    }\n+\n+    public boolean hasReceivedRequests(final MessageType messageType) {\n+        return !this.getQueue(this.receivedRequestsMap, messageType).isEmpty();\n+    }\n+\n+    public void incrementSequenceNumber() {\n+        int numberToAddToSequenceNumberValue = 1;\n+\n+        if (ScenarioContext.current().get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER) != null) {\n+            final String numberToAddAsNextSequenceNumber = ScenarioContext.current()\n+                    .get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER)\n+                    .toString();\n+            if (!numberToAddAsNextSequenceNumber.isEmpty()) {\n+                numberToAddToSequenceNumberValue = Integer.parseInt(numberToAddAsNextSequenceNumber);\n+            }\n+        }\n+        int next = this.sequenceNumber + numberToAddToSequenceNumberValue;\n+        if (next > SEQUENCE_NUMBER_MAXIMUM) {\n+            final int sequenceNumberMaximumCross = next - SEQUENCE_NUMBER_MAXIMUM;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = sequenceNumberMaximumCross - 1;\n+            }\n+        } else if (next < 0) {\n+            final int sequenceNumberMaximumCross = next * -1;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = SEQUENCE_NUMBER_MAXIMUM - sequenceNumberMaximumCross + 1;\n+            }\n+        }\n+\n+        this.sequenceNumber = next;\n+    }\n+\n+    private ConcurrentLinkedQueue<Oslp.Message> getQueue(final Map<MessageType, ConcurrentLinkedQueue<Oslp.Message>> messageMap, final MessageType messageType) {\n+        messageMap.computeIfAbsent(messageType, k -> new ConcurrentLinkedQueue<>());\n+        return messageMap.get(messageType);", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NTk5OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504495998", "bodyText": "The use of the ConcurrentMap for the OSLP messages suggests this class is set up for safe use in a multi-threaded environment.\nThis makes me wonder if it is OK not to guard the sequence number against possible multi-threading related issues,\nIf there is reason to be careful about threading, accessing the value should not be thread-unsafe. This would mean to synchronize reads or writes to the sequenceNumber or change it from Integer to AtomicInteger.", "author": "bvdzwet", "createdAt": "2020-10-14T08:29:18Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5OTk0Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505499942", "bodyText": "Good point, but in this case, I don't think it really is an issue. There is only one class from where the sequencenumber is retrieved or changed, and that is from MockOslpChannelHandler. There is only one instance of that class, and that's not shared over threads.\nThe fact that ConcurrentMaps are used, is because there is a mock server thread, and a 'cucumber' thread. The cucumber thread adds mocks to the map, and the mock server removes them.", "author": "joostknapen", "createdAt": "2020-10-15T12:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NjIzNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504596234", "bodyText": "It's not really easy to find a nice name here, but I don't like the choice for getFromMap as it does not tell anything about the methods intent, only that it deals with a map. Maybe something like getNextMessage?", "author": "bvdzwet", "createdAt": "2020-10-14T11:16:29Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);\n+    }\n+\n+    public boolean hasMockedResponses(final MessageType messageType) {\n+        return !this.getQueue(this.mockedResponsesMap, messageType).isEmpty();\n+    }\n+\n+    public boolean hasReceivedRequests(final MessageType messageType) {\n+        return !this.getQueue(this.receivedRequestsMap, messageType).isEmpty();\n+    }\n+\n+    public void incrementSequenceNumber() {\n+        int numberToAddToSequenceNumberValue = 1;\n+\n+        if (ScenarioContext.current().get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER) != null) {\n+            final String numberToAddAsNextSequenceNumber = ScenarioContext.current()\n+                    .get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER)\n+                    .toString();\n+            if (!numberToAddAsNextSequenceNumber.isEmpty()) {\n+                numberToAddToSequenceNumberValue = Integer.parseInt(numberToAddAsNextSequenceNumber);\n+            }\n+        }\n+        int next = this.sequenceNumber + numberToAddToSequenceNumberValue;\n+        if (next > SEQUENCE_NUMBER_MAXIMUM) {\n+            final int sequenceNumberMaximumCross = next - SEQUENCE_NUMBER_MAXIMUM;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = sequenceNumberMaximumCross - 1;\n+            }\n+        } else if (next < 0) {\n+            final int sequenceNumberMaximumCross = next * -1;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = SEQUENCE_NUMBER_MAXIMUM - sequenceNumberMaximumCross + 1;\n+            }\n+        }\n+\n+        this.sequenceNumber = next;\n+    }\n+\n+    private ConcurrentLinkedQueue<Oslp.Message> getQueue(final Map<MessageType, ConcurrentLinkedQueue<Oslp.Message>> messageMap, final MessageType messageType) {\n+        messageMap.computeIfAbsent(messageType, k -> new ConcurrentLinkedQueue<>());\n+        return messageMap.get(messageType);\n+    }\n+\n+    private Oslp.Message getFromMap(final Map<MessageType, ConcurrentLinkedQueue<Oslp.Message>> messageMap, final MessageType messageType)", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwNDMxNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505504314", "bodyText": "Hmm, indeed, the name is unclear. I changed it to pollMessage. Since that's what is does. It polls the queue (picks up first item and removes it from the queue)", "author": "joostknapen", "createdAt": "2020-10-15T12:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NjIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwODY3Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504608677", "bodyText": "This looks OK, yet the message may be a little low on useful information.\nWhat I mean is that you would have to look at the stack trace to see whether a request has not been received or a mock response has not been set up.\nSo the information is there, but it could be made more \"in your face\" which might help getting faster to the right solution if this exception is found in the test logs,\nIf you think it is clear enough as it is, you can leave it like this.", "author": "bvdzwet", "createdAt": "2020-10-14T11:41:04Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);\n+    }\n+\n+    public boolean hasMockedResponses(final MessageType messageType) {\n+        return !this.getQueue(this.mockedResponsesMap, messageType).isEmpty();\n+    }\n+\n+    public boolean hasReceivedRequests(final MessageType messageType) {\n+        return !this.getQueue(this.receivedRequestsMap, messageType).isEmpty();\n+    }\n+\n+    public void incrementSequenceNumber() {\n+        int numberToAddToSequenceNumberValue = 1;\n+\n+        if (ScenarioContext.current().get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER) != null) {\n+            final String numberToAddAsNextSequenceNumber = ScenarioContext.current()\n+                    .get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER)\n+                    .toString();\n+            if (!numberToAddAsNextSequenceNumber.isEmpty()) {\n+                numberToAddToSequenceNumberValue = Integer.parseInt(numberToAddAsNextSequenceNumber);\n+            }\n+        }\n+        int next = this.sequenceNumber + numberToAddToSequenceNumberValue;\n+        if (next > SEQUENCE_NUMBER_MAXIMUM) {\n+            final int sequenceNumberMaximumCross = next - SEQUENCE_NUMBER_MAXIMUM;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = sequenceNumberMaximumCross - 1;\n+            }\n+        } else if (next < 0) {\n+            final int sequenceNumberMaximumCross = next * -1;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = SEQUENCE_NUMBER_MAXIMUM - sequenceNumberMaximumCross + 1;\n+            }\n+        }\n+\n+        this.sequenceNumber = next;\n+    }\n+\n+    private ConcurrentLinkedQueue<Oslp.Message> getQueue(final Map<MessageType, ConcurrentLinkedQueue<Oslp.Message>> messageMap, final MessageType messageType) {\n+        messageMap.computeIfAbsent(messageType, k -> new ConcurrentLinkedQueue<>());\n+        return messageMap.get(messageType);\n+    }\n+\n+    private Oslp.Message getFromMap(final Map<MessageType, ConcurrentLinkedQueue<Oslp.Message>> messageMap, final MessageType messageType)\n+            throws DeviceSimulatorException {\n+        final Oslp.Message message = this.getQueue(messageMap, messageType).poll();\n+        if (message == null) {\n+            throw new DeviceSimulatorException(String.format(\"No message of type %s found for device %s\", messageType, this.deviceUID));", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyMDQ5OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504620499", "bodyText": "As these are fairly simple one-liners I could live with the small duplication here, but you could consider doing the same thing as with getFromMap (getNextMessage) but here it would be addNextMessage, and for the has-responses methods there could be hasNextMessage (would also bring some symmetry and make the internal mini API of queueing and retrieving messages a little more obvious).\nYou might even abstract all the map and queue details by putting them in a new class like MessageBuffer (or some better name) of which you would have one for the requests and one for the responses.\nUse your own judgement if you agree this would improve things, or if you think it will be fine enough as it is.", "author": "bvdzwet", "createdAt": "2020-10-14T12:02:30Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMTc3NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505511774", "bodyText": "I go with you for getNextMessage, but not with addNextMessage. Because when you add a message, getNextMessage can return a different message. I changed the getters to poll", "author": "joostknapen", "createdAt": "2020-10-15T12:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyMDQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUyMDg3NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505520875", "bodyText": "Ha, I had considered something with poll as a suggestion but rejected it because I felt it was too much about a non-essential implementation aspect. I am OK if you stick with the poll-based naming though, as I think it isn't a very clear cut case which is better.\nRegarding getNext/addNext something similar applies. I just did not think of a next at the same position. Probably my thinking in this case was more linked to the queue implementation, where you get the next from one end, and add the next to the other. Same as with the other, I'll leave it up to you to decide what you want the code to end up with.", "author": "bvdzwet", "createdAt": "2020-10-15T12:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyMDQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyNzEyOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504627129", "bodyText": "Wouldn't the following one-liner do the same thing:\nreturn this.mockedDevicesMap.computeIfAbsent(deviceIdentification, DeviceState::new);\nMay be a matter of taste, so just see which you like better.", "author": "bvdzwet", "createdAt": "2020-10-14T12:14:38Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+public class DevicesContext {\n+\n+    private final ConcurrentMap<String, DeviceState> mockedDevicesMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState getDeviceState(final String deviceIdentification) {\n+        DeviceState deviceState = this.mockedDevicesMap.get(deviceIdentification);\n+        if (deviceState == null) {\n+            deviceState = new DeviceState(deviceIdentification);\n+            this.mockedDevicesMap.put(deviceIdentification, deviceState);\n+        }\n+\n+        return deviceState;", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUyMzcyNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505523727", "bodyText": "I guess so ;-) thanks", "author": "joostknapen", "createdAt": "2020-10-15T13:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyNzEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\nindex a3e85c7e9a..39949a0e22 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyOTgwNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504629804", "bodyText": "I like that here the deviceIdentification is used as the key, but this is confusing, because when I look at the call sites, the input used appears to be a deviceUid.\nThe nicest would probably be to use the identification everywhere, but at least (whichever it will end up to be) it would be good to name it consistently, and not mix this up as both the deviceIdentification and the deviceUid exist (and have a related but distinct text value).", "author": "bvdzwet", "createdAt": "2020-10-14T12:19:08Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+public class DevicesContext {\n+\n+    private final ConcurrentMap<String, DeviceState> mockedDevicesMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState getDeviceState(final String deviceIdentification) {", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUyNDcyMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505524723", "bodyText": "Thanks, changed it", "author": "joostknapen", "createdAt": "2020-10-15T13:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyOTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\nindex a3e85c7e9a..39949a0e22 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DevicesContext.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzNzE0MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504637141", "bodyText": "Better access the static method in a static way, and not through this (seen at multiple locations in this class).", "author": "bvdzwet", "createdAt": "2020-10-14T12:31:17Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -215,8 +203,15 @@ private boolean isOslpResponse(final OslpEnvelope envelope) {\n     public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope message) throws Exception {\n \n         if (message.isValid()) {\n+            final String deviceUID = this.getDeviceUID(message);", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -203,15 +203,13 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n     public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope message) throws Exception {\n \n         if (message.isValid()) {\n-            final String deviceUID = this.getDeviceUID(message);\n-            final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n+            final String deviceUid = MockOslpChannelHandler.getDeviceUid(message);\n+            final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUid);\n \n-            //deviceState.setSequenceNumber(convertByteArrayToInteger(message.getSequenceNumber()));\n-\n-            LOGGER.debug(\"Device {} received a message with sequence number {}\", deviceUID, deviceState.getSequenceNumber());\n+            LOGGER.debug(\"Device {} received a message with sequence number {}\", deviceUid, message.getSequenceNumber());\n \n             if (this.isOslpResponse(message)) {\n-                LOGGER.debug(\"Device {} received an OSLP Response (before callback): {}\", this.getDeviceUID(message), message.getPayloadMessage());\n+                LOGGER.debug(\"Device {} received an OSLP Response (before callback): {}\", MockOslpChannelHandler.getDeviceUid(message), message.getPayloadMessage());\n \n                 // Lookup correct callback and call handle method.\n                 final String channelId = ctx.channel().id().asLongText();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzODg3OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504638879", "bodyText": "Don't leave commented out code as part of the class,\nIf the sequence number does not need to be updated here, just remove it.", "author": "bvdzwet", "createdAt": "2020-10-14T12:33:59Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -215,8 +203,15 @@ private boolean isOslpResponse(final OslpEnvelope envelope) {\n     public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope message) throws Exception {\n \n         if (message.isValid()) {\n+            final String deviceUID = this.getDeviceUID(message);\n+            final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n+\n+            //deviceState.setSequenceNumber(convertByteArrayToInteger(message.getSequenceNumber()));", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -203,15 +203,13 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n     public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope message) throws Exception {\n \n         if (message.isValid()) {\n-            final String deviceUID = this.getDeviceUID(message);\n-            final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n+            final String deviceUid = MockOslpChannelHandler.getDeviceUid(message);\n+            final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUid);\n \n-            //deviceState.setSequenceNumber(convertByteArrayToInteger(message.getSequenceNumber()));\n-\n-            LOGGER.debug(\"Device {} received a message with sequence number {}\", deviceUID, deviceState.getSequenceNumber());\n+            LOGGER.debug(\"Device {} received a message with sequence number {}\", deviceUid, message.getSequenceNumber());\n \n             if (this.isOslpResponse(message)) {\n-                LOGGER.debug(\"Device {} received an OSLP Response (before callback): {}\", this.getDeviceUID(message), message.getPayloadMessage());\n+                LOGGER.debug(\"Device {} received an OSLP Response (before callback): {}\", MockOslpChannelHandler.getDeviceUid(message), message.getPayloadMessage());\n \n                 // Lookup correct callback and call handle method.\n                 final String channelId = ctx.channel().id().asLongText();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0MDIxMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504640210", "bodyText": "Is this debug statement a lie? (I assume the sequence number from the message on the channel is not necessarily the same as the sequence number from the device state that is printed out - though it would be if the commented out code were uncommented.)", "author": "bvdzwet", "createdAt": "2020-10-14T12:36:02Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -215,8 +203,15 @@ private boolean isOslpResponse(final OslpEnvelope envelope) {\n     public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope message) throws Exception {\n \n         if (message.isValid()) {\n+            final String deviceUID = this.getDeviceUID(message);\n+            final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n+\n+            //deviceState.setSequenceNumber(convertByteArrayToInteger(message.getSequenceNumber()));\n+\n+            LOGGER.debug(\"Device {} received a message with sequence number {}\", deviceUID, deviceState.getSequenceNumber());", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -203,15 +203,13 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n     public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope message) throws Exception {\n \n         if (message.isValid()) {\n-            final String deviceUID = this.getDeviceUID(message);\n-            final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n+            final String deviceUid = MockOslpChannelHandler.getDeviceUid(message);\n+            final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUid);\n \n-            //deviceState.setSequenceNumber(convertByteArrayToInteger(message.getSequenceNumber()));\n-\n-            LOGGER.debug(\"Device {} received a message with sequence number {}\", deviceUID, deviceState.getSequenceNumber());\n+            LOGGER.debug(\"Device {} received a message with sequence number {}\", deviceUid, message.getSequenceNumber());\n \n             if (this.isOslpResponse(message)) {\n-                LOGGER.debug(\"Device {} received an OSLP Response (before callback): {}\", this.getDeviceUID(message), message.getPayloadMessage());\n+                LOGGER.debug(\"Device {} received an OSLP Response (before callback): {}\", MockOslpChannelHandler.getDeviceUid(message), message.getPayloadMessage());\n \n                 // Lookup correct callback and call handle method.\n                 final String channelId = ctx.channel().id().asLongText();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0MjY5Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504642692", "bodyText": "No need to have a double empty line before and after the line setting the messageType.", "author": "bvdzwet", "createdAt": "2020-10-14T12:40:00Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -228,35 +223,41 @@ public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope mes\n \n                 callback.handle(message);\n             } else {\n-                if (!this.mockResponses.isEmpty()) {\n-                    LOGGER.debug(\"Received OSLP Request: {}\", message.getPayloadMessage().toString().split(\" \")[0]);\n \n-                    final byte[] deviceId = message.getDeviceId();\n+\n+                final MessageType messageType = this.getMessageType(message.getPayloadMessage());\n+", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -223,12 +221,9 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n \n                 callback.handle(message);\n             } else {\n-\n-\n                 final MessageType messageType = this.getMessageType(message.getPayloadMessage());\n \n-\n-                LOGGER.debug(\"Device {} received an OSLP Request of type {}\", deviceUID, messageType);\n+                LOGGER.debug(\"Device {} received an OSLP Request of type {}\", deviceUid, messageType);\n \n                 if (deviceState.hasMockedResponses(messageType)) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NzY0MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504647640", "bodyText": "Not from your changes, but this comment looks stale and misleading. The sequence number is not passed to handleRequest as the comment says. Better remove the comment I guess as the sequence number is still used, but in another manner.\n(I am not a big fan of these comments even if they would be correct, as they seem to offer little beyond what can be read from the code itself. And if the code changes without the comment that describes it, it just becomes confusing.)", "author": "bvdzwet", "createdAt": "2020-10-14T12:47:37Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -228,35 +223,41 @@ public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope mes\n \n                 callback.handle(message);\n             } else {\n-                if (!this.mockResponses.isEmpty()) {\n-                    LOGGER.debug(\"Received OSLP Request: {}\", message.getPayloadMessage().toString().split(\" \")[0]);\n \n-                    final byte[] deviceId = message.getDeviceId();\n+\n+                final MessageType messageType = this.getMessageType(message.getPayloadMessage());\n+\n+\n+                LOGGER.debug(\"Device {} received an OSLP Request of type {}\", deviceUID, messageType);\n+\n+                if (deviceState.hasMockedResponses(messageType)) {\n \n                     // Build the OslpEnvelope.\n                     final OslpEnvelope.Builder responseBuilder = new OslpEnvelope.Builder()\n                             .withSignature(this.oslpSignature)\n                             .withProvider(this.oslpSignatureProvider)\n                             .withPrimaryKey(this.privateKey)\n-                            .withDeviceId(deviceId);\n+                            .withDeviceId(message.getDeviceId());\n \n                     // Pass the incremented sequence number to the\n                     // handleRequest() function for checking.", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzMjM0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505532348", "bodyText": "Hmm, I had a look. What the code actually does it at first glance not really clear. The handleRequest(message) does increment the sequence number, but there are no checks in relation to the incoming message.", "author": "joostknapen", "createdAt": "2020-10-15T13:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NzY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzMjQ5OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505532498", "bodyText": "I removed the comments", "author": "joostknapen", "createdAt": "2020-10-15T13:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NzY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -223,12 +221,9 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n \n                 callback.handle(message);\n             } else {\n-\n-\n                 final MessageType messageType = this.getMessageType(message.getPayloadMessage());\n \n-\n-                LOGGER.debug(\"Device {} received an OSLP Request of type {}\", deviceUID, messageType);\n+                LOGGER.debug(\"Device {} received an OSLP Request of type {}\", deviceUid, messageType);\n \n                 if (deviceState.hasMockedResponses(messageType)) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NDgyNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504654827", "bodyText": "Not from this pull request, but shouldn't this be \"Sent\" instead of \"Send\" (I would assume that would be fair to think given the await just before)?", "author": "bvdzwet", "createdAt": "2020-10-14T12:58:01Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -228,35 +223,41 @@ public void channelRead0(final ChannelHandlerContext ctx, final OslpEnvelope mes\n \n                 callback.handle(message);\n             } else {\n-                if (!this.mockResponses.isEmpty()) {\n-                    LOGGER.debug(\"Received OSLP Request: {}\", message.getPayloadMessage().toString().split(\" \")[0]);\n \n-                    final byte[] deviceId = message.getDeviceId();\n+\n+                final MessageType messageType = this.getMessageType(message.getPayloadMessage());\n+\n+\n+                LOGGER.debug(\"Device {} received an OSLP Request of type {}\", deviceUID, messageType);\n+\n+                if (deviceState.hasMockedResponses(messageType)) {\n \n                     // Build the OslpEnvelope.\n                     final OslpEnvelope.Builder responseBuilder = new OslpEnvelope.Builder()\n                             .withSignature(this.oslpSignature)\n                             .withProvider(this.oslpSignatureProvider)\n                             .withPrimaryKey(this.privateKey)\n-                            .withDeviceId(deviceId);\n+                            .withDeviceId(message.getDeviceId());\n \n                     // Pass the incremented sequence number to the\n                     // handleRequest() function for checking.\n                     responseBuilder.withPayloadMessage(this.handleRequest(message));\n                     // Add the new sequence number to the OslpEnvelope.\n-                    responseBuilder.withSequenceNumber(convertIntegerToByteArray(this.sequenceNumber));\n+                    responseBuilder.withSequenceNumber(convertIntegerToByteArray(deviceState.getSequenceNumber()));\n \n                     final OslpEnvelope response = responseBuilder.build();\n \n-                    LOGGER.debug(\"sending OSLP response with sequence number: {}\",\n-                            convertByteArrayToInteger(response.getSequenceNumber()));\n+                    LOGGER.debug(\"Device {} is sending an OSLP response with sequence number {}\",\n+                           this.getDeviceUID(response), convertByteArrayToInteger(response.getSequenceNumber()));\n \n                     // wait for the response to actually be written. This\n                     // improves stability of the tests\n                     final ChannelFuture future = ctx.channel().writeAndFlush(response);\n                     future.await();\n \n                     LOGGER.debug(\"Send OSLP Response: {}\", response.getPayloadMessage().toString().split(\" \")[0]);", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzNDI3Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505534277", "bodyText": "Indeed", "author": "joostknapen", "createdAt": "2020-10-15T13:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NDgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -223,12 +221,9 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n \n                 callback.handle(message);\n             } else {\n-\n-\n                 final MessageType messageType = this.getMessageType(message.getPayloadMessage());\n \n-\n-                LOGGER.debug(\"Device {} received an OSLP Request of type {}\", deviceUID, messageType);\n+                LOGGER.debug(\"Device {} received an OSLP Request of type {}\", deviceUid, messageType);\n \n                 if (deviceState.hasMockedResponses(messageType)) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2NDY0MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504664640", "bodyText": "This will probably work, but I am a bit confused finding the scenario context in the DeviceState.\nI haven't looked into it enough to have a clear picture, but I could imagine an alternative where the specific increment is calculated outside of this class and provided as input to incrementSequenceNumber(int amount) (or something like that) instead. This could be added leaving the no-arg call with an increment of 1 and the call with the amount as an option for code that knows about increment amounts.", "author": "bvdzwet", "createdAt": "2020-10-14T13:11:57Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);\n+    }\n+\n+    public boolean hasMockedResponses(final MessageType messageType) {\n+        return !this.getQueue(this.mockedResponsesMap, messageType).isEmpty();\n+    }\n+\n+    public boolean hasReceivedRequests(final MessageType messageType) {\n+        return !this.getQueue(this.receivedRequestsMap, messageType).isEmpty();\n+    }\n+\n+    public void incrementSequenceNumber() {\n+        int numberToAddToSequenceNumberValue = 1;\n+\n+        if (ScenarioContext.current().get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER) != null) {", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0Mzg0Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505543842", "bodyText": "To be honest, I just copied this whole method from (I thought the handler), and didn't change anything. It wasn't really clear to me what all exactly it should to, so I left it unaffected. I'll have a look if I can refactor the method.", "author": "joostknapen", "createdAt": "2020-10-15T13:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2NDY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU1NjI1OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505556258", "bodyText": "OK, just see what quick improvements you could do, if any, With some code being moved around (which is fine) I did not see immediately what was new, and what was \"inherited\" from whoever worked on it before.", "author": "bvdzwet", "createdAt": "2020-10-15T13:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2NDY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2NjQ2MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504666460", "bodyText": "This looks unnecessary. If next is bigger than SEQUENCE_NUMBER_MAXIMUM, then sequenceNumberMaximumCross would always be at least 1 given how it is calculated.", "author": "bvdzwet", "createdAt": "2020-10-14T13:14:31Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);\n+    }\n+\n+    public boolean hasMockedResponses(final MessageType messageType) {\n+        return !this.getQueue(this.mockedResponsesMap, messageType).isEmpty();\n+    }\n+\n+    public boolean hasReceivedRequests(final MessageType messageType) {\n+        return !this.getQueue(this.receivedRequestsMap, messageType).isEmpty();\n+    }\n+\n+    public void incrementSequenceNumber() {\n+        int numberToAddToSequenceNumberValue = 1;\n+\n+        if (ScenarioContext.current().get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER) != null) {\n+            final String numberToAddAsNextSequenceNumber = ScenarioContext.current()\n+                    .get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER)\n+                    .toString();\n+            if (!numberToAddAsNextSequenceNumber.isEmpty()) {\n+                numberToAddToSequenceNumberValue = Integer.parseInt(numberToAddAsNextSequenceNumber);\n+            }\n+        }\n+        int next = this.sequenceNumber + numberToAddToSequenceNumberValue;\n+        if (next > SEQUENCE_NUMBER_MAXIMUM) {\n+            final int sequenceNumberMaximumCross = next - SEQUENCE_NUMBER_MAXIMUM;\n+            if (sequenceNumberMaximumCross >= 1) {", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NDU2MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505564561", "bodyText": "agreed", "author": "joostknapen", "createdAt": "2020-10-15T13:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2NjQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODIzMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504668231", "bodyText": "I see the code and what it does, but \"cross\" looks a bit unfamiliar to me.\nIs it a logical name for what happens here?", "author": "bvdzwet", "createdAt": "2020-10-14T13:17:00Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);\n+    }\n+\n+    public boolean hasMockedResponses(final MessageType messageType) {\n+        return !this.getQueue(this.mockedResponsesMap, messageType).isEmpty();\n+    }\n+\n+    public boolean hasReceivedRequests(final MessageType messageType) {\n+        return !this.getQueue(this.receivedRequestsMap, messageType).isEmpty();\n+    }\n+\n+    public void incrementSequenceNumber() {\n+        int numberToAddToSequenceNumberValue = 1;\n+\n+        if (ScenarioContext.current().get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER) != null) {\n+            final String numberToAddAsNextSequenceNumber = ScenarioContext.current()\n+                    .get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER)\n+                    .toString();\n+            if (!numberToAddAsNextSequenceNumber.isEmpty()) {\n+                numberToAddToSequenceNumberValue = Integer.parseInt(numberToAddAsNextSequenceNumber);\n+            }\n+        }\n+        int next = this.sequenceNumber + numberToAddToSequenceNumberValue;\n+        if (next > SEQUENCE_NUMBER_MAXIMUM) {\n+            final int sequenceNumberMaximumCross = next - SEQUENCE_NUMBER_MAXIMUM;", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2Njc5Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505566797", "bodyText": "Looks like a check for an overflow", "author": "joostknapen", "createdAt": "2020-10-15T14:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODkxNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504668917", "bodyText": "The if statement looks like it always resolves to true and is unnecessary.", "author": "bvdzwet", "createdAt": "2020-10-14T13:18:06Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);\n+    }\n+\n+    public boolean hasMockedResponses(final MessageType messageType) {\n+        return !this.getQueue(this.mockedResponsesMap, messageType).isEmpty();\n+    }\n+\n+    public boolean hasReceivedRequests(final MessageType messageType) {\n+        return !this.getQueue(this.receivedRequestsMap, messageType).isEmpty();\n+    }\n+\n+    public void incrementSequenceNumber() {\n+        int numberToAddToSequenceNumberValue = 1;\n+\n+        if (ScenarioContext.current().get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER) != null) {\n+            final String numberToAddAsNextSequenceNumber = ScenarioContext.current()\n+                    .get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER)\n+                    .toString();\n+            if (!numberToAddAsNextSequenceNumber.isEmpty()) {\n+                numberToAddToSequenceNumberValue = Integer.parseInt(numberToAddAsNextSequenceNumber);\n+            }\n+        }\n+        int next = this.sequenceNumber + numberToAddToSequenceNumberValue;\n+        if (next > SEQUENCE_NUMBER_MAXIMUM) {\n+            final int sequenceNumberMaximumCross = next - SEQUENCE_NUMBER_MAXIMUM;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = sequenceNumberMaximumCross - 1;\n+            }\n+        } else if (next < 0) {\n+            final int sequenceNumberMaximumCross = next * -1;\n+            if (sequenceNumberMaximumCross >= 1) {", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2MzEwNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505563107", "bodyText": "agreed", "author": "joostknapen", "createdAt": "2020-10-15T13:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3MTM2Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504671363", "bodyText": "I haven't tried it out, but isn't this if-then-else with all its paths something that could be done more succinct with a modulo operation?", "author": "bvdzwet", "createdAt": "2020-10-14T13:21:16Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.mocks.oslpdevice;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.oslp.Oslp;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class DeviceState {\n+\n+    @Getter\n+    private final String deviceUID;\n+    @Getter @Setter\n+    private Integer sequenceNumber = 0;\n+\n+    private static final Integer SEQUENCE_NUMBER_MAXIMUM = 65535;\n+\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> mockedResponsesMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<MessageType, ConcurrentLinkedQueue<Oslp.Message>> receivedRequestsMap = new ConcurrentHashMap<>();\n+\n+    public DeviceState(final String deviceUID) {\n+        this.deviceUID = deviceUID;\n+    }\n+\n+    public Oslp.Message getMockedResponse(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.mockedResponsesMap, messageType);\n+    }\n+\n+    public Oslp.Message getReceivedRequest(final MessageType messageType) throws DeviceSimulatorException {\n+        return this.getFromMap(this.receivedRequestsMap, messageType);\n+    }\n+\n+    public void addMockedResponse(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.mockedResponsesMap, messageType).add(message);\n+    }\n+\n+    public void addReceivedRequest(final MessageType messageType, final Oslp.Message message) {\n+        this.getQueue(this.receivedRequestsMap, messageType).add(message);\n+    }\n+\n+    public boolean hasMockedResponses(final MessageType messageType) {\n+        return !this.getQueue(this.mockedResponsesMap, messageType).isEmpty();\n+    }\n+\n+    public boolean hasReceivedRequests(final MessageType messageType) {\n+        return !this.getQueue(this.receivedRequestsMap, messageType).isEmpty();\n+    }\n+\n+    public void incrementSequenceNumber() {\n+        int numberToAddToSequenceNumberValue = 1;\n+\n+        if (ScenarioContext.current().get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER) != null) {\n+            final String numberToAddAsNextSequenceNumber = ScenarioContext.current()\n+                    .get(PlatformKeys.NUMBER_TO_ADD_TO_SEQUENCE_NUMBER)\n+                    .toString();\n+            if (!numberToAddAsNextSequenceNumber.isEmpty()) {\n+                numberToAddToSequenceNumberValue = Integer.parseInt(numberToAddAsNextSequenceNumber);\n+            }\n+        }\n+        int next = this.sequenceNumber + numberToAddToSequenceNumberValue;\n+        if (next > SEQUENCE_NUMBER_MAXIMUM) {\n+            final int sequenceNumberMaximumCross = next - SEQUENCE_NUMBER_MAXIMUM;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = sequenceNumberMaximumCross - 1;\n+            }\n+        } else if (next < 0) {\n+            final int sequenceNumberMaximumCross = next * -1;\n+            if (sequenceNumberMaximumCross >= 1) {\n+                next = SEQUENCE_NUMBER_MAXIMUM - sequenceNumberMaximumCross + 1;\n+            }\n+        }", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4MTc5NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505581795", "bodyText": "In case that is the intended behaviour :-) After some simple refactoring I came to this if/else simplifcation:\nint next = this.sequenceNumber + increment;\nif (next > SEQUENCE_NUMBER_MAXIMUM) {\nnext -= SEQUENCE_NUMBER_MAXIMUM - 1;\n} else if (next < 0) {\nnext = SEQUENCE_NUMBER_MAXIMUM - next * -1 + 1;\n}\nwhich is kinda weird... why an else? how could next become < 0? I guess only if you set a negative increment. But why would you do that? Is that possible? I just remove the else, and leave the if there.", "author": "joostknapen", "createdAt": "2020-10-15T14:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3MTM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5NjkzNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r505596934", "bodyText": "ProtocolSequenceNumber.feature covers tests where a negative increment is indeed possible.... The test does not cover edge cases. But for this reason I added the else again.", "author": "joostknapen", "createdAt": "2020-10-15T14:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3MTM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\nindex c6b1f57c79..83d5ff59f1 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/DeviceState.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander N.V..\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NDAyNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504674027", "bodyText": "Probably best to remove this comment. It is not entirely accurate anymore, as it is now about something inside the device state, and the method name in itself looks clear enough.", "author": "bvdzwet", "createdAt": "2020-10-14T13:25:03Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -329,128 +330,50 @@ private void sleep(final Long sleepTime) {\n     // WITH a sequence number\n     public Oslp.Message handleRequest(final OslpEnvelope message, final int sequenceNumber)\n             throws DeviceSimulatorException, IOException, ParseException {\n+\n+        message.setSequenceNumber(convertIntegerToByteArray(sequenceNumber));\n         return this.handleRequest(message);\n     }\n \n-    public Oslp.Message handleRequest(final OslpEnvelope message)\n+    public Oslp.Message handleRequest(final OslpEnvelope requestMessage)\n             throws DeviceSimulatorException, IOException, ParseException {\n-        final Oslp.Message request = message.getPayloadMessage();\n+        final Oslp.Message request = requestMessage.getPayloadMessage();\n \n-        // Create response message\n-        Oslp.Message response = null;\n+        final String deviceUID = this.getDeviceUID(requestMessage);\n+        final MessageType messageType = this.getMessageType(requestMessage.getPayloadMessage());\n \n-        LOGGER.info(\"Received a new request: [\" + request + \"], sequencenumber [\" + this.sequenceNumber + \"]\");\n+        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n+\n+        LOGGER.info(\"Device {} received [{}], sequence number [{}]\", deviceUID, request, requestMessage.getSequenceNumber());\n \n         // Calculate expected sequence number", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -339,12 +331,11 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n             throws DeviceSimulatorException, IOException, ParseException {\n         final Oslp.Message request = requestMessage.getPayloadMessage();\n \n-        final String deviceUID = this.getDeviceUID(requestMessage);\n+        final String deviceUid = MockOslpChannelHandler.getDeviceUid(requestMessage);\n         final MessageType messageType = this.getMessageType(requestMessage.getPayloadMessage());\n+        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUid);\n \n-        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n-\n-        LOGGER.info(\"Device {} received [{}], sequence number [{}]\", deviceUID, request, requestMessage.getSequenceNumber());\n+        LOGGER.info(\"Device {} received [{}], sequence number [{}]\", deviceUid, request, requestMessage.getSequenceNumber());\n \n         // Calculate expected sequence number\n         deviceState.incrementSequenceNumber();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4MDY1Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504680653", "bodyText": "Not sure what a \"response requestMessage\" means, and it feels like the code would be clearer without this comment.", "author": "bvdzwet", "createdAt": "2020-10-14T13:34:13Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -329,128 +330,50 @@ private void sleep(final Long sleepTime) {\n     // WITH a sequence number\n     public Oslp.Message handleRequest(final OslpEnvelope message, final int sequenceNumber)\n             throws DeviceSimulatorException, IOException, ParseException {\n+\n+        message.setSequenceNumber(convertIntegerToByteArray(sequenceNumber));\n         return this.handleRequest(message);\n     }\n \n-    public Oslp.Message handleRequest(final OslpEnvelope message)\n+    public Oslp.Message handleRequest(final OslpEnvelope requestMessage)\n             throws DeviceSimulatorException, IOException, ParseException {\n-        final Oslp.Message request = message.getPayloadMessage();\n+        final Oslp.Message request = requestMessage.getPayloadMessage();\n \n-        // Create response message\n-        Oslp.Message response = null;\n+        final String deviceUID = this.getDeviceUID(requestMessage);\n+        final MessageType messageType = this.getMessageType(requestMessage.getPayloadMessage());\n \n-        LOGGER.info(\"Received a new request: [\" + request + \"], sequencenumber [\" + this.sequenceNumber + \"]\");\n+        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n+\n+        LOGGER.info(\"Device {} received [{}], sequence number [{}]\", deviceUID, request, requestMessage.getSequenceNumber());\n \n         // Calculate expected sequence number\n-        this.sequenceNumber = this.doGetNextSequence();\n+        deviceState.incrementSequenceNumber();\n \n         // If responseDelayTime (and optional responseDelayRandomRange) are set,\n         // sleep for a little while\n         if (this.responseDelayTime != null && this.reponseDelayRandomRange == null) {\n             this.sleep(this.responseDelayTime);\n-        } else if (this.responseDelayTime != null && this.reponseDelayRandomRange != null) {\n+        } else if (this.responseDelayTime != null) {\n             final Long randomDelay = (long) (this.reponseDelayRandomRange * this.random.nextDouble());\n             this.sleep(this.responseDelayTime + randomDelay);\n         }\n \n-        // Handle requests\n-        if (request.hasGetFirmwareVersionRequest()\n-                && this.mockResponses.containsKey(MessageType.GET_FIRMWARE_VERSION)) {\n-            response = this.processRequest(MessageType.GET_FIRMWARE_VERSION, request);\n-        } else if (request.hasUpdateFirmwareRequest() && this.mockResponses.containsKey(MessageType.UPDATE_FIRMWARE)) {\n-            response = this.processRequest(MessageType.UPDATE_FIRMWARE, request);\n-        } else if (request.hasSetLightRequest() && this.mockResponses.containsKey(MessageType.SET_LIGHT)) {\n-            response = this.processRequest(MessageType.SET_LIGHT, request);\n-        } else if (request.hasSetEventNotificationsRequest()\n-                && this.mockResponses.containsKey(MessageType.SET_EVENT_NOTIFICATIONS)) {\n-            response = this.processRequest(MessageType.SET_EVENT_NOTIFICATIONS, request);\n-        } else if (request.hasStartSelfTestRequest() && this.mockResponses.containsKey(MessageType.START_SELF_TEST)) {\n-            response = this.processRequest(MessageType.START_SELF_TEST, request);\n-        } else if (request.hasStopSelfTestRequest() && this.mockResponses.containsKey(MessageType.STOP_SELF_TEST)) {\n-            response = this.processRequest(MessageType.STOP_SELF_TEST, request);\n-        } else if (request.hasGetStatusRequest() && this.mockResponses.containsKey(MessageType.GET_STATUS)) {\n-            response = this.processRequest(MessageType.GET_STATUS, request);\n-        } else if (request.hasGetStatusRequest() && this.mockResponses.containsKey(MessageType.GET_LIGHT_STATUS)) {\n-            response = this.processRequest(MessageType.GET_LIGHT_STATUS, request);\n-        } else if (request.hasResumeScheduleRequest() && this.mockResponses.containsKey(MessageType.RESUME_SCHEDULE)) {\n-            response = this.processRequest(MessageType.RESUME_SCHEDULE, request);\n-        } else if (request.hasSetRebootRequest() && this.mockResponses.containsKey(MessageType.SET_REBOOT)) {\n-            response = this.processRequest(MessageType.SET_REBOOT, request);\n-        } else if (request.hasSetTransitionRequest() && this.mockResponses.containsKey(MessageType.SET_TRANSITION)) {\n-            response = this.processRequest(MessageType.SET_TRANSITION, request);\n-        } else if (request.hasSetDeviceVerificationKeyRequest()\n-                && this.mockResponses.containsKey(MessageType.UPDATE_KEY)) {\n-            response = this.processRequest(MessageType.UPDATE_KEY, request);\n-        } else if (request.hasGetPowerUsageHistoryRequest()\n-                && this.mockResponses.containsKey(MessageType.GET_POWER_USAGE_HISTORY)) {\n-            response = this.processRequest(MessageType.GET_POWER_USAGE_HISTORY, request);\n-        } else if (request.hasSetScheduleRequest()) {\n-            if (this.mockResponses.containsKey(MessageType.SET_LIGHT_SCHEDULE)) {\n-                response = this.processRequest(MessageType.SET_LIGHT_SCHEDULE, request);\n-            } else if (this.mockResponses.containsKey(MessageType.SET_TARIFF_SCHEDULE)) {\n-                response = this.processRequest(MessageType.SET_TARIFF_SCHEDULE, request);\n-            }\n-        } else if (request.hasGetConfigurationRequest()\n-                && this.mockResponses.containsKey(MessageType.GET_CONFIGURATION)) {\n-            response = this.processRequest(MessageType.GET_CONFIGURATION, request);\n-        } else if (request.hasSetConfigurationRequest()\n-                && this.mockResponses.containsKey(MessageType.SET_CONFIGURATION)) {\n-            response = this.processRequest(MessageType.SET_CONFIGURATION, request);\n-        }\n-        // TODO: Implement further requests.\n-        else {\n-            // Handle errors by logging\n-            LOGGER.error(\"Did not expect request, ignoring: \" + request.toString());\n-        }\n+        deviceState.addReceivedRequest(messageType, request);\n+\n+        // Create response requestMessage", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -339,12 +331,11 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n             throws DeviceSimulatorException, IOException, ParseException {\n         final Oslp.Message request = requestMessage.getPayloadMessage();\n \n-        final String deviceUID = this.getDeviceUID(requestMessage);\n+        final String deviceUid = MockOslpChannelHandler.getDeviceUid(requestMessage);\n         final MessageType messageType = this.getMessageType(requestMessage.getPayloadMessage());\n+        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUid);\n \n-        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n-\n-        LOGGER.info(\"Device {} received [{}], sequence number [{}]\", deviceUID, request, requestMessage.getSequenceNumber());\n+        LOGGER.info(\"Device {} received [{}], sequence number [{}]\", deviceUid, request, requestMessage.getSequenceNumber());\n \n         // Calculate expected sequence number\n         deviceState.incrementSequenceNumber();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4MTc5Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504681796", "bodyText": "Why two empty lines?", "author": "bvdzwet", "createdAt": "2020-10-14T13:35:46Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -464,4 +387,72 @@ private static Integer convertByteArrayToInteger(final byte[] array) {\n         // See: platform.service.SequenceNumberUtils\n         return (array[0] & 0xFF) << 8 | (array[1] & 0xFF);\n     }\n+", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -389,7 +380,7 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n     }\n \n \n-    private static String getDeviceUID(final OslpEnvelope message) {\n+    private static String getDeviceUid(final OslpEnvelope message) {\n         return Base64.encodeBase64String(message.getDeviceId());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4MjI5Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504682297", "bodyText": "Proper camel-casing would be getDeviceUid.", "author": "bvdzwet", "createdAt": "2020-10-14T13:36:25Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -464,4 +387,72 @@ private static Integer convertByteArrayToInteger(final byte[] array) {\n         // See: platform.service.SequenceNumberUtils\n         return (array[0] & 0xFF) << 8 | (array[1] & 0xFF);\n     }\n+\n+\n+    private static String getDeviceUID(final OslpEnvelope message) {", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -389,7 +380,7 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n     }\n \n \n-    private static String getDeviceUID(final OslpEnvelope message) {\n+    private static String getDeviceUid(final OslpEnvelope message) {\n         return Base64.encodeBase64String(message.getDeviceId());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwODY5OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504708698", "bodyText": "I don't know of a better method. The OSLP message is generated from protobuf definitions and they don't have this notion of message type I think. That would leave only the question if the method is at its place here, or if another location would make more sense.\nPutting it into MessageType wouldn't be a nice option, since that is not OSLP specific, so it makes little sense to see the OSLP imports in there.\nIf we can't think of something, I don't think this should be left here as a TODO.", "author": "bvdzwet", "createdAt": "2020-10-14T14:09:25Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -464,4 +387,72 @@ private static Integer convertByteArrayToInteger(final byte[] array) {\n         // See: platform.service.SequenceNumberUtils\n         return (array[0] & 0xFF) << 8 | (array[1] & 0xFF);\n     }\n+\n+\n+    private static String getDeviceUID(final OslpEnvelope message) {\n+        return Base64.encodeBase64String(message.getDeviceId());\n+    }\n+\n+    /**\n+     * TODO: Isn't there somewhere a (better) method like this?", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -389,7 +380,7 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n     }\n \n \n-    private static String getDeviceUID(final OslpEnvelope message) {\n+    private static String getDeviceUid(final OslpEnvelope message) {\n         return Base64.encodeBase64String(message.getDeviceId());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMDA0Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504710043", "bodyText": "Is request a good name? If this is used (I haven't checked) for requests and responses then message may be more suitable.", "author": "bvdzwet", "createdAt": "2020-10-14T14:11:09Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java", "diffHunk": "@@ -464,4 +387,72 @@ private static Integer convertByteArrayToInteger(final byte[] array) {\n         // See: platform.service.SequenceNumberUtils\n         return (array[0] & 0xFF) << 8 | (array[1] & 0xFF);\n     }\n+\n+\n+    private static String getDeviceUID(final OslpEnvelope message) {\n+        return Base64.encodeBase64String(message.getDeviceId());\n+    }\n+\n+    /**\n+     * TODO: Isn't there somewhere a (better) method like this?\n+     * @param request", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\nindex 09ef4a7e2a..d00e373513 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpChannelHandler.java\n\n@@ -389,7 +380,7 @@ public class MockOslpChannelHandler extends SimpleChannelInboundHandler<OslpEnve\n     }\n \n \n-    private static String getDeviceUID(final OslpEnvelope message) {\n+    private static String getDeviceUid(final OslpEnvelope message) {\n         return Base64.encodeBase64String(message.getDeviceId());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMjgzNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504712835", "bodyText": "Proper camel-casing would be deviceUid. (Also elsewhere in other added methods.)", "author": "bvdzwet", "createdAt": "2020-10-14T14:14:43Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java", "diffHunk": "@@ -149,15 +146,18 @@ public MockOslpServer(final CoreDeviceConfiguration configuration, final int osl\n         this.responseDelayRandomRange = reponseDelayRandomRange;\n     }\n \n-    public Integer getSequenceNumber() {\n-        return this.channelHandler.getSequenceNumber();\n+    public Integer getSequenceNumber(final String deviceUID) {", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3Mjg4NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504772884", "bodyText": "I will refactor this", "author": "joostknapen", "createdAt": "2020-10-14T15:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMjgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\nindex dd7766c48c..488d4ad996 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\n\n@@ -140,18 +138,17 @@ public class MockOslpServer {\n         this.signKeyPath = signKeyPath;\n         this.verifyKeyPath = verifyKeyPath;\n         this.keytype = keytype;\n-        this.sequenceNumberWindow = sequenceNumberWindow;\n         this.sequenceNumberMaximum = sequenceNumberMaximum;\n         this.responseDelayTime = responseDelayTime;\n         this.responseDelayRandomRange = reponseDelayRandomRange;\n     }\n \n-    public Integer getSequenceNumber(final String deviceUID) {\n-        return this.devicesContext.getDeviceState(deviceUID).getSequenceNumber();\n+    public Integer getSequenceNumber(final String deviceUid) {\n+        return this.devicesContext.getDeviceState(deviceUid).getSequenceNumber();\n     }\n \n-    public void incrementSequenceNumber(final String deviceUID) {\n-        this.devicesContext.getDeviceState(deviceUID).incrementSequenceNumber();\n+    public void incrementSequenceNumber(final String deviceUid) {\n+        this.devicesContext.getDeviceState(deviceUid).incrementSequenceNumber();\n     }\n \n     public void start() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNzI1MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504717250", "bodyText": "This was probably the last use of field sequenceNumberWindow, which is still declared but no longer used. The field should probably be removed, as I expect there is no more use for it.", "author": "bvdzwet", "createdAt": "2020-10-14T14:20:17Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java", "diffHunk": "@@ -149,15 +146,18 @@ public MockOslpServer(final CoreDeviceConfiguration configuration, final int osl\n         this.responseDelayRandomRange = reponseDelayRandomRange;\n     }\n \n-    public Integer getSequenceNumber() {\n-        return this.channelHandler.getSequenceNumber();\n+    public Integer getSequenceNumber(final String deviceUID) {\n+        return this.devicesContext.getDeviceState(deviceUID).getSequenceNumber();\n+    }\n+\n+    public void incrementSequenceNumber(final String deviceUID) {\n+        this.devicesContext.getDeviceState(deviceUID).incrementSequenceNumber();\n     }\n \n     public void start() {\n         this.channelHandler = new MockOslpChannelHandler(this.oslpSignature, this.oslpSignatureProvider,\n-                this.connectionTimeout, this.sequenceNumberWindow, this.sequenceNumberMaximum, this.responseDelayTime,", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\nindex dd7766c48c..488d4ad996 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\n\n@@ -140,18 +138,17 @@ public class MockOslpServer {\n         this.signKeyPath = signKeyPath;\n         this.verifyKeyPath = verifyKeyPath;\n         this.keytype = keytype;\n-        this.sequenceNumberWindow = sequenceNumberWindow;\n         this.sequenceNumberMaximum = sequenceNumberMaximum;\n         this.responseDelayTime = responseDelayTime;\n         this.responseDelayRandomRange = reponseDelayRandomRange;\n     }\n \n-    public Integer getSequenceNumber(final String deviceUID) {\n-        return this.devicesContext.getDeviceState(deviceUID).getSequenceNumber();\n+    public Integer getSequenceNumber(final String deviceUid) {\n+        return this.devicesContext.getDeviceState(deviceUid).getSequenceNumber();\n     }\n \n-    public void incrementSequenceNumber(final String deviceUID) {\n-        this.devicesContext.getDeviceState(deviceUID).incrementSequenceNumber();\n+    public void incrementSequenceNumber(final String deviceUid) {\n+        this.devicesContext.getDeviceState(deviceUid).incrementSequenceNumber();\n     }\n \n     public void start() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMTM2Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504721367", "bodyText": "Not from this pull request, but the failure message seems deceptive. The waiting here looks like it is for a received request, not for a response. (The same applies just a few lines below with the next fail.)", "author": "bvdzwet", "createdAt": "2020-10-14T14:25:26Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java", "diffHunk": "@@ -180,23 +180,23 @@ public void stop() {\n     }\n \n     public void resetServer() {\n-        this.receivedRequests.clear();\n         this.receivedResponses.clear();\n-        this.mockResponses.clear();\n+        this.devicesContext.clear();\n         this.channelHandler.reset();\n     }\n \n-    public Message waitForRequest(final MessageType requestType) {\n+    public Message waitForRequest(final String deviceUID, final MessageType messageType)\n+            throws DeviceSimulatorException {\n         LOGGER.info(\n-                \"Waiting for request of message type: {} - receivedRequests: {}, receivedResponses: {}, mockResponses: {}\",\n-                requestType.name(), this.receivedRequests.size(), this.receivedResponses.size(),\n-                this.mockResponses.size());\n+                \"Device {} is waiting for request of message type: {}, receivedResponses: {}\",\n+                deviceUID, messageType.name(), this.receivedResponses.size());\n \n+        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n         int count = 0;\n-        while (!this.receivedRequests.containsKey(requestType)) {\n+        while (!deviceState.hasReceivedRequests(messageType)) {\n             try {\n                 count++;\n-                LOGGER.info(\"Sleeping 1s \" + count + \" - waiting for request of message type: \" + requestType.name());\n+                LOGGER.info(\"Sleeping 1s {} - Device {} is waiting for a request of message type: {}\", count, deviceUID, messageType.name());\n                 Thread.sleep(1000);\n             } catch (final InterruptedException e) {\n                 Assertions.fail(\"Polling for response interrupted\");", "originalCommit": "c36843cb6afe48da22e2448a9e7818c772aff0c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3Mzg2MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/451#discussion_r504773861", "bodyText": "true :-) will change this", "author": "joostknapen", "createdAt": "2020-10-14T15:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMTM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "chunk": "diff --git a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\nindex dd7766c48c..488d4ad996 100644\n--- a/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\n+++ b/integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/mocks/oslpdevice/MockOslpServer.java\n\n@@ -185,31 +182,32 @@ public class MockOslpServer {\n         this.channelHandler.reset();\n     }\n \n-    public Message waitForRequest(final String deviceUID, final MessageType messageType)\n+    public Message waitForRequest(final String deviceUid, final MessageType messageType)\n             throws DeviceSimulatorException {\n         LOGGER.info(\n                 \"Device {} is waiting for request of message type: {}, receivedResponses: {}\",\n-                deviceUID, messageType.name(), this.receivedResponses.size());\n+                deviceUid, messageType.name(), this.receivedResponses.size());\n+\n+        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUid);\n \n-        final DeviceState deviceState = this.devicesContext.getDeviceState(deviceUID);\n         int count = 0;\n         while (!deviceState.hasReceivedRequests(messageType)) {\n             try {\n                 count++;\n-                LOGGER.info(\"Sleeping 1s {} - Device {} is waiting for a request of message type: {}\", count, deviceUID, messageType.name());\n+                LOGGER.info(\"Sleeping 1s {} - Device {} is waiting for a request of message type: {}\", count, deviceUid, messageType.name());\n                 Thread.sleep(1000);\n             } catch (final InterruptedException e) {\n-                Assertions.fail(\"Polling for response interrupted\");\n+                Assertions.fail(\"Polling for a requests interrupted\");\n             }\n \n             if (count > this.configuration.getTimeout()) {\n-                Assertions.fail(\"Polling for response failed, no reponse found\");\n+                Assertions.fail(\"Polling for requests failed, no reponse found\");\n             }\n         }\n \n-        LOGGER.info(\"Device {} received a request of message type: {}\", deviceUID, messageType.name());\n+        LOGGER.info(\"Device {} received a request of message type: {}\", deviceUid, messageType.name());\n \n-        return deviceState.getReceivedRequest(messageType);\n+        return deviceState.pollReceivedRequest(messageType);\n     }\n \n     public OslpEnvelope send(final InetSocketAddress address, final OslpEnvelope request,\n"}}, {"oid": "ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ddbea3bcf94fec289d8c56774403e7ceb12cb3a3", "message": "FLEX-5445: Rework on review", "committedDate": "2020-10-15T14:39:35Z", "type": "commit"}, {"oid": "235d1670e5f8f0c8d95ad459ab295e0875c1994e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/235d1670e5f8f0c8d95ad459ab295e0875c1994e", "message": "Merges branch 'development' into\nFLEX-5445_Improve_OSLP_mock_server_to_support_multiple_calls_of_same_type", "committedDate": "2020-10-16T14:09:21Z", "type": "commit"}]}