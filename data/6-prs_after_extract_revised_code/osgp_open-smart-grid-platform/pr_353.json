{"pr_number": 353, "pr_title": "OC-595 Log information about messages on Kafka topics", "pr_createdAt": "2020-06-15T13:13:09Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/353", "timeline": [{"oid": "f70e988183faf10635bf2dd292b2446dcd4d53a6", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f70e988183faf10635bf2dd292b2446dcd4d53a6", "message": "OC-595 ~ Adds logging of Kafka consumer records\n\nAdds KafkaLogger for use with consumer configuration on Kafka topics to\nbe able to log data and metadata of messages that are posted on a topic.\n\nAdds osgp-adapter-kafka-logging as deployable project in servlet\ncontainers with configuration of consumers for currently known topics\nin the GXF code base.\n\nThe configurations of the different logging consumers are subject to a\nSpring conditional, following a boolean property (for instance\npeakshaving.kafka.logging.enabled). Default this enabled property is set\nto false, which should prevent warning or error logging if a Kafka\nbroker is not available for certain topics in a monitored environment.\n\nThe consumed messages for the configured topics will be logged to a file\nspecified in the logback configuration with an appender named MESSAGES.\nThis appender leaves out most of the default stuff that is normally\nadded as context with logged data, leaving only the date and time of\nlogging, and the message that is logged.", "committedDate": "2020-06-15T13:04:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzA5MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440827091", "bodyText": "this file can be removed", "author": "robindenadel", "createdAt": "2020-06-16T12:55:47Z", "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/DistributionAutomationLoggingEnabled.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**", "originalCommit": "f70e988183faf10635bf2dd292b2446dcd4d53a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3NTA5MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440875091", "bodyText": "removed", "author": "bvdzwet", "createdAt": "2020-06-16T14:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "decd24e8573e251e8e314145c2597f4ba89941ed", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/DistributionAutomationLoggingEnabled.java b/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/DistributionAutomationLoggingEnabled.java\ndeleted file mode 100644\nindex 422508142c..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/DistributionAutomationLoggingEnabled.java\n+++ /dev/null\n\n@@ -1,22 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.adapter.kafka.logging.config;\n-\n-import org.springframework.context.annotation.Condition;\n-import org.springframework.context.annotation.ConditionContext;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n-\n-public class DistributionAutomationLoggingEnabled implements Condition {\n-\n-    @Override\n-    public boolean matches(final ConditionContext context, final AnnotatedTypeMetadata metadata) {\n-        return \"true\"\n-                .equalsIgnoreCase(context.getEnvironment().getProperty(\"distributionautomation.kafka.logging.enabled\"));\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzMwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440827309", "bodyText": "this file can be removed", "author": "robindenadel", "createdAt": "2020-06-16T12:56:06Z", "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/KafkaDistributionAutomationConsumerConfig.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**", "originalCommit": "f70e988183faf10635bf2dd292b2446dcd4d53a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3NDkwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440874909", "bodyText": "removed", "author": "bvdzwet", "createdAt": "2020-06-16T14:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "decd24e8573e251e8e314145c2597f4ba89941ed", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/KafkaDistributionAutomationConsumerConfig.java b/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/KafkaDistributionAutomationConsumerConfig.java\ndeleted file mode 100644\nindex 2a82cdac55..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/KafkaDistributionAutomationConsumerConfig.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.adapter.kafka.logging.config;\n-\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n-import org.opensmartgridplatform.shared.application.config.kafka.AbstractKafkaConsumerConfig;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.Environment;\n-import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n-import org.springframework.kafka.core.ConsumerFactory;\n-\n-@Configuration\n-@Conditional(DistributionAutomationLoggingEnabled.class)\n-public class KafkaDistributionAutomationConsumerConfig extends AbstractKafkaConsumerConfig<String, MeterReading> {\n-\n-    public KafkaDistributionAutomationConsumerConfig(final Environment environment,\n-            @Value(\"${distributionautomation.kafka.common.properties.prefix}\") final String propertiesPrefix,\n-            @Value(\"${distributionautomation.kafka.topic}\") final String topic,\n-            @Value(\"${distributionautomation.kafka.consumer.concurrency}\") final int concurrency,\n-            @Value(\"${distributionautomation.kafka.consumer.poll.timeout}\") final int pollTimeout) {\n-\n-        super(environment, propertiesPrefix, topic, concurrency, pollTimeout);\n-    }\n-\n-    @Bean(\"distributionAutomationConsumerFactory\")\n-    @Override\n-    public ConsumerFactory<String, MeterReading> consumerFactory() {\n-        return this.getConsumerFactory();\n-    }\n-\n-    @Bean(\"distributionAutomationKafkaListenerContainerFactory\")\n-    @Override\n-    public ConcurrentKafkaListenerContainerFactory<String, MeterReading> kafkaListenerContainerFactory() {\n-        return this.getKafkaListenerContainerFactory();\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzQ5OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440827499", "bodyText": "this file can be removed", "author": "robindenadel", "createdAt": "2020-06-16T12:56:25Z", "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/MeterReadingConsumer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**", "originalCommit": "f70e988183faf10635bf2dd292b2446dcd4d53a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3NTYyNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440875624", "bodyText": "removed", "author": "bvdzwet", "createdAt": "2020-06-16T14:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "decd24e8573e251e8e314145c2597f4ba89941ed", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/MeterReadingConsumer.java b/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/MeterReadingConsumer.java\ndeleted file mode 100644\nindex c4c3605ca5..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/MeterReadingConsumer.java\n+++ /dev/null\n\n@@ -1,32 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.adapter.kafka.logging.infra.kafka.in;\n-\n-import org.apache.kafka.clients.consumer.ConsumerRecord;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n-import org.opensmartgridplatform.adapter.kafka.logging.config.DistributionAutomationLoggingEnabled;\n-import org.opensmartgridplatform.kafka.logging.KafkaLogger;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Conditional;\n-import org.springframework.kafka.annotation.KafkaListener;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-@Conditional(DistributionAutomationLoggingEnabled.class)\n-public class MeterReadingConsumer {\n-\n-    @Autowired\n-    private KafkaLogger kafkaLogger;\n-\n-    @KafkaListener(containerFactory = \"distributionAutomationKafkaListenerContainerFactory\",\n-            topics = \"${distributionautomation.kafka.topic}\")\n-    public void listen(final ConsumerRecord<String, MeterReading> consumerRecord) {\n-        this.kafkaLogger.log(consumerRecord);\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyODI1OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440828259", "bodyText": "this file can be removed", "author": "robindenadel", "createdAt": "2020-06-16T12:57:40Z", "path": "osgp/platform/osgp-adapter-kafka-logging/src/test/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/MeterReadingConsumerTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**", "originalCommit": "f70e988183faf10635bf2dd292b2446dcd4d53a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3Njk4NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440876985", "bodyText": "removed", "author": "bvdzwet", "createdAt": "2020-06-16T14:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyODI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "decd24e8573e251e8e314145c2597f4ba89941ed", "chunk": "diff --git a/osgp/platform/osgp-adapter-kafka-logging/src/test/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/MeterReadingConsumerTest.java b/osgp/platform/osgp-adapter-kafka-logging/src/test/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/MeterReadingConsumerTest.java\ndeleted file mode 100644\nindex 85cd3741ba..0000000000\n--- a/osgp/platform/osgp-adapter-kafka-logging/src/test/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/MeterReadingConsumerTest.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-/**\n- * Copyright 2020 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.opensmartgridplatform.adapter.kafka.logging.infra.kafka.in;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import java.util.Arrays;\n-import java.util.Map;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.apache.kafka.common.serialization.StringSerializer;\n-import org.junit.jupiter.api.Test;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalReading;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.ReadingType;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n-import org.opensmartgridplatform.adapter.kafka.da.serialization.MeterReadingSerializer;\n-import org.opensmartgridplatform.adapter.kafka.logging.config.ApplicationContext;\n-import org.opensmartgridplatform.adapter.kafka.logging.config.DistributionAutomationLoggingEnabled;\n-import org.opensmartgridplatform.adapter.kafka.logging.infra.kafka.in.MeterReadingConsumerTest.TestConfig;\n-import org.opensmartgridplatform.kafka.logging.CountDownKafkaLogger;\n-import org.opensmartgridplatform.kafka.logging.KafkaLogger;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Import;\n-import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n-import org.springframework.kafka.core.KafkaTemplate;\n-import org.springframework.kafka.core.ProducerFactory;\n-import org.springframework.kafka.test.EmbeddedKafkaBroker;\n-import org.springframework.kafka.test.context.EmbeddedKafka;\n-import org.springframework.kafka.test.utils.KafkaTestUtils;\n-import org.springframework.test.annotation.DirtiesContext;\n-import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n-\n-@SpringJUnitConfig(TestConfig.class)\n-@TestPropertySource(\"classpath:osgp-adapter-kafka-logging-test-distributionautomation.properties\")\n-@EmbeddedKafka(partitions = 1,\n-        topics = { \"${distributionautomation.kafka.topic}\" },\n-        brokerProperties = { \"listeners=PLAINTEXT://${distributionautomation.kafka.bootstrap.servers}\",\n-                \"log.dirs=target/kafka-logs-distributionautomation\", \"auto.create.topics.enable=true\" })\n-@DirtiesContext\n-public class MeterReadingConsumerTest {\n-\n-    /**\n-     * Spring test context configuration setting up the CountDownKafkaLogger to\n-     * be used to verify sending a meter reading leads to it being logged.\n-     *\n-     * @see CountDownKafkaLogger\n-     */\n-    @Configuration\n-    @Import(ApplicationContext.class)\n-    @Conditional(DistributionAutomationLoggingEnabled.class)\n-    public static class TestConfig {\n-\n-        @Bean\n-        public CountDownLatch countDownLatch() {\n-            return new CountDownLatch(1);\n-        }\n-\n-        @Bean\n-        public KafkaLogger kafkaLogger(final CountDownLatch countDownLatch, final MeterReading meterReading) {\n-            return new CountDownKafkaLogger(countDownLatch, meterReading);\n-        }\n-\n-        @Bean\n-        public MeterReading meterReading() {\n-            return MeterReadingConsumerTest.createMeterReading();\n-        }\n-    }\n-\n-    @Value(\"${distributionautomation.kafka.topic}\")\n-    private String topic;\n-\n-    @Autowired\n-    private EmbeddedKafkaBroker broker;\n-\n-    @Autowired\n-    private CountDownLatch countDownLatch;\n-\n-    @Autowired\n-    private MeterReading meterReading;\n-\n-    @Test\n-    void logsMessagesPostedToTheDistributionAutomationTopic() throws Exception {\n-        this.whenMeterReadingDataIsSentToTheTopic();\n-        this.theKafkaLoggerLogsTheMeterReading();\n-    }\n-\n-    private void whenMeterReadingDataIsSentToTheTopic() {\n-        final Map<String, Object> producerProps = KafkaTestUtils.producerProps(this.broker);\n-        final ProducerFactory<String, MeterReading> producerFactory = new DefaultKafkaProducerFactory<>(producerProps,\n-                new StringSerializer(), new MeterReadingSerializer());\n-        final KafkaTemplate<String, MeterReading> template = new KafkaTemplate<>(producerFactory);\n-        template.setDefaultTopic(this.topic);\n-        template.sendDefault(this.meterReading);\n-    }\n-\n-    private void theKafkaLoggerLogsTheMeterReading() throws Exception {\n-        final long timeout = 30;\n-        final TimeUnit timeUnit = TimeUnit.SECONDS;\n-        assertThat(this.countDownLatch.await(timeout, timeUnit)).overridingErrorMessage(\n-                \"KafkaLogger did not receive a record to log within \" + timeout + \" \" + timeUnit).isTrue();\n-    }\n-\n-    private static MeterReading createMeterReading() {\n-        final long end = System.currentTimeMillis();\n-        final long start = end - 60_000;\n-        final long time1 = end - 40_000;\n-        final long time2 = end - 20_000;\n-        final long time3 = end - 10_000;\n-\n-        return MeterReading.newBuilder()\n-                .setMRid(\"mrid\")\n-                .setName(\"meter reading\")\n-                .setUsagePoint(UsagePoint.newBuilder().setMRid(\"mrid\").build())\n-                .setIntervalBlocks(Arrays.asList(IntervalBlock.newBuilder()\n-                        .setIntervalReadings(Arrays.asList(\n-                                IntervalReading.newBuilder().setTimeStamp(start).setValue(\"start\").build(),\n-                                IntervalReading.newBuilder().setTimeStamp(time1).setValue(\"first\").build(),\n-                                IntervalReading.newBuilder().setTimeStamp(time2).setValue(\"second\").build(),\n-                                IntervalReading.newBuilder().setTimeStamp(time3).setValue(\"third\").build(),\n-                                IntervalReading.newBuilder().setTimeStamp(end).setValue(\"end\").build()))\n-                        .setReadingType(ReadingType.newBuilder()\n-                                .setMeasuringKind(\"test\")\n-                                .setMeasuringPeriod(\"1 minute\")\n-                                .setMRid(\"mrid\")\n-                                .setMultiplier(null)\n-                                .setName(\"text\")\n-                                .setUnit(null)\n-                                .build())\n-                        .build()))\n-                .setValuesInterval(ValuesInterval.newBuilder().setStart(start).setEnd(end).build())\n-                .build();\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyODkwNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/353#discussion_r440828907", "bodyText": "very nice!", "author": "robindenadel", "createdAt": "2020-06-16T12:58:46Z", "path": "osgp/platform/osgp-adapter-kafka-logging/src/test/java/org/opensmartgridplatform/adapter/kafka/logging/infra/kafka/in/PeakShavingConsumerTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.logging.infra.kafka.in;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.LocalDateTime;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.logging.config.ApplicationContext;\n+import org.opensmartgridplatform.adapter.kafka.logging.config.PeakShavingLoggingEnabled;\n+import org.opensmartgridplatform.adapter.kafka.logging.infra.kafka.in.PeakShavingConsumerTest.TestConfig;\n+import org.opensmartgridplatform.kafka.logging.CountDownKafkaLogger;\n+import org.opensmartgridplatform.kafka.logging.KafkaLogger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.core.ProducerFactory;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(TestConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-logging-test-peakshaving.properties\")\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${peakshaving.kafka.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://${peakshaving.kafka.bootstrap.servers}\",\n+                \"log.dirs=target/kafka-logs-peakshaving\", \"auto.create.topics.enable=true\" })\n+@DirtiesContext\n+public class PeakShavingConsumerTest {\n+\n+    /**\n+     * Spring test context configuration setting up the CountDownKafkaLogger to\n+     * be used to verify sending peak shaving data leads to it being logged.\n+     *\n+     * @see CountDownKafkaLogger\n+     */\n+    @Configuration\n+    @Import(ApplicationContext.class)\n+    @Conditional(PeakShavingLoggingEnabled.class)\n+    public static class TestConfig {\n+\n+        @Bean\n+        public CountDownLatch countDownLatch() {\n+            return new CountDownLatch(1);\n+        }\n+\n+        @Bean\n+        public KafkaLogger kafkaLogger(final CountDownLatch countDownLatch, final String peakShavingData) {\n+            return new CountDownKafkaLogger(countDownLatch, peakShavingData);\n+        }\n+\n+        @Bean\n+        public String peakShavingData() {\n+            return \"TST-01; 220.1; 220.2; 220.3; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        }\n+    }\n+\n+    @Value(\"${peakshaving.kafka.topic}\")\n+    private String topic;\n+\n+    @Autowired\n+    private CountDownLatch countDownLatch;\n+\n+    @Autowired\n+    private String peakShavingData;\n+\n+    @Autowired\n+    private EmbeddedKafkaBroker broker;\n+\n+    @Test\n+    void logsMessagesPostedToThePeakShavingTopic() throws Exception {\n+        this.whenPeakShavingDataIsSentToTheTopic();\n+        this.theKafkaLoggerLogsThePeakShavingData();\n+    }", "originalCommit": "f70e988183faf10635bf2dd292b2446dcd4d53a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "decd24e8573e251e8e314145c2597f4ba89941ed", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/decd24e8573e251e8e314145c2597f4ba89941ed", "message": "OC-595 ~ Removed DistributionAutomation MeterReading logging\n\nThe MeterReadings are a left-over from a hackathon that has taken place.\n\nThe Avro format mentioned in the story acceptance criteria is one that\nstill has to be defined as an outcome of OC-574. Once that is done, the\npeak shaving consumer tests that work with a String based consumer\nrecord value, will have to be updated to use the new Avro format.", "committedDate": "2020-06-16T14:11:44Z", "type": "commit"}, {"oid": "3a4338bc21a693c0c60580c01a05c52e9c18d0b5", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3a4338bc21a693c0c60580c01a05c52e9c18d0b5", "message": "Merges branch 'development' into feature/OC-595-create-logging-kafka-listener", "committedDate": "2020-06-16T14:12:26Z", "type": "commit"}, {"oid": "deec55a1818d28e2e844bac44202855ab3e513cc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/deec55a1818d28e2e844bac44202855ab3e513cc", "message": "OC-595 ~ Removes dependency to meter reading Avro project\n\nThe code for logging meter readings messages has been removed from the\nosgp-adapter-kafka-logging project. This removes the no longer\napplicable maven dependency as well.", "committedDate": "2020-06-16T14:36:45Z", "type": "commit"}]}