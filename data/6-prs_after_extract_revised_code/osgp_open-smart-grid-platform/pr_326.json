{"pr_number": 326, "pr_title": "FLEX-5084: Filters events on description.", "pr_createdAt": "2020-05-15T12:16:37Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/326", "timeline": [{"oid": "3dfb8cc2c352863966303d801a74453e6b9e69e1", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3dfb8cc2c352863966303d801a74453e6b9e69e1", "message": "FLEX-5084: Filters events on description.", "committedDate": "2020-05-15T12:11:59Z", "type": "commit"}, {"oid": "a39e1a0c647413c97113514b290e986ec86d2bcc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a39e1a0c647413c97113514b290e986ec86d2bcc", "message": "FLEX-5084: Adds cucumber tests.", "committedDate": "2020-05-18T08:57:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjY3MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426612671", "bodyText": "Why is the index field no longer compared?", "author": "rlemmers", "createdAt": "2020-05-18T13:08:53Z", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/devicemanagement/RetrieveReceivedEventNotifications.java", "diffHunk": "@@ -113,24 +123,29 @@ public void aRetrieveEventNotificationRequestIsSent(final Map<String, String> se\n \n     @Then(\"^the retrieve event notification response contains$\")\n     public void theRetrieveEventNotificationResponseContains(final Map<String, String> expectedResponse) {\n+        final String deviceIdentification = getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+                PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION);\n         final FindEventsResponse response = (FindEventsResponse) ScenarioContext.current()\n-                .get(getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n-                        PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION).concat(\"_\").concat(PlatformKeys.RESPONSE));\n+                .get(deviceIdentification.concat(\"_\").concat(PlatformKeys.RESPONSE));\n \n         final List<org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event> events = response\n                 .getEvents();\n \n-        assertThat(events.isEmpty()).isFalse();\n+        assertThat(events).isNotEmpty();\n+        final org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event expected = this\n+                .expectedEvent(expectedResponse, deviceIdentification);\n \n-        for (final org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event e : events) {\n-            assertThat(e.getTimestamp()).isNotNull();\n-            assertThat(e.getDeviceIdentification()).isEqualTo(getString(expectedResponse,\n-                    PlatformKeys.KEY_DEVICE_IDENTIFICATION, PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION));\n-            assertThat(e.getEventType().value()).isEqualTo(getString(expectedResponse, PlatformKeys.EVENT_TYPE));\n-            assertThat(e.getDescription()).isEqualTo(getString(expectedResponse, PlatformKeys.KEY_DESCRIPTION));\n-            assertThat(e.getIndex())\n-                    .isEqualTo(getInteger(expectedResponse, PlatformKeys.KEY_INDEX, PlatformDefaults.DEFAULT_INDEX));\n-        }\n+        assertThat(events).usingElementComparatorIgnoringFields(\"timestamp\", \"index\").contains(expected);", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDA1OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r427254059", "bodyText": "There are no scenarios where a check on index is done", "author": "robindenadel", "createdAt": "2020-05-19T12:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjY3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwNDc1Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426704752", "bodyText": "We now supply both \"description\" en \"descriptionStartsWith\". The code uses an \"or\" operator for those fields. This isn't obvious to the users. To keep it simple and clear, we could offer just the \"descriptionStartsWith\". We can probably live without the exact match.\nAnother option would be to use wildcards, but that would be extending the scope of the story. It would extend the scope, because to be consistent you would have to support wildcards for the deviceIdentification (and possibly the organisationIdentification) as well.", "author": "rlemmers", "createdAt": "2020-05-18T15:20:02Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java", "diffHunk": "@@ -186,7 +186,8 @@ public Organisation findOrganisation(@Identification final String organisationId\n     @Transactional(value = \"transactionManager\")\n     public Page<Event> findEvents(@Identification final String organisationIdentification,\n             final String deviceIdentification, final PageSpecifier pageSpecifier, final DateTime from,\n-            final DateTime until, final List<EventType> eventTypes) throws FunctionalException {\n+            final DateTime until, final List<EventType> eventTypes, final String description,\n+            final String descriptionStartsWith) throws FunctionalException {", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NjczMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r427256732", "bodyText": "this destroys the whole idea that we could do with one call", "author": "robindenadel", "createdAt": "2020-05-19T12:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwNDc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2ca5b6924d74416c64781aaa0bd964679231be97", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n\n@@ -184,49 +185,45 @@ public class DeviceManagementService {\n     }\n \n     @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final PageSpecifier pageSpecifier, final DateTime from,\n-            final DateTime until, final List<EventType> eventTypes, final String description,\n-            final String descriptionStartsWith) throws FunctionalException {\n+    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n+        final String organisationIdentification = criteria.getOrganisationIdentification();\n+        final String deviceIdentification = criteria.getDeviceIdentification();\n         LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n                 deviceIdentification);\n \n         final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n \n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n+        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n         final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n                 this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n \n         Specification<Event> specification;\n \n-        try {\n-            if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-                final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-                this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n-\n-                specification = where(this.eventSpecifications.isFromDevice(device));\n-            } else {\n-                specification = where(this.eventSpecifications.isAuthorized(organisation));\n-            }\n+        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-            if (from != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-            }\n+            specification = where(this.eventSpecifications.isFromDevice(device));\n+        } else {\n+            specification = where(this.eventSpecifications.isAuthorized(organisation));\n+        }\n \n-            if (until != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-            }\n+        final DateTime from = criteria.getFrom();\n+        if (from != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+        }\n \n-            if (eventTypes != null && !eventTypes.isEmpty()) {\n-                specification = specification.and(this.eventSpecifications.hasEventTypes(eventTypes));\n-            }\n-            specification = handleDescription(description, descriptionStartsWith, specification);\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            throw new FunctionalException(FunctionalExceptionType.ARGUMENT_NULL, ComponentType.WS_CORE, e);\n+        final DateTime until = criteria.getUntil();\n+        if (until != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n         }\n \n+        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+        specification = this.handleDescription(SearchUtil.getCleanedInput(criteria.getDescription()),\n+                SearchUtil.getCleanedInput(criteria.getDescriptionStartsWith()), specification);\n+\n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n         LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODQxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426708413", "bodyText": "It would be more consistent to create method \"this.eventSpecifications.hasDescription(...)\".", "author": "rlemmers", "createdAt": "2020-05-18T15:25:10Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java", "diffHunk": "@@ -221,6 +222,7 @@ public Organisation findOrganisation(@Identification final String organisationId\n             if (eventTypes != null && !eventTypes.isEmpty()) {\n                 specification = specification.and(this.eventSpecifications.hasEventTypes(eventTypes));\n             }\n+            specification = handleDescription(description, descriptionStartsWith, specification);", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI2NzczMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r427267730", "bodyText": "description is special, an thus handled in a special way", "author": "robindenadel", "createdAt": "2020-05-19T12:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "2ca5b6924d74416c64781aaa0bd964679231be97", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n\n@@ -184,49 +185,45 @@ public class DeviceManagementService {\n     }\n \n     @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final PageSpecifier pageSpecifier, final DateTime from,\n-            final DateTime until, final List<EventType> eventTypes, final String description,\n-            final String descriptionStartsWith) throws FunctionalException {\n+    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n+        final String organisationIdentification = criteria.getOrganisationIdentification();\n+        final String deviceIdentification = criteria.getDeviceIdentification();\n         LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n                 deviceIdentification);\n \n         final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n \n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n+        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n         final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n                 this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n \n         Specification<Event> specification;\n \n-        try {\n-            if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-                final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-                this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n-\n-                specification = where(this.eventSpecifications.isFromDevice(device));\n-            } else {\n-                specification = where(this.eventSpecifications.isAuthorized(organisation));\n-            }\n+        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-            if (from != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-            }\n+            specification = where(this.eventSpecifications.isFromDevice(device));\n+        } else {\n+            specification = where(this.eventSpecifications.isAuthorized(organisation));\n+        }\n \n-            if (until != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-            }\n+        final DateTime from = criteria.getFrom();\n+        if (from != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+        }\n \n-            if (eventTypes != null && !eventTypes.isEmpty()) {\n-                specification = specification.and(this.eventSpecifications.hasEventTypes(eventTypes));\n-            }\n-            specification = handleDescription(description, descriptionStartsWith, specification);\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            throw new FunctionalException(FunctionalExceptionType.ARGUMENT_NULL, ComponentType.WS_CORE, e);\n+        final DateTime until = criteria.getUntil();\n+        if (until != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n         }\n \n+        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+        specification = this.handleDescription(SearchUtil.getCleanedInput(criteria.getDescription()),\n+                SearchUtil.getCleanedInput(criteria.getDescriptionStartsWith()), specification);\n+\n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n         LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMjgyMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426712822", "bodyText": "like this (also see the closed source JpaDeviceSpecifications class for similar code), in case the \"or\" remains:\nSpecification descriptionSpecification = this.eventSpecifications(...);\nSpecification descriptionStartsWithSpecification = this.eventSpecifications(...);\nreturn specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\nAnd in the eventSpecifications methods:\nif (description == null) {\nreturn (eventRoot, query, cb) -> cb.and();\n}\nreturn ((eventRoot, query, cb) -> cb.equal(eventRoot. get(DESCRIPTION), description));\nWhen using the \"cb.and()\" construction, you can also remove the \"throws ArgumentNullOrEmptyException\" clause.", "author": "rlemmers", "createdAt": "2020-05-18T15:31:29Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java", "diffHunk": "@@ -233,6 +235,25 @@ public Organisation findOrganisation(@Identification final String organisationId\n         return this.eventRepository.findAll(specification, request);\n     }\n \n+    private Specification<Event> handleDescription(final String description, final String descriptionStartsWith,\n+            Specification<Event> specification) throws ArgumentNullOrEmptyException {\n+        if (description == null) {", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MjY5Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r429072692", "bodyText": "tried this\nwhen filtering only on Description or only on DescriptionStartsWith i did not get the correct results.\nTherefor I had to use a different construction", "author": "robindenadel", "createdAt": "2020-05-22T06:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMjgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2ca5b6924d74416c64781aaa0bd964679231be97", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n\n@@ -236,22 +233,21 @@ public class DeviceManagementService {\n     }\n \n     private Specification<Event> handleDescription(final String description, final String descriptionStartsWith,\n-            Specification<Event> specification) throws ArgumentNullOrEmptyException {\n-        if (description == null) {\n-            if (descriptionStartsWith != null) {\n-                specification = specification\n-                        .and((this.eventSpecifications.startsWithDescription(descriptionStartsWith)));\n-            }\n-        } else {\n-            final Specification<Event> descriptionSpec = this.eventSpecifications.withDescription(description);\n-            if (descriptionStartsWith == null) {\n-                specification = specification.and(descriptionSpec);\n-            } else {\n-                specification = specification.and(\n-                        descriptionSpec.or(this.eventSpecifications.startsWithDescription(descriptionStartsWith)));\n-            }\n+            final Specification<Event> specification) {\n+\n+        final Specification<Event> descriptionSpecification = this.eventSpecifications.withDescription(description);\n+        final Specification<Event> descriptionStartsWithSpecification = this.eventSpecifications\n+                .startsWithDescription(descriptionStartsWith);\n+        if (description == null && descriptionStartsWith == null) {\n+            return specification;\n         }\n-        return specification;\n+        if (description == null && descriptionStartsWith != null) {\n+            return specification.and(descriptionStartsWithSpecification);\n+        }\n+        if (description != null && descriptionStartsWith == null) {\n+            return specification.and(descriptionSpecification);\n+        }\n+        return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxODY3MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426718670", "bodyText": "General remark: have we cleaned the description and descriptionStartsWith values?\nSpecific remark: we do a \"like\" here, make sure there are no wildcards (percentage or underscore) in the descriptionStartsWith parameter.", "author": "rlemmers", "createdAt": "2020-05-18T15:40:01Z", "path": "osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java", "diffHunk": "@@ -98,4 +99,23 @@ private Predicate createPredicateForHasEventTypes(final Root<Event> eventRoot, f\n \n         return eventType.in(eventTypes);\n     }\n+\n+    @Override\n+    public Specification<Event> withDescription(final String description) throws ArgumentNullOrEmptyException {\n+        if (description == null) {\n+            throw new ArgumentNullOrEmptyException(DESCRIPTION);\n+        }\n+\n+        return ((eventRoot, query, cb) -> cb.equal(eventRoot.<String> get(DESCRIPTION), description));\n+    }\n+\n+    @Override\n+    public Specification<Event> startsWithDescription(final String descriptionStartsWith)\n+            throws ArgumentNullOrEmptyException {\n+        if (descriptionStartsWith == null) {\n+            throw new ArgumentNullOrEmptyException(\"descriptionStartsWith\");\n+        }\n+\n+        return ((eventRoot, query, cb) -> cb.like(eventRoot.<String> get(DESCRIPTION), descriptionStartsWith + \"%\"));", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NDg3Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r429084876", "bodyText": "wrote a getCleanedInput method", "author": "robindenadel", "createdAt": "2020-05-22T07:23:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxODY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "2ca5b6924d74416c64781aaa0bd964679231be97", "chunk": "diff --git a/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java b/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\nindex 1b8b58b1c5..4518006436 100644\n--- a/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\n+++ b/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\n\n@@ -101,19 +102,18 @@ public class JpaEventSpecifications implements EventSpecifications {\n     }\n \n     @Override\n-    public Specification<Event> withDescription(final String description) throws ArgumentNullOrEmptyException {\n+    public Specification<Event> withDescription(final String description) {\n         if (description == null) {\n-            throw new ArgumentNullOrEmptyException(DESCRIPTION);\n+            return NO_FILTER;\n         }\n \n         return ((eventRoot, query, cb) -> cb.equal(eventRoot.<String> get(DESCRIPTION), description));\n     }\n \n     @Override\n-    public Specification<Event> startsWithDescription(final String descriptionStartsWith)\n-            throws ArgumentNullOrEmptyException {\n+    public Specification<Event> startsWithDescription(final String descriptionStartsWith) {\n         if (descriptionStartsWith == null) {\n-            throw new ArgumentNullOrEmptyException(\"descriptionStartsWith\");\n+            return NO_FILTER;\n         }\n \n         return ((eventRoot, query, cb) -> cb.like(eventRoot.<String> get(DESCRIPTION), descriptionStartsWith + \"%\"));\n"}}, {"oid": "2ca5b6924d74416c64781aaa0bd964679231be97", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2ca5b6924d74416c64781aaa0bd964679231be97", "message": "FLEX-5084: Addresses review comments.", "committedDate": "2020-05-22T08:21:28Z", "type": "commit"}]}