{"pr_number": 1193, "pr_title": "RDM-10013: added LOG_CALLBACK_DETAILS to support call back logging", "pr_createdAt": "2020-11-02T17:29:18Z", "pr_url": "https://github.com/hmcts/ccd-data-store-api/pull/1193", "timeline": [{"oid": "4e74d616b717c78b130185897a11bec466d0af6b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/4e74d616b717c78b130185897a11bec466d0af6b", "message": "added LOG_CALLBACK_DETAILS to support call back logging", "committedDate": "2020-11-02T17:17:39Z", "type": "commit"}, {"oid": "d5beb4ac8d523074ffad3a161515b46fbb196d5c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/d5beb4ac8d523074ffad3a161515b46fbb196d5c", "message": "added fixed junits for call back logging", "committedDate": "2020-11-02T22:42:22Z", "type": "commit"}, {"oid": "19c001e0f63592df89ff22e4b1c92f49e5e38052", "url": "https://github.com/hmcts/ccd-data-store-api/commit/19c001e0f63592df89ff22e4b1c92f49e5e38052", "message": "Update Jenkinsfile_CNP\n\nchanged es flag to false - temporarily", "committedDate": "2020-11-03T11:23:46Z", "type": "commit"}, {"oid": "48ea068594f6cfbc5aaf7c1013250154e6e04d51", "url": "https://github.com/hmcts/ccd-data-store-api/commit/48ea068594f6cfbc5aaf7c1013250154e6e04d51", "message": "added junits for call back logging", "committedDate": "2020-11-04T15:06:28Z", "type": "commit"}, {"oid": "34df12c933db550b49b495953addc1ba63607c63", "url": "https://github.com/hmcts/ccd-data-store-api/commit/34df12c933db550b49b495953addc1ba63607c63", "message": "Merge branch 'RDM-10013' of https://github.com/hmcts/ccd-data-store-api into RDM-10013", "committedDate": "2020-11-04T15:07:55Z", "type": "commit"}, {"oid": "18b68cab94258404f655c98262a0df163e9a6e62", "url": "https://github.com/hmcts/ccd-data-store-api/commit/18b68cab94258404f655c98262a0df163e9a6e62", "message": "enabled es search flag", "committedDate": "2020-11-04T15:39:03Z", "type": "commit"}, {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "url": "https://github.com/hmcts/ccd-data-store-api/commit/e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "message": "add to string method", "committedDate": "2020-11-04T17:12:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczNjEyMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518736123", "bodyText": "this should be a private static final, all upper case. I'd also remove the comment", "author": "mario-paniccia", "createdAt": "2020-11-06T13:01:02Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back", "originalCommit": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MDA0Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518880047", "bodyText": "refactored", "author": "henrykcgi", "createdAt": "2020-11-06T16:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczNjEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "c12ddb56d0b3e41ca114a2e366632e6b405dea9f", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 14ac86d63..862586f5c 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -123,13 +124,6 @@ public class CallbackService {\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n-        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n-        boolean match = false;\n-        String starStr = \"*\";//to match any call back\n-        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n-            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n-            match = true;\n-        }\n         int httpStatus = 0;\n         Instant startTime = Instant.now();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczODQ5Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518738496", "bodyText": "I would log also the url to make it simpler to correlate the response to the callback. Otherwise it can be difficult when plenty of callbacks happen at the same time\nAlso remove initial space please", "author": "mario-paniccia", "createdAt": "2020-11-06T13:05:54Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back\n+        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n+            match = true;\n+        }\n         int httpStatus = 0;\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (match) {\n+                LOG.info(\"Invoking callback {} of CallbackType {} at {} with Request {}\",\n+                    url, callbackType, startTime, requestEntity);\n+            }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n+            if (match) {\n+                LOG.info(\" Received callback Response {}\", responseEntity);", "originalCommit": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c12ddb56d0b3e41ca114a2e366632e6b405dea9f", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 14ac86d63..862586f5c 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -123,13 +124,6 @@ public class CallbackService {\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n-        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n-        boolean match = false;\n-        String starStr = \"*\";//to match any call back\n-        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n-            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n-            match = true;\n-        }\n         int httpStatus = 0;\n         Instant startTime = Instant.now();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczOTIzMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518739232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.info(\"Invoking callback {} of CallbackType {} at {} with Request {}\",\n          \n          \n            \n                            LOG.info(\"Invoking callback {} of type {} with request: {}\",\n          \n      \n    \n    \n  \n\nwe could avoid logging the start time since it's logged by default by the logging framework?", "author": "mario-paniccia", "createdAt": "2020-11-06T13:07:19Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back\n+        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n+            match = true;\n+        }\n         int httpStatus = 0;\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (match) {\n+                LOG.info(\"Invoking callback {} of CallbackType {} at {} with Request {}\",", "originalCommit": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c12ddb56d0b3e41ca114a2e366632e6b405dea9f", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 14ac86d63..862586f5c 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -123,13 +124,6 @@ public class CallbackService {\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n-        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n-        boolean match = false;\n-        String starStr = \"*\";//to match any call back\n-        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n-            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n-            match = true;\n-        }\n         int httpStatus = 0;\n         Instant startTime = Instant.now();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0MDMxNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518740314", "bodyText": "we could do an extract method here to simplify the code.\nAll this could go into a private method\nboolean logCallbackDetails(....)\nand then it can be directly called on line 143 and 148: e.g.\nif(logCallbackDetails(...) {\n     ....", "author": "mario-paniccia", "createdAt": "2020-11-06T13:09:25Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back\n+        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n+            match = true;\n+        }", "originalCommit": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c12ddb56d0b3e41ca114a2e366632e6b405dea9f", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 14ac86d63..862586f5c 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -123,13 +124,6 @@ public class CallbackService {\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n-        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n-        boolean match = false;\n-        String starStr = \"*\";//to match any call back\n-        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n-            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n-            match = true;\n-        }\n         int httpStatus = 0;\n         Instant startTime = Instant.now();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDM4MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518744380", "bodyText": "not sure I understand what we are verifying here", "author": "mario-paniccia", "createdAt": "2020-11-06T13:17:19Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));", "originalCommit": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTA0NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518881044", "bodyText": "updated the tests", "author": "henrykcgi", "createdAt": "2020-11-06T16:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "490ec50aecb2245af1042e7276caebc187737ef2", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 1a7efd152..aebfbfa65 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -167,7 +167,7 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should Log callback event\")\n+    @DisplayName(\"Should Not Log callback event\")\n     public void shouldNotLogCallbackEvent() throws Exception {\n         List<String> ccdCallbackLogControl = new ArrayList<String>();\n         ccdCallbackLogControl.add(\"Notest-callback\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDQ0NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518744444", "bodyText": "not sure I understand what we are verifying here", "author": "mario-paniccia", "createdAt": "2020-11-06T13:17:28Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));", "originalCommit": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "490ec50aecb2245af1042e7276caebc187737ef2", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 1a7efd152..aebfbfa65 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -167,7 +167,7 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should Log callback event\")\n+    @DisplayName(\"Should Not Log callback event\")\n     public void shouldNotLogCallbackEvent() throws Exception {\n         List<String> ccdCallbackLogControl = new ArrayList<String>();\n         ccdCallbackLogControl.add(\"Notest-callback\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDY3MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518744671", "bodyText": "not sure I understand what we are verifying here", "author": "mario-paniccia", "createdAt": "2020-11-06T13:17:55Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));", "originalCommit": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "490ec50aecb2245af1042e7276caebc187737ef2", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 1a7efd152..aebfbfa65 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -167,7 +167,7 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should Log callback event\")\n+    @DisplayName(\"Should Not Log callback event\")\n     public void shouldNotLogCallbackEvent() throws Exception {\n         List<String> ccdCallbackLogControl = new ArrayList<String>();\n         ccdCallbackLogControl.add(\"Notest-callback\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NjEwMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518746101", "bodyText": "perhaps a test where we test the comma separated config?\ne.g.\nccdCallbackLogControl.add(\"callback1, callback2, callback3\");", "author": "mario-paniccia", "createdAt": "2020-11-06T13:20:31Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n     private void initSecurityContext() {\n         doReturn(principal).when(authentication).getPrincipal();\n         doReturn(authentication).when(securityContext).getAuthentication();", "originalCommit": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MzU5Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518883592", "bodyText": "Not really, Spring will split the comma separated values..\ni believe you mean ccdCallbackLogControl.add(callback1).add(callback2) etc\ndone.", "author": "henrykcgi", "createdAt": "2020-11-06T17:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NjEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3ODgxNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519678816", "bodyText": "I meant testing logging of multiple callbacks. That's done now in shouldLogCallbackEventMultiple()", "author": "mario-paniccia", "createdAt": "2020-11-09T09:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NjEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "490ec50aecb2245af1042e7276caebc187737ef2", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 1a7efd152..aebfbfa65 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -167,7 +167,7 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should Log callback event\")\n+    @DisplayName(\"Should Not Log callback event\")\n     public void shouldNotLogCallbackEvent() throws Exception {\n         List<String> ccdCallbackLogControl = new ArrayList<String>();\n         ccdCallbackLogControl.add(\"Notest-callback\");\n"}}, {"oid": "490ec50aecb2245af1042e7276caebc187737ef2", "url": "https://github.com/hmcts/ccd-data-store-api/commit/490ec50aecb2245af1042e7276caebc187737ef2", "message": "add Negative Junit for callback logs", "committedDate": "2020-11-06T13:41:40Z", "type": "commit"}, {"oid": "c12ddb56d0b3e41ca114a2e366632e6b405dea9f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c12ddb56d0b3e41ca114a2e366632e6b405dea9f", "message": "refactored callbacklogs method and added multiple test method", "committedDate": "2020-11-06T16:45:54Z", "type": "commit"}, {"oid": "551a92e95f5181ec599d9e7b8c894c6de2764482", "url": "https://github.com/hmcts/ccd-data-store-api/commit/551a92e95f5181ec599d9e7b8c894c6de2764482", "message": "added comment for the callback env variable", "committedDate": "2020-11-06T16:55:06Z", "type": "commit"}, {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b63179f6a045ac742050f33f42cf46786acc88e5", "message": "fixed checkstyle errors", "committedDate": "2020-11-06T17:15:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2MDY5Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519660697", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.info(\"The callback {} response received: {}\", url, responseEntity);\n          \n          \n            \n                            LOG.info(\"Callback {} - response received: {}\", url, responseEntity);", "author": "mario-paniccia", "createdAt": "2020-11-09T09:23:20Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);\n+            }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"The callback {} response received: {}\", url, responseEntity);", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1OTcxMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519759710", "bodyText": "done", "author": "henrykcgi", "createdAt": "2020-11-09T12:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2MDY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 862586f5c..1c4e8511b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -139,7 +141,7 @@ public class CallbackService {\n             }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n             if (logCallbackDetails(url)) {\n-                LOG.info(\"The callback {} response received: {}\", url, responseEntity);\n+                LOG.info(\"Callback {} response received: {}\", url, responseEntity);\n             }\n             httpStatus = responseEntity.getStatusCodeValue();\n             return Optional.of(responseEntity);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTQ4OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519669489", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "author": "mario-paniccia", "createdAt": "2020-11-09T09:36:41Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0ODk1NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519748955", "bodyText": "done", "author": "henrykcgi", "createdAt": "2020-11-09T11:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 0e9df5375..c31913971 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -162,9 +162,9 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should LogAll callback event\")\n+    @DisplayName(\"Should LogAll callbacks\")\n     public void shouldLogAllCallbackEvent() throws Exception {\n-        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        List<String> ccdCallbackLogControl = new ArrayList();\n         ccdCallbackLogControl.add(\"*\");\n         doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n         callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTYzMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519669632", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "author": "mario-paniccia", "createdAt": "2020-11-09T09:36:54Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1OTg5Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519759893", "bodyText": "done", "author": "henrykcgi", "createdAt": "2020-11-09T12:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNTk5Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r521215997", "bodyText": "it doesn't look like @henrykcgi", "author": "mario-paniccia", "createdAt": "2020-11-11T09:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 0e9df5375..c31913971 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -162,9 +162,9 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should LogAll callback event\")\n+    @DisplayName(\"Should LogAll callbacks\")\n     public void shouldLogAllCallbackEvent() throws Exception {\n-        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        List<String> ccdCallbackLogControl = new ArrayList();\n         ccdCallbackLogControl.add(\"*\");\n         doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n         callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTc1MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519669750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "author": "mario-paniccia", "createdAt": "2020-11-09T09:37:04Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NDk3NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519764974", "bodyText": "done", "author": "henrykcgi", "createdAt": "2020-11-09T12:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 0e9df5375..c31913971 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -162,9 +162,9 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should LogAll callback event\")\n+    @DisplayName(\"Should LogAll callbacks\")\n     public void shouldLogAllCallbackEvent() throws Exception {\n-        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        List<String> ccdCallbackLogControl = new ArrayList();\n         ccdCallbackLogControl.add(\"*\");\n         doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n         callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTkwMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519669900", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "author": "mario-paniccia", "createdAt": "2020-11-09T09:37:15Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1NzAyOQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519757029", "bodyText": "done", "author": "henrykcgi", "createdAt": "2020-11-09T12:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 0e9df5375..c31913971 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -162,9 +162,9 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should LogAll callback event\")\n+    @DisplayName(\"Should LogAll callbacks\")\n     public void shouldLogAllCallbackEvent() throws Exception {\n-        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        List<String> ccdCallbackLogControl = new ArrayList();\n         ccdCallbackLogControl.add(\"*\");\n         doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n         callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MDAxMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519670010", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "author": "mario-paniccia", "createdAt": "2020-11-09T09:37:25Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(0,logsList.size());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event when empty\")\n+    public void shouldNotLogCallbackEventEmpty() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNjY3Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r521216677", "bodyText": "how come this is resolved @henrykcgi but the change hasn't been done?", "author": "mario-paniccia", "createdAt": "2020-11-11T09:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MDAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 0e9df5375..c31913971 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -162,9 +162,9 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should LogAll callback event\")\n+    @DisplayName(\"Should LogAll callbacks\")\n     public void shouldLogAllCallbackEvent() throws Exception {\n-        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        List<String> ccdCallbackLogControl = new ArrayList();\n         ccdCallbackLogControl.add(\"*\");\n         doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n         callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MzU1NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519673554", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @DisplayName(\"Should Log callback test multiple event\")\n          \n          \n            \n                @DisplayName(\"Should Log callback test multiple callbacks\")", "author": "mario-paniccia", "createdAt": "2020-11-09T09:43:00Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MDA5MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519760090", "bodyText": "done", "author": "henrykcgi", "createdAt": "2020-11-09T12:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MzU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 0e9df5375..c31913971 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -162,9 +162,9 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should LogAll callback event\")\n+    @DisplayName(\"Should LogAll callbacks\")\n     public void shouldLogAllCallbackEvent() throws Exception {\n-        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        List<String> ccdCallbackLogControl = new ArrayList();\n         ccdCallbackLogControl.add(\"*\");\n         doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n         callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NDA5Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519674092", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @DisplayName(\"Should Log callback test event\")\n          \n          \n            \n                @DisplayName(\"Should Log callback test single callback\")", "author": "mario-paniccia", "createdAt": "2020-11-09T09:43:58Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1ODY0NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519758644", "bodyText": "done", "author": "henrykcgi", "createdAt": "2020-11-09T12:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NDA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\nindex 0e9df5375..c31913971 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java\n\n@@ -162,9 +162,9 @@ class CallbackServiceTest {\n     }\n \n     @Test\n-    @DisplayName(\"Should LogAll callback event\")\n+    @DisplayName(\"Should LogAll callbacks\")\n     public void shouldLogAllCallbackEvent() throws Exception {\n-        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        List<String> ccdCallbackLogControl = new ArrayList();\n         ccdCallbackLogControl.add(\"*\");\n         doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n         callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5NjI3Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519696276", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String STAR_STR = \"*\";\n          \n          \n            \n                private static final String WILDCARD = \"*\";", "author": "danlysiak", "createdAt": "2020-11-09T10:17:34Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -37,17 +39,21 @@\n @Service\n public class CallbackService {\n     private static final Logger LOG = LoggerFactory.getLogger(CallbackService.class);\n+    private static final String STAR_STR = \"*\";", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MTE0OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519761149", "bodyText": "Done", "author": "henrykcgi", "createdAt": "2020-11-09T12:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5NjI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 862586f5c..1c4e8511b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -39,7 +41,7 @@ import static org.springframework.util.CollectionUtils.isEmpty;\n @Service\n public class CallbackService {\n     private static final Logger LOG = LoggerFactory.getLogger(CallbackService.class);\n-    private static final String STAR_STR = \"*\";\n+    private static final String WILDCARD = \"*\";\n \n     private final SecurityUtils securityUtils;\n     private final RestTemplate restTemplate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMDQyMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519700421", "bodyText": "Query: Just checking - does logging requestEntity itself actually log what we need? (Sorry I can't tell from tests, assume it's OK?)", "author": "danlysiak", "createdAt": "2020-11-09T10:23:56Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjI1Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519762257", "bodyText": "Yes of course. the code has been modified for that effect.", "author": "henrykcgi", "createdAt": "2020-11-09T12:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMDQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 862586f5c..1c4e8511b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -139,7 +141,7 @@ public class CallbackService {\n             }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n             if (logCallbackDetails(url)) {\n-                LOG.info(\"The callback {} response received: {}\", url, responseEntity);\n+                LOG.info(\"Callback {} response received: {}\", url, responseEntity);\n             }\n             httpStatus = responseEntity.getStatusCodeValue();\n             return Optional.of(responseEntity);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMDY4Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519700683", "bodyText": "Same query as above - does logging responseEntity itself actually log what we need?", "author": "danlysiak", "createdAt": "2020-11-09T10:24:20Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);\n+            }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"The callback {} response received: {}\", url, responseEntity);", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NTI4Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519765283", "bodyText": "yes it does", "author": "henrykcgi", "createdAt": "2020-11-09T12:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMDY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 862586f5c..1c4e8511b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -139,7 +141,7 @@ public class CallbackService {\n             }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n             if (logCallbackDetails(url)) {\n-                LOG.info(\"The callback {} response received: {}\", url, responseEntity);\n+                LOG.info(\"Callback {} response received: {}\", url, responseEntity);\n             }\n             httpStatus = responseEntity.getStatusCodeValue();\n             return Optional.of(responseEntity);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMzk3Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519703972", "bodyText": "Just return this instead of initialising the boolean, setting in here and then returning..", "author": "danlysiak", "createdAt": "2020-11-09T10:29:45Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -155,4 +166,14 @@ public void validateCallbackErrorsAndWarnings(final CallbackResponse callbackRes\n                 .withWarnings(callbackResponse.getWarnings());\n         }\n     }\n+\n+    private boolean logCallbackDetails(final String url) {\n+        boolean logCallBack = false;\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        if (ccdCallbackLogControl.size() > 0 && (STAR_STR.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwOTQwMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519709403", "bodyText": "Could maybe be simplified slightly too?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (ccdCallbackLogControl.size() > 0 && (STAR_STR.equals(ccdCallbackLogControl.get(0))\n          \n          \n            \n                        || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n          \n          \n            \n                    return ccdCallbackLogControl.contains(WILDCARD) || ccdCallbackLogControl.stream().anyMatch(url::contains);", "author": "danlysiak", "createdAt": "2020-11-09T10:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMzk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MzExNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519763114", "bodyText": "No. Not really. We would like to have the strict control definition of the wild card.", "author": "henrykcgi", "createdAt": "2020-11-09T12:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMzk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\nindex 862586f5c..1c4e8511b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java\n\n@@ -170,8 +172,9 @@ public class CallbackService {\n     private boolean logCallbackDetails(final String url) {\n         boolean logCallBack = false;\n         List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n-        if (ccdCallbackLogControl.size() > 0 && (STAR_STR.equals(ccdCallbackLogControl.get(0))\n-            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n+        if (ccdCallbackLogControl.size() > 0 && (WILDCARD.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().filter(Objects::nonNull).filter(Predicate.not(String::isEmpty))\n+            .anyMatch(url::contains))) {\n             logCallBack = true;\n         }\n         return logCallBack;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNDA4OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519734089", "bodyText": "is this now still needed? maybe a leftover?", "author": "mario-paniccia", "createdAt": "2020-11-09T11:20:29Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceWireMockTest.java", "diffHunk": "@@ -290,7 +290,7 @@ public void shouldThrowCallbackException_whenSendInvalidUrlGetGenericBody() {\n \n         // Builds a new callback service to avoid wiremock exception to get in the way\n         final CallbackService underTest = new CallbackService(Mockito.mock(SecurityUtils.class), restTemplate,\n-            Mockito.mock(AppInsights.class));\n+            Mockito.mock(ApplicationParams.class), Mockito.mock(AppInsights.class));", "originalCommit": "b63179f6a045ac742050f33f42cf46786acc88e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NDU0Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519764547", "bodyText": "It is needed.", "author": "henrykcgi", "createdAt": "2020-11-09T12:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNDA4OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "url": "https://github.com/hmcts/ccd-data-store-api/commit/3df5098cba369b7bf182b4dfcc601bbf8406c8a3", "message": "addessed the comments about junit tests", "committedDate": "2020-11-09T13:11:19Z", "type": "commit"}, {"oid": "cfdd5bb015f9f12ca5154f6ea1d946c3797ecbb9", "url": "https://github.com/hmcts/ccd-data-store-api/commit/cfdd5bb015f9f12ca5154f6ea1d946c3797ecbb9", "message": "fixed failing junit tests", "committedDate": "2020-11-09T14:00:22Z", "type": "commit"}, {"oid": "712ba349c91f72487f3b08cdc1c053d1c789a142", "url": "https://github.com/hmcts/ccd-data-store-api/commit/712ba349c91f72487f3b08cdc1c053d1c789a142", "message": "change the defstore url to get the pr to green", "committedDate": "2020-11-09T14:51:43Z", "type": "commit"}, {"oid": "8ebc44bb452184e67fb29b42b0ae9e9715544e29", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8ebc44bb452184e67fb29b42b0ae9e9715544e29", "message": "change the defstore url to get the pr to green", "committedDate": "2020-11-09T16:05:55Z", "type": "commit"}, {"oid": "73a93ee80f57c00f28763a77e38e960dcd377423", "url": "https://github.com/hmcts/ccd-data-store-api/commit/73a93ee80f57c00f28763a77e38e960dcd377423", "message": "change the defstore url to get the pr to green", "committedDate": "2020-11-09T16:59:00Z", "type": "commit"}, {"oid": "28e269db74c5093a8bc4446922152ee2902f0463", "url": "https://github.com/hmcts/ccd-data-store-api/commit/28e269db74c5093a8bc4446922152ee2902f0463", "message": "change the defstore url to get the pr to green", "committedDate": "2020-11-09T17:29:17Z", "type": "commit"}, {"oid": "d0705a44b3de299743c1d9b6fb22faf808c3aebc", "url": "https://github.com/hmcts/ccd-data-store-api/commit/d0705a44b3de299743c1d9b6fb22faf808c3aebc", "message": "change the defstore url to get the pr to green", "committedDate": "2020-11-09T19:27:51Z", "type": "commit"}, {"oid": "0e7e9cb770c5786095760d239c0452c5979e116d", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0e7e9cb770c5786095760d239c0452c5979e116d", "message": "change the defstore url to get the pr to green", "committedDate": "2020-11-09T21:30:38Z", "type": "commit"}, {"oid": "4f0536cec805aaadb90fed28e25bb24d6be435e5", "url": "https://github.com/hmcts/ccd-data-store-api/commit/4f0536cec805aaadb90fed28e25bb24d6be435e5", "message": "change the defstore url to get the pr to green", "committedDate": "2020-11-09T22:09:57Z", "type": "commit"}, {"oid": "e0c9b2942a1f1c4734bb255a0c1335dfb1db3aee", "url": "https://github.com/hmcts/ccd-data-store-api/commit/e0c9b2942a1f1c4734bb255a0c1335dfb1db3aee", "message": "change the defstore url to get the pr to green", "committedDate": "2020-11-10T09:20:06Z", "type": "commit"}, {"oid": "bee249dc7c671ebcf25ca352872c058470eaeb66", "url": "https://github.com/hmcts/ccd-data-store-api/commit/bee249dc7c671ebcf25ca352872c058470eaeb66", "message": "Merge branch 'master' into RDM-10013", "committedDate": "2020-11-10T10:07:48Z", "type": "commit"}, {"oid": "feeddabc8b6960ffc8bd953d8353cf853d885e72", "url": "https://github.com/hmcts/ccd-data-store-api/commit/feeddabc8b6960ffc8bd953d8353cf853d885e72", "message": "Bumping chart version", "committedDate": "2020-11-10T10:11:17Z", "type": "commit"}, {"oid": "ba7d754448f5aea14961fedda6b09da1930e9f11", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ba7d754448f5aea14961fedda6b09da1930e9f11", "message": "elastic search disabled", "committedDate": "2020-11-10T10:14:31Z", "type": "commit"}, {"oid": "68c24f933afbb39859d742f4cb9b976ed613e84c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/68c24f933afbb39859d742f4cb9b976ed613e84c", "message": "elastic search enabled", "committedDate": "2020-11-10T10:27:30Z", "type": "commit"}, {"oid": "c7b2ceb9a1390cde006250a722a9a02d77b0c10b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c7b2ceb9a1390cde006250a722a9a02d77b0c10b", "message": "removed unused import", "committedDate": "2020-11-10T10:57:16Z", "type": "commit"}, {"oid": "58fd0435dac07882c0f82f21cefdf94adc33bdd9", "url": "https://github.com/hmcts/ccd-data-store-api/commit/58fd0435dac07882c0f82f21cefdf94adc33bdd9", "message": "supressed the CVE-2020-7020", "committedDate": "2020-11-10T11:08:08Z", "type": "commit"}, {"oid": "3e7cf4fc08f3de33d5cdc9fbcbd866fa02fd65ce", "url": "https://github.com/hmcts/ccd-data-store-api/commit/3e7cf4fc08f3de33d5cdc9fbcbd866fa02fd65ce", "message": "rdm-10013 changed the def store to develop", "committedDate": "2020-11-10T12:15:33Z", "type": "commit"}, {"oid": "3461ea002f4c94929169effe326baf2eb364d16b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/3461ea002f4c94929169effe326baf2eb364d16b", "message": "Update values.preview.template.yaml", "committedDate": "2020-11-10T13:31:23Z", "type": "commit"}, {"oid": "98959a3e8b67a99fce3c620fac6231e7d141af5c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/98959a3e8b67a99fce3c620fac6231e7d141af5c", "message": "matched defstore previow template value to the pr", "committedDate": "2020-11-10T13:43:22Z", "type": "commit"}, {"oid": "f57492bade5ad90e458ab2de26fd092f644f0619", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f57492bade5ad90e458ab2de26fd092f644f0619", "message": "Merge remote-tracking branch 'origin/RDM-10013' into RDM-10013", "committedDate": "2020-11-10T13:44:24Z", "type": "commit"}, {"oid": "e273bac2d0c6a2765e3953adaa4760808075d2cf", "url": "https://github.com/hmcts/ccd-data-store-api/commit/e273bac2d0c6a2765e3953adaa4760808075d2cf", "message": "Update Jenkinsfile_CNP", "committedDate": "2020-11-10T14:26:46Z", "type": "commit"}, {"oid": "8281daf5f70de1e503f2c174969f88de4e8b38ef", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8281daf5f70de1e503f2c174969f88de4e8b38ef", "message": "Update Jenkinsfile_CNP", "committedDate": "2020-11-10T14:28:29Z", "type": "commit"}, {"oid": "53c77ea14e465d1a11f2488b64fa1d2a25e592f5", "url": "https://github.com/hmcts/ccd-data-store-api/commit/53c77ea14e465d1a11f2488b64fa1d2a25e592f5", "message": "Update Jenkinsfile_CNP", "committedDate": "2020-11-10T14:29:15Z", "type": "commit"}, {"oid": "2003828b158b6c32b5dc7e98638e1905b10f9ad1", "url": "https://github.com/hmcts/ccd-data-store-api/commit/2003828b158b6c32b5dc7e98638e1905b10f9ad1", "message": "disable ES tests", "committedDate": "2020-11-10T14:29:46Z", "type": "commit"}, {"oid": "09e57ecbc2a4a36812629a51df30003a8580fec7", "url": "https://github.com/hmcts/ccd-data-store-api/commit/09e57ecbc2a4a36812629a51df30003a8580fec7", "message": "Merge branch 'RDM-10013' of github.com:hmcts/ccd-data-store-api into RDM-10013", "committedDate": "2020-11-10T14:29:56Z", "type": "commit"}, {"oid": "f5472616105f558ec4d83aafa23ccffd2000fddf", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f5472616105f558ec4d83aafa23ccffd2000fddf", "message": "disabled ES flag", "committedDate": "2020-11-10T14:33:43Z", "type": "commit"}, {"oid": "3db7be55d18f78954705ded5925ac67c0240d673", "url": "https://github.com/hmcts/ccd-data-store-api/commit/3db7be55d18f78954705ded5925ac67c0240d673", "message": "Merge branch 'RDM-10013' of https://github.com/hmcts/ccd-data-store-api into RDM-10013", "committedDate": "2020-11-10T14:35:00Z", "type": "commit"}, {"oid": "785b27a22371a746cfbd23632285c85411ae73cb", "url": "https://github.com/hmcts/ccd-data-store-api/commit/785b27a22371a746cfbd23632285c85411ae73cb", "message": "fix develop pr", "committedDate": "2020-11-10T15:10:18Z", "type": "commit"}, {"oid": "b3559970f3e827e0e569376a9282c0c807c7f009", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b3559970f3e827e0e569376a9282c0c807c7f009", "message": "Merge branch 'RDM-10013' of github.com:hmcts/ccd-data-store-api into RDM-10013", "committedDate": "2020-11-10T15:10:30Z", "type": "commit"}, {"oid": "ed5cb11f818d751b3d2ec11ce62e91a23f14be20", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ed5cb11f818d751b3d2ec11ce62e91a23f14be20", "message": "update to new user-profile-api develop", "committedDate": "2020-11-10T15:46:49Z", "type": "commit"}, {"oid": "dbedeede587ea6efda8e7346a7fb0aae4294666e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/dbedeede587ea6efda8e7346a7fb0aae4294666e", "message": "Merge branch 'master' into RDM-10013", "committedDate": "2020-11-12T09:30:57Z", "type": "commit"}, {"oid": "ffde08b016f0ed98e688cf5c7f02535f96585ef0", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ffde08b016f0ed98e688cf5c7f02535f96585ef0", "message": "Merge branch 'master' into RDM-10013", "committedDate": "2020-11-23T11:50:17Z", "type": "commit"}, {"oid": "ee66a23700451ed26b5ad9ce6d991e67b50ff165", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ee66a23700451ed26b5ad9ce6d991e67b50ff165", "message": "Bumping chart version", "committedDate": "2020-11-23T11:57:06Z", "type": "commit"}, {"oid": "f9f01715cc0d58b0450b1612408c21b78ec4fc08", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f9f01715cc0d58b0450b1612408c21b78ec4fc08", "message": "Update values.preview.template.yaml", "committedDate": "2020-11-23T16:07:36Z", "type": "commit"}, {"oid": "7d9a4721cc12609a2a7eaa8453dcc2cad2a53085", "url": "https://github.com/hmcts/ccd-data-store-api/commit/7d9a4721cc12609a2a7eaa8453dcc2cad2a53085", "message": "Update Jenkinsfile_CNP", "committedDate": "2020-11-23T16:49:53Z", "type": "commit"}]}