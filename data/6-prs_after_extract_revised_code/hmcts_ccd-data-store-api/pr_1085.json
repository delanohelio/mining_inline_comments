{"pr_number": 1085, "pr_title": "RDM-9266: Introduce ChangeOrganisationRequest Complex Field Standard Base Type", "pr_createdAt": "2020-08-26T12:43:49Z", "pr_url": "https://github.com/hmcts/ccd-data-store-api/pull/1085", "timeline": [{"oid": "4808e06611a3112601b4c8945eac4cfd71dff06c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/4808e06611a3112601b4c8945eac4cfd71dff06c", "message": "RDM-9266: Introduce ChangeOrganisationRequest Complex Field Standard Base Type (DATASTORE)", "committedDate": "2020-08-26T12:42:18Z", "type": "commit"}, {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8", "message": "RDM-9266: Checkstyle issues fixed", "committedDate": "2020-09-02T13:26:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMTY2NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482101664", "bodyText": "Should be ApprovalStatus. Otherwise I think the data check will not happen.", "author": "rafalkalita", "createdAt": "2020-09-02T14:13:15Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);", "originalCommit": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MjU1MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r483072550", "bodyText": "this is intended to check other fields not for \"ApprovalStatus\", changed the method name to include ForOtherFieldId", "author": "kiran-yenigala-hmcts", "createdAt": "2020-09-03T15:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMTY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "3eb78605b6855d959907620343a15330c7e061b3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\nindex f2502b154..abc671893 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\n\n@@ -83,7 +83,7 @@ class ApprovalStatusValidatorTest {\n     }\n \n     @Test\n-    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+    void shouldReturnEmptyErrorListValidateForEmptyDataForOtherFieldId() {\n         final JsonNode data = NODE_FACTORY.textNode(\"\");\n         List<ValidationResult> validationResults =\n             this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMjM4Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482102382", "bodyText": "Same like above. Should be ApprovalStatus.", "author": "rafalkalita", "createdAt": "2020-09-02T14:14:13Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);", "originalCommit": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MjY1Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r483072653", "bodyText": "this is intended to check other fields not for \"ApprovalStatus\", changed the method name to include ForOtherFieldId", "author": "kiran-yenigala-hmcts", "createdAt": "2020-09-03T15:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMjM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3eb78605b6855d959907620343a15330c7e061b3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\nindex f2502b154..abc671893 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\n\n@@ -83,7 +83,7 @@ class ApprovalStatusValidatorTest {\n     }\n \n     @Test\n-    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+    void shouldReturnEmptyErrorListValidateForEmptyDataForOtherFieldId() {\n         final JsonNode data = NODE_FACTORY.textNode(\"\");\n         List<ValidationResult> validationResults =\n             this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMTM3NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482111374", "bodyText": "There is a class that test all validations together based on definitions.  CaseDataValidatorTest . May be you can add your new Type and its validator there.  It is just a recommendation . Not mandatory.", "author": "Thor-tech-of-metal", "createdAt": "2020-09-02T14:26:02Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void getType() {\n+        assertEquals(validator.getType(), BaseType.get(\"Number\"), \"Type is incorrect\");\n+    }\n+}", "originalCommit": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDUxNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r483074517", "bodyText": "we are not checking data here.. this is check checking the method return type, which is static in this case", "author": "kiran-yenigala-hmcts", "createdAt": "2020-09-03T15:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMTM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDUzMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r483074530", "bodyText": "we are not checking data here.. this is check checking the method return type, which is static in this case", "author": "kiran-yenigala-hmcts", "createdAt": "2020-09-03T15:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "3eb78605b6855d959907620343a15330c7e061b3", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\nindex f2502b154..abc671893 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java\n\n@@ -83,7 +83,7 @@ class ApprovalStatusValidatorTest {\n     }\n \n     @Test\n-    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+    void shouldReturnEmptyErrorListValidateForEmptyDataForOtherFieldId() {\n         final JsonNode data = NODE_FACTORY.textNode(\"\");\n         List<ValidationResult> validationResults =\n             this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n"}}, {"oid": "3eb78605b6855d959907620343a15330c7e061b3", "url": "https://github.com/hmcts/ccd-data-store-api/commit/3eb78605b6855d959907620343a15330c7e061b3", "message": "RDM-9266: Code review comments addressed", "committedDate": "2020-09-03T15:40:39Z", "type": "commit"}, {"oid": "7f9e9519ffe5f86f6a9d42edd2ba35cb97843cd1", "url": "https://github.com/hmcts/ccd-data-store-api/commit/7f9e9519ffe5f86f6a9d42edd2ba35cb97843cd1", "message": "RDM-9266: CVE issues CVE-2020-10517, CVE-2020-10518 fixed", "committedDate": "2020-09-04T08:29:50Z", "type": "commit"}, {"oid": "84e882237b0b3dbe56b2af2ef701b19777240e79", "url": "https://github.com/hmcts/ccd-data-store-api/commit/84e882237b0b3dbe56b2af2ef701b19777240e79", "message": "RDM-9266: checkstyle issues addressed", "committedDate": "2020-09-04T08:45:48Z", "type": "commit"}]}