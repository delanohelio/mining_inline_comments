{"pr_number": 745, "pr_title": "RDM-6757 Populate display_context_parameter for collections using case role", "pr_createdAt": "2020-01-14T16:46:59Z", "pr_url": "https://github.com/hmcts/ccd-data-store-api/pull/745", "timeline": [{"oid": "8fcba3eae1d54f5575be799ea2a8f2aa978b7b49", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8fcba3eae1d54f5575be799ea2a8f2aa978b7b49", "message": "RDM-6521 include CREATOR case role in the event trigger endpoints (#619)", "committedDate": "2019-11-21T11:33:17Z", "type": "commit"}, {"oid": "1e0ec14a4929211ee7af44fda8349c0d133f9ab7", "url": "https://github.com/hmcts/ccd-data-store-api/commit/1e0ec14a4929211ee7af44fda8349c0d133f9ab7", "message": "Respondent journey rdm 6520 (#630)\n\n* RDM-6520: Validate the CaseRoles on the case submission\r\n\r\n* RDM-6520: Validate the CaseRoles on the case submission\r\n\r\n* RDM-6520: Validate the CaseRoles on the case submission\r\n\r\n* RDM-6521 include CREATOR case role in the event trigger endpoints (#619)\r\n\r\n* RDM-6520: Validate the CaseRoles on the case submission\r\n\r\n* RDM-6520: Validate the CaseRoles on the case submission\r\n\r\n* RDM-6520: Validate the CaseRoles on the case submission\r\n\r\n* RDM-6520: Validate the CaseRoles on the case submission\r\nReusing the getCaseCreationRoles\r\n\r\n* RDM-6520: Validate the CaseRoles on the case submission", "committedDate": "2019-11-28T09:57:09Z", "type": "commit"}, {"oid": "ab727a00c5205c2b5cc0ffd2a026e51952726986", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ab727a00c5205c2b5cc0ffd2a026e51952726986", "message": "Rdm 6758 (#681) Case role on event history \n\n* RDM-6758: When using case role case history doesn't show events\r\n\r\n* RDM-6758: When using case role case history doesn't show events\r\n\r\n* RDM-6758: When using case role case history doesn't show events\r\n\r\n* RDM-6758: When using case role case history doesn't show events\r\n\r\n* RDM-6758: When using case role case history doesn't show events\r\n\r\n* RDM-6758: When using case role case history doesn't show events\r\n\r\n* RDM-6758: When using case role case history doesn't show events", "committedDate": "2019-12-17T09:39:45Z", "type": "commit"}, {"oid": "e578a2fa80ba4bea7fb57a836fa470939122a41b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/e578a2fa80ba4bea7fb57a836fa470939122a41b", "message": "RDM-6757 Update displayContextParameter for collections based on ACLs", "committedDate": "2020-01-14T16:45:39Z", "type": "commit"}, {"oid": "8cd69219e2f9cf5881f5a16778e844c6f0db0eb8", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8cd69219e2f9cf5881f5a16778e844c6f0db0eb8", "message": "RDM-7150: Fix tomcat security issues on ccd-data-store and ccd-definition-store (#727)\n\n(cherry picked from commit 1ee8ab8bab39b8e3e99170bcff390c9b532c4720)", "committedDate": "2020-01-14T16:59:30Z", "type": "commit"}, {"oid": "b9863324ba94fa9f56b2a29860ace7d1c8058943", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b9863324ba94fa9f56b2a29860ace7d1c8058943", "message": "RDM-6757 Fix tests", "committedDate": "2020-01-15T16:42:55Z", "type": "commit"}, {"oid": "eef56c3739ed6cdb73030f10735befc208501ac3", "url": "https://github.com/hmcts/ccd-data-store-api/commit/eef56c3739ed6cdb73030f10735befc208501ac3", "message": "RDM-6757 Extracted displayContextParameter creation to a separate class.", "committedDate": "2020-01-16T16:14:05Z", "type": "commit"}, {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a461c7b5920b0cf61c58786cd4ab40260ade7db3", "message": "RDM-6757 Unused import", "committedDate": "2020-01-16T16:30:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTg0Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371155846", "bodyText": "can you add a scenario:\n#COLLECTION(\"other\")\", COLLECTION, asList(\"allowInsert\")\nand verify that the end result is\n#COLLECTION(\"other, allowInsert\" )\nwe don't want \"other\" to be wiped out, because it could be some other display option for collections we introduce in the future", "author": "mario-paniccia", "createdAt": "2020-01-27T10:16:00Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),", "originalCommit": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NjUzOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371156538", "bodyText": "can you add a scenario for:\n\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\", \"allowInsert\")", "author": "mario-paniccia", "createdAt": "2020-01-27T10:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM2MDM3Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371360372", "bodyText": "ok, changing the behaviour to preserve other properties", "author": "rafalkalita", "createdAt": "2020-01-27T16:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0OTc2NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371749765", "bodyText": "both done \ud83d\udc4d", "author": "rafalkalita", "createdAt": "2020-01-28T11:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\nindex 990052b47..a59152162 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\n\n@@ -7,24 +7,22 @@ import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertAll;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateCollectionDisplayContextParameter;\n \n class DisplayContextParameterUtilTest {\n \n     @Test\n-    @DisplayName(\"should create parameter)\")\n-    void shouldCreateParameter() {\n+    @DisplayName(\"should create collection parameter)\")\n+    void shouldCreateCollectionParameter() {\n         assertAll(\n-            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\", \"allowDelete\")),\n                 is(\"#COLLECTION(allowDelete,allowInsert)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowDelete\")),\n                 is(\"#COLLECTION(allowDelete)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n-                is(\"#TABLE(postcode)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n-                is(\"#TABLE(AddressLine1,postcode)\"))\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"\")),\n+                is(\"#COLLECTION()\"))\n                  );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2Mzk0MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371163941", "bodyText": "not sure this is correct. Data store should not interfere or override any TABLE option set on the definition. There's no reason to do that. I think we should restrict Data Store action only on the COLLECTION option and ignore all the rest", "author": "mario-paniccia", "createdAt": "2020-01-27T10:32:13Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(param1,param2)\", TABLE, asList(\"postcode\")),", "originalCommit": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\nindex 990052b47..a59152162 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\n\n@@ -7,24 +7,22 @@ import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertAll;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateCollectionDisplayContextParameter;\n \n class DisplayContextParameterUtilTest {\n \n     @Test\n-    @DisplayName(\"should create parameter)\")\n-    void shouldCreateParameter() {\n+    @DisplayName(\"should create collection parameter)\")\n+    void shouldCreateCollectionParameter() {\n         assertAll(\n-            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\", \"allowDelete\")),\n                 is(\"#COLLECTION(allowDelete,allowInsert)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowDelete\")),\n                 is(\"#COLLECTION(allowDelete)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n-                is(\"#TABLE(postcode)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n-                is(\"#TABLE(AddressLine1,postcode)\"))\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"\")),\n+                is(\"#COLLECTION()\"))\n                  );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2ODgzNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371168834", "bodyText": "mmm not sure about this but it seems to me these tests are describing a feature we don't provide. We only allow overriding of \"allowDelete, allowInsert\" of COLLECTION, so adding tests for all the rest seems a bit misleading to me. But we can leave them", "author": "mario-paniccia", "createdAt": "2020-01-27T10:43:25Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(param1,param2)\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter and produce multiple result)\")\n+    void shouldUpdateParameterMultiple() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE()\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert),#TABLE()\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(),#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete),#TABLE()\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(),#COLLECTION(allowInsert,allowDelete)\", TABLE, asList(\"postcode\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert),#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(postcode),#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"other\")),\n+                is(\"#COLLECTION(other),#TABLE(postcode)\"))\n+                 );", "originalCommit": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\nindex 990052b47..a59152162 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\n\n@@ -7,24 +7,22 @@ import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertAll;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n-import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateCollectionDisplayContextParameter;\n \n class DisplayContextParameterUtilTest {\n \n     @Test\n-    @DisplayName(\"should create parameter)\")\n-    void shouldCreateParameter() {\n+    @DisplayName(\"should create collection parameter)\")\n+    void shouldCreateCollectionParameter() {\n         assertAll(\n-            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\", \"allowDelete\")),\n                 is(\"#COLLECTION(allowDelete,allowInsert)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowDelete\")),\n                 is(\"#COLLECTION(allowDelete)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n-                is(\"#TABLE(postcode)\")),\n-            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n-                is(\"#TABLE(AddressLine1,postcode)\"))\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"\")),\n+                is(\"#COLLECTION()\"))\n                  );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTU0OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371169548", "bodyText": "don't think we need to define anything else other than COLLECTION. That's all Data Store should concern with for now", "author": "mario-paniccia", "createdAt": "2020-01-27T10:45:07Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+public class DisplayContextParameterUtil {\n+    public enum Parameter {\n+        COLLECTION(\"#COLLECTION\"),\n+        TABLE(\"#TABLE\");", "originalCommit": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0OTU5Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371749592", "bodyText": "done \ud83d\udc4d", "author": "rafalkalita", "createdAt": "2020-01-28T11:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java b/src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java\nindex 9027361b2..4f61e9fa0 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java\n\n@@ -1,60 +1,74 @@\n package uk.gov.hmcts.ccd.domain.model.common;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.stream.Collectors;\n \n-import static java.util.stream.Collectors.joining;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_DELETE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_INSERT;\n \n public class DisplayContextParameterUtil {\n-    public enum Parameter {\n-        COLLECTION(\"#COLLECTION\"),\n-        TABLE(\"#TABLE\");\n \n-        private final String description;\n+    public static String COLLECTION = \"COLLECTION\";\n \n-        Parameter(String description) {\n-            this.description = description;\n-        }\n+    public static String updateCollectionDisplayContextParameter(final String currentDisplayContextParameter,\n+                                                                 final List<String> values) {\n+\n+        List<String> parameters;\n+        if (currentDisplayContextParameter != null) {\n+            String[] split = currentDisplayContextParameter.split(\"#\", -1);\n+            List<String> collect = removeEmptiesAndDropComa(split);\n \n-        public String getDescription() {\n-            return this.description;\n+            if (collect.stream().noneMatch(e -> e.contains(COLLECTION))) {\n+                collect.add(COLLECTION + \"()\");\n+            }\n+\n+            parameters = collect.stream()\n+                .map(e -> updateIfCollection(e, values))\n+                .map(e -> \"#\" + e)\n+                .collect(Collectors.toList());\n+        } else {\n+            parameters = new ArrayList<>(values);\n+            Collections.sort(parameters);\n+            return \"#\" + COLLECTION + \"(\" + String.join(\",\", parameters) + \")\";\n         }\n+\n+        return String.join(\",\", parameters);\n     }\n \n-    public static String updateDisplayContextParameter(String currentDisplayContextParameter,\n-                                                       Parameter parameter,\n-                                                       List<String> values) {\n-        Map<Parameter, List<String>> propertiesMap = new HashMap<>();\n+    private static List<String> removeEmptiesAndDropComa(String[] split) {\n+        return Arrays.stream(split)\n+                    .filter(e -> e.length() > 0)\n+                    .map(e -> e.endsWith(\",\") ? e.substring(0, e.length() - 1) : e)\n+                    .collect(Collectors.toList());\n+    }\n \n-        for (Parameter param : Parameter.values()) {\n-            if (currentDisplayContextParameter != null && currentDisplayContextParameter.contains(param.getDescription())) {\n-                propertiesMap.put(param, extractParameterValues(param, currentDisplayContextParameter));\n-            }\n-        }\n-        propertiesMap.put(parameter, values);\n-        propertiesMap.forEach((k, v) -> Collections.sort(v));\n+    private static String updateIfCollection(String parameter, List<String> values) {\n+        if (parameter.startsWith(COLLECTION)) {\n+            List<String> collectionParameterValues = extractCollectionParameterValues(parameter);\n+            List<String> collect = collectionParameterValues.stream()\n+                .filter(p -> !p.equals(ALLOW_INSERT.getOption()) && !p.equals(ALLOW_DELETE.getOption()))\n+                .collect(Collectors.toList());\n+            collect.addAll(values);\n+            Collections.sort(collect);\n \n-        return propertiesMap.keySet().stream()\n-            .map(strings -> strings.getDescription() + \"(\" + String.join(\",\", propertiesMap.get(strings)) + \")\")\n-            .sorted()\n-            .collect(joining(\",\"));\n+            return COLLECTION + \"(\" + String.join(\",\", collect) + \")\";\n+        }\n+        return parameter;\n     }\n \n-    private static List<String> extractParameterValues(Parameter param,\n-                                                       String displayContextParameter) {\n+    private static List<String> extractCollectionParameterValues(String displayContextParameter) {\n \n-        String prefix = param.getDescription() + \"(\";\n+        String prefix = COLLECTION + \"(\";\n         int start = displayContextParameter.indexOf(prefix);\n         String s1 = displayContextParameter.substring(start + prefix.length());\n         String s2 = s1.substring(0, s1.indexOf(\")\"));\n \n-        return Arrays.stream(s2.split(\",\"))\n+        return isBlank(s2) ? Collections.emptyList() : Arrays.stream(s2.split(\",\"))\n             .map(String::trim)\n-            .sorted()\n             .collect(Collectors.toList());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3MDY3Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371170672", "bodyText": "consider one of these alternative options:\n\nintroduce a method on CaseEventTrigger called getCollectionFields   (preferred)\ncaseEventTrigger.getCaseFields().stream().filter(caseViewField.isCollectionFieldType())....", "author": "mario-paniccia", "createdAt": "2020-01-27T10:47:35Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()", "originalCommit": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0OTQ1Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371749452", "bodyText": "Going for option 2, because introducing getCollectionFields is tricky. We have two methods, one with List and one with List. It is easier to do the filter manually.", "author": "rafalkalita", "createdAt": "2020-01-28T11:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3MDY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\nindex d327fe301..511c80a8b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\n\n@@ -279,17 +281,17 @@ public class AccessControlService {\n     private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n         List<String> collectionAccess = new ArrayList<>();\n         if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowInsert\");\n+            collectionAccess.add(ALLOW_INSERT.getOption());\n         }\n         if (hasAccessControlList(userRoles, CAN_DELETE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowDelete\");\n+            collectionAccess.add(ALLOW_DELETE.getOption());\n         }\n         if (hasAccessControlList(userRoles, CAN_UPDATE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowInsert\");\n-            collectionAccess.add(\"allowDelete\");\n+            collectionAccess.add(ALLOW_INSERT.getOption());\n+            collectionAccess.add(ALLOW_DELETE.getOption());\n         }\n-        return DisplayContextParameterUtil.updateDisplayContextParameter(field.getDisplayContextParameter(),\n-            DisplayContextParameterUtil.Parameter.COLLECTION, collectionAccess);\n+\n+        return DisplayContextParameterUtil.updateCollectionDisplayContextParameter(field.getDisplayContextParameter(), collectionAccess);\n     }\n \n     private void setChildrenAsReadOnlyIfNoAccess(final List<WizardPage> wizardPages, final String rootFieldId, final CaseField caseField, final Predicate<AccessControlList> access, final Set<String> userRoles, final CommonField caseViewField) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3MjM3OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371172378", "bodyText": "I would change this method to add to collectionAccess CAN_CREATE and CAN_DELETE rather than \"allowInsert\" and \"allowDelete\". It's then DisplayContextParameterUtil that converts  CAN_CREATE to \"allowInsert\"  and CAN_DELETE to \"allowDelete\". This way  \"allowInsert\"  and \"allowDelete\"  are nicely encapsulated inside DisplayContextParameterUtil", "author": "mario-paniccia", "createdAt": "2020-01-27T10:51:27Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()\n+            .forEach(caseViewField -> {\n+                if (caseViewField.isCollectionFieldType()) {\n+                    caseViewField.setDisplayContextParameter(getCollectionAccess(userRoles, caseViewField));\n+                }\n+\n+                setChildrenCollectionDisplayContextParameter(caseViewField.getFieldType().getChildren(), userRoles);\n+            });\n+        return caseEventTrigger;\n+    }\n+\n+    private void setChildrenCollectionDisplayContextParameter(final List<CaseField> caseFields,\n+                                                              final Set<String> userRoles) {\n+        caseFields.forEach(childField -> {\n+            if (childField.isCollectionFieldType()) {\n+                childField.setDisplayContextParameter(getCollectionAccess(userRoles, childField));\n+            }\n+\n+            setChildrenCollectionDisplayContextParameter(childField.getFieldType().getChildren(), userRoles);\n+        });\n+    }\n+\n+    private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n+        List<String> collectionAccess = new ArrayList<>();\n+        if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {\n+            collectionAccess.add(\"allowInsert\");\n+        }\n+        if (hasAccessControlList(userRoles, CAN_DELETE, field.getAccessControlLists())) {\n+            collectionAccess.add(\"allowDelete\");\n+        }\n+        if (hasAccessControlList(userRoles, CAN_UPDATE, field.getAccessControlLists())) {\n+            collectionAccess.add(\"allowInsert\");\n+            collectionAccess.add(\"allowDelete\");\n+        }\n+        return DisplayContextParameterUtil.updateDisplayContextParameter(field.getDisplayContextParameter(),\n+            DisplayContextParameterUtil.Parameter.COLLECTION, collectionAccess);\n+    }", "originalCommit": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\nindex d327fe301..511c80a8b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\n\n@@ -279,17 +281,17 @@ public class AccessControlService {\n     private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n         List<String> collectionAccess = new ArrayList<>();\n         if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowInsert\");\n+            collectionAccess.add(ALLOW_INSERT.getOption());\n         }\n         if (hasAccessControlList(userRoles, CAN_DELETE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowDelete\");\n+            collectionAccess.add(ALLOW_DELETE.getOption());\n         }\n         if (hasAccessControlList(userRoles, CAN_UPDATE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowInsert\");\n-            collectionAccess.add(\"allowDelete\");\n+            collectionAccess.add(ALLOW_INSERT.getOption());\n+            collectionAccess.add(ALLOW_DELETE.getOption());\n         }\n-        return DisplayContextParameterUtil.updateDisplayContextParameter(field.getDisplayContextParameter(),\n-            DisplayContextParameterUtil.Parameter.COLLECTION, collectionAccess);\n+\n+        return DisplayContextParameterUtil.updateCollectionDisplayContextParameter(field.getDisplayContextParameter(), collectionAccess);\n     }\n \n     private void setChildrenAsReadOnlyIfNoAccess(final List<WizardPage> wizardPages, final String rootFieldId, final CaseField caseField, final Predicate<AccessControlList> access, final Set<String> userRoles, final CommonField caseViewField) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NDg3NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371174875", "bodyText": "I would rename getCollectionAccess to generateDisplayContextParamer or similar because we are recalculating the whole displayContextParameter", "author": "mario-paniccia", "createdAt": "2020-01-27T10:57:17Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()\n+            .forEach(caseViewField -> {\n+                if (caseViewField.isCollectionFieldType()) {\n+                    caseViewField.setDisplayContextParameter(getCollectionAccess(userRoles, caseViewField));\n+                }\n+\n+                setChildrenCollectionDisplayContextParameter(caseViewField.getFieldType().getChildren(), userRoles);\n+            });\n+        return caseEventTrigger;\n+    }\n+\n+    private void setChildrenCollectionDisplayContextParameter(final List<CaseField> caseFields,\n+                                                              final Set<String> userRoles) {\n+        caseFields.forEach(childField -> {\n+            if (childField.isCollectionFieldType()) {\n+                childField.setDisplayContextParameter(getCollectionAccess(userRoles, childField));", "originalCommit": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\nindex d327fe301..511c80a8b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\n\n@@ -279,17 +281,17 @@ public class AccessControlService {\n     private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n         List<String> collectionAccess = new ArrayList<>();\n         if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowInsert\");\n+            collectionAccess.add(ALLOW_INSERT.getOption());\n         }\n         if (hasAccessControlList(userRoles, CAN_DELETE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowDelete\");\n+            collectionAccess.add(ALLOW_DELETE.getOption());\n         }\n         if (hasAccessControlList(userRoles, CAN_UPDATE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowInsert\");\n-            collectionAccess.add(\"allowDelete\");\n+            collectionAccess.add(ALLOW_INSERT.getOption());\n+            collectionAccess.add(ALLOW_DELETE.getOption());\n         }\n-        return DisplayContextParameterUtil.updateDisplayContextParameter(field.getDisplayContextParameter(),\n-            DisplayContextParameterUtil.Parameter.COLLECTION, collectionAccess);\n+\n+        return DisplayContextParameterUtil.updateCollectionDisplayContextParameter(field.getDisplayContextParameter(), collectionAccess);\n     }\n \n     private void setChildrenAsReadOnlyIfNoAccess(final List<WizardPage> wizardPages, final String rootFieldId, final CaseField caseField, final Predicate<AccessControlList> access, final Set<String> userRoles, final CommonField caseViewField) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NzM2Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371177366", "bodyText": "we need to be careful here. Strictly speaking this ticket should only have effect for case roles. But because userRoles also contains idam roles, when EUI implements the UI part of this ticket, it's possible the UI behaviour will change also for permissions set on Idam roles...\nso if we wanted to implement the ticket strictly, you should only consider the case roles, not the whole userRoles", "author": "mario-paniccia", "createdAt": "2020-01-27T11:03:09Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()\n+            .forEach(caseViewField -> {\n+                if (caseViewField.isCollectionFieldType()) {\n+                    caseViewField.setDisplayContextParameter(getCollectionAccess(userRoles, caseViewField));\n+                }\n+\n+                setChildrenCollectionDisplayContextParameter(caseViewField.getFieldType().getChildren(), userRoles);\n+            });\n+        return caseEventTrigger;\n+    }\n+\n+    private void setChildrenCollectionDisplayContextParameter(final List<CaseField> caseFields,\n+                                                              final Set<String> userRoles) {\n+        caseFields.forEach(childField -> {\n+            if (childField.isCollectionFieldType()) {\n+                childField.setDisplayContextParameter(getCollectionAccess(userRoles, childField));\n+            }\n+\n+            setChildrenCollectionDisplayContextParameter(childField.getFieldType().getChildren(), userRoles);\n+        });\n+    }\n+\n+    private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n+        List<String> collectionAccess = new ArrayList<>();\n+        if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {", "originalCommit": "a461c7b5920b0cf61c58786cd4ab40260ade7db3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MDE4Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371180183", "bodyText": "what I mean is this code adds COLLECTION(allowInsert) if there is an idam role with C permission, even if there's no case roles. We need to discuss about this being correct", "author": "mario-paniccia", "createdAt": "2020-01-27T11:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NzM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1MDA5MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371750091", "bodyText": "As discussed I will put a comment for ExUI this is for both Case and Idam roles", "author": "rafalkalita", "createdAt": "2020-01-28T11:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NzM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\nindex d327fe301..511c80a8b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java\n\n@@ -279,17 +281,17 @@ public class AccessControlService {\n     private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n         List<String> collectionAccess = new ArrayList<>();\n         if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowInsert\");\n+            collectionAccess.add(ALLOW_INSERT.getOption());\n         }\n         if (hasAccessControlList(userRoles, CAN_DELETE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowDelete\");\n+            collectionAccess.add(ALLOW_DELETE.getOption());\n         }\n         if (hasAccessControlList(userRoles, CAN_UPDATE, field.getAccessControlLists())) {\n-            collectionAccess.add(\"allowInsert\");\n-            collectionAccess.add(\"allowDelete\");\n+            collectionAccess.add(ALLOW_INSERT.getOption());\n+            collectionAccess.add(ALLOW_DELETE.getOption());\n         }\n-        return DisplayContextParameterUtil.updateDisplayContextParameter(field.getDisplayContextParameter(),\n-            DisplayContextParameterUtil.Parameter.COLLECTION, collectionAccess);\n+\n+        return DisplayContextParameterUtil.updateCollectionDisplayContextParameter(field.getDisplayContextParameter(), collectionAccess);\n     }\n \n     private void setChildrenAsReadOnlyIfNoAccess(final List<WizardPage> wizardPages, final String rootFieldId, final CaseField caseField, final Predicate<AccessControlList> access, final Set<String> userRoles, final CommonField caseViewField) {\n"}}, {"oid": "e548bfc0490231ba327bf56a2701f6b98853c7f0", "url": "https://github.com/hmcts/ccd-data-store-api/commit/e548bfc0490231ba327bf56a2701f6b98853c7f0", "message": "RDM-6757 Addressed PR comments", "committedDate": "2020-01-27T17:15:53Z", "type": "commit"}, {"oid": "6554dedec447b6d58ed494269e99a9ac039f9a38", "url": "https://github.com/hmcts/ccd-data-store-api/commit/6554dedec447b6d58ed494269e99a9ac039f9a38", "message": "RDM-6757 Addressed PR comments", "committedDate": "2020-01-28T11:30:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MDc3OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371780778", "bodyText": "this code could seems a bit too complex would be good if we could further simplify by breaking it down into more private method with self explanatory names", "author": "mario-paniccia", "createdAt": "2020-01-28T12:47:11Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_DELETE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_INSERT;\n+\n+public class DisplayContextParameterUtil {\n+\n+    public static String COLLECTION = \"COLLECTION\";\n+\n+    public static String updateCollectionDisplayContextParameter(final String currentDisplayContextParameter,", "originalCommit": "6554dedec447b6d58ed494269e99a9ac039f9a38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NjE3MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371786170", "bodyText": "Will try to make it more clear.", "author": "rafalkalita", "createdAt": "2020-01-28T12:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MDc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "04833dded891af5938a2ef51d3dbb8afa81e64e7", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java b/src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java\nindex 4f61e9fa0..40a46bbcf 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java\n\n@@ -3,9 +3,11 @@ package uk.gov.hmcts.ccd.domain.model.common;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import static java.util.Collections.emptyList;\n import static org.apache.commons.lang3.StringUtils.isBlank;\n import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_DELETE;\n import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_INSERT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MjI1Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371782256", "bodyText": "this one is funny, how come the result has the order inverted?", "author": "mario-paniccia", "createdAt": "2020-01-28T12:50:25Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateCollectionDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create collection parameter)\")\n+    void shouldCreateCollectionParameter() {\n+        assertAll(\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"\")),\n+                is(\"#COLLECTION()\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),", "originalCommit": "6554dedec447b6d58ed494269e99a9ac039f9a38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NTQ3Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371785472", "bodyText": "Because we always order the results.", "author": "rafalkalita", "createdAt": "2020-01-28T12:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MjI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NjIyMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r373386223", "bodyText": "\ud83d\udc4d", "author": "mario-paniccia", "createdAt": "2020-01-31T09:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MjI1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "04833dded891af5938a2ef51d3dbb8afa81e64e7", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\nindex a59152162..6c6a818da 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java\n\n@@ -32,6 +32,8 @@ class DisplayContextParameterUtilTest {\n         assertAll(\n             () -> assertThat(updateCollectionDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", asList(\"allowInsert\", \"allowDelete\")),\n                 is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"#COLLECTION(allowInsert)\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n             () -> assertThat(updateCollectionDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", asList(\"allowDelete\", \"allowInsert\")),\n                 is(\"#COLLECTION(allowDelete,allowInsert)\")),\n             () -> assertThat(updateCollectionDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", asList(\"allowDelete\")),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NDM0Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371784347", "bodyText": "We should add few integration tests as well, especially one testing collection of complex of collection...", "author": "mario-paniccia", "createdAt": "2020-01-28T12:54:53Z", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlServiceFilterTest.java", "diffHunk": "@@ -1152,6 +1154,162 @@ void filterComplexCaseFieldChildrenByUpdateAccessWhenAllAccessIsOnCreate() {\n         }\n     }\n \n+    @Nested\n+    @DisplayName(\"updateCollectionDisplayContextParameter for Event Triggers Tests\")\n+    class UpdateCollectionDisplayContextParameterByAccessTests {\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION(allowInsert,allowDelete) in DisplayContextParameter of a collection \" +\n+            \"caseField when create and delete ACLs are set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasCreateDeleteRoles() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(true)\n+                    .withDelete(true)\n+                    .withUpdate(false)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+            caseViewField1.getFieldType().getChildren().stream()\n+                .filter(e -> e.getId().equals(\"Addresses\")).findFirst()\n+                .get().setAccessControlLists(asList(anAcl()\n+                .withRole(ROLE_IN_USER_ROLES)\n+                .withCreate(true)\n+                .withDelete(true)\n+                .withUpdate(false)\n+                .build()));\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            assertThat(\"There should be only one caseField\", eventTrigger.getCaseFields(), hasSize(1));\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+\n+            CaseField addresses = people.getFieldType().getChildren().stream()\n+                .filter(e -> e.getId().equals(\"Addresses\")).findFirst()\n+                .get();\n+\n+            assertAll(\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION(allowInsert,allowDelete) in DisplayContextParameter of a collection \" +\n+            \"caseField when an update ACL is set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasUpdateRole() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(false)\n+                    .withDelete(false)\n+                    .withUpdate(true)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION() in DisplayContextParameter of a collection caseField when no ACL set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasNoCreateDeleteUpdateRoles() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(false)\n+                    .withDelete(false)\n+                    .withUpdate(false)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertFalse(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertFalse(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+    }\n+\n     @Nested", "originalCommit": "6554dedec447b6d58ed494269e99a9ac039f9a38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NTYyNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371785627", "bodyText": "Yes, can add few.", "author": "rafalkalita", "createdAt": "2020-01-28T12:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NDM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c064da03e512fc30669b77f23f12c6deab578e64", "chunk": "diff --git a/src/test/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlServiceFilterTest.java b/src/test/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlServiceFilterTest.java\nindex 00585fd90..17f02fa09 100644\n--- a/src/test/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlServiceFilterTest.java\n+++ b/src/test/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlServiceFilterTest.java\n\n@@ -1154,162 +1152,6 @@ class AccessControlServiceFilterTest {\n         }\n     }\n \n-    @Nested\n-    @DisplayName(\"updateCollectionDisplayContextParameter for Event Triggers Tests\")\n-    class UpdateCollectionDisplayContextParameterByAccessTests {\n-\n-        @Test\n-        @DisplayName(\"Should set #COLLECTION(allowInsert,allowDelete) in DisplayContextParameter of a collection \" +\n-            \"caseField when create and delete ACLs are set\")\n-        void updateCollectionDisplayContextParameterWhenFieldHasCreateDeleteRoles() {\n-\n-            final CaseViewField caseViewField1 = aViewField()\n-                .withId(\"People\")\n-                .withFieldType(aFieldType()\n-                    .withId(\"G339483948\")\n-                    .withType(COLLECTION)\n-                    .build())\n-                .withACL(anAcl()\n-                    .withRole(ROLE_IN_USER_ROLES)\n-                    .withCreate(true)\n-                    .withDelete(true)\n-                    .withUpdate(false)\n-                    .build())\n-                .build();\n-            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n-            caseViewField1.getFieldType().getChildren().stream()\n-                .filter(e -> e.getId().equals(\"Addresses\")).findFirst()\n-                .get().setAccessControlLists(asList(anAcl()\n-                .withRole(ROLE_IN_USER_ROLES)\n-                .withCreate(true)\n-                .withDelete(true)\n-                .withUpdate(false)\n-                .build()));\n-\n-            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n-                .withField(caseViewField1)\n-                .withWizardPage(newWizardPage()\n-                        .withId(\"Page One\")\n-                        .withField(caseViewField1)\n-                        .build()\n-                               )\n-                .build();\n-\n-            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n-                caseEventTrigger,\n-                USER_ROLES);\n-\n-            assertThat(\"There should be only one caseField\", eventTrigger.getCaseFields(), hasSize(1));\n-\n-            CaseViewField people = eventTrigger.getCaseFields().stream()\n-                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n-\n-            assertAll(\n-                () -> assertNotNull(people),\n-                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n-                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowInsert\")),\n-                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowDelete\"))\n-                     );\n-\n-            CaseField addresses = people.getFieldType().getChildren().stream()\n-                .filter(e -> e.getId().equals(\"Addresses\")).findFirst()\n-                .get();\n-\n-            assertAll(\n-                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n-                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"allowInsert\")),\n-                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"allowDelete\"))\n-                     );\n-        }\n-\n-        @Test\n-        @DisplayName(\"Should set #COLLECTION(allowInsert,allowDelete) in DisplayContextParameter of a collection \" +\n-            \"caseField when an update ACL is set\")\n-        void updateCollectionDisplayContextParameterWhenFieldHasUpdateRole() {\n-\n-            final CaseViewField caseViewField1 = aViewField()\n-                .withId(\"People\")\n-                .withFieldType(aFieldType()\n-                    .withId(\"G339483948\")\n-                    .withType(COLLECTION)\n-                    .build())\n-                .withACL(anAcl()\n-                    .withRole(ROLE_IN_USER_ROLES)\n-                    .withCreate(false)\n-                    .withDelete(false)\n-                    .withUpdate(true)\n-                    .build())\n-                .build();\n-            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n-\n-            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n-                .withField(caseViewField1)\n-                .withWizardPage(newWizardPage()\n-                        .withId(\"Page One\")\n-                        .withField(caseViewField1)\n-                        .build()\n-                               )\n-                .build();\n-\n-            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n-                caseEventTrigger,\n-                USER_ROLES);\n-\n-            CaseViewField people = eventTrigger.getCaseFields().stream()\n-                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n-\n-            assertAll(\n-                () -> assertNotNull(people),\n-                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n-                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowInsert\")),\n-                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowDelete\"))\n-                     );\n-        }\n-\n-        @Test\n-        @DisplayName(\"Should set #COLLECTION() in DisplayContextParameter of a collection caseField when no ACL set\")\n-        void updateCollectionDisplayContextParameterWhenFieldHasNoCreateDeleteUpdateRoles() {\n-\n-            final CaseViewField caseViewField1 = aViewField()\n-                .withId(\"People\")\n-                .withFieldType(aFieldType()\n-                    .withId(\"G339483948\")\n-                    .withType(COLLECTION)\n-                    .build())\n-                .withACL(anAcl()\n-                    .withRole(ROLE_IN_USER_ROLES)\n-                    .withCreate(false)\n-                    .withDelete(false)\n-                    .withUpdate(false)\n-                    .build())\n-                .build();\n-            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n-\n-            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n-                .withField(caseViewField1)\n-                .withWizardPage(newWizardPage()\n-                        .withId(\"Page One\")\n-                        .withField(caseViewField1)\n-                        .build()\n-                               )\n-                .build();\n-\n-            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n-                caseEventTrigger,\n-                USER_ROLES);\n-\n-            CaseViewField people = eventTrigger.getCaseFields().stream()\n-                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n-\n-            assertAll(\n-                () -> assertNotNull(people),\n-                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n-                () -> assertFalse(people.getDisplayContextParameter().contains(\"allowInsert\")),\n-                () -> assertFalse(people.getDisplayContextParameter().contains(\"allowDelete\"))\n-                     );\n-        }\n-    }\n-\n     @Nested\n     @DisplayName(\"FilterCaseFieldsByAccess Tests - Simple CaseFields\")\n     class FilterCaseFieldsByAccessSimpleFieldTests {\n"}}, {"oid": "04833dded891af5938a2ef51d3dbb8afa81e64e7", "url": "https://github.com/hmcts/ccd-data-store-api/commit/04833dded891af5938a2ef51d3dbb8afa81e64e7", "message": "RDM-6757 Addressed PR comments.", "committedDate": "2020-01-30T16:46:56Z", "type": "commit"}, {"oid": "c3de775d06b68eb830593cea74f18aac08bc0c5c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c3de775d06b68eb830593cea74f18aac08bc0c5c", "message": "RDM-6757 Addressed PR comments.", "committedDate": "2020-01-31T10:47:21Z", "type": "commit"}, {"oid": "b0619b724b575022daa003b32415253de4d622f8", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b0619b724b575022daa003b32415253de4d622f8", "message": "Merge branch 'develop' into respondent-journey-RDM-6757", "committedDate": "2020-02-20T10:18:37Z", "type": "commit"}, {"oid": "fd330d435d96e71f2d775d36bb4b2a6d5a94c247", "url": "https://github.com/hmcts/ccd-data-store-api/commit/fd330d435d96e71f2d775d36bb4b2a6d5a94c247", "message": "Fix merge build issues.", "committedDate": "2020-02-20T10:41:47Z", "type": "commit"}, {"oid": "65f11d0e2ed2432e6484c6824d8a74d8a9a45c92", "url": "https://github.com/hmcts/ccd-data-store-api/commit/65f11d0e2ed2432e6484c6824d8a74d8a9a45c92", "message": "Fix checkstyle issues.", "committedDate": "2020-02-20T11:05:07Z", "type": "commit"}, {"oid": "5c619e38543258e4be9622e6f2c76ca6eb1c1387", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5c619e38543258e4be9622e6f2c76ca6eb1c1387", "message": "Added missing final", "committedDate": "2020-02-20T11:37:29Z", "type": "commit"}, {"oid": "8eff97d60a85b11c1413ecbe1c711775d895896b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8eff97d60a85b11c1413ecbe1c711775d895896b", "message": "Update BEFTA tests with display_context_parameter", "committedDate": "2020-02-20T12:49:40Z", "type": "commit"}, {"oid": "ef7c6fd57f66dfc5bb53ea87c236c1374b957f73", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ef7c6fd57f66dfc5bb53ea87c236c1374b957f73", "message": "Merge branch 'develop' into respondent-journey-RDM-6757", "committedDate": "2020-02-21T14:22:00Z", "type": "commit"}, {"oid": "c7b6a2b91c4143c954c31bad1d72a5aafb924af6", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c7b6a2b91c4143c954c31bad1d72a5aafb924af6", "message": "Merge branch 'develop' into respondent-journey-RDM-6757", "committedDate": "2020-02-25T15:34:21Z", "type": "commit"}, {"oid": "c064da03e512fc30669b77f23f12c6deab578e64", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c064da03e512fc30669b77f23f12c6deab578e64", "message": "Ignoring 403 test cases where token validation fails. Will be rewritten as part of RDM-6847 (#834)\n\n* RDM-7621 - ignored few security tests as they are invalid with 401 response upon authentication failures\r\n\r\n* RDM-7621 - two more 403 ones\r\n\r\n* RDM-7621 - comment text change", "committedDate": "2020-03-03T09:15:55Z", "type": "commit"}, {"oid": "3109bf4f022863c087587b79baa4ba140b36c66e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/3109bf4f022863c087587b79baa4ba140b36c66e", "message": "Merge branch 'develop' into respondent-journey-RDM-6757", "committedDate": "2020-03-05T12:14:47Z", "type": "commit"}]}