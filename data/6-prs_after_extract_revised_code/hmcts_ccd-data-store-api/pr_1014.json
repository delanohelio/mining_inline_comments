{"pr_number": 1014, "pr_title": "Rdm 8751", "pr_createdAt": "2020-07-15T10:22:37Z", "pr_url": "https://github.com/hmcts/ccd-data-store-api/pull/1014", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwNTk4Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457305982", "bodyText": "replaced the wrong @ApiParam. Please put this back and replace the one at line 79 i.e.\n@ApiParam(value = \"Case type ID(s)\", required = true)", "author": "mario-paniccia", "createdAt": "2020-07-20T11:41:48Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -54,20 +78,17 @@ public CaseSearchEndpoint(@Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) Ca\n     public CaseSearchResult searchCases(\n         @ApiParam(value = \"Case type ID(s)\", required = true)\n         @RequestParam(\"ctid\") List<String> caseTypeIds,\n-        @ApiParam(value = \"Native ElasticSearch Search API request. Please refer to the ElasticSearch official \"\n-            + \"documentation. For cross case type search, \"\n-            + \"the search results will contain only metadata by default (no case field data). To get case data in the \"\n-            + \"search results, please state the alias fields to be returned in the _source property for e.g.\"", "originalCommit": "f68c936180e7835a6b8b86a571c3463ed556d49e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ada20bf67c9db3ea83ab54c47e2f7577f259d67c", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex 2b51008dc..0179cc2f4 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -76,11 +76,16 @@ public class CaseSearchEndpoint {\n     @LogAudit(operationType = AuditOperationType.SEARCH_CASE, caseTypeIds = \"#caseTypeIds\",\n         caseId = \"T(uk.gov.hmcts.ccd.endpoint.std.CaseSearchEndpoint).buildCaseIds(#result)\")\n     public CaseSearchResult searchCases(\n-        @ApiParam(value = \"Case type ID(s)\", required = true)\n-        @RequestParam(\"ctid\") List<String> caseTypeIds,\n         @ApiParam(value = \"Comma separated list of case type ID(s) or '*' if the search should be applied on any \"\n             + \"existing case type. Note that using '*' is an expensive operation and might have low response times so \"\n             + \"always prefer explicitly listing the case types when known in advance\", required = true)\n+        @RequestParam(\"ctid\") List<String> caseTypeIds,\n+        @ApiParam(value = \"Native ElasticSearch Search API request. Please refer to the ElasticSearch official \"\n+            + \"documentation. For cross case type search, \"\n+            + \"the search results will contain only metadata by default (no case field data). To get case data in the \"\n+            + \"search results, please state the alias fields to be returned in the _source property for e.g.\"\n+            + \" \\\"_source\\\":[\\\"alias.customer\\\",\\\"alias.postcode\\\"]\",\n+            required = true)\n         @RequestBody String jsonSearchRequest) {\n \n         Instant start = Instant.now();\n"}}, {"oid": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T11:44:23Z", "type": "commit"}, {"oid": "9ddb01a3fb0272d8dacb53921927b7cd1be6cd18", "url": "https://github.com/hmcts/ccd-data-store-api/commit/9ddb01a3fb0272d8dacb53921927b7cd1be6cd18", "message": "Merge branch 'RDM-8751' of github.com:hmcts/ccd-data-store-api into RDM-8751", "committedDate": "2020-07-20T11:45:18Z", "type": "commit"}, {"oid": "ada20bf67c9db3ea83ab54c47e2f7577f259d67c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ada20bf67c9db3ea83ab54c47e2f7577f259d67c", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T11:58:07Z", "type": "commit"}, {"oid": "5708d958c7328508098c529f095929d4dc40a44e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5708d958c7328508098c529f095929d4dc40a44e", "message": "updated comment", "committedDate": "2020-07-20T12:01:03Z", "type": "commit"}, {"oid": "0f2e88e7367e0ed362f171a2e821bce055780782", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0f2e88e7367e0ed362f171a2e821bce055780782", "message": "Merge branch 'RDM-8751' of github.com:hmcts/ccd-data-store-api into RDM-8751", "committedDate": "2020-07-20T12:11:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyMzg2Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457323863", "bodyText": "Minor: We could add a getAllCaseTypes() into JurisdictionDefinition", "author": "danlysiak", "createdAt": "2020-07-20T12:08:40Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java", "diffHunk": "@@ -213,24 +215,50 @@ public JurisdictionDefinition getJurisdictionFromDefinitionStore(String jurisdic\n         return jurisdictionDefinitions.get(0);\n     }\n \n+    @Override\n+    public List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds) {\n+\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+        if (jurisdictionDefinitions.isEmpty()) {\n+            LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n+            return Collections.emptyList();\n+        }\n+        List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+        return caseTypes;\n+    }\n+\n+    @Override\n+    public List<String> getAllCaseTypesIDs() {\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Collections.emptyList());\n+        return getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+    }\n+\n+    private List<String> getCaseTypeIdFromJurisdictionDefinition(List<JurisdictionDefinition> jurisdictionDefinitions) {\n+        return jurisdictionDefinitions.stream().flatMap(\n+            jurisdictionDefinition -> jurisdictionDefinition.getCaseTypeDefinitions().stream().map(\n+                caseTypeDefinition -> caseTypeDefinition.getId()", "originalCommit": "5708d958c7328508098c529f095929d4dc40a44e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2MzI1Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457963257", "bodyText": "done", "author": "mario-paniccia", "createdAt": "2020-07-21T09:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyMzg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "384e91cfbbb7bddb2940fd4cf51c95fc6888222d", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\nindex ad65c77fd..653108fad 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n\n@@ -208,7 +209,9 @@ public class DefaultCaseDefinitionRepository implements CaseDefinitionRepository\n     }\n \n     public JurisdictionDefinition getJurisdictionFromDefinitionStore(String jurisdictionId) {\n-        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Arrays.asList(jurisdictionId));\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(\n+            Optional.of(Arrays.asList(jurisdictionId))\n+        );\n         if (jurisdictionDefinitions.isEmpty()) {\n             return null;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyNTUxMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457325513", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JsonProperty(\"case_types_results\")\n          \n          \n            \n                @JsonProperty(\"case_type_results\")\n          \n      \n    \n    \n  \n\nOr change variable name to caseTypesResults (whichever is more appropriate for the meaning of this!)", "author": "danlysiak", "createdAt": "2020-07-20T12:11:09Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java", "diffHunk": "@@ -1,25 +1,38 @@\n package uk.gov.hmcts.ccd.domain.model.search;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+\n+import java.util.ArrayList;\n import java.util.List;\n \n import static java.util.Collections.emptyList;\n import static java.util.stream.Collectors.toList;\n \n-import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n-\n public class CaseSearchResult {\n-\n     public static final CaseSearchResult EMPTY = new CaseSearchResult(0L, emptyList());\n \n     private Long total;\n     private List<CaseDetails> cases;\n+    @JsonProperty(\"case_types_results\")", "originalCommit": "5708d958c7328508098c529f095929d4dc40a44e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0MzMzOQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457443339", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-20T14:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyNTUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3Mzc5MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r458673791", "bodyText": "we changed the variable name to caseTypesResults and we will keep case_types_results", "author": "mario-paniccia", "createdAt": "2020-07-22T09:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyNTUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "384e91cfbbb7bddb2940fd4cf51c95fc6888222d", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java b/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java\nindex 756d47cca..d52142432 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java\n\n@@ -15,15 +15,15 @@ public class CaseSearchResult {\n     private Long total;\n     private List<CaseDetails> cases;\n     @JsonProperty(\"case_types_results\")\n-    private List<CaseTypeResults> caseTypeResults;\n+    private List<CaseTypeResults> caseTypesResults;\n \n     public CaseSearchResult() {\n     }\n \n-    public CaseSearchResult(Long total, List<CaseDetails> cases, List<CaseTypeResults> caseTypeResults) {\n+    public CaseSearchResult(Long total, List<CaseDetails> cases, List<CaseTypeResults> caseTypesResults) {\n         this.cases = cases;\n         this.total = total;\n-        this.caseTypeResults = caseTypeResults;\n+        this.caseTypesResults = caseTypesResults;\n     }\n \n     public CaseSearchResult(Long total, List<CaseDetails> cases) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyNzIwNQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457327205", "bodyText": "Can we remove this constructor? It looks like the same as the one on L23 except with arguments in a different order?", "author": "danlysiak", "createdAt": "2020-07-20T12:13:39Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java", "diffHunk": "@@ -1,25 +1,38 @@\n package uk.gov.hmcts.ccd.domain.model.search;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+\n+import java.util.ArrayList;\n import java.util.List;\n \n import static java.util.Collections.emptyList;\n import static java.util.stream.Collectors.toList;\n \n-import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n-\n public class CaseSearchResult {\n-\n     public static final CaseSearchResult EMPTY = new CaseSearchResult(0L, emptyList());\n \n     private Long total;\n     private List<CaseDetails> cases;\n+    @JsonProperty(\"case_types_results\")\n+    private List<CaseTypeResults> caseTypeResults;\n \n     public CaseSearchResult() {\n     }\n \n-    public CaseSearchResult(Long total, List<CaseDetails> cases) {\n+    public CaseSearchResult(Long total, List<CaseDetails> cases, List<CaseTypeResults> caseTypeResults) {\n         this.cases = cases;\n         this.total = total;\n+        this.caseTypeResults = caseTypeResults;\n+    }\n+\n+    public CaseSearchResult(Long total, List<CaseDetails> cases) {\n+        this(total, cases, new ArrayList<>());\n+    }\n+\n+\n+    public CaseSearchResult(List<CaseTypeResults> caseTypeResults, Long total, List<CaseDetails> cases) {", "originalCommit": "5708d958c7328508098c529f095929d4dc40a44e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5NDcyMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457394721", "bodyText": "DONE.", "author": "Thor-tech-of-metal", "createdAt": "2020-07-20T13:41:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyNzIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "384e91cfbbb7bddb2940fd4cf51c95fc6888222d", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java b/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java\nindex 756d47cca..d52142432 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java\n\n@@ -15,15 +15,15 @@ public class CaseSearchResult {\n     private Long total;\n     private List<CaseDetails> cases;\n     @JsonProperty(\"case_types_results\")\n-    private List<CaseTypeResults> caseTypeResults;\n+    private List<CaseTypeResults> caseTypesResults;\n \n     public CaseSearchResult() {\n     }\n \n-    public CaseSearchResult(Long total, List<CaseDetails> cases, List<CaseTypeResults> caseTypeResults) {\n+    public CaseSearchResult(Long total, List<CaseDetails> cases, List<CaseTypeResults> caseTypesResults) {\n         this.cases = cases;\n         this.total = total;\n-        this.caseTypeResults = caseTypeResults;\n+        this.caseTypesResults = caseTypesResults;\n     }\n \n     public CaseSearchResult(Long total, List<CaseDetails> cases) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzNjQwMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457336402", "bodyText": "In some places it is called caseTypeResults, others caseFieldsAggregations - not sure if there is a different meaning or just needs to be updated?", "author": "danlysiak", "createdAt": "2020-07-20T12:27:20Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +113,49 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n+    }\n+\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseFieldsAggregations,", "originalCommit": "5708d958c7328508098c529f095929d4dc40a44e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MDU2Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457450566", "bodyText": "D O N E", "author": "Thor-tech-of-metal", "createdAt": "2020-07-20T14:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzNjQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "384e91cfbbb7bddb2940fd4cf51c95fc6888222d", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex 5ce61cb71..2c62a7f32 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -119,7 +119,7 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n             }\n         }\n \n-        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n+        return new CaseSearchResult(totalHits,caseDetails,caseTypeResults);\n     }\n \n     private void buildCaseTypesResults(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzNjk1MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457336950", "bodyText": "hits is being used quite a lot at least in this class - introduce a constant.", "author": "danlysiak", "createdAt": "2020-07-20T12:28:12Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +113,49 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n+    }\n+\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseFieldsAggregations,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);\n+            caseFieldsAggregations.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n+                crossCaseTypeSearchRequest.getCaseTypeIds()),\n+                response.searchResult.getTotal())\n+            );\n+        }\n+    }\n+\n+    private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")", "originalCommit": "5708d958c7328508098c529f095929d4dc40a44e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NjkzNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457446937", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-20T14:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzNjk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "384e91cfbbb7bddb2940fd4cf51c95fc6888222d", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex 5ce61cb71..2c62a7f32 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -119,7 +119,7 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n             }\n         }\n \n-        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n+        return new CaseSearchResult(totalHits,caseDetails,caseTypeResults);\n     }\n \n     private void buildCaseTypesResults(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzOTU4NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457339585", "bodyText": "Sorry I know I suggested using the property value! I think if doing so we need to be a bit smarter though e.g. what if the property were changed to new_%s_cases, then substring wouldn't work. Something to consider!", "author": "danlysiak", "createdAt": "2020-07-20T12:32:03Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +113,49 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n+    }\n+\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseFieldsAggregations,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);\n+            caseFieldsAggregations.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n+                crossCaseTypeSearchRequest.getCaseTypeIds()),\n+                response.searchResult.getTotal())\n+            );\n+        }\n+    }\n+\n+    private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+            .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+    }\n+\n+    private boolean hitsIsNotEmpty(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0;\n+    }\n+\n+    private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {\n+        String pureIndexFormat = applicationParams.getCasesIndexNameFormat().substring(2);", "originalCommit": "5708d958c7328508098c529f095929d4dc40a44e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5NjIwNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457396206", "bodyText": "Yes good point , but if we create a new index rule  (new_%s_cases)  that can lead in changing all indexes in CCD.", "author": "Thor-tech-of-metal", "createdAt": "2020-07-20T13:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzOTU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMTI1Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457431252", "bodyText": "I thought the same. I'll fix this", "author": "mario-paniccia", "createdAt": "2020-07-20T14:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzOTU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "384e91cfbbb7bddb2940fd4cf51c95fc6888222d", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex 5ce61cb71..2c62a7f32 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -119,7 +119,7 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n             }\n         }\n \n-        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n+        return new CaseSearchResult(totalHits,caseDetails,caseTypeResults);\n     }\n \n     private void buildCaseTypesResults(\n"}}, {"oid": "384e91cfbbb7bddb2940fd4cf51c95fc6888222d", "url": "https://github.com/hmcts/ccd-data-store-api/commit/384e91cfbbb7bddb2940fd4cf51c95fc6888222d", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T14:36:10Z", "type": "commit"}, {"oid": "86f1c4ce4b0cc1cd4641822ede0fe4be11db137f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/86f1c4ce4b0cc1cd4641822ede0fe4be11db137f", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T14:40:13Z", "type": "commit"}, {"oid": "1e65f8e4404f336b1511407d1ffb774ecc8b1cfe", "url": "https://github.com/hmcts/ccd-data-store-api/commit/1e65f8e4404f336b1511407d1ffb774ecc8b1cfe", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T14:43:05Z", "type": "commit"}, {"oid": "0491b4e6e458070c1d12e201d660ab445a390e4d", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0491b4e6e458070c1d12e201d660ab445a390e4d", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T15:11:18Z", "type": "commit"}, {"oid": "183d5f3bb8f355914351c8cd6b7ae59e28c3805a", "url": "https://github.com/hmcts/ccd-data-store-api/commit/183d5f3bb8f355914351c8cd6b7ae59e28c3805a", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T15:15:26Z", "type": "commit"}, {"oid": "c1353e4f131a94d2a9bad5535f3e3a33a409bfcb", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c1353e4f131a94d2a9bad5535f3e3a33a409bfcb", "message": "improved code to detect case type id from the ES index name", "committedDate": "2020-07-20T16:28:54Z", "type": "commit"}, {"oid": "31ec63fb2c38cbe3330625a267f3fede42118359", "url": "https://github.com/hmcts/ccd-data-store-api/commit/31ec63fb2c38cbe3330625a267f3fede42118359", "message": "Merge remote-tracking branch 'origin/RDM-8751' into RDM-8751\n\n# Conflicts:\n#\tsrc/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "committedDate": "2020-07-20T16:30:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MjUwMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457542500", "bodyText": "@danlysiak improved the logic to extract the case type ID. Now is basically no longer in the code, but it's in the 2 new config properties I've introduced. Those 2 properties tell where the case type id is in the index name, by using regex groups.\nLet me know if it's better now", "author": "mario-paniccia", "createdAt": "2020-07-20T16:33:06Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +116,56 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(totalHits,caseDetails,caseTypeResults);\n+    }\n+\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseTypeResults,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);\n+            caseTypeResults.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n+                crossCaseTypeSearchRequest.getCaseTypeIds()),\n+                response.searchResult.getTotal())\n+            );\n+        }\n+    }\n+\n+    private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n+        String quotedIndexName =  response.searchResult.getJsonObject().getAsJsonObject(HITS).get(HITS)\n+            .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+        String unquotedIndexName = quotedIndexName.replaceAll(\"\\\"\", \"\");\n+        return unquotedIndexName;\n+    }\n+\n+    private boolean hitsIsNotEmpty(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(HITS).get(HITS).getAsJsonArray().size() != 0;\n+    }\n+\n+    private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {\n+        String caseTypeIdGroupRegex = applicationParams.getCasesIndexNameCaseTypeIdGroup();\n+        int caseTypeIdGroupPosition = applicationParams.getCasesIndexNameCaseTypeIdGroupPosition();\n+        Pattern pattern = Pattern.compile(caseTypeIdGroupRegex);\n+        Matcher m = pattern.matcher(index);\n+        if (m.matches() && m.groupCount() > 1) {\n+            return caseTypeIds.stream().filter(\n+                caseTypeId -> caseTypeId.equalsIgnoreCase(m.group(caseTypeIdGroupPosition))\n+            ).findFirst().orElseThrow(() -> {\n+                log.error(\"Cannot match any known case type id from index '{}' extracted case type id : {}\", index, m.group(1));\n+                throw new ServiceException(\"Cannot determine case type id from ES index name - unknown extracted case type id\");\n+            });\n+        } else {\n+            log.error(\"Cannot determine case type id from index name: '{}'. No capturing group configured or capturing group not matching: '{}'.\",\n+                index, caseTypeIdGroupRegex);\n+            throw new ServiceException(\"Cannot determine case type id from ES index name - cannot extract case type id\");\n+        }\n     }", "originalCommit": "31ec63fb2c38cbe3330625a267f3fede42118359", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTg4OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457565888", "bodyText": "Looks good! Just a couple of small comments further below.", "author": "danlysiak", "createdAt": "2020-07-20T17:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2MzQwMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457963403", "bodyText": "done", "author": "mario-paniccia", "createdAt": "2020-07-21T09:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MjUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "28b91edd4a5aa9b1f054a25750b3e37c456edded", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex 7a90ea096..264b5ab72 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -158,7 +158,7 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n             return caseTypeIds.stream().filter(\n                 caseTypeId -> caseTypeId.equalsIgnoreCase(m.group(caseTypeIdGroupPosition))\n             ).findFirst().orElseThrow(() -> {\n-                log.error(\"Cannot match any known case type id from index '{}' extracted case type id : {}\", index, m.group(1));\n+                log.error(\"Cannot match any known case type id from index '{}' extracted case type id : {}\", index, m.group(caseTypeIdGroupPosition));\n                 throw new ServiceException(\"Cannot determine case type id from ES index name - unknown extracted case type id\");\n             });\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1OTg3OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457559879", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.error(\"Cannot match any known case type id from index '{}' extracted case type id : {}\", index, m.group(1));\n          \n          \n            \n                            log.error(\"Cannot match any known case type id from index '{}' extracted case type id : {}\", index, m.group(caseTypeIdGroupPosition));", "author": "danlysiak", "createdAt": "2020-07-20T17:02:03Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -137,25 +139,33 @@ private void buildCaseTypesResults(\n     }\n \n     private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n-        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+        String quotedIndexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n             .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+        String unquotedIndexName = quotedIndexName.replaceAll(\"\\\"\", \"\");\n+        return unquotedIndexName;\n     }\n \n     private boolean hitsIsNotEmpty(MultiSearchResult.MultiSearchResponse response) {\n         return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0;\n     }\n \n     private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {\n-        String pureIndexFormat = applicationParams.getCasesIndexNameFormat().substring(2);\n-        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(pureIndexFormat))\n-            .replaceAll(\"\\\"\", \"\");\n-\n-        return caseTypeIds.stream().filter(\n-            caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)\n-        ).findFirst().orElseGet(() -> {\n-            log.error(\"The Case type id could be found using the following index name: {}\", caseTypeIdFromIndex);\n-            return \"index-error\";\n-        });\n+        String caseTypeIdGroupRegex = applicationParams.getCasesIndexNameCaseTypeIdGroup();\n+        int caseTypeIdGroupPosition = applicationParams.getCasesIndexNameCaseTypeIdGroupPosition();\n+        Pattern pattern = Pattern.compile(caseTypeIdGroupRegex);\n+        Matcher m = pattern.matcher(index);\n+        if (m.matches() && m.groupCount() > 1) {\n+            return caseTypeIds.stream().filter(\n+                caseTypeId -> caseTypeId.equalsIgnoreCase(m.group(caseTypeIdGroupPosition))\n+            ).findFirst().orElseThrow(() -> {\n+                log.error(\"Cannot match any known case type id from index '{}' extracted case type id : {}\", index, m.group(1));", "originalCommit": "c1353e4f131a94d2a9bad5535f3e3a33a409bfcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMDMxNQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457920315", "bodyText": "done", "author": "mario-paniccia", "createdAt": "2020-07-21T08:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1OTg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4583ed4ff8b5451583e691116a9c88656c194ea", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex 242a43a88..7a90ea096 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -121,17 +122,16 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n             }\n         }\n \n-        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n+        return new CaseSearchResult(totalHits,caseDetails,caseTypeResults);\n     }\n \n     private void buildCaseTypesResults(\n         MultiSearchResult.MultiSearchResponse response,\n-        List<CaseTypeResults> caseFieldsAggregations,\n+        List<CaseTypeResults> caseTypeResults,\n         CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n-\n         if (hitsIsNotEmpty(response)) {\n             String indexName = getIndexName(response);\n-            caseFieldsAggregations.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n+            caseTypeResults.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n                 crossCaseTypeSearchRequest.getCaseTypeIds()),\n                 response.searchResult.getTotal())\n             );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NTYzNQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457575635", "bodyText": "Been wondering about making hitsIsNotEmpty() and getIndexName() a bit more readable rather than having to search through JSON objects..\nWe could potentially use List<SearchResult.Hit<ElasticSearchCaseDetailsDTO, Void>> hits = response.searchResult.getHits(ElasticSearchCaseDetailsDTO.class); here - I think our DTO should already be suitable for that usage? Then it's much simpler:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (hitsIsNotEmpty(response)) {\n          \n          \n            \n                        String indexName = getIndexName(response);\n          \n          \n            \n                    List<SearchResult.Hit<ElasticSearchCaseDetailsDTO, Void>> hits = response.searchResult.getHits(ElasticSearchCaseDetailsDTO.class);\n          \n          \n            \n                    if (!hits.isEmpty()) {\n          \n          \n            \n                        String indexName = hits.get(0).index;\n          \n      \n    \n    \n  \n\nNot tried this out, but looks like a good alternative if it works?", "author": "danlysiak", "createdAt": "2020-07-20T17:29:54Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +116,56 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(totalHits,caseDetails,caseTypeResults);\n+    }\n+\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseTypeResults,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);", "originalCommit": "31ec63fb2c38cbe3330625a267f3fede42118359", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NDI0Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457584243", "bodyText": "Also - we are currently (and with my suggestion too) getting the index name from the first hit. If a service passes an ES query with \"size\": 0 then there won't be any hits but it can still have a total - do we always expect/are we telling services that they should always pass a size for these kinds of queries but _source = false?\nSorry if repeating things that have already been covered! I can see we'll be using _source = false in the ticket for the original business scenario, but may need to document in known limitations so services know too?", "author": "danlysiak", "createdAt": "2020-07-20T17:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNjA3Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457636073", "bodyText": "mmm, This is a nice  one.    May be response.searchResult.getFirstHit(SearchResult.Hit.class); will be better. As we only need  to get  1) the index 2) the size and also expect empty results . Hence its is better not force a conversion to ElasticSearchCaseDetailsDTO to evaluate attributes  from hits only.      I can test it tomorrow.  I looks possible.   Hopefully it does not break our test . As far I am remember not all our elastic  test mocks does have hits-->hits--> _source structure", "author": "Thor-tech-of-metal", "createdAt": "2020-07-20T19:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDA4Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r458120083", "bodyText": "Also - we are currently (and with my suggestion too) getting the index name from the first hit. If a service passes an ES query with \"size\": 0 then there won't be any hits but it can still have a total - do we always expect/are we telling services that they should always pass a size for these kinds of queries but _source = false?\nSorry if repeating things that have already been covered! I can see we'll be using _source = false in the ticket for the original business scenario, but may need to document in known limitations so services know too?\n\n@danlysiak this is a good catch. We did some testing and we found no way to overcome this. I think it's not a big deal because if they don't want case data to be returned, they can just use _source:false rather than size:0. I will document this limitation, cheers", "author": "mario-paniccia", "createdAt": "2020-07-21T14:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3NTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "28b91edd4a5aa9b1f054a25750b3e37c456edded", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex 7a90ea096..264b5ab72 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -158,7 +158,7 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n             return caseTypeIds.stream().filter(\n                 caseTypeId -> caseTypeId.equalsIgnoreCase(m.group(caseTypeIdGroupPosition))\n             ).findFirst().orElseThrow(() -> {\n-                log.error(\"Cannot match any known case type id from index '{}' extracted case type id : {}\", index, m.group(1));\n+                log.error(\"Cannot match any known case type id from index '{}' extracted case type id : {}\", index, m.group(caseTypeIdGroupPosition));\n                 throw new ServiceException(\"Cannot determine case type id from ES index name - unknown extracted case type id\");\n             });\n         } else {\n"}}, {"oid": "c4583ed4ff8b5451583e691116a9c88656c194ea", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c4583ed4ff8b5451583e691116a9c88656c194ea", "message": "Merge branch 'RDM-8751' of github.com:hmcts/ccd-data-store-api into RDM-8751", "committedDate": "2020-07-21T08:17:57Z", "type": "commit"}, {"oid": "28b91edd4a5aa9b1f054a25750b3e37c456edded", "url": "https://github.com/hmcts/ccd-data-store-api/commit/28b91edd4a5aa9b1f054a25750b3e37c456edded", "message": "addressed some code review comments", "committedDate": "2020-07-21T08:22:14Z", "type": "commit"}, {"oid": "4134950579aed0083b47b88c2c469a99a73ee79e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/4134950579aed0083b47b88c2c469a99a73ee79e", "message": "code review comments", "committedDate": "2020-07-21T09:29:16Z", "type": "commit"}, {"oid": "752bab02f9626d44468445c23b16e9641cbf6c48", "url": "https://github.com/hmcts/ccd-data-store-api/commit/752bab02f9626d44468445c23b16e9641cbf6c48", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-21T10:03:51Z", "type": "commit"}, {"oid": "4a95f128704aeaad9996519c2934322ed46685f2", "url": "https://github.com/hmcts/ccd-data-store-api/commit/4a95f128704aeaad9996519c2934322ed46685f2", "message": "Merge branch 'RDM-8751' of github.com:hmcts/ccd-data-store-api into RDM-8751", "committedDate": "2020-07-21T10:06:16Z", "type": "commit"}, {"oid": "a7adff7b5df42c2b115e2e0e3993d8e6dc170f34", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a7adff7b5df42c2b115e2e0e3993d8e6dc170f34", "message": "temporarily increasing max limit of PMD max failures to allow the build pass. Will raise a separate ticket to reduce the number", "committedDate": "2020-07-21T10:42:32Z", "type": "commit"}, {"oid": "5356abef9c1ab0435162f47f2dfedc39421f56b7", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5356abef9c1ab0435162f47f2dfedc39421f56b7", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-21T11:25:19Z", "type": "commit"}, {"oid": "103811a1f10f7588a1b294c414fab9241fb75ddb", "url": "https://github.com/hmcts/ccd-data-store-api/commit/103811a1f10f7588a1b294c414fab9241fb75ddb", "message": "Merge branch 'RDM-8751' of github.com:hmcts/ccd-data-store-api into RDM-8751", "committedDate": "2020-07-21T13:07:25Z", "type": "commit"}, {"oid": "2464ec3be320dd4c7796b6300835aa6eb62771fb", "url": "https://github.com/hmcts/ccd-data-store-api/commit/2464ec3be320dd4c7796b6300835aa6eb62771fb", "message": " RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-21T14:01:44Z", "type": "commit"}, {"oid": "5e68a1a0f4a811770cd16d93bb2d004c6016f112", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5e68a1a0f4a811770cd16d93bb2d004c6016f112", "message": "Merge branch 'develop' of github.com:hmcts/ccd-data-store-api into RDM-8751", "committedDate": "2020-07-21T14:09:03Z", "type": "commit"}, {"oid": "26af65a55634ca997a935db24ebd8f49de43b5c7", "url": "https://github.com/hmcts/ccd-data-store-api/commit/26af65a55634ca997a935db24ebd8f49de43b5c7", "message": " RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-23T13:32:27Z", "type": "commit"}, {"oid": "476c5b547e3c4681363317a9543cee2ba703556b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/476c5b547e3c4681363317a9543cee2ba703556b", "message": " RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-23T13:49:13Z", "type": "commit"}, {"oid": "5f5d9a9a8279d711e5d1b9628cc01844e8d4160f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5f5d9a9a8279d711e5d1b9628cc01844e8d4160f", "message": " RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-24T09:32:15Z", "type": "commit"}, {"oid": "749244bf52ef6161dec68c32e8fbae4f6c6978f4", "url": "https://github.com/hmcts/ccd-data-store-api/commit/749244bf52ef6161dec68c32e8fbae4f6c6978f4", "message": " RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-24T11:03:32Z", "type": "commit"}, {"oid": "a910973b80bb639bf61bb2a963a9d930c6955543", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a910973b80bb639bf61bb2a963a9d930c6955543", "message": " RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-24T14:00:27Z", "type": "commit"}, {"oid": "f15d8119beae6b0187a4d200031cba8123d95003", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f15d8119beae6b0187a4d200031cba8123d95003", "message": "RDM-8325 - Initial changes for internal /searchCases API", "committedDate": "2020-05-27T07:56:19Z", "type": "commit"}, {"oid": "be6a3b9a841fe48eb6b7733705e04a8644745273", "url": "https://github.com/hmcts/ccd-data-store-api/commit/be6a3b9a841fe48eb6b7733705e04a8644745273", "message": "Checkstyle", "committedDate": "2020-05-27T08:13:13Z", "type": "commit"}, {"oid": "2f3d06da04caacefa5cb24cce00957f1fdc29cbf", "url": "https://github.com/hmcts/ccd-data-store-api/commit/2f3d06da04caacefa5cb24cce00957f1fdc29cbf", "message": "Add data_classification to default _source; tests", "committedDate": "2020-05-27T11:41:49Z", "type": "commit"}, {"oid": "a6a36541caf5a6cfef62ead5bb6dbb26fde759f6", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a6a36541caf5a6cfef62ead5bb6dbb26fde759f6", "message": "Refactoring & tests", "committedDate": "2020-05-27T12:21:50Z", "type": "commit"}, {"oid": "506ef4b771dc7eb6823f737f44d53642d32949a5", "url": "https://github.com/hmcts/ccd-data-store-api/commit/506ef4b771dc7eb6823f737f44d53642d32949a5", "message": "Add Log and Audit to internal /searchCases", "committedDate": "2020-05-27T13:12:05Z", "type": "commit"}, {"oid": "0fc75ab4364e95f78271f62bb04322f94b406a4f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0fc75ab4364e95f78271f62bb04322f94b406a4f", "message": "Further unit testing/minor refactoring", "committedDate": "2020-05-27T16:42:47Z", "type": "commit"}, {"oid": "5c9ec6ace45d74bc194a5d80671f140f2b3b7284", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5c9ec6ace45d74bc194a5d80671f140f2b3b7284", "message": "Checkstyle", "committedDate": "2020-05-27T16:54:20Z", "type": "commit"}, {"oid": "1155c1691e0b026452aa675058c284faa5aee514", "url": "https://github.com/hmcts/ccd-data-store-api/commit/1155c1691e0b026452aa675058c284faa5aee514", "message": "Add usecase request param for def store", "committedDate": "2020-05-28T11:31:28Z", "type": "commit"}, {"oid": "97910d410515ba7eba9b75a2ee7e7682562b9773", "url": "https://github.com/hmcts/ccd-data-store-api/commit/97910d410515ba7eba9b75a2ee7e7682562b9773", "message": "Update log message", "committedDate": "2020-05-28T11:35:34Z", "type": "commit"}, {"oid": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f9a84505dd3e6b6a7e677b921b5e302da68a4531", "message": "Add query param to test data", "committedDate": "2020-05-28T11:55:23Z", "type": "commit"}, {"oid": "ad83f92fbcc9c7f0db7c189fa8d63e363e632acf", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ad83f92fbcc9c7f0db7c189fa8d63e363e632acf", "message": "Swagger docs; add internal APIs to published docs", "committedDate": "2020-05-29T13:36:03Z", "type": "commit"}, {"oid": "8853f3907c7d99b64591744751ca0f8f5207d676", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8853f3907c7d99b64591744751ca0f8f5207d676", "message": "Fix SwaggerGeneratorTest", "committedDate": "2020-05-29T13:50:30Z", "type": "commit"}, {"oid": "110fed028a7d7d2802992692621cdd26ea264133", "url": "https://github.com/hmcts/ccd-data-store-api/commit/110fed028a7d7d2802992692621cdd26ea264133", "message": "Remove UseCase enum", "committedDate": "2020-06-01T12:08:53Z", "type": "commit"}, {"oid": "0ac227e8fe062b29622927c0da5978dcfaae51b6", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0ac227e8fe062b29622927c0da5978dcfaae51b6", "message": "Merge branch 'develop' into RDM-8325", "committedDate": "2020-06-01T12:24:59Z", "type": "commit"}, {"oid": "a41e9f7a2150ce4b238daafe792b4cdd43c0caaf", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a41e9f7a2150ce4b238daafe792b4cdd43c0caaf", "message": "Update in line with RDM-8350", "committedDate": "2020-06-01T12:48:48Z", "type": "commit"}, {"oid": "6512ad914d73578e1daacbd7a9edd8ca78eb866d", "url": "https://github.com/hmcts/ccd-data-store-api/commit/6512ad914d73578e1daacbd7a9edd8ca78eb866d", "message": "Mimic test from RDM-8350", "committedDate": "2020-06-01T12:59:18Z", "type": "commit"}, {"oid": "ffd687b296fdb876dfc6ddc42f01ca3585b58f7b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ffd687b296fdb876dfc6ddc42f01ca3585b58f7b", "message": "Checkstyle cleanup", "committedDate": "2020-06-01T13:08:56Z", "type": "commit"}, {"oid": "65432dc8cab3bbdc52586f35f385bd1b187fdac9", "url": "https://github.com/hmcts/ccd-data-store-api/commit/65432dc8cab3bbdc52586f35f385bd1b187fdac9", "message": "Preemptively add last_state_modified_date to case predefined mappings types", "committedDate": "2020-06-01T17:30:10Z", "type": "commit"}, {"oid": "adf28caf0a6a23df380d2be462697fd214b437bd", "url": "https://github.com/hmcts/ccd-data-store-api/commit/adf28caf0a6a23df380d2be462697fd214b437bd", "message": "RDM-8325 - Make ctid query param mandatory; refactoring", "committedDate": "2020-06-03T10:24:53Z", "type": "commit"}, {"oid": "cbfb563b54c3eaeaa06b5a1a5b67864c3b9a843b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/cbfb563b54c3eaeaa06b5a1a5b67864c3b9a843b", "message": "RDM-8325 - Update ctid to single value; refactoring", "committedDate": "2020-06-03T13:11:54Z", "type": "commit"}, {"oid": "7f95f00d03f8377abb1b4f9808a7d2b2ca0892e3", "url": "https://github.com/hmcts/ccd-data-store-api/commit/7f95f00d03f8377abb1b4f9808a7d2b2ca0892e3", "message": "RDM-8325 - Add usecase to response; refactoring", "committedDate": "2020-06-03T13:32:27Z", "type": "commit"}, {"oid": "b70e030ea094bcf80d4d634def0f7b00093b89ce", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b70e030ea094bcf80d4d634def0f7b00093b89ce", "message": "Checkstyle", "committedDate": "2020-06-03T13:40:20Z", "type": "commit"}, {"oid": "ab325f02d6a0e2937399bb6cb023a8842e1dda9b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ab325f02d6a0e2937399bb6cb023a8842e1dda9b", "message": "Minor refactor", "committedDate": "2020-06-03T13:55:35Z", "type": "commit"}, {"oid": "67676c8e6a6911f1d6f41465e49dda9bf24cae7b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/67676c8e6a6911f1d6f41465e49dda9bf24cae7b", "message": "Revert previously edited files to originals following simplification", "committedDate": "2020-06-03T14:24:35Z", "type": "commit"}, {"oid": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/588918d0569aa6a39311bba157ce8459d3dd0b9e", "message": "Method rename", "committedDate": "2020-06-03T14:34:18Z", "type": "commit"}, {"oid": "f41836564db97039a7c7d1eacb7a44e4763b6dbc", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f41836564db97039a7c7d1eacb7a44e4763b6dbc", "message": "RDM-8325 - Review comments", "committedDate": "2020-06-05T17:30:32Z", "type": "commit"}, {"oid": "d88a7069533e3aed2b0c53af5c0c9a453d29bd03", "url": "https://github.com/hmcts/ccd-data-store-api/commit/d88a7069533e3aed2b0c53af5c0c9a453d29bd03", "message": "RDM-8685 - Add consumes to controller", "committedDate": "2020-06-09T14:54:04Z", "type": "commit"}, {"oid": "2b2e034b3480c0d67e859294cd0d260b6fa2263e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/2b2e034b3480c0d67e859294cd0d260b6fa2263e", "message": "RDM-8751 work in progress", "committedDate": "2020-07-06T09:58:35Z", "type": "commit"}, {"oid": "9df848768367d7c6ff8dbf9a414dad9200e937e3", "url": "https://github.com/hmcts/ccd-data-store-api/commit/9df848768367d7c6ff8dbf9a414dad9200e937e3", "message": "RDM-8751 work in progress", "committedDate": "2020-07-10T10:54:52Z", "type": "commit"}, {"oid": "068a16228881817bd9d57aa2f448bb0b54915c77", "url": "https://github.com/hmcts/ccd-data-store-api/commit/068a16228881817bd9d57aa2f448bb0b54915c77", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-13T09:27:25Z", "type": "commit"}, {"oid": "a94b4b879afe8c8a2042c3dc30035ec0c624a5df", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a94b4b879afe8c8a2042c3dc30035ec0c624a5df", "message": "Merge branch 'develop' of github.com:hmcts/ccd-data-store-api into RDM-8751-WORKING-MERGING-DEV", "committedDate": "2020-07-13T09:29:25Z", "type": "commit"}, {"oid": "35d7796a3c0c34746b43c6370bff145202034eb4", "url": "https://github.com/hmcts/ccd-data-store-api/commit/35d7796a3c0c34746b43c6370bff145202034eb4", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-13T11:46:40Z", "type": "commit"}, {"oid": "8918e2a7f97e5f76079e7f38f743d41aa3d4db3c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8918e2a7f97e5f76079e7f38f743d41aa3d4db3c", "message": "Merge branch 'develop' of github.com:hmcts/ccd-data-store-api into RDM-8751-WORKING-MERGING-DEV", "committedDate": "2020-07-13T11:46:58Z", "type": "commit"}, {"oid": "be96a06a4d59431d066fe68d1fe5ad0d286e6e1b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/be96a06a4d59431d066fe68d1fe5ad0d286e6e1b", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-13T15:13:01Z", "type": "commit"}, {"oid": "13354383d69dfaf330b94af86879b88ca46dab04", "url": "https://github.com/hmcts/ccd-data-store-api/commit/13354383d69dfaf330b94af86879b88ca46dab04", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-14T14:23:41Z", "type": "commit"}, {"oid": "71dcc49df9a81bb2cc57d98577aa6e96246f9cc8", "url": "https://github.com/hmcts/ccd-data-store-api/commit/71dcc49df9a81bb2cc57d98577aa6e96246f9cc8", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-15T10:23:12Z", "type": "commit"}, {"oid": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-15T12:08:30Z", "type": "commit"}, {"oid": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "url": "https://github.com/hmcts/ccd-data-store-api/commit/2581fb698fc6e1e4829e30f2248a5c621514da7a", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-15T14:01:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MTY3Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455081672", "bodyText": "Let's move this method into the existing class CaseTypeService. And have the controller delegate to it\nThe method could be called: getCaseTypesAccordingToIDAMRoles", "author": "mario-paniccia", "createdAt": "2020-07-15T14:10:21Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -79,6 +99,22 @@ public CaseSearchResult searchCases(\n         return result;\n     }\n \n+    private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n+        if (isAConsolidationQuery(caseTypeIds)) {\n+            return getCaseTypes();\n+        }\n+        return caseTypeIds;\n+    }\n+\n+    private List<String> getCaseTypes() {\n+        final List<String> roles = userService.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+    }", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex a26d0262c..2b51008dc 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -100,19 +101,27 @@ public class CaseSearchEndpoint {\n     }\n \n     private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n-        if (isAConsolidationQuery(caseTypeIds)) {\n+        if (isAllCaseTypesRequest(caseTypeIds)) {\n             return getCaseTypes();\n         }\n         return caseTypeIds;\n     }\n \n     private List<String> getCaseTypes() {\n-        final List<String> roles = userService.getUserRolesJurisdictions();\n-        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+        if (userRepository.anyRoleEqualsAnyOf(applicationParams.getCcdAccessControlCrossJurisdictionRoles())) {\n+            return caseDefinitionRepository.getAllCaseTypesIDs();\n+        } else {\n+            return getCaseTypesFromIdamRoles();\n+        }\n+    }\n+\n+    private List<String> getCaseTypesFromIdamRoles() {\n+        List<String> jurisdictions = userRepository.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getCaseTypesIDsByJurisdictions(jurisdictions);\n     }\n \n-    private boolean isAConsolidationQuery(List<String> caseTypeIds) {\n-        return ElasticsearchRequest.SOURCE_WILDCARD.equals(caseTypeIds.get(0));\n+    private boolean isAllCaseTypesRequest(List<String> caseTypeIds) {\n+        return ElasticsearchRequest.WILDCARD.equals(caseTypeIds.get(0));\n     }\n \n     public static String buildCaseIds(CaseSearchResult caseSearchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MzYzMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455083631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean isAConsolidationQuery(List<String> caseTypeIds) {\n          \n          \n            \n                private boolean isAllCaseTypeRequest(List<String> caseTypeIds) {", "author": "mario-paniccia", "createdAt": "2020-07-15T14:13:08Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -79,6 +99,22 @@ public CaseSearchResult searchCases(\n         return result;\n     }\n \n+    private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n+        if (isAConsolidationQuery(caseTypeIds)) {\n+            return getCaseTypes();\n+        }\n+        return caseTypeIds;\n+    }\n+\n+    private List<String> getCaseTypes() {\n+        final List<String> roles = userService.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+    }\n+\n+    private boolean isAConsolidationQuery(List<String> caseTypeIds) {", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex a26d0262c..2b51008dc 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -100,19 +101,27 @@ public class CaseSearchEndpoint {\n     }\n \n     private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n-        if (isAConsolidationQuery(caseTypeIds)) {\n+        if (isAllCaseTypesRequest(caseTypeIds)) {\n             return getCaseTypes();\n         }\n         return caseTypeIds;\n     }\n \n     private List<String> getCaseTypes() {\n-        final List<String> roles = userService.getUserRolesJurisdictions();\n-        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+        if (userRepository.anyRoleEqualsAnyOf(applicationParams.getCcdAccessControlCrossJurisdictionRoles())) {\n+            return caseDefinitionRepository.getAllCaseTypesIDs();\n+        } else {\n+            return getCaseTypesFromIdamRoles();\n+        }\n+    }\n+\n+    private List<String> getCaseTypesFromIdamRoles() {\n+        List<String> jurisdictions = userRepository.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getCaseTypesIDsByJurisdictions(jurisdictions);\n     }\n \n-    private boolean isAConsolidationQuery(List<String> caseTypeIds) {\n-        return ElasticsearchRequest.SOURCE_WILDCARD.equals(caseTypeIds.get(0));\n+    private boolean isAllCaseTypesRequest(List<String> caseTypeIds) {\n+        return ElasticsearchRequest.WILDCARD.equals(caseTypeIds.get(0));\n     }\n \n     public static String buildCaseIds(CaseSearchResult caseSearchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4NTQzMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455085430", "bodyText": "wonder whether it's a good practice leaving the parameter type as a List now that * is a possible value.\nWonder whether it's more correct to change it to a String and then parse the string.\nUndecided. Let's discuss about it", "author": "mario-paniccia", "createdAt": "2020-07-15T14:15:36Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -79,6 +99,22 @@ public CaseSearchResult searchCases(\n         return result;\n     }\n \n+    private List<String> getCaseTypeIds(List<String> caseTypeIds) {", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex a26d0262c..2b51008dc 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -100,19 +101,27 @@ public class CaseSearchEndpoint {\n     }\n \n     private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n-        if (isAConsolidationQuery(caseTypeIds)) {\n+        if (isAllCaseTypesRequest(caseTypeIds)) {\n             return getCaseTypes();\n         }\n         return caseTypeIds;\n     }\n \n     private List<String> getCaseTypes() {\n-        final List<String> roles = userService.getUserRolesJurisdictions();\n-        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+        if (userRepository.anyRoleEqualsAnyOf(applicationParams.getCcdAccessControlCrossJurisdictionRoles())) {\n+            return caseDefinitionRepository.getAllCaseTypesIDs();\n+        } else {\n+            return getCaseTypesFromIdamRoles();\n+        }\n+    }\n+\n+    private List<String> getCaseTypesFromIdamRoles() {\n+        List<String> jurisdictions = userRepository.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getCaseTypesIDsByJurisdictions(jurisdictions);\n     }\n \n-    private boolean isAConsolidationQuery(List<String> caseTypeIds) {\n-        return ElasticsearchRequest.SOURCE_WILDCARD.equals(caseTypeIds.get(0));\n+    private boolean isAllCaseTypesRequest(List<String> caseTypeIds) {\n+        return ElasticsearchRequest.WILDCARD.equals(caseTypeIds.get(0));\n     }\n \n     public static String buildCaseIds(CaseSearchResult caseSearchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4NjA0MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455086041", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<String> roles = userService.getUserRolesJurisdictions();\n          \n          \n            \n                    final List<String> jurisdictions = userService.getUserRolesJurisdictions();", "author": "mario-paniccia", "createdAt": "2020-07-15T14:16:26Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -79,6 +99,22 @@ public CaseSearchResult searchCases(\n         return result;\n     }\n \n+    private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n+        if (isAConsolidationQuery(caseTypeIds)) {\n+            return getCaseTypes();\n+        }\n+        return caseTypeIds;\n+    }\n+\n+    private List<String> getCaseTypes() {\n+        final List<String> roles = userService.getUserRolesJurisdictions();", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzOTgzMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456339831", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T09:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4NjA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex a26d0262c..2b51008dc 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -100,19 +101,27 @@ public class CaseSearchEndpoint {\n     }\n \n     private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n-        if (isAConsolidationQuery(caseTypeIds)) {\n+        if (isAllCaseTypesRequest(caseTypeIds)) {\n             return getCaseTypes();\n         }\n         return caseTypeIds;\n     }\n \n     private List<String> getCaseTypes() {\n-        final List<String> roles = userService.getUserRolesJurisdictions();\n-        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+        if (userRepository.anyRoleEqualsAnyOf(applicationParams.getCcdAccessControlCrossJurisdictionRoles())) {\n+            return caseDefinitionRepository.getAllCaseTypesIDs();\n+        } else {\n+            return getCaseTypesFromIdamRoles();\n+        }\n+    }\n+\n+    private List<String> getCaseTypesFromIdamRoles() {\n+        List<String> jurisdictions = userRepository.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getCaseTypesIDsByJurisdictions(jurisdictions);\n     }\n \n-    private boolean isAConsolidationQuery(List<String> caseTypeIds) {\n-        return ElasticsearchRequest.SOURCE_WILDCARD.equals(caseTypeIds.get(0));\n+    private boolean isAllCaseTypesRequest(List<String> caseTypeIds) {\n+        return ElasticsearchRequest.WILDCARD.equals(caseTypeIds.get(0));\n     }\n \n     public static String buildCaseIds(CaseSearchResult caseSearchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4NzY3Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455087677", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ElasticsearchRequest.SOURCE_WILDCARD.equals(caseTypeIds.get(0));\n          \n          \n            \n                    return ElasticsearchRequest.ANY_CASE_TYPE.equals(caseTypeIds.get(0));", "author": "mario-paniccia", "createdAt": "2020-07-15T14:18:32Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -79,6 +99,22 @@ public CaseSearchResult searchCases(\n         return result;\n     }\n \n+    private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n+        if (isAConsolidationQuery(caseTypeIds)) {\n+            return getCaseTypes();\n+        }\n+        return caseTypeIds;\n+    }\n+\n+    private List<String> getCaseTypes() {\n+        final List<String> roles = userService.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+    }\n+\n+    private boolean isAConsolidationQuery(List<String> caseTypeIds) {\n+        return ElasticsearchRequest.SOURCE_WILDCARD.equals(caseTypeIds.get(0));", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NzM5OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455687399", "bodyText": "I think some other name would be better - maybe just WILDCARD? The constant was already being used as a possible value that can be used inside _source, so it now has two completely separate uses.", "author": "danlysiak", "createdAt": "2020-07-16T10:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4NzY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3MzA0MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455773041", "bodyText": "ok for me", "author": "mario-paniccia", "createdAt": "2020-07-16T13:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4NzY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0MDgwNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456340807", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T09:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4NzY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex a26d0262c..2b51008dc 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -100,19 +101,27 @@ public class CaseSearchEndpoint {\n     }\n \n     private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n-        if (isAConsolidationQuery(caseTypeIds)) {\n+        if (isAllCaseTypesRequest(caseTypeIds)) {\n             return getCaseTypes();\n         }\n         return caseTypeIds;\n     }\n \n     private List<String> getCaseTypes() {\n-        final List<String> roles = userService.getUserRolesJurisdictions();\n-        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+        if (userRepository.anyRoleEqualsAnyOf(applicationParams.getCcdAccessControlCrossJurisdictionRoles())) {\n+            return caseDefinitionRepository.getAllCaseTypesIDs();\n+        } else {\n+            return getCaseTypesFromIdamRoles();\n+        }\n+    }\n+\n+    private List<String> getCaseTypesFromIdamRoles() {\n+        List<String> jurisdictions = userRepository.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getCaseTypesIDsByJurisdictions(jurisdictions);\n     }\n \n-    private boolean isAConsolidationQuery(List<String> caseTypeIds) {\n-        return ElasticsearchRequest.SOURCE_WILDCARD.equals(caseTypeIds.get(0));\n+    private boolean isAllCaseTypesRequest(List<String> caseTypeIds) {\n+        return ElasticsearchRequest.WILDCARD.equals(caseTypeIds.get(0));\n     }\n \n     public static String buildCaseIds(CaseSearchResult caseSearchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4OTA5OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455089098", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .withConsolidationQuery(isAConsolidationQuery(caseTypeIds))\n          \n          \n            \n                        .withAnyCaseTypeRequest(isAllCaseTypeRequest(caseTypeIds))", "author": "mario-paniccia", "createdAt": "2020-07-15T14:20:24Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -67,8 +86,9 @@ public CaseSearchResult searchCases(\n         ElasticsearchRequest elasticsearchRequest = elasticsearchQueryHelper.validateAndConvertRequest(jsonSearchRequest);\n \n         CrossCaseTypeSearchRequest request = new CrossCaseTypeSearchRequest.Builder()\n-            .withCaseTypes(caseTypeIds)\n+            .withCaseTypes(getCaseTypeIds(caseTypeIds))\n             .withSearchRequest(elasticsearchRequest)\n+            .withConsolidationQuery(isAConsolidationQuery(caseTypeIds))", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0MTYxNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456341617", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T09:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4OTA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex a26d0262c..2b51008dc 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -73,12 +78,9 @@ public class CaseSearchEndpoint {\n     public CaseSearchResult searchCases(\n         @ApiParam(value = \"Case type ID(s)\", required = true)\n         @RequestParam(\"ctid\") List<String> caseTypeIds,\n-        @ApiParam(value = \"Native ElasticSearch Search API request. Please refer to the ElasticSearch official \"\n-            + \"documentation. For cross case type search, \"\n-            + \"the search results will contain only metadata by default (no case field data). To get case data in the \"\n-            + \"search results, please state the alias fields to be returned in the _source property for e.g.\"\n-            + \" \\\"_source\\\":[\\\"alias.customer\\\",\\\"alias.postcode\\\"]\",\n-            required = true)\n+        @ApiParam(value = \"Comma separated list of case type ID(s) or '*' if the search should be applied on any \"\n+            + \"existing case type. Note that using '*' is an expensive operation and might have low response times so \"\n+            + \"always prefer explicitly listing the case types when known in advance\", required = true)\n         @RequestBody String jsonSearchRequest) {\n \n         Instant start = Instant.now();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDMzOQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455090339", "bodyText": "please remove", "author": "mario-paniccia", "createdAt": "2020-07-15T14:22:05Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CachedCaseDefinitionRepository.java", "diffHunk": "@@ -91,11 +92,17 @@ public JurisdictionDefinition getJurisdiction(String jurisdictionId) {\n         return caseDefinitionRepository.getJurisdiction(jurisdictionId);\n     }\n \n+    @Override\n+    public Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds) {\n+        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(jurisdictionIds);\n+    }\n+\n     @Override\n     public List<FieldTypeDefinition> getBaseTypes() {\n         return baseTypes.computeIfAbsent(\"baseTypes\", e -> caseDefinitionRepository.getBaseTypes());\n     }\n \n+", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0MjAzNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456342036", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T09:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/CachedCaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/CachedCaseDefinitionRepository.java\nindex f0b4b4bea..8d6de49e3 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/CachedCaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/CachedCaseDefinitionRepository.java\n\n@@ -93,8 +91,13 @@ public class CachedCaseDefinitionRepository implements CaseDefinitionRepository\n     }\n \n     @Override\n-    public Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds) {\n-        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(jurisdictionIds);\n+    public List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds) {\n+        return caseDefinitionRepository.getCaseTypesIDsByJurisdictions(jurisdictionIds);\n+    }\n+\n+    @Override\n+    public List<String> getAllCaseTypesIDs() {\n+        return caseDefinitionRepository.getAllCaseTypesIDs();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDcwNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455090706", "bodyText": "No need to use Optional with lists. Just have it return an empty list in case of no results. The client code is going to be much simpler.", "author": "mario-paniccia", "createdAt": "2020-07-15T14:22:33Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java", "diffHunk": "@@ -24,4 +25,6 @@\n \n     JurisdictionDefinition getJurisdiction(String jurisdictionId);\n \n+    Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds);", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0MzAwMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456343001", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T09:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\nindex 150965943..b9dd20e64 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\n\n@@ -25,6 +24,7 @@ public interface CaseDefinitionRepository {\n \n     JurisdictionDefinition getJurisdiction(String jurisdictionId);\n \n-    Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds);\n+    List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds);\n \n+    List<String> getAllCaseTypesIDs();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDg3NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455090874", "bodyText": "please remove this blank line", "author": "mario-paniccia", "createdAt": "2020-07-15T14:22:48Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java", "diffHunk": "@@ -24,4 +25,6 @@\n \n     JurisdictionDefinition getJurisdiction(String jurisdictionId);\n \n+    Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds);\n+", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0Mzc4Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456343783", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T09:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\nindex 150965943..b9dd20e64 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\n\n@@ -25,6 +24,7 @@ public interface CaseDefinitionRepository {\n \n     JurisdictionDefinition getJurisdiction(String jurisdictionId);\n \n-    Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds);\n+    List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds);\n \n+    List<String> getAllCaseTypesIDs();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MTQ1Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455091456", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds);\n          \n          \n            \n                Optional<List<String>> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds);", "author": "mario-paniccia", "createdAt": "2020-07-15T14:23:36Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java", "diffHunk": "@@ -24,4 +25,6 @@\n \n     JurisdictionDefinition getJurisdiction(String jurisdictionId);\n \n+    Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds);", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTgyOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456349828", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MTQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\nindex 150965943..b9dd20e64 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/CaseDefinitionRepository.java\n\n@@ -25,6 +24,7 @@ public interface CaseDefinitionRepository {\n \n     JurisdictionDefinition getJurisdiction(String jurisdictionId);\n \n-    Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds);\n+    List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds);\n \n+    List<String> getAllCaseTypesIDs();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5Njk4OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455096988", "bodyText": "can you change you IDE to remove automatic adding final please and remove it here and the other places", "author": "mario-paniccia", "createdAt": "2020-07-15T14:30:22Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java", "diffHunk": "@@ -213,6 +216,24 @@ public JurisdictionDefinition getJurisdictionFromDefinitionStore(String jurisdic\n         return jurisdictionDefinitions.get(0);\n     }\n \n+    @Override\n+    public Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds) {\n+\n+        final List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MDI1MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456350250", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5Njk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\nindex daf47196d..ad65c77fd 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n\n@@ -217,41 +216,49 @@ public class DefaultCaseDefinitionRepository implements CaseDefinitionRepository\n     }\n \n     @Override\n-    public Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds) {\n-\n-        final List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+    public List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds) {\n \n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n         if (jurisdictionDefinitions.isEmpty()) {\n-            LOG.warn(\"No values found Retrieving jurisdiction object(s) from definition store for all Jurisdiction.\");\n-            Optional.of(Arrays.asList());\n+            LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n+            return Collections.emptyList();\n         }\n-        final List<String> caseTypes = jurisdictionDefinitions.stream().flatMap(\n+        List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+        return caseTypes;\n+    }\n+\n+    @Override\n+    public List<String> getAllCaseTypesIDs() {\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Collections.emptyList());\n+        return getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+    }\n+\n+    private List<String> getCaseTypeIdFromJurisdictionDefinition(List<JurisdictionDefinition> jurisdictionDefinitions) {\n+        return jurisdictionDefinitions.stream().flatMap(\n             jurisdictionDefinition -> jurisdictionDefinition.getCaseTypeDefinitions().stream().map(\n                 caseTypeDefinition -> caseTypeDefinition.getId()\n             )\n         ).distinct().collect(Collectors.toList());\n-\n-        return Optional.of(caseTypes);\n     }\n \n     private List<JurisdictionDefinition> getJurisdictionsFromDefinitionStore(List<String> jurisdictionIds) {\n         try {\n             LOG.debug(\"Retrieving jurisdiction object(s) from definition store for Jurisdiction IDs: {}.\",\n-                    jurisdictionIds);\n+                jurisdictionIds);\n             HttpEntity<List<JurisdictionDefinition>> requestEntity = new HttpEntity<>(securityUtils.authorizationHeaders());\n             UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(applicationParams.jurisdictionDefURL())\n-                    .queryParam(\"ids\", String.join(\",\", jurisdictionIds));\n+                .queryParam(\"ids\", String.join(\",\", jurisdictionIds));\n             List<JurisdictionDefinition> jurisdictionDefinitionList = restTemplate.exchange(builder.build().encode().toUri(),\n-                    HttpMethod.GET, requestEntity, new ParameterizedTypeReference<List<JurisdictionDefinition>>() {\n-                    }).getBody();\n+                HttpMethod.GET, requestEntity, new ParameterizedTypeReference<List<JurisdictionDefinition>>() {\n+                }).getBody();\n             LOG.debug(\"Retrieved jurisdiction object(s) from definition store: {}.\", jurisdictionDefinitionList);\n             return jurisdictionDefinitionList;\n         } catch (Exception e) {\n             LOG.warn(\"Error while retrieving jurisdictions definition\", e);\n             if (e instanceof HttpClientErrorException\n-                    && ((HttpClientErrorException) e).getRawStatusCode() == RESOURCE_NOT_FOUND) {\n+                && ((HttpClientErrorException) e).getRawStatusCode() == RESOURCE_NOT_FOUND) {\n                 LOG.warn(\"Jurisdiction object(s) configured for user couldn't be found on definition store: {}.\",\n-                        jurisdictionIds);\n+                    jurisdictionIds);\n                 return new ArrayList<>();\n             } else {\n                 throw new ServiceException(\"Problem retrieving jurisdictions definition because of \" + e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5ODQ4MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455098480", "bodyText": "why just not return the empty list?", "author": "mario-paniccia", "createdAt": "2020-07-15T14:32:12Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java", "diffHunk": "@@ -213,6 +216,24 @@ public JurisdictionDefinition getJurisdictionFromDefinitionStore(String jurisdic\n         return jurisdictionDefinitions.get(0);\n     }\n \n+    @Override\n+    public Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds) {\n+\n+        final List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+\n+        if (jurisdictionDefinitions.isEmpty()) {\n+            LOG.warn(\"No values found Retrieving jurisdiction object(s) from definition store for all Jurisdiction.\");\n+            Optional.of(Arrays.asList());", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MjMwNQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456352305", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5ODQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\nindex daf47196d..ad65c77fd 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n\n@@ -217,41 +216,49 @@ public class DefaultCaseDefinitionRepository implements CaseDefinitionRepository\n     }\n \n     @Override\n-    public Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds) {\n-\n-        final List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+    public List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds) {\n \n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n         if (jurisdictionDefinitions.isEmpty()) {\n-            LOG.warn(\"No values found Retrieving jurisdiction object(s) from definition store for all Jurisdiction.\");\n-            Optional.of(Arrays.asList());\n+            LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n+            return Collections.emptyList();\n         }\n-        final List<String> caseTypes = jurisdictionDefinitions.stream().flatMap(\n+        List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+        return caseTypes;\n+    }\n+\n+    @Override\n+    public List<String> getAllCaseTypesIDs() {\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Collections.emptyList());\n+        return getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+    }\n+\n+    private List<String> getCaseTypeIdFromJurisdictionDefinition(List<JurisdictionDefinition> jurisdictionDefinitions) {\n+        return jurisdictionDefinitions.stream().flatMap(\n             jurisdictionDefinition -> jurisdictionDefinition.getCaseTypeDefinitions().stream().map(\n                 caseTypeDefinition -> caseTypeDefinition.getId()\n             )\n         ).distinct().collect(Collectors.toList());\n-\n-        return Optional.of(caseTypes);\n     }\n \n     private List<JurisdictionDefinition> getJurisdictionsFromDefinitionStore(List<String> jurisdictionIds) {\n         try {\n             LOG.debug(\"Retrieving jurisdiction object(s) from definition store for Jurisdiction IDs: {}.\",\n-                    jurisdictionIds);\n+                jurisdictionIds);\n             HttpEntity<List<JurisdictionDefinition>> requestEntity = new HttpEntity<>(securityUtils.authorizationHeaders());\n             UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(applicationParams.jurisdictionDefURL())\n-                    .queryParam(\"ids\", String.join(\",\", jurisdictionIds));\n+                .queryParam(\"ids\", String.join(\",\", jurisdictionIds));\n             List<JurisdictionDefinition> jurisdictionDefinitionList = restTemplate.exchange(builder.build().encode().toUri(),\n-                    HttpMethod.GET, requestEntity, new ParameterizedTypeReference<List<JurisdictionDefinition>>() {\n-                    }).getBody();\n+                HttpMethod.GET, requestEntity, new ParameterizedTypeReference<List<JurisdictionDefinition>>() {\n+                }).getBody();\n             LOG.debug(\"Retrieved jurisdiction object(s) from definition store: {}.\", jurisdictionDefinitionList);\n             return jurisdictionDefinitionList;\n         } catch (Exception e) {\n             LOG.warn(\"Error while retrieving jurisdictions definition\", e);\n             if (e instanceof HttpClientErrorException\n-                    && ((HttpClientErrorException) e).getRawStatusCode() == RESOURCE_NOT_FOUND) {\n+                && ((HttpClientErrorException) e).getRawStatusCode() == RESOURCE_NOT_FOUND) {\n                 LOG.warn(\"Jurisdiction object(s) configured for user couldn't be found on definition store: {}.\",\n-                        jurisdictionIds);\n+                    jurisdictionIds);\n                 return new ArrayList<>();\n             } else {\n                 throw new ServiceException(\"Problem retrieving jurisdictions definition because of \" + e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5OTczMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455099733", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.warn(\"No values found Retrieving jurisdiction object(s) from definition store for all Jurisdiction.\");\n          \n          \n            \n                        LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);", "author": "mario-paniccia", "createdAt": "2020-07-15T14:33:56Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java", "diffHunk": "@@ -213,6 +216,24 @@ public JurisdictionDefinition getJurisdictionFromDefinitionStore(String jurisdic\n         return jurisdictionDefinitions.get(0);\n     }\n \n+    @Override\n+    public Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds) {\n+\n+        final List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+\n+        if (jurisdictionDefinitions.isEmpty()) {\n+            LOG.warn(\"No values found Retrieving jurisdiction object(s) from definition store for all Jurisdiction.\");", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MjU0OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456352548", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5OTczMw=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\nindex daf47196d..ad65c77fd 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n\n@@ -217,41 +216,49 @@ public class DefaultCaseDefinitionRepository implements CaseDefinitionRepository\n     }\n \n     @Override\n-    public Optional<List<String>> getAllCaseTypesByJurisdictions(List<String> jurisdictionIds) {\n-\n-        final List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+    public List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds) {\n \n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n         if (jurisdictionDefinitions.isEmpty()) {\n-            LOG.warn(\"No values found Retrieving jurisdiction object(s) from definition store for all Jurisdiction.\");\n-            Optional.of(Arrays.asList());\n+            LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n+            return Collections.emptyList();\n         }\n-        final List<String> caseTypes = jurisdictionDefinitions.stream().flatMap(\n+        List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+        return caseTypes;\n+    }\n+\n+    @Override\n+    public List<String> getAllCaseTypesIDs() {\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Collections.emptyList());\n+        return getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+    }\n+\n+    private List<String> getCaseTypeIdFromJurisdictionDefinition(List<JurisdictionDefinition> jurisdictionDefinitions) {\n+        return jurisdictionDefinitions.stream().flatMap(\n             jurisdictionDefinition -> jurisdictionDefinition.getCaseTypeDefinitions().stream().map(\n                 caseTypeDefinition -> caseTypeDefinition.getId()\n             )\n         ).distinct().collect(Collectors.toList());\n-\n-        return Optional.of(caseTypes);\n     }\n \n     private List<JurisdictionDefinition> getJurisdictionsFromDefinitionStore(List<String> jurisdictionIds) {\n         try {\n             LOG.debug(\"Retrieving jurisdiction object(s) from definition store for Jurisdiction IDs: {}.\",\n-                    jurisdictionIds);\n+                jurisdictionIds);\n             HttpEntity<List<JurisdictionDefinition>> requestEntity = new HttpEntity<>(securityUtils.authorizationHeaders());\n             UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(applicationParams.jurisdictionDefURL())\n-                    .queryParam(\"ids\", String.join(\",\", jurisdictionIds));\n+                .queryParam(\"ids\", String.join(\",\", jurisdictionIds));\n             List<JurisdictionDefinition> jurisdictionDefinitionList = restTemplate.exchange(builder.build().encode().toUri(),\n-                    HttpMethod.GET, requestEntity, new ParameterizedTypeReference<List<JurisdictionDefinition>>() {\n-                    }).getBody();\n+                HttpMethod.GET, requestEntity, new ParameterizedTypeReference<List<JurisdictionDefinition>>() {\n+                }).getBody();\n             LOG.debug(\"Retrieved jurisdiction object(s) from definition store: {}.\", jurisdictionDefinitionList);\n             return jurisdictionDefinitionList;\n         } catch (Exception e) {\n             LOG.warn(\"Error while retrieving jurisdictions definition\", e);\n             if (e instanceof HttpClientErrorException\n-                    && ((HttpClientErrorException) e).getRawStatusCode() == RESOURCE_NOT_FOUND) {\n+                && ((HttpClientErrorException) e).getRawStatusCode() == RESOURCE_NOT_FOUND) {\n                 LOG.warn(\"Jurisdiction object(s) configured for user couldn't be found on definition store: {}.\",\n-                        jurisdictionIds);\n+                    jurisdictionIds);\n                 return new ArrayList<>();\n             } else {\n                 throw new ServiceException(\"Problem retrieving jurisdictions definition because of \" + e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMTQ3Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455101472", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JsonProperty(\"case_field_id\")\n          \n          \n            \n                @JsonProperty(\"case_type_id\")", "author": "mario-paniccia", "createdAt": "2020-07-15T14:36:16Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package uk.gov.hmcts.ccd.domain.model.search;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class CaseTypesResults {\n+\n+    @JsonProperty(\"case_field_id\")", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MzA3Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456353077", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMTQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java b/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java\ndeleted file mode 100644\nindex 64fa610b4..000000000\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package uk.gov.hmcts.ccd.domain.model.search;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-public class CaseTypesResults {\n-\n-    @JsonProperty(\"case_field_id\")\n-    private final String caseTypeId;\n-    private final long total;\n-\n-    public CaseTypesResults(String caseFieldId, long numberOfMatchedCases) {\n-\n-        this.caseTypeId = caseFieldId;\n-        this.total = numberOfMatchedCases;\n-    }\n-\n-    public String getCaseTypeId() {\n-        return caseTypeId;\n-    }\n-\n-    public long getTotal() {\n-        return total;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMTczMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455101731", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public CaseTypesResults(String caseFieldId, long numberOfMatchedCases) {\n          \n          \n            \n                public CaseTypesResults(String caseTypeId, long total) {", "author": "mario-paniccia", "createdAt": "2020-07-15T14:36:39Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package uk.gov.hmcts.ccd.domain.model.search;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class CaseTypesResults {\n+\n+    @JsonProperty(\"case_field_id\")\n+    private final String caseTypeId;\n+    private final long total;\n+\n+    public CaseTypesResults(String caseFieldId, long numberOfMatchedCases) {", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MzUxMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456353513", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMTczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java b/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java\ndeleted file mode 100644\nindex 64fa610b4..000000000\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package uk.gov.hmcts.ccd.domain.model.search;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-public class CaseTypesResults {\n-\n-    @JsonProperty(\"case_field_id\")\n-    private final String caseTypeId;\n-    private final long total;\n-\n-    public CaseTypesResults(String caseFieldId, long numberOfMatchedCases) {\n-\n-        this.caseTypeId = caseFieldId;\n-        this.total = numberOfMatchedCases;\n-    }\n-\n-    public String getCaseTypeId() {\n-        return caseTypeId;\n-    }\n-\n-    public long getTotal() {\n-        return total;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjUzMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455102531", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean consolidationQuery;\n          \n          \n            \n                private boolean isAnyCaseRequest;\n          \n      \n    \n    \n  \n\nplease also update in other parts of the class accordingly", "author": "mario-paniccia", "createdAt": "2020-07-15T14:37:44Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java", "diffHunk": "@@ -43,13 +44,15 @@\n     private final ElasticsearchRequest elasticsearchRequest;\n     private final boolean multiCaseTypeSearch;\n     private final List<String> aliasFields = new ArrayList<>();\n+    private boolean consolidationQuery;", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3MjA1Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455772053", "bodyText": "Furthermore, is this new property still needed? I can't see it used", "author": "mario-paniccia", "createdAt": "2020-07-16T13:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMDgwMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456430803", "bodyText": "DONE removed.", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T13:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\nindex 80dcc3b74..5bc1ba069 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\n\n@@ -44,15 +43,13 @@ public class CrossCaseTypeSearchRequest {\n     private final ElasticsearchRequest elasticsearchRequest;\n     private final boolean multiCaseTypeSearch;\n     private final List<String> aliasFields = new ArrayList<>();\n-    private boolean consolidationQuery;\n \n     private CrossCaseTypeSearchRequest(List<String> caseTypeIds, ElasticsearchRequest elasticsearchRequest, boolean multiCaseTypeSearch,\n-                                       List<String> aliasFields, boolean consolidationQuery) {\n+                                       List<String> aliasFields) {\n         this.caseTypeIds.addAll(caseTypeIds);\n         this.elasticsearchRequest = elasticsearchRequest;\n         this.multiCaseTypeSearch = multiCaseTypeSearch;\n         this.aliasFields.addAll(aliasFields);\n-        this.consolidationQuery = consolidationQuery;\n         addMetadataSourceFields();\n         validateJsonSearchRequest();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNjAxNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455106016", "bodyText": "not sure I understand this. When _source is not false we want to addMetadataSourceFields right?\nBut with these changes the current code is not doing that", "author": "mario-paniccia", "createdAt": "2020-07-15T14:42:30Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java", "diffHunk": "@@ -84,8 +87,15 @@ public boolean hasAliasField(SearchAliasField searchAliasField) {\n         return aliasFields.stream().anyMatch(aliasField -> aliasField.equalsIgnoreCase(searchAliasField.getId()));\n     }\n \n+    public boolean isConsolidationQuery() {\n+        return consolidationQuery;\n+    }\n+\n     private void addMetadataSourceFields() {\n         if (elasticsearchRequest.hasSource()) {\n+            if (elasticsearchRequest.getSource() instanceof BooleanNode) {\n+                return;\n+            }", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTI2NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455109265", "bodyText": "I think this logic (once corrected) could be better placed inside the elasticsearchRequest.hasSource() method. And rename that method to something more suitable, perhaps\nelasticsearchRequest.hasSourceFields()\nthe method hasSourceFields() will then check if _source=false and in that case return false. This way the metadata fields will not be added when _source=false", "author": "mario-paniccia", "createdAt": "2020-07-15T14:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNjAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NjgwOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456356808", "bodyText": "The original code is doing custom manipulation on source assuming that source is always an Array[].  If the source = false (valid elastic query) will generate a Runtime Exception.    Bug in dev.    The if statement allows the current implementation to accept source = false and let elasticsearch to processes it . Nicer implementation can be done. we will discuss later.", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNjAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDkwNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456480906", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T14:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNjAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\nindex 80dcc3b74..5bc1ba069 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\n\n@@ -87,15 +84,9 @@ public class CrossCaseTypeSearchRequest {\n         return aliasFields.stream().anyMatch(aliasField -> aliasField.equalsIgnoreCase(searchAliasField.getId()));\n     }\n \n-    public boolean isConsolidationQuery() {\n-        return consolidationQuery;\n-    }\n-\n     private void addMetadataSourceFields() {\n-        if (elasticsearchRequest.hasSource()) {\n-            if (elasticsearchRequest.getSource() instanceof BooleanNode) {\n-                return;\n-            }\n+        if (elasticsearchRequest.hasSourceFields()) {\n+\n             ArrayNode sourceNode = (ArrayNode) elasticsearchRequest.getSource();\n             Arrays.stream(MetaData.CaseField.values())\n                 .forEach(field -> sourceNode.add(new TextNode(field.getDbColumnName())));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExMTkzNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455111936", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<CaseTypesResults> caseFieldsAggregations = new ArrayList<>();\n          \n          \n            \n                    final List<CaseTypesResults> caseTypesResults = new ArrayList<>();", "author": "mario-paniccia", "createdAt": "2020-07-15T14:50:13Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -95,8 +96,10 @@ private Search createSecuredSearch(String caseTypeId, JsonNode searchRequestJson\n             .build();\n     }\n \n-    private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearchResult) {\n-        List<CaseDetails> caseDetails = new ArrayList<>();\n+    private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearchResult,\n+                                                       CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+        final List<CaseDetails> caseDetails = new ArrayList<>();\n+        final List<CaseTypesResults> caseFieldsAggregations = new ArrayList<>();", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1ODAxNQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456358015", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExMTkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex dcd9686cc..5ce61cb71 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -99,7 +99,7 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n     private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearchResult,\n                                                        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n         final List<CaseDetails> caseDetails = new ArrayList<>();\n-        final List<CaseTypesResults> caseFieldsAggregations = new ArrayList<>();\n+        final List<CaseTypeResults> caseTypeResults = new ArrayList<>();\n         long totalHits = 0L;\n \n         for (MultiSearchResult.MultiSearchResponse response : multiSearchResult.getResponses()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExMzU2OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455113568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n          \n          \n            \n                            buildCaseTypesResults(response, caseTypesResults, crossCaseTypeSearchRequest);", "author": "mario-paniccia", "createdAt": "2020-07-15T14:52:02Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +113,35 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);", "originalCommit": "5a1234cdb4df11630c8abe46a3b3ce56a73e44d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1ODcwNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456358704", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExMzU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex dcd9686cc..5ce61cb71 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -113,35 +113,49 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n-                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n     }\n \n-    private void buildCaseFieldsAggregations(\n-        final MultiSearchResult.MultiSearchResponse response,\n-        final List<CaseTypesResults> caseFieldsAggregations,\n-        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseFieldsAggregations,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n \n-        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {\n-\n-            final String indexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n-                .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n-\n-            caseFieldsAggregations.add(new CaseTypesResults(getNameFromIndex(indexName,\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);\n+            caseFieldsAggregations.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n                 crossCaseTypeSearchRequest.getCaseTypeIds()),\n                 response.searchResult.getTotal())\n             );\n         }\n     }\n \n-    private String getNameFromIndex(final String index, List<String> caseTypeIds) {\n-        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(\"_cases\")).replaceAll(\"\\\"\", \"\");\n-        return caseTypeIds.stream().filter(caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)).findFirst().get();\n+    private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+            .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+    }\n+\n+    private boolean hitsIsNotEmpty(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0;\n+    }\n+\n+    private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {\n+        String pureIndexFormat = applicationParams.getCasesIndexNameFormat().substring(2);\n+        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(pureIndexFormat))\n+            .replaceAll(\"\\\"\", \"\");\n+\n+        return caseTypeIds.stream().filter(\n+            caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)\n+        ).findFirst().orElseGet(() -> {\n+            log.error(\"The Case type id could be found using the following index name: {}\", caseTypeIdFromIndex);\n+            return \"index-error\";\n+        });\n     }\n \n     private List<CaseDetails> searchResultToCaseList(SearchResult searchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMTA3Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455131073", "bodyText": "Important, but only If we have time now to do this\nI'm afraid this class has reached the max size limit. We can't keep adding more code to it it's already way too complex.\nCan you please introduce a new class ElasticsearchCaseSearchResponseGenerator with a method buildCaseDetailsSearchResult and move all the response generation code in there", "author": "mario-paniccia", "createdAt": "2020-07-15T15:15:00Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -62,7 +63,7 @@ public ElasticsearchCaseSearchOperation(JestClient jestClient,\n     public CaseSearchResult execute(CrossCaseTypeSearchRequest request) {\n         MultiSearchResult result = search(request);\n         if (result.isSucceeded()) {\n-            return toCaseDetailsSearchResult(result);\n+            return toCaseDetailsSearchResult(result, request);", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxOTE4Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455619183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String getNameFromIndex(final String index, List<String> caseTypeIds) {\n          \n          \n            \n                private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {", "author": "mario-paniccia", "createdAt": "2020-07-16T08:35:25Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +113,35 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+    }\n+\n+    private void buildCaseFieldsAggregations(\n+        final MultiSearchResult.MultiSearchResponse response,\n+        final List<CaseTypesResults> caseFieldsAggregations,\n+        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+\n+        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {\n+\n+            final String indexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+                .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+\n+            caseFieldsAggregations.add(new CaseTypesResults(getNameFromIndex(indexName,\n+                crossCaseTypeSearchRequest.getCaseTypeIds()),\n+                response.searchResult.getTotal())\n+            );\n+        }\n+    }\n+\n+    private String getNameFromIndex(final String index, List<String> caseTypeIds) {", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1OTUxNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456359514", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxOTE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex dcd9686cc..5ce61cb71 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -113,35 +113,49 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n-                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n     }\n \n-    private void buildCaseFieldsAggregations(\n-        final MultiSearchResult.MultiSearchResponse response,\n-        final List<CaseTypesResults> caseFieldsAggregations,\n-        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseFieldsAggregations,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n \n-        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {\n-\n-            final String indexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n-                .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n-\n-            caseFieldsAggregations.add(new CaseTypesResults(getNameFromIndex(indexName,\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);\n+            caseFieldsAggregations.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n                 crossCaseTypeSearchRequest.getCaseTypeIds()),\n                 response.searchResult.getTotal())\n             );\n         }\n     }\n \n-    private String getNameFromIndex(final String index, List<String> caseTypeIds) {\n-        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(\"_cases\")).replaceAll(\"\\\"\", \"\");\n-        return caseTypeIds.stream().filter(caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)).findFirst().get();\n+    private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+            .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+    }\n+\n+    private boolean hitsIsNotEmpty(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0;\n+    }\n+\n+    private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {\n+        String pureIndexFormat = applicationParams.getCasesIndexNameFormat().substring(2);\n+        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(pureIndexFormat))\n+            .replaceAll(\"\\\"\", \"\");\n+\n+        return caseTypeIds.stream().filter(\n+            caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)\n+        ).findFirst().orElseGet(() -> {\n+            log.error(\"The Case type id could be found using the following index name: {}\", caseTypeIdFromIndex);\n+            return \"index-error\";\n+        });\n     }\n \n     private List<CaseDetails> searchResultToCaseList(SearchResult searchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyMDUzOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455620538", "bodyText": "what about if the client has IDAM role caseworker-caa and request is ctid=*?\nIn that case the search needs to happen on any existing case type, because caseworker-caa can access all the case types", "author": "mario-paniccia", "createdAt": "2020-07-16T08:37:48Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -79,6 +99,22 @@ public CaseSearchResult searchCases(\n         return result;\n     }\n \n+    private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n+        if (isAConsolidationQuery(caseTypeIds)) {\n+            return getCaseTypes();\n+        }\n+        return caseTypeIds;", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1OTcyOQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456359729", "bodyText": "This feature has been implemented now.  DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyMDUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex a26d0262c..2b51008dc 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -100,19 +101,27 @@ public class CaseSearchEndpoint {\n     }\n \n     private List<String> getCaseTypeIds(List<String> caseTypeIds) {\n-        if (isAConsolidationQuery(caseTypeIds)) {\n+        if (isAllCaseTypesRequest(caseTypeIds)) {\n             return getCaseTypes();\n         }\n         return caseTypeIds;\n     }\n \n     private List<String> getCaseTypes() {\n-        final List<String> roles = userService.getUserRolesJurisdictions();\n-        return caseDefinitionRepository.getAllCaseTypesByJurisdictions(roles).get();\n+        if (userRepository.anyRoleEqualsAnyOf(applicationParams.getCcdAccessControlCrossJurisdictionRoles())) {\n+            return caseDefinitionRepository.getAllCaseTypesIDs();\n+        } else {\n+            return getCaseTypesFromIdamRoles();\n+        }\n+    }\n+\n+    private List<String> getCaseTypesFromIdamRoles() {\n+        List<String> jurisdictions = userRepository.getUserRolesJurisdictions();\n+        return caseDefinitionRepository.getCaseTypesIDsByJurisdictions(jurisdictions);\n     }\n \n-    private boolean isAConsolidationQuery(List<String> caseTypeIds) {\n-        return ElasticsearchRequest.SOURCE_WILDCARD.equals(caseTypeIds.get(0));\n+    private boolean isAllCaseTypesRequest(List<String> caseTypeIds) {\n+        return ElasticsearchRequest.WILDCARD.equals(caseTypeIds.get(0));\n     }\n \n     public static String buildCaseIds(CaseSearchResult caseSearchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3Njc4OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455676789", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CaseTypesResults {\n          \n          \n            \n            public class CaseTypeResults {\n          \n      \n    \n    \n  \n\nsingular", "author": "mario-paniccia", "createdAt": "2020-07-16T10:10:23Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package uk.gov.hmcts.ccd.domain.model.search;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class CaseTypesResults {", "originalCommit": "2581fb698fc6e1e4829e30f2248a5c621514da7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MDMxMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456360313", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3Njc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java b/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypeResults.java\nsimilarity index 54%\nrename from src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java\nrename to src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypeResults.java\nindex ff04c17d1..9b72e55f1 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypesResults.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseTypeResults.java\n\n@@ -2,19 +2,19 @@ package uk.gov.hmcts.ccd.domain.model.search;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n \n-public class CaseTypesResults {\n+public class CaseTypeResults {\n \n-    @JsonProperty(\"case_field_id\")\n+    @JsonProperty(\"case_type_id\")\n     private String caseTypeId;\n     private long total;\n \n-    public CaseTypesResults(String caseFieldId, long numberOfMatchedCases) {\n+    public CaseTypeResults(String caseTypeId, long total) {\n \n-        this.caseTypeId = caseFieldId;\n-        this.total = numberOfMatchedCases;\n+        this.caseTypeId = caseTypeId;\n+        this.total = total;\n     }\n \n-    public CaseTypesResults() {\n+    public CaseTypeResults() {\n     }\n \n     public String getCaseTypeId() {\n"}}, {"oid": "b02d66b501bddb7014098eac2de46cd5e83ed770", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b02d66b501bddb7014098eac2de46cd5e83ed770", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-16T10:13:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4ODg0OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455688849", "bodyText": "Maybe we should use the search.cases.index.name.format property to determine what to remove instead, since technically it is configurable.", "author": "danlysiak", "createdAt": "2020-07-16T10:32:45Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +113,35 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+    }\n+\n+    private void buildCaseFieldsAggregations(\n+        final MultiSearchResult.MultiSearchResponse response,\n+        final List<CaseTypesResults> caseFieldsAggregations,\n+        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+\n+        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {\n+\n+            final String indexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+                .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+\n+            caseFieldsAggregations.add(new CaseTypesResults(getNameFromIndex(indexName,\n+                crossCaseTypeSearchRequest.getCaseTypeIds()),\n+                response.searchResult.getTotal())\n+            );\n+        }\n+    }\n+\n+    private String getNameFromIndex(final String index, List<String> caseTypeIds) {\n+        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(\"_cases\")).replaceAll(\"\\\"\", \"\");", "originalCommit": "b02d66b501bddb7014098eac2de46cd5e83ed770", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1NTEyOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456455128", "bodyText": "DONE : search.cases.index.name.format=${ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT:%s_cases}  does not give me _case directly. But I will remove the % .", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T13:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4ODg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex dcd9686cc..5ce61cb71 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -113,35 +113,49 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n-                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n     }\n \n-    private void buildCaseFieldsAggregations(\n-        final MultiSearchResult.MultiSearchResponse response,\n-        final List<CaseTypesResults> caseFieldsAggregations,\n-        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseFieldsAggregations,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n \n-        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {\n-\n-            final String indexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n-                .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n-\n-            caseFieldsAggregations.add(new CaseTypesResults(getNameFromIndex(indexName,\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);\n+            caseFieldsAggregations.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n                 crossCaseTypeSearchRequest.getCaseTypeIds()),\n                 response.searchResult.getTotal())\n             );\n         }\n     }\n \n-    private String getNameFromIndex(final String index, List<String> caseTypeIds) {\n-        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(\"_cases\")).replaceAll(\"\\\"\", \"\");\n-        return caseTypeIds.stream().filter(caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)).findFirst().get();\n+    private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+            .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+    }\n+\n+    private boolean hitsIsNotEmpty(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0;\n+    }\n+\n+    private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {\n+        String pureIndexFormat = applicationParams.getCasesIndexNameFormat().substring(2);\n+        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(pureIndexFormat))\n+            .replaceAll(\"\\\"\", \"\");\n+\n+        return caseTypeIds.stream().filter(\n+            caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)\n+        ).findFirst().orElseGet(() -> {\n+            log.error(\"The Case type id could be found using the following index name: {}\", caseTypeIdFromIndex);\n+            return \"index-error\";\n+        });\n     }\n \n     private List<CaseDetails> searchResultToCaseList(SearchResult searchResult) {\n"}}, {"oid": "ddce0a2d95f1dd21f6a96ad3a5b54090024c078c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ddce0a2d95f1dd21f6a96ad3a5b54090024c078c", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-16T12:06:41Z", "type": "commit"}, {"oid": "e14197f5256607574324a937667c0a7a7edde27d", "url": "https://github.com/hmcts/ccd-data-store-api/commit/e14197f5256607574324a937667c0a7a7edde27d", "message": "Merge branch 'develop' of github.com:hmcts/ccd-data-store-api into RDM-8751", "committedDate": "2020-07-16T12:07:09Z", "type": "commit"}, {"oid": "b33a9774f0d7665f1d612e42ed562a5bc78c4c42", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b33a9774f0d7665f1d612e42ed562a5bc78c4c42", "message": "merge dev", "committedDate": "2020-07-16T12:10:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc2MTExOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455761118", "bodyText": "this code is difficult to read and quickly understand. Please add an utility method with a nice name in MultiSearchResult.MultiSearchResponse", "author": "mario-paniccia", "createdAt": "2020-07-16T12:50:59Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +113,35 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+    }\n+\n+    private void buildCaseFieldsAggregations(\n+        final MultiSearchResult.MultiSearchResponse response,\n+        final List<CaseTypesResults> caseFieldsAggregations,\n+        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+\n+        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {\n+\n+            final String indexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+                .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();", "originalCommit": "b02d66b501bddb7014098eac2de46cd5e83ed770", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MzUwOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456363508", "bodyText": "As per conversation MultiSearchResult.MultiSearchResponse is part of the framework. However getIndexName() method has been created.  DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc2MTExOA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex dcd9686cc..5ce61cb71 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -113,35 +113,49 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n-                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n     }\n \n-    private void buildCaseFieldsAggregations(\n-        final MultiSearchResult.MultiSearchResponse response,\n-        final List<CaseTypesResults> caseFieldsAggregations,\n-        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseFieldsAggregations,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n \n-        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {\n-\n-            final String indexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n-                .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n-\n-            caseFieldsAggregations.add(new CaseTypesResults(getNameFromIndex(indexName,\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);\n+            caseFieldsAggregations.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n                 crossCaseTypeSearchRequest.getCaseTypeIds()),\n                 response.searchResult.getTotal())\n             );\n         }\n     }\n \n-    private String getNameFromIndex(final String index, List<String> caseTypeIds) {\n-        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(\"_cases\")).replaceAll(\"\\\"\", \"\");\n-        return caseTypeIds.stream().filter(caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)).findFirst().get();\n+    private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+            .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+    }\n+\n+    private boolean hitsIsNotEmpty(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0;\n+    }\n+\n+    private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {\n+        String pureIndexFormat = applicationParams.getCasesIndexNameFormat().substring(2);\n+        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(pureIndexFormat))\n+            .replaceAll(\"\\\"\", \"\");\n+\n+        return caseTypeIds.stream().filter(\n+            caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)\n+        ).findFirst().orElseGet(() -> {\n+            log.error(\"The Case type id could be found using the following index name: {}\", caseTypeIdFromIndex);\n+            return \"index-error\";\n+        });\n     }\n \n     private List<CaseDetails> searchResultToCaseList(SearchResult searchResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc2MTczOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r455761738", "bodyText": "this code is difficult to read and quickly understand. Please add an utility method with a nice name in MultiSearchResult.MultiSearchResponse", "author": "mario-paniccia", "createdAt": "2020-07-16T12:52:03Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -110,12 +113,35 @@ private CaseSearchResult toCaseDetailsSearchResult(MultiSearchResult multiSearch\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n+                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(totalHits, caseDetails);\n+        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+    }\n+\n+    private void buildCaseFieldsAggregations(\n+        final MultiSearchResult.MultiSearchResponse response,\n+        final List<CaseTypesResults> caseFieldsAggregations,\n+        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+\n+        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {", "originalCommit": "b02d66b501bddb7014098eac2de46cd5e83ed770", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNTMyOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456315328", "bodyText": "can we call it hitsIsNotEmpty please", "author": "mario-paniccia", "createdAt": "2020-07-17T09:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc2MTczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2Mzc4MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456363781", "bodyText": "As per conversation MultiSearchResult.MultiSearchResponse is part of the framework. However hitsIsNotEmpty() method has been created.  DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T10:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc2MTczOA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\nindex dcd9686cc..5ce61cb71 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java\n\n@@ -113,35 +113,49 @@ public class ElasticsearchCaseSearchOperation implements CaseSearchOperation {\n                 throw new BadSearchRequest(errMsg);\n             }\n             if (response.searchResult != null) {\n-                buildCaseFieldsAggregations(response, caseFieldsAggregations, crossCaseTypeSearchRequest);\n+                buildCaseTypesResults(response, caseTypeResults, crossCaseTypeSearchRequest);\n                 caseDetails.addAll(searchResultToCaseList(response.searchResult));\n                 totalHits += response.searchResult.getTotal();\n             }\n         }\n \n-        return new CaseSearchResult(caseFieldsAggregations, totalHits, caseDetails);\n+        return new CaseSearchResult(caseTypeResults, totalHits, caseDetails);\n     }\n \n-    private void buildCaseFieldsAggregations(\n-        final MultiSearchResult.MultiSearchResponse response,\n-        final List<CaseTypesResults> caseFieldsAggregations,\n-        final CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n+    private void buildCaseTypesResults(\n+        MultiSearchResult.MultiSearchResponse response,\n+        List<CaseTypeResults> caseFieldsAggregations,\n+        CrossCaseTypeSearchRequest crossCaseTypeSearchRequest) {\n \n-        if (response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0) {\n-\n-            final String indexName = response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n-                .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n-\n-            caseFieldsAggregations.add(new CaseTypesResults(getNameFromIndex(indexName,\n+        if (hitsIsNotEmpty(response)) {\n+            String indexName = getIndexName(response);\n+            caseFieldsAggregations.add(new CaseTypeResults(getCaseTypeIDFromIndex(indexName,\n                 crossCaseTypeSearchRequest.getCaseTypeIds()),\n                 response.searchResult.getTotal())\n             );\n         }\n     }\n \n-    private String getNameFromIndex(final String index, List<String> caseTypeIds) {\n-        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(\"_cases\")).replaceAll(\"\\\"\", \"\");\n-        return caseTypeIds.stream().filter(caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)).findFirst().get();\n+    private String getIndexName(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\")\n+            .getAsJsonArray().get(0).getAsJsonObject().get(\"_index\").toString();\n+    }\n+\n+    private boolean hitsIsNotEmpty(MultiSearchResult.MultiSearchResponse response) {\n+        return response.searchResult.getJsonObject().getAsJsonObject(\"hits\").get(\"hits\").getAsJsonArray().size() != 0;\n+    }\n+\n+    private String getCaseTypeIDFromIndex(final String index, List<String> caseTypeIds) {\n+        String pureIndexFormat = applicationParams.getCasesIndexNameFormat().substring(2);\n+        final String caseTypeIdFromIndex = index.substring(0, index.indexOf(pureIndexFormat))\n+            .replaceAll(\"\\\"\", \"\");\n+\n+        return caseTypeIds.stream().filter(\n+            caseTypeId -> caseTypeId.equalsIgnoreCase(caseTypeIdFromIndex)\n+        ).findFirst().orElseGet(() -> {\n+            log.error(\"The Case type id could be found using the following index name: {}\", caseTypeIdFromIndex);\n+            return \"index-error\";\n+        });\n     }\n \n     private List<CaseDetails> searchResultToCaseList(SearchResult searchResult) {\n"}}, {"oid": "2c4c0b6509ed257af21df3e9e37819bcd48b462d", "url": "https://github.com/hmcts/ccd-data-store-api/commit/2c4c0b6509ed257af21df3e9e37819bcd48b462d", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-17T08:36:47Z", "type": "commit"}, {"oid": "5a0d2ac020083d4d45d4f905bde7101d5aca0821", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5a0d2ac020083d4d45d4f905bde7101d5aca0821", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-17T09:48:43Z", "type": "commit"}, {"oid": "a99094e23177c34cf70c086bfc1e7bc46ae3f524", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a99094e23177c34cf70c086bfc1e7bc46ae3f524", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-17T11:10:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMjk1Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456402953", "bodyText": "can you update the Swagger documentation as well with:\n@ApiParam(value = \"Comma separated list of case type ID(s) or '*' if the search should be applied on any existing case type. Note that using '*' is an expensive operation and might have low response times so always prefer explicitly listing the case types when known in advance\", required = true)", "author": "mario-paniccia", "createdAt": "2020-07-17T12:13:08Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -36,12 +51,21 @@\n \n     private final CaseSearchOperation caseSearchOperation;\n     private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+    private final CaseDefinitionRepository caseDefinitionRepository;\n+    private final UserRepository userRepository;\n+    private final ApplicationParams applicationParams;\n \n     @Autowired\n     public CaseSearchEndpoint(@Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n-                              ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+                              @Qualifier(CachedCaseDefinitionRepository.QUALIFIER) CaseDefinitionRepository caseDefinitionRepository,\n+                              @Qualifier(DefaultUserRepository.QUALIFIER)  UserRepository userRepository,\n+                              ElasticsearchQueryHelper elasticsearchQueryHelper,\n+                              ApplicationParams applicationParams) {\n         this.caseSearchOperation = caseSearchOperation;\n         this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+        this.caseDefinitionRepository = caseDefinitionRepository;\n+        this.userRepository = userRepository;\n+        this.applicationParams = applicationParams;\n     }\n \n     @PostMapping(value = \"/searchCases\")", "originalCommit": "a99094e23177c34cf70c086bfc1e7bc46ae3f524", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0NTM4OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r456445389", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-17T13:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMjk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "476c5b547e3c4681363317a9543cee2ba703556b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\nindex 21b326eba..484ecbf7c 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java\n\n@@ -58,7 +59,7 @@ public class CaseSearchEndpoint {\n     @Autowired\n     public CaseSearchEndpoint(@Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n                               @Qualifier(CachedCaseDefinitionRepository.QUALIFIER) CaseDefinitionRepository caseDefinitionRepository,\n-                              @Qualifier(DefaultUserRepository.QUALIFIER)  UserRepository userRepository,\n+                              @Qualifier(DefaultUserRepository.QUALIFIER) UserRepository userRepository,\n                               ElasticsearchQueryHelper elasticsearchQueryHelper,\n                               ApplicationParams applicationParams) {\n         this.caseSearchOperation = caseSearchOperation;\n"}}, {"oid": "1dd0a29d52314e51db292f7e4a24696de5f46e4c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/1dd0a29d52314e51db292f7e4a24696de5f46e4c", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-17T13:10:41Z", "type": "commit"}, {"oid": "08ed61919d82daf7a49f0f13af2e692244b51357", "url": "https://github.com/hmcts/ccd-data-store-api/commit/08ed61919d82daf7a49f0f13af2e692244b51357", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-17T13:42:41Z", "type": "commit"}, {"oid": "9caffd4ca9b32d1686e5960981f035b1c6fe844a", "url": "https://github.com/hmcts/ccd-data-store-api/commit/9caffd4ca9b32d1686e5960981f035b1c6fe844a", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-17T14:31:17Z", "type": "commit"}, {"oid": "6c10372187307f6d4f7a32a8b917855406987dea", "url": "https://github.com/hmcts/ccd-data-store-api/commit/6c10372187307f6d4f7a32a8b917855406987dea", "message": "rename", "committedDate": "2020-07-17T15:03:20Z", "type": "commit"}, {"oid": "c8e1acc4ce006ef4c51363ef944c43d2a941522f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c8e1acc4ce006ef4c51363ef944c43d2a941522f", "message": "rename", "committedDate": "2020-07-17T15:03:45Z", "type": "commit"}, {"oid": "1914340c68f636fd743431e12186cfaa3a91b2ca", "url": "https://github.com/hmcts/ccd-data-store-api/commit/1914340c68f636fd743431e12186cfaa3a91b2ca", "message": "rename", "committedDate": "2020-07-17T15:05:32Z", "type": "commit"}, {"oid": "e5f99327ee20454393e44dd0c22ec9dfe90fc0a3", "url": "https://github.com/hmcts/ccd-data-store-api/commit/e5f99327ee20454393e44dd0c22ec9dfe90fc0a3", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T07:59:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1Njk5OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457156999", "bodyText": "is this needed?", "author": "mario-paniccia", "createdAt": "2020-07-20T08:08:07Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java", "diffHunk": "@@ -213,6 +215,32 @@ public JurisdictionDefinition getJurisdictionFromDefinitionStore(String jurisdic\n         return jurisdictionDefinitions.get(0);\n     }\n \n+    @Override\n+    public List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds) {\n+\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+        if (jurisdictionDefinitions.isEmpty()) {\n+            LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n+            Arrays.asList();", "originalCommit": "e5f99327ee20454393e44dd0c22ec9dfe90fc0a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\nindex 682638940..ad65c77fd 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n\n@@ -221,7 +221,7 @@ public class DefaultCaseDefinitionRepository implements CaseDefinitionRepository\n         List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n         if (jurisdictionDefinitions.isEmpty()) {\n             LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n-            Arrays.asList();\n+            return Collections.emptyList();\n         }\n         List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n         return caseTypes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MTgyNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457161826", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n          \n          \n            \n                    return caseTypes;\n          \n          \n            \n                    return getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);", "author": "mario-paniccia", "createdAt": "2020-07-20T08:14:40Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java", "diffHunk": "@@ -213,6 +215,32 @@ public JurisdictionDefinition getJurisdictionFromDefinitionStore(String jurisdic\n         return jurisdictionDefinitions.get(0);\n     }\n \n+    @Override\n+    public List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds) {\n+\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+        if (jurisdictionDefinitions.isEmpty()) {\n+            LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n+            Arrays.asList();\n+        }\n+        List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+        return caseTypes;", "originalCommit": "e5f99327ee20454393e44dd0c22ec9dfe90fc0a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NTg0Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457165847", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-20T08:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MTgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\nindex 682638940..ad65c77fd 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n\n@@ -221,7 +221,7 @@ public class DefaultCaseDefinitionRepository implements CaseDefinitionRepository\n         List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n         if (jurisdictionDefinitions.isEmpty()) {\n             LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n-            Arrays.asList();\n+            return Collections.emptyList();\n         }\n         List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n         return caseTypes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MzIyMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457163222", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Arrays.asList());\n          \n          \n            \n                    List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Collections.emptyList());", "author": "mario-paniccia", "createdAt": "2020-07-20T08:16:26Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java", "diffHunk": "@@ -213,6 +215,32 @@ public JurisdictionDefinition getJurisdictionFromDefinitionStore(String jurisdic\n         return jurisdictionDefinitions.get(0);\n     }\n \n+    @Override\n+    public List<String> getCaseTypesIDsByJurisdictions(List<String> jurisdictionIds) {\n+\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(jurisdictionIds);\n+        if (jurisdictionDefinitions.isEmpty()) {\n+            LOG.warn(\"Definitions not found for requested jurisdictions {}\", jurisdictionIds);\n+            return Collections.emptyList();\n+        }\n+        List<String> caseTypes = getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n+        return caseTypes;\n+    }\n+\n+    @Override\n+    public List<String> getAllCaseTypesIDs() {\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Arrays.asList());", "originalCommit": "def4eee0ac7a536d85c8a23e10991568db9265cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NTg4NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457165884", "bodyText": "DONE", "author": "Thor-tech-of-metal", "createdAt": "2020-07-20T08:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MzIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\nindex db16b78d5..ad65c77fd 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java\n\n@@ -229,7 +229,7 @@ public class DefaultCaseDefinitionRepository implements CaseDefinitionRepository\n \n     @Override\n     public List<String> getAllCaseTypesIDs() {\n-        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Arrays.asList());\n+        List<JurisdictionDefinition> jurisdictionDefinitions = getJurisdictionsFromDefinitionStore(Collections.emptyList());\n         return getCaseTypeIdFromJurisdictionDefinition(jurisdictionDefinitions);\n     }\n \n"}}, {"oid": "def4eee0ac7a536d85c8a23e10991568db9265cb", "url": "https://github.com/hmcts/ccd-data-store-api/commit/def4eee0ac7a536d85c8a23e10991568db9265cb", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T08:17:18Z", "type": "commit"}, {"oid": "2d17c92f93c568cdcdda1039cc39ae4eb42d9329", "url": "https://github.com/hmcts/ccd-data-store-api/commit/2d17c92f93c568cdcdda1039cc39ae4eb42d9329", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T08:22:48Z", "type": "commit"}, {"oid": "03b3f9fe95efee9e2c9f2d98b93f34c754e0a2c6", "url": "https://github.com/hmcts/ccd-data-store-api/commit/03b3f9fe95efee9e2c9f2d98b93f34c754e0a2c6", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T08:58:57Z", "type": "commit"}, {"oid": "3c76b12089aea57126adba8d7332accfc1617686", "url": "https://github.com/hmcts/ccd-data-store-api/commit/3c76b12089aea57126adba8d7332accfc1617686", "message": "simplified logic around returning metadata fields. Added missing unit tests", "committedDate": "2020-07-20T09:39:35Z", "type": "commit"}, {"oid": "3ec7b5bd37dda695d2402701f6f012788c10ce72", "url": "https://github.com/hmcts/ccd-data-store-api/commit/3ec7b5bd37dda695d2402701f6f012788c10ce72", "message": "Merge remote-tracking branch 'origin/RDM-8751' into RDM-8751", "committedDate": "2020-07-20T09:39:46Z", "type": "commit"}, {"oid": "89b60a205a1cdaac833400e6b20a75c2b2ee2333", "url": "https://github.com/hmcts/ccd-data-store-api/commit/89b60a205a1cdaac833400e6b20a75c2b2ee2333", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T09:44:04Z", "type": "commit"}, {"oid": "b9591e9326ed13b7ecfd25b4501e5bf8ad69bd58", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b9591e9326ed13b7ecfd25b4501e5bf8ad69bd58", "message": "Merge branch 'RDM-8751' of github.com:hmcts/ccd-data-store-api into RDM-8751", "committedDate": "2020-07-20T09:44:34Z", "type": "commit"}, {"oid": "20cc6cc2e209d9194fa255c33c33e2590b826458", "url": "https://github.com/hmcts/ccd-data-store-api/commit/20cc6cc2e209d9194fa255c33c33e2590b826458", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T09:53:40Z", "type": "commit"}, {"oid": "45769d151e863c6ed841fe9b34f1b0b65ebf390c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/45769d151e863c6ed841fe9b34f1b0b65ebf390c", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T11:18:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI5NDI3Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457294273", "bodyText": "can you put back the formatting please", "author": "mario-paniccia", "createdAt": "2020-07-20T11:22:52Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java", "diffHunk": "@@ -10,29 +19,20 @@\n import static uk.gov.hmcts.ccd.data.casedetails.CaseDetailsEntity.DATA_CLASSIFICATION_COL;\n import static uk.gov.hmcts.ccd.domain.model.search.elasticsearch.ElasticsearchRequest.SOURCE;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.node.ArrayNode;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.fasterxml.jackson.databind.node.TextNode;\n-import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n-import uk.gov.hmcts.ccd.domain.model.definition.SearchAliasField;\n-import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.ElasticsearchRequest;\n-import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n-\n /**\n  * Sample ES json search request.\n  * {\n- *   \"_source\": [\"alias.searchField1\", \"alias.searchField2\"],\n- *   \"query\": {\n- *     \"bool\": {\n- *       \"filter\": {\n- *         \"match\": { \"state\": \"AwaitingPayment\"}\n- *       }\n- *     }\n- *   },\n- *  \"sort\": {\n- *     \"id\": { \"order\":\"asc\" }\n- *   }\n+ * \"_source\": [\"alias.searchField1\", \"alias.searchField2\"],\n+ * \"query\": {\n+ * \"bool\": {\n+ * \"filter\": {\n+ * \"match\": { \"state\": \"AwaitingPayment\"}", "originalCommit": "20cc6cc2e209d9194fa255c33c33e2590b826458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\nindex 2b98c0ec2..5bc1ba069 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/CrossCaseTypeSearchRequest.java\n\n@@ -22,17 +22,17 @@ import static uk.gov.hmcts.ccd.domain.model.search.elasticsearch.ElasticsearchRe\n /**\n  * Sample ES json search request.\n  * {\n- * \"_source\": [\"alias.searchField1\", \"alias.searchField2\"],\n- * \"query\": {\n- * \"bool\": {\n- * \"filter\": {\n- * \"match\": { \"state\": \"AwaitingPayment\"}\n- * }\n- * }\n- * },\n- * \"sort\": {\n- * \"id\": { \"order\":\"asc\" }\n- * }\n+ *   \"_source\": [\"alias.searchField1\", \"alias.searchField2\"],\n+ *   \"query\": {\n+ *     \"bool\": {\n+ *       \"filter\": {\n+ *         \"match\": { \"state\": \"AwaitingPayment\"}\n+ *       }\n+ *     }\n+ *   },\n+ *  \"sort\": {\n+ *     \"id\": { \"order\":\"asc\" }\n+ *   }\n  * }\n  */\n public class CrossCaseTypeSearchRequest {\n"}}, {"oid": "665e693f32fb6933692b153550b4f1455ca37358", "url": "https://github.com/hmcts/ccd-data-store-api/commit/665e693f32fb6933692b153550b4f1455ca37358", "message": "added explanatory comment", "committedDate": "2020-07-20T11:28:28Z", "type": "commit"}, {"oid": "f68c936180e7835a6b8b86a571c3463ed556d49e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f68c936180e7835a6b8b86a571c3463ed556d49e", "message": "Merge remote-tracking branch 'origin/RDM-8751' into RDM-8751", "committedDate": "2020-07-20T11:28:36Z", "type": "commit"}, {"oid": "a524f899c55373f63d1a464e039756450c46718d", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a524f899c55373f63d1a464e039756450c46718d", "message": "RDM-8751: Enhance external search API to retrieve summary information for cases of an organisation\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [RDM-8751] (https://tools.hmcts.net/jira/browse/RDM-8751).", "committedDate": "2020-07-20T11:29:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzE3Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1014#discussion_r457303177", "bodyText": "no changes in this class other than the imports can you undo please", "author": "mario-paniccia", "createdAt": "2020-07-20T11:37:31Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/security/AuthorisedCaseSearchOperation.java", "diffHunk": "@@ -36,6 +23,19 @@\n import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.ElasticsearchCaseSearchOperation;\n import uk.gov.hmcts.ccd.domain.service.security.AuthorisedCaseDefinitionDataService;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;", "originalCommit": "f68c936180e7835a6b8b86a571c3463ed556d49e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ad5e2e3d2e63161c694ad46a49b35257ff52b0b", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/security/AuthorisedCaseSearchOperation.java b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/security/AuthorisedCaseSearchOperation.java\nindex b77fff0b6..b3a2f086b 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/security/AuthorisedCaseSearchOperation.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/security/AuthorisedCaseSearchOperation.java\n\n@@ -23,19 +36,6 @@ import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.CrossCaseTypeSearchR\n import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.ElasticsearchCaseSearchOperation;\n import uk.gov.hmcts.ccd.domain.service.security.AuthorisedCaseDefinitionDataService;\n \n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-import static java.util.Optional.of;\n-import static java.util.Optional.ofNullable;\n-import static org.jooq.lambda.function.Functions.not;\n-import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n-\n @Service\n @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER)\n @Slf4j\n"}}]}