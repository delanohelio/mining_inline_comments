{"pr_number": 1018, "pr_title": "RDM-9045 - Add configurable logging of roles for requests", "pr_createdAt": "2020-07-20T08:22:41Z", "pr_url": "https://github.com/hmcts/ccd-data-store-api/pull/1018", "timeline": [{"oid": "dcfc8dde5eddee48770ddb25a885e4a378a63f0f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/dcfc8dde5eddee48770ddb25a885e4a378a63f0f", "message": "RDM-9045 - Add configurable logging of roles for requests", "committedDate": "2020-07-20T08:12:28Z", "type": "commit"}, {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584", "url": "https://github.com/hmcts/ccd-data-store-api/commit/64c7a669a14ff5e152e76e18b3c5bb68c1263584", "message": "Suppressions/checkstyle", "committedDate": "2020-07-20T08:20:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457176714", "bodyText": "i guess it won't log in case of auth failures. Is that OK?", "author": "smathangi", "createdAt": "2020-07-20T08:33:50Z", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import com.microsoft.applicationinsights.telemetry.SeverityLevel;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.AppInsights;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Component\n+@ConditionalOnProperty(value = \"role.logging.enabled\", havingValue = \"true\")\n+@Slf4j\n+public class RoleLoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[ROLE LOG] Attempting to serve request %s %s for user with IDAM roles %s\";\n+\n+    private final AppInsights appInsights;\n+    private final SecurityUtils securityUtils;\n+    private final Pattern pathPattern;\n+\n+    @Autowired\n+    public RoleLoggingFilter(AppInsights appInsights, SecurityUtils securityUtils, @Value(\"${role.logging.path.regex}\") String pathRegex) {\n+        this.appInsights = appInsights;\n+        this.securityUtils = securityUtils;\n+        this.pathPattern = Pattern.compile(pathRegex);\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+        throws ServletException, IOException {\n+        String message = buildLogMessage(request, securityUtils.getUserInfo());", "originalCommit": "64c7a669a14ff5e152e76e18b3c5bb68c1263584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NzY2NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457177664", "bodyText": "That's right, on the 3A was decided we only want it for authenticated requests \ud83d\udc4d", "author": "danlysiak", "createdAt": "2020-07-20T08:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4NTQxMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457185413", "bodyText": "Well, I would suggest to log all requests no matter authorisation passes or not. We had some cases to diagnose with role-based authorisation failures and we may have more.", "author": "MSancaktutar", "createdAt": "2020-07-20T08:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5NjM0Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457196347", "bodyText": "Apologies @MSancaktutar, in my haste I put authorised when I meant authenticated.. If a request is unauthorised (e.g. user requests case they don't have access to) it DOES still log!", "author": "danlysiak", "createdAt": "2020-07-20T08:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5OTU2NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457199565", "bodyText": "Well, in fact, what I meant was... A user's roles not being sufficient to access and operation would be an authorisation failure. And even in that case, we should log the roles.", "author": "MSancaktutar", "createdAt": "2020-07-20T09:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "dab81c865bf87859c2f46066fef3ec85e699b36a", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java b/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\nsimilarity index 55%\nrename from src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java\nrename to src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\nindex dcc91b98e..cac42d7f7 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\n\n@@ -1,13 +1,7 @@\n package uk.gov.hmcts.ccd.security.filters;\n \n-import com.microsoft.applicationinsights.telemetry.SeverityLevel;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.stereotype.Component;\n import org.springframework.web.filter.OncePerRequestFilter;\n-import uk.gov.hmcts.ccd.AppInsights;\n import uk.gov.hmcts.ccd.data.SecurityUtils;\n import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n \n"}}, {"oid": "dab81c865bf87859c2f46066fef3ec85e699b36a", "url": "https://github.com/hmcts/ccd-data-store-api/commit/dab81c865bf87859c2f46066fef3ec85e699b36a", "message": "RDM-9045 - Always include new filter in filter chain; use debug in AI", "committedDate": "2020-07-20T10:09:24Z", "type": "commit"}, {"oid": "79fe1fe77a60650f17635789a60d347142f5da01", "url": "https://github.com/hmcts/ccd-data-store-api/commit/79fe1fe77a60650f17635789a60d347142f5da01", "message": "Missed changes", "committedDate": "2020-07-20T10:09:34Z", "type": "commit"}, {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095", "url": "https://github.com/hmcts/ccd-data-store-api/commit/23ccbaeb5bb8c24ced929d3ec34c249937adf095", "message": "Typo in commented property", "committedDate": "2020-07-20T10:46:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mjc0OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457372749", "bodyText": "I think this name is a bit too generic. We can't log everything with this filter. Maybe a bit more specific name would help", "author": "mario-paniccia", "createdAt": "2020-07-20T13:16:57Z", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+public class LoggingFilter extends OncePerRequestFilter {", "originalCommit": "23ccbaeb5bb8c24ced929d3ec34c249937adf095", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e2c5068030060c89eecefc74d82fffd51c05cab", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java b/src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\nsimilarity index 74%\nrename from src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\nrename to src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\nindex cac42d7f7..f900b00ab 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\n\n@@ -12,15 +12,20 @@ import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n import java.util.regex.Pattern;\n \n+/**\n+ * Used to log information about requests and the invoking user.\n+ *\n+ * To be enabled this filter should be registered after successful authentication as part of the Spring Security filter chain.\n+ */\n @Slf4j\n-public class LoggingFilter extends OncePerRequestFilter {\n+public class SecurityLoggingFilter extends OncePerRequestFilter {\n \n-    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";\n+    private static final String LOG_MESSAGE_TEMPLATE = \"Attempting to serve request %s %s for user with IDAM roles %s\";\n \n     private final SecurityUtils securityUtils;\n     private final Pattern pathPattern;\n \n-    public LoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n+    public SecurityLoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n         this.securityUtils = securityUtils;\n         this.pathPattern = Pattern.compile(pathRegex);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MzAyNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457373024", "bodyText": "can you add a short Javadoc description please", "author": "mario-paniccia", "createdAt": "2020-07-20T13:17:22Z", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j", "originalCommit": "23ccbaeb5bb8c24ced929d3ec34c249937adf095", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e2c5068030060c89eecefc74d82fffd51c05cab", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java b/src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\nsimilarity index 74%\nrename from src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\nrename to src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\nindex cac42d7f7..f900b00ab 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\n\n@@ -12,15 +12,20 @@ import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n import java.util.regex.Pattern;\n \n+/**\n+ * Used to log information about requests and the invoking user.\n+ *\n+ * To be enabled this filter should be registered after successful authentication as part of the Spring Security filter chain.\n+ */\n @Slf4j\n-public class LoggingFilter extends OncePerRequestFilter {\n+public class SecurityLoggingFilter extends OncePerRequestFilter {\n \n-    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";\n+    private static final String LOG_MESSAGE_TEMPLATE = \"Attempting to serve request %s %s for user with IDAM roles %s\";\n \n     private final SecurityUtils securityUtils;\n     private final Pattern pathPattern;\n \n-    public LoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n+    public SecurityLoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n         this.securityUtils = securityUtils;\n         this.pathPattern = Pattern.compile(pathRegex);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4Nzg5OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457387898", "bodyText": "isn't it simpler to just log on INFO? it's definitely an important type of information that can be logged as INFO.\nThis would be a safer approach as we wouldn't need to change the AppInsights log level", "author": "mario-paniccia", "createdAt": "2020-07-20T13:34:19Z", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+public class LoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";\n+\n+    private final SecurityUtils securityUtils;\n+    private final Pattern pathPattern;\n+\n+    public LoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n+        this.securityUtils = securityUtils;\n+        this.pathPattern = Pattern.compile(pathRegex);\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+        throws ServletException, IOException {\n+        log.debug(buildLogMessage(request, securityUtils.getUserInfo()));", "originalCommit": "23ccbaeb5bb8c24ced929d3ec34c249937adf095", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e2c5068030060c89eecefc74d82fffd51c05cab", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java b/src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\nsimilarity index 74%\nrename from src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\nrename to src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\nindex cac42d7f7..f900b00ab 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\n\n@@ -12,15 +12,20 @@ import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n import java.util.regex.Pattern;\n \n+/**\n+ * Used to log information about requests and the invoking user.\n+ *\n+ * To be enabled this filter should be registered after successful authentication as part of the Spring Security filter chain.\n+ */\n @Slf4j\n-public class LoggingFilter extends OncePerRequestFilter {\n+public class SecurityLoggingFilter extends OncePerRequestFilter {\n \n-    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";\n+    private static final String LOG_MESSAGE_TEMPLATE = \"Attempting to serve request %s %s for user with IDAM roles %s\";\n \n     private final SecurityUtils securityUtils;\n     private final Pattern pathPattern;\n \n-    public LoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n+    public SecurityLoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n         this.securityUtils = securityUtils;\n         this.pathPattern = Pattern.compile(pathRegex);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5MDAyNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457390024", "bodyText": "doesn't LOG4J add the class name ([LOG FILTER]) already by default?", "author": "mario-paniccia", "createdAt": "2020-07-20T13:36:35Z", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+public class LoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";", "originalCommit": "23ccbaeb5bb8c24ced929d3ec34c249937adf095", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwNjE1OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457406159", "bodyText": "Initially added to enable easier searching by a consistent term on AI (as L&A does), but good point, probably not much point as can still search by logger name. Removing.", "author": "danlysiak", "createdAt": "2020-07-20T13:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5MDAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "5e2c5068030060c89eecefc74d82fffd51c05cab", "chunk": "diff --git a/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java b/src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\nsimilarity index 74%\nrename from src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\nrename to src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\nindex cac42d7f7..f900b00ab 100644\n--- a/src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java\n+++ b/src/main/java/uk/gov/hmcts/ccd/security/filters/SecurityLoggingFilter.java\n\n@@ -12,15 +12,20 @@ import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n import java.util.regex.Pattern;\n \n+/**\n+ * Used to log information about requests and the invoking user.\n+ *\n+ * To be enabled this filter should be registered after successful authentication as part of the Spring Security filter chain.\n+ */\n @Slf4j\n-public class LoggingFilter extends OncePerRequestFilter {\n+public class SecurityLoggingFilter extends OncePerRequestFilter {\n \n-    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";\n+    private static final String LOG_MESSAGE_TEMPLATE = \"Attempting to serve request %s %s for user with IDAM roles %s\";\n \n     private final SecurityUtils securityUtils;\n     private final Pattern pathPattern;\n \n-    public LoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n+    public SecurityLoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n         this.securityUtils = securityUtils;\n         this.pathPattern = Pattern.compile(pathRegex);\n     }\n"}}, {"oid": "5e2c5068030060c89eecefc74d82fffd51c05cab", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5e2c5068030060c89eecefc74d82fffd51c05cab", "message": "Review comments", "committedDate": "2020-07-20T14:38:04Z", "type": "commit"}, {"oid": "ac0f68c445f7a7bd0410dd8c5ec0648e253c8641", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ac0f68c445f7a7bd0410dd8c5ec0648e253c8641", "message": "Checkstyle", "committedDate": "2020-07-20T14:43:24Z", "type": "commit"}, {"oid": "8e0301f01aa1700e2aeaa05adb2325b563351598", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8e0301f01aa1700e2aeaa05adb2325b563351598", "message": "Revert AI agent", "committedDate": "2020-07-20T14:57:34Z", "type": "commit"}]}