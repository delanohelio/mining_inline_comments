{"pr_number": 882, "pr_title": "Allow TOKENGEN and TOKENDUMP to be used always on custom keys without secret", "pr_createdAt": "2020-12-04T16:25:33Z", "pr_url": "https://github.com/senx/warp10-platform/pull/882", "timeline": [{"oid": "f28a35fb7245fe8fdb1de81275657d212e317090", "url": "https://github.com/senx/warp10-platform/commit/f28a35fb7245fe8fdb1de81275657d212e317090", "message": "Allow TOKENGEN and TOKENDUMP to be used always on custom keys without secret", "committedDate": "2020-12-04T13:14:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNzM5Ng==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r536227396", "bodyText": "since List is imported, you can drop java.util. java.lang.String can also be replaced by String throughout.", "author": "hbs", "createdAt": "2020-12-04T16:36:11Z", "path": "token/src/main/java/io/warp10/quasar/encoder/QuasarTokenEncoder.java", "diffHunk": "@@ -32,18 +32,20 @@\n \n import java.nio.ByteBuffer;\n import java.nio.ByteOrder;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n \n public class QuasarTokenEncoder {\n \n-  private final TSerializer serializer = new TSerializer(new TCompactProtocol.Factory());\n-\n   public String deliverReadToken(String appName, String producerUID, String ownerUID, java.util.List<java.lang.String> apps, long ttl, KeyStore keystore) throws TException {\n     ReadToken token = getReadToken(appName, producerUID, Arrays.asList(ownerUID), null, apps, null, null, ttl);\n     return cypherToken(token, keystore);\n   }\n \n-  public String deliverReadToken(String appName, String producerUID, String ownerUID, java.util.List<java.lang.String> apps,  Map<String, String> labels, long ttl, KeyStore keystore) throws TException {\n+  public String deliverReadToken(String appName, String producerUID, String ownerUID, java.util.List<java.lang.String> apps, Map<String, String> labels, long ttl, KeyStore keystore) throws TException {", "originalCommit": "f28a35fb7245fe8fdb1de81275657d212e317090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "chunk": "diff --git a/token/src/main/java/io/warp10/quasar/encoder/QuasarTokenEncoder.java b/token/src/main/java/io/warp10/quasar/encoder/QuasarTokenEncoder.java\nindex c0769aab..7a46a69e 100644\n--- a/token/src/main/java/io/warp10/quasar/encoder/QuasarTokenEncoder.java\n+++ b/token/src/main/java/io/warp10/quasar/encoder/QuasarTokenEncoder.java\n\n@@ -40,27 +40,27 @@ import java.util.UUID;\n \n public class QuasarTokenEncoder {\n \n-  public String deliverReadToken(String appName, String producerUID, String ownerUID, java.util.List<java.lang.String> apps, long ttl, KeyStore keystore) throws TException {\n+  public String deliverReadToken(String appName, String producerUID, String ownerUID, List<String> apps, long ttl, KeyStore keystore) throws TException {\n     ReadToken token = getReadToken(appName, producerUID, Arrays.asList(ownerUID), null, apps, null, null, ttl);\n     return cypherToken(token, keystore);\n   }\n \n-  public String deliverReadToken(String appName, String producerUID, String ownerUID, java.util.List<java.lang.String> apps, Map<String, String> labels, long ttl, KeyStore keystore) throws TException {\n+  public String deliverReadToken(String appName, String producerUID, String ownerUID, List<String> apps, Map<String, String> labels, long ttl, KeyStore keystore) throws TException {\n     ReadToken token = getReadToken(appName, producerUID, Arrays.asList(ownerUID), null, apps, labels, null, ttl);\n     return cypherToken(token, keystore);\n   }\n \n-  public String deliverReadToken(String appName, String producerUID, java.util.List<java.lang.String> owners, java.util.List<java.lang.String> apps, java.util.Map<java.lang.String, java.lang.String> hooks, long ttl, KeyStore keystore) throws TException {\n+  public String deliverReadToken(String appName, String producerUID, List<String> owners, List<String> apps, Map<String, String> hooks, long ttl, KeyStore keystore) throws TException {\n     ReadToken token = getReadToken(appName, producerUID, owners, null, apps, null, hooks, ttl);\n     return cypherToken(token, keystore);\n   }\n \n-  public String deliverReadToken(String appName, String producerUID, java.util.List<java.lang.String> owners, java.util.List<java.lang.String> apps,  Map<String, String> labels, java.util.Map<java.lang.String, java.lang.String> hooks, long ttl, KeyStore keystore) throws TException {\n+  public String deliverReadToken(String appName, String producerUID, List<String> owners, List<String> apps,  Map<String, String> labels, Map<String, String> hooks, long ttl, KeyStore keystore) throws TException {\n     ReadToken token = getReadToken(appName, producerUID, owners, null, apps, labels, hooks, ttl);\n     return cypherToken(token, keystore);\n   }\n \n-  public String deliverReadToken(String appName, String producerUID, java.util.List<java.lang.String> owners, java.util.List<java.lang.String> producers, java.util.List<java.lang.String> apps,  Map<String, String> labels, java.util.Map<java.lang.String, java.lang.String> hooks, long ttl, KeyStore keystore) throws TException {\n+  public String deliverReadToken(String appName, String producerUID, List<String> owners, List<String> producers, List<String> apps,  Map<String, String> labels, Map<String, String> hooks, long ttl, KeyStore keystore) throws TException {\n     ReadToken token = getReadToken(appName, producerUID, owners, producers, apps, labels, hooks, ttl);\n     return cypherToken(token, keystore);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNDk3MA==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537324970", "bodyText": "You are implicitly making the definition of the secret mandatory, which was not the case previously, any reason for this change?", "author": "hbs", "createdAt": "2020-12-07T08:44:48Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java", "diffHunk": "@@ -48,85 +48,93 @@\n \n   public static final String KEY_PARAMS = \"params\";\n \n-  private byte[] tokenAESKey = null;\n-  private byte[] tokenSipHashKey = null;\n+  private final byte[] keystoreTokenAESKey;\n+  private final byte[] keystoreTokenSipHashKey;\n \n-  private boolean multikey = false;\n+  /**\n+   * Whether the keystore used to initialize the keys is that of a Warp/WarpDist instance.\n+   * If true, a secret is needed to access the keystore keys.\n+   */\n+  private final boolean warpKeystore;\n \n-  public TOKENDUMP(String name) {\n+  public TOKENDUMP(String name, KeyStore keystore, boolean warpKeystore) {\n     super(name);\n-  }\n-\n-  public TOKENDUMP(String name, KeyStore keystore) {\n-    super(name);\n-    tokenAESKey = keystore.getKey(KeyStore.AES_TOKEN);\n-    tokenSipHashKey = keystore.getKey(KeyStore.SIPHASH_TOKEN);\n-  }\n-\n-  public TOKENDUMP(String name, boolean multikey) {\n-    super(name);\n-    this.multikey = multikey;\n+    if(null != keystore) {\n+      keystoreTokenAESKey = keystore.getKey(KeyStore.AES_TOKEN);\n+      keystoreTokenSipHashKey = keystore.getKey(KeyStore.SIPHASH_TOKEN);\n+    } else {\n+      keystoreTokenAESKey = null;\n+      keystoreTokenSipHashKey = null;\n+    }\n+    this.warpKeystore = warpKeystore;\n   }\n \n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    byte[] tokenAESKey = null;\n+    byte[] tokenSipHashKey = null;\n+    boolean customKeys = false;\n \n-    byte[] AESKey = tokenAESKey;\n-    byte[] SipHashKey = tokenSipHashKey;\n-\n-    if ((null == AESKey || null == SipHashKey) && !this.multikey) {\n-      throw new WarpScriptException(getName() + \" cannot be used in this context.\");\n-    }\n+    // First, check if SipHash and AES keys are explicitly defined. In that case, no need for secret.\n+    Object top = stack.pop();\n+    if (top instanceof byte[]) {\n+      customKeys = true;\n \n-    Object top = null;\n+      tokenSipHashKey = (byte[]) top;\n \n-    if (this.multikey) {\n       top = stack.pop();\n \n       if (!(top instanceof byte[])) {\n-        throw new WarpScriptException(getName() + \" expects a SipHash Key (a byte array).\");\n+        throw new WarpScriptException(getName() + \" expects a BYTES AES Key if a BYTES SipHash is given.\");\n       }\n \n-      SipHashKey = (byte[]) top;\n+      tokenAESKey = (byte[]) top;\n \n       top = stack.pop();\n+    }\n \n-      if (!(top instanceof byte[])) {\n-        throw new WarpScriptException(getName() + \" expects an AES Key (byte array).\");\n-      }\n-\n-      AESKey = (byte[]) top;\n-\n-      top = stack.pop();\n-    } else {\n-      //\n-      // A non null token secret was configured, check it\n-      //\n-      String secret = TokenWarpScriptExtension.TOKEN_SECRET;\n+    if (null == tokenAESKey) { // in that case we have also null == tokenSipHashKey\n+      // SipHash and AES keys are not explicitly defined, so we fall back to those of the keystore.\n+      // Check the secret if needed before the fallback.\n+      if (warpKeystore) {\n+        String secret = TokenWarpScriptExtension.TOKEN_SECRET;\n \n-      top = stack.pop();\n+        if (null == secret) {", "originalCommit": "f28a35fb7245fe8fdb1de81275657d212e317090", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxODYwNA==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537418604", "bodyText": "This was already the case before but if was not clearly stated:\nIn TokenWarpScriptExtension.java when there was no secret in the conf nor OSS, the keystore was null:\nif (null == TOKEN_SECRET) { // if no configuration key and if (null != ossHandledSecret) {...} else { keystore = null; }.\nWhen the keystore was null, the TokenWarpScriptExtension constructor added the TOKENGEN and TOKENDUMP without keystore. It resulted in both keys to be null and multikey to be left to false. Then in TOKENDUMP we had\nif ((null == AESKey || null == SipHashKey) && !this.multikey) {\n      throw new WarpScriptException(getName() + \" cannot be used in this context.\");\t\n}\n\nwhich resulted in an difficult-to-debug error message which in fact required the secret to be set.", "author": "ftence", "createdAt": "2020-12-07T11:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNDk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java b/warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java\nindex f6d43129..e897f6b8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java\n\n@@ -57,6 +57,12 @@ public class TOKENDUMP extends NamedWarpScriptFunction implements WarpScriptStac\n    */\n   private final boolean warpKeystore;\n \n+  /**\n+   * Create the TOKENDUMP function.\n+   * @param name The name of the function.\n+   * @param keystore The keystore containing the AES and SipHash keys to decode tokens when no such keys are given when applying this function.\n+   * @param warpKeystore Whether the given keystore is that of a Warp/WarpDist instance. If true, a secret is needed to access the keystore keys.\n+   */\n   public TOKENDUMP(String name, KeyStore keystore, boolean warpKeystore) {\n     super(name);\n     if(null != keystore) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNTgxOA==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537325818", "bodyText": "Describe the purpose of warpKeystore", "author": "hbs", "createdAt": "2020-12-07T08:46:13Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java", "diffHunk": "@@ -48,85 +48,93 @@\n \n   public static final String KEY_PARAMS = \"params\";\n \n-  private byte[] tokenAESKey = null;\n-  private byte[] tokenSipHashKey = null;\n+  private final byte[] keystoreTokenAESKey;\n+  private final byte[] keystoreTokenSipHashKey;\n \n-  private boolean multikey = false;\n+  /**\n+   * Whether the keystore used to initialize the keys is that of a Warp/WarpDist instance.\n+   * If true, a secret is needed to access the keystore keys.\n+   */\n+  private final boolean warpKeystore;\n \n-  public TOKENDUMP(String name) {\n+  public TOKENDUMP(String name, KeyStore keystore, boolean warpKeystore) {", "originalCommit": "f28a35fb7245fe8fdb1de81275657d212e317090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java b/warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java\nindex f6d43129..e897f6b8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java\n\n@@ -57,6 +57,12 @@ public class TOKENDUMP extends NamedWarpScriptFunction implements WarpScriptStac\n    */\n   private final boolean warpKeystore;\n \n+  /**\n+   * Create the TOKENDUMP function.\n+   * @param name The name of the function.\n+   * @param keystore The keystore containing the AES and SipHash keys to decode tokens when no such keys are given when applying this function.\n+   * @param warpKeystore Whether the given keystore is that of a Warp/WarpDist instance. If true, a secret is needed to access the keystore keys.\n+   */\n   public TOKENDUMP(String name, KeyStore keystore, boolean warpKeystore) {\n     super(name);\n     if(null != keystore) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNTk5NQ==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537325995", "bodyText": "Describe the purpose of warpKeystore", "author": "hbs", "createdAt": "2020-12-07T08:46:28Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -57,79 +57,76 @@\n   public static final String KEY_PRODUCER = \"producer\";\n   public static final String KEY_APPLICATIONS = \"applications\";\n \n-  private long DEFAULT_TTL = 0;\n+  private final byte[] keystoreTokenAESKey;\n+  private final byte[] keystoreTokenSipHashKey;\n \n-  private byte[] tokenAESKey = null;\n-  private byte[] tokenSipHashKey = null;\n-  private boolean multikey = false;\n+  /**\n+   * Whether the keystore used to initialize the keys is that of a Warp/WarpDist instance.\n+   * If true, a secret is needed to access the keystore keys.\n+   */\n+  private final boolean warpKeystore;\n \n-  public TOKENGEN(String name) {\n+  public TOKENGEN(String name, KeyStore keystore, boolean warpKeystore) {", "originalCommit": "f28a35fb7245fe8fdb1de81275657d212e317090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\nindex 00a34f31..915ce1f5 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n\n@@ -57,6 +57,8 @@ public class TOKENGEN extends NamedWarpScriptFunction implements WarpScriptStack\n   public static final String KEY_PRODUCER = \"producer\";\n   public static final String KEY_APPLICATIONS = \"applications\";\n \n+  private static final long DEFAULT_TTL = 0;\n+\n   private final byte[] keystoreTokenAESKey;\n   private final byte[] keystoreTokenSipHashKey;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyODA0Mg==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537328042", "bodyText": "You should leave the DEFAULT_TTL constant in the class and use it here instead of 0L", "author": "hbs", "createdAt": "2020-12-07T08:49:45Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -139,10 +136,10 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Map<Object, Object> params = (Map<Object, Object>) top;\n \n     try {\n-      TBase token = tokenFromMap(params);\n+      TBase token = tokenFromMap(params, getName(), 0L);", "originalCommit": "f28a35fb7245fe8fdb1de81275657d212e317090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\nindex 00a34f31..915ce1f5 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n\n@@ -136,7 +144,7 @@ public class TOKENGEN extends NamedWarpScriptFunction implements WarpScriptStack\n     Map<Object, Object> params = (Map<Object, Object>) top;\n \n     try {\n-      TBase token = tokenFromMap(params, getName(), 0L);\n+      TBase token = tokenFromMap(params, getName(), DEFAULT_TTL);\n \n       String tokenstr = encoder.encryptToken(token, tokenAESKey, tokenSipHashKey);\n       String ident = encoder.getTokenIdent(tokenstr, tokenSipHashKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyODY4NA==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537328684", "bodyText": "extraneous ' ' before ':'", "author": "hbs", "createdAt": "2020-12-07T08:50:48Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -241,23 +238,23 @@ public TBase tokenFromMap(Map params) throws WarpScriptException {\n \n       if (null != params.get(KEY_ATTRIBUTES)) {\n         if (!(params.get(KEY_ATTRIBUTES) instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n+          throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n         }\n-        for (Entry<Object, Object> entry: ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n+        for (Entry<Object, Object> entry : ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {", "originalCommit": "f28a35fb7245fe8fdb1de81275657d212e317090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\nindex 00a34f31..915ce1f5 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n\n@@ -240,7 +248,7 @@ public class TOKENGEN extends NamedWarpScriptFunction implements WarpScriptStack\n         if (!(params.get(KEY_ATTRIBUTES) instanceof Map)) {\n           throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n         }\n-        for (Entry<Object, Object> entry : ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n+        for (Entry<Object, Object> entry: ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n           if (!(entry.getKey() instanceof String) || !(entry.getValue() instanceof String)) {\n             throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map of STRING keys and values.\");\n           }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyODg0OA==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537328848", "bodyText": "extraneous ' ' before ':'", "author": "hbs", "createdAt": "2020-12-07T08:51:02Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -241,23 +238,23 @@ public TBase tokenFromMap(Map params) throws WarpScriptException {\n \n       if (null != params.get(KEY_ATTRIBUTES)) {\n         if (!(params.get(KEY_ATTRIBUTES) instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n+          throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n         }\n-        for (Entry<Object, Object> entry: ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n+        for (Entry<Object, Object> entry : ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n           if (!(entry.getKey() instanceof String) || !(entry.getValue() instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map of STRING keys and values.\");\n+            throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map of STRING keys and values.\");\n           }\n           rtoken.putToAttributes(entry.getKey().toString(), entry.getValue().toString());\n         }\n       }\n \n       if (null != params.get(KEY_LABELS)) {\n         if (!(params.get(KEY_LABELS) instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects '\" + KEY_LABELS + \"' to be a map.\");\n+          throw new WarpScriptException(name + \" expects '\" + KEY_LABELS + \"' to be a map.\");\n         }\n-        for (Entry<Object, Object> entry: ((Map<Object, Object>) params.get(KEY_LABELS)).entrySet()) {\n+        for (Entry<Object, Object> entry : ((Map<Object, Object>) params.get(KEY_LABELS)).entrySet()) {", "originalCommit": "f28a35fb7245fe8fdb1de81275657d212e317090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\nindex 00a34f31..915ce1f5 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n\n@@ -240,7 +248,7 @@ public class TOKENGEN extends NamedWarpScriptFunction implements WarpScriptStack\n         if (!(params.get(KEY_ATTRIBUTES) instanceof Map)) {\n           throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n         }\n-        for (Entry<Object, Object> entry : ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n+        for (Entry<Object, Object> entry: ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n           if (!(entry.getKey() instanceof String) || !(entry.getValue() instanceof String)) {\n             throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map of STRING keys and values.\");\n           }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyOTEyNw==", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537329127", "bodyText": "0L == defaultTTL (as later in the file)", "author": "hbs", "createdAt": "2020-12-07T08:51:30Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -191,17 +188,17 @@ public TBase tokenFromMap(Map params) throws WarpScriptException {\n         }\n       } else if (null != params.get(KEY_EXPIRY)) {\n         rtoken.setExpiryTimestamp(((Number) params.get(KEY_EXPIRY)).longValue());\n-      } else if (0 == DEFAULT_TTL) {\n-        throw new WarpScriptException(getName() + \" missing '\" + KEY_TTL + \"' or '\" + KEY_EXPIRY + \"'.\");\n+      } else if (0 == defaultTtl) {", "originalCommit": "f28a35fb7245fe8fdb1de81275657d212e317090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\nindex 00a34f31..915ce1f5 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java\n\n@@ -188,7 +196,7 @@ public class TOKENGEN extends NamedWarpScriptFunction implements WarpScriptStack\n         }\n       } else if (null != params.get(KEY_EXPIRY)) {\n         rtoken.setExpiryTimestamp(((Number) params.get(KEY_EXPIRY)).longValue());\n-      } else if (0 == defaultTtl) {\n+      } else if (0L == defaultTtl) {\n         throw new WarpScriptException(name + \" missing '\" + KEY_TTL + \"' or '\" + KEY_EXPIRY + \"'.\");\n       } else {\n         rtoken.setExpiryTimestamp(rtoken.getIssuanceTimestamp() + defaultTtl);\n"}}, {"oid": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "url": "https://github.com/senx/warp10-platform/commit/6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "message": "Code style, comments and imports", "committedDate": "2020-12-07T11:13:19Z", "type": "commit"}]}