{"pr_number": 691, "pr_title": "Added configuration of macro cache size", "pr_createdAt": "2020-03-11T13:39:08Z", "pr_url": "https://github.com/senx/warp10-platform/pull/691", "timeline": [{"oid": "c63707a69e642d51021402a96fc8980e45a8191a", "url": "https://github.com/senx/warp10-platform/commit/c63707a69e642d51021402a96fc8980e45a8191a", "message": "Added configuration of macro cache size", "committedDate": "2020-03-11T13:38:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDA1NQ==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r392934055", "bodyText": "What about a warning somewhere in the logs to tell user that some macro are not in the cache ?", "author": "pi-r-p", "createdAt": "2020-03-16T10:53:06Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java", "diffHunk": "@@ -46,8 +49,25 @@\n  * TODO(hbs): add support for secure script (the keystore is not initialized)\n  */\n public class WarpScriptMacroLibrary {\n-  private static final Map<String,Macro> macros = new HashMap<String, Macro>();\n+  private static final Map<String,Macro> macros;\n   \n+  private static final int DEFAULT_CACHE_SIZE = 10000;\n+  \n+  static {\n+    //\n+    // Create macro map\n+    //\n+    \n+    final int maxcachesize = Integer.parseInt(WarpConfig.getProperty(Configuration.WARPSCRIPT_LIBRARY_CACHE_SIZE, Integer.toString(DEFAULT_CACHE_SIZE)));\n+    \n+    macros = new LinkedHashMap<String,Macro>() {\n+      @Override\n+      protected boolean removeEldestEntry(java.util.Map.Entry<String,Macro> eldest) {\n+        return this.size() > maxcachesize;\n+      }\n+    };\n+", "originalCommit": "c63707a69e642d51021402a96fc8980e45a8191a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjgwOA==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r392936808", "bodyText": "This warning would be written every time a macro would be loaded once you reach the limit. Setting a Sensision metric with the number of cached macros is probably a better option.", "author": "hbs", "createdAt": "2020-03-16T10:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxODAwNA==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r393018004", "bodyText": "Indeed. With 10000 as default, I doubt this will happen too often.", "author": "pi-r-p", "createdAt": "2020-03-16T13:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzE5NA==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r393333194", "bodyText": "Upated.", "author": "hbs", "createdAt": "2020-03-16T21:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "662c0aa5dd6c10d91f9eb1b398e6f1f263a581d1", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java b/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\nindex 7f7f549b..1d54f0fa 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\n\n@@ -49,25 +53,50 @@ import sun.net.www.protocol.file.FileURLConnection;\n  * TODO(hbs): add support for secure script (the keystore is not initialized)\n  */\n public class WarpScriptMacroLibrary {\n+  \n+  private static final Logger LOG = LoggerFactory.getLogger(WarpScriptMacroLibrary.class);\n+  \n   private static final Map<String,Macro> macros;\n   \n   private static final int DEFAULT_CACHE_SIZE = 10000;\n   \n+  /**\n+   * Default TTL for macros loaded on demand\n+   */\n+  private static final long DEFAULT_MACRO_TTL = 600000L;\n+  \n+  /**\n+   * Default TTL for loaded macros\n+   */\n+  private static long ttl = DEFAULT_MACRO_TTL;\n+  \n+  /**\n+   * Maximum TTL for loaded macros\n+   */\n+  private static long hardTtl = Long.MAX_VALUE >> 2;\n+  \n+  private static final int maxcachesize;\n+  \n   static {\n     //\n     // Create macro map\n     //\n     \n-    final int maxcachesize = Integer.parseInt(WarpConfig.getProperty(Configuration.WARPSCRIPT_LIBRARY_CACHE_SIZE, Integer.toString(DEFAULT_CACHE_SIZE)));\n+    maxcachesize = Integer.parseInt(WarpConfig.getProperty(Configuration.WARPSCRIPT_LIBRARY_CACHE_SIZE, Integer.toString(DEFAULT_CACHE_SIZE)));\n     \n     macros = new LinkedHashMap<String,Macro>() {\n       @Override\n       protected boolean removeEldestEntry(java.util.Map.Entry<String,Macro> eldest) {\n-        return this.size() > maxcachesize;\n+        int size = this.size();\n+        Sensision.set(SensisionConstants.SENSISION_CLASS_WARPSCRIPT_LIBRARY_CACHED, Sensision.EMPTY_LABELS, size);\n+        return size > maxcachesize;\n       }\n     };\n \n+    ttl = Long.parseLong(WarpConfig.getProperty(Configuration.WARPSCRIPT_LIBRARY_TTL, Long.toString(DEFAULT_MACRO_TTL)));\n+    hardTtl = Long.parseLong(WarpConfig.getProperty(Configuration.WARPSCRIPT_LIBRARY_TTL_HARD, Long.toString(Long.MAX_VALUE >>> 2)));\n   }\n+  \n   public static void addJar(String path) throws WarpScriptException {\n     addJar(path, null);\n   }\n"}}, {"oid": "188246d615980b0a1e54b2ac93931dc1a9cc7ad2", "url": "https://github.com/senx/warp10-platform/commit/188246d615980b0a1e54b2ac93931dc1a9cc7ad2", "message": "Cleaned imports", "committedDate": "2020-03-16T13:41:07Z", "type": "commit"}, {"oid": "8b6b6874dae317f1b25e15725cc8cd4851f9fe44", "url": "https://github.com/senx/warp10-platform/commit/8b6b6874dae317f1b25e15725cc8cd4851f9fe44", "message": "Cleaned imports", "committedDate": "2020-03-16T13:41:19Z", "type": "commit"}, {"oid": "19cbb4dbdba8501ae7f522eb8536ecd1b55c9076", "url": "https://github.com/senx/warp10-platform/commit/19cbb4dbdba8501ae7f522eb8536ecd1b55c9076", "message": "Added metric for tracking the size of the WarpFleet macros cache", "committedDate": "2020-03-16T13:44:04Z", "type": "commit"}, {"oid": "662c0aa5dd6c10d91f9eb1b398e6f1f263a581d1", "url": "https://github.com/senx/warp10-platform/commit/662c0aa5dd6c10d91f9eb1b398e6f1f263a581d1", "message": "Added TTL enforcement for library macros and reporting metrics", "committedDate": "2020-03-16T17:27:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4Nzc3Mg==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r395687772", "bodyText": "Unused import.", "author": "ftence", "createdAt": "2020-03-20T14:50:12Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java", "diffHunk": "@@ -30,13 +27,23 @@\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Enumeration;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Properties;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.continuum.Configuration;\n+import io.warp10.continuum.sensision.SensisionConstants;\n+import io.warp10.script.WarpScriptStack.Macro;\n+import io.warp10.script.functions.INCLUDE;\n+import io.warp10.sensision.Sensision;\n+import jline.internal.Log;", "originalCommit": "662c0aa5dd6c10d91f9eb1b398e6f1f263a581d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6db240fe8ee227b0be2803752a39ab98a695f068", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java b/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\nindex 1d54f0fa..a74bd9ae 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\n\n@@ -43,7 +43,6 @@ import io.warp10.continuum.sensision.SensisionConstants;\n import io.warp10.script.WarpScriptStack.Macro;\n import io.warp10.script.functions.INCLUDE;\n import io.warp10.sensision.Sensision;\n-import jline.internal.Log;\n import sun.net.www.protocol.file.FileURLConnection;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNTc0OQ==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r395705749", "bodyText": "Why not checking for overflow and not setting expiry if it overflows?", "author": "ftence", "createdAt": "2020-03-20T15:16:19Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java", "diffHunk": "@@ -185,6 +237,20 @@ public static Macro loadMacro(Object root, InputStream in, String name) throws W\n       macro.setSecure(true);\n       macro.setNameRecursive(name);\n       \n+      long macroTtl = ttl;\n+      \n+      if (null != stack.getAttribute(WarpScriptStack.ATTRIBUTE_MACRO_TTL)) {\n+        macroTtl = (long) stack.getAttribute(WarpScriptStack.ATTRIBUTE_MACRO_TTL);\n+      }\n+      \n+      if (macroTtl > hardTtl) {\n+        macroTtl = hardTtl;\n+      }\n+\n+      // Set expiry. Note using a ttl too long will wrap around the sum and will\n+      // make the macro expire too early\n+      macro.setExpiry(System.currentTimeMillis() + ttl);", "originalCommit": "662c0aa5dd6c10d91f9eb1b398e6f1f263a581d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6db240fe8ee227b0be2803752a39ab98a695f068", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java b/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\nindex 1d54f0fa..a74bd9ae 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java\n\n@@ -249,7 +251,12 @@ public class WarpScriptMacroLibrary {\n \n       // Set expiry. Note using a ttl too long will wrap around the sum and will\n       // make the macro expire too early\n-      macro.setExpiry(System.currentTimeMillis() + ttl);\n+      \n+      try {\n+        macro.setExpiry(Math.addExact(System.currentTimeMillis(), ttl));\n+      } catch (ArithmeticException ae) {\n+        macro.setExpiry(Long.MAX_VALUE - 1);\n+      }\n \n       return macro;\n     } catch (IOException ioe) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNjg1Nw==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r395706857", "bodyText": "Is there a reason there is a sensision metric for the library and not for the repo?", "author": "ftence", "createdAt": "2020-03-20T15:17:55Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java", "diffHunk": "@@ -102,8 +104,24 @@\n   /**\n    * Actual macros\n    */\n-  private final static Map<String,Macro> macros = new HashMap<String,Macro>();\n+  private final static Map<String,Macro> macros;\n  \n+  private static final int DEFAULT_CACHE_SIZE = 10000;\n+  \n+  static {\n+    //\n+    // Create macro map\n+    //\n+    \n+    final int maxcachesize = Integer.parseInt(WarpConfig.getProperty(Configuration.REPOSITORY_CACHE_SIZE, Integer.toString(DEFAULT_CACHE_SIZE)));\n+    \n+    macros = new LinkedHashMap<String,Macro>() {\n+      @Override\n+      protected boolean removeEldestEntry(java.util.Map.Entry<String,Macro> eldest) {\n+        return this.size() > maxcachesize;", "originalCommit": "662c0aa5dd6c10d91f9eb1b398e6f1f263a581d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcxNjQ3MQ==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r395716471", "bodyText": "Same question for logging evicted macros.", "author": "ftence", "createdAt": "2020-03-20T15:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNjg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTE5Mw==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r395729193", "bodyText": "Macros which are evicted upon loading of a jar will never get re-added. In the case of the repo, when ondemand is true the macros will get loaded anyway. The ondemand param is true by default so we could log eviction only when it is false.", "author": "hbs", "createdAt": "2020-03-20T15:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNjg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6db240fe8ee227b0be2803752a39ab98a695f068", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java b/warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java\nindex 88d59f3a..e58b1587 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java\n\n@@ -108,17 +114,21 @@ public class WarpScriptMacroRepository extends Thread {\n  \n   private static final int DEFAULT_CACHE_SIZE = 10000;\n   \n+  private static int maxcachesize;\n+  \n   static {\n     //\n     // Create macro map\n     //\n     \n-    final int maxcachesize = Integer.parseInt(WarpConfig.getProperty(Configuration.REPOSITORY_CACHE_SIZE, Integer.toString(DEFAULT_CACHE_SIZE)));\n+    maxcachesize = Integer.parseInt(WarpConfig.getProperty(Configuration.REPOSITORY_CACHE_SIZE, Integer.toString(DEFAULT_CACHE_SIZE)));\n     \n     macros = new LinkedHashMap<String,Macro>() {\n       @Override\n       protected boolean removeEldestEntry(java.util.Map.Entry<String,Macro> eldest) {\n-        return this.size() > maxcachesize;\n+        int size = this.size();\n+        Sensision.set(SensisionConstants.SENSISION_CLASS_WARPSCRIPT_REPOSITORY_MACROS, Sensision.EMPTY_LABELS, size);\n+        return size > maxcachesize;\n       }\n     };\n   }\n"}}, {"oid": "da995854ceb953819f33e9ef96cac159f1d03b08", "url": "https://github.com/senx/warp10-platform/commit/da995854ceb953819f33e9ef96cac159f1d03b08", "message": "Resolved conflict", "committedDate": "2020-03-20T19:58:13Z", "type": "commit"}, {"oid": "6db240fe8ee227b0be2803752a39ab98a695f068", "url": "https://github.com/senx/warp10-platform/commit/6db240fe8ee227b0be2803752a39ab98a695f068", "message": "Addressed PR comments", "committedDate": "2020-03-20T20:14:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNjU5Mg==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r396506592", "bodyText": "Could be final.", "author": "ftence", "createdAt": "2020-03-23T14:48:01Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java", "diffHunk": "@@ -108,17 +114,21 @@\n  \n   private static final int DEFAULT_CACHE_SIZE = 10000;\n   \n+  private static int maxcachesize;", "originalCommit": "6db240fe8ee227b0be2803752a39ab98a695f068", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ab5acff0db1ad8140ac5c04f158d08e5db42225", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java b/warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java\nindex e58b1587..0d9c3fed 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptMacroRepository.java\n\n@@ -114,7 +114,7 @@ public class WarpScriptMacroRepository extends Thread {\n  \n   private static final int DEFAULT_CACHE_SIZE = 10000;\n   \n-  private static int maxcachesize;\n+  private static final int maxcachesize;\n   \n   static {\n     //\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNTE2MA==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r396515160", "bodyText": "Why Long.MAX_VALUE - 1 and not Long.MAX_VALUE?", "author": "ftence", "createdAt": "2020-03-23T14:58:48Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptMacroLibrary.java", "diffHunk": "@@ -249,7 +251,12 @@ public static Macro loadMacro(Object root, InputStream in, String name) throws W\n \n       // Set expiry. Note using a ttl too long will wrap around the sum and will\n       // make the macro expire too early\n-      macro.setExpiry(System.currentTimeMillis() + ttl);\n+      \n+      try {\n+        macro.setExpiry(Math.addExact(System.currentTimeMillis(), ttl));\n+      } catch (ArithmeticException ae) {\n+        macro.setExpiry(Long.MAX_VALUE - 1);", "originalCommit": "6db240fe8ee227b0be2803752a39ab98a695f068", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzMTkyNA==", "url": "https://github.com/senx/warp10-platform/pull/691#discussion_r396531924", "bodyText": "To avoid having weird comparison results if checking with >", "author": "hbs", "createdAt": "2020-03-23T15:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNTE2MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6ab5acff0db1ad8140ac5c04f158d08e5db42225", "url": "https://github.com/senx/warp10-platform/commit/6ab5acff0db1ad8140ac5c04f158d08e5db42225", "message": "Maded maxcachesie final", "committedDate": "2020-03-23T15:21:41Z", "type": "commit"}]}