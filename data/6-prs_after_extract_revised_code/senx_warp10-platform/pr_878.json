{"pr_number": 878, "pr_title": "Add capabilities to tokens", "pr_createdAt": "2020-11-26T16:33:26Z", "pr_url": "https://github.com/senx/warp10-platform/pull/878", "timeline": [{"oid": "51884a8c5d38507a73eb43b5ed242e38fd219e47", "url": "https://github.com/senx/warp10-platform/commit/51884a8c5d38507a73eb43b5ed242e38fd219e47", "message": "Initial commit", "committedDate": "2020-11-26T16:31:17Z", "type": "commit"}, {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298", "url": "https://github.com/senx/warp10-platform/commit/4890d59f9fcc97bd7e0d79d42d9d260438844298", "message": "Added support for WRITE tokens in CAPADD", "committedDate": "2020-11-27T12:18:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4MjQyNg==", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531682426", "bodyText": "Why it does not override already present capabilities?", "author": "ftence", "createdAt": "2020-11-27T16:13:20Z", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPADD.java", "diffHunk": "@@ -0,0 +1,81 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import io.warp10.continuum.Tokens;\n+import io.warp10.quasar.token.thrift.data.ReadToken;\n+import io.warp10.quasar.token.thrift.data.WriteToken;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPADD extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public CAPADD(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a TOKEN.\");\n+    }\n+\n+    String token = (String) top;\n+\n+    Map<String,String> attributes = null;\n+\n+    try {\n+      ReadToken rtoken = Tokens.extractReadToken(token);\n+      attributes = rtoken.getAttributes();\n+    } catch (Exception e) {\n+      try {\n+        WriteToken wtoken = Tokens.extractWriteToken(token);\n+        attributes = wtoken.getAttributes();\n+      } catch (Exception ee) {\n+        throw new WarpScriptException(getName() + \" invalid token.\");\n+      }\n+    }\n+\n+    if (null != attributes && !attributes.isEmpty()) {\n+      Capabilities capabilities = null;\n+\n+      if (stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        capabilities = (Capabilities) stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR);\n+      }\n+\n+      for (Entry<String,String> entry: attributes.entrySet()) {\n+        if (entry.getKey().startsWith(CapabilitiesWarpScriptExtension.CAPABILITIES_PREFIX)) {\n+          if (null == capabilities) {\n+            capabilities = new Capabilities();\n+            stack.setAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR, capabilities);\n+          }\n+          capabilities.capabilities.putIfAbsent(entry.getKey().substring(CapabilitiesWarpScriptExtension.CAPABILITIES_PREFIX.length()), entry.getValue());", "originalCommit": "4890d59f9fcc97bd7e0d79d42d9d260438844298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4NjgzOQ==", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531786839", "bodyText": "Because if you override you cannot selectively add capabilities from a given token, wherease by combining CAPADD with the current behavior and CAPDEL you can select which capabilities will be (artificially since you actually delete them first) overridden.", "author": "hbs", "createdAt": "2020-11-27T21:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4MjQyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4Mjg0Mw==", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531682843", "bodyText": "A WarpScriptException would be helpful here.", "author": "ftence", "createdAt": "2020-11-27T16:14:18Z", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPCHECK.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPCHECK extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public CAPCHECK(String name) {\n+    super(name);\n+  }\n+  \n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object top = stack.pop();\n+\n+    if (top instanceof String) {      \n+      Capabilities capabilities = null;\n+      \n+      if (stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        capabilities = (Capabilities) stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR);\n+        stack.push(capabilities.capabilities.containsKey((String) top));\n+      } else {\n+        stack.push(false);\n+      }\n+    } else {\n+      stack.push(false);", "originalCommit": "4890d59f9fcc97bd7e0d79d42d9d260438844298", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ce5085b96f7ea5fb634b48d9e569bd2b52866ab", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPCHECK.java b/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPCHECK.java\nindex 22d3782a..1fcc3903 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPCHECK.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPCHECK.java\n\n@@ -22,19 +22,19 @@ import io.warp10.script.WarpScriptStack;\n import io.warp10.script.WarpScriptStackFunction;\n \n public class CAPCHECK extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n-  \n+\n   public CAPCHECK(String name) {\n     super(name);\n   }\n-  \n+\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n \n     Object top = stack.pop();\n \n-    if (top instanceof String) {      \n+    if (top instanceof String) {\n       Capabilities capabilities = null;\n-      \n+\n       if (stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR) instanceof Capabilities) {\n         capabilities = (Capabilities) stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR);\n         stack.push(capabilities.capabilities.containsKey((String) top));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NTc3Mg==", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531685772", "bodyText": "I would find NULL CAPDEL to clear all capabilities to be less error-prone than [] CAPDEL: having an empty list could happen, having a NULL capability key is much less likely.", "author": "ftence", "createdAt": "2020-11-27T16:21:39Z", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPDEL.java", "diffHunk": "@@ -0,0 +1,65 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.List;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPDEL extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public CAPDEL(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object top = stack.pop();\n+\n+    Capabilities capabilities = null;\n+\n+    if (stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR) instanceof Capabilities) {\n+      capabilities = (Capabilities) stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR);\n+    }\n+\n+    if (top instanceof String) {\n+      if (null != capabilities) {\n+        capabilities.capabilities.remove((String) top);\n+      }\n+    } else if (top instanceof List) {\n+      if (null != capabilities) {\n+        if (((List) top).isEmpty()) {", "originalCommit": "4890d59f9fcc97bd7e0d79d42d9d260438844298", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ce5085b96f7ea5fb634b48d9e569bd2b52866ab", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPDEL.java b/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPDEL.java\nindex 94f1eaa3..65728d53 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPDEL.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPDEL.java\n\n@@ -46,18 +46,18 @@ public class CAPDEL extends NamedWarpScriptFunction implements WarpScriptStackFu\n       }\n     } else if (top instanceof List) {\n       if (null != capabilities) {\n-        if (((List) top).isEmpty()) {\n-          capabilities.capabilities.clear();\n-        } else {\n-          for (Object elt: (List) top) {\n-            if (elt instanceof String) {\n-              capabilities.capabilities.remove((String) elt);\n-            }\n+        for (Object elt: (List) top) {\n+          if (elt instanceof String) {\n+            capabilities.capabilities.remove((String) elt);\n           }\n         }\n       }\n+    } else if (null == top) {\n+      if (null != capabilities) {\n+        capabilities.capabilities.clear();\n+      }\n     } else {\n-      throw new WarpScriptException(getName() + \" expects a capability name (STRING) or a LIST thereof.\");\n+      throw new WarpScriptException(getName() + \" expects a capability name (STRING), a LIST thereof or NULL.\");\n     }\n \n     return stack;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NzI0Mw==", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531687243", "bodyText": "top could also be null, Capabilities.get would behave the same.", "author": "ftence", "createdAt": "2020-11-27T16:25:13Z", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPGET.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPGET extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public CAPGET(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (top instanceof String) {\n+      stack.push(Capabilities.get(stack, (String) top));\n+    } else if (top instanceof List) {", "originalCommit": "4890d59f9fcc97bd7e0d79d42d9d260438844298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4ODE1Mg==", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531788152", "bodyText": "Changed the behavior so only null returns the full set of capabilities, if a list is passed, only those in the list are.", "author": "hbs", "createdAt": "2020-11-27T21:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NzI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4ce5085b96f7ea5fb634b48d9e569bd2b52866ab", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPGET.java b/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPGET.java\nindex 686c5578..81341d56 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPGET.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/capabilities/CAPGET.java\n\n@@ -39,7 +39,7 @@ public class CAPGET extends NamedWarpScriptFunction implements WarpScriptStackFu\n \n     if (top instanceof String) {\n       stack.push(Capabilities.get(stack, (String) top));\n-    } else if (top instanceof List) {\n+    } else if (top instanceof List || null == top) {\n       stack.push(Capabilities.get(stack, (List) top));\n     } else {\n       throw new WarpScriptException(getName() + \" expects a capability name (STRING) or a LIST thereof.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4ODIxNg==", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531688216", "bodyText": "You should also add a put method, currently in CAPADD to be consistent.", "author": "ftence", "createdAt": "2020-11-27T16:27:39Z", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/Capabilities.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.WarpScriptStack;\n+\n+/**\n+ * This class is there only to prevent the capabilities map from being accessible\n+ * on the stack after a STACKATTRIBUTE call so capabilities cannot be added manually.\n+ *\n+ */\n+public class Capabilities {", "originalCommit": "4890d59f9fcc97bd7e0d79d42d9d260438844298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4NzAxMg==", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531787012", "bodyText": "Getting capabilities is something meant to be done by functions, adding (put) capabilities is only performed by CAPADD.", "author": "hbs", "createdAt": "2020-11-27T21:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4ODIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "4ce5085b96f7ea5fb634b48d9e569bd2b52866ab", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/capabilities/Capabilities.java b/warp10/src/main/java/io/warp10/script/ext/capabilities/Capabilities.java\nindex b0a65329..9eb54cc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/capabilities/Capabilities.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/capabilities/Capabilities.java\n\n@@ -52,7 +52,7 @@ public class Capabilities {\n \n     Map<String,String> caps = new LinkedHashMap<String,String>();\n     if (null != capabilities) {\n-      if (null == names || names.isEmpty()) {\n+      if (null == names) {\n         caps.putAll(capabilities.capabilities);\n       } else {\n         for (Object elt: names) {\n"}}, {"oid": "4ce5085b96f7ea5fb634b48d9e569bd2b52866ab", "url": "https://github.com/senx/warp10-platform/commit/4ce5085b96f7ea5fb634b48d9e569bd2b52866ab", "message": "Addressed PR comments", "committedDate": "2020-11-27T21:21:07Z", "type": "commit"}]}